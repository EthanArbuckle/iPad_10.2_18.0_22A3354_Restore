void MT3BSegmentProducer::MT3BSegmentProducer(uint64_t a1, uint64_t a2, MT3BSegmentProducer *this, __int16 *a4)
{
  unint64_t v5;
  void *v6;
  void *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  __int16 *v13;
  int v14;
  __int16 v15;
  int v16;
  unsigned int v17;
  __int16 v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  __int16 v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  __int16 v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  __int16 v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  __int16 v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  int v41;
  unsigned int v42;

  *(_QWORD *)a1 = &off_1E9365528;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = this;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 28927;
  *(_BYTE *)(a1 + 98) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 282) = 4096;
  v5 = 1374389535 * (a4[6] << 13);
  *(_WORD *)(a1 + 280) = (v5 >> 37) + (v5 >> 63);
  v6 = &MT3BSegmentProducer::sHPNoise;
  if (a4[30] == 1)
    v6 = &MT3BSegmentProducer::sNoiseWave;
  if (a4[30])
    v7 = v6;
  else
    v7 = &MT3BSegmentProducer::sBandNoise;
  *(_QWORD *)(a1 + 296) = v7;
  *(_QWORD *)(a1 + 116) = 0;
  *(_QWORD *)(a1 + 132) = 0;
  *(_WORD *)(a1 + 114) = 0;
  v8 = a4[8];
  if (v8 >= 801)
  {
    v8 = MTBEParam::HzToPitch(this, a4[8]);
    this = *(MT3BSegmentProducer **)(a1 + 16);
    a4 = *(__int16 **)(a1 + 24);
  }
  v9 = MTBEParam::HzToPitch(this, a4[10]);
  v10 = MTBEParam::HzToPitch(*(MTBEParam **)(a1 + 16), *(__int16 *)(*(_QWORD *)(a1 + 24) + 24));
  v11 = MTBEParam::HzToPitch(*(MTBEParam **)(a1 + 16), 0x125Cu);
  v12 = MTBEParam::HzToPitch(*(MTBEParam **)(a1 + 16), *(__int16 *)(*(_QWORD *)(a1 + 24) + 32));
  *(_WORD *)(a1 + 276) = v12;
  v13 = *(__int16 **)(a1 + 24);
  v14 = v13[9];
  if (v14 >= 1225)
    v14 = 1225;
  if (v14 <= 50)
    v15 = 50;
  else
    v15 = v14;
  if (v8 <= 256)
    v16 = 256;
  else
    v16 = v8;
  v17 = (unsigned __int16)(v15 - 50) / 5u;
  v18 = sCcoeffTbl[v17];
  *(_WORD *)(a1 + 220) = v18;
  v19 = sBcoeffTbl[v17] * sCosTbl[v16 - 256];
  *(_WORD *)(a1 + 218) = v19 >> 12;
  *(_WORD *)(a1 + 216) = 0x2000 - (v18 + (v19 >> 12));
  v20 = v13[11];
  if (v20 >= 1225)
    v20 = 1225;
  if (v20 <= 50)
    LOWORD(v20) = 50;
  if (v9 <= 256)
    v21 = 256;
  else
    v21 = v9;
  v22 = (unsigned __int16)(v20 - 50) / 5u;
  v23 = sCcoeffTbl[v22];
  *(_WORD *)(a1 + 238) = v23;
  v24 = sBcoeffTbl[v22] * sCosTbl[v21 - 256];
  *(_WORD *)(a1 + 236) = v24 >> 12;
  *(_WORD *)(a1 + 234) = (3200 * (__int16)(0x2000 - (v23 + (v24 >> 12)))) >> 13;
  v25 = v13[13];
  if (v25 >= 1225)
    v25 = 1225;
  if (v25 <= 50)
    LOWORD(v25) = 50;
  if (v10 <= 256)
    v26 = 256;
  else
    v26 = v10;
  v27 = (unsigned __int16)(v25 - 50) / 5u;
  v28 = sCcoeffTbl[v27];
  *(_WORD *)(a1 + 226) = v28;
  v29 = sBcoeffTbl[v27] * sCosTbl[v26 - 256];
  *(_WORD *)(a1 + 224) = v29 >> 12;
  *(_WORD *)(a1 + 222) = (3200 * (__int16)(0x2000 - (v28 + (v29 >> 12)))) >> 13;
  v30 = v13[15];
  if (v30 >= 1225)
    v30 = 1225;
  if (v30 <= 50)
    LOWORD(v30) = 50;
  if (v11 <= 256)
    v31 = 256;
  else
    v31 = v11;
  v32 = (unsigned __int16)(v30 - 50) / 5u;
  v33 = sCcoeffTbl[v32];
  *(_WORD *)(a1 + 232) = v33;
  v34 = sBcoeffTbl[v32] * sCosTbl[v31 - 256];
  *(_WORD *)(a1 + 230) = v34 >> 12;
  *(_WORD *)(a1 + 228) = (3200 * (__int16)(0x2000 - (v33 + (v34 >> 12)))) >> 13;
  if (v13[18] >= 1225)
    v35 = 1225;
  else
    v35 = v13[18];
  if (v35 <= 50)
    LOWORD(v35) = 50;
  v36 = (unsigned __int16)(v35 - 50) / 5u;
  v37 = sCcoeffTbl[v36];
  if (v12 <= 256)
    v38 = 256;
  else
    v38 = v12;
  *(_WORD *)(a1 + 250) = v37;
  v39 = sBcoeffTbl[v36] * sCosTbl[v38 - 256];
  *(_WORD *)(a1 + 248) = v39 >> 12;
  *(_WORD *)(a1 + 246) = 0x2000 - (v37 + (v39 >> 12));
  *(_DWORD *)(a1 + 268) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_WORD *)(a1 + 266) = (3200 * *(__int16 *)(a1 + 280)) >> 13;
  *(_DWORD *)(a1 + 140) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  v40 = 1374389535 * (v13[156] << 13);
  *(_WORD *)(a1 + 278) = (v40 >> 37) + (v40 >> 63);
  v41 = v13[155];
  *(_DWORD *)(a1 + 284) = v41;
  if (v41 > 100)
  {
    v41 = 100;
LABEL_49:
    *(_DWORD *)(a1 + 284) = v41;
    goto LABEL_50;
  }
  if (v41 <= 9)
  {
    v41 = 10;
    goto LABEL_49;
  }
LABEL_50:
  v42 = (v41 << 16) / 100;
  *(_DWORD *)(a1 + 284) = v42;
  *(_WORD *)(a1 + 304) = (2318 * v42) >> 16;
  *(_WORD *)(a1 + 306) = (2909 * v42) >> 16;
  *(_WORD *)(a1 + 308) = (3723 * v42) >> 16;
  v42 >>= 4;
  *(_WORD *)(a1 + 310) = v42;
  *(_WORD *)(a1 + 274) = v42;
  *(_WORD *)(a1 + 272) = 0;
  bzero((void *)(a1 + 320), 0x2000uLL);
}

void sub_1D22585E0(_Unwind_Exception *a1)
{
  MTMBProducerComponent *v1;

  MTMBProducerComponent::~MTMBProducerComponent(v1);
  _Unwind_Resume(a1);
}

void MT3BSegmentProducer::CalcPoleCoefficients(MT3BSegmentProducer *this, int a2, int a3, __int16 *a4, __int16 *a5, __int16 *a6)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  if (a3 >= 1225)
    v6 = 1225;
  else
    v6 = a3;
  if (v6 <= 50)
    LOWORD(v6) = 50;
  if (a2 <= 256)
    v7 = 256;
  else
    v7 = a2;
  v8 = (unsigned __int16)(v6 - 50) / 5u;
  *a6 = sCcoeffTbl[v8];
  v9 = sBcoeffTbl[v8] * sCosTbl[v7 - 256];
  *a5 = v9 >> 12;
  *a4 = 0x2000 - (*a6 + (v9 >> 12));
}

void MT3BSegmentProducer::~MT3BSegmentProducer(MT3BSegmentProducer *this)
{
  _DWORD *v2;

  *(_QWORD *)this = &off_1E9365528;
  v2 = (_DWORD *)*((_QWORD *)this + 11);
  if (v2)
  {
    if ((*v2)-- == 1)
      MEMORY[0x1D8233BA8]();
  }
  MTMBProducerComponent::~MTMBProducerComponent(this);
}

{
  MT3BSegmentProducer::~MT3BSegmentProducer(this);
  JUMPOUT(0x1D8233BA8);
}

uint64_t MT3BSegmentProducer::NextSegment(MT3BSegmentProducer *this, MTMBSegment *a2)
{
  int v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  int v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  int Frame;
  _DWORD *v12;
  uint64_t v13;
  MTBEParam *v14;
  __int16 Rate;
  MTMBDemiProperties *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  char v20;
  uint64_t result;
  const char *v22;
  __int16 *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  int v30;
  unsigned int v31;
  __int16 v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  int v49;
  __int16 v50;
  MTMBSegment *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  char v66;
  __int16 v67;
  __int16 v68;
  BOOL v69;
  unint64_t v70;
  __int16 v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  char *v82;
  unsigned __int8 *v83;
  MTMBSegment *v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  BOOL v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 *v127;
  unint64_t v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  __int16 v136;
  int v137;
  int32x2_t v138;
  float32x2_t v139;
  unint64_t v140;
  int v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  _BOOL4 v158;
  __int16 v159;
  unsigned int v160;
  int v162;
  int v163;
  int v164;
  __int16 v165;
  uint64_t v166;
  __int16 v167;
  uint64_t v168;
  __int16 v169;
  int v170;
  FILE *v171;
  int v172;
  char v173[16];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v3 = *((char *)this + 96);
  if (v3 <= 0)
  {
    result = 0;
    *((_DWORD *)this + 25) = 0;
    if ((v3 & 0x80000000) == 0)
      return result;
    result = MTFEFrameFiller::FillNextFrame(*((MTFEFrameFiller **)this + 1), (const char *)this + 32);
    *((_BYTE *)this + 96) = result;
    *((_BYTE *)this + 104) = *(_BYTE *)(*((_QWORD *)this + 1) + 80);
    if (!(_DWORD)result)
      return result;
  }
  v159 = *((_WORD *)this + 16);
  v147 = *((unsigned __int8 *)this + 34);
  v167 = *((_WORD *)this + 18);
  v169 = *((_WORD *)this + 19);
  v4 = *((_WORD *)this + 20);
  v5 = *((_WORD *)this + 21);
  v6 = *((_WORD *)this + 22);
  v7 = *((unsigned __int16 *)this + 23);
  v150 = *((unsigned __int16 *)this + 24);
  v152 = *((unsigned __int16 *)this + 25);
  v154 = *((unsigned __int16 *)this + 26);
  v157 = *((unsigned __int16 *)this + 27);
  v163 = *((__int16 *)this + 28);
  v165 = *((_WORD *)this + 29);
  v8 = *((_WORD *)this + 30);
  v9 = *((_WORD *)this + 31);
  v10 = *((_WORD *)this + 32);
  v145 = *((_QWORD *)this + 9);
  v148 = *((_QWORD *)this + 10);
  Frame = MTFEFrameFiller::FillNextFrame(*((MTFEFrameFiller **)this + 1), (const char *)this + 32);
  *((_BYTE *)this + 96) = Frame;
  if (!Frame || *((_BYTE *)this + 34))
  {
    *((_WORD *)this + 141) |= *((unsigned __int8 *)this + 104) << 7;
    *((_BYTE *)this + 104) = *(_BYTE *)(*((_QWORD *)this + 1) + 80);
  }
  if (v147)
  {
    v12 = (_DWORD *)*((_QWORD *)this + 11);
    if (v12)
    {
      v90 = (*v12)-- == 1;
      if (v90)
        MEMORY[0x1D8233BA8]();
    }
    v13 = operator new();
    MTMBDemiProperties::MTMBDemiProperties((MTMBDemiProperties *)v13);
    *((_QWORD *)this + 11) = v13;
    v14 = (MTBEParam *)*((_QWORD *)this + 2);
    *(_QWORD *)(v13 + 8) = *(_QWORD *)(MEMORY[0x1E0DA8EB0] + 8 * *(unsigned __int8 *)(*((_QWORD *)this + 1) + 288));
    *(_BYTE *)(v13 + 18) = 1;
    *(_QWORD *)(*((_QWORD *)this + 11) + 24) = MTBEParam::GetVolume(v14);
    *(_WORD *)(*((_QWORD *)this + 11) + 64) = MTBEParam::GetDurModFakeRate(*((MTBEParam **)this + 2));
    Rate = MTBEParam::GetRate(*((MTBEParam **)this + 2));
    v16 = (MTMBDemiProperties *)*((_QWORD *)this + 11);
    *((_WORD *)v16 + 33) = Rate;
    v17 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 272) + 76);
    if (v17)
    {
      v18 = *((_DWORD *)this + 25);
      v19 = v18 - v17;
      if (v18 >= v17)
      {
        if (v18 <= v17)
          goto LABEL_19;
        v20 = 110;
      }
      else
      {
        v20 = 112;
      }
      *((_BYTE *)this + 97) = v20;
LABEL_19:
      if ((MTBEDebugFlags::sMEOWDebug & 1) != 0)
      {
        v171 = (FILE *)*MEMORY[0x1E0C80C10];
        v22 = MTMBDemiProperties::Phon(v16, v173);
        fprintf(v171, "Unit %s Target %u Actual %u Diff %d [%5.2fs] Frame %d\n", v22, v17, *((_DWORD *)this + 25), v19, (float)((float)v19 / 22050.0), *((char *)this + 97));
      }
    }
  }
  if (!*((_WORD *)this + 53) && !*((_WORD *)this + 55))
  {
    *((_DWORD *)this + 29) = 0;
    *((_DWORD *)this + 30) = 0;
    *(_QWORD *)((char *)this + 148) = 0;
    *(_QWORD *)((char *)this + 140) = 0;
    *((_DWORD *)this + 39) = 0;
    *(_QWORD *)((char *)this + 180) = 0;
    *((_DWORD *)this + 47) = 0;
  }
  v172 = *((__int16 *)this + 139);
  v23 = (__int16 *)*((_QWORD *)this + 3);
  v24 = v23[23] + v4;
  v25 = v24;
  *((_WORD *)this + 96) = v24;
  v26 = v23[24] + v5;
  v27 = v26;
  *((_WORD *)this + 97) = v26;
  v28 = v23[25] + v6;
  v29 = v28;
  *((_WORD *)this + 98) = v28;
  v30 = v8;
  if (v8 >= 1225)
    v30 = 1225;
  if (v30 <= 50)
    LOWORD(v30) = 50;
  if (v25 <= 256)
    v25 = 256;
  v31 = (unsigned __int16)(v30 - 50) / 5u;
  v32 = sCcoeffTbl[v31];
  *((_WORD *)this + 101) = v32;
  v33 = sBcoeffTbl[v31] * sCosTbl[v25 - 256];
  *((_WORD *)this + 100) = v33 >> 12;
  *((_WORD *)this + 99) = 0x2000 - (v32 + (v33 >> 12));
  v34 = v9;
  if (v9 >= 1225)
    v34 = 1225;
  if (v34 <= 50)
    LOWORD(v34) = 50;
  if (v27 <= 256)
    v35 = 256;
  else
    v35 = v27;
  v36 = (unsigned __int16)(v34 - 50) / 5u;
  v37 = (__int16)sCcoeffTbl[v36];
  *((_WORD *)this + 104) = sCcoeffTbl[v36];
  v38 = (sBcoeffTbl[v36] * sCosTbl[v35 - 256]) >> 12;
  *((_WORD *)this + 103) = v38;
  *((_WORD *)this + 102) = 0x2000 - (v37 + v38);
  v39 = v10;
  if (v10 >= 1225)
    v39 = 1225;
  if (v39 <= 50)
    LOWORD(v39) = 50;
  if (v29 <= 256)
    v40 = 256;
  else
    v40 = v29;
  v41 = (unsigned __int16)(v39 - 50) / 5u;
  v42 = (__int16)sCcoeffTbl[v41];
  *((_WORD *)this + 107) = sCcoeffTbl[v41];
  v43 = (sBcoeffTbl[v41] * sCosTbl[v40 - 256]) >> 12;
  *((_WORD *)this + 106) = v43;
  *((_WORD *)this + 105) = 0x2000 - (v42 + v43);
  v44 = v23[148] + v163;
  v162 = *((__int16 *)this + 138);
  v45 = v23[18];
  if (v45 >= 1225)
    v45 = 1225;
  v46 = (uint64_t)((unint64_t)((v45 - 50) / 5) << 48) >> 47;
  v47 = *(unsigned __int16 *)((char *)sCcoeffTbl + v46);
  *((_WORD *)this + 122) = -(__int16)v47;
  v164 = v44;
  LODWORD(v46) = *(__int16 *)((char *)sBcoeffTbl + v46) * sCosTbl[(__int16)v44 - 256];
  *((_WORD *)this + 121) = -(__int16)(v46 >> 12);
  v48 = 0x2000 - (v47 + (v46 >> 12));
  *((_WORD *)this + 120) = 0x2000 - (v47 + (v46 >> 12));
  v49 = *((unsigned __int16 *)this + 123);
  *((_WORD *)this + 54) = v167 << 8;
  *((_WORD *)this + 55) = v169 << 8;
  *((_WORD *)this + 56) = v165 << 8;
  if (v7)
  {
    v50 = (_WORD)v7 << 8;
    v156 = ((__int16)(0x2000 - (v37 + v38)) * (__int16)((_WORD)v7 << 8)) >> 13;
  }
  else
  {
    v50 = 0;
    v156 = 0;
    *((_DWORD *)this + 42) = 0;
  }
  v51 = a2;
  v52 = v159;
  v53 = v154;
  *((_WORD *)this + 126) = v50;
  if (v150)
  {
    v54 = (_WORD)v150 << 8;
    v155 = ((__int16)(0x2000 - (v42 + v43)) * (__int16)((_WORD)v150 << 8)) >> 13;
  }
  else
  {
    v54 = 0;
    v155 = 0;
    *((_DWORD *)this + 43) = 0;
  }
  *((_WORD *)this + 127) = v54;
  if (!v152 || v169 << 8)
  {
    v55 = 0;
    v153 = 0;
    *((_DWORD *)this + 44) = 0;
  }
  else
  {
    v55 = (_WORD)v152 << 8;
    v153 = (*((__int16 *)this + 117) * (__int16)((_WORD)v152 << 8)) >> 13;
  }
  *((_WORD *)this + 128) = v55;
  if (v53)
  {
    v56 = (_WORD)v53 << 8;
    v151 = (*((__int16 *)this + 111) * (__int16)((_WORD)v53 << 8)) >> 13;
  }
  else
  {
    v56 = 0;
    v151 = 0;
    *((_DWORD *)this + 40) = 0;
  }
  v57 = v159;
  *((_WORD *)this + 129) = v56;
  if (v157)
  {
    v58 = (_WORD)v157 << 8;
    v149 = (*((__int16 *)this + 114) * (__int16)((_WORD)v157 << 8)) >> 13;
  }
  else
  {
    v58 = 0;
    v149 = 0;
    *((_DWORD *)this + 41) = 0;
  }
  *((_WORD *)this + 130) = v58;
  if ((MTBEDebugFlags::sMEOWDebug & 2) != 0)
  {
    printf("P %8d%7d%7d %8d%7d%7d %8d%7d%7d %8d%7d%7d %8d%7d%7d\n", v156, (__int16)v38, v37, v155, (__int16)v43, v42, v153, *((__int16 *)this + 118), *((__int16 *)this + 119), v151, *((__int16 *)this + 112), *((__int16 *)this + 113), v149, *((__int16 *)this + 115), *((__int16 *)this + 116));
    v51 = a2;
  }
  *((_WORD *)this + 131) = v159;
  v59 = *((_QWORD *)this + 2);
  if (*(_WORD *)(v59 + 210) == 1)
  {
    if (*((_WORD *)this + 54))
      *((_WORD *)this + 132) = *(_QWORD *)(v59 + 8);
    *((_DWORD *)this + 31) = MT3BSegmentProducer::sTopOctave[(*(_WORD *)(v59 + 192) + v159)] >> (3 - ((unsigned __int16)(*(_WORD *)(v59 + 192) + v159) >> 8));
    if (*(_BYTE *)(v59 + 50))
    {
      if (*(_WORD *)(*((_QWORD *)this + 3) + 52))
        LODWORD(v144) = MT3BSegmentProducer::sTopOctave[(*(_WORD *)(*((_QWORD *)this + 3) + 52) - 51)] >> (7 - ((unsigned __int16)(*(_WORD *)(*((_QWORD *)this + 3) + 52) + 461) >> 8));
      else
        LODWORD(v144) = 0;
      if (v148 != -1)
      {
        *((_DWORD *)this + 33) = (_DWORD)v148 << 14;
        *((_DWORD *)this + 34) = (_DWORD)v148 << 14;
      }
      HIDWORD(v144) = 0x4000;
    }
    else
    {
      if (!*(_QWORD *)(v59 + 200))
      {
        v52 = *(_WORD *)(v59 + 190);
        v57 = v52;
        *((_WORD *)this + 131) = v52;
      }
      HIDWORD(v144) = MT3BSegmentProducer::sTopOctave[v52] >> (7 - HIBYTE(v52));
      if (*(_WORD *)(*((_QWORD *)this + 3) + 52))
      {
        v61 = (__int16)(*(_WORD *)(*((_QWORD *)this + 3) + 52) + v57) & ~((__int16)(*(_WORD *)(*((_QWORD *)this + 3)
                                                                                               + 52)
                                                                                    + v57) >> 31);
        *((_WORD *)this + 131) = v61;
        LODWORD(v144) = MT3BSegmentProducer::sTopOctave[v61] >> (7 - BYTE1(v61));
      }
      else
      {
        LODWORD(v144) = 0;
      }
    }
  }
  else
  {
    *((_DWORD *)this + 31) = MT3BSegmentProducer::sTopOctave[v159] >> (3 - HIBYTE(v159));
    v144 = 0;
    if (*(_WORD *)(*((_QWORD *)this + 3) + 52))
    {
      v60 = (__int16)(*(_WORD *)(*((_QWORD *)this + 3) + 52) + v159) & ~((__int16)(*(_WORD *)(*((_QWORD *)this + 3)
                                                                                              + 52)
                                                                                   + v159) >> 31);
      *((_WORD *)this + 131) = v60;
      *((_DWORD *)this + 32) = MT3BSegmentProducer::sTopOctave[v60] >> (3 - BYTE1(v60));
    }
  }
  v62 = *((__int16 *)this + 54);
  if (*((_WORD *)this + 53))
    v158 = 0;
  else
    v158 = (*((unsigned __int16 *)this + 126) | *((unsigned __int16 *)this + 55) | *((unsigned __int16 *)this + 127) | *((unsigned __int16 *)this + 128) | *((unsigned __int16 *)this + 129) | *((unsigned __int16 *)this + 130) | *((unsigned __int16 *)this + 56)) == 0;
  v63 = *((__int16 *)this + 133);
  v64 = *((unsigned int *)this + 35);
  *((_DWORD *)this + 35) = v62 << 16;
  MTMBSegment::Allocate(v51, 0);
  if (v158)
  {
    v65 = *((unsigned __int8 *)this + 98);
    v66 = v65 + 1;
    *((_BYTE *)this + 98) = v65 + 1;
    if (v65)
      v67 = 110;
    else
      v67 = 112;
  }
  else
  {
    v67 = *((char *)this + 97);
    v66 = *((_BYTE *)this + 98);
  }
  *((_WORD *)a2 + 4) = v67;
  *((_BYTE *)this + 98) = v66 & 7;
  *((_WORD *)a2 + 8) |= *((_WORD *)this + 141);
  MTMBSegment::SetProperties((uint64_t)a2, *((_DWORD **)this + 11));
  v68 = *((_WORD *)a2 + 4);
  v69 = v158;
  if (v68)
  {
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v76 = v49;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v80 = (__int16)v48;
    v160 = v62 * v63;
    v143 = (v62 * v63) >> 13;
    v81 = (((v62 << 16) - (int)v64) >> 3);
    v82 = (char *)this + 310;
    v83 = (unsigned __int8 *)&MT3BSegmentProducer::sNoiseWave;
    v146 = (v76 << 16) / v80;
    v84 = a2;
    while (1)
    {
      if ((__int16)v72 > 7)
      {
        v85 = *((unsigned __int16 *)this + 54);
      }
      else
      {
        v64 = (v64 + v81);
        v85 = WORD1(v64);
        ++v72;
      }
      *((_WORD *)this + 53) = v85;
      if (!v69)
        break;
      *((_WORD *)this + 134) = 0;
      *((_DWORD *)this + 29) = 0;
      *((_DWORD *)this + 30) = 0;
      *((_DWORD *)this + 35) = 0;
      *(_QWORD *)(*(_QWORD *)v84 + 4 * v70) = 0;
      v71 += 2;
LABEL_167:
      v70 += 2;
      v140 = *((unsigned __int16 *)v84 + 4);
      if (v70 >= v140)
      {
        v68 = (v71 > 30) << 12;
        goto LABEL_170;
      }
    }
    v86 = (*((_WORD *)this + 57) + 1) & 0x7FF;
    *((_WORD *)this + 57) = v86;
    if (!v85)
    {
      *((_WORD *)this + 134) = 0;
      *((_DWORD *)this + 29) = 0;
      *((_DWORD *)this + 30) = 0;
      *((_DWORD *)this + 35) = 0;
      v85 = *((unsigned __int16 *)this + 55);
      if (!*((_WORD *)this + 55))
      {
        v86 = v86;
LABEL_136:
        v119 = ((v83[v86] - 128) * *(__int16 *)(*((_QWORD *)this + 2) + 16)) >> 13;
        if (*((_WORD *)this + 56))
          v79 = (v119 * *((__int16 *)this + 56)) >> 12;
        if (*((_WORD *)this + 126))
        {
          v78 = ((v119 * v156
                              + *((__int16 *)this + 84) * *((__int16 *)this + 103)
                              + *((__int16 *)this + 85) * *((__int16 *)this + 104)) >> 13);
          *((_WORD *)this + 85) = *((_WORD *)this + 84);
          *((_WORD *)this + 84) = v78;
        }
        if (*((_WORD *)this + 127))
        {
          v77 = ((v119 * v155
                              + *((__int16 *)this + 86) * *((__int16 *)this + 106)
                              + *((__int16 *)this + 87) * *((__int16 *)this + 107)) >> 13);
          *((_WORD *)this + 87) = *((_WORD *)this + 86);
          *((_WORD *)this + 86) = v77;
        }
        if (*((_WORD *)this + 128))
        {
          v75 = ((v119 * v153
                              + *((__int16 *)this + 88) * *((__int16 *)this + 118)
                              + *((__int16 *)this + 89) * *((__int16 *)this + 119)) >> 13);
          *((_WORD *)this + 89) = *((_WORD *)this + 88);
          *((_WORD *)this + 88) = v75;
        }
        if (*((_WORD *)this + 129))
        {
          v74 = ((v119 * v151
                              + *((__int16 *)this + 80) * *((__int16 *)this + 112)
                              + *((__int16 *)this + 81) * *((__int16 *)this + 113)) >> 13);
          *((_WORD *)this + 81) = *((_WORD *)this + 80);
          *((_WORD *)this + 80) = v74;
        }
        if (*((_WORD *)this + 130))
        {
          v73 = ((v119 * v149
                              + *((__int16 *)this + 82) * *((__int16 *)this + 115)
                              + *((__int16 *)this + 83) * *((__int16 *)this + 116)) >> 13);
          *((_WORD *)this + 83) = *((_WORD *)this + 82);
          *((_WORD *)this + 82) = v73;
        }
        v120 = v78 + v77 + v74;
        v121 = v79 + v85 + v75 - v120 + v73;
        if ((MTBEDebugFlags::sMEOWDebug & 4) != 0)
        {
          v142 = v77;
          v141 = v78;
          v122 = v81;
          v170 = v72;
          v123 = v73;
          v166 = v77;
          v168 = v78;
          v124 = v74;
          v125 = v64;
          v126 = v75;
          v127 = v83;
          v128 = v70;
          v129 = v79;
          printf("S\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n", v79 + v85 + v75 - v120 + v73, v85, v79, v141, v142, v75, v74, v73);
          v79 = v129;
          v70 = v128;
          v83 = v127;
          v75 = v126;
          v64 = v125;
          v74 = v124;
          v77 = v166;
          v78 = v168;
          v73 = v123;
          v72 = v170;
          v82 = (char *)this + 310;
          v81 = v122;
          v69 = v158;
          v84 = a2;
        }
        if (*(__int16 *)(*((_QWORD *)this + 3) + 308) >= 1)
        {
          v130 = v121 + (v121 >> 2);
          v131 = *((__int16 *)this + 135);
          *((_WORD *)this + 135) = v130;
          v121 = v130 + (v130 >> 1) - v131 + (v131 >> 2);
        }
        if (v172 >= 1)
        {
          v132 = 0;
          v133 = 0;
          *((_WORD *)this + *((__int16 *)this + 136) + 160) = v121;
          v134 = *((__int16 *)this + 136);
          do
          {
            v135 = v134 - *(__int16 *)&v82[v132];
            if (v135 < 0)
              v135 += *((__int16 *)this + 137);
            v133 += *((__int16 *)this + v135 + 160);
            v132 -= 2;
          }
          while (v132 != -8);
          v121 += (((*((_DWORD *)this + 72) + v133) >> 3) * *((__int16 *)this + 139)) >> 13;
          *((_DWORD *)this + 72) = v133;
          if (*((__int16 *)this + 137) > (__int16)(v134 + 1))
            v136 = v134 + 1;
          else
            v136 = 0;
          *((_WORD *)this + 136) = v136;
        }
        v71 = 0;
        if (v121 <= -8191)
          v137 = -8191;
        else
          v137 = v121;
        if (v137 >= 0x1FFF)
          v137 = 0x1FFF;
        v138.i32[0] = *((__int16 *)this + 134) + ((v137 - *((__int16 *)this + 134)) >> 1);
        v138.i32[1] = v137;
        v139 = vcvt_f32_s32(v138);
        *(float32x2_t *)(*(_QWORD *)v84 + 4 * v70) = vadd_f32(v139, v139);
        *((_WORD *)this + 134) = v137;
        goto LABEL_167;
      }
      v96 = 0;
      v97 = 0;
LABEL_130:
      v110 = v97 + (((MT3BSegmentProducer::sBandNoise[v86] - 128) * (__int16)v85) >> 11);
      if (v160 >= 0x2000 && (int)v96 > *(__int16 *)(*((_QWORD *)this + 3) + 14))
        v110 += ((*(unsigned __int8 *)(*((_QWORD *)this + 37) + v86) - 128) * v143) >> 11;
      if (v164 != v162)
      {
        v111 = *((__int16 *)this + 90);
        v112 = v110 + ((v111 * *((__int16 *)this + 121) + *((__int16 *)this + 91) * *((__int16 *)this + 122)) >> 13);
        *((_WORD *)this + 91) = v111;
        *((_WORD *)this + 90) = v110;
        v110 = ((*((__int16 *)this + 92) * *((__int16 *)this + 124) + *((__int16 *)this + 93) * *((__int16 *)this + 125)) >> 13)
             + ((v112 * v146) >> 16);
        *((_WORD *)this + 93) = *((_WORD *)this + 92);
        *((_WORD *)this + 92) = v110;
      }
      v113 = *((__int16 *)this + 72);
      v114 = (v110 * *((__int16 *)this + 99)
            + v113 * *((__int16 *)this + 100)
            + *((__int16 *)this + 73) * *((__int16 *)this + 101)) >> 13;
      *((_WORD *)this + 73) = v113;
      *((_WORD *)this + 72) = v114;
      v115 = *((__int16 *)this + 74);
      v116 = (v114 * *((__int16 *)this + 102)
            + v115 * *((__int16 *)this + 103)
            + *((__int16 *)this + 75) * *((__int16 *)this + 104)) >> 13;
      *((_WORD *)this + 75) = v115;
      *((_WORD *)this + 74) = v116;
      v117 = *((__int16 *)this + 76);
      v118 = (v116 * *((__int16 *)this + 105)
            + v117 * *((__int16 *)this + 106)
            + *((__int16 *)this + 77) * *((__int16 *)this + 107)) >> 13;
      *((_WORD *)this + 77) = v117;
      *((_WORD *)this + 76) = v118;
      v85 = (v118 * *((__int16 *)this + 108)
           + *((__int16 *)this + 78) * *((__int16 *)this + 109)
           + *((__int16 *)this + 79) * *((__int16 *)this + 110)) >> 13;
      *((_WORD *)this + 79) = *((_WORD *)this + 78);
      *((_WORD *)this + 78) = v85;
      goto LABEL_136;
    }
    v87 = *((_QWORD *)this + 2);
    v88 = *((_QWORD *)this + 3);
    v89 = *(unsigned __int16 *)(v87 + 210);
    if (v89 != 1)
    {
      v98 = 0;
      v99 = *(unsigned __int16 *)(v88 + 52);
LABEL_124:
      v106 = *((_DWORD *)this + 29) + *((_DWORD *)this + 31);
      *((_DWORD *)this + 29) = v106 & 0xFFFFFF;
      v96 = BYTE2(v106);
      v107 = *(__int16 *)(v87 + 2 * v96 + 274);
      if (v89 != 1 && v99 != 0)
      {
        v109 = *((_DWORD *)this + 30) + *((_DWORD *)this + 32);
        *((_DWORD *)this + 30) = v109 & 0xFFFFFF;
        v96 = BYTE2(v109);
        v107 = (*(__int16 *)(v87 + 2 * BYTE2(v109) + 786) + v107) >> 1;
      }
      v97 = v98 + ((v107 * (__int16)v85) >> 13);
      LOWORD(v85) = *((_WORD *)this + 55);
      goto LABEL_130;
    }
    if (v147)
      v90 = *(unsigned __int16 *)(v88 + 288) == 0;
    else
      v90 = 1;
    v91 = v90;
    v92 = *((_DWORD *)this + 33) + HIDWORD(v144);
    *((_DWORD *)this + 33) = v92;
    if ((v145 & 0x10) == 0)
      v91 = 1;
    if (v91 == 1)
    {
      v93 = v92 >> 14;
      v94 = *(_QWORD *)(v87 + 216);
      if (v94 > v93)
        goto LABEL_114;
      v93 = *(_DWORD *)(v88 + 290) + v93 - v94;
      v95 = v93 << 14;
    }
    else
    {
      v95 = 0;
      v93 = 0;
    }
    *((_DWORD *)this + 33) = v95;
LABEL_114:
    v100 = *(_QWORD *)(v87 + 232);
    v101 = 12 * *(unsigned __int8 *)(v100 + v93);
    v99 = *(unsigned __int16 *)(v88 + 52);
    if (!*(_WORD *)(v88 + 52))
    {
      v105 = v101 - 1536;
LABEL_123:
      v98 = (((v105 * *((__int16 *)this + 132)) >> 13) * (__int16)v85) >> 13;
      goto LABEL_124;
    }
    v102 = *((_DWORD *)this + 34) + v144;
    *((_DWORD *)this + 34) = v102;
    if (v91)
    {
      v91 = v102 >> 14;
      v103 = *(_QWORD *)(v87 + 216);
      if (v103 > v91)
      {
LABEL_122:
        v105 = (v101 + 12 * *(unsigned __int8 *)(v100 + v91) - 3072) >> 1;
        goto LABEL_123;
      }
      v91 = *(_DWORD *)(v88 + 290) + v91 - v103;
      v104 = v91 << 14;
    }
    else
    {
      v104 = 0;
    }
    *((_DWORD *)this + 34) = v104;
    goto LABEL_122;
  }
  LODWORD(v140) = 0;
LABEL_170:
  *((_WORD *)this + 141) = v68;
  *((_DWORD *)this + 25) += v140;
  return 1;
}

void sub_1D2259688(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10D0C4050FF3235);
  _Unwind_Resume(a1);
}

void MT3BSegmentProducer::CalcZeroCoefficients(MT3BSegmentProducer *this, int a2, int a3, __int16 *a4, __int16 *a5, __int16 *a6)
{
  int v6;
  uint64_t v7;

  if (a3 >= 1225)
    v6 = 1225;
  else
    v6 = a3;
  v7 = (uint64_t)((unint64_t)((v6 - 50) / 5) << 48) >> 47;
  *a6 = -*(_WORD *)((char *)sCcoeffTbl + v7);
  LODWORD(v7) = *(__int16 *)((char *)sBcoeffTbl + v7) * sCosTbl[a2 - 256];
  *a5 = -(__int16)(v7 >> 12);
  *a4 = *a6 - (v7 >> 12) + 0x2000;
}

void sub_1D225979C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D2259980(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = v4;
  MEMORY[0x1D8233BA8](v5, 0x10E1C404B4880CALL);

  _Unwind_Resume(a1);
}

void sub_1D2259B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MTFrontendSimple;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void MT3BTextSource::MT3BTextSource(MT3BTextSource *this, const __CFString **a2)
{
  uint64_t v3;

  SLCFStringTextSource::SLCFStringTextSource((SLCFStringTextSource *)this, a2[26]);
  *(_QWORD *)v3 = &unk_1E93655B8;
  *(_QWORD *)(v3 + 296) = a2;
  *(_BYTE *)(v3 + 304) = 0;
}

{
  uint64_t v3;

  SLCFStringTextSource::SLCFStringTextSource((SLCFStringTextSource *)this, a2[26]);
  *(_QWORD *)v3 = &unk_1E93655B8;
  *(_QWORD *)(v3 + 296) = a2;
  *(_BYTE *)(v3 + 304) = 0;
}

uint64_t MT3BTextSource::CreateMoreText(MT3BTextSource *this)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD, uint64_t *, uint64_t *, int *);
  int v4;
  uint64_t v5;
  uint64_t v6;

  if (!*((_BYTE *)this + 304))
  {
    *((_BYTE *)this + 304) = 1;
    v6 = 0;
    v5 = 0;
    v4 = 0;
    v1 = *((_QWORD *)this + 37);
    v2 = *(void (**)(_QWORD, _QWORD, uint64_t *, uint64_t *, int *))(v1 + 376);
    if (v2)
    {
      if (*(_BYTE *)(v1 + 424))
        v2(*(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 312), &v6, &v5, &v4);
    }
  }
  return 0;
}

void MTBEDoneTask::Execute(MTBEDoneTask *this, const char *a2)
{
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  MTBEWorker::DebugLog("Done %p\n", a2, a2);
  SpeechChannelManager::RegisterCurSpeechState((uint64_t)a2, 0);
  v3 = (void (*)(uint64_t, uint64_t))*((_QWORD *)a2 + 48);
  if (v3)
  {
    if (a2[424])
    {
      v4 = *((_QWORD *)a2 + 9);
      v5 = *((_QWORD *)a2 + 39);
      pthread_mutex_unlock((pthread_mutex_t *)(sCallbackSchedule + 104));
      v3(v4, v5);
      pthread_mutex_lock((pthread_mutex_t *)(sCallbackSchedule + 104));
    }
  }
}

uint64_t MTBESoundOutputDoneTask::Execute(MTBESoundOutputDoneTask *this, const char *a2)
{
  MTBEWorker::DebugLog("Sound Output Done %p\n", a2, a2);
  pthread_mutex_unlock((pthread_mutex_t *)(sSampleSchedule + 104));
  if (a2)
    (*(void (**)(const char *))(*(_QWORD *)a2 + 8))(a2);
  return pthread_mutex_lock((pthread_mutex_t *)(sSampleSchedule + 104));
}

void MT3BEngineTask::MT3BEngineTask(MT3BEngineTask *this, SpeechChannelManager *a2)
{
  char *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  const char *v9;
  MTFEBuilder *v10;
  uint64_t v11;
  const char *v12;
  MTBESoundOutput *SoundChannel;
  unsigned int *v14;
  unsigned int v15;
  _QWORD v16[5];
  timeval v17;

  *((_QWORD *)this + 1) = &unk_1E9365690;
  v4 = (char *)this + 8;
  *(_QWORD *)this = &off_1E9365648;
  *((_QWORD *)this + 2) = &off_1E93656E8;
  *((_QWORD *)this + 3) = this;
  *((_QWORD *)this + 4) = MT3BEngineTask::Word;
  *((_QWORD *)this + 5) = 0;
  sprintf((char *)this + 48, "%s<%p>", "Word", this);
  *((_QWORD *)this + 10) = &off_1E93656E8;
  *((_QWORD *)this + 11) = this;
  *((_QWORD *)this + 12) = MT3BEngineTask::Phon;
  *((_QWORD *)this + 13) = 0;
  sprintf((char *)this + 112, "%s<%p>", "Phon", this);
  *((_QWORD *)this + 18) = &off_1E93656E8;
  *((_QWORD *)this + 19) = this;
  *((_QWORD *)this + 20) = MT3BEngineTask::Sync;
  *((_QWORD *)this + 21) = 0;
  sprintf((char *)this + 176, "%s<%p>", "Sync", this);
  *((_QWORD *)this + 26) = &off_1E93656E8;
  *((_QWORD *)this + 27) = this;
  *((_QWORD *)this + 28) = MT3BEngineTask::Pause;
  *((_QWORD *)this + 29) = 0;
  sprintf((char *)this + 240, "%s<%p>", "Pause", this);
  *((_QWORD *)this + 34) = &off_1E93656E8;
  *((_QWORD *)this + 35) = this;
  *((_QWORD *)this + 36) = MT3BEngineTask::Boundary;
  *((_QWORD *)this + 37) = 0;
  sprintf((char *)this + 304, "%s<%p>", "Boundary", this);
  *((_QWORD *)this + 42) = &off_1E93656E8;
  *((_QWORD *)this + 43) = this;
  *((_QWORD *)this + 44) = MT3BEngineTask::Stopped;
  *((_QWORD *)this + 45) = 0;
  sprintf((char *)this + 368, "%s<%p>", "Stopped", this);
  *((_QWORD *)this + 50) = &off_1E93656E8;
  *((_QWORD *)this + 51) = this;
  *((_QWORD *)this + 52) = MT3BEngineTask::CheckAudio;
  *((_QWORD *)this + 53) = 0;
  sprintf((char *)this + 432, "%s<%p>", "Audio?", this);
  *((_QWORD *)this + 58) = &off_1E93656E8;
  *((_QWORD *)this + 59) = this;
  *((_QWORD *)this + 60) = MT3BEngineTask::Ping;
  *((_QWORD *)this + 61) = 0;
  sprintf((char *)this + 496, "%s<%p>", "Ping", this);
  *((_QWORD *)this + 66) = &off_1E93656E8;
  *((_QWORD *)this + 67) = this;
  *((_QWORD *)this + 68) = MT3BEngineTask::ParseNextPhrase;
  *((_QWORD *)this + 69) = 0;
  sprintf((char *)this + 560, "%s<%p>", "Parse", this);
  *((_QWORD *)this + 74) = a2;
  SLCFStringTextSource::SLCFStringTextSource((SLCFStringTextSource *)((char *)this + 616), *((const __CFString **)a2 + 26));
  *((_QWORD *)this + 77) = &unk_1E93655B8;
  *((_QWORD *)this + 114) = a2;
  *((_BYTE *)this + 920) = 0;
  *((_QWORD *)this + 116) = 0;
  *((_QWORD *)this + 118) = 0;
  *((_QWORD *)this + 117) = 0;
  MTBEPersistentParam::MTBEPersistentParam((MTBEPersistentParam *)((char *)this + 1016));
  *((_DWORD *)this + 308) = 257;
  *((_WORD *)this + 618) = 1;
  *((_QWORD *)this + 155) = 0;
  v5 = *(_QWORD *)(*((_QWORD *)this + 74) + 32);
  *((_QWORD *)this + 157) = &off_1E93659F0;
  v6 = *(_OWORD *)(v5 + 8);
  v7 = *(_OWORD *)(v5 + 24);
  v8 = *(_OWORD *)(v5 + 40);
  *((_DWORD *)this + 328) = *(_DWORD *)(v5 + 56);
  *((_OWORD *)this + 81) = v8;
  *((_OWORD *)this + 80) = v7;
  *((_OWORD *)this + 79) = v6;
  *((_WORD *)this + 660) = 0;
  MTBEWorker::DebugLog("Create Engine %p\n", v9, this);
  gettimeofday(&v17, 0);
  *((_QWORD *)this + 156) = v17.tv_usec + 1000000 * v17.tv_sec;
  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 952), 0);
  *((_QWORD *)this + 138) = *((_QWORD *)a2 + 8);
  *((_QWORD *)this + 134) = SLLexer::Create();
  v10 = (MTFEBuilder *)operator new();
  MTFEBuilder::MTFEBuilder(v10, *((SLLexer **)this + 134));
  *((_QWORD *)this + 76) = v10;
  v11 = *((_QWORD *)this + 134);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = ___ZN14MT3BEngineTaskC2EP20SpeechChannelManager_block_invoke;
  v16[3] = &__block_descriptor_tmp;
  v16[4] = this;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 40))(v11, v16);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 134) + 16))(*((_QWORD *)this + 134), *((unsigned int *)this + 326));
  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 134) + 24))(*((_QWORD *)this + 134), (char *)this + 1308);
  *(_OWORD *)((char *)this + 1080) = *(_OWORD *)((char *)a2 + 232);
  *((_QWORD *)this + 137) = *((_QWORD *)a2 + 31);
  *((_QWORD *)this + 132) = *((_QWORD *)a2 + 6);
  MTBEWorker::DebugLog("Create Sound Channel %p\n", v12, this);
  SoundChannel = SpeechChannelManager::CreateSoundChannel(a2, 0);
  *((_QWORD *)this + 75) = SoundChannel;
  v14 = (unsigned int *)((char *)SoundChannel + 16);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 75) + 72))(*((_QWORD *)this + 75), v4);
  *((_BYTE *)this + 1235) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 75) + 120))(*((_QWORD *)this + 75));
  sprintf((char *)this + 1322, "Samples<%p>", this);
}

void sub_1D225A1F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  MTBEWorker::Task *v2;
  MTBEWorker::Task *v3;
  MTBEWorker::Task *v4;
  MTBEWorker::Task *v5;
  SLCFStringTextSource *v6;
  MTBEPersistentParam *v7;
  uint64_t v8;

  MEMORY[0x1D8233BA8](v8, 0x10A1C402F3E04C9);
  MTBENotifier::~MTBENotifier((MTBENotifier *)(v1 + 1256));
  MTBEPersistentParam::~MTBEPersistentParam(v7);
  SLCFStringTextSource::~SLCFStringTextSource(v6);
  MTBEWorker::Task::~Task((MTBEWorker::Task *)(v1 + 528));
  MTBEWorker::Task::~Task((MTBEWorker::Task *)(v1 + 464));
  MTBEWorker::Task::~Task((MTBEWorker::Task *)(v1 + 400));
  MTBEWorker::Task::~Task((MTBEWorker::Task *)(v1 + 336));
  MTBEWorker::Task::~Task((MTBEWorker::Task *)(v1 + 272));
  MTBEWorker::Task::~Task(v5);
  MTBEWorker::Task::~Task(v4);
  MTBEWorker::Task::~Task(v3);
  MTBEWorker::Task::~Task(v2);
  MTBEWorker::Task::~Task((MTBEWorker::Task *)v1);
  _Unwind_Resume(a1);
}

uint64_t MT3BEngineTask::Word(MT3BEngineTask *this, const char *a2)
{
  CFIndex v3;
  CFIndex v4;
  SpeechChannelManager *v5;
  CFRange v7;

  v3 = (uint64_t)a2 >> 8;
  v4 = a2;
  MTBEWorker::DebugLog("Word %d %d\n", a2, (uint64_t)a2 >> 8, a2);
  v5 = (SpeechChannelManager *)*((_QWORD *)this + 74);
  pthread_mutex_unlock((pthread_mutex_t *)(sCallbackSchedule + 104));
  v7.location = v3;
  v7.length = v4;
  SpeechChannelManager::CallWordCallBackProc(v5, v7);
  return pthread_mutex_lock((pthread_mutex_t *)(sCallbackSchedule + 104));
}

uint64_t MT3BEngineTask::AncillaryTask::AncillaryTask(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *(_QWORD *)a1 = &off_1E93656E8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  sprintf((char *)(a1 + 32), "%s<%p>", a5, a2);
  return a1;
}

{
  *(_QWORD *)a1 = &off_1E93656E8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  sprintf((char *)(a1 + 32), "%s<%p>", a5, a2);
  return a1;
}

uint64_t MT3BEngineTask::Phon(MT3BEngineTask *this, const char *a2)
{
  __int16 v2;
  uint64_t v4;
  void (*v5)(_QWORD, _QWORD, _QWORD);

  v2 = (__int16)a2;
  MTBEWorker::DebugLog("Phoneme %d\n", a2, a2);
  v4 = *((_QWORD *)this + 74);
  pthread_mutex_unlock((pthread_mutex_t *)(sCallbackSchedule + 104));
  v5 = *(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 408);
  if (v5 && *(_BYTE *)(v4 + 424))
    v5(*(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 312), v2);
  return pthread_mutex_lock((pthread_mutex_t *)(sCallbackSchedule + 104));
}

uint64_t MT3BEngineTask::Sync(MT3BEngineTask *this, const char *a2)
{
  uint64_t v4;
  void (*v5)(_QWORD, _QWORD, const char *);

  MTBEWorker::DebugLog("Sync %08X\n", a2, a2);
  v4 = *((_QWORD *)this + 74);
  pthread_mutex_unlock((pthread_mutex_t *)(sCallbackSchedule + 104));
  *(_DWORD *)(v4 + 336) = (_DWORD)a2;
  v5 = *(void (**)(_QWORD, _QWORD, const char *))(v4 + 392);
  if (v5 && *(_BYTE *)(v4 + 424))
    v5(*(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 312), a2);
  return pthread_mutex_lock((pthread_mutex_t *)(sCallbackSchedule + 104));
}

void MT3BEngineTask::Pause(MT3BEngineTask *this, const char *a2)
{
  const char *v3;
  uint64_t v4;
  int v5;
  __int16 v6;
  int v7;
  void *v8;

  *((_WORD *)this + 660) = (_WORD)a2;
  v3 = "Immediate";
  if (*((_QWORD *)this + 116) && *(_DWORD *)(*((_QWORD *)this + 74) + 340) == 2)
    v3 = "Deferred";
  MTBEWorker::DebugLog("Pause %04x %s\n", a2, (unsigned __int16)a2, v3);
  v4 = *((_QWORD *)this + 116);
  if (v4 && *(_DWORD *)(*((_QWORD *)this + 74) + 340) == 2)
  {
    v5 = *((_DWORD *)this + 310);
    v6 = *((_WORD *)this + 660);
    if ((v6 & 0x100) != 0)
    {
      if (v5 != 4)
      {
        v7 = 2;
        goto LABEL_16;
      }
    }
    else if (!v5)
    {
      v7 = 1;
LABEL_16:
      *((_DWORD *)this + 310) = v7;
    }
    MTFEFrameFiller::PauseAt(v4 + 2728, v6);
    if (!*((_BYTE *)this + 1320))
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 75) + 56))(*((_QWORD *)this + 75), 1, 1);
      (*(void (**)(_QWORD))(**((_QWORD **)this + 116) + 64))(*((_QWORD *)this + 116));
    }
    if ((v5 - 1) >= 2)
      MT3BEngineTask::CheckAudio(this, v8);
    return;
  }
  if ((*((_WORD *)this + 660) & 0x100) != 0)
  {
    if (*((_DWORD *)this + 310) != 4)
      *((_DWORD *)this + 310) = 2;
    MT3BEngineTask::ShutUp(this, 1);
  }
  else
  {
    MT3BEngineTask::ShutUp(this, 1);
    *((_DWORD *)this + 310) = 3;
    *((_BYTE *)this + 1233) = 0;
    SpeechChannelManager::RegisterCurSpeechState(*((_QWORD *)this + 74), 3);
  }
}

uint64_t MT3BEngineTask::Boundary(MT3BEngineTask *this, void *a2)
{
  uint64_t result;

  result = MT3BEngineTask::ShutUp(this, 1);
  *((_WORD *)this + 660) = 0;
  return result;
}

void MT3BEngineTask::Stopped(MT3BEngineTask *this, const char *a2)
{
  uint64_t v2;
  int v4;

  v2 = *((_QWORD *)this + 74);
  if (*(_DWORD *)(v2 + 340))
  {
    v4 = *((_DWORD *)this + 310);
    switch(v4)
    {
      case 2:
LABEL_5:
        *((_DWORD *)this + 310) = 4;
        MTBEWorker::AddTask((MTBEWorker *)sCallbackSchedule, (MTBEWorker::Task *)&sDoneTask, v2);
        return;
      case 1:
        *((_DWORD *)this + 310) = 3;
        *((_BYTE *)this + 1233) = 0;
        MTBEWorker::DebugLog("Paused\n", a2);
        SpeechChannelManager::RegisterCurSpeechState(*((_QWORD *)this + 74), 3);
        break;
      case 0:
        goto LABEL_5;
    }
  }
}

void MT3BEngineTask::CheckAudio(MT3BEngineTask *this, void *a2)
{
  uint64_t *v3;
  timeval v4;

  (*(void (**)(_QWORD, void *))(**((_QWORD **)this + 75) + 104))(*((_QWORD *)this + 75), a2);
  if ((*((_DWORD *)this + 310) - 3) >= 2)
  {
    v3 = (uint64_t *)sSampleSchedule;
    gettimeofday(&v4, 0);
    v4.tv_sec = v4.tv_usec + 1000000 * v4.tv_sec + 50000;
    MTBEWorker::AddTask(v3, (uint64_t (***)(_QWORD))this + 50, 0, &v4.tv_sec);
  }
}

void MT3BEngineTask::Ping(MT3BEngineTask *this, void *a2)
{
  int v3;
  uint64_t *v4;
  timeval v5;

  v3 = SpeechBusy();
  *((_BYTE *)this + 1234) = v3 > 0;
  if (v3 >= 1)
  {
    v4 = (uint64_t *)sSampleSchedule;
    gettimeofday(&v5, 0);
    v5.tv_sec = v5.tv_usec + 1000000 * v5.tv_sec + 1000000;
    MTBEWorker::AddTask(v4, (uint64_t (***)(_QWORD))this + 58, 0, &v5.tv_sec);
  }
}

void MT3BEngineTask::ParseNextPhrase(MT3BEngineTask *this, const char *a2)
{
  uint64_t *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  const char *v10;
  uint64_t ClonedWord;
  MTBEPhraseMemo *v12;
  const char *v13;
  _BOOL4 v14;
  MTFEBuilder *v15;
  MTFESpeechElement *var2;
  uint64_t v17;
  MTBEVoiceContents v18;
  const MTBEPhraseParam *v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  timeval v26;
  uint64_t v27;

  MTBEWorker::DebugLog("Parse\n", a2);
  if (!*((_BYTE *)this + 1234))
  {
    *((_BYTE *)this + 1234) = 1;
    v4 = (uint64_t *)sSampleSchedule;
    gettimeofday(&v26, 0);
    v26.tv_sec = v26.tv_usec + 1000000 * v26.tv_sec + 1000000;
    MTBEWorker::AddTask(v4, (uint64_t (***)(_QWORD))this + 58, 0, &v26.tv_sec);
  }
  if (a2)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 952));
    if (*((_BYTE *)this + 1237))
    {
      v6 = *((_QWORD *)this + 116);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
      v7 = 0;
    }
    else
    {
      v7 = *((_QWORD *)this + 117);
    }
    *((_QWORD *)this + 118) = v7;
    *((_OWORD *)this + 58) = 0u;
    MTBEWorker::DebugLog("Restart at phrase %p\n", v5, v7);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 952));
  }
  v8 = (_QWORD *)*((_QWORD *)this + 118);
  if (v8)
  {
    *((_BYTE *)this + 1232) = 1;
    do
    {
      v9 = v8[533];
      v8[533] = 0;
      *((_QWORD *)this + 118) = v9;
      ClonedWord = MTFEFrameFiller::NextClonedWord((MTFEFrameFiller *)(v8 + 341));
      if (ClonedWord == -1)
      {
        v12 = 0;
        v13 = "At end of phrase %p\n";
      }
      else
      {
        v12 = (MTBEPhraseMemo *)v8[532];
        v8[532] = 0;
        v13 = "Restart phrase %p\n";
      }
      MTBEWorker::DebugLog(v13, v10, v8);
      (*(void (**)(_QWORD *))(*v8 + 48))(v8);
      v8 = (_QWORD *)*((_QWORD *)this + 118);
      v14 = v12 != 0;
    }
    while (v8 && !v12);
  }
  else
  {
    v12 = 0;
    ClonedWord = 0;
    v14 = 0;
  }
  if (!*((_BYTE *)this + 1232) || v14)
  {
    if (!v14)
      goto LABEL_23;
  }
  else
  {
    MTFEBuilder::ParseSentence(*((MTFEBuilder **)this + 76));
    v15 = (MTFEBuilder *)*((_QWORD *)this + 76);
    var2 = (MTFESpeechElement *)v15->var2;
    MTFEBuilder::ResetProduct(v15, 0);
    if (var2)
      goto LABEL_26;
    *((_BYTE *)this + 1232) = 0;
    if (!v14)
    {
LABEL_23:
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 75) + 56))(*((_QWORD *)this + 75), 0, 0);
      return;
    }
  }
  var2 = 0;
LABEL_26:
  v17 = *((_QWORD *)this + 74);
  v18.var0 = *(void **)(v17 + 304);
  MTBEPhraseParam::MTBEPhraseParam((MTBEPhraseParam *)&v26, v18, var2, *(MTBENotifier **)(v17 + 32), (MTBENotifier *)((char *)this + 1256), *(MTBENotifier **)(v17 + 40), (MTBEPersistentParam *)((char *)this + 1016));
  if (v14)
  {
    MTBEPhraseMemo::Thaw(v12, (MTBEPhraseParam *)&v26);
    v27 = ClonedWord;
    MTBEPhraseMemo::~MTBEPhraseMemo(v12);
    MEMORY[0x1D8233BA8]();
  }
  v20 = MTBEPhraseProcessor::Create(*(MTBEPhraseProcessor **)(*((_QWORD *)this + 74) + 264), (const VoiceDescription *)(*(_QWORD *)(*((_QWORD *)this + 74) + 264) + 362), &v26, v19);
  MTBEWorker::DebugLog("Created phrase %p\n", v21, v20);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 952));
  v23 = (_QWORD *)*((_QWORD *)this + 116);
  if (*((_BYTE *)this + 1237))
  {
    if (v23)
      (*(void (**)(_QWORD *))(*v23 + 48))(v23);
    *((_QWORD *)this + 116) = 0;
    *((_BYTE *)this + 1237) = 0;
  }
  else if (v23)
  {
    v23[533] = v20;
    goto LABEL_35;
  }
  *((_QWORD *)this + 117) = v20;
  MTBEWorker::DebugLog("History %p\n", v22, v20);
LABEL_35:
  *((_QWORD *)this + 116) = v20;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 952));
  MT3BEngineTask::AdjustBaseline((const char *)this);
  v24 = *((_DWORD *)this + 311);
  if (v24 < 23 || *((_BYTE *)this + 1235))
  {
    (*(void (**)(MT3BEngineTask *, _QWORD))(*(_QWORD *)this + 8))(this, 0);
  }
  else
  {
    v25 = *((_QWORD *)this + 156) + 1000 * (1000 * v24 / 22050) - 100000;
    MTBEWorker::AddTask((uint64_t *)sSampleSchedule, (uint64_t (***)(_QWORD))this, (uint64_t)this, &v25);
  }
}

MTBEWorker *InitSchedules(void)
{
  MTBEWorker *v0;
  MTBEWorker *v1;
  MTBEWorker *result;

  v0 = (MTBEWorker *)operator new();
  MTBEWorker::MTBEWorker(v0, "Samp");
  sSampleSchedule = (uint64_t)v0;
  v1 = (MTBEWorker *)operator new();
  result = MTBEWorker::MTBEWorker(v1, "Call");
  sCallbackSchedule = (uint64_t)v1;
  return result;
}

void sub_1D225AB48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x1070C40AA5774DALL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14MT3BEngineTaskC2EP20SpeechChannelManager_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 592) + 32);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, 4294967246, a2);
}

uint64_t MT3BEngineTask::ShutUp(MT3BEngineTask *this, int a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(sSampleSchedule + 104));
  MTBEWorker::PurgeTasks((MTBEWorker *)sSampleSchedule, this);
  MTBEWorker::PurgeTasks((MTBEWorker *)sSampleSchedule, (MT3BEngineTask *)((char *)this + 528));
  MTBEWorker::PurgeTasks((MTBEWorker *)sSampleSchedule, (MT3BEngineTask *)((char *)this + 208));
  MTBEWorker::PurgeTasks((MTBEWorker *)sSampleSchedule, (MT3BEngineTask *)((char *)this + 272));
  MTBEWorker::PurgeTasks((MTBEWorker *)sSampleSchedule, (MT3BEngineTask *)((char *)this + 464));
  MTBEWorker::PurgeTasks((MTBEWorker *)sSampleSchedule, (MT3BEngineTask *)((char *)this + 400));
  MTBEWorker::PurgeTasks((MTBEWorker *)sSampleSchedule, (MT3BEngineTask *)((char *)this + 336));
  pthread_mutex_unlock((pthread_mutex_t *)(sSampleSchedule + 104));
  if (a2)
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 75) + 56))(*((_QWORD *)this + 75), 1, 0);
  pthread_mutex_lock((pthread_mutex_t *)(sCallbackSchedule + 104));
  MTBEWorker::PurgeTasks((MTBEWorker *)sCallbackSchedule, this);
  MTBEWorker::PurgeTasks((MTBEWorker *)sCallbackSchedule, (MT3BEngineTask *)((char *)this + 144));
  MTBEWorker::PurgeTasks((MTBEWorker *)sCallbackSchedule, (MT3BEngineTask *)((char *)this + 80));
  MTBEWorker::PurgeTasks((MTBEWorker *)sCallbackSchedule, (MT3BEngineTask *)((char *)this + 16));
  return pthread_mutex_unlock((pthread_mutex_t *)(sCallbackSchedule + 104));
}

void MT3BEngineTask::~MT3BEngineTask(MT3BEngineTask *this, const char *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E9365648;
  *((_QWORD *)this + 1) = &unk_1E9365690;
  MTBEWorker::DebugLog("Delete Engine %p\n", a2, this);
  MT3BEngineTask::ShutUp(this, 0);
  pthread_mutex_lock((pthread_mutex_t *)(sSampleSchedule + 104));
  pthread_mutex_lock((pthread_mutex_t *)(sCallbackSchedule + 104));
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 75) + 72))(*((_QWORD *)this + 75), 0);
  v3 = (unsigned int *)(*((_QWORD *)this + 75) + 16);
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
    MTBEWorker::AddTask((MTBEWorker *)sSampleSchedule, (MTBEWorker::Task *)&sSoundOutputDoneTask, *((_QWORD *)this + 75));
  v6 = *((_QWORD *)this + 76);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 117);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  v8 = *((_QWORD *)this + 134);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
  pthread_mutex_unlock((pthread_mutex_t *)(sCallbackSchedule + 104));
  pthread_mutex_unlock((pthread_mutex_t *)(sSampleSchedule + 104));
  MTBENotifier::~MTBENotifier((MTBENotifier *)((char *)this + 1256));
  MTBEPersistentParam::~MTBEPersistentParam((MTBEPersistentParam *)((char *)this + 1016));
  SLCFStringTextSource::~SLCFStringTextSource((SLCFStringTextSource *)((char *)this + 616));
  MTBEWorker::Task::~Task((MT3BEngineTask *)((char *)this + 528));
  MTBEWorker::Task::~Task((MT3BEngineTask *)((char *)this + 464));
  MTBEWorker::Task::~Task((MT3BEngineTask *)((char *)this + 400));
  MTBEWorker::Task::~Task((MT3BEngineTask *)((char *)this + 336));
  MTBEWorker::Task::~Task((MT3BEngineTask *)((char *)this + 272));
  MTBEWorker::Task::~Task((MT3BEngineTask *)((char *)this + 208));
  MTBEWorker::Task::~Task((MT3BEngineTask *)((char *)this + 144));
  MTBEWorker::Task::~Task((MT3BEngineTask *)((char *)this + 80));
  MTBEWorker::Task::~Task((MT3BEngineTask *)((char *)this + 16));
  MTBEWorker::Task::~Task(this);
}

{
  MT3BEngineTask::~MT3BEngineTask(this, a2);
  JUMPOUT(0x1D8233BA8);
}

void MTBEWorker::AddTask(MTBEWorker *this, MTBEWorker::Task *a2, uint64_t a3)
{
  timeval v6;

  gettimeofday(&v6, 0);
  v6.tv_sec = v6.tv_usec + 1000000 * v6.tv_sec;
  MTBEWorker::AddTask((uint64_t *)this, (uint64_t (***)(_QWORD))a2, a3, &v6.tv_sec);
}

void `non-virtual thunk to'MT3BEngineTask::~MT3BEngineTask(MT3BEngineTask *this, const char *a2)
{
  MT3BEngineTask::~MT3BEngineTask((MT3BEngineTask *)((char *)this - 8), a2);
}

{
  MT3BEngineTask::~MT3BEngineTask((MT3BEngineTask *)((char *)this - 8), a2);
  JUMPOUT(0x1D8233BA8);
}

uint64_t MT3BEngineTask::WakeupSoundAndContinue(MT3BEngineTask *this, const char *a2)
{
  MTBEWorker::DebugLog("Waking up Sound\n", a2);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 75) + 64))(*((_QWORD *)this + 75), 0);
  return (*(uint64_t (**)(MT3BEngineTask *))(*(_QWORD *)this + 40))(this);
}

void MT3BEngineTask::SoundIsAwake(MT3BEngineTask *this, const char *a2)
{
  if (*(_DWORD *)(*((_QWORD *)this + 74) + 340))
  {
    MTBEWorker::DebugLog("Sound is awake\n", a2);
    if (*((_BYTE *)this + 1233))
      MT3BEngineTask::ScheduleParse(this);
    else
      MT3BEngineTask::ScheduleContinue(this);
  }
  else
  {
    MTBEWorker::DebugLog("Sound is awake, but Speech already stopped\n", a2);
  }
}

void MT3BEngineTask::ScheduleParse(MT3BEngineTask *this)
{
  uint64_t *v1;
  uint64_t (***v2)(_QWORD);
  timeval v3;

  v1 = (uint64_t *)sSampleSchedule;
  v2 = (uint64_t (***)(_QWORD))((char *)this + 528);
  gettimeofday(&v3, 0);
  v3.tv_sec = v3.tv_usec + 1000000 * v3.tv_sec;
  MTBEWorker::AddTask(v1, v2, 0, &v3.tv_sec);
}

void MT3BEngineTask::ScheduleContinue(MT3BEngineTask *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *((_WORD *)this + 660) = 0;
  *((_DWORD *)this + 310) = 0;
  MTBEWorker::PurgeTasks((MTBEWorker *)sSampleSchedule, this);
  v2 = 797831567000 * *((_DWORD *)this + 311);
  v3 = (v2 >> 44) + ((unint64_t)v2 >> 63);
  v4 = *((_QWORD *)this + 74);
  if (*(_DWORD *)(v4 + 340) == 3)
  {
    *((_BYTE *)this + 1233) = 1;
    *((_DWORD *)this + 311) = 0;
    SpeechChannelManager::RegisterCurSpeechState(v4, 2);
  }
  else
  {
    v3 -= 100;
  }
  v5 = *((_QWORD *)this + 156) + 1000 * v3;
  MTBEWorker::AddTask((uint64_t *)sSampleSchedule, (uint64_t (***)(_QWORD))this + 66, (uint64_t)this, &v5);
}

void `non-virtual thunk to'MT3BEngineTask::SoundIsAwake(MT3BEngineTask *this, const char *a2)
{
  MT3BEngineTask::SoundIsAwake((MT3BEngineTask *)((char *)this - 8), a2);
}

const char *MT3BEngineTask::Latency(MT3BEngineTask *this, const char *a2)
{
  clock_t v3;
  const char *result;
  _QWORD *v5;
  uint64_t (*v6)(_QWORD, _QWORD, uint64_t);

  if ((MTBEDebugFlags::sMTXDebug & 0x40000) != 0)
  {
    v3 = clock();
    printf("\nStartSpeakingLatency %.8f\n", (float)((float)((float)v3 * 1000.0) / 1000000.0));
  }
  result = MTBEWorker::DebugLog("Latency\n", a2);
  v5 = (_QWORD *)*((_QWORD *)this + 74);
  v6 = (uint64_t (*)(_QWORD, _QWORD, uint64_t))v5[50];
  if (v6)
    result = (const char *)v6(v5[9], v5[39], 1818326117);
  *((_BYTE *)this + 1236) = 0;
  return result;
}

const char *`non-virtual thunk to'MT3BEngineTask::Latency(MT3BEngineTask *this, const char *a2)
{
  return MT3BEngineTask::Latency((MT3BEngineTask *)((char *)this - 8), a2);
}

const char *MT3BEngineTask::AdjustBaseline(const char *this)
{
  uint64_t v1;
  __darwin_time_t v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  int64_t v7;
  timeval v8;

  if (*((int *)this + 311) >= 23)
  {
    v1 = (uint64_t)this;
    if (!this[1235])
    {
      gettimeofday(&v8, 0);
      v2 = (v8.tv_usec + 1000000 * v8.tv_sec - *(_QWORD *)(v1 + 1248)) / 1000;
      v3 = 797831567000 * *(_DWORD *)(v1 + 1244);
      this = MTBEWorker::DebugLog("Now: %d Lead %d\n", v4, v2, (v3 >> 44) + ((unint64_t)v3 >> 63) - 20);
      v6 = 797831567000 * *(_DWORD *)(v1 + 1244);
      if ((int)((v6 >> 44) + ((unint64_t)v6 >> 63) - 20) < (int)v2)
      {
        MTBEWorker::DebugLog("Running late!\n", v5);
        this = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 600) + 64))(*(_QWORD *)(v1 + 600), 0);
        v7 = 0xFFFFFF463D886968 * *(_DWORD *)(v1 + 1244);
        *(_QWORD *)(v1 + 1248) += 1000 * (int)(v2 + (v7 >> 44) + ((unint64_t)v7 >> 63) + 20);
      }
    }
  }
  return this;
}

void MT3BEngineTask::Execute(MT3BEngineTask *this, const char *a2)
{
  uint64_t v3;
  __darwin_time_t v4;
  __n128 updated;
  int v6;
  const char *v7;
  int v8;
  const char *v9;
  int v10;
  uint64_t v11;
  __darwin_time_t v12;
  uint64_t v13;
  uint64_t *v14;
  MT3BEngineTask *v15;
  MT3BEngineTask *v16;
  timeval v17;

  if (*(_DWORD *)(*((_QWORD *)this + 74) + 340) != 2)
  {
    *((_BYTE *)this + 1233) = 0;
    return;
  }
  v3 = *((_QWORD *)this + 116);
  if (!v3)
    return;
  if (*(_BYTE *)(v3 + 2881))
  {
    MTFEFrameFiller::SyncWithUnitSearch(v3 + 2728);
    MT3BEngineTask::AdjustBaseline((const char *)this);
  }
  if (*((_BYTE *)this + 1233))
  {
    MTBEWorker::DebugLog("Baseline\n", a2);
    if (*((_BYTE *)this + 1235))
    {
      gettimeofday(&v17, 0);
      v4 = v17.tv_usec + 1000000 * v17.tv_sec - 1728000000000;
    }
    else
    {
      gettimeofday(&v17, 0);
      v4 = v17.tv_usec + 1000000 * v17.tv_sec;
    }
    *((_QWORD *)this + 156) = v4;
    *((_BYTE *)this + 1233) = 0;
  }
  updated = MTBEPhraseProcessor::UpdateEngineFromNotifier((MTBEPhraseProcessor *)*((_QWORD *)this + 116));
  if (*((_BYTE *)this + 1236)
    && ((*(uint64_t (**)(_QWORD, __n128))(**((_QWORD **)this + 75) + 96))(*((_QWORD *)this + 75), updated) & 1) == 0)
  {
    (*(void (**)(MT3BEngineTask *))(*(_QWORD *)this + 48))(this);
  }
  v6 = *((_DWORD *)this + 311);
  v8 = (*(uint64_t (**)(_QWORD, _QWORD, char *, __n128))(**((_QWORD **)this + 116) + 56))(*((_QWORD *)this + 116), *((_QWORD *)this + 75), (char *)this + 1244, updated);
  v9 = "";
  if (v8)
    v9 = ", more to come";
  MTBEWorker::DebugLog("Generated %d samples%s\n", v7, (*((_DWORD *)this + 311) - v6), v9);
  MTBEPhraseProcessor::UpdateNotifierFromEngine(*((MTBEPhraseProcessor **)this + 116));
  v10 = *((_DWORD *)this + 311);
  if (v10 >= 44101)
  {
    *((_QWORD *)this + 156) += 1000000;
    v10 -= 22050;
    *((_DWORD *)this + 311) = v10;
  }
  if (v8)
  {
    v11 = sSampleSchedule;
    if (v10 == v6)
    {
      gettimeofday(&v17, 0);
      v12 = v17.tv_usec + 1000000 * v17.tv_sec + 20000;
    }
    else
    {
      v12 = *((_QWORD *)this + 156) + 1000 * (1000 * v10 / 22050) - 100000;
    }
    v17.tv_sec = v12;
    v14 = (uint64_t *)v11;
    v15 = this;
    v16 = this;
  }
  else
  {
    if (*((_WORD *)this + 660))
      return;
    v13 = sSampleSchedule;
    gettimeofday(&v17, 0);
    v17.tv_sec = v17.tv_usec + 1000000 * v17.tv_sec + 1000;
    v14 = (uint64_t *)v13;
    v15 = (MT3BEngineTask *)((char *)this + 528);
    v16 = 0;
  }
  MTBEWorker::AddTask(v14, (uint64_t (***)(_QWORD))v15, (uint64_t)v16, &v17.tv_sec);
}

uint64_t SpeechChannelManager::CallWordCallBackProc(SpeechChannelManager *this, CFRange a2)
{
  CFIndex length;
  CFIndex location;
  pthread_mutex_t *v5;
  uint64_t result;
  MT3UnicodeString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  CFRange v12;
  CFRange v13;

  length = a2.length;
  location = a2.location;
  *((_QWORD *)this + 27) = a2.location;
  v5 = (pthread_mutex_t *)((char *)this + 144);
  result = pthread_mutex_lock((pthread_mutex_t *)((char *)this + 144));
  if (!(_DWORD)result)
  {
    v7 = (MT3UnicodeString *)*((_QWORD *)this + 28);
    if (v7
      && (v12.location = location, v12.length = length,
                                   MT3UnicodeString::shouldReturnWordCallback(v7, v12)))
    {
      v13.location = location;
      v13.length = length;
      v8 = MT3UnicodeString::MapRangeToSrc(*((MT3UnicodeString **)this + 28), v13);
      v10 = v9;
      result = pthread_mutex_unlock(v5);
      v11 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))*((_QWORD *)this + 52);
      if (v11)
      {
        if (*((_BYTE *)this + 424))
          return v11(*((_QWORD *)this + 9), *((_QWORD *)this + 39), *((_QWORD *)this + 26), v8, v10);
      }
    }
    else
    {
      return pthread_mutex_unlock(v5);
    }
  }
  return result;
}

void MT3BEngineTask::SchedulePause(MT3BEngineTask *this, int a2, int a3)
{
  uint64_t v3;

  v3 = 4096;
  if (a2)
    v3 = 4352;
  MTBEWorker::AddTask((MTBEWorker *)sSampleSchedule, (MT3BEngineTask *)((char *)this + 208), v3 + a3);
}

uint64_t MT3BEngineTask::StopAtBoundary(MT3BEngineTask *this, const char *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  const char *v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t *v10;
  uint64_t v11;
  timeval v13;

  if ((a2 & 8) != 0)
  {
    MTBEWorker::DebugLog("End of Text\n", a2);
    MTBEWorker::AddTask((MTBEWorker *)sSampleSchedule, (MT3BEngineTask *)((char *)this + 336), (uint64_t)this);
  }
  if ((a2 & 4) != 0)
  {
    v4 = (pthread_mutex_t *)((char *)this + 952);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 952));
    v7 = (_QWORD *)*((_QWORD *)this + 117);
    if (v7)
    {
      if (v7 == *((_QWORD **)this + 116))
      {
        *((_BYTE *)this + 1237) = 1;
      }
      else
      {
        v8 = v7[533];
        v7[533] = 0;
        *((_QWORD *)this + 117) = v8;
        MTBEWorker::DebugLog("History %p\n", v6, v8);
        (*(void (**)(_QWORD *))(*v7 + 48))(v7);
      }
    }
    goto LABEL_11;
  }
  if ((a2 & 2) != 0)
  {
    MTBEWorker::DebugLog("Word Up\n", a2);
    v4 = (pthread_mutex_t *)((char *)this + 952);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 952));
    v5 = *((_QWORD *)this + 117);
    if (v5)
      ++*(_WORD *)(v5 + 2874);
LABEL_11:
    pthread_mutex_unlock(v4);
  }
  v9 = *((_WORD *)this + 660);
  if (!v9 || ((1 << v9) & (unint64_t)a2) == 0)
    return 0;
  v10 = (uint64_t *)sSampleSchedule;
  gettimeofday(&v13, 0);
  v13.tv_sec = v13.tv_usec + 1000000 * v13.tv_sec;
  MTBEWorker::AddTask(v10, (uint64_t (***)(_QWORD))this + 34, (uint64_t)this, &v13.tv_sec);
  v11 = *((_QWORD *)this + 116);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 64))(v11);
  return 1;
}

uint64_t `non-virtual thunk to'MT3BEngineTask::StopAtBoundary(MT3BEngineTask *this, const char *a2)
{
  return MT3BEngineTask::StopAtBoundary((MT3BEngineTask *)((char *)this - 8), a2);
}

uint64_t MT3BEngineTask::AncillaryTask::Execute(MT3BEngineTask::AncillaryTask *this, void *a2)
{
  uint64_t (*v2)(_QWORD *, void *);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, void *))*((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  v4 = (_QWORD *)(*((_QWORD *)this + 1) + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, void *))(*v4 + v2);
  return v2(v4, a2);
}

uint64_t MT3BNotifier::ResetFromVoice(MTBENotifier *this, void *a2, int a3)
{
  double v5;
  uint64_t result;
  _BYTE v7[1304];

  v5 = MTBENotifier::ResetFromVoice(this, a2, a3);
  MTBEParam::MTBEParam(v7, 0, a2, 0, 0, v5);
  this->var1 = MTBEParam::GetRate((MTBEParam *)v7) << 16;
  this->var2 = 3072 * MTBEParam::GetPitch((MTBEParam *)v7) + 2054400;
  this->var3 = MTBEParam::GetModulation((MTBEParam *)v7);
  result = MTBEParam::GetVolume((MTBEParam *)v7);
  this->var4 = result;
  return result;
}

void MT3BNotifier::NotifyError(MT3BNotifier *this, int a2, uint64_t a3)
{
  MTBENotifier::NotifyError((MTBENotifier *)this, a2, a3);
  SpeechChannelManager::RegisterCurSpeechError(*((SpeechChannelManager **)this + 8), a2, a3);
}

uint64_t MT3BNotifier::NotifyTextDone(uint64_t this, const void **a2, unint64_t *a3, int *a4)
{
  uint64_t v4;
  uint64_t (*v5)(_QWORD, _QWORD, const void **, unint64_t *, int *);

  v4 = *(_QWORD *)(this + 64);
  v5 = *(uint64_t (**)(_QWORD, _QWORD, const void **, unint64_t *, int *))(v4 + 376);
  if (v5 && *(_BYTE *)(v4 + 424))
    return v5(*(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 312), a2, a3, a4);
  *a2 = 0;
  return this;
}

void MT3BNotifier::NotifySync(MT3BNotifier *this, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*((_QWORD *)this + 8) + 24);
  if (v3)
  {
    v4 = 797831567000 * *(_DWORD *)(v3 + 1244);
    v5 = *(_QWORD *)(v3 + 1248) + 1000 * a3 + (int)(1000 * ((v4 >> 44) + ((unint64_t)v4 >> 63)));
    MTBEWorker::AddTask((uint64_t *)sCallbackSchedule, (uint64_t (***)(_QWORD))(v3 + 144), a2, &v5);
  }
}

void MT3BNotifier::NotifyPhoneme(MTBENotifier *this, int a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  MTBENotifier::NotifyPhoneme(this, a2);
  v7 = *((_QWORD *)this[1].var0 + 3);
  if (v7)
  {
    v8 = 797831567000 * *(_DWORD *)(v7 + 1244);
    v9 = *(_QWORD *)(v7 + 1248) + 1000 * a4 + (int)(1000 * ((v8 >> 44) + ((unint64_t)v8 >> 63))) + 1;
    MTBEWorker::AddTask((uint64_t *)sCallbackSchedule, (uint64_t (***)(_QWORD))(v7 + 80), a2, &v9);
  }
}

void MT3BNotifier::NotifyWord(MT3BNotifier *this, uint64_t a2, unsigned __int8 a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*((_QWORD *)this + 8) + 24);
  if (v4)
  {
    v5 = 797831567000 * *(_DWORD *)(v4 + 1244);
    v6 = *(_QWORD *)(v4 + 1248) + 1000 * a4 + (int)(1000 * ((v5 >> 44) + ((unint64_t)v5 >> 63)));
    MTBEWorker::AddTask((uint64_t *)sCallbackSchedule, (uint64_t (***)(_QWORD))(v4 + 16), a3 | (unint64_t)(a2 << 8), &v6);
  }
}

BOOL MT3BNotifier::WantSpeechDone(MT3BNotifier *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 8);
  return *(_QWORD *)(v1 + 384) && *(_BYTE *)(v1 + 424) != 0;
}

BOOL MT3BNotifier::WantSync(MT3BNotifier *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 8);
  return *(_QWORD *)(v1 + 392) && *(_BYTE *)(v1 + 424) != 0;
}

BOOL MT3BNotifier::WantPhoneme(MT3BNotifier *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 8);
  return *(_QWORD *)(v1 + 408) && *(_BYTE *)(v1 + 424) != 0;
}

BOOL MT3BNotifier::WantWord(MT3BNotifier *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 8);
  return *(_QWORD *)(v1 + 416) && *(_BYTE *)(v1 + 424) != 0;
}

uint64_t MTPBNotifier::ResetFromVoice(MTBENotifier *this, void *a2, int a3)
{
  double v5;
  double v6;
  uint64_t result;
  _BYTE v8[1310];
  _BYTE v9[354];

  v5 = MTBENotifier::ResetFromVoice(this, a2, a3);
  v6 = MTPBVoice::MTPBVoice(v9, a2, v5);
  MTBEParam::MTBEParam(v8, 1, v9, 0, 0, v6);
  this->var1 = MTBEParam::GetRate((MTBEParam *)v8) << 16;
  this->var2 = 3072 * MTBEParam::GetPitch((MTBEParam *)v8) + 2054400;
  this->var3 = MTBEParam::GetModulation((MTBEParam *)v8);
  result = MTBEParam::GetVolume((MTBEParam *)v8);
  this->var4 = result;
  return result;
}

uint64_t InitSpeechProcessing(SpeechChannelManager *a1)
{
  const char *v2;
  uint64_t v3;
  int v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  MTBEWorker::DebugLog("Init %p\n", v2, a1);
  v3 = *((_QWORD *)a1 + 4);
  v4 = *(_DWORD *)(*((_QWORD *)a1 + 33) + 4);
  if (v4 != 1835364215 && v4 != 1734437985)
  {
    v9 = operator new();
    MTBENotifier::MTBENotifier((MTBENotifier *)v9);
    *(_QWORD *)v9 = &off_1E93657E0;
    *(_QWORD *)(v9 + 64) = a1;
    v10 = operator new();
    MTBENotifier::MTBENotifier((MTBENotifier *)v10);
    *(_QWORD *)v10 = &off_1E93657E0;
    *(_QWORD *)(v10 + 64) = a1;
    if (!v3)
      goto LABEL_9;
LABEL_7:
    v6 = *(_OWORD *)(v3 + 8);
    v7 = *(_OWORD *)(v3 + 24);
    v8 = *(_OWORD *)(v3 + 40);
    *(_DWORD *)(v9 + 56) = *(_DWORD *)(v3 + 56);
    *(_OWORD *)(v9 + 40) = v8;
    *(_OWORD *)(v9 + 24) = v7;
    *(_OWORD *)(v9 + 8) = v6;
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 96))(v9, *((_QWORD *)a1 + 33) + 362, 0);
    *((_QWORD *)a1 + 4) = v9;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    goto LABEL_10;
  }
  v9 = operator new();
  MTBENotifier::MTBENotifier((MTBENotifier *)v9);
  *(_QWORD *)(v9 + 64) = a1;
  *(_QWORD *)v9 = &off_1E9365890;
  v10 = operator new();
  MTBENotifier::MTBENotifier((MTBENotifier *)v10);
  *(_QWORD *)(v10 + 64) = a1;
  *(_QWORD *)v10 = &off_1E9365890;
  if (v3)
    goto LABEL_7;
LABEL_9:
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 96))(v9, *((_QWORD *)a1 + 33) + 362, 0);
  *((_QWORD *)a1 + 4) = v9;
LABEL_10:
  *(_OWORD *)(v10 + 8) = *(_OWORD *)(v9 + 8);
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(v9 + 24);
  *(_OWORD *)(v10 + 40) = *(_OWORD *)(v9 + 40);
  *(_DWORD *)(v10 + 56) = *(_DWORD *)(v9 + 56);
  result = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = v10;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1D225BD38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40E0E0A3EDLL);
  _Unwind_Resume(a1);
}

uint64_t ResetSpeechProcessing(SpeechChannelManager *a1)
{
  const char *v2;

  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  MTBEWorker::DebugLog("Reset %p\n", v2, a1);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a1 + 4) + 96))(*((_QWORD *)a1 + 4), *((_QWORD *)a1 + 33) + 362, 1);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a1 + 5) + 96))(*((_QWORD *)a1 + 5), *((_QWORD *)a1 + 33) + 362, 1);
}

uint64_t ClearSpeechProcessing(SpeechChannelManager *a1)
{
  const char *v2;
  uint64_t v3;

  MTBEDebugFlags::Update(a1);
  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  MTBEWorker::DebugLog("Clear %p\n", v2, a1);
  pthread_mutex_lock((pthread_mutex_t *)(sSampleSchedule + 104));
  pthread_mutex_lock((pthread_mutex_t *)(sSampleSchedule + 40));
  v3 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  pthread_mutex_unlock((pthread_mutex_t *)(sSampleSchedule + 40));
  return pthread_mutex_unlock((pthread_mutex_t *)(sSampleSchedule + 104));
}

uint64_t ShutdownSpeechProcessing(SpeechChannelManager *a1)
{
  const char *v2;
  uint64_t result;

  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  MTBEWorker::DebugLog("Shutdown %p\n", v2, a1);
  pthread_mutex_lock((pthread_mutex_t *)(sCallbackSchedule + 104));
  MTBEWorker::PurgeTasks((MTBEWorker *)sCallbackSchedule, (const char *)a1);
  pthread_mutex_unlock((pthread_mutex_t *)(sCallbackSchedule + 104));
  result = MTBEWorker::PendingTasks((MTBEWorker *)sSampleSchedule, (MTBEWorker::Task *)&sSoundOutputDoneTask);
  if ((_DWORD)result)
  {
    do
    {
      usleep(0x3E8u);
      result = MTBEWorker::PendingTasks((MTBEWorker *)sSampleSchedule, (MTBEWorker::Task *)&sSoundOutputDoneTask);
    }
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t StartSpeechProcessing(SpeechChannelManager *a1, int a2)
{
  const char *v4;
  uint64_t v5;
  MT3BEngineTask *v6;
  int v7;
  const char *v8;

  MTBEDebugFlags::Update(a1);
  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  MTBEWorker::DebugLog("Start %p\n", v4, a1);
  pthread_mutex_lock((pthread_mutex_t *)(sSampleSchedule + 104));
  pthread_mutex_lock((pthread_mutex_t *)(sSampleSchedule + 40));
  if (*((_QWORD *)a1 + 9))
  {
    v5 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    pthread_mutex_unlock((pthread_mutex_t *)(sSampleSchedule + 40));
    if (*((_QWORD *)a1 + 26))
    {
      v6 = (MT3BEngineTask *)operator new();
      MT3BEngineTask::MT3BEngineTask(v6, a1);
      *((_QWORD *)a1 + 3) = v6;
      if (a2)
        v7 = 3;
      else
        v7 = 2;
      SpeechChannelManager::RegisterCurSpeechState((uint64_t)a1, v7);
      MTBEWorker::DebugLog("Waking up Sound\n", v8);
      (*(void (**)(_QWORD *, _QWORD))(**((_QWORD **)v6 + 75) + 64))(*((_QWORD **)v6 + 75), 0);
      (*(void (**)(MT3BEngineTask *))(*(_QWORD *)v6 + 40))(v6);
    }
    else
    {
      SpeechChannelManager::RegisterCurSpeechState((uint64_t)a1, 0);
    }
  }
  else
  {
    pthread_mutex_unlock((pthread_mutex_t *)(sSampleSchedule + 40));
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(sSampleSchedule + 104));
}

void sub_1D225C068(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10E1C4013B793F0);
  _Unwind_Resume(a1);
}

uint64_t StopSpeechProcessing(SpeechChannelManager *a1, char a2)
{
  const char *v4;
  uint64_t v5;

  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  MTBEWorker::DebugLog("Stop %p\n", v4, a1);
  pthread_mutex_lock((pthread_mutex_t *)(sSampleSchedule + 104));
  v5 = *((_QWORD *)a1 + 3);
  if (v5)
    MTBEWorker::AddTask((MTBEWorker *)sSampleSchedule, (MTBEWorker::Task *)(v5 + 208), a2 + 4352);
  else
    SpeechChannelManager::RegisterCurSpeechState((uint64_t)a1, 0);
  return pthread_mutex_unlock((pthread_mutex_t *)(sSampleSchedule + 104));
}

uint64_t PauseSpeechProcessing(SpeechChannelManager *a1, char a2)
{
  const char *v4;
  uint64_t v5;

  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  MTBEWorker::DebugLog("Pause %p\n", v4, a1);
  pthread_mutex_lock((pthread_mutex_t *)(sSampleSchedule + 104));
  v5 = *((_QWORD *)a1 + 3);
  if (v5)
    MTBEWorker::AddTask((MTBEWorker *)sSampleSchedule, (MTBEWorker::Task *)(v5 + 208), a2 + 4096);
  else
    SpeechChannelManager::RegisterCurSpeechState((uint64_t)a1, 0);
  return pthread_mutex_unlock((pthread_mutex_t *)(sSampleSchedule + 104));
}

uint64_t ContinueSpeechProcessing(SpeechChannelManager *a1)
{
  const char *v2;
  const char *v3;
  _QWORD **v4;

  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  MTBEWorker::DebugLog("Continue requested\n", v2);
  pthread_mutex_lock((pthread_mutex_t *)(sSampleSchedule + 104));
  v4 = (_QWORD **)*((_QWORD *)a1 + 3);
  if (v4)
  {
    MTBEWorker::DebugLog("Waking up Sound\n", v3);
    (*(void (**)(_QWORD *, _QWORD))(*v4[75] + 64))(v4[75], 0);
    ((void (*)(_QWORD **))(*v4)[5])(v4);
  }
  else
  {
    SpeechChannelManager::RegisterCurSpeechState((uint64_t)a1, 0);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(sSampleSchedule + 104));
}

void DoTextToPhon(SpeechChannelManager *a1, const __CFString *a2, unint64_t a3, MTBEWritePhonemes *a4)
{
  const char *v8;
  CFLocaleRef v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  __int128 v13;
  MTFESentence *var2;
  MTBEVoiceContents v15;
  const MTBEPhraseParam *v16;
  float *v17;
  float *v18;
  void *v19;
  _BYTE v20[64];
  MTFEBuilder v21;
  MTBENotifier v22;
  _QWORD v23[5];
  SLCFStringTextSource v24;
  MTBEPersistentParam v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  MTBEDebugFlags::Update(a1);
  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  MTBEWorker::DebugLog("TextToPhon %p\n", v8, a1);
  SLCFStringTextSource::SLCFStringTextSource(&v24, a2);
  MTBEPersistentParam::MTBEPersistentParam(&v25);
  v9 = CFLocaleCreate(0, CFSTR("en_US"));
  v25.var9 = (SLLexer *)SLLexer::Create();
  CFRelease(v9);
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 0x40000000;
  v23[2] = ___Z12DoTextToPhonP20SpeechChannelManagerPK10__CFStringlP17MTBEWritePhonemes_block_invoke;
  v23[3] = &__block_descriptor_tmp_54;
  v23[4] = a1;
  (*((void (**)(SLLexer *, _QWORD *))v25.var9->var0 + 5))(v25.var9, v23);
  *(_OWORD *)&v25.var10 = *(_OWORD *)((char *)a1 + 232);
  v25.var12 = (__CFDictionary *)*((_QWORD *)a1 + 31);
  v25.var6 = (__CFDictionary *)*((_QWORD *)a1 + 6);
  v10 = *((_QWORD *)a1 + 4);
  v22.var0 = (void **)&off_1E93659F0;
  v11 = *(_OWORD *)(v10 + 24);
  v12 = *(_DWORD *)(v10 + 56);
  v13 = *(_OWORD *)(v10 + 40);
  *(_OWORD *)&v22.var1 = *(_OWORD *)(v10 + 8);
  *(_OWORD *)((char *)&v22.var5.newPos + 2) = v13;
  *(_DWORD *)&v22.var8[2] = v12;
  *(_OWORD *)&v22.var5.count = v11;
  (*((void (**)(SLLexer *, _QWORD))v25.var9->var0 + 2))(v25.var9, DWORD2(v13));
  (*((void (**)(SLLexer *, unsigned __int16 *))v25.var9->var0 + 3))(v25.var9, v22.var8);
  MTFEBuilder::MTFEBuilder(&v21, v25.var9);
  while (1)
  {
    MTFEBuilder::ParseSentence(&v21);
    var2 = v21.var2;
    MTFEBuilder::ResetProduct(&v21, 0);
    if (!var2)
      break;
    v15.var0 = *(void **)((char *)a1 + 304);
    MTBEPhraseParam::MTBEPhraseParam((MTBEPhraseParam *)v20, v15, (MTFESpeechElement *)var2, *((MTBENotifier **)a1 + 4), &v22, *((MTBENotifier **)a1 + 5), &v25);
    v20[61] = 1;
    v17 = (float *)MTBEPhraseProcessor::Create(*((MTBEPhraseProcessor **)a1 + 33), (const VoiceDescription *)(*((_QWORD *)a1 + 33) + 362), v20, v16);
    v18 = v17;
    if ((a3 & 6) != 0)
    {
      (*(void (**)(MTBEWritePhonemes *, unint64_t, unint64_t, float, float, float))(*(_QWORD *)a4 + 96))(a4, (a3 >> 1) & 1, (a3 >> 2) & 1, v17[1055], v17[1056], v17[1057]);
      a3 = 0;
    }
    v19 = &unk_1E9367978;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)&v19, (MTFESpeechElement *)var2);
    (**(void (***)(MTBEWritePhonemes *, MTFESentence *))a4)(a4, var2);
    if (v18)
      (*(void (**)(float *))(*(_QWORD *)v18 + 48))(v18);
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v19);
  }
  if (v25.var9)
    (*((void (**)(SLLexer *))v25.var9->var0 + 7))(v25.var9);
  MTFEBuilder::~MTFEBuilder(&v21);
  MTBENotifier::~MTBENotifier(&v22);
  MTBEPersistentParam::~MTBEPersistentParam(&v25);
  SLCFStringTextSource::~SLCFStringTextSource(&v24);
}

void sub_1D225C524(_Unwind_Exception *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, MTFEBuilder *a12, MTBENotifier *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, SLCFStringTextSource *a19, MTBEPersistentParam *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  MTBENotifier::~MTBENotifier((MTBENotifier *)&a33);
  MTBEPersistentParam::~MTBEPersistentParam((MTBEPersistentParam *)&STACK[0x250]);
  SLCFStringTextSource::~SLCFStringTextSource((SLCFStringTextSource *)&a46);
  _Unwind_Resume(a1);
}

uint64_t ___Z12DoTextToPhonP20SpeechChannelManagerPK10__CFStringlP17MTBEWritePhonemes_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), 4294967246, a2);
}

uint64_t TextToPhonemesProcessing(SpeechChannelManager *a1, const __CFString *a2, unint64_t a3, const __CFString **a4)
{
  uint64_t v8;
  char *v9;
  const char *v10;

  v8 = (a3 >> 3) & 1;
  if ((a3 & 1) != 0)
  {
    v9 = (char *)operator new();
    MTBEWritePhonemes::MTBEWritePhonemes((MTBEWritePhonemes *)v9, v8);
    *(_QWORD *)v9 = &unk_1E93678E8;
  }
  else
  {
    v9 = (char *)operator new();
    MTBEWritePhonemes::MTBEWritePhonemes((MTBEWritePhonemes *)v9, v8);
  }
  DoTextToPhon(a1, a2, a3, (MTBEWritePhonemes *)v9);
  v10 = v9 + 16;
  if (v9[39] < 0)
    v10 = *(const char **)v10;
  *a4 = CFStringCreateWithCString(0, v10, 0x8000100u);
  (*(void (**)(char *))(*(_QWORD *)v9 + 88))(v9);
  return 0;
}

void sub_1D225C694(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10B3C4043E664B7);
  _Unwind_Resume(a1);
}

void MT3BTextSource::~MT3BTextSource(SLCFStringTextSource *this)
{
  SLCFStringTextSource::~SLCFStringTextSource(this);
  JUMPOUT(0x1D8233BA8);
}

const char *MTBEDoneTask::Name(MTBEDoneTask *this)
{
  return "Done";
}

void MTBEDoneTask::~MTBEDoneTask(MTBEDoneTask *this)
{
  MTBEWorker::Task::~Task(this);
  JUMPOUT(0x1D8233BA8);
}

const char *MTBESoundOutputDoneTask::Name(MTBESoundOutputDoneTask *this)
{
  return "Sound Output Done";
}

void MTBESoundOutputDoneTask::~MTBESoundOutputDoneTask(MTBESoundOutputDoneTask *this)
{
  MTBEWorker::Task::~Task(this);
  JUMPOUT(0x1D8233BA8);
}

uint64_t MT3BEngineTask::AncillaryTask::Name(MT3BEngineTask::AncillaryTask *this)
{
  return (uint64_t)this + 32;
}

void MT3BEngineTask::AncillaryTask::~AncillaryTask(MT3BEngineTask::AncillaryTask *this)
{
  MTBEWorker::Task::~Task(this);
  JUMPOUT(0x1D8233BA8);
}

uint64_t MT3BEngineTask::Name(MT3BEngineTask *this)
{
  return (uint64_t)this + 1322;
}

void MT3BNotifier::~MT3BNotifier(MTBENotifier *this)
{
  MTBENotifier::~MTBENotifier(this);
  JUMPOUT(0x1D8233BA8);
}

void MTPBNotifier::~MTPBNotifier(MTBENotifier *this)
{
  MTBENotifier::~MTBENotifier(this);
  JUMPOUT(0x1D8233BA8);
}

uint64_t _GLOBAL__sub_I_MT3Processing_cp()
{
  __cxa_atexit((void (*)(void *))MTBEDoneTask::~MTBEDoneTask, &sDoneTask, &dword_1D2256000);
  return __cxa_atexit((void (*)(void *))MTBESoundOutputDoneTask::~MTBESoundOutputDoneTask, &sSoundOutputDoneTask, &dword_1D2256000);
}

_QWORD *std::list<SpeechChannelManager *>::~list(_QWORD *a1)
{
  std::__list_imp<SpeechChannelManager *>::clear(a1);
  return a1;
}

uint64_t SpeechChannelManager::ValidSpeechChannel(uint64_t this)
{
  if ((this & 7) != 0)
    return 0;
  if (*(_QWORD *)(this + 72) != this)
    return 0;
  return this;
}

void SpeechChannelManager::SpeechChannelManager(SpeechChannelManager *this)
{
  SLDictLookup *v2;
  const __CFLocale *v3;
  const __CFLocale *v4;
  const SLDictLookup *v5;
  __CFBundle *v6;
  const __CFURL *v7;
  const __CFURL *v8;
  __CFReadStream *v9;
  __CFReadStream *v10;

  *(_QWORD *)this = &off_1E9365920;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 85) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_DWORD *)this + 72) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_QWORD *)this + 52) = 0;
  *((_BYTE *)this + 424) = 1;
  *((_QWORD *)this + 54) = 0;
  *((_DWORD *)this + 110) = 0;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 37) = 0;
  *(_QWORD *)((char *)this + 358) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_BYTE *)this + 464) = 0;
  *((_QWORD *)this + 9) = this;
  v2 = (SLDictLookup *)CFLocaleCreate(0, CFSTR("en_US"));
  *((_QWORD *)this + 2) = v2;
  v4 = (const __CFLocale *)SLDictLookup::Create(v2, v3);
  *((_QWORD *)this + 8) = v4;
  *((_QWORD *)this + 7) = SLPronouncer::Create(*((SLPronouncer **)this + 2), v4, v5);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 80), 0);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 144), 0);
  if (SpeechChannelManager::SpeechChannelManager(void)::sInitInactiveChannelSet != -1)
    dispatch_once(&SpeechChannelManager::SpeechChannelManager(void)::sInitInactiveChannelSet, &__block_literal_global);
  v6 = (__CFBundle *)SLGetSpeechDictionaryBundle();
  if (v6)
  {
    v7 = CFBundleCopyResourceURL(v6, CFSTR("HomophonesEng"), 0, 0);
    if (v7)
    {
      v8 = v7;
      v9 = CFReadStreamCreateWithFile(0, v7);
      if (v9)
      {
        v10 = v9;
        CFReadStreamOpen(v9);
        *((_QWORD *)this + 6) = CFPropertyListCreateWithStream(0, v10, 0, 0, 0, 0);
        CFRelease(v10);
      }
      CFRelease(v8);
    }
  }
}

dispatch_queue_t ___ZN20SpeechChannelManagerC2Ev_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("MacintalkSpeechQueue", 0);
  sMacintalkSpeechChannelQueue = (uint64_t)result;
  return result;
}

void SpeechChannelManager::CloseSpeechChannel(SpeechChannelManager *this)
{
  int v2;
  unsigned int v3;
  _QWORD block[5];

  *((_QWORD *)this + 9) = 0;
  if (*((_DWORD *)this + 85))
  {
    StopSpeechProcessing(this, 0);
    if (*((_DWORD *)this + 85))
    {
      v2 = -1;
      v3 = 1;
      do
      {
        usleep(0x1388u);
        if (!(v2 + 10 * (v3 / 0xA)))
          StopSpeechProcessing(this, 0);
        --v2;
        ++v3;
      }
      while (*((_DWORD *)this + 85));
    }
  }
  ClearSpeechProcessing(this);
  ShutdownSpeechProcessing(this);
  SpeechChannelManager::DisposeSoundChannel(this, 1);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN20SpeechChannelManager18CloseSpeechChannelEv_block_invoke;
  block[3] = &__block_descriptor_tmp_5;
  block[4] = this;
  dispatch_async((dispatch_queue_t)sMacintalkSpeechChannelQueue, block);
}

OpaqueExtAudioFile *SpeechChannelManager::DisposeSoundChannel(SpeechChannelManager *this, int a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  OpaqueExtAudioFile *result;

  v3 = (unsigned int *)*((_QWORD *)this + 56);
  if (v3)
  {
    if (a2)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 40))(v3);
      v3 = (unsigned int *)*((_QWORD *)this + 56);
    }
    v4 = v3 + 4;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      v7 = *((_QWORD *)this + 56);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    *((_QWORD *)this + 56) = 0;
  }
  result = (OpaqueExtAudioFile *)*((_QWORD *)this + 57);
  if (result)
  {
    if (*((_BYTE *)this + 464))
      result = (OpaqueExtAudioFile *)ExtAudioFileDispose(result);
    *((_QWORD *)this + 57) = 0;
    *((_BYTE *)this + 464) = 0;
  }
  return result;
}

void ___ZN20SpeechChannelManager18CloseSpeechChannelEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = operator new(0x18uLL);
  v3 = sListOfActiveSpeechChannels;
  v2[1] = &sListOfActiveSpeechChannels;
  v2[2] = v1;
  *v2 = v3;
  *(_QWORD *)(v3 + 8) = v2;
  sListOfActiveSpeechChannels = (uint64_t)v2;
  v4 = qword_1ED946DB0++;
  if ((unint64_t)qword_1ED946DB0 >= 3)
  {
    v5 = (_QWORD **)qword_1ED946DA8;
    v6 = *(_QWORD *)(qword_1ED946DA8 + 16);
    v7 = *(_QWORD *)qword_1ED946DA8;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(qword_1ED946DA8 + 8);
    *v5[1] = v7;
    qword_1ED946DB0 = v4;
    operator delete(v5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

void SpeechChannelManager::~SpeechChannelManager(SpeechChannelManager *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  PROWReader *v12;
  int v13;
  void *v14;
  SLMMapCache *v15;
  void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;

  *(_QWORD *)this = &off_1E9365920;
  *((_QWORD *)this + 9) = 0;
  ClearSpeechProcessing(this);
  ShutdownSpeechProcessing(this);
  SpeechChannelManager::DisposeSoundChannel(this, 1);
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 5);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 30);
  if (v5)
  {
    for (i = 0; i != -80000; i -= 32)
      MEOWVectorBase::~MEOWVectorBase((void **)(v5 + 79968 + i));
    MEMORY[0x1D8233BA8](v5, 0x1080C404F240F48);
  }
  v7 = *((_QWORD *)this + 8);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 7);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 28);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  CFRelease(*((CFTypeRef *)this + 2));
  v11 = (const void *)*((_QWORD *)this + 59);
  if (v11)
    CFRelease(v11);
  v12 = (PROWReader *)*((_QWORD *)this + 38);
  if (v12)
  {
    v13 = *((_DWORD *)this + 64);
    if (v13 == 1734437985)
    {
      PROWReader::~PROWReader(v12);
    }
    else
    {
      if (v13 != 1835364215)
        goto LABEL_25;
      MEOWReader::~MEOWReader((MEOWReader *)v12);
    }
    MEMORY[0x1D8233BA8]();
  }
LABEL_25:
  v14 = (void *)*((_QWORD *)this + 33);
  if (v14)
    free(v14);
  v15 = (SLMMapCache *)*((_QWORD *)this + 34);
  if (v15)
    SLMMapCache::Unmap(v15, v10);
  v16 = (void *)*((_QWORD *)this + 37);
  if (v16)
    free(v16);
  v17 = (const void *)*((_QWORD *)this + 26);
  if (v17)
    CFRelease(v17);
  v18 = (const void *)*((_QWORD *)this + 29);
  if (v18)
    CFRelease(v18);
  v19 = (const void *)*((_QWORD *)this + 6);
  if (v19)
    CFRelease(v19);
  v20 = (const void *)*((_QWORD *)this + 31);
  if (v20)
    CFRelease(v20);
  v21 = (const void *)*((_QWORD *)this + 54);
  if (v21)
    _Block_release(v21);
}

{
  SpeechChannelManager::~SpeechChannelManager(this);
  JUMPOUT(0x1D8233BA8);
}

MTBESoundOutput *SpeechChannelManager::CreateSoundChannel(SpeechChannelManager *this, OpaqueExtAudioFile *a2)
{
  MTBESoundOutput *result;
  MTBESoundOutput *v4;
  const __CFArray *v5;

  result = (MTBESoundOutput *)*((_QWORD *)this + 56);
  if (!result)
  {
    v4 = (MTBESoundOutput *)*((_QWORD *)this + 57);
    if (v4 == (MTBESoundOutput *)-1)
    {
      v4 = 0;
    }
    else if (!v4)
    {
      result = (MTBESoundOutput *)MTBESoundOutput::CreateChannel((MTBESoundOutput *)*((unsigned int *)this + 110));
      goto LABEL_7;
    }
    result = (MTBESoundOutput *)MTBESoundOutput::CreateFileStream(v4, a2);
LABEL_7:
    *((_QWORD *)this + 56) = result;
    v5 = (const __CFArray *)*((_QWORD *)this + 59);
    if (v5)
    {
      MTBESoundOutput::SetChannelMap(result, v5);
      return (MTBESoundOutput *)*((_QWORD *)this + 56);
    }
  }
  return result;
}

CFIndex SpeechChannelManager::SpeakCFString(SpeechChannelManager *this, CFStringRef theString, const __CFDictionary *a3)
{
  CFIndex result;
  int v7;
  unsigned int v8;
  const void *v9;
  uint64_t v10;
  MT3UnicodeString *v11;
  const __CFString *TextWithEmojiDesc;
  CFStringRef Copy;
  int v14;

  if (*((_DWORD *)this + 85))
  {
    if ((TestOption(a3, CFSTR("NoSpeechInterrupt")) & 1) != 0)
      return -242;
    if (*((_DWORD *)this + 85))
    {
      StopSpeechProcessing(this, 0);
      if (*((_DWORD *)this + 85))
      {
        v7 = -1;
        v8 = 1;
        do
        {
          usleep(0x1388u);
          if (!(v7 + 10 * (v8 / 0xA)))
            StopSpeechProcessing(this, 0);
          --v7;
          ++v8;
        }
        while (*((_DWORD *)this + 85));
      }
    }
  }
  v9 = (const void *)*((_QWORD *)this + 26);
  if (v9)
  {
    CFRelease(v9);
    *((_QWORD *)this + 26) = 0;
    *((_QWORD *)this + 27) = 0;
  }
  if (theString)
  {
    result = CFStringGetLength(theString);
    if (!result)
      return result;
    if (!pthread_mutex_lock((pthread_mutex_t *)((char *)this + 144)))
    {
      v10 = *((_QWORD *)this + 28);
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        *((_QWORD *)this + 28) = 0;
      }
      v11 = (MT3UnicodeString *)operator new();
      MT3UnicodeString::MT3UnicodeString(v11, theString);
      *((_QWORD *)this + 28) = v11;
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 144));
    }
    TextWithEmojiDesc = (const __CFString *)MT3UnicodeString::getTextWithEmojiDesc(*((MT3UnicodeString **)this + 28));
    Copy = CFStringCreateCopy(0, TextWithEmojiDesc);
    *((_QWORD *)this + 26) = Copy;
    if (!Copy)
      return -108;
    *((_DWORD *)this + 85) = 1;
    *((_QWORD *)this + 43) = 0;
    *((_QWORD *)this + 44) = 0;
    *(_QWORD *)((char *)this + 358) = 0;
    v14 = TestOption(a3, CFSTR("PreflightThenPause"));
    StartSpeechProcessing(this, v14);
  }
  return 0;
}

void sub_1D225D028(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10F1C409C35B431);
  _Unwind_Resume(a1);
}

const __CFDictionary *TestOption(const __CFDictionary *result, const __CFString *a2)
{
  const __CFBoolean *v2;
  CFTypeID v3;
  BOOL v4;
  CFTypeID v5;
  char valuePtr;

  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      v2 = result;
      v3 = CFGetTypeID(result);
      if (v3 == CFBooleanGetTypeID())
      {
        v4 = CFBooleanGetValue(v2) == 0;
      }
      else
      {
        v5 = CFGetTypeID(v2);
        if (v5 != CFNumberGetTypeID())
          return 0;
        valuePtr = 0;
        if (CFNumberGetValue(v2, kCFNumberSInt8Type, &valuePtr))
          v4 = valuePtr == 0;
        else
          v4 = 1;
      }
      return (const __CFDictionary *)!v4;
    }
  }
  return result;
}

uint64_t SpeechChannelManager::UseVoice(SpeechChannelManager *this, VoiceSpec *a2, __CFBundle *a3)
{
  uint64_t result;
  void *v7;
  void **v8;
  uint64_t v9;
  SpeechChannelManager **v10;
  uint64_t v11;
  void *v12;
  int v13;
  MEOWReader *v14;
  PROWReader *v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  void **v19;
  const __CFString *Identifier;
  char buffer[200];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return -50;
  if (*((_DWORD *)this + 85))
    return -231;
  ClearSpeechProcessing(this);
  if (*a2 == *((_QWORD *)this + 32))
  {
    v9 = (uint64_t)*a2;
    *((_QWORD *)this + 1) = a3;
    v10 = (SpeechChannelManager **)((char *)this + 8);
    v11 = *((_QWORD *)this + 31);
    *((_QWORD *)this + 32) = v9;
    if (v11)
      goto LABEL_25;
    goto LABEL_24;
  }
  v12 = (void *)*((_QWORD *)this + 33);
  if (v12)
  {
    free(v12);
    *((_QWORD *)this + 33) = 0;
  }
  if (*((_QWORD *)this + 34))
  {
    v13 = *((_DWORD *)this + 64);
    if (v13 == 1734437985)
    {
      v15 = (PROWReader *)*((_QWORD *)this + 38);
      if (!v15)
      {
LABEL_18:
        SLMMapCache::Unmap(*((SLMMapCache **)this + 34), v7);
        *((_QWORD *)this + 34) = 0;
        goto LABEL_19;
      }
      PROWReader::~PROWReader(v15);
    }
    else
    {
      if (v13 != 1835364215)
        goto LABEL_18;
      v14 = (MEOWReader *)*((_QWORD *)this + 38);
      if (!v14)
        goto LABEL_18;
      MEOWReader::~MEOWReader(v14);
    }
    MEMORY[0x1D8233BA8]();
    goto LABEL_18;
  }
LABEL_19:
  v16 = (void *)*((_QWORD *)this + 37);
  if (v16)
  {
    free(v16);
    *((_QWORD *)this + 37) = 0;
  }
  v17 = (const void *)*((_QWORD *)this + 31);
  if (v17)
  {
    CFRelease(v17);
    *((_QWORD *)this + 31) = 0;
  }
  v18 = (uint64_t)*a2;
  *((_QWORD *)this + 1) = a3;
  v10 = (SpeechChannelManager **)((char *)this + 8);
  *((_QWORD *)this + 32) = v18;
LABEL_24:
  *((_QWORD *)this + 31) = SpeechChannelManager::ReadVoicePitchCoefficients(a3, (__CFBundle *)v7);
LABEL_25:
  if (*((_QWORD *)this + 33))
  {
LABEL_26:
    InitSpeechProcessing(this);
    return 0;
  }
  result = SpeechChannelManager::ReadPCMVoiceData(*((SpeechChannelManager **)this + 1), *((_QWORD *)this + 32), (PROWReader **)this + 38, (MTBEVoiceContents *)this + 35, (void **)this + 34, v8);
  if ((result & 0x8000000000000000) == 0)
  {
    SpeechChannelManager::ReadVoiceDescription(*v10, (SpeechChannelManager *)((char *)this + 264), v19);
    if (!*((_QWORD *)this + 33))
    {
      Identifier = CFBundleGetIdentifier(a3);
      CFStringGetCString(Identifier, buffer, 200, 0x8000100u);
      asl_log(0, 0, 3, "SpeechChannelManager::UseVoice - %s voiceDescription file reading failed", buffer);
      return -241;
    }
    goto LABEL_26;
  }
  return result;
}

CFPropertyListRef SpeechChannelManager::ReadVoicePitchCoefficients(SpeechChannelManager *this, __CFBundle *a2)
{
  const __CFURL *v2;
  const __CFURL *v3;
  __CFReadStream *v4;
  __CFReadStream *v5;
  CFPropertyListRef v6;

  v2 = CFBundleCopyResourceURL(this, CFSTR("PitchCoeffs.plist"), 0, 0);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = CFReadStreamCreateWithFile(0, v2);
  if (v4)
  {
    v5 = v4;
    CFReadStreamOpen(v4);
    v6 = CFPropertyListCreateWithStream(0, v5, 0, 0, 0, 0);
    CFRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  CFRelease(v3);
  return v6;
}

uint64_t SpeechChannelManager::ReadPCMVoiceData(SpeechChannelManager *this, unint64_t a2, PROWReader **a3, MTBEVoiceContents *a4, void **a5, void **a6)
{
  SLMMapCache *v11;
  SLMMapHint *v12;
  SLMMapCache *v13;
  void *v14;
  int v15;
  PROWReader *v16;
  FILE *v17;
  int *v18;
  BOOL v19;
  const __CFString *Identifier;
  uint64_t result;
  PROWReader *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char buffer[16];
  void *v28;
  BOOL v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v11 = CFBundleCopyResourceURL(this, CFSTR("PCMWave"), 0, 0);
  v26 = 0;
  if (!v11)
  {
    v16 = 0;
    v15 = -1;
    goto LABEL_14;
  }
  v13 = v11;
  *(_QWORD *)buffer = &off_1E93659B0;
  v29 = (_DWORD)a2 == 1835364215;
  v14 = (void *)SLMMapCache::Map(v11, (const __CFURL *)buffer, v12);
  v26 = v14;
  a4->var0 = v28;
  CFRelease(v13);
  if (v14 == (void *)0xFFFFFFFFLL)
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = __error();
    fprintf(v17, "Speech Synthesis can't map voice file (%d)\n", *v18);
    v26 = 0;
  }
  else
  {
    v15 = -1;
    if (!v14 || *(_DWORD *)&buffer[8] == -1)
      goto LABEL_13;
    if (v29)
    {
      MEOWReader::AdvisePreload((MEOWReader *)*(unsigned int *)&buffer[8], (__int128 *)&v26, (unint64_t)v28);
    }
    else
    {
      v24 = 0;
      v25 = 0;
      LODWORD(v25) = a4->var0;
      fcntl(*(int *)&buffer[8], 44, &v24);
    }
    v15 = *(_DWORD *)&buffer[8];
    if ((_DWORD)a2 == 1835364215)
      goto LABEL_13;
    close(*(int *)&buffer[8]);
  }
  v15 = -1;
LABEL_13:
  SLMMapHint::~SLMMapHint((SLMMapHint *)buffer);
  v16 = (PROWReader *)v26;
LABEL_14:
  v19 = (_DWORD)a2 == 1734437985 || (_DWORD)a2 == 1835364215;
  if (v19 && !v16)
  {
    Identifier = CFBundleGetIdentifier(this);
    CFStringGetCString(Identifier, buffer, 200, 0x8000100u);
    asl_log(0, 0, 3, "SpeechChannelManager::ReadPCMVoiceData - %s PCMWave file not found", buffer);
    return -43;
  }
  if ((_DWORD)a2 != 1835364215)
  {
    if ((_DWORD)a2 != 1734437985)
    {
      result = 0;
      *a3 = v16;
      return result;
    }
    v23 = HIDWORD(a2) == 300;
    v22 = (PROWReader *)operator new();
    PROWReader::PROWReader(v22, v26, v23);
    goto LABEL_27;
  }
  LODWORD(v28) = 0;
  *(_OWORD *)buffer = *(_OWORD *)"ceda caa";
  if (AudioComponentCount((const AudioComponentDescription *)buffer))
  {
    v22 = (PROWReader *)operator new();
    MEOWReader::MEOWReader((MEOWReader *)v22, v15, v26, (MTBEDebugFlags::sMEOWDebug >> 1) & 3);
LABEL_27:
    result = 0;
    *a3 = v22;
    *a5 = v26;
    return result;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    SpeechChannelManager::ReadPCMVoiceData();
  return -241;
}

void sub_1D225D658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  SLMMapHint::~SLMMapHint((SLMMapHint *)va);
  _Unwind_Resume(a1);
}

uint64_t SpeechChannelManager::ReadVoiceDescription(SpeechChannelManager *this, __CFBundle *a2, void **a3)
{
  const __CFString *Identifier;
  char *v6;
  off_t st_size;
  int8x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x8_t v12;
  uint64_t v13;
  unsigned int v14;
  __int16 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  stat buffer;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  if (OpenResourceFile(this, CFSTR("VoiceDescription"), &v19))
  {
    Identifier = CFBundleGetIdentifier(this);
    CFStringGetCString(Identifier, (char *)&buffer, 200, 0x8000100u);
    asl_log(0, 0, 3, "SpeechChannelManager::ReadVoiceDescription VoiceDescription file -  Open %s failed with code %ld");
LABEL_4:
    v6 = 0;
    goto LABEL_5;
  }
  if (fstat(v19, &buffer))
    goto LABEL_4;
  st_size = buffer.st_size;
  v6 = (char *)malloc_type_malloc(buffer.st_size, 0x664202A7uLL);
  if (v6 && read(v19, v6, st_size) != st_size)
  {
    free(v6);
    __error();
    asl_log(0, 0, 3, "SpeechChannelManager::ReadVoiceDescription -  Read failed with code %d");
    goto LABEL_4;
  }
  v9 = vrev32_s8(*(int8x8_t *)(v6 + 4));
  *(int8x8_t *)(v6 + 4) = v9;
  *((_DWORD *)v6 + 3) = bswap32(*((_DWORD *)v6 + 3));
  *((int8x8_t *)v6 + 42) = vrev16_s8(*(int8x8_t *)(v6 + 336));
  *((_WORD *)v6 + 172) = bswap32(*((unsigned __int16 *)v6 + 172)) >> 16;
  *(int8x16_t *)(v6 + 346) = vrev32q_s8(*(int8x16_t *)(v6 + 346));
  if (v9.i32[0] == 1734437985)
  {
LABEL_11:
    *(int8x16_t *)(v6 + 362) = vrev16q_s8(*(int8x16_t *)(v6 + 362));
    *((_WORD *)v6 + 189) = bswap32(*((unsigned __int16 *)v6 + 189)) >> 16;
    *((_DWORD *)v6 + 95) = bswap32(*((_DWORD *)v6 + 95));
    *((int8x8_t *)v6 + 48) = vrev16_s8(*(int8x8_t *)(v6 + 384));
    *((_DWORD *)v6 + 98) = bswap32(*((_DWORD *)v6 + 98));
    *(int8x16_t *)(v6 + 396) = vrev16q_s8(*(int8x16_t *)(v6 + 396));
    goto LABEL_5;
  }
  if (v9.i32[0] != 1836346163)
  {
    if (v9.i32[0] != 1835364215)
    {
      fwrite("Unknown voice creator in SpeechChannelManager::ReadVoiceDescription\n", 0x44uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  v10 = vrev16q_s8(*(int8x16_t *)(v6 + 378));
  *(int8x16_t *)(v6 + 362) = vrev16q_s8(*(int8x16_t *)(v6 + 362));
  *(int8x16_t *)(v6 + 378) = v10;
  v11 = vrev16q_s8(*(int8x16_t *)(v6 + 410));
  *(int8x16_t *)(v6 + 394) = vrev16q_s8(*(int8x16_t *)(v6 + 394));
  *(int8x16_t *)(v6 + 410) = v11;
  *(int8x8_t *)(v6 + 426) = vrev16_s8(*(int8x8_t *)(v6 + 426));
  *(_DWORD *)(v6 + 434) = bswap32(*(_DWORD *)(v6 + 434));
  v12 = vrev16_s8(*(int8x8_t *)(v6 + 438));
  *(_DWORD *)(v6 + 446) = bswap32(*(_DWORD *)(v6 + 446));
  *((_WORD *)v6 + 225) = bswap32(*((unsigned __int16 *)v6 + 225)) >> 16;
  *((_WORD *)v6 + 226) = bswap32(*((unsigned __int16 *)v6 + 226)) >> 16;
  *((_WORD *)v6 + 227) = bswap32(*((unsigned __int16 *)v6 + 227)) >> 16;
  v13 = 456;
  *(int8x8_t *)(v6 + 438) = v12;
  do
  {
    *(int8x16_t *)&v6[v13] = vrev16q_s8(*(int8x16_t *)&v6[v13]);
    v13 += 16;
  }
  while (v13 != 552);
  do
  {
    *(int8x16_t *)&v6[v13] = vrev16q_s8(*(int8x16_t *)&v6[v13]);
    v13 += 16;
  }
  while (v13 != 648);
  *((_WORD *)v6 + 324) = bswap32(*((unsigned __int16 *)v6 + 324)) >> 16;
  *((_WORD *)v6 + 325) = bswap32(*((unsigned __int16 *)v6 + 325)) >> 16;
  *((_DWORD *)v6 + 163) = bswap32(*((_DWORD *)v6 + 163));
  *((int8x16_t *)v6 + 41) = vrev16q_s8(*((int8x16_t *)v6 + 41));
  *((_WORD *)v6 + 336) = bswap32(*((unsigned __int16 *)v6 + 336)) >> 16;
  *((_WORD *)v6 + 337) = bswap32(*((unsigned __int16 *)v6 + 337)) >> 16;
  *((_WORD *)v6 + 338) = bswap32(*((unsigned __int16 *)v6 + 338)) >> 16;
  *(int8x16_t *)(v6 + 678) = vrev32q_s8(*(int8x16_t *)(v6 + 678));
  *(int8x16_t *)(v6 + 694) = vrev32q_s8(*(int8x16_t *)(v6 + 694));
  v14 = *((unsigned __int16 *)v6 + 355);
  v15 = __rev16(v14);
  *((_WORD *)v6 + 355) = v15;
  if (v14)
  {
    v16 = v15;
    v17 = 356;
    do
    {
      *(_WORD *)&v6[2 * v17] = bswap32(*(unsigned __int16 *)&v6[2 * v17]) >> 16;
      v18 = v17 - 355;
      ++v17;
    }
    while (v18 < v16);
  }
LABEL_5:
  *(_QWORD *)a2 = v6;
  return close(v19);
}

uint64_t MEOWMMapHint::MappedSize(MEOWMMapHint *this)
{
  if (*((_BYTE *)this + 32))
    return MEOWReader::MappedSize((MEOWReader *)*((unsigned int *)this + 2), *((_QWORD *)this + 2));
  else
    return *((_QWORD *)this + 2);
}

void SpeechChannelManager::RegisterCurSpeechState(uint64_t a1, int a2)
{
  const void *v4;
  int v5;
  _BOOL4 v6;
  void *v7;
  NSObject *global_queue;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;

  if (*(_DWORD *)(a1 + 256) != 1835364215)
  {
    v4 = *(const void **)(a1 + 272);
    if (v4)
    {
      v5 = *(_DWORD *)(a1 + 340);
      if (v5 != a2)
      {
        if (a2 == 2)
        {
          *(_DWORD *)(a1 + 288) = 0;
          if (mlock(v4, *(_QWORD *)(a1 + 280)))
          {
            v9 = *(_QWORD *)(a1 + 280);
            if (v9)
            {
              v10 = 0;
              v11 = *(_QWORD *)(a1 + 272);
              v12 = *(_DWORD *)(a1 + 288);
              do
              {
                v12 += *(char *)(v11 + v10);
                *(_DWORD *)(a1 + 288) = v12;
                v10 += 4096;
              }
              while (v10 < v9);
            }
          }
        }
        else if (v5 == 2)
        {
          munlock(v4, *(_QWORD *)(a1 + 280));
        }
      }
    }
  }
  v6 = (*(_DWORD *)(a1 + 340) & 0xFFFFFFFE) != 2;
  *(_DWORD *)(a1 + 340) = a2;
  if (((((a2 & 0xFFFFFFFE) == 2) ^ v6) & 1) == 0)
    SpeechBusy();
  v7 = *(void **)(a1 + 432);
  if (v7)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v7);
  }
}

void SpeechChannelManager::RegisterCurSpeechError(SpeechChannelManager *this, CFIndex a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  CFErrorRef v7;
  void (*v8)(_QWORD, _QWORD, CFErrorRef);
  int valuePtr;
  void *userInfoKeys[2];
  void *userInfoValues;
  CFTypeRef cf;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v6 = (pthread_mutex_t *)((char *)this + 80);
    if (!pthread_mutex_lock((pthread_mutex_t *)((char *)this + 80)))
    {
      ++*((_WORD *)this + 172);
      *((_WORD *)this + 178) = a2;
      *(_QWORD *)((char *)this + 358) = a3;
      if (!*((_WORD *)this + 173))
      {
        *((_WORD *)this + 173) = a2;
        *(_QWORD *)((char *)this + 348) = a3;
      }
      pthread_mutex_unlock(v6);
    }
    if (*((_QWORD *)this + 46))
    {
      if (*((_BYTE *)this + 424))
      {
        userInfoKeys[0] = CFSTR("SpokenString");
        userInfoKeys[1] = CFSTR("CharacterOffset");
        userInfoValues = (void *)*((_QWORD *)this + 26);
        valuePtr = a3;
        cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        v7 = CFErrorCreateWithUserInfoKeysAndValues(0, (CFErrorDomain)*MEMORY[0x1E0C9AFC8], a2, (const void *const *)userInfoKeys, (const void *const *)&userInfoValues, 2);
        CFRelease(cf);
        if (v7)
        {
          v8 = (void (*)(_QWORD, _QWORD, CFErrorRef))*((_QWORD *)this + 46);
          if (v8)
          {
            if (*((_BYTE *)this + 424))
              v8(*((_QWORD *)this + 9), *((_QWORD *)this + 39), v7);
          }
          CFRelease(v7);
        }
      }
    }
  }
}

uint64_t SpeechChannelManager::GetCurSpeechErrors(SpeechChannelManager *this)
{
  pthread_mutex_t *v2;
  CFNumberRef v3;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  uint64_t Dictionary;
  __int128 v10;
  void *__p[2];
  __int128 v12;
  int valuePtr;

  *(_OWORD *)__p = 0u;
  v12 = 0u;
  v10 = 0u;
  v2 = (pthread_mutex_t *)((char *)this + 80);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 80));
  valuePtr = *((__int16 *)this + 172);
  v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v10, CFSTR("Count"), v3);
  valuePtr = *((__int16 *)this + 173);
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v10, CFSTR("OldestCode"), v4);
  valuePtr = *((__int16 *)this + 178);
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v10, CFSTR("NewestCode"), v5);
  valuePtr = *(_QWORD *)((char *)this + 348);
  v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v10, CFSTR("OldestCharacterOffset"), v6);
  valuePtr = *(_QWORD *)((char *)this + 358);
  v7 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v10, CFSTR("NewestCharacterOffset"), v7);
  pthread_mutex_unlock(v2);
  Dictionary = SLCFDictionaryBuilder::CreateDictionary((SLCFDictionaryBuilder *)&v10);
  if (__p[1])
  {
    *(void **)&v12 = __p[1];
    operator delete(__p[1]);
  }
  SLCFArrayBuilder::~SLCFArrayBuilder((SLCFArrayBuilder *)&v10);
  return Dictionary;
}

void sub_1D225DE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SLCFDictionaryBuilder::~SLCFDictionaryBuilder((SLCFDictionaryBuilder *)&a9);
  _Unwind_Resume(a1);
}

void SLCFDictionaryBuilder::~SLCFDictionaryBuilder(SLCFDictionaryBuilder *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  SLCFArrayBuilder::~SLCFArrayBuilder(this);
}

uint64_t SpeechChannelManager::CopyPhonemesFromText(SpeechChannelManager *this, const __CFString *a2, const __CFString **a3)
{
  uint64_t result;

  *((_BYTE *)this + 424) = 0;
  result = TextToPhonemesProcessing(this, a2, *((_QWORD *)this + 40), a3);
  *((_BYTE *)this + 424) = 1;
  return result;
}

CFComparisonResult SpeechChannelManager::CopySpeechProperty(SpeechChannelManager *this, CFStringRef theString1, const void **a3)
{
  CFComparisonResult result;
  const __CFLocale *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  const __CFString *v10;
  CFNumberRef v11;
  uint64_t v12;
  int v13;
  CFNumberRef v14;
  int v15;
  CFNumberType v16;
  uint64_t CurSpeechErrors;
  const void *v18;
  const CFStringRef *v19;
  BOOL v20;
  uint64_t v21;
  CFMutableArrayRef Mutable;
  MTMBDiphoneStatistics *v23;
  __int128 v24;
  void *__p[2];
  __int128 v26;
  int valuePtr;

  if (!a3)
    return -50;
  if (CFStringCompare(theString1, CFSTR("stat"), 0) == kCFCompareEqualTo)
  {
    *(_OWORD *)__p = 0u;
    v26 = 0u;
    v24 = 0u;
    valuePtr = (*((_DWORD *)this + 85) - 1) < 2;
    v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v24, CFSTR("OutputBusy"), v8);
    valuePtr = *((_DWORD *)this + 85) == 3;
    v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v24, CFSTR("OutputPaused"), v9);
    v10 = (const __CFString *)*((_QWORD *)this + 26);
    if (v10)
      LODWORD(v10) = CFStringGetLength(v10);
    valuePtr = (_DWORD)v10 - *((_DWORD *)this + 54);
    v11 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v24, CFSTR("NumberOfCharactersLeft"), v11);
    if (*((_DWORD *)this + 85) == 2 && (v12 = *((_QWORD *)this + 4)) != 0)
      v13 = *(__int16 *)(v12 + 46);
    else
      v13 = -1;
    valuePtr = v13;
    v14 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v24, CFSTR("PhonemeCode"), v14);
    *a3 = (const void *)SLCFDictionaryBuilder::CreateDictionary((SLCFDictionaryBuilder *)&v24);
    if (__p[1])
    {
      *(void **)&v26 = __p[1];
      operator delete(__p[1]);
    }
    SLCFArrayBuilder::~SLCFArrayBuilder((SLCFArrayBuilder *)&v24);
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("rate"), 0) == kCFCompareEqualTo)
  {
    v15 = *(_DWORD *)(*((_QWORD *)this + 4) + 8);
LABEL_34:
    *(float *)&v24 = (float)v15 * 0.000015259;
    v16 = kCFNumberFloatType;
LABEL_35:
    CurSpeechErrors = (uint64_t)CFNumberCreate(0, v16, &v24);
    goto LABEL_36;
  }
  if (CFStringCompare(theString1, CFSTR("pbas"), 0) == kCFCompareEqualTo)
  {
    v15 = *(_DWORD *)(*((_QWORD *)this + 4) + 12);
    goto LABEL_34;
  }
  if (CFStringCompare(theString1, CFSTR("pmod"), 0) == kCFCompareEqualTo)
  {
    v15 = *(_DWORD *)(*((_QWORD *)this + 4) + 16);
    goto LABEL_34;
  }
  if (CFStringCompare(theString1, CFSTR("volm"), 0) == kCFCompareEqualTo)
  {
    v15 = *(_DWORD *)(*((_QWORD *)this + 4) + 20);
    goto LABEL_34;
  }
  if (CFStringCompare(theString1, CFSTR("erro"), 0) == kCFCompareEqualTo)
  {
    CurSpeechErrors = SpeechChannelManager::GetCurSpeechErrors(this);
    goto LABEL_36;
  }
  if (CFStringCompare(theString1, CFSTR("inpt"), 0) == kCFCompareEqualTo)
  {
    if ((*(_DWORD *)(*((_QWORD *)this + 4) + 48) & 0xF) == 3)
    {
      result = kCFCompareEqualTo;
      v19 = &kSpeechModeTune;
    }
    else
    {
      result = kCFCompareEqualTo;
      if ((*(_DWORD *)(*((_QWORD *)this + 4) + 48) & 0xF) == 2)
        v19 = &kSpeechModePhoneme;
      else
        v19 = &kSpeechModeText;
    }
    goto LABEL_50;
  }
  result = CFStringCompare(theString1, CFSTR("char"), 0);
  if (result == kCFCompareEqualTo)
  {
    v20 = (*(_DWORD *)(*((_QWORD *)this + 4) + 48) & 0x10) == 0;
    goto LABEL_45;
  }
  result = CFStringCompare(theString1, CFSTR("nmbr"), 0);
  if (result == kCFCompareEqualTo)
  {
    v20 = (*(_DWORD *)(*((_QWORD *)this + 4) + 48) & 0x20) == 0;
LABEL_45:
    if (v20)
      v19 = &kSpeechModeNormal;
    else
      v19 = &kSpeechModeLiteral;
LABEL_50:
    v18 = *v19;
    goto LABEL_38;
  }
  if (CFStringCompare(theString1, CFSTR("sync"), 0) == kCFCompareEqualTo)
  {
    LODWORD(v24) = *((_DWORD *)this + 84);
LABEL_52:
    v16 = kCFNumberIntType;
    goto LABEL_35;
  }
  if (CFStringCompare(theString1, CFSTR("phsy"), 0) == kCFCompareEqualTo)
  {
    CurSpeechErrors = SLDictLookup::CreatePhonemeSymbols(*((SLDictLookup **)this + 2), v7);
    goto LABEL_36;
  }
  if (CFStringCompare(theString1, CFSTR("popt"), 0) == kCFCompareEqualTo)
  {
    v21 = *((_QWORD *)this + 40);
LABEL_56:
    *(_QWORD *)&v24 = v21;
    v16 = kCFNumberLongType;
    goto LABEL_35;
  }
  if (CFStringCompare(theString1, kSpeechDiphoneOptionsProperty[0], 0) == kCFCompareEqualTo)
  {
    v21 = *((_QWORD *)this + 41);
    goto LABEL_56;
  }
  if (CFStringCompare(theString1, kSpeechDiphoneLogProperty[0], 0))
  {
    if (CFStringCompare(theString1, kSpeechDiphoneStatisticsProperty[0], 0) == kCFCompareEqualTo)
    {
      v23 = (MTMBDiphoneStatistics *)*((_QWORD *)this + 30);
      if (!v23)
      {
        v18 = 0;
        goto LABEL_37;
      }
      CurSpeechErrors = MTMBDiphoneStatistics::CreateArray(v23);
LABEL_36:
      v18 = (const void *)CurSpeechErrors;
LABEL_37:
      result = kCFCompareEqualTo;
LABEL_38:
      *a3 = v18;
      return result;
    }
    if (CFStringCompare(theString1, kSpeechPreloadVoiceMetadataProperty[0], 0))
      return -231;
    if (*((_DWORD *)this + 64) == 1835364215)
      LODWORD(v24) = MEOWReader::PercentageResidentMetadata(*((MEOWReader **)this + 38));
    else
      LODWORD(v24) = 100;
    goto LABEL_52;
  }
  *a3 = (const void *)*((_QWORD *)this + 29);
  if (!*((_QWORD *)this + 29))
    return 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  result = kCFCompareEqualTo;
  *((_QWORD *)this + 29) = Mutable;
  return result;
}

void sub_1D225E3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SLCFDictionaryBuilder::~SLCFDictionaryBuilder((SLCFDictionaryBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t SpeechChannelManager::GetSpeechInfo(SpeechChannelManager *this, int a2, void *a3)
{
  if (a2 != 2020896356)
    return -231;
  if (*(_DWORD *)a3 != 1836346163 || *((_DWORD *)this + 64) != 1836346163 || *((_DWORD *)a3 + 1) != 1986290036)
    return -231;
  memcpy(*((void **)a3 + 1), (const void *)(*((_QWORD *)this + 33) + 362), 0x160uLL);
  return 0;
}

uint64_t SpeechChannelManager::SetSpeechProperty(SpeechChannelManager *this, CFStringRef theString1, const __CFNumber *a3)
{
  int Value;
  const __CFString *v7;
  int v8;
  const __CFString *v9;
  int v10;
  const __CFString *v11;
  int v12;
  const __CFString *v13;
  int v14;
  const __CFString *v15;
  int v16;
  const __CFString *v17;
  int v18;
  const __CFString *v19;
  int v20;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  CFIndex Length;
  CFIndex v28;
  const void *v29;
  MTBESoundOutput *v30;
  const void *v31;
  const void *v32;
  uint64_t v33;
  CFMutableArrayRef Mutable;
  const __CFNumber *v35;
  const __CFNumber *v36;
  const __CFData *v37;
  void *v38;
  const UInt8 *BytePtr;
  MTMBDiphoneStatistics *v40;
  const void *v41;
  CFDictionaryRef Copy;
  MEOWReader *v43;
  int v44;
  const __CFString *valuePtr;

  if (CFStringCompare(theString1, CFSTR("sdcb"), 0) == kCFCompareEqualTo)
  {
    if (a3)
    {
      valuePtr = 0;
      Value = CFNumberGetValue(a3, kCFNumberLongType, &valuePtr);
      v7 = valuePtr;
      if (!Value)
        v7 = 0;
    }
    else
    {
      v7 = 0;
    }
    *((_QWORD *)this + 48) = v7;
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("phcb"), 0) == kCFCompareEqualTo)
  {
    if (a3)
    {
      valuePtr = 0;
      v8 = CFNumberGetValue(a3, kCFNumberLongType, &valuePtr);
      v9 = valuePtr;
      if (!v8)
        v9 = 0;
    }
    else
    {
      v9 = 0;
    }
    *((_QWORD *)this + 51) = v9;
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("sycb"), 0) == kCFCompareEqualTo)
  {
    if (a3)
    {
      valuePtr = 0;
      v10 = CFNumberGetValue(a3, kCFNumberLongType, &valuePtr);
      v11 = valuePtr;
      if (!v10)
        v11 = 0;
    }
    else
    {
      v11 = 0;
    }
    *((_QWORD *)this + 49) = v11;
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("wccb"), 0) == kCFCompareEqualTo)
  {
    if (a3)
    {
      valuePtr = 0;
      v12 = CFNumberGetValue(a3, kCFNumberLongType, &valuePtr);
      v13 = valuePtr;
      if (!v12)
        v13 = 0;
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 52) = v13;
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("tdcb"), 0) == kCFCompareEqualTo)
  {
    if (a3)
    {
      valuePtr = 0;
      v14 = CFNumberGetValue(a3, kCFNumberLongType, &valuePtr);
      v15 = valuePtr;
      if (!v14)
        v15 = 0;
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 47) = v15;
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("eccb"), 0) == kCFCompareEqualTo)
  {
    if (a3)
    {
      valuePtr = 0;
      v16 = CFNumberGetValue(a3, kCFNumberLongType, &valuePtr);
      v17 = valuePtr;
      if (!v16)
        v17 = 0;
    }
    else
    {
      v17 = 0;
    }
    *((_QWORD *)this + 46) = v17;
    return 0;
  }
  if (CFStringCompare(theString1, kSpeechLatencyCallBack[0], 0) == kCFCompareEqualTo)
  {
    if (a3)
    {
      valuePtr = 0;
      v18 = CFNumberGetValue(a3, kCFNumberLongType, &valuePtr);
      v19 = valuePtr;
      if (!v18)
        v19 = 0;
    }
    else
    {
      v19 = 0;
    }
    *((_QWORD *)this + 50) = v19;
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("refc"), 0) == kCFCompareEqualTo)
  {
    *((_QWORD *)this + 39) = longVal(a3);
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("rate"), 0) == kCFCompareEqualTo)
  {
    v20 = fixedVal(a3);
    *(_DWORD *)(*((_QWORD *)this + 4) + 8) = v20;
    *(_DWORD *)(*((_QWORD *)this + 5) + 8) = v20;
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("volm"), 0) == kCFCompareEqualTo)
  {
    v22 = fixedVal(a3);
    *(_DWORD *)(*((_QWORD *)this + 4) + 20) = v22;
    *(_DWORD *)(*((_QWORD *)this + 5) + 20) = v22;
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("pbas"), 0) == kCFCompareEqualTo)
  {
    v23 = fixedVal(a3);
    *(_DWORD *)(*((_QWORD *)this + 4) + 12) = v23;
    *(_DWORD *)(*((_QWORD *)this + 5) + 12) = v23;
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("pmod"), 0) == kCFCompareEqualTo)
  {
    v24 = fixedVal(a3);
    *(_DWORD *)(*((_QWORD *)this + 4) + 16) = v24;
    *(_DWORD *)(*((_QWORD *)this + 5) + 16) = v24;
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("rset"), 0) == kCFCompareEqualTo)
  {
    ResetSpeechProcessing(this);
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("inpt"), 0) == kCFCompareEqualTo)
  {
    if (!a3)
      return -50;
    if (CFStringCompare((CFStringRef)a3, CFSTR("TEXT"), 0))
    {
      if (CFStringCompare((CFStringRef)a3, CFSTR("PHON"), 0))
      {
        if (CFStringCompare((CFStringRef)a3, CFSTR("TUNE"), 0))
          return -50;
        v25 = *((_QWORD *)this + 4);
        v26 = *(_DWORD *)(v25 + 48) & 0xFFFFFFF0 | 3;
      }
      else
      {
        v25 = *((_QWORD *)this + 4);
        v26 = *(_DWORD *)(v25 + 48) & 0xFFFFFFF0 | 2;
      }
    }
    else
    {
      v25 = *((_QWORD *)this + 4);
      v26 = *(_DWORD *)(v25 + 48) & 0xFFFFFFF0;
    }
LABEL_120:
    *(_DWORD *)(v25 + 48) = v26;
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("char"), 0) == kCFCompareEqualTo)
  {
    if (!a3)
      return -50;
    if (CFStringCompare((CFStringRef)a3, CFSTR("NORM"), 0))
    {
      if (CFStringCompare((CFStringRef)a3, CFSTR("LTRL"), 0))
        return -50;
      v25 = *((_QWORD *)this + 4);
      v26 = *(_DWORD *)(v25 + 48) | 0x10;
    }
    else
    {
      v25 = *((_QWORD *)this + 4);
      v26 = *(_DWORD *)(v25 + 48) & 0xFFFFFFEF;
    }
    goto LABEL_120;
  }
  if (CFStringCompare(theString1, CFSTR("nmbr"), 0) == kCFCompareEqualTo)
  {
    if (!a3)
      return -50;
    if (CFStringCompare((CFStringRef)a3, CFSTR("NORM"), 0))
    {
      if (CFStringCompare((CFStringRef)a3, CFSTR("LTRL"), 0))
        return -50;
      v25 = *((_QWORD *)this + 4);
      v26 = *(_DWORD *)(v25 + 48) | 0x20;
    }
    else
    {
      v25 = *((_QWORD *)this + 4);
      v26 = *(_DWORD *)(v25 + 48) & 0xFFFFFFDF;
    }
    goto LABEL_120;
  }
  if (CFStringCompare(theString1, CFSTR("dlim"), 0) == kCFCompareEqualTo)
  {
    valuePtr = 0;
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("Prefix"), (const void **)&valuePtr))
    {
      Length = CFStringGetLength(valuePtr);
      if (Length)
      {
        if (Length != 1)
          CFStringGetCharacterAtIndex(valuePtr, 1);
        CFStringGetCharacterAtIndex(valuePtr, 0);
      }
    }
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("Suffix"), (const void **)&valuePtr))
    {
      v28 = CFStringGetLength(valuePtr);
      if (v28)
      {
        if (v28 != 1)
          CFStringGetCharacterAtIndex(valuePtr, 3);
        CFStringGetCharacterAtIndex(valuePtr, 2);
      }
    }
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("opaf"), 0) == kCFCompareEqualTo)
  {
    if ((unint64_t)a3 | *((_QWORD *)this + 57))
    {
      SpeechChannelManager::DisposeSoundChannel(this, 1);
      if (a3)
      {
        if (ExtAudioFileCreateWithURL(a3, 0x41494646u, &SpeechChannelManager::SetSpeechProperty(__CFString const*,void const*)::sDefaultAudioFormat, 0, 1u, (ExtAudioFileRef *)this + 57))
        {
          *((_QWORD *)this + 57) = -1;
        }
        else
        {
          *((_BYTE *)this + 464) = 1;
        }
      }
    }
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("opax"), 0) == kCFCompareEqualTo)
  {
    if ((unint64_t)a3 | *((_QWORD *)this + 57))
    {
      SpeechChannelManager::DisposeSoundChannel(this, 1);
      if (a3)
        CFNumberGetValue(a3, kCFNumberLongType, (char *)this + 456);
    }
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("chnm"), 0) == kCFCompareEqualTo)
  {
    v29 = (const void *)*((_QWORD *)this + 59);
    if (v29)
      CFRelease(v29);
    *((_QWORD *)this + 59) = a3;
    if (a3)
      CFRetain(a3);
    v30 = (MTBESoundOutput *)*((_QWORD *)this + 56);
    if (v30)
      MTBESoundOutput::SetChannelMap(v30, *((CFArrayRef *)this + 59));
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("popt"), 0) == kCFCompareEqualTo)
  {
    *((_QWORD *)this + 40) = longVal(a3);
    return 0;
  }
  if (CFStringCompare(theString1, kSpeechDiphoneOptionsProperty[0], 0) == kCFCompareEqualTo)
  {
    *((_QWORD *)this + 41) = longVal(a3);
    v31 = (const void *)*((_QWORD *)this + 29);
    if (v31)
      CFRelease(v31);
    v32 = (const void *)*((_QWORD *)this + 30);
    if (v32)
      CFRelease(v32);
    v33 = *((_QWORD *)this + 41);
    if ((v33 & 1) != 0)
    {
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v33 = *((_QWORD *)this + 41);
    }
    else
    {
      Mutable = 0;
    }
    *((_QWORD *)this + 29) = Mutable;
    if ((v33 & 2) != 0)
    {
      v40 = (MTMBDiphoneStatistics *)operator new();
      MTMBDiphoneStatistics::MTMBDiphoneStatistics(v40);
      *((_QWORD *)this + 30) = v40;
    }
    else
    {
      *((_QWORD *)this + 30) = 0;
    }
    return 0;
  }
  if (CFStringCompare(theString1, CFSTR("xtnd"), 0) == kCFCompareEqualTo)
  {
    v35 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("creator"));
    if (longVal(v35) == (const __CFNumber *)1836346163 && *((_DWORD *)this + 64) == 1836346163)
    {
      v36 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("selector"));
      if (longVal(v36) == (const __CFNumber *)1986290036)
      {
        v37 = (const __CFData *)CFDictionaryGetValue(a3, CFSTR("data"));
        v38 = (void *)(*((_QWORD *)this + 33) + 362);
        BytePtr = CFDataGetBytePtr(v37);
        memmove(v38, BytePtr, 0x160uLL);
        return 0;
      }
    }
    return -231;
  }
  if (CFStringCompare(theString1, kSpeechPitchCoeffProperty[0], 0) == kCFCompareEqualTo)
  {
    v41 = (const void *)*((_QWORD *)this + 31);
    if (v41)
      CFRelease(v41);
    Copy = CFDictionaryCreateCopy(0, a3);
    *((_QWORD *)this + 31) = Copy;
    if (!a3 || Copy)
      return 0;
    return -50;
  }
  if (CFStringCompare(theString1, kSpeechPreloadVoiceMetadataProperty[0], 0) == kCFCompareEqualTo)
  {
    if (*((_DWORD *)this + 64) == 1835364215)
    {
      v43 = (MEOWReader *)*((_QWORD *)this + 38);
      v44 = longVal(a3);
      MEOWReader::MakeMetadataResident(v43, v44);
    }
    return 0;
  }
  if (CFStringCompare(theString1, kSpeechChannelStatusChangeBlock[0], 0) == kCFCompareEqualTo)
  {
    *((_QWORD *)this + 54) = _Block_copy(a3);
    return 0;
  }
  if (CFStringCompare(theString1, kSpeechChannelAudioSessionID, 0))
    return -231;
  *((_DWORD *)this + 110) = longVal(a3);
  return 0;
}

void sub_1D225EDA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x1080C404F240F48);
  _Unwind_Resume(a1);
}

const __CFNumber *longVal(const __CFNumber *result)
{
  uint64_t valuePtr;

  if (result)
  {
    valuePtr = 0;
    if (CFNumberGetValue(result, kCFNumberLongType, &valuePtr))
      return (const __CFNumber *)valuePtr;
    else
      return 0;
  }
  return result;
}

int fixedVal(const __CFNumber *a1)
{
  float valuePtr;

  if (a1)
  {
    valuePtr = 0.0;
    LODWORD(a1) = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
    if ((_DWORD)a1)
      LODWORD(a1) = vcvts_n_s32_f32(valuePtr, 0x10uLL);
  }
  return (int)a1;
}

void MTMBDiphoneStatistics::MTMBDiphoneStatistics(MTMBDiphoneStatistics *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 0;
  v3 = 2500;
  do
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)((char *)this + v2), 8);
    v2 += 32;
    --v3;
  }
  while (v3);
}

void sub_1D225EE7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 32;
    do
    {
      MEOWVectorBase::~MEOWVectorBase((void **)(v4 + v2));
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SpeechChannelManager::UseSpeechDictionary(SpeechChannelManager *this, const __CFDictionary *a2)
{
  return -1;
}

void MEOWMMapHint::~MEOWMMapHint(MEOWMMapHint *this)
{
  SLMMapHint::~SLMMapHint(this);
  JUMPOUT(0x1D8233BA8);
}

_QWORD *std::__list_imp<SpeechChannelManager *>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t _GLOBAL__sub_I_MT3SpeechChannelMgt_cp()
{
  sListOfActiveSpeechChannels = (uint64_t)&sListOfActiveSpeechChannels;
  qword_1ED946DA8 = (uint64_t)&sListOfActiveSpeechChannels;
  qword_1ED946DB0 = 0;
  return __cxa_atexit((void (*)(void *))std::list<SpeechChannelManager *>::~list, &sListOfActiveSpeechChannels, &dword_1D2256000);
}

void MTBENotifier::MTBENotifier(MTBENotifier *this)
{
  this->var0 = (void **)&off_1E93659F0;
  this->var4 = 0x10000;
  this->var6 = 0;
  this->var7 = 0;
  *(_QWORD *)this->var8 = 0x5D005D005B005BLL;
  *(_QWORD *)&this->var5.count = 0;
  *(uint64_t *)((char *)&this->var5.oldPos + 4) = 0;
  this->var5.newPos = 0;
}

{
  this->var0 = (void **)&off_1E93659F0;
  this->var4 = 0x10000;
  this->var6 = 0;
  this->var7 = 0;
  *(_QWORD *)this->var8 = 0x5D005D005B005BLL;
  *(_QWORD *)&this->var5.count = 0;
  *(uint64_t *)((char *)&this->var5.oldPos + 4) = 0;
  this->var5.newPos = 0;
}

void MTBENotifier::~MTBENotifier(MTBENotifier *this)
{
  JUMPOUT(0x1D8233BA8);
}

MTBENotifier *MTBENotifier::NotifyError(MTBENotifier *this, OSErr a2, uint64_t a3)
{
  int count;

  count = (unsigned __int16)this->var5.count;
  this->var5.count = count + 1;
  if (!count)
  {
    this->var5.oldest = a2;
    this->var5.oldPos = a3;
  }
  this->var5.newest = a2;
  this->var5.newPos = a3;
  return this;
}

void MTBENotifier::NotifyTextDone(MTBENotifier *this, const void **a2, unint64_t *a3, int *a4)
{
  *a2 = 0;
}

MTBENotifier *MTBENotifier::NotifyPhoneme(MTBENotifier *this, signed __int16 a2)
{
  this->var6 = a2;
  return this;
}

uint64_t MTBENotifier::WantSpeechDone(MTBENotifier *this)
{
  return 1;
}

uint64_t MTBENotifier::WantSync(MTBENotifier *this)
{
  return 1;
}

uint64_t MTBENotifier::WantPhoneme(MTBENotifier *this)
{
  return 1;
}

uint64_t MTBENotifier::WantWord(MTBENotifier *this)
{
  return 1;
}

double MTBENotifier::ResetFromVoice(MTBENotifier *this, void *a2, int a3)
{
  double result;

  if (a3)
  {
    if ((MTBEDebugFlags::sMTXDebug & 4) != 0)
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "MTX: Reset vol %x -> %x behavior %x -> %x\n", this->var4, 0x10000, this->var7, 0);
    this->var7 = 0;
    this->var4 = 0x10000;
    result = 6.45302995e-307;
    *(_QWORD *)this->var8 = 0x5D005D005B005BLL;
    *(_QWORD *)&this->var5.count = 0;
    *(uint64_t *)((char *)&this->var5.oldPos + 4) = 0;
    this->var5.newPos = 0;
  }
  return result;
}

uint64_t MTBEDelayedSync::Forward(MTBEDelayedSync *this, MTBENotifier *a2)
{
  return (*((uint64_t (**)(MTBENotifier *, _QWORD, _QWORD))a2->var0 + 5))(a2, *((unsigned int *)this + 3), *((unsigned int *)this + 2));
}

uint64_t MTBEDelayedWord::Forward(MTBEDelayedWord *this, MTBENotifier *a2)
{
  return (*((uint64_t (**)(MTBENotifier *, _QWORD, _QWORD, _QWORD))a2->var0 + 7))(a2, *((_QWORD *)this + 2), *((unsigned __int16 *)this + 12), *((unsigned int *)this + 2));
}

uint64_t MTBEDelayedPhoneme::Forward(MTBEDelayedPhoneme *this, MTBENotifier *a2)
{
  return (*((uint64_t (**)(MTBENotifier *, _QWORD, _QWORD, _QWORD))a2->var0 + 6))(a2, *((__int16 *)this + 6), *((unsigned int *)this + 4), *((unsigned int *)this + 2));
}

void MTBEDelayedNotifier::MTBEDelayedNotifier(MTBEDelayedNotifier *this, MTBENotifier *a2)
{
  *((_DWORD *)this + 5) = 0x10000;
  *((_WORD *)this + 23) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_QWORD *)((char *)this + 52) = 0x5D005D005B005BLL;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)((char *)this + 38) = 0;
  *(_QWORD *)this = &off_1E9365A68;
  *((_QWORD *)this + 8) = a2;
  *((_DWORD *)this + 18) = 0;
  MEOWVectorBase::MEOWVectorBase((MTBEDelayedNotifier *)((char *)this + 80), 8);
  MEOWVectorBase::MEOWVectorBase((MTBEDelayedNotifier *)((char *)this + 112), 8);
}

void sub_1D225F190(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void MTBEDelayedNotifier::~MTBEDelayedNotifier(MTBEDelayedNotifier *this)
{
  void **v2;
  uint64_t i;
  uint64_t v4;

  *(_QWORD *)this = &off_1E9365A68;
  v2 = (void **)((char *)this + 112);
  for (i = *((_QWORD *)this + 16); i; *((_QWORD *)this + 16) = i)
  {
    v4 = *((_QWORD *)*v2 + i - 1);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      i = *((_QWORD *)this + 16);
    }
    --i;
  }
  MEOWVectorBase::~MEOWVectorBase(v2);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 10);
}

{
  MTBEDelayedNotifier::~MTBEDelayedNotifier(this);
  JUMPOUT(0x1D8233BA8);
}

_QWORD *MTBEDelayedNotifier::StartUnit(MTBEDelayedNotifier *this)
{
  _QWORD *result;

  *((_QWORD *)this + 9) = 0x3F80000000000000;
  result = MEOWVectorBase::Append((_QWORD *)this + 10);
  *(_QWORD *)(*((_QWORD *)this + 10) + 8 * *((_QWORD *)this + 12) - 8) = 0;
  return result;
}

_QWORD *MTBEDelayedNotifier::NotifySync(MTBEDelayedNotifier *this, int a2, int a3)
{
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;

  v6 = operator new();
  *(_QWORD *)v6 = &off_1E9365B28;
  *(_DWORD *)(v6 + 8) = a3;
  *(_DWORD *)(v6 + 12) = a2;
  result = MEOWVectorBase::Append((_QWORD *)this + 14);
  *(_QWORD *)(*((_QWORD *)this + 14) + 8 * *((_QWORD *)this + 16) - 8) = v6;
  v8 = *((_QWORD *)this + 10) + 8 * *((_QWORD *)this + 12);
  ++*(_QWORD *)(v8 - 8);
  return result;
}

_QWORD *MTBEDelayedNotifier::NotifyWord(MTBEDelayedNotifier *this, uint64_t a2, __int16 a3, int a4)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;

  v8 = operator new();
  *(_DWORD *)(v8 + 8) = a4;
  *(_QWORD *)v8 = &off_1E9365B68;
  *(_QWORD *)(v8 + 16) = a2;
  *(_WORD *)(v8 + 24) = a3;
  result = MEOWVectorBase::Append((_QWORD *)this + 14);
  *(_QWORD *)(*((_QWORD *)this + 14) + 8 * *((_QWORD *)this + 16) - 8) = v8;
  v10 = *((_QWORD *)this + 10) + 8 * *((_QWORD *)this + 12);
  ++*(_QWORD *)(v10 - 8);
  return result;
}

_QWORD *MTBEDelayedNotifier::NotifyPhoneme(MTBEDelayedNotifier *this, __int16 a2, int a3, int a4)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;

  v8 = operator new();
  *(_DWORD *)(v8 + 8) = (int)(float)((float)a4 + (float)((float)*((int *)this + 18) * *((float *)this + 19)));
  *(_QWORD *)v8 = &off_1E9365BA8;
  *(_WORD *)(v8 + 12) = a2;
  *(_DWORD *)(v8 + 16) = a3;
  result = MEOWVectorBase::Append((_QWORD *)this + 14);
  *(_QWORD *)(*((_QWORD *)this + 14) + 8 * *((_QWORD *)this + 16) - 8) = v8;
  *((_DWORD *)this + 18) += a3;
  v10 = *((_QWORD *)this + 10) + 8 * *((_QWORD *)this + 12);
  ++*(_QWORD *)(v10 - 8);
  return result;
}

void MTBEDelayedNotifier::ForwardUnit(MTBEDelayedNotifier *this)
{
  uint64_t v1;
  void **v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *((_QWORD *)this + 12);
  if (v1)
  {
    v3 = (void **)((char *)this + 80);
    v4 = **((_QWORD **)this + 10);
    if (!v4)
      goto LABEL_6;
    for (i = 0; i != v4; ++i)
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * i);
      (**(void (***)(uint64_t, _QWORD))v6)(v6, *((_QWORD *)this + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    }
    v1 = *((_QWORD *)this + 12);
    if (!v1)
    {
      MEOWVectorBase::clear(v3);
      MEOWVectorBase::clear((void **)this + 14);
    }
    else
    {
LABEL_6:
      memmove(*((void **)this + 10), (const void *)(*((_QWORD *)this + 10) + 8), 8 * v1 - 8);
      v7 = *((_QWORD *)this + 12);
      v8 = v7 - 1;
      if (*((_QWORD *)this + 13) < (unint64_t)(v7 - 1))
        MEOWVectorBase::Allocate((MEOWVectorBase *)v3, v7 - 1, 1);
      v9 = (char *)*((_QWORD *)this + 14);
      *((_QWORD *)this + 12) = v8;
      memmove(v9, &v9[8 * v4], 8 * (*((_QWORD *)this + 16) - v4));
      v10 = *((_QWORD *)this + 16);
      v11 = v10 - v4;
      if (*((_QWORD *)this + 17) < (unint64_t)(v10 - v4))
        MEOWVectorBase::Allocate((MTBEDelayedNotifier *)((char *)this + 112), v10 - v4, 1);
      *((_QWORD *)this + 16) = v11;
    }
  }
  else
  {
    fwrite("MacinTalk: No unit callbacks to forward!\n", 0x29uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  }
}

void MTBEDelayedSync::~MTBEDelayedSync(MTBEDelayedSync *this)
{
  JUMPOUT(0x1D8233BA8);
}

void MTBEDelayedWord::~MTBEDelayedWord(MTBEDelayedWord *this)
{
  JUMPOUT(0x1D8233BA8);
}

void MTBEDelayedPhoneme::~MTBEDelayedPhoneme(MTBEDelayedPhoneme *this)
{
  JUMPOUT(0x1D8233BA8);
}

_QWORD *MEOWVectorBase::Append(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = this;
  v2 = this[2];
  if (v2 == this[3])
  {
    this = MEOWVectorBase::Allocate((MEOWVectorBase *)this, v2 + 1, 0);
    v2 = v1[2];
  }
  v1[2] = v2 + 1;
  return this;
}

void MTBEPhraseParam::MTBEPhraseParam(MTBEPhraseParam *this, MTBEVoiceContents a2, MTFESpeechElement *a3, MTBENotifier *a4, MTBENotifier *a5, MTBENotifier *a6, MTBEPersistentParam *a7)
{
  __int16 v7;
  int8x16_t v8;
  int16x8_t v9;

  *(MTBEVoiceContents *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a4;
  *((_QWORD *)this + 3) = a5;
  *((_QWORD *)this + 4) = a6;
  *((_QWORD *)this + 5) = a7;
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 61) = 0;
  v7 = MTBEDebugFlags::sMTXDebug;
  v8 = (int8x16_t)vdupq_n_s64(MTBEDebugFlags::sMTXDebug);
  v9 = (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v8, (int8x16_t)xmmword_1D22CC420)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v8, (int8x16_t)xmmword_1D22CC430)));
  *(int8x8_t *)v9.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v9), (int8x8_t)0x1000100010001);
  *((_DWORD *)this + 14) = vmovn_s16(v9).u32[0];
  *((_BYTE *)this + 60) = (v7 & 0x8000) == 0;
}

uint64_t MTBEPhraseProcessor::MTBEPhraseProcessor(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  MTMBSignalProcessor *v14;
  MTBEPhraseMemo *v15;
  int DurModFakeRate;

  v8 = *a3;
  v9 = a3[1];
  v10 = a3[2];
  *(_OWORD *)(a1 + 56) = a3[3];
  *(_OWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 8) = v8;
  *(_QWORD *)a1 = off_1E9365C00;
  *(_QWORD *)(a1 + 80) = a2;
  v11 = (void *)(a1 + 88);
  if ((_DWORD)a4)
    v12 = 0;
  else
    v12 = *(_QWORD *)a3;
  MTBEParam::MTBEParam(a1 + 88, a4, a2, v12, 0, *(double *)&v8);
  memcpy((void *)(a1 + 1392), v11, 0x518uLL);
  *(_DWORD *)(a1 + 2696) = 1024;
  v13 = operator new[]();
  *(_QWORD *)(a1 + 2704) = v13;
  *(_QWORD *)(a1 + 2712) = v13;
  *(_QWORD *)(a1 + 2720) = v13 + 6 * *(int *)(a1 + 2696);
  v14 = (MTMBSignalProcessor *)MTFEFrameFiller::MTFEFrameFiller(a1 + 2728, a1 + 2696, v11, *((_QWORD *)a3 + 5), a1 + 1392, a2, *((_QWORD *)a3 + 2), a4);
  *(_BYTE *)(a1 + 4216) = a4;
  *(_QWORD *)(a1 + 4232) = MTMBSignalProcessor::Create(v14);
  *(_OWORD *)(a1 + 4240) = 0u;
  v15 = (MTBEPhraseMemo *)operator new();
  MTBEPhraseMemo::MTBEPhraseMemo(v15, (const MTBEPhraseParam *)a3);
  *(_QWORD *)(a1 + 4256) = v15;
  *(_QWORD *)(a1 + 4264) = 0;
  MTBEParam::GetPitchFloorRange((MTBEParam *)v11, (float *)(a1 + 4220), (float *)(a1 + 4224));
  if (MTBEParam::GetUsePostDurMod((MTBEParam *)v11))
    DurModFakeRate = MTBEParam::GetDurModFakeRate((MTBEParam *)v11);
  else
    DurModFakeRate = MTBEParam::GetRate((MTBEParam *)v11);
  *(float *)(a1 + 4228) = (float)DurModFakeRate;
  return a1;
}

void sub_1D225F83C(_Unwind_Exception *a1)
{
  uint64_t v1;
  MTFEFrameFiller *v2;
  uint64_t v3;
  uint64_t v5;

  MEMORY[0x1D8233BA8](v3, 0x10E0C4036EBA818);
  MTFEFrameFiller::~MTFEFrameFiller(v2);
  v5 = *(_QWORD *)(v1 + 2704);
  if (v5)
    MEMORY[0x1D8233B90](v5, 0x1000C80274DC3F3);
  _Unwind_Resume(a1);
}

void MTBEPhraseProcessor::~MTBEPhraseProcessor(MTBEPhraseProcessor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  MTBEPhraseMemo *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E9365C00;
  v2 = *((_QWORD *)this + 9);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *((_QWORD *)this + 529);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v5 = (MTBEPhraseMemo *)*((_QWORD *)this + 532);
  if (v5)
  {
    MTBEPhraseMemo::~MTBEPhraseMemo(v5);
    MEMORY[0x1D8233BA8]();
  }
  v6 = *((_QWORD *)this + 533);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  MTFEFrameFiller::~MTFEFrameFiller((MTBEPhraseProcessor *)((char *)this + 2728));
  v7 = *((_QWORD *)this + 338);
  if (v7)
    MEMORY[0x1D8233B90](v7, 0x1000C80274DC3F3);
}

{
  MTBEPhraseProcessor::~MTBEPhraseProcessor(this);
  JUMPOUT(0x1D8233BA8);
}

void MTBEPhraseProcessor::ProcessPhrase(MTBEPhraseProcessor *this)
{
  MTBEParam *v2;
  int v3;
  int v4;
  char v5;
  char v6;
  MTFEPitchCoeffs *v7;
  char *v8;
  MTFESpeechVisitor *v9;
  uint64_t (***v10)(MTFESpeechVisitor *__hidden, MTFESpeechElement *);
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[23];
  _BYTE v16[128];
  uint64_t (**v17)(MTFESpeechVisitor *__hidden, MTFESpeechElement *);
  MTBEParam *v18;
  char *v19;
  uint64_t (***v20)(MTFESpeechVisitor *__hidden, MTFESpeechElement *);
  uint64_t v21;
  _QWORD v22[3];
  int v23;
  char v24;
  char v25;
  _QWORD v26[3];
  int v27;
  int v28;
  _QWORD v29[4];
  uint64_t (**v30)(MTFESpeechVisitor *__hidden, MTFESpeechElement *);
  void *v31;
  void *v32;
  _QWORD v33[6];
  _BYTE v34[192];
  void *v35;
  char v36;
  _QWORD v37[3];
  _QWORD v38[2];
  _QWORD v39[4];
  __int16 v40;
  MTFEWord v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = (MTBEPhraseProcessor *)((char *)this + 88);
  MTBEParam::SetRate((MTBEPhraseProcessor *)((char *)this + 88), *(__int16 *)(*((_QWORD *)this + 3) + 10));
  v3 = MTBEParam::MidiToPitch(v2, (uint64_t)*(int *)(*((_QWORD *)this + 3) + 12) >> 8);
  MTBEParam::SetPitch((uint64_t)v2, v3);
  MTBEParam::SetModulation((uint64_t)v2, *(int *)(*((_QWORD *)this + 3) + 16));
  MTBEParam::SetVolume(v2, *(int *)(*((_QWORD *)this + 3) + 20));
  MTBEParam::SetRate((MTBEPhraseProcessor *)((char *)this + 1392), *(__int16 *)(*((_QWORD *)this + 5) + 10));
  v4 = MTBEParam::MidiToPitch((MTBEPhraseProcessor *)((char *)this + 1392), (uint64_t)*(int *)(*((_QWORD *)this + 5) + 12) >> 8);
  MTBEParam::SetPitch((uint64_t)this + 1392, v4);
  MTBEParam::SetModulation((uint64_t)this + 1392, *(int *)(*((_QWORD *)this + 5) + 16));
  MTBEParam::SetVolume((_WORD *)this + 696, *(int *)(*((_QWORD *)this + 5) + 20));
  v39[0] = &off_1E9366040;
  v40 = 0;
  MTFEWord::MTFEWord(&v41, 0, 0);
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v39, *((MTFESpeechElement **)this + 2));
  v38[0] = &unk_1E9368CD8;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v38, *((MTFESpeechElement **)this + 2));
  v37[0] = &unk_1E9369DB0;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v37, *((MTFESpeechElement **)this + 2));
  v35 = &unk_1E9365F88;
  v36 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEBoundaryModel);
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)&v35, *((MTFESpeechElement **)this + 2));
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEBoundaryModel))
  {
    v17 = (uint64_t (**)(MTFESpeechVisitor *__hidden, MTFESpeechElement *))&unk_1E9369B28;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)&v17, *((MTFESpeechElement **)this + 2));
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v17);
  }
  MTFEMarkStress::MTFEMarkStress((uint64_t)v34, *((_QWORD *)this + 10), (uint64_t)v2, (uint64_t)this + 1392, *((_QWORD *)this + 3));
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v34, *((MTFESpeechElement **)this + 2));
  v33[0] = &unk_1E9368A20;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v33, *((MTFESpeechElement **)this + 2));
  v30 = &off_1E93668F8;
  v31 = &unk_1E93669A0;
  v32 = &unk_1E9366A48;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)&v30, *((MTFESpeechElement **)this + 2));
  (**(void (***)(MTBEPhraseProcessor *, _QWORD))this)(this, *((_QWORD *)this + 2));
  v29[0] = &unk_1E9369E38;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v29, *((MTFESpeechElement **)this + 2));
  v26[0] = &unk_1E93672E8;
  v27 = 0;
  v28 = 0;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v26, *((MTFESpeechElement **)this + 2));
  if (*((_BYTE *)this + 1391))
  {
    MTFEDuration::MTFEDuration(&v17, v2, *((_QWORD *)this + 10));
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)&v17, *((MTFESpeechElement **)this + 2));
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v17);
  }
  (*(void (**)(MTBEPhraseProcessor *, _QWORD))(*(_QWORD *)this + 8))(this, *((_QWORD *)this + 2));
  v5 = *((_BYTE *)this + 4216);
  v6 = *((_BYTE *)this + 1391);
  v23 = 0;
  v22[0] = &unk_1E9366F20;
  v24 = v5;
  v25 = v6;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v22, *((MTFESpeechElement **)this + 2));
  if (!*((_BYTE *)this + 65))
  {
    v17 = &off_1E9366B78;
    v18 = (MTBEParam *)&unk_1E9366AF0;
    v20 = &v17;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)&v17, *((MTFESpeechElement **)this + 2));
    v17 = &off_1E9366B78;
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v18);
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v17);
  }
  MTFEModDuration::MTFEModDuration(v16, v2, *((_QWORD *)this + 10), *((float *)this + 1057));
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v16, *((MTFESpeechElement **)this + 2));
  (*(void (**)(MTBEPhraseProcessor *, _QWORD))(*(_QWORD *)this + 16))(this, *((_QWORD *)this + 2));
  if (*((_BYTE *)this + 65))
  {
    if (*(_QWORD *)(*((_QWORD *)this + 6) + 80))
    {
      v7 = (MTFEPitchCoeffs *)operator new();
      MTFEPitchCoeffs::MTFEPitchCoeffs(v7, *(const __CFDictionary **)(*((_QWORD *)this + 6) + 80));
    }
    else
    {
      v7 = (MTFEPitchCoeffs *)operator new();
      MTFEPitchCoeffs::Initialize(v7);
    }
    MTFEToBIPitch::MTFEToBIPitch((uint64_t)v15, (uint64_t)v2, *((_QWORD *)this + 6), (uint64_t)this + 1392, (uint64_t)v7, *((_QWORD *)this + 10), *((_BYTE *)this + 66));
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v15, *((MTFESpeechElement **)this + 2));
    if ((MTBEDebugFlags::sMTXDebug & 0x100) == 0)
    {
      MTFESmoothPitch::MTFESmoothPitch((MTFESmoothPitch *)&v17, v7);
      MTFESpeechVisitor::Visit((MTFESpeechVisitor *)&v17, *((MTFESpeechElement **)this + 2));
      MTFESmoothPitch::~MTFESmoothPitch((MTFESmoothPitch *)&v17);
    }
    MTFESegmentalPerturbations::MTFESegmentalPerturbations(v12, v7, *((_QWORD *)this + 10), *((unsigned __int8 *)this + 67), *((unsigned __int8 *)this + 68), 0);
    MTFESegmentalPerturbations::Visit((uint64_t)v12, *((MTFESpeechElement **)this + 2));
    v10 = (uint64_t (***)(MTFESpeechVisitor *__hidden, MTFESpeechElement *))*((_QWORD *)this + 10);
    v17 = (uint64_t (**)(MTFESpeechVisitor *__hidden, MTFESpeechElement *))&unk_1E9367A30;
    v18 = v2;
    v19 = (char *)this + 1392;
    v20 = v10;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)&v17, *((MTFESpeechElement **)this + 2));
    MEMORY[0x1D8233BA8](v7, 0x1000C404A43BE38);
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v17);
    v12[0] = &off_1E9367B28;
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v14);
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v13);
    v9 = (MTFESpeechVisitor *)v12;
  }
  else
  {
    v15[0] = &unk_1E9366FD8;
    v15[2] = v2;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v15, *((MTFESpeechElement **)this + 2));
    v8 = (char *)*((_QWORD *)this + 10);
    v17 = (uint64_t (**)(MTFESpeechVisitor *__hidden, MTFESpeechElement *))&unk_1E9366C30;
    v18 = (MTBEPhraseProcessor *)((char *)this + 2696);
    v19 = v8;
    v20 = (uint64_t (***)(MTFESpeechVisitor *__hidden, MTFESpeechElement *))v2;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)&v17, *((MTFESpeechElement **)this + 2));
    v9 = (MTFESpeechVisitor *)&v17;
  }
  MTFESpeechVisitor::~MTFESpeechVisitor(v9);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v15);
  v15[0] = &unk_1E9368AF8;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v15, *((MTFESpeechElement **)this + 2));
  v11 = *((_QWORD *)this + 7);
  if (v11)
  {
    v17 = (uint64_t (**)(MTFESpeechVisitor *__hidden, MTFESpeechElement *))&unk_1E9368C38;
    v21 = v11;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)&v17, *((MTFESpeechElement **)this + 2));
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v17);
  }
  (*(void (**)(MTBEPhraseProcessor *, _QWORD))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 2));
  MTFEFrameFiller::InitPhrase((MTBEPhraseProcessor *)((char *)this + 2728), *((MTFESpeechElement **)this + 2));
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v15);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v16);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v22);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v26);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v29);
  v30 = &off_1E93668F8;
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v32);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v31);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v30);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v33);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v34);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v35);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v37);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v38);
  v39[0] = &off_1E9366040;
  v41.var0 = (void **)&off_1E9366258;
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)&v41.var18);
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)&v41);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v39);
}

void sub_1D225FFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  MEMORY[0x1D8233BA8](v47, 0x1000C404A43BE38);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&a47);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&STACK[0x3F0]);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&STACK[0x4D0]);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&STACK[0x510]);
  MTFESyllablify::~MTFESyllablify((MTFESyllablify *)&STACK[0x530]);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&STACK[0x580]);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&STACK[0x5B0]);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&STACK[0x670]);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&STACK[0x680]);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&STACK[0x698]);
  MTFEPOSResolver::~MTFEPOSResolver((MTFEPOSResolver *)&STACK[0x6A8]);
  _Unwind_Resume(a1);
}

uint64_t MTBEDebugParam<BOOL>::operator BOOL(uint64_t a1)
{
  const __CFString *v2;

  v2 = *(const __CFString **)a1;
  if (v2)
  {
    MTBEDebugParams::GetParam(v2, (const __CFString *)(a1 + 8), (BOOL *)*(unsigned __int8 *)(a1 + 8));
    *(_QWORD *)a1 = 0;
  }
  return *(unsigned __int8 *)(a1 + 8);
}

void MTFESegmentalPerturbations::~MTFESegmentalPerturbations(MTFESegmentalPerturbations *this)
{
  MTFESpeechVisitor *v2;

  *(_QWORD *)this = &off_1E9367B28;
  v2 = (MTFESegmentalPerturbations *)((char *)this + 16);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESegmentalPerturbations *)((char *)this + 64));
  MTFESpeechVisitor::~MTFESpeechVisitor(v2);
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
}

{
  MTFESpeechVisitor *v2;

  *(_QWORD *)this = &off_1E9367B28;
  v2 = (MTFESegmentalPerturbations *)((char *)this + 16);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESegmentalPerturbations *)((char *)this + 64));
  MTFESpeechVisitor::~MTFESpeechVisitor(v2);
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void MTFESyllablify::~MTFESyllablify(MTFESyllablify *this)
{
  MTFESpeechVisitor *v2;

  *(_QWORD *)this = &off_1E93668F8;
  v2 = (MTFESyllablify *)((char *)this + 8);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESyllablify *)((char *)this + 24));
  MTFESpeechVisitor::~MTFESpeechVisitor(v2);
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
}

{
  MTFESpeechVisitor *v2;

  *(_QWORD *)this = &off_1E93668F8;
  v2 = (MTFESyllablify *)((char *)this + 8);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESyllablify *)((char *)this + 24));
  MTFESpeechVisitor::~MTFESpeechVisitor(v2);
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void MTFEPOSResolver::~MTFEPOSResolver(MTFEPOSResolver *this)
{
  *(_QWORD *)this = &off_1E9366040;
  *((_QWORD *)this + 6) = &off_1E9366258;
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)((char *)this + 160));
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)((char *)this + 48));
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
}

{
  *(_QWORD *)this = &off_1E9366040;
  *((_QWORD *)this + 6) = &off_1E9366258;
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)((char *)this + 160));
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)((char *)this + 48));
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void MTBEPhraseProcessor::SelectUnits(MTBEPhraseProcessor *this, MTFESpeechElement *a2)
{
  uint64_t v2;
  _QWORD v3[3];
  int v4;
  char v5;

  if ((MTBEDebugFlags::sMTXDebug & 2) != 0)
  {
    v2 = *MEMORY[0x1E0C80C10];
    v3[0] = &off_1E9365EB0;
    v3[1] = v2;
    v3[2] = 0;
    v4 = 0;
    v5 = 0;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v3, a2);
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v3);
  }
}

void sub_1D2260310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)va);
  _Unwind_Resume(a1);
}

uint64_t MTBEPhraseProcessor::GenerateSamples(MTBEPhraseProcessor *this, MTBESoundOutput *a2, int *a3)
{
  MTBESoundOutput *v4;
  int v6;
  FILE **v7;
  char v9;
  MTMBDemiProperties *v10;
  const char *v11;
  FILE *v12;
  int *v13;
  float v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  int v18;
  int v20;
  float *__Y;
  int __N[2];
  __int16 v23;
  MTMBDemiProperties *v24;
  char v25[32];
  uint64_t v26;

  v4 = a2;
  v26 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(*(uint64_t (**)(MTBESoundOutput *))(*(_QWORD *)a2 + 48))(a2) >= 0x200)
  {
    v6 = -7;
    v7 = (FILE **)MEMORY[0x1E0C80C10];
    do
    {
      if (__CFADD__(v6++, 1))
        break;
      v24 = 0;
      __Y = 0;
      *(_QWORD *)__N = 0;
      v23 = 0;
      if (((***((uint64_t (****)(_QWORD, float **))this + 9))(*((_QWORD *)this + 9), &__Y) & 1) == 0)
      {
        (*(void (**)(MTBESoundOutput *))(*(_QWORD *)v4 + 32))(v4);
        v20 = *((unsigned __int8 *)this + 2882);
        LODWORD(v4) = *((_BYTE *)this + 2882) != 0;
        *((_BYTE *)this + 2882) = 0;
        if (!v20)
        {
          if ((MTBEDebugFlags::sMEOWDebug & 1) != 0)
            fprintf(*v7, "Phrase has %ld samples\n", *((_QWORD *)this + 531));
          *((_QWORD *)this + 531) = 0;
        }
        v18 = 0;
        return (v4 | v18) & 1;
      }
      v9 = MTBEDebugFlags::sMEOWDebug;
      if ((MTBEDebugFlags::sMEOWDebug & 1) != 0)
      {
        v10 = v24;
        if (v24 != *((MTMBDemiProperties **)this + 530))
        {
          *((_QWORD *)this + 530) = v24;
          if (v10)
            v11 = MTMBDemiProperties::Phon(v10, v25);
          else
            v11 = "SIL";
          fprintf(*v7, "Cut %s at sample %ld\n", v11, *((_QWORD *)this + 531));
          (*(void (**)(MTBESoundOutput *, const char *))(*(_QWORD *)v4 + 24))(v4, v11);
          v9 = MTBEDebugFlags::sMEOWDebug;
        }
      }
      if ((v9 & 0x10) != 0)
      {
        v12 = *v7;
        v13 = MTMBSegment::Abstract((MTMBSegment **)&__Y);
        v14 = cblas_sdot(LOWORD(__N[0]), __Y, 1, __Y, 1);
        LOWORD(v15) = __N[0];
        fprintf(v12, "PP %s %f\n", (const char *)v13, sqrtf(v14 / (float)v15));
      }
      v16 = LOWORD(__N[0]);
      if (a3)
        *a3 += LOWORD(__N[0]);
      *((_QWORD *)this + 531) += v16;
      v17 = (*(uint64_t (**)(MTBESoundOutput *, float *))(*(_QWORD *)v4 + 16))(v4, __Y);
      MTMBSegment::Free((MTMBSegment *)&__Y);
    }
    while ((v17 & 1) != 0);
  }
  v18 = 1;
  return (v4 | v18) & 1;
}

uint64_t MTBEPhraseProcessor::Reader(MTBEPhraseProcessor *this)
{
  return 0;
}

__n128 MTBEPhraseProcessor::UpdateEngineFromNotifier(MTBEPhraseProcessor *this)
{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  __int128 v14;

  if ((MTBEDebugFlags::sMTXDebug & 4) != 0)
  {
    v3 = (_DWORD *)*((_QWORD *)this + 3);
    v2 = (_DWORD *)*((_QWORD *)this + 4);
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "MTX: UpdateEngineFromNotifier rate %x -> %x pb %x -> %x pm %x -> %x vol %x -> %x behavior %x -> %x\n", v2[2], v3[2], v2[3], v3[3], v2[4], v3[4], v2[5], v3[5], v2[12], v3[12]);
  }
  v4 = *((_QWORD *)this + 3);
  v5 = *((_QWORD *)this + 4);
  v6 = *(_DWORD *)(v4 + 8);
  if (v6 != *(_DWORD *)(v5 + 8))
  {
    MTBEParam::SetRate((MTBEPhraseProcessor *)((char *)this + 88), v6 >> 16);
    MTBEParam::SetRate((MTBEPhraseProcessor *)((char *)this + 1392), *(__int16 *)(*((_QWORD *)this + 5) + 10));
    v4 = *((_QWORD *)this + 3);
    v5 = *((_QWORD *)this + 4);
  }
  v7 = *(_DWORD *)(v4 + 12);
  if (v7 != *(_DWORD *)(v5 + 12))
  {
    v8 = MTBEParam::MidiToPitch((MTBEPhraseProcessor *)((char *)this + 88), (uint64_t)v7 >> 8);
    MTBEParam::SetPitch((uint64_t)this + 88, v8);
    v9 = MTBEParam::MidiToPitch((MTBEPhraseProcessor *)((char *)this + 1392), (uint64_t)*(int *)(*((_QWORD *)this + 5) + 12) >> 8);
    MTBEParam::SetPitch((uint64_t)this + 1392, v9);
    v4 = *((_QWORD *)this + 3);
    v5 = *((_QWORD *)this + 4);
  }
  v10 = *(int *)(v4 + 16);
  if ((_DWORD)v10 != *(_DWORD *)(v5 + 16))
  {
    MTBEParam::SetModulation((uint64_t)this + 88, v10);
    MTBEParam::SetModulation((uint64_t)this + 1392, *(int *)(*((_QWORD *)this + 5) + 16));
    v4 = *((_QWORD *)this + 3);
    v5 = *((_QWORD *)this + 4);
  }
  v11 = *(int *)(v4 + 20);
  if ((_DWORD)v11 != *(_DWORD *)(v5 + 20))
  {
    MTBEParam::SetVolume((_WORD *)this + 44, v11);
    MTBEParam::SetVolume((_WORD *)this + 696, *(int *)(*((_QWORD *)this + 5) + 20));
    v4 = *((_QWORD *)this + 3);
    v5 = *((_QWORD *)this + 4);
  }
  result = *(__n128 *)(v4 + 8);
  v13 = *(_OWORD *)(v4 + 24);
  v14 = *(_OWORD *)(v4 + 40);
  *(_DWORD *)(v5 + 56) = *(_DWORD *)(v4 + 56);
  *(_OWORD *)(v5 + 40) = v14;
  *(_OWORD *)(v5 + 24) = v13;
  *(__n128 *)(v5 + 8) = result;
  return result;
}

uint64_t MTBEPhraseProcessor::UpdateNotifierFromEngine(MTBEPhraseProcessor *this)
{
  uint64_t v2;
  MTBEParam *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  MTBEParam *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 3);
  v3 = (MTBEPhraseProcessor *)((char *)this + 88);
  *(_DWORD *)(v2 + 8) = MTBEParam::GetRate((MTBEPhraseProcessor *)((char *)this + 88)) << 16;
  v4 = *((_QWORD *)this + 3);
  *(_DWORD *)(v4 + 12) = 3072 * MTBEParam::GetPitch(v3) + 2054400;
  v5 = *((_QWORD *)this + 3);
  *(_DWORD *)(v5 + 16) = MTBEParam::GetModulation(v3);
  v6 = *((_QWORD *)this + 3);
  *(_DWORD *)(v6 + 20) = MTBEParam::GetVolume(v3);
  if ((MTBEDebugFlags::sMTXDebug & 4) != 0)
  {
    v7 = (_DWORD *)*((_QWORD *)this + 3);
    v8 = (_DWORD *)*((_QWORD *)this + 4);
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "MTX: UpdateNotifierFromEngine rate %x -> %x pb %x -> %x pm %x -> %x vol %x -> %x behavior %x -> %x\n", v7[2], v8[2], v7[3], v8[3], v7[4], v8[4], v7[5], v8[5], v7[12], v8[12]);
  }
  v9 = *((_QWORD *)this + 3);
  v10 = *((_QWORD *)this + 4);
  v11 = *(_OWORD *)(v9 + 8);
  v12 = *(_OWORD *)(v9 + 24);
  v13 = *(_OWORD *)(v9 + 40);
  *(_DWORD *)(v10 + 56) = *(_DWORD *)(v9 + 56);
  *(_OWORD *)(v10 + 40) = v13;
  *(_OWORD *)(v10 + 24) = v12;
  *(_OWORD *)(v10 + 8) = v11;
  v14 = *((_QWORD *)this + 5);
  v15 = (MTBEPhraseProcessor *)((char *)this + 1392);
  *(_DWORD *)(v14 + 8) = MTBEParam::GetRate((MTBEPhraseProcessor *)((char *)this + 1392)) << 16;
  v16 = *((_QWORD *)this + 5);
  *(_DWORD *)(v16 + 12) = 3072 * MTBEParam::GetPitch((MTBEPhraseProcessor *)((char *)this + 1392)) + 2054400;
  v17 = *((_QWORD *)this + 5);
  *(_DWORD *)(v17 + 16) = MTBEParam::GetModulation((MTBEPhraseProcessor *)((char *)this + 1392));
  v18 = *((_QWORD *)this + 5);
  result = MTBEParam::GetVolume(v15);
  *(_DWORD *)(v18 + 20) = result;
  return result;
}

uint64_t MTBEPhraseProcessor::Create(MTBEPhraseProcessor *this, const VoiceDescription *a2, const void *a3, const MTBEPhraseParam *a4)
{
  int v6;
  uint64_t v7;

  v6 = *((_DWORD *)this + 1);
  if (v6 == 1734437985)
  {
    v7 = operator new();
    MTPBPhraseProcessor::MTPBPhraseProcessor(v7, a2, a3);
  }
  else if (v6 == 1835364215)
  {
    v7 = operator new();
    MTMBPhraseProcessor::MTMBPhraseProcessor(v7, a2, a3);
  }
  else
  {
    v7 = operator new();
    MT3BPhraseProcessor::MT3BPhraseProcessor(v7, a2, a3);
  }
  return v7;
}

void sub_1D2260910(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10F3C40A7C9FD70);
  _Unwind_Resume(a1);
}

void MTFESmoothPitch::~MTFESmoothPitch(MTFESmoothPitch *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E93677B8;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x1D8233B90](v2, 0x1000C8052888210);
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
}

{
  MTFESmoothPitch::~MTFESmoothPitch(this);
  JUMPOUT(0x1D8233BA8);
}

void MTBESampleBuffer::MTBESampleBuffer(MTBESampleBuffer *this)
{
  *(_QWORD *)this = off_1E9365C90;
  *((_QWORD *)this + 1) = (char *)this + 32;
  *((_QWORD *)this + 2) = (char *)this + 17952;
  *((_QWORD *)this + 3) = 0;
}

uint64_t MTBESampleBuffer::NextBuffer(uint64_t this)
{
  int v1;
  uint64_t v2;

  v1 = (*(_DWORD *)(this + 24) + 1) % 3;
  *(_DWORD *)(this + 24) = v1;
  *(_DWORD *)(this + 28) = 0;
  v2 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = this + 8960 * v1 + 32;
  *(_QWORD *)(this + 16) = v2;
  return this;
}

void MTBEWorker::ExecuteTasks(MTBEWorker *this, const char *a2)
{
  unint64_t *i;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __n128 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  timeval v14;
  int64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  timeval *v21;
  timeval v22;
  timeval v23;
  timeval v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v30;
  char v31;
  timeval v32;
  timeval v33;

  MTBEWorker::DebugLog("<%s> ExecuteTasks\n", a2, *(_QWORD *)this);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 104));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  for (i = (unint64_t *)*((_QWORD *)this + 1);
        i != *((unint64_t **)this + 2);
        i = (unint64_t *)*((_QWORD *)this + 1))
  {
    v4 = *i;
    v5 = i[2];
    v6 = i[3];
    gettimeofday(&v32, 0);
    v8 = v32.tv_usec + 1000000 * v32.tv_sec;
    if (v8 < v4)
      break;
    v9 = *((_QWORD *)this + 1);
    v10 = *((_QWORD *)this + 2);
    v11 = v10 - v9;
    if (v10 - v9 >= 33)
    {
      v12 = 0;
      v13 = v11 >> 5;
      v14 = *(timeval *)(v9 + 16);
      v32 = *(timeval *)v9;
      v33 = v14;
      v15 = (unint64_t)((v11 >> 5) - 2) >> 1;
      v16 = (_OWORD *)v9;
      do
      {
        v17 = (uint64_t)&v16[2 * v12 + 2];
        v18 = (2 * v12) | 1;
        v19 = 2 * v12 + 2;
        if (v19 < v13 && *(_QWORD *)v17 > *(_QWORD *)(v17 + 32))
        {
          v17 += 32;
          v18 = v19;
        }
        v20 = *(_OWORD *)(v17 + 16);
        *v16 = *(_OWORD *)v17;
        v16[1] = v20;
        v16 = (_OWORD *)v17;
        v12 = v18;
      }
      while (v18 <= v15);
      v21 = (timeval *)(v10 - 32);
      if ((timeval *)v17 == v21)
      {
        v7 = (__n128)v32;
        v24 = v33;
        *(timeval *)v17 = v32;
        *(timeval *)(v17 + 16) = v24;
      }
      else
      {
        v22 = v21[1];
        *(timeval *)v17 = *v21;
        *(timeval *)(v17 + 16) = v22;
        v23 = v33;
        *v21 = v32;
        v21[1] = v23;
        v7 = std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>(v9, v17 + 32, (uint64_t)&v31, (v17 + 32 - v9) >> 5);
      }
      v10 = *((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 2) = v10 - 32;
    v25 = MTBEWorker::sBigBang;
    v26 = *(_QWORD *)this;
    v27 = (**(uint64_t (***)(unint64_t, __n128))v5)(v5, v7);
    if (v8 == v4 || v4 == v25)
      MTBEWorker::DebugLog("<%s> Executing [%s]\n", v28, v26, v27, v30);
    else
      MTBEWorker::DebugLog("<%s> Executing [%s] with slippage %.2fms\n", v28, v26, v27, (double)(v8 - v4) / 1000.0);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 40));
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v5 + 8))(v5, v6);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 40));
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 104));
  MTBEWorker::SleepTillReady(this);
}

void MTBEWorker::MTBEWorker(MTBEWorker *this, const char *a2)
{
  NSObject *inactive;
  NSObject *v4;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (MTBEWorker::MTBEWorker(char const*)::sOnceBigBang != -1)
    dispatch_once(&MTBEWorker::MTBEWorker(char const*)::sOnceBigBang, &__block_literal_global_0);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 40), &MTBEWorker::MTBEWorker(char const*)::sRecursiveMutex);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 104), &MTBEWorker::MTBEWorker(char const*)::sRecursiveMutex);
  *((_DWORD *)this + 46) = 0;
  inactive = dispatch_workloop_create_inactive("com.apple.macintalk.synthesis");
  dispatch_set_qos_class_fallback();
  dispatch_workloop_set_scheduler_priority();
  dispatch_activate(inactive);
  *((_QWORD *)this + 21) = inactive;
  v4 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 1uLL, inactive);
  *((_QWORD *)this + 22) = v4;
  dispatch_set_context(v4, this);
  dispatch_source_set_event_handler_f(*((dispatch_source_t *)this + 22), (dispatch_function_t)MTBEWorkerExecuteTasks);
  dispatch_source_set_timer(*((dispatch_source_t *)this + 22), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x4C4B40uLL);
  dispatch_resume(*((dispatch_object_t *)this + 22));
}

void sub_1D2260D3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10MTBEWorkerC2EPKc_block_invoke()
{
  timeval v1;

  gettimeofday(&v1, 0);
  MTBEWorker::sBigBang = v1.tv_usec + 1000000 * v1.tv_sec;
  pthread_mutexattr_init(&MTBEWorker::MTBEWorker(char const*)::sRecursiveMutex);
  return pthread_mutexattr_settype(&MTBEWorker::MTBEWorker(char const*)::sRecursiveMutex, 2);
}

void MTBEWorker::~MTBEWorker(MTBEWorker *this, const char *a2)
{
  void *v3;

  MTBEWorker::Purge(this, a2);
  dispatch_release(*((dispatch_object_t *)this + 22));
  dispatch_release(*((dispatch_object_t *)this + 21));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 40));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 104));
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void MTBEWorker::Purge(MTBEWorker *this, const char *a2)
{
  char *v3;
  char *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;

  MTBEWorker::DebugLog("<%s> Purge\n", a2, *(_QWORD *)this);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  v3 = (char *)*((_QWORD *)this + 1);
  for (i = (char *)*((_QWORD *)this + 2); v3 != i; *((_QWORD *)this + 2) = i)
  {
    v5 = i - v3;
    if (i - v3 >= 33)
    {
      v6 = 0;
      v7 = v5 >> 5;
      v8 = *((_OWORD *)v3 + 1);
      v20 = *(_OWORD *)v3;
      v21 = v8;
      v9 = (unint64_t)((v5 >> 5) - 2) >> 1;
      v10 = v3;
      do
      {
        v11 = (uint64_t)&v10[2 * v6 + 2];
        v12 = (2 * v6) | 1;
        v13 = 2 * v6 + 2;
        if (v13 < v7 && *(_QWORD *)v11 > *(_QWORD *)(v11 + 32))
        {
          v11 += 32;
          v12 = v13;
        }
        v14 = *(_OWORD *)(v11 + 16);
        *v10 = *(_OWORD *)v11;
        v10[1] = v14;
        v10 = (_OWORD *)v11;
        v6 = v12;
      }
      while (v12 <= v9);
      v15 = i - 32;
      if ((char *)v11 == v15)
      {
        v18 = v21;
        *(_OWORD *)v11 = v20;
        *(_OWORD *)(v11 + 16) = v18;
      }
      else
      {
        v16 = *((_OWORD *)v15 + 1);
        *(_OWORD *)v11 = *(_OWORD *)v15;
        *(_OWORD *)(v11 + 16) = v16;
        v17 = v21;
        *(_OWORD *)v15 = v20;
        *((_OWORD *)v15 + 1) = v17;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>((uint64_t)v3, v11 + 32, (uint64_t)&v19, (v11 + 32 - (uint64_t)v3) >> 5);
      }
      v3 = (char *)*((_QWORD *)this + 1);
      i = (char *)*((_QWORD *)this + 2);
    }
    i -= 32;
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 40));
  MTBEWorker::SleepTillReady(this);
}

const char *MTBEWorker::Task::Name(MTBEWorker::Task *this)
{
  return "<Unknown>";
}

void MTBEWorker::AddTask(uint64_t *a1, uint64_t (***a2)(_QWORD), uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  char v26;
  char v27[30];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  sprintf(v27, "%u", (*a4 - MTBEWorker::sBigBang) / 1000);
  v8 = *a1;
  v9 = (**a2)(a2);
  MTBEWorker::DebugLog("<%s> Add Task %p[%s]@%s\n", v10, v8, a2, v9, v27);
  v11 = *a4;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 5));
  v12 = a1[3];
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= v12)
  {
    v15 = a1[1];
    v16 = ((uint64_t)v13 - v15) >> 5;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 59)
      std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
    v18 = v12 - v15;
    if (v18 >> 4 > v17)
      v17 = v18 >> 4;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
      v19 = 0x7FFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTBEWorker::TaskRec>>((uint64_t)(a1 + 3), v19);
    else
      v20 = 0;
    v21 = &v20[32 * v16];
    v22 = &v20[32 * v19];
    *(_QWORD *)v21 = v11;
    *((_QWORD *)v21 + 1) = a1;
    *((_QWORD *)v21 + 2) = a2;
    *((_QWORD *)v21 + 3) = a3;
    v14 = (uint64_t)(v21 + 32);
    v24 = (char *)a1[1];
    v23 = (char *)a1[2];
    if (v23 != v24)
    {
      do
      {
        v25 = *((_OWORD *)v23 - 1);
        *((_OWORD *)v21 - 2) = *((_OWORD *)v23 - 2);
        *((_OWORD *)v21 - 1) = v25;
        v21 -= 32;
        v23 -= 32;
      }
      while (v23 != v24);
      v23 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v21;
    a1[2] = v14;
    a1[3] = (uint64_t)v22;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *v13 = v11;
    v13[1] = a1;
    v14 = (uint64_t)(v13 + 4);
    v13[2] = a2;
    v13[3] = a3;
  }
  a1[2] = v14;
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>(a1[1], v14, (uint64_t)&v26, (v14 - a1[1]) >> 5);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 5));
  MTBEWorker::SleepTillReady((MTBEWorker *)a1);
}

uint64_t MTBEWorker::Timestamp(uint64_t a1, char *a2)
{
  return sprintf(a2, "%u", (a1 - MTBEWorker::sBigBang) / 1000);
}

const char *MTBEWorker::DebugLog(const char *this, const char *a2, ...)
{
  const char *v2;
  timeval v3;
  char v4[30];
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  v5 = *MEMORY[0x1E0C80C00];
  if ((MTBEDebugFlags::sMTXDebug & 1) != 0)
  {
    v2 = this;
    gettimeofday(&v3, 0);
    sprintf(v4, "%u", (v3.tv_usec + 1000000 * v3.tv_sec - MTBEWorker::sBigBang) / 1000);
    vsprintf((char *)&v3, v2, va);
    return (const char *)asl_log(0, 0, 3, "MTX %s: %s", v4, (const char *)&v3);
  }
  return this;
}

void MTBEWorker::SleepTillReady(MTBEWorker *this)
{
  pthread_mutex_t *v2;
  unint64_t *v3;
  unint64_t v4;
  const char *v5;
  NSObject *v6;
  dispatch_time_t v7;
  timespec when;
  timeval v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (pthread_mutex_t *)((char *)this + 40);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  v3 = (unint64_t *)*((_QWORD *)this + 1);
  if (v3 == *((unint64_t **)this + 2))
  {
    pthread_mutex_unlock(v2);
  }
  else
  {
    v4 = *v3;
    pthread_mutex_unlock(v2);
    gettimeofday(&v9, 0);
    if (v4 <= v9.tv_usec + 1000000 * v9.tv_sec)
    {
      dispatch_async_f(*((dispatch_queue_t *)this + 21), this, (dispatch_function_t)MTBEWorkerExecuteTasks);
    }
    else
    {
      sprintf((char *)&v9, "%u", (uint64_t)(v4 - MTBEWorker::sBigBang) / 1000);
      MTBEWorker::DebugLog("<%s> Sleep till %s\n", v5, *(_QWORD *)this, &v9);
      when.tv_sec = v4 / 0xF4240;
      when.tv_nsec = 1000 * (v4 % 0xF4240);
      v6 = *((_QWORD *)this + 22);
      v7 = dispatch_walltime(&when, 0);
      dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0x4C4B40uLL);
    }
  }
}

void MTBEWorker::PurgeTasks(MTBEWorker *this, const char *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t i;
  const char *v7;
  _OWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  _OWORD *v17;
  _OWORD *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  int64_t v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  void *__p;
  _OWORD *v38;
  unint64_t v39;
  char v40;
  __int128 v41;
  __int128 v42;

  v4 = (pthread_mutex_t *)((char *)this + 40);
  MTBEWorker::DebugLog("<%s> PurgeTasks %p\n", a2, *(_QWORD *)this, a2);
  __p = 0;
  v38 = 0;
  v39 = 0;
  pthread_mutex_lock(v4);
  v5 = *((_QWORD *)this + 1);
  for (i = *((_QWORD *)this + 2); v5 != i; *((_QWORD *)this + 2) = i)
  {
    v7 = *(const char **)(v5 + 24);
    v36 = *(_QWORD *)(v5 + 16);
    v35 = *(_OWORD *)v5;
    if (v7 != a2)
    {
      v8 = v38;
      if ((unint64_t)v38 >= v39)
      {
        v11 = ((char *)v38 - (_BYTE *)__p) >> 5;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 59)
          std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
        v13 = v39 - (_QWORD)__p;
        if ((uint64_t)(v39 - (_QWORD)__p) >> 4 > v12)
          v12 = v13 >> 4;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
          v14 = 0x7FFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTBEWorker::TaskRec>>((uint64_t)&v39, v14);
        else
          v15 = 0;
        v16 = &v15[32 * v11];
        *(_OWORD *)v16 = v35;
        *((_QWORD *)v16 + 2) = v36;
        *((_QWORD *)v16 + 3) = v7;
        v18 = __p;
        v17 = v38;
        v19 = v16;
        if (v38 != __p)
        {
          do
          {
            v20 = *(v17 - 1);
            *((_OWORD *)v19 - 2) = *(v17 - 2);
            *((_OWORD *)v19 - 1) = v20;
            v19 -= 32;
            v17 -= 2;
          }
          while (v17 != v18);
          v17 = __p;
        }
        v10 = v16 + 32;
        __p = v19;
        v38 = v16 + 32;
        v39 = (unint64_t)&v15[32 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        v9 = *(_QWORD *)(v5 + 16);
        *v38 = *(_OWORD *)v5;
        *((_QWORD *)v8 + 2) = v9;
        *((_QWORD *)v8 + 3) = v7;
        v10 = v8 + 2;
      }
      v38 = v10;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>((uint64_t)__p, (uint64_t)v10, (uint64_t)&v41, ((char *)v10 - (_BYTE *)__p) >> 5);
      v5 = *((_QWORD *)this + 1);
      i = *((_QWORD *)this + 2);
    }
    v21 = i - v5;
    if (i - v5 >= 33)
    {
      v22 = 0;
      v23 = v21 >> 5;
      v24 = *(_OWORD *)(v5 + 16);
      v41 = *(_OWORD *)v5;
      v42 = v24;
      v25 = (unint64_t)((v21 >> 5) - 2) >> 1;
      v26 = (_OWORD *)v5;
      do
      {
        v27 = (uint64_t)&v26[2 * v22 + 2];
        v28 = (2 * v22) | 1;
        v29 = 2 * v22 + 2;
        if (v29 < v23 && *(_QWORD *)v27 > *(_QWORD *)(v27 + 32))
        {
          v27 += 32;
          v28 = v29;
        }
        v30 = *(_OWORD *)(v27 + 16);
        *v26 = *(_OWORD *)v27;
        v26[1] = v30;
        v26 = (_OWORD *)v27;
        v22 = v28;
      }
      while (v28 <= v25);
      v31 = (_OWORD *)(i - 32);
      if ((_OWORD *)v27 == v31)
      {
        v34 = v42;
        *(_OWORD *)v27 = v41;
        *(_OWORD *)(v27 + 16) = v34;
      }
      else
      {
        v32 = v31[1];
        *(_OWORD *)v27 = *v31;
        *(_OWORD *)(v27 + 16) = v32;
        v33 = v42;
        *v31 = v41;
        v31[1] = v33;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>(v5, v27 + 32, (uint64_t)&v40, (v27 + 32 - v5) >> 5);
      }
      v5 = *((_QWORD *)this + 1);
      i = *((_QWORD *)this + 2);
    }
    i -= 32;
  }
  if ((void **)((char *)this + 8) != &__p)
    std::vector<MTBEWorker::TaskRec>::__assign_with_size[abi:ne180100]<MTBEWorker::TaskRec*,MTBEWorker::TaskRec*>((char *)this + 8, (char *)__p, (uint64_t)v38, ((char *)v38 - (_BYTE *)__p) >> 5);
  pthread_mutex_unlock(v4);
  MTBEWorker::SleepTillReady(this);
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
}

void sub_1D22616D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTBEWorker::PurgeTasks(MTBEWorker *this, MTBEWorker::Task *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t i;
  MTBEWorker::Task *v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  _OWORD *v20;
  _OWORD *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  int64_t v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *__p;
  _OWORD *v40;
  unint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;

  v4 = (pthread_mutex_t *)((char *)this + 40);
  v5 = *(_QWORD *)this;
  v6 = (**(uint64_t (***)(MTBEWorker::Task *))a2)(a2);
  MTBEWorker::DebugLog("<%s> PurgeTasks %s\n", v7, v5, v6);
  __p = 0;
  v40 = 0;
  v41 = 0;
  pthread_mutex_lock(v4);
  v8 = *((_QWORD *)this + 1);
  for (i = *((_QWORD *)this + 2); v8 != i; *((_QWORD *)this + 2) = i)
  {
    v38 = *(_OWORD *)v8;
    v10 = *(MTBEWorker::Task **)(v8 + 16);
    if (v10 != a2)
    {
      v11 = *(_QWORD *)(v8 + 24);
      v12 = v40;
      if ((unint64_t)v40 >= v41)
      {
        v14 = ((char *)v40 - (_BYTE *)__p) >> 5;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 59)
          std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
        v16 = v41 - (_QWORD)__p;
        if ((uint64_t)(v41 - (_QWORD)__p) >> 4 > v15)
          v15 = v16 >> 4;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
          v17 = 0x7FFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTBEWorker::TaskRec>>((uint64_t)&v41, v17);
        else
          v18 = 0;
        v19 = &v18[32 * v14];
        *(_OWORD *)v19 = v38;
        *((_QWORD *)v19 + 2) = v10;
        *((_QWORD *)v19 + 3) = v11;
        v21 = __p;
        v20 = v40;
        v22 = v19;
        if (v40 != __p)
        {
          do
          {
            v23 = *(v20 - 1);
            *((_OWORD *)v22 - 2) = *(v20 - 2);
            *((_OWORD *)v22 - 1) = v23;
            v22 -= 32;
            v20 -= 2;
          }
          while (v20 != v21);
          v20 = __p;
        }
        v13 = v19 + 32;
        __p = v22;
        v40 = v19 + 32;
        v41 = (unint64_t)&v18[32 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v40 = *(_OWORD *)v8;
        *((_QWORD *)v12 + 2) = v10;
        *((_QWORD *)v12 + 3) = v11;
        v13 = v12 + 2;
      }
      v40 = v13;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>((uint64_t)__p, (uint64_t)v13, (uint64_t)&v43, ((char *)v13 - (_BYTE *)__p) >> 5);
      v8 = *((_QWORD *)this + 1);
      i = *((_QWORD *)this + 2);
    }
    v24 = i - v8;
    if (i - v8 >= 33)
    {
      v25 = 0;
      v26 = v24 >> 5;
      v27 = *(_OWORD *)(v8 + 16);
      v43 = *(_OWORD *)v8;
      v44 = v27;
      v28 = (unint64_t)((v24 >> 5) - 2) >> 1;
      v29 = (_OWORD *)v8;
      do
      {
        v30 = (uint64_t)&v29[2 * v25 + 2];
        v31 = (2 * v25) | 1;
        v32 = 2 * v25 + 2;
        if (v32 < v26 && *(_QWORD *)v30 > *(_QWORD *)(v30 + 32))
        {
          v30 += 32;
          v31 = v32;
        }
        v33 = *(_OWORD *)(v30 + 16);
        *v29 = *(_OWORD *)v30;
        v29[1] = v33;
        v29 = (_OWORD *)v30;
        v25 = v31;
      }
      while (v31 <= v28);
      v34 = (_OWORD *)(i - 32);
      if ((_OWORD *)v30 == v34)
      {
        v37 = v44;
        *(_OWORD *)v30 = v43;
        *(_OWORD *)(v30 + 16) = v37;
      }
      else
      {
        v35 = v34[1];
        *(_OWORD *)v30 = *v34;
        *(_OWORD *)(v30 + 16) = v35;
        v36 = v44;
        *v34 = v43;
        v34[1] = v36;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>(v8, v30 + 32, (uint64_t)&v42, (v30 + 32 - v8) >> 5);
      }
      v8 = *((_QWORD *)this + 1);
      i = *((_QWORD *)this + 2);
    }
    i -= 32;
  }
  if ((void **)((char *)this + 8) != &__p)
    std::vector<MTBEWorker::TaskRec>::__assign_with_size[abi:ne180100]<MTBEWorker::TaskRec*,MTBEWorker::TaskRec*>((char *)this + 8, (char *)__p, (uint64_t)v40, ((char *)v40 - (_BYTE *)__p) >> 5);
  pthread_mutex_unlock(v4);
  MTBEWorker::SleepTillReady(this);
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
}

void sub_1D22619A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTBEWorker::PendingTasks(MTBEWorker *this, MTBEWorker::Task *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  MTBEWorker::Task *v8;
  BOOL v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  _OWORD *v18;
  _OWORD *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  const char *v39;
  char *v41;
  pthread_mutex_t *v42;
  __int128 v43;
  void *__p;
  _OWORD *v45;
  unint64_t v46;
  char v47;
  __int128 v48;
  __int128 v49;

  __p = 0;
  v45 = 0;
  v46 = 0;
  v4 = (pthread_mutex_t *)((char *)this + 40);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  v5 = *((_QWORD *)this + 1);
  v41 = (char *)this + 8;
  v42 = v4;
  if (v5 == *((_QWORD *)this + 2))
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v43 = *(_OWORD *)v5;
      v8 = *(MTBEWorker::Task **)(v5 + 16);
      v7 = *(_QWORD *)(v5 + 24);
      v9 = v8 == a2;
      v10 = v45;
      if ((unint64_t)v45 >= v46)
      {
        v12 = ((char *)v45 - (_BYTE *)__p) >> 5;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 59)
          std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
        v14 = v46 - (_QWORD)__p;
        if ((uint64_t)(v46 - (_QWORD)__p) >> 4 > v13)
          v13 = v14 >> 4;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
          v15 = 0x7FFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTBEWorker::TaskRec>>((uint64_t)&v46, v15);
        else
          v16 = 0;
        v17 = &v16[32 * v12];
        *(_OWORD *)v17 = v43;
        *((_QWORD *)v17 + 2) = v8;
        *((_QWORD *)v17 + 3) = v7;
        v19 = __p;
        v18 = v45;
        v20 = v17;
        if (v45 != __p)
        {
          do
          {
            v21 = *(v18 - 1);
            *((_OWORD *)v20 - 2) = *(v18 - 2);
            *((_OWORD *)v20 - 1) = v21;
            v20 -= 32;
            v18 -= 2;
          }
          while (v18 != v19);
          v18 = __p;
        }
        v11 = v17 + 32;
        __p = v20;
        v45 = v17 + 32;
        v46 = (unint64_t)&v16[32 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v45 = *(_OWORD *)v5;
        *((_QWORD *)v10 + 2) = v8;
        *((_QWORD *)v10 + 3) = v7;
        v11 = v10 + 2;
      }
      v45 = v11;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>((uint64_t)__p, (uint64_t)v11, (uint64_t)&v48, ((char *)v11 - (_BYTE *)__p) >> 5);
      v5 = *((_QWORD *)this + 1);
      v22 = *((_QWORD *)this + 2);
      v23 = v22 - v5;
      if (v22 - v5 >= 33)
      {
        v24 = 0;
        v25 = v23 >> 5;
        v48 = *(_OWORD *)v5;
        v49 = *(_OWORD *)(v5 + 16);
        v26 = (unint64_t)((v23 >> 5) - 2) >> 1;
        v27 = (_OWORD *)v5;
        do
        {
          v28 = (uint64_t)&v27[2 * v24 + 2];
          v29 = (2 * v24) | 1;
          v30 = 2 * v24 + 2;
          if (v30 < v25 && *(_QWORD *)v28 > *(_QWORD *)(v28 + 32))
          {
            v28 += 32;
            v29 = v30;
          }
          v31 = *(_OWORD *)(v28 + 16);
          *v27 = *(_OWORD *)v28;
          v27[1] = v31;
          v27 = (_OWORD *)v28;
          v24 = v29;
        }
        while (v29 <= v26);
        v32 = (_OWORD *)(v22 - 32);
        if ((_OWORD *)v28 == v32)
        {
          v34 = v49;
          *(_OWORD *)v28 = v48;
          *(_OWORD *)(v28 + 16) = v34;
        }
        else
        {
          v33 = v32[1];
          *(_OWORD *)v28 = *v32;
          *(_OWORD *)(v28 + 16) = v33;
          *v32 = v48;
          v32[1] = v49;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>(v5, v28 + 32, (uint64_t)&v47, (v28 + 32 - v5) >> 5);
        }
        v5 = *((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
      }
      v6 |= v9;
      v35 = v22 - 32;
      *((_QWORD *)this + 2) = v35;
    }
    while (v5 != v35);
  }
  if (v41 != (char *)&__p)
    std::vector<MTBEWorker::TaskRec>::__assign_with_size[abi:ne180100]<MTBEWorker::TaskRec*,MTBEWorker::TaskRec*>(v41, (char *)__p, (uint64_t)v45, ((char *)v45 - (_BYTE *)__p) >> 5);
  pthread_mutex_unlock(v42);
  v36 = *(_QWORD *)this;
  v37 = (**(uint64_t (***)(MTBEWorker::Task *))a2)(a2);
  v39 = "NO";
  if ((v6 & 1) != 0)
    v39 = "YES";
  MTBEWorker::DebugLog("<%s> PendingTasks %s? -> %s\n", v38, v36, v37, v39);
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  return v6 & 1;
}

void sub_1D2261CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E9364DC8, MEMORY[0x1E0DE42D0]);
}

void sub_1D2261D20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTBEWorker::TaskRec>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __n128 result;
  __n128 v12;
  uint64_t v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_OWORD *)(a1 + 32 * (v4 >> 1));
    v7 = (_OWORD *)(a2 - 32);
    v8 = *(_QWORD *)(a2 - 32);
    if (*(_QWORD *)v6 > v8)
    {
      v12 = *(__n128 *)(a2 - 24);
      v13 = *(_QWORD *)(a2 - 8);
      do
      {
        v9 = v7;
        v7 = v6;
        v10 = v6[1];
        *v9 = *v6;
        v9[1] = v10;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_OWORD *)(a1 + 32 * v5);
      }
      while (*(_QWORD *)v6 > v8);
      *(_QWORD *)v7 = v8;
      result = v12;
      *(__n128 *)((char *)v7 + 8) = v12;
      *((_QWORD *)v7 + 3) = v13;
    }
  }
  return result;
}

char *std::vector<MTBEWorker::TaskRec>::__assign_with_size[abi:ne180100]<MTBEWorker::TaskRec*,MTBEWorker::TaskRec*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59)
      std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<MTBEWorker::TaskRec>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 5;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<MTBEWorker::TaskRec>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTBEWorker::TaskRec>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void MTBEWritePhonemes::MTBEWritePhonemes(MTBEWritePhonemes *this, char a2)
{
  *(_QWORD *)this = &off_1E9365D48;
  *((_BYTE *)this + 8) = a2;
  *((_BYTE *)this + 9) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = &off_1E9365D48;
  *((_BYTE *)this + 8) = a2;
  *((_BYTE *)this + 9) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
}

MTFESpeechElement *MTBEWritePhonemes::VisitIntonationalPhrase(MTBEWritePhonemes *this, MTFESpeechElement *a2)
{
  *((_BYTE *)this + 14) = BYTE6(a2[2].var6);
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTBEWritePhonemes::VisitWord(MTBEWritePhonemes *this, MTFEWord *a2)
{
  MTBEWritePhonemes::HandleWord(this, a2);
  return MTFESpeechElement::VisitChildren((MTFESpeechElement *)a2, this);
}

void MTBEWritePhonemes::HandleWord(MTBEWritePhonemes *this, MTFEWord *a2)
{
  uint64_t v4;
  std::string::value_type v5;
  int var10;
  char v7;
  int var15;
  char v9;

  *((_BYTE *)this + 12) = 1;
  *((_BYTE *)this + 10) = 0;
  *((_BYTE *)this + 11) = a2->var15 == 31;
  MTFECommands::Visit((uint64_t)&a2->var18, (uint64_t)this);
  if (*((_BYTE *)this + 9))
  {
    v4 = 0;
    v5 = 93;
    do
    {
      std::string::push_back((std::string *)((char *)this + 16), v5);
      v5 = asc_1D22DA33D[++v4];
    }
    while (v4 != 2);
    *((_BYTE *)this + 9) = 0;
  }
  var10 = a2->var10;
  if (var10 == 1)
  {
    v7 = 74;
  }
  else if (var10 == 2)
  {
    v7 = 75;
  }
  else
  {
    var15 = a2->var15;
    if (((1 << var15) & 0xA5273) != 0)
      v9 = 2;
    else
      v9 = 75;
    if (var15 == 255)
      v7 = 2;
    else
      v7 = v9;
  }
  *((_BYTE *)this + 13) = v7;
}

void MTBEWritePhonemes::Write(MTBEWritePhonemes *this, std::string::value_type *a2)
{
  std::string::value_type v2;
  std::string *v3;
  const char *v4;
  int v5;

  v2 = *a2;
  if (*a2)
  {
    v3 = (std::string *)((char *)this + 16);
    v4 = a2 + 1;
    do
    {
      std::string::push_back(v3, v2);
      v5 = *(unsigned __int8 *)v4++;
      v2 = v5;
    }
    while (v5);
  }
}

void MTBEWritePhonemes::VisitPhoneme(MTBEWritePhonemes *this, MTFEPhoneme *a2)
{
  std::string::value_type *v4;
  std::string::value_type v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int var9;
  unsigned int var15;
  std::string::value_type *v10;
  std::string::value_type v11;
  unsigned __int8 *v12;
  int v13;
  unsigned int v14;
  std::string::value_type *v15;
  std::string::value_type v16;
  unsigned __int8 *v17;
  int v18;
  char v19;
  std::string::value_type *v20;
  std::string::value_type v21;
  unsigned __int8 *v22;
  int v23;
  std::string::value_type *v24;
  std::string::value_type v25;
  std::string *v26;
  unsigned __int8 *v27;
  int v28;

  if (*((_BYTE *)this + 12))
  {
    if (!a2->var9)
    {
      if (a2->var13 < 2.0)
        return;
      goto LABEL_11;
    }
    if (*((char *)this + 39) < 0)
    {
      if (!*((_QWORD *)this + 3))
      {
LABEL_6:
        v4 = *(std::string::value_type **)(MEMORY[0x1E0DA8EB8] + 8 * *((unsigned __int8 *)this + 13));
        v5 = *v4;
        if (*v4)
        {
          v6 = (unsigned __int8 *)(v4 + 1);
          do
          {
            std::string::push_back((std::string *)((char *)this + 16), v5);
            v7 = *v6++;
            v5 = v7;
          }
          while (v7);
        }
LABEL_11:
        *((_BYTE *)this + 12) = 0;
        goto LABEL_12;
      }
    }
    else if (!*((_BYTE *)this + 39))
    {
      goto LABEL_6;
    }
    std::string::push_back((std::string *)((char *)this + 16), 32);
    goto LABEL_6;
  }
LABEL_12:
  var9 = a2->var9;
  if (a2->var9 || a2->var6)
  {
    var15 = a2->var15;
    if ((var15 & 0x4000) == 0)
    {
      if ((var15 & 0x10000000) != 0)
      {
        if (*((_BYTE *)this + 10))
        {
          v10 = *(std::string::value_type **)(MEMORY[0x1E0DA8EB8] + 480);
          v11 = *v10;
          if (*v10)
          {
            v12 = (unsigned __int8 *)(v10 + 1);
            do
            {
              std::string::push_back((std::string *)((char *)this + 16), v11);
              v13 = *v12++;
              v11 = v13;
            }
            while (v13);
            var9 = a2->var9;
          }
        }
        *((_BYTE *)this + 10) = *((_BYTE *)this + 8);
      }
      if ((*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * var9) & 1) != 0)
      {
        v14 = a2->var15;
        if ((v14 & 0x80000000) != 0)
          *((_BYTE *)this + 10) = 1;
        if ((v14 & 0x1400) != 0)
        {
          v15 = *(std::string::value_type **)(MEMORY[0x1E0DA8EB8] + 8);
          v16 = *v15;
          if (*v15)
          {
            v17 = (unsigned __int8 *)(v15 + 1);
            do
            {
              std::string::push_back((std::string *)((char *)this + 16), v16);
              v18 = *v17++;
              v16 = v18;
            }
            while (v18);
          }
        }
        else if ((v14 & 0x800) != 0)
        {
          v20 = *(std::string::value_type **)(MEMORY[0x1E0DA8EB8] + 464);
          v21 = *v20;
          if (*v20)
          {
            v22 = (unsigned __int8 *)(v20 + 1);
            do
            {
              std::string::push_back((std::string *)((char *)this + 16), v21);
              v23 = *v22++;
              v21 = v23;
            }
            while (v23);
          }
        }
      }
      v24 = *(std::string::value_type **)(MEMORY[0x1E0DA8EB8] + 8 * a2->var9);
      v25 = *v24;
      if (*v24)
      {
        v26 = (std::string *)((char *)this + 16);
        v27 = (unsigned __int8 *)(v24 + 1);
        do
        {
          std::string::push_back(v26, v25);
          v28 = *v27++;
          v25 = v28;
        }
        while (v28);
      }
    }
  }
  else
  {
    if (*((unsigned __int8 *)this + 14) - 68 >= 5)
      v19 = 46;
    else
      v19 = 0x213F2E3A2CuLL >> (8 * (*((_BYTE *)this + 14) - 68));
    std::string::push_back((std::string *)((char *)this + 16), v19 & 0x3F);
  }
}

void MTBEWritePhonemes::VisitCommand(MTBEWritePhonemes *this, MTFECommand *a2)
{
  std::string *v4;
  uint64_t v5;
  std::string::value_type v6;
  int v7;
  int64_t var8;
  uint64_t v9;
  uint64_t i;
  int64_t var9;
  int64_t v12;

  if (a2->var8 == 2003792484)
    return;
  v4 = (std::string *)((char *)this + 16);
  if (*((_BYTE *)this + 9))
  {
    std::string::push_back((std::string *)((char *)this + 16), 59);
  }
  else
  {
    v5 = 0;
    v6 = 91;
    do
    {
      std::string::push_back(v4, v6);
      v6 = asc_1D22DA340[++v5];
    }
    while (v5 != 2);
    *((_BYTE *)this + 9) = 1;
  }
  v7 = 0;
  var8 = a2->var8;
  v12 = var8;
  if (var8 > 1918989425)
  {
    if (var8 == 1987013746)
    {
      v9 = 1987013741;
    }
    else
    {
      if (var8 != 1918989426)
        goto LABEL_17;
      v9 = 1918989413;
    }
  }
  else if (var8 == 1885495666)
  {
    v9 = 1885495667;
  }
  else
  {
    if (var8 != 1886220146)
      goto LABEL_17;
    v9 = 1886220132;
  }
  v12 = v9;
  v7 = 1;
LABEL_17:
  for (i = 0; i != 4; ++i)
    std::string::push_back(v4, *((_BYTE *)&v12 + i));
  var9 = a2->var9;
  if (v7)
  {
    if (var9 < 0)
    {
      std::string::push_back(v4, 45);
      var9 = -var9;
    }
    else
    {
      std::string::push_back(v4, 43);
    }
  }
  MTBEWritePhonemes::WriteFixed(this, var9, 4);
}

void MTBEWritePhonemes::Write(MTBEWritePhonemes *this, std::string::value_type *a2, uint64_t a3)
{
  uint64_t v3;
  std::string *v5;
  std::string::value_type v6;

  if (a3)
  {
    v3 = a3;
    v5 = (std::string *)((char *)this + 16);
    do
    {
      --v3;
      v6 = *a2++;
      std::string::push_back(v5, v6);
    }
    while (v3);
  }
}

void MTBEWritePhonemes::WriteFixed(MTBEWritePhonemes *this, uint64_t a2, int a3)
{
  double v4;
  double v5;
  std::string::value_type v6;
  std::string *v7;
  unsigned __int8 *v8;
  int v9;
  char v10;
  _BYTE v11[27];

  *(_QWORD *)&v11[19] = *MEMORY[0x1E0C80C00];
  v4 = (double)a2 * 0.0000152587891;
  v5 = __exp10((double)a3);
  sprintf(&v10, "%g", floor(v4 * v5 + 0.5) / v5);
  v6 = v10;
  if (v10)
  {
    v7 = (std::string *)((char *)this + 16);
    v8 = v11;
    do
    {
      std::string::push_back(v7, v6);
      v9 = *v8++;
      v6 = v9;
    }
    while (v9);
  }
}

void MTBEWritePhonemes::WriteLong(MTBEWritePhonemes *this, unint64_t a2)
{
  int64_t v2;
  unint64_t v4;
  BOOL v5;

  v2 = a2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    do
    {
      std::string::push_back((std::string *)((char *)this + 16), 45);
      v4 = -v2;
      v5 = v2 <= 0;
      v2 = -v2;
    }
    while (!v5);
  }
  else
  {
    v4 = a2;
  }
  if (v4 >= 0xA)
    MTBEWritePhonemes::WriteLong(this, v4 / 0xA);
  std::string::push_back((std::string *)((char *)this + 16), (v4 % 0xA) | 0x30);
}

void MTBEWritePhonemes::~MTBEWritePhonemes(void **this)
{
  *this = &off_1E9365D48;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)this);
}

{
  *this = &off_1E9365D48;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)this);
  JUMPOUT(0x1D8233BA8);
}

void MTFEBuilder::MTFEBuilder(MTFEBuilder *this, SLLexer *a2)
{
  this->var0 = (void **)&off_1E9365E78;
  this->var1 = a2;
  *(_OWORD *)&this->var2 = 0u;
  *(_OWORD *)&this->var4 = 0u;
  this->var8 = 1;
  this->var10 = 0;
  *(_WORD *)&this->var12 = 0;
  *(_QWORD *)&this->var15 = 0;
  *(_QWORD *)&this->var17 = 0x4E4F524D00000000;
  this->var19 = 0;
}

{
  this->var0 = (void **)&off_1E9365E78;
  this->var1 = a2;
  *(_OWORD *)&this->var2 = 0u;
  *(_OWORD *)&this->var4 = 0u;
  this->var8 = 1;
  this->var10 = 0;
  *(_WORD *)&this->var12 = 0;
  *(_QWORD *)&this->var15 = 0;
  *(_QWORD *)&this->var17 = 0x4E4F524D00000000;
  this->var19 = 0;
}

void MTFEBuilder::~MTFEBuilder(MTFEBuilder *this)
{
  MTFESentence *var2;

  this->var0 = (void **)&off_1E9365E78;
  var2 = this->var2;
  if (var2)
    (*((void (**)(MTFESentence *))var2->var0 + 2))(var2);
  if (this->var19)
    SLTokenRelease();
}

{
  MTFEBuilder::~MTFEBuilder(this);
  JUMPOUT(0x1D8233BA8);
}

SLToken *MTFEBuilder::PeekToken(MTFEBuilder *this)
{
  SLToken *result;

  result = this->var19;
  if (!result)
  {
    result = (SLToken *)((uint64_t (*)(SLLexer *))*this->var1->var0)(this->var1);
    this->var19 = result;
  }
  return result;
}

MTFEBuilder *MTFEBuilder::ParseSentence(MTFEBuilder *this)
{
  SLToken *var19;
  int Class;
  SLToken *v4;
  SLToken *v5;
  SLToken *v6;
  SLToken *v7;

  this->var7 = 0;
  this->var10 = 0;
  while (1)
  {
    var19 = this->var19;
    if (!var19)
      break;
    this->var19 = 0;
LABEL_5:
    Class = SLTokenGetClass();
    if (Class > 45)
    {
      switch(Class)
      {
        case '[':
          MTFEBuilder::ProcessCommand(this, var19);
          break;
        case '/':
          v5 = this->var19;
          if (!v5)
          {
            v5 = (SLToken *)((uint64_t (*)(SLLexer *))*this->var1->var0)(this->var1);
            this->var19 = v5;
          }
          (*((void (**)(MTFEBuilder *, BOOL))this->var0 + 2))(this, v5 == 0);
          break;
        case '.':
          if (this->var19
            || (v4 = (SLToken *)((uint64_t (*)(SLLexer *))*this->var1->var0)(this->var1),
                (this->var19 = v4) != 0))
          {
            if (SLTokenGetClass() == 43)
              SLTokenGetInfo();
          }
          MTFEBuilder::ProcessPunctuation(this, var19);
          if (this->var19
            || (v6 = (SLToken *)((uint64_t (*)(SLLexer *))*this->var1->var0)(this->var1),
                (this->var19 = v6) != 0))
          {
            do
            {
              if (SLTokenGetClass() != 47)
                break;
              if (!this->var19)
                ((void (*)(SLLexer *))*this->var1->var0)(this->var1);
              this->var19 = 0;
              SLTokenRelease();
              v7 = this->var19;
              if (!v7)
              {
                v7 = (SLToken *)((uint64_t (*)(SLLexer *))*this->var1->var0)(this->var1);
                this->var19 = v7;
              }
              (*((void (**)(MTFEBuilder *, BOOL))this->var0 + 2))(this, v7 == 0);
            }
            while (v7);
          }
          else
          {
            (*((void (**)(MTFEBuilder *, uint64_t))this->var0 + 2))(this, 1);
          }
          break;
      }
    }
    else
    {
      switch(Class)
      {
        case ' ':
          MTFEBuilder::ProcessWord(this, var19, 1);
          break;
        case '#':
          MTFEBuilder::ProcessMelody(this, var19);
          break;
        case '+':
          MTFEBuilder::ProcessInsert(this, var19, 0);
          break;
      }
    }
    SLTokenRelease();
    if (this->var10)
      return MTFEBuilder::EndIntonationalPhrase(this, 0);
  }
  var19 = (SLToken *)((uint64_t (*)(SLLexer *))*this->var1->var0)(this->var1);
  this->var19 = 0;
  if (var19)
    goto LABEL_5;
  if (!this->var10)
    (*((void (**)(MTFEBuilder *, uint64_t))this->var0 + 2))(this, 1);
  return MTFEBuilder::EndIntonationalPhrase(this, 0);
}

MTFEBuilder *MTFEBuilder::ProcessWord(MTFEBuilder *this, SLToken *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  const __CFString *Text;
  _BYTE *v8;
  MTFEWord *var5;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  MTFEBuilder *result;
  unsigned int var1;
  int v15;
  uint64_t v16;
  MTFEPhoneme *v17;
  MTFESpeechElement *var6;
  MTFEPhoneme *v19;
  MTFEWord *v20;
  MTFEWord *v21;
  uint64_t v22;
  uint64_t v23;

  MTFEBuilder::MakePhrase(this);
  v5 = operator new();
  MTFEWord::MTFEWord((MTFEWord *)v5, 0, 0);
  this->var7 = 0;
  MTFESpeechElement::TransferChildren((MTFESpeechElement *)&this->var3->var9, (MTFESpeechElement *)(v5 + 112));
  SLTokenGetInfo();
  if (v23)
  {
    v6 = operator new();
    MTFESpeechElement::MTFESpeechElement((MTFESpeechElement *)v6);
    *(_QWORD *)(v6 + 56) = 2003792484;
    *(_QWORD *)(v6 + 64) = v23 | (v22 << 8);
    *(_QWORD *)v6 = &unk_1E9366488;
    MTFESpeechElement::AddChildAfter((MTFESpeechElement *)(v5 + 112), (MTFESpeechElement *)v6, *(MTFESpeechElement **)(v5 + 136));
  }
  Text = (const __CFString *)SLTokenGetText();
  CFStringGetCString(Text, (char *)(v5 + 200), 64, 0x8000100u);
  v8 = (_BYTE *)(v5 + 63);
  SLTokenGetInfo();
  SLTokenGetInfo();
  if (this->var13)
  {
    if ((*v8 | 2) == 2)
      *v8 = 16;
    this->var13 = 0;
  }
  if (SLTokenGetInfo())
    *(_DWORD *)(v5 + 56) |= 0x100u;
  if (SLTokenGetInfo())
    *(_DWORD *)(v5 + 56) |= 0x2000u;
  if (SLTokenGetInfo())
    *(_DWORD *)(v5 + 56) |= 0x200u;
  if (*v8 - 1 <= 1)
  {
    *(_DWORD *)(v5 + 56) |= 4u;
    var5 = this->var5;
    if (var5)
      var5->var8 |= 8u;
  }
  *(_DWORD *)(v5 + 64) = SLTokenGetTupleGroup();
  *(_DWORD *)(v5 + 56) |= 0x40u;
  v10 = SLTokenCountHomographs();
  if (v10 >= 1)
  {
    v11 = v10;
    for (i = 0; i != v11; ++i)
    {
      SLTokenGetHomograph();
      MTFEBuilder::ProcessHomograph((uint64_t)this, v5);
    }
  }
  SLTokenGetInfo();
  result = (MTFEBuilder *)MTFESpeechElement::AddChildAfter((MTFESpeechElement *)this->var4, (MTFESpeechElement *)v5, this->var4->var4);
  ++this->var20;
  if (a3)
  {
    var1 = (unsigned __int16)this->var4->var1;
    if (var1 >= 0x4C)
    {
      if (var1 >= 0x51)
      {
        this->var11 = 0;
        this->var5 = (MTFEWord *)v5;
LABEL_25:
        v16 = operator new();
        MTFESpeechElement::MTFESpeechElement((MTFESpeechElement *)v16);
        *(_QWORD *)v16 = &unk_1E9366448;
        *(_DWORD *)(v16 + 56) = 0x7FFFFFFF;
        *(_WORD *)(v16 + 60) = 0;
        this->var6 = (MTFEHomograph *)v16;
        v17 = (MTFEPhoneme *)operator new();
        MTFEPhoneme::MTFEPhoneme(v17, 0x44u);
        MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v16, (MTFESpeechElement *)v17, *(MTFESpeechElement **)(v16 + 24));
        var6 = (MTFESpeechElement *)this->var6;
        v19 = (MTFEPhoneme *)operator new();
        MTFEPhoneme::MTFEPhoneme(v19, 0);
        MTFESpeechElement::AddChildAfter(var6, (MTFESpeechElement *)v19, var6->var4);
        this->var6->var8 = 0x80000000;
        v20 = (MTFEWord *)operator new();
        MTFEWord::MTFEWord(v20, 0, 0);
        this->var5 = v20;
        MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v20, (MTFESpeechElement *)this->var6, v20->var4);
        v21 = this->var5;
        v21->var16 = 0x80000000;
        v21->var8 = 64;
        strcpy(v21->var27, ", ");
        MTFESpeechElement::AddChildAfter((MTFESpeechElement *)this->var4, (MTFESpeechElement *)this->var5, this->var4->var4);
        return MTFEBuilder::EndIntonationalPhrase(this, 1);
      }
      if ((this->var5->var16 & 0xA5273) != 0)
      {
        v15 = *(_DWORD *)(v5 + 88);
        this->var11 = 0;
        this->var5 = (MTFEWord *)v5;
        if ((v15 & 0xFFF5AD8C) == 0)
          return result;
        goto LABEL_25;
      }
    }
  }
  this->var11 = 0;
  this->var5 = (MTFEWord *)v5;
  return result;
}

void sub_1D2262FA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40BE0D601BLL);
  _Unwind_Resume(a1);
}

uint64_t MTFEBuilder::ProcessInsert(MTFEBuilder *this, SLToken *a2, char a3)
{
  void *v6;
  int Info;
  int v8;
  uint64_t result;
  char v10;
  SLToken *v11;

  SLTokenGetInfo();
  Info = SLTokenGetInfo();
  v8 = Info;
  if (v6 && (Info & 1) == 0 && this->var3)
  {
    MTFEBuilder::ProcessInsertWord(this, a2, 1);
    MTFEBuilder::EndIntonationalPhrase(this, 0);
  }
  result = (uint64_t)MTFEBuilder::MakeIntonationalPhrase(this);
  if (v6)
    v10 = 1;
  else
    v10 = v8;
  if ((v10 & 1) != 0 || (a3 & 1) != 0)
  {
LABEL_15:
    if (!v8)
      return result;
    goto LABEL_16;
  }
  if (this->var19
    || (v11 = (SLToken *)((uint64_t (*)(SLLexer *))*this->var1->var0)(this->var1), (this->var19 = v11) != 0))
  {
    result = SLTokenGetClass();
    if ((_DWORD)result != 43 && (_DWORD)result != 46)
    {
      MTFEBuilder::ProcessInsertWord(this, a2, 0);
      result = (uint64_t)MTFEBuilder::EndIntonationalPhrase(this, 1);
    }
    goto LABEL_15;
  }
  result = (uint64_t)MTFEBuilder::ProcessInsertWord(this, a2, 0);
  if (!v8)
    return result;
LABEL_16:
  this->var13 = 1;
  return result;
}

MTFEBuilder *MTFEBuilder::ProcessPunctuation(MTFEBuilder *this, SLToken *a2)
{
  MTFEBuilder *result;
  const __CFData *Phonemes;
  int var0_low;

  this->var13 = 0;
  MTFEBuilder::ProcessWord(this, a2, 0);
  result = (MTFEBuilder *)SLTokenCountHomographs();
  if (result)
  {
    SLTokenGetHomograph();
    Phonemes = (const __CFData *)SLHomographGetPhonemes();
    result = (MTFEBuilder *)CFDataGetBytePtr(Phonemes);
    var0_low = LOBYTE(result->var0);
    if ((var0_low - 70) >= 3)
    {
      if (var0_low == 69)
        this->var11 = 1;
      return MTFEBuilder::EndIntonationalPhrase(this, 1);
    }
    else
    {
      this->var10 = 1;
    }
  }
  return result;
}

MTFESpeechElement *MTFEBuilder::ProcessCommand(MTFEBuilder *this, SLToken *a2)
{
  MTFEIntonationalPhrase *var3;
  uint64_t v4;

  SLTokenGetInfo();
  SLTokenGetInfo();
  MTFEBuilder::MakeIntonationalPhrase(this);
  var3 = this->var3;
  v4 = operator new();
  MTFESpeechElement::MTFESpeechElement((MTFESpeechElement *)v4);
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)v4 = &unk_1E9366488;
  return MTFESpeechElement::AddChildAfter((MTFESpeechElement *)&var3->var9, (MTFESpeechElement *)v4, var3->var9.var4);
}

void sub_1D2263604(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  MEMORY[0x1D8233BA8](v2, 0x1080C40ED847058);
  _Unwind_Resume(a1);
}

unsigned __int8 *MTFEBuilder::ProcessMelody(MTFEBuilder *this, SLToken *a2)
{
  MTFEMelody *v3;
  MTFEMelody *var28;
  const __CFData *Phonemes;
  unsigned __int8 *result;
  MTFEWord *i;

  MTFEBuilder::MakeIntonationalPhrase(this);
  if (!this->var3->var28)
  {
    v3 = (MTFEMelody *)operator new();
    MTFEMelody::MTFEMelody(v3);
    this->var3->var28 = v3;
  }
  SLTokenGetHomograph();
  var28 = this->var3->var28;
  Phonemes = (const __CFData *)SLHomographGetPhonemes();
  result = MTFEMelody::AddNotes(var28, Phonemes);
  for (i = this->var5; i; i = (MTFEWord *)i->var7)
  {
    if ((i->var9 & 0x80000000) == 0)
      break;
    i->var9 = *((_QWORD *)this->var3->var28 + 2);
  }
  return result;
}

void sub_1D22636F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x1080C40ED847058);
  _Unwind_Resume(a1);
}

MTFEBuilder *MTFEBuilder::EndIntonationalPhrase(MTFEBuilder *this, int a2)
{
  MTFEBuilder *v3;
  MTFEIntonationalPhrase **p_var3;
  uint64_t v5;
  uint64_t v6;
  MTFEPhoneme *v7;

  v3 = this;
  p_var3 = &this->var3;
  if (this->var3 && !this->var4)
  {
    MTFEBuilder::MakePhrase(this);
    v5 = operator new();
    MTFEWord::MTFEWord((MTFEWord *)v5, 0, 0);
    MTFESpeechElement::TransferChildren((MTFESpeechElement *)&(*p_var3)->var9, (MTFESpeechElement *)(v5 + 112));
    strcpy((char *)(v5 + 200), "  ");
    v6 = operator new();
    MTFESpeechElement::MTFESpeechElement((MTFESpeechElement *)v6);
    *(_QWORD *)v6 = &unk_1E9366448;
    *(_DWORD *)(v6 + 56) = 0x7FFFFFFF;
    *(_WORD *)(v6 + 60) = 0;
    v7 = (MTFEPhoneme *)operator new();
    MTFEPhoneme::MTFEPhoneme(v7, 0);
    v7->var15 |= 0x8000u;
    MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v6, (MTFESpeechElement *)v7, *(MTFESpeechElement **)(v6 + 24));
    MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v5, (MTFESpeechElement *)v6, *(MTFESpeechElement **)(v5 + 24));
    *(_DWORD *)(v5 + 56) |= 0x40u;
    this = (MTFEBuilder *)MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v3->var4, (MTFESpeechElement *)v5, v3->var4->var4);
    v3->var5 = (MTFEWord *)v5;
  }
  *p_var3 = 0;
  p_var3[1] = 0;
  if (a2)
  {
    if ((unsigned __int16)v3->var20 >= 0xFBu)
    {
      this = (MTFEBuilder *)MTFEFirstPhoneme((MTFESpeechElement *)v3->var5);
      BYTE2(this->var7) = 70;
      v3->var10 = 1;
    }
  }
  return this;
}

void sub_1D2263884(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

MTFEBuilder *MTFEBuilder::MakePhrase(MTFEBuilder *this)
{
  MTFEBuilder *v1;
  MTFESpeechElement *var3;
  MTFEIntermediatePhrase *v3;

  if (!this->var4)
  {
    v1 = this;
    MTFEBuilder::MakeIntonationalPhrase(this);
    var3 = (MTFESpeechElement *)v1->var3;
    v3 = (MTFEIntermediatePhrase *)operator new();
    MTFEIntermediatePhrase::MTFEIntermediatePhrase(v3);
    v1->var4 = v3;
    return (MTFEBuilder *)MTFESpeechElement::AddChildAfter(var3, (MTFESpeechElement *)v3, var3->var4);
  }
  return this;
}

void sub_1D2263944(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C4085E5C4E0);
  _Unwind_Resume(a1);
}

MTFESpeechElement *MTFEBuilder::ProcessHomograph(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const __CFArray *v10;
  const __CFData *Phonemes;
  const UInt8 *BytePtr;
  CFIndex v13;
  const void **v14;
  const void **v15;
  MTFEPhoneme *v16;
  const __CFArray *v17;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *Value;
  const __CFArray *v20;
  const __CFArray *v21;
  uint64_t v22;
  CFIndex v23;
  const __CFDictionary *v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  unsigned int *var17;
  int var0;
  MTFESpeechElement *v30;
  uint64_t v31;
  CFIndex Length;
  uint64_t v33;
  uint64_t valuePtr;

  v4 = operator new();
  MTFESpeechElement::MTFESpeechElement((MTFESpeechElement *)v4);
  *(_QWORD *)v4 = &unk_1E9366448;
  *(_DWORD *)(v4 + 56) = 0x7FFFFFFF;
  *(_WORD *)(v4 + 60) = 0;
  v5 = (_WORD *)(v4 + 60);
  *(_DWORD *)(v4 + 56) = SLHomographGetPOS();
  *(_QWORD *)(v4 + 60) = SLHomographGetTags();
  *(_QWORD *)(v4 + 68) = v6;
  *(_DWORD *)(a2 + 88) |= *(_DWORD *)(v4 + 56);
  operator+=();
  if ((*(_DWORD *)(v4 + 56) & 0xA5273) != 0 && (SLWordTagSet::find((SLWordTagSet *)(v4 + 60)) & 1) == 0)
    *(_DWORD *)(a2 + 56) |= 0x4000u;
  if ((SLWordTagSet::find((SLWordTagSet *)(v4 + 60)) & 1) == 0)
  {
    v7 = (unsigned __int16)*v5;
    if (*v5)
    {
      v8 = 0x100000000;
      while ((*(_WORD *)((char *)v5 + (v8 >> 31)) & 0xFFC0) != 0x80)
      {
        v8 += 0x100000000;
        if (!--v7)
          goto LABEL_9;
      }
      v9 = 0;
    }
    else
    {
LABEL_9:
      v9 = 0x10000;
    }
    *(_DWORD *)(a2 + 56) |= v9;
  }
  v30 = (MTFESpeechElement *)a2;
  v10 = (const __CFArray *)SLHomographCopyTune();
  Phonemes = (const __CFData *)SLHomographGetPhonemes();
  BytePtr = CFDataGetBytePtr(Phonemes);
  Length = CFDataGetLength(Phonemes);
  if (Length >= 1)
  {
    v13 = 0;
    v14 = (const void **)MEMORY[0x1E0DA8F00];
    v15 = (const void **)MEMORY[0x1E0DA8EF8];
    v31 = v4;
    do
    {
      if (*BytePtr && *(_BYTE *)(MEMORY[0x1E0DA8EC0] + *BytePtr) == 1)
        LODWORD(v30[1].var0) &= ~0x40u;
      v16 = (MTFEPhoneme *)operator new();
      MTFEPhoneme::MTFEPhoneme(v16, *BytePtr);
      if (v10)
      {
        v17 = v10;
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v13);
        valuePtr = 0;
        Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0DA8EF0]);
        if (Value)
        {
          if (CFNumberGetValue(Value, kCFNumberFloat32Type, (char *)&valuePtr + 4))
          {
            v16->var13 = *((float *)&valuePtr + 1) / 5.0;
            if (*BytePtr - 68 < 5 || !*BytePtr)
              v16->var15 |= 0x8000u;
          }
        }
        v20 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0DA8F08]);
        if (v20)
        {
          v21 = v20;
          v22 = operator new();
          *(_DWORD *)v22 = 0;
          *(_OWORD *)(v22 + 8) = 0u;
          *(_OWORD *)(v22 + 24) = 0u;
          *(_OWORD *)(v22 + 40) = 0u;
          *(_OWORD *)(v22 + 56) = 0u;
          *(_OWORD *)(v22 + 72) = 0u;
          v16->var17 = (MTFEPitchTargets *)v22;
          if (CFArrayGetCount(v21) >= 1)
          {
            v23 = 0;
            do
            {
              v24 = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, v23);
              v25 = (const __CFNumber *)CFDictionaryGetValue(v24, *v14);
              CFNumberGetValue(v25, kCFNumberFloat32Type, (char *)&valuePtr + 4);
              v26 = (const __CFNumber *)CFDictionaryGetValue(v24, *v15);
              CFNumberGetValue(v26, kCFNumberFloat32Type, &valuePtr);
              var17 = (unsigned int *)v16->var17;
              v33 = (uint64_t)(float)(*((float *)&valuePtr + 1) * 100.0) | ((int)*(float *)&valuePtr << 24);
              MTFEPitchTargets::AddTarget(var17, (unint64_t *)&v33);
              ++v23;
            }
            while (v23 < CFArrayGetCount(v21));
          }
        }
        v4 = v31;
        v10 = v17;
      }
      MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v4, (MTFESpeechElement *)v16, *(MTFESpeechElement **)(v4 + 24));
      ++v13;
      ++BytePtr;
    }
    while (v13 != Length);
  }
  if (v10)
  {
    var0 = (int)v30[1].var0;
    LODWORD(v30[1].var0) = var0 | 1;
    if (*(_BYTE *)(a1 + 68))
      LODWORD(v30[1].var0) = var0 | 3;
    CFRelease(v10);
  }
  return MTFESpeechElement::AddChildAfter(v30, (MTFESpeechElement *)v4, v30->var4);
}

void sub_1D2263D34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C4011C0417BLL);
  _Unwind_Resume(a1);
}

MTFESpeechElement *MTFEBuilder::ProcessInsertWord(MTFEBuilder *this, SLToken *a2, int a3)
{
  MTFEWord *var5;
  char v6;
  uint64_t v7;
  MTFEPhoneme *v8;
  MTFEPhoneme *v9;
  MTFEWord *v10;

  MTFEBuilder::ProcessWord(this, a2, 0);
  var5 = this->var5;
  if (!var5->var11)
  {
    if (a3)
      v6 = 9;
    else
      v6 = 10;
    var5->var11 = v6;
  }
  v7 = operator new();
  MTFESpeechElement::MTFESpeechElement((MTFESpeechElement *)v7);
  *(_QWORD *)v7 = &unk_1E9366448;
  *(_WORD *)(v7 + 60) = 0;
  *(_DWORD *)(v7 + 56) = 0x80000000;
  v8 = (MTFEPhoneme *)operator new();
  MTFEPhoneme::MTFEPhoneme(v8, 0x44u);
  this->var7 = v8;
  MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v7, (MTFESpeechElement *)v8, *(MTFESpeechElement **)(v7 + 24));
  v9 = (MTFEPhoneme *)operator new();
  MTFEPhoneme::MTFEPhoneme(v9, 0);
  MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v7, (MTFESpeechElement *)v9, *(MTFESpeechElement **)(v7 + 24));
  v10 = this->var5;
  v10->var16 = *(_DWORD *)(v7 + 56);
  return MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v10, (MTFESpeechElement *)v7, v10->var4);
}

void sub_1D2263E74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

MTFEBuilder *MTFEBuilder::MakeIntonationalPhrase(MTFEBuilder *this)
{
  MTFEBuilder *v1;
  MTFESentence *var2;
  MTFESpeechElement *v3;
  MTFEIntonationalPhrase *v4;
  MTFEIntonationalPhrase *var3;
  uint64_t v6;
  uint64_t var18;
  __int16 v8;

  if (!this->var3)
  {
    v1 = this;
    var2 = this->var2;
    MTFEBuilder::MakeSentence(this);
    v3 = (MTFESpeechElement *)v1->var2;
    v4 = (MTFEIntonationalPhrase *)operator new();
    MTFEIntonationalPhrase::MTFEIntonationalPhrase(v4);
    v1->var3 = v4;
    this = (MTFEBuilder *)MTFESpeechElement::AddChildAfter(v3, (MTFESpeechElement *)v4, v3->var4);
    var3 = v1->var3;
    var3->var8 |= 1uLL;
    if (!var2 && v1->var18 != 1313821261)
    {
      v6 = operator new();
      var18 = v1->var18;
      MTFESpeechElement::MTFESpeechElement((MTFESpeechElement *)v6);
      *(_QWORD *)(v6 + 56) = 1668577396;
      *(_QWORD *)(v6 + 64) = var18;
      *(_QWORD *)v6 = &unk_1E9366488;
      this = (MTFEBuilder *)MTFESpeechElement::AddChildAfter((MTFESpeechElement *)&var3->var9, (MTFESpeechElement *)v6, var3->var9.var4);
      if (v1->var18 == 1465076560)
        v8 = 8;
      else
        v8 = 16;
      v1->var2->var8 |= v8;
    }
    v1->var5 = 0;
  }
  return this;
}

void sub_1D2263FC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40D2EC344ELL);
  _Unwind_Resume(a1);
}

MTFEBuilder *MTFEBuilder::EndParagraph(MTFEBuilder *this, int a2)
{
  MTFESentence *var2;
  __int16 v3;
  MTFEPhoneme *var7;

  var2 = this->var2;
  if (var2)
  {
    if (a2)
      v3 = 6;
    else
      v3 = 2;
    var2->var8 |= v3;
    this->var10 = 1;
    var7 = this->var7;
    if (var7)
      var7->var9 = 70;
  }
  this->var8 = 1;
  return this;
}

MTFEBuilder *MTFEBuilder::ResetProduct(MTFEBuilder *this, int a2)
{
  MTFEBuilder *v2;

  v2 = this;
  if (a2)
  {
    this = (MTFEBuilder *)this->var2;
    if (this)
      this = (MTFEBuilder *)(*((uint64_t (**)(MTFEBuilder *))this->var0 + 2))(this);
  }
  v2->var2 = 0;
  v2->var10 = 0;
  return this;
}

void MTFEBuilder::MakeSentence(MTFEBuilder *this)
{
  MTFESentence *v2;

  if (!this->var2)
  {
    v2 = (MTFESentence *)operator new();
    MTFESentence::MTFESentence(v2, this->var15, this->var16, this->var17);
    this->var2 = v2;
    this->var9 = 1;
    this->var11 = 1;
    this->var20 = 0;
    if (this->var8)
    {
      v2->var8 |= 1u;
      this->var8 = 0;
    }
  }
}

void sub_1D22640F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40D62C662CLL);
  _Unwind_Resume(a1);
}

uint64_t MTFEDebugVisitor::Indent(FILE **this)
{
  return fprintf(this[1], "%*s", *((_DWORD *)this + 6), "");
}

uint64_t MTFEDebugVisitor::StartElement(FILE **this, const char *a2, int a3)
{
  uint64_t v6;
  uint64_t result;

  if (*((_BYTE *)this + 28))
    fputc(10, this[1]);
  *((_BYTE *)this + 28) = a3 ^ 1;
  fprintf(this[1], "%*s", *((_DWORD *)this + 6), "");
  v6 = 32;
  if (a3)
    v6 = 10;
  result = fprintf(this[1], "%s {%c", a2, v6);
  *((_DWORD *)this + 6) += 3;
  return result;
}

size_t MTFEDebugVisitor::EndElement(MTFEDebugVisitor *this)
{
  int v2;
  FILE *v3;

  v2 = *((_DWORD *)this + 6) - 3;
  *((_DWORD *)this + 6) = v2;
  v3 = (FILE *)*((_QWORD *)this + 1);
  if (*((_BYTE *)this + 28))
  {
    fputc(32, v3);
    *((_BYTE *)this + 28) = 0;
  }
  else
  {
    fprintf(v3, "%*s", v2, "");
  }
  return fwrite("}\n", 2uLL, 1uLL, *((FILE **)this + 1));
}

size_t MTFEDebugVisitor::PrintTags(size_t this, const SLWordTagSet *a2)
{
  size_t v3;
  unint64_t v4;
  _BYTE *v5;

  if (a2->var0[0])
  {
    v3 = this;
    fputc(123, *(FILE **)(this + 8));
    if (a2->var0[0])
    {
      v4 = 0;
      do
      {
        v5 = (_BYTE *)SLTagEng::Name((SLTagEng *)a2->var0[v4 + 1]);
        if (v5 && *v5)
          fprintf(*(FILE **)(v3 + 8), "%s%s");
        else
          fprintf(*(FILE **)(v3 + 8), "%s(?%d?)");
        ++v4;
      }
      while (v4 < a2->var0[0]);
    }
    return fwrite("} ", 2uLL, 1uLL, *(FILE **)(v3 + 8));
  }
  return this;
}

uint64_t MTFEDebugVisitor::VisitSentence(FILE **this, MTFESpeechElement *a2)
{
  float v4;
  float v5;
  float v6;

  MTFEDebugVisitor::StartElement(this, "Sentence", 0);
  if (LOWORD(a2[1].var0))
    fprintf(this[1], " %04x", SLOWORD(a2[1].var0));
  v4 = *((float *)&a2[1].var0 + 1);
  if (v4 != 0.0)
    fprintf(this[1], " %f", v4);
  if (*(_WORD *)&a2[1].var2)
    fprintf(this[1], " F %d", *(__int16 *)&a2[1].var2);
  v5 = *(float *)(&a2[1].var2 + 2);
  if (v5 > 1.0)
    fprintf(this[1], " V %f %f", v5, *(float *)&a2[1].var3);
  v6 = *((float *)&a2[1].var3 + 1);
  if (v6 > 1.0)
    fprintf(this[1], " R %f", v6);
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  MTFEDebugVisitor::EndElement((MTFEDebugVisitor *)this);
  return fflush(this[1]);
}

size_t MTFEDebugVisitor::VisitIntonationalPhrase(MTFEDebugVisitor *this, MTFESpeechElement *a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned int v8;
  MTFEMelody *var6;
  unint64_t v10;
  FILE *v11;
  const char *v12;
  double v13;
  float v14;
  float v15;

  *((_QWORD *)this + 4) = 0;
  MTFEDebugVisitor::StartElement((FILE **)this, "IntonationalPhrase", 0);
  if (a2[1].var0)
    fprintf(*((FILE **)this + 1), " %04x", a2[1].var0);
  if (a2[3].var1 >= 1)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      fputc(sBegInsertName[((unint64_t)a2[3].var3 >> v4) & 3], *((FILE **)this + 1));
      ++v5;
      v4 += 2;
    }
    while (v5 < a2[3].var1);
  }
  if (*(__int16 *)&a2[3].var2 >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      fputc(sEndInsertName[((unint64_t)a2[3].var4 >> v6) & 3], *((FILE **)this + 1));
      ++v7;
      v6 += 2;
    }
    while (v7 < *(__int16 *)&a2[3].var2);
  }
  if (*((_WORD *)&a2[2].var2 + 1))
    fprintf(*((FILE **)this + 1), " C:%d/%d N<%d:%d>", *((__int16 *)&a2[2].var2 + 2), *((__int16 *)&a2[2].var2 + 1), *(__int16 *)&a2[2].var2, a2[2].var1);
  v8 = BYTE6(a2[2].var6) - 68;
  if (v8 <= 4)
    fwrite(off_1E9365F28[(char)v8], 4uLL, 1uLL, *((FILE **)this + 1));
  if (a2[3].var6)
  {
    MTFEDebugVisitor::StartElement((FILE **)this, "Melody", 0);
    var6 = (MTFEMelody *)a2[3].var6;
    if (*((_QWORD *)var6 + 2))
    {
      v10 = 0;
      do
      {
        v11 = (FILE *)*((_QWORD *)this + 1);
        if (v10)
          v12 = " ";
        else
          v12 = "";
        v13 = MTFEMelody::Pitch(var6, v10);
        v14 = MTFEMelody::Duration((MTFEMelody *)a2[3].var6, v10);
        fprintf(v11, "%s%3.0f:%4.2f", v12, v13, v14);
        ++v10;
        var6 = (MTFEMelody *)a2[3].var6;
      }
      while (v10 < *((_QWORD *)var6 + 2));
    }
    MTFEDebugVisitor::EndElement(this);
  }
  MTFESpeechElement::VisitChildren(a2, this);
  MTFECommands::Visit((uint64_t)&a2[1].var1, (uint64_t)this);
  if (BYTE5(a2[2].var6))
  {
    MTFEDebugVisitor::StartElement((FILE **)this, "FinalBoundary", 0);
    fprintf(*((FILE **)this + 1), " %s", MTFEToBI::sTone[SBYTE5(a2[2].var6)]);
    v15 = *(float *)&a2[3].var5;
    if (v15 != 0.0)
      fprintf(*((FILE **)this + 1), " %4.2f", v15);
    MTFEDebugVisitor::EndElement(this);
  }
  return MTFEDebugVisitor::EndElement(this);
}

size_t MTFEDebugVisitor::VisitIntermediatePhrase(FILE **this, MTFESpeechElement *a2)
{
  int v4;
  FILE *v5;
  int v6;
  int var0_low;
  int var0_high;
  int v9;
  int var1;
  const char *v11;
  float v12;

  MTFEDebugVisitor::StartElement(this, "IntermediatePhrase", 0);
  v4 = SWORD2(a2[1].var0);
  if (WORD2(a2[1].var0))
  {
    v5 = this[1];
    v6 = SWORD1(a2[1].var0);
    var0_low = SLOWORD(a2[1].var0);
    var0_high = SHIWORD(a2[1].var0);
    v9 = *(__int16 *)&a2[1].var2;
    var1 = a2[1].var1;
    v11 = (const char *)SLBndEng::Name((SLBndEng *)LOBYTE(a2[1].var4));
    fprintf(v5, "%d:%d - %d:%d N<%d:%d> [%s] %p", v6, var0_low, var0_high, v4, v9, var1, v11, a2);
  }
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  if (BYTE1(a2[1].var4))
  {
    MTFEDebugVisitor::StartElement(this, "PhraseAccent", 0);
    fprintf(this[1], " %s", MTFEToBI::sTone[SBYTE1(a2[1].var4)]);
    v12 = *((float *)&a2[1].var4 + 1);
    if (v12 != 0.0)
      fprintf(this[1], " %4.2f", v12);
    MTFEDebugVisitor::EndElement((MTFEDebugVisitor *)this);
  }
  return MTFEDebugVisitor::EndElement((MTFEDebugVisitor *)this);
}

size_t MTFEDebugVisitor::VisitWord(FILE **this, MTFESpeechElement *a2)
{
  unsigned int var0;
  const char *v5;
  const char *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  FILE *v10;
  uint64_t i;
  FILE *v12;
  const char *v13;
  MEOWWordInstance *var6;
  FILE *v15;
  char *v16;
  char *v17;
  unsigned int v18;
  char *v19;
  char *v20;

  MTFECommands::Visit((uint64_t)&a2[2], (uint64_t)this);
  MTFEDebugVisitor::StartElement(this, "Word", 0);
  if (LOBYTE(a2[3].var5))
  {
    var0 = a2[1].var0;
    if ((var0 & 4) != 0)
      v5 = "-";
    else
      v5 = "";
    if ((var0 & 8) != 0)
      v6 = "-";
    else
      v6 = "";
    fprintf(this[1], "%s\"%s\"%s ", v5, (const char *)&a2[3].var5, v6);
  }
  v7 = a2[1].var0;
  if ((v7 & 0x1000) != 0)
  {
    fwrite("Morph ", 6uLL, 1uLL, this[1]);
    v7 = a2[1].var0;
    if ((v7 & 2) == 0)
    {
LABEL_11:
      if ((v7 & 1) == 0)
        goto LABEL_12;
      goto LABEL_20;
    }
  }
  else if ((v7 & 2) == 0)
  {
    goto LABEL_11;
  }
  fwrite("Flex ", 5uLL, 1uLL, this[1]);
  v7 = a2[1].var0;
  if ((v7 & 1) == 0)
  {
LABEL_12:
    if ((v7 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  fwrite("TUNE ", 5uLL, 1uLL, this[1]);
  v7 = a2[1].var0;
  if ((v7 & 0x800) == 0)
  {
LABEL_13:
    if ((v7 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_22;
  }
LABEL_21:
  fwrite("ExactPitch ", 0xBuLL, 1uLL, this[1]);
  v7 = a2[1].var0;
  if ((v7 & 0x20) == 0)
  {
LABEL_14:
    if ((v7 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_22:
  v10 = this[1];
  if ((v7 & 0x8000) != 0)
    fprintf(v10, "CapitalizedButIgnored ");
  else
    fprintf(v10, "Capitalized ");
  if (((uint64_t)a2[1].var0 & 0x40) != 0)
LABEL_15:
    fwrite("Silence ", 8uLL, 1uLL, this[1]);
LABEL_16:
  v8 = BYTE6(a2[1].var4);
  v9 = MEMORY[0x1E0DA8E90];
  if (v8 == 255)
  {
    if (LODWORD(a2[1].var5) == 0x7FFFFFFF)
    {
      fwrite("Any ", 4uLL, 1uLL, this[1]);
    }
    else
    {
      for (i = 0; i != 32; ++i)
      {
        if (((LODWORD(a2[1].var5) >> i) & 1) != 0)
          fprintf(this[1], "%s ", *(const char **)(v9 + 8 * i));
      }
    }
  }
  else
  {
    fprintf(this[1], "%s ", *(const char **)(MEMORY[0x1E0DA8E90] + 8 * v8));
  }
  MTFEDebugVisitor::PrintTags((size_t)this, (const SLWordTagSet *)((char *)&a2[1].var5 + 4));
  if (*((unsigned __int8 *)&a2[1].var2 + 2) != 255)
  {
    if (*(_DWORD *)&a2[1].var1 != 60)
      fputs("...", this[1]);
    fputc(60, this[1]);
    fputs(*(const char **)(v9 + 8 * *((unsigned __int8 *)&a2[1].var2 + 2)), this[1]);
    if (*((_WORD *)&a2[1].var2 + 2))
    {
      fputc(32, this[1]);
      MTFEDebugVisitor::PrintTags((size_t)this, (const SLWordTagSet *)(&a2[1].var2 + 4));
    }
    fputc(62, this[1]);
    if (*(_DWORD *)&a2[1].var1 != 62)
      fputs("...", this[1]);
    fputc(32, this[1]);
  }
  if (HIBYTE(a2[1].var0))
  {
    v12 = this[1];
    v13 = (const char *)SLBndEng::Name((SLBndEng *)HIBYTE(a2[1].var0));
    fprintf(v12, "[%s] ", v13);
  }
  if (WORD2(a2[3].var0))
    fprintf(this[1], "%d:%d - %d:%d ", SWORD1(a2[3].var0), SLOWORD(a2[3].var0), SHIWORD(a2[3].var0), SWORD2(a2[3].var0));
  if (a2[3].var1)
    fprintf(this[1], "[%d] ", a2[3].var1);
  if (BYTE6(a2[1].var0))
    fputs(*(const char **)(MEMORY[0x1E0DA8E78] + 8 * BYTE6(a2[1].var0)), this[1]);
  if (*(_WORD *)&a2[3].var2)
    fprintf(this[1], " %d", *(__int16 *)&a2[3].var2);
  if (*((_WORD *)&a2[3].var2 + 1))
    fprintf(this[1], " <%d>", *((__int16 *)&a2[3].var2 + 1));
  if ((SWORD2(a2[1].var0) & 0x80000000) == 0)
    fprintf(this[1], " :%d", WORD2(a2[1].var0));
  var6 = (MEOWWordInstance *)a2[4].var6;
  if (var6)
  {
    v15 = this[1];
    v16 = MEOWPhon::Name((MEOWPhon *)*(_BYTE *)var6);
    v17 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)var6 + 1));
    v18 = bswap32(*((unsigned __int16 *)var6 + 1)) >> 16;
    v19 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)var6 + 4));
    v20 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)var6 + 5));
    fprintf(v15, " [%s-%s#%d - %s-%s#%d]", v16, v17, v18, v19, v20, bswap32(*((unsigned __int16 *)var6 + 3)) >> 16);
  }
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  return MTFEDebugVisitor::EndElement((MTFEDebugVisitor *)this);
}

size_t MTFEDebugVisitor::VisitHomograph(FILE **this, MTFESpeechElement *a2)
{
  uint64_t v4;
  uint64_t v5;

  MTFEDebugVisitor::StartElement(this, "Homograph", 0);
  if (LODWORD(a2[1].var0) == 0x7FFFFFFF)
  {
    fwrite("Any", 3uLL, 1uLL, this[1]);
  }
  else
  {
    v4 = 0;
    v5 = MEMORY[0x1E0DA8E90];
    do
    {
      if (((LODWORD(a2[1].var0) >> v4) & 1) != 0)
        fprintf(this[1], "%s ", *(const char **)(v5 + 8 * v4));
      ++v4;
    }
    while (v4 != 32);
  }
  MTFEDebugVisitor::PrintTags((size_t)this, (const SLWordTagSet *)((char *)&a2[1].var0 + 4));
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  return MTFEDebugVisitor::EndElement((MTFEDebugVisitor *)this);
}

size_t MTFEDebugVisitor::VisitSyllable(FILE **this, MTFESpeechElement *a2)
{
  float v4;

  MTFEDebugVisitor::StartElement(this, "Syllable", 0);
  if (WORD2(a2[1].var0))
    fprintf(this[1], "%d:%d-%d", SLOWORD(a2[1].var0), SWORD1(a2[1].var0), SWORD2(a2[1].var0));
  if (HIWORD(a2[1].var0))
  {
    fprintf(this[1], " %s", MTFEToBI::sTone[SHIWORD(a2[1].var0)]);
    v4 = *(float *)&a2[1].var1;
    if (v4 != 0.0)
      fprintf(this[1], " %4.2f", v4);
  }
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  return MTFEDebugVisitor::EndElement((MTFEDebugVisitor *)this);
}

size_t MTFEDebugVisitor::VisitPhoneme(FILE **this, MTFESpeechElement *a2)
{
  uint64_t v4;
  int v5;
  const char *v6;
  char v7;
  float v8;
  float v9;
  double v10;
  double v11;
  double v12;
  MTFESpeechElement *var7;
  uint64_t v14;
  uint64_t v15;
  MEOWReader *v16;
  char *DemiRecord;
  int v18;
  MEOWReader *v19;
  char *v20;
  FILE *v21;
  char *v22;
  char *v23;
  const char *v24;
  FILE *v25;
  const char *v26;
  char *v27;
  char *v28;
  MTFEPitchTargets *var4;
  uint64_t v30;
  char v31;
  size_t result;
  _BYTE v33[48];
  int v34;
  void *v35[4];

  v4 = BYTE2(a2[1].var0);
  v5 = BYTE3(a2[1].var0);
  if (BYTE3(a2[1].var0))
  {
    if ((v4 - 46) > 4)
      v6 = "!!!";
    else
      v6 = off_1E9365F50[(char)(v4 - 46)];
  }
  else
  {
    v6 = *(const char **)(MEMORY[0x1E0DA8EB0] + 8 * v4);
  }
  v7 = MEOWPhon::sP2M[v4];
  MTFEDebugVisitor::StartElement(this, "Phoneme", 0);
  v8 = *(float *)&a2[1].var1;
  v9 = *(float *)(&a2[1].var2 + 2);
  v10 = v8;
  v11 = (float)(v8 * v9);
  v12 = (float)(v8 * (float)(1.0 - v9));
  var7 = a2->var7;
  if (var7)
  {
    if (var7 == (MTFESpeechElement *)this[4])
      v14 = 60;
    else
      v14 = 33;
  }
  else
  {
    v14 = 32;
  }
  v15 = 62;
  if (!a2->var6)
    v15 = 32;
  fprintf(this[1], "%3s %08x %3d %5.1f(%5.1f/%5.1f) %c%c %d", v6, LODWORD(a2[1].var3), SWORD2(a2[1].var0), v10, v11, v12, v14, v15, SLOWORD(a2[1].var0));
  if (BYTE5(a2[1].var5))
  {
    fputc(32, this[1]);
    if (this[2] && SLOWORD(a2[1].var5) != -1 && SWORD1(a2[1].var5) != -1)
    {
      MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v35, 2);
      v16 = (MEOWReader *)this[2];
      DemiRecord = MEOWReader::GetDemiRecord(v16, BYTE4(a2[1].var5), BYTE5(a2[1].var5), LOWORD(a2[1].var5), 1);
      MEOWReader::GetDemi((uint64_t)v16, DemiRecord, 1, (uint64_t)v33);
      v18 = v34;
      v19 = (MEOWReader *)this[2];
      v20 = MEOWReader::GetDemiRecord(v19, BYTE5(a2[1].var5), BYTE6(a2[1].var5), WORD1(a2[1].var5), 0);
      MEOWReader::GetDemi((uint64_t)v19, v20, 0, (uint64_t)v33);
      if (v34 == v18)
        fputc(38, this[1]);
      MEOWVectorBase::~MEOWVectorBase(v35);
    }
    fputc(91, this[1]);
    if (SLOWORD(a2[1].var5) != -1)
    {
      v21 = this[1];
      v22 = MEOWPhon::Name((MEOWPhon *)BYTE4(a2[1].var5));
      v23 = MEOWPhon::Name((MEOWPhon *)BYTE5(a2[1].var5));
      if (SWORD1(a2[1].var5) == -1)
        v24 = " ...";
      else
        v24 = " ";
      fprintf(v21, "%s>%s#%d%s", v22, v23, LOWORD(a2[1].var5), v24);
    }
    if (SWORD1(a2[1].var5) != -1)
    {
      v25 = this[1];
      if (SLOWORD(a2[1].var5) == -1)
        v26 = "... ";
      else
        v26 = "";
      v27 = MEOWPhon::Name((MEOWPhon *)BYTE5(a2[1].var5));
      v28 = MEOWPhon::Name((MEOWPhon *)BYTE6(a2[1].var5));
      fprintf(v25, "%s%s<%s#%d", v26, v27, v28, WORD1(a2[1].var5));
    }
    fputc(93, this[1]);
  }
  if (HIDWORD(a2[1].var3))
    fprintf(this[1], " @%u", HIDWORD(a2[1].var3));
  if (a2[1].var4)
  {
    MTFEDebugVisitor::StartElement(this, "Pitch", 0);
    var4 = (MTFEPitchTargets *)a2[1].var4;
    if (*(_DWORD *)var4 >= 1)
    {
      v30 = 0;
      do
      {
        fprintf(this[1], " %5.1f:%d", (float)((float)(*((_QWORD *)var4 + v30 + 1) & 0xFFFFFFLL) / 100.0), *((_QWORD *)var4 + v30 + 1) >> 24);
        ++v30;
        var4 = (MTFEPitchTargets *)a2[1].var4;
      }
      while (v30 < *(_DWORD *)var4);
    }
    MTFEDebugVisitor::EndElement((MTFEDebugVisitor *)this);
  }
  if (v5)
    v31 = v7 + 1;
  else
    v31 = v7;
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  result = MTFEDebugVisitor::EndElement((MTFEDebugVisitor *)this);
  *((_BYTE *)this + 29) = v31;
  this[4] = (FILE *)a2;
  return result;
}

void sub_1D2265178(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

size_t MTFEDebugVisitor::VisitCommand(FILE **this, MTFECommand *a2)
{
  unint64_t v4;
  int v5;
  FILE *v6;

  MTFEDebugVisitor::StartElement(this, "Command", 0);
  v4 = (unint64_t)a2->var9 >> 24;
  if (v4 <= 0x7F)
    v5 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v4 + 60) & 0x100;
  else
    v5 = __maskrune(v4, 0x100uLL);
  v6 = this[1];
  if (v5)
    fprintf(v6, "%c%c%c%c %c%c%c%c", (SLODWORD(a2->var8) >> 24), ((int)(LODWORD(a2->var8) << 8) >> 24));
  else
    fprintf(v6, "%c%c%c%c %08X");
  return MTFEDebugVisitor::EndElement((MTFEDebugVisitor *)this);
}

void MTFEDebugVisitor::Dump(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  uint64_t v2;
  _QWORD v3[3];
  int v4;
  char v5;

  v2 = *MEMORY[0x1E0C80C10];
  v3[0] = &off_1E9365EB0;
  v3[1] = v2;
  v3[2] = 0;
  v4 = 0;
  v5 = 0;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v3, this);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v3);
}

void sub_1D22652BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)va);
  _Unwind_Resume(a1);
}

void MTFEDebugVisitor::~MTFEDebugVisitor(MTFEDebugVisitor *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

MTFESpeechElement *MTFEPhrasing::VisitIntonationalPhrase(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  if (!BYTE4(a2[2].var6))
  {
    HIBYTE(this->var1) = a2->var1 < 10;
    *(_WORD *)&this->var2 = 0;
    *(_DWORD *)(&this->var2 + 2) = 0;
    return MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  }
  return this;
}

uint64_t MTFEPhrasing::VisitWord(uint64_t this, MTFEWord *a2)
{
  uint64_t v3;
  int var15;
  int var11;
  _BOOL4 v6;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _BOOL4 v20;
  unsigned __int8 v21;
  int v22;
  BOOL v23;
  int v24;
  char v25;
  int v26;
  BOOL v28;
  int v30;
  MTFEWord *v31;
  MTFEWord *v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;

  v3 = this;
  var15 = a2->var15;
  var11 = a2->var11;
  v6 = a2->var11 != 0;
  v7 = *(unsigned __int8 *)(this + 8);
  v36 = -1;
  if (a2->var12 == 60 || (this = (uint64_t)MTFEWord::PrevWord(a2)) == 0)
  {
    v9 = 0;
  }
  else
  {
    v8 = this;
    this = (uint64_t)MTFEWord::POSForPrev((MTFEWord *)this, &v36, 0, 0);
    if (*(_DWORD *)(v8 + 64) == 62)
    {
      v9 = 0;
      if (!var11)
      {
LABEL_5:
        v6 = *(unsigned __int8 *)(v8 + 63) > 2u;
        goto LABEL_9;
      }
    }
    else
    {
      v9 = (*(unsigned __int8 *)(v8 + 56) >> 4) & 1;
      if (!var11)
        goto LABEL_5;
    }
    v6 = 1;
  }
LABEL_9:
  v35 = -1;
  v34 = -1;
  v33 = -1;
  v10 = 1;
  v11 = 1;
  v12 = 1;
  if (a2->var12 != 62)
  {
    this = (uint64_t)MTFEWord::NextWord(a2);
    if (!this)
      goto LABEL_14;
    v31 = 0;
    v32 = 0;
    MTFEWord::POSForNext((MTFEWord *)this, &v35, 0, &v32);
    v10 = v35 == 31;
    this = (uint64_t)v32;
    if (!v32)
      goto LABEL_14;
    MTFEWord::POSForNext(v32, &v34, 0, &v31);
    v11 = v34 == 31;
    this = (uint64_t)v31;
    if (v31)
    {
      this = (uint64_t)MTFEWord::POSForNext(v31, &v33, 0, 0);
      v12 = v33 == 31;
    }
    else
    {
LABEL_14:
      v12 = 1;
    }
  }
  v13 = 1 << var15;
  if (var15 == 255)
    v13 = 0;
  v14 = v36;
  if (v36 == 255)
    v15 = 0;
  else
    v15 = 1 << v36;
  v16 = v35;
  if (v35 == 255)
    v17 = 0;
  else
    v17 = 1 << v35;
  if (var15 == 31)
  {
    v18 = *(_DWORD *)(v3 + 12);
    goto LABEL_39;
  }
  if (v10)
    goto LABEL_35;
  v19 = v7 ^ 1;
  if (*(_BYTE *)(v3 + 10))
  {
    *(_BYTE *)(v3 + 10) = 0;
    v20 = v19 != 0;
    v21 = 11;
    goto LABEL_28;
  }
  v22 = v33;
  v23 = (v17 & 0x102000) != 0;
  if (var15 != 14)
    v23 = 0;
  if (v36 != 255)
    v23 = 0;
  *(_BYTE *)(v3 + 10) = v23;
  v20 = v19 != 0;
  if (v6)
    goto LABEL_35;
  if (v14 == 255 || var15 != 11)
  {
    if (var15 != 14 || *(int *)(v3 + 12) < 5 || v16 == 6 || v14 == 2 || v14 == 3 || v14 == 8)
      goto LABEL_52;
LABEL_59:
    v21 = 12;
    goto LABEL_28;
  }
  if (!*(_BYTE *)(v3 + 11) && *(int *)(v3 + 12) >= 4 && v34 != 10)
    goto LABEL_59;
LABEL_52:
  if ((v15 & 0x200000) != 0 && *(int *)(v3 + 12) > 2)
    goto LABEL_59;
  if ((v13 & 0x140000) != 0 && *(int *)(v3 + 12) >= 4 && (v15 & 0x400) == 0)
    goto LABEL_59;
  v24 = *(_DWORD *)(v3 + 12);
  if (var15 == 12 && v24 > 4)
    goto LABEL_59;
  if (v24 >= 3 && (v15 & 0x33) != 0 && (v13 & 0x10C) != 0)
    goto LABEL_63;
  if (v14)
  {
    if (var15 == 10)
      goto LABEL_66;
    goto LABEL_87;
  }
  if (v24 >= 5 && (this = v17 & 0x110C, (v17 & 0x110C) == 0) && (this = v34, v34 != 2) && (v13 & 0x10C) != 0
    || (var15 != 12 ? (v26 = v9) : (v26 = 0), v26 == 1 && (v17 & 0xC04) == 0 && v24 >= 4 && var15 == 1))
  {
LABEL_63:
    v21 = 13;
    goto LABEL_28;
  }
  if (var15 == 10)
  {
LABEL_66:
    v25 = v24 < 4 || v11;
    if ((v25 & 1) == 0 && (v15 & 0xC00) == 0)
      goto LABEL_91;
    goto LABEL_87;
  }
  if (var15 == 1)
  {
    if (v24 <= 2)
      goto LABEL_108;
    goto LABEL_63;
  }
LABEL_87:
  if (v14 == 19 && (v13 & 0x2080) == 0 && v24 >= 3 && (v13 & 0x41) != 0)
  {
LABEL_91:
    v21 = 14;
    goto LABEL_28;
  }
  if (var15 == 12)
  {
    v28 = v22 == 255 || ((1 << v22) & 0x10C) == 0;
    if (v24 < 4 || (v15 & 0x33) == 0 || !v28)
      goto LABEL_108;
LABEL_107:
    v21 = 15;
    goto LABEL_28;
  }
  if (var15 == 17 && v24 >= 6 && (v15 & 0x214C) == 0 && v34 != 11)
    goto LABEL_107;
LABEL_108:
  if ((v15 & 0xA5273) != 0 && (v13 & 0xA5273) == 0)
  {
    v20 = 1;
    v21 = 16;
    if (v14 != 4 || (v13 & 0x200000) == 0)
    {
LABEL_28:
      if (!v6 && v20)
        a2->var11 = v21;
      goto LABEL_35;
    }
  }
  v30 = var15 != 15 || v24 < 4 || v11;
  if (((v30 | v12) & 1) == 0)
  {
    v20 = 1;
    v21 = 16;
    goto LABEL_28;
  }
LABEL_35:
  v18 = *(_DWORD *)(v3 + 12);
  if (v18 >= 2)
    *(_BYTE *)(v3 + 11) = 0;
  if ((v13 & 0x2000) != 0)
    *(_BYTE *)(v3 + 11) = 1;
LABEL_39:
  *(_DWORD *)(v3 + 12) = v18 + 1;
  return this;
}

void MTFEPhrasing::~MTFEPhrasing(MTFEPhrasing *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

MTFESpeechElement *MTFEPOSResolver::VisitSentence(MTFEPOSResolver *this, MTFESpeechElement *a2)
{
  BOOL v2;

  v2 = ((uint64_t)a2[1].var0 & 8) != 0 || a2->var1 == 1 && a2->var3->var3->var1 == 1;
  *((_BYTE *)this + 9) = v2;
  *((_BYTE *)this + 10) = 0;
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFEPOSResolver::VisitIntonationalPhrase(MTFEPOSResolver *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *var6;

  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 4) = 100;
  *((_BYTE *)this + 12) = (uint64_t)a2[1].var0 & 1;
  var6 = a2->var6;
  if (var6)
  {
    if (var6[3].var1)
      LOBYTE(var6) = ((uint64_t)var6[3].var3 & 3) == 1;
    else
      LOBYTE(var6) = 0;
  }
  *((_BYTE *)this + 13) = (_BYTE)var6;
  *((_BYTE *)this + 14) = a2[3].var6 != 0;
  return MTFESpeechElement::VisitChildren(a2, this);
}

void MTFEPOSResolver::VisitWord(MTFEPOSResolver *this, MTFESpeechElement *a2)
{
  char *var27;
  unsigned int var5;
  int8x8_t v5;
  uint8x8_t v6;
  BOOL v8;
  MTFEWord *v9;
  _BOOL4 v10;
  unsigned __int16 v11;
  uint64_t var15;
  FILE *v13;
  const char *v14;
  MTFEWord *Word;
  MTFESpeechElement *v16;
  _BOOL4 v17;
  MTFESpeechElement *v18;
  int v19;
  int var0_high;
  unsigned int var0;
  __int16 v23;
  MTFEPOSResolver *v24;
  int v25;
  BOOL v26;
  __int16 v27;
  MTFESpeechElement *v28;
  __int16 v29;
  unsigned int v30;
  FILE *v31;
  const char *v32;
  const char *v33;
  __int16 v34;
  MTFEWord *v35;
  FILE *v36;
  const char *v37;
  const char *v38;
  char *v39;
  FILE *v40;
  const char *v41;
  FILE *v42;
  const char *v43;
  int v44;
  FILE *v45;
  const char *v46;
  const char *v47;
  int v48;
  FILE *v49;
  const char *v50;
  FILE *v51;
  const char *v52;
  FILE *v53;
  const char *v54;
  FILE *v55;
  const char *v56;
  FILE *v57;
  const char *v58;
  const char *v59;
  FILE *v60;
  const char *v61;
  FILE *v62;
  const char *v63;
  FILE *v64;
  const char *v65;
  int v66;
  __int16 v67;
  FILE *v68;
  const char *v69;
  int v70;
  SLWordTagSet *p_var17;
  unsigned int v72;
  unsigned int v73;
  MTFESpeechElement *var6;
  MTFESpeechElement *v75;
  char v76;
  int v77;
  char *v78;
  char *v79;
  char v80;
  const char *v81;
  char v82;
  const char *v83;
  char v84;
  uint64_t v85;
  unsigned __int16 *v86;
  unsigned __int16 v87;
  unsigned __int16 v88;
  unsigned int v89;
  unsigned int v90;
  char *v91;
  char *v92;
  const void *v93;
  size_t v94;
  uint64_t v95;
  uint64_t v96;
  FILE *v97;
  const char *v98;
  const char *v99;
  int v100;
  unsigned int var8;
  FILE *v102;
  const char *v103;
  const char *v104;
  FILE *v105;
  const char *v106;
  __int16 v107;
  FILE *v108;
  const char *v109;
  const char *v110;
  FILE *v111;
  const char *v112;
  unsigned int v113;
  FILE *v114;
  const char *v115;
  int v116;
  FILE *v117;
  const char *v118;
  const char *v119;
  FILE *v120;
  const char *v121;
  const char *v122;
  FILE *v123;
  const char *v124;
  int v125;
  FILE *v126;
  const char *v127;
  int v128;
  int v129;
  int v130;
  int v131;
  FILE *v132;
  const char *v133;
  FILE *v134;
  const char *v135;
  int v136;
  int v137;
  FILE *v138;
  const char *v139;
  unsigned int v140;
  int v141;
  int v142;
  FILE *v143;
  const char *v144;
  FILE *v145;
  const char *v146;
  __int16 v147;
  FILE *v148;
  const char *v149;
  int v150;
  FILE *v151;
  const char *v152;
  int v153;
  unsigned int v154;
  FILE *v155;
  const char *v156;
  const char *v157;
  FILE *v158;
  const char *v159;
  FILE *v160;
  const char *v161;
  FILE *v162;
  const char *v163;
  FILE *v164;
  const char *v165;
  FILE *v166;
  const char *v167;
  FILE *v168;
  const char *v169;
  FILE *v170;
  const char *v171;
  int v172;
  char v173;
  char v174;
  FILE *v175;
  const char *v176;
  FILE *v177;
  const char *v178;
  FILE *v179;
  const char *v180;
  int v181;
  char v182;
  FILE *v183;
  const char *v184;
  FILE *v185;
  const char *v186;
  int v187;
  _BOOL4 v188;
  FILE *v189;
  const char *v190;
  int v191;
  FILE *v192;
  const char *v193;
  FILE *v194;
  const char *v195;
  FILE *v196;
  const char *v197;
  FILE *v198;
  const char *v199;
  FILE *v200;
  const char *v201;
  FILE *v202;
  const char *v203;
  FILE *v204;
  const char *v205;
  int v206;
  FILE *v207;
  const char *v208;
  FILE *v209;
  const char *v210;
  FILE *v211;
  const char *v212;
  int v213;
  char v214;
  FILE *v215;
  const char *v216;
  FILE *v217;
  const char *v218;
  FILE *v219;
  const char *v220;
  FILE *v221;
  const char *v222;
  FILE *v223;
  const char *v224;
  FILE *v225;
  const char *v226;
  __int16 v227;
  FILE *v228;
  const char *v229;
  int v230;
  FILE *v231;
  const char *v232;
  FILE *v233;
  const char *v234;
  FILE *v235;
  const char *v236;
  FILE *v237;
  const char *v238;
  FILE *v239;
  const char *v240;
  MTFESpeechElement *var3;
  int v242;
  char v243;
  FILE *v244;
  const char *v245;
  FILE *v246;
  const char *v247;
  FILE *v248;
  const char *v249;
  BOOL v250;
  int v251;
  _BOOL4 v252;
  int v253;
  FILE *v254;
  const char *v255;
  FILE *v256;
  const char *v257;
  FILE *v258;
  const char *v259;
  FILE *v260;
  const char *v261;
  FILE *v262;
  const char *v263;
  FILE *v264;
  const char *v265;
  const char *v266;
  FILE *v267;
  const char *v268;
  int v269;
  int v270;
  int v271;
  int v272;
  FILE *v273;
  const char *v274;
  FILE *v275;
  const char *v276;
  const char *v277;
  FILE *v278;
  const char *v279;
  FILE *v280;
  const char *v281;
  const char *v282;
  FILE *v283;
  const char *v284;
  const char *v285;
  BOOL v286;
  int v287;
  int v288;
  FILE *v289;
  const char *v290;
  FILE *v291;
  const char *v292;
  FILE *v293;
  const char *v294;
  FILE *v295;
  const char *v296;
  char v297;
  _BOOL4 v298;
  FILE *v299;
  const char *v300;
  _BOOL4 v302;
  _BOOL4 v303;
  int v304;
  _BOOL4 v305;
  FILE *v306;
  const char *v307;
  FILE *v308;
  const char *v309;
  FILE *v310;
  const char *v311;
  FILE *v312;
  const char *v313;
  BOOL v314;
  BOOL v315;
  FILE *v316;
  const char *v317;
  const char *v318;
  BOOL v319;
  FILE *v320;
  const char *v321;
  FILE *v322;
  const char *v323;
  _BOOL4 v324;
  FILE *v325;
  const char *v326;
  FILE *v327;
  const char *v328;
  FILE *v329;
  const char *v330;
  char v331;
  FILE *v332;
  const char *v333;
  char v334;
  int v335;
  int v336;
  FILE *v337;
  const char *v338;
  FILE *v339;
  const char *v340;
  FILE *v341;
  const char *v342;
  int v343;
  FILE *v344;
  const char *v345;
  FILE *v346;
  const char *v347;
  FILE *v348;
  const char *v349;
  FILE *v350;
  const char *v351;
  _BOOL4 v353;
  FILE *v354;
  const char *v355;
  const char *v356;
  int v357;
  FILE *v358;
  const char *v359;
  const char *v360;
  FILE *v361;
  const char *v362;
  FILE *v363;
  const char *v364;
  FILE *v365;
  const char *v366;
  FILE *v368;
  const char *v369;
  const char *v370;
  char v371;
  FILE *v372;
  const char *v373;
  const char *v374;
  FILE *v375;
  const char *v376;
  const char *v377;
  FILE *v378;
  const char *v379;
  const char *v380;
  FILE *v381;
  const char *v382;
  int v383;
  FILE *v384;
  const char *v385;
  FILE *v386;
  const char *v387;
  FILE *v388;
  const char *v389;
  FILE *v390;
  const char *v391;
  const char *v392;
  FILE *v393;
  const char *v394;
  const char *v395;
  FILE *v396;
  const char *v397;
  FILE *v398;
  const char *v399;
  FILE *v401;
  const char *v402;
  FILE *v403;
  const char *v404;
  FILE *v405;
  const char *v406;
  FILE *v407;
  const char *v408;
  int v409;
  FILE *v410;
  const char *v411;
  FILE *v412;
  const char *v413;
  FILE *v414;
  const char *v415;
  FILE *v416;
  const char *v417;
  char v418;
  FILE *v419;
  const char *v420;
  FILE *v421;
  const char *v422;
  int v423;
  _BOOL4 v424;
  int v425;
  FILE *v426;
  const char *v427;
  _BOOL4 v428;
  int v429;
  FILE *v430;
  const char *v431;
  FILE *v432;
  const char *v433;
  FILE *v434;
  const char *v435;
  FILE *v436;
  const char *v437;
  char v438;
  _BOOL4 v439;
  FILE *v440;
  const char *v441;
  FILE *v442;
  const char *v443;
  int v444;
  _BOOL4 v445;
  _BOOL4 v446;
  BOOL v447;
  BOOL v448;
  char v449;
  FILE *v450;
  const char *v451;
  FILE *v452;
  const char *v453;
  FILE *v454;
  const char *v455;
  _BOOL4 v456;
  FILE *v457;
  const char *v458;
  FILE *v459;
  const char *v460;
  FILE *v461;
  const char *v462;
  FILE *v463;
  const char *v464;
  char v465;
  FILE *v466;
  const char *v467;
  FILE *v468;
  const char *v469;
  char v470;
  FILE *v471;
  const char *v472;
  FILE *v473;
  const char *v474;
  char v475;
  unsigned int v476;
  FILE *v477;
  const char *v478;
  FILE *v479;
  const char *v480;
  FILE *v481;
  const char *v482;
  BOOL v483;
  char v484;
  FILE *v485;
  const char *v486;
  FILE *v487;
  const char *v488;
  char v489;
  _BOOL4 v490;
  FILE *v491;
  const char *v492;
  FILE *v493;
  const char *v494;
  int v495;
  int v496;
  int v497;
  FILE *v498;
  const char *v499;
  FILE *v500;
  const char *v501;
  char v502;
  FILE *v503;
  const char *v504;
  FILE *v505;
  const char *v506;
  FILE *v507;
  const char *v508;
  int v509;
  _BOOL4 v510;
  FILE *v511;
  const char *v512;
  FILE *v513;
  const char *v514;
  FILE *v515;
  const char *v516;
  FILE *v517;
  const char *v518;
  FILE *v519;
  const char *v520;
  FILE *v521;
  const char *v522;
  FILE *v523;
  const char *v524;
  _BOOL4 v525;
  FILE *v526;
  const char *v527;
  FILE *v528;
  const char *v529;
  FILE *v530;
  const char *v531;
  FILE *v532;
  const char *v533;
  FILE *v534;
  const char *v535;
  BOOL v536;
  _BOOL4 v537;
  FILE *v538;
  const char *v539;
  FILE *v540;
  const char *v541;
  char v542;
  char v543;
  FILE *v544;
  const char *v545;
  FILE *v546;
  const char *v547;
  FILE *v548;
  const char *v549;
  FILE *v550;
  const char *v551;
  int v552;
  FILE *v553;
  const char *v554;
  FILE *v555;
  const char *v556;
  const char *v557;
  const char *v558;
  const char *v559;
  int v560;
  FILE *v561;
  const char *v562;
  _BOOL4 v563;
  FILE *v564;
  const char *v565;
  FILE *v566;
  const char *v567;
  FILE *v568;
  const char *v569;
  _BOOL4 v570;
  FILE *v571;
  const char *v572;
  FILE *v573;
  const char *v574;
  FILE *v575;
  const char *v576;
  char v577;
  FILE *v578;
  const char *v579;
  FILE *v580;
  const char *v581;
  FILE *v582;
  const char *v583;
  FILE *v584;
  const char *v585;
  char v587;
  char v588;
  FILE *v589;
  const char *v590;
  FILE *v591;
  const char *v592;
  FILE *v593;
  const char *v594;
  char v595;
  FILE *v596;
  const char *v597;
  FILE *v598;
  const char *v599;
  FILE *v600;
  const char *v601;
  FILE *v602;
  const char *v603;
  FILE *v604;
  const char *v605;
  FILE *v606;
  const char *v607;
  FILE *v608;
  const char *v609;
  FILE *v610;
  const char *v611;
  FILE *v612;
  const char *v613;
  FILE *v614;
  const char *v615;
  FILE *v616;
  const char *v617;
  FILE *v618;
  const char *v619;
  FILE *v620;
  const char *v621;
  int v622;
  char v623;
  FILE *v624;
  const char *v625;
  const char *v626;
  FILE *v627;
  const char *v628;
  _BOOL4 v629;
  int v630;
  int v631;
  int v632;
  _BOOL4 v633;
  _BOOL4 v634;
  _BOOL4 v635;
  int v636;
  _BOOL4 v637;
  _BOOL4 v638;
  BOOL v639;
  int v640;
  BOOL v641;
  int v642;
  int v643;
  int v644;
  unsigned int v645;
  unsigned int v646;
  unsigned int v647;
  MTFEWord *v649;
  MTFESpeechElement *lpsrc;
  _BOOL4 lpsrca;
  SLWordTagSet v652;
  SLWordTagSet v653;
  unsigned int v654[2];
  MTFEWord *v655;
  MTFEWord *v656;
  SLWordTagSet v657;
  unsigned __int8 v658;
  SLWordTagSet v659;
  MTFEWord *v660;
  _BYTE v661[16];
  uint64_t v662;
  uint64_t v663;
  unsigned int v664;
  unsigned __int8 v665;
  SLWordTagSet v666;

  *((_BYTE *)this + 11) = 0;
  MTFECommands::Visit((uint64_t)&a2[2], (uint64_t)this);
  var5 = a2[1].var5;
  v666 = *(SLWordTagSet *)((char *)&a2[1].var5 + 4);
  v665 = -1;
  v664 = 0;
  MTFESpeechPedigree::MTFESpeechPedigree((MTFESpeechPedigree *)v661, a2);
  if ((BYTE1(a2[1].var0) & 2) != 0)
  {
    LODWORD(var27) = var5;
    BYTE6(a2[1].var4) = SLFirstPOSInSet();
  }
  v649 = (MTFEWord *)a2;
  if (!var5)
  {
    v647 = 0;
    v11 = 0;
    lpsrc = a2->var3;
    LODWORD(var15) = 255;
    v645 = 255;
    goto LABEL_184;
  }
  v5.i32[0] = var5;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  v8 = a2->var1 == 1 && v6.i32[0] <= 1u && (var5 & 0x10880) == 0;
  v647 = var5;
  if (v8)
  {
    LODWORD(var15) = SLFirstPOSInSet();
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v13 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8 * var15);
      v14 = (const char *)SLTagEng::Name(0);
      fprintf(v13, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", (const char *)&a2[3].var5, var27, "", "", v14, 352, v647, v664);
    }
    v11 = 0;
    lpsrc = 0;
    goto LABEL_180;
  }
  v660 = 0;
  v659.var0[0] = 0;
  v658 = -1;
  v657.var0[0] = 0;
  if (*(_DWORD *)&a2[1].var1 == 60)
  {
    v9 = 0;
    v10 = 0;
    v644 = 1;
    goto LABEL_26;
  }
  Word = (MTFEWord *)MTFEWord::PrevWord((MTFEWord *)a2);
  v9 = Word;
  if (Word)
    MTFEWord::POSForPrev(Word, &v665, &v659, &v660);
  if (v660)
    MTFEWord::POSForPrev(v660, &v658, &v657, 0);
  if (v665 != 255)
  {
    v644 = 0;
LABEL_23:
    v10 = 0;
    goto LABEL_26;
  }
  v644 = *(_QWORD *)(v662 + 48) == 0;
  if (!*(_WORD *)(v662 + 176))
    goto LABEL_23;
  v10 = (*(_QWORD *)(v662 + 184) & 3) == 1;
LABEL_26:
  v655 = 0;
  v656 = 0;
  *(_QWORD *)v654 = 0;
  v653.var0[0] = 0;
  v652.var0[0] = 0;
  if (*(_DWORD *)&a2[1].var1 == 62)
  {
    v16 = 0;
    LODWORD(var27) = 0;
    lpsrca = 0;
    v17 = 1;
    v640 = 1;
    v642 = 1;
    v638 = 1;
    goto LABEL_51;
  }
  v18 = MTFEWord::NextWord((MTFEWord *)a2);
  v16 = v18;
  if (v18)
  {
    v19 = ((uint64_t)v18[1].var0 & 0x40) != 0 && strcmp((const char *)&v18[3].var5, "< ") != 0;
    var0_high = HIBYTE(v16[1].var0);
    LODWORD(var27) = var0_high == 9 || var0_high == 4;
    MTFEWord::POSForNext((MTFEWord *)v16, &v664, &v653, &v656);
    if (v656)
    {
      if (v19)
        v19 = (LOBYTE(v656->var8) >> 6) & 1;
      MTFEWord::POSForNext(v656, &v654[1], &v652, &v655);
    }
    if (v655)
    {
      if (v19)
        v19 = (LOBYTE(v655->var8) >> 6) & 1;
      MTFEWord::POSForNext(v655, v654, 0, 0);
    }
    if (!v19)
      goto LABEL_49;
  }
  else
  {
    LODWORD(var27) = 0;
  }
  if (!*(_QWORD *)(v663 + 40))
  {
    lpsrca = *((_BYTE *)this + 13) != 0;
    v642 = 1;
    goto LABEL_50;
  }
LABEL_49:
  v642 = 0;
  lpsrca = 0;
LABEL_50:
  v638 = (v654[1] & 0x7FFFFFFF) == 0;
  v640 = (v664 & 0x7FFFFFFF) == 0;
  v17 = (v654[0] & 0x7FFFFFFF) == 0;
LABEL_51:
  v637 = v17;
  if (SLWordTagSet::find(&v666))
  {
    var0 = a2[1].var0;
    if ((var0 & 0x80) != 0)
    {
      v24 = this;
      v25 = var0 & 0x10000;
      if (*((_BYTE *)this + 10))
        v26 = v25 == 0;
      else
        v26 = 1;
      if (v26)
        v23 = 70;
      else
        v23 = 71;
    }
    else
    {
      v23 = 71;
      v24 = this;
    }
    if (MTFEPOSResolver::RequireTagAndPOS(v24, a2, v23, 0x7FFFFFFF))
    {
      v647 = *((_DWORD *)this + 7);
      v666 = (SLWordTagSet)*((_OWORD *)this + 2);
    }
  }
  else if (BYTE1(a2[3].var5))
  {
    *((_BYTE *)this + 10) = ((uint64_t)a2[1].var0 & 0x80) != 0;
  }
  if (SLWordTagSet::find(&v666))
  {
    v27 = ((uint64_t)a2[1].var0 & 0x100) != 0 ? 72 : 73;
    if (MTFEPOSResolver::RequireTagAndPOS(this, a2, v27, 0x7FFFFFFF))
    {
      v647 = *((_DWORD *)this + 7);
      v666 = (SLWordTagSet)*((_OWORD *)this + 2);
    }
  }
  if (SLWordTagSet::find(&v666))
  {
    v28 = a2;
    if ((BYTE1(a2[1].var0) & 2) != 0)
    {
      v29 = 1039;
    }
    else
    {
      v29 = SLWordTagSet::find(&v653) ? 1038 : 1039;
      v28 = a2;
    }
    if (MTFEPOSResolver::RequireTagAndPOS(this, v28, v29, 0x7FFFFFFF))
    {
      v30 = *((_DWORD *)this + 7);
      v666 = (SLWordTagSet)*((_OWORD *)this + 2);
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v31 = (FILE *)*MEMORY[0x1E0C80C20];
        v32 = *(const char **)(MEMORY[0x1E0DA8E90] + 2040);
        v33 = (const char *)SLTagEng::Name(0);
        fprintf(v31, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v649->var27, v32, "", "", v33, 480, v30, v664);
      }
      v647 = v30;
    }
  }
  if (SLWordTagSet::find(&v666))
  {
    if (*((_BYTE *)this + 9)
      || *((_BYTE *)this + 11)
      || *((_BYTE *)this + 14) && strcmp(v649->var27, "THE") && strcmp(v649->var27, "A"))
    {
      goto LABEL_84;
    }
    LOWORD(v646) = 66;
    if (v649->var10 == 1)
      goto LABEL_87;
    v66 = v642;
    if ((v649->var8 & 0x2000) != 0)
    {
      v66 = 0;
      v67 = 66;
    }
    else
    {
      v67 = 67;
    }
    LOWORD(v646) = v67;
    if (v66 != 1)
      goto LABEL_87;
    if ((var27 & 1) != 0 || !strcmp(v649->var27, "IT"))
      v649->var10 = 2;
    if (lpsrca && (!strcmp(v649->var27, "THE") || !strcmp(v649->var27, "A")))
      v34 = 67;
    else
LABEL_84:
      v34 = 66;
    LOWORD(v646) = v34;
  }
  else
  {
    LOWORD(v646) = 0;
  }
LABEL_87:
  if (!SLWordTagSet::find(&v666))
    goto LABEL_98;
  v35 = v649;
  if ((v649->var8 & 0x8020) != 0x20
    || *((_BYTE *)this + 12) && (v35 = v649, !SLWordTagSet::find(&v653))
    || (var27 = v35->var27, !strcmp(v35->var27, "I")))
  {
    if (MTFEPOSResolver::RequireTagAndPOS(this, (MTFESpeechElement *)v35, 77, 0x7FFFFFFF))
    {
      v647 = *((_DWORD *)this + 7);
      v666 = (SLWordTagSet)*((_OWORD *)this + 2);
    }
    goto LABEL_98;
  }
  if (!MTFEPOSResolver::RequireTagAndPOS(this, (MTFESpeechElement *)v35, 76, 0x7FFFFFFF))
  {
LABEL_98:
    LODWORD(var15) = 255;
    goto LABEL_99;
  }
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
  {
    v36 = (FILE *)*MEMORY[0x1E0C80C20];
    v37 = (const char *)*MEMORY[0x1E0DA8E90];
    v38 = (const char *)SLTagEng::Name((SLTagEng *)0x4C);
    fprintf(v36, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", var27, v37, "", "", v38, 520, v647, v664);
  }
  LODWORD(var15) = 0;
  LOWORD(v646) = 76;
LABEL_99:
  v39 = v649->var27;
  if (!strcmp(v649->var27, "PRES."))
  {
    if (SLWordTagSet::find(&v653))
    {
      HIBYTE(v16[1].var0) = 2;
      strcpy(v39, "PRESIDENT");
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v40 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8 * var15);
        v41 = (const char *)SLTagEng::Name((SLTagEng *)0x40C);
        fprintf(v40, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v41, 536, v647, v664);
      }
      LOWORD(v646) = 1036;
    }
    else
    {
      strcpy(v39, "PRESENTS");
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v42 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
        v43 = (const char *)SLTagEng::Name((SLTagEng *)0x40D);
        fprintf(v42, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v43, 541, v647, v664);
      }
      LOWORD(v646) = 1037;
      LODWORD(var15) = 1;
    }
  }
  if (!strcmp(v39, "EXPY"))
  {
    if ((SLWordTagSet::find(&v659) & 1) != 0 || v9 && (v9->var8 & 0x20) != 0)
      v44 = 1056;
    else
      v44 = 1057;
    v646 = v44;
    MTFEPOSResolver::RequireTagAndPOS(this, (MTFESpeechElement *)v649, v44, 0x7FFFFFFF);
    LODWORD(var27) = *((_DWORD *)this + 7);
    v666 = (SLWordTagSet)*((_OWORD *)this + 2);
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v45 = (FILE *)*MEMORY[0x1E0C80C20];
      v46 = *(const char **)(MEMORY[0x1E0DA8E90] + 8 * var15);
      v47 = (const char *)SLTagEng::Name((SLTagEng *)v646);
      fprintf(v45, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, v46, "", "", v47, 556, (_DWORD)var27, v664);
    }
    v647 = var27;
  }
  if (SLWordTagSet::find(&v666))
  {
    v48 = SLWordTagSet::find(&v666);
    if (SLWordTagSet::find(&v659))
    {
      *(_WORD *)&v649->var10 = 516;
      strcpy(v39, "DRIVE");
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v49 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v50 = (const char *)SLTagEng::Name((SLTagEng *)0x402);
        fprintf(v49, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v50, 577, v647, v664);
      }
LABEL_179:
      lpsrc = 0;
      LODWORD(var15) = 0;
      v11 = 1026;
      goto LABEL_180;
    }
    if (v48)
    {
      if (SLWordTagSet::find(&v653))
      {
        HIBYTE(v16[1].var0) = 2;
        strcpy(v39, "DOCTOR");
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v55 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = (char *)*MEMORY[0x1E0DA8E90];
          v56 = (const char *)SLTagEng::Name((SLTagEng *)0x403);
          fprintf(v55, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v56, 582, v647, v664);
        }
LABEL_136:
        lpsrc = 0;
        LODWORD(var15) = 0;
        v11 = 1027;
        goto LABEL_180;
      }
      if (((1 << v665) & 0x41) == 0)
      {
        if ((v664 & 0x41) != 0)
        {
          HIBYTE(v16[1].var0) = 2;
          strcpy(v39, "DOCTOR");
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v108 = (FILE *)*MEMORY[0x1E0C80C20];
            var27 = (char *)*MEMORY[0x1E0DA8E90];
            v109 = (const char *)SLTagEng::Name((SLTagEng *)0x403);
            fprintf(v108, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v109, 593, v647, v664);
          }
        }
        else
        {
          strcpy(v39, "DOCTOR");
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v126 = (FILE *)*MEMORY[0x1E0C80C20];
            var27 = (char *)*MEMORY[0x1E0DA8E90];
            v127 = (const char *)SLTagEng::Name((SLTagEng *)0x403);
            fprintf(v126, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v127, 598, v647, v664);
          }
        }
        goto LABEL_136;
      }
LABEL_177:
      *(_WORD *)&v649->var10 = 516;
      strcpy(v39, "DRIVE");
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v68 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v69 = (const char *)SLTagEng::Name((SLTagEng *)0x402);
        fprintf(v68, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v69, 588, v647, v664);
      }
      goto LABEL_179;
    }
    if (((1 << v665) & 0x41) != 0)
      goto LABEL_177;
    goto LABEL_285;
  }
  if (SLWordTagSet::find(&v666))
  {
    LODWORD(var27) = SLWordTagSet::find(&v666);
    if ((_DWORD)var27 && SLWordTagSet::find(&v653))
    {
      HIBYTE(v16[1].var0) = 2;
      strcpy(v39, "SAINT");
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v51 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v52 = (const char *)SLTagEng::Name((SLTagEng *)0x401);
        fprintf(v51, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v52, 618, v647, v664);
      }
LABEL_125:
      lpsrc = 0;
      LODWORD(var15) = 0;
      v11 = 1025;
LABEL_180:
      v70 = 255;
LABEL_181:
      v645 = v70;
      goto LABEL_182;
    }
    if (SLWordTagSet::find(&v659))
    {
      *(_WORD *)&v649->var10 = 516;
      if ((_DWORD)var27)
        strcpy(v39, "STREET");
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v57 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v58 = (const char *)SLTagEng::Name((SLTagEng *)0x400);
        fprintf(v57, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v58, 625, v647, v664);
      }
    }
    else if (((1 << v665) & 0x41) != 0)
    {
      v649->var10 = 4;
      if ((_DWORD)var27)
        strcpy(v39, "STREET");
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v64 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v65 = (const char *)SLTagEng::Name((SLTagEng *)0x400);
        fprintf(v64, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v65, 631, v647, v664);
      }
    }
    else
    {
      if (!(_DWORD)var27)
        goto LABEL_285;
      if ((v664 & 0x41) != 0)
      {
        HIBYTE(v16[1].var0) = 2;
        strcpy(v39, "SAINT");
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v102 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = (char *)*MEMORY[0x1E0DA8E90];
          v103 = (const char *)SLTagEng::Name((SLTagEng *)0x401);
          fprintf(v102, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v103, 636, v647, v664);
        }
        goto LABEL_125;
      }
      strcpy(v39, "STREET");
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v134 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v135 = (const char *)SLTagEng::Name((SLTagEng *)0x400);
        fprintf(v134, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v135, 642, v647, v664);
      }
    }
    lpsrc = 0;
    LODWORD(var15) = 0;
    v11 = 1024;
    goto LABEL_180;
  }
  if (SLWordTagSet::find(&v666))
  {
    if (SLWordTagSet::find(&v666) && SLWordTagSet::find(&v653))
    {
      HIBYTE(v16[1].var0) = 2;
      strcpy(v39, "FORT");
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v53 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v54 = (const char *)SLTagEng::Name((SLTagEng *)0x404);
        fprintf(v53, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v54, 652, v647, v664);
      }
      lpsrc = 0;
      LODWORD(var15) = 0;
      v11 = 1028;
    }
    else
    {
      v649->var11 = 2;
      strcpy(v39, "FEET");
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v62 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v63 = (const char *)SLTagEng::Name((SLTagEng *)0x405);
        fprintf(v62, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v63, 657, v647, v664);
      }
      lpsrc = 0;
      LODWORD(var15) = 0;
      v11 = 1029;
    }
    goto LABEL_180;
  }
  if (SLWordTagSet::find(&v666))
  {
    if (SLWordTagSet::find(&v659))
    {
      v649->var11 = 2;
      if (v649->var27[2] == 83)
        v59 = "POINTS";
      else
        v59 = "POINT";
      strcpy(v39, v59);
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v60 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8 * var15);
        v61 = (const char *)SLTagEng::Name((SLTagEng *)0x417);
        fprintf(v60, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v61, 664, v647, v664);
      }
    }
    else
    {
      if (SLWordTagSet::find(&v653))
      {
        HIBYTE(v16[1].var0) = 2;
        if (v649->var27[2] == 83)
          v104 = "PARTS";
        else
          v104 = "PART";
        strcpy(v39, v104);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v105 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8 * var15);
          v106 = (const char *)SLTagEng::Name((SLTagEng *)0x416);
          fprintf(v105, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v106, 669, v647, v664);
        }
        v107 = 1046;
        goto LABEL_282;
      }
      if (v649->var27[2] == 83)
        v110 = "POINTS";
      else
        v110 = "POINT";
      strcpy(v39, v110);
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v111 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8 * var15);
        v112 = (const char *)SLTagEng::Name((SLTagEng *)0x417);
        fprintf(v111, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v112, 673, v647, v664);
      }
    }
    v107 = 1047;
LABEL_282:
    LOWORD(v646) = v107;
    goto LABEL_283;
  }
  if (SLWordTagSet::find(&v666) && SLWordTagSet::find(&v659))
  {
    if (MTFEPOSResolver::RequireTagAndPOS(this, (MTFESpeechElement *)v649, 86, 0x7FFFFFFF))
    {
      LODWORD(var27) = *((_DWORD *)this + 7);
      v666 = (SLWordTagSet)*((_OWORD *)this + 2);
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v97 = (FILE *)*MEMORY[0x1E0C80C20];
        v98 = *(const char **)(MEMORY[0x1E0DA8E90] + 8 * var15);
        v99 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v97, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, v98, "", "", v99, 682, (_DWORD)var27, v664);
      }
      v647 = var27;
    }
    goto LABEL_283;
  }
  v100 = SLWordTagSet::find(&v666) ^ 1;
  if ((unsigned __int16)v646 == 66)
    LOBYTE(v100) = 1;
  if ((v100 & 1) == 0)
  {
    var8 = v649->var8;
    if ((var8 & 0x200) != 0)
    {
      if (v649->var15 || !MTFEPOSResolver::RequireTagAndPOS(this, (MTFESpeechElement *)v649, 65, 1))
        goto LABEL_283;
LABEL_372:
      v647 = *((_DWORD *)this + 7);
      v666 = (SLWordTagSet)*((_OWORD *)this + 2);
      goto LABEL_283;
    }
    if ((_WORD)v646)
    {
      if (!MTFEPOSResolver::RequireTagAndPOS(this, (MTFESpeechElement *)v649, 65, 0x7FFFFFFF))
        goto LABEL_283;
      goto LABEL_372;
    }
    LODWORD(var27) = (!*((_BYTE *)this + 12)
                   || ((v136 = SLWordTagSet::find(&v666), var8 = v649->var8, (var8 & 0x4000) == 0)
                     ? (v137 = 1)
                     : (v137 = v136),
                       v137 == 1))
                  && (var8 & 0x8000) == 0;
    v141 = SLWordTagSet::find(&v659);
    v142 = SLWordTagSet::find(&v653);
    if ((v649->var8 & 0x20) != 0 && var27 | v141 | v142)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v143 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v144 = (const char *)SLTagEng::Name((SLTagEng *)0x40);
        fprintf(v143, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v144, 707, v647, v664);
      }
    }
    else
    {
      if (!SLWordTagSet::find(&v659))
      {
        v147 = 65;
        goto LABEL_370;
      }
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v145 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v146 = (const char *)SLTagEng::Name((SLTagEng *)0x40);
        fprintf(v145, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v146, 714, v647, v664);
      }
    }
    LODWORD(var15) = 0;
    v147 = 64;
LABEL_370:
    if (!MTFEPOSResolver::RequireTagAndPOS(this, (MTFESpeechElement *)v649, v147, 0x7FFFFFFF))
    {
      LOWORD(v646) = 0;
      goto LABEL_283;
    }
    LOWORD(v646) = 0;
    goto LABEL_372;
  }
LABEL_283:
  if ((_DWORD)var15 != 255)
  {
    lpsrc = 0;
LABEL_314:
    v125 = 255;
    goto LABEL_315;
  }
LABEL_285:
  v113 = v649->var8;
  if ((v113 & 0x200) != 0)
  {
    v649->var8 = v113 ^ 0x200;
    var15 = v649->var15;
    if (((v647 >> var15) & 1) != 0)
    {
      v116 = 255;
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "TTS: Tuple forced illegal POS %s for \"%s\"\n", *(const char **)(MEMORY[0x1E0DA8E90] + 8 * var15), v39);
      LODWORD(var15) = SLFirstPOSInSet();
      v116 = v649->var15;
    }
    v645 = v116;
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v119 = "";
      if (v645 == 255)
        var27 = "";
      else
        var27 = "->";
      if (v645 != 255)
        v119 = *(const char **)(MEMORY[0x1E0DA8E90] + 8 * v645);
      v120 = (FILE *)*MEMORY[0x1E0C80C20];
      v121 = *(const char **)(MEMORY[0x1E0DA8E90] + 8 * var15);
      v122 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v120, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, v121, var27, v119, v122, 754, v647, v664);
    }
    goto LABEL_305;
  }
  if ((v647 & 0x100000) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v117 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 160);
      v118 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v117, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v118, 761, v647, v664);
    }
    lpsrc = 0;
    LODWORD(var15) = 20;
    goto LABEL_314;
  }
  if ((v647 & 0x200000) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v123 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 168);
      v124 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v123, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v124, 768, v647, v664);
    }
    lpsrc = 0;
    LODWORD(var15) = 21;
    goto LABEL_314;
  }
  if ((SLWordTagSet::find(&v659) & v647) == 1)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v114 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = (char *)*MEMORY[0x1E0DA8E90];
      v115 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v114, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v115, 775, v647, v664);
    }
LABEL_291:
    lpsrc = 0;
    LODWORD(var15) = 0;
    goto LABEL_314;
  }
  if (SLWordTagSet::find(&v659) && (v647 & 0x40) != 0 && (v664 & 1) != 0
    || ((v128 = SLWordTagSet::find(&v657), v129 = v665, v665 == 14) ? (v130 = v128) : (v130 = 0),
        v130 == 1 && (v647 & 0x40) != 0 && (v664 & 1) != 0))
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v138 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
      v139 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v138, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v139, 784, v647, v664);
    }
    goto LABEL_352;
  }
  if ((~v647 & 0x483) == 0)
  {
    v131 = 1 << v665;
    if (((1 << v665) & 0x22000) != 0 && (v664 & 0x22000) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v132 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v133 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v132, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v133, 801, v647, v664);
      }
      goto LABEL_291;
    }
    if (!(v664 & 0x8000 | v131 & 0x100000)
      && ((v131 & 0x14100) == 0 || (v654[1] & 0x10E) != 0)
      && ((v131 & 0x10E) != 0 || (v664 & 0x200000) == 0 || (v654[1] & 0x10E) != 0))
    {
      if ((v131 & 0x250012) != 0 && ((v664 & 0x40000) != 0 || (v664 & 0x110000) != 0 && (v654[1] & 0x10E) != 0))
      {
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v160 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = *(char **)(MEMORY[0x1E0DA8E90] + 80);
          v161 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
          fprintf(v160, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v161, 820, v647, v664);
        }
LABEL_436:
        lpsrc = 0;
        LODWORD(var15) = 10;
        goto LABEL_314;
      }
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v166 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 56);
        v167 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v166, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v167, 826, v647, v664);
      }
      goto LABEL_458;
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v148 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v149 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v148, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v149, 811, v647, v664);
    }
LABEL_439:
    lpsrc = 0;
    LODWORD(var15) = 1;
    goto LABEL_314;
  }
  if ((~v647 & 0x403) == 0)
  {
    if (((1 << v665) & 0x22000) != 0 && (v664 & 0x22000) == 0)
    {
LABEL_405:
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v158 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v159 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v158, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v159, 840, v647, v664);
      }
      goto LABEL_291;
    }
    if (((0x22000u >> v658) & 1) != 0 && v665 == 6)
    {
      v140 = v664;
      if ((v664 & 0x22000) == 0)
        goto LABEL_405;
    }
    else
    {
      if (v665 == 15)
      {
LABEL_437:
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v170 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
          v171 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
          fprintf(v170, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v171, 846, v647, v664);
        }
        goto LABEL_439;
      }
      if (v665 == 16)
      {
        v140 = v664;
        if ((v664 & 0x80000) == 0)
          goto LABEL_405;
      }
      else
      {
        v140 = v664;
      }
    }
    if ((v140 & 0x80000) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v168 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 80);
        v169 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v168, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v169, 852, v647, v664);
      }
      goto LABEL_436;
    }
    goto LABEL_437;
  }
  LODWORD(var27) = 73728;
  if ((~v647 & 0x12400) == 0)
  {
    if (((v644 & 1) != 0 || ((1 << v665) & 0xBE) != 0)
      && (v664 & 0x30000) == 0
      && (v654[1] & 0x30000) == 0
      && (v654[0] & 0x30000) == 0
      && (v638 & (v664 >> 5) & 1) == 0
      && ((v664 & 0x20) == 0 || (v637 & (v654[1] >> 7) & 1) == 0)
      && ((v664 & 0x41) != 0 || (v664 & 0x4040) != 0 && (v654[1] & 0x41) != 0))
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v204 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 104);
        v205 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v204, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v205, 868, v647, v664);
      }
LABEL_427:
      lpsrc = 0;
      LODWORD(var15) = 13;
      goto LABEL_314;
    }
    v150 = 1 << v665;
    if (((1 << v665) & 0x4000) != 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v164 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 80);
        v165 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v164, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v165, 874, v647, v664);
      }
      goto LABEL_436;
    }
    if ((((v665 == 255) & ~v644) != 0 || (v150 & 0x210033) != 0) && (v664 & 0x172000) != 0 && (v654[1] & 0x1CF) != 0
      || (v150 & 0x32) != 0 && (v664 & 0x10) != 0 && (v654[1] & 0x10000) != 0
      || (v150 & 0x290001) != 0 && (v664 & 0x10E) != 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v151 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 80);
        v152 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v151, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v152, 885, v647, v664);
      }
      goto LABEL_436;
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v177 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 128);
      v178 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v177, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v178, 891, v647, v664);
    }
    goto LABEL_453;
  }
  v153 = v647 & 0x8080;
  if (v153 == 32896)
  {
    v154 = v664;
    if ((v664 & 0x480) != 0 && (v664 & 0x2000) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v155 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 56);
        v156 = *(const char **)(MEMORY[0x1E0DA8E90] + 152);
        v157 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
        fprintf(v155, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "->", v156, v157, 907, v647, v664);
      }
      v11 = 66;
      v645 = 19;
      LODWORD(var15) = 7;
      goto LABEL_306;
    }
    if (v665 == 7)
    {
      v172 = strcmp(v9->var27, "OF");
      v173 = v640;
      if (v172)
        v173 = 1;
      if ((v173 & 1) != 0)
        goto LABEL_456;
    }
    else if ((v640 & 1) != 0)
    {
LABEL_456:
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v179 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 56);
        v180 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v179, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v180, 923, v647, v664);
      }
LABEL_458:
      v181 = 255;
LABEL_459:
      v645 = v181;
      LODWORD(var15) = 7;
LABEL_305:
      v11 = v646;
LABEL_306:
      lpsrc = 0;
      if ((_DWORD)var15 == 7 && v11 == 66 && ((v642 ^ 1) & 1) == 0)
      {
        if (*((_BYTE *)this + 9))
        {
          lpsrc = 0;
          v11 = 66;
        }
        else
        {
          v11 = 66;
          if (*((_BYTE *)this + 11))
          {
            lpsrc = 0;
          }
          else
          {
            lpsrc = 0;
            if (v649->var10 == 1)
              v11 = 66;
            else
              v11 = 67;
          }
        }
        LODWORD(var15) = 7;
      }
      goto LABEL_182;
    }
    if ((v154 & 0x32C00) == 0 && ((v154 & 0x10E) != 0 || (v154 & 0x4000) != 0 && (v654[1] & 0x10E) != 0))
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v194 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 120);
        v195 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v194, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v195, 916, v647, v664);
      }
      lpsrc = 0;
      LODWORD(var15) = 15;
      goto LABEL_314;
    }
    goto LABEL_456;
  }
  if ((~v647 & 0x12000) == 0)
  {
    if ((v664 & 0x103) == 1
      || (~v664 & 0x101) == 0 && (v654[1] & 0x10C) != 0
      || (v664 & 0x4040) != 0 && (v654[1] & 0x41) != 0 && (v654[1] & 0x100) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v162 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 104);
        v163 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v162, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v163, 939, v647, v664);
      }
      goto LABEL_427;
    }
    if ((~v664 & 3) == 0)
    {
      v191 = v638;
      if (((1 << v665) & 0x32) != 0)
        v191 = 1;
      if (v191 == 1)
      {
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v192 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = *(char **)(MEMORY[0x1E0DA8E90] + 104);
          v193 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
          fprintf(v192, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v193, 947, v647, v664);
        }
        goto LABEL_427;
      }
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v196 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 128);
      v197 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v196, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v197, 953, v647, v664);
    }
LABEL_453:
    lpsrc = 0;
    LODWORD(var15) = 16;
    goto LABEL_314;
  }
  if ((~v647 & 0x14200) == 0)
  {
    v174 = v640 ^ 1;
    if (v665 != 255)
      v174 = 1;
    if ((v174 & 1) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v175 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 72);
        v176 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v175, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v176, 965, v647, v664);
      }
LABEL_466:
      lpsrc = 0;
      LODWORD(var15) = 9;
      goto LABEL_314;
    }
    if ((v664 & 0x10C) != 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v185 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 128);
        v186 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v185, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v186, 972, v647, v664);
      }
      goto LABEL_453;
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v202 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 112);
      v203 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v202, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v203, 979, v647, v664);
    }
    goto LABEL_536;
  }
  if ((~v647 & 0x4201) == 0)
  {
    v182 = v640 ^ 1;
    if (v665 != 255)
      v182 = 1;
    if ((v182 & 1) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v183 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 72);
        v184 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v183, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v184, 991, v647, v664);
      }
      goto LABEL_466;
    }
    if (((0x22040u >> v665) & 1) != 0 && (v664 & 0x60) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v221 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v222 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v221, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v222, 998, v647, v664);
      }
      goto LABEL_291;
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v198 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 112);
      v199 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v198, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v199, 1005, v647, v664);
    }
LABEL_536:
    lpsrc = 0;
    LODWORD(var15) = 14;
    goto LABEL_314;
  }
  if ((v647 & 0x4043) == 0x4043)
  {
    v187 = 1 << v665;
    if (((1 << v665) & 0x108C00) != 0
      || (((1 << v658) & 0x3E) != 0 ? (v188 = 1) : (v188 = (v187 & 0x10001) == 0), ((v640 | v188) & 1) == 0))
    {
      if ((v664 & 0x10E) == 0)
      {
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v211 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
          v212 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
          fprintf(v211, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v212, 1020, v647, v664);
        }
        goto LABEL_439;
      }
    }
    if ((v187 & 0x22040) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v217 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 112);
        v218 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v217, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v218, 1041, v647, v664);
      }
      goto LABEL_536;
    }
    if ((v664 & 0x41) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v223 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v224 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v223, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v224, 1027, v647, v664);
      }
      goto LABEL_291;
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v189 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
      v190 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v189, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v190, 1034, v647, v664);
    }
LABEL_352:
    lpsrc = 0;
    LODWORD(var15) = 6;
    goto LABEL_314;
  }
  if ((~v647 & 0x4042) == 0)
  {
    if (v665 == 15
      || v9 && (!strcmp(v9->var27, "HELP") || !strcmp(v9->var27, "HELPS") || !strcmp(v9->var27, "HELPED"))
      || v660
      && ((var27 = v660->var27, !strcmp(v660->var27, "HELP")) && ((1 << v129) & 0x210000) != 0
       || !strcmp(var27, "HELPS") && ((1 << v129) & 0x210000) != 0
       || !strcmp(var27, "HELPED") && ((1 << v129) & 0x210000) != 0))
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v200 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
        v201 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v200, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v201, 1059, v647, v664);
      }
      goto LABEL_439;
    }
    if (v16 && !strcmp((const char *)&v16[3].var5, "FROM") && SLWordTagSet::find(&v652))
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v219 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 112);
        v220 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v219, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v220, 1066, v647, v664);
      }
      goto LABEL_536;
    }
    if ((v644 & 1) != 0
      || ((1 << v665) & 0x100D00) != 0
      || (v230 = 1 << v658, ((1 << v665) & 0x10001) != 0) && (v230 & 0x13E) == 0
      || v665 == 17 && v658 == 8
      || !v665 && v658 == 10
      || v665 == 14 && (v230 & 0x110001) != 0)
    {
      if ((v640 & 1) != 0
        || (v664 & 0x880) != 0
        || (v664 & 0x10E) == 0
        || (~v664 & 0x43) == 0 && (v654[1] & 0x80080) == 0x80080
        || (v654[1] & 0x10000) != 0 && (v654[0] & 0x10E) != 0)
      {
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v231 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
          v232 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
          fprintf(v231, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v232, 1086, v647, v664);
        }
        goto LABEL_439;
      }
    }
    if (((0x22040u >> v665) & 1) == 0 && ((v664 & 0x41) == 0 || (v664 & 0x10E) != 0))
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v256 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 112);
        v257 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v256, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v257, 1100, v647, v664);
      }
      goto LABEL_536;
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v237 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
      v238 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v237, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v238, 1093, v647, v664);
    }
    goto LABEL_352;
  }
  v206 = v647 & 0x880;
  if (v206 == 2176 && (v664 & 0x100000) == 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v207 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 56);
      v208 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v207, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v208, 1109, v647, v664);
    }
    goto LABEL_458;
  }
  if ((~v647 & 0x4800) == 0 && v665 != 255 && (((v664 & 0x414E) == 0) & ~v640) == 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v209 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 112);
      v210 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v209, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v210, 1118, v647, v664);
    }
    goto LABEL_536;
  }
  if (!strcmp(v39, "WIND")
    && ((v664 & 0x2000) != 0 && (v654[1] & 0x41) != 0 || (v664 & 0x10000) != 0 && (v654[1] & 0x480) != 0))
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v225 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v226 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v225, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v226, 1128, v647, v664);
    }
    goto LABEL_439;
  }
  if ((v647 & 0x10000) != 0 && v129 == 6 && (!strcmp(v39, "ONE") || !strcmp(v39, "ONES")))
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v233 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 128);
      v234 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v233, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v234, 1137, v647, v664);
    }
    goto LABEL_453;
  }
  v213 = strcmp(v39, "CLOSE");
  v214 = v640 ^ 1;
  if (v213)
    v214 = 1;
  if ((v214 & 1) == 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v215 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
      v216 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v215, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v216, 1147, v647, v664);
    }
    goto LABEL_352;
  }
  if ((v647 & 0x800) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v235 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 88);
      v236 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v235, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v236, 1153, v647, v664);
    }
    lpsrc = 0;
    LODWORD(var15) = 11;
    goto LABEL_314;
  }
  if ((v644 & ((unsigned __int16)(v647 & 0x1000) >> 12)) == 1)
  {
    v227 = v664;
    if ((v664 & 0x10C) != 0 || (v664 & 0x41) != 0 && (v654[1] & 0x10C) != 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v228 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 96);
        v229 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v228, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v229, 1164, v647, v664);
      }
      goto LABEL_628;
    }
LABEL_621:
    if (v227 < 0)
    {
      if (((v640 | ((v654[1] & 2) >> 1)) & 1) == 0)
      {
LABEL_623:
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v246 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = *(char **)(MEMORY[0x1E0DA8E90] + 80);
          v247 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
          fprintf(v246, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v247, 1179, v647, v664);
        }
        goto LABEL_436;
      }
    }
    else if (!v640)
    {
      goto LABEL_623;
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v248 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 96);
      v249 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v248, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v249, 1172, v647, v664);
    }
LABEL_628:
    lpsrc = 0;
    LODWORD(var15) = 12;
    goto LABEL_314;
  }
  if ((v647 & 0x1000) != 0)
  {
    v227 = v664;
    goto LABEL_621;
  }
  if ((v647 & 0x400) != 0 && (v664 & 0x150001) != 0 && (v654[1] & 0x10E) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v239 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 80);
      v240 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v239, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v240, 1186, v647, v664);
    }
    goto LABEL_436;
  }
  if ((~v647 & 0x4400) == 0 && ((v664 & 0x42) == 2 || (v664 & 0x410C) != 0 || (v664 & 3) == 2))
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v254 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 112);
      v255 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v254, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v255, 1196, v647, v664);
    }
    goto LABEL_536;
  }
  v636 = v647 & 0x63;
  if (v636 == 99 && !(_WORD)v646)
  {
    var3 = v649->var3;
    v242 = 1 << v129;
    LODWORD(var27) = 1 << v658;
    if (((1 << v129) & 0x22040) != 0)
    {
      v243 = v664;
      if (!((1 << v658) & 0x10C | v664 & 0x22041))
      {
        lpsrc = v649->var3;
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v244 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = (char *)*MEMORY[0x1E0DA8E90];
          v245 = (const char *)SLTagEng::Name(0);
          fprintf(v244, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v245, 1211, v647, v664);
        }
        LODWORD(var15) = 0;
LABEL_618:
        v11 = 0;
        goto LABEL_180;
      }
    }
    else
    {
      if (v129 != 14 || (var27 & 0x26000) == 0)
      {
LABEL_666:
        if ((v242 & 0x118100) == 0
          && (!v9 || strcmp(v9->var27, "HELP") && strcmp(v9->var27, "HELPS") && strcmp(v9->var27, "HELPED"))
          && ((var27 & 0x118100) == 0 || v129 != 14))
        {
          if (!v660
            || ((var27 = v660->var27, v269 = strcmp(v660->var27, "HELP"), v270 = v242 & 0x210000, (v242 & 0x210000) == 0)
             || v269)
            && ((v271 = strcmp(var27, "HELPS"), !v270) || v271)
            && ((v272 = strcmp(var27, "HELPED"), !v270) || v272))
          {
            lpsrc = var3->var6;
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v273 = (FILE *)*MEMORY[0x1E0C80C20];
              var27 = *(char **)(MEMORY[0x1E0DA8E90] + 40);
              v274 = (const char *)SLTagEng::Name(0);
              fprintf(v273, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v274, 1243, v647, v664);
            }
            v11 = 0;
LABEL_739:
            LODWORD(var15) = 5;
            goto LABEL_180;
          }
        }
        lpsrc = var3;
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v262 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
          v263 = (const char *)SLTagEng::Name(0);
          fprintf(v262, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v263, 1233, v647, v664);
        }
        v11 = 0;
LABEL_743:
        LODWORD(var15) = 1;
        goto LABEL_180;
      }
      v243 = v664;
    }
    if ((v243 & 0x41) != 0)
    {
      lpsrc = var3->var6;
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v260 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
        v261 = (const char *)SLTagEng::Name(0);
        fprintf(v260, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v261, 1219, v647, v664);
      }
      v11 = 0;
      goto LABEL_747;
    }
    goto LABEL_666;
  }
  if (!strcmp(v39, "USED"))
  {
    if ((v664 & 0x8000) != 0 && ((v654[1] & 0xE) != 0 || (v654[1] & 0x4000) != 0 && (v654[0] & 0xE) != 0))
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v267 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
        v268 = (const char *)SLTagEng::Name((SLTagEng *)0x41F);
        fprintf(v267, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v268, 1256, v647, v664);
      }
      lpsrc = 0;
      v11 = 1055;
      goto LABEL_743;
    }
    if ((((1 << v129) & 0x22040) != 0 || v129 == 14 && ((1 << v658) & 0x26000) != 0)
      && (v664 & 0x41) != 0
      && (v664 & 0x40C00) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v258 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
        v259 = (const char *)SLTagEng::Name((SLTagEng *)0x41E);
        fprintf(v258, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v259, 1264, v647, v664);
      }
LABEL_746:
      lpsrc = 0;
      v11 = 1054;
LABEL_747:
      LODWORD(var15) = 6;
      goto LABEL_180;
    }
    if ((v664 & 0x8000) != 0 && (v654[1] & 0x10) != 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v295 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
        v296 = (const char *)SLTagEng::Name((SLTagEng *)0x41E);
        fprintf(v295, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v296, 1271, v647, v664);
      }
      goto LABEL_746;
    }
    if (((1 << v129) & 0x4003C) != 0)
    {
      if ((v664 & 1) != 0)
      {
LABEL_740:
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v293 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
          v294 = (const char *)SLTagEng::Name((SLTagEng *)0x41E);
          fprintf(v293, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v294, 1286, v647, v664);
        }
        lpsrc = 0;
        v11 = 1054;
        goto LABEL_743;
      }
    }
    else if (v129 != 14 || (v664 & 1) != 0 || ((1 << v658) & 0x4003C) == 0)
    {
      goto LABEL_740;
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v291 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 40);
      v292 = (const char *)SLTagEng::Name((SLTagEng *)0x41E);
      fprintf(v291, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v292, 1279, v647, v664);
    }
    lpsrc = 0;
    v11 = 1054;
    goto LABEL_739;
  }
  v250 = v153 == 128 || v206 == 128;
  v251 = v250;
  if (v250)
  {
    if (((v640 | ((unsigned __int16)(v664 & 0x800) >> 11)) & 1) != 0)
      goto LABEL_642;
    v252 = v638;
    if ((v664 & 0x4001) != 0x4000)
      v252 = 0;
    if (v252)
    {
LABEL_642:
      if (!*((_BYTE *)this + 9))
      {
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v283 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = *(char **)(MEMORY[0x1E0DA8E90] + 56);
          v284 = *(const char **)(MEMORY[0x1E0DA8E90] + 152);
          v285 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
          fprintf(v283, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "->", v284, v285, 1305, v647, v664);
        }
        goto LABEL_718;
      }
    }
  }
  v253 = v658;
  if (v153 != 128)
  {
    if (v206 != 128 || v658 != 19 || v129 != 11)
    {
      if (!v251)
        goto LABEL_706;
      goto LABEL_701;
    }
    goto LABEL_673;
  }
  if (v658 != 19)
    goto LABEL_701;
  if (v129 == 11)
  {
LABEL_673:
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v264 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 56);
      v265 = *(const char **)(MEMORY[0x1E0DA8E90] + 152);
      v266 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v264, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "->", v265, v266, 1315, v647, v664);
    }
    goto LABEL_718;
  }
  v253 = 19;
LABEL_701:
  if ((((1 << v129) & 0x32) != 0 || ((1 << v129) & 0x210000) != 0 && ((1 << v253) & 0x32) != 0)
    && ((v664 & 0x2080) == 0x80 || (v664 & 0x236441) == 0))
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v280 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 56);
      v281 = *(const char **)(MEMORY[0x1E0DA8E90] + 152);
      v282 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v280, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "->", v281, v282, 1332, v647, v664);
    }
    goto LABEL_718;
  }
LABEL_706:
  if ((v647 & 0x80080) == 0x80080 && v129 == 14)
  {
    if ((v664 & 0x10C00) != 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v275 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 56);
        v276 = *(const char **)(MEMORY[0x1E0DA8E90] + 152);
        v277 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v275, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "->", v276, v277, 1342, v647, v664);
      }
LABEL_718:
      v181 = 19;
      goto LABEL_459;
    }
LABEL_712:
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v278 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 56);
      v279 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v278, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v279, 1348, v647, v664);
    }
    goto LABEL_458;
  }
  if ((v647 & 0x80080) == 0x80080)
    goto LABEL_712;
  v286 = (~v647 & 0x4002) == 0 && v129 == 255;
  v287 = v286;
  v288 = v640;
  if (!v286)
    v288 = 0;
  if (v288 == 1)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v289 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v290 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v289, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v290, 1359, v647, v664);
    }
    goto LABEL_439;
  }
  if (v129 != 255)
  {
    v302 = v129 != 11 || v253 != 255;
    if ((v647 & 0x20) == 0)
      v302 = 1;
    if (((v302 | v640 ^ 1) & 1) != 0)
    {
      v303 = v129 == 0;
      v304 = v647 & 0x43;
      v633 = v304 == 67;
      v305 = v304 == 67 && v129 == 0;
      if ((v640 & v305 & 1) != 0)
      {
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v306 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = (char *)*MEMORY[0x1E0DA8E90];
          v307 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
          fprintf(v306, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v307, 1377, v647, v664);
        }
        goto LABEL_291;
      }
      v634 = (~v647 & 0x4040) == 0;
      v635 = (~v647 & 3) == 0;
      goto LABEL_789;
    }
LABEL_772:
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v308 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 40);
      v309 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v308, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v309, 1365, v647, v664);
    }
    goto LABEL_774;
  }
  v297 = v640 ^ 1;
  if ((v647 & 0x20) == 0)
    v297 = 1;
  if ((v297 & 1) == 0)
    goto LABEL_772;
  v634 = (~v647 & 0x4040) == 0;
  v298 = v638;
  if ((~v647 & 0x4040) != 0)
    v298 = 0;
  if (v298)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v299 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
      v300 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v299, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v300, 1371, v647, v664);
    }
    goto LABEL_352;
  }
  v635 = (v647 & 3) == 3;
  if ((v647 & 3) == 3 && ((v638 & HIWORD(v664) & 1) != 0 || (v664 & 2) != 0 && (v637 & (BYTE1(v654[1]) >> 6)) == 1))
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v310 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v311 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v310, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v311, 1392, v647, v664);
    }
    goto LABEL_439;
  }
  if ((v647 & 0x43) == 0x43)
  {
    if ((v664 & 0x22000) != 0 && (v654[1] & v637) == 1)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v312 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
        v313 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v312, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v313, 1400, v647, v664);
      }
      goto LABEL_439;
    }
    v303 = 0;
    v304 = 67;
    v633 = 1;
  }
  else
  {
    v304 = v647 & 0x43;
    v633 = 0;
    v303 = 0;
  }
LABEL_789:
  if (((v644 | v10) & 1) != 0)
  {
    if (!v635)
    {
      v635 = 0;
      goto LABEL_805;
    }
  }
  else
  {
    v314 = v253 == 255 && v129 == 11;
    v315 = v635;
    if (!v314)
      v315 = 0;
    if (!v315)
      goto LABEL_805;
  }
  if (((v640 | v638) & 1) != 0)
  {
    if ((_WORD)v646)
      goto LABEL_805;
LABEL_803:
    var27 = (char *)v649->var3;
    LODWORD(var15) = SLFirstPOSInSet();
    lpsrc = (MTFESpeechElement *)var27;
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v316 = (FILE *)*MEMORY[0x1E0C80C20];
      v317 = *(const char **)(MEMORY[0x1E0DA8E90] + 8 * var15);
      v318 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v316, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, v317, "", "", v318, 1409, v647, v664);
    }
    goto LABEL_618;
  }
  if (!(_WORD)v646 && v637)
    goto LABEL_803;
LABEL_805:
  if ((v647 & 0x400) != 0 && v129 == 255 && (v664 & 0x10000) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v325 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 80);
      v326 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v325, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v326, 1421, v647, v664);
    }
    goto LABEL_436;
  }
  v319 = v129 == 12 || v129 == 255;
  if (v319 && (v647 & 0x100) != 0 && (v654[1] & 0x10E) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v320 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 64);
      v321 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v320, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v321, 1438, v647, v664);
    }
LABEL_817:
    lpsrc = 0;
    LODWORD(var15) = 8;
    goto LABEL_314;
  }
  if (v287)
  {
    if ((v664 & 0x10E) != 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v322 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 112);
        v323 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v322, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v323, 1444, v647, v664);
      }
      goto LABEL_536;
    }
  }
  else if (v129 != 11 && v129 != 255)
  {
    v632 = v647 & 0x10;
    v324 = (v647 & 0x10) == 0;
    goto LABEL_834;
  }
  v632 = v647 & 0x10;
  v324 = v632 == 0;
  if ((v647 & 0x10) != 0)
  {
    if ((v664 & 0x320E0) != 0 || (v664 & 0x4000) != 0 && (v654[1] & 0x320E0) != 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v327 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 32);
        v328 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v327, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v328, 1452, v647, v664);
      }
      goto LABEL_832;
    }
    v331 = v644;
    if (v129 != 255)
      v331 = 1;
    if ((v331 & 1) == 0)
    {
      if ((v664 & 0x41) != 0)
      {
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v332 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = *(char **)(MEMORY[0x1E0DA8E90] + 32);
          v333 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
          fprintf(v332, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v333, 1460, v647, v664);
        }
        goto LABEL_832;
      }
      v324 = 0;
      goto LABEL_836;
    }
  }
  if (v129 != 255)
  {
LABEL_834:
    if (v129 != 11 || v253 != 255)
      goto LABEL_852;
  }
LABEL_836:
  if ((v633 || v635)
    && ((v664 & 0x222400) != 0
     || (v664 & 0x10000) != 0 && (v654[1] & 0x80) != 0
     || (v664 & 0x4000) != 0 && (v654[1] & 0x262080) != 0))
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v329 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v330 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v329, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v330, 1472, v647, v664);
    }
    goto LABEL_439;
  }
LABEL_852:
  v334 = v644 ^ 1;
  if ((v647 & 2) == 0)
    v334 = 1;
  if ((v334 & 1) == 0
    && (~v664 & 0x42) != 0
    && (v664 & 0x11413C) == 0
    && (v654[1] & 0x413C) == 0
    && ((v664 & 1) == 0 || (v654[1] & 0x10E) == 0))
  {
    if ((v664 & 0x80) != 0)
    {
      if (((v640 | ((unsigned __int16)(v654[1] & 0x2000) >> 13)) & 1) != 0)
        goto LABEL_860;
    }
    else if ((v640 & 1) != 0)
    {
      goto LABEL_860;
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v348 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v349 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v348, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v349, 1488, v647, v664);
    }
    goto LABEL_439;
  }
LABEL_860:
  v335 = v647 & 0x42;
  v336 = v644;
  if (v335 != 66)
    v336 = 0;
  if ((v640 & v336) == 1)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v337 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
      v338 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v337, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v338, 1496, v647, v664);
    }
    goto LABEL_352;
  }
  if (v129 == 255 && (v647 & 0x40C0) == 0x40 && (~v664 & 0x41) == 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v339 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
      v340 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v339, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v340, 1503, v647, v664);
    }
    goto LABEL_352;
  }
  if (v129 == 255 && (v647 & 0x4000) != 0 && (v664 & 0x51) == 0x50)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v341 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 112);
      v342 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v341, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v342, 1510, v647, v664);
    }
    goto LABEL_536;
  }
  v343 = v647 & 0x101;
  if (v343 == 257)
  {
    if (((1 << v129) & 0x2000) != 0
      || ((1 << v129) & 0x40) != 0 && v253 == 13
      || v129 == 17 && ((v664 & 0x20000) == 0 || (v654[1] & 2) == 0) && ((v664 & 4) == 0 || (v654[1] & 0x20) == 0))
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v344 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v345 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v344, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v345, 1526, v647, v664);
      }
      goto LABEL_291;
    }
    if ((v664 & 0x10E) != 0
      || (v664 & 0x20000) != 0 && (v654[1] & 0x10E) != 0
      || (v664 & 0x10000) != 0 && (v654[1] & 0x10E) != 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v346 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 64);
        v347 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v346, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v347, 1535, v647, v664);
      }
      goto LABEL_817;
    }
  }
  if (v129 == 5 && (v647 & 0x20) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v350 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 40);
      v351 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v350, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v351, 1554, v647, v664);
    }
LABEL_774:
    lpsrc = 0;
    LODWORD(var15) = 5;
    goto LABEL_314;
  }
  if ((v647 & 8) != 0 && (v664 & 0x8000) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v358 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 24);
      v359 = *(const char **)(MEMORY[0x1E0DA8E90] + 8);
      v360 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
      fprintf(v358, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "->", v359, v360, 1564, v647, v664);
    }
    lpsrc = 0;
    v11 = 66;
    LODWORD(var15) = 3;
    goto LABEL_925;
  }
  v353 = v129 == 14 && v253 == 15;
  if ((v129 == 15 || v353) && (v647 & 0x10C) != 0 && (v664 & 0x20) == 0)
  {
    LODWORD(var15) = SLFirstPOSInSet();
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v354 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8 * var15);
      v355 = *(const char **)(MEMORY[0x1E0DA8E90] + 8);
      v356 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
      fprintf(v354, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "->", v355, v356, 1575, v647, v664);
    }
LABEL_1019:
    v11 = 66;
    v645 = 1;
    goto LABEL_306;
  }
  v357 = 1 << v129;
  if (((1 << v129) & 0x110401) != 0)
  {
    if ((v647 & 0x100) == 0)
    {
      if ((v357 & 0x118441) != 0)
        goto LABEL_950;
LABEL_937:
      if (v129 != 14 || ((1 << v253) & 0x118441) == 0 || (v647 & 0x100) == 0)
        goto LABEL_945;
      goto LABEL_940;
    }
  }
  else if (v129 != 14 || ((1 << v253) & 0x110401) == 0 || (v647 & 0x100) == 0)
  {
    goto LABEL_934;
  }
  if ((~v664 & 0x43) == 0 || (v664 & 0x4000) != 0 && (~v654[1] & 0x43) == 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v361 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 64);
      v362 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v361, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v362, 1586, v647, v664);
    }
    goto LABEL_817;
  }
LABEL_934:
  if ((v357 & 0x118441) == 0)
    goto LABEL_937;
  if ((v647 & 0x100) == 0)
    goto LABEL_950;
LABEL_940:
  if ((v664 & 0x10E) != 0 || (v664 & 0x4000) != 0 && (v654[1] & 0x10E) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v363 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 64);
      v364 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v363, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v364, 1597, v647, v664);
    }
    goto LABEL_817;
  }
LABEL_945:
  if ((v357 & 0x1C00) != 0 && (v647 & 0x100) != 0 && (v664 & 0x10E) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v365 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 64);
      v366 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v365, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v366, 1605, v647, v664);
    }
    goto LABEL_817;
  }
LABEL_950:
  if (v129 == 8)
    goto LABEL_958;
  if (v253 != 8)
  {
    if (v129 != 18)
    {
      if (v253 != 18 || v129 != 14)
        goto LABEL_964;
      goto LABEL_962;
    }
LABEL_958:
    if ((v647 & 0x108) != 0)
      goto LABEL_963;
    goto LABEL_964;
  }
  if ((v357 & 0x14000) == 0 && v129 != 18)
    goto LABEL_964;
LABEL_962:
  if ((v647 & 0x108) != 0)
  {
LABEL_963:
    if ((v664 & 0x30) == 0)
    {
      LODWORD(var15) = SLFirstPOSInSet();
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v375 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8 * var15);
        v376 = *(const char **)(MEMORY[0x1E0DA8E90] + 8);
        v377 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
        fprintf(v375, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "->", v376, v377, 1618, v647, v664);
      }
      goto LABEL_1019;
    }
  }
LABEL_964:
  if (v129 == 12 && (v647 & 0x10C) != 0 && (v664 & 0x10000) != 0)
  {
    LODWORD(var15) = SLFirstPOSInSet();
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v393 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8 * var15);
      v394 = *(const char **)(MEMORY[0x1E0DA8E90] + 8);
      v395 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
      fprintf(v393, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "->", v394, v395, 1629, v647, v664);
    }
    goto LABEL_1019;
  }
  if ((v357 & 0x13E) == 0)
  {
    v371 = v640 ^ 1;
    if ((v647 & 0x10C) == 0)
      v371 = 1;
    if ((v371 & 1) == 0)
    {
      LODWORD(var15) = SLFirstPOSInSet();
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v372 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8 * var15);
        v373 = *(const char **)(MEMORY[0x1E0DA8E90] + 8);
        v374 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
        fprintf(v372, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "->", v373, v374, 1641, v647, v664);
      }
      goto LABEL_1019;
    }
    if ((v647 & 0x100) != 0 && (v664 & 0x13E) == 0 && (v654[1] & 0x13E) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v390 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 64);
        v391 = *(const char **)(MEMORY[0x1E0DA8E90] + 8);
        v392 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
        fprintf(v390, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "->", v391, v392, 1655, v647, v664);
      }
      lpsrc = 0;
      v11 = 66;
      LODWORD(var15) = 8;
LABEL_925:
      v70 = 1;
      goto LABEL_181;
    }
  }
  if ((v357 & 0x22000) != 0)
  {
    if ((v647 & 0x10C) == 0)
      goto LABEL_986;
  }
  else
  {
    if ((v647 & 0x10C) == 0)
      goto LABEL_986;
    if (((v640 | ((unsigned __int16)(v664 & 0x800) >> 11)) & 1) != 0 || (v638 & (v664 >> 14)) == 1)
    {
      LODWORD(var15) = SLFirstPOSInSet();
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v378 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8 * var15);
        v379 = *(const char **)(MEMORY[0x1E0DA8E90] + 8);
        v380 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
        fprintf(v378, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "->", v379, v380, 1667, v647, v664);
      }
      goto LABEL_1019;
    }
  }
  if ((((v664 & 0x800) == 0) & ~v640) == 0)
  {
    LODWORD(var15) = SLFirstPOSInSet();
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v368 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8 * var15);
      v369 = (const char *)*MEMORY[0x1E0DA8E90];
      v370 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
      fprintf(v368, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "->", v369, v370, 1677, v647, v664);
    }
    v645 = 0;
    v11 = 66;
    goto LABEL_306;
  }
LABEL_986:
  if ((v357 & 0x110C00) != 0 && (v647 & 0x100) != 0 && (v664 & 0x4000) != 0 && (v654[1] & 0xE) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v381 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 64);
      v382 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v381, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v382, 1686, v647, v664);
    }
    goto LABEL_817;
  }
  v383 = 1 << v253;
  if (((1 << v253) & 0x110000) != 0 && (v357 & 0xE) != 0 && (v647 & 0x100) != 0 && (v664 & 0xE) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v384 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 64);
      v385 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v384, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v385, 1695, v647, v664);
    }
    goto LABEL_817;
  }
  if (v253 == 12
    && (v357 & 0x41) != 0
    && (v647 & 0x100) != 0
    && ((v664 & 0x10000) != 0 && (v654[1] & 0xE) != 0 || (v664 & 0x22000) != 0 && (v654[1] & 0xE) != 0))
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v386 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 64);
      v387 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v386, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v387, 1704, v647, v664);
    }
    goto LABEL_817;
  }
  if (v343 == 257)
  {
    if ((v664 & 0xE) != 0 || (v664 & 0x4000) != 0 && (v654[1] & 0xE) != 0)
      goto LABEL_1009;
    if (v129 == 11)
    {
      if ((v664 & 0x10000) == 0 || (v654[1] & 0xE) == 0)
        goto LABEL_1030;
LABEL_1009:
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v388 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 64);
        v389 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v388, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v389, 1714, v647, v664);
      }
      goto LABEL_817;
    }
  }
  if (v129 == 15 && (v647 & 2) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v396 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v397 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v396, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v397, 1725, v647, v664);
    }
    goto LABEL_439;
  }
LABEL_1030:
  if (((v357 & 0x4001C) != 0 || v129 == 14 && (v383 & 0x4001C) != 0) && (v647 & 0x20) != 0 && (v664 & 1) == 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v398 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 40);
      v399 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v398, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v399, 1735, v647, v664);
    }
    goto LABEL_774;
  }
  if ((v357 & 0x40024) == 0 && ((v383 & 0x40024) == 0 || v129 != 14))
    v324 = 1;
  if (((v640 | v324) & 1) == 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v401 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 32);
      v402 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v401, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v402, 1743, v647, v664);
    }
    goto LABEL_832;
  }
  if ((v357 & 0x4000C) != 0)
  {
    if (v636 != 66)
      goto LABEL_1054;
LABEL_1052:
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v403 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
      v404 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v403, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v404, 1752, v647, v664);
    }
    goto LABEL_352;
  }
  if (v129 == 14 && v636 == 66 && (v383 & 0x4000C) != 0)
    goto LABEL_1052;
LABEL_1054:
  if ((v357 & 0x22080) != 0)
  {
    if (v636 != 66)
      goto LABEL_1063;
  }
  else if (v129 != 14 || v636 != 66 || (v383 & 0x22080) == 0)
  {
    goto LABEL_1063;
  }
  if ((((v664 & 1) == 0) & ~v640) == 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v405 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
      v406 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v405, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v406, 1761, v647, v664);
    }
    goto LABEL_352;
  }
LABEL_1063:
  if ((v303 || v129 == 14 && !v253) && (v647 & 0x62) == 0x60 && (((v664 & 0x80) == 0) & ~v640) == 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v407 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 40);
      v408 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v407, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v408, 1770, v647, v664);
    }
    goto LABEL_774;
  }
  if ((v357 & 0x40100) != 0)
  {
    if ((v647 & 2) == 0)
    {
      v409 = v383 & 0x40100;
      goto LABEL_1078;
    }
LABEL_1076:
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v410 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v411 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v410, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v411, 1778, v647, v664);
    }
    goto LABEL_439;
  }
  v409 = v383 & 0x40100;
  if (v129 == 14 && v409 && (v647 & 2) != 0)
    goto LABEL_1076;
LABEL_1078:
  if (v409 && (v357 & 0x310000) != 0 && (v647 & 2) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v412 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v413 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v412, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v413, 1785, v647, v664);
    }
    goto LABEL_439;
  }
  if (v632)
  {
    if ((v664 & 0x21) == 0x20 && (v654[1] & 1) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v414 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 32);
        v415 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v414, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v415, 1792, v647, v664);
      }
LABEL_832:
      lpsrc = 0;
      LODWORD(var15) = 4;
      goto LABEL_314;
    }
    if ((v357 & 0x4090) != 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v416 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 32);
        v417 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v416, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v417, 1800, v647, v664);
      }
      goto LABEL_832;
    }
    if (v129 == 10)
    {
      v418 = v640;
      if ((v664 & 0x10E) != 0)
        v418 = 1;
      if ((v418 & 1) == 0)
      {
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v436 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = *(char **)(MEMORY[0x1E0DA8E90] + 32);
          v437 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
          fprintf(v436, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v437, 1808, v647, v664);
        }
        goto LABEL_832;
      }
    }
    if (v303 && SLWordTagSet::find(&v653) && (v654[1] & 0x4040) != 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v419 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 32);
        v420 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v419, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v420, 1815, v647, v664);
      }
      goto LABEL_832;
    }
  }
  v631 = v665;
  if (v665 == 17)
  {
    if ((~v647 & 0x62) != 0)
    {
LABEL_1109:
      v629 = 0;
      goto LABEL_1110;
    }
LABEL_1106:
    if ((((v664 & 0x80) == 0) & ~v640) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v421 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 40);
        v422 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v421, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v422, 1824, v647, v664);
      }
      goto LABEL_774;
    }
    goto LABEL_1109;
  }
  if (v665 == 14 && v658 == 17 && (v647 & 0x62) == 0x62)
    goto LABEL_1106;
  v629 = v665 == 0;
  v428 = v633;
  if (v665)
    v428 = 0;
  if (v428)
  {
    if ((v664 & 0x80) != 0 && (v654[1] & 0x32001) != 0)
      goto LABEL_1619;
    if ((v664 & 3) == 1)
    {
      v429 = v638;
      if ((v654[1] & 0x10E) != 0)
        v429 = 1;
      if (v429 == 1)
      {
LABEL_1619:
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v430 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
          v431 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
          fprintf(v430, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v431, 1834, v647, v664);
        }
        goto LABEL_352;
      }
    }
    v629 = 1;
  }
LABEL_1110:
  v423 = v658;
  if (v658 != 255)
  {
    v424 = v629;
    if (((0x22041u >> v658) & 1) != 0)
      v424 = 0;
    if (v424 && v635)
    {
      if ((v664 & 0x80) != 0 && (v654[1] & 0x32001) != 0)
        goto LABEL_1620;
      if ((v664 & 3) == 1)
      {
        v425 = v638;
        if ((v654[1] & 0x10E) != 0)
          v425 = 1;
        if (v425 == 1)
        {
LABEL_1620:
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v426 = (FILE *)*MEMORY[0x1E0C80C20];
            var27 = (char *)*MEMORY[0x1E0DA8E90];
            v427 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
            fprintf(v426, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v427, 1846, v647, v664);
          }
          goto LABEL_291;
        }
      }
    }
  }
  v630 = 1 << v665;
  if (((1 << v665) & 0x118401) != 0)
  {
    if (v636 != 66)
      goto LABEL_1140;
  }
  else if (v636 != 66 || v665 != 14 || ((1 << v658) & 0x118401) == 0)
  {
    goto LABEL_1140;
  }
  if (((v640 | v664) & 1) == 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v434 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v435 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v434, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v435, 1856, v647, v664);
    }
    goto LABEL_439;
  }
LABEL_1140:
  if ((v630 & 0x15C500) == 0 && (v665 != 14 || ((1 << v658) & 0x158500) == 0) || v304 != 3)
    goto LABEL_1166;
  if ((v664 & 0x480) != 0 || (~v664 & 3) == 0 && ((BYTE2(v654[1]) | v638) & 1) != 0)
    goto LABEL_1145;
  if ((v664 & 0x101) == 1 && (v654[1] & 0x10C) != 0)
    goto LABEL_1165;
  if ((v664 & 0x10C) == 0)
  {
    if ((v664 & 0x22) == 2)
    {
LABEL_1165:
      v304 = 3;
      goto LABEL_1166;
    }
    goto LABEL_1163;
  }
  v438 = v638;
  if ((v654[1] & 0x22) != 0)
    v438 = 1;
  v304 = 3;
  if ((v664 & 0x22) != 2 && (v438 & 1) == 0)
  {
LABEL_1163:
    if ((v664 & 1) != 0 && (v654[1] & 0x22) == 2)
      goto LABEL_1165;
LABEL_1145:
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v432 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v433 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v432, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v433, 1871, v647, v664);
    }
    goto LABEL_439;
  }
LABEL_1166:
  if (((1 << v658) & 0xC00) != 0)
  {
    v439 = v635;
    if ((v630 & 0x110000) == 0)
      v439 = 0;
    if (v439)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v440 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
        v441 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v440, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v441, 1880, v647, v664);
      }
      goto LABEL_439;
    }
  }
  if (v635 && (v638 & (v664 >> 7)) == 1)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v442 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v443 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v442, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v443, 1888, v647, v664);
    }
    goto LABEL_439;
  }
  v444 = !v635;
  if ((v630 & 0xC00) == 0)
    v444 = 1;
  if (((v444 | v640) & 1) == 0
    && v16
    && strcmp((const char *)&v16[3].var5, "OF")
    && (v664 & 0x10E) == 0
    && (v654[1] & 0x10E) == 0
    && (v654[0] & 0x10E) == 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v459 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v460 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v459, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v460, 1898, v647, v664);
    }
    goto LABEL_439;
  }
  if (v635 && v629 && (v664 & 0x2000) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v454 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v455 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v454, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v455, 1907, v647, v664);
    }
    goto LABEL_439;
  }
  if (v631 == 20)
  {
    v445 = v635;
    if (!v635)
      goto LABEL_1186;
LABEL_1211:
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v452 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v453 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v452, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v453, 1915, v647, v664);
    }
    goto LABEL_439;
  }
  v448 = v631 == 14 && v423 == 20;
  v449 = !v635;
  if (!v448)
    v449 = 1;
  if ((v449 & 1) == 0)
    goto LABEL_1211;
  if (v635 && v629 && (v664 & 0x4000) != 0 && (v638 | (LOBYTE(v654[1]) >> 7)) == 1)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v450 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v451 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v450, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v451, 1924, v647, v664);
    }
    goto LABEL_439;
  }
  v445 = v631 == 14;
  v456 = v423 != 2 && v631 == 14;
  if (v456 && v633)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v457 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v458 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v457, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v458, 1931, v647, v664);
    }
    goto LABEL_439;
  }
  if (((v631 == 255) & ~(_BYTE)v644 & v633) == 1)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v461 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
      v462 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v461, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v462, 1938, v647, v664);
    }
    goto LABEL_352;
  }
  if (v631 != 1)
  {
LABEL_1186:
    v446 = v423 == 1 && v445;
    if (!v446 || (v647 & 0x51) != 0x51)
    {
      v447 = (~v647 & 0x60) == 0 && v446;
      if (!v447 || (v664 & 1) == 0)
      {
        if (v304 != 66)
          LOBYTE(v446) = 0;
        if (!v446)
          goto LABEL_1243;
        goto LABEL_1235;
      }
LABEL_1240:
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v468 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
        v469 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v468, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v469, 1963, v647, v664);
      }
      goto LABEL_352;
    }
LABEL_1230:
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v463 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 32);
      v464 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v463, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v464, 1955, v647, v664);
    }
    goto LABEL_832;
  }
  if ((~v647 & 0x51) == 0)
    goto LABEL_1230;
  if ((~v647 & 0x60) == 0 && (v664 & 1) != 0)
    goto LABEL_1240;
  if (v304 != 66)
    goto LABEL_1243;
LABEL_1235:
  v465 = v640 ^ 1;
  if ((v647 & 0x62) != 0x42)
    v465 = 1;
  if ((v465 & 1) == 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v466 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
      v467 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v466, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v467, 1973, v647, v664);
    }
    goto LABEL_352;
  }
  v304 = 66;
LABEL_1243:
  if ((v630 & 0xE) != 0)
    goto LABEL_1248;
  v470 = !v445;
  if (((1 << v423) & 0xE) == 0)
    v470 = 1;
  if ((v470 & 1) == 0)
  {
LABEL_1248:
    if ((v647 & 0x4041) == 0x41 && v304 == 66)
    {
      if ((v664 & 0x80) == 0)
      {
        if ((v664 & 1) != 0)
        {
          if (((v640 | SLWordTagSet::find(&v653)) & 1) == 0)
          {
            v631 = v665;
            v630 = 1 << v665;
            goto LABEL_1257;
          }
        }
        else if (!v640)
        {
          goto LABEL_1257;
        }
      }
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v471 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
        v472 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v471, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v472, 1985, v647, v664);
      }
      goto LABEL_352;
    }
  }
LABEL_1257:
  if (((v630 & 0x22040) != 0 || v631 == 14 && ((1 << v658) & 0x220C0) != 0) && v304 == 66)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v473 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
      v474 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v473, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v474, 1995, v647, v664);
    }
    goto LABEL_352;
  }
  v475 = !v635;
  if (v631)
    v475 = 1;
  if ((v475 & 1) == 0)
  {
    if ((v664 & 0x8000) != 0)
    {
      if ((~v664 & 3) == 0 || (v654[1] & 3) != 1)
        goto LABEL_1291;
    }
    else if ((~v664 & 3) == 0)
    {
      goto LABEL_1291;
    }
    if ((v664 & 0x32000) == 0 || (v654[1] & 0x41) == 0)
    {
      v476 = v664 & 0x80080;
      if ((v664 & 0x80) != 0)
      {
        if (v476 == 0x80000 || (v654[1] & 0x10) != 0)
          goto LABEL_1295;
      }
      else if (v476 == 0x80000)
      {
        goto LABEL_1295;
      }
      if (((v664 & 2) == 0 || (v654[1] & 0x22080) == 0 || (v654[0] & 0x51) == 0)
        && ((v664 & 0x800) == 0 || (v654[1] & 3) != 2 || (v654[0] & 0x22041) == 0)
        && ((v664 & 1) == 0 || (v654[1] & 0x80) == 0 || (v654[0] & 0x22041) == 0)
        && ((v664 & 0x40) == 0 || ((v638 | ((BYTE1(v654[1]) & 4) >> 2)) & 1) == 0)
        && ((v664 & 0x41) == 0 || (v654[1] & 1) == 0))
      {
        goto LABEL_1291;
      }
    }
LABEL_1295:
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v479 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v480 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v479, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v480, 2015, v647, v664);
    }
    goto LABEL_439;
  }
LABEL_1291:
  if (v304 == 2 && (v664 & 0x22000) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v477 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v478 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v477, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v478, 2022, v647, v664);
    }
    goto LABEL_439;
  }
  if ((v647 & 2) != 0 && v631 == 20)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v481 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v482 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v481, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v482, 2028, v647, v664);
    }
    goto LABEL_439;
  }
  v483 = v304 == 3 && v631 == 14;
  v484 = v640;
  if (!v483)
    v484 = 1;
  if ((v484 & 1) == 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v487 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v488 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v487, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v488, 2043, v647, v664);
    }
    goto LABEL_439;
  }
  if ((v647 & 2) != 0 && v631 == 11)
  {
    if ((v664 & 0x200000) != 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v493 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
        v494 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v493, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v494, 2050, v647, v664);
      }
      goto LABEL_439;
    }
    if ((v638 & (v664 >> 14)) == 1)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v485 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
        v486 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v485, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v486, 2057, v647, v664);
      }
      goto LABEL_439;
    }
  }
  else
  {
    v489 = !v635;
    if (v658 | v631)
      v489 = 1;
    if ((v489 & 1) == 0 && (v664 & 0x41) != 0)
    {
      v490 = v637;
      if ((v654[1] & 0x41) == 0)
        v490 = 0;
      if (v490)
      {
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v491 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
          v492 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
          fprintf(v491, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v492, 2088, v647, v664);
        }
        goto LABEL_439;
      }
    }
  }
  v495 = SLWordTagSet::find(&v666);
  v496 = v647 & 0x41;
  if (v496 == 65)
    v497 = v495;
  else
    v497 = 0;
  if (v497 == 1)
  {
    if ((SLWordTagSet::find(&v653) & 1) != 0 || SLWordTagSet::find(&v653))
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v498 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v499 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v498, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v499, 2100, v647, v664);
      }
      goto LABEL_291;
    }
    v502 = v664;
    if ((v664 & 0x400) != 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v513 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v514 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v513, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v514, 2106, v647, v664);
      }
      goto LABEL_291;
    }
    if ((v664 & 0x41) == 1)
    {
      if ((SLWordTagSet::find(&v653) & 1) != 0)
      {
        if (!MTFEPOSResolver::RequireTagAndPOS(this, v16, 65, 1))
        {
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v517 = (FILE *)*MEMORY[0x1E0C80C20];
            var27 = (char *)*MEMORY[0x1E0DA8E90];
            v518 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
            fprintf(v517, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v518, 2119, v647, v664);
          }
          goto LABEL_291;
        }
        HIBYTE(v16[1].var0) = 2;
        LODWORD(v16[1].var5) = *((_DWORD *)this + 7);
        *(_OWORD *)((char *)&v16[1].var5 + 4) = *((_OWORD *)this + 2);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v503 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
          v504 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
          fprintf(v503, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v504, 2116, v647, v664);
        }
        goto LABEL_352;
      }
      v502 = v664;
    }
    if ((v502 & 0x41) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v523 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v524 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v523, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v524, 2127, v647, v664);
      }
      goto LABEL_291;
    }
    HIBYTE(v16[1].var0) = 2;
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v515 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
      v516 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v515, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v516, 2124, v647, v664);
    }
    goto LABEL_352;
  }
  if ((v647 & 0x4043) == 0x41 && ((v640 | !v638 | v664) & 1) == 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v505 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = (char *)*MEMORY[0x1E0DA8E90];
      v506 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v505, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v506, 2135, v647, v664);
    }
    goto LABEL_291;
  }
  if (v665 != 17 && v665 != 13)
    goto LABEL_1355;
  if (v304 == 65 && (v664 & 0x41) == 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v507 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = (char *)*MEMORY[0x1E0DA8E90];
      v508 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v507, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v508, 2142, v647, v664);
    }
    goto LABEL_291;
  }
  if (v665 == 17 || v665 == 13)
  {
    if (v304 == 3)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v500 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v501 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v500, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v501, 2149, v647, v664);
      }
      goto LABEL_291;
    }
    v510 = 0;
    v509 = 1 << v665;
  }
  else
  {
LABEL_1355:
    v509 = 1 << v665;
    if (v304 == 3 && (v509 & 0x22040) != 0 && (v664 & 0x41) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v519 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v520 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v519, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v520, 2156, v647, v664);
      }
      goto LABEL_291;
    }
    v510 = v665 == 1;
    if (v665 == 1 && v496 == 65)
    {
      if ((~v664 & 0x80080) == 0)
      {
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v511 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = (char *)*MEMORY[0x1E0DA8E90];
          v512 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
          fprintf(v511, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v512, 2164, v647, v664);
        }
        goto LABEL_291;
      }
      v510 = 1;
    }
  }
  if (v343 == 1 && (v664 & 0x10C) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v521 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = (char *)*MEMORY[0x1E0DA8E90];
      v522 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v521, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v522, 2170, v647, v664);
    }
    goto LABEL_291;
  }
  if (v665 == 17 || v665 == 13)
  {
    if (v496 == 1 && (v664 & 0x41) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v528 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v529 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v528, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v529, 2176, v647, v664);
      }
      goto LABEL_291;
    }
    v525 = 0;
  }
  else
  {
    v525 = v665 == 6;
    if (v665 == 6 && (v647 & 0x10041) == 1)
    {
      if ((v664 & 0x41) == 0)
      {
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v530 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = (char *)*MEMORY[0x1E0DA8E90];
          v531 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
          fprintf(v530, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v531, 2183, v647, v664);
        }
        goto LABEL_291;
      }
      v525 = 1;
    }
  }
  if ((v647 & 0x143) == 1 && *((int *)this + 4) <= 1)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v526 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = (char *)*MEMORY[0x1E0DA8E90];
      v527 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v526, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v527, 2189, v647, v664);
    }
    goto LABEL_291;
  }
  if ((v664 & 0x100000) != 0 && v496 == 1)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v532 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = (char *)*MEMORY[0x1E0DA8E90];
      v533 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v532, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v533, 2195, v647, v664);
    }
    goto LABEL_291;
  }
  if (v665 == 7 && v496 == 1)
  {
    if ((v664 & 0x41) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v534 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v535 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v534, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v535, 2202, v647, v664);
      }
      goto LABEL_291;
    }
  }
  else
  {
    v536 = (v664 & 0x41) == 0 && v665 == 10;
    v537 = v635;
    if (!v536)
      v537 = 0;
    if (v537)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v538 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = (char *)*MEMORY[0x1E0DA8E90];
        v539 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v538, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v539, 2209, v647, v664);
      }
      goto LABEL_291;
    }
  }
  if (!v635)
    goto LABEL_1432;
  if ((v664 & 0x43) == 2)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v540 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = (char *)*MEMORY[0x1E0DA8E90];
      v541 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v540, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v541, 2216, v647, v664);
    }
    goto LABEL_291;
  }
  if (v510)
  {
    if ((v664 & 0x14000) != 0)
    {
      if ((v664 & 0x10000) == 0)
        goto LABEL_1425;
      v542 = v640;
      if ((v654[1] & 0x10E) == 0)
        v542 = 1;
      if ((v542 & 1) != 0)
      {
LABEL_1425:
        if (((v640 | ((unsigned __int16)(v664 & 0x4000) >> 14)) & 1) == 0)
        {
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v548 = (FILE *)*MEMORY[0x1E0C80C20];
            var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
            v549 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
            fprintf(v548, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v549, 2231, v647, v664);
          }
          goto LABEL_439;
        }
        goto LABEL_1426;
      }
    }
    else if ((v640 & 1) != 0)
    {
      goto LABEL_1432;
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v550 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = (char *)*MEMORY[0x1E0DA8E90];
      v551 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v550, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v551, 2224, v647, v664);
    }
    goto LABEL_291;
  }
LABEL_1426:
  v543 = v640;
  if (v665 != 21)
    v543 = 1;
  if ((v543 & 1) == 0)
  {
    if (!MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      goto LABEL_439;
    v544 = (FILE *)*MEMORY[0x1E0C80C20];
    var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
    v545 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
    fprintf(v544, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v545, 2238, v647, v664);
LABEL_1582:
    lpsrc = 0;
    v645 = 255;
    LODWORD(var15) = 1;
    goto LABEL_316;
  }
LABEL_1432:
  if ((v664 & 0x41) == 0)
    v525 = 0;
  if (v633 && v525 && ((v664 & 2) == 0 || (v638 | ((BYTE1(v654[1]) & 8) >> 3)) == 1))
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v546 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
      v547 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v546, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v547, 2253, v647, v664);
    }
LABEL_1574:
    lpsrc = 0;
    v645 = 255;
    LODWORD(var15) = 6;
    goto LABEL_316;
  }
  if (v665 == 255 || (v509 & 0x220C0) != 0)
  {
    if (v496 != 65 && (v647 & 0x50) != 0x50 && (v647 & 0x60) != 0x60)
      goto LABEL_1462;
    if ((v664 & 0x43) == 0x41)
    {
      v552 = v638;
      if ((v654[1] & 0xC41) != 0)
        v552 = 1;
      if (v552 == 1 && ((v664 & 0x10) == 0 || (v654[1] & 0x22000) == 0) && ((v664 & 0x4000) == 0 || (v654[1] & 2) == 0))
      {
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v555 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
          v556 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
          fprintf(v555, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v556, 2267, v647, v664);
        }
        goto LABEL_1574;
      }
    }
  }
  if (v496 == 65 && v665 == 14)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v553 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
      v554 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v553, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v554, 2274, v647, v664);
    }
    goto LABEL_1574;
  }
LABEL_1462:
  if (v647 != 1)
  {
    v560 = 1 << v665;
    if ((v664 & 0x43) == 0x41
      && (v560 & 0x220C0) != 0
      && (v647 & 0x40) != 0
      && ((v664 & 0x10) == 0 || (v654[1] & 0x22000) == 0))
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v564 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
        v565 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v564, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v565, 2300, v647, v664);
      }
      goto LABEL_1574;
    }
    if ((v560 & 0xC0) != 0 && (v647 & 0x40) != 0 && (v664 & v638) == 1)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v561 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
        v562 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v561, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v562, 2308, v647, v664);
      }
      goto LABEL_1574;
    }
    if ((v664 & 0xCC1) != 0 && v665 == 1 && v335 == 66)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v566 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
        v567 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v566, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v567, 2315, v647, v664);
      }
      goto LABEL_1574;
    }
    if ((v560 & 0x30) != 0 && v335 == 66)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v568 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
        v569 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v568, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v569, 2322, v647, v664);
      }
      goto LABEL_1574;
    }
    v563 = v665 == 0;
    v570 = v335 == 66 && v665 == 0;
    if ((v640 & v570) == 1)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v571 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
        v572 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v571, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v572, 2329, v647, v664);
      }
      goto LABEL_1574;
    }
    if (v665 == 14 && (v647 & 0x62) == 0x42)
    {
      if ((((v664 & 0x41) == 0) & ~v640) == 0)
      {
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v573 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
          v574 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
          fprintf(v573, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v574, 2337, v647, v664);
        }
        goto LABEL_1574;
      }
    }
    else
    {
      if ((~v647 & 0x60) != 0 || v665 != 10)
        goto LABEL_1508;
      if ((v664 & 0x41) != 0)
      {
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v575 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
          v576 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
          fprintf(v575, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v576, 2344, v647, v664);
        }
        goto LABEL_1574;
      }
    }
    v563 = 0;
    goto LABEL_1508;
  }
  if ((SLWordTagSet::find(&v666) & 1) == 0 && (v664 & 3) == 1 && SLWordTagSet::find(&v653))
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      var27 = (char *)*MEMORY[0x1E0C80C20];
      v557 = (const char *)*MEMORY[0x1E0DA8E90];
      v558 = *(const char **)(MEMORY[0x1E0DA8E90] + 48);
      v559 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf((FILE *)var27, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, v557, "->", v558, v559, 2287, 1, v664);
      lpsrc = 0;
      LODWORD(var15) = 0;
      v645 = 6;
      v647 = 1;
      goto LABEL_316;
    }
    lpsrc = 0;
    LODWORD(var15) = 0;
    v647 = 1;
    v125 = 6;
LABEL_315:
    v645 = v125;
LABEL_316:
    v11 = v646;
    goto LABEL_182;
  }
  v563 = v665 == 0;
  v560 = 1 << v665;
LABEL_1508:
  if (v634)
  {
    if ((v664 & 0x41) == 1)
    {
      if ((v664 & 2) != 0)
      {
        if ((v560 & 0x22080) == 0)
          goto LABEL_1524;
LABEL_1522:
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v580 = (FILE *)*MEMORY[0x1E0C80C20];
          var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
          v581 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
          fprintf(v580, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v581, 2361, v647, v664);
        }
        goto LABEL_1574;
      }
LABEL_1518:
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v578 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
        v579 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v578, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v579, 2353, v647, v664);
      }
      goto LABEL_1574;
    }
    v577 = v638;
    if ((v664 & 0x40) == 0)
      v577 = 1;
    if ((v577 & 1) == 0 && (v664 & 2) == 0 && (v654[1] & 1) != 0)
      goto LABEL_1518;
    if ((v560 & 0x22080) != 0 && (v664 & 0x41) != 0)
      goto LABEL_1522;
  }
LABEL_1524:
  if ((~v647 & 0xC0) == 0 && (v560 & 0x41) != 0 && (v560 & 2) == 0 && (v664 & 0x41) != 0 && (v664 & 2) == 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v582 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 56);
      v583 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v582, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v583, 2376, v647, v664);
    }
LABEL_1602:
    LODWORD(var15) = 7;
LABEL_1606:
    v645 = 255;
    goto LABEL_305;
  }
  if ((~v647 & 0xC2) == 0 && (v664 & 1) != 0 && (v638 | ((v654[1] & 2) >> 1)) == 1)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v584 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 56);
      v585 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v584, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v585, 2384, v647, v664);
    }
    goto LABEL_1602;
  }
  if ((~v647 & 0x11) == 0 && v563)
  {
    v587 = v640;
    if ((v664 & 0x41) != 0)
      v587 = 1;
    if ((v587 & 1) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v591 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 32);
        v592 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v591, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v592, 2392, v647, v664);
      }
      goto LABEL_1578;
    }
  }
  if ((v647 & 0x400) != 0)
  {
    v588 = v638;
    if ((v664 & 0x132000) != 0x100000)
      v588 = 1;
    if ((v588 & 1) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v593 = (FILE *)*MEMORY[0x1E0C80C20];
        var27 = *(char **)(MEMORY[0x1E0DA8E90] + 80);
        v594 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
        fprintf(v593, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v594, 2399, v647, v664);
      }
      goto LABEL_1590;
    }
  }
  if ((v647 & 0x80) != 0 && (v664 & 0x22000) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v589 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 56);
      v590 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v589, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v590, 2406, v647, v664);
    }
    goto LABEL_1602;
  }
  if ((v647 & 0x24000) == 0x4000 && (v664 & 0x40) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v598 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 112);
      v599 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v598, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v599, 2413, v647, v664);
    }
    goto LABEL_1596;
  }
  v595 = v640 ^ 1;
  if ((v647 & 0x4000) == 0)
    v595 = 1;
  if ((v595 & 1) == 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v600 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 112);
      v601 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v600, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v601, 2420, v647, v664);
    }
    goto LABEL_1596;
  }
  if ((v647 & 8) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v602 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 24);
      v603 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v602, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v603, 2431, v647, v664);
    }
    lpsrc = 0;
    v645 = 255;
    LODWORD(var15) = 3;
    goto LABEL_316;
  }
  if ((v647 & 0x40) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v604 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 48);
      v605 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v604, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v605, 2437, v647, v664);
    }
    goto LABEL_1574;
  }
  if ((v647 & 1) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v596 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = (char *)*MEMORY[0x1E0DA8E90];
      v597 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v596, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v597, 2443, v647, v664);
    }
    goto LABEL_291;
  }
  if (v632)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v606 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 32);
      v607 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v606, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v607, 2449, v647, v664);
    }
LABEL_1578:
    lpsrc = 0;
    v645 = 255;
    LODWORD(var15) = 4;
    goto LABEL_316;
  }
  if ((v647 & 2) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v608 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8);
      v609 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v608, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v609, 2455, v647, v664);
    }
    goto LABEL_1582;
  }
  if ((v647 & 0x20000) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v612 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 136);
      v613 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v612, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v613, 2461, v647, v664);
    }
    lpsrc = 0;
    v645 = 255;
    LODWORD(var15) = 17;
    goto LABEL_316;
  }
  if ((v647 & 0x4000) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v614 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 112);
      v615 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v614, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v615, 2467, v647, v664);
    }
LABEL_1596:
    lpsrc = 0;
    v645 = 255;
    LODWORD(var15) = 14;
    goto LABEL_316;
  }
  if ((v647 & 0x20) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v616 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 40);
      v617 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v616, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v617, 2473, v647, v664);
    }
    lpsrc = 0;
    v645 = 255;
    LODWORD(var15) = 5;
    goto LABEL_316;
  }
  if ((v647 & 0x80) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v618 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 56);
      v619 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v618, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v619, 2479, v647, v664);
    }
    goto LABEL_1602;
  }
  if ((v647 & 0x400) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v610 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 80);
      v611 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v610, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v611, 2485, v647, v664);
    }
LABEL_1590:
    lpsrc = 0;
    v645 = 255;
    LODWORD(var15) = 10;
    goto LABEL_316;
  }
  if ((v647 & 0x2000) == 0)
  {
    LODWORD(var15) = SLFirstPOSInSet();
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v620 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 8 * var15);
      v621 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v620, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v621, 2517, v647, v664);
    }
    goto LABEL_1606;
  }
  v622 = strcmp(v39, "A");
  v623 = lpsrca;
  if (v622)
    v623 = 1;
  if ((v623 & 1) != 0 || (((v664 & 0x800) == 0) & ~v640) != 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      v627 = (FILE *)*MEMORY[0x1E0C80C20];
      var27 = *(char **)(MEMORY[0x1E0DA8E90] + 104);
      v628 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v646);
      fprintf(v627, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "", "", v628, 2501, v647, v664);
    }
    lpsrc = 0;
    v645 = 255;
    LODWORD(var15) = 13;
    goto LABEL_316;
  }
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
  {
    v624 = (FILE *)*MEMORY[0x1E0C80C20];
    var27 = *(char **)(MEMORY[0x1E0DA8E90] + 104);
    v625 = (const char *)*MEMORY[0x1E0DA8E90];
    v626 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
    fprintf(v624, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v39, var27, "->", v625, v626, 2495, v647, v664);
  }
  lpsrc = 0;
  v645 = 0;
  v11 = 66;
  LODWORD(var15) = 13;
LABEL_182:
  if ((_DWORD)var15 == 13)
  {
    *((_DWORD *)this + 4) = 0;
    v643 = 13;
    LOBYTE(var15) = 13;
    goto LABEL_185;
  }
LABEL_184:
  ++*((_DWORD *)this + 4);
  v643 = var15;
LABEL_185:
  p_var17 = &v649->var17;
  if (lpsrc)
  {
    v659 = *p_var17;
    v73 = v643;
    v72 = v645;
    goto LABEL_220;
  }
  if (v649->var3)
  {
    var6 = v649->var3;
    v75 = 0;
    v76 = 0;
    v77 = v11;
    LODWORD(var27) = 1 << var15;
    v639 = v11 != 67;
    v641 = v11 == 67;
    while (1)
    {
      lpsrc = var6;
      v79 = v78;
      if (v77)
      {
        if (SLWordTagSet::find((SLWordTagSet *)(v78 + 60)))
          goto LABEL_210;
        if ((SLWordTagSet::find(&v666) & 1) == 0 && !SLWordTagSet::find((SLWordTagSet *)(v79 + 60)))
        {
          if ((*((_DWORD *)v79 + 14) & var27) != 0)
          {
            if ((MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS) & 1) == 0)
              goto LABEL_217;
            v83 = "POS match / no tag mismatch";
LABEL_216:
            fprintf((FILE *)*MEMORY[0x1E0C80C20], "POS %s\n", v83);
            goto LABEL_217;
          }
          if ((v76 & 1) == 0)
          {
            v82 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS);
            v81 = "Negative tag match";
            v76 = v639;
            if ((v82 & 1) != 0)
LABEL_204:
              fprintf((FILE *)*MEMORY[0x1E0C80C20], "POS %s\n", v81);
            else
              v76 = v639;
LABEL_206:
            v75 = (MTFESpeechElement *)v79;
            goto LABEL_207;
          }
LABEL_201:
          v76 = 1;
          goto LABEL_207;
        }
        if ((v76 & 1) != 0)
          goto LABEL_201;
        if ((*((_DWORD *)v79 + 14) & var27) != 0)
        {
          v80 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS);
          v81 = "POS match / tag mismatch";
          v76 = v641;
          if ((v80 & 1) != 0)
            goto LABEL_204;
          v76 = v641;
          goto LABEL_206;
        }
        v76 = 0;
      }
      else if ((*((_DWORD *)v78 + 14) & var27) != 0)
      {
        v84 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS);
        if ((v84 & 1) != 0)
        {
          v83 = "POS match";
          goto LABEL_216;
        }
        goto LABEL_217;
      }
LABEL_207:
      var6 = lpsrc->var6;
      if (!var6)
      {
        lpsrc = v75;
        if (v75)
          goto LABEL_217;
        break;
      }
    }
  }
  MTBEAbort((MTFESpeechElement *)v649);
  __break(1u);
LABEL_210:
  if ((MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS) & 1) != 0)
  {
    v83 = "Positive tag match";
    goto LABEL_216;
  }
LABEL_217:
  v73 = v643;
  v72 = v645;
  v659 = *p_var17;
LABEL_220:
  p_var17->var0[0] = 0;
  v85 = v659.var0[0];
  if (v659.var0[0])
  {
    v86 = &v659.var0[1];
    do
    {
      v88 = *v86++;
      v87 = v88;
      if (SLWordTagSet::find(&v657))
      {
        if ((SLWordTagSet::find(p_var17) & 1) != 0)
          goto LABEL_230;
        v89 = p_var17->var0[0];
        if (v89 >= 7)
          goto LABEL_230;
      }
      else
      {
        if ((v87 & 1) != 0)
          goto LABEL_230;
        v87 ^= 1u;
        if ((SLWordTagSet::find(p_var17) & 1) != 0)
          goto LABEL_230;
        v89 = p_var17->var0[0];
        if (v89 > 6)
          goto LABEL_230;
      }
      v90 = v89 + 1;
      p_var17->var0[0] = v90;
      p_var17->var0[v90] = v87;
LABEL_230:
      --v85;
    }
    while (v85);
  }
  MTFESpeechElement::SelectChild((MTFESpeechElement *)v649, lpsrc);
  if (v72 != 255)
  {
    v649->var8 |= 0x200u;
    v73 = v72;
  }
  v649->var15 = v73;
  if ((v647 & (v647 - 1)) != 0)
    v649->var8 |= 0x10u;
  if (v665 == 255 && v73 <= 8 && ((1 << v73) & 0x10C) != 0)
    *((_BYTE *)this + 8) = 1;
  v91 = v649->var27;
  if (!strcmp(v649->var27, "THAT"))
  {
    if (v73 == 13)
    {
      v92 = strchr(v91, 124);
      if (!v92)
        goto LABEL_246;
      goto LABEL_245;
    }
    v95 = p_var17->var0[0];
    if (v95 <= 6)
    {
      v96 = v95 + 1;
      p_var17->var0[0] = v96;
      p_var17->var0[v96] = 75;
    }
  }
  v92 = strchr(v91, 124);
  if (v92)
  {
    if (v73 == 6)
    {
      v93 = v92 + 1;
      v94 = strlen(v92 + 1);
      memmove(v91, v93, v94 + 1);
      goto LABEL_246;
    }
LABEL_245:
    *v92 = 0;
  }
LABEL_246:
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v661);
}

void sub_1D226D508(_Unwind_Exception *a1)
{
  uint64_t v1;

  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)(v1 - 184));
  _Unwind_Resume(a1);
}

BOOL MTFEPOSResolver::RequireTagAndPOS(MTFEPOSResolver *this, MTFESpeechElement *a2, __int16 a3, int a4)
{
  int v6;

  *((_WORD *)this + 10) = a3;
  *((_DWORD *)this + 6) = a4;
  *((_DWORD *)this + 7) = 0;
  *((_WORD *)this + 16) = 0;
  MTFESpeechElement::VisitChildren(a2, this);
  v6 = *((unsigned __int16 *)this + 28);
  if (*((_WORD *)this + 28))
  {
    MTFESpeechElement::clear(a2);
    MTFESpeechElement::TransferChildren((MTFESpeechElement *)((char *)this + 48), a2);
  }
  return v6 != 0;
}

uint64_t MTFEPOSResolver::VisitCommand(uint64_t this, MTFECommand *a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;

  if (a2->var8 == 1953456745)
  {
    v2 = a2->var9 >> 24;
    v3 = v2 > 6;
    v4 = (1 << v2) & 0x6E;
    if (v3 || v4 == 0)
      *(_BYTE *)(this + 11) = 1;
  }
  return this;
}

uint64_t MTFEPOSResolver::VisitHomograph(MTFEPOSResolver *this, MTFESpeechElement *a2)
{
  SLWordTagSet *v4;
  uint64_t result;

  v4 = (SLWordTagSet *)((char *)&a2[1].var0 + 4);
  result = SLWordTagSet::find((SLWordTagSet *)((char *)&a2[1].var0 + 4));
  if ((result & 1) == 0)
  {
    if ((*((_WORD *)this + 10) & 1) != 0 || (result = SLWordTagSet::find(v4), (_DWORD)result))
    {
      if ((*((_DWORD *)this + 6) & (uint64_t)a2[1].var0) != 0)
      {
        MTFESpeechElement::RemoveChild(a2->var5, a2);
        MTFESpeechElement::AddChildAfter((MTFESpeechElement *)((char *)this + 48), a2, *((MTFESpeechElement **)this + 9));
        *((_DWORD *)this + 7) |= LODWORD(a2[1].var0);
        return operator+=();
      }
    }
  }
  return result;
}

void sub_1D226DA64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D226DBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D226DD1C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1D8233BA8](v2, 0x10A2C40BF445734);

  _Unwind_Resume(a1);
}

void sub_1D226DF40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D226DFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D226E05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D226E0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D226E108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D226E260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MTWrappedPhraseProcessor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

SInt16 SpeechBusy(void)
{
  return 1;
}

void MTFBlockNotifier::MTFBlockNotifier(MTFBlockNotifier *this, MTWrappedPhraseProcessor *a2)
{
  MTWrappedPhraseProcessor *v3;

  v3 = a2;
  MTBENotifier::MTBENotifier((MTBENotifier *)this);
  *(_QWORD *)this = &unk_1E9366108;
  *((_QWORD *)this + 8) = 0;
  objc_storeWeak((id *)this + 8, v3);

}

void sub_1D226E42C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void MTFBlockNotifier::~MTFBlockNotifier(MTBENotifier *this)
{
  objc_destroyWeak((id *)&this[1].var0);
  MTBENotifier::~MTBENotifier(this);
}

{
  objc_destroyWeak((id *)&this[1].var0);
  MTBENotifier::~MTBENotifier(this);
  JUMPOUT(0x1D8233BA8);
}

void MTFBlockNotifier::NotifySpeechDone(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 8);
  objc_msgSend(WeakRetained, "finishedSampleGeneration");

}

void sub_1D226E4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void MTFBlockNotifier::NotifySync(id *this, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 8);
  objc_msgSend(WeakRetained, "generatedSampleForSync:", a2);

}

void sub_1D226E524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void MTFBlockNotifier::NotifyPhoneme(id *this, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 8);
  objc_msgSend(WeakRetained, "generatedSampleForPhoneme:", a2);

}

void sub_1D226E574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void MTFBlockNotifier::NotifyWord(id *this, uint64_t a2, uint64_t a3)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 8);
  objc_msgSend(WeakRetained, "generatedSampleForWord:length:", a2, a3);

}

void sub_1D226E5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t MTFBlockNotifier::WantSpeechDone(MTFBlockNotifier *this)
{
  return 1;
}

uint64_t MTFBlockNotifier::WantSync(MTFBlockNotifier *this)
{
  return 1;
}

uint64_t MTFBlockNotifier::WantPhoneme(MTFBlockNotifier *this)
{
  return 1;
}

uint64_t MTFBlockNotifier::WantWord(MTFBlockNotifier *this)
{
  return 1;
}

MTFESpeechElement *MTFESpeechElement::AddChildBefore(MTFESpeechElement *this, MTFESpeechElement *a2, MTFESpeechElement *a3)
{
  MTFESpeechElement *v5;
  MTFESpeechElement **p_var7;
  MTFESpeechElement *v7;
  MTFESpeechElement **p_var4;

  v5 = this;
  if (a3)
  {
    if (a3->var5 != this)
    {
      this = MTBEAbort(v5);
    }
    ++v5->var1;
    a2->var5 = v5;
    p_var7 = &a3->var7;
  }
  else
  {
    ++this->var1;
    a2->var5 = this;
    p_var7 = &this->var4;
  }
  v7 = *p_var7;
  a2->var7 = v7;
  if (!v7 || (v7->var6 = a2, v7->var5 != v5))
    v5->var3 = a2;
  a2->var6 = a3;
  p_var4 = &v5->var4;
  if (a3)
    p_var4 = &a3->var7;
  *p_var4 = a2;
  return this;
}

MTFESpeechElement *MTFESpeechElement::AddChildAfter(MTFESpeechElement *this, MTFESpeechElement *a2, MTFESpeechElement *a3)
{
  MTFESpeechElement *v5;
  MTFESpeechElement **p_var6;
  MTFESpeechElement *v7;
  MTFESpeechElement **p_var3;

  v5 = this;
  if (a3)
  {
    if (a3->var5 != this)
    {
      this = MTBEAbort(v5);
    }
    ++v5->var1;
    a2->var5 = v5;
    p_var6 = &a3->var6;
  }
  else
  {
    ++this->var1;
    a2->var5 = this;
    p_var6 = &this->var3;
  }
  v7 = *p_var6;
  a2->var6 = v7;
  if (!v7 || (v7->var7 = a2, v7->var5 != v5))
    v5->var4 = a2;
  a2->var7 = a3;
  p_var3 = &v5->var3;
  if (a3)
    p_var3 = &a3->var6;
  *p_var3 = a2;
  return this;
}

MTFESpeechElement *MTFESpeechElement::RemoveChild(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *v3;
  MTFESpeechElement *var6;
  MTFESpeechElement *var7;
  MTFESpeechElement *v6;
  MTFESpeechElement *v7;

  v3 = this;
  if (a2->var5 != this)
  {
    this = MTBEAbort(v3);
  }
  --v3->var1;
  var6 = a2->var6;
  var7 = a2->var7;
  if (var6)
  {
    if (var6->var5 == v3)
      v6 = a2->var6;
    else
      v6 = 0;
    if (var7)
    {
LABEL_8:
      if (var7->var5 == v3)
        v7 = a2->var7;
      else
        v7 = 0;
      if (var6)
        goto LABEL_12;
      goto LABEL_13;
    }
  }
  else
  {
    v6 = 0;
    if (var7)
      goto LABEL_8;
  }
  v7 = 0;
  if (var6)
LABEL_12:
    var6->var7 = var7;
LABEL_13:
  if (v6)
  {
    if (!var7)
      goto LABEL_16;
    goto LABEL_15;
  }
  v3->var4 = v7;
  if (var7)
LABEL_15:
    var7->var6 = var6;
LABEL_16:
  if (!v7)
    v3->var3 = v6;
  return this;
}

MTFESpeechElement *MTFESpeechElement::SelectChild(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *result;
  MTFESpeechElement *i;
  MTFESpeechElement *var6;

  if (a2->var5 != this)
  {
    MTBEAbort(this);
  }
  result = this->var3;
  *(_OWORD *)&this->var3 = *(_OWORD *)&a2->var3;
  this->var1 = a2->var1;
  a2->var1 = 0;
  a2->var3 = 0;
  a2->var4 = 0;
  for (i = this->var3; i; i = i->var6)
  {
    if (i->var5 != a2)
      break;
    i->var5 = this;
  }
  if (result)
  {
    do
    {
      if (result->var5 != this)
        break;
      var6 = result->var6;
      result->var5 = 0;
      (*((void (**)(MTFESpeechElement *))result->var0 + 2))(result);
      result = var6;
    }
    while (var6);
  }
  return result;
}

MTFESpeechElement *MTFESpeechElement::AddLevel(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *var3;
  MTFESpeechElement *v3;
  MTFESpeechElement *var4;

  var3 = this->var3;
  if (var3)
  {
    v3 = this->var3;
    do
    {
      if (v3->var5 != this)
        break;
      v3->var5 = a2;
      v3 = v3->var6;
    }
    while (v3);
  }
  a2->var1 = this->var1;
  a2->var5 = this;
  var4 = this->var4;
  a2->var3 = var3;
  a2->var4 = var4;
  this->var1 = 1;
  this->var3 = a2;
  this->var4 = a2;
  return this;
}

MTFESpeechElement *MTFESpeechElement::TransferChildren(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *var3;
  MTFESpeechElement *v4;

  var3 = this->var3;
  if (var3)
  {
    v4 = this;
    do
    {
      MTFESpeechElement::RemoveChild(v4, var3);
      this = MTFESpeechElement::AddChildAfter(a2, var3, a2->var4);
      var3 = v4->var3;
    }
    while (var3);
  }
  return this;
}

MTFESpeechElement *MTFESpeechElement::SplitChildren(MTFESpeechElement *this, MTFESpeechElement *a2, MTFESpeechElement *a3)
{
  MTFESpeechElement *v5;
  MTFESpeechElement *var3;
  MTFESpeechElement *var4;
  MTFESpeechElement **p_var7;
  MTFESpeechElement *var7;
  MTFESpeechElement *v10;

  v5 = this;
  if (this->var6 != a3)
  {
    this = MTBEAbort(v5);
  }
  var3 = a3->var3;
  var4 = v5->var4;
  if (var3)
  {
    var4->var6 = var3;
    p_var7 = &var3->var7;
  }
  else
  {
    p_var7 = &a3->var4;
  }
  *p_var7 = var4;
  a3->var3 = a2;
  var7 = a2->var7;
  if (var7)
  {
    v10 = a2->var7;
    if (var7->var5 != v5)
    {
      v10 = 0;
      v5->var3 = 0;
    }
    v5->var4 = v10;
    var7->var6 = 0;
  }
  else
  {
    v5->var3 = 0;
    v5->var4 = 0;
  }
  a2->var7 = 0;
  do
  {
    if (a2->var5 != v5)
      break;
    a2->var5 = a3;
    --v5->var1;
    ++a3->var1;
    a2 = a2->var6;
  }
  while (a2);
  return this;
}

MTFESpeechElement *MTFESpeechElement::SetPrevCousin(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  a2->var6 = this;
  this->var7 = a2;
  return this;
}

MTFESpeechElement *MTFESpeechElement::SetNextCousin(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  a2->var7 = this;
  this->var6 = a2;
  return this;
}

MTFESpeechElement *MTFESpeechElement::VisitChildren(MTFESpeechElement *this, MTFESpeechVisitor *a2)
{
  MTFESpeechElement *var3;
  MTFESpeechElement *v4;
  MTFESpeechElement *var6;

  var3 = this->var3;
  if (var3)
  {
    v4 = this;
    do
    {
      if (var3->var5 != v4)
        break;
      var6 = var3->var6;
      if (!var3->var2)
      {
        MTBEAbort(v4);
      }
      this = (MTFESpeechElement *)(*(uint64_t (**)(MTFESpeechElement *, MTFESpeechVisitor *))var3->var0)(var3, a2);
      var3 = var6;
    }
    while (var6);
  }
  return this;
}

MTFESpeechElement *MTFESpeechElement::clear(MTFESpeechElement *this)
{
  MTFESpeechElement *result;

  for (result = this->var3; result; result = this->var3)
    (*((void (**)(MTFESpeechElement *))result->var0 + 2))(result);
  return result;
}

void MTFESpeechElement::~MTFESpeechElement(MTFESpeechElement *this)
{
  MTFESpeechElement *i;
  MTFESpeechElement *var5;

  this->var0 = (void **)&unk_1E9366198;
  for (i = this->var3; i; i = this->var3)
    (*((void (**)(MTFESpeechElement *))i->var0 + 2))(i);
  var5 = this->var5;
  if (var5)
    MTFESpeechElement::RemoveChild(var5, this);
  if (!this->var2)
  {
    MTBEAbort(this);
  }
  this->var2 = 0;
}

void MTFESpeechElement::MTFESpeechElement(MTFESpeechElement *this)
{
  this->var0 = (void **)&unk_1E9366198;
  this->var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
}

double MTFESpeechElement::CleanseClone(MTFESpeechElement *this)
{
  double result;

  this->var1 = 0;
  result = 0.0;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  return result;
}

char *MTFESentence::FlagName(MTFESentence *this)
{
  if (this <= 3)
    return MTFESentence::flagNames[this];
  else
    return 0;
}

void MTFESentence::MTFESentence(MTFESentence *this, float a2, float a3, float a4)
{
  this->var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  this->var0 = (void **)&off_1E93661E0;
  this->var8 = 0;
  *(_QWORD *)&this->var9 = 0;
  this->var12 = a2;
  this->var13 = a3;
  this->var14 = a4;
  this->var15 = 0;
}

{
  this->var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  this->var0 = (void **)&off_1E93661E0;
  this->var8 = 0;
  *(_QWORD *)&this->var9 = 0;
  this->var12 = a2;
  this->var13 = a3;
  this->var14 = a4;
  this->var15 = 0;
}

uint64_t MTFESentence::Visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, a1);
}

void MTFEIntonationalPhrase::MTFEIntonationalPhrase(MTFEIntonationalPhrase *this)
{
  this->var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  this->var8 = 0;
  this->var0 = (void **)&off_1E9366208;
  this->var9.var1 = 0;
  this->var9.var2 = 1;
  *(_OWORD *)&this->var9.var3 = 0u;
  *(_OWORD *)&this->var9.var5 = 0u;
  this->var9.var0 = (void **)&off_1E93665A8;
  *(_WORD *)&this->var17 = 0;
  *(_DWORD *)&this->var20 = 0;
  this->var22 = 0;
  *(_DWORD *)&this->var23 = 0;
  this->var28 = 0;
  this->var9.var7 = 0;
  *(_QWORD *)&this->var10.var0 = 0;
  this->var12 = 0;
  this->var13 = 0;
  this->var27 = 0.0;
  this->var25 = 0;
  this->var26 = 0;
}

{
  this->var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  this->var8 = 0;
  this->var0 = (void **)&off_1E9366208;
  this->var9.var1 = 0;
  this->var9.var2 = 1;
  *(_OWORD *)&this->var9.var3 = 0u;
  *(_OWORD *)&this->var9.var5 = 0u;
  this->var9.var0 = (void **)&off_1E93665A8;
  *(_WORD *)&this->var17 = 0;
  *(_DWORD *)&this->var20 = 0;
  this->var22 = 0;
  *(_DWORD *)&this->var23 = 0;
  this->var28 = 0;
  this->var9.var7 = 0;
  *(_QWORD *)&this->var10.var0 = 0;
  this->var12 = 0;
  this->var13 = 0;
  this->var27 = 0.0;
  this->var25 = 0;
  this->var26 = 0;
}

void MTFEIntonationalPhrase::~MTFEIntonationalPhrase(MTFEIntonationalPhrase *this)
{
  float *var12;
  void **var28;

  this->var0 = (void **)&off_1E9366208;
  var12 = this->var12;
  if (var12)
    MEMORY[0x1D8233B90](var12, 0x1000C8052888210);
  var28 = (void **)this->var28;
  if (var28)
  {
    MEOWVectorBase::~MEOWVectorBase(var28);
    MEMORY[0x1D8233BA8]();
  }
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)&this->var9);
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);
}

{
  MTFEIntonationalPhrase::~MTFEIntonationalPhrase(this);
  JUMPOUT(0x1D8233BA8);
}

uint64_t MTFEIntonationalPhrase::Visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
}

void MTFEIntermediatePhrase::MTFEIntermediatePhrase(MTFEIntermediatePhrase *this)
{
  this->var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  *(_QWORD *)&this->var8.var0 = 0;
  this->var0 = (void **)&off_1E9366230;
  this->var12 = 0;
  this->var10 = 0;
  *(_QWORD *)&this->var14 = 4;
}

{
  this->var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  *(_QWORD *)&this->var8.var0 = 0;
  this->var0 = (void **)&off_1E9366230;
  this->var12 = 0;
  this->var10 = 0;
  *(_QWORD *)&this->var14 = 4;
}

uint64_t MTFEIntermediatePhrase::Visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1);
}

void MTFEWord::MTFEWord(MTFEWord *this, unsigned __int8 a2, char a3)
{
  this->var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  this->var0 = (void **)&off_1E9366258;
  this->var8 = 0;
  this->var9 = -1;
  this->var10 = a3;
  this->var11 = a2;
  this->var12 = 32;
  this->var13 = -1;
  this->var14.var0[0] = 0;
  this->var15 = -1;
  this->var16 = 0;
  this->var17.var0[0] = 0;
  this->var18.var1 = 0;
  this->var18.var2 = 1;
  *(_OWORD *)&this->var18.var3 = 0u;
  *(_OWORD *)&this->var18.var5 = 0u;
  this->var18.var0 = (void **)&off_1E93665A8;
  this->var28 = 0;
  this->var27[0] = 0;
  this->var18.var7 = 0;
  *(_QWORD *)&this->var19.var0 = 0;
  *(_QWORD *)&this->var21 = 0;
  this->var25 = 0;
}

{
  this->var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  this->var0 = (void **)&off_1E9366258;
  this->var8 = 0;
  this->var9 = -1;
  this->var10 = a3;
  this->var11 = a2;
  this->var12 = 32;
  this->var13 = -1;
  this->var14.var0[0] = 0;
  this->var15 = -1;
  this->var16 = 0;
  this->var17.var0[0] = 0;
  this->var18.var1 = 0;
  this->var18.var2 = 1;
  *(_OWORD *)&this->var18.var3 = 0u;
  *(_OWORD *)&this->var18.var5 = 0u;
  this->var18.var0 = (void **)&off_1E93665A8;
  this->var28 = 0;
  this->var27[0] = 0;
  this->var18.var7 = 0;
  *(_QWORD *)&this->var19.var0 = 0;
  *(_QWORD *)&this->var21 = 0;
  this->var25 = 0;
}

uint64_t MTFEWord::Visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1);
}

MTFESpeechElement *MTFEWord::PrevWord(MTFEWord *this)
{
  MTFESpeechElement *result;
  MTFESpeechElement *var7;

  result = this->var7;
  if (!result)
  {
    var7 = this->var5->var7;
    if (var7)
      return var7->var4;
    else
      return 0;
  }
  return result;
}

MTFESpeechElement *MTFEWord::NextWord(MTFEWord *this)
{
  MTFESpeechElement *result;
  MTFESpeechElement *var6;

  result = this->var6;
  if (!result)
  {
    var6 = this->var5->var6;
    if (var6)
      return var6->var3;
    else
      return 0;
  }
  return result;
}

MTFEWord *MTFEWord::POSForPrev(MTFEWord *this, unsigned __int8 *a2, SLWordTagSet *a3, MTFEWord **a4)
{
  MTFEWord *var7;
  MTFESpeechElement *v5;
  MTFEWord *var4;
  MTFESpeechElement *var5;
  MTFESpeechElement *v8;

  if (this->var12 == 62)
  {
    *a2 = this->var13;
    if (a3)
      *a3 = this->var14;
    if (a4)
    {
      while (1)
      {
        var7 = (MTFEWord *)this->var7;
        if (!var7)
        {
          v5 = this->var5->var7;
          if (!v5)
            break;
          var7 = (MTFEWord *)v5->var4;
          if (!var7)
            break;
        }
        this = var7;
        if (var7->var12 == 60)
        {
          var4 = (MTFEWord *)var7->var7;
          if (var4)
            goto LABEL_19;
          var5 = var7->var5;
          goto LABEL_16;
        }
      }
LABEL_18:
      var4 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    *a2 = this->var15;
    if (a3)
      *a3 = this->var17;
    if (a4)
    {
      var4 = (MTFEWord *)this->var7;
      if (!var4)
      {
        var5 = this->var5;
LABEL_16:
        v8 = var5->var7;
        if (!v8)
          goto LABEL_18;
        var4 = (MTFEWord *)v8->var4;
      }
LABEL_19:
      *a4 = var4;
    }
  }
  return this;
}

MTFEWord *MTFEWord::POSForNext(MTFEWord *this, unsigned __int8 *a2, SLWordTagSet *a3, MTFEWord **a4)
{
  MTFEWord *var6;
  MTFESpeechElement *v5;
  MTFEWord *var3;
  MTFESpeechElement *var5;
  MTFESpeechElement *v8;

  if (this->var12 == 60)
  {
    *a2 = this->var13;
    if (a3)
      *a3 = this->var14;
    if (a4)
    {
      while (1)
      {
        var6 = (MTFEWord *)this->var6;
        if (!var6)
        {
          v5 = this->var5->var6;
          if (!v5)
            break;
          var6 = (MTFEWord *)v5->var3;
          if (!var6)
            break;
        }
        this = var6;
        if (var6->var12 == 62)
        {
          var3 = (MTFEWord *)var6->var6;
          if (var3)
            goto LABEL_19;
          var5 = var6->var5;
          goto LABEL_16;
        }
      }
LABEL_18:
      var3 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    *a2 = this->var15;
    if (a3)
      *a3 = this->var17;
    if (a4)
    {
      var3 = (MTFEWord *)this->var6;
      if (!var3)
      {
        var5 = this->var5;
LABEL_16:
        v8 = var5->var6;
        if (!v8)
          goto LABEL_18;
        var3 = (MTFEWord *)v8->var3;
      }
LABEL_19:
      *a4 = var3;
    }
  }
  return this;
}

MTFEWord *MTFEWord::POSForNext(MTFEWord *this, unsigned int *a2, SLWordTagSet *a3, MTFEWord **a4)
{
  MTFEWord *var6;

  if (this->var12 == 60)
  {
    *a2 = 1 << this->var13;
    if (a3)
      *a3 = this->var14;
    if (a4)
    {
      while (1)
      {
        this = (MTFEWord *)this->var6;
        if (!this)
          break;
        if (this->var12 == 62)
          goto LABEL_11;
      }
      var6 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    *a2 = this->var16;
    if (a3)
      *a3 = this->var17;
    if (a4)
    {
LABEL_11:
      var6 = (MTFEWord *)this->var6;
LABEL_13:
      *a4 = var6;
    }
  }
  return this;
}

uint64_t MTFEHomograph::Visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1);
}

void MTFESyllable::MTFESyllable(MTFESyllable *this)
{
  this->var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  *(_QWORD *)&this->var8 = 0;
  this->var0 = (void **)&off_1E9366280;
  this->var12 = 0.0;
}

{
  this->var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  *(_QWORD *)&this->var8 = 0;
  this->var0 = (void **)&off_1E9366280;
  this->var12 = 0.0;
}

uint64_t MTFESyllable::Visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, a1);
}

void MTFEPhoneme::MTFEPhoneme(MTFEPhoneme *this, unsigned __int8 a2)
{
  this->var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  this->var0 = (void **)&off_1E93662A8;
  this->var8 = 0;
  this->var9 = a2;
  this->var10 = 0;
  *(_DWORD *)&this->var11 = 0;
  *(_QWORD *)&this->var13 = 0x3F0000003F800000;
  *(_QWORD *)&this->var15 = 0;
  this->var17 = 0;
  *(_DWORD *)&this->var18 = -1;
  this->var21 = 0;
}

{
  this->var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  this->var0 = (void **)&off_1E93662A8;
  this->var8 = 0;
  this->var9 = a2;
  this->var10 = 0;
  *(_DWORD *)&this->var11 = 0;
  *(_QWORD *)&this->var13 = 0x3F0000003F800000;
  *(_QWORD *)&this->var15 = 0;
  this->var17 = 0;
  *(_DWORD *)&this->var18 = -1;
  this->var21 = 0;
}

void MTFEPhoneme::~MTFEPhoneme(MTFEPhoneme *this)
{
  MTFEPitchTargets *var17;

  this->var0 = (void **)&off_1E93662A8;
  var17 = this->var17;
  if (var17)
    MEMORY[0x1D8233BA8](var17, 0x1000C40F33D7AAALL);
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);
}

{
  MTFEPhoneme::~MTFEPhoneme(this);
  JUMPOUT(0x1D8233BA8);
}

uint64_t MTFEPhoneme::Visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, a1);
}

uint64_t MTFECommands::Visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1);
}

uint64_t MTFECommand::Visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1);
}

uint64_t MTFESpeechVisitor::Visit(MTFESpeechVisitor *this, MTFESpeechElement *a2)
{
  if (!a2 || !a2->var2)
  {
    MTBEAbort(a2);
  }
  return ((uint64_t (*)(MTFESpeechElement *, MTFESpeechVisitor *))*a2->var0)(a2, this);
}

MTFESpeechElement *MTFESpeechVisitor::VisitSentence(MTFESpeechVisitor *this, MTFESpeechElement *a2)
{
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFESpeechVisitor::VisitIntonationalPhrase(MTFESpeechVisitor *this, MTFESpeechElement *a2)
{
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFESpeechVisitor::VisitIntermediatePhrase(MTFESpeechVisitor *this, MTFESpeechElement *a2)
{
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFESpeechVisitor::VisitWord(MTFESpeechVisitor *this, MTFESpeechElement *a2)
{
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFESpeechVisitor::VisitHomograph(MTFESpeechVisitor *this, MTFESpeechElement *a2)
{
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFESpeechVisitor::VisitSyllable(MTFESpeechVisitor *this, MTFESpeechElement *a2)
{
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFESpeechVisitor::VisitCommands(MTFESpeechVisitor *this, MTFESpeechElement *a2)
{
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFESpeechVisitor::VisitCommand(MTFESpeechVisitor *this, MTFESpeechElement *a2)
{
  return MTFESpeechElement::VisitChildren(a2, this);
}

void MTFESpeechPedigree::MTFESpeechPedigree(MTFESpeechPedigree *this, MTFESpeechElement *a2)
{
  *((_QWORD *)this + 7) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E93662D0;
  ((void (*)(MTFESpeechElement *, MTFESpeechPedigree *))*a2->var0)(a2, this);
}

{
  *((_QWORD *)this + 7) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E93662D0;
  ((void (*)(MTFESpeechElement *, MTFESpeechPedigree *))*a2->var0)(a2, this);
}

uint64_t MTFESpeechPedigree::VisitSentence(uint64_t this, MTFESentence *a2)
{
  *(_QWORD *)(this + 8) = a2;
  return this;
}

uint64_t MTFESpeechPedigree::VisitIntonationalPhrase(MTFESpeechPedigree *this, MTFEIntonationalPhrase *a2)
{
  *((_QWORD *)this + 2) = a2;
  return ((uint64_t (*)(MTFESpeechElement *, MTFESpeechPedigree *))*a2->var5->var0)(a2->var5, this);
}

uint64_t MTFESpeechPedigree::VisitIntermediatePhrase(MTFESpeechPedigree *this, MTFEIntermediatePhrase *a2)
{
  *((_QWORD *)this + 3) = a2;
  return ((uint64_t (*)(MTFESpeechElement *, MTFESpeechPedigree *))*a2->var5->var0)(a2->var5, this);
}

uint64_t MTFESpeechPedigree::VisitWord(MTFESpeechPedigree *this, MTFEWord *a2)
{
  *((_QWORD *)this + 4) = a2;
  return ((uint64_t (*)(MTFESpeechElement *, MTFESpeechPedigree *))*a2->var5->var0)(a2->var5, this);
}

uint64_t MTFESpeechPedigree::VisitHomograph(MTFESpeechPedigree *this, MTFEHomograph *a2)
{
  *((_QWORD *)this + 5) = a2;
  return ((uint64_t (*)(MTFESpeechElement *, MTFESpeechPedigree *))*a2->var5->var0)(a2->var5, this);
}

uint64_t MTFESpeechPedigree::VisitSyllable(MTFESpeechPedigree *this, MTFESyllable *a2)
{
  *((_QWORD *)this + 6) = a2;
  return ((uint64_t (*)(MTFESpeechElement *, MTFESpeechPedigree *))*a2->var5->var0)(a2->var5, this);
}

uint64_t MTFESpeechPedigree::VisitPhoneme(MTFESpeechPedigree *this, MTFEPhoneme *a2)
{
  *((_QWORD *)this + 7) = a2;
  return ((uint64_t (*)(MTFESpeechElement *, MTFESpeechPedigree *))*a2->var5->var0)(a2->var5, this);
}

void MTFESpeechIterator::MTFESpeechIterator(MTFESpeechIterator *this, MTFESpeechElement *a2)
{
  *(_QWORD *)this = &off_1E9366340;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = a2;
  if (a2)
    ((void (*)(MTFESpeechElement *, MTFESpeechIterator *))*a2->var0)(a2, this);
}

{
  *(_QWORD *)this = &off_1E9366340;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = a2;
  if (a2)
    ((void (*)(MTFESpeechElement *, MTFESpeechIterator *))*a2->var0)(a2, this);
}

uint64_t MTFESpeechIterator::operator=(uint64_t result, uint64_t (***a2)(_QWORD, uint64_t))
{
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = a2;
  if (a2)
    return (**a2)(a2, result);
  return result;
}

_QWORD *MTFESpeechIterator::operator++(_QWORD *a1)
{
  MTFESpeechElement *i;
  MTFESpeechElement *v3;
  uint64_t v4;
  uint64_t v5;

  for (i = (MTFESpeechElement *)a1[8]; i; a1[8] = i)
  {
    if (i == (MTFESpeechElement *)a1[7])
    {
      (*(void (**)(_QWORD *))(*a1 + 200))(a1);
      a1[7] = 0;
    }
    else if (i == (MTFESpeechElement *)a1[6])
    {
      (*(void (**)(_QWORD *))(*a1 + 184))(a1);
      a1[6] = 0;
    }
    else if (i == (MTFESpeechElement *)a1[5])
    {
      (*(void (**)(_QWORD *))(*a1 + 168))(a1);
      a1[5] = 0;
    }
    else if (i == (MTFESpeechElement *)a1[4])
    {
      (*(void (**)(_QWORD *))(*a1 + 152))(a1);
      a1[4] = 0;
    }
    else if (i == (MTFESpeechElement *)a1[3])
    {
      (*(void (**)(_QWORD *))(*a1 + 136))(a1);
      a1[3] = 0;
    }
    else if (i == (MTFESpeechElement *)a1[2])
    {
      (*(void (**)(_QWORD *))(*a1 + 120))(a1);
      a1[2] = 0;
    }
    else
    {
      v3 = (MTFESpeechElement *)a1[1];
      if (i == v3)
      {
        (*(void (**)(_QWORD *))(*a1 + 104))(a1);
        a1[1] = 0;
      }
      else
      {
        MTBEAbort(v3);
      }
    }
    v4 = a1[8];
    v5 = *(_QWORD *)(v4 + 40);
    if (v5)
    {
      i = *(MTFESpeechElement **)(v4 + 32);
      if (*(MTFESpeechElement **)(v5 + 32) == i)
      {
        a1[8] = v5;
        (**(void (***)(uint64_t, _QWORD *))v5)(v5, a1);
        return a1;
      }
    }
    else
    {
      i = *(MTFESpeechElement **)(v4 + 32);
    }
  }
  return a1;
}

MTFESpeechElement *MTFESpeechIterator::VisitSentence(MTFESpeechIterator *this, MTFESentence *a2)
{
  MTFESpeechElement *result;

  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 8) = a2;
  (*(void (**)(MTFESpeechIterator *))(*(_QWORD *)this + 96))(this);
  result = a2->var3;
  if (result)
    return (MTFESpeechElement *)(*(uint64_t (**)(MTFESpeechElement *, MTFESpeechIterator *))result->var0)(result, this);
  return result;
}

MTFESpeechElement *MTFESpeechIterator::VisitIntonationalPhrase(MTFESpeechIterator *this, MTFEIntonationalPhrase *a2)
{
  MTFESpeechElement *result;

  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 8) = a2;
  (*(void (**)(MTFESpeechIterator *))(*(_QWORD *)this + 112))(this);
  result = a2->var3;
  if (result)
    return (MTFESpeechElement *)(*(uint64_t (**)(MTFESpeechElement *, MTFESpeechIterator *))result->var0)(result, this);
  return result;
}

MTFESpeechElement *MTFESpeechIterator::VisitIntermediatePhrase(MTFESpeechIterator *this, MTFEIntermediatePhrase *a2)
{
  MTFESpeechElement *result;

  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 8) = a2;
  (*(void (**)(MTFESpeechIterator *))(*(_QWORD *)this + 128))(this);
  result = a2->var3;
  if (result)
    return (MTFESpeechElement *)(*(uint64_t (**)(MTFESpeechElement *, MTFESpeechIterator *))result->var0)(result, this);
  return result;
}

MTFESpeechElement *MTFESpeechIterator::VisitWord(MTFESpeechIterator *this, MTFEWord *a2)
{
  MTFESpeechElement *result;

  *((_QWORD *)this + 4) = a2;
  *((_QWORD *)this + 8) = a2;
  (*(void (**)(MTFESpeechIterator *))(*(_QWORD *)this + 144))(this);
  result = a2->var3;
  if (result)
    return (MTFESpeechElement *)(*(uint64_t (**)(MTFESpeechElement *, MTFESpeechIterator *))result->var0)(result, this);
  return result;
}

MTFESpeechElement *MTFESpeechIterator::VisitHomograph(MTFESpeechIterator *this, MTFEHomograph *a2)
{
  MTFESpeechElement *result;

  *((_QWORD *)this + 5) = a2;
  *((_QWORD *)this + 8) = a2;
  (*(void (**)(MTFESpeechIterator *))(*(_QWORD *)this + 160))(this);
  result = a2->var3;
  if (result)
    return (MTFESpeechElement *)(*(uint64_t (**)(MTFESpeechElement *, MTFESpeechIterator *))result->var0)(result, this);
  return result;
}

MTFESpeechElement *MTFESpeechIterator::VisitSyllable(MTFESpeechIterator *this, MTFESyllable *a2)
{
  MTFESpeechElement *result;

  *((_QWORD *)this + 6) = a2;
  *((_QWORD *)this + 8) = a2;
  (*(void (**)(MTFESpeechIterator *))(*(_QWORD *)this + 176))(this);
  result = a2->var3;
  if (result)
    return (MTFESpeechElement *)(*(uint64_t (**)(MTFESpeechElement *, MTFESpeechIterator *))result->var0)(result, this);
  return result;
}

MTFESpeechElement *MTFESpeechIterator::VisitPhoneme(MTFESpeechIterator *this, MTFEPhoneme *a2)
{
  MTFESpeechElement *result;

  *((_QWORD *)this + 7) = a2;
  *((_QWORD *)this + 8) = a2;
  (*(void (**)(MTFESpeechIterator *))(*(_QWORD *)this + 192))(this);
  result = a2->var3;
  if (result)
    return (MTFESpeechElement *)(*(uint64_t (**)(MTFESpeechElement *, MTFESpeechIterator *))result->var0)(result, this);
  return result;
}

void *MTFEFirstPhoneme(MTFESpeechElement *a1)
{
  MTFESpeechElement *v2;

  do
  {
    v2 = a1;
    a1 = a1->var3;
  }
  while (a1);
}

void *MTFELastPhoneme(MTFESpeechElement *a1)
{
  MTFESpeechElement *v2;

  do
  {
    v2 = a1;
    a1 = a1->var4;
  }
  while (a1);
}

void MTFEHomograph::~MTFEHomograph(MTFEHomograph *this)
{
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);
  JUMPOUT(0x1D8233BA8);
}

void MTFECommand::~MTFECommand(MTFECommand *this)
{
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);
  JUMPOUT(0x1D8233BA8);
}

void MTFESpeechIterator::~MTFESpeechIterator(MTFESpeechIterator *this)
{
  JUMPOUT(0x1D8233BA8);
}

void MTFESentence::~MTFESentence(MTFESentence *this)
{
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);
  JUMPOUT(0x1D8233BA8);
}

void MTFECommands::~MTFECommands(MTFECommands *this)
{
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);
  JUMPOUT(0x1D8233BA8);
}

void MTFEIntermediatePhrase::~MTFEIntermediatePhrase(MTFEIntermediatePhrase *this)
{
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);
  JUMPOUT(0x1D8233BA8);
}

void MTFEWord::~MTFEWord(MTFEWord *this)
{
  this->var0 = (void **)&off_1E9366258;
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)&this->var18);
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);
}

{
  this->var0 = (void **)&off_1E9366258;
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)&this->var18);
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);
  JUMPOUT(0x1D8233BA8);
}

void MTFESyllable::~MTFESyllable(MTFESyllable *this)
{
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);
  JUMPOUT(0x1D8233BA8);
}

void MTFESpeechPedigree::~MTFESpeechPedigree(MTFESpeechPedigree *this)
{
  JUMPOUT(0x1D8233BA8);
}

uint64_t MTPBPhraseProcessor::MTPBPhraseProcessor(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  MTPBSegmentProducer *v6;
  uint64_t v7;
  uint64_t v8;
  MTMBProducerComponent *v9;
  uint64_t v10;
  uint64_t v11;
  MTMBChangeAmplitude *v12;
  MTMBProducerComponent *v13;
  MTMBSpeechRateModifier *v14;

  v5 = a1 + 4272;
  MTPBVoice::MTPBVoice(a1 + 4272, a2);
  *(_QWORD *)a1 = off_1E9366690;
  MTBEPhraseProcessor::MTBEPhraseProcessor(a1, v5, a3, 1);
  *(_QWORD *)a1 = off_1E9366690;
  *(_QWORD *)(a1 + 4632) = *(_QWORD *)a3;
  v6 = (MTPBSegmentProducer *)operator new();
  MTPBSegmentProducer::MTPBSegmentProducer(v6, (MTFEFrameFiller *)(a1 + 2728), *(PROWReader **)(a1 + 4632), (MTBEParam *)(a1 + 88));
  v7 = operator new();
  v8 = *(_QWORD *)(a1 + 4232);
  *(_QWORD *)(v7 + 16) = &unk_1E9368880;
  v9 = (MTMBProducerComponent *)(v7 + 16);
  *(_QWORD *)v7 = &unk_1E9368858;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 24) = v8;
  *(_WORD *)(v7 + 48) = 0;
  v10 = operator new();
  MTMBChangePitch::MTMBChangePitch((MTMBChangePitch *)v10, v9, *(MTMBSignalProcessor **)(a1 + 4232));
  v11 = operator new();
  MTMBBlend::MTMBBlend((MTMBBlend *)v11, (MTMBProducerComponent *)(v10 + 16), *(MTMBSignalProcessor **)(a1 + 4232));
  v12 = (MTMBChangeAmplitude *)operator new();
  MTMBChangeAmplitude::MTMBChangeAmplitude(v12, (MTMBProducerComponent *)(v11 + 16), *(MTMBSignalProcessor **)(a1 + 4232), 1);
  v13 = (MTMBChangeAmplitude *)((char *)v12 + 16);
  if (MTBEParam::GetUsePostDurMod((MTBEParam *)(a1 + 88)))
  {
    v14 = (MTMBSpeechRateModifier *)operator new();
    MTMBSpeechRateModifier::MTMBSpeechRateModifier(v14, v13);
    v13 = (MTMBSpeechRateModifier *)((char *)v14 + 16);
  }
  *(_QWORD *)(a1 + 72) = v13;
  MTBEPhraseProcessor::ProcessPhrase((MTBEPhraseProcessor *)a1);
  return a1;
}

void sub_1D226FF3C(_Unwind_Exception *a1)
{
  MTBEPhraseProcessor *v1;
  uint64_t v2;

  MEMORY[0x1D8233BA8](v2, 0x10A1C4036524A53);
  MTBEPhraseProcessor::~MTBEPhraseProcessor(v1);
  _Unwind_Resume(a1);
}

void MTPBPhraseProcessor::ExpandCompoundsPreDur(MTPBPhraseProcessor *this, MTFESpeechElement *a2)
{
  _QWORD v2[3];
  int v3;
  char v4;

  if (!*((_BYTE *)this + 69))
  {
    v3 = 0;
    v2[0] = &unk_1E9366840;
    v4 = 1;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v2, a2);
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v2);
  }
}

void sub_1D227002C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&a9);
  _Unwind_Resume(a1);
}

void MTPBPhraseProcessor::ExpandCompoundsPostDur(MTPBPhraseProcessor *this, MTFESpeechElement *a2)
{
  _QWORD v2[3];
  int v3;
  char v4;

  if (!*((_BYTE *)this + 69))
  {
    v3 = 0;
    v2[0] = &unk_1E9366840;
    v4 = 0;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v2, a2);
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v2);
  }
}

void sub_1D2270090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&a9);
  _Unwind_Resume(a1);
}

void MTPBPhraseProcessor::~MTPBPhraseProcessor(MTPBPhraseProcessor *this)
{
  MTBEPhraseProcessor::~MTBEPhraseProcessor(this);
  JUMPOUT(0x1D8233BA8);
}

double MTPBVoice::MTPBVoice(uint64_t a1, uint64_t a2)
{
  double result;

  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 62) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 18);
  *(_QWORD *)(a1 + 76) = *(_QWORD *)(a2 + 22);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 30);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 34);
  *(_WORD *)(a1 + 352) = *(_WORD *)(a2 + 36);
  result = *(double *)(a2 + 38);
  *(double *)(a1 + 298) = result;
  *(_DWORD *)(a1 + 310) = *(_DWORD *)(a2 + 46);
  return result;
}

uint64_t OpenResourceFile(__CFBundle *a1, const __CFString *a2, uint64_t *a3)
{
  const __CFURL *v4;
  const __CFURL *v5;
  const __CFString *v6;
  const char *CStringPtr;
  uint64_t v8;
  uint64_t v9;
  CFIndex Length;
  CFIndex v11;
  char *v12;
  char *v13;

  v4 = CFBundleCopyResourceURL(a1, a2, 0, 0);
  if (v4)
  {
    v5 = v4;
    v6 = CFURLCopyFileSystemPath(v4, kCFURLPOSIXPathStyle);
    CFRelease(v5);
    if (v6)
    {
      CStringPtr = CFStringGetCStringPtr(v6, 0);
      if (CStringPtr)
      {
        v8 = open(CStringPtr, 0);
        *a3 = v8;
        goto LABEL_5;
      }
      Length = CFStringGetLength(v6);
      v11 = CFStringGetMaximumSizeForEncoding(Length, 0) + 1;
      v12 = (char *)malloc_type_malloc(v11, 0x29EE1ED8uLL);
      if (v12)
      {
        v13 = v12;
        if (CFStringGetCString(v6, v12, v11, 0))
        {
          *a3 = open(v13, 0);
          free(v13);
          v8 = *a3;
LABEL_5:
          if (v8 == -1)
            v9 = *__error();
          else
            v9 = 0;
          goto LABEL_14;
        }
        free(v13);
      }
      v9 = -1;
LABEL_14:
      CFRelease(v6);
      return v9;
    }
  }
  return -1;
}

uint64_t ReadResourceDataFile(__CFBundle *a1, const __CFString *a2, void **a3)
{
  uint64_t v4;
  int v5;
  int v6;
  off_t st_size;
  void *v8;
  stat v10;
  uint64_t v11;

  v11 = 0;
  v4 = OpenResourceFile(a1, a2, &v11);
  if (!v4)
  {
    v5 = v11;
    v6 = fstat(v11, &v10);
    if (v6)
    {
      v4 = v6;
    }
    else
    {
      st_size = v10.st_size;
      v8 = malloc_type_malloc(v10.st_size, 0x7CED88B4uLL);
      *a3 = v8;
      if (v8 && read(v5, v8, st_size) != st_size)
      {
        free(*a3);
        *a3 = 0;
        v4 = -1;
      }
      else
      {
        v4 = 0;
      }
    }
    close(v5);
  }
  return v4;
}

uint64_t MTFEFrameFiller::MTFEFrameFiller(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(_QWORD *)a1 = &off_1E9366748;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 88) = a7;
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)(a1 + 112), 8);
  *(_BYTE *)(a1 + 148) = a8;
  *(_WORD *)(a1 + 149) = 257;
  *(_DWORD *)(a1 + 151) = 0;
  *(_QWORD *)(a1 + 184) = &off_1E9366340;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 384) = xmmword_1D22CC6C0;
  return a1;
}

void sub_1D227039C(_Unwind_Exception *a1)
{
  MTFESpeechVisitor *v1;

  MTFESpeechVisitor::~MTFESpeechVisitor(v1);
  _Unwind_Resume(a1);
}

void MTFEFrameFiller::~MTFEFrameFiller(MTFEFrameFiller *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E9366748;
  v2 = (void **)((char *)this + 112);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFEFrameFiller *)((char *)this + 184));
  MEOWVectorBase::~MEOWVectorBase(v2);
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
}

{
  MTFEFrameFiller::~MTFEFrameFiller(this);
  JUMPOUT(0x1D8233BA8);
}

uint64_t MTFEFrameFiller::InitPhrase(MTFEFrameFiller *this, MTFESpeechElement *a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  __int16 v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _UNKNOWN ***v22;

  v3 = (_QWORD *)((char *)this + 518);
  result = MTFESpeechIterator::operator=((uint64_t)this + 184, a2);
  v5 = *((_QWORD *)this + 30);
  v6 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 34) = v5;
  *((_QWORD *)this + 35) = v6;
  *((_QWORD *)this + 32) = v5;
  *((_QWORD *)this + 33) = v5;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_BYTE *)this + 153) = 1;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 36) = 0;
  *((_BYTE *)this + 81) = 0;
  v7 = *((_QWORD *)this + 2);
  v8 = *(_WORD **)(*((_QWORD *)this + 1) + 8);
  *((_QWORD *)this + 22) = v8;
  v9 = *(unsigned int **)(v7 + 240);
  *((_QWORD *)this + 20) = v9;
  if (v9)
  {
    v10 = *v9;
    *((_QWORD *)this + 20) = v9 + 1;
    v9 = (unsigned int *)bswap32(v10);
  }
  *((_QWORD *)this + 21) = v9;
  v11 = *(__int16 *)(v7 + 26);
  *((_WORD *)this + 257) = v11;
  v12 = *(_WORD *)(v7 + 28);
  *((_WORD *)this + 258) = v12;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 8 * v11;
  *((_DWORD *)this + 125) = 0;
  *v3 = 0x200000000;
  *((_WORD *)this + 263) = 1;
  *((_WORD *)this + 264) = *v8;
  *((_WORD *)this + 256) = 256;
  *((_WORD *)this + 265) = 0;
  v13 = (_WORD *)*((_QWORD *)this + 5);
  *((_WORD *)this + 266) = (((26215 * (__int16)v13[153]) >> 16) >> 1)
                         + ((unsigned __int16)((26215 * (__int16)v13[153]) >> 16) >> 15);
  v14 = 1374389535 * ((unsigned __int16)v13[152] << 16);
  *((_QWORD *)this + 54) = 8 * v11;
  *((_QWORD *)this + 55) = (int)((v14 >> 37) + ((unint64_t)v14 >> 63));
  v15 = 274877907 * ((unsigned __int16)v13[149] << 16);
  v16 = 274877907 * ((unsigned __int16)v13[150] << 16);
  *((_QWORD *)this + 56) = (int)((v15 >> 38) + ((unint64_t)v15 >> 63));
  *((_QWORD *)this + 57) = (int)((v16 >> 38) + ((unint64_t)v16 >> 63));
  v17 = 1717986919 * ((unsigned __int16)v13[151] << 16);
  v18 = 1374389535 * (int)(((v17 >> 34) + (v17 >> 63)) << 8);
  v19 = 1374389535 * ((unsigned __int16)v13[20] << 16);
  *((_QWORD *)this + 58) = (int)((v18 >> 38) + ((unint64_t)v18 >> 63));
  *((_QWORD *)this + 59) = (int)((v19 >> 37) + ((unint64_t)v19 >> 63));
  v20 = 1374389535 * ((unsigned __int16)v13[21] << 16);
  v21 = 1374389535 * ((unsigned __int16)v13[22] << 16);
  *((_QWORD *)this + 60) = (int)((v20 >> 37) + ((unint64_t)v20 >> 63));
  *((_QWORD *)this + 61) = (int)((v21 >> 37) + ((unint64_t)v21 >> 63));
  v3[2] = 0xD8F0000000000000;
  if ((*(_BYTE *)(*((_QWORD *)this + 24) + 56) & 1) != 0)
  {
    *((_WORD *)this + 257) = v11 + 35;
    *((_WORD *)this + 258) = v12 + 21;
  }
  if (v13[4])
    v22 = &MTFEFrameFiller::GenderSpecific::sFemale;
  else
    v22 = &MTFEFrameFiller::GenderSpecific::sMale;
  *((_QWORD *)this + 185) = v22;
  if ((MTBEDebugFlags::sMTXDebug & 8) != 0 && !*((_BYTE *)this + 148))
    return puts("Av Af   f0   f1   f2   f3 a2 a3 a4 a5 a6  fnz AB  BW1  BW2  BW3 ED MK");
  return result;
}

uint64_t MTFEFrameFiller::SyncWithUnitSearch(uint64_t this)
{
  uint64_t v1;
  const char *v2;
  uint64_t i;

  v1 = this;
  if (*(_QWORD *)(this + 192) && *(_QWORD *)(this + 208))
  {
    pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(this + 32) + 96));
    for (i = *(_QWORD *)(v1 + 208); i == *(_QWORD *)(*(_QWORD *)(v1 + 192) + 80); i = *(_QWORD *)(v1 + 208))
    {
      MTBEWorker::DebugLog("Waiting for unit selection to proceed [%08x].\n", v2, i);
      pthread_cond_wait((pthread_cond_t *)(*(_QWORD *)(v1 + 32) + 160), (pthread_mutex_t *)(*(_QWORD *)(v1 + 32) + 96));
    }
    this = pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(v1 + 32) + 96));
  }
  *(_BYTE *)(v1 + 153) = 0;
  return this;
}

uint64_t MTFEFrameFiller::FillNextFrame(MTFEFrameFiller *this, const char *a2)
{
  uint64_t v4;
  uint64_t result;
  const char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  _BOOL4 v12;
  FILE **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!*((_BYTE *)this + 149))
    goto LABEL_26;
  v4 = *((_QWORD *)this + 30);
  if (!v4)
  {
    MTBEWorker::DebugLog("End of sentence.\n", a2);
LABEL_10:
    result = 0;
    *((_BYTE *)this + 153) = 0;
    *((_BYTE *)this + 151) = 0;
    return result;
  }
  if (*((_BYTE *)this + 151)
    && (!*((_BYTE *)this + 155) || *((_BYTE *)this + 155) == 1 && (*(_BYTE *)(v4 + 74) & 1) != 0))
  {
    goto LABEL_10;
  }
  if (*((_BYTE *)this + 154))
    return 0;
  if (*((_QWORD *)this + 26) != *((_QWORD *)this + 13))
  {
    pthread_mutex_lock((pthread_mutex_t *)(*((_QWORD *)this + 4) + 96));
    if (*((_QWORD *)this + 26) == *(_QWORD *)(*((_QWORD *)this + 24) + 80))
    {
      MTBEWorker::DebugLog("Will stall on search [%08x].\n", v6, *((_QWORD *)this + 26));
      *((_BYTE *)this + 153) = 1;
    }
    else
    {
      MTBEWorker::DebugLog("Intermediate Phrase [%08x].\n", v6, *((_QWORD *)this + 26));
      *((_QWORD *)this + 13) = *((_QWORD *)this + 26);
    }
    pthread_mutex_unlock((pthread_mutex_t *)(*((_QWORD *)this + 4) + 96));
    v7 = *((unsigned __int8 *)this + 153);
    *((_BYTE *)this + 154) = v7;
    if (v7)
      return 0;
  }
  v8 = *((_QWORD *)this + 25);
  if (v8 != *((_QWORD *)this + 12))
  {
    *((_QWORD *)this + 12) = v8;
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 128);
      if (v9)
        v9 += 4 * *(int *)(v8 + 144);
      *((_QWORD *)this + 6) = v9;
      v10 = *(_QWORD *)(v8 + 136);
      if (v10)
        v8 = v10 + 4 * *(int *)(v8 + 144);
      else
        v8 = 0;
    }
    else
    {
      *((_QWORD *)this + 6) = 0;
    }
    *((_QWORD *)this + 7) = v8;
  }
  MTFEFrameFiller::InitControls(this);
LABEL_26:
  if (a2)
  {
    if (!*((_BYTE *)this + 148))
      MTFEFrameFiller::InterpolateFormants((MTFESpeechElement *)this);
    MTFEFrameFiller::InterpolatePitch(this);
    MTFEFrameFiller::SaveFrame((uint64_t)this, (uint64_t)a2);
    v11 = *((_WORD *)this + 172) + 1;
    *((_WORD *)this + 172) = v11;
    v12 = *((__int16 *)this + 173) <= v11;
    *((_BYTE *)this + 149) = v12;
    if (!v12)
      return 1;
  }
  else
  {
    if ((MTBEDebugFlags::sMTXDebug & 8) != 0)
    {
      v13 = (FILE **)MEMORY[0x1E0C80C10];
      fputc(80, (FILE *)*MEMORY[0x1E0C80C10]);
      if (*((__int16 *)this + 173) >= 1)
      {
        v14 = 0;
        do
          fprintf(*v13, " %.0f", *(float *)(*((_QWORD *)this + 6) + 4 * v14++));
        while (v14 < *((__int16 *)this + 173));
      }
      fputc(10, *v13);
    }
    v15 = *((__int16 *)this + 173);
    v16 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 6) += 4 * v15;
    if (v16)
      *((_QWORD *)this + 7) = v16 + 4 * v15;
    if (!*((_BYTE *)this + 149))
      return 1;
  }
  MTFESpeechIterator::operator++((_QWORD *)this + 23);
  return 1;
}

uint64_t MTFEFrameFiller::InitControls(MTFEFrameFiller *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t result;

  *((_BYTE *)this + 80) = 1;
  v2 = *((_QWORD *)this + 30);
  if ((*(_BYTE *)(v2 + 74) & 0xF) != 0)
  {
    v3 = *((_QWORD *)this + 27);
    *((_QWORD *)this + 35) = v3;
    *((_BYTE *)this + 81) = 2;
    ++*((_WORD *)this + 72);
    MEOWVectorBase::Append((_QWORD *)this + 14);
    *(_QWORD *)(*((_QWORD *)this + 14) + 8 * *((_QWORD *)this + 16) - 8) = v3;
    MTFECommands::Visit(*((_QWORD *)this + 27) + 112, (uint64_t)this);
    v2 = *((_QWORD *)this + 30);
  }
  v4 = *((_QWORD *)this + 27);
  if (v2 == *(_QWORD *)(*(_QWORD *)(v4 + 24) + 24))
  {
    v5 = *((_BYTE *)this + 80) | *((_BYTE *)this + 81);
    *((_BYTE *)this + 80) = v5;
    *((_BYTE *)this + 81) = 0;
    if (v4 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 24) + 24) + 24) + 24))
      *((_BYTE *)this + 80) = v5 | 4;
  }
  if (*((_BYTE *)this + 151))
  {
    v6 = *((char *)this + 155);
    if (*((_BYTE *)this + 155))
    {
      if (v6 == 2)
      {
        if ((*((_BYTE *)this + 80) & 4) == 0)
          goto LABEL_14;
      }
      else if (v6 != 1 || (*((_BYTE *)this + 80) & 2) == 0)
      {
        goto LABEL_14;
      }
    }
    *((_BYTE *)this + 152) = 1;
  }
LABEL_14:
  v7 = (int)(float)(*(float *)(v2 + 64) * 5.0);
  v8 = *(unsigned __int8 *)(v2 + 58);
  v9 = *(unsigned __int8 *)(MEMORY[0x1E0DA8EA8] + v8);
  if ((_DWORD)v9 == 255)
    v10 = v7;
  else
    v10 = 0;
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 11) + 48))(*((_QWORD *)this + 11), *(unsigned __int8 *)(MEMORY[0x1E0DA8EA0] + v8), v10, 0);
  if ((_DWORD)v9 != 255)
  {
    if ((int)v7 >= 0)
      v11 = v7;
    else
      v11 = v7 + 1;
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**((_QWORD **)this + 11) + 48))(*((_QWORD *)this + 11), v9, v7, (v11 >> 1));
  }
  v12 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v12 + 50) && (*(_BYTE *)(*((_QWORD *)this + 30) + 75) & 2) != 0)
  {
    v13 = (unsigned int *)*((_QWORD *)this + 20);
    v14 = *((_QWORD *)this + 21);
    *((_QWORD *)this + 48) = bswap32(*v13);
    v15 = *(_QWORD *)(v12 + 240);
    if (v14 - (((uint64_t)v13 - v15) >> 2) > 1)
    {
      v16 = v13 + 1;
    }
    else
    {
      v16 = (unsigned int *)(v15 + 4);
      if (!v14)
        v16 = 0;
    }
    *((_QWORD *)this + 20) = v16;
  }
  else if (*(_BYTE *)(v12 + 49))
  {
    MTFEFrameFiller::DoNoteScript((uint64_t)this);
  }
  else if (*(_BYTE *)(v12 + 48))
  {
    MTFEFrameFiller::DoNote((uint64_t)this);
  }
  result = MTFEFrameFiller::FillPhonTargets((uint64_t)this);
  if (!*((_BYTE *)this + 148))
    return MTFEFrameFiller::InitControlBlocks(this);
  return result;
}

MTFESpeechElement *MTFEFrameFiller::InterpolateFormants(MTFESpeechElement *this)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  int v4;
  __int16 v5;
  _WORD *v6;
  __int16 v7;
  _WORD *v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned __int16 *v17;
  unint64_t j;
  signed __int16 v19;
  int v20;
  int v21;
  int v22;
  unsigned __int16 v23;

  v1 = (uint64_t)this;
  for (i = 0; i != 336; i += 48)
  {
    v3 = v1 + i;
    v4 = *(__int16 *)(v1 + 344);
    if (v4 <= *(__int16 *)(v1 + i + 546))
    {
      v7 = *(_WORD *)(v3 + 548);
      v5 = *(_WORD *)(v3 + 550);
    }
    else
    {
      v5 = 0;
      v6 = *(_WORD **)(v3 + 576);
      *(_WORD *)(v3 + 546) = *v6;
      *(_QWORD *)(v3 + 576) = v6 + 2;
      v7 = v6[1];
      *(_WORD *)(v3 + 548) = v7;
      *(_WORD *)(v3 + 544) += *(__int16 *)(v3 + 550) >> 3;
    }
    v8 = (_WORD *)(v1 + i);
    v9 = v5 + v7;
    *(_WORD *)(v1 + i + 550) = v9;
    v10 = *(_WORD *)(v1 + i + 552);
    if (v10)
      v8[276] = v10 - v8[277];
    v11 = v10 + v9;
    if (v4 >= (__int16)v8[280])
    {
      v12 = *(_WORD *)(v1 + i + 556);
      v11 += v12;
      *(_WORD *)(v1 + i + 556) = *(_WORD *)(v1 + i + 558) + v12;
    }
    v13 = *(unsigned __int16 *)(v3 + 544) + (v11 >> 3);
    v14 = v1 + i;
    *(_WORD *)(v1 + i + 586) = v13;
    if ((v13 & 0x8000) != 0)
    {
      this = MTBEAbort(*(MTFESpeechElement **)(v1 + 192));
    }
    v15 = *(__int16 *)(v14 + 562);
    if (v15 >= 1 && *(__int16 *)(v1 + 344) < v15)
      *(_WORD *)(v14 + 586) = *(_WORD *)(v1 + i + 564);
  }
  v16 = *(__int16 *)(v1 + 344);
  v17 = (unsigned __int16 *)(v1 + 880);
  for (j = 7; j != 15; ++j)
  {
    v19 = v17[4];
    if (v19)
      v17[4] = v19 - v17[5];
    v20 = *v17 + (v19 >> 3);
    if (v16 >= (__int16)v17[8])
    {
      v21 = (__int16)v17[6];
      v20 += v21 >> 3;
      v17[6] = v17[7] + v21;
    }
    v17[21] = v20;
    v22 = (__int16)v17[9];
    if (v22 >= 1)
    {
      if (v16 < v22)
      {
        v23 = v17[10];
LABEL_27:
        v17[21] = v23;
        goto LABEL_28;
      }
      if (j >= 9 && v22 + 1 == v16 && (__int16)v20 >= 11)
      {
        v23 = v20 - 10;
        goto LABEL_27;
      }
    }
LABEL_28:
    v17 += 24;
  }
  return this;
}

uint64_t MTFEFrameFiller::InterpolatePitch(MTFEFrameFiller *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  float *v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  __int16 DurModFakeRate;
  uint64_t v16;

  if (!*((_QWORD *)this + 6))
    MTFEFrameFiller::ProcessPitchEvents((uint64_t)this);
  v2 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v2 + 48))
  {
    if (*((_BYTE *)this + 513))
    {
      v3 = (uint64_t)*(__int16 *)(v2 + 190) << 16;
      *((_QWORD *)this + 50) = v3;
      *((_BYTE *)this + 513) = 0;
LABEL_6:
      *((_BYTE *)this + 511) = 0;
LABEL_7:
      v4 = (unint64_t)v3 >> 16;
      v5 = *((_DWORD *)this + 98) + *((_DWORD *)this + 116);
      *((_QWORD *)this + 49) = *(_QWORD *)&v5 & 0xFFFFFFLL;
      v6 = MTFEFrameFiller::sSineWave[BYTE2(v5)] - 128;
      v7 = 456;
      if ((*(_DWORD *)(*((_QWORD *)this + 30) + 72) & 0x10) == 0)
        v7 = 448;
      result = v4 + ((*(_DWORD *)((char *)this + v7) * v6) >> 16);
      goto LABEL_10;
    }
    if (!*((_BYTE *)this + 511))
    {
      v3 = *((_QWORD *)this + 50);
      goto LABEL_7;
    }
    v11 = *((_QWORD *)this + 51);
    if (v11 < 1)
    {
      if ((v11 & 0x8000000000000000) == 0)
      {
        v3 = (uint64_t)*(__int16 *)(v2 + 190) << 16;
LABEL_33:
        *((_QWORD *)this + 50) = v3;
        goto LABEL_6;
      }
      v3 = *((_QWORD *)this + 50) + v11;
      *((_QWORD *)this + 50) = v3;
      v12 = *(__int16 *)(v2 + 190);
      if (v12 <= v3 >> 16)
        goto LABEL_7;
    }
    else
    {
      v3 = *((_QWORD *)this + 50) + v11;
      *((_QWORD *)this + 50) = v3;
      v12 = *(__int16 *)(v2 + 190);
      if (v12 > v3 >> 16)
        goto LABEL_7;
    }
    v3 = v12 << 16;
    goto LABEL_33;
  }
  v9 = (float *)*((_QWORD *)this + 6);
  if (v9)
  {
    v10 = *v9;
    *((_QWORD *)this + 6) = v9 + 1;
    result = MTBEParam::HzToPitch((MTBEParam *)v2, (int)(float)(v10 + 0.5));
  }
  else
  {
    result = MTFEFrameFiller::OldNonSingingPitch(this);
  }
  *((_WORD *)this + 190) = result;
  if (*((_QWORD *)this + 6))
    goto LABEL_19;
  v13 = *((_DWORD *)this + 98) + *((_DWORD *)this + 116);
  *((_QWORD *)this + 49) = *(_QWORD *)&v13 & 0xFFFFFFLL;
  v14 = MTFEFrameFiller::sSineWave[BYTE2(v13)] - 128;
  if (MTBEParam::GetUsePostDurMod(*((MTBEParam **)this + 2)))
    DurModFakeRate = MTBEParam::GetDurModFakeRate(*((MTBEParam **)this + 2));
  else
    DurModFakeRate = *(_WORD *)(*((_QWORD *)this + 27) + 178);
  v16 = 456;
  if (DurModFakeRate > 99)
    v16 = 448;
  result = *((unsigned __int16 *)this + 190) + ((*(_DWORD *)((char *)this + v16) * v14) >> 16);
LABEL_10:
  *((_WORD *)this + 190) = result;
LABEL_19:
  if ((result & 0x8000) != 0)
    *((_WORD *)this + 190) = 0;
  ++*((_WORD *)this + 263);
  ++*((_WORD *)this + 261);
  ++*((_WORD *)this + 262);
  return result;
}

uint64_t MTFEFrameFiller::SaveFrame(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;

  v3 = result;
  if (!*(_BYTE *)(result + 148))
  {
    v4 = *(unsigned __int16 *)(result + 586);
    v5 = *(__int16 *)(result + 634);
    v6 = *(unsigned __int16 *)(result + 682);
    v7 = v5 - *(__int16 *)(result + 586);
    if (v7 <= 199)
      v4 += (209 - v7) % 0xAu - (209 - v7);
    v8 = *(__int16 *)(result + 682) - v5;
    if (v8 <= 599)
      v6 += 10 * ((609 - v8) / 0xAu);
    *(_WORD *)(a2 + 8) = MTBEParam::HzToPitch(*(MTBEParam **)(result + 16), (__int16)v4);
    *(_WORD *)(a2 + 10) = MTBEParam::HzToPitch(*(MTBEParam **)(v3 + 16), v5);
    *(_WORD *)(a2 + 12) = MTBEParam::HzToPitch(*(MTBEParam **)(v3 + 16), (__int16)v6);
    *(_WORD *)(a2 + 28) = (*(_DWORD *)(v3 + 472) * *(__int16 *)(v3 + 730)) >> 16;
    *(_WORD *)(a2 + 30) = (*(_DWORD *)(v3 + 480) * *(__int16 *)(v3 + 778)) >> 16;
    *(_WORD *)(a2 + 32) = (*(_DWORD *)(v3 + 488) * *(__int16 *)(v3 + 826)) >> 16;
    result = MTBEParam::HzToPitch(*(MTBEParam **)(v3 + 16), *(__int16 *)(v3 + 874));
    *(_WORD *)(a2 + 24) = result;
    v9 = *(__int16 *)(v3 + 922);
    if (v9 >= 63)
      v10 = 63;
    else
      v10 = *(__int16 *)(v3 + 922);
    v11 = v10 >> 1;
    if (v9 >= 0)
      v12 = v11;
    else
      v12 = 0;
    *(_WORD *)(a2 + 4) = MTFEFrameFiller::sLogToLin[v12];
    v13 = *(__int16 *)(v3 + 970);
    if (v13 >= 63)
      v14 = 63;
    else
      v14 = *(__int16 *)(v3 + 970);
    v15 = v14 >> 1;
    if (v13 >= 0)
      v16 = v15;
    else
      v16 = 0;
    *(_WORD *)(a2 + 6) = MTFEFrameFiller::sLogToLin[v16];
    v17 = *(__int16 *)(v3 + 1018);
    if (v17 >= 63)
      v18 = 63;
    else
      v18 = *(__int16 *)(v3 + 1018);
    v19 = v18 >> 1;
    if (v17 >= 0)
      v20 = v19;
    else
      v20 = 0;
    *(_WORD *)(a2 + 14) = MTFEFrameFiller::sLogToLin[v20];
    v21 = *(__int16 *)(v3 + 1066);
    if (v21 >= 63)
      v22 = 63;
    else
      v22 = *(__int16 *)(v3 + 1066);
    v23 = v22 >> 1;
    if (v21 >= 0)
      v24 = v23;
    else
      v24 = 0;
    *(_WORD *)(a2 + 16) = MTFEFrameFiller::sLogToLin[v24];
    v25 = *(__int16 *)(v3 + 1114);
    if (v25 >= 63)
      v26 = 63;
    else
      v26 = *(__int16 *)(v3 + 1114);
    v27 = v26 >> 1;
    if (v25 >= 0)
      v28 = v27;
    else
      v28 = 0;
    *(_WORD *)(a2 + 18) = MTFEFrameFiller::sLogToLin[v28];
    v29 = *(__int16 *)(v3 + 1162);
    if (v29 >= 63)
      v30 = 63;
    else
      v30 = *(__int16 *)(v3 + 1162);
    v31 = v30 >> 1;
    if (v29 >= 0)
      v32 = v31;
    else
      v32 = 0;
    *(_WORD *)(a2 + 20) = MTFEFrameFiller::sLogToLin[v32];
    v33 = *(__int16 *)(v3 + 1210);
    if (v33 >= 63)
      v34 = 63;
    else
      v34 = *(__int16 *)(v3 + 1210);
    v35 = v34 >> 1;
    if (v33 >= 0)
      v36 = v35;
    else
      v36 = 0;
    *(_WORD *)(a2 + 22) = MTFEFrameFiller::sLogToLin[v36];
    v37 = *(__int16 *)(v3 + 1258);
    if (v37 >= 63)
      v38 = 63;
    else
      v38 = *(__int16 *)(v3 + 1258);
    v39 = v38 >> 1;
    if (v37 < 0)
      v39 = 0;
    *(_WORD *)(a2 + 26) = MTFEFrameFiller::sLogToLin[v39];
    v40 = *(_QWORD *)(v3 + 384);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(v3 + 296);
    *(_QWORD *)(a2 + 48) = v40;
    *(_QWORD *)(v3 + 384) = -1;
  }
  v41 = *(__int16 *)(v3 + 380);
  *(_WORD *)a2 = *(_WORD *)(v3 + 380);
  *(_BYTE *)(a2 + 2) = *(_BYTE *)(v3 + 149);
  if ((MTBEDebugFlags::sMTXDebug & 8) != 0)
  {
    if (*(_BYTE *)(v3 + 148))
      return printf("%4d\n");
    else
      return printf("%2d %2d %4d %4d %4d %4d %2d %2d %2d %2d %2d %4d %2d %4d %4d %4d %2d %2ld\n", *(__int16 *)(a2 + 4), *(__int16 *)(a2 + 6), v41, *(__int16 *)(a2 + 8), *(__int16 *)(a2 + 10), *(__int16 *)(a2 + 12));
  }
  return result;
}

uint64_t MTFEFrameFiller::SkipWord(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = this;
  v2 = *(_QWORD *)(this + 216);
  if (*(_QWORD *)(this + 280) == v2)
  {
    v3 = 0;
    do
    {
      this = MTFEFrameFiller::FillNextFrame((MTFEFrameFiller *)v1, 0);
      v3 |= this ^ 1;
      v2 = *(_QWORD *)(v1 + 216);
    }
    while (*(_QWORD *)(v1 + 280) == v2);
    if ((v3 & 1) != 0)
    {
      *(_WORD *)(v1 + 151) = 1;
      *(_BYTE *)(v1 + 155) = 0;
    }
  }
  *(_QWORD *)(v1 + 280) = v2;
  return this;
}

uint64_t MTFEFrameFiller::PauseAt(uint64_t this, char a2)
{
  *(_WORD *)(this + 151) = 1;
  *(_BYTE *)(this + 155) = a2;
  return this;
}

BOOL MTFEFrameFiller::AtEndOfPhrase(MTFEFrameFiller *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 35);
  v2 = *(_QWORD *)(v1 + 32);
  return v1 == *(_QWORD *)(v2 + 24) && v2 == *(_QWORD *)(*(_QWORD *)(v2 + 32) + 24);
}

uint64_t MTFEFrameFiller::DoNoteScript(uint64_t this)
{
  uint64_t v1;
  _WORD *v2;
  uint64_t v3;
  __int16 v4;
  __int16 v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  if ((*(_DWORD *)(*(_QWORD *)(this + 240) + 72) & 0x10008000) == 0x10000000)
  {
    v1 = *(_QWORD *)(this + 40);
    v2 = *(_WORD **)(this + 16);
    v3 = (__int16)v2[106];
    v2[106] = v3 + 1;
    v4 = *(_WORD *)(v1 + 2 * v3 + 350) << 8;
    v5 = *(__int16 *)(v1 + 348) > (__int16)(v3 + 1) ? v3 + 1 : 0;
    v2[106] = v5;
    if (v4 != 32512)
    {
      v6 = (unsigned __int16)v2[95];
      v7 = (__int16)(v2[97] + ((5461 * v4) >> 16));
      v8 = v7 & ~(v7 >> 31);
      v2[95] = v8;
      v9 = *(__int16 *)(this + 532);
      if (*(_WORD *)(this + 532))
        v9 = ((v8 - v6) << 16) / v9;
      *(_QWORD *)(this + 408) = v9;
      *(_BYTE *)(this + 511) = 1;
    }
  }
  return this;
}

uint64_t MTFEFrameFiller::DoNote(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;

  v1 = *(_QWORD *)(this + 240);
  if (*(_WORD *)(v1 + 62) && (*(_BYTE *)(v1 + 73) & 0x80) == 0)
  {
    v2 = *(_QWORD *)(this + 16);
    v3 = *(unsigned __int16 *)(v2 + 190);
    v4 = (__int16)(*(_WORD *)(v2 + 194) + ((5461 * (__int16)(*(_WORD *)(v1 + 62) << 8)) >> 16));
    *(_WORD *)(v2 + 190) = v4 & ~(unsigned __int16)(v4 >> 31);
    if (*(_WORD *)(this + 532))
      v5 = (((v4 & ~(v4 >> 31)) - v3) << 16) / (uint64_t)*(__int16 *)(this + 532);
    else
      v5 = 0;
    *(_QWORD *)(this + 408) = v5;
    *(_BYTE *)(this + 511) = 1;
  }
  return this;
}

uint64_t MTFEFrameFiller::FillPhonTargets(uint64_t this)
{
  uint64_t v1;
  MTFEPhoneme *v2;
  float var13;
  float var14;
  int v5;
  MTFESpeechElement *var7;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t var9;
  uint64_t v14;
  MTFESpeechElement *var6;
  uint64_t v16;
  uint64_t var3_low;
  int v18;
  uint64_t v19;
  uint64_t j;

  v1 = this;
  *(_WORD *)(this + 344) = 0;
  v2 = *(MTFEPhoneme **)(this + 240);
  var13 = v2->var13;
  var14 = v2->var14;
  v5 = (int)var13;
  *(_WORD *)(this + 346) = (int)var13;
  *(_WORD *)(this + 348) = (int)(float)(var13 * var14);
  *(_OWORD *)(this + 64) = *(_OWORD *)(this + 48);
  var7 = v2->var7;
  if (var7)
  {
    *(_BYTE *)(this + 292) = *(_BYTE *)(this + 290);
    v7 = *(_QWORD *)(this + 320);
    v8 = BYTE2(var7[1].var0);
    *(_BYTE *)(this + 290) = v8;
    *(_BYTE *)(this + 291) = BYTE3(var7[1].var0) != 0;
    *(_QWORD *)(this + 320) = LODWORD(var7[1].var3);
    *(_QWORD *)(this + 328) = v7;
  }
  else
  {
    *(_WORD *)(this + 290) = 0;
    *(_BYTE *)(this + 292) = 0;
    *(_QWORD *)(this + 320) = 0;
    *(_QWORD *)(this + 328) = 0;
    if (*(_BYTE *)(this + 150))
    {
      *(_BYTE *)(this + 150) = 0;
      if (!*(_BYTE *)(this + 148))
      {
        *(_DWORD *)(this + 1264) = 0;
        v9 = 1;
        for (i = 570; i != 1290; i += 48)
        {
          this = MTFEFrameFiller::GetFirstTarget((MTFEFrameFiller *)v1, v2);
          *(_WORD *)(v1 + i) = this;
          *(_DWORD *)(v1 + 1264) = v9++;
        }
      }
    }
    v8 = 0;
  }
  v11 = MEMORY[0x1E0DA8EC8];
  v12 = *(unsigned int *)(MEMORY[0x1E0DA8EC8] + 4 * v8);
  *(_QWORD *)(v1 + 272) = v2;
  var9 = v2->var9;
  *(_BYTE *)(v1 + 288) = var9;
  *(_BYTE *)(v1 + 289) = v2->var10 != 0;
  v14 = *(unsigned int *)(v11 + 4 * var9);
  *(_QWORD *)(v1 + 296) = v14;
  *(_QWORD *)(v1 + 304) = v12;
  var6 = v2->var6;
  if (!var6)
    var6 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  v16 = BYTE2(var6[1].var0);
  *(_BYTE *)(v1 + 293) = v16;
  *(_BYTE *)(v1 + 294) = BYTE3(var6[1].var0) != 0;
  *(_QWORD *)(v1 + 312) = *(unsigned int *)(v11 + 4 * v16);
  var3_low = LODWORD(var6[1].var3);
  v18 = MTFEPhonemeDuration::sMaxDur[var9];
  *(_QWORD *)(v1 + 336) = var3_low;
  *(_WORD *)(v1 + 350) = (__int16)v18 / 5;
  if (var9 && (v14 & 0x400) == 0)
  {
    v19 = ((uint64_t)v5 << 16) / (int)(((26215 * v18) >> 17) + ((26215 * v18) >> 31));
    *(_QWORD *)(v1 + 352) = v19;
    *(_QWORD *)(v1 + 360) = (v19 >> 1) + 0x8000;
    *(_QWORD *)(v1 + 368) = (v19 >> 1) + 26218;
  }
  *(_QWORD *)(v1 + 1472) = v1 + 1268;
  if (!*(_BYTE *)(v1 + 148))
  {
    for (j = 0; j != 720; j += 48)
      *(_WORD *)(v1 + 562 + j) = 0;
  }
  return this;
}

uint64_t MTFEFrameFiller::InitControlBlocks(MTFEFrameFiller *this)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  int v6;
  unsigned __int16 *v7;
  char *v8;
  MTFEPhoneme *v9;
  MTFEPhoneme *var6;
  int FirstTarget;
  __int16 *v12;
  int Target;
  char *v14;
  int v15;
  int v16;
  char *v17;
  _WORD *v18;
  int v19;
  __int16 v20;
  int v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v28;

  v2 = 0;
  v3 = (char *)this + 544;
  *((_DWORD *)this + 316) = 0;
  do
  {
    v4 = v2;
    v5 = &v3[48 * v2];
    v28 = MTFEFrameFiller::sControlType[v2];
    v7 = (unsigned __int16 *)(v5 + 26);
    v6 = *((__int16 *)v5 + 13);
    *((_WORD *)v5 + 12) = v6;
    v8 = v3;
    v9 = (MTFEPhoneme *)*((_QWORD *)this + 30);
    if (v9->var6)
      var6 = (MTFEPhoneme *)v9->var6;
    else
      var6 = (MTFEPhoneme *)&MTFEPhonemeFlags::sSIL;
    FirstTarget = MTFEFrameFiller::GetFirstTarget(this, var6);
    *((_WORD *)v5 + 11) = FirstTarget;
    v12 = (__int16 *)(v5 + 22);
    *((_WORD *)v5 + 3) = 0;
    Target = MTFEFrameFiller::GetTarget(this, v9);
    *(_WORD *)v5 = Target;
    if (Target > -2)
    {
      v14 = &v8[48 * v4];
      *((_WORD *)v14 + 2) = 0;
      *((_WORD *)v14 + 1) = (int)v9->var13;
      if (!v28)
      {
        if (v4 == 1)
          v15 = 16375;
        else
          v15 = 9825;
        if ((v9->var15 & 0x1C00) != 0)
          v16 = v15;
        else
          v16 = 6550;
        Target += (v16 * (((FirstTarget + v6) >> 1) - Target)) >> 16;
        *(_WORD *)v5 = Target;
      }
      *v7 = Target;
      v3 = v8;
      if (!v28)
LABEL_17:
        *v12 += (6550 * ((__int16)*v7 - *v12)) >> 16;
    }
    else
    {
      MTFEFrameFiller::GetDiphthongs(this, Target & 0x7FFF);
      v3 = v8;
      if (!v28)
        goto LABEL_17;
    }
    *((_WORD *)this + 189) = (*(__int16 *)v5 + *((__int16 *)v5 + 12)) >> 1;
    *((_WORD *)this + 188) = 6;
    MTFEFrameFiller::HeadRules(this);
    v17 = &v3[48 * v4];
    *((_WORD *)v17 + 4) = 0;
    v18 = v17 + 8;
    v19 = *((__int16 *)this + 188);
    if (v19 >= 1)
    {
      v20 = 8 * (*((_WORD *)this + 189) - *(_WORD *)v5);
      *v18 = v20;
      if ((v20 & 0xFFF8) != 0)
      {
        v21 = v20 / v19;
        *(_WORD *)&v3[48 * v4 + 10] = v21;
        *v18 = v21 * v19;
      }
    }
    *((_WORD *)this + 189) = (*v12 + (__int16)*v7) >> 1;
    *((_WORD *)this + 188) = 5;
    MTFEFrameFiller::TailRules(this);
    v22 = &v3[48 * v4];
    *((_DWORD *)v22 + 3) = 0;
    v23 = *((unsigned __int16 *)this + 188);
    if ((__int16)v23 >= 1)
    {
      v24 = *((unsigned __int16 *)this + 189);
      v25 = *v7;
      if (v24 != v25)
        *((_WORD *)v22 + 7) = 8 * ((__int16)v24 - (__int16)v25) / v23;
    }
    v26 = *((_DWORD *)this + 316);
    v2 = v26 + 1;
    *((_DWORD *)this + 316) = v26 + 1;
  }
  while (v26 < 14);
  return MTFEFrameFiller::InsertBurst((uint64_t)this);
}

uint64_t MTFEFrameFiller::GetFirstTarget(MTFEFrameFiller *this, MTFEPhoneme *a2)
{
  int Target;
  __int16 v5;

  Target = MTFEFrameFiller::GetTarget(this, a2);
  v5 = Target;
  if (Target <= -2)
  {
    v5 = *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 185) + 8) + 2 * (Target & 0x7FFF));
    if (!MTFEFrameFiller::sControlType[*((int *)this + 316)])
      v5 += MTFEFrameFiller::AdjustColoredTarget(this, a2, 0);
  }
  return v5;
}

uint64_t MTFEFrameFiller::GetTarget(MTFEFrameFiller *this, MTFEPhoneme *a2)
{
  uint64_t v2;
  MTFESpeechElement *var7;
  MTFESpeechElement *var6;
  uint64_t var9;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int var15;
  __int16 v15;
  __int16 v16;
  _BOOL4 v17;
  BOOL v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  __int16 v23;
  uint64_t v24;

  v2 = *((int *)this + 316);
  var7 = a2->var7;
  if (!var7)
    var7 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  if (a2->var6)
    var6 = a2->var6;
  else
    var6 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  var9 = a2->var9;
  v6 = BYTE2(var7[1].var0);
  v7 = *(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * var9);
  v8 = BYTE2(var6[1].var0);
  v9 = *(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * v6);
  switch(MTFEFrameFiller::sControlType[v2])
  {
    case 0:
    case 1:
      v10 = (_QWORD *)*((_QWORD *)this + 185);
      v11 = *(_QWORD *)(*v10 + 8 * v2);
      LODWORD(v12) = *(unsigned __int16 *)(v11 + 2 * var9);
      if ((_DWORD)v12 != 0xFFFF)
        return (__int16)v12;
      LODWORD(v12) = *(unsigned __int16 *)(v11 + 2 * v8);
      if ((_DWORD)v12 != 0xFFFF)
        goto LABEL_51;
      v12 = (uint64_t)var6->var6;
      if (!v12)
        v12 = (uint64_t)&MTFEPhonemeFlags::sSIL;
      LODWORD(v12) = *(unsigned __int16 *)(v11 + 2 * *(unsigned __int8 *)(v12 + 58));
      if ((_DWORD)v12 != 0xFFFF)
        goto LABEL_51;
      LODWORD(v12) = *(__int16 *)(v11 + 2 * v6);
      if ((_DWORD)v12 == -1)
      {
        v12 = (uint64_t)&MTFEFrameFiller::sDefaultTarg + 2 * v2;
      }
      else
      {
        if ((v12 & 0x80000000) == 0)
          goto LABEL_53;
        v12 = v10[1] + 2 * ((v12 & 0x7FFF) + 2);
      }
      LOWORD(v12) = *(_WORD *)v12;
LABEL_51:
      if ((__int16)v12 <= -2)
        LOWORD(v12) = *(_WORD *)(v10[1] + 2 * (v12 & 0x7FFF));
LABEL_53:
      v24 = v7 & 0xC00;
      if ((v9 & 1) != 0 && v24 == 1024 && (_DWORD)v2 == 0)
        LOWORD(v12) = v12 + 40;
      if (((_DWORD)var9 == 36 || (_DWORD)var9 == 29) && (_DWORD)v2 == 4 && !MTFEFrameFiller::sRankFwd[v8])
        LOWORD(v12) = v12 + 60;
      if (var9 <= 0x25
        && ((1 << var9) & 0x3020000000) != 0
        && (_DWORD)v2 == 4
        && ((*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * v6) & 0x80000) != 0
         || (*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * v8) & 0x40000) != 0))
      {
        LOWORD(v12) = 1225;
      }
      return (__int16)v12;
    case 2:
      v13 = *((_QWORD *)this + 5);
      if ((v7 & 0x40) != 0)
        LOWORD(v12) = *(_WORD *)(v13 + 34);
      else
        LOWORD(v12) = *(_WORD *)(v13 + 32);
      return (__int16)v12;
    case 3:
      var15 = a2->var15;
      if ((_DWORD)v2 == 7)
      {
        v15 = *(char *)(*(_QWORD *)(*((_QWORD *)this + 185) + 32) + var9);
        v16 = v15 - 20;
        if ((v9 & 0x40) != 0)
          v16 = v15 - 6;
        if ((var15 & 0x4000) != 0)
          v15 = v16;
        v17 = var9 != 34;
        v18 = (v9 & 4) == 0;
        if (v18)
          v17 = 1;
        if ((v18 & (v7 >> 12)) != 0)
          v15 = 0;
        if ((var15 & 0x1400) != 0)
          v17 = 1;
        if (v17)
          LOWORD(v12) = v15;
        else
          LOWORD(v12) = 54;
      }
      else
      {
        if ((_DWORD)var9 != 34)
          goto LABEL_48;
        if (MTFEFrameFiller::sRankFwd[v8])
          v23 = 62;
        else
          v23 = 58;
        LOWORD(v12) = v23 - ((var15 & 0x1C00) == 0);
      }
      return (__int16)v12;
    case 4:
      v19 = MTFEFrameFiller::sNoiseIndex[var9];
      if (v19 == 0xFFFF)
      {
LABEL_48:
        LOWORD(v12) = 0;
      }
      else
      {
        if (BYTE2(var6[1].var0))
          v20 = &MTFEFrameFiller::sRankFwd[v8];
        else
          v20 = (unsigned __int8 *)&MTFEFrameFiller::sRankBkwd + v6;
        v21 = *v20;
        if (v21 == 4)
          LOBYTE(v21) = 2;
        v22 = *(__int16 *)(*(_QWORD *)(*((_QWORD *)this + 185) + 24) + 2 * (__int16)(v2 + 6 * (char)v21 + v19 - 9));
        if (((v22 > 3) & (LODWORD(var6[1].var3) >> 14)) != 0)
          LOWORD(v12) = v22 - 4;
        else
          LOWORD(v12) = v22;
      }
      return (__int16)v12;
    default:
      LOWORD(v12) = -1;
      return (__int16)v12;
  }
}

float MTFEFrameFiller::GetDiphthongs(MTFEFrameFiller *this, int a2)
{
  char *v3;
  uint64_t v4;
  int v5;
  __int16 *v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  int v20;
  __int16 v21;
  char *v22;
  int v23;
  unsigned int v24;
  MTFEPhoneme *v25;
  int v26;
  unsigned int v27;
  __int16 v28;
  int v29;
  char *v30;
  float result;
  char *v32;

  v3 = (char *)this + 544;
  v4 = *((int *)this + 316);
  v5 = MTFEFrameFiller::sControlType[v4];
  v6 = (__int16 *)*((_QWORD *)this + 184);
  *((_QWORD *)this + 6 * (int)v4 + 72) = v6;
  v7 = *(_QWORD *)(*((_QWORD *)this + 185) + 8);
  v8 = *(__int16 *)(v7 + 2 * a2);
  v9 = *(_WORD *)(v7 + 2 * a2);
  v10 = *(__int16 *)(v7 + 2 * (__int16)(a2 + 1));
  v11 = *(__int16 *)(v7 + 2 * (__int16)(a2 + 2));
  v12 = *(__int16 *)(v7 + 2 * (__int16)(a2 + 3));
  v13 = v11;
  v14 = *((_QWORD *)this + 44);
  v15 = *((__int16 *)this + 175);
  v16 = ((unsigned __int128)(((v14 * v10) >> 8) * v15 * (__int128)(uint64_t)0xA3D70A3D70A3D70BLL) >> 64)
      + ((v14 * v10) >> 8) * v15;
  v17 = (__int16)((int)((v16 >> 63) + (v16 >> 6)) >> 8);
  if (v17 <= 1)
    v18 = 1;
  else
    v18 = v17;
  v19 = ((unsigned __int128)(((v14 * v12) >> 8) * v15 * (__int128)(uint64_t)0xA3D70A3D70A3D70BLL) >> 64)
      + ((v14 * v12) >> 8) * v15;
  v20 = (__int16)((int)((v19 >> 63) + (v19 >> 6)) >> 8);
  if (v20 <= 1)
    v21 = 1;
  else
    v21 = v20;
  if (!v5)
  {
    v22 = &v3[48 * (int)v4];
    v23 = *((__int16 *)v22 + 12);
    v24 = (6550 * (v23 - v8)) >> 16;
    if (v23 <= 0)
      LOWORD(v24) = 0;
    v25 = (MTFEPhoneme *)*((_QWORD *)this + 30);
    v32 = (char *)this + 544;
    v9 += MTFEFrameFiller::AdjustColoredTarget(this, v25, 0) + v24;
    v26 = *((__int16 *)v22 + 11);
    if (v26 <= 0)
      LOWORD(v27) = 0;
    else
      v27 = (6550 * (v26 - v11)) >> 16;
    v28 = MTFEFrameFiller::AdjustColoredTarget(this, v25, 1);
    v3 = v32;
    v13 = v28 + v11 + v27;
  }
  if (v21 == v18)
    LOWORD(v29) = 0;
  else
    v29 = 8 * (v13 - v9) / (__int16)(v21 - v18);
  v30 = &v3[48 * (int)v4];
  *(_WORD *)v30 = v9;
  *((_WORD *)v30 + 1) = v18;
  *((_WORD *)v30 + 2) = 0;
  *v6 = v21;
  result = *(float *)(*((_QWORD *)this + 30) + 64);
  v6[1] = v29;
  v6[2] = (int)result;
  *((_QWORD *)this + 184) = v6 + 4;
  v6[3] = 0;
  *((_WORD *)v30 + 13) = v13;
  return result;
}

_DWORD *MTFEFrameFiller::HeadRules(_DWORD *this)
{
  _DWORD *v1;
  uint64_t v2;
  _DWORD *v3;
  __int16 *v4;
  __int16 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  unsigned int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  unsigned int v20;
  int v21;
  __int16 v22;
  MTFEPhoneme *v23;
  MTFEPhoneme *var7;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  int v36;
  __int16 v37;
  __int16 v38;
  int v39;
  int v40;
  __int16 v41;

  v1 = this;
  v2 = (int)this[316];
  v3 = this + 136;
  v4 = (__int16 *)&this[12 * (int)v2 + 136];
  switch(MTFEFrameFiller::sControlType[v2])
  {
    case 0:
      v10 = *((_QWORD *)this + 37);
      if ((v10 & 0x20) == 0)
        goto LABEL_61;
      if ((v10 & 0x80) != 0)
      {
        *((_WORD *)this + 189) = (*((__int16 *)this + 189) + SLOWORD(v3[12 * (int)v2 + 6])) >> 1;
        v22 = 6;
        goto LABEL_60;
      }
      *((_WORD *)this + 188) = 9;
      if ((this[76] & 0x80) == 0)
      {
        if (*((_BYTE *)this + 288) != 34)
          goto LABEL_61;
        v11 = (*((__int16 *)this + 189) + SLOWORD(v3[12 * (int)v2 + 6])) >> 1;
        goto LABEL_21;
      }
      v11 = (*((__int16 *)this + 189) + SLOWORD(v3[12 * (int)v2 + 6])) >> 1;
      *((_WORD *)this + 189) = v11;
      v35 = *((unsigned __int8 *)this + 290);
      if (v35 == 32)
      {
        if (!(_DWORD)v2)
          goto LABEL_61;
        v22 = 14;
LABEL_60:
        *((_WORD *)this + 188) = v22;
        goto LABEL_61;
      }
      if (v35 == 33 && !(_DWORD)v2)
      {
        LOWORD(v11) = v11 + 80;
LABEL_21:
        *((_WORD *)this + 189) = v11;
      }
LABEL_61:
      if (!*((_BYTE *)this + 288))
      {
        *((_WORD *)this + 189) = v3[12 * (int)v2 + 6];
        *((_WORD *)this + 188) = *((_WORD *)this + 173);
        v25 = *((_QWORD *)this + 38);
        goto LABEL_124;
      }
      v23 = (MTFEPhoneme *)*((_QWORD *)this + 30);
      var7 = (MTFEPhoneme *)v23->var7;
      if (var7)
      {
        MTFEFrameFiller::GetLocus(this, var7, v23, 0);
        this = MTFEFrameFiller::GetLocus(v1, *((MTFEPhoneme **)v1 + 30), *(MTFEPhoneme **)(*((_QWORD *)v1 + 30) + 48), 1);
      }
      v25 = *((_QWORD *)v1 + 38);
      if ((v25 & 0x1004) == 0x1000 && !v1[316])
        *((_WORD *)v1 + 189) += 100;
      v26 = *((_QWORD *)v1 + 37);
      if ((v26 & 0x400) != 0)
      {
        if ((v26 & 0x1000) != 0)
        {
          v27 = *((_WORD *)v1 + 173);
        }
        else if (v1[316])
        {
          v27 = 6;
        }
        else
        {
          v27 = 4;
        }
        *((_WORD *)v1 + 188) = v27;
      }
      if ((v26 & 0x40) != 0)
      {
        v33 = v1[316];
        if (v33)
          v34 = *((_WORD *)v1 + 173);
        else
          v34 = 0;
        *((_WORD *)v1 + 188) = v34;
        v36 = *((unsigned __int8 *)v1 + 288);
        if (v36 != 36)
        {
          if (v36 == 35)
          {
            if (v33 == 1 && (v25 & 0x80000) != 0)
            {
              v37 = *((_WORD *)v1 + 189) - 150;
LABEL_123:
              *((_WORD *)v1 + 189) = v37;
              goto LABEL_124;
            }
            goto LABEL_124;
          }
          if (v36 != 29)
            goto LABEL_124;
        }
        if (MTFEFrameFiller::sRankBkwd[*((unsigned __int8 *)v1 + 290)])
          goto LABEL_124;
        if (v33 == 2)
        {
          v38 = *((_WORD *)v1 + 189);
          goto LABEL_122;
        }
        if (v33 == 1)
        {
          v38 = *((_WORD *)v1 + 189);
          if ((v25 & 0x80000) != 0)
          {
            v37 = v38 - 200;
            goto LABEL_123;
          }
LABEL_122:
          v37 = v38 - 100;
          goto LABEL_123;
        }
      }
LABEL_124:
      if ((v25 & 0x400) == 0
        && MTFEFrameFiller::sRankBkwd[*((unsigned __int8 *)v1 + 290)] != 3
        && *((__int16 *)v1 + 188) >= 1)
      {
        v16 = ((v1[90] * *((unsigned __int16 *)v1 + 188)) >> 16) + 1;
        goto LABEL_128;
      }
LABEL_129:
      v39 = *((__int16 *)v1 + 188);
      v40 = *((__int16 *)v1 + 173);
      if (v39 > v40)
      {
        *((_WORD *)v1 + 188) = *((_WORD *)v1 + 173);
        v39 = v40;
      }
      if (v39 <= 26)
      {
        if ((v39 & 0x80000000) == 0)
          return this;
        v41 = 0;
      }
      else
      {
        v41 = 26;
      }
      *((_WORD *)v1 + 188) = v41;
      return this;
    case 1:
      v12 = *((_QWORD *)this + 37);
      if ((v12 & 4) == 0)
      {
        v13 = 4;
LABEL_32:
        *((_WORD *)this + 188) = v13;
        goto LABEL_74;
      }
      if ((_DWORD)v2 != 3 || (*((_QWORD *)this + 38) & 4) != 0)
      {
        v13 = 8;
        goto LABEL_32;
      }
      *((_WORD *)this + 188) = 10;
      *((_WORD *)this + 189) = *v4 + (*((__int16 *)this + 272) >> 3);
LABEL_74:
      v28 = *((unsigned __int8 *)this + 290);
      if (*((_BYTE *)this + 290))
      {
        if (*((_BYTE *)this + 288))
          goto LABEL_83;
        *((_WORD *)this + 189) = LOWORD(v3[12 * (int)v2 + 6]) + 200;
        if ((*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * *((unsigned __int8 *)this + 292)) & 4) == 0
          || (_DWORD)v2 != 3
          || (*((_QWORD *)this + 40) & 0x4000) == 0)
        {
LABEL_82:
          *((_WORD *)this + 188) = 10;
LABEL_83:
          if ((this[76] & 0x40) == 0)
            goto LABEL_92;
          v30 = *v4;
          *((_WORD *)this + 189) = *v4;
          if ((_DWORD)v2 == 3)
          {
            v31 = 20;
            v32 = 70;
          }
          else
          {
            if ((_DWORD)v2 != 4
              || v28 != 36 && v28 != 29
              || !MTFEFrameFiller::sRankFwd[*((unsigned __int8 *)this + 288)])
            {
LABEL_92:
              if ((v12 & 0x40) != 0)
                *((_WORD *)this + 188) = 0;
              goto LABEL_129;
            }
            v31 = 12;
            v32 = 60;
          }
          *((_WORD *)this + 189) = v30 + v32;
          *((_WORD *)this + 188) = v31;
          goto LABEL_92;
        }
        v29 = 250;
      }
      else
      {
        v29 = *v4 + 200;
      }
      *((_WORD *)this + 189) = v29;
      goto LABEL_82;
    case 2:
      v14 = *((_QWORD *)this + 37);
      if ((this[76] & 0x40) != 0)
      {
        if ((v14 & 0x40) == 0)
        {
          *((_WORD *)this + 189) = *(_WORD *)(*((_QWORD *)this + 5) + 32)
                                 + ((*(__int16 *)(*((_QWORD *)this + 5) + 34)
                                                 - *(__int16 *)(*((_QWORD *)this + 5) + 32)) >> 1);
          LOWORD(v16) = 16;
          goto LABEL_128;
        }
      }
      else if ((v14 & 0x40) == 0)
      {
        goto LABEL_129;
      }
      v17 = *(_WORD *)(*((_QWORD *)this + 5) + 34);
      goto LABEL_52;
    case 3:
    case 4:
      v5 = *v4;
      v6 = *((__int16 *)this + 189);
      if (v6 < (__int16)(*v4 - 10) || (*((_BYTE *)this + 305) & 0x10) != 0 || *((_BYTE *)this + 290) == 53)
      {
        LOWORD(v6) = v5 - 10;
        *((_WORD *)this + 189) = v5 - 10;
        v7 = *((_QWORD *)this + 37);
        if ((v7 & 0x400) == 0)
          *((_WORD *)this + 188) = 4;
        if ((_DWORD)v2 == 7)
        {
          if ((v7 & 4) != 0 && !*((_BYTE *)this + 290))
          {
            LOWORD(v6) = v5 - 18;
            *((_WORD *)this + 189) = v5 - 18;
            *((_WORD *)this + 188) = 9;
          }
          v8 = *((_QWORD *)this + 38);
          if ((v8 & 0x1400) != 0)
          {
            if ((v8 & 0x1000) != 0)
              v9 = -5;
            else
              v9 = -4;
            LOWORD(v6) = v9 + v5;
            *((_WORD *)this + 189) = v6;
          }
        }
      }
      else
      {
        v7 = *((_QWORD *)this + 37);
      }
      v18 = *((_QWORD *)this + 38);
      if ((v7 & 4) != 0 && (v18 & 0x40) != 0)
        *((_WORD *)this + 188) = 0;
      if ((_DWORD)v2 == 7 && (v7 & 0x40) != 0 && (v18 & 4) != 0)
        *((_WORD *)this + 188) = 0;
      v19 = v3[12 * (int)v2 + 6];
      if ((__int16)v6 < (__int16)(v19 - 10))
      {
        *((_WORD *)this + 189) = v19 - 13;
        if (!*((_BYTE *)this + 288))
          *((_WORD *)this + 188) = 14;
      }
      if ((_DWORD)v2 == 7)
      {
        if ((v7 & 0x200) != 0)
        {
          LOWORD(v16) = 2;
LABEL_128:
          *((_WORD *)v1 + 188) = v16;
        }
      }
      else if ((_DWORD)v2 == 8)
      {
        if ((v18 & 0x404) == 4)
        {
          v20 = *((unsigned __int8 *)this + 288);
          if (v20 <= 0x2C)
          {
            if (((1 << v20) & 0x154000000000) != 0)
            {
              v21 = 3145737;
            }
            else
            {
              if (*((_BYTE *)this + 288))
                goto LABEL_129;
              v21 = 3407888;
            }
            this[94] = v21;
          }
        }
      }
      else if ((_DWORD)v2 == 10 && (v7 & 0x1000000) != 0)
      {
        *((_WORD *)this + 188) = *((_WORD *)this + 173) - 2;
        v17 = v5 - 30;
LABEL_52:
        *((_WORD *)this + 189) = v17;
      }
      goto LABEL_129;
    default:
      goto LABEL_129;
  }
}

_DWORD *MTFEFrameFiller::TailRules(_DWORD *this)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v3;
  int v4;
  __int16 v5;
  int v6;
  BOOL v7;
  unsigned int v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  __int16 v17;
  __int16 v18;
  unsigned int v19;
  unsigned int v20;
  int v22;
  _WORD *v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  MTFEPhoneme *v29;
  MTFEPhoneme *var6;
  MTFEPhoneme *v31;
  MTFEPhoneme *v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  __int16 v39;
  int v40;
  int v41;

  v1 = this;
  v2 = this + 136;
  v3 = (int)this[316];
  switch(MTFEFrameFiller::sControlType[v3])
  {
    case 0:
      v13 = *((_QWORD *)this + 37);
      if ((v13 & 0x10) == 0)
        goto LABEL_95;
      *((_WORD *)this + 188) = 9;
      if ((v13 & 0x80) != 0)
      {
        *((_WORD *)this + 189) = (*((__int16 *)this + 189) + SHIWORD(v2[12 * (int)v3 + 6])) >> 1;
        if ((this[78] & 0x80) != 0)
          v27 = 8;
        else
          v27 = 4;
        goto LABEL_90;
      }
      if ((this[78] & 0x80) == 0)
      {
        if (*((_BYTE *)this + 293) != 34)
          goto LABEL_95;
        v14 = (*((__int16 *)this + 189) + SHIWORD(v2[12 * (int)v3 + 6])) >> 1;
        goto LABEL_94;
      }
      if ((_DWORD)v3 == 2)
      {
        v27 = 12;
LABEL_90:
        *((_WORD *)this + 188) = v27;
        goto LABEL_95;
      }
      if (!(_DWORD)v3 && *((_BYTE *)this + 293) == 33)
      {
        LOWORD(v14) = *((_WORD *)this + 189) + 80;
LABEL_94:
        *((_WORD *)this + 189) = v14;
      }
LABEL_95:
      if (!*((_BYTE *)this + 293))
      {
        *((_WORD *)this + 188) = 0;
        goto LABEL_114;
      }
      v29 = (MTFEPhoneme *)*((_QWORD *)this + 30);
      if (v29->var6)
        var6 = (MTFEPhoneme *)v29->var6;
      else
        var6 = (MTFEPhoneme *)&MTFEPhonemeFlags::sSIL;
      MTFEFrameFiller::GetLocus(this, var6, v29, 1);
      v31 = (MTFEPhoneme *)*((_QWORD *)v1 + 30);
      if (v31->var6)
        v32 = (MTFEPhoneme *)v31->var6;
      else
        v32 = (MTFEPhoneme *)&MTFEPhonemeFlags::sSIL;
      this = MTFEFrameFiller::GetLocus(v1, v31, v32, 0);
      v13 = *((_QWORD *)v1 + 37);
      if ((v13 & 0x400) != 0)
      {
        v33 = v1[316];
        v34 = v33 ? 6 : 4;
        *((_WORD *)v1 + 188) = v34;
        if ((v13 & 0x1000) != 0)
        {
          *((_WORD *)v1 + 188) = *((_WORD *)v1 + 173);
          if ((v13 & 4) == 0 && !v33)
            *((_WORD *)v1 + 189) += 100;
        }
      }
      if ((v13 & 0x40) != 0)
      {
        v35 = v1[316];
        if (v35)
          v36 = *((_WORD *)v1 + 173);
        else
          v36 = 0;
        *((_WORD *)v1 + 188) = v36;
        v37 = *((unsigned __int8 *)v1 + 288);
        if (v37 == 36)
        {
LABEL_122:
          if (MTFEFrameFiller::sRankFwd[*((unsigned __int8 *)v1 + 293)])
            goto LABEL_114;
          if (v35 == 2)
          {
            v38 = *((_WORD *)v1 + 189) - 100;
            goto LABEL_141;
          }
          if (v35 == 1)
          {
            v39 = *((_WORD *)v1 + 189);
            *((_WORD *)v1 + 189) = v39 - 100;
            if ((*((_BYTE *)v1 + 314) & 4) != 0)
            {
              v38 = v39 - 200;
              goto LABEL_141;
            }
          }
          goto LABEL_114;
        }
        if (v37 != 35)
        {
          if (v37 != 29)
            goto LABEL_114;
          goto LABEL_122;
        }
        if (v35 == 1 && (*((_BYTE *)v1 + 314) & 4) != 0)
        {
          v38 = *((_WORD *)v1 + 189) - 150;
LABEL_141:
          *((_WORD *)v1 + 189) = v38;
        }
      }
LABEL_114:
      if ((v13 & 0x400) == 0
        && MTFEFrameFiller::sRankFwd[*((unsigned __int8 *)v1 + 293)] != 3
        && *((__int16 *)v1 + 188) >= 1)
      {
        v16 = ((v1[92] * *((unsigned __int16 *)v1 + 188)) >> 16) + 1;
        goto LABEL_132;
      }
LABEL_133:
      v40 = *((__int16 *)v1 + 188);
      v41 = *((__int16 *)v1 + 173);
      if (v40 > v41)
      {
        *((_WORD *)v1 + 188) = *((_WORD *)v1 + 173);
        v40 = v41;
      }
      if (v40 < 27)
      {
        LOWORD(v2[12 * (int)v3 + 4]) = v41 - v40;
        if (v40 < 0)
          *((_WORD *)v1 + 188) = 0;
      }
      else
      {
        *((_WORD *)v1 + 188) = 26;
        LOWORD(v2[12 * (int)v3 + 4]) = v41 - 26;
      }
      return this;
    case 1:
      v15 = *((_QWORD *)this + 37);
      if ((v15 & 4) != 0)
      {
        *((_WORD *)this + 188) = 8;
        if ((_DWORD)v3 == 3 && (*((_QWORD *)this + 39) & 4) == 0)
        {
          *((_WORD *)this + 188) = 10;
          *((_WORD *)this + 189) = HIWORD(v2[12 * (int)v3 + 6]) + (*((__int16 *)this + 272) >> 3);
        }
      }
      else
      {
        *((_WORD *)this + 188) = 4;
      }
      v22 = *((unsigned __int8 *)this + 293);
      if (*((_BYTE *)this + 293))
      {
        if (*((_BYTE *)this + 288))
          goto LABEL_71;
        v23 = (_WORD *)&v2[12 * (int)v3 + 5] + 1;
      }
      else
      {
        v23 = (_WORD *)&v2[12 * (int)v3 + 6] + 1;
      }
      *((_WORD *)this + 189) = *v23 + 200;
      *((_WORD *)this + 188) = 10;
LABEL_71:
      if ((this[78] & 0x40) == 0)
        goto LABEL_85;
      v24 = HIWORD(v2[12 * (int)v3 + 6]);
      *((_WORD *)this + 189) = v24;
      if ((_DWORD)v3 == 3)
      {
        v25 = 20;
        v26 = 100;
      }
      else
      {
        if ((_DWORD)v3 != 4 || v22 != 36 && v22 != 29 || !MTFEFrameFiller::sRankFwd[*((unsigned __int8 *)this + 288)])
        {
LABEL_85:
          if ((v15 & 0x40) != 0)
            *((_WORD *)this + 188) = 0;
          goto LABEL_133;
        }
        v25 = 12;
        v26 = 60;
      }
      *((_WORD *)this + 189) = v24 + v26;
      *((_WORD *)this + 188) = v25;
      goto LABEL_85;
    case 2:
      if ((this[78] & 0x40) != 0 && (this[74] & 0x40) == 0)
      {
        *((_WORD *)this + 189) = *(_WORD *)(*((_QWORD *)this + 5) + 34);
        LOWORD(v16) = 16;
        goto LABEL_132;
      }
      goto LABEL_133;
    case 3:
    case 4:
      v4 = SHIWORD(v2[12 * (int)v3 + 5]);
      v5 = v4 - 10;
      v6 = *((__int16 *)this + 189);
      if (v6 < (__int16)(HIWORD(v2[12 * (int)v3 + 5]) - 10))
      {
        v6 = v5;
        *((_WORD *)this + 189) = v5;
        if (!*((_BYTE *)this + 288))
          *((_WORD *)this + 188) = 14;
      }
      v7 = v6 < v4 && (_DWORD)v3 == 7;
      if (v7
        && ((HIDWORD(v9) = *((unsigned __int8 *)this + 288) - 39, LODWORD(v9) = HIDWORD(v9), v8 = v9 >> 1, v8 >= 4)
          ? (v10 = v8 == 7)
          : (v10 = 1),
            !v10 && (*((_WORD *)this + 188) = 0, v28 = *((_QWORD *)this + 37), (v28 & 0x1001000) != 0)))
      {
        if ((v28 & 4) != 0)
        {
          *((_WORD *)this + 189) = HIWORD(v2[12 * (int)v3 + 6]) - 3;
          LOWORD(v16) = 9;
        }
        else
        {
          LOWORD(v16) = 0;
        }
LABEL_132:
        *((_WORD *)v1 + 188) = v16;
      }
      else
      {
        v11 = *((_QWORD *)this + 37);
        if ((v11 & 4) != 0 && (this[78] & 0x40) != 0)
          *((_WORD *)this + 188) = 0;
        if ((v11 & 0x40) != 0)
        {
          if ((v11 & 0x400) != 0 || (*((_QWORD *)this + 39) & 4) == 0 || (*((_BYTE *)this + 337) & 0x40) != 0)
            v12 = 8;
          else
            v12 = 0;
          *((_WORD *)this + 188) = v12;
        }
        v17 = HIWORD(v2[12 * (int)v3 + 6]);
        v18 = v17 - 10;
        if ((v11 & 0x200) != 0)
        {
          *((_WORD *)this + 188) = 3;
          if ((v11 & 0x1000) != 0 || *((unsigned __int8 *)this + 288) - 55 <= 2)
            v18 = v17;
        }
        if (v6 < v18)
        {
          LOWORD(v6) = v18 - 3;
          *((_WORD *)this + 189) = v18 - 3;
          *((_WORD *)this + 188) = 4;
        }
        if ((_DWORD)v3 == 7 && ((__int16)v6 < v18 || v18 >= 1 && (*((_BYTE *)this + 337) & 0x40) != 0))
        {
          *((_WORD *)this + 189) = v18 + 3;
          if (!*((_BYTE *)this + 293) || (*((_BYTE *)this + 337) & 0x40) != 0)
            *((_WORD *)this + 188) = 15;
        }
        v19 = *((unsigned __int8 *)this + 293);
        if (v19 >= 0x2E)
        {
          if ((_DWORD)v3 == 7 && (v11 & 0x40) != 0)
            goto LABEL_133;
          *((_WORD *)this + 188) = 0;
        }
        if ((_DWORD)v3 == 8)
        {
          v20 = *((unsigned __int8 *)this + 288);
          if (v20 <= 0x2C && ((1 << v20) & 0x154000000000) != 0 && (*((_QWORD *)this + 39) & 0x404) == 4)
            this[94] = 3407880;
          if ((v11 & 1) != 0 && !v19)
            this[94] = 3407898;
        }
      }
      goto LABEL_133;
    default:
      goto LABEL_133;
  }
}

uint64_t MTFEFrameFiller::InsertBurst(uint64_t this)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v16;
  BOOL v17;
  __int16 v18;

  v1 = *(_QWORD *)(this + 296);
  if ((v1 & 0x200) != 0)
  {
    v2 = 103 * MTFEFrameFiller::sBurstDur[*(unsigned __int8 *)(this + 288)];
    v3 = ((v2 >> 15) & 1) + (v2 >> 9);
    if ((*(_QWORD *)(this + 296) & 0x1004) == 0x1000 && (*(_WORD *)(this + 312) & 0x1040) != 0)
    {
      v3 >>= 1;
      if ((*(_BYTE *)(this + 337) & 0x14) != 0)
        LOWORD(v3) = 0;
    }
    v4 = 0;
    v5 = *(_WORD *)(this + 346) - v3;
    if (((v5 > 16) & BYTE3(v1)) != 0)
      v5 = 16;
    do
    {
      v6 = this + v4;
      *(_WORD *)(v6 + 994) = v5;
      *(_WORD *)(v6 + 996) = 0;
      v4 += 48;
    }
    while (v4 != 288);
  }
  v7 = *(_QWORD *)(this + 304);
  if ((v1 & 0x10) != 0 && (*(_QWORD *)(this + 304) & 0x1004) == 0x1000)
  {
    *(_WORD *)(this + 900) = 0;
    if (MTFEFrameFiller::sRankFwd[*(unsigned __int8 *)(this + 293)])
      v8 = 54;
    else
      v8 = 48;
    v9 = v8 - 3;
    if ((v1 & 1) != 0)
    {
      v9 = v8;
      v10 = 8;
    }
    else
    {
      v10 = 5;
    }
    *(_WORD *)(this + 948) = v9;
    if ((v1 & 0x80) != 0 || *(_BYTE *)(this + 288) == 12)
      *(_WORD *)(this + 948) = v9 + 3;
    if (*(_BYTE *)(this + 292) == 42)
    {
      v11 = (*(_BYTE *)(this + 328) & 0xF) == 0;
      v12 = 2;
    }
    else
    {
      v11 = (v1 & 1) == 0;
      v10 = 12;
      v12 = 5;
    }
    if (!v11)
      v12 = v10;
    v13 = *(__int16 *)(this + 346);
    if (v12 >= v13)
      LOWORD(v12) = v13 - 1;
    if ((v1 & 1) != 0 && (*(_DWORD *)(*(_QWORD *)(this + 240) + 72) & 0x1400) != 0 && (__int16)v12 > v13 >> 1)
      LOWORD(v12) = *(__int16 *)(this + 346) >> 1;
    if ((*(_DWORD *)(*(_QWORD *)(this + 240) + 72) & 0x4000) != 0)
    {
      LOWORD(v12) = *(_WORD *)(this + 346);
      *(_WORD *)(this + 948) = 0;
    }
    *(_WORD *)(this + 898) = v12;
    *(_WORD *)(this + 946) = v12;
    *(_WORD *)(this + 706) = v12;
    *(_WORD *)(this + 754) = v12;
    *(_WORD *)(this + 708) = *(_WORD *)(this + 688) + 250;
    *(_WORD *)(this + 756) = *(_WORD *)(this + 736) + 70;
  }
  v16 = v7 & 4;
  v17 = (~(_DWORD)v1 & 0x1004) != 0 || v16 == 0;
  if (!v17 && (*(_BYTE *)(this + 312) & 4) == 0 && *(_BYTE *)(this + 288) != 54)
  {
    v18 = *(_WORD *)(this + 346);
    *(_WORD *)(this + 898) = v18 - 2;
    *(_WORD *)(this + 706) = v18;
    *(_WORD *)(this + 754) = v18;
    *(_WORD *)(this + 802) = v18;
    *(_WORD *)(this + 900) = 53;
    *(_WORD *)(this + 708) = 1000;
    *(_WORD *)(this + 756) = 1000;
    *(_WORD *)(this + 804) = 1200;
  }
  return this;
}

uint64_t MTFEFrameFiller::ScaleToPhonDur(MTFEFrameFiller *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;

  v2 = ((*((_QWORD *)this + 44) * a2) >> 8) * *((__int16 *)this + 175);
  v3 = ((unsigned __int128)(v2 * (__int128)(uint64_t)0xA3D70A3D70A3D70BLL) >> 64) + v2;
  v4 = (__int16)((int)((v3 >> 63) + (v3 >> 6)) >> 8);
  if (v4 <= 1)
    return 1;
  else
    return v4;
}

uint64_t MTFEFrameFiller::AdjustColoredTarget(MTFEFrameFiller *this, MTFEPhoneme *a2, int a3)
{
  int var9;
  MTFESpeechElement *var6;
  MTFESpeechElement *var7;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  __int16 v21;
  BOOL v23;
  __int16 v24;

  var9 = a2->var9;
  var6 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  var7 = a2->var7;
  if (!var7)
    var7 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  v6 = BYTE2(var7[1].var0);
  if (a2->var6)
    var6 = a2->var6;
  v7 = BYTE2(var6[1].var0);
  v8 = *(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * a2->var9);
  v9 = *(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * v6);
  v10 = *(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * v7);
  v11 = *((_DWORD *)this + 316);
  if (v11 == 1)
  {
    v13 = (var9 & 0xFE) != 0xE || a3 <= 0;
    if (v13)
      v14 = 0;
    else
      v14 = -250;
    if ((v8 & 0x200000) != 0)
      v15 = -150;
    else
      v15 = v14;
    if ((_DWORD)v7 == 27)
      v16 = v15;
    else
      v16 = 0;
    if ((*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * a2->var9) & 0x200000) != 0)
      v17 = -150;
    else
      v17 = v16;
    v13 = v6 > 0x21;
    v18 = (1 << v6) & 0x248000000;
    if (v13 || v18 == 0)
      v17 = v16;
    if ((v9 & 0x2000) != 0 && var9 == 18)
      v21 = 200;
    else
      v21 = v17;
    v23 = a3 > 0 && (var9 & 0xFE) == 18;
    if (v23 && (v10 & 0x2000) != 0)
      v24 = v21 + 200;
    else
      v24 = v21;
    if ((a2->var15 & 0x1C00) != 0)
    {
      v12 = v24 >> 1;
    }
    else if (var9 != 19 || a3 <= 0)
    {
      v12 = (v24 >> 1) + v24;
    }
    else
    {
      v12 = 400;
    }
  }
  else if (v11 == 2)
  {
    v12 = 0;
    if (var9 != 12 && (v8 & 1) != 0)
    {
      if (((v9 | v10) & 0x2000000) != 0)
        v12 = -150;
      else
        v12 = 0;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v12 >= 400)
    return 400;
  else
    return (__int16)v12;
}

_DWORD *MTFEFrameFiller::GetLocus(_DWORD *this, MTFEPhoneme *a2, MTFEPhoneme *a3, int a4)
{
  unsigned int v4;
  uint64_t var9;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  _DWORD *v11;
  int v12;
  int v13;
  unsigned __int16 *v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  __int16 v22;
  unint64_t v23;

  v4 = this[316];
  if (v4 <= 2)
  {
    var9 = a2->var9;
    v6 = &MTFEFrameFiller::sRankBkwd;
    v7 = a3->var9;
    if (a4)
      v8 = &MTFEFrameFiller::sRankBkwd;
    else
      v8 = MTFEFrameFiller::sRankFwd;
    if (a4)
      v6 = MTFEFrameFiller::sRankFwd;
    v9 = v8[v7];
    if (v6[var9] == 3 && v9 != 3)
    {
      v11 = this;
      v12 = *(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * v7);
      v13 = *(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * var9);
      if (a4)
        this = (_DWORD *)MTFEFrameFiller::GetLastTarget((MTFEFrameFiller *)this, a3);
      else
        this = (_DWORD *)MTFEFrameFiller::GetFirstTarget((MTFEFrameFiller *)this, a3);
      v14 = (unsigned __int16 *)&MTFEFrameFiller::sBackLoci;
      if (v9 == 1)
        v14 = (unsigned __int16 *)&MTFEFrameFiller::sMidLoci;
      if (!v9)
        v14 = (unsigned __int16 *)&MTFEFrameFiller::sFrontLoci;
      v15 = v14[var9];
      if (v15 != 0xFFFF)
      {
        v16 = v15 + 3 * v4;
        v17 = *(_QWORD *)(*((_QWORD *)v11 + 185) + 16);
        v18 = v16 + 2;
        v19 = *(unsigned __int16 *)(v17 + 2 * (__int16)(v16 + 1));
        v20 = *(_WORD *)(*((_QWORD *)v11 + 5) + 38) + *(_WORD *)(v17 + 2 * v16);
        LODWORD(v17) = 26215 * *(__int16 *)(v17 + 2 * v18);
        v21 = ((int)v17 >> 17) + (v17 >> 31);
        if (v13 & 0x40 | v12 & 0x40000)
          v22 = 0;
        else
          v22 = v21 >> 2;
        *((_WORD *)v11 + 188) = v21 - v22;
        if (v4 == 1 && v9 == 4)
        {
          v19 = ((__int16)v19 >> 1) + 50;
          if ((v12 & 0x40000) == 0)
            goto LABEL_29;
        }
        else if (v4 != 1 || (v12 & 0x40000) == 0)
        {
          goto LABEL_29;
        }
        v19 = v19 - ((__int16)v19 >> 2) + 25;
LABEL_29:
        v23 = 1374389535 * ((int)this - v20) * (__int16)v19;
        *((_WORD *)v11 + 189) = v20 + (v23 >> 37) + (v23 >> 63);
      }
    }
  }
  return this;
}

uint64_t MTFEFrameFiller::GetLastTarget(MTFEFrameFiller *this, MTFEPhoneme *a2)
{
  int Target;
  __int16 v5;

  Target = MTFEFrameFiller::GetTarget(this, a2);
  v5 = Target;
  if (Target <= -2)
  {
    v5 = *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 185) + 8) + 2 * ((Target & 0x7FFFu) + 2));
    if (!MTFEFrameFiller::sControlType[*((int *)this + 316)])
      v5 += MTFEFrameFiller::AdjustColoredTarget(this, a2, 1);
  }
  return v5;
}

uint64_t MTFEFrameFiller::ProcessPitchEvents(uint64_t this)
{
  int v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  int v10;
  int v11;

  v1 = *(__int16 *)(this + 526);
  v2 = *(__int16 *)(this + 528);
  if (v1 >= v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(this + 8) + 16);
    v4 = *(_QWORD *)(this + 176);
    do
    {
      if (v4 >= v3)
        return this;
      v6 = *(__int16 *)(v4 + 6);
      v4 += 6;
      v5 = v6;
      v7 = *(__int16 *)(v4 - 4);
      v8 = *(_WORD *)(v4 - 2);
      LOWORD(v1) = v1 - v2;
      *(_WORD *)(this + 526) = v1;
      *(_QWORD *)(this + 176) = v4;
      *(_WORD *)(this + 528) = v6;
      if ((v8 & 8) != 0)
      {
        *(_QWORD *)(this + 416) = 0;
      }
      else
      {
        if ((v8 & 0x10) != 0)
        {
          v9 = *(_QWORD *)(this + 16);
          *(_QWORD *)(this + 416) = (*(__int16 *)(v9 + 26) - *(__int16 *)(v9 + 28)) << 14;
          v10 = *(__int16 *)(v9 + 30);
          if (v10 <= 15)
          {
            LOWORD(v10) = v10 + 1;
            *(_WORD *)(v9 + 30) = v10;
          }
          *(_QWORD *)(v9 + 32) = *(_QWORD *)(v9 + 8 * (__int16)v10 + 56);
          goto LABEL_15;
        }
        if ((v8 & 2) == 0)
        {
          if ((v8 & 0x20) != 0)
          {
            *(_WORD *)(this + 502) += v7;
          }
          else if ((v8 & 1) != 0)
          {
            *(_WORD *)(this + 536) = v7;
            *(_WORD *)(this + 538) = *(_WORD *)(*(_QWORD *)(this + 16) + 22);
          }
          else
          {
            *(_WORD *)(this + 534) = 2 * v7;
          }
          goto LABEL_15;
        }
        *(_WORD *)(this + 500) += v7;
        v11 = *(__int16 *)(this + 536);
        if (v7 < 0)
        {
          if (v11 >= 1)
LABEL_22:
            *(_WORD *)(this + 536) = 0;
        }
        else if (v11 < 0)
        {
          goto LABEL_22;
        }
      }
LABEL_15:
      LOWORD(v2) = v5;
    }
    while ((__int16)v1 >= v5);
  }
  return this;
}

uint64_t MTFEFrameFiller::OldNonSingingPitch(MTFEFrameFiller *this)
{
  unint64_t v2;
  int v3;
  int v4;
  int v5;
  __int16 v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int v14;
  __int16 v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  __int16 v25;

  v2 = *((_QWORD *)this + 52);
  v3 = *(unsigned __int16 *)(*((_QWORD *)this + 30) + 60);
  v4 = *((unsigned __int16 *)this + 257) - (v2 >> 16) + v3;
  if (*((__int16 *)this + 258) < (__int16)(*((_WORD *)this + 257) - WORD1(v2) + v3))
    *((_QWORD *)this + 52) = *(_QWORD *)(*((_QWORD *)this + 2) + 32) + v2;
  v5 = (__int16)v4;
  v6 = *((_WORD *)this + 269) - 1;
  *((_WORD *)this + 269) = v6;
  if (v6 < 0)
    *((_WORD *)this + 268) = 0;
  v7 = *((__int16 *)this + 261);
  v8 = *((__int16 *)this + 259);
  if (*((__int16 *)this + 265) + v8 < v7)
  {
    v9 = *((_QWORD *)this + 32);
    if (v9)
    {
      *((_WORD *)this + 261) = v7 - v8;
      *((_WORD *)this + 259) = (int)*(float *)(v9 + 64);
      *((_WORD *)this + 265) = 0;
      v10 = *(unsigned __int8 *)(v9 + 58);
      v11 = *(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * v10);
      v12 = *(unsigned __int8 **)(v9 + 40);
      v13 = (unsigned __int8 *)&MTFEPhonemeFlags::sSIL;
      if (v12)
        v13 = v12;
      v14 = *(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * v13[58]);
      *((_QWORD *)this + 32) = v12;
      v15 = MTFEFrameFiller::sPhonPitchTbl[v10];
      *((_WORD *)this + 248) = v15 >> 1;
      if ((v14 & 4) == 0)
        *((_WORD *)this + 265) = 5;
      if ((v11 & 4) != 0)
      {
        *((_WORD *)this + 249) = v15 & 0xFFFE;
        *((_WORD *)this + 252) = 0;
      }
      else
      {
        *((_WORD *)this + 252) = 8 * (v15 >> 1);
        *((_WORD *)this + 249) = 0;
        if ((v11 & 0x1000) != 0)
          *((_WORD *)this + 265) = 6;
        else
          *((_WORD *)this + 265) = 0;
      }
    }
  }
  MTFEFrameFiller::PhonBoundaryPitch((uint64_t)this);
  v16 = *((__int16 *)this + 249);
  v17 = 8
      * (v16
       + (((*((__int16 *)this + 268) + *((__int16 *)this + 250) + *((__int16 *)this + 267) + v5)
                       * *((_DWORD *)this + 110)) >> 16));
  if (*((_BYTE *)this + 513))
  {
    v18 = *(__int16 *)(*((_QWORD *)this + 2) + 190);
    *((_BYTE *)this + 513) = 0;
    v19 = v18;
  }
  else
  {
    v19 = *((_QWORD *)this + 53);
    v18 = *((_QWORD *)this + 54);
  }
  v20 = *(__int16 *)(*((_QWORD *)this + 5) + 78);
  v21 = (0x10000 - v20) * v19 + (int)v20 * (uint64_t)(__int16)v17;
  v22 = v18 * (0x10000 - v20) + (*((__int16 *)this + 252) + (v21 >> 16)) * v20;
  *((_QWORD *)this + 53) = v21 >> 16;
  *((_QWORD *)this + 54) = v22 >> 16;
  v23 = (unint64_t)v22 >> 19;
  *((_WORD *)this + 253) = (unint64_t)v22 >> 19;
  *((_WORD *)this + 249) = (64190 * v16) >> 16;
  v24 = (__int16)(*((_WORD *)this + 262) - *((_WORD *)this + 270));
  if (v24 < 0)
    v24 = -v24;
  if ((__int16)v24 <= 9)
  {
    if (*((_BYTE *)this + 512))
      v25 = -10;
    else
      v25 = -80;
    if (!*((_BYTE *)this + 512))
      LOWORD(v24) = 8 * v24;
    LOWORD(v23) = v25 + v24 + v23;
    *((_WORD *)this + 253) = v23;
  }
  return (__int16)(*(_WORD *)(*((_QWORD *)this + 2) + 190)
                               + ((*(_DWORD *)(*((_QWORD *)this + 2) + 200) * (__int16)v23) >> 16));
}

uint64_t MTFEFrameFiller::PhonBoundaryPitch(uint64_t this)
{
  int v1;
  int v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  __int16 v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v19;

  v1 = *(__int16 *)(this + 524);
  v2 = *(__int16 *)(this + 520);
  v3 = v1 - v2;
  if (v1 < v2)
  {
    v3 = *(_WORD *)(this + 524);
    goto LABEL_23;
  }
  *(_WORD *)(this + 524) = v3;
  v4 = *(_QWORD *)(this + 264);
  v2 = (int)*(float *)(v4 + 64);
  *(_WORD *)(this + 520) = v2;
  v5 = *(unsigned __int8 *)(v4 + 58);
  v6 = *(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * *(unsigned __int8 *)(v4 + 58));
  v7 = *(_DWORD *)(v4 + 72);
  v8 = *(_QWORD *)(v4 + 40);
  if (v8)
    v9 = *(_DWORD **)(v4 + 40);
  else
    v9 = &MTFEPhonemeFlags::sSIL;
  v10 = *((unsigned __int8 *)v9 + 58);
  v11 = *(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * *((unsigned __int8 *)v9 + 58));
  v12 = v9[18];
  *(_QWORD *)(this + 264) = v8;
  if (!*(_WORD *)(this + 540))
  {
    v13 = -10000;
    goto LABEL_10;
  }
  if (*(__int16 *)(this + 540) >= 1)
  {
    v13 = 0;
LABEL_10:
    *(_WORD *)(this + 540) = v13;
  }
  *(_WORD *)(this + 508) = -10000;
  *(_BYTE *)(this + 510) = 0;
  if ((v6 & 8) != 0)
  {
    v14 = v7 & 0xF;
    v15 = (v12 & 0x200) != 0 || v14 == 0;
    if (!v15 && v10 != 19)
    {
      if ((v6 & 1) != 0)
      {
        v19 = v12 & 0x1400;
        if (v5 == v10 && v19 != 0)
          goto LABEL_43;
        if (v14 >= 2)
        {
          *(_WORD *)(this + 508) = v2;
          *(_BYTE *)(this + 510) = 1;
        }
      }
      else if (v5 != 55)
      {
        v17 = v12 & 0x1400;
        if ((v6 & 0x1000) == 0 && v17 != 0)
LABEL_43:
          *(_WORD *)(this + 508) = v2;
      }
    }
  }
  if ((v11 & 0x100000) != 0)
    *(_WORD *)(this + 508) = v2;
  if ((v6 & 0x100000) != 0)
  {
    *(_WORD *)(this + 508) = v2;
    return this;
  }
LABEL_23:
  if (v3 == 10 || v2 - 1 == v3)
  {
    *(_WORD *)(this + 540) = *(_WORD *)(this + 508);
    *(_BYTE *)(this + 512) = *(_BYTE *)(this + 510);
  }
  return this;
}

uint64_t MTFEFrameFiller::LogToLin(MTFEFrameFiller *this, int a2)
{
  int v2;
  int v3;

  if (a2 >= 63)
    v2 = 63;
  else
    v2 = a2;
  v3 = v2 >> 1;
  if (a2 < 0)
    v3 = 0;
  return MTFEFrameFiller::sLogToLin[v3];
}

_WORD *MTFEFrameFiller::VisitCommand(_WORD *this, MTFECommand *a2)
{
  _WORD *v3;
  int64_t var8;
  MTBEParam *v5;
  int64_t v6;
  _WORD *v7;
  int64_t var9;
  MTBEParam *v9;
  int64_t Volume;
  MTBEParam *v11;
  int v12;
  MTBEParam *v13;
  int Rate;
  uint64_t v15;
  int Pitch;
  uint64_t v17;
  uint64_t Modulation;
  MTBEParam *v19;

  v3 = this;
  var8 = a2->var8;
  if (var8 <= 1920165235)
  {
    if (var8 <= 1886220131)
    {
      if (var8 == 1885495666)
      {
        v5 = (MTBEParam *)*((_QWORD *)this + 2);
        if (!*((_BYTE *)v5 + 48) && *((_QWORD *)this + 6))
          return this;
        v6 = (int)(12 * MTBEParam::GetPitch(*((MTBEParam **)this + 2)) + (SLODWORD(a2->var9) >> 8) + 8025);
      }
      else
      {
        if (var8 != 1885495667)
          return this;
        v5 = (MTBEParam *)*((_QWORD *)this + 2);
        if (!*((_BYTE *)v5 + 48))
        {
          if (*((_QWORD *)this + 6))
            return this;
        }
        v6 = a2->var9 >> 8;
      }
      v12 = MTBEParam::MidiToPitch(v5, v6);
      return (_WORD *)MTBEParam::SetPitch((uint64_t)v5, v12);
    }
    if (var8 == 1886220132)
    {
      this = (_WORD *)*((_QWORD *)this + 2);
      if (!*((_BYTE *)this + 48) && *((_QWORD *)v3 + 6))
        return this;
      var9 = a2->var9;
    }
    else
    {
      if (var8 != 1886220146)
        return this;
      v7 = (_WORD *)*((_QWORD *)this + 2);
      if (!*((_BYTE *)v7 + 48))
      {
        if (*((_QWORD *)this + 6))
          return this;
      }
      var9 = a2->var9 + MTBEParam::GetModulation(*((MTBEParam **)this + 2));
      this = v7;
    }
    return (_WORD *)MTBEParam::SetModulation((uint64_t)this, var9);
  }
  if (var8 > 1987013740)
  {
    switch(var8)
    {
      case 1987013741:
        v9 = (MTBEParam *)*((_QWORD *)this + 2);
        Volume = a2->var9;
        break;
      case 1987013746:
        v11 = (MTBEParam *)*((_QWORD *)this + 2);
        Volume = a2->var9 + MTBEParam::GetVolume(v11);
        v9 = v11;
        break;
      case 2003792484:
        return (_WORD *)(*(uint64_t (**)(_QWORD, int64_t, _QWORD, _QWORD))(**((_QWORD **)this + 11)
                                                                                          + 56))(*((_QWORD *)this + 11), a2->var9 >> 8, a2->var9, 0);
      default:
        return this;
    }
    return MTBEParam::SetVolume(v9, Volume);
  }
  if (var8 == 1920165236)
  {
    MTBEParam::ResetVoice(*((_QWORD *)this + 2), *((__int16 **)this + 5));
    this = (_WORD *)*((_QWORD *)v3 + 3);
    if (!this)
      return this;
    if (a2->var9 != 1)
      return (_WORD *)MTBEParam::ResetVoice((uint64_t)this, *((__int16 **)v3 + 5));
    v13 = (MTBEParam *)*((_QWORD *)v3 + 2);
    Rate = MTBEParam::GetRate((MTBEParam *)this);
    MTBEParam::SetRate(v13, Rate);
    v15 = *((_QWORD *)v3 + 2);
    Pitch = MTBEParam::GetPitch(*((MTBEParam **)v3 + 3));
    MTBEParam::SetPitch(v15, Pitch);
    v17 = *((_QWORD *)v3 + 2);
    Modulation = MTBEParam::GetModulation(*((MTBEParam **)v3 + 3));
    MTBEParam::SetModulation(v17, Modulation);
    v19 = (MTBEParam *)*((_QWORD *)v3 + 2);
    Volume = MTBEParam::GetVolume(*((MTBEParam **)v3 + 3));
    v9 = v19;
    return MTBEParam::SetVolume(v9, Volume);
  }
  if (var8 == 1937337955)
    return (_WORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), LODWORD(a2->var9), 0);
  return this;
}

uint64_t MTFEFrameFiller::NextClonedWord(MTFEFrameFiller *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((__int16 *)this + 73);
  if (!*((_WORD *)this + 73))
    return 0;
  if ((int)v1 >= *((__int16 *)this + 72))
    return -1;
  v2 = *((__int16 *)this + 72);
  v3 = *((_QWORD *)this + 14);
  while (1)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8 * v1) + 192);
    if (v4)
      break;
    *((_WORD *)this + 73) = ++v1;
    if (v2 == v1)
      return -1;
  }
  return v4;
}

MTFESpeechElement *MTPFExpandCompounds::VisitWord(MTFETrackingVisitor *this, MTFESpeechElement *a2)
{
  *((_BYTE *)this + 30) = (uint64_t)a2[1].var0 & 1;
  return MTFETrackingVisitor::VisitWord(this, a2);
}

uint64_t MTPFExpandCompounds::VisitPhoneme(uint64_t this, MTFEPhoneme *a2)
{
  uint64_t v3;
  int var9;
  unsigned __int8 v5;
  unsigned __int8 v6;
  float v7;
  MTFEPhoneme *v8;
  float var13;
  float v10;
  MTFEPitchTargets *var17;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  _BYTE *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  _BYTE v27[88];

  v3 = this;
  var9 = a2->var9;
  if (*(_BYTE *)(this + 31))
  {
    if (a2->var9 <= 0x1Bu)
    {
      v7 = 0.5;
      if (var9 == 19)
      {
        v5 = 31;
        v6 = 18;
      }
      else
      {
        if (var9 != 21)
          return this;
        v5 = 13;
        v6 = 32;
      }
    }
    else
    {
      switch(var9)
      {
        case 28:
          v5 = 11;
          v6 = 33;
          break;
        case 29:
          v5 = 25;
          v6 = 36;
          break;
        case 56:
          return (*((uint64_t (**)(MTFEPhoneme *))a2->var0 + 2))(a2);
        default:
          return this;
      }
      v7 = 0.25;
    }
  }
  else
  {
    MTFETrackingVisitor::PrePhoneme(this, a2);
    if (var9 == 53)
    {
      ++*(_WORD *)(v3 + 24);
      v5 = 49;
      v6 = 45;
    }
    else
    {
      if (var9 != 52)
        return MTFETrackingVisitor::PostPhoneme(v3, a2);
      ++*(_WORD *)(v3 + 24);
      v5 = 48;
      v6 = 44;
    }
    v7 = 0.5;
  }
  a2->var9 = v5;
  v8 = (MTFEPhoneme *)operator new();
  MTFEPhoneme::MTFEPhoneme(v8, v6);
  v8->var8 = a2->var8 + 1;
  v8->var11 = a2->var11;
  if (*(_BYTE *)(v3 + 30) || !*(_BYTE *)(v3 + 31))
  {
    var13 = a2->var13;
    v10 = floorf(v7 * var13);
    a2->var13 = v10;
    v8->var13 = var13 - v10;
    var17 = a2->var17;
    if (var17)
    {
      v12 = *(_DWORD *)var17;
      if ((_DWORD)v12)
      {
        *(_DWORD *)v27 = 0;
        memset(&v27[8], 0, 80);
        if ((int)v12 >= 1)
        {
          v13 = 0;
          v14 = (int)var13;
          v15 = 8 * v12;
          do
          {
            v16 = *(_QWORD *)((char *)a2->var17 + v13 + 8);
            v17 = (float)(v16 & 0xFFFFFF) / 100.0;
            v18 = 1374389535 * (int)((v16 >> 24) * v14 + 50);
            v19 = (float)(int)((v18 >> 37) + ((unint64_t)v18 >> 63));
            v20 = a2->var13;
            if (v20 >= v19)
            {
              v26 = ((int)(float)((float)((float)(v19 * 100.0) / v20) + 0.5) << 24) | (unint64_t)(uint64_t)(float)(v17 * 100.0);
              v21 = v27;
            }
            else
            {
              v21 = v8->var17;
              if (!v21)
              {
                v21 = (_BYTE *)operator new();
                *(_DWORD *)v21 = 0;
                *(_OWORD *)(v21 + 8) = 0u;
                *(_OWORD *)(v21 + 24) = 0u;
                *(_OWORD *)(v21 + 40) = 0u;
                *(_OWORD *)(v21 + 56) = 0u;
                *(_OWORD *)(v21 + 72) = 0u;
                v8->var17 = (MTFEPitchTargets *)v21;
                v20 = a2->var13;
              }
              v26 = ((int)(float)((float)((float)((float)(v19 - v20) * 100.0) / v8->var13) + 0.5) << 24) | (unint64_t)(uint64_t)(float)(v17 * 100.0);
            }
            MTFEPitchTargets::AddTarget((unsigned int *)v21, &v26);
            v13 += 8;
          }
          while (v15 != v13);
          var17 = a2->var17;
        }
        v22 = *(_OWORD *)&v27[16];
        *(_OWORD *)var17 = *(_OWORD *)v27;
        *((_OWORD *)var17 + 1) = v22;
        v23 = *(_OWORD *)&v27[32];
        v24 = *(_OWORD *)&v27[48];
        v25 = *(_OWORD *)&v27[64];
        *((_QWORD *)var17 + 10) = *(_QWORD *)&v27[80];
        *((_OWORD *)var17 + 3) = v24;
        *((_OWORD *)var17 + 4) = v25;
        *((_OWORD *)var17 + 2) = v23;
      }
    }
  }
  MTFESpeechElement::AddChildAfter(a2->var5, (MTFESpeechElement *)v8, (MTFESpeechElement *)a2);
  return MTFETrackingVisitor::PostPhoneme(v3, a2);
}

void sub_1D2273A0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

void MTPFExpandCompounds::~MTPFExpandCompounds(MTPFExpandCompounds *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

uint64_t MTFESyllablify::VisitIntonationalPhrase(MTFESyllablify *this, MTFEIntonationalPhrase *a2)
{
  ((void (*)(MTFEIntonationalPhrase *, char *))*a2->var0)(a2, (char *)this + 8);
  return ((uint64_t (*)(MTFEIntonationalPhrase *, char *))*a2->var0)(a2, (char *)this + 24);
}

MTFESpeechElement *MTFESyllablify::Pass1::VisitWord(MTFESyllablify::Pass1 *this, MTFESpeechElement *a2)
{
  MTFESyllable *v3;

  *((_BYTE *)this + 8) = ((uint64_t)a2[1].var0 & 0x20000) != 0;
  *((_BYTE *)this + 9) = 0;
  MTFESpeechElement::VisitChildren(a2, this);
  v3 = (MTFESyllable *)operator new();
  MTFESyllable::MTFESyllable(v3);
  return MTFESpeechElement::AddLevel(a2, (MTFESpeechElement *)v3);
}

void sub_1D2273AFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C405D120DB7);
  _Unwind_Resume(a1);
}

void MTFESyllablify::Pass1::VisitPhoneme(MTFESyllablify::Pass1 *this, MTFEPhoneme *a2)
{
  MTFESyllablify::Pass1 *v3;

  if ((*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * a2->var9) & 1) != 0)
    v3 = (MTFESyllablify::Pass1 *)MTFESyllablify::Pass1::MarkSyllable((uint64_t)this, a2);
  else
    v3 = (MTFESyllablify::Pass1 *)MTFESyllablify::Pass1::PlaceStressInConsonant((uint64_t)this, a2);
  MTFESyllablify::Pass1::MarkBoundary(v3, a2);
}

uint64_t MTFESyllablify::Pass1::MarkSyllable(uint64_t this, MTFEPhoneme *a2)
{
  signed int var15;
  uint64_t v3;
  MTFEPhoneme *v4;
  MTFEPhoneme *v5;
  int v6;

  var15 = a2->var15;
  *(_BYTE *)(this + 9) = var15 < 0;
  v3 = 768;
  v4 = a2;
  while (1)
  {
    v4 = (MTFEPhoneme *)v4->var7;
    if (!v4 || v4->var5 != a2->var5)
      break;
    if ((*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * v4->var9) & 1) != 0)
      goto LABEL_7;
  }
  v3 = 0;
LABEL_7:
  v5 = a2;
  while (1)
  {
    v5 = (MTFEPhoneme *)v5->var6;
    if (!v5 || v5->var5 != a2->var5)
      break;
    if ((*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * v5->var9) & 1) != 0)
    {
      v6 = 256;
      if (v3)
        v6 = v3;
      if (v3 == 768)
        LODWORD(v3) = 512;
      else
        LODWORD(v3) = v6;
      break;
    }
  }
  a2->var15 = var15 | v3;
  return this;
}

uint64_t MTFESyllablify::Pass1::PlaceStressInConsonant(uint64_t this, MTFEPhoneme *a2)
{
  uint64_t v3;
  MTFEPhoneme *v4;
  int v5;
  uint64_t v6;
  MTFEPhoneme *v7;
  unsigned int var15;
  uint64_t var9;
  int v10;

  v3 = this;
  v4 = 0;
  v5 = 1;
  v6 = MEMORY[0x1E0DA8EC8];
  v7 = a2;
  while (1)
  {
    v7 = (MTFEPhoneme *)v7->var6;
    if (!v7)
      return this;
    var15 = v7->var15;
    if ((var15 & 0x100F0000) != 0)
      return this;
    if ((var15 & 0x1C00) != 0)
      break;
    var9 = v7->var9;
    if ((*(_DWORD *)(v6 + 4 * var9) & 1) != 0)
      return this;
    if (!*(_BYTE *)(v3 + 9))
    {
      if (v5 == 2)
      {
        if (a2->var9 != 42)
          return this;
        this = MTFESyllablify::CheckConsonantPair((MTFESyllablify *)v4->var9, var9);
        v5 = 3;
        if ((this & 1) == 0)
          return this;
      }
      else
      {
        if (v5 != 1)
          return this;
        this = a2->var9;
        v5 = 2;
        v4 = v7;
        if ((_DWORD)this != 42)
        {
          this = MTFESyllablify::CheckConsonantPair((MTFESyllablify *)this, var9);
          v5 = 2;
          v4 = v7;
          if ((this & 1) == 0)
            return this;
        }
      }
    }
  }
  if (*(_BYTE *)(v3 + 9)
    || v5 != 2
    || (this = MTFESyllablify::CheckConsonantPair((MTFESyllablify *)a2->var9, v4->var9), (_DWORD)this))
  {
    if ((var15 & 0x400) != 0)
    {
      if (*(_BYTE *)(v3 + 8))
        v10 = 2048;
      else
        v10 = 1024;
      a2->var15 |= v10;
      var15 = v7->var15;
      if ((var15 & 0x800) == 0)
      {
LABEL_20:
        if ((var15 & 0x1000) == 0)
          return this;
        goto LABEL_21;
      }
    }
    else if ((var15 & 0x800) == 0)
    {
      goto LABEL_20;
    }
    a2->var15 |= (*(_BYTE *)(v3 + 8) == 0) << 11;
    if ((v7->var15 & 0x1000) != 0)
LABEL_21:
      a2->var15 |= 0x1000u;
  }
  return this;
}

void MTFESyllablify::Pass1::MarkBoundary(MTFESyllablify::Pass1 *this, MTFEPhoneme *a2)
{
  uint64_t v2;
  MTFEPhoneme *v3;
  unsigned int v4;

  v2 = MEMORY[0x1E0DA8EC8];
  v3 = a2;
  do
  {
    v3 = (MTFEPhoneme *)v3->var6;
    if (!v3)
      break;
    v4 = v3->var15 & 0xF0000;
    if (!v4)
      continue;
    if (v4 >= 0x80000)
    {
      a2->var15 |= 9u;
      if ((v4 & 0x20000) != 0)
      {
LABEL_12:
        a2->var15 |= 3u;
        if ((v4 & 0x40000) != 0)
        {
LABEL_13:
          a2->var15 |= 5u;
          if ((v4 & 0x10000) == 0)
            continue;
LABEL_8:
          a2->var15 |= 1u;
          continue;
        }
        goto LABEL_7;
      }
    }
    else if ((v3->var15 & 0x20000) != 0)
    {
      goto LABEL_12;
    }
    if ((v4 & 0x40000) != 0)
      goto LABEL_13;
LABEL_7:
    if ((v4 & 0x10000) != 0)
      goto LABEL_8;
  }
  while ((*(_DWORD *)(v2 + 4 * v3->var9) & 1) == 0);
}

unint64_t MTFESyllablify::CheckConsonantPair(MTFESyllablify *this, unsigned int a2)
{
  int v2;
  unint64_t result;

  v2 = (int)this;
  result = 0;
  switch(v2)
  {
    case '&':
    case '\'':
    case '.':
    case '/':
      return (a2 & 0xFE) == 32;
    case '(':
    case '0':
    case '1':
      return ((a2 - 30) & 0xFD) == 0;
    case '*':
    case ',':
      if (a2 > 0x32)
        return 0;
      if (((1 << a2) & 0x1401A40000000) != 0)
        return 1;
      if (((1 << a2) & 0x4004000000000) != 0)
      {
        return v2 == 42;
      }
      else
      {
        if (a2 != 32)
          return 0;
        return v2 == 44;
      }
    case '2':
    case '3':
      if (a2 >= 0x22)
        return 0;
      else
        return (0x340000000uLL >> a2) & 1;
    default:
      return result;
  }
}

MTFESpeechElement *MTFESyllablify::Pass2::VisitWord(MTFESyllablify::Pass2 *this, MTFESpeechElement *a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 25) = 0;
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFESyllablify::Pass2::VisitSyllable(MTFESyllablify::Pass2 *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *v2;
  MTFESpeechElement *result;
  BOOL v5;

  v2 = a2;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = a2;
  do
  {
    result = MTFESpeechElement::VisitChildren(v2, this);
    v5 = *((_QWORD *)this + 5) == (_QWORD)v2;
    v2 = (MTFESpeechElement *)*((_QWORD *)this + 5);
  }
  while (!v5);
  return result;
}

uint64_t MTFESyllablify::Pass2::VisitPhoneme(uint64_t this, MTFEPhoneme *a2)
{
  uint64_t v3;
  MTFEPhoneme *v4;
  MTFEPhoneme *v5;
  MTFESpeechElement **v6;
  uint64_t var9;
  MTFESyllable *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  MTFESpeechElement *var6;

  v3 = this;
  v4 = *(MTFEPhoneme **)(this + 32);
  if (v4)
  {
    if (v4 != a2)
      return this;
    *(_QWORD *)(this + 32) = 0;
  }
  v6 = (MTFESpeechElement **)(this + 8);
  v5 = *(MTFEPhoneme **)(this + 8);
  if (!v5)
  {
    *v6 = (MTFESpeechElement *)a2;
    v5 = a2;
  }
  var9 = a2->var9;
  if (!a2->var9)
  {
    *v6 = 0;
    return this;
  }
  if ((*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * var9) & 1) != 0)
  {
    if (*(_BYTE *)(this + 51) && (a2->var15 & 0x10000000) != 0)
    {
      *v6 = (MTFESpeechElement *)a2;
      v5 = a2;
    }
    if ((MTFEPhoneme *)v5->var5->var3 == v5)
    {
      v5->var15 |= 0x10000000u;
      *(_BYTE *)(this + 50) = 1;
      *v6 = 0;
      *(_QWORD *)(this + 16) = 0;
      *(_BYTE *)(this + 51) = (a2->var15 & 0x80000000) != 0;
    }
    else
    {
      *(_QWORD *)(this + 32) = a2;
      v8 = (MTFESyllable *)operator new();
      MTFESyllable::MTFESyllable(v8);
      MTFESpeechElement::AddChildAfter(*(MTFESpeechElement **)(*(_QWORD *)(v3 + 40) + 32), (MTFESpeechElement *)v8, *(MTFESpeechElement **)(v3 + 40));
      MTFESpeechElement::SplitChildren(*(MTFESpeechElement **)(v3 + 40), *(MTFESpeechElement **)(v3 + 8), (MTFESpeechElement *)v8);
      this = (uint64_t)MTFESpeechElement::SetNextCousin(*(MTFESpeechElement **)(*(_QWORD *)(v3 + 40) + 24), v8->var3);
      *(_QWORD *)(v3 + 40) = v8;
    }
  }
  else
  {
    if (!*(_BYTE *)(this + 50))
      return this;
    if (*(_BYTE *)(this + 51))
    {
      if ((a2->var15 & 0x10000000) != 0)
LABEL_11:
        *v6 = (MTFESpeechElement *)a2;
    }
    else
    {
      v9 = *(_QWORD *)(this + 16);
      if (!v9)
      {
        *(_QWORD *)(this + 8) = a2;
        *(_QWORD *)(this + 16) = a2;
        *(_QWORD *)(this + 24) = 0;
        return this;
      }
      v10 = *(_QWORD *)(this + 24);
      if (v10)
      {
        v11 = *(unsigned __int16 *)(this + 48);
        *(_WORD *)(this + 48) = v11 + 1;
        if (v11)
        {
          if ((unsigned __int16)(v11 + 1) == 2)
          {
            var6 = *(MTFESpeechElement **)(v10 + 40);
          }
          else
          {
            if ((((_BYTE)v11 + 1) & 1) != 0)
              return this;
            var6 = v5->var6;
          }
          *v6 = var6;
          return this;
        }
        this = MTFESyllablify::CheckConsonantPair((MTFESyllablify *)*(unsigned __int8 *)(v10 + 58), var9);
        if ((this & 1) == 0)
          goto LABEL_11;
        if (*(_BYTE *)(v9 + 58) == 42)
          *v6 = (MTFESpeechElement *)v9;
        else
          *v6 = (MTFESpeechElement *)v10;
      }
      else
      {
        *(_QWORD *)(this + 24) = a2;
        this = MTFESyllablify::CheckConsonantPair((MTFESyllablify *)*(unsigned __int8 *)(v9 + 58), var9);
        if ((this & 1) == 0)
          *v6 = (MTFESpeechElement *)a2;
        *(_WORD *)(v3 + 48) = 0;
      }
    }
  }
  return this;
}

void sub_1D22740E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C405D120DB7);
  _Unwind_Resume(a1);
}

void MTFESyllablify::Pass1::~Pass1(MTFESyllablify::Pass1 *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void MTFESyllablify::Pass2::~Pass2(MTFESyllablify::Pass2 *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

MTFESpeechElement *MTFEPitchRaiseFall::VisitIntonationalPhrase(MTFEPitchRaiseFall *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *result;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;

  *((_QWORD *)this + 4) = 0x200000002;
  *((_QWORD *)this + 7) = 1;
  result = MTFESpeechElement::VisitChildren(a2, this);
  v5 = *((_DWORD *)this + 15);
  v6 = (v5 - 2);
  *((_DWORD *)this + 15) = v6;
  if (v5 >= 4 && *((_DWORD *)this + 8) != 3)
  {
    v7 = (_QWORD *)((char *)this + 64);
    v8 = v6 - 1;
    v9 = 1;
    while (1)
    {
      *v7 = 0x4000000;
      if (!v8)
        break;
      while (1)
      {
        v9 ^= 1u;
        ++v7;
        --v8;
        if ((v9 & 1) != 0)
          break;
        *v7 = 0x8000000;
        if (!v8)
        {
          *((_DWORD *)this + 8) = 0;
          return (MTFESpeechElement *)((uint64_t (*)(MTFESpeechElement *, char *))*a2->var0)(a2, (char *)this + 8);
        }
      }
    }
    *((_DWORD *)this + 8) = 1;
    *((_DWORD *)this + 15) = v5 - 1;
    *((_QWORD *)this + (int)v6 + 8) = 0x8000000;
    return (MTFESpeechElement *)((uint64_t (*)(MTFESpeechElement *, char *))*a2->var0)(a2, (char *)this + 8);
  }
  return result;
}

uint64_t MTFEPitchRaiseFall::VisitPhoneme(uint64_t this, MTFEPhoneme *a2)
{
  uint64_t v3;
  int v4;
  unsigned int var15;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  MTFEPhoneme *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  MTFEPhoneme *v13;

  v3 = this;
  v4 = *(_DWORD *)(this + 32);
  if (v4 == 1)
  {
    var15 = a2->var15;
    if ((var15 & 0xF0000) == 0x10000)
    {
      v6 = 0x8000000;
      if ((var15 & 0x2000) != 0)
        v6 = 0x4000000;
      v7 = *(int *)(this + 60);
      *(_QWORD *)(this + 8 * v7 + 64) = v6;
      if ((int)v7 <= 62)
        *(_DWORD *)(this + 60) = v7 + 1;
      *(_DWORD *)(this + 56) = 0;
      *(_QWORD *)(this + 48) = a2;
      if (*(_DWORD *)(this + 36) == 2)
      {
        *(_DWORD *)(this + 36) = 1;
        *(_QWORD *)(this + 40) = a2;
      }
    }
  }
  v8 = MEMORY[0x1E0DA8EC8];
  if ((*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * a2->var9) & 1) != 0)
  {
    if (v4 == 1)
    {
      v12 = a2->var15;
      if ((v12 & 0x1400) != 0)
        ++*(_DWORD *)(this + 56);
      v13 = a2;
      while (v13 == a2 || (*(_DWORD *)(v8 + 4 * v13->var9) & 1) == 0)
      {
        if ((v13->var15 & 8) == 0)
        {
          v13 = (MTFEPhoneme *)v13->var6;
          if (v13)
            continue;
        }
        goto LABEL_26;
      }
      if ((v12 & 0x1400) != 0)
      {
        this = MTFEPitchRaiseFall::AnyVowelsTillBoundary((MTFEPitchRaiseFall *)this, 8u, 1, a2);
        if ((this & 1) == 0)
        {
LABEL_26:
          v11 = 0;
          a2->var15 = v12 | 0x40;
          goto LABEL_27;
        }
      }
    }
    else if (v4 == 2)
    {
      v9 = a2;
      while (v9 == a2 || (*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * v9->var9) & 1) == 0)
      {
        if ((v9->var15 & 8) == 0)
        {
          v9 = (MTFEPhoneme *)v9->var6;
          if (v9)
            continue;
        }
        v10 = a2->var15;
LABEL_18:
        a2->var15 = v10 | 0x40;
        v11 = 3;
        goto LABEL_27;
      }
      this = MTFEPitchRaiseFall::AnyVowelsTillBoundary((MTFEPitchRaiseFall *)this, 8u, 1, a2);
      v10 = a2->var15;
      if ((this & 1) == 0)
        goto LABEL_18;
      if ((v10 & 0x1C00) != 0)
      {
        a2->var15 = v10 | 0x20;
        v11 = 1;
LABEL_27:
        *(_DWORD *)(v3 + 32) = v11;
      }
    }
  }
  return this;
}

uint64_t MTFEPitchRaiseFall::AnyVowelsTillBoundary(MTFEPitchRaiseFall *this, unsigned int a2, int a3, MTFEPhoneme *a4)
{
  int v4;
  MTFEPhoneme *v5;
  int v6;

  if (!a4)
    return 0;
  v4 = 20;
  v5 = a4;
  while (v5 == a4 || (*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * v5->var9) & 1) == 0 || a3 && (v5->var15 & 0x1400) == 0)
  {
    if ((v5->var15 & 0xF) >= a2)
    {
      v4 = 0;
      v6 = 1;
      return v6 & v4;
    }
    v5 = (MTFEPhoneme *)v5->var6;
    if (!v5)
    {
      v6 = 0;
      return v6 & v4;
    }
  }
  v6 = 1;
  v4 = 1;
  return v6 & v4;
}

MTFESpeechElement *MTFEPitchRaiseFall::Pass2::VisitIntonationalPhrase(MTFEPitchRaiseFall::Pass2 *this, MTFESpeechElement *a2)
{
  *((_WORD *)this + 4) = 0;
  *((_DWORD *)this + 3) = 0;
  return MTFESpeechElement::VisitChildren(a2, this);
}

uint64_t MTFEPitchRaiseFall::Pass2::VisitPhoneme(uint64_t this, MTFEPhoneme *a2)
{
  uint64_t v2;
  unsigned int var15;
  MTFEPhoneme *v4;
  unsigned int v5;
  uint64_t v7;

  v2 = *(_QWORD *)(this + 16);
  if (*(MTFEPhoneme **)(v2 + 40) == a2)
    *(_BYTE *)(this + 8) = 1;
  if (*(MTFEPhoneme **)(v2 + 48) == a2)
  {
    *(_BYTE *)(this + 8) = 0;
  }
  else if (*(_BYTE *)(this + 8))
  {
    var15 = a2->var15;
    if ((var15 & 0xF0000) == 0x10000)
      *(_BYTE *)(this + 9) = 1;
    if ((*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * a2->var9) & 1) != 0 && *(_BYTE *)(this + 9))
    {
      v4 = a2;
      while (1)
      {
        v4 = (MTFEPhoneme *)v4->var6;
        if (!v4)
          break;
        v5 = v4->var15;
        if ((v5 & 0xF0000) != 0)
          break;
        if ((v5 & 0x1400) != 0 && (*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * v4->var9) & 1) != 0)
          return this;
      }
      *(_BYTE *)(this + 9) = 0;
      v7 = *(int *)(this + 12);
      if ((int)v7 < *(_DWORD *)(v2 + 60))
      {
        *(_DWORD *)(this + 12) = v7 + 1;
        a2->var15 = var15 | *(_DWORD *)(v2 + 8 * v7 + 64);
      }
    }
  }
  return this;
}

uint64_t MTFEPitchRaiseFall::Pass2::AnyStressVowelsRemain(MTFEPitchRaiseFall::Pass2 *this, MTFESpeechElement *a2)
{
  unsigned int v2;
  BOOL v3;

  while (1)
  {
    a2 = a2->var6;
    if (!a2)
      break;
    if (((uint64_t)a2[1].var3 & 0xF0000) != 0)
    {
      LOBYTE(v2) = 0;
      return (a2 != 0) & v2;
    }
    v2 = (uint64_t)a2[1].var3 & 0x1400;
    if (v2)
      v3 = (*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * BYTE2(a2[1].var0)) & 1) == 0;
    else
      v3 = 1;
    if (!v3)
    {
      LOBYTE(v2) = 1;
      return (a2 != 0) & v2;
    }
  }
  return (a2 != 0) & v2;
}

void MTFEPitchRaiseFall::Pass2::~Pass2(MTFEPitchRaiseFall::Pass2 *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void MTFEPitchRaiseFall::~MTFEPitchRaiseFall(MTFEPitchRaiseFall *this)
{
  *(_QWORD *)this = &off_1E9366B78;
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFEPitchRaiseFall *)((char *)this + 8));
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
}

{
  *(_QWORD *)this = &off_1E9366B78;
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFEPitchRaiseFall *)((char *)this + 8));
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void *MTFEPitchBuffer::Expand(MTFEPitchBuffer *this)
{
  int v2;
  char *v3;
  const void *v4;
  size_t v5;
  void *result;

  v2 = 2 * *(_DWORD *)this;
  *(_DWORD *)this = v2;
  is_mul_ok(v2, 6uLL);
  v3 = (char *)operator new[]();
  v4 = (const void *)*((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2) - (_QWORD)v4;
  result = memcpy(v3, v4, v5);
  if (v4)
    result = (void *)MEMORY[0x1D8233B90](v4, 0x1000C80274DC3F3);
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = &v3[v5];
  *((_QWORD *)this + 3) = &v3[6 * *(int *)this];
  return result;
}

uint64_t MTFEFillPitchBuffer::VisitSentence(MTFEFillPitchBuffer *this, MTFESpeechElement *a2)
{
  *(_QWORD *)(*((_QWORD *)this + 1) + 16) = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  *((_WORD *)this + 16) = 0;
  MTFESpeechElement::VisitChildren(a2, this);
  return MTBEParam::StartNewPitchClause(*((_QWORD *)this + 3));
}

MTFESpeechElement *MTFEFillPitchBuffer::VisitIntonationalPhrase(MTFEFillPitchBuffer *this, MTFESpeechElement *a2)
{
  uint64_t v2;

  *((_BYTE *)this + 39) = BYTE6(a2[2].var6);
  *(_DWORD *)((char *)this + 34) = 0;
  *((_BYTE *)this + 38) = 1;
  *((_DWORD *)this + 10) = 0;
  v2 = 1374389535 * (*(unsigned __int16 *)(*((_QWORD *)this + 2) + 4) << 16);
  *((_QWORD *)this + 6) = (int)((v2 >> 37) + ((unint64_t)v2 >> 63));
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFEPitchBuffer *MTFEFillPitchBuffer::AddPitch(MTFEFillPitchBuffer *this, __int16 a2, int a3, __int16 a4)
{
  int v5;
  __int16 v6;
  MTFEPitchBuffer *result;
  _WORD *v8;

  v5 = *((__int16 *)this + 16);
  v6 = v5 + a3;
  result = (MTFEPitchBuffer *)*((_QWORD *)this + 1);
  if (v5 + a3 < 0)
  {
    v8 = (_WORD *)*((_QWORD *)result + 2);
    *v8 = 0;
  }
  else
  {
    v8 = (_WORD *)*((_QWORD *)result + 2);
    *v8 = v6;
    *((_WORD *)this + 16) = -(__int16)a3;
  }
  v8[1] = a2;
  v8[2] = a4;
  *((_QWORD *)result + 2) = v8 + 3;
  if ((unint64_t)(v8 + 3) >= *((_QWORD *)result + 3))
    return (MTFEPitchBuffer *)MTFEPitchBuffer::Expand(result);
  return result;
}

float MTFEFillPitchBuffer::VisitPhoneme(MTFEFillPitchBuffer *this, MTFEPhoneme *a2)
{
  MTFESpeechElement *var7;
  MTFESpeechElement *v5;
  unsigned int var15;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  __int16 v22;
  float result;

  var7 = a2->var7;
  if (var7)
    v5 = a2->var7;
  else
    v5 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  if ((*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * a2->var9) & 1) != 0)
  {
    var15 = a2->var15;
    if ((var15 & 0x20) != 0 && *((_BYTE *)this + 38))
    {
      LOWORD(v7) = *(_WORD *)(*((_QWORD *)this + 2) + 64);
      *((_WORD *)this + 17) = v7;
      if (*((_BYTE *)this + 39) == 71)
      {
        v7 = (__int16)v7 >> 1;
        *((_WORD *)this + 17) = v7;
      }
      if ((var15 & 0x40) != 0)
        v8 = -16;
      else
        v8 = 0;
      MTFEFillPitchBuffer::AddPitch(this, v7, v8, 2);
      *((_WORD *)this + 18) += *((_WORD *)this + 17);
      *((_BYTE *)this + 38) = 0;
    }
    if ((var15 & 0x4000000) != 0)
    {
      v9 = *(__int16 *)(*((_QWORD *)this + 2) + 68) >> (*((_BYTE *)this + 39) == 71);
    }
    else
    {
      if ((var15 & 0x8000000) == 0)
        goto LABEL_18;
      LOWORD(v9) = *(_WORD *)(*((_QWORD *)this + 2) + 70);
    }
    MTFEFillPitchBuffer::AddPitch(this, v9, 0, 32);
LABEL_18:
    if ((var15 & 0x1400) != 0)
    {
      if ((var15 & 0x1000) != 0)
        v10 = 77;
      else
        v10 = 41;
      v11 = *((_DWORD *)this + 10);
      *((_DWORD *)this + 10) = v11 + 1;
      switch(v11)
      {
        case 0:
          v10 += 29;
          break;
        case 1:
          v10 += 27;
          break;
        case 2:
          v10 |= 0x12u;
          break;
        case 3:
          v10 += 12;
          break;
        default:
          break;
      }
      v12 = v10 >> (*((_BYTE *)this + 39) == 71);
      if ((var15 & 0x48) != 0)
        LOWORD(v13) = -12;
      else
        LOWORD(v13) = 0;
      if ((var15 & 0x1048) == 0)
        v13 = (int)(a2->var13 * 0.25);
      v14 = (*((_DWORD *)this + 12) * v12) >> 16;
      if ((var15 & 0x1008) == 8)
        LOWORD(v14) = -12;
      MTFEFillPitchBuffer::AddPitch(this, v14, (__int16)v13, 1);
    }
    if ((var15 & 0x40) == 0)
    {
      if ((var15 & 8) == 0)
        goto LABEL_52;
LABEL_47:
      v20 = *((unsigned __int8 *)this + 39);
      if ((v20 - 68) < 2)
      {
        v21 = 29;
        v22 = 21;
LABEL_51:
        MTFEFillPitchBuffer::AddPitch(this, v22, 0, 4);
        MTFEFillPitchBuffer::AddPitch(this, v21, (int)a2->var13, 4);
        goto LABEL_52;
      }
      if (v20 == 71)
      {
        v21 = 70;
        v22 = 51;
        goto LABEL_51;
      }
LABEL_52:
      var7 = a2->var7;
      goto LABEL_53;
    }
    v15 = (__int16)((int)a2->var13 - 32);
    if (v15 <= 5)
      LOWORD(v15) = 5;
    v16 = var15 & 8;
    if ((var15 & 8) != 0)
    {
      v18 = *((unsigned __int8 *)this + 39) - 68;
      if (v18 < 5)
      {
        v17 = dword_1D22CC7F8[(char)v18];
        goto LABEL_46;
      }
    }
    else if ((var15 & 4) == 0)
    {
      v17 = *(__int16 *)(*((_QWORD *)this + 2) + 66);
      goto LABEL_46;
    }
    v17 = 0;
LABEL_46:
    v19 = ((*(_DWORD *)(*((_QWORD *)this + 2) + 72) * v17) >> 16) - *((_WORD *)this + 17);
    MTFEFillPitchBuffer::AddPitch(this, v19, (__int16)v15, 2);
    *((_WORD *)this + 18) += v19;
    *((_BYTE *)this + 38) = 1;
    if (!v16)
      goto LABEL_52;
    goto LABEL_47;
  }
LABEL_53:
  if (var7 && (WORD1(v5[1].var3) & 0x1F0) != 0)
  {
    MTFEFillPitchBuffer::AddPitch(this, -*((_WORD *)this + 18), 0, 16);
    *((_WORD *)this + 18) = 0;
  }
  result = a2->var13;
  *((_WORD *)this + 16) += (int)result;
  return result;
}

void MTFEFillPitchBuffer::~MTFEFillPitchBuffer(MTFEFillPitchBuffer *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

uint64_t _GLOBAL__sub_I_MTFEPhoneme_cp()
{
  MTFEPhoneme::MTFEPhoneme((MTFEPhoneme *)&MTFEPhonemeFlags::sSIL, 0);
  return __cxa_atexit((void (*)(void *))MTFEPhoneme::~MTFEPhoneme, &MTFEPhonemeFlags::sSIL, &dword_1D2256000);
}

void MTFEModDuration::MTFEModDuration(uint64_t a1, MTFEModDuration *this, uint64_t a3)
{
  int UsePostDurMod;
  MTBEParam *v5;
  int DurModFakeRate;

  *(_QWORD *)a1 = &off_1E9366CF8;
  *(_QWORD *)(a1 + 8) = this;
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 70) = *((_BYTE *)this + 1303);
  UsePostDurMod = MTBEParam::GetUsePostDurMod(this);
  v5 = *(MTBEParam **)(a1 + 8);
  if (UsePostDurMod)
    DurModFakeRate = MTBEParam::GetDurModFakeRate(v5);
  else
    DurModFakeRate = MTBEParam::GetRate(v5);
  *(float *)(a1 + 100) = (float)DurModFakeRate;
  *(_DWORD *)(a1 + 96) = 0;
}

void sub_1D2274BFC(_Unwind_Exception *a1)
{
  MTFESpeechVisitor *v1;

  MTFESpeechVisitor::~MTFESpeechVisitor(v1);
  _Unwind_Resume(a1);
}

float MTFEModDuration::VisitSentence(MTFEModDuration *this, MTFESpeechElement *a2)
{
  char var0;
  MTBEParam *v5;
  int v6;
  float result;

  *((_WORD *)this + 34) = 0;
  var0 = (char)a2[1].var0;
  *((_BYTE *)this + 73) = (var0 & 2) != 0;
  *((_BYTE *)this + 74) = (var0 & 4) != 0;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 24) = HIDWORD(a2[1].var3);
  *((_BYTE *)this + 76) = (var0 & 8) != 0;
  MTFESpeechElement::VisitChildren(a2, this);
  HIDWORD(a2[1].var0) = *((_DWORD *)this + 22);
  v5 = (MTBEParam *)*((_QWORD *)this + 1);
  v6 = *(__int16 *)&a2[1].var2;
  if (!*((_BYTE *)v5 + 48))
    return MTBEParam::SetRate(v5, v6);
  MTBEParam::SetTempo((uint64_t)v5, v6);
  return result;
}

MTFESpeechElement *MTFEModDuration::VisitIntonationalPhrase(MTFEModDuration *this, MTFESpeechElement *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  MTFEMelody *var6;
  MTFESpeechElement *v8;
  MTFESpeechElement *result;

  *(_WORD *)((char *)this + 71) = 256;
  v4 = *((_QWORD *)this + 1);
  v5 = *(unsigned int **)(v4 + 240);
  *((_QWORD *)this + 5) = v5;
  if (v5)
  {
    v6 = *v5;
    *((_QWORD *)this + 5) = v5 + 1;
    v5 = (unsigned int *)bswap32(v6);
  }
  *((_QWORD *)this + 6) = v5;
  *((_WORD *)this + 32) = 0;
  *(_WORD *)(v4 + 212) = 0;
  *((_QWORD *)this + 10) = *((__int16 *)&a2[2].var2 + 1);
  if (*(_BYTE *)(v4 + 50) || *(_BYTE *)(v4 + 48) || *(_BYTE *)(v4 + 49))
    var6 = 0;
  else
    var6 = (MTFEMelody *)a2[3].var6;
  *((_QWORD *)this + 7) = var6;
  *((_DWORD *)this + 31) = 0;
  v8 = a2->var6;
  if (v8)
    LOBYTE(v8) = WORD1(v8[2].var7) == 1;
  *((_BYTE *)this + 77) = (_BYTE)v8;
  *((_QWORD *)this + 4) = MTFELastPhoneme(a2);
  MTFESpeechElement::VisitChildren(a2, this);
  result = MTFESpeechElement::VisitChildren((MTFESpeechElement *)((char *)a2 + 64), this);
  *(_WORD *)(*((_QWORD *)this + 1) + 212) = 0;
  return result;
}

uint64_t MTFEModDuration::VisitWord(MTFEModDuration *this, MTFESpeechElement *a2)
{
  int v4;
  FILE **v5;
  unsigned int v6;
  signed __int16 v7;
  MTBEParam *v8;
  float v9;
  float v10;
  uint64_t result;

  v4 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugSingingDuration);
  v5 = (FILE **)MEMORY[0x1E0C80C10];
  if (v4)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Word %s tempo %d\n", (const char *)&a2[3].var5, *((__int16 *)&a2[3].var2 + 1));
  MTFESpeechElement::VisitChildren(a2 + 2, this);
  v6 = (uint64_t)a2[1].var0 & 1;
  *((_BYTE *)this + 75) = v6;
  *((_DWORD *)this + 29) = 0;
  v7 = *(_WORD *)&a2[3].var2;
  if (v7)
  {
    v8 = (MTBEParam *)*((_QWORD *)this + 1);
    if (*((_BYTE *)v8 + 48))
      MTBEParam::SetTempo((uint64_t)v8, v7);
    else
      MTBEParam::SetRate(v8, v7);
    *((float *)this + 25) = (float)*(__int16 *)&a2[3].var2;
    v6 = *((unsigned __int8 *)this + 75);
  }
  if (v6)
  {
    v9 = *((float *)this + 24);
    v10 = 1.0;
    if (v9 > 1.0)
      v10 = v9 / *((float *)this + 25);
  }
  else
  {
    v10 = 1.0;
  }
  *((float *)this + 23) = v10;
  if (*((_QWORD *)this + 7))
  {
    *(_QWORD *)((char *)this + 108) = 0x42C8000000000000;
    *((float *)this + 26) = (float)*((__int16 *)&a2[3].var2 + 1);
    *(_WORD *)&a2[3].var2 = MTBEParam::GetDurModFakeRate(*((MTBEParam **)this + 1));
  }
  MTFESpeechElement::VisitChildren(a2, this);
  a2[3].var1 = *((_DWORD *)this + 29);
  result = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugSingingDuration);
  if ((_DWORD)result)
    return fprintf(*v5, "  Duration %d ms, stretch %f, min dur %f\n", 5 * *((_DWORD *)this + 29), *((float *)this + 27), *((float *)this + 28));
  return result;
}

MTFESpeechElement *MTFERateRescale::VisitWord(MTFERateRescale *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *result;

  *((_WORD *)this + 6) = 0;
  result = MTFESpeechElement::VisitChildren(a2, this);
  a2[3].var1 = *((_WORD *)this + 6);
  return result;
}

float MTFERateRescale::VisitPhoneme(MTFERateRescale *this, MTFEPhoneme *a2)
{
  float v2;
  float result;

  v2 = floorf((float)(a2->var13 * *((float *)this + 2)) + 0.5);
  a2->var13 = v2;
  result = v2 + (float)*((__int16 *)this + 6);
  *((_WORD *)this + 6) = (int)result;
  return result;
}

float MTFEModDuration::VisitSyllable(MTFEModDuration *this, MTFESpeechElement *a2)
{
  float result;
  uint64_t v5;
  unint64_t var0_low;
  int v7;
  int v8;
  FILE *v9;
  float v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;

  *((_DWORD *)this + 30) = 0;
  if (*((_QWORD *)this + 7))
    *((_QWORD *)this + 3) = 0;
  MTFESpeechElement::VisitChildren(a2, this);
  v5 = *((_QWORD *)this + 7);
  if (v5)
  {
    if (*((_QWORD *)this + 3))
    {
      var0_low = SLOWORD(a2[1].var0);
      if (*(_QWORD *)(v5 + 16) > var0_low)
      {
        v7 = *((_DWORD *)this + 31) + MTFEMelody::SilenceSamples((MTFEMelody *)v5, var0_low, *((float *)this + 26));
        *((_DWORD *)this + 31) = v7;
        HIDWORD(a2->var3[1].var3) = v7;
        *((_DWORD *)this + 31) += MTFEMelody::DurationSamples(*((MTFEMelody **)this + 7), SLOWORD(a2[1].var0), *((float *)this + 26));
        v8 = MTFEMelody::DurationFrames(*((MTFEMelody **)this + 7), SLOWORD(a2[1].var0), *((float *)this + 26));
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugSingingDuration))
        {
          v9 = (FILE *)*MEMORY[0x1E0C80C10];
          v10 = MTFEMelody::Duration(*((MTFEMelody **)this + 7), SLOWORD(a2[1].var0));
          fprintf(v9, "    Note %4.2f beats, %d ms. Natural duration %d ms\n", v10, 5 * v8, 5 * *((_DWORD *)this + 30));
        }
        v11 = *((_DWORD *)this + 30);
        v12 = *((_QWORD *)this + 3);
        v13 = __OFSUB__(v8, v11);
        v14 = v8 - v11;
        if ((v14 < 0) ^ v13 | (v14 == 0))
        {
          v16 = *(float *)(v12 + 64);
          v15 = (float)v14;
        }
        else
        {
          v15 = (float)v14;
          v16 = *(float *)(v12 + 64);
          v17 = (float)v14 / v16;
          if (*((float *)this + 27) >= v17)
            v17 = *((float *)this + 27);
          *((float *)this + 27) = v17;
        }
        v18 = v16 + v15;
        *(float *)(v12 + 64) = v18;
        if (v18 >= 4.0)
        {
          if (v18 > 100.0)
            *(_DWORD *)(v12 + 72) |= 0x10u;
        }
        else
        {
          v14 = (int)(float)((float)(v18 + -4.0) + v15);
          *(_DWORD *)(v12 + 64) = 1082130432;
          v15 = (float)v14;
        }
        *((_DWORD *)this + 29) += v14;
        result = *((float *)this + 22) + v15;
        *((float *)this + 22) = result;
      }
    }
  }
  return result;
}

float MTFEModDuration::VisitCommand(MTFEModDuration *this, MTFECommand *a2)
{
  float result;

  if (a2->var8 == 1651668069)
  {
    result = (float)a2->var9 / 100.0;
    *((float *)this + 24) = result;
  }
  return result;
}

void MTFEModDuration::VisitPhoneme(MTFEModDuration *this, MTFEPhoneme *a2)
{
  unsigned int var15;
  unsigned int *p_var15;
  int v6;
  float v7;
  BOOL v8;
  float var13;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  MTFESpeechElement *var6;
  MTFESpeechElement *v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  float v28;
  unsigned int *v29;
  int v30;
  float v31;
  float v32;

  if (!a2->var7)
  {
    a2->var13 = 1.0;
    return;
  }
  p_var15 = &a2->var15;
  var15 = a2->var15;
  v6 = *(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * a2->var9);
  if (*((_BYTE *)this + 75))
  {
    v7 = *((float *)this + 23);
  }
  else
  {
    if (a2->var9)
      v8 = *((_BYTE *)this + 70) == 0;
    else
      v8 = 1;
    if (v8)
    {
      MTFEModDuration::OldDurationModel(this, a2);
      var13 = a2->var13;
      goto LABEL_12;
    }
    v7 = *(float *)(*((_QWORD *)this + 1) + 44);
  }
  var13 = v7 * a2->var13;
LABEL_12:
  v10 = floor(var13 + 0.5);
  if (var13 >= 1.0)
    v11 = v10;
  else
    v11 = 1.0;
  a2->var13 = v11;
  v12 = *((_QWORD *)this + 1);
  if (!*(_BYTE *)(v12 + 50))
  {
    if (*(_BYTE *)(v12 + 49))
    {
      if (!(*(_QWORD *)&var15 & 0x80000 | v6 & 1))
        goto LABEL_54;
      if ((var15 & 0x80000) != 0)
      {
        v30 = *(__int16 *)(v12 + 258);
        if (*((__int16 *)this + 33) < v30)
          *((_WORD *)this + 33) = v30;
      }
      else
      {
        v13 = *((_QWORD *)this + 2);
        v14 = *(__int16 *)(v12 + 212);
        *((_WORD *)this + 34) = *(_BYTE *)(v13 + 2 * v14 + 351) & 0xF;
        if (*(__int16 *)(v13 + 348) > (__int16)(v14 + 1))
          v15 = v14 + 1;
        else
          v15 = 0;
        *(_WORD *)(v12 + 212) = v15;
      }
    }
    else
    {
      if (!*(_BYTE *)(v12 + 48))
        goto LABEL_54;
      v8 = (a2->var12 & 0xF00) == 0;
      *((_WORD *)this + 34) = HIBYTE(a2->var12) & 0xF;
      if (v8 && (var15 & 0x80000) == 0)
        goto LABEL_54;
    }
    MTFEModDuration::SingNote((uint64_t)this, a2);
    goto LABEL_54;
  }
  if ((var15 & 0x10000000) != 0 && *((_BYTE *)this + 72))
    *p_var15 |= 0x2000000u;
  if (!(*(_QWORD *)&var15 & 0x80000 | v6 & 1))
    goto LABEL_54;
  if (!*((_BYTE *)this + 72))
  {
    var6 = a2->var6;
    v17 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
    if (var6)
      v17 = a2->var6;
    if ((var15 & 0x80000) != 0)
      goto LABEL_41;
    if ((v6 & 0x10) == 0)
    {
      if (!var6)
      {
LABEL_41:
        v18 = (unsigned int *)*((_QWORD *)this + 5);
        v19 = *((_QWORD *)this + 6);
        v20 = *v18;
        v21 = *(_QWORD *)(v12 + 240);
        v22 = (uint64_t)v18 - v21;
        v24 = v18[1];
        v23 = v18 + 1;
        v25 = (bswap32(v24) - bswap32(v20)) / 0x38 - *((unsigned __int16 *)this + 32);
        if (BYTE2(v17[1].var0))
          v26 = -10;
        else
          v26 = -20;
        v27 = *((_QWORD *)this + 3);
        v28 = *(float *)(v27 + 64) + (float)(v26 + (__int16)v25);
        if (v28 < 4.0)
          v28 = 4.0;
        *(float *)(v27 + 64) = v28;
        *((_WORD *)this + 32) = 0;
        v29 = (unsigned int *)(v21 + 4);
        if (!v19)
          v29 = 0;
        if (v19 - (v22 >> 2) >= 2)
          v29 = v23;
        *((_QWORD *)this + 5) = v29;
        goto LABEL_54;
      }
      p_var15 = (unsigned int *)&var6[1].var3;
    }
    *p_var15 |= 0x2000000u;
    goto LABEL_41;
  }
  *((_BYTE *)this + 72) = 0;
LABEL_54:
  if ((v6 & 1) != 0)
    *((_QWORD *)this + 3) = a2;
  *((_WORD *)this + 32) += (int)v11;
  v31 = a2->var13;
  *((float *)this + 22) = v31 + *((float *)this + 22);
  *(int32x2_t *)((char *)this + 116) = vadd_s32(*(int32x2_t *)((char *)this + 116), vdup_n_s32((int)v31));
  v32 = a2->var13;
  if (v32 >= *((float *)this + 28))
    v32 = *((float *)this + 28);
  *((float *)this + 28) = v32;
}

float MTFEModDuration::OldDurationModel(MTFEModDuration *this, MTFEPhoneme *a2)
{
  int var9;
  unsigned int var15;
  MTFESpeechElement *var6;
  MTFESpeechElement *v5;
  MTFESpeechElement *var7;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  MTFEPhoneme *v17;
  MTFESpeechElement *var5;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  _BOOL4 v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  _BOOL4 v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  __int16 v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  float v47;
  float v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  BOOL v52;
  unsigned int v53;
  float result;
  int v55;

  var9 = a2->var9;
  var15 = a2->var15;
  if (a2->var6)
    var6 = a2->var6;
  else
    var6 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  if (var6->var6)
    v5 = var6->var6;
  else
    v5 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  if (a2->var7)
    var7 = a2->var7;
  else
    var7 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  if (a2->var9)
  {
    v7 = MEMORY[0x1E0DA8EC8];
    v8 = *(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * a2->var9);
    v9 = BYTE2(var6[1].var0);
    v10 = *(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * v9);
    v11 = BYTE2(var7[1].var0);
    v12 = MTFEPhonemeDuration::sMinDur[a2->var9];
    if ((var15 & 8) != 0)
    {
      if ((v8 & 0x1000) != 0)
      {
        v19 = 0;
      }
      else if ((~v8 & 0x8000004) != 0)
      {
        if ((((v10 & 0x404) == 1024) & (v8 >> 26)) != 0)
          v19 = 15;
        else
          v19 = 40;
      }
      else
      {
        v19 = 20;
      }
      if ((v10 & 0x10) != 0)
        v13 = v19 - 20;
      else
        v13 = v19;
      v20 = *((_QWORD *)this + 10);
      v14 = v8 & 1;
      if (v20 <= 9 && (var15 & 0x1C00) != 0 && (v8 & 1) != 0)
      {
        v13 += 5 * (10 - v20);
        goto LABEL_38;
      }
    }
    else
    {
      v13 = 0;
      v14 = v8 & 1;
    }
    if (!v14)
    {
      v23 = (v8 & 0x8000000) == 0;
      if ((var15 & 1) == 0)
        v23 = 1;
      v24 = v13 + 20;
      v25 = !v23;
      if (v23)
        v26 = 108;
      else
        v26 = 128;
      if (!v25)
        v24 = v13;
      v27 = 1;
      v28 = (a2->var15 & 0x80) == 0;
      if ((var15 & 0x80) != 0)
        LODWORD(v29) = 128;
      else
        LODWORD(v29) = v26;
      if ((var15 & 0x80) == 0)
        v13 = v24;
LABEL_67:
      v31 = *(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * v11);
      if ((var15 & 0x1400) == 0)
      {
        v32 = (__int16)v12 >> 2;
        if ((*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * a2->var9) & 0x100400) != 0)
          v32 = 0;
        v12 -= v32;
        if ((v27 & 1) != 0)
        {
          v33 = (45850 * v29) >> 16;
          LODWORD(v29) = (39300 * v29) >> 16;
          if ((var9 - 30) > 3)
            LODWORD(v29) = v33;
        }
        else
        {
          if ((var15 & 0x300) == 0x200)
            v34 = 36025;
          else
            v34 = 45850;
          LODWORD(v29) = (v29 * v34) >> 16;
        }
      }
      v35 = MTFEPhonemeDuration::sMaxDur[a2->var9];
      v36 = var15 & 0x1C00;
      if (v36 == 4096)
      {
        *((_BYTE *)this + 71) = 1;
      }
      else
      {
        if ((v27 & v28) == 1)
        {
          if (*((_BYTE *)this + 71))
            v13 = 20;
LABEL_94:
          if ((v8 & 0x4000040) == 0 || (var15 & 0x1C80) != 0 || (v10 & 0x400) == 0)
            goto LABEL_104;
LABEL_97:
          if ((v10 & 1) != 0 || ((uint64_t)var6[1].var3 & 0x1C80) != 0)
          {
            LOBYTE(v38) = 0;
LABEL_100:
            v39 = 0x10000;
            goto LABEL_101;
          }
          if ((v10 & 0x4000040) != 0 && ((uint64_t)v5[1].var3 & 0x1C80) == 0)
          {
            v42 = BYTE2(v5[1].var0);
            v38 = (*(_DWORD *)(v7 + 4 * v42) & 0x400u) >> 10;
            if ((*(_DWORD *)(v7 + 4 * v42) & 0x400) == 0)
              LODWORD(v42) = v9;
            if (!(_DWORD)v42)
              goto LABEL_100;
          }
          else
          {
            LOBYTE(v38) = 0;
            LODWORD(v42) = v9;
            if (!(_DWORD)v9)
              goto LABEL_100;
          }
          v55 = *(_DWORD *)(v7 + 4 * v42);
          if ((v55 & 4) != 0)
          {
            if ((v55 & 0x400) != 0)
            {
              v39 = 78600;
              if ((_DWORD)v42 != 55 && (v55 & 0x1000) == 0 && (var15 & 0x1400) != 0)
                LOWORD(v13) = v13 + 25;
            }
            else
            {
              v39 = 55675;
              if ((v55 & 0x40) == 0)
                v39 = 0x10000;
            }
          }
          else
          {
            v13 -= (__int16)v13 >> 2;
            v39 = 52400;
          }
LABEL_101:
          if (((var15 & 8) == 0) | v38 & 1)
            v39 = (v39 >> 1) + 0x8000;
          v29 = (v39 * (unint64_t)v29) >> 16;
          if ((v27 & 1) == 0)
          {
            v41 = v13 + 30;
            if ((v10 & 1) == 0)
              v41 = v13;
            if ((var15 & 0x300) == 0x100 && (var15 & 0x1400) != 0 && ((uint64_t)var7[1].var3 & 0x80) == 0)
              v41 += 25;
            if ((_DWORD)v9 == 27)
              LOWORD(v13) = v41 - 20;
            else
              LOWORD(v13) = v41;
LABEL_140:
            v46 = *((_QWORD *)this + 1);
            v47 = *(float *)(v46 + 40);
            v48 = *(float *)(v46 + 44)
                * (float)(__int16)(v12 + (((v35 - (__int16)v12) * (unsigned __int16)v29) >> 7));
            if ((((v31 & 0x1004) == 4096) & (v8 >> 4)) != 0)
              v49 = v13 + 20;
            else
              v49 = v13;
            if ((((v31 & 0x140) == 256) & (v8 >> 3) & (v49 == 0)) != 0)
              v50 = 20;
            else
              v50 = v49;
            v51 = *((_QWORD *)this + 10);
            v52 = (unsigned __int16)v12 != (unsigned __int16)v35 && v51 <= 9;
            v53 = 5 * (5 - (v51 >> 1));
            if (!v52)
              LOWORD(v53) = 0;
            v15 = (int)(float)(v47 * (float)(__int16)(v53 + v50)) + (int)v48;
            goto LABEL_152;
          }
LABEL_104:
          if ((v8 & 2) != 0)
          {
            if ((var15 & 8) == 0 && (v10 & 2) != 0)
            {
              if ((v8 & 0x40) != 0)
              {
                v40 = 98250;
                if (((uint64_t)var6[1].var3 & 0x80) == 0)
                  v40 = 36025;
              }
              else
              {
                v40 = 36025;
              }
              if ((var9 & 0xFFFFFFFD) == 0x28)
              {
                if ((v10 & 0x1000) != 0)
                  v40 = 32750;
                if ((_DWORD)v9 == 44)
                {
                  LOWORD(v15) = 12;
                  goto LABEL_152;
                }
              }
              v12 -= (__int16)v12 >> 2;
              v29 = (v40 * (unint64_t)(unsigned __int16)v29) >> 16;
            }
            if (v36 == 0 && (v31 & 0x40) != 0)
              v43 = 6550;
            else
              v43 = 36025;
            if ((_DWORD)v11 == 42)
              v44 = 39300;
            else
              v44 = v43;
            if ((v8 & 0x1000) == 0)
              v44 = 36025;
            v45 = (v44 * (unsigned __int16)v29) >> 16;
            if ((v31 & 2) != 0)
            {
              LOWORD(v29) = v45;
              LOWORD(v12) = v12 - ((__int16)v12 >> 2);
            }
          }
          goto LABEL_140;
        }
        *((_BYTE *)this + 71) = 0;
      }
      if (v27)
        v37 = 20;
      else
        v37 = 60;
      if (v36 == 4096)
        v13 = v37;
      if (!v27)
        goto LABEL_97;
      goto LABEL_94;
    }
LABEL_38:
    if ((var15 & 0xC) != 0)
      v21 = 128;
    else
      v21 = 76;
    if ((var15 & 0x1700) != 0)
    {
      if ((var15 & 0x300) != 0 && (var15 & 0xF) == 0 && (var15 & 0x1400) == 0)
      {
        if ((var15 & 0x300) > 0x100uLL)
          v22 = 52400;
        else
          v22 = 55675;
        v21 = (v21 * v22) >> 16;
      }
    }
    else
    {
      v30 = (36025 * v21) >> 16;
      v21 = (55675 * v21) >> 16;
      if ((var15 & 0x800) == 0)
        v21 = v30;
    }
    v27 = 0;
    LODWORD(v29) = (52400 * v21) >> 16;
    if ((var15 & 0x300) == 0)
      LODWORD(v29) = v21;
    v28 = (var15 & 0x80) == 0;
    goto LABEL_67;
  }
  LOWORD(v15) = 1;
  if (!*((_BYTE *)this + 76) && (var15 & 0x8000) == 0)
  {
    v16 = MTFEPhonemeFlags::sBoundaryDur[(var15 >> 20) & 0x1F];
    if (*((MTFEPhoneme **)this + 4) == a2 && *((_BYTE *)this + 77))
      v16 = (int)((v16 + (v16 >> 15)) << 16) >> 17;
    if (*((_BYTE *)this + 73))
    {
      v17 = a2;
      while (1)
      {
        var5 = v17->var5;
        if (!var5)
          break;
        v25 = v17 == (MTFEPhoneme *)var5->var4;
        v17 = (MTFEPhoneme *)v17->var5;
        if (!v25)
          goto LABEL_78;
      }
      LOWORD(v16) = v16 + 500;
      if (*((_BYTE *)this + 74))
        LOWORD(v16) = 0;
    }
LABEL_78:
    v15 = (int)(float)(*(float *)(*((_QWORD *)this + 1) + 40) * (float)(__int16)v16);
    if (v15 <= 10)
      LOWORD(v15) = 10;
  }
LABEL_152:
  result = a2->var13 * (float)((float)(__int16)v15 / 5.0);
  a2->var13 = result;
  return result;
}

uint64_t MTFEModDuration::SingNote(uint64_t this, MTFEPhoneme *a2)
{
  uint64_t v2;
  float v3;

  if (*(_BYTE *)(this + 72))
  {
    *(_BYTE *)(this + 72) = 0;
  }
  else
  {
    v2 = *(_QWORD *)(this + 24);
    v3 = *(float *)(v2 + 64) + (float)(__int16)(*(_WORD *)(this + 66) - *(_WORD *)(this + 64));
    *(float *)(v2 + 64) = v3;
    if (v3 >= 4.0)
    {
      if (v3 > 100.0)
        *(_DWORD *)(v2 + 72) |= 0x10u;
    }
    else
    {
      *(_DWORD *)(v2 + 64) = 1082130432;
    }
  }
  *(_QWORD *)(this + 24) = a2;
  *(_WORD *)(this + 66) = *(_WORD *)(*(_QWORD *)(this + 8) + 2 * *(__int16 *)(this + 68) + 248);
  *(_WORD *)(this + 64) = 0;
  return this;
}

void MTFEModDuration::~MTFEModDuration(MTFEModDuration *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void MTFERateRescale::~MTFERateRescale(MTFERateRescale *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

uint64_t MTFEMarkStress::MTFEMarkStress(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)result = &off_1E9366E48;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = a4;
  *(_QWORD *)(result + 32) = a5;
  *(_QWORD *)(result + 96) = 0;
  *(_BYTE *)(result + 153) = 0;
  return result;
}

{
  *(_QWORD *)result = &off_1E9366E48;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = a4;
  *(_QWORD *)(result + 32) = a5;
  *(_QWORD *)(result + 96) = 0;
  *(_BYTE *)(result + 153) = 0;
  return result;
}

uint64_t MTFEMarkStress::VisitSentence(MTFEMarkStress *this, MTFESpeechElement *a2)
{
  MTBEParam *v4;
  __int16 Rate;

  v4 = (MTBEParam *)*((_QWORD *)this + 2);
  if (*((_BYTE *)v4 + 48))
    Rate = *(_WORD *)(*((_QWORD *)this + 1) + 90);
  else
    Rate = MTBEParam::GetRate(v4);
  *((_WORD *)this + 80) = Rate;
  *((_QWORD *)this + 15) = 0;
  *((_BYTE *)this + 128) = 0;
  MTFESpeechElement::VisitChildren(a2, this);
  *(_WORD *)&a2[1].var2 = *((_WORD *)this + 80);
  return MTFEMarkStress::CheckPitchChange((uint64_t)this, 0);
}

uint64_t MTFEMarkStress::CheckPitchChange(uint64_t this, MTFEWord *a2)
{
  uint64_t v3;

  v3 = this;
  if (*(_BYTE *)(this + 128))
  {
    if (*(_QWORD *)(this + 120))
    {
      this = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEPitchDWIM);
      if ((_DWORD)this)
        *(_DWORD *)(*(_QWORD *)(v3 + 120) + 56) |= 0x800u;
    }
    *(_QWORD *)(v3 + 120) = a2;
    *(_BYTE *)(v3 + 128) = 0;
  }
  else if (a2 && (a2->var8 & 0x40) == 0)
  {
    *(_QWORD *)(this + 120) = 0;
  }
  return this;
}

void MTFEMarkStress::VisitIntonationalPhrase(MTFEMarkStress *this, MTFESpeechElement *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  MTFEWord *v6;
  MTFEPhoneme *v7;
  MTFESpeechElement *var3;
  int v9;
  uint64_t v10;
  MTFEWord *v11;
  MTFEPhoneme *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  BYTE6(a2[2].var6) = 0;
  *((_QWORD *)this + 5) = 0;
  v4 = (uint64_t *)((char *)this + 40);
  *((_QWORD *)this + 17) = a2;
  *((_QWORD *)this + 10) = 0;
  v5 = (uint64_t *)((char *)this + 80);
  *((_DWORD *)this + 41) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *(_QWORD *)((char *)this + 183) = 0;
  *((_BYTE *)this + 191) = a2[3].var6 != 0;
  v6 = (MTFEWord *)operator new();
  MTFEWord::MTFEWord(v6, 0, 0);
  v7 = (MTFEPhoneme *)operator new();
  MTFEPhoneme::MTFEPhoneme(v7, 0);
  v7->var15 |= 0x8000u;
  MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v6, (MTFESpeechElement *)v7, v6->var4);
  v6->var8 |= 0x40u;
  *((_QWORD *)this + 12) = v7;
  *((_WORD *)this + 81) = *((_WORD *)this + 80);
  MTFESpeechElement::VisitChildren(a2, this);
  MTFECommands::Visit((uint64_t)&a2[1].var1, (uint64_t)this);
  var3 = a2->var3;
  v6->var22 = *((_WORD *)this + 81);
  if (*((_BYTE *)this + 191))
    v6->var23 = *(_WORD *)(*((_QWORD *)this + 2) + 20);
  MTFESpeechElement::AddChildBefore(var3, (MTFESpeechElement *)v6, var3->var3);
  v9 = BYTE6(a2[2].var6);
  v10 = *((_QWORD *)this + 14);
  if (!BYTE6(a2[2].var6))
  {
    if (v10)
    {
      v11 = (MTFEWord *)operator new();
      MTFEWord::MTFEWord(v11, 0, 0);
      v12 = (MTFEPhoneme *)operator new();
      MTFEPhoneme::MTFEPhoneme(v12, 0);
      v11->var22 = *((_WORD *)this + 80);
      if (*((_BYTE *)this + 191))
        v11->var23 = *(_WORD *)(*((_QWORD *)this + 2) + 20);
      MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v11, (MTFESpeechElement *)v12, v11->var4);
      MTFESpeechElement::AddChildAfter(*((MTFESpeechElement **)this + 18), (MTFESpeechElement *)v11, *(MTFESpeechElement **)(*((_QWORD *)this + 18) + 24));
      MTFEMarkStress::AdjustParameters(this, (MTFESpeechElement *)v12);
      v12->var15 |= 0x680000u;
      v10 = *((_QWORD *)this + 14);
    }
    v9 = 70;
    BYTE6(a2[2].var6) = 70;
  }
  if (v10)
  {
    if (!*((_DWORD *)this + 41))
    {
      v13 = *((_QWORD *)this + 6);
      if (!v13)
      {
        v14 = *((_QWORD *)this + 7);
        if (v14)
        {
          v15 = *(_DWORD *)(v14 + 72) & 0xFFFFE3FF;
        }
        else
        {
          v14 = *((_QWORD *)this + 11);
          if (!v14)
            goto LABEL_18;
          v15 = *(_DWORD *)(v14 + 72);
        }
        *(_DWORD *)(v14 + 72) = v15 | 0x400;
        *((_QWORD *)this + 6) = v14;
        goto LABEL_18;
      }
      *(_DWORD *)(v13 + 72) = *(_DWORD *)(v13 + 72) & 0xFFFFE3FF | 0x400;
    }
LABEL_18:
    if (v9 == 72)
    {
      v16 = *v4;
      if (*v4 || (v16 = *((_QWORD *)this + 6)) != 0 || (v16 = *((_QWORD *)this + 7)) != 0 || (v16 = *v5) != 0)
        *(_DWORD *)(v16 + 72) = *(_DWORD *)(v16 + 72) & 0xFFFFE3FF | 0x1000;
    }
  }
}

void sub_1D2275E20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

void MTFEMarkStress::AdjustParameters(MTFEMarkStress *this, MTFESpeechElement *a2)
{
  char *v4;
  uint64_t v5;
  float v6;

  v4 = (char *)this + 168;
  LODWORD(a2[1].var3) = (uint64_t)a2[1].var3 & ~*((_DWORD *)this + 44) | *((_DWORD *)this + 42);
  v5 = *((_QWORD *)this + 1);
  if (*((_BYTE *)this + 184))
  {
    v6 = pow((double)*(__int16 *)(v5 + 82) * 0.00390625, (double)*((char *)this + 184)) * *(float *)&a2[1].var1;
    *(float *)&a2[1].var1 = v6;
  }
  WORD2(a2[1].var0) += *(_WORD *)(v5 + 80) * *((char *)this + 185);
  HIWORD(a2[1].var0) = *((_WORD *)this + 93);
  if (*((_BYTE *)this + 188))
  {
    *((_QWORD *)this + 6) = a2;
    if (!*((_BYTE *)this + 155))
      *((_QWORD *)this + 5) = a2;
    if (!*((_QWORD *)this + 8))
      *((_QWORD *)this + 8) = a2;
    *((_BYTE *)this + 188) = 0;
  }
  if (*((_BYTE *)this + 189))
  {
    *((_QWORD *)this + 7) = a2;
    if (!*((_QWORD *)this + 9))
      *((_QWORD *)this + 9) = a2;
    *((_BYTE *)this + 189) = 0;
  }
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_DWORD *)v4 + 4) = 0;
  if (!a2->var7)
    MTFESpeechElement::SetPrevCousin(a2, *((MTFESpeechElement **)this + 12));
  *((_QWORD *)this + 12) = a2;
}

MTFESpeechElement *MTFEMarkStress::VisitIntermediatePhrase(MTFEMarkStress *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *v2;
  MTFESpeechElement *result;
  BOOL v5;

  v2 = a2;
  *((_QWORD *)this + 18) = a2;
  do
  {
    result = MTFESpeechElement::VisitChildren(v2, this);
    v5 = v2 == *((MTFESpeechElement **)this + 18);
    v2 = (MTFESpeechElement *)*((_QWORD *)this + 18);
  }
  while (!v5);
  return result;
}

MTFESpeechElement *MTFEMarkStress::VisitWord(MTFEMarkStress *this, MTFEWord *a2)
{
  int v4;
  uint64_t var11;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  MTFEWord *v9;
  MTFEPhoneme *v10;
  int8x16_t v11;
  uint64_t *v12;
  char v13;
  int var10;
  MTFESpeechElement *result;
  uint64_t v16;
  MTFEIntermediatePhrase *v17;

  *((_BYTE *)this + 158) = 0;
  *((_QWORD *)this + 13) = a2;
  MTFECommands::Visit((uint64_t)&a2->var18, (uint64_t)this);
  a2->var22 = *((_WORD *)this + 80);
  v4 = *((unsigned __int8 *)this + 153);
  if (*((_BYTE *)this + 191))
    a2->var23 = *(_WORD *)(*((_QWORD *)this + 2) + 20);
  MTFEMarkStress::CheckPitchChange((uint64_t)this, a2);
  if (*((_BYTE *)this + 158))
    a2->var11 = 3;
  if (!a2->var7)
    *((_WORD *)this + 81) = *((_WORD *)this + 80);
  var11 = a2->var11;
  if ((var11 - 1) >= 2)
  {
    v6 = (_DWORD)var11 == 3 || *(_BYTE *)(*((_QWORD *)this + 17) + 156) == 0;
    v7 = !v6;
    if (a2->var11 && !v7)
    {
      v8 = *((_QWORD *)this + 18);
      if (*(MTFEWord **)(v8 + 16) != a2)
      {
        *(_BYTE *)(v8 + 80) = var11;
        if (a2->var15 != 31)
        {
          v17 = (MTFEIntermediatePhrase *)operator new();
          MTFEIntermediatePhrase::MTFEIntermediatePhrase(v17);
          MTFESpeechElement::AddChildAfter(*(MTFESpeechElement **)(*((_QWORD *)this + 18) + 32), (MTFESpeechElement *)v17, *((MTFESpeechElement **)this + 18));
          result = MTFESpeechElement::SplitChildren(*((MTFESpeechElement **)this + 18), (MTFESpeechElement *)a2, (MTFESpeechElement *)v17);
          *((_QWORD *)this + 18) = v17;
          return result;
        }
      }
      if (var11 < 0xB || (_DWORD)var11 == 16 || v8 == *(_QWORD *)(*(_QWORD *)(v8 + 32) + 16))
      {
        v11 = (int8x16_t)vdupq_n_s64(0x1F00000uLL);
        v11.i64[0] = var11 << 20;
        *(int8x16_t *)((char *)this + 168) = vorrq_s8(*(int8x16_t *)((char *)this + 168), v11);
      }
      else
      {
        v9 = (MTFEWord *)operator new();
        MTFEWord::MTFEWord(v9, 0, 0);
        v10 = (MTFEPhoneme *)operator new();
        MTFEPhoneme::MTFEPhoneme(v10, 0);
        v9->var22 = *((_WORD *)this + 80);
        v10->var15 |= (a2->var11 << 20) | 0x40000;
        MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v9, (MTFESpeechElement *)v10, v9->var4);
        MTFESpeechElement::AddChildBefore(*((MTFESpeechElement **)this + 18), (MTFESpeechElement *)v9, (MTFESpeechElement *)a2);
        MTFESpeechElement::SetPrevCousin((MTFESpeechElement *)v10, *((MTFESpeechElement **)this + 12));
        *((_QWORD *)this + 12) = v10;
      }
    }
  }
  *((_QWORD *)this + 8) = 0;
  v12 = (uint64_t *)((char *)this + 64);
  *((_BYTE *)this + 152) = 0;
  v13 = 1;
  *((_BYTE *)this + 157) = 1;
  *((_QWORD *)this + 14) = a2;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  if (!*((_BYTE *)this + 153) && ((1 << a2->var15) & 0xA5273) == 0)
    v13 = SLWordTagSet::find(&a2->var17);
  *((_BYTE *)this + 153) = v13;
  var10 = a2->var10;
  *((_BYTE *)this + 154) = var10 == 1;
  if (v4)
  {
    *(_WORD *)((char *)this + 155) = 0;
  }
  else
  {
    *((_BYTE *)this + 155) = var10 == 2;
    *((_BYTE *)this + 156) = var10 == 4;
    if (var10 == 4)
    {
      *((_BYTE *)this + 155) = 1;
      a2->var10 = 2;
    }
  }
  result = MTFESpeechElement::VisitChildren((MTFESpeechElement *)a2, this);
  if (*((_BYTE *)this + 152))
    a2->var8 |= 0x20000u;
  if (*((_BYTE *)this + 153))
  {
    if (!*((_BYTE *)this + 154))
      goto LABEL_40;
LABEL_36:
    v16 = *v12;
    if (*v12 || (v16 = *((_QWORD *)this + 9)) != 0 || (v16 = *((_QWORD *)this + 11)) != 0)
    {
      *(_DWORD *)(v16 + 72) = *(_DWORD *)(v16 + 72) & 0xFFFFE3FF | 0x1000;
      ++*((_DWORD *)this + 41);
    }
    goto LABEL_40;
  }
  if (*((_BYTE *)this + 154))
    goto LABEL_36;
  a2->var10 = 2;
LABEL_40:
  if (!a2->var1)
    result = (MTFESpeechElement *)(*((uint64_t (**)(MTFEWord *))a2->var0 + 2))(a2);
  *((_BYTE *)this + 153) = 0;
  return result;
}

void sub_1D22762CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

void MTFEMarkStress::VisitPhoneme(MTFEMarkStress *this, MTFESpeechElement *a2)
{
  int v4;
  char v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;

  v4 = BYTE2(a2[1].var0);
  v5 = *(_BYTE *)(MEMORY[0x1E0DA8EC0] + BYTE2(a2[1].var0));
  v6 = *(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * BYTE2(a2[1].var0));
  if (*((_BYTE *)this + 190))
  {
    if (!BYTE2(a2[1].var0))
      v5 = 2;
    *((_BYTE *)this + 190) = 0;
  }
  if ((v5 & 2) != 0)
  {
    switch(v4)
    {
      case ':':
        if (!*((_BYTE *)this + 152))
        {
          v9 = *((_QWORD *)this + 22) | 0x1C00;
          *((_QWORD *)this + 21) = *((_QWORD *)this + 21) & 0xFFFFE3FFLL | 0x800;
          *((_QWORD *)this + 22) = v9;
        }
        *((_BYTE *)this + 189) = 1;
        goto LABEL_41;
      case ';':
        v10 = *((_QWORD *)this + 22) | 0x1C00;
        *((_QWORD *)this + 21) = *((_QWORD *)this + 21) & 0xFFFFE3FFLL | 0x1000;
        *((_QWORD *)this + 22) = v10;
        ++*((_DWORD *)this + 41);
        goto LABEL_41;
      case '<':
        v11 = *((_QWORD *)this + 10);
        if (v11 && *((_QWORD *)this + 11))
          *(_DWORD *)(v11 + 72) |= 0x80000000;
        v12 = *((_QWORD *)this + 21) | 0x10000000;
        goto LABEL_36;
      case '=':
        *((_BYTE *)this + 152) = 1;
        goto LABEL_41;
      case '>':
        v13 = *((_BYTE *)this + 185) + 1;
        goto LABEL_30;
      case '?':
        v13 = *((_BYTE *)this + 185) - 1;
LABEL_30:
        *((_BYTE *)this + 185) = v13;
        goto LABEL_41;
      case '@':
        v14 = *((_BYTE *)this + 184) + 1;
        goto LABEL_33;
      case 'A':
        v14 = *((_BYTE *)this + 184) - 1;
LABEL_33:
        *((_BYTE *)this + 184) = v14;
        goto LABEL_41;
      case 'B':
        v12 = *((_QWORD *)this + 21) | 0x20000;
        goto LABEL_36;
      case 'C':
        v12 = *((_QWORD *)this + 21) | 0x40000;
LABEL_36:
        *((_QWORD *)this + 21) = v12;
        goto LABEL_41;
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
        MTFEMarkStress::AdjustParameters(this, a2);
        BYTE2(a2[1].var0) = 0;
        LODWORD(a2[1].var3) |= 0x80000u;
        *(_BYTE *)(*((_QWORD *)this + 17) + 158) = v4;
        *((_BYTE *)this + 190) = 1;
        return;
      case 'I':
        goto LABEL_41;
      case 'J':
        *((_BYTE *)this + 154) = 1;
        goto LABEL_38;
      case 'K':
LABEL_38:
        v16 = (uint64_t *)((char *)this + 168);
        v15 = *((_QWORD *)this + 21);
        *((_BYTE *)this + 153) = 1;
        *((_QWORD *)this + 11) = 0;
        goto LABEL_40;
      default:
        if (v4 == 2)
        {
          v16 = (uint64_t *)((char *)this + 168);
          v15 = *((_QWORD *)this + 21);
          v17 = *((unsigned __int8 *)this + 153);
          *((_QWORD *)this + 11) = 0;
          *((_QWORD *)this + 21) = v15 | 0x10000;
          if (v17)
LABEL_40:
            *v16 = v15 | 0x12000;
        }
        else if (v4 == 1)
        {
          v7 = *((_QWORD *)this + 21) & 0xFFFFE3FFLL;
          if (*((_BYTE *)this + 152) || !*((_BYTE *)this + 153) || *((_BYTE *)this + 155))
          {
            *((_QWORD *)this + 21) = v7 | 0x800;
            v8 = *((_BYTE *)this + 156);
            *((_BYTE *)this + 189) = v8;
          }
          else
          {
            *((_QWORD *)this + 21) = v7 | 0x400;
            ++*((_DWORD *)this + 41);
            v8 = *((_BYTE *)this + 156);
          }
          *((_QWORD *)this + 22) |= 0x1C00uLL;
          *((_BYTE *)this + 188) = v8 ^ 1;
        }
LABEL_41:
        (*((void (**)(MTFESpeechElement *))a2->var0 + 2))(a2);
        break;
    }
  }
  else
  {
    if ((v6 & 1) != 0)
    {
      *((_BYTE *)this + 157) = 0;
      *((_QWORD *)this + 10) = a2;
      if (!*((_QWORD *)this + 11))
        *((_QWORD *)this + 11) = a2;
    }
    else if (*((_BYTE *)this + 157))
    {
      LODWORD(a2[1].var3) |= 0x80u;
    }
    MTFEMarkStress::AdjustParameters(this, a2);
  }
}

MTFESpeechElement *MTFEMarkStress::VisitCommand(MTFESpeechElement *this, MTFECommand *a2)
{
  uint64_t v3;
  int64_t var8;
  unint64_t v5;
  float v6;
  unint64_t v7;
  MTFESpeechElement *var4;
  uint64_t v9;
  int v10;
  __int16 v11;
  uint64_t var3;
  int v13;
  MTFESpeechElement *var7;
  MTFESpeechElement *v15;
  BOOL v16;
  MTFEIntermediatePhrase *v17;
  int v18;
  int64_t var9;
  MTFESpeechElement *v20;
  MTFEWord *v21;
  MTFEPhoneme *v22;
  MTFESpeechElement *v23;
  MTFESpeechElement *var5;
  float v25;
  float v26;
  float v27;
  MTFEPhoneme *v28;
  float v29;
  float v30;

  v3 = (uint64_t)this;
  var8 = a2->var8;
  if (var8 <= 1918989425)
  {
    if (var8 > 1885495665)
    {
      if ((unint64_t)(var8 - 1885495666) < 2)
      {
        LOBYTE(this[2].var3) = 1;
        return this;
      }
      if (var8 == 1918989413)
      {
        if (HIBYTE(this[3].var3))
        {
          var3 = (uint64_t)this->var3;
          v13 = SWORD1(a2->var9);
LABEL_32:
          MTBEParam::SetTempo(var3, v13);
          return (MTFESpeechElement *)(*((uint64_t (**)(MTFECommand *))a2->var0 + 2))(a2);
        }
        v10 = *(_DWORD *)((char *)&a2->var9 + 2);
LABEL_47:
        if (v10 <= 40)
          LOWORD(v10) = 40;
        goto LABEL_49;
      }
      return this;
    }
    if (var8 != 1835102827)
    {
      if (var8 == 1852798053)
      {
        WORD1(this[3].var3) = a2->var9 & 0xF00 | BYTE2(LODWORD(a2->var9));
        v9 = *(_QWORD *)&this->var1;
        LOBYTE(this->var3->var7) = 1;
        LOWORD(v10) = *(_WORD *)(v9 + 90);
LABEL_49:
        LOWORD(this[2].var7) = v10;
        return (MTFESpeechElement *)(*((uint64_t (**)(MTFECommand *))a2->var0 + 2))(a2);
      }
      return this;
    }
    return (MTFESpeechElement *)(*((uint64_t (**)(MTFECommand *))a2->var0 + 2))(a2);
  }
  if (var8 > 1936485986)
  {
    if (var8 == 1936485987)
    {
      var7 = this[1].var7;
      if (!var7
        || ((v15 = var7->var7, HIBYTE(var7[1].var0) <= 2u) ? (v16 = v15 == 0) : (v16 = 1),
            v16
         || ((uint64_t)v15[1].var0 & 0x40) != 0
         || !MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFESilencePhrase)))
      {
        v18 = 0;
      }
      else
      {
        v17 = (MTFEIntermediatePhrase *)operator new();
        MTFEIntermediatePhrase::MTFEIntermediatePhrase(v17);
        MTFESpeechElement::AddChildAfter(*(MTFESpeechElement **)(*(_QWORD *)(v3 + 144) + 32), (MTFESpeechElement *)v17, *(MTFESpeechElement **)(v3 + 144));
        MTFESpeechElement::SplitChildren(*(MTFESpeechElement **)(v3 + 144), *(MTFESpeechElement **)(v3 + 104), (MTFESpeechElement *)v17);
        *(_QWORD *)(v3 + 144) = v17;
        v18 = 1;
      }
      var9 = a2->var9;
      if (var9 < 1)
        return (MTFESpeechElement *)(*((uint64_t (**)(MTFECommand *))a2->var0 + 2))(a2);
      v20 = *(MTFESpeechElement **)(v3 + 112);
      v21 = (MTFEWord *)operator new();
      MTFEWord::MTFEWord(v21, 0, 0);
      v22 = (MTFEPhoneme *)operator new();
      MTFEPhoneme::MTFEPhoneme(v22, 0);
      v21->var22 = *(_WORD *)(v3 + 160);
      if (v18)
      {
        v21->var11 = 3;
        *(_QWORD *)(v3 + 104) = v21;
      }
      if (v20)
      {
        if (v20->var5 == *(MTFESpeechElement **)(v3 + 144))
          v23 = v20;
        else
          v23 = 0;
      }
      else
      {
        v23 = 0;
      }
      MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v21, (MTFESpeechElement *)v22, v21->var4);
      MTFESpeechElement::AddChildAfter(*(MTFESpeechElement **)(v3 + 144), (MTFESpeechElement *)v21, v23);
      MTFEMarkStress::AdjustParameters((MTFEMarkStress *)v3, (MTFESpeechElement *)v22);
      v25 = 1000.0;
      if ((unint64_t)var9 <= 0x5DC)
        v25 = (float)var9;
      v26 = v22->var13 * v25;
      v22->var13 = v26;
      v22->var15 = 98304;
      v27 = (float)var9 - v26;
      if (v27 < 1.0)
      {
        *(_QWORD *)(v3 + 96) = v22;
        *(_QWORD *)(v3 + 112) = v21;
        return (MTFESpeechElement *)(*((uint64_t (**)(MTFECommand *))a2->var0 + 2))(a2);
      }
      do
      {
        v28 = (MTFEPhoneme *)operator new();
        MTFEPhoneme::MTFEPhoneme(v28, 0);
        this = MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v21, (MTFESpeechElement *)v28, v21->var4);
        v29 = 1000.0;
        if (v27 <= 1500.0)
          v29 = v27;
        v30 = v28->var13 * v29;
        v28->var13 = v30;
        v28->var15 = 98304;
        v27 = v27 - v30;
      }
      while (v27 >= 1.0);
      *(_QWORD *)(v3 + 96) = v28;
      *(_QWORD *)(v3 + 112) = v21;
      if (a2)
        return (MTFESpeechElement *)(*((uint64_t (**)(MTFECommand *))a2->var0 + 2))(a2);
      return this;
    }
    if (var8 != 1953329263)
    {
      if (var8 != 1953456745)
        return this;
      v5 = a2->var9;
      v6 = (float)(v5 & 0xFFFFFF) * 0.000015259;
      v7 = v5 >> 24;
      if ((v7 - 1) < 3)
      {
        var5 = this[2].var5;
        BYTE1(var5[1].var4) = v7;
        *((float *)&var5[1].var4 + 1) = v6;
        BYTE6(this[2].var6) = 1;
      }
      else
      {
        if ((v7 - 5) < 2)
        {
          var4 = this[2].var4;
          BYTE5(var4[2].var6) = v7;
          *(float *)&var4[3].var5 = v6;
          return (MTFESpeechElement *)(*((uint64_t (**)(MTFECommand *))a2->var0 + 2))(a2);
        }
        if ((_DWORD)v7 != 4)
        {
          BYTE1(this[2].var6) = 1;
          return this;
        }
      }
      BYTE4(this[2].var4[2].var6) = 1;
    }
    return (MTFESpeechElement *)(*((uint64_t (**)(MTFECommand *))a2->var0 + 2))(a2);
  }
  if (var8 == 1918989426)
  {
    if (HIBYTE(this[3].var3))
    {
      var3 = (uint64_t)this->var3;
      v13 = (__int16)(*(_WORD *)(var3 + 20) + WORD1(a2->var9));
      goto LABEL_32;
    }
    v10 = (__int16)(LOWORD(this[2].var7) + WORD1(a2->var9));
    goto LABEL_47;
  }
  if (var8 == 1920165236)
  {
    if (LOBYTE(this->var3->var7))
    {
      v11 = *(_WORD *)(*(_QWORD *)&this->var1 + 90);
    }
    else
    {
      this = this->var4;
      if (this && a2->var9 == 1)
      {
        this = (MTFESpeechElement *)MTBEParam::GetRate((MTBEParam *)this);
        *(_WORD *)(v3 + 160) = (_WORD)this;
        return this;
      }
      v11 = *(_WORD *)(*(_QWORD *)(v3 + 8) + 6);
    }
    *(_WORD *)(v3 + 160) = v11;
  }
  return this;
}

void sub_1D2276A50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C4085E5C4E0);
  _Unwind_Resume(a1);
}

void MTFEMarkStress::~MTFEMarkStress(MTFEMarkStress *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

MTFESpeechElement *MTFEConnectedSpeech::VisitIntonationalPhrase(MTFETrackingVisitor *this, MTFESpeechElement *a2)
{
  unsigned int *v2;
  uint64_t v3;

  *((_BYTE *)this + 168) = 0;
  v2 = (unsigned int *)MEMORY[0x1E0DA8EC8];
  *((_BYTE *)this + 192) = 0;
  v3 = *v2;
  *((_QWORD *)this + 25) = v3;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = v3;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = v3;
  *((_QWORD *)this + 5) = 0;
  *(_WORD *)((char *)this + 83) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_BYTE *)this + 82) = a2[3].var6 != 0;
  return MTFETrackingVisitor::VisitIntonationalPhrase(this, a2);
}

MTFESpeechElement *MTFEConnectedSpeech::VisitIntermediatePhrase(MTFETrackingVisitor *this, MTFESpeechElement *a2)
{
  *((_BYTE *)this + 80) = 1;
  return MTFETrackingVisitor::VisitIntermediatePhrase(this, a2);
}

MTFESpeechElement *MTFEConnectedSpeech::VisitWord(MTFEConnectedSpeech *this, MTFESpeechElement *a2)
{
  *((_QWORD *)this + 4) = a2;
  *((_BYTE *)this + 78) = (uint64_t)a2[1].var0 & 1;
  *((_BYTE *)this + 79) = SLWordTagSet::find((SLWordTagSet *)((char *)&a2[1].var5 + 4));
  *((_BYTE *)this + 81) = a2->var6 == 0;
  return MTFETrackingVisitor::VisitWord(this, a2);
}

MTFESpeechElement *MTFEConnectedSpeech::VisitSyllable(MTFEConnectedSpeech *this, MTFESpeechElement *a2)
{
  char v3;
  uint64_t v4;
  MTFESpeechElement *result;

  v3 = *((_BYTE *)this + 81);
  if (v3 && a2->var6)
    *((_BYTE *)this + 81) = 0;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = a2;
  *((_QWORD *)this + 6) = v4;
  result = MTFETrackingVisitor::VisitSyllable(this, a2);
  *((_BYTE *)this + 81) = v3;
  return result;
}

uint64_t MTFEConnectedSpeech::AddTag(MTFEConnectedSpeech *this, unsigned __int16 a2)
{
  SLWordTagSet *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (SLWordTagSet *)(*((_QWORD *)this + 4) + 92);
  if ((SLWordTagSet::find(v4) & 1) == 0)
  {
    v5 = v4->var0[0];
    if (v5 <= 6)
    {
      v6 = v5 + 1;
      v4->var0[0] = v6;
      v4->var0[v6] = a2;
    }
  }
  return SLWordTagSet::erase((SLWordTagSet *)(*((_QWORD *)this + 4) + 92));
}

uint64_t MTFEConnectedSpeech::VisitPhoneme(MTFEConnectedSpeech *this, MTFEPhoneme *a2)
{
  uint64_t v4;
  uint64_t v5;
  MTFESpeechElement *v6;
  MTFESpeechElement *v7;
  uint64_t v8;
  uint64_t var9;
  MTFESpeechElement *var6;
  uint64_t v11;
  MTFESpeechElement *v12;
  MTFESpeechElement *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  MTFESpeechElement *v23;
  char v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  MTFEPitchTargets *var17;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  float var13;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD v88[6];

  MTFETrackingVisitor::PrePhoneme((uint64_t)this, a2);
  v5 = *((_QWORD *)this + 7);
  v6 = (MTFESpeechElement *)*((_QWORD *)this + 8);
  v7 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  v8 = MEMORY[0x1E0DA8EC8];
  if (*(_OWORD *)((char *)this + 56) == 0)
  {
    var9 = a2->var9;
    *((_BYTE *)this + 104) = var9;
    *((_QWORD *)this + 14) = a2->var15;
    var6 = a2->var6;
    if (!var6)
      var6 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
    v11 = BYTE2(var6[1].var0);
    *((_BYTE *)this + 128) = v11;
    *((_QWORD *)this + 17) = LODWORD(var6[1].var3);
    v12 = var6->var6;
    if (!v12)
      v12 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
    *((_BYTE *)this + 152) = BYTE2(v12[1].var0);
    *((_QWORD *)this + 20) = LODWORD(v12[1].var3);
    v13 = v12->var6;
    if (v13)
      v6 = v13;
    else
      v6 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
    *((_QWORD *)this + 8) = v6;
    *((_QWORD *)this + 15) = *(unsigned int *)(v8 + 4 * var9);
    *((_QWORD *)this + 18) = *(unsigned int *)(v8 + 4 * v11);
  }
  *((_BYTE *)this + 208) = *((_BYTE *)this + 192);
  v14 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 27) = v14;
  v15 = *((unsigned __int8 *)this + 168);
  *((_BYTE *)this + 192) = v15;
  v16 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 25) = v16;
  v17 = *((unsigned __int8 *)this + 84);
  *((_BYTE *)this + 168) = v17;
  *((_OWORD *)this + 11) = *(_OWORD *)((char *)this + 88);
  v18 = *((unsigned __int8 *)this + 104);
  *((_BYTE *)this + 84) = v18;
  v19 = *((_OWORD *)this + 7);
  *(_OWORD *)((char *)this + 88) = v19;
  v20 = *((unsigned __int8 *)this + 128);
  *((_BYTE *)this + 104) = v20;
  v21 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 14) = *((_QWORD *)this + 17);
  *((_QWORD *)this + 15) = v21;
  v22 = *((unsigned __int8 *)this + 152);
  *((_BYTE *)this + 128) = v22;
  *((_QWORD *)this + 17) = *((_QWORD *)this + 20);
  *((_QWORD *)this + 18) = *(unsigned int *)(v8 + 4 * v22);
  *((_BYTE *)this + 152) = BYTE2(v6[1].var0);
  *((_QWORD *)this + 20) = LODWORD(v6[1].var3);
  v23 = v6->var6;
  if (v23)
    v7 = v23;
  *((_QWORD *)this + 8) = v7;
  if (!*((_BYTE *)this + 76))
  {
    if (v18 == 33)
    {
      v24 = 0;
      if ((v19 & 0x1C80) == 0 && (v17 & 0xFE) == 0xA)
      {
        *(_BYTE *)(v5 + 58) = 28;
        goto LABEL_227;
      }
LABEL_33:
      v27 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kRhotacizeAX);
      if ((_DWORD)v27 && *((_BYTE *)this + 84) == 32 && *((_BYTE *)this + 168) == 11)
        *(_BYTE *)(*((_QWORD *)this + 7) + 58) = 12;
      v28 = *((_QWORD *)this + 11);
      if ((v28 & 0x10001C80) == 0 && (*((_BYTE *)this + 184) & 8) != 0)
      {
        v29 = *((unsigned __int8 *)this + 84);
        if (v29 == 33)
        {
          v18 = 27;
        }
        else if (v29 == 32)
        {
          v18 = 26;
          switch(*((_BYTE *)this + 168))
          {
            case 3:
            case 4:
              v30 = *((_QWORD *)this + 7);
              v31 = 20;
              goto LABEL_67;
            case 5:
            case 6:
            case 0xD:
              if (*((_BYTE *)this + 76))
              {
                v18 = 26;
                goto LABEL_75;
              }
              v30 = *((_QWORD *)this + 7);
              v31 = 21;
LABEL_67:
              *(_BYTE *)(v30 + 58) = v31;
              v18 = 26;
              v24 = 1;
              break;
            case 7:
              v30 = *((_QWORD *)this + 7);
              v31 = 22;
              goto LABEL_67;
            case 8:
            case 0xB:
              v30 = *((_QWORD *)this + 7);
              v31 = 12;
              goto LABEL_67;
            case 9:
            case 0x11:
              v30 = *((_QWORD *)this + 7);
              v31 = 23;
              goto LABEL_67;
            case 0xA:
            case 0x12:
              v30 = *((_QWORD *)this + 7);
              v31 = 24;
              goto LABEL_67;
            default:
              break;
          }
        }
      }
      if (!*((_BYTE *)this + 76)
        && (*((_BYTE *)this + 176) & 0x80) != 0
        && *((_BYTE *)this + 168) == 31
        && *((_BYTE *)this + 104) != 32
        && (v28 & 0xF) != 0
        && *((_BYTE *)this + 84) == 18)
      {
        v32 = *((_QWORD *)this + 7);
        *(_BYTE *)(v32 + 58) = 19;
        *(_DWORD *)(v32 + 72) = *(_DWORD *)(v32 + 72) & 0xFFFFE000 | (unsigned __int16)v28;
        v24 = 1;
      }
LABEL_75:
      if (*((_BYTE *)this + 78))
        goto LABEL_146;
      if (*((_BYTE *)this + 168) != 41)
        goto LABEL_109;
      if ((*((_BYTE *)this + 176) & 0x80) == 0 || (v28 & 0xF) == 0 || *((_BYTE *)this + 84) != 11)
        goto LABEL_108;
      LODWORD(v33) = *((unsigned __int8 *)this + 104);
      if (!*((_BYTE *)this + 104))
      {
        v27 = MTFEConnectedSpeech::PrecedingQuote((MTFEConnectedSpeech *)v27, (MTFESpeechElement *)a2);
        if ((v27 & 1) != 0)
        {
          MTFESpeechPedigree::MTFESpeechPedigree((MTFESpeechPedigree *)v88, (MTFESpeechElement *)a2);
          v34 = *(_QWORD **)(*(_QWORD *)&v88[1] + 40);
          do
          {
            v35 = v34;
            v34 = (_QWORD *)v34[2];
          }
          while (v34);
          v36 = (unsigned __int8 *)&MTFEPhonemeFlags::sSIL;
          while (!*((_BYTE *)v35 + 58))
          {
            v35 = (_QWORD *)v35[5];
            if (!v35)
            {
              v35 = &MTFEPhonemeFlags::sSIL;
              break;
            }
          }
          v33 = *((unsigned __int8 *)v35 + 58);
          LODWORD(v37) = *(_DWORD *)(v8 + 4 * v33);
          v38 = (_QWORD *)v35[5];
          if (!v38)
            v38 = &MTFEPhonemeFlags::sSIL;
          v39 = *((unsigned __int8 *)v38 + 58);
          LODWORD(v40) = *(_DWORD *)(v8 + 4 * *((unsigned __int8 *)v38 + 58));
          v41 = (unsigned __int8 *)v38[5];
          if (v41)
            v36 = v41;
          v42 = v36[58];
          MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v88);
          v43 = v42;
LABEL_95:
          if ((v37 & 1) != 0)
          {
            v44 = 3;
            LOWORD(v4) = 1032;
            goto LABEL_107;
          }
          v44 = 25;
          v4 = 1034;
          if ((_DWORD)v33 == 19 || (_DWORD)v33 == 31 || (_DWORD)v33 == 34 && ((v40 & 0x200000) != 0 || v39 == 31))
            goto LABEL_107;
          if ((v37 & 2) != 0)
          {
            if (v39 > 0x1F)
              goto LABEL_302;
            if (((1 << v39) & 0x2102018) == 0)
            {
              if (((1 << v39) & 0x40060) == 0)
              {
                if (((1 << v39) & 0x80080000) != 0)
                  goto LABEL_107;
                goto LABEL_302;
              }
              goto LABEL_297;
            }
          }
          else
          {
            if (v39 > 0x19)
              goto LABEL_302;
            if (((1 << v39) & 0x2102018) == 0)
            {
              if (((1 << v39) & 0x40060) == 0)
                goto LABEL_302;
LABEL_297:
              v82 = v33 - 36;
              if ((v33 - 36) < 0x12)
              {
                v83 = 209825;
                goto LABEL_301;
              }
              goto LABEL_302;
            }
          }
          v82 = v33 - 30;
          if ((v33 - 30) < 0x18)
          {
            v83 = 16777189;
LABEL_301:
            if (((v83 >> v82) & 1) != 0)
              goto LABEL_107;
          }
LABEL_302:
          if (v43 > 0x1F)
            goto LABEL_108;
          if (((1 << v43) & 0x82102018) != 0)
          {
            switch((int)v33)
            {
              case '&':
              case '/':
              case '3':
                if ((v39 & 0xFE) != 0x20)
                  goto LABEL_321;
                goto LABEL_107;
              case '\'':
              case '(':
                if (v39 == 32)
                  goto LABEL_107;
                goto LABEL_108;
              case '*':
                if (v39 > 0x32)
                  goto LABEL_108;
                v84 = 1 << v39;
                v86 = 0x401A40000000;
                goto LABEL_340;
              case ',':
                if (v39 > 0x32)
                  goto LABEL_108;
                v84 = 1 << v39;
                v86 = 0x400000000000;
LABEL_340:
                v85 = v86 & 0xFFFFFFFFFFFFLL | 0x5000000000000;
                break;
              case '.':
              case '0':
              case '1':
              case '2':
                if (v39 > 0x2D)
                  goto LABEL_108;
                v84 = 1 << v39;
                v85 = 0x300140000000;
                break;
              default:
                goto LABEL_108;
            }
LABEL_341:
            if ((v84 & v85) == 0)
              goto LABEL_108;
LABEL_107:
            v27 = MTFEConnectedSpeech::AddTag(this, v4);
            v18 = v44;
            goto LABEL_108;
          }
          if (((1 << v43) & 0x40060) == 0)
            goto LABEL_108;
LABEL_321:
          if ((_DWORD)v33 == 42 && v39 <= 0x2E)
          {
            v84 = 1 << v39;
            v85 = 0x400A00000000;
            goto LABEL_341;
          }
LABEL_108:
          if (*((_BYTE *)this + 78))
          {
LABEL_146:
            v55 = 0;
            goto LABEL_147;
          }
LABEL_109:
          v45 = v18;
          if (*((_BYTE *)this + 84) != 11)
            goto LABEL_144;
          v46 = *((_QWORD *)this + 11);
          if ((v46 & 0xF) == 0 || (v46 & 0x11C00) != 0x10000)
            goto LABEL_144;
          v47 = *((unsigned __int8 *)this + 104);
          if (!*((_BYTE *)this + 104))
          {
            if (MTFEConnectedSpeech::PrecedingQuote((MTFEConnectedSpeech *)v27, (MTFESpeechElement *)a2))
            {
              MTFESpeechPedigree::MTFESpeechPedigree((MTFESpeechPedigree *)v88, (MTFESpeechElement *)a2);
              v48 = *(_QWORD **)(*(_QWORD *)&v88[1] + 40);
              do
              {
                v49 = v48;
                v48 = (_QWORD *)v48[2];
              }
              while (v48);
              while (!*((_BYTE *)v49 + 58))
              {
                v49 = (_QWORD *)v49[5];
                if (!v49)
                {
                  v49 = &MTFEPhonemeFlags::sSIL;
                  break;
                }
              }
              v47 = *((unsigned __int8 *)v49 + 58);
              LODWORD(v50) = *(_DWORD *)(v8 + 4 * *((unsigned __int8 *)v49 + 58));
              v51 = (unsigned __int8 *)v49[5];
              if (!v51)
                v51 = (unsigned __int8 *)&MTFEPhonemeFlags::sSIL;
              v52 = v51[58];
              LODWORD(v53) = *(_DWORD *)(v8 + 4 * v51[58]);
              MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v88);
              goto LABEL_124;
            }
            v47 = *((unsigned __int8 *)this + 104);
          }
          v50 = *((_QWORD *)this + 15);
          v52 = *((unsigned __int8 *)this + 128);
          v53 = *((_QWORD *)this + 18);
LABEL_124:
          v18 = 25;
          if (v47 > 48)
          {
            if ((v47 - 52) < 2)
              goto LABEL_145;
            if (v47 == 49 && v52 == 45)
              goto LABEL_143;
          }
          else
          {
            if (v47 == 31)
              goto LABEL_145;
            if (v47 == 34)
            {
              v18 = 25;
              if ((v53 & 0x200000) != 0 || v52 == 31)
                goto LABEL_145;
            }
            else if (v47 == 48 && v52 == 44)
            {
              goto LABEL_143;
            }
          }
          v54 = *((unsigned __int8 *)this + 168);
          if (v54 <= 0x35 && ((1 << v54) & 0x330F100000E008) != 0)
          {
            if ((v50 & 0x2000) != 0)
            {
LABEL_143:
              v18 = 25;
              goto LABEL_145;
            }
            if (v47 <= 0x33 && ((1 << v47) & 0xC400000000000) != 0 && v52 <= 0x19)
            {
              v18 = v45;
              if (((1 << v52) & 0x2100038) != 0)
                goto LABEL_143;
LABEL_145:
              if (*((_BYTE *)this + 78))
                goto LABEL_146;
              if (*((_BYTE *)this + 84) != 48)
                goto LABEL_330;
              if (*((_BYTE *)this + 104) != 18)
                goto LABEL_330;
              v61 = *((_QWORD *)this + 14);
              if ((v61 & 0xF) == 0)
                goto LABEL_330;
              v55 = 1;
              if ((v61 & 0x1C00) != 0 || (*((_QWORD *)this + 11) & 0x10000) == 0)
              {
LABEL_147:
                if (*((_BYTE *)this + 76))
                {
                  v25 = 0;
                  goto LABEL_149;
                }
                if ((*((_BYTE *)this + 96) & 1) != 0
                  && (*((_BYTE *)this + 120) & 1) != 0
                  && (*((_BYTE *)this + 113) & 0x1C) != 0)
                {
                  v25 = *((_BYTE *)this + 88) & 1;
                  if (!v55)
                    goto LABEL_163;
                }
                else
                {
                  v25 = 0;
                  if (!v55)
                  {
LABEL_163:
                    v56 = *((unsigned __int8 *)this + 84);
                    if (v56 == 48)
                    {
                      v57 = *((unsigned __int8 *)this + 104);
                      goto LABEL_165;
                    }
                    goto LABEL_176;
                  }
                }
                if (!*((_BYTE *)this + 82))
                {
                  v57 = *((unsigned __int8 *)this + 104);
                  if ((v57 == 31 || v57 == 19) && (*((_BYTE *)this + 113) & 0x1C) == 0)
                  {
                    v56 = *((unsigned __int8 *)this + 84);
                    if (v56 == 48)
                      goto LABEL_165;
                    if (v56 == 49)
                    {
                      v18 = 53;
                      goto LABEL_226;
                    }
                    goto LABEL_176;
                  }
                }
LABEL_149:
                v56 = *((unsigned __int8 *)this + 84);
                if (v56 == 48)
                {
                  v57 = *((unsigned __int8 *)this + 104);
                  if (v57 == 10)
                    v58 = v55;
                  else
                    v58 = 0;
                  if (v58 == 1)
                  {
                    if ((*((_BYTE *)this + 112) & 0xF) != 0
                      && (*((_BYTE *)this + 89) & 0x1C) != 0
                      && (!*((_BYTE *)this + 128) || (*((_BYTE *)this + 144) & 1) != 0))
                    {
                      v57 = 18;
                      *((_BYTE *)this + 104) = 18;
                      goto LABEL_207;
                    }
                    v57 = 10;
LABEL_183:
                    if ((*((_BYTE *)this + 88) & 0xF) != 0)
                    {
                      v60 = (v57 != 29) & *((_BYTE *)this + 121);
                      if (v57 == 34)
                        v60 = 1;
                      if (!*((_BYTE *)this + 76) && v60)
                        goto LABEL_188;
LABEL_207:
                      if (*((_BYTE *)this + 79) && *((unsigned __int8 *)this + 168) - 35 < 3
                        || (v57 == 25 || v57 == 11) && *((_BYTE *)this + 128) == 36)
                      {
                        goto LABEL_214;
                      }
                      v65 = *((unsigned __int8 *)this + 168);
                      if (v65 <= 0x21 && ((1 << v65) & 0x218000000) != 0)
                        goto LABEL_214;
                      if (v55)
                      {
                        if (v57 <= 0x19 && ((1 << v57) & 0x2040C00) != 0)
                        {
                          v78 = *((_QWORD *)this + 14);
                          if ((v78 & 0xF) != 0
                            && (v78 & 0x1C00) == 0
                            && (*((_QWORD *)this + 11) & 0x10000) != 0
                            && v65 <= 0x20
                            && ((1 << v65) & 0x105F01000) != 0)
                          {
                            goto LABEL_214;
                          }
                        }
                      }
                      if ((*((_BYTE *)this + 120) & 1) == 0
                        || (*(_DWORD *)(v8 + 4 * *((unsigned __int8 *)this + 83)) & 0x50) != 0x10)
                      {
                        goto LABEL_214;
                      }
                      v79 = *((_QWORD *)this + 14);
                      if ((v79 & 0x10000) != 0)
                      {
                        if (*((_BYTE *)this + 81))
                          goto LABEL_214;
                      }
                      else
                      {
                        if ((*((_WORD *)this + 44) & 0x1C80) != 0)
                          goto LABEL_214;
                        if (v57 <= 24)
                        {
                          switch(v57)
                          {
                            case 8:
                            case 11:
                              if ((v79 & 0x1C00) == 0 && *((_BYTE *)this + 128) == 32)
                                goto LABEL_308;
                              if (v57 == 11)
                                goto LABEL_344;
                              goto LABEL_214;
                            case 9:
                            case 10:
                            case 13:
                            case 14:
                            case 15:
                            case 16:
                              goto LABEL_214;
                            case 12:
                              goto LABEL_308;
                            case 17:
                              v87 = *((_QWORD *)this + 7);
                              if (v87
                                && (*(_BYTE *)(v87 + 73) & 0x1C) != 0
                                && (*((_BYTE *)this + 128) != 32 || (*((_BYTE *)this + 136) & 0x80) != 0))
                              {
                                goto LABEL_308;
                              }
                              goto LABEL_214;
                            default:
                              if (v57 == 3)
                                goto LABEL_344;
                              goto LABEL_214;
                          }
                        }
                        if (v57 != 25 && v57 != 28)
                          goto LABEL_214;
LABEL_344:
                        if (*((_BYTE *)this + 128) == 32)
                        {
                          if ((v79 & 0x400) != 0 || (*((_QWORD *)this + 17) & 0x80) == 0)
                            goto LABEL_214;
                        }
                        else if ((v79 & 0x400) != 0)
                        {
                          goto LABEL_214;
                        }
                      }
LABEL_308:
                      if ((v24 & 1) == 0)
                        goto LABEL_234;
                      goto LABEL_227;
                    }
                    if (v57 != 29)
                    {
                      if (v57 != 25 || *((_BYTE *)this + 76) || *((_BYTE *)this + 128) != 36)
                        goto LABEL_207;
LABEL_188:
                      if ((*(_DWORD *)(v8 + 4 * *((unsigned __int8 *)this + 83)) & 0x10) != 0)
                      {
                        v18 = 54;
                      }
                      else if (v55)
                      {
                        v18 = 49;
                      }
LABEL_226:
                      if ((v24 & 1) != 0)
                        goto LABEL_227;
                      if (v18 == 55)
                      {
LABEL_234:
                        if (a2->var9 != 55)
                          MTFEDuration::AdjustDurationForFlap((uint64_t)a2, (MTFEPhoneme *)v4);
                        v26 = 0;
                        LOBYTE(v18) = 55;
                        goto LABEL_285;
                      }
LABEL_284:
                      v26 = 0;
                      goto LABEL_285;
                    }
LABEL_166:
                    if (*((_BYTE *)this + 76))
                      goto LABEL_207;
                    goto LABEL_188;
                  }
LABEL_165:
                  if ((v57 | 8) == 0x29)
                    goto LABEL_166;
                  goto LABEL_183;
                }
LABEL_176:
                if (v56 != 41 || (*((_BYTE *)this + 89) & 4) != 0)
                  goto LABEL_214;
                v59 = *(unsigned __int8 *)(*((_QWORD *)this + 7) + 58);
                if ((v59 - 48) >= 2)
                {
                  if (v59 == 36)
                  {
                    if (!*((_BYTE *)this + 80) && !*((_BYTE *)this + 82))
                    {
                      LOBYTE(v18) = 36;
                      goto LABEL_283;
                    }
LABEL_214:
                    if (v18 != 11)
                      goto LABEL_226;
                    v66 = *((unsigned __int8 *)this + 168);
                    if (!*((_BYTE *)this + 168) || (v67 = *((unsigned __int8 *)this + 104), !*((_BYTE *)this + 104)))
                    {
                      v18 = 11;
                      goto LABEL_226;
                    }
                    if (v66 > 0x37)
                    {
LABEL_248:
                      LOBYTE(v18) = 11;
                      if (v67 > 0x1F || ((1 << v67) & 0x80000018) == 0)
                        goto LABEL_282;
                      goto LABEL_281;
                    }
                    if (((1 << v66) & 0x830F1000000000) != 0)
                    {
                      LOBYTE(v18) = 11;
                      if (v67 <= 0x35)
                      {
                        if (((1 << v67) & 0x30F1080000018) == 0)
                        {
                          if (((1 << v67) & 0x30300000000000) != 0)
                          {
                            if (v66 == 55)
                              LOBYTE(v18) = 11;
                            else
                              LOBYTE(v18) = 25;
                          }
                          goto LABEL_282;
                        }
                        goto LABEL_281;
                      }
LABEL_282:
                      *((_BYTE *)this + 84) = v18;
LABEL_283:
                      if ((v24 & 1) == 0)
                        goto LABEL_284;
LABEL_227:
                      v68 = *((_QWORD *)this + 7);
                      if (!v68)
                      {
LABEL_245:
                        MTFETrackingVisitor::DelPhoneme((uint64_t)this);
                        *((_DWORD *)this + 18) += a2->var11;
                        (*((void (**)(MTFEPhoneme *))a2->var0 + 2))(a2);
                        goto LABEL_293;
                      }
                      *(_WORD *)(v68 + 60) += a2->var11;
                      if (*((_BYTE *)this + 78))
                      {
                        v69 = *(_QWORD *)(v68 + 80);
                        if (!v69)
                        {
                          v69 = operator new();
                          *(_DWORD *)v69 = 0;
                          *(_OWORD *)(v69 + 8) = 0u;
                          *(_OWORD *)(v69 + 24) = 0u;
                          *(_OWORD *)(v69 + 40) = 0u;
                          *(_OWORD *)(v69 + 56) = 0u;
                          *(_OWORD *)(v69 + 72) = 0u;
                          v68 = *((_QWORD *)this + 7);
                          *(_QWORD *)(v68 + 80) = v69;
                        }
                        v70 = (int)*(float *)(v68 + 64);
                        var17 = a2->var17;
                        if (var17)
                        {
                          v72 = *((_OWORD *)var17 + 1);
                          v88[0] = *(_OWORD *)var17;
                          v88[1] = v72;
                          v73 = *((_OWORD *)var17 + 2);
                          v74 = *((_OWORD *)var17 + 3);
                          v75 = *((_OWORD *)var17 + 4);
                          *(_QWORD *)&v88[5] = *((_QWORD *)var17 + 10);
                          v88[3] = v74;
                          v88[4] = v75;
                          v88[2] = v73;
                        }
                        else
                        {
                          LODWORD(v88[0]) = 0;
                          memset((char *)v88 + 8, 0, 80);
                        }
                        MTFEPitchTargets::CombineWithTargets((MTFEPitchTargets *)v69, v70, (const MTFEPitchTargets *)v88, (int)a2->var13);
                      }
                      if (*((_BYTE *)this + 77) || *((_BYTE *)this + 78))
                      {
                        v76 = *((_QWORD *)this + 7);
                        var13 = a2->var13 + *(float *)(v76 + 64);
                      }
                      else
                      {
                        var13 = a2->var13;
                        if (var13 >= 0.9999 && var13 <= 1.0001)
                        {
LABEL_243:
                          if ((*((_BYTE *)this + 91) & 0x10) != 0)
                            LODWORD(a2->var6[1].var3) |= 0x10000000u;
                          goto LABEL_245;
                        }
                        v76 = *((_QWORD *)this + 7);
                      }
                      *(float *)(v76 + 64) = var13;
                      goto LABEL_243;
                    }
                    if (((1 << v66) & 0xE000) != 0)
                    {
                      if ((*((_BYTE *)this + 114) & 1) != 0)
                      {
                        LOBYTE(v18) = 11;
                        if (v67 > 0x35)
                          goto LABEL_282;
                        if (((1 << v67) & 0x330F1282182078) != 0)
                          goto LABEL_281;
                        if (((1 << v67) & 0x400400000000) == 0)
                          goto LABEL_282;
                        if ((*((_BYTE *)this + 146) & 0x20) != 0 || *((_BYTE *)this + 128) == 20)
                          goto LABEL_281;
                        goto LABEL_275;
                      }
                    }
                    else if (((1 << v66) & 0x80000018) == 0)
                    {
                      goto LABEL_248;
                    }
                    if (v67 != 32 || (*((_BYTE *)this + 115) & 0x10) != 0)
                    {
LABEL_281:
                      LOBYTE(v18) = 25;
                      goto LABEL_282;
                    }
LABEL_275:
                    LOBYTE(v18) = 11;
                    goto LABEL_282;
                  }
                  if (v59 != 54)
                    goto LABEL_214;
                }
                if (!*((_BYTE *)this + 76))
                {
                  LOBYTE(v18) = 57;
                  goto LABEL_283;
                }
                goto LABEL_214;
              }
              if (!*((_BYTE *)this + 168))
              {
LABEL_330:
                v55 = 1;
                goto LABEL_147;
              }
              v62 = *((unsigned __int8 *)this + 128);
              if ((_DWORD)v62 == 31)
              {
                v63 = 25;
                v64 = 25;
              }
              else
              {
                if ((*((_QWORD *)this + 18) & 0x12000) != 0)
                {
                  v64 = 25;
                }
                else
                {
                  v64 = 18;
                  if (v62 > 0x32)
                  {
LABEL_329:
                    *((_QWORD *)this + 15) = *(unsigned int *)(v8 + 4 * v64);
                    goto LABEL_330;
                  }
                  if (((1 << v62) & 0x4D0C940000000) == 0)
                  {
                    if (v62 != 34)
                      goto LABEL_329;
                    v64 = 25;
                    v63 = 25;
                    if ((*(_DWORD *)(v8 + 4 * *((unsigned __int8 *)this + 152)) & 0x200000) == 0
                      && *((_BYTE *)this + 152) != 31)
                    {
                      v64 = 18;
                      goto LABEL_329;
                    }
                    goto LABEL_328;
                  }
                  v64 = 11;
                }
                v63 = v64;
              }
LABEL_328:
              *((_BYTE *)this + 104) = v63;
              goto LABEL_329;
            }
          }
LABEL_144:
          v18 = v45;
          goto LABEL_145;
        }
        LODWORD(v33) = *((unsigned __int8 *)this + 104);
      }
      v37 = *((_QWORD *)this + 15);
      v39 = *((unsigned __int8 *)this + 128);
      v40 = *((_QWORD *)this + 18);
      v43 = *((unsigned __int8 *)this + 152);
      goto LABEL_95;
    }
    if (v18 == 36)
    {
      v24 = 0;
      if (v17 != 25)
        goto LABEL_33;
      if ((v16 & 0x400) == 0)
        goto LABEL_33;
      v24 = 0;
      if (v15 == 47 || v15 == 51)
        goto LABEL_33;
      if (v15 != 49 || (v14 & 1) == 0)
      {
        *(_BYTE *)(v5 + 58) = 29;
        v24 = 1;
        goto LABEL_33;
      }
    }
LABEL_32:
    v24 = 0;
    goto LABEL_33;
  }
  if (v17 != 42)
    goto LABEL_32;
  v24 = 0;
  if (v18 > 0x32 || ((1 << v18) & 0x5400000000000) == 0)
    goto LABEL_33;
  if ((v19 & 0x70000000) != 0)
    goto LABEL_32;
  if (v20 > 30)
  {
    if ((v20 - 32) < 2)
    {
      v25 = 0;
      goto LABEL_50;
    }
    if (v20 == 31)
    {
      v25 = 0;
      if (v18 == 48)
        goto LABEL_60;
      goto LABEL_50;
    }
LABEL_59:
    v25 = 0;
    if ((v21 & 1) == 0)
      goto LABEL_60;
LABEL_50:
    v26 = 1;
    goto LABEL_285;
  }
  if (v20 == 10 || v20 == 18)
  {
    if (v18 == 46)
    {
      v25 = 0;
      v26 = 1;
      LOBYTE(v18) = 46;
      goto LABEL_285;
    }
    v24 = 0;
    v26 = 1;
    if ((_DWORD)v22 != 32 || (v19 & 0x1400) != 0)
    {
      v25 = 0;
      goto LABEL_285;
    }
    goto LABEL_33;
  }
  if (v20 != 30)
    goto LABEL_59;
  v25 = 0;
  if (v18 != 50)
  {
LABEL_60:
    v24 = 0;
    goto LABEL_33;
  }
  v26 = 1;
  LOBYTE(v18) = 50;
LABEL_285:
  *((_QWORD *)this + 7) = a2;
  a2->var9 = v18;
  a2->var10 = v26;
  a2->var11 += *((_WORD *)this + 36);
  if (v26)
    MTFEDuration::AdjustDurationForAspiration((uint64_t)a2, (MTFEPhoneme *)v4);
  if (v25)
  {
    v80 = operator new();
    MTFEPhoneme::MTFEPhoneme((MTFEPhoneme *)v80, 0x38u);
    *((_QWORD *)this + 7) = v80;
    *(_WORD *)(v80 + 60) = a2->var11;
    *(_WORD *)(v80 + 56) = a2->var8 + 1;
    if (*((_BYTE *)this + 77) || *((_BYTE *)this + 78))
      *(_DWORD *)(v80 + 64) = 1092616192;
    MTFESpeechElement::AddChildAfter(a2->var5, (MTFESpeechElement *)v80, (MTFESpeechElement *)a2);
    ++*((_WORD *)this + 12);
  }
  *((_BYTE *)this + 83) = *(_BYTE *)(*((_QWORD *)this + 7) + 58);
  *((_DWORD *)this + 18) += a2->var11;
LABEL_293:
  *((_BYTE *)this + 80) = 0;
  return MTFETrackingVisitor::PostPhoneme((uint64_t)this, a2);
}

void sub_1D2277CCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

BOOL MTFEConnectedSpeech::PrecedingQuote(MTFEConnectedSpeech *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *var6;
  _BOOL8 v3;
  uint64_t v4;
  _QWORD v6[8];

  while (1)
  {
    var6 = a2->var6;
    if (!var6)
      break;
    a2 = a2->var6;
    if (BYTE2(var6[1].var0))
      return 0;
  }
  MTFESpeechPedigree::MTFESpeechPedigree((MTFESpeechPedigree *)v6, a2);
  v4 = *(_QWORD *)(v6[2] + 40);
  v3 = v4 && *(_WORD *)(v4 + 176) && (*(_QWORD *)(v4 + 184) & 3) == 1;
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v6);
  return v3;
}

void MTFEConnectedSpeech::~MTFEConnectedSpeech(MTFEConnectedSpeech *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

MTFESpeechElement *MTFECalcRampSteps::VisitSentence(MTFECalcRampSteps *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *result;
  uint64_t v4;

  *((_DWORD *)this + 6) = 0;
  result = MTFESpeechElement::VisitChildren(a2, this);
  v4 = *((_QWORD *)this + 2);
  *(_WORD *)(v4 + 30) = 0;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(v4 + 56);
  return result;
}

MTFESpeechElement *MTFECalcRampSteps::VisitIntonationalPhrase(MTFECalcRampSteps *this, MTFESpeechElement *a2)
{
  *((_BYTE *)this + 8) = BYTE6(a2[2].var6);
  *((_DWORD *)this + 7) = 1065353216;
  return MTFESpeechElement::VisitChildren(a2, this);
}

float MTFECalcRampSteps::VisitPhoneme(MTFECalcRampSteps *this, MTFEPhoneme *a2)
{
  unsigned int var15;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  var15 = a2->var15;
  if ((var15 & 0x1F00008) != 0)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = (float)((float)(*(__int16 *)(v3 + 26) - *(__int16 *)(v3 + 28)) / *((float *)this + 7));
    v5 = vcvtd_n_s64_f64(v4, 0x10uLL);
    v6 = *((int *)this + 6);
    v7 = v3 + 8 * v6;
    *(_QWORD *)(v7 + 56) = v5;
    v8 = (uint64_t *)(v7 + 56);
    if ((var15 & 0x1F00000) == 0
      && *((unsigned __int8 *)this + 8) - 68 <= 3
      && *((_BYTE *)this + 8) != 70)
    {
      *v8 = v5 >> 1;
    }
    if ((int)v6 <= 15)
      *((_DWORD *)this + 6) = v6 + 1;
    *((_DWORD *)this + 7) = 1065353216;
  }
  else
  {
    *(float *)&v4 = a2->var13 + *((float *)this + 7);
    *((_DWORD *)this + 7) = LODWORD(v4);
  }
  return *(float *)&v4;
}

void MTFECalcRampSteps::~MTFECalcRampSteps(MTFECalcRampSteps *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void MTBEPersistentParam::MTBEPersistentParam(MTBEPersistentParam *this)
{
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)&this->var0 = _D0;
  *(_QWORD *)&this->var4 = 0;
  this->var6 = 0;
  *(_DWORD *)&this->var7 = 0;
  *(_OWORD *)&this->var9 = 0u;
  *(_OWORD *)&this->var11 = 0u;
  pthread_mutex_init(&this->var14, 0);
  pthread_cond_init(&this->var15, 0);
  this->var16 = 0;
  this->var13 = 0;
}

void MTBEPersistentParam::MTBEPersistentParam(MTBEPersistentParam *this, const MTBEPersistentParam *a2)
{
  __int128 v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  MTBEPersistentParam::MTBEPersistentParam(this);
  v3 = *(_OWORD *)&a2->var2[2];
  *v4 = *(_OWORD *)&a2->var0;
  v4[1] = v3;
  v5 = *(_OWORD *)&a2->var5;
  v6 = *(_OWORD *)&a2->var7;
  v7 = *(_OWORD *)&a2->var12;
  v4[4] = *(_OWORD *)&a2->var10;
  v4[5] = v7;
  v4[2] = v5;
  v4[3] = v6;
}

{
  __int128 v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  MTBEPersistentParam::MTBEPersistentParam(this);
  v3 = *(_OWORD *)&a2->var2[2];
  *v4 = *(_OWORD *)&a2->var0;
  v4[1] = v3;
  v5 = *(_OWORD *)&a2->var5;
  v6 = *(_OWORD *)&a2->var7;
  v7 = *(_OWORD *)&a2->var12;
  v4[4] = *(_OWORD *)&a2->var10;
  v4[5] = v7;
  v4[2] = v5;
  v4[3] = v6;
}

__n128 MTBEPersistentParam::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

void MTBEPersistentParam::~MTBEPersistentParam(MTBEPersistentParam *this)
{
  pthread_cond_destroy(&this->var15);
  pthread_mutex_destroy(&this->var14);
}

uint64_t MTBEParam::MTBEParam(uint64_t a1, int a2, __int16 *a3, unsigned int *a4)
{
  int v7;
  char v8;

  v7 = ((unint64_t)MTBEDebugFlags::sMTXDebug >> 6) & 1 ^ a2;
  *(_BYTE *)(a1 + 1303) = ((MTBEDebugFlags::sMTXDebug & 0x40) != 0) ^ a2;
  if (v7)
    v8 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBUsePostDurMod);
  else
    v8 = 0;
  *(_BYTE *)(a1 + 1302) = v8;
  MTBEParam::SetVoice(a1, a3, a4);
  return a1;
}

uint64_t MTBEParam::SetVoice(uint64_t a1, __int16 *a2, unsigned int *a3)
{
  __int16 v6;
  int v7;
  unint64_t v8;
  unsigned int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t result;
  uint64_t v15;
  __int16 v16;
  __int16 v17;

  *(_WORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 50) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v6 = MTBEParam::HzToPitch((MTBEParam *)a1, *a2);
  *(_WORD *)(a1 + 194) = v6;
  v7 = a2[46];
  *(_WORD *)(a1 + 210) = a2[46];
  if (v7 != 1)
  {
    LOWORD(v8) = v6;
    if (v7 != 2)
      goto LABEL_11;
    LOBYTE(v7) = 0;
    *(_BYTE *)(a1 + 50) = 1;
    *(_WORD *)(a1 + 210) = 1;
  }
  v8 = ((((unint64_t)(unsigned __int16)a2[28] << 24) - 525926400) / 0xC + 0x8000) >> 16;
  if (a2[28] < 32)
    LOWORD(v8) = 0;
  *(_WORD *)(a1 + 194) = v8;
  *(_WORD *)(a1 + 192) = v6 - v8;
  *(_QWORD *)(a1 + 224) = a3;
  if (a3)
  {
    v9 = *a3++;
    *(_QWORD *)(a1 + 216) = bswap32(v9);
    if ((v7 & 1) == 0)
    {
      *(_QWORD *)(a1 + 240) = a3;
      a3 += bswap32(*a3) + 1;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 216) = 0;
  }
  *(_QWORD *)(a1 + 232) = a3;
LABEL_11:
  if (a2[174] < 2)
  {
    v10 = a2[45];
    if (!v10)
      v10 = 120;
    *(_WORD *)(a1 + 20) = v10;
  }
  else
  {
    *(_WORD *)(a1 + 48) = 257;
    MTBEParam::SetTempo(a1, a2[45]);
    LOWORD(v8) = *(_WORD *)(a1 + 194);
  }
  *(_WORD *)(a1 + 190) = v8;
  *(_WORD *)(a1 + 24) = a2[44] >> 1;
  v11 = 1374389535 * ((unsigned __int16)a2[1] << 16);
  *(_QWORD *)(a1 + 200) = (int)((v11 >> 37) + ((unint64_t)v11 >> 63));
  *(_WORD *)(a1 + 208) = 256;
  v12 = 1374389535 * (a2[27] << 13);
  LODWORD(v12) = (52428 * ((v12 >> 37) + ((unint64_t)v12 >> 63))) >> 16;
  *(_WORD *)(a1 + 16) = v12;
  *(_WORD *)(a1 + 18) = v12;
  MTBEParam::InitRateParams((MTBEParam *)a1);
  v13 = a2[38];
  *(_WORD *)(a1 + 26) = v13 + 21;
  *(_WORD *)(a1 + 28) = 21 - v13;
  result = MTBEParam::InvDFT(a1, (uint64_t)a2);
  if ((unsigned __int16)a2[46] - 1 <= 1)
  {
    v15 = a2[29];
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = (v15 << 13) / 100;
  }
  if (*(_BYTE *)(a1 + 48) || *(_BYTE *)(a1 + 49) || *(_BYTE *)(a1 + 50))
  {
    *(_BYTE *)(a1 + 1303) = 0;
LABEL_22:
    *(_BYTE *)(a1 + 1302) = 0;
    goto LABEL_23;
  }
  if (!*(_BYTE *)(a1 + 1303))
    goto LABEL_22;
  if (*(_BYTE *)(a1 + 1302))
  {
    v17 = a2[3];
    v16 = 180;
    goto LABEL_24;
  }
LABEL_23:
  v16 = a2[3];
  v17 = v16;
LABEL_24:
  *(_WORD *)(a1 + 1300) = v16;
  *(_WORD *)(a1 + 1298) = v17;
  return result;
}

uint64_t MTBEParam::ResetVoice(uint64_t a1, __int16 *a2)
{
  return MTBEParam::SetVoice(a1, a2, *(unsigned int **)(a1 + 224));
}

uint64_t MTBEParam::HzToPitch(MTBEParam *this, unsigned int a2)
{
  int v2;
  int v3;
  double v4;
  double v5;
  double v6;
  int v7;
  float v8;

  if ((int)a2 >= 50)
  {
    if (a2 <= 0x11AC)
    {
      if (a2 > 0x63)
      {
        if (a2 > 0xC7)
        {
          if (a2 > 0x18F)
          {
            v5 = (double)(int)a2;
            v6 = (double)(int)a2 / 3200.0;
            if (a2 <= 0xC7F)
              v7 = 1280;
            else
              v7 = 1536;
            if (a2 <= 0xC7F)
              v6 = (double)(int)a2 / 1600.0;
            if (a2 <= 0x63F)
            {
              v7 = 1024;
              v6 = v5 / 800.0;
            }
            if (a2 <= 0x31F)
              v3 = 768;
            else
              v3 = v7;
            v4 = v5 / 400.0;
            if (a2 > 0x31F)
              v4 = v6;
          }
          else
          {
            v4 = (double)(int)a2 / 200.0;
            v3 = 512;
          }
        }
        else
        {
          v4 = (double)(int)a2 / 100.0;
          v3 = 256;
        }
      }
      else
      {
        v3 = 0;
        v4 = (double)(int)a2 / 50.0;
      }
      v8 = v4;
      v2 = v3 + (int)(float)((float)(logf(v8) * 369.33) + 0.5);
    }
    else
    {
      LOWORD(v2) = 1663;
    }
  }
  else
  {
    LOWORD(v2) = 0;
  }
  return (__int16)v2;
}

uint64_t MTBEParam::MidiToPitch(MTBEParam *this, uint64_t a2)
{
  unint64_t v2;

  if (a2 >= 8025)
    v2 = (unint64_t)(((a2 << 16) - 525926400) / 12 + 0x8000) >> 16;
  else
    LOWORD(v2) = 0;
  return (__int16)v2;
}

_QWORD *MTBEParam::InitSampleParams(_QWORD *this, unsigned int *a2, int a3)
{
  unsigned int v3;

  this[28] = a2;
  if (a2)
  {
    v3 = *a2++;
    this[27] = bswap32(v3);
    if (a3)
    {
      this[30] = a2;
      a2 += bswap32(*a2) + 1;
    }
  }
  else
  {
    this[27] = 0;
  }
  this[29] = a2;
  return this;
}

uint64_t MTBEParam::SetTempo(uint64_t this, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;

  v2 = 0;
  if (a2 >= 240)
    v3 = 240;
  else
    v3 = a2;
  if (v3 <= 20)
    LOWORD(v3) = 20;
  *(_WORD *)(this + 20) = v3;
  v4 = 60000 / (20 * a2);
  *(_WORD *)(this + 248) = v4;
  v5 = (__int16)v4 >> 1;
  do
  {
    v6 = this + 2 * v2;
    *(_WORD *)(v6 + 250) = v4;
    *(_WORD *)(v6 + 252) = v5 + v4;
    LOWORD(v5) = v4;
    v4 *= 2;
    v7 = v2 + 1;
    v2 += 2;
  }
  while (v7 < 0xB);
  return this;
}

float MTBEParam::InitRateParams(MTBEParam *this)
{
  uint64_t v1;
  int v2;
  float v3;
  float v4;
  float result;

  v1 = 1300;
  if (!*((_BYTE *)this + 1302))
    v1 = 1298;
  v2 = *(__int16 *)((char *)this + v1);
  if (v2 <= 40)
    LOWORD(v2) = 40;
  if (!*((_BYTE *)this + 1302))
    *((_WORD *)this + 649) = v2;
  *((_WORD *)this + 650) = v2;
  v3 = 180.0 / (float)(__int16)v2;
  v4 = (double)((unsigned __int16)v2 - 180) * 0.6;
  *((float *)this + 10) = v3;
  *((float *)this + 11) = 180.0 / (float)(v4 + 180.0);
  result = v3 * (float)*((__int16 *)this + 12);
  *((_WORD *)this + 11) = (int)result;
  return result;
}

uint64_t MTBEParam::InitPitchParams(uint64_t result, uint64_t a2)
{
  __int16 v2;

  v2 = *(_WORD *)(a2 + 76);
  *(_WORD *)(result + 26) = v2 + 21;
  *(_WORD *)(result + 28) = 21 - v2;
  return result;
}

uint64_t MTBEParam::InvDFT(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t i;
  int v13;
  _WORD *v14;
  __int16 v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int32x4_t v20;

  v2 = 0;
  v3 = 1374389535 * (*(__int16 *)(a2 + 10) << 15);
  *(_OWORD *)(result + 274) = 0u;
  *(_OWORD *)(result + 290) = 0u;
  *(_OWORD *)(result + 306) = 0u;
  *(_OWORD *)(result + 322) = 0u;
  v4 = (int)((v3 >> 63) + (SHIDWORD(v3) >> 5));
  *(_OWORD *)(result + 338) = 0u;
  *(_OWORD *)(result + 354) = 0u;
  *(_OWORD *)(result + 370) = 0u;
  *(_OWORD *)(result + 386) = 0u;
  *(_OWORD *)(result + 402) = 0u;
  *(_OWORD *)(result + 418) = 0u;
  *(_OWORD *)(result + 434) = 0u;
  *(_OWORD *)(result + 450) = 0u;
  *(_OWORD *)(result + 466) = 0u;
  *(_OWORD *)(result + 482) = 0u;
  *(_OWORD *)(result + 498) = 0u;
  *(_OWORD *)(result + 514) = 0u;
  *(_OWORD *)(result + 530) = 0u;
  *(_OWORD *)(result + 546) = 0u;
  *(_OWORD *)(result + 562) = 0u;
  *(_OWORD *)(result + 578) = 0u;
  *(_OWORD *)(result + 594) = 0u;
  *(_OWORD *)(result + 610) = 0u;
  *(_OWORD *)(result + 626) = 0u;
  *(_OWORD *)(result + 642) = 0u;
  *(_OWORD *)(result + 658) = 0u;
  *(_OWORD *)(result + 674) = 0u;
  *(_OWORD *)(result + 690) = 0u;
  *(_OWORD *)(result + 706) = 0u;
  *(_OWORD *)(result + 722) = 0u;
  *(_OWORD *)(result + 738) = 0u;
  *(_OWORD *)(result + 754) = 0u;
  *(_OWORD *)(result + 770) = 0u;
  *(_QWORD *)result = v4;
  do
  {
    *(_OWORD *)(result + 786 + v2) = 0uLL;
    v2 += 16;
  }
  while (v2 != 512);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = 0;
    v9 = a2 + 2 * v5;
    v10 = (unint64_t)(*(__int16 *)(v9 + 94) * (uint64_t)(int)v4) >> 16;
    v11 = (unint64_t)(*(__int16 *)(v9 + 190) * (uint64_t)(int)v4) >> 16;
    for (i = 274; i != 786; i += 2)
    {
      v13 = MTBEParam::sSineWave15[v8];
      v14 = (_WORD *)(result + i);
      v15 = *(_WORD *)(result + i) + ((v13 * v10) >> 16);
      *v14 = v15;
      v16 = *(unsigned __int16 *)(result + i + 512) + ((v13 * v11) >> 16);
      v14[256] = v16;
      if (v15 >= 0)
        v17 = v15;
      else
        v17 = -v15;
      if (v7 <= v17)
        v7 = v17;
      if ((v16 & 0x8000u) == 0)
        v18 = (__int16)v16;
      else
        v18 = -(__int16)v16;
      if ((uint64_t)v6 <= v18)
        v6 = v18;
      v8 = (v8 + v5);
    }
    ++v5;
  }
  while (v5 != 48);
  if (v6)
  {
    v19 = 0;
    v20 = vdupq_n_s32((v7 << 16) / v6);
    do
    {
      *(int16x8_t *)(result + 786 + v19) = vuzp2q_s16((int16x8_t)vmulq_s32(v20, vmovl_s16(*(int16x4_t *)(result + 786 + v19))), (int16x8_t)vmulq_s32(v20, vmovl_high_s16(*(int16x8_t *)(result + 786 + v19))));
      v19 += 16;
    }
    while (v19 != 512);
  }
  return result;
}

uint64_t MTBEParam::StartNewPitchClause(uint64_t result)
{
  *(_DWORD *)(result + 184) = -1;
  *(_WORD *)(result + 188) = 0;
  return result;
}

uint64_t MTBEParam::PitchToHz(MTBEParam *this, __int16 a2)
{
  return (int)((double)(3276800 << SHIBYTE(a2) >> 16) * exp2((double)a2 * 0.00390625)
                           + 0.5);
}

_WORD *MTBEParam::SetVolume(_WORD *this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = 0x20000;
  if (a2 < 0x20000)
    v2 = a2;
  v3 = (v2 & (unint64_t)~(v2 >> 63)) >> 8;
  this[104] = v3;
  this[8] = (v3 * (__int16)this[9]) >> 8;
  return this;
}

uint64_t MTBEParam::GetVolume(MTBEParam *this)
{
  return (uint64_t)*((__int16 *)this + 104) << 8;
}

uint64_t MTBEParam::SetModulation(uint64_t this, uint64_t a2)
{
  uint64_t v2;

  v2 = 13107200;
  if (a2 < 13107200)
    v2 = a2;
  *(_QWORD *)(this + 200) = (42949673 * (v2 & (unint64_t)~(v2 >> 63))) >> 32;
  return this;
}

uint64_t MTBEParam::GetModulation(MTBEParam *this)
{
  return 100 * *((_QWORD *)this + 25);
}

uint64_t MTBEParam::SetPitch(uint64_t this, int a2)
{
  int v2;
  int v3;

  if (a2 >= 1000)
    v2 = 1000;
  else
    v2 = a2;
  v3 = v2 & ~(v2 >> 31);
  *(_WORD *)(this + 194) = v3;
  *(_WORD *)(this + 190) = v3;
  return this;
}

uint64_t MTBEParam::ResetPitchParams(uint64_t a1, __int16 *a2)
{
  uint64_t result;
  uint64_t v5;

  result = MTBEParam::HzToPitch((MTBEParam *)a1, *a2);
  *(_WORD *)(a1 + 194) = result;
  *(_WORD *)(a1 + 190) = result;
  v5 = 1374389535 * ((unsigned __int16)a2[1] << 16);
  *(_QWORD *)(a1 + 200) = (int)((v5 >> 37) + ((unint64_t)v5 >> 63));
  return result;
}

uint64_t MTBEParam::GetPitch(MTBEParam *this)
{
  return *((__int16 *)this + 97);
}

float MTBEParam::GetPitchFloorRange(MTBEParam *this, float *a2, float *a3)
{
  float v5;
  double v6;
  double v7;
  float v8;
  float result;

  v5 = (float)*((uint64_t *)this + 25) * 0.000015259;
  v6 = (double)(3276800 << HIBYTE(*((_WORD *)this + 95)) >> 16);
  v7 = (double)(int)(v6 * exp2((double)*((_WORD *)this + 95) * 0.00390625) + 0.5);
  v8 = pow(1.05946309, v5 * 3.60870374) * v7;
  result = pow(1.05946309, v5 * -3.60870374) * v7;
  *a3 = v8 - result;
  *a2 = result;
  return result;
}

float MTBEParam::SetRate(MTBEParam *this, int a2)
{
  __int16 v2;
  __int16 v3;

  if (a2 <= 40)
    v2 = 40;
  else
    v2 = a2;
  if (*((_BYTE *)this + 1302))
    v3 = 180;
  else
    v3 = v2;
  *((_WORD *)this + 650) = v3;
  *((_WORD *)this + 649) = v2;
  return MTBEParam::InitRateParams(this);
}

uint64_t MTBEParam::GetRate(MTBEParam *this)
{
  return *((__int16 *)this + 649);
}

uint64_t MTBEParam::GetDurModFakeRate(MTBEParam *this)
{
  return *((__int16 *)this + 650);
}

uint64_t MTBEParam::ResetRateParams(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;

  v2 = *(_WORD *)(a2 + 6);
  if (*(_BYTE *)(result + 1302))
    v3 = 180;
  else
    v3 = *(_WORD *)(a2 + 6);
  *(_WORD *)(result + 1300) = v3;
  *(_WORD *)(result + 1298) = v2;
  if (*(_BYTE *)(result + 48))
    return MTBEParam::SetTempo(result, *(__int16 *)(a2 + 90));
  return result;
}

float MTBEParam::SetUsePostDurMod(MTBEParam *this, int a2)
{
  int v2;
  __int16 v3;

  *((_BYTE *)this + 1302) = a2;
  v2 = *((__int16 *)this + 649);
  if (v2 <= 40)
    LOWORD(v2) = 40;
  if (a2)
    v3 = 180;
  else
    v3 = v2;
  *((_WORD *)this + 650) = v3;
  *((_WORD *)this + 649) = v2;
  return MTBEParam::InitRateParams(this);
}

uint64_t MTBEParam::GetUsePostDurMod(MTBEParam *this)
{
  return *((unsigned __int8 *)this + 1302);
}

float MT3FInsertPlosiveRelease::VisitSentence(MT3FInsertPlosiveRelease *this, MTFESpeechElement *a2)
{
  float result;

  *((_DWORD *)this + 8) = 0;
  MTFESpeechElement::VisitChildren(a2, this);
  result = *((float *)this + 8) + *((float *)&a2[1].var0 + 1);
  *((float *)&a2[1].var0 + 1) = result;
  return result;
}

MTFESpeechElement *MT3FInsertPlosiveRelease::VisitWord(MT3FInsertPlosiveRelease *this, MTFESpeechElement *a2)
{
  *((_QWORD *)this + 5) = a2;
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MT3FInsertPlosiveRelease::VisitPhoneme(MT3FInsertPlosiveRelease *this, MTFEPhoneme *a2)
{
  MTFESpeechElement *result;
  MTFESpeechElement *var6;
  uint64_t v6;
  uint64_t v7;
  float v8;
  MTFESpeechElement *var7;

  result = (MTFESpeechElement *)MTFETrackingVisitor::VisitPhoneme(this, a2);
  var6 = a2->var6;
  if (!var6)
    var6 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  if (!BYTE2(var6[1].var0))
  {
    v6 = MEMORY[0x1E0DA8EC8];
    if ((*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * a2->var9) & 0x800000) != 0)
    {
      v7 = operator new();
      MTFEPhoneme::MTFEPhoneme((MTFEPhoneme *)v7, 0xBu);
      *(_DWORD *)(v7 + 72) = a2->var15 | 0x4000;
      *(_WORD *)(v7 + 56) = a2->var8 + 1;
      *(_WORD *)(v7 + 60) = a2->var11;
      *(_DWORD *)(v7 + 64) = 1084227584;
      result = MTFESpeechElement::AddChildAfter(a2->var5, (MTFESpeechElement *)v7, (MTFESpeechElement *)a2);
      ++*((_WORD *)this + 12);
      v8 = *(float *)(v7 + 64);
      *((float *)this + 8) = v8 + *((float *)this + 8);
      *(_WORD *)(*((_QWORD *)this + 5) + 176) += (int)v8;
      var7 = a2->var7;
      if (!var7)
        var7 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
      if ((*(_DWORD *)(v6 + 4 * BYTE2(var7[1].var0)) & 0x200000) != 0 || (a2->var9 & 0xFE) == 0x30)
        *(_BYTE *)(v7 + 58) = 25;
    }
  }
  return result;
}

void sub_1D2278AF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

void MT3FInsertPlosiveRelease::~MT3FInsertPlosiveRelease(MT3FInsertPlosiveRelease *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void MTFEDuration::MTFEDuration(uint64_t a1, MTFEDuration *this)
{
  int UsePostDurMod;
  MTBEParam *v4;
  int DurModFakeRate;

  *(_QWORD *)a1 = &off_1E9367198;
  *(_QWORD *)(a1 + 8) = this;
  UsePostDurMod = MTBEParam::GetUsePostDurMod(this);
  v4 = *(MTBEParam **)(a1 + 8);
  if (UsePostDurMod)
    DurModFakeRate = MTBEParam::GetDurModFakeRate(v4);
  else
    DurModFakeRate = MTBEParam::GetRate(v4);
  *(float *)(a1 + 48) = (float)DurModFakeRate;
}

void sub_1D2278B98(_Unwind_Exception *a1)
{
  MTFESpeechVisitor *v1;

  MTFESpeechVisitor::~MTFESpeechVisitor(v1);
  _Unwind_Resume(a1);
}

MTFESpeechElement *MTFEDuration::VisitIntonationalPhrase(MTFEDuration *this, MTFESpeechElement *a2)
{
  BOOL v4;
  float v5;

  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
  {
    puts("MTFEDuration::VisitIntonationalPhrase()");
    v4 = (MTBEDebugFlags::sMTXDebug & 0x10) == 0;
  }
  else
  {
    v4 = 1;
  }
  *((_QWORD *)this + 2) = a2;
  v5 = fminf((float)(int)floorf(logf((float)SWORD1(a2[2].var7)) * 2.1276) + 1.0, 5.0);
  *((float *)this + 17) = v5;
  if (!v4)
    printf("%s = %g\n", "fNumWrdsInIntonPhrase", v5);
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFEDuration::VisitIntermediatePhrase(MTFEDuration *this, MTFESpeechElement *a2)
{
  BOOL v4;
  float v5;

  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
  {
    puts("MTFEDuration::VisitIntermediatePhrase()");
    v4 = (MTBEDebugFlags::sMTXDebug & 0x10) == 0;
  }
  else
  {
    v4 = 1;
  }
  *((_QWORD *)this + 3) = a2;
  v5 = fminf((float)(int)floorf(logf((float)SWORD1(a2[1].var4)) * 2.1276) + 1.0, 5.0);
  *((float *)this + 16) = v5;
  if (!v4)
    printf("%s = %g\n", "fNumWrdsInInterPhrase", v5);
  *((_BYTE *)this + 82) = 0;
  *((_DWORD *)this + 21) = -1;
  return MTFESpeechElement::VisitChildren(a2, this);
}

void MTFEDuration::VisitWord(MTFEDuration *this, MTFESpeechElement *a2)
{
  signed __int16 v4;
  MTBEParam *v5;

  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
    puts("MTFEDuration::VisitWord()");
  v4 = *(_WORD *)&a2[3].var2;
  if (v4)
  {
    v5 = (MTBEParam *)*((_QWORD *)this + 1);
    if (*((_BYTE *)v5 + 48))
      MTBEParam::SetTempo((uint64_t)v5, v4);
    else
      MTBEParam::SetRate(v5, v4);
    *((float *)this + 12) = (float)*(__int16 *)&a2[3].var2;
  }
  if (((uint64_t)a2[1].var0 & 1) == 0)
  {
    *((_QWORD *)this + 4) = a2;
    MTFESpeechElement::VisitChildren(a2, this);
  }
}

void MTFEDuration::VisitSyllable(float32x2_t *this, MTFESpeechElement *a2)
{
  int var0_low;
  float32x2_t v5;
  int v6;
  float v7;
  uint64_t (**v8)(MTFESpeechVisitor *__hidden, MTFESpeechElement *);
  int32x2_t v9;

  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
    puts("MTFEDuration::VisitSyllable()");
  this[5] = (float32x2_t)a2;
  var0_low = SLOWORD(a2[1].var0);
  v5 = this[4];
  this[6].f32[1] = (float)(int)floorf(logf((float)(var0_low - *(__int16 *)(*(_QWORD *)&v5 + 170)) + 1.0) * 2.1276);
  v6 = *(unsigned __int16 *)(*(_QWORD *)&v5 + 174);
  v7 = 0.0;
  if (v6 != (unsigned __int16)var0_low)
    v7 = (float)(int)floorf(logf((float)((__int16)v6 - var0_low)) * 2.1276);
  this[7].f32[0] = v7;
  this[7].f32[1] = fminf((float)(int)floorf(logf((float)(*(__int16 *)(*(_QWORD *)&this[3] + 62) - var0_low)) * 2.1276), 3.0);
  v8 = &off_1E9367208;
  v9 = 0;
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)&v8);
  this[9] = vminnm_f32(vcvt_f32_s32(v9), (float32x2_t)0x4000000040000000);
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
  {
    printf("%s = %g\n", "fromWdStartSyls", this[6].f32[1]);
    if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
    {
      printf("%s = %g\n", "fromWdEndSyls", this[7].f32[0]);
      if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
      {
        printf("%s = %g\n", "fromPhEndSyls", this[7].f32[1]);
        if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
        {
          printf("%s = %g\n", "fNumPhnsInOnset", this[9].f32[0]);
          if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
            printf("%s = %g\n", "fNumPhnsInCoda", this[9].f32[1]);
        }
      }
    }
  }
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v8);
}

void sub_1D2278FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)va);
  _Unwind_Resume(a1);
}

void SyllPhnCounter::SyllPhnCounter(SyllPhnCounter *this)
{
  *(_QWORD *)this = &off_1E9367208;
  *((_QWORD *)this + 1) = 0;
}

{
  *(_QWORD *)this = &off_1E9367208;
  *((_QWORD *)this + 1) = 0;
}

void MTFEDuration::VisitPhoneme(MTFEDuration *this, MTFEPhoneme *a2)
{
  unsigned int var15;
  int v5;
  MTFESpeechElement *v6;
  MTFESpeechElement *var7;
  int v8;
  _BYTE *v9;
  MTFESpeechElement *v10;
  MTFESpeechElement *var6;
  MTFESpeechElement *v12;
  MTFESpeechElement *v13;
  MTFESpeechElement *v14;
  MTFESpeechElement *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int var8;
  int v23;
  int v24;
  double v25;
  uint64_t var9;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  double v32;
  float v33;

  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
    puts("MTFEDuration::VisitPhoneme()");
  if (a2->var9)
  {
    var15 = a2->var15;
    v5 = *((unsigned __int8 *)this + 82);
    if (!*((_BYTE *)this + 82))
    {
      *((_DWORD *)this + 21) = a2->var8;
      *((_BYTE *)this + 82) = 1;
    }
    v6 = (MTFESpeechElement *)*((_QWORD *)this + 3);
    var7 = v6->var7;
    if (var7)
    {
      v8 = *((unsigned __int8 *)MTFELastPhoneme(v6->var7) + 58);
      v6 = (MTFESpeechElement *)*((_QWORD *)this + 3);
    }
    else
    {
      v8 = -1;
    }
    v9 = MTFELastPhoneme(v6);
    v10 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
    var6 = a2->var6;
    v12 = a2->var7;
    if (v12)
      v13 = a2->var7;
    else
      v13 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
    if (var6)
      v14 = a2->var6;
    else
      v14 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
    v15 = v13->var7;
    if (!v15)
      v15 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
    v16 = MTFEDuration::sPhonToLCClass[BYTE2(v13[1].var0)];
    if (v14->var6)
      v10 = v14->var6;
    v17 = MTFEDuration::sPhonToLCClass[BYTE2(v15[1].var0)];
    v18 = MTFEDuration::sPhonToRCClass[BYTE2(v14[1].var0)];
    v19 = MTFEDuration::sPhonToRCClass[BYTE2(v10[1].var0)];
    if (v5)
    {
      if (*((_BYTE *)this + 82))
      {
        v20 = !v8 || var7 == 0;
        v21 = v20 ? MTFEDuration::sPhonToLCClass[BYTE2(v15[1].var0)] : 4;
        if (*((_DWORD *)this + 21) + 1 == a2->var8)
          v17 = v21;
      }
    }
    else if (var7 != 0 && v8 != 0)
    {
      v17 = v16;
      v16 = 4;
    }
    var8 = a2->var8;
    if (!v9[58])
      goto LABEL_39;
    v23 = *((unsigned __int16 *)v9 + 28);
    if (v23 == (unsigned __int16)var8 && *(_QWORD *)(*((_QWORD *)this + 3) + 40))
    {
      v24 = 4;
      goto LABEL_40;
    }
    if ((__int16)v23 - 1 == var8)
    {
      v24 = v18;
      if (*(_QWORD *)(*((_QWORD *)this + 3) + 40))
        v18 = 4;
      else
        v18 = v19;
    }
    else
    {
LABEL_39:
      v24 = v18;
      v18 = v19;
    }
LABEL_40:
    *((_WORD *)this + 40) = 0;
    v25 = 0.0;
    if (*((_DWORD *)this + 21) < var8)
    {
      if ((var9 = a2->var9, v27 = BYTE2(v12[1].var0), (_DWORD)var9 == (_DWORD)v27)
        || MTFEDuration::sPhonToDClass[var9] == 5 && MTFEDuration::sPhonToDClass[v27] == 5
        || (MTFEDuration::sPhonToPhon[var9] & 0xFE) == 0x26 && MTFEDuration::sPhonToDClass[BYTE2(var6[1].var0)] == 5)
      {
        *((_BYTE *)this + 80) = 1;
        v25 = 1.0;
      }
    }
    if (var8 < *((__int16 *)v9 + 28))
    {
      v28 = a2->var9;
      v29 = BYTE2(var6[1].var0);
      if ((_DWORD)v28 == (_DWORD)v29
        || MTFEDuration::sPhonToDClass[v28] == 5
        && (MTFEDuration::sPhonToDClass[v29] == 5
         || (v30 = MTFEDuration::sPhonToPhon[v29], v30 == 38)
         || v30 == 39))
      {
        *((_BYTE *)this + 81) = 1;
      }
    }
    v31 = var15 & 0x60000000;
    if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
    {
      printf("%s = %g\n", "(float)fGeminationToTheLeft", v25);
      if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
      {
        v32 = 0.0;
        if (*((_BYTE *)this + 81))
          v32 = 1.0;
        printf("%s = %g\n", "(float)fGeminationToTheRight", v32);
      }
    }
    MTFEDuration::ModelPhoneme(this, a2->var9, a2->var10 != 0, v16, v24, v17, v18, v31 == 0, v31 == 0x40000000, &a2->var13);
    a2->var14 = 0.5;
    v33 = a2->var13 * 0.0090703;
    a2->var13 = v33;
    if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
      printf("\nDuration = %5.2fms, %3.0f frames\n", (float)(v33 * 5.0), v33);
  }
}

void MTFEDuration::ModelPhoneme(MTFEDuration *this, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8, BOOL a9, float *a10)
{
  MTFEDuration *v14;
  int v15;
  int v16;
  int v17;
  char v18;
  int v19;
  float v20;
  int v21;
  unsigned int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  float v44;
  float v45;
  unsigned int v46;
  float v47;
  float v48;
  float v49;
  unsigned int v50;
  float v51;
  float v52;
  float v53;
  float v54;
  MTFEDuration *v55;
  unsigned int v56;
  float v57;
  float v58;
  int v59;
  float v60;
  float v61;
  float v62;
  float v63;
  unsigned int v64;
  float v65;
  unsigned int v66;
  float v67;
  unsigned int v68;
  float v69;
  unsigned int v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  int v76;
  uint64_t v78;
  MTFEDuration *v79;
  int v80;

  v14 = (MTFEDuration *)MTFEDuration::sPhonToPhon[a2];
  v15 = MTFEDuration::sPhonToPClass[a2];
  v80 = MTFEDuration::sPhonToGClass[a2];
  v16 = *(unsigned __int16 *)(*((_QWORD *)this + 5) + 62);
  v17 = MTFEDuration::sPhonToDClass[a2];
  v18 = MTBEDebugFlags::sMTXDebug;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
  {
    v19 = a7;
    printf("Dur[%s]    xph %d, acc %d, pho %d, pcl %d, gencl %d, dcl %d, lcl %d rcl %d lc2 %d rc2 %d", *(const char **)(MEMORY[0x1E0DA8EB0] + 8 * a2), a3, v16 != 0, (_DWORD)v14, v15, v80, v17, a4, a5, a6, a7);
    a7 = v19;
    v18 = MTBEDebugFlags::sMTXDebug;
  }
  v20 = 3395.6 + 0.0;
  v79 = v14;
  if ((v18 & 0x10) == 0)
  {
    v21 = (int)v14;
    v22 = 0;
    v23 = v20 + *(float *)&MTFEDuration::sCoeffs[4 * v21 + 4];
LABEL_7:
    v78 = a4;
    v25 = v23 + *(float *)&MTFEDuration::sCoeffs[4 * a4 + 196];
LABEL_8:
    v26 = v25 + *(float *)&MTFEDuration::sCoeffs[4 * a6 + 172];
LABEL_9:
    v27 = a5;
    v28 = v26 + *(float *)&MTFEDuration::sCoeffs[4 * a5 + 244];
LABEL_10:
    v29 = v28 + *(float *)&MTFEDuration::sCoeffs[4 * a7 + 220];
LABEL_11:
    v30 = v29 + (float)(-59.82 * *((float *)this + 17));
    goto LABEL_12;
  }
  v76 = a7;
  printf("\nDur ");
  printf(" %5.2f(%5.2f)", (float)((float)(3395.6 * 1000.0) / 22050.0), 3395.6);
  v24 = *(float *)&MTFEDuration::sCoeffs[4 * (int)v14 + 4];
  v23 = v20 + v24;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) == 0)
  {
    v22 = 1;
    a7 = v76;
    goto LABEL_7;
  }
  printf(" %5.2f(%5.2f)", (float)((float)(v24 * 1000.0) / 22050.0), v24);
  v78 = a4;
  v63 = *(float *)&MTFEDuration::sCoeffs[4 * a4 + 196];
  v25 = v23 + v63;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) == 0)
  {
    v22 = 2;
    a7 = v76;
    goto LABEL_8;
  }
  printf(" %5.2f(%5.2f)", (float)((float)(v63 * 1000.0) / 22050.0), v63);
  v71 = *(float *)&MTFEDuration::sCoeffs[4 * a6 + 172];
  v26 = v25 + v71;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) == 0)
  {
    v22 = 3;
    a7 = v76;
    goto LABEL_9;
  }
  printf(" %5.2f(%5.2f)", (float)((float)(v71 * 1000.0) / 22050.0), v71);
  v27 = a5;
  v72 = *(float *)&MTFEDuration::sCoeffs[4 * a5 + 244];
  v28 = v26 + v72;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) == 0)
  {
    v22 = 4;
    a7 = v76;
    goto LABEL_10;
  }
  printf(" %5.2f(%5.2f)", (float)((float)(v72 * 1000.0) / 22050.0), v72);
  v73 = *(float *)&MTFEDuration::sCoeffs[4 * v76 + 220];
  v29 = v28 + v73;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) == 0)
  {
    v22 = 5;
    goto LABEL_11;
  }
  printf(" %5.2f(%5.2f)", (float)((float)(v73 * 1000.0) / 22050.0), v73);
  v74 = -59.82 * *((float *)this + 17);
  v30 = v29 + v74;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
  {
    printf(" %5.2f(%5.2f)", (float)((float)(v74 * 1000.0) / 22050.0), v74);
    v75 = 22.677 * *((float *)this + 16);
    v32 = v30 + v75;
    if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
    {
      printf(" %5.2f(%5.2f)", (float)((float)(v75 * 1000.0) / 22050.0), v75);
      v31 = MTBEDebugFlags::sMTXDebug & 0x10;
      v22 = 8;
    }
    else
    {
      v31 = 0;
      v22 = 7;
    }
    goto LABEL_13;
  }
  v22 = 6;
LABEL_12:
  v31 = 0;
  v32 = v30 + (float)(22.677 * *((float *)this + 16));
LABEL_13:
  if (*(_WORD *)(*((_QWORD *)this + 5) + 62) == 8)
    v33 = 1.0;
  else
    v33 = 0.0;
  v34 = 122.51 * v33;
  if (v31)
  {
    if (!v22)
      printf("\nDur ");
    printf(" %5.2f(%5.2f)", (float)((float)(v34 * 1000.0) / 22050.0), v34);
    v31 = MTBEDebugFlags::sMTXDebug & 0x10;
    ++v22;
  }
  v35 = v32 + v34;
  if (*((_BYTE *)this + 80))
    v36 = 1.0;
  else
    v36 = 0.0;
  v37 = *(float *)&MTFEDuration::sCoeffs[4 * v80 + 280] * v36;
  if (v31)
  {
    if (!v22)
      printf("\nDur ");
    printf(" %5.2f(%5.2f)", (float)((float)(v37 * 1000.0) / 22050.0), v37);
    v31 = MTBEDebugFlags::sMTXDebug & 0x10;
    ++v22;
  }
  v38 = v35 + v37;
  if (*((_BYTE *)this + 81))
    v39 = 1.0;
  else
    v39 = 0.0;
  v40 = *(float *)&MTFEDuration::sCoeffs[4 * v80 + 300] * v39;
  if (v31)
  {
    v41 = v17;
    v42 = v22 + 1;
    v43 = v22 - 10;
    if (v22 < 0xA)
      v43 = v22;
    if (!v43)
      printf("\nDur ");
    printf(" %5.2f(%5.2f)", (float)((float)(v40 * 1000.0) / 22050.0), v40);
    if (v16)
      v44 = 1.0;
    else
      v44 = 0.0;
    v45 = v44 * *(float *)&MTFEDuration::sCoeffs[4 * v17 + 392];
    if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
    {
      v46 = v22 - 9;
      if (v42 < 0xA)
        v46 = v22 + 1;
      if (!v46)
        printf("\nDur ");
      printf(" %5.2f(%5.2f)", (float)((float)(v45 * 1000.0) / 22050.0), v45);
      v42 = v22 + 2;
    }
  }
  else
  {
    v41 = v17;
    if (v16)
      v44 = 1.0;
    else
      v44 = 0.0;
    v45 = v44 * *(float *)&MTFEDuration::sCoeffs[4 * v17 + 392];
    v42 = v22;
  }
  v47 = v38 + v40;
  v48 = 0.0;
  if (a8)
    v48 = *(float *)&MTFEDuration::sCoeffs[4 * v41 + 320] * *((float *)this + 18);
  v49 = v47 + v45;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
  {
    v50 = v42 - 10;
    if (v42 < 0xA)
      v50 = v42;
    if (!v50)
      printf("\nDur ");
    printf(" %5.2f(%5.2f)", (float)((float)(v48 * 1000.0) / 22050.0), v48);
    ++v42;
  }
  v51 = 0.0;
  if (a9)
    v51 = *(float *)&MTFEDuration::sCoeffs[4 * v41 + 356] * *((float *)this + 19);
  v52 = (float)(v49 + v48) + v51;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) == 0)
  {
    v53 = *((float *)this + 15);
    v54 = v52 + (float)(*(float *)&MTFEDuration::sCoeffs[4 * v41 + 428] * v53);
    v55 = v79;
LABEL_65:
    v58 = v54 + (float)(v44 * (float)(*(float *)&MTFEDuration::sCoeffs[4 * v41 + 464] * v53));
LABEL_66:
    v59 = v15;
    v60 = v58 + *(float *)&MTFEDuration::sCoeffs[24 * v15 + 500 + 4 * v78];
LABEL_67:
    v61 = v60 + *(float *)&MTFEDuration::sCoeffs[24 * v59 + 668 + 4 * v27];
    goto LABEL_68;
  }
  v56 = v42 - 10;
  if (v42 < 0xA)
    v56 = v42;
  v55 = v79;
  if (!v56)
    printf("\nDur ");
  printf(" %5.2f(%5.2f)", (float)((float)(v51 * 1000.0) / 22050.0), v51);
  v53 = *((float *)this + 15);
  v57 = *(float *)&MTFEDuration::sCoeffs[4 * v41 + 428] * v53;
  v54 = v52 + v57;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) == 0)
    goto LABEL_65;
  v64 = v42 + 1;
  if (v42 + 1 >= 0xA)
    v64 = v42 - 9;
  if (!v64)
    printf("\nDur ");
  printf(" %5.2f(%5.2f)", (float)((float)(v57 * 1000.0) / 22050.0), v57);
  v65 = v44 * (float)(*(float *)&MTFEDuration::sCoeffs[4 * v41 + 464] * *((float *)this + 15));
  v58 = v54 + v65;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) == 0)
    goto LABEL_66;
  v59 = v15;
  v66 = v42 + 2;
  if (v42 + 2 >= 0xA)
    v66 = v42 - 8;
  if (!v66)
    printf("\nDur ");
  printf(" %5.2f(%5.2f)", (float)((float)(v65 * 1000.0) / 22050.0), v65);
  v67 = *(float *)&MTFEDuration::sCoeffs[24 * v15 + 500 + 4 * v78];
  v60 = v58 + v67;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) == 0)
    goto LABEL_67;
  v68 = v42 + 3;
  if (v42 + 3 >= 0xA)
    v68 = v42 - 7;
  if (!v68)
    printf("\nDur ");
  printf(" %5.2f(%5.2f)", (float)((float)(v67 * 1000.0) / 22050.0), v67);
  v69 = *(float *)&MTFEDuration::sCoeffs[24 * v15 + 668 + 4 * v27];
  v61 = v60 + v69;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
  {
    v70 = v42 + 4;
    if (v42 + 4 >= 0xA)
      v70 = v42 - 6;
    if (!v70)
      printf("\nDur ");
    printf(" %5.2f(%5.2f)", (float)((float)(v69 * 1000.0) / 22050.0), v69);
  }
LABEL_68:
  v62 = MTFEDuration::Transform(v55, v61);
  *a10 = v62;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
    printf("\nPhoneme: %.2f --> %.2f", (float)(v61 / 22.05), (float)(v62 / 22.05));
}

float MTFEDuration::Transform(MTFEDuration *this, float a2)
{
  char *v3;
  float v4;
  float v5;
  float v6;

  v3 = &MTFEDuration::sCoeffs[4 * (int)this];
  v4 = *((float *)v3 + 211);
  v5 = *((float *)v3 + 253);
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
    printf("\nTransform: phone = %d, duration = %5.3f, center = %5.3f, gain = %5.3f, valA = %5.3f, valB = %5.3f", (_DWORD)this, a2, 0.3, 1.0, v4, v5);
  v6 = v4
     + (float)((float)(v5 - v4) * (float)(sinhf(1.0 * (float)((float)((float)(a2 - v4) / (float)(v5 - v4)) - 0.3)) + 0.3));
  if (v6 >= v4)
  {
    v4 = v6;
    if (v6 > v5)
      return v5;
  }
  return v4;
}

uint64_t MTFEDuration::AdjustDurationForFlap(uint64_t this, MTFEPhoneme *a2)
{
  float v2;
  float v3;

  v2 = (float)(*(float *)(this + 64) / 0.0090703) + -900.61;
  v3 = 401.0;
  if (v2 >= 401.0)
  {
    v3 = (float)(*(float *)(this + 64) / 0.0090703) + -900.61;
    if (v2 > 3776.0)
      v3 = 3776.0;
  }
  *(float *)(this + 64) = v3 * 0.0090703;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
    return printf("New Duration for DX = %5.2fms, %3.0f frames\n", (float)((float)(v3 * 0.0090703) * 5.0), (float)(v3 * 0.0090703));
  return this;
}

uint64_t MTFEDuration::AdjustDurationForAspiration(uint64_t this, MTFEPhoneme *a2)
{
  float v2;
  uint64_t v3;
  char *v4;
  float v5;

  v2 = (float)(*(float *)(this + 64) / 0.0090703) + -636.68;
  v3 = *(unsigned __int8 *)(this + 58);
  v4 = &MTFEDuration::sCoeffs[4 * MTFEDuration::sPhonToPhon[v3]];
  v5 = *((float *)v4 + 211);
  if (v2 >= v5)
  {
    v5 = (float)(*(float *)(this + 64) / 0.0090703) + -636.68;
    if (v2 > *((float *)v4 + 253))
      v5 = *((float *)v4 + 253);
  }
  *(float *)(this + 64) = v5 * 0.0090703;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
    return printf("New Duration for aspirated %s = %5.2fms, %3.0f frames\n", *(const char **)(MEMORY[0x1E0DA8EB0] + 8 * v3), (float)((float)(v5 * 0.0090703) * 5.0), (float)(v5 * 0.0090703));
  return this;
}

void SyllPhnCounter::~SyllPhnCounter(SyllPhnCounter *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

uint64_t SyllPhnCounter::VisitPhoneme(uint64_t this, MTFEPhoneme *a2)
{
  unsigned int v2;

  v2 = a2->var15 & 0x60000000;
  if (v2 == 0x40000000)
  {
    ++*(_DWORD *)(this + 12);
  }
  else if (!v2)
  {
    ++*(_DWORD *)(this + 8);
  }
  return this;
}

void MTFEDuration::~MTFEDuration(MTFEDuration *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

MTFESpeechElement *MTFECount::VisitSentence(MTFECount *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *result;

  *((_WORD *)this + 23) = 0;
  result = MTFESpeechElement::VisitChildren(a2, this);
  a2[1].var1 = *((_WORD *)this + 23);
  return result;
}

uint64_t MTFECount::VisitIntonationalPhrase(MTFEPosition *this, MTFESpeechElement *a2)
{
  signed __int16 var1;
  uint64_t result;

  var1 = this[11].var1;
  this[6] = 0;
  this[10] = 0;
  this[11].var0 = 0;
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  result = MTFECommands::Visit((uint64_t)&a2[1].var1, (uint64_t)this);
  *(MTFEPosition *)(&a2[2].var2 + 2) = this[6];
  *(MTFEPosition *)&a2[2].var1 = this[10];
  LOWORD(a2[2].var7) = this[11].var0;
  WORD1(a2[2].var7) = this[11].var1 - var1;
  return result;
}

MTFESpeechElement *MTFECount::VisitIntermediatePhrase(MTFEPosition *this, MTFESpeechElement *a2)
{
  signed __int16 var1;
  MTFESpeechElement *result;

  var1 = this[11].var1;
  this[12].var0 = 8;
  this[13] = 0;
  LODWORD(a2[1].var0) = this[6];
  result = MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  HIDWORD(a2[1].var0) = this[6];
  *(MTFEPosition *)&a2[1].var1 = this[10];
  WORD1(a2[1].var4) = this[11].var1 - var1;
  return result;
}

MTFESpeechElement *MTFECount::VisitWord(MTFECount *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *result;
  int v5;

  *((_BYTE *)this + 56) = 0;
  LODWORD(a2[1].var0) &= ~0x40u;
  *((_QWORD *)this + 4) = 0;
  MTFECommands::Visit((uint64_t)&a2[2], (uint64_t)this);
  LODWORD(a2[3].var0) = *((_DWORD *)this + 6);
  result = MTFESpeechElement::VisitChildren(a2, this);
  HIDWORD(a2[3].var0) = *((_DWORD *)this + 6);
  v5 = *((_BYTE *)this + 56) == 0;
  *((_WORD *)this + 23) += *((unsigned __int8 *)this + 56);
  LODWORD(a2[1].var0) |= v5 << 6;
  return result;
}

MTFESpeechElement *MTFECount::VisitSyllable(MTFECount *this, MTFESpeechElement *a2)
{
  unint64_t v4;
  MTFESpeechElement *result;

  *((_QWORD *)this + 1) = a2;
  HIDWORD(v4) = *((_DWORD *)this + 6);
  LODWORD(v4) = HIDWORD(v4);
  LODWORD(a2[1].var0) = v4 >> 16;
  result = MTFESpeechElement::VisitChildren(a2, this);
  WORD2(a2[1].var0) = *((_WORD *)this + 12);
  if (HIWORD(a2[1].var0))
  {
    *((_WORD *)this + 21) = a2[1].var0;
    *((_WORD *)this + 20) = *(_WORD *)(*((_QWORD *)this + 2) + 56);
    ++*((_WORD *)this + 22);
  }
  return result;
}

float MTFECount::VisitCommand(MTFECount *this, MTFECommand *a2)
{
  unint64_t var9;
  float result;

  if (a2->var8 == 1953456745)
  {
    var9 = a2->var9;
    if ((int)(var9 >> 24) <= 12)
    {
      *((_WORD *)this + 24) = var9 >> 24;
      result = (float)(var9 & 0xFFFFFF) * 0.000015259;
      *((float *)this + 13) = result;
    }
  }
  return result;
}

float MTFECount::VisitPhoneme(MTFECount *this, MTFEPhoneme *a2)
{
  uint64_t var9;
  unsigned int var15;
  uint64_t v4;
  signed __int16 v5;
  unsigned int v6;
  uint64_t v7;
  float result;

  var9 = a2->var9;
  if (a2->var9)
    *((_BYTE *)this + 56) = 1;
  var15 = a2->var15;
  if ((var15 & 0x10000000) != 0)
  {
    v4 = 0;
    *((_QWORD *)this + 4) = 0;
    ++*((_WORD *)this + 13);
  }
  else
  {
    v4 = *((_QWORD *)this + 4);
  }
  v5 = *((_WORD *)this + 12);
  *((_WORD *)this + 12) = v5 + 1;
  a2->var8 = v5;
  v6 = var15 & 0x9FFFFFFF;
  if (!v4 && (*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * var9) & 1) != 0)
  {
    a2->var15 = v6 | 0x20000000;
    *((_QWORD *)this + 4) = 0x40000000;
    if ((var15 & 0x1400) != 0)
    {
      v7 = *((_QWORD *)this + 1);
      *(_WORD *)(v7 + 62) = *((_WORD *)this + 24);
      result = *((float *)this + 13);
      *(float *)(v7 + 64) = result;
      *((_WORD *)this + 24) = 10;
      *((_DWORD *)this + 13) = 0;
      *((_QWORD *)this + 2) = a2;
    }
  }
  else
  {
    a2->var15 = v6 | v4;
  }
  return result;
}

void MTFECount::~MTFECount(MTFECount *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

BOOL MTFEToBI::IsPhraseAccent(MTFEToBI *this)
{
  return ((_DWORD)this - 1) < 3;
}

BOOL MTFEToBI::IsRegularPhraseAccent(MTFEToBI *this)
{
  return (this & 0xFFFFFFFD) == 1;
}

BOOL MTFEToBI::IsFinalBoundary(MTFEToBI *this)
{
  return ((_DWORD)this - 5) < 2;
}

BOOL MTFEToBI::IsPitchAccent(MTFEToBI *this)
{
  return ((_DWORD)this - 7) < 6;
}

MTFEToBIPitch::Token *MTFEToBIPitch::Token::Token(MTFEToBIPitch::Token *this, const MTFEToBIPitch::Token *a2, MTFEToBIPitch::Token *a3)
{
  MTFEToBIPitch::Token *v5;

  *(_BYTE *)this = *(_BYTE *)a2;
  *((_QWORD *)this + 2) = a3;
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  if (*((_QWORD *)a2 + 1))
  {
    v5 = (MTFEToBIPitch::Token *)operator new();
    MTFEToBIPitch::Token::Token(v5, *((const MTFEToBIPitch::Token **)a2 + 1), this);
  }
  else
  {
    v5 = 0;
  }
  *((_QWORD *)this + 1) = v5;
  return this;
}

void sub_1D227A3AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A0C40CCDE963ELL);
  _Unwind_Resume(a1);
}

uint64_t Intersection(float *a1, float *a2)
{
  uint64_t v3;

  if (*a1 == *a2)
    return 0;
  LOBYTE(v3) = 1;
  *((float *)&v3 + 1) = (float)(a2[1] - a1[1]) / (float)(*a1 - *a2);
  return v3;
}

uint64_t MTFEToBIPitch::MTFEToBIPitch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(_QWORD *)result = &off_1E9367390;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = a4;
  *(_QWORD *)(result + 32) = a5;
  *(_QWORD *)(result + 40) = a6;
  *(_BYTE *)(result + 48) = a7;
  *(_DWORD *)(result + 160) = *(_DWORD *)(a5 + 404);
  return result;
}

{
  *(_QWORD *)result = &off_1E9367390;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = a4;
  *(_QWORD *)(result + 32) = a5;
  *(_QWORD *)(result + 40) = a6;
  *(_BYTE *)(result + 48) = a7;
  *(_DWORD *)(result + 160) = *(_DWORD *)(a5 + 404);
  return result;
}

uint64_t MTFEToBIPitch::BeginBoost(uint64_t this, float a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 16);
  v4 = *(unsigned int *)(v3 + 28);
  if (v4 <= 3)
  {
    *(float *)(v3 + 4 * v4 + 8) = a2;
    *(_BYTE *)(v3 + v4 + 24) = a3;
    v3 = *(_QWORD *)(this + 16);
    *(float *)(v3 + 4) = *(float *)(v3 + 4) * a2;
    LODWORD(v4) = *(_DWORD *)(v3 + 28);
  }
  *(_DWORD *)(v3 + 28) = v4 + 1;
  return this;
}

float MTFEToBIPitch::DownStepBoost(MTFEToBIPitch *this)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float result;

  v1 = *((_QWORD *)this + 2);
  v2 = *(_DWORD *)(v1 + 28);
  v3 = __OFSUB__(v2, 1);
  v4 = (v2 - 1);
  if ((int)v4 < 0 == v3 && *(_BYTE *)(v1 + v4 + 24) == 2)
  {
    v5 = v1 + 4 * v4;
    v6 = *(float *)(v5 + 8);
    v7 = *(float *)(v1 + 4) / v6;
    result = (float)((float)(v6 + -1.0) * *(float *)(*((_QWORD *)this + 4) + 524)) + 1.0;
    *(float *)(v1 + 4) = v7 * result;
    *(float *)(v5 + 8) = result;
  }
  return result;
}

float MTFEToBIPitch::EndBoost(MTFEToBIPitch *this)
{
  uint64_t v1;
  unsigned int v2;
  float result;

  v1 = *((_QWORD *)this + 2);
  v2 = *(_DWORD *)(v1 + 28) - 1;
  *(_DWORD *)(v1 + 28) = v2;
  if (v2 <= 3)
  {
    result = *(float *)(v1 + 4) / *(float *)(v1 + 4 * v2 + 8);
    *(float *)(v1 + 4) = result;
  }
  return result;
}

void MTFEToBIPitch::SetupInitialRaising(float **this, MTFESentence *a2, float *a3)
{
  signed __int16 var8;
  float v6;
  float v7;

  if ((MTBEDebugFlags::sMTXDebug & 0x400) == 0)
  {
    var8 = a2->var8;
    if ((var8 & 1) != 0)
    {
      if (kMTFEParagraphInitialBoost)
      {
        MTBEDebugParams::GetParam((const __CFString *)kMTFEParagraphInitialBoost, (const __CFString *)&dword_1EFC74DE8, a3, *(float *)&dword_1EFC74DE8);
        kMTFEParagraphInitialBoost = 0;
        var8 = a2->var8;
      }
      v6 = *(float *)&dword_1EFC74DE8;
      if ((var8 & 2) != 0)
      {
        if (kMTFEParagraphRangePhrasalDownStep)
        {
          MTBEDebugParams::GetParam((const __CFString *)kMTFEParagraphRangePhrasalDownStep, (const __CFString *)&dword_1EFC74DF8, a3, *(float *)&dword_1EFC74DF8);
          kMTFEParagraphRangePhrasalDownStep = 0;
        }
        v7 = *(float *)&dword_1EFC74DF8;
        if (a2->var10 <= 3)
          v7 = *(float *)&dword_1EFC74DF8 * *(float *)&dword_1EFC74DF8;
        v6 = (float)((float)(v6 + -1.0) * v7) + 1.0;
      }
      *this[2] = v6;
      if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "IR %5.3f\n", v6);
    }
  }
}

float MTFEToBIPitch::SetupFinalLowering(MTFEToBIPitch *this, MTFESentence *a2)
{
  int v2;
  float result;

  if ((MTBEDebugFlags::sMTXDebug & 0x800) != 0)
    LOBYTE(v2) = 0;
  else
    v2 = ((unsigned __int16)a2->var8 >> 1) & 1;
  *((_BYTE *)this + 105) = v2;
  result = a2->var9;
  *((_DWORD *)this + 38) = (int)result;
  return result;
}

MTFESpeechElement *MTFEToBIPitch::VisitSentence(MTFEToBIPitch *this, MTFESentence *a2, float *a3)
{
  int v5;
  BOOL v6;
  int var9;

  *((_QWORD *)this + 21) = a2;
  MTFEToBIPitch::SetupInitialRaising((float **)this, a2, a3);
  v5 = ((unsigned __int16)a2->var8 >> 1) & 1;
  v6 = (MTBEDebugFlags::sMTXDebug & 0x800) == 0 && (a2->var8 & 2) != 0;
  var9 = (int)a2->var9;
  *((_BYTE *)this + 105) = v6;
  *((_DWORD *)this + 38) = var9;
  *((_BYTE *)this + 164) = v5;
  MTBEParam::GetPitchFloorRange(*((MTBEParam **)this + 1), (float *)this + 35, (float *)this + 36);
  *((_BYTE *)this + 165) = (a2->var8 & 0x20) != 0;
  *((_BYTE *)this + 104) = 1;
  MTFESpeechElement::VisitChildren((MTFESpeechElement *)a2, this);
  *((_BYTE *)this + 104) = 0;
  return MTFESpeechElement::VisitChildren((MTFESpeechElement *)a2, this);
}

uint64_t MTFEToBIPitch::VisitIntonationalPhrase(uint64_t this, MTFESpeechElement *a2, float *a3)
{
  uint64_t v4;
  signed __int16 var7;
  int v6;
  int v7;
  __CFString **v8;
  char v9;
  uint64_t v10;
  int v11;
  float *v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  float v23;
  uint64_t v24;
  int v25;
  int v26;
  float v27;
  int v28;
  int v29;
  float *v30;
  int v31;
  int v32;
  uint64_t v33;

  v4 = this;
  if (*(_BYTE *)(this + 104))
  {
    *(_DWORD *)(this + 52) = 0;
    *(_QWORD *)(this + 72) = 0;
    *(_QWORD *)(this + 80) = 0;
    *(_QWORD *)(this + 64) = 0;
    *(_BYTE *)(this + 111) = 1;
    *(_WORD *)(this + 116) = 0;
    var7 = (signed __int16)a2[2].var7;
    *(_WORD *)(this + 114) = var7;
    *(_WORD *)(this + 118) = var7 - 1;
    v6 = BYTE6(a2[2].var6);
    *(_BYTE *)(this + 148) = v6;
    if (v6 == 71)
      *(_BYTE *)(this + 105) = 0;
    if (*(_BYTE *)(*(_QWORD *)(this + 8) + 48))
    {
      a2[2].var5 = 0;
      this = operator new[]();
      a2[2].var3 = (MTFESpeechElement *)this;
LABEL_72:
      v29 = *(_DWORD *)(v4 + 152);
      *(_DWORD *)(v4 + 100) = v29 - *(_DWORD *)(v4 + 100);
      *(_DWORD *)(v4 + 152) = v29 - *(_DWORD *)(v4 + 52);
      return this;
    }
    if (a2[3].var1 < 1)
    {
LABEL_36:
      MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)v4);
      MTFECommands::Visit((uint64_t)&a2[1].var1, v4);
      v20 = *(__int16 *)&a2[3].var2;
      v21 = *(_QWORD *)(v4 + 16);
      if (v20 <= 0)
      {
        v22 = *(_DWORD *)(v21 + 28);
      }
      else
      {
        v22 = *(_DWORD *)(v21 + 28);
        do
        {
          if (--v22 <= 3)
            *(float *)(v21 + 4) = *(float *)(v21 + 4) / *(float *)(v21 + 4 * v22 + 8);
          --v20;
        }
        while (v20);
        *(_DWORD *)(v21 + 28) = v22;
      }
      if (v22 > 6)
        *(_DWORD *)(v21 + 28) = 0;
      switch(*(_BYTE *)(v4 + 148))
      {
        case 'D':
        case 'E':
          if (!*(_QWORD *)(v4 + 72))
          {
            v23 = *(float *)(*(_QWORD *)(v4 + 32) + 16);
            goto LABEL_65;
          }
          if (kMTFEHighFinalProm)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTFEHighFinalProm, (const __CFString *)&dword_1EFC74E18, v19, *(float *)&dword_1EFC74E18);
            kMTFEHighFinalProm = 0;
          }
          v23 = *(float *)&dword_1EFC74E18;
          if (*(float *)&dword_1EFC74E18 == 0.0)
            v23 = *(float *)(*(_QWORD *)(v4 + 32) + 60);
          goto LABEL_60;
        case 'F':
          v23 = *(float *)(*(_QWORD *)(v4 + 32) + 188);
          goto LABEL_63;
        case 'G':
          v23 = *(float *)(*(_QWORD *)(v4 + 32) + 444);
          if (*(_QWORD *)(v4 + 72))
          {
LABEL_60:
            v24 = *(_QWORD *)(v4 + 72);
            if (*(_BYTE *)v24 == 3)
              v23 = v23 + *(float *)(v24 + 24);
          }
LABEL_65:
          v25 = 6;
          goto LABEL_66;
        case 'H':
          v23 = *(float *)(*(_QWORD *)(v4 + 32) + 28);
LABEL_63:
          v25 = 5;
LABEL_66:
          v26 = BYTE5(a2[2].var6);
          if (!BYTE5(a2[2].var6))
          {
            BYTE5(a2[2].var6) = v25;
            v26 = v25;
          }
          v27 = *(float *)&a2[3].var5;
          if (v27 == 0.0)
          {
            *(float *)&a2[3].var5 = v23;
            v27 = v23;
          }
          MTFEToBIPitch::AddProsodicToken((MTFEToBIPitch *)v4, v26, v27, *(MTFEPhoneme **)(v4 + 80), *(_DWORD *)(v4 + 100), 0, 0);
          break;
        default:
          break;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
      v28 = *(_DWORD *)(v4 + 52);
      LODWORD(a2[2].var5) = 200;
      HIDWORD(a2[2].var5) = v28 + 200;
      LODWORD(a2[2].var6) = *(_DWORD *)(v4 + 152);
      this = operator new[]();
      a2[2].var3 = (MTFESpeechElement *)this;
      a2[3].var0 = *(void ***)(v4 + 64);
      goto LABEL_72;
    }
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDownStepMonosyllabicPhrases);
      v13 = 1.0;
      if (v11 && *((__int16 *)&a2[2].var2 + 2) <= 1)
      {
        if (kMTFEParagraphRangePhrasalDownStep)
        {
          MTBEDebugParams::GetParam((const __CFString *)kMTFEParagraphRangePhrasalDownStep, (const __CFString *)&dword_1EFC74DF8, v12, *(float *)&dword_1EFC74DF8);
          kMTFEParagraphRangePhrasalDownStep = 0;
        }
        v13 = *(float *)&dword_1EFC74DF8;
      }
      v14 = ((unint64_t)a2[3].var3 >> v9) & 3;
      if ((((unint64_t)a2[3].var3 >> v9) & 3) == 0)
        break;
      if ((_DWORD)v14 == 2)
      {
        v15 = *(_QWORD *)(v4 + 16);
        v16 = *(unsigned int *)(v15 + 28);
        if (a2->var1 >= 3)
        {
          if (v16 > 3)
            goto LABEL_34;
          v18 = *(float *)(*(_QWORD *)(v4 + 32) + 116);
LABEL_33:
          *(float *)(v15 + 4 * v16 + 8) = v18;
          *(_BYTE *)(v15 + v16 + 24) = v14;
          v15 = *(_QWORD *)(v4 + 16);
          *(float *)(v15 + 4) = v18 * *(float *)(v15 + 4);
          LODWORD(v16) = *(_DWORD *)(v15 + 28);
          goto LABEL_34;
        }
        if (v16 > 3)
          goto LABEL_34;
        v17 = *(float *)(*(_QWORD *)(v4 + 32) + 488);
LABEL_32:
        v18 = v13 * v17;
        goto LABEL_33;
      }
      if ((_DWORD)v14 == 1)
      {
        v15 = *(_QWORD *)(v4 + 16);
        v16 = *(unsigned int *)(v15 + 28);
        if (v16 <= 3)
        {
          v17 = *(float *)(*(_QWORD *)(v4 + 32) + 452);
          goto LABEL_32;
        }
LABEL_34:
        *(_DWORD *)(v15 + 28) = v16 + 1;
      }
      ++v10;
      v9 += 2;
      if (v10 >= a2[3].var1)
        goto LABEL_36;
    }
    v15 = *(_QWORD *)(v4 + 16);
    v16 = *(unsigned int *)(v15 + 28);
    if (v16 > 3)
      goto LABEL_34;
    v17 = *(float *)(*(_QWORD *)(v4 + 32) + 184);
    goto LABEL_32;
  }
  if (!*(_BYTE *)(*(_QWORD *)(this + 8) + 48))
  {
    *(_QWORD *)(this + 64) = a2[3].var0;
    *(_QWORD *)(this + 120) = a2[2].var3;
    *(_DWORD *)(this + 52) = HIDWORD(a2[2].var5) - 200;
    a2[3].var0 = 0;
    v7 = *(unsigned __int8 *)(this + 148);
    if (v7 == 72)
    {
      if (kMTFEExclamFinalRaisingRatio)
      {
        MTBEDebugParams::GetParam((const __CFString *)kMTFEExclamFinalRaisingRatio, (const __CFString *)a333, a3, *(float *)a333);
        kMTFEExclamFinalRaisingRatio = 0;
      }
      *(_DWORD *)(v4 + 176) = *(_DWORD *)a333;
      v8 = &kMTFEExclamFinalRaisingDuration;
    }
    else if (v7 == 71)
    {
      if (kMTFEQuestFinalRaisingRatio)
      {
        MTBEDebugParams::GetParam((const __CFString *)kMTFEQuestFinalRaisingRatio, (const __CFString *)&dword_1EFC74E28, a3, *(float *)&dword_1EFC74E28);
        kMTFEQuestFinalRaisingRatio = 0;
      }
      *(_DWORD *)(v4 + 176) = dword_1EFC74E28;
      v8 = &kMTFEQuestFinalRaisingDuration;
    }
    else if (*(_BYTE *)(this + 165))
    {
      if (kMTFEWHQuestFinalRaisingRatio)
      {
        MTBEDebugParams::GetParam((const __CFString *)kMTFEWHQuestFinalRaisingRatio, (const __CFString *)&dword_1EFC74E68, a3, *(float *)&dword_1EFC74E68);
        kMTFEWHQuestFinalRaisingRatio = 0;
      }
      *(_DWORD *)(v4 + 176) = dword_1EFC74E68;
      v8 = &kMTFEWHQuestFinalRaisingDuration;
    }
    else
    {
      if (kMTFEDeclFinalRaisingRatio)
      {
        MTBEDebugParams::GetParam((const __CFString *)kMTFEDeclFinalRaisingRatio, (const __CFString *)&dword_1EFC74E88, a3, *(float *)&dword_1EFC74E88);
        kMTFEDeclFinalRaisingRatio = 0;
      }
      *(_DWORD *)(v4 + 176) = dword_1EFC74E88;
      v8 = &kMTFEDeclFinalRaisingDuration;
    }
    v30 = (float *)(v8 + 1);
    if (*v8)
    {
      v30 = (float *)(v8 + 1);
      MTBEDebugParams::GetParam(*v8, (const __CFString *)(v8 + 1), a3, *((float *)v8 + 2));
      *v8 = 0;
    }
    v31 = (int)*v30;
    *(_DWORD *)(v4 + 180) = v31;
    v32 = LODWORD(a2[2].var6) - *(_DWORD *)(v4 + 100) - v31;
    *(_DWORD *)(v4 + 156) = v32;
    if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "FL %5.3f %d %d\n", *(float *)(v4 + 176), v31, v32);
    if (*(_BYTE *)(v4 + 48))
      MTFEToBIPitch::GeneratePitch((MTFEToBIPitch *)v4);
    else
      MTFEToBIPitch::GenerateMonotone((MTBEParam **)v4);
    this = *(_QWORD *)(v4 + 64);
    if (this)
    {
      do
      {
        v33 = *(_QWORD *)(this + 8);
        MEMORY[0x1D8233BA8]();
        this = v33;
      }
      while (v33);
    }
  }
  return this;
}

uint64_t MTFEToBIPitch::AddProsodicToken(MTFEToBIPitch *this, int a2, float a3, MTFEPhoneme *a4, int a5, int a6, float *a7)
{
  uint64_t result;
  uint64_t v15;
  float *v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t *v20;

  result = operator new();
  v15 = result;
  *(_BYTE *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  v16 = (float *)*((_QWORD *)this + 2);
  v18 = *v16;
  v17 = v16[1];
  *(float *)(result + 24) = a3;
  *(float *)(result + 28) = v17 * v18;
  *(_QWORD *)(result + 32) = *(_QWORD *)((char *)this + 140);
  *(_QWORD *)(result + 40) = a4;
  *(_DWORD *)(result + 48) = a5;
  *(_DWORD *)(result + 52) = -1;
  *(_QWORD *)(result + 56) = a7;
  *(_DWORD *)(result + 64) = a6;
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    result = fprintf((FILE *)*MEMORY[0x1E0C80C10], "Pros %d %d(%s) %5.3f %5.3f\n", a5, a2, MTFEToBI::sTone[a2], a3, v17);
  v19 = *((_QWORD *)this + 9);
  *(_QWORD *)(v15 + 16) = v19;
  if (v19)
    v20 = (uint64_t *)(v19 + 8);
  else
    v20 = (uint64_t *)((char *)this + 64);
  *v20 = v15;
  *((_QWORD *)this + 9) = v15;
  return result;
}

void MTFEToBIPitch::GeneratePitch(MTFEToBIPitch *this)
{
  float *v2;
  float v3;
  float *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  unsigned __int8 *v12;
  float *v13;
  float v14;
  const MTFEToBIPitch::Token *v15;
  int v16;
  int v17;
  float v18;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  _BYTE *v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  float v50;
  float v51;
  float v52;
  unsigned __int8 *v53;
  uint64_t v54;
  float v55;
  int v56;
  float v57;
  float v58;
  float v59;
  float v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  float v67;
  int v68;
  _BYTE *v69;
  int v70;
  float v71;
  float v72;
  uint64_t v73;
  float *v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float *v79;
  int v80;
  float v81;
  float v82;
  unsigned int v83;
  float v84;
  int v85;
  uint64_t v86;
  float *v87;
  uint64_t v88;
  float v89[2];
  void *v90[6];
  char v91;
  __int128 v92;
  uint64_t v93;
  void *__p;
  char v95;

  *((_QWORD *)this + 16) = *((_QWORD *)this + 15);
  v3 = MTFEToBIPitch::Ref(this, 0, *((const MTFEToBIPitch::Token **)this + 8));
  *((float *)this + 34) = v3;
  v4 = (float *)*((_QWORD *)this + 16);
  *v4 = v3;
  *((_QWORD *)this + 16) = v4 + 1;
  v5 = (unsigned __int8 *)*((_QWORD *)this + 8);
  if (v5)
  {
    while (1)
    {
      v6 = *((int *)v5 + 12);
      v7 = *((_QWORD *)this + 15);
      v8 = v7 + 4 * v6;
      v9 = v8 + 800;
      switch(*v5)
      {
        case 1u:
        case 2u:
          if (kMTFELowPhraseProm)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTFELowPhraseProm, (const __CFString *)&dword_1EFC74ED8, v2, *(float *)&dword_1EFC74ED8);
            kMTFELowPhraseProm = 0;
          }
          if (*(float *)&dword_1EFC74ED8 == 0.0)
            v10 = MTFEToBIPitch::Low(this, -1, (const MTFEToBIPitch::Token *)v5);
          else
            v10 = MTFEToBIPitch::LowForProm(this, -1, (const MTFEToBIPitch::Token *)v5, *(float *)&dword_1EFC74ED8);
          v52 = v10;
          if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
          {
            TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v92, MTFEToBI::sTone[*v5]);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - 1, v52, 1);
            TheoreticalAccentShape::print((TheoreticalAccentShape *)&v92, (__sFILE *)*MEMORY[0x1E0C80C10]);
            if (v95 < 0)
              operator delete(__p);
            if ((_QWORD)v92)
            {
              *((_QWORD *)&v92 + 1) = v92;
              operator delete((void *)v92);
            }
          }
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v8 + 796), v52);
          v53 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
          if (v53 && *v53 - 5 < 2)
            goto LABEL_98;
          MTFESpeechPedigree::MTFESpeechPedigree((MTFESpeechPedigree *)&v92, *((MTFESpeechElement **)v5 + 5));
          v54 = *(int *)(v93 + 72);
          v55 = MTFEToBIPitch::Ref(this, v54 - *((_DWORD *)v5 + 12), (const MTFEToBIPitch::Token *)v5);
          v56 = *(_DWORD *)(*((_QWORD *)this + 4) + 124);
          if ((int)v54 - *((_DWORD *)v5 + 12) > v56)
            MTFEToBIPitch::Slope((uint64_t)this, (float *)(*((_QWORD *)this + 15) + 4 * ((int)v54 - v56) + 800), v52);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(*((_QWORD *)this + 15) + 4 * v54 + 800), v55);
          goto LABEL_89;
        case 3u:
          if (kMTFEHighPhraseProm)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTFEHighPhraseProm, (const __CFString *)&dword_1EFC74EE8, v2, *(float *)&dword_1EFC74EE8);
            kMTFEHighPhraseProm = 0;
          }
          if (*(float *)&dword_1EFC74EE8 == 0.0)
            v11 = MTFEToBIPitch::High(this, -1, (const MTFEToBIPitch::Token *)v5);
          else
            v11 = MTFEToBIPitch::HighForProm(this, -1, (const MTFEToBIPitch::Token *)v5, *(float *)&dword_1EFC74EE8);
          v65 = v11;
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v8 + 796), v11);
          MTFESpeechPedigree::MTFESpeechPedigree((MTFESpeechPedigree *)&v92, *((MTFESpeechElement **)v5 + 5));
          v66 = *(int *)(v93 + 72);
          v67 = MTFEToBIPitch::Ref(this, v66 - *((_DWORD *)v5 + 12), (const MTFEToBIPitch::Token *)v5);
          v68 = *(_DWORD *)(*((_QWORD *)this + 4) + 124);
          if ((int)v66 - *((_DWORD *)v5 + 12) > v68)
            MTFEToBIPitch::Slope((uint64_t)this, (float *)(*((_QWORD *)this + 15) + 4 * ((int)v66 - v68) + 800), v65);
          v69 = (_BYTE *)*((_QWORD *)v5 + 1);
          if (!v69 || *v69 != 6)
            MTFEToBIPitch::Slope((uint64_t)this, (float *)(*((_QWORD *)this + 15) + 4 * v66 + 800), v67);
          if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
          {
            TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)v90, MTFEToBI::sTone[*v5]);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)v90, *((_DWORD *)v5 + 12) - 1, v65, 1);
            TheoreticalAccentShape::print((TheoreticalAccentShape *)v90, (__sFILE *)*MEMORY[0x1E0C80C10]);
            if (v91 < 0)
              operator delete(v90[4]);
            if (v90[0])
            {
              v90[1] = v90[0];
              operator delete(v90[0]);
            }
          }
LABEL_89:
          MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v92);
          goto LABEL_98;
        case 5u:
          if (**((_BYTE **)v5 + 2) == 3)
          {
            MTFEToBIPitch::Slope((uint64_t)this, (float *)(v8 + 796), *((float *)this + 34));
            if ((MTBEDebugFlags::sMTXDebug & 0x200) == 0)
              goto LABEL_98;
            TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v92, MTFEToBI::sTone[*v5]);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - 1, *((float *)this + 34), 1);
            TheoreticalAccentShape::print((TheoreticalAccentShape *)&v92, (__sFILE *)*MEMORY[0x1E0C80C10]);
            goto LABEL_94;
          }
          if (kMTFELowFinalProm)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTFELowFinalProm, (const __CFString *)&dword_1EFC74EF8, v2, *(float *)&dword_1EFC74EF8);
            kMTFELowFinalProm = 0;
          }
          if (*(float *)&dword_1EFC74EF8 == 0.0)
            v57 = MTFEToBIPitch::Low(this, -1, (const MTFEToBIPitch::Token *)v5);
          else
            v57 = MTFEToBIPitch::LowForProm(this, -1, (const MTFEToBIPitch::Token *)v5, *(float *)&dword_1EFC74EF8);
          v72 = v57;
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v9 - 4 * *((int *)this + 40) + 4), v57);
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v8 + 796), v72);
          if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
          {
            TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v92, MTFEToBI::sTone[*v5]);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) + 1, v72, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - 1, v72, 1);
            TheoreticalAccentShape::print((TheoreticalAccentShape *)&v92, (__sFILE *)*MEMORY[0x1E0C80C10]);
            goto LABEL_94;
          }
          goto LABEL_98;
        case 6u:
          v12 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
          if (*v12 - 1 >= 3)
          {
            MTBEAbort(*((MTFESpeechElement **)this + 21));
          }
          v14 = MTFEToBIPitch::High(this, -1, (const MTFEToBIPitch::Token *)v5);
          if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
          {
            TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v92, MTFEToBI::sTone[*v5]);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) + 1, v14, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - 1, v14, 1);
            TheoreticalAccentShape::print((TheoreticalAccentShape *)&v92, (__sFILE *)*MEMORY[0x1E0C80C10]);
            if (v95 < 0)
              operator delete(__p);
            if ((_QWORD)v92)
            {
              *((_QWORD *)&v92 + 1) = v92;
              operator delete((void *)v92);
            }
          }
          v15 = (const MTFEToBIPitch::Token *)*((_QWORD *)v12 + 2);
          v16 = *((_DWORD *)v12 + 12);
          v17 = *((_DWORD *)v5 + 12);
          if (kMTFEHighBoundaryWidth)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTFEHighBoundaryWidth, (const __CFString *)&dword_1EFC74F08, v13, *(float *)&dword_1EFC74F08);
            kMTFEHighBoundaryWidth = 0;
          }
          v18 = *(float *)&dword_1EFC74F08;
          if ((float)((float)v17 - *(float *)&dword_1EFC74F08) >= (float)v16 || v15 == 0)
            goto LABEL_28;
          v61 = *(unsigned __int8 *)v15;
          if (v61 > 0xC)
            goto LABEL_28;
          if (((1 << v61) & 0x1500) != 0)
          {
            v70 = *((_DWORD *)v15 + 12);
            v71 = MTFEToBIPitch::High(this, -1, v15);
LABEL_104:
            v76 = v71;
            if (*((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) > *((_DWORD *)v15 + 12))
            {
              v77 = (float)*((int *)v12 + 12);
              v78 = (*(float (**)(MTFEToBIPitch *, unsigned __int8 *))(*(_QWORD *)this + 112))(this, v5);
              LinearFunction::LinearFunction((LinearFunction *)v90, (float)v70, v76, v77, v78);
              v80 = *((_DWORD *)v5 + 12);
              if (kMTFEHighBoundaryWidth)
              {
                MTBEDebugParams::GetParam((const __CFString *)kMTFEHighBoundaryWidth, (const __CFString *)&dword_1EFC74F08, v79, *(float *)&dword_1EFC74F08);
                kMTFEHighBoundaryWidth = 0;
              }
              v81 = (float)v80 - *(float *)&dword_1EFC74F08;
              v82 = (*(float (**)(MTFEToBIPitch *, unsigned __int8 *))(*(_QWORD *)this + 112))(this, v5);
              LinearFunction::LinearFunction((LinearFunction *)v89, v81, v82, (float)(*((_DWORD *)v5 + 12) - *((_DWORD *)this + 40)), v14);
              if (*(float *)v90 == v89[0]
                || (*(float *)&v83 = (float)(v89[1] - *((float *)v90 + 1)) / (float)(*(float *)v90 - v89[0]),
                    v84 = *((float *)v90 + 1) + (float)(*(float *)v90 * *(float *)&v83),
                    LOBYTE(v92) = 1,
                    *(_QWORD *)((char *)&v92 + 4) = v83 | ((unint64_t)LODWORD(v84) << 32),
                    v85 = (int)*(float *)&v83,
                    v70 > (int)*(float *)&v83)
                || *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) < v85)
              {
                *((float *)this + 34) = v76;
                v86 = *((_QWORD *)this + 15) + 4 * v70;
                goto LABEL_111;
              }
              *((float *)this + 34) = v76;
              v88 = *((_QWORD *)this + 15);
              *((_QWORD *)this + 16) = v88 + 4 * v70 + 800;
              MTFEToBIPitch::Slope((uint64_t)this, (float *)(v88 + 4 * (v85 - 1) + 800), v84);
LABEL_30:
              MTFEToBIPitch::Slope((uint64_t)this, (float *)(v9 - 4 * *((int *)this + 40) + 4), v14);
              goto LABEL_31;
            }
            *((float *)this + 34) = v71;
            v64 = *((_QWORD *)this + 15) + 4 * v70;
            goto LABEL_113;
          }
          if (((1 << v61) & 0x880) == 0)
          {
            if (v61 != 9)
            {
LABEL_28:
              v20 = *((float *)this + 34);
LABEL_29:
              MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v9 - 4 * (int)v18), v20);
              goto LABEL_30;
            }
            v70 = *(_DWORD *)(*((_QWORD *)this + 4) + 152) + *((_DWORD *)v15 + 12);
            v71 = MTFEToBIPitch::PlusHigh((float **)this, -1, v15);
            goto LABEL_104;
          }
          v62 = *((_DWORD *)v5 + 12);
          v63 = *((int *)v15 + 12);
          if ((float)((float)v62 - *(float *)&dword_1EFC74F08) >= (float)(int)v63)
          {
            v20 = MTFEToBIPitch::Low(this, -1, v15);
            *((float *)this + 34) = v20;
            *((_QWORD *)this + 16) = *((_QWORD *)this + 15) + 4 * *((int *)v15 + 12) + 800;
            if (kMTFEHighBoundaryWidth)
            {
              MTBEDebugParams::GetParam((const __CFString *)kMTFEHighBoundaryWidth, (const __CFString *)&dword_1EFC74F08, v87, *(float *)&dword_1EFC74F08);
              kMTFEHighBoundaryWidth = 0;
              v20 = *((float *)this + 34);
            }
            v18 = *(float *)&dword_1EFC74F08;
            goto LABEL_29;
          }
          if (v62 - *((_DWORD *)this + 40) >= (int)v63)
          {
            *((float *)this + 34) = MTFEToBIPitch::Low(this, -1, v15);
            v86 = *((_QWORD *)this + 15) + 4 * *((int *)v15 + 12);
LABEL_111:
            *((_QWORD *)this + 16) = v86 + 800;
            goto LABEL_30;
          }
          *((float *)this + 34) = v14;
          v64 = *((_QWORD *)this + 15) + 4 * v63;
LABEL_113:
          *((_QWORD *)this + 16) = v64 + 800;
LABEL_31:
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v8 + 796), v14);
LABEL_98:
          if (!*((_QWORD *)v5 + 1))
          {
            v73 = *((int *)this + 13);
            v74 = (float *)(*((_QWORD *)this + 15) + 4 * v73 + 796);
            v75 = MTFEToBIPitch::Ref(this, v73 + ~*((_DWORD *)v5 + 12), (const MTFEToBIPitch::Token *)v5);
            MTFEToBIPitch::Slope((uint64_t)this, v74, v75);
          }
LABEL_100:
          v5 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
          if (!v5)
            goto LABEL_119;
          break;
        case 7u:
          v21 = MTFEToBIPitch::LowStarLeg((float **)this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v9 - 4 * *(int *)(*((_QWORD *)this + 4) + 168)), v21);
          v22 = MTFEToBIPitch::Low(this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v9 - 4 * *((int *)this + 40) + 4), v22);
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v8 + 796), v22);
          if ((MTBEDebugFlags::sMTXDebug & 0x200) == 0)
            goto LABEL_98;
          TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v92, MTFEToBI::sTone[*v5]);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - *(_DWORD *)(*((_QWORD *)this + 4) + 168), v21, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) + 1, v22, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - 1, v22, 1);
          TheoreticalAccentShape::print((TheoreticalAccentShape *)&v92, (__sFILE *)*MEMORY[0x1E0C80C10]);
          goto LABEL_94;
        case 8u:
          v23 = *((_QWORD *)v5 + 1);
          if (v23)
          {
            if (*(_BYTE *)v23 == 3)
            {
              v24 = *(_BYTE **)(v23 + 8);
              if (v24)
              {
                if (*v24 == 6)
                  *((float *)v5 + 6) = *((float *)v5 + 6) * 0.5;
              }
            }
          }
          v25 = *((_QWORD *)this + 4);
          v26 = *(int *)(v25 + 128);
          v27 = *(int *)(v25 + 428);
          v28 = *((int *)v5 + 13);
          if ((int)v6 <= (int)v28 + (int)v26)
          {
            v58 = MTFEToBIPitch::LowPlus(this, ~(_DWORD)v26, (const MTFEToBIPitch::Token *)v5);
            MTFEToBIPitch::Slope((uint64_t)this, (float *)(v9 - 4 * *((int *)this + 40) - 4 * v26), v58);
            MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v9 - 4 * v26 - 4), v58);
            v59 = MTFEToBIPitch::PlusHighStarLeg(this, ~(_DWORD)v27, (const MTFEToBIPitch::Token *)v5);
            MTFEToBIPitch::Slope((uint64_t)this, (float *)(v9 - 4 * v27 - 4), v59);
            v60 = MTFEToBIPitch::High(this, -1, (const MTFEToBIPitch::Token *)v5);
            MTFEToBIPitch::Slope((uint64_t)this, (float *)(v9 - 4 * *((int *)this + 40) + 4), v60);
            MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v8 + 796), v60);
            if ((MTBEDebugFlags::sMTXDebug & 0x200) == 0)
              goto LABEL_98;
            TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v92, MTFEToBI::sTone[*v5]);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) - v26, v58, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) + ~(_DWORD)v26, v58, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) + ~(_DWORD)v27, v59, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) + 1, v60, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - 1, v60, 1);
            TheoreticalAccentShape::print((TheoreticalAccentShape *)&v92, (__sFILE *)*MEMORY[0x1E0C80C10]);
          }
          else
          {
            v29 = (float *)(v7 + 4 * v28 + 800);
            v30 = MTFEToBIPitch::LowPlus(this, ((unint64_t)v29 - v9) >> 2, (const MTFEToBIPitch::Token *)v5);
            MTFEToBIPitch::Slope((uint64_t)this, &v29[-*((int *)this + 40)], v30);
            MTFEToBIPitch::Plateau((uint64_t)this, v29, v30);
            v31 = MTFEToBIPitch::PlusHighStarLeg(this, ((unint64_t)&v29[(v26 - v27)] - v9) >> 2, (const MTFEToBIPitch::Token *)v5);
            MTFEToBIPitch::Slope((uint64_t)this, &v29[v26 - v27], v31);
            v32 = MTFEToBIPitch::High(this, -1, (const MTFEToBIPitch::Token *)v5);
            MTFEToBIPitch::Slope((uint64_t)this, (float *)(v9 - 4 * *((int *)this + 40) + 4), v32);
            MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v8 + 796), v32);
            if ((MTBEDebugFlags::sMTXDebug & 0x200) == 0)
              goto LABEL_98;
            TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v92, MTFEToBI::sTone[*v5]);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 13) - *((_DWORD *)this + 40), v30, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 13), v30, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 13) + v26 - v27, v31, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) + 1, v32, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - 1, v32, 1);
            TheoreticalAccentShape::print((TheoreticalAccentShape *)&v92, (__sFILE *)*MEMORY[0x1E0C80C10]);
          }
LABEL_94:
          if (v95 < 0)
            operator delete(__p);
          if ((_QWORD)v92)
          {
            *((_QWORD *)&v92 + 1) = v92;
            operator delete((void *)v92);
          }
          goto LABEL_98;
        case 9u:
          v33 = MTFEToBIPitch::Low(this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v9 - 4 * *((int *)this + 40) - 4), v33);
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v8 + 796), v33);
          v34 = MTFEToBIPitch::LowStarPlusLeg((float **)this, *(_DWORD *)(*((_QWORD *)this + 4) + 152) - 1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v9 + 4 * *(int *)(*((_QWORD *)this + 4) + 156) - 4), v34);
          v35 = MTFEToBIPitch::PlusHigh((float **)this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v9 + 4 * *(int *)(*((_QWORD *)this + 4) + 152) - 4 * *((int *)this + 40) - 4), v35);
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v9 + 4 * *(int *)(*((_QWORD *)this + 4) + 152) - 4), v35);
          if ((MTBEDebugFlags::sMTXDebug & 0x200) == 0)
            goto LABEL_98;
          TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v92, MTFEToBI::sTone[*v5]);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) + ~*((_DWORD *)this + 40), v33, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - 1, v33, 1);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) + *(_DWORD *)(*((_QWORD *)this + 4) + 156) - 1, v34, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *(_DWORD *)(*((_QWORD *)this + 4) + 152) + *((_DWORD *)v5 + 12) + ~*((_DWORD *)this + 40), v35, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) + *(_DWORD *)(*((_QWORD *)this + 4) + 152) - 1, v35, 0);
          TheoreticalAccentShape::print((TheoreticalAccentShape *)&v92, (__sFILE *)*MEMORY[0x1E0C80C10]);
          goto LABEL_94;
        case 0xAu:
          v36 = *((_QWORD *)v5 + 1);
          if (v36)
          {
            if (*(_BYTE *)v36 == 3)
            {
              v37 = *(_BYTE **)(v36 + 8);
              if (v37)
              {
                if (*v37 == 6)
                  *((float *)v5 + 6) = *((float *)v5 + 6) * 0.5;
              }
            }
          }
          v38 = MTFEToBIPitch::HighStarLeg(this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v9 - 4 * *(int *)(*((_QWORD *)this + 4) + 100)), v38);
          v39 = MTFEToBIPitch::High(this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v9 - 4 * *((int *)this + 40) + 4), v39);
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v8 + 796), v39);
          if ((MTBEDebugFlags::sMTXDebug & 0x200) == 0)
            goto LABEL_98;
          TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v92, MTFEToBI::sTone[*v5]);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - *(_DWORD *)(*((_QWORD *)this + 4) + 100), v38, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) + 1, v39, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - 1, v39, 1);
          TheoreticalAccentShape::print((TheoreticalAccentShape *)&v92, (__sFILE *)*MEMORY[0x1E0C80C10]);
          goto LABEL_94;
        case 0xBu:
          v40 = *((_QWORD *)this + 4);
          v41 = *(int *)(v40 + 128);
          v42 = *(int *)(v40 + 432);
          v43 = MTFEToBIPitch::HighPlus((float **)this, ~(_DWORD)v41, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v9 - 4 * *((int *)this + 40) - 4 * v41), v43);
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v9 - 4 * v41 - 4), v43);
          v44 = MTFEToBIPitch::PlusLowStarLeg((float **)this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v9 - 4 * v42 - 4), v44);
          v45 = MTFEToBIPitch::Low(this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v9 - 4 * *((int *)this + 40) + 4), v45);
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v8 + 796), v45);
          if ((MTBEDebugFlags::sMTXDebug & 0x200) == 0)
            goto LABEL_98;
          TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v92, MTFEToBI::sTone[*v5]);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) - v41, v43, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) + ~(_DWORD)v41, v43, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) + ~(_DWORD)v42, v44, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) + 1, v45, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - 1, v45, 1);
          TheoreticalAccentShape::print((TheoreticalAccentShape *)&v92, (__sFILE *)*MEMORY[0x1E0C80C10]);
          goto LABEL_94;
        case 0xCu:
          v46 = *((_QWORD *)this + 4);
          v47 = *(int *)(v46 + 76);
          v48 = *(int *)(v46 + 408);
          v49 = MTFEToBIPitch::HighPlusDownstep((float **)this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v9 - 4 * *((int *)this + 40) - 4 * v47), v49);
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v9 - 4 * v47 - 4), v49);
          v50 = MTFEToBIPitch::DownsteppedHighStarLeg((float **)this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v9 - 4 * v48 - 4), v50);
          v51 = MTFEToBIPitch::High(this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v9 - 4 * *((int *)this + 40) + 4), v51);
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v8 + 796), v51);
          if ((MTBEDebugFlags::sMTXDebug & 0x200) == 0)
            goto LABEL_98;
          TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v92, MTFEToBI::sTone[*v5]);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) - v47, v49, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) + ~(_DWORD)v47, v49, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) + ~(_DWORD)v48, v50, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) + 1, v51, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v92, *((_DWORD *)v5 + 12) - 1, v51, 1);
          TheoreticalAccentShape::print((TheoreticalAccentShape *)&v92, (__sFILE *)*MEMORY[0x1E0C80C10]);
          goto LABEL_94;
        default:
          goto LABEL_100;
      }
    }
  }
LABEL_119:
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "TotalPitchFrames\t%d\n", *((_DWORD *)this + 13));
}

void sub_1D227C100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)va);
  _Unwind_Resume(a1);
}

void MTFEToBIPitch::GenerateMonotone(MTBEParam **this)
{
  int v2;
  MTBEParam *v3;
  int v4;
  uint64_t v5;

  v5 = 0;
  MTBEParam::GetPitchFloorRange(this[1], (float *)&v5 + 1, (float *)&v5);
  *((float *)&v5 + 1) = *((float *)&v5 + 1) + (float)(*(float *)&v5 * *((float *)this[4] + 114));
  v2 = *((_DWORD *)this + 13);
  if (v2 >= -199)
  {
    v3 = this[15];
    v4 = ((v2 + 199) & ~((v2 + 199) >> 31)) + 1;
    do
    {
      *(_DWORD *)v3 = HIDWORD(v5);
      v3 = (MTBEParam *)((char *)v3 + 4);
      --v4;
    }
    while (v4);
    this[15] = v3;
  }
}

void MTFEToBIPitch::VisitIntermediatePhrase(MTFEToBIPitch *this, MTFESpeechElement *a2)
{
  float v4;
  float *v5;
  int v6;
  int v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  int var4_low;

  *(_WORD *)((char *)this + 107) = 0;
  *((_BYTE *)this + 110) = 0;
  *((_BYTE *)this + 112) = 0;
  *(_DWORD *)(&a2[1].var2 + 2) = *((_DWORD *)this + 13) + 1;
  *((_DWORD *)this + 14) = 0;
  MTFESpeechElement::VisitChildren(a2, this);
  LODWORD(a2[1].var3) = *((_DWORD *)this + 13) - *((_DWORD *)this + 14);
  if (a2->var5->var4 == a2)
  {
    if (*((_BYTE *)this + 148) == 71)
    {
      v5 = (float *)*((_QWORD *)this + 9);
      if (v5 && (*(unsigned __int8 *)v5 | 2) == 0xA)
        v4 = v5[6];
      else
        v4 = *(float *)(*((_QWORD *)this + 4) + 448);
      v6 = 3;
    }
    else
    {
      v4 = *(float *)(*((_QWORD *)this + 4) + 172);
LABEL_18:
      v6 = 1;
    }
  }
  else
  {
    switch(LOBYTE(a2[1].var4))
    {
      case 0xB:
        v4 = *(float *)(*((_QWORD *)this + 4) + 460);
        goto LABEL_18;
      case 0xC:
        v4 = *(float *)(*((_QWORD *)this + 4) + 464);
        goto LABEL_18;
      case 0xD:
        v4 = *(float *)(*((_QWORD *)this + 4) + 468);
        goto LABEL_18;
      case 0xE:
        v4 = *(float *)(*((_QWORD *)this + 4) + 472);
        goto LABEL_18;
      case 0xF:
        v4 = *(float *)(*((_QWORD *)this + 4) + 476);
        goto LABEL_18;
      case 0x10:
        v4 = *(float *)(*((_QWORD *)this + 4) + 480);
        goto LABEL_18;
      case 0x11:
        v4 = *(float *)(*((_QWORD *)this + 4) + 484);
        goto LABEL_18;
      default:
        v6 = 1;
        v4 = 0.4;
        break;
    }
  }
  v7 = BYTE1(a2[1].var4);
  if (!BYTE1(a2[1].var4))
  {
    BYTE1(a2[1].var4) = v6;
    v7 = v6;
  }
  v8 = *((float *)&a2[1].var4 + 1);
  if (v8 == 0.0)
  {
    *((float *)&a2[1].var4 + 1) = v4;
    v8 = v4;
  }
  MTFEToBIPitch::AddProsodicToken(this, v7, v8, *((MTFEPhoneme **)this + 10), *((_DWORD *)this + 25), 0, 0);
  v10 = (float *)*((_QWORD *)this + 2);
  v11 = *v10 + -1.0;
  if (kMTFEParagraphRangePhrasalDownStep)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTFEParagraphRangePhrasalDownStep, (const __CFString *)&dword_1EFC74DF8, v9, *(float *)&dword_1EFC74DF8);
    kMTFEParagraphRangePhrasalDownStep = 0;
    v10 = (float *)*((_QWORD *)this + 2);
  }
  *v10 = (float)(v11 * *(float *)&dword_1EFC74DF8) + 1.0;
  var4_low = LOBYTE(a2[1].var4);
  if (var4_low == 14 || var4_low == 11)
    MTFEToBIPitch::DownStepBoost(this);
}

uint64_t MTFEToBIPitch::VisitWord(MTFEToBIPitch *this, MTFESpeechElement *a2)
{
  SLWordTagSet *v4;
  char v5;
  uint64_t result;

  *((_BYTE *)this + 96) = BYTE6(a2[1].var4);
  v4 = (SLWordTagSet *)((char *)&a2[1].var5 + 4);
  *((_BYTE *)this + 113) = SLWordTagSet::find((SLWordTagSet *)((char *)&a2[1].var5 + 4));
  *((_BYTE *)this + 106) = BYTE6(a2[1].var0) == 1;
  *((_BYTE *)this + 108) = *((_BYTE *)this + 107);
  v5 = *((_BYTE *)this + 110);
  if (v5)
    v5 = *((_BYTE *)this + 96) == 19;
  *((_BYTE *)this + 109) = v5;
  *((_BYTE *)this + 110) = 0;
  MTFECommands::Visit((uint64_t)&a2[2], (uint64_t)this);
  MTFESpeechElement::VisitChildren(a2, this);
  if (((uint64_t)a2[1].var0 & 0x40) == 0)
    *((_BYTE *)this + 111) = 0;
  result = SLWordTagSet::find(v4);
  *((_BYTE *)this + 112) = result;
  return result;
}

MTFESpeechElement *MTFEToBIPitch::VisitSyllable(MTFEToBIPitch *this, MTFESpeechElement *a2)
{
  *((_QWORD *)this + 11) = a2;
  if (HIWORD(a2[1].var0))
    ++*((_WORD *)this + 58);
  return MTFESpeechElement::VisitChildren(a2, this);
}

uint64_t MTFEToBIPitch::VisitPhoneme(uint64_t this, MTFEPhoneme *a2, float *a3)
{
  uint64_t v4;
  int v5;
  int var13;
  int v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  float v17;
  int v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;

  v4 = this;
  v5 = *(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * a2->var9);
  var13 = (int)a2->var13;
  v7 = *(_DWORD *)(this + 52) + var13;
  if (a2->var9)
    var13 = 0;
  *(_DWORD *)(this + 52) = v7;
  *(_DWORD *)(this + 56) = var13;
  v8 = *(_QWORD *)(this + 88);
  if (*(_WORD *)(v8 + 62))
    v9 = (v5 & 1) == 0;
  else
    v9 = 1;
  if (!v9 && (a2->var15 & 0x1C00) != 0)
  {
    if (*(float *)(v8 + 64) != 0.0)
    {
LABEL_11:
      v10 = 1;
LABEL_12:
      if (!*(_BYTE *)(v4 + 108))
      {
LABEL_64:
        this = MTFEToBIPitch::AddProsodicToken((MTFEToBIPitch *)v4, *(unsigned __int8 *)(*(_QWORD *)(v4 + 88) + 62), *(float *)(*(_QWORD *)(v4 + 88) + 64), a2, *(_DWORD *)(v4 + 52), (int)a2->var13, 0);
        goto LABEL_65;
      }
      if (((1 << *(_BYTE *)(v4 + 96)) & 0x3E) == 0 || (v11 = *(__int16 *)(v4 + 118), v11 < 1))
      {
        if ((v10 & 1) == 0)
        {
          v13 = *(_QWORD *)(v4 + 88);
          *(_DWORD *)(v13 + 64) = *(_DWORD *)(*(_QWORD *)(v4 + 32) + 48);
          *(_WORD *)(v13 + 62) = 8;
        }
        *(_WORD *)(v4 + 107) = 0;
        goto LABEL_64;
      }
      if ((v10 & 1) == 0)
      {
        if (kMTFEVerbDowngradeFactor)
        {
          MTBEDebugParams::GetParam((const __CFString *)kMTFEVerbDowngradeFactor, (const __CFString *)&dword_1EFC74EC8, a3, *(float *)&dword_1EFC74EC8);
          kMTFEVerbDowngradeFactor = 0;
          LOWORD(v11) = *(_WORD *)(v4 + 118);
        }
        *(float *)(*(_QWORD *)(v4 + 88) + 64) = *(float *)&dword_1EFC74EC8 * *(float *)(*(_QWORD *)(v4 + 88) + 64);
      }
      *(_BYTE *)(v4 + 109) = 1;
      v12 = v11 - 1;
LABEL_63:
      *(_WORD *)(v4 + 118) = v12;
      goto LABEL_64;
    }
    if (*(_BYTE *)(this + 106))
    {
      *(_DWORD *)(v8 + 64) = *(_DWORD *)(*(_QWORD *)(this + 32) + 36);
      goto LABEL_11;
    }
    v14 = *(unsigned __int16 *)(this + 116);
    v15 = *(unsigned __int16 *)(this + 114);
    if (v14 == 1)
    {
      v16 = *(_QWORD *)(this + 32);
      if (v15 == 2)
      {
        v17 = *(float *)(v16 + 52);
LABEL_43:
        *(float *)(v8 + 64) = v17;
        goto LABEL_44;
      }
      v19 = *(float *)(v16 + 48);
      *(float *)(v8 + 64) = v19;
      if (v15 != 1 || *(_BYTE *)(this + 148) != 72)
      {
LABEL_44:
        if (*(_BYTE *)(v4 + 112) && *(_BYTE *)(v4 + 113))
        {
          *(_WORD *)(v8 + 62) = 7;
          *(_BYTE *)(v4 + 113) = 0;
        }
        if (*(_WORD *)(v8 + 62) == 8
          && ((v22 = *(unsigned __int8 *)(v4 + 96), ((1 << v22) & 0x3E) != 0) || v22 == 17 && *(_BYTE *)(v4 + 111))
          && MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDowngradeVerbs)
          && *(__int16 *)(v4 + 114) >= 2
          && (v23 = *(__int16 *)(v4 + 118), v23 >= 1))
        {
          if (kMTFEVerbDowngradeFactor)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTFEVerbDowngradeFactor, (const __CFString *)&dword_1EFC74EC8, a3, *(float *)&dword_1EFC74EC8);
            kMTFEVerbDowngradeFactor = 0;
            LOWORD(v23) = *(_WORD *)(v4 + 118);
          }
          v24 = *(_QWORD *)(v4 + 88);
          *(float *)(v24 + 64) = *(float *)&dword_1EFC74EC8 * *(float *)(v24 + 64);
          *(_WORD *)(v24 + 62) = 10;
          *(_BYTE *)(v4 + 107) = 1;
          *(_WORD *)(v4 + 109) = 257;
        }
        else
        {
          v10 = *(_BYTE *)(v4 + 109);
          if (!v10)
            goto LABEL_12;
          v23 = *(__int16 *)(v4 + 118);
          if (v23 < 1)
          {
            v10 = 0;
            goto LABEL_12;
          }
          if (kMTFEVerbDowngradeFactor)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTFEVerbDowngradeFactor, (const __CFString *)&dword_1EFC74EC8, a3, *(float *)&dword_1EFC74EC8);
            kMTFEVerbDowngradeFactor = 0;
            LOWORD(v23) = *(_WORD *)(v4 + 118);
          }
          *(float *)(*(_QWORD *)(v4 + 88) + 64) = *(float *)&dword_1EFC74EC8 * *(float *)(*(_QWORD *)(v4 + 88) + 64);
        }
        v12 = v23 - 1;
        goto LABEL_63;
      }
    }
    else
    {
      if (v14 != v15)
      {
        v9 = ((v15 ^ v14) & 1) == 0;
        v20 = 120;
        if (v9)
          v20 = 56;
        v17 = *(float *)(*(_QWORD *)(this + 32) + v20);
        goto LABEL_43;
      }
      if (v14 == 2)
      {
        v18 = *(unsigned __int8 *)(this + 148);
        v19 = *(float *)(*(_QWORD *)(this + 32) + 48);
        *(float *)(v8 + 64) = v19;
        if (v18 != 72)
          goto LABEL_44;
      }
      else
      {
        v21 = *(_QWORD *)(this + 32);
        if (*(_BYTE *)(this + 148) != 72)
        {
          v17 = *(float *)(v21 + 112);
          goto LABEL_43;
        }
        v19 = *(float *)(v21 + 32);
        *(float *)(v8 + 64) = v19;
      }
    }
    if (!*(_BYTE *)(this + 164))
    {
      if (kMTFEExclamPromBoost)
      {
        MTBEDebugParams::GetParam((const __CFString *)kMTFEExclamPromBoost, (const __CFString *)&dword_1EFC74EA8, a3, *(float *)&dword_1EFC74EA8);
        kMTFEExclamPromBoost = 0;
        v8 = *(_QWORD *)(v4 + 88);
        v19 = *(float *)(v8 + 64);
      }
      v17 = *(float *)&dword_1EFC74EA8 + v19;
      goto LABEL_43;
    }
    goto LABEL_44;
  }
LABEL_65:
  if (!*(_QWORD *)(v4 + 80) || (v5 & 4) != 0 && (a2->var15 & 0x4000) == 0)
  {
    *(_QWORD *)(v4 + 80) = a2;
    *(_DWORD *)(v4 + 100) = *(_DWORD *)(v4 + 52);
  }
  return this;
}

float MTFEToBIPitch::VisitCommand(MTFEToBIPitch *this, MTFECommand *a2)
{
  int64_t var8;
  uint64_t v4;
  int64_t Modulation;
  MTBEParam *v6;
  int64_t v7;
  MTBEParam *v8;
  uint64_t v9;
  int Pitch;
  uint64_t v11;
  MTBEParam *v12;
  int v13;

  var8 = a2->var8;
  if (var8 <= 1886220131)
  {
    if (var8 == 1885495666)
    {
      v6 = (MTBEParam *)*((_QWORD *)this + 1);
      v7 = (int)(12 * MTBEParam::GetPitch(v6) + (SLODWORD(a2->var9) >> 8) + 8025);
    }
    else
    {
      if (var8 != 1885495667)
        return MTBEParam::GetPitchFloorRange(*((MTBEParam **)this + 1), (float *)this + 35, (float *)this + 36);
      v6 = (MTBEParam *)*((_QWORD *)this + 1);
      v7 = a2->var9 >> 8;
    }
    v13 = MTBEParam::MidiToPitch(v6, v7);
    MTBEParam::SetPitch((uint64_t)v6, v13);
    return MTBEParam::GetPitchFloorRange(*((MTBEParam **)this + 1), (float *)this + 35, (float *)this + 36);
  }
  switch(var8)
  {
    case 1920165236:
      v8 = (MTBEParam *)*((_QWORD *)this + 3);
      if (v8)
      {
        if (a2->var9 == 1)
        {
          v9 = *((_QWORD *)this + 1);
          Pitch = MTBEParam::GetPitch(v8);
          MTBEParam::SetPitch(v9, Pitch);
          v11 = *((_QWORD *)this + 1);
          Modulation = MTBEParam::GetModulation(*((MTBEParam **)this + 3));
          v4 = v11;
          goto LABEL_13;
        }
        MTBEParam::ResetPitchParams((uint64_t)v8, *((__int16 **)this + 5));
      }
      MTBEParam::ResetPitchParams(*((_QWORD *)this + 1), *((__int16 **)this + 5));
      return MTBEParam::GetPitchFloorRange(*((MTBEParam **)this + 1), (float *)this + 35, (float *)this + 36);
    case 1886220146:
      v12 = (MTBEParam *)*((_QWORD *)this + 1);
      Modulation = a2->var9 + MTBEParam::GetModulation(v12);
      v4 = (uint64_t)v12;
      goto LABEL_13;
    case 1886220132:
      v4 = *((_QWORD *)this + 1);
      Modulation = a2->var9;
LABEL_13:
      MTBEParam::SetModulation(v4, Modulation);
      break;
  }
  return MTBEParam::GetPitchFloorRange(*((MTBEParam **)this + 1), (float *)this + 35, (float *)this + 36);
}

void MTFEToBIPitch::AdjustAlignment(MTFEToBIPitch *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned __int8 *v23;
  double v24;
  int v25;
  _BOOL4 v26;
  unsigned __int8 *v27;
  double v28;
  unsigned int v29;
  _BOOL4 v30;
  _BOOL4 v31;
  int v32;
  int v33;
  int v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  float v46;
  int v47;
  int v48;
  float v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  uint64_t v54;
  int v55;
  BOOL v56;
  uint64_t v57;
  int v58;
  _BYTE v59[48];
  uint64_t v60;
  _BYTE v61[24];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 8);
  if (v2)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_DWORD *)v2 + 12);
      v6 = *((_QWORD *)v2 + 5);
      *((_DWORD *)v2 + 13) = (int)(float)((float)v5 - *(float *)(v6 + 64));
      MTFESpeechPedigree::MTFESpeechPedigree((MTFESpeechPedigree *)v61, (MTFESpeechElement *)v6);
      v7 = *v2;
      switch(*v2)
      {
        case 1u:
        case 3u:
          v8 = *((_QWORD *)this + 4);
          v9 = 12;
          if (v7 == 3)
            v9 = 8;
          v10 = 400;
          if (v7 == 3)
            v10 = 396;
          v11 = (float)*(int *)(v8 + v9);
          v12 = *(_DWORD *)(v8 + v10);
          v13 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
          v14 = *v13 - 5;
          v15 = 104;
          if (v14 < 2)
            v15 = 108;
          v16 = (int)(float)((float)((float)v4 + v11)
                           + (float)((float)v12
                                   * fminf((float)(*(_DWORD *)(v62 + 72) - v4) / (float)*(int *)(v8 + v15), 1.0)));
          *((_DWORD *)v2 + 12) = v16;
          if (v14 > 1)
          {
            if (v5 < v16)
            {
              *((_DWORD *)v2 + 12) = v5;
              v16 = v5;
            }
          }
          else
          {
            v17 = *((_DWORD *)v13 + 12) - *((_DWORD *)this + 40);
            if (v17 < v16)
            {
              *((_DWORD *)v2 + 12) = v17;
              v16 = v17;
            }
          }
          goto LABEL_66;
        case 8u:
        case 0xAu:
          v18 = v1;
          v19 = *(__int16 *)(v63 + 174);
          v20 = v64;
          v21 = *(__int16 *)(v64 + 56);
          v22 = *(__int16 *)(v62 + 62);
          v23 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
          v24 = 0.0;
          if (v23)
          {
            v25 = *v23;
            if ((v25 | 2) == 3)
            {
              v26 = v25 == 1;
              v27 = (unsigned __int8 *)*((_QWORD *)v23 + 1);
              v28 = 1.0;
              if (v27)
              {
                v29 = *v27 - 5;
                v30 = v29 == 0;
                if (v29 <= 1)
                  v24 = 1.0;
                else
                  v24 = 0.0;
                if (v29 > 1)
                  v30 = 0;
                v31 = 0;
              }
              else
              {
                v30 = 0;
                v31 = 0;
              }
              goto LABEL_29;
            }
            MTFESpeechPedigree::MTFESpeechPedigree((MTFESpeechPedigree *)v59, *((MTFESpeechElement **)v23 + 5));
            v31 = *(__int16 *)(v64 + 56) + 1 == *(__int16 *)(v60 + 56);
            MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v59);
            v26 = 0;
            v30 = 0;
            v20 = v64;
          }
          else
          {
            v26 = 0;
            v30 = 0;
            v31 = 0;
          }
          v28 = 0.0;
LABEL_29:
          v32 = v19 - 1;
          v33 = v21 + 1;
          v34 = v22 - 1;
          if (v7 == 10)
            v35 = 1.0;
          else
            v35 = 0.0;
          if (v32 == v21)
            v36 = 1.0;
          else
            v36 = 0.0;
          if (v32 == v33)
            v37 = 1.0;
          else
            v37 = 0.0;
          if (v34 == v21)
            v38 = 1.0;
          else
            v38 = 0.0;
          if (v34 == v33)
            v39 = 1.0;
          else
            v39 = 0.0;
          v40 = *((_QWORD *)v2 + 5);
          v41 = *(__int16 *)(v40 + 56);
          v42 = v41 - *(__int16 *)(v20 + 58);
          if (v42 + 1 < 1)
          {
            v43 = 0;
            v1 = v18;
          }
          else
          {
            v43 = 0;
            v44 = v42 + 2;
            v45 = *((_QWORD *)v2 + 5);
            v1 = v18;
            do
            {
              v46 = *(float *)(v45 + 64);
              v45 = *(_QWORD *)(v45 + 48);
              v43 = (int)(float)(v46 + (float)v43);
              --v44;
            }
            while (v44 > 1);
          }
          v47 = *(__int16 *)(v20 + 60) + ~v41;
          v48 = 0;
          if (v47 >= 1)
          {
            do
            {
              v40 = *(_QWORD *)(v40 + 40);
              v48 = (int)(float)(*(float *)(v40 + 64) + (float)v48);
              --v47;
            }
            while (v47);
          }
          v49 = v35 * -0.030602
              + 1.090847
              + v36 * -0.376935
              + v37 * -0.056635
              + v28 * -0.059648
              + v24 * 2.822407
              + (double)v26 * -0.237752
              + (double)v30 * -3.033044
              + (double)v31 * -0.257898
              + v35 * -0.043025 * v36
              + v37 * 0.073297 * v28
              + v36 * -2.801309 * v24
              + v37 * -2.602059 * v24
              + v36 * 0.265622 * (double)v26
              + v24 * -2.736395 * (double)v26
              + v36 * 2.95485 * (double)v30
              + v37 * 2.808464 * (double)v30
              + (double)v26 * 2.82636 * (double)v30
              + v36 * 0.203654 * (double)v31
              + (double)v26 * -0.291976 * v38
              + v28 * -0.130482 * v39
              + v36 * 2.689319 * v24 * (double)v26
              + v37 * 2.559782 * v24 * (double)v26
              + v36 * -2.821848 * (double)v26 * (double)v30
              + v37 * -2.771837 * (double)v26 * (double)v30
              + v35 * -0.159011 * v37 * (double)v31;
          v50 = v48 + v43;
          v16 = *((_DWORD *)v2 + 12) - v43 + (int)(float)(v49 * (float)(v48 + v43));
          *((_DWORD *)v2 + 12) = v16;
          v51 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
          if (v51)
          {
            v52 = (unsigned __int8 *)*((_QWORD *)v51 + 1);
            if (v52)
            {
              v53 = *v51;
              if ((v53 | 2) == 3 && *v52 - 5 <= 1)
              {
                v54 = *((_QWORD *)v2 + 2);
                if (v54)
                  LODWORD(v54) = *(_DWORD *)(v54 + 48);
                v55 = *((_DWORD *)v52 + 12) - *((_DWORD *)this + 40);
                if (v16 > v55)
                {
                  v56 = v53 == 1;
                  v57 = 12;
                  if (!v56)
                    v57 = 8;
                  v16 = v55 - *(_DWORD *)(*((_QWORD *)this + 4) + v57);
                  if (v16 <= (int)v54 + 1)
                    v16 = v54 + 1;
                  *((_DWORD *)v2 + 12) = v16;
                }
              }
            }
          }
          if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
          {
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "NewPitchAlignment\t%s\t%d\t%d\t%f\t%d\t%d\n", MTFEToBI::sTone[*v2], v50, v43, v49, v5, v16);
            v16 = *((_DWORD *)v2 + 12);
          }
          v4 = v16;
LABEL_66:
          v58 = *((_DWORD *)this + 13) - 1;
          if (v16 < v58)
            v58 = v16;
          if (v58 <= -200)
            v58 = -200;
          *((_DWORD *)v2 + 12) = v58;
          if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "AdjustAlignment\t%s\t%d\t%d\n", MTFEToBI::sTone[*v2], v5, v58);
          MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v61);
          v2 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
          if (!v2)
            return;
          break;
        default:
          v16 = *((_DWORD *)v2 + 12);
          goto LABEL_66;
      }
    }
  }
}

void sub_1D227D054(_Unwind_Exception *a1)
{
  uint64_t v1;

  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)(v1 - 216));
  _Unwind_Resume(a1);
}

uint64_t MTFEToBIPitch::Slope(uint64_t this, float *a2, float a3)
{
  uint64_t v5;
  float *v6;
  unint64_t v7;
  float v8;
  float v9;
  unsigned int v10;

  v5 = this;
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    this = fprintf((FILE *)*MEMORY[0x1E0C80C10], "Slope [%d - %d] %f\n", ((*(_QWORD *)(this + 128) - *(_QWORD *)(this + 120)) >> 2) - 200, (((unint64_t)a2 - *(_QWORD *)(this + 120)) >> 2) - 200, a3);
  v6 = *(float **)(v5 + 128);
  if (v6 <= a2)
  {
    v7 = (unint64_t)((char *)a2 - (char *)v6) >> 2;
    if (v7 <= 0x7FFFFFFE)
    {
      v8 = *(float *)(v5 + 136);
      v9 = (float)(a3 - v8) / (float)((int)v7 + 1);
      v10 = v7 + 2;
      do
      {
        v8 = v9 + v8;
        *v6++ = v8;
        --v10;
      }
      while (v10 > 1);
    }
  }
  else
  {
    if (*(_QWORD *)(v5 + 120) + 4 > (unint64_t)a2)
      return this;
    *a2 = a3;
  }
  *(float *)(v5 + 136) = a3;
  *(_QWORD *)(v5 + 128) = a2 + 1;
  return this;
}

uint64_t MTFEToBIPitch::SlopeFromTo(uint64_t this, float *a2, float a3, float *a4, float a5)
{
  float v7;
  uint64_t v9;
  float *v10;
  float v11;

  v7 = a3;
  v9 = this;
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    this = fprintf((FILE *)*MEMORY[0x1E0C80C10], "SlopeFromTo [%d - %d] %f -> %f\n", (((unint64_t)a2 - *(_QWORD *)(this + 120)) >> 2) - 200, (((unint64_t)a4 - *(_QWORD *)(this + 120)) >> 2) - 200, a3, a5);
  *a2 = v7;
  v10 = a2 + 1;
  if (a2 + 1 <= a4)
  {
    v11 = (float)(a5 - v7) / (float)(a4 - a2);
    do
    {
      v7 = v11 + v7;
      *v10++ = v7;
    }
    while (v10 <= a4);
  }
  *(float *)(v9 + 136) = a5;
  *(_QWORD *)(v9 + 128) = a4 + 1;
  return this;
}

uint64_t MTFEToBIPitch::Plateau(uint64_t this, float *a2, float a3)
{
  uint64_t v5;
  float *v6;

  v5 = this;
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    this = fprintf((FILE *)*MEMORY[0x1E0C80C10], "Plateau [%d - %d] %f\n", ((*(_QWORD *)(this + 128) - *(_QWORD *)(this + 120)) >> 2) - 200, (((unint64_t)a2 - *(_QWORD *)(this + 120)) >> 2) - 200, a3);
  v6 = *(float **)(v5 + 128);
  if (v6 <= a2)
  {
    do
      *v6++ = a3;
    while (v6 <= a2);
  }
  else
  {
    if (*(_QWORD *)(v5 + 120) + 4 > (unint64_t)a2)
      return this;
    *a2 = a3;
  }
  *(float *)(v5 + 136) = a3;
  *(_QWORD *)(v5 + 128) = a2 + 1;
  return this;
}

float MTFEToBIPitch::Ref(MTFEToBIPitch *this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v5;

  v5 = *((float *)a3 + 8)
     + (float)((*(float (**)(MTFEToBIPitch *))(*(_QWORD *)this + 104))(this)
             * *(float *)(*((_QWORD *)this + 4) + 456));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "R    %d %f %f\n", *((_DWORD *)a3 + 12) + a2, 1.0, v5);
  return v5;
}

float MTFEToBIPitch::LowPlus(MTFEToBIPitch *this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6;
  float v7;
  float v8;

  v6 = (*(float (**)(MTFEToBIPitch *))(*(_QWORD *)this + 104))(this);
  v7 = *((float *)a3 + 6);
  v8 = *((float *)a3 + 8)
     + (float)(v6
             * (float)(*(float *)(*((_QWORD *)this + 4) + 132)
                     + (float)(*(float *)(*((_QWORD *)this + 4) + 136)
                             * (float)(*(float *)(*((_QWORD *)this + 4) + 456)
                                     + (float)((float)(1.0 - *(float *)(*((_QWORD *)this + 4) + 456)) * v7)))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "L+   %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v7, v8);
  return v8;
}

float MTFEToBIPitch::PlusHighStarLeg(MTFEToBIPitch *this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6;
  float v7;
  float v8;

  v6 = (*(float (**)(MTFEToBIPitch *))(*(_QWORD *)this + 104))(this);
  v7 = *((float *)a3 + 6);
  v8 = *((float *)a3 + 8)
     + (float)(v6
             * (float)(*(float *)(*((_QWORD *)this + 4) + 420)
                     + (float)(*(float *)(*((_QWORD *)this + 4) + 424)
                             * (float)(*(float *)(*((_QWORD *)this + 4) + 456)
                                     + (float)((float)(1.0 - *(float *)(*((_QWORD *)this + 4) + 456)) * v7)))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "+H*  %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v7, v8);
  return v8;
}

float MTFEToBIPitch::High(MTFEToBIPitch *this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6;
  float v7;
  float v8;

  v6 = (*(float (**)(MTFEToBIPitch *))(*(_QWORD *)this + 104))(this);
  v7 = *((float *)a3 + 6);
  v8 = *((float *)a3 + 8)
     + (float)(v6
             * (float)(*(float *)(*((_QWORD *)this + 4) + 456)
                     + (float)((float)(1.0 - *(float *)(*((_QWORD *)this + 4) + 456)) * v7)));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "H*   %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v7, v8);
  return v8;
}

void TheoreticalAccentShape::addPoint(TheoreticalAccentShape *this, int a2, float a3, int a4)
{
  char *v8;
  unint64_t v9;
  float *v10;
  float *v11;
  float *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  float *v18;
  char *v19;
  uint64_t v20;

  v8 = (char *)this + 16;
  v9 = *((_QWORD *)this + 2);
  v10 = (float *)*((_QWORD *)this + 1);
  if ((unint64_t)v10 >= v9)
  {
    v12 = *(float **)this;
    v13 = ((uint64_t)v10 - *(_QWORD *)this) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
    v15 = v9 - (_QWORD)v12;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)v8, v16);
      v12 = *(float **)this;
      v10 = (float *)*((_QWORD *)this + 1);
    }
    else
    {
      v17 = 0;
    }
    v18 = (float *)&v17[8 * v13];
    v19 = &v17[8 * v16];
    *(_DWORD *)v18 = a2;
    v18[1] = a3;
    v11 = v18 + 2;
    if (v10 != v12)
    {
      do
      {
        v20 = *((_QWORD *)v10 - 1);
        v10 -= 2;
        *((_QWORD *)v18 - 1) = v20;
        v18 -= 2;
      }
      while (v10 != v12);
      v12 = *(float **)this;
    }
    *(_QWORD *)this = v18;
    *((_QWORD *)this + 1) = v11;
    *((_QWORD *)this + 2) = v19;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(_DWORD *)v10 = a2;
    v10[1] = a3;
    v11 = v10 + 2;
  }
  *((_QWORD *)this + 1) = v11;
  if (a4)
    *((_QWORD *)this + 3) = (((uint64_t)v11 - *(_QWORD *)this) >> 3) - 1;
}

uint64_t TheoreticalAccentShape::print(TheoreticalAccentShape *this, __sFILE *a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = (char *)this + 32;
  if (*((char *)this + 55) < 0)
    v4 = *(const char **)v4;
  fprintf(a2, "TheoreticalAccentShape\t%s", v4);
  v5 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) != *(_QWORD *)this)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      fprintf(a2, " (%d,%f)", *(_DWORD *)(v5 + v6), *(float *)(v5 + v6 + 4));
      if (v7 == *((_QWORD *)this + 3))
        fputc(42, a2);
      ++v7;
      v5 = *(_QWORD *)this;
      v6 += 8;
    }
    while (v7 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  }
  return fputc(10, a2);
}

void TheoreticalAccentShape::~TheoreticalAccentShape(void **this)
{
  void *v2;

  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

float MTFEToBIPitch::HighStarLeg(MTFEToBIPitch *this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6;
  float v7;
  float v8;

  v6 = (*(float (**)(MTFEToBIPitch *))(*(_QWORD *)this + 104))(this);
  v7 = *((float *)a3 + 6);
  v8 = *((float *)a3 + 8)
     + (float)(v6
             * (float)(*(float *)(*((_QWORD *)this + 4) + 92)
                     + (float)(*(float *)(*((_QWORD *)this + 4) + 96)
                             * (float)(*(float *)(*((_QWORD *)this + 4) + 456)
                                     + (float)((float)(1.0 - *(float *)(*((_QWORD *)this + 4) + 456)) * v7)))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], ".H*  %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v7, v8);
  return v8;
}

float MTFEToBIPitch::LowStarLeg(float **this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6;
  float *v7;
  float v8;
  float v9;

  v6 = (*((float (**)(float **))*this + 13))(this);
  v7 = this[4];
  v8 = *((float *)a3 + 6);
  v9 = v7[36]
     + (float)(*((float *)a3 + 8)
             + (float)(v6
                     * (float)((float)((float)(v7[114] * (float)(1.0 - v8)) + 0.0)
                             + (float)((float)(v7[114] - (float)((float)(v7[114] * (float)(1.0 - v8)) + 0.0)) * v7[37]))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], ".L*  %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v8, v9);
  return v9;
}

float MTFEToBIPitch::Low(MTFEToBIPitch *this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6;
  float v7;
  float v8;

  v6 = (*(float (**)(MTFEToBIPitch *))(*(_QWORD *)this + 104))(this);
  v7 = (1.0 - *((float *)a3 + 6)) * *(float *)(*((_QWORD *)this + 4) + 456);
  v8 = *((float *)a3 + 8) + (float)(v6 * v7);
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "L    %d %f %f\n", *((_DWORD *)a3 + 12) + a2, *((float *)a3 + 6), v8);
  return v8;
}

float MTFEToBIPitch::LowStarPlusLeg(float **this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6;
  float *v7;
  float v8;
  float v9;
  float v10;

  v6 = (*((float (**)(float **))*this + 13))(this);
  v7 = this[4];
  v8 = *((float *)a3 + 6);
  v9 = (float)(v7[114] * (float)(1.0 - v8)) + 0.0;
  v10 = *((float *)a3 + 8)
      + (float)(v6
              * (float)(v9
                      + (float)((float)((float)(v7[103] + (float)(v9 + (float)((float)(1.0 - v9) * v7[104]))) - v9)
                              * (float)(v7[41] + v7[40]))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], ".L*+  %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v8, v10);
  return v10;
}

float MTFEToBIPitch::PlusHigh(float **this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6;
  float *v7;
  float v8;
  float v9;
  float v10;

  v6 = (*((float (**)(float **))*this + 13))(this);
  v7 = this[4];
  v8 = *((float *)a3 + 6);
  v9 = (float)(v7[114] * (float)(1.0 - v8)) + 0.0;
  v10 = v7[103] + (float)(*((float *)a3 + 8) + (float)(v6 * (float)(v9 + (float)((float)(1.0 - v9) * v7[104]))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], ".H*  %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v8, v10);
  return v10;
}

float MTFEToBIPitch::HighPlus(float **this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6;
  float *v7;
  float v8;
  float v9;
  float v10;

  v6 = (*((float (**)(float **))*this + 13))(this);
  v7 = this[4];
  v8 = *((float *)a3 + 6);
  v9 = (float)(v7[114] * (float)(1.0 - v8)) + 0.0;
  v10 = v7[20] + (float)(*((float *)a3 + 8) + (float)(v6 * (float)(v9 + (float)((float)(1.0 - v9) * v7[22]))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], ".H*  %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v8, v10);
  return v10;
}

float MTFEToBIPitch::PlusLowStarLeg(float **this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6;
  float *v7;
  float v8;
  float v9;
  float v10;

  v6 = (*((float (**)(float **))*this + 13))(this);
  v7 = this[4];
  v8 = *((float *)a3 + 6);
  v9 = (float)(v7[114] * (float)(1.0 - v8)) + 0.0;
  v10 = v7[109]
      + (float)(*((float *)a3 + 8)
              + (float)(v6
                      * (float)(v9
                              + (float)((float)((float)(v7[20] + (float)(v9 + (float)((float)(1.0 - v9) * v7[22]))) - v9)
                                      * v7[110]))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], ".H*  %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v8, v10);
  return v10;
}

float MTFEToBIPitch::HighPlusDownstep(float **this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6;
  float *v7;
  float v8;
  float v9;
  float v10;

  v6 = (*((float (**)(float **))*this + 13))(this);
  v7 = this[4];
  v8 = *((float *)a3 + 6);
  v9 = v7[114] + (float)((float)(1.0 - v7[114]) * v8);
  v10 = v7[17] + (float)(*((float *)a3 + 8) + (float)(v6 * (float)(v9 + (float)((float)(1.0 - v9) * v7[18]))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "H+!  %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v8, v10);
  return v10;
}

float MTFEToBIPitch::DownsteppedHighStarLeg(float **this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6;
  float *v7;
  float v8;
  float v9;
  float v10;

  v6 = (*((float (**)(float **))*this + 13))(this);
  v7 = this[4];
  v8 = *((float *)a3 + 6);
  v9 = v7[114] + (float)((float)(1.0 - v7[114]) * v8);
  v10 = v7[5]
      + (float)(*((float *)a3 + 8)
              + (float)(v6
                      * (float)(v9
                              + (float)((float)((float)(v7[17] + (float)(v9 + (float)((float)(1.0 - v9) * v7[18]))) - v9)
                                      * v7[6]))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "!H*  %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v8, v10);
  return v10;
}

float MTFEToBIPitch::LowForProm(MTFEToBIPitch *this, int a2, const MTFEToBIPitch::Token *a3, float a4)
{
  float v8;
  double v9;
  float v10;
  float v11;

  v8 = (*(float (**)(MTFEToBIPitch *))(*(_QWORD *)this + 104))(this);
  v9 = a4;
  v10 = (1.0 - a4) * *(float *)(*((_QWORD *)this + 4) + 456);
  v11 = *((float *)a3 + 8) + (float)(v8 * v10);
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "L    %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v9, v11);
  return v11;
}

float MTFEToBIPitch::HighForProm(MTFEToBIPitch *this, int a2, const MTFEToBIPitch::Token *a3, float a4)
{
  float v7;

  v7 = *((float *)a3 + 8)
     + (float)((*(float (**)(MTFEToBIPitch *))(*(_QWORD *)this + 104))(this)
             * (float)(*(float *)(*((_QWORD *)this + 4) + 456)
                     + (float)((float)(1.0 - *(float *)(*((_QWORD *)this + 4) + 456)) * a4)));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "H*   %d %f %f\n", *((_DWORD *)a3 + 12) + a2, a4, v7);
  return v7;
}

float MTFEToBIPitch::FinalLowering(MTFEToBIPitch *this, int a2)
{
  int v2;
  float v3;
  BOOL v4;
  float v5;
  int v6;

  v2 = a2 - *((_DWORD *)this + 39);
  v3 = 1.0;
  if (*((_BYTE *)this + 105))
    v4 = v2 < 1;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *((float *)this + 44);
    v6 = *((_DWORD *)this + 45);
    v3 = (float)((float)(v5 * (float)v2) / (float)v6) + 1.0;
    if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "FinalLowering %5.3f %d %d = %5.3f\n", v5, v2, v6, v3);
  }
  return v3;
}

float MTFEToBIPitch::BoostedRange(MTFEToBIPitch *this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  if (kMTFEParagraphInitialBoost)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTFEParagraphInitialBoost, (const __CFString *)&dword_1EFC74DE8, (float *)a3, *(float *)&dword_1EFC74DE8);
    kMTFEParagraphInitialBoost = 0;
  }
  v6 = *(float *)&dword_1EFC74DE8;
  if (kMTFEParagraphRangePhrasalDownStep)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTFEParagraphRangePhrasalDownStep, (const __CFString *)&dword_1EFC74DF8, (float *)a3, *(float *)&dword_1EFC74DF8);
    kMTFEParagraphRangePhrasalDownStep = 0;
  }
  v7 = (float)((float)(v6 + -1.0) * (float)(1.0 / *(float *)&dword_1EFC74DF8)) + 1.0;
  v8 = MTFEToBIPitch::FinalLowering(this, *((_DWORD *)a3 + 12) + a2);
  v9 = *((float *)a3 + 7);
  v10 = v8 * v9;
  if (v7 >= v10)
    v7 = v10;
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "BoostRange %5.3f %5.3f %5.3f %5.3f\n", (float)(v7 * *((float *)a3 + 9)), *((float *)a3 + 9), v7, v9);
  return v7 * *((float *)a3 + 9);
}

float MTFEToBIPitch::PitchValue(MTFESpeechElement **this, int a2, const MTFEToBIPitch::Token *a3)
{
  unsigned int v3;
  int v4;

  v3 = *(unsigned __int8 *)a3;
  if (v3 > 0xC)
    goto LABEL_6;
  v4 = 1 << v3;
  if ((v4 & 0xAA6) != 0)
    return MTFEToBIPitch::Low((MTFEToBIPitch *)this, -1, a3);
  if ((v4 & 0x1548) != 0)
    return MTFEToBIPitch::High((MTFEToBIPitch *)this, -1, a3);
LABEL_6:
  MTBEAbort(this[21]);
  return 0.0;
}

float MTFEToBIPitch::PhraseAccentForOverlappingHighFinalBoundary(MTFESpeechElement **this, const MTFEToBIPitch::Token *a2)
{
  const MTFEToBIPitch::Token *v3;
  int v4;

  if (*(_BYTE *)a2 != 6)
    MTFEToBIPitch::PhraseAccentForOverlappingHighFinalBoundary();
  v3 = (const MTFEToBIPitch::Token *)*((_QWORD *)a2 + 2);
  if (!v3 || (v4 = *(unsigned __int8 *)v3, (v4 - 1) >= 3))
  {
    MTBEAbort(this[21]);
    v4 = *(unsigned __int8 *)v3;
  }
  if (v4 == 3)
    return MTFEToBIPitch::High((MTFEToBIPitch *)this, -1, v3);
  else
    return MTFEToBIPitch::Low((MTFEToBIPitch *)this, -1, v3);
}

void MTFEToBIPitch::~MTFEToBIPitch(MTFEToBIPitch *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void TheoreticalAccentShape::TheoreticalAccentShape(TheoreticalAccentShape *this, char *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 4, a2);
}

void sub_1D227E31C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void LinearFunction::LinearFunction(LinearFunction *this, float a2, float a3, float a4, float a5)
{
  float v5;
  std::logic_error *exception;

  if (a2 == a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Can't not describe function x=c, where c is a constant.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v5 = (float)(a3 - a5) / (float)(a2 - a4);
  *(float *)this = v5;
  *((float *)this + 1) = a3 - (float)(v5 * a2);
}

void sub_1D227E494(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void SampleBufferRingList::SampleBufferRingList(SampleBufferRingList *this, uint64_t a2)
{
  int v2;
  _QWORD *v4;
  _QWORD *v5;

  v2 = a2;
  v4 = std::vector<SampleBuffer>::vector(this, a2 + 1);
  *((_DWORD *)v4 + 7) = 0;
  *((_DWORD *)v4 + 8) = 0;
  v5 = v4 + 5;
  *((_DWORD *)v4 + 6) = v2;
  pthread_mutex_init((pthread_mutex_t *)(v4 + 5), 0);
  *((_QWORD *)this + 13) = v5;
  pthread_cond_init((pthread_cond_t *)((char *)this + 112), 0);
  *((_QWORD *)this + 20) = v5;
  pthread_cond_init((pthread_cond_t *)((char *)this + 168), 0);
  *((_QWORD *)this + 27) = v5;
  pthread_cond_init((pthread_cond_t *)((char *)this + 224), 0);
}

void sub_1D227E52C(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v2;
  pthread_cond_t *v3;
  pthread_cond_t *v4;
  pthread_cond_t *v5;
  void *v7;

  v5 = v4;
  pthread_cond_destroy(v5);
  pthread_cond_destroy(v3);
  pthread_mutex_destroy(v2);
  v7 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t SampleBufferRingList::AvailableCapacity(SampleBufferRingList *this)
{
  int v2;
  int v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  char *v8;
  char v9;

  v8 = (char *)this + 40;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  v9 = 1;
  v2 = *((_DWORD *)this + 7);
  v3 = *((_DWORD *)this + 8);
  v4 = __OFSUB__(v2, v3);
  v5 = (v2 - v3);
  if (((v5 & 0x80000000) != 0) ^ v4 | ((_DWORD)v5 == 0))
    v5 = (v5 + *((_DWORD *)this + 6));
  v6 = 500 * (int)v5;
  MTTScopedLock::~MTTScopedLock((void *)v5, (MTTScopedLock *)&v8);
  return v6;
}

uint64_t SampleBufferRingList::AvailableCapacityDetail(SampleBufferRingList *this)
{
  int v1;
  int v2;
  BOOL v3;
  int v4;

  v1 = *((_DWORD *)this + 7);
  v2 = *((_DWORD *)this + 8);
  v3 = __OFSUB__(v1, v2);
  v4 = v1 - v2;
  if ((v4 < 0) ^ v3 | (v4 == 0))
    v4 += *((_DWORD *)this + 6);
  return 500 * v4;
}

uint64_t SampleBufferRingList::SamplesAdded(SampleBufferRingList *this)
{
  int v2;
  int v3;
  BOOL v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  char *v9;
  char v10;

  v9 = (char *)this + 40;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  v10 = 1;
  v2 = *((_DWORD *)this + 7);
  v3 = *((_DWORD *)this + 8);
  v4 = __OFSUB__(v2, v3);
  v5 = (v2 - v3);
  v6 = *((_DWORD *)this + 6);
  if (((v5 & 0x80000000) != 0) ^ v4 | ((_DWORD)v5 == 0))
    v5 = (v5 + v6);
  v7 = 500 * v6 - 500 * (int)v5;
  MTTScopedLock::~MTTScopedLock((void *)v5, (MTTScopedLock *)&v9);
  return v7;
}

uint64_t SampleBufferRingList::SamplesAddedDetail(SampleBufferRingList *this)
{
  int v1;
  int v2;
  BOOL v3;
  int v4;
  int v5;

  v1 = *((_DWORD *)this + 7);
  v2 = *((_DWORD *)this + 8);
  v3 = __OFSUB__(v1, v2);
  v4 = v1 - v2;
  v5 = *((_DWORD *)this + 6);
  if ((v4 < 0) ^ v3 | (v4 == 0))
    v4 += v5;
  return 500 * v5 - 500 * v4;
}

void *SampleBufferRingList::AddSamples(SampleBufferRingList *this, float *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  char *v13;
  char i;

  v13 = (char *)this + 40;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  v8 = 1;
  for (i = 1; a3; a3 -= v11)
  {
    while (1)
    {
      v9 = *((_DWORD *)this + 7);
      v10 = v9 ? v9 - 1 : *((_DWORD *)this + 6);
      if (*((_DWORD *)this + 8) != v10)
        break;
      pthread_cond_wait((pthread_cond_t *)((char *)this + 168), *((pthread_mutex_t **)this + 20));
    }
    v11 = SampleBufferRingList::AddSamplesDetail(this, a2, a3, a4);
    pthread_cond_signal((pthread_cond_t *)((char *)this + 112));
    a2 += v11;
  }
  return MTTScopedLock::~MTTScopedLock((void *)v8, (MTTScopedLock *)&v13);
}

void sub_1D227E780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MTTScopedLock::~MTTScopedLock((MTTScopedLock *)&a9);
  _Unwind_Resume(a1);
}

BOOL SampleBufferRingList::IsFullDetail(SampleBufferRingList *this)
{
  int v1;
  int v2;

  v1 = *((_DWORD *)this + 7);
  if (v1)
    v2 = v1 - 1;
  else
    v2 = *((_DWORD *)this + 6);
  return *((_DWORD *)this + 8) == v2;
}

uint64_t MTTCondition::Wait(pthread_cond_t *this, unint64_t a2)
{
  timespec v5;
  timeval v6;

  if (!a2)
    return pthread_cond_wait((pthread_cond_t *)this->__opaque, (pthread_mutex_t *)this->__sig);
  gettimeofday(&v6, 0);
  v5.tv_sec = v6.tv_sec + a2 / 0x3E8;
  v5.tv_nsec = 1000000 * (a2 % 0x3E8) + 1000 * v6.tv_usec;
  return pthread_cond_timedwait((pthread_cond_t *)this->__opaque, (pthread_mutex_t *)this->__sig, &v5);
}

uint64_t SampleBufferRingList::AddSamplesDetail(SampleBufferRingList *this, float *a2, unint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v11;
  uint64_t v12;
  float v13;
  int v14;
  uint64_t v15;
  int v16;

  v7 = *((_DWORD *)this + 8);
  v8 = *(_QWORD *)this;
  if (a3 >= 0x1F4)
    v9 = 500;
  else
    v9 = a3;
  if (v9)
  {
    v11 = (_DWORD *)(v8 + 2016 * v7 + 16);
    v12 = v9;
    do
    {
      v13 = *a2++;
      *v11++ = (int)scalbnf(v13, 24);
      --v12;
    }
    while (v12);
  }
  v14 = *((_DWORD *)this + 8);
  if (a3 >= 0x1F5)
    v15 = 0;
  else
    v15 = a4;
  *(_QWORD *)(v8 + 2016 * v14) = v15;
  *(_QWORD *)(v8 + 2016 * v7 + 8) = v9;
  if (v14 < *((_DWORD *)this + 6))
    v16 = v14 + 1;
  else
    v16 = 0;
  *((_DWORD *)this + 8) = v16;
  return v9;
}

void *SampleBufferRingList::CopySamples(SampleBufferRingList *this, void *a2, unint64_t *a3, unint64_t *a4)
{
  void *result;
  int v6;
  int v7;
  void *v8;
  char *v9;
  char v10;
  BOOL v11;

  v11 = 0;
  result = SampleBufferRingList::CopySamplesDetail(this, a2, a3, a4, &v11);
  if (v11)
  {
    v9 = (char *)this + 40;
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
    v10 = 1;
    v6 = *((_DWORD *)this + 7);
    if (v6 < *((_DWORD *)this + 6))
      v7 = v6 + 1;
    else
      v7 = 0;
    *((_DWORD *)this + 7) = v7;
    pthread_cond_signal((pthread_cond_t *)((char *)this + 168));
    v8 = (void *)*((unsigned int *)this + 7);
    if ((_DWORD)v8 == *((_DWORD *)this + 8))
      pthread_cond_signal((pthread_cond_t *)((char *)this + 224));
    return MTTScopedLock::~MTTScopedLock(v8, (MTTScopedLock *)&v9);
  }
  return result;
}

void sub_1D227E99C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MTTScopedLock::~MTTScopedLock((MTTScopedLock *)va);
  _Unwind_Resume(a1);
}

void *SampleBufferRingList::CopySamplesDetail(SampleBufferRingList *this, void *__dst, unint64_t *a3, unint64_t *a4, BOOL *a5)
{
  uint64_t v9;
  unint64_t v10;
  void *result;
  int v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;

  v9 = *(_QWORD *)this + 2016 * *((int *)this + 7);
  v10 = *(_QWORD *)(v9 + 8);
  if (v10 >= *a3)
    v10 = *a3;
  *a3 = v10;
  result = memcpy(__dst, (const void *)(v9 + 16), 4 * v10);
  v12 = *((_DWORD *)this + 7);
  v13 = *(_QWORD *)this;
  v14 = *(_QWORD *)(*(_QWORD *)this + 2016 * v12 + 8);
  v15 = v14 > *a3;
  v16 = v14 - *a3;
  if (v15)
  {
    result = memmove((void *)(v13 + 2016 * v12 + 16), (const void *)(v13 + 2016 * v12 + 16 + 4 * *a3), 4 * v16);
    v19 = 0;
    v18 = 0;
    v17 = *(_QWORD *)this + 2016 * *((int *)this + 7);
    *(_QWORD *)(v17 + 8) -= *a3;
  }
  else
  {
    v18 = *(_QWORD *)(v13 + 2016 * v12);
    v19 = 1;
  }
  *a5 = v19;
  *a4 = v18;
  return result;
}

BOOL SampleBufferRingList::IsEmptyDetail(SampleBufferRingList *this)
{
  return *((_DWORD *)this + 7) == *((_DWORD *)this + 8);
}

void SampleBufferRingList::WaitUntilEmpty(SampleBufferRingList *this)
{
  char *v2;
  char v3;

  v2 = (char *)this + 40;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  v3 = 1;
  while (*((_DWORD *)this + 7) != *((_DWORD *)this + 8))
    pthread_cond_wait((pthread_cond_t *)((char *)this + 224), *((pthread_mutex_t **)this + 27));
  MTTScopedLock::~MTTScopedLock((MTTScopedLock *)&v2);
}

void sub_1D227EB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MTTScopedLock::~MTTScopedLock((MTTScopedLock *)&a9);
  _Unwind_Resume(a1);
}

BOOL SampleBufferRingList::IsEmpty(SampleBufferRingList *this)
{
  _BOOL8 v2;
  char *v4;
  char v5;

  v4 = (char *)this + 40;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  v5 = 1;
  v2 = *((_DWORD *)this + 7) == *((_DWORD *)this + 8);
  MTTScopedLock::~MTTScopedLock((MTTScopedLock *)&v4);
  return v2;
}

BOOL SampleBufferRingList::IsFull(SampleBufferRingList *this)
{
  int v2;
  int v3;
  _BOOL8 v4;
  char *v6;
  char v7;

  v6 = (char *)this + 40;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  v7 = 1;
  v2 = *((_DWORD *)this + 7);
  if (v2)
    v3 = v2 - 1;
  else
    v3 = *((_DWORD *)this + 6);
  v4 = *((_DWORD *)this + 8) == v3;
  MTTScopedLock::~MTTScopedLock((MTTScopedLock *)&v6);
  return v4;
}

uint64_t SampleBufferRingList::Clear(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t RemoteIORenderCallback(MTBERemoteIOSoundOutput *a1, unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, unsigned int a5, AudioBufferList *a6)
{
  uint64_t mNumberChannels;
  char *v8;
  unint64_t mDataByteSize;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  MTBERemoteIOSoundOutput::FeedSamples(a1, a2, a6);
  mNumberChannels = a6->mBuffers[0].mNumberChannels;
  v8 = (char *)malloc_type_malloc(a6->mBuffers[0].mDataByteSize, 0xA77A5667uLL);
  memcpy(v8, a6->mBuffers[0].mData, a6->mBuffers[0].mDataByteSize);
  mDataByteSize = a6->mBuffers[0].mDataByteSize;
  if ((_DWORD)mDataByteSize)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      if ((int)mNumberChannels >= 1)
      {
        v12 = 0;
        do
        {
          *(_DWORD *)((char *)a6->mBuffers[0].mData + v11 + v12) = *(_DWORD *)&v8[v10];
          v12 += 4;
        }
        while (4 * mNumberChannels != v12);
        mDataByteSize = a6->mBuffers[0].mDataByteSize;
      }
      v10 += 4;
      v11 += 4 * (int)mNumberChannels;
    }
    while (v10 < mDataByteSize);
  }
  free(v8);
  return 0;
}

void MTBERemoteIOSoundOutput::FeedSamples(MTBERemoteIOSoundOutput *this, unsigned int a2, AudioBufferList *a3)
{
  unint64_t mNumberBuffers;
  unint64_t v5;
  char *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  int v12;
  int v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  AudioBufferList *v19;
  unint64_t v20;
  unint64_t v21;
  char v22;

  mNumberBuffers = a3->mNumberBuffers;
  if ((_DWORD)mNumberBuffers)
  {
    v5 = 0;
    v19 = a3;
    do
    {
      v6 = (char *)a3 + 16 * v5;
      v8 = *((_DWORD *)v6 + 2);
      v7 = *((_DWORD *)v6 + 3);
      if (v8 <= v7)
      {
        v9 = 0;
        v10 = v6 + 16;
        v11 = v7 / v8;
        while (1)
        {
          v21 = (unint64_t)this + 80;
          pthread_mutex_lock((pthread_mutex_t *)((char *)this + 80));
          v22 = 1;
          v13 = *((_DWORD *)this + 17);
          v12 = *((_DWORD *)this + 18);
          MTTScopedLock::~MTTScopedLock(v14, (MTTScopedLock *)&v21);
          if (v13 == v12)
            break;
          v20 = 0;
          v21 = (v11 - v9) >> 2;
          SampleBufferRingList::CopySamples((MTBERemoteIOSoundOutput *)((char *)this + 40), (void *)(*v10 + v9), &v21, &v20);
          v15 = v21;
          v16 = *((_QWORD *)this + 1);
          if (v16 && v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          v9 += 4 * v15;
          if (v9 >= v11)
            goto LABEL_12;
        }
        bzero((void *)(*v10 + v9), v11 - v9);
LABEL_12:
        a3 = v19;
        mNumberBuffers = v19->mNumberBuffers;
      }
      ++v5;
    }
    while (v5 < mNumberBuffers);
  }
  if (*((_DWORD *)this + 78) == 2)
  {
    v21 = (unint64_t)this + 80;
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 80));
    v22 = 1;
    v17 = *((_DWORD *)this + 17);
    v18 = *((_DWORD *)this + 18);
    MTTScopedLock::~MTTScopedLock((void *)1, (MTTScopedLock *)&v21);
    if (v17 == v18)
      pthread_cond_broadcast((pthread_cond_t *)((char *)this + 392));
  }
}

uint64_t MTBESoundOutputCallback::StopAtBoundary(MTBESoundOutputCallback *this)
{
  return 0;
}

uint64_t MTBESoundOutput::CreateChannel(MTBESoundOutput *this)
{
  int v1;
  uint64_t v2;
  uint8_t v4[16];

  v1 = (int)this;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1D2256000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "MTX MTBERemoteIOSoundOutput Creating sound channel", v4, 2u);
  }
  v2 = operator new();
  MTBERemoteIOSoundOutput::MTBERemoteIOSoundOutput((MTBERemoteIOSoundOutput *)v2, v1);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 128))(v2) & 1) == 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v2 = operator new();
    *(_DWORD *)(v2 + 16) = 1;
    *(_QWORD *)v2 = &off_1E93676D0;
    *(_QWORD *)(v2 + 8) = 0;
  }
  return v2;
}

void sub_1D227EEC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C4033BB09CFLL);
  _Unwind_Resume(a1);
}

uint64_t MTBESoundOutput::CreateFileStream(MTBESoundOutput *this, OpaqueExtAudioFile *a2)
{
  uint64_t v3;

  v3 = operator new();
  MTBEAudioFileSoundOutput::MTBEAudioFileSoundOutput((MTBEAudioFileSoundOutput *)v3, this);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 128))(v3) & 1) == 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v3 = operator new();
    *(_DWORD *)(v3 + 16) = 1;
    *(_QWORD *)v3 = &off_1E93676D0;
    *(_QWORD *)(v3 + 8) = 0;
  }
  return v3;
}

void sub_1D227EF80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10E1C40472BCEE3);
  _Unwind_Resume(a1);
}

uint64_t MTBESoundOutput::SampleCapacity(MTBESoundOutput *this)
{
  return 0x10000;
}

uint64_t MTBESoundOutput::GetSourceUnit(MTBESoundOutput *this)
{
  return 0;
}

uint64_t MTBESoundOutput::GetSourceGraph(MTBESoundOutput *this)
{
  return 0;
}

uint64_t MTBESoundOutput::SetChannelMap(MTBESoundOutput *this, CFArrayRef theArray)
{
  CFIndex Count;
  uint64_t v5;
  uint64_t v6;
  CFIndex v7;
  char *v8;
  const __CFNumber *ValueAtIndex;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v11[0] = 0;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    v5 = operator new[]();
    v6 = v5;
    if (Count >= 1)
    {
      v7 = 0;
      v8 = (char *)v5;
      do
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v7);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, v8);
        ++v7;
        v8 += 4;
      }
      while (Count != v7);
    }
    (*(void (**)(MTBESoundOutput *, uint64_t, CFIndex))(*(_QWORD *)this + 136))(this, v6, Count);
    JUMPOUT(0x1D8233B90);
  }
  return (*(uint64_t (**)(MTBESoundOutput *, _QWORD *, uint64_t))(*(_QWORD *)this + 136))(this, v11, 2);
}

uint64_t MTBESoundOutput::ReportLatency(MTBESoundOutput *this)
{
  return 0;
}

uint64_t MTBESoundOutput::OfflineProcessing(MTBESoundOutput *this)
{
  return 1;
}

uint64_t MTBESoundOutput::Silence(MTBESoundOutput *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 8))(result, 8);
  return result;
}

uint64_t MTBESoundOutput::Wakeup(MTBESoundOutput *this, MTBESoundOutputCallback *a2)
{
  uint64_t result;

  if (a2)
    return (**(uint64_t (***)(MTBESoundOutputCallback *))a2)(a2);
  return result;
}

uint64_t MTBESoundOutput::SetBoundaryCallback(uint64_t this, MTBESoundOutputCallback *a2)
{
  *(_QWORD *)(this + 8) = a2;
  return this;
}

uint64_t MTBESoundOutput::InitializedOK(MTBESoundOutput *this)
{
  return 1;
}

uint64_t MTBEIgnoreSoundOutput::QueueSamples(MTBEIgnoreSoundOutput *this, const float *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a4)
  {
    v4 = *((_QWORD *)this + 1);
    if (v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 8))(v4, a4);
  }
  return 1;
}

void MTBERemoteIOSoundOutput::MTBERemoteIOSoundOutput(MTBERemoteIOSoundOutput *this, int a2)
{
  AudioComponentInstance *v4;
  OpaqueAudioComponent *Next;
  FILE **v6;
  _QWORD v7[2];
  AudioComponentDescription inDesc;
  int inData;

  inData = a2;
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E9367498;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (AudioComponentInstance *)((char *)this + 24);
  *((_QWORD *)this + 4) = 0;
  SampleBufferRingList::SampleBufferRingList((MTBERemoteIOSoundOutput *)((char *)this + 40), 256);
  *((_DWORD *)this + 78) = 0;
  pthread_mutex_init((pthread_mutex_t *)this + 5, 0);
  *((_QWORD *)this + 48) = (char *)this + 320;
  pthread_cond_init((pthread_cond_t *)((char *)this + 392), 0);
  *((_DWORD *)this + 111) = 500;
  *(_OWORD *)&inDesc.componentType = xmmword_1D22CEEB0;
  inDesc.componentFlagsMask = 0;
  Next = AudioComponentFindNext(0, &inDesc);
  v6 = (FILE **)MEMORY[0x1E0C80C10];
  if (!Next)
    fwrite("ERROR: Couldn't find Remote IO component\n", 0x29uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  if (AudioComponentInstanceNew(Next, v4))
    fwrite("ERROR: Failed to create remote IO unit\n", 0x27uLL, 1uLL, *v6);
  if (AudioUnitSetProperty(*v4, 8u, 1u, 0, &xmmword_1D22CEEC8, 0x28u))
    fwrite("ERROR: Failed to set stream format\n", 0x23uLL, 1uLL, *v6);
  if (a2 && AudioUnitSetProperty(*v4, 0x7E7u, 2u, 0, &inData, 4u))
    fwrite("ERROR: Failed to set audio session ID\n", 0x26uLL, 1uLL, *v6);
  v7[0] = RemoteIORenderCallback;
  v7[1] = this;
  if (AudioUnitSetProperty(*((AudioUnit *)this + 3), 0x17u, 1u, 0, v7, 0x10u))
    fwrite("ERROR: Failed to set render callback\n", 0x25uLL, 1uLL, *v6);
}

void sub_1D227F380(_Unwind_Exception *a1)
{
  SampleBufferRingList *v1;
  pthread_mutex_t *v2;
  pthread_cond_t *v3;

  pthread_cond_destroy(v3);
  pthread_mutex_destroy(v2);
  SampleBufferRingList::~SampleBufferRingList(v1);
  _Unwind_Resume(a1);
}

void SampleBufferRingList::~SampleBufferRingList(SampleBufferRingList *this)
{
  void *v2;

  pthread_cond_destroy((pthread_cond_t *)((char *)this + 224));
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 168));
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 112));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 40));
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t MTBERemoteIOSoundOutput::SetChannelMap(uint64_t this, int *a2, uint64_t a3)
{
  uint64_t v4;
  UInt32 v5;
  OSStatus v6;
  FILE **v7;
  __int128 inData;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  if (a3)
  {
    v4 = this;
    inData = xmmword_1D22CEEC8;
    v10 = unk_1D22CEEDC;
    v13 = 32;
    v5 = 4 * a3;
    v11 = 4 * a3;
    v12 = a3;
    v9 = 4 * a3;
    v6 = AudioUnitSetProperty(*(AudioUnit *)(this + 24), 8u, 1u, 0, &inData, 0x28u);
    v7 = (FILE **)MEMORY[0x1E0C80C10];
    if (v6)
      fwrite("ERROR: Failed to set stream format\n", 0x23uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    this = AudioUnitSetProperty(*(AudioUnit *)(v4 + 24), 0x7D2u, 2u, 0, a2, v5);
    if ((_DWORD)this)
      return fprintf(*v7, "ERROR: Failed to set kAudioOutputUnitProperty_ChannelMap: %d\n", this);
  }
  return this;
}

void MTBERemoteIOSoundOutput::~MTBERemoteIOSoundOutput(MTBERemoteIOSoundOutput *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E9367498;
  AudioOutputUnitStop(*((AudioUnit *)this + 3));
  AudioUnitUninitialize(*((AudioUnit *)this + 3));
  AudioComponentInstanceDispose(*((AudioComponentInstance *)this + 3));
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 392));
  pthread_mutex_destroy((pthread_mutex_t *)this + 5);
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 264));
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 208));
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 152));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 80));
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
}

{
  MTBERemoteIOSoundOutput::~MTBERemoteIOSoundOutput(this);
  JUMPOUT(0x1D8233BA8);
}

void MTBERemoteIOSoundOutput::SetBoundaryCallback(pthread_mutex_t *this, MTBESoundOutputCallback *a2)
{
  pthread_mutex_t *v4;
  char v5;

  v4 = this + 5;
  pthread_mutex_lock(this + 5);
  v5 = 1;
  *(_QWORD *)this->__opaque = a2;
  MTTScopedLock::~MTTScopedLock((MTTScopedLock *)&v4);
}

BOOL MTBERemoteIOSoundOutput::QueueSamples(MTBERemoteIOSoundOutput *this, float *a2, unint64_t a3, uint64_t a4)
{
  void *v8;
  void *v10;
  char *v11;
  char v12;

  v11 = (char *)this + 320;
  pthread_mutex_lock((pthread_mutex_t *)this + 5);
  v12 = 1;
  v8 = (void *)*((unsigned int *)this + 78);
  if ((_DWORD)v8 == 1)
  {
    MTTScopedLock::~MTTScopedLock(v8, (MTTScopedLock *)&v11);
    SampleBufferRingList::AddSamples((MTBERemoteIOSoundOutput *)((char *)this + 40), a2, a3, a4);
    if (*((_BYTE *)this + 440))
    {
      if (SampleBufferRingList::SamplesAdded((MTBERemoteIOSoundOutput *)((char *)this + 40)) >= (unint64_t)*((unsigned int *)this + 111))
      {
        AudioOutputUnitStart(*((AudioUnit *)this + 3));
        *((_BYTE *)this + 440) = 0;
      }
    }
    return (unint64_t)SampleBufferRingList::AvailableCapacity((MTBERemoteIOSoundOutput *)((char *)this + 40)) > 0x200;
  }
  else
  {
    printf("Sound output is not running. QueueSamples() returns false");
    MTTScopedLock::~MTTScopedLock(v10, (MTTScopedLock *)&v11);
    return 0;
  }
}

void MTBERemoteIOSoundOutput::WaitForOutputToStop(MTBERemoteIOSoundOutput *this, int a2)
{
  int v3;
  int v4;
  void *v5;
  int v6;
  NSObject *v7;
  unint64_t v8;
  int v9;
  int v10;
  void *v11;
  char *v12;
  char v13;
  uint8_t buf[4];
  _DWORD v15[7];

  *(_QWORD *)&v15[5] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 78))
  {
    if (*((_BYTE *)this + 440))
    {
      *((_BYTE *)this + 440) = 0;
    }
    else if (a2)
    {
      v12 = (char *)this + 80;
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 80));
      v13 = 1;
      v3 = *((_DWORD *)this + 17);
      v4 = *((_DWORD *)this + 18);
      MTTScopedLock::~MTTScopedLock(v5, (MTTScopedLock *)&v12);
      if (v3 != v4)
      {
        v6 = 200;
        v7 = MEMORY[0x1E0C81028];
        while (1)
        {
          v8 = SampleBufferRingList::AvailableCapacity((MTBERemoteIOSoundOutput *)((char *)this + 40));
          if (MTTCondition::Wait((pthread_cond_t *)this + 8, 0x32uLL) != 60)
            break;
          if (SampleBufferRingList::AvailableCapacity((MTBERemoteIOSoundOutput *)((char *)this + 40)) <= v8)
          {
            v6 -= 50;
            if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
              MTBERemoteIOSoundOutput::WaitForOutputToStop(buf, v8, v15);
          }
          v12 = (char *)this + 80;
          pthread_mutex_lock((pthread_mutex_t *)((char *)this + 80));
          v13 = 1;
          v9 = *((_DWORD *)this + 17);
          v10 = *((_DWORD *)this + 18);
          MTTScopedLock::~MTTScopedLock(v11, (MTTScopedLock *)&v12);
          if (v9 == v10 || v6 < 0)
            return;
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
        {
          LOWORD(v12) = 0;
          _os_log_impl(&dword_1D2256000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "MTX WaitForOutputToStop - Got the signal", (uint8_t *)&v12, 2u);
        }
      }
    }
    else
    {
      pthread_cond_wait((pthread_cond_t *)((char *)this + 392), *((pthread_mutex_t **)this + 48));
    }
  }
}

void *MTBERemoteIOSoundOutput::WaitForOutputToStopThreadFunc(MTBERemoteIOSoundOutput *this)
{
  void *v2;
  uint64_t v3;
  char *v5;
  char v6;

  v5 = (char *)this + 320;
  pthread_mutex_lock((pthread_mutex_t *)this + 5);
  v6 = 1;
  MTBERemoteIOSoundOutput::WaitForOutputToStop(this, 0);
  v2 = (void *)*((unsigned int *)this + 78);
  if ((_DWORD)v2 == 2)
  {
    *((_BYTE *)this + 440) = 0;
    AudioOutputUnitStop(*((AudioUnit *)this + 3));
    *((_DWORD *)this + 78) = 0;
    v3 = *((_QWORD *)this + 1);
    if (v3)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 8))(v3, 8);
  }
  return MTTScopedLock::~MTTScopedLock(v2, (MTTScopedLock *)&v5);
}

void sub_1D227F92C(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3)
{
  MTTScopedLock::~MTTScopedLock(a2, (MTTScopedLock *)&a3);
  _Unwind_Resume(a1);
}

void *MTBERemoteIOSoundOutput::Wakeup(MTBERemoteIOSoundOutput *this, MTBESoundOutputCallback *a2)
{
  uint64_t v4;
  uint8_t v6[16];
  char *v7;
  char v8;

  v7 = (char *)this + 320;
  pthread_mutex_lock((pthread_mutex_t *)this + 5);
  v8 = 1;
  if ((*((_DWORD *)this + 78) - 1) > 1)
  {
    *((_DWORD *)this + 17) = 0;
    *((_DWORD *)this + 18) = 0;
    if (SampleBufferRingList::SamplesAdded((MTBERemoteIOSoundOutput *)((char *)this + 40)) < (unint64_t)*((unsigned int *)this + 111))
    {
LABEL_8:
      *((_BYTE *)this + 440) = 1;
      goto LABEL_10;
    }
    AudioOutputUnitStart(*((AudioUnit *)this + 3));
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1D2256000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "MTX Wakeup() Remote IO is already running", v6, 2u);
    }
    *((_DWORD *)this + 78) = 2;
    MTBERemoteIOSoundOutput::WaitForOutputToStop(this, 1);
    *((_DWORD *)this + 17) = 0;
    *((_DWORD *)this + 18) = 0;
    if (!*((_DWORD *)this + 78))
    {
      if (SampleBufferRingList::SamplesAdded((MTBERemoteIOSoundOutput *)((char *)this + 40)) >= (unint64_t)*((unsigned int *)this + 111))
      {
        AudioOutputUnitStart(*((AudioUnit *)this + 3));
        goto LABEL_10;
      }
      goto LABEL_8;
    }
  }
LABEL_10:
  v4 = 1;
  *((_DWORD *)this + 78) = 1;
  if (a2)
  {
    *((_QWORD *)this + 4) = a2;
    (**(void (***)(MTBESoundOutputCallback *))a2)(a2);
  }
  return MTTScopedLock::~MTTScopedLock((void *)v4, (MTTScopedLock *)&v7);
}

void sub_1D227FA60(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  MTTScopedLock::~MTTScopedLock(a2, (MTTScopedLock *)va);
  _Unwind_Resume(a1);
}

void *MTBERemoteIOSoundOutput::Silence(MTBERemoteIOSoundOutput *this, char a2)
{
  void *v4;
  uint64_t v5;
  pthread_t v7;
  char *v8;
  char v9;

  v8 = (char *)this + 320;
  pthread_mutex_lock((pthread_mutex_t *)this + 5);
  v9 = 1;
  v4 = (void *)*((unsigned int *)this + 78);
  if ((_DWORD)v4 != 2)
  {
    if ((_DWORD)v4 != 1)
    {
      if ((_DWORD)v4)
        return MTTScopedLock::~MTTScopedLock(v4, (MTTScopedLock *)&v8);
      goto LABEL_8;
    }
    *((_DWORD *)this + 78) = 2;
  }
  if ((a2 & 1) == 0)
  {
    v7 = 0;
    pthread_create(&v7, 0, (void *(__cdecl *)(void *))WaitForRemoteIOToFinish, this);
    pthread_detach(v7);
    return MTTScopedLock::~MTTScopedLock(v4, (MTTScopedLock *)&v8);
  }
  *((_BYTE *)this + 440) = 0;
  AudioOutputUnitStop(*((AudioUnit *)this + 3));
  pthread_cond_broadcast((pthread_cond_t *)((char *)this + 392));
  *((_DWORD *)this + 78) = 0;
LABEL_8:
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 8))(v5, 8);
  return MTTScopedLock::~MTTScopedLock(v4, (MTTScopedLock *)&v8);
}

void sub_1D227FB40(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  MTTScopedLock::~MTTScopedLock(a2, (MTTScopedLock *)va);
  _Unwind_Resume(a1);
}

void WaitForRemoteIOToFinish(MTBERemoteIOSoundOutput *a1)
{
  MTBERemoteIOSoundOutput::WaitForOutputToStopThreadFunc(a1);
  pthread_exit(0);
}

void MTBERemoteIOSoundOutput::SilenceDetail(AudioUnit *this, char a2)
{
  AudioUnit v3;

  if ((a2 & 1) == 0)
    MTBERemoteIOSoundOutput::WaitForOutputToStop((MTBERemoteIOSoundOutput *)this, 0);
  if (*((_DWORD *)this + 78) == 2)
  {
    *((_BYTE *)this + 440) = 0;
    AudioOutputUnitStop(this[3]);
    v3 = this[1];
    if (v3)
      (*(void (**)(AudioUnit, uint64_t))(*(_QWORD *)v3 + 8))(v3, 8);
    *((_DWORD *)this + 78) = 0;
  }
}

void MTBEAudioFileSoundOutput::MTBEAudioFileSoundOutput(MTBEAudioFileSoundOutput *this, OpaqueExtAudioFile *a2)
{
  AudioFileID *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  int inPropertyData;
  UInt32 ioPropertyDataSize;

  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E9367538;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = a2;
  MEOWVectorBase::MEOWVectorBase((MTBEAudioFileSoundOutput *)((char *)this + 80), 40, 1uLL);
  *((_QWORD *)this + 9) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  ioPropertyDataSize = 8;
  v3 = (AudioFileID *)((char *)this + 32);
  if (ExtAudioFileGetProperty(*((ExtAudioFileRef *)this + 3), 0x6166696Cu, &ioPropertyDataSize, (char *)this + 32)
    || (AudioFileOptimize(*v3),
        inPropertyData = 0,
        AudioFileSetProperty(*v3, 0x64737A75u, 4u, &inPropertyData),
        ExtAudioFileSetProperty(*((ExtAudioFileRef *)this + 3), 0x63666D74u, 0x28u, &xmmword_1D22CEEC8)))
  {
    v5 = 0;
    *((_QWORD *)this + 3) = 0;
  }
  else
  {
    v5 = *((_QWORD *)this + 3);
  }
  if (v5)
    v6 = "Wrapped audio file.\n";
  else
    v6 = "Failed to wrap audio file";
  MTBEWorker::DebugLog(v6, v4);
}

void sub_1D227FCD0(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void MTBEAudioFileSoundOutput::~MTBEAudioFileSoundOutput(MTBEAudioFileSoundOutput *this)
{
  const char *v2;

  *(_QWORD *)this = &off_1E9367538;
  if (*((_QWORD *)this + 3))
  {
    MTBEAudioFileSoundOutput::PushSamples((uint64_t)this);
    *((_QWORD *)this + 3) = 0;
    MTBEWorker::DebugLog("Disengaged from Audio File\n", v2);
  }
  MEOWVectorBase::~MEOWVectorBase((void **)this + 10);
}

{
  MTBEAudioFileSoundOutput::~MTBEAudioFileSoundOutput(this);
  JUMPOUT(0x1D8233BA8);
}

BOOL MTBEAudioFileSoundOutput::InitializedOK(MTBEAudioFileSoundOutput *this)
{
  return *((_QWORD *)this + 3) != 0;
}

uint64_t MTBEAudioFileSoundOutput::SetChannelMap(ExtAudioFileRef *this, int *a2, int a3)
{
  uint64_t result;
  uint64_t inPropertyData;
  UInt32 ioPropertyDataSize;
  AudioConverterRef outPropertyData;

  outPropertyData = 0;
  ioPropertyDataSize = 8;
  result = ExtAudioFileGetProperty(this[3], 0x61636E76u, &ioPropertyDataSize, &outPropertyData);
  if (!(_DWORD)result)
  {
    AudioConverterSetProperty(outPropertyData, 0x63686D70u, 4 * a3, a2);
    inPropertyData = 0;
    return ExtAudioFileSetProperty(this[3], 0x61636366u, 8u, &inPropertyData);
  }
  return result;
}

uint64_t MTBEAudioFileSoundOutput::PushSamples(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int v4;

  v1 = this;
  v2 = *(_QWORD *)(this + 96);
  if (v2 >= 2 && *(_QWORD *)(this + 24))
  {
    v3 = *(_QWORD *)(this + 80);
    v4 = v2 - 1;
    *(_DWORD *)(v3 + 32) = 0;
    *(_DWORD *)(v3 + 36) = v4;
    this = AudioFileSetProperty(*(AudioFileID *)(this + 32), 0x6D6B6C73u, 40 * v4 + 8, (const void *)(v3 + 32));
  }
  if (*(_QWORD *)(v1 + 24))
    return AudioFileOptimize(*(AudioFileID *)(v1 + 32));
  return this;
}

const char *MTBEAudioFileSoundOutput::Disengage(const char *this)
{
  const char *v1;
  const char *v2;

  if (*((_QWORD *)this + 3))
  {
    v1 = this;
    (*(void (**)(const char *))(*(_QWORD *)this + 32))(this);
    *((_QWORD *)v1 + 3) = 0;
    return MTBEWorker::DebugLog("Disengaged from Audio File\n", v2);
  }
  return this;
}

uint64_t MTBEAudioFileSoundOutput::QueueSamples(MTBEAudioFileSoundOutput *this, float *a2, unint64_t inNumberFrames, uint64_t a4)
{
  OpaqueExtAudioFile *v7;
  float *v8;
  unint64_t v9;
  uint64_t v10;
  AudioBufferList ioData;

  v7 = (OpaqueExtAudioFile *)*((_QWORD *)this + 3);
  if (v7)
  {
    v8 = a2;
    ioData.mNumberBuffers = 1;
    ioData.mBuffers[0].mNumberChannels = 1;
    ioData.mBuffers[0].mDataByteSize = 4 * inNumberFrames;
    ioData.mBuffers[0].mData = a2;
    if (inNumberFrames)
    {
      v9 = inNumberFrames;
      do
      {
        *(_DWORD *)v8 = (int)scalbnf(*v8, 24);
        ++v8;
        --v9;
      }
      while (v9);
    }
    ExtAudioFileWrite(v7, inNumberFrames, &ioData);
  }
  if (a4)
  {
    v10 = *((_QWORD *)this + 1);
    if (v10)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 8))(v10, a4);
  }
  *((double *)this + 5) = *((double *)this + 5) + (double)inNumberFrames;
  return 1;
}

__n128 MTBEAudioFileSoundOutput::MarkPosition(MTBEAudioFileSoundOutput *this, const char *a2)
{
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;
  uint64_t v7;

  ++*((_DWORD *)this + 14);
  *((_QWORD *)this + 6) = CFStringCreateWithCString(0, a2, 0x8000100u);
  v7 = *((_QWORD *)this + 9);
  v5 = *(__n128 *)((char *)this + 40);
  v6 = *(_OWORD *)((char *)this + 56);
  MEOWVectorBase::Append((_QWORD *)this + 10);
  v3 = *((_QWORD *)this + 10) + 40 * *((_QWORD *)this + 12);
  result = v5;
  *(__n128 *)(v3 - 40) = v5;
  *(_OWORD *)(v3 - 24) = v6;
  *(_QWORD *)(v3 - 8) = v7;
  return result;
}

void MTBEIgnoreSoundOutput::~MTBEIgnoreSoundOutput(MTBEIgnoreSoundOutput *this)
{
  JUMPOUT(0x1D8233BA8);
}

uint64_t MTBERemoteIOSoundOutput::SampleCapacity(MTBERemoteIOSoundOutput *this)
{
  return SampleBufferRingList::AvailableCapacity((MTBERemoteIOSoundOutput *)((char *)this + 40));
}

uint64_t MTBERemoteIOSoundOutput::OfflineProcessing(MTBERemoteIOSoundOutput *this)
{
  return 0;
}

void MTTScopedLock::~MTTScopedLock(MTTScopedLock *this)
{
  if (*((_BYTE *)this + 8))
  {
    *((_BYTE *)this + 8) = 0;
    pthread_mutex_unlock(*(pthread_mutex_t **)this);
  }
}

_QWORD *std::vector<SampleBuffer>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<SampleBuffer>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 2016 * ((2016 * a2 - 2016) / 0x7E0) + 2016;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1D22800F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<SampleBuffer>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x20820820820821)
    std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SampleBuffer>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2016 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SampleBuffer>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x20820820820821)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2016 * a2);
}

uint64_t SEOpenSpeechChannel(_QWORD *a1)
{
  SpeechChannelManager *v2;

  v2 = (SpeechChannelManager *)operator new();
  SpeechChannelManager::SpeechChannelManager(v2);
  *a1 = *((_QWORD *)v2 + 9);
  return 0;
}

void sub_1D22801F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10E3C40F66663CFLL);
  _Unwind_Resume(a1);
}

uint64_t SECloseSpeechChannel(uint64_t a1)
{
  SpeechChannelManager *valid;

  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (!valid)
    return -1;
  SpeechChannelManager::CloseSpeechChannel(valid);
  return 0;
}

uint64_t SEPauseSpeechAt(uint64_t a1, unint64_t a2)
{
  SpeechChannelManager *valid;

  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (!valid)
    return -1;
  SpeechChannelManager::PauseSpeechAt(valid, a2);
  return 0;
}

uint64_t SEStopSpeechAt(uint64_t a1, unint64_t a2)
{
  SpeechChannelManager *valid;

  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (!valid)
    return -1;
  SpeechChannelManager::StopSpeechAt(valid, a2);
  return 0;
}

uint64_t SEContinueSpeech(uint64_t a1)
{
  SpeechChannelManager *valid;

  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (!valid)
    return -1;
  SpeechChannelManager::ContinueSpeech(valid);
  return 0;
}

uint64_t SEUseVoice(uint64_t a1, VoiceSpec *a2, __CFBundle *a3)
{
  SpeechChannelManager *valid;

  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (valid)
    return SpeechChannelManager::UseVoice(valid, a2, a3);
  else
    return -1;
}

CFIndex SESpeakCFString(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  SpeechChannelManager *valid;

  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (valid)
    return SpeechChannelManager::SpeakCFString(valid, a2, a3);
  else
    return -1;
}

uint64_t SECopyPhonemesFromText(uint64_t a1, const __CFString *a2, const __CFString **a3)
{
  SpeechChannelManager *valid;

  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (valid)
    return SpeechChannelManager::CopyPhonemesFromText(valid, a2, a3);
  else
    return -1;
}

uint64_t SEUseSpeechDictionary(uint64_t a1, const __CFDictionary *a2)
{
  SpeechChannelManager *valid;

  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (valid)
    return SpeechChannelManager::UseSpeechDictionary(valid, a2);
  else
    return -1;
}

CFComparisonResult SECopySpeechProperty(uint64_t a1, const __CFString *a2, const void **a3)
{
  SpeechChannelManager *valid;

  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (valid)
    return SpeechChannelManager::CopySpeechProperty(valid, a2, a3);
  else
    return -1;
}

uint64_t SESetSpeechProperty(uint64_t a1, const __CFString *a2, const __CFNumber *a3)
{
  SpeechChannelManager *valid;

  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (valid)
    return SpeechChannelManager::SetSpeechProperty(valid, a2, a3);
  else
    return -1;
}

uint64_t SEGetSpeechInfo(uint64_t a1, int a2, void *a3)
{
  SpeechChannelManager *valid;

  if (!a3)
    return -50;
  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (valid)
    return SpeechChannelManager::GetSpeechInfo(valid, a2, a3);
  else
    return -1;
}

void sub_1D2280508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D228055C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D22805B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D2280604(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D2280658(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D22806AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D22808DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MTFWrappedSpeechElement;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void MTFESmoothPitch::MTFESmoothPitch(MTFESmoothPitch *this, const MTFEPitchCoeffs *a2)
{
  float *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;

  *(_QWORD *)this = &off_1E93677B8;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 101);
  v3 = (float *)operator new[]();
  *((_QWORD *)this + 2) = v3;
  v4 = *((unsigned int *)this + 2);
  if ((int)v4 < 1)
  {
    v7 = 0.0;
  }
  else
  {
    v5 = 0;
    v7 = 0.0;
    do
    {
      v6 = 6.28318531 / (float)((float)(int)v4 + -1.0);
      v8 = (float)(cosf(v6 * (float)(int)v5) * -0.46) + 0.54;
      v7 = v7 + v8;
      v3[v5++] = v8;
    }
    while (v4 != v5);
  }
  cblas_sscal(v4, 1.0 / v7, v3, 1);
}

void sub_1D2280BAC(_Unwind_Exception *a1)
{
  MTFESpeechVisitor *v1;

  MTFESpeechVisitor::~MTFESpeechVisitor(v1);
  _Unwind_Resume(a1);
}

uint64_t MTFESmoothPitch::VisitIntonationalPhrase(uint64_t this, MTFEIntonationalPhrase *a2)
{
  float *var12;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  unsigned int v8;

  var12 = a2->var12;
  v3 = *(int *)(this + 8);
  v4 = (unint64_t)&var12[a2->var15 - v3];
  if (v4 >= (unint64_t)var12)
  {
    v5 = *(_QWORD *)(this + 16);
    do
    {
      if ((int)v3 < 1)
      {
        v7 = 0.0;
      }
      else
      {
        v6 = 0;
        v7 = 0.0;
        v8 = v3 + 1;
        do
        {
          v7 = v7 + (float)(*(float *)(v4 + v6) * *(float *)(v5 + v6));
          --v8;
          v6 += 4;
        }
        while (v8 > 1);
      }
      *(float *)(v4 + 4 * ((int)v3 - 1)) = v7;
      v4 -= 4;
    }
    while (v4 >= (unint64_t)var12);
  }
  return this;
}

uint64_t MTFETrackingVisitor::PreIntonationalPhrase(uint64_t this, MTFEIntonationalPhrase *a2)
{
  *(_QWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t MTFETrackingVisitor::PostIntonationalPhrase(uint64_t this, MTFEIntonationalPhrase *a2)
{
  a2->var11.var0 += *(_WORD *)(this + 24);
  a2->var11.var1 += *(_WORD *)(this + 26);
  return this;
}

uint64_t MTFETrackingVisitor::PreIntermediatePhrase(uint64_t this, MTFEIntermediatePhrase *a2)
{
  *(_QWORD *)(this + 16) = a2;
  a2->var8.var0 += *(_WORD *)(this + 24);
  a2->var8.var1 += *(_WORD *)(this + 26);
  return this;
}

uint64_t MTFETrackingVisitor::PostIntermediatePhrase(uint64_t this, MTFEIntermediatePhrase *a2)
{
  a2->var9.var0 += *(_WORD *)(this + 24);
  a2->var9.var1 += *(_WORD *)(this + 26);
  return this;
}

uint64_t MTFETrackingVisitor::PreWord(uint64_t this, MTFEWord *a2)
{
  a2->var19.var0 += *(_WORD *)(this + 24);
  a2->var19.var1 += *(_WORD *)(this + 26);
  return this;
}

uint64_t MTFETrackingVisitor::PostWord(uint64_t this, MTFEWord *a2)
{
  a2->var20.var0 += *(_WORD *)(this + 24);
  a2->var20.var1 += *(_WORD *)(this + 26);
  return this;
}

uint64_t MTFETrackingVisitor::PreSyllable(uint64_t this, MTFESyllable *a2)
{
  a2->var9 += *(_WORD *)(this + 24);
  return this;
}

uint64_t MTFETrackingVisitor::PostSyllable(uint64_t this, MTFESyllable *a2)
{
  a2->var10 += *(_WORD *)(this + 24);
  return this;
}

uint64_t MTFETrackingVisitor::PrePhoneme(uint64_t this, MTFEPhoneme *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int var8;
  signed __int16 v6;
  BOOL v7;

  v2 = *(_QWORD *)(this + 8);
  v3 = *(_QWORD *)(this + 16);
  v4 = *(unsigned __int16 *)(v2 + 120);
  var8 = (unsigned __int16)a2->var8;
  *(_BYTE *)(this + 28) = v4 == var8;
  v6 = *(_WORD *)(this + 24) + var8;
  a2->var8 = v6;
  v7 = *(unsigned __int16 *)(v3 + 64) == var8;
  *(_BYTE *)(this + 29) = v7;
  if (v7)
  {
    *(_WORD *)(v3 + 64) = v6;
    *(_WORD *)(v3 + 66) += *(_WORD *)(this + 26);
    if (v4 == var8)
    {
      *(_WORD *)(v2 + 120) += *(_WORD *)(this + 24);
      *(_WORD *)(v2 + 122) += *(_WORD *)(this + 26);
    }
  }
  return this;
}

uint64_t MTFETrackingVisitor::DelPhoneme(uint64_t this)
{
  --*(_WORD *)(this + 24);
  if (*(_BYTE *)(this + 29))
  {
    --*(_WORD *)(*(_QWORD *)(this + 16) + 64);
    if (*(_BYTE *)(this + 28))
      --*(_WORD *)(*(_QWORD *)(this + 8) + 120);
  }
  return this;
}

uint64_t MTFETrackingVisitor::DelSyllable(uint64_t this)
{
  --*(_WORD *)(this + 26);
  if (*(_BYTE *)(this + 29))
  {
    --*(_WORD *)(*(_QWORD *)(this + 16) + 66);
    if (*(_BYTE *)(this + 28))
      --*(_WORD *)(*(_QWORD *)(this + 8) + 122);
  }
  return this;
}

uint64_t MTFETrackingVisitor::PostPhoneme(uint64_t this, MTFEPhoneme *a2)
{
  *(_WORD *)(this + 28) = 0;
  return this;
}

MTFESpeechElement *MTFETrackingVisitor::VisitIntonationalPhrase(MTFETrackingVisitor *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *result;

  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 6) = 0;
  result = MTFESpeechElement::VisitChildren(a2, this);
  *((_WORD *)&a2[2].var2 + 1) += *((_WORD *)this + 12);
  *((_WORD *)&a2[2].var2 + 2) += *((_WORD *)this + 13);
  return result;
}

MTFESpeechElement *MTFETrackingVisitor::VisitIntermediatePhrase(MTFETrackingVisitor *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *result;

  *((_QWORD *)this + 2) = a2;
  LOWORD(a2[1].var0) += *((_WORD *)this + 12);
  WORD1(a2[1].var0) += *((_WORD *)this + 13);
  result = MTFESpeechElement::VisitChildren(a2, this);
  WORD2(a2[1].var0) += *((_WORD *)this + 12);
  HIWORD(a2[1].var0) += *((_WORD *)this + 13);
  return result;
}

MTFESpeechElement *MTFETrackingVisitor::VisitWord(MTFETrackingVisitor *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *result;

  LOWORD(a2[3].var0) += *((_WORD *)this + 12);
  WORD1(a2[3].var0) += *((_WORD *)this + 13);
  result = MTFESpeechElement::VisitChildren(a2, this);
  WORD2(a2[3].var0) += *((_WORD *)this + 12);
  HIWORD(a2[3].var0) += *((_WORD *)this + 13);
  return result;
}

MTFESpeechElement *MTFETrackingVisitor::VisitSyllable(MTFETrackingVisitor *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *result;

  WORD1(a2[1].var0) += *((_WORD *)this + 12);
  result = MTFESpeechElement::VisitChildren(a2, this);
  WORD2(a2[1].var0) += *((_WORD *)this + 12);
  return result;
}

uint64_t MTFETrackingVisitor::VisitPhoneme(MTFETrackingVisitor *this, MTFEPhoneme *a2)
{
  uint64_t result;

  result = MTFETrackingVisitor::PrePhoneme((uint64_t)this, a2);
  *((_WORD *)this + 14) = 0;
  return result;
}

void MTFETrackingVisitor::~MTFETrackingVisitor(MTFETrackingVisitor *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

MTFESpeechElement *MTBEWriteTune::VisitIntonationalPhrase(MTBEWritePhonemes *this, MTFESpeechElement *a2)
{
  *((_QWORD *)this + 5) = (char *)a2[2].var3 + 4 * SLODWORD(a2[2].var5);
  return MTBEWritePhonemes::VisitIntonationalPhrase(this, a2);
}

MTFESpeechElement *MTBEWriteTune::VisitWord(MTBEWriteTune *this, MTFEWord *a2)
{
  MTBEWritePhonemes::HandleWord(this, a2);
  *((_BYTE *)this + 12) = 1;
  *((_QWORD *)this + 6) = a2;
  return MTFESpeechElement::VisitChildren((MTFESpeechElement *)a2, this);
}

void MTBEWriteTune::WriteFloat(MTBEWriteTune *this, float a2)
{
  MTBEWritePhonemes::WriteFixed(this, vcvts_n_s32_f32(a2, 0x10uLL), 1);
}

void MTBEWriteTune::VisitPhoneme(MTBEWriteTune *this, MTFEPhoneme *a2)
{
  int var13;
  uint64_t v5;
  std::string::value_type *v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::value_type *v9;
  MTFESpeechElement *var6;
  BOOL v11;
  uint64_t v12;
  int *v13;
  int v15[22];

  var13 = (int)a2->var13;
  if (*((_BYTE *)this + 12))
  {
    if (a2->var9)
    {
      MTBEWritePhonemes::Write(this, *(std::string::value_type **)(MEMORY[0x1E0DA8EB8] + 8 * *((unsigned __int8 *)this + 13)));
      v5 = *((_QWORD *)this + 6);
      if (!*(_BYTE *)(v5 + 200) || *(unsigned __int8 *)(v5 + 86) == 255)
      {
        v8 = "\n";
      }
      else
      {
        MTBEWritePhonemes::Write(this, " {W \"");
        MTBEWritePhonemes::Write(this, (std::string::value_type *)(*((_QWORD *)this + 6) + 200));
        MTBEWritePhonemes::Write(this, "\" ");
        if (*(_BYTE *)(*((_QWORD *)this + 6) + 86))
          v6 = "Undef";
        else
          v6 = "Noun";
        MTBEWritePhonemes::Write(this, v6);
        if (*(_WORD *)(*((_QWORD *)this + 6) + 92))
        {
          v7 = 0;
          v8 = "}\n";
          do
          {
            std::string::push_back((std::string *)((char *)this + 16), 32);
            v9 = (std::string::value_type *)SLTag::Name((SLTag *)*(unsigned __int16 *)(*((_QWORD *)this + 6)
                                                                                     + 2 * v7
                                                                                     + 94));
            MTBEWritePhonemes::Write(this, v9);
            ++v7;
          }
          while (v7 < *(unsigned __int16 *)(*((_QWORD *)this + 6) + 92));
        }
        else
        {
          v8 = "}\n";
        }
      }
      MTBEWritePhonemes::Write(this, v8);
    }
    else if (var13 < 2)
    {
      goto LABEL_27;
    }
    *((_BYTE *)this + 12) = 0;
  }
  MTBEWritePhonemes::VisitPhoneme(this, a2);
  if ((a2->var15 & 0x4000) == 0)
  {
    MTBEWritePhonemes::Write(this, " {D ");
    MTBEWritePhonemes::WriteLong(this, 5 * var13);
    if (a2->var9)
    {
      var6 = a2->var6;
      if (var6)
        v11 = BYTE2(var6[1].var0) == 0;
      else
        v11 = 1;
      MTFEPitchTargets::MTFEPitchTargets((MTFEPitchTargets *)v15, v11, *((const float **)this + 5), var13);
      MTBEWritePhonemes::Write(this, "; P");
      if (v15[0] >= 1)
      {
        v12 = 1;
        do
        {
          std::string::push_back((std::string *)((char *)this + 16), 32);
          v13 = &v15[2 * v12];
          MTBEWritePhonemes::WriteFixed(this, vcvts_n_s32_f32((float)(*(_QWORD *)v13 & 0xFFFFFFLL) / 100.0, 0x10uLL), 1);
          std::string::push_back((std::string *)((char *)this + 16), 58);
          MTBEWritePhonemes::WriteLong(this, *(int *)((char *)v13 + 3));
        }
        while (v12++ < v15[0]);
      }
    }
    MTBEWritePhonemes::Write(this, "}\n");
  }
LABEL_27:
  *((_QWORD *)this + 5) += 4 * var13;
}

void MTBEWriteTune::VisitCommand(MTBEWritePhonemes *this, MTFECommand *a2)
{
  unint64_t var8;

  var8 = a2->var8;
  if (var8 == 1987013746 || var8 == 1987013741)
    MTBEWritePhonemes::VisitCommand(this, a2);
}

void MTBEWriteTune::WriteVoiceParams(MTBEWriteTune *this, float a2, float a3, float a4, int a5, int a6)
{
  MTBEWritePhonemes::Write(this, "{");
  if (a5)
  {
    MTBEWritePhonemes::Write(this, "V ");
    MTBEWritePhonemes::WriteFixed(this, vcvts_n_s32_f32(a2, 0x10uLL), 1);
    MTBEWritePhonemes::Write(this, " ");
    MTBEWritePhonemes::WriteFixed(this, vcvts_n_s32_f32(a3, 0x10uLL), 1);
    if (a6)
    {
      MTBEWritePhonemes::Write(this, "; ");
LABEL_5:
      MTBEWritePhonemes::Write(this, "R ");
      MTBEWritePhonemes::WriteLong(this, (uint64_t)a4);
    }
  }
  else if (a6)
  {
    goto LABEL_5;
  }
  MTBEWritePhonemes::Write(this, "}\n");
}

void MTBEWriteTune::~MTBEWriteTune(void **this)
{
  *this = &off_1E9365D48;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)this);
}

{
  *this = &off_1E9365D48;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)this);
  JUMPOUT(0x1D8233BA8);
}

float MTFECleanupTune::VisitPhoneme(MTFECleanupTune *this, MTFESpeechElement *a2, float result)
{
  float v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  switch(BYTE2(a2[1].var0))
  {
    case 0xC:
      v3 = 0.6;
      v4 = 11;
      goto LABEL_13;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x19:
    case 0x1A:
    case 0x1B:
      return result;
    case 0x13:
      v3 = 0.4;
      v4 = 31;
      v5 = 18;
      goto LABEL_7;
    case 0x14:
      v3 = 0.6;
      v4 = 3;
      goto LABEL_13;
    case 0x15:
      v3 = 0.6;
      v4 = 5;
      goto LABEL_13;
    case 0x16:
      v3 = 0.6;
      v4 = 7;
      goto LABEL_13;
    case 0x17:
      v3 = 0.6;
      v4 = 9;
      goto LABEL_13;
    case 0x18:
      v3 = 0.6;
      v4 = 10;
LABEL_13:
      v5 = 32;
      goto LABEL_7;
    case 0x1C:
      v3 = 0.55;
      v4 = 11;
      v5 = 33;
      goto LABEL_7;
    case 0x1D:
      v3 = 0.55;
      v4 = 25;
      v5 = 36;
LABEL_7:
      result = MTFECleanupTune::SplitPhoneme(this, a2, v4, v5, v3);
      break;
    default:
      if (BYTE2(a2[1].var0) == 56)
        (*((void (**)(MTFESpeechElement *))a2->var0 + 2))(a2);
      break;
  }
  return result;
}

float MTFECleanupTune::SplitPhoneme(MTFECleanupTune *this, MTFESpeechElement *a2, unsigned __int8 a3, unsigned __int8 a4, float a5)
{
  MTFEPhoneme *v8;
  float v9;
  float result;

  BYTE2(a2[1].var0) = a3;
  v8 = (MTFEPhoneme *)operator new();
  MTFEPhoneme::MTFEPhoneme(v8, a4);
  MTFESpeechElement::AddChildAfter(a2->var5, (MTFESpeechElement *)v8, a2);
  v9 = *(float *)&a2[1].var1;
  *(float *)&a2[1].var1 = v9 * a5;
  result = (float)(1.0 - a5) * v9;
  v8->var13 = result;
  return result;
}

void sub_1D22815F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

void MTFECleanupTune::~MTFECleanupTune(MTFECleanupTune *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

float MTFEPitchTarget::Interpolate(_QWORD *a1, uint64_t a2, int a3, _QWORD *a4, float result)
{
  uint64_t v5;
  int v6;
  int v7;
  float v8;
  float *v9;
  uint64_t v10;

  v5 = 1374389535 * (int)((*a1 >> 24) * a3 + 50);
  v6 = (v5 >> 37) + ((unint64_t)v5 >> 63);
  v7 = (int)((*a4 >> 24) * a3 + 50) / 100;
  if (v7 > v6)
  {
    result = (float)(*a1 & 0xFFFFFFLL) / 100.0;
    v8 = (float)((float)((float)(*a4 & 0xFFFFFFLL) / 100.0) - result) / (float)(v7 - v6);
    v9 = (float *)(a2 + 4 * v6);
    v10 = v7 - (uint64_t)v6;
    do
    {
      *v9++ = result;
      result = v8 + result;
      --v10;
    }
    while (v10);
  }
  return result;
}

double MTFEPitchTargets::CombineWithTargets(MTFEPitchTargets *this, int a2, const MTFEPitchTargets *a3, int a4)
{
  int v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  __int128 v16;
  double result;
  __int128 v18;
  uint64_t v19;
  _BYTE v20[88];

  v8 = a4 + a2;
  *(_DWORD *)v20 = 0;
  memset(&v20[8], 0, 80);
  v9 = *(_DWORD *)this;
  if ((int)v9 >= 1)
  {
    v10 = (unint64_t *)((char *)this + 8);
    do
    {
      v11 = *v10++;
      v19 = (uint64_t)(float)((float)((float)(v11 & 0xFFFFFF) / 100.0) * 100.0) | (((int)((v11 >> 24) * a2) / v8) << 24);
      MTFEPitchTargets::AddTarget((unsigned int *)v20, (unint64_t *)&v19);
      --v9;
    }
    while (v9);
  }
  v12 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 >= 1)
  {
    v13 = 0;
    v14 = 100 * a2;
    do
    {
      v15 = *((_QWORD *)a3 + v13 + 1);
      v19 = (uint64_t)(float)((float)((float)(v15 & 0xFFFFFF) / 100.0) * 100.0) | (((int)(v14 + (v15 >> 24) * a4) / v8) << 24);
      if ((MTFEPitchTargets::AddTarget((unsigned int *)v20, (unint64_t *)&v19) & 1) == 0)
      {
        MTFEPitchTargets::DropTarget((MTFEPitchTargets *)v20);
        --v13;
      }
      ++v13;
    }
    while (v13 < v12);
  }
  v16 = *(_OWORD *)&v20[48];
  *((_OWORD *)this + 2) = *(_OWORD *)&v20[32];
  *((_OWORD *)this + 3) = v16;
  *((_OWORD *)this + 4) = *(_OWORD *)&v20[64];
  *((_QWORD *)this + 10) = *(_QWORD *)&v20[80];
  result = *(double *)v20;
  v18 = *(_OWORD *)&v20[16];
  *(_OWORD *)this = *(_OWORD *)v20;
  *((_OWORD *)this + 1) = v18;
  return result;
}

uint64_t MTFEPitchTargets::AddTarget(unsigned int *a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  size_t v9;
  int v10;

  v3 = *a2;
  v4 = *a1;
  if ((int)v4 <= 0)
  {
LABEL_6:
    v10 = *a1;
  }
  else
  {
    v6 = 0;
    v7 = v3 >> 24;
    v8 = (char *)(a1 + 2);
    v9 = 8 * (int)v4;
    while ((int)v7 > *(_DWORD *)(v8 + 3))
    {
      ++v6;
      v8 += 8;
      v9 -= 8;
      if (v4 == v6)
      {
        if ((_DWORD)v4 != 10)
          goto LABEL_6;
        return 0;
      }
    }
    if ((int)v4 <= (int)v6)
    {
      if ((_DWORD)v4 == 10)
        return 0;
      v10 = *a1;
    }
    else
    {
      if (*(_DWORD *)(v8 + 3) == (_DWORD)v7)
      {
        *(_QWORD *)v8 = v3;
        return 1;
      }
      if ((_DWORD)v4 == 10)
        return 0;
      memmove(v8 + 8, v8, v9);
      v3 = *a2;
      v10 = *a1;
    }
    LODWORD(v4) = v6;
  }
  *(_QWORD *)&a1[2 * (int)v4 + 2] = v3;
  *a1 = v10 + 1;
  return 1;
}

MTFEPitchTargets *MTFEPitchTargets::DropTarget(MTFEPitchTargets *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  float v4;
  float v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  int v10;
  float v11;
  unint64_t v12;
  float v13;

  if (*(_DWORD *)this >= 3)
  {
    v1 = 0;
    v3 = *((_QWORD *)this + 1);
    v2 = *((_QWORD *)this + 2);
    v4 = (float)(int)(v2 >> 24);
    v5 = (float)(int)(v3 >> 24);
    v6 = (*(_DWORD *)this - 1);
    v7 = (float)(v2 & 0xFFFFFF) / 100.0;
    v8 = (float)(v3 & 0xFFFFFF) / 100.0;
    v9 = 100000.0;
    v10 = 1;
    do
    {
      v11 = v4;
      v12 = *((_QWORD *)this + v1 + 3);
      v4 = (float)(int)(v12 >> 24);
      v13 = vabds_f32(v7, v8+ (float)((float)((float)((float)((float)(v12 & 0xFFFFFF) / 100.0) - v8) / (float)(v4 - v5))* (float)(v11 - v5)));
      ++v1;
      if (v13 < v9)
      {
        v10 = v1;
        v9 = v13;
      }
      v8 = v7;
      v7 = (float)(v12 & 0xFFFFFF) / 100.0;
      v5 = v11;
    }
    while (v6 - 1 != v1);
    *(_DWORD *)this = v6;
    return (MTFEPitchTargets *)memmove((char *)this + 8 * v10 + 8, (char *)this + 8 * v10 + 16, 8 * ((int)v6 - v10));
  }
  return this;
}

uint64_t MTFEPitchTargets::FindTarget(unsigned int *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int *v5;

  result = *a1;
  if ((int)result > 0)
  {
    v4 = 0;
    v5 = a1 + 2;
    while (*(_DWORD *)(a2 + 3) > (int)(*(_QWORD *)&v5[2 * v4] >> 24))
    {
      if (result == ++v4)
        return result;
    }
    return v4;
  }
  return result;
}

void MTFEPitchTargets::MTFEPitchTargets(MTFEPitchTargets *this, int a2, const float *a3, int a4)
{
  unsigned int *v8;
  uint64_t v9;
  char *v10;
  float *v11;
  uint64_t v12;
  int v13;
  float v14;
  int v15;
  int v16;
  char *v17;
  float v18;
  uint64_t i;
  float v20;
  int v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  float v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45[2];

  v45[1] = *MEMORY[0x1E0C80C00];
  *(_OWORD *)((char *)this + 8) = 0u;
  v42 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  v8 = (unsigned int *)MEMORY[0x1E0C80A78]();
  v10 = (char *)&v41 - v9;
  *v8 = 0;
  v12 = (uint64_t)(float)(*v11 * 100.0);
  v44 = (uint64_t)(float)(v11[v13] * 100.0) | 0x64000000;
  v45[0] = v12;
  MTFEPitchTargets::AddTarget(v8, v45);
  if (a2)
    MTFEPitchTargets::AddTarget((unsigned int *)this, (unint64_t *)&v44);
  MTFEPitchTarget::Interpolate(v45, (uint64_t)v10, a4, &v44, v14);
  if (a4 >= 0)
    v15 = a4;
  else
    v15 = a4 + 1;
  if (a4 >= 2)
  {
    v16 = 0;
    HIDWORD(v41) = v15 >> 1;
    v17 = (char *)this + 8;
    v18 = 0.0;
    for (i = 1; ; i = 1)
    {
      do
      {
        v20 = vabds_f32(a3[i], *(float *)&v10[4 * i]);
        if (v20 > v18)
        {
          v16 = i;
          v18 = v20;
        }
        ++i;
      }
      while (i != a4);
      if (v18 < 1.0)
        return;
      v21 = (HIDWORD(v41) + 100 * v16) / a4;
      v22 = a3[v16];
      v43 = (uint64_t)(float)(v22 * 100.0) | (v21 << 24);
      v23 = *(_DWORD *)this;
      if ((int)v23 <= 0)
      {
LABEL_17:
        v25 = 0;
      }
      else
      {
        v24 = 0;
        while ((int)(((uint64_t)(float)(v22 * 100.0) | (unint64_t)(v21 << 24)) >> 24) > (int)(*(_QWORD *)&v17[8 * v24] >> 24))
        {
          if (v23 == ++v24)
            goto LABEL_17;
        }
        if ((int)v23 <= (int)v24)
        {
          v25 = 0;
        }
        else
        {
          if (v21 == (*(_QWORD *)&v17[8 * v24] >> 24))
          {
            *(float *)&v10[4 * v16] = v22;
            goto LABEL_42;
          }
          v25 = 1;
        }
        LODWORD(v23) = v24;
      }
      v26 = (_QWORD *)((char *)this + 8 * (int)v23);
      v27 = MTFEPitchTarget::Interpolate(v26, (uint64_t)v10, a4, &v43, v22);
      if (v25)
        v28 = v26 + 1;
      else
        v28 = &v44;
      MTFEPitchTarget::Interpolate(&v43, (uint64_t)v10, a4, v28, v27);
      MTFEPitchTargets::AddTarget((unsigned int *)this, (unint64_t *)&v43);
      LODWORD(v23) = *(_DWORD *)this;
      if (*(_DWORD *)this >= 2)
      {
        v29 = 0;
        v30 = *v42 & 0xFFFFFFLL;
        v31 = 1;
        v32 = 1;
        do
        {
          v33 = v30;
          v34 = *((_QWORD *)this + v31 + 1);
          v30 = v34 & 0xFFFFFF;
          v35 = (v34 & 0xFFFFFF) >= v33;
          v36 = (v34 & 0xFFFFFF) > v33;
          if (!v35)
            v36 = -1;
          if (v36 == v29)
          {
            ++v32;
            if (v29)
            {
              if (v32 == 4)
              {
                v37 = 1374389535 * (int)((v34 >> 24) * a4 + 50);
                v38 = (v37 >> 37) + ((unint64_t)v37 >> 63);
                v39 = 1374389535 * (*(_DWORD *)((char *)this + 8 * v31 - 13) * a4 + 50);
                v40 = (v39 >> 37) + ((unint64_t)v39 >> 63);
                if (v40 < v38)
                  memcpy(&v10[4 * v40], &a3[v40], 4 * (v38 + ~v40) + 4);
                v32 = 4;
              }
            }
            else if (v32 == 3)
            {
              memmove(&v42[v31 - 1], &v42[v31], 8 * ((int)v23 - v31));
              v29 = 0;
              --v31;
              LODWORD(v23) = *(_DWORD *)this;
              v32 = 3;
            }
            else
            {
              v29 = 0;
            }
          }
          else
          {
            v32 = 2;
            v29 = v36;
          }
          ++v31;
        }
        while (v31 < (int)v23);
      }
LABEL_42:
      if ((int)v23 > 9)
        return;
      v16 = 0;
      v18 = 0.0;
    }
  }
}

uint64_t MTFETunePitch::VisitSentence(MTFETunePitch *this, MTFESpeechElement *a2)
{
  int Pitch;
  uint64_t Modulation;

  Pitch = MTBEParam::GetPitch(*((MTBEParam **)this + 1));
  Modulation = MTBEParam::GetModulation(*((MTBEParam **)this + 1));
  *((_QWORD *)this + 6) = *(_QWORD *)(&a2[1].var2 + 2);
  MTBEParam::GetPitchFloorRange(*((MTBEParam **)this + 1), (float *)this + 10, (float *)this + 11);
  MTFESpeechElement::VisitChildren(a2, this);
  MTBEParam::SetPitch(*((_QWORD *)this + 1), Pitch);
  return MTBEParam::SetModulation(*((_QWORD *)this + 1), Modulation);
}

MTFESpeechElement *MTFETunePitch::VisitIntonationalPhrase(MTFETunePitch *this, MTFESpeechElement *a2)
{
  MTFEMelody *var6;
  float *var3;
  uint64_t var5_high;
  _BYTE *v7;
  unint64_t v8;
  int *v9;
  _DWORD *v10;
  int v11;

  var6 = 0;
  *((_DWORD *)this + 53) = 0;
  var3 = (float *)a2[2].var3;
  var5_high = SHIDWORD(a2[2].var5);
  *((_QWORD *)this + 8) = &var3[SLODWORD(a2[2].var5)];
  *((_QWORD *)this + 9) = &var3[var5_high];
  *((_QWORD *)this + 17) = 0;
  v7 = (_BYTE *)*((_QWORD *)this + 1);
  if (!v7[50])
  {
    if (v7[48] || v7[49])
      var6 = 0;
    else
      var6 = (MTFEMelody *)a2[3].var6;
  }
  *((_QWORD *)this + 4) = var6;
  MTFESpeechElement::VisitChildren(a2, this);
  if (*((_DWORD *)this + 53) == 1 || *((_QWORD *)this + 4))
  {
    v8 = *((_QWORD *)this + 9);
    v9 = (int *)*((_QWORD *)this + 7);
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) < v8)
    {
      v11 = *v9;
      do
        *v10++ = v11;
      while ((unint64_t)v10 < v8);
    }
    *((_QWORD *)this + 7) = v10;
  }
  return MTFESpeechElement::VisitChildren((MTFESpeechElement *)((char *)a2 + 64), this);
}

MTFESpeechElement *MTFETunePitch::VisitWord(float **this, MTFESpeechElement *a2)
{
  int v4;
  float *v5;
  float *v6;
  uint64_t v7;
  unsigned int v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  float *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  float *v21;
  unsigned int v22;
  float v23;
  float *v24;
  float v25;

  MTFESpeechElement::VisitChildren(a2 + 2, (MTFESpeechVisitor *)this);
  v4 = *((_DWORD *)this + 53);
  if (((uint64_t)a2[1].var0 & 1) != 0)
  {
    if (v4 == 2)
    {
      v13 = this[8];
      this[17] = v13;
      v15 = *((_OWORD *)v13 + 1);
      v14 = *((_OWORD *)v13 + 2);
      v16 = *(_OWORD *)v13;
      this[16] = (float *)*((_QWORD *)v13 + 6);
      *((_OWORD *)this + 6) = v15;
      *((_OWORD *)this + 7) = v14;
      *((_OWORD *)this + 5) = v16;
    }
    else
    {
      if (v4)
      {
LABEL_17:
        v17 = (uint64_t)&this[8][a2[3].var1];
        this[25] = (float *)v17;
        v18 = *(_OWORD *)(v17 - 56);
        v19 = *(_OWORD *)(v17 - 40);
        v20 = *(_OWORD *)(v17 - 24);
        this[24] = *(float **)(v17 - 8);
        *((_OWORD *)this + 10) = v19;
        *((_OWORD *)this + 11) = v20;
        *((_OWORD *)this + 9) = v18;
        return MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
      }
      v13 = this[17];
    }
    this[7] = v13 - 1;
    *((_DWORD *)this + 53) = 1;
    goto LABEL_17;
  }
  if (!v4)
    goto LABEL_21;
  if (v4 == 1)
  {
    v5 = this[25];
    v6 = this[17];
    if (v6)
    {
      v7 = v5 - v6;
      if (v7 >= 14)
        v7 = 14;
      if ((int)v7 < 1)
        goto LABEL_21;
      v8 = v7 + 1;
      v9 = 1.0 / (float)(v7 + 1);
      v10 = (float *)(this + 10);
      v11 = v9;
      do
      {
        v12 = *v10++;
        *v6 = (float)((float)(1.0 - v11) * v12) + (float)(*v6 * v11);
        ++v6;
        v11 = v9 + v11;
        --v8;
      }
      while (v8 > 1);
      if ((int)v7 < 1)
        goto LABEL_21;
    }
    else
    {
      v7 = 14;
      v9 = 0.066667;
    }
    v21 = &v5[-v7];
    v22 = v7 + 1;
    v23 = v9;
    v24 = (float *)this - v7 + 50;
    do
    {
      v25 = *v24++;
      *v21 = (float)((float)(1.0 - v23) * *v21) + (float)(v25 * v23);
      ++v21;
      v23 = v9 + v23;
      --v22;
    }
    while (v22 > 1);
LABEL_21:
    *((_DWORD *)this + 53) = 2;
  }
  return MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
}

void MTFETunePitch::Blend(MTFETunePitch *this, float *a2, float *a3, float *a4, int a5)
{
  unsigned int v5;
  float v6;
  float v7;
  float v8;
  float v9;

  if (a5 >= 1)
  {
    v5 = a5 + 1;
    v6 = 1.0 / (float)(a5 + 1);
    do
    {
      v7 = *a2++;
      v8 = v7;
      v9 = *a3++;
      *a4++ = (float)((float)(1.0 - v6) * v9) + (float)(v8 * v6);
      v6 = (float)(1.0 / (float)(a5 + 1)) + v6;
      --v5;
    }
    while (v5 > 1);
  }
}

float MTFETunePitch::VisitCommand(MTFETunePitch *this, MTFECommand *a2)
{
  int64_t var8;
  uint64_t v4;
  int64_t var9;
  MTBEParam *v6;
  int64_t v7;
  MTBEParam *v8;
  uint64_t v9;
  int Pitch;
  uint64_t v11;
  int v12;
  MTBEParam *v13;

  var8 = a2->var8;
  if (var8 <= 1885495666)
  {
    switch(var8)
    {
      case 1650879602:
        *((float *)this + 12) = (float)a2->var9 / 100.0;
        return MTBEParam::GetPitchFloorRange(*((MTBEParam **)this + 1), (float *)this + 10, (float *)this + 11);
      case 1651666535:
        *((float *)this + 13) = (float)a2->var9 / 100.0;
        return MTBEParam::GetPitchFloorRange(*((MTBEParam **)this + 1), (float *)this + 10, (float *)this + 11);
      case 1885495666:
        v6 = (MTBEParam *)*((_QWORD *)this + 1);
        v7 = (int)(12 * MTBEParam::GetPitch(v6) + (SLODWORD(a2->var9) >> 8) + 8025);
        goto LABEL_16;
    }
  }
  else
  {
    if (var8 <= 1886220145)
    {
      if (var8 != 1885495667)
      {
        if (var8 == 1886220132)
        {
          v4 = *((_QWORD *)this + 1);
          var9 = a2->var9;
LABEL_20:
          MTBEParam::SetModulation(v4, var9);
          return MTBEParam::GetPitchFloorRange(*((MTBEParam **)this + 1), (float *)this + 10, (float *)this + 11);
        }
        return MTBEParam::GetPitchFloorRange(*((MTBEParam **)this + 1), (float *)this + 10, (float *)this + 11);
      }
      v6 = (MTBEParam *)*((_QWORD *)this + 1);
      v7 = a2->var9 >> 8;
LABEL_16:
      v12 = MTBEParam::MidiToPitch(v6, v7);
      MTBEParam::SetPitch((uint64_t)v6, v12);
      return MTBEParam::GetPitchFloorRange(*((MTBEParam **)this + 1), (float *)this + 10, (float *)this + 11);
    }
    if (var8 == 1886220146)
    {
      v13 = (MTBEParam *)*((_QWORD *)this + 1);
      var9 = a2->var9 + MTBEParam::GetModulation(v13);
      v4 = (uint64_t)v13;
      goto LABEL_20;
    }
    if (var8 == 1920165236)
    {
      v8 = (MTBEParam *)*((_QWORD *)this + 2);
      if (v8)
      {
        if (a2->var9 == 1)
        {
          v9 = *((_QWORD *)this + 1);
          Pitch = MTBEParam::GetPitch(v8);
          MTBEParam::SetPitch(v9, Pitch);
          v11 = *((_QWORD *)this + 1);
          var9 = MTBEParam::GetModulation(*((MTBEParam **)this + 2));
          v4 = v11;
          goto LABEL_20;
        }
        MTBEParam::ResetPitchParams((uint64_t)v8, *((__int16 **)this + 3));
      }
      MTBEParam::ResetPitchParams(*((_QWORD *)this + 1), *((__int16 **)this + 3));
    }
  }
  return MTBEParam::GetPitchFloorRange(*((MTBEParam **)this + 1), (float *)this + 10, (float *)this + 11);
}

MTFESpeechElement *MTFETunePitch::VisitSyllable(MTFETunePitch *this, MTFESpeechElement *a2)
{
  uint64_t v4;
  unint64_t var0_low;
  float v6;

  v4 = *((_QWORD *)this + 4);
  if (v4 && (var0_low = SLOWORD(a2[1].var0), *(_QWORD *)(v4 + 16) > var0_low))
  {
    v6 = MTFEMelody::Pitch((MTFEMelody *)v4, var0_low);
    *((float *)this + 52) = v6;
    if (!*(_WORD *)(*((_QWORD *)this + 3) + 8))
      *((float *)this + 52) = v6 * 0.5;
  }
  else
  {
    *((_DWORD *)this + 52) = 0;
  }
  return MTFESpeechElement::VisitChildren(a2, this);
}

float MTFETunePitch::VisitPhoneme(MTFETunePitch *this, MTFEPhoneme *a2)
{
  MTFEPitchTargets *var17;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float v9;
  unint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int v16;
  float *v17;
  float *v18;
  unint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  int v23;
  float *v24;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int var13;
  float result;

  var17 = a2->var17;
  if (var17)
  {
    v5 = *(_DWORD *)var17;
    if ((int)v5 >= 1)
    {
      v6 = 0;
      v7 = *((_QWORD *)this + 8);
      v8 = *((_QWORD *)this + 9);
      v9 = a2->var13 / 100.0;
      do
      {
        v10 = *((_QWORD *)var17 + v6 + 1);
        v11 = (float)(v10 & 0xFFFFFF) / 100.0;
        v12 = *((float *)this + 12);
        if (v12 > 1.0)
        {
          v13 = logf(v11 / v12);
          v14 = v13 / logf((float)(v12 + *((float *)this + 13)) / v12);
          v15 = *((float *)this + 10);
          v11 = v15 * powf((float)(v15 + *((float *)this + 11)) / v15, v14);
        }
        v16 = (int)(float)((float)((float)(int)(v10 >> 24) * v9) + 0.5);
        v17 = (float *)(v7 + 4 * v16);
        if ((unint64_t)v17 < v8)
        {
          v18 = (float *)*((_QWORD *)this + 7);
          if (v17 >= v18)
          {
            *v17 = v11;
            v19 = (unint64_t)((char *)v17 - (char *)v18) >> 2;
            v20 = *v18;
            *((_QWORD *)this + 7) = v17;
            if ((int)v19 >= 2)
            {
              v21 = v16;
              v22 = (float)(v11 - v20) / (float)(int)v19;
              v23 = 1 - v19;
              v24 = (float *)(v7 - 4 + 4 * v21);
              do
              {
                v11 = v11 - v22;
                *v24-- = v11;
              }
              while (!__CFADD__(v23++, 1));
            }
          }
        }
        ++v6;
      }
      while (v6 != v5);
    }
  }
  else if (*((float *)this + 52) != 0.0)
  {
    v26 = *((_QWORD *)this + 8);
    LODWORD(v27) = (int)a2->var13;
    if ((int)v27 < 1)
    {
      v27 = (int)v27;
    }
    else
    {
      v28 = (_DWORD *)*((_QWORD *)this + 8);
      do
      {
        *v28++ = *((_DWORD *)this + 52);
        var13 = (int)a2->var13;
      }
      while ((unint64_t)v28 < v26 + 4 * var13);
      v27 = var13;
    }
    *((_QWORD *)this + 7) = v26 + 4 * v27 - 4;
  }
  result = a2->var13;
  *((_QWORD *)this + 8) += 4 * (int)result;
  return result;
}

void MTFETunePitch::~MTFETunePitch(MTFETunePitch *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void MTFEStemTracker::MTFEStemTracker(MTFEStemTracker *this, SLDictionary *a2, uint64_t a3)
{
  _QWORD *v6;
  SLEncyclopedia *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  SLDictionary::SLDictionary((SLDictionary *)this);
  *v6 = &off_1E9367AD8;
  v6[4] = a3;
  v7 = (SLEncyclopedia *)(v6 + 7);
  SLDictionary::SLDictionary((SLDictionary *)(v6 + 7));
  *((_QWORD *)this + 7) = MEMORY[0x1E0DA8EE0] + 16;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = a2;
  *((_QWORD *)this + 5) = operator new[]();
  *((_QWORD *)this + 6) = operator new[]();
  v8 = *((_QWORD *)this + 4);
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = *((_QWORD *)this + 5);
    do
    {
      *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v10) = v11 + v9;
      v11 = *((_QWORD *)this + 5);
      *(_QWORD *)(v11 + v9 + 8) = 0;
      ++v10;
      v9 += 80;
    }
    while (v8 != v10);
  }
  SLEncyclopedia::PushBack(v7, (SLDictionary *)this);
}

void sub_1D228262C(_Unwind_Exception *a1)
{
  SLDictionary *v1;

  SLDictionary::~SLDictionary(v1);
  _Unwind_Resume(a1);
}

void MTFEStemTracker::~MTFEStemTracker(SLDictionary *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E9367AD8;
  v2 = *((_QWORD *)this + 5);
  if (v2)
    MEMORY[0x1D8233B90](v2, 0x1000C8034A87E94);
  v3 = *((_QWORD *)this + 6);
  if (v3)
    MEMORY[0x1D8233B90](v3, 0x20C8093837F09);
  SLEncyclopedia::Remove((SLEncyclopedia *)((char *)this + 56), this);
  MEMORY[0x1D8233A7C]((char *)this + 56);
  SLDictionary::~SLDictionary(this);
}

{
  MTFEStemTracker::~MTFEStemTracker(this);
  JUMPOUT(0x1D8233BA8);
}

uint64_t MTFEStemTracker::SeenRecently(MTFEStemTracker *this, const char *a2, uint64_t a3, int a4)
{
  const char *v8;
  size_t v9;
  MTFEStemTracker *v10;
  uint64_t v11;
  _BYTE v13[16];

  SLWordBuilder::SLWordBuilder((SLWordBuilder *)v13);
  if ((MTBEDebugFlags::sMTXDebug & 0x1000) != 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Word %.*s ", a3, a2);
  if (SLEncyclopedia::Lookup((MTFEStemTracker *)((char *)this + 56), a2, a3, (SLWordBuilder *)v13, (SLDictionary *)((char *)this + 56)))
  {
    v8 = (char *)this + 120;
    v9 = *((_QWORD *)this + 14);
    v10 = this;
  }
  else
  {
    v10 = this;
    v8 = a2;
    v9 = a3;
  }
  MTFEStemTracker::Seen(v10, v8, v9, a4);
  v11 = *((unsigned __int8 *)this + 24);
  SLWordBuilder::~SLWordBuilder((SLWordBuilder *)v13);
  return v11;
}

void sub_1D22827B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  SLWordBuilder::~SLWordBuilder((SLWordBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t MTFEStemTracker::Seen(MTFEStemTracker *this, const char *__src, size_t __n, int a4)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((MTBEDebugFlags::sMTXDebug & 0x1000) != 0)
  {
    v8 = "";
    if (a4)
      v8 = "[AllCaps] ";
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "-> Stem %.*s %s", __n, __src, v8);
  }
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    v10 = 0;
    v11 = *((_QWORD *)this + 6);
    while (1)
    {
      v12 = *(unsigned __int8 **)(v11 + 8 * v10);
      v13 = *((_QWORD *)v12 + 1);
      if (!v13)
        break;
      if (v13 == __n && *v12 == a4)
      {
        result = memcmp(__src, v12 + 16, __n);
        if (!(_DWORD)result)
        {
          *((_BYTE *)this + 24) = 1;
          if ((MTBEDebugFlags::sMTXDebug & 0x1000) != 0)
            result = fprintf((FILE *)*MEMORY[0x1E0C80C10], "was last seen %lu stems ago\n", v10);
          if (v10)
            goto LABEL_20;
          return result;
        }
      }
      if (v9 == ++v10)
      {
        v10 = v9;
        break;
      }
    }
  }
  else
  {
    v10 = 0;
  }
  if ((MTBEDebugFlags::sMTXDebug & 0x1000) != 0)
  {
    fwrite("is new\n", 7uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    v9 = *((_QWORD *)this + 4);
  }
  v10 -= v10 == v9;
  *((_BYTE *)this + 24) = 0;
  v16 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v10);
  *(_BYTE *)v16 = a4;
  *(_QWORD *)(v16 + 8) = __n;
  memcpy((void *)(v16 + 16), __src, __n);
LABEL_20:
  v17 = *((_QWORD *)this + 6);
  v18 = *(_QWORD *)(v17 + 8 * v10);
  result = (uint64_t)memmove((void *)(v17 + 8), (const void *)v17, 8 * v10);
  **((_QWORD **)this + 6) = v18;
  return result;
}

uint64_t MTFEStemTracker::Reset(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(this + 32);
  if (v1)
  {
    v2 = (_QWORD *)(*(_QWORD *)(this + 40) + 8);
    do
    {
      *v2 = 0;
      v2 += 10;
      --v1;
    }
    while (v1);
  }
  return this;
}

uint64_t MTFEStemTracker::Lookup(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = (***(uint64_t (****)(_QWORD, const void *, size_t, uint64_t, _QWORD))(a1 + 96))(*(_QWORD *)(a1 + 96), a2, a3, a4, 0);
  if ((_DWORD)v7)
  {
    *(_QWORD *)(a1 + 112) = a3;
    memcpy((void *)(a1 + 120), a2, a3);
  }
  return v7;
}

uint64_t MTFESegmentalPerturbations::MTFESegmentalPerturbations(uint64_t result, uint64_t a2, uint64_t a3, int a4, BOOL a5, char a6)
{
  BOOL v6;

  *(_QWORD *)result = &off_1E9367B28;
  if (a4)
  {
    if (!a3)
    {
      *(_BYTE *)(result + 8) = 1;
      goto LABEL_11;
    }
    v6 = *(_WORD *)(a3 + 2) != 0;
  }
  else
  {
    v6 = 0;
  }
  *(_BYTE *)(result + 8) = v6;
  if (a5)
  {
    if (a3)
      a5 = *(_WORD *)(a3 + 2) != 0;
    else
      a5 = 1;
  }
  else
  {
    a5 = 0;
  }
LABEL_11:
  *(_BYTE *)(result + 9) = a5;
  *(_QWORD *)(result + 16) = &off_1E9367B98;
  *(_QWORD *)(result + 24) = a2;
  *(_BYTE *)(result + 32) = a6;
  *(_QWORD *)(result + 64) = &off_1E9367C50;
  *(_QWORD *)(result + 72) = a2;
  *(_BYTE *)(result + 80) = a6;
  return result;
}

uint64_t MTFESegmentalPerturbations::Visit(uint64_t this, MTFESpeechElement *a2)
{
  uint64_t v3;

  v3 = this;
  if (*(_BYTE *)(this + 8))
    this = ((uint64_t (*)(MTFESpeechElement *, uint64_t))*a2->var0)(a2, this + 16);
  if (*(_BYTE *)(v3 + 9))
    return ((uint64_t (*)(MTFESpeechElement *, uint64_t))*a2->var0)(a2, v3 + 64);
  return this;
}

MTFESpeechElement *MTFESegmentalPerturbations::Vowel::VisitIntonationalPhrase(MTFESegmentalPerturbations::Vowel *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *result;
  int var5_high;
  uint64_t v6;
  int v7;
  int v8;
  float v9;
  float v10;
  uint64_t v11;
  unsigned int v12;
  float v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  float v17;

  *((_QWORD *)this + 3) = (char *)a2[2].var3 + 4 * SLODWORD(a2[2].var5);
  *((_QWORD *)this + 4) = 0x3F80000000000000;
  *((_DWORD *)this + 10) = 0;
  result = MTFESpeechElement::VisitChildren(a2, this);
  var5_high = HIDWORD(a2[2].var5);
  v6 = *((int *)this + 10);
  v7 = v6 + LODWORD(a2[2].var5);
  v8 = var5_high + ~v7;
  v9 = 1.0 / (float)v8;
  v10 = 0.5 - (float)(*((float *)this + 9) * 0.5);
  if (*((_BYTE *)this + 16))
  {
    if (v8 < 1)
      return result;
    v11 = *((_QWORD *)this + 3) + 4;
    v12 = var5_high - v7;
    v13 = 0.0;
    do
    {
      v13 = v9 + v13;
      v14 = v6 + 1;
      *(float *)(v11 + 4 * v6) = *(float *)(v11 + 4 * v6)
                               / (float)(*((float *)this + 9) + (float)((float)(v10 * v13) * v13));
      --v12;
      ++v6;
    }
    while (v12 > 1);
  }
  else
  {
    if (v8 < 1)
      return result;
    v15 = *((_QWORD *)this + 3) + 4;
    v16 = var5_high - v7;
    v17 = 0.0;
    do
    {
      v17 = v9 + v17;
      v14 = v6 + 1;
      *(float *)(v15 + 4 * v6) = (float)(*((float *)this + 9) + (float)((float)(v10 * v17) * v17))
                               * *(float *)(v15 + 4 * v6);
      --v16;
      ++v6;
    }
    while (v16 > 1);
  }
  *((_DWORD *)this + 10) = v14;
  return result;
}

uint64_t MTFESegmentalPerturbations::Vowel::VisitPhoneme(uint64_t this, MTFEPhoneme *a2)
{
  int var9;
  BOOL v3;
  unsigned int var15;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float v9;
  int v10;
  float var13;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  int v22;
  uint64_t v23;
  float *v24;
  float v25;
  uint64_t v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  float *v34;
  float v35;
  uint64_t v36;
  float *v37;
  int v38;

  var9 = a2->var9;
  if (a2->var9)
    v3 = (*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * a2->var9) & 1) == 0;
  else
    v3 = 0;
  if (v3)
  {
    *(_DWORD *)(this + 32) += (int)a2->var13;
    return this;
  }
  var15 = a2->var15;
  if ((var15 & 0x1400) != 0)
  {
    v5 = *(float **)(this + 8);
    v6 = v5 + 70;
  }
  else
  {
    v5 = *(float **)(this + 8);
    if ((var15 & 0x800) != 0)
      v6 = v5 + 71;
    else
      v6 = v5 + 69;
  }
  v7 = *v6;
  switch(a2->var9)
  {
    case 3u:
      v8 = v5 + 88;
      goto LABEL_40;
    case 4u:
      v8 = v5 + 85;
      goto LABEL_40;
    case 5u:
      v8 = v5 + 80;
      goto LABEL_40;
    case 6u:
      v8 = v5 + 73;
      goto LABEL_40;
    case 7u:
      v8 = v5 + 72;
      goto LABEL_40;
    case 8u:
      v8 = v5 + 74;
      goto LABEL_40;
    case 9u:
      v8 = v5 + 75;
      goto LABEL_40;
    case 0xAu:
      v8 = v5 + 94;
      goto LABEL_40;
    case 0xBu:
      v8 = v5 + 78;
      goto LABEL_40;
    case 0xCu:
      v8 = v5 + 83;
      goto LABEL_40;
    case 0xDu:
      v8 = v5 + 84;
      goto LABEL_40;
    case 0xEu:
      v8 = v5 + 79;
      goto LABEL_40;
    case 0xFu:
      v8 = v5 + 92;
      goto LABEL_40;
    case 0x10u:
      v8 = v5 + 77;
      goto LABEL_40;
    case 0x11u:
      v8 = v5 + 91;
      goto LABEL_40;
    case 0x12u:
      v8 = v5 + 96;
      goto LABEL_40;
    case 0x13u:
      v8 = v5 + 98;
      goto LABEL_40;
    case 0x14u:
      v8 = v5 + 86;
      goto LABEL_40;
    case 0x15u:
      v8 = v5 + 97;
      goto LABEL_40;
    case 0x16u:
      v8 = v5 + 76;
      goto LABEL_40;
    case 0x17u:
      v8 = v5 + 90;
      goto LABEL_40;
    case 0x18u:
      v8 = v5 + 95;
      goto LABEL_40;
    case 0x19u:
      v8 = v5 + 87;
      goto LABEL_40;
    case 0x1Au:
      v8 = v5 + 93;
      goto LABEL_40;
    case 0x1Bu:
      v8 = v5 + 89;
      goto LABEL_40;
    case 0x1Cu:
      v8 = v5 + 81;
      goto LABEL_40;
    case 0x1Du:
      v8 = v5 + 82;
LABEL_40:
      v9 = *v8;
      break;
    default:
      v9 = 0.0;
      break;
  }
  v10 = *(_DWORD *)(this + 32);
  var13 = a2->var13;
  v12 = (int)(float)((float)(var13 * 0.5) + 0.5);
  if (var13 < 2.0)
    v12 = 0;
  v13 = v12 + v10;
  v14 = *(int *)(this + 40);
  v15 = v13 + v14;
  if (v13 + (int)v14 < 0 != __OFADD__(v13, (_DWORD)v14))
    ++v15;
  v16 = v15 >> 1;
  v17 = (float)(v9 * v7) + 1.0;
  v18 = *(float *)(this + 36);
  v19 = (float)(v17 + v18) * 0.5;
  v20 = v19 - v18;
  v21 = 1.0 / (float)(v16 - v14);
  v22 = *(unsigned __int8 *)(this + 16);
  if (*(_BYTE *)(this + 16))
  {
    if (v16 <= (int)v14)
    {
      v29 = v17 - v19;
      v30 = 1.0;
      v31 = 1.0 / (float)(v13 - v16);
LABEL_56:
      if (v13 > v16)
      {
        v32 = -v29;
        v33 = v13 - (uint64_t)v16;
        v34 = (float *)(*(_QWORD *)(this + 24) + 4 * v16 + 4);
        do
        {
          v30 = v30 - v31;
          *v34 = *v34 / (float)(v17 + (float)((float)(v30 * v32) * v30));
          ++v34;
          --v33;
        }
        while (v33);
      }
      goto LABEL_64;
    }
    v23 = v16 - v14;
    v24 = (float *)(*(_QWORD *)(this + 24) + 4 * v14 + 4);
    v25 = 0.0;
    do
    {
      v25 = v21 + v25;
      *v24 = *v24 / (float)(*(float *)(this + 36) + (float)((float)(v20 * v25) * v25));
      ++v24;
      --v23;
    }
    while (v23);
  }
  else
  {
    if ((int)v14 >= v16)
    {
      v29 = v17 - v19;
      v30 = 1.0;
      v31 = 1.0 / (float)(v13 - v16);
      goto LABEL_61;
    }
    v26 = v16 - v14;
    v27 = (float *)(*(_QWORD *)(this + 24) + 4 * v14 + 4);
    v28 = 0.0;
    do
    {
      v28 = v21 + v28;
      *v27 = (float)(*(float *)(this + 36) + (float)((float)(v20 * v28) * v28)) * *v27;
      ++v27;
      --v26;
    }
    while (v26);
  }
  v29 = v17 - v19;
  v30 = 1.0;
  v31 = 1.0 / (float)(v13 - v16);
  if (v22)
    goto LABEL_56;
LABEL_61:
  if (v13 > v16)
  {
    v35 = -v29;
    v36 = v13 - (uint64_t)v16;
    v37 = (float *)(*(_QWORD *)(this + 24) + 4 * v16 + 4);
    do
    {
      v30 = v30 - v31;
      *v37 = (float)(v17 + (float)((float)(v30 * v35) * v30)) * *v37;
      ++v37;
      --v36;
    }
    while (v36);
  }
LABEL_64:
  *(_DWORD *)(this + 40) = v13;
  *(float *)(this + 36) = v17;
  v38 = v10 + (int)a2->var13;
  *(_DWORD *)(this + 32) = v38;
  if (!var9)
    *(_DWORD *)(this + 40) = v38;
  return this;
}

uint64_t MTFESegmentalPerturbations::Consonant::VisitIntonationalPhrase(MTFESegmentalPerturbations::Consonant *this, MTFESpeechElement *a2)
{
  int var5_high;
  uint64_t var5_low;
  MTFEPhoneme *v5;

  var5_high = HIDWORD(a2[2].var5);
  var5_low = SLODWORD(a2[2].var5);
  *((_QWORD *)this + 3) = (char *)a2[2].var3 + 4 * var5_low;
  *((_DWORD *)this + 8) = var5_high - var5_low;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  MTFESpeechElement::VisitChildren(a2, this);
  return MTFESegmentalPerturbations::Consonant::Perturb((uint64_t)this, v5);
}

uint64_t MTFESegmentalPerturbations::Consonant::Perturb(uint64_t this, MTFEPhoneme *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  float *v5;
  float v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  int v14;
  float *v15;
  uint64_t v16;
  float v17;
  float *v18;
  uint64_t v19;
  int v20;
  float v21;
  float v22;
  uint64_t v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  float *v29;
  float v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  v2 = *(_QWORD *)(this + 40);
  if (!v2)
    return this;
  v3 = *(_DWORD *)(v2 + 72);
  if ((v3 & 0x1400) != 0)
  {
    v4 = *(_QWORD *)(this + 8);
    v5 = (float *)(v4 + 196);
  }
  else
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v3 & 0x800) != 0)
      v5 = (float *)(v4 + 200);
    else
      v5 = (float *)(v4 + 192);
  }
  v6 = *v5;
  switch(*(_BYTE *)(v2 + 58))
  {
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x23:
    case 0x24:
    case 0x25:
      v7 = *(float *)(v4 + 228) + (float)(*(float *)(v4 + 232) * v6);
      v8 = (float *)(v4 + 236);
      v9 = (float *)(v4 + 240);
      goto LABEL_11;
    case 0x22:
      v7 = *(float *)(v4 + 204) + (float)(*(float *)(v4 + 208) * v6);
      v8 = (float *)(v4 + 212);
      v9 = (float *)(v4 + 216);
      goto LABEL_11;
    case 0x26:
    case 0x28:
    case 0x2A:
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x32:
    case 0x34:
      v7 = *(float *)(v4 + 244) + (float)(*(float *)(v4 + 248) * v6);
      v8 = (float *)(v4 + 252);
      v9 = (float *)(v4 + 256);
      goto LABEL_11;
    case 0x27:
    case 0x29:
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x31:
    case 0x33:
    case 0x35:
      v7 = *(float *)(v4 + 260) + (float)(*(float *)(v4 + 264) * v6);
      v8 = (float *)(v4 + 268);
      v9 = (float *)(v4 + 272);
LABEL_11:
      v10 = *v8 + (float)(*v9 * v6);
      v11 = *(unsigned int *)(v4 + 224);
      v12 = 1.0;
      v13 = 1.0 / (float)(int)v11;
      v14 = *(unsigned __int8 *)(this + 16);
      if (*(_BYTE *)(this + 16))
      {
        if ((int)v11 <= 1)
        {
          v20 = (int)*(float *)(v2 + 64);
          v21 = v10 - v7;
          v22 = 1.0 / (float)v20;
          goto LABEL_22;
        }
        v15 = (float *)(*(_QWORD *)(this + 24) + 4 * *(int *)(this + 48) - 4);
        v16 = v11 - 1;
        v17 = 1.0;
        do
        {
          v17 = v17 - v13;
          *v15 = *v15 + (float)((float)(v17 * (float)-v7) * v17);
          --v15;
          --v16;
        }
        while (v16);
      }
      else
      {
        if ((int)v11 <= 1)
        {
          v20 = (int)*(float *)(v2 + 64);
          v21 = v10 - v7;
          v22 = 1.0 / (float)v20;
          goto LABEL_28;
        }
        v18 = (float *)(*(_QWORD *)(this + 24) + 4 * *(int *)(this + 48) - 4);
        v19 = v11 - 1;
        do
        {
          v12 = v12 - v13;
          *v18 = *v18 + (float)((float)(v7 * v12) * v12);
          --v18;
          --v19;
        }
        while (v19);
      }
      v20 = (int)*(float *)(v2 + 64);
      v21 = v10 - v7;
      v22 = 1.0 / (float)v20;
      if (v14)
      {
LABEL_22:
        if (v20 <= 0)
        {
          LODWORD(v4) = *(_DWORD *)(v4 + 220);
          v26 = 1.0;
          v27 = 1.0 / (float)(int)v4;
          goto LABEL_32;
        }
        v23 = v20;
        v24 = (float *)(*(_QWORD *)(this + 24) + 4 * *(int *)(this + 48));
        v25 = 0.0;
        do
        {
          *v24 = *v24 - (float)(v7 + (float)((float)(v21 * v25) * v25));
          ++v24;
          v25 = v22 + v25;
          --v23;
        }
        while (v23);
        goto LABEL_31;
      }
LABEL_28:
      if (v20 <= 0)
      {
        LODWORD(v4) = *(_DWORD *)(v4 + 220);
        v26 = 1.0;
        v27 = 1.0 / (float)(int)v4;
        goto LABEL_38;
      }
      v28 = v20;
      v29 = (float *)(*(_QWORD *)(this + 24) + 4 * *(int *)(this + 48));
      v30 = 0.0;
      do
      {
        *v29 = (float)(v7 + (float)((float)(v21 * v30) * v30)) + *v29;
        ++v29;
        v30 = v22 + v30;
        --v28;
      }
      while (v28);
LABEL_31:
      LODWORD(v4) = *(_DWORD *)(v4 + 220);
      v26 = 1.0;
      v27 = 1.0 / (float)(int)v4;
      if (v14)
      {
LABEL_32:
        if ((int)v4 >= 1)
        {
          v31 = *(_DWORD *)(this + 32);
          v4 = v4;
          v32 = v20 + *(_DWORD *)(this + 48);
          do
          {
            if ((int)v32 >= v31)
              break;
            *(float *)(*(_QWORD *)(this + 24) + 4 * v32) = *(float *)(*(_QWORD *)(this + 24) + 4 * v32)
                                                         + (float)((float)(v26 * (float)(v10 * v26)) * v26);
            v26 = v26 - v27;
            ++v32;
            --v4;
          }
          while (v4);
        }
        return this;
      }
LABEL_38:
      if ((int)v4 >= 1)
      {
        v33 = *(_DWORD *)(this + 32);
        v4 = v4;
        v34 = v20 + *(_DWORD *)(this + 48);
        do
        {
          if ((int)v34 >= v33)
            break;
          *(float *)(*(_QWORD *)(this + 24) + 4 * v34) = *(float *)(*(_QWORD *)(this + 24) + 4 * v34)
                                                       + (float)((float)(v26 * (float)(v10 * v26)) * v26);
          v26 = v26 - v27;
          ++v34;
          --v4;
        }
        while (v4);
      }
      return this;
    default:
      return this;
  }
}

float MTFESegmentalPerturbations::Consonant::VisitPhoneme(MTFESegmentalPerturbations::Consonant *this, MTFEPhoneme *a2)
{
  int v4;
  float result;

  if ((*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * a2->var9) & 1) != 0)
  {
    v4 = *((_DWORD *)this + 9);
  }
  else
  {
    MTFESegmentalPerturbations::Consonant::Perturb((uint64_t)this, a2);
    *((_QWORD *)this + 5) = a2;
    v4 = *((_DWORD *)this + 9);
    *((_DWORD *)this + 12) = v4;
  }
  result = a2->var13;
  *((_DWORD *)this + 9) = v4 + (int)result;
  return result;
}

void MTFESegmentalPerturbations::Vowel::~Vowel(MTFESegmentalPerturbations::Vowel *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void MTFESegmentalPerturbations::Consonant::~Consonant(MTFESegmentalPerturbations::Consonant *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

uint64_t MTMBPhraseProcessor::MTMBPhraseProcessor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  MTMBSegmentProducer *v6;
  uint64_t v7;
  uint64_t v8;
  MTMBProducerComponent *v9;
  uint64_t v10;
  uint64_t v11;
  MTMBChangeAmplitude *v12;
  MTMBProducerComponent *v13;
  MTMBSpeechRateModifier *v14;

  v5 = a1 + 4272;
  MTPBVoice::MTPBVoice(a1 + 4272, a2);
  *(_QWORD *)a1 = off_1E9367D20;
  MTBEPhraseProcessor::MTBEPhraseProcessor(a1, v5, (__int128 *)a3, 1);
  *(_QWORD *)a1 = off_1E9367D20;
  *(_QWORD *)(a1 + 4632) = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 4640) = *(_QWORD *)(a3 + 40);
  v6 = (MTMBSegmentProducer *)operator new();
  MTMBSegmentProducer::MTMBSegmentProducer(v6, (MTFEFrameFiller *)(a1 + 2728), *(MEOWReader **)(a1 + 4632), (MTBEParam *)(a1 + 88));
  v7 = operator new();
  v8 = *(_QWORD *)(a1 + 4232);
  *(_QWORD *)(v7 + 16) = &unk_1E9368880;
  v9 = (MTMBProducerComponent *)(v7 + 16);
  *(_QWORD *)v7 = &unk_1E9368858;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 24) = v8;
  *(_WORD *)(v7 + 48) = 0;
  v10 = operator new();
  MTMBChangePitch::MTMBChangePitch((MTMBChangePitch *)v10, v9, *(MTMBSignalProcessor **)(a1 + 4232));
  v11 = operator new();
  MTMBBlend::MTMBBlend((MTMBBlend *)v11, (MTMBProducerComponent *)(v10 + 16), *(MTMBSignalProcessor **)(a1 + 4232));
  v12 = (MTMBChangeAmplitude *)operator new();
  MTMBChangeAmplitude::MTMBChangeAmplitude(v12, (MTMBProducerComponent *)(v11 + 16), *(MTMBSignalProcessor **)(a1 + 4232), 0);
  v13 = (MTMBChangeAmplitude *)((char *)v12 + 16);
  if (MTBEParam::GetUsePostDurMod((MTBEParam *)(a1 + 88))
    && (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBSkipWSOLA) & 1) == 0)
  {
    v14 = (MTMBSpeechRateModifier *)operator new();
    MTMBSpeechRateModifier::MTMBSpeechRateModifier(v14, v13);
    v13 = (MTMBSpeechRateModifier *)((char *)v14 + 16);
  }
  *(_QWORD *)(a1 + 72) = v13;
  MTBEPhraseProcessor::ProcessPhrase((MTBEPhraseProcessor *)a1);
  return a1;
}

void sub_1D2283538(_Unwind_Exception *a1)
{
  MTBEPhraseProcessor *v1;
  uint64_t v2;

  MEMORY[0x1D8233BA8](v2, 0x10A1C4036524A53);
  MTBEPhraseProcessor::~MTBEPhraseProcessor(v1);
  _Unwind_Resume(a1);
}

void MTMBPhraseProcessor::~MTMBPhraseProcessor(MTMBPhraseProcessor *this)
{
  MTMBSelectUnits *v2;
  MTFESpeechElement *v3;
  MTBEPersistentParam *v4;

  *(_QWORD *)this = off_1E9367D20;
  v2 = (MTMBSelectUnits *)*((_QWORD *)this + 2);
  v3 = (MTFESpeechElement *)*((_QWORD *)this + 580);
  v4 = (MTBEPersistentParam *)MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBAsynchronousSearch);
  MTMBSelectUnits::DeletePhrase(v2, v3, v4);
  *((_QWORD *)this + 2) = 0;
  MTBEPhraseProcessor::~MTBEPhraseProcessor(this);
}

{
  MTMBPhraseProcessor::~MTMBPhraseProcessor(this);
  JUMPOUT(0x1D8233BA8);
}

void MTMBPhraseProcessor::ExpandCompoundsPreDur(MTMBPhraseProcessor *this, MTFESpeechElement *a2)
{
  _QWORD v2[3];
  int v3;
  char v4;

  if (!*((_BYTE *)this + 69))
  {
    v3 = 0;
    v2[0] = &unk_1E9366840;
    v4 = 1;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v2, a2);
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v2);
  }
}

void sub_1D22836B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&a9);
  _Unwind_Resume(a1);
}

void MTMBPhraseProcessor::ExpandCompoundsPostDur(MTMBPhraseProcessor *this, MTFESpeechElement *a2)
{
  _QWORD v2[3];
  int v3;
  char v4;

  if (!*((_BYTE *)this + 69))
  {
    v3 = 0;
    v2[0] = &unk_1E9366840;
    v4 = 0;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v2, a2);
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v2);
  }
}

void sub_1D2283714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MTMBPhraseProcessor::SelectUnits(uint64_t this, MTFESpeechElement *a2)
{
  _QWORD *v3;
  MTMBSelectUnits *v4;
  MEOWReader *v5;
  MTBEPersistentParam *v6;
  char v7;
  char v8;

  if (!*(_BYTE *)(this + 69))
  {
    v3 = (_QWORD *)this;
    v4 = (MTMBSelectUnits *)operator new();
    v5 = (MEOWReader *)v3[579];
    v6 = (MTBEPersistentParam *)v3[580];
    v7 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBUseDiphoneGlue);
    v8 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBAsynchronousSearch);
    MTMBSelectUnits::MTMBSelectUnits(v4, v5, v6, v7, v8);
    v3[581] = v4;
    return (**(uint64_t (***)(MTMBSelectUnits *, MTFESpeechElement *))v4)(v4, a2);
  }
  return this;
}

void sub_1D22837E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10E1C40195A27CBLL);
  _Unwind_Resume(a1);
}

uint64_t MTMBPhraseProcessor::AbortUnitSelection(MTMBPhraseProcessor *this)
{
  const char *v2;
  uint64_t v3;
  MTMBSelectUnits *v4;

  pthread_mutex_lock((pthread_mutex_t *)(*((_QWORD *)this + 580) + 96));
  v3 = *((_QWORD *)this + 580);
  v4 = *(MTMBSelectUnits **)(v3 + 208);
  if (v4 == *((MTMBSelectUnits **)this + 581))
  {
    MTMBSelectUnits::AbortUnitSelection(v4, v2);
    v3 = *((_QWORD *)this + 580);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 96));
}

uint64_t MTMBPhraseProcessor::Reader(MTMBPhraseProcessor *this)
{
  return *((_QWORD *)this + 579);
}

uint64_t Log2(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  if ((unint64_t)a1 < 2)
    return 0;
  v1 = 0;
  do
  {
    ++v1;
    v2 = (unint64_t)a1 > 3;
    a1 >>= 1;
  }
  while (v2);
  return v1;
}

uint64_t BitReverse(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 < 1)
    return 0;
  result = 0;
  v4 = 1;
  v5 = 1 << (a2 - 1);
  do
  {
    if ((v4 & a1) != 0)
      v6 = v5;
    else
      v6 = 0;
    result |= v6;
    v4 *= 2;
    v5 >>= 1;
    --a2;
  }
  while (a2);
  return result;
}

uint64_t InitBitRevTable(uint64_t a1, __int16 *a2)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  BOOL v5;
  __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a1 & (a1 - 1)) != 0)
  {
    return -50;
  }
  else
  {
    if ((unint64_t)a1 >= 2)
    {
      v2 = 0;
      v4 = a1;
      do
      {
        ++v2;
        v5 = (unint64_t)v4 > 3;
        v4 >>= 1;
      }
      while (v5);
    }
    else
    {
      v2 = 0;
    }
    LODWORD(v6) = (_DWORD)a2;
    if (a1 >= 1)
    {
      v7 = 0;
      v6 = a2;
      do
      {
        if (v2 >= 1)
        {
          v8 = 0;
          v9 = v2;
          v10 = 1 << (v2 - 1);
          v11 = 1;
          do
          {
            if ((v11 & v7) != 0)
              v12 = v10;
            else
              v12 = 0;
            v8 |= v12;
            v11 *= 2;
            v10 >>= 1;
            --v9;
          }
          while (v9);
          if (v8 > v7)
          {
            v6[2] = v8;
            v6 += 2;
            *(v6 - 1) = v7;
          }
        }
        ++v7;
      }
      while (v7 != a1);
    }
    v3 = 0;
    *a2 = ((_DWORD)v6 - (_DWORD)a2) >> 2;
  }
  return v3;
}

uint64_t BitRevShortArr(__int16 *a1, uint64_t a2, unsigned __int16 *a3)
{
  int v3;
  __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  v3 = *a3;
  if (*a3)
  {
    v4 = (__int16 *)(a3 + 1);
    do
    {
      --v3;
      v5 = *v4;
      v6 = v4[1];
      v7 = a1[v5];
      a1[v5] = a1[v6];
      a1[v6] = v7;
      v4 += 2;
    }
    while ((_WORD)v3);
  }
  return 0;
}

uint64_t BitRevFloatArr(float *a1, uint64_t a2, unsigned __int16 *a3)
{
  int v3;
  __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;

  v3 = *a3;
  if (*a3)
  {
    v4 = (__int16 *)(a3 + 1);
    do
    {
      --v3;
      v5 = *v4;
      v6 = v4[1];
      v7 = a1[v5];
      a1[v5] = a1[v6];
      a1[v6] = v7;
      v4 += 2;
    }
    while ((_WORD)v3);
  }
  return 0;
}

uint64_t InitTrigTables(uint64_t a1, float *a2, float *a3)
{
  float v5;
  unint64_t v6;
  float v7;
  __float2 v8;

  if (a1 >= 2)
  {
    v5 = 6.28318531 / (double)a1;
    v6 = (unint64_t)a1 >> 1;
    v7 = 0.0;
    do
    {
      v8 = __sincosf_stret(v7);
      *a3++ = v8.__cosval;
      *a2++ = v8.__sinval;
      v7 = v7 + v5;
      --v6;
    }
    while (v6);
  }
  return 0;
}

float ComplexFFT(float *a1, float *a2, uint64_t a3, float *a4, float *a5, unsigned __int16 *a6, float result)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  float *v25;
  uint64_t i;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v35;
  __int16 *v36;
  int v37;
  __int16 *v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;

  if ((unint64_t)a3 >= 2)
  {
    v7 = -1;
    v8 = a3;
    do
    {
      ++v7;
      v9 = (unint64_t)v8 > 3;
      v8 >>= 1;
    }
    while (v9);
    v10 = 0;
    v11 = a3;
    do
    {
      if (v11 >= 0)
        v12 = v11;
      else
        v12 = v11 + 1;
      v13 = v12 >> 1;
      if (a3 >= 1)
      {
        v14 = 0;
        v15 = &a2[v13];
        v16 = &a1[v13];
        do
        {
          v17 = a1[v14];
          v18 = v16[v14];
          a1[v14] = v17 + v18;
          v16[v14] = v17 - v18;
          v19 = a2[v14];
          v20 = v15[v14];
          v21 = v19 - v20;
          result = v19 + v20;
          a2[v14] = result;
          v15[v14] = v21;
          v14 += v11;
        }
        while (v14 < a3);
      }
      if (v7 != v10 && v11 >= 4)
      {
        v22 = 0;
        if (v13 <= 2)
          v23 = 2;
        else
          v23 = v13;
        v24 = &a2[v13];
        v25 = &a1[v13];
        for (i = 1; i != v23; ++i)
        {
          v22 += 2 * (a3 / v11);
          if (i < a3)
          {
            result = a4[v22];
            v27 = a5[v22];
            v28 = i;
            do
            {
              v29 = a1[v28];
              v30 = v25[v28];
              v31 = v29 - v30;
              a1[v28] = v29 + v30;
              v32 = a2[v28];
              v33 = v24[v28];
              a2[v28] = v32 + v33;
              v25[v28] = (float)(v27 * (float)(v32 - v33)) + (float)(result * v31);
              v24[v28] = (float)(v31 * (float)-v27) + (float)(result * (float)(v32 - v33));
              v28 += v11;
            }
            while (v28 < a3);
          }
        }
      }
      v11 = v13;
    }
    while (v7 != v10++);
  }
  v35 = *a6;
  if (*a6)
  {
    v36 = (__int16 *)(a6 + 1);
    v37 = *a6;
    v38 = (__int16 *)(a6 + 1);
    do
    {
      --v37;
      v39 = *v38;
      v40 = v38[1];
      v41 = a1[v39];
      a1[v39] = a1[v40];
      a1[v40] = v41;
      v38 += 2;
    }
    while ((_WORD)v37);
    do
    {
      --v35;
      v42 = *v36;
      v43 = v36[1];
      result = a2[v42];
      a2[v42] = a2[v43];
      a2[v43] = result;
      v36 += 2;
    }
    while ((_WORD)v35);
  }
  return result;
}

float RealFFTPowerSpectrum(float *a1, float *a2, uint64_t a3, float *a4, float *a5, unsigned __int16 *a6, float a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float result;

  v12 = a3 >> 1;
  if (a3 <= 1)
  {
    ComplexFFT(a1, a2, a3 >> 1, a4, a5, a6, a7);
    v17 = a3 >> 2;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    if (v12 <= 1)
      v15 = 1;
    else
      v15 = a3 >> 1;
    do
    {
      a1[v14] = a1[v13];
      v16 = a1[v13 + 1];
      a2[v14++] = v16;
      v13 += 2;
    }
    while (v15 != v14);
    ComplexFFT(a1, a2, a3 >> 1, a4, a5, a6, v16);
    v17 = a3 >> 2;
    if (a3 >= 8)
    {
      v18 = 2;
      if (v17 > 2)
        v18 = a3 >> 2;
      v19 = 4 * v18;
      v20 = 4 * v12 - 4;
      v21 = 4;
      do
      {
        v22 = a1[v21 / 4];
        v23 = *(float *)((char *)a1 + v20);
        v24 = v22 + v23;
        v25 = v22 - v23;
        v26 = a2[v21 / 4];
        v27 = *(float *)((char *)a2 + v20);
        v28 = v26 + v27;
        v29 = v26 - v27;
        v30 = a4[v21 / 4];
        a1[v21 / 4] = (float)((float)((float)((float)(v30 * v25) - (float)(v29 - (float)(a5[v21 / 4] * v28)))
                                    * (float)((float)(v30 * v25) - (float)(v29 - (float)(a5[v21 / 4] * v28))))
                            + (float)((float)((float)(v24 + (float)(v30 * v28)) - (float)(a5[v21 / 4] * v25))
                                    * (float)((float)(v24 + (float)(v30 * v28)) - (float)(a5[v21 / 4] * v25))))
                    * 0.25;
        v31 = a4[v21 / 4];
        *(float *)((char *)a1 + v20) = (float)((float)((float)((float)-(float)(v29 + (float)(a5[v21 / 4] * v28))
                                                             - (float)(v31 * v25))
                                                     * (float)((float)-(float)(v29 + (float)(a5[v21 / 4] * v28))
                                                             - (float)(v31 * v25)))
                                             + (float)((float)((float)(v24 - (float)(v31 * v28))
                                                             + (float)(a5[v21 / 4] * v25))
                                                     * (float)((float)(v24 - (float)(v31 * v28))
                                                             + (float)(a5[v21 / 4] * v25))))
                                     * 0.25;
        v21 += 4;
        v20 -= 4;
      }
      while (v19 != v21);
    }
  }
  *a1 = (float)(*a2 * *a2) + (float)(*a1 * *a1);
  result = (float)(a2[v17] * a2[v17]) + (float)(a1[v17] * a1[v17]);
  a1[v17] = result;
  return result;
}

float RealFFTMagnitudeSpectrum(float *a1, float *a2, uint64_t a3, float *a4, float *a5, unsigned __int16 *a6, float a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float result;

  v12 = a3 >> 1;
  if (a3 <= 1)
  {
    ComplexFFT(a1, a2, a3 >> 1, a4, a5, a6, a7);
    v17 = a3 >> 2;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    if (v12 <= 1)
      v15 = 1;
    else
      v15 = a3 >> 1;
    do
    {
      a1[v14] = a1[v13];
      v16 = a1[v13 + 1];
      a2[v14++] = v16;
      v13 += 2;
    }
    while (v15 != v14);
    ComplexFFT(a1, a2, a3 >> 1, a4, a5, a6, v16);
    v17 = a3 >> 2;
    if (a3 >= 8)
    {
      v18 = 2;
      if (v17 > 2)
        v18 = a3 >> 2;
      v19 = 4 * v18;
      v20 = 4 * v12 - 4;
      v21 = 4;
      do
      {
        v22 = a1[v21 / 4];
        v23 = *(float *)((char *)a1 + v20);
        v24 = v22 + v23;
        v25 = v22 - v23;
        v26 = a2[v21 / 4];
        v27 = *(float *)((char *)a2 + v20);
        v28 = v26 + v27;
        v29 = v26 - v27;
        v30 = a4[v21 / 4];
        a1[v21 / 4] = sqrtf((float)((float)((float)(v30 * v25) - (float)(v29 - (float)(a5[v21 / 4] * v28)))* (float)((float)(v30 * v25) - (float)(v29 - (float)(a5[v21 / 4] * v28))))+ (float)((float)((float)(v24 + (float)(v30 * v28)) - (float)(a5[v21 / 4] * v25))* (float)((float)(v24 + (float)(v30 * v28)) - (float)(a5[v21 / 4] * v25))))* 0.5;
        v31 = a4[v21 / 4];
        *(float *)((char *)a1 + v20) = sqrtf((float)((float)((float)-(float)(v29 + (float)(a5[v21 / 4] * v28))- (float)(v31 * v25))* (float)((float)-(float)(v29 + (float)(a5[v21 / 4] * v28))- (float)(v31 * v25)))+ (float)((float)((float)(v24 - (float)(v31 * v28)) + (float)(a5[v21 / 4] * v25))* (float)((float)(v24 - (float)(v31 * v28)) + (float)(a5[v21 / 4] * v25))))* 0.5;
        v21 += 4;
        v20 -= 4;
      }
      while (v19 != v21);
    }
  }
  *a1 = sqrtf((float)(*a2 * *a2) + (float)(*a1 * *a1));
  result = sqrtf((float)(a2[v17] * a2[v17]) + (float)(a1[v17] * a1[v17]));
  a1[v17] = result;
  return result;
}

float RealFFTPowerSpectrumNoiseCancel(float *a1, float *a2, uint64_t a3, float *a4, float *a5, unsigned __int16 *a6, float *a7, float a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  double v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  double v46;
  float v47;
  float v48;
  float v49;
  double v50;
  float v51;
  float v52;
  float v53;
  float v54;
  double v55;
  float v56;
  float result;

  v14 = a3 >> 1;
  if (a3 <= 1)
  {
    ComplexFFT(a1, a2, a3 >> 1, a4, a5, a6, a8);
    v20 = a3 >> 2;
  }
  else
  {
    v15 = 0;
    if (v14 <= 1)
      v16 = 1;
    else
      v16 = a3 >> 1;
    v17 = a1 + 1;
    do
    {
      a1[v15] = *(v17 - 1);
      v18 = *v17;
      v17 += 2;
      v19 = v18;
      a2[v15++] = v18;
    }
    while (v16 != v15);
    ComplexFFT(a1, a2, a3 >> 1, a4, a5, a6, v19);
    v20 = a3 >> 2;
    if (a3 >= 8)
    {
      v21 = 2;
      if (v20 > 2)
        v21 = a3 >> 2;
      v22 = 4 * v21;
      v23 = 4 * v14 - 4;
      v24 = 4;
      do
      {
        v25 = a1[v24 / 4];
        v26 = *(float *)((char *)a1 + v23);
        v27 = v25 + v26;
        v28 = v25 - v26;
        v29 = a2[v24 / 4];
        v30 = *(float *)((char *)a2 + v23);
        v31 = v29 + v30;
        v32 = v29 - v30;
        v33 = a4[v24 / 4];
        v34 = sqrtf((float)((float)((float)((float)(v33 * v28) - (float)(v32 - (float)(a5[v24 / 4] * v31)))* (float)((float)(v33 * v28) - (float)(v32 - (float)(a5[v24 / 4] * v31))))+ (float)((float)((float)(v27 + (float)(v33 * v31)) - (float)(a5[v24 / 4] * v28))* (float)((float)(v27 + (float)(v33 * v31)) - (float)(a5[v24 / 4] * v28))))* 0.25);
        a1[v24 / 4] = v34;
        v35 = a7[v24 / 4];
        v36 = v34 - v35;
        v37 = v35 * 0.1;
        if (v37 > v36)
        {
          v38 = v37;
          v36 = v38;
        }
        a1[v24 / 4] = v36 * v36;
        v39 = a4[v24 / 4];
        v40 = a5[v24 / 4];
        v41 = (float)(v27 - (float)(v39 * v31)) + (float)(v40 * v28);
        v42 = (float)-(float)(v32 + (float)(v40 * v31)) - (float)(v39 * v28);
        v43 = sqrtf((float)((float)(v42 * v42) + (float)(v41 * v41)) * 0.25);
        *(float *)((char *)a1 + v23) = v43;
        v44 = *(float *)((char *)a7 + v23);
        v45 = v43 - v44;
        v46 = v44 * 0.1;
        if (v46 > v45)
        {
          v47 = v46;
          v45 = v47;
        }
        *(float *)((char *)a1 + v23) = v45 * v45;
        v24 += 4;
        v23 -= 4;
      }
      while (v22 != v24);
    }
  }
  v48 = sqrtf((float)(*a2 * *a2) + (float)(*a1 * *a1));
  *a1 = v48;
  v49 = v48 - *a7;
  v50 = *a7 * 0.1;
  if (v50 > v49)
  {
    v51 = v50;
    v49 = v51;
  }
  *a1 = v49 * v49;
  v52 = sqrtf((float)(a2[v20] * a2[v20]) + (float)(a1[v20] * a1[v20]));
  a1[v20] = v52;
  v53 = a7[v20];
  v54 = v52 - v53;
  v55 = v53 * 0.1;
  if (v55 > v54)
  {
    v56 = v55;
    v54 = v56;
  }
  result = v54 * v54;
  a1[v20] = result;
  return result;
}

float compute_norm(float *a1, int a2)
{
  uint64_t v2;
  float v3;
  float v4;

  if (a2 < 1)
  {
    v3 = 0.0;
  }
  else
  {
    v2 = a2;
    v3 = 0.0;
    do
    {
      v4 = *a1++;
      v3 = v3 + (float)(v4 * v4);
      --v2;
    }
    while (v2);
  }
  return sqrtf(v3);
}

float *normalize(float *result, int a2)
{
  uint64_t v2;
  float v3;
  float *v4;
  uint64_t v5;
  float v6;
  float v7;

  if (a2 >= 1)
  {
    v2 = a2;
    v3 = 0.0;
    v4 = result;
    v5 = a2;
    do
    {
      v6 = *v4++;
      v3 = v3 + (float)(v6 * v6);
      --v5;
    }
    while (v5);
    v7 = sqrtf(v3);
    do
    {
      *result = *result / v7;
      ++result;
      --v2;
    }
    while (v2);
  }
  return result;
}

float dot_product(float *a1, float *a2, int a3)
{
  uint64_t v3;
  float result;
  float v5;
  float v6;
  float v7;

  if (a3 < 1)
    return 0.0;
  v3 = a3;
  result = 0.0;
  do
  {
    v5 = *a1++;
    v6 = v5;
    v7 = *a2++;
    result = result + (float)(v6 * v7);
    --v3;
  }
  while (v3);
  return result;
}

float dot_product_dist(float *a1, float *a2, unsigned int a3)
{
  uint64_t v3;
  float v4;
  float *v5;
  uint64_t v6;
  float v7;
  float v8;
  float *v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;

  if ((int)a3 < 1)
    return NAN;
  v3 = a3;
  v4 = 0.0;
  v5 = a1;
  v6 = a3;
  do
  {
    v7 = *v5++;
    v4 = v4 + (float)(v7 * v7);
    --v6;
  }
  while (v6);
  v8 = 0.0;
  v9 = a2;
  v10 = a3;
  do
  {
    v11 = *v9++;
    v8 = v8 + (float)(v11 * v11);
    --v10;
  }
  while (v10);
  v12 = 0.0;
  v13 = sqrtf(v4);
  do
  {
    v14 = *a1++;
    v15 = v14;
    v16 = *a2++;
    v12 = v12 + (float)(v15 * v16);
    --v3;
  }
  while (v3);
  return v12 / (float)(sqrtf(v8) * v13);
}

float MEOWSVDDistanceExplicit(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t j;
  uint64_t k;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t m;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  uint64_t v26;

  v3 = 0;
  v26 = *MEMORY[0x1E0C80C00];
  do
  {
    *(float *)((char *)&v24 + v3) = *(float *)(a1 + 4 + v3) + *(float *)(a2 + 4 + v3);
    v3 += 4;
  }
  while (v3 != 20);
  v4 = a1 + 24;
  printf("uS (normalized) =");
  for (i = 0; i != 20; i += 4)
    printf(" %f", *(float *)(v4 + i));
  v6 = a2 + 24;
  putchar(10);
  printf("vS (normalized) =");
  for (j = 0; j != 20; j += 4)
    printf(" %f", *(float *)(v6 + j));
  putchar(10);
  printf("wS=");
  for (k = 0; k != 20; k += 4)
    printf(" %f", *(float *)((char *)&v24 + k));
  putchar(10);
  v9 = 0;
  v22 = v24;
  v23 = v25;
  v10 = 0.0;
  do
  {
    v10 = v10 + (float)(*(float *)((char *)&v22 + v9) * *(float *)((char *)&v22 + v9));
    v9 += 4;
  }
  while (v9 != 20);
  v11 = 0;
  v12 = sqrtf(v10);
  do
  {
    *(float *)((char *)&v22 + v11) = *(float *)((char *)&v22 + v11) / v12;
    v11 += 4;
  }
  while (v11 != 20);
  printf("wS (normalized) =");
  for (m = 0; m != 20; m += 4)
    printf(" %f", *(float *)((char *)&v22 + m));
  putchar(10);
  v14 = 0;
  v15 = 0.0;
  do
  {
    v15 = v15 + (float)(*(float *)(v4 + v14) * *(float *)((char *)&v22 + v14));
    v14 += 4;
  }
  while (v14 != 20);
  v16 = 0;
  v17 = 0.0;
  do
  {
    v17 = v17 + (float)(*(float *)((char *)&v22 + v16) * *(float *)(v6 + v16));
    v16 += 4;
  }
  while (v16 != 20);
  printf("d1=<uS,wS>= %f\n", v15);
  printf("d2=<wS,vS>= %f\n", v17);
  v18 = -v15;
  if (v15 >= 0.0)
    v18 = v15;
  v19 = -v17;
  if (v17 >= 0.0)
    v19 = v17;
  v20 = (float)(v18 + v19) * -0.5 + 1.0;
  printf("dist = %f\n", v20);
  putchar(10);
  return v20;
}

float MEOWRawSVDDistance(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v4 = *a2 / *a1;
  if (*a1 >= *a2)
    v4 = *a1 / *a2;
  if ((float)(*a1 * *a2) == 0.0)
    v4 = 1.0;
  v5 = a1[5] + a2[5];
  v6 = a1[4] + a2[4];
  v7 = a1[3] + a2[3];
  v8 = a1[2] + a2[2];
  v2 = a1[1];
  v3 = a2[1];
  v9 = (float)((float)(fabsf((float)((float)((float)((float)(v8 * a1[7]) + (float)(a1[6] * (float)(v2 + v3)))+ (float)(a1[8] * v7))+ (float)(a1[9] * v6))+ (float)(a1[10] * v5))+ fabsf((float)((float)((float)((float)(v8 * a2[7]) + (float)(a2[6] * (float)(v2 + v3)))+ (float)(a2[8] * v7))+ (float)(a2[9] * v6))+ (float)(a2[10] * v5)))* -0.5)* (1.0/ sqrtf((float)((float)((float)((float)(v8 * v8) + (float)((float)(v2 + v3) * (float)(v2 + v3))) + (float)(v7 * v7))+ (float)(v6 * v6))+ (float)(v5 * v5)))+ 1.0;
  return v4 * (float)(v9 * v4);
}

void MEOWDistance(uint64_t a1, uint64_t a2)
{
  int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v2 = *(_DWORD *)(a1 + 56);
  if (v2 != *(_DWORD *)(a2 + 56) && v2 < 0)
  {
    v3 = *(float *)(a1 + 4) + *(float *)(a2 + 4);
    v4 = *(float *)(a1 + 8) + *(float *)(a2 + 8);
    v5 = *(float *)(a1 + 12) + *(float *)(a2 + 12);
    v6 = *(float *)(a1 + 16) + *(float *)(a2 + 16);
    v7 = *(float *)(a1 + 20) + *(float *)(a2 + 20);
    v8 = (float)((float)(fabsf((float)((float)((float)((float)(v4 * *(float *)(a1 + 28)) + (float)(*(float *)(a1 + 24) * v3))+ (float)(*(float *)(a1 + 32) * v5))+ (float)(*(float *)(a1 + 36) * v6))+ (float)(*(float *)(a1 + 40) * v7))+ fabsf((float)((float)((float)((float)(v4 * *(float *)(a2 + 28)) + (float)(*(float *)(a2 + 24) * v3))+ (float)(*(float *)(a2 + 32) * v5))+ (float)(*(float *)(a2 + 36) * v6))+ (float)(*(float *)(a2 + 40) * v7)))* -0.5)* (1.0/ sqrtf((float)((float)((float)((float)(v4 * v4) + (float)(v3 * v3)) + (float)(v5 * v5)) + (float)(v6 * v6))+ (float)(v7 * v7)))+ 1.0;
    powf(*(float *)(a1 + 44) * v8, *(float *)(a1 + 48));
  }
}

void MEOWDist::MEOWDist(MEOWDist *this, int a2)
{
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = 1 << a2;
  SLML::Vector<float>::Vector((uint64_t)this + 8, 0);
  MEOWDist::MakeHammingWindow(this);
}

void sub_1D22847E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  SLML::Storage<float>::RemoveReference(*(_QWORD *)(v1 + 16));
  _Unwind_Resume(a1);
}

void MEOWDist::MakeHammingWindow(MEOWDist *this)
{
  int *v2;
  int v3;
  int v4;
  uint64_t v5;
  float v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  int64x2_t v17;
  uint64x2_t v18;
  float v19;
  float v20;
  float v21;
  int32x2_t v22;
  int64x2_t v23;

  v2 = (int *)((char *)this + 8);
  v3 = *((_DWORD *)this + 1);
  v4 = v3;
  if (*(_DWORD *)(*((_QWORD *)this + 2) + 12) < v3)
  {
    SLML::Vector<float>::ResizeStorage((uint64_t)this + 8, v3);
    v4 = *((_DWORD *)this + 1);
  }
  *v2 = v3;
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = 6.28318531 / (double)v4;
    v19 = v6;
    v7 = (_DWORD *)*((_QWORD *)this + 3);
    v8 = *((int *)this + 3);
    v9 = (v4 + 1) & 0x1FFFFFFFELL;
    v18 = (uint64x2_t)vdupq_n_s64((unint64_t)v4 - 1);
    v10 = (uint64x2_t)xmmword_1D22CF130;
    v11 = (float32x2_t)vdup_n_s32(0xBEEB851F);
    v12 = (float32x2_t)vdup_n_s32(0x3F0A3D71u);
    v17 = vdupq_n_s64(2uLL);
    do
    {
      v23 = (int64x2_t)v10;
      v22 = vmovn_s64((int64x2_t)vcgeq_u64(v18, v10));
      v13.i32[0] = v5;
      v13.i32[1] = v5 + 1;
      v14 = vmul_n_f32(vcvt_f32_s32(v13), v19);
      v20 = v14.f32[0];
      v21 = cosf(v14.f32[1]);
      v15.f32[0] = cosf(v20);
      v15.f32[1] = v21;
      v16 = vmla_f32(v12, v11, v15);
      if ((v22.i8[0] & 1) != 0)
        *v7 = v16.i32[0];
      if ((v22.i8[4] & 1) != 0)
        v7[v8] = v16.i32[1];
      v5 += 2;
      v10 = (uint64x2_t)vaddq_s64(v23, v17);
      v7 += 2 * v8;
    }
    while (v9 != v5);
  }
}

int8x8_t MEOWSVDDistances::GetCookie(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  int8x8_t result;

  v3 = *(_QWORD *)a1 + 56 * a2;
  *(_DWORD *)a3 = *(_DWORD *)(v3 + 8);
  v4 = *(_OWORD *)(v3 + 12);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(v3 + 28);
  *(_OWORD *)(a3 + 4) = v4;
  v5 = *(_OWORD *)(v3 + 32);
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(v3 + 48);
  *(_OWORD *)(a3 + 24) = v5;
  result = vrev32_s8(*(int8x8_t *)(a1 + 236));
  *(int8x8_t *)(a3 + 44) = result;
  *(_DWORD *)(a3 + 56) = *(_DWORD *)v3 | 0x80000000;
  return result;
}

int8x8_t MEOWSVDDistances::GetCookie(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int8x8_t result;

  v5 = 134;
  if (a3)
    v5 = 32;
  v6 = *(_QWORD *)a1 + 56 * (*(__int16 *)(a1 + v5 + 2 * a2) + a4);
  *(_DWORD *)a5 = *(_DWORD *)(v6 + 8);
  v7 = *(_OWORD *)(v6 + 12);
  *(_DWORD *)(a5 + 20) = *(_DWORD *)(v6 + 28);
  *(_OWORD *)(a5 + 4) = v7;
  v8 = *(_OWORD *)(v6 + 32);
  *(_DWORD *)(a5 + 40) = *(_DWORD *)(v6 + 48);
  *(_OWORD *)(a5 + 24) = v8;
  result = vrev32_s8(*(int8x8_t *)(a1 + 236));
  *(int8x8_t *)(a5 + 44) = result;
  *(_DWORD *)(a5 + 56) = *(_DWORD *)v6 | 0x80000000;
  return result;
}

int8x8_t MEOWSVDDistances::GetCookies(uint64_t a1, unsigned int a2, int a3, MEOWVectorBase *this)
{
  uint64_t v7;
  uint64_t v8;
  __int16 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int8x8_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v7 = 134;
  if (a3)
    v7 = 32;
  v8 = a1 + v7;
  v9 = (__int16 *)(a1 + v7 + 2 * a2);
  v10 = v9[1];
  v11 = (unsigned __int16)v9[1];
  v12 = *v9;
  v13 = (unsigned __int16)v12;
  v14 = v10 - v12;
  if (*((_QWORD *)this + 3) < (unint64_t)(v10 - v12))
    MEOWVectorBase::Allocate(this, v14, 1);
  *((_QWORD *)this + 2) = v14;
  if (v11 != v13)
  {
    v16 = 0;
    v17 = 0;
    if (v14 <= 1)
      v18 = 1;
    else
      v18 = v14;
    do
    {
      v19 = *(_QWORD *)this + v16;
      v20 = *(_QWORD *)a1 + 56 * (v17 + *(__int16 *)(v8 + 2 * a2));
      *(_DWORD *)v19 = *(_DWORD *)(v20 + 8);
      v21 = *(_OWORD *)(v20 + 12);
      *(_DWORD *)(v19 + 20) = *(_DWORD *)(v20 + 28);
      *(_OWORD *)(v19 + 4) = v21;
      v22 = *(_OWORD *)(v20 + 32);
      *(_DWORD *)(v19 + 40) = *(_DWORD *)(v20 + 48);
      *(_OWORD *)(v19 + 24) = v22;
      result = vrev32_s8(*(int8x8_t *)(a1 + 236));
      *(int8x8_t *)(v19 + 44) = result;
      *(_DWORD *)(v19 + 56) = *(_DWORD *)v20 | 0x80000000;
      ++v17;
      v16 += 60;
    }
    while (v18 != v17);
  }
  return result;
}

void MEOWSVDDistances::ComputeNorm(uint64_t *a1, _QWORD *a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  long double v13;
  __n128 v14;
  float64x2_t v15;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  int v27;
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  __int128 v36;
  int v37;
  __int128 v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;

  v3 = *((__int16 *)a1 + 67);
  if (*((_WORD *)a1 + 67))
  {
    v4 = 0;
    v5 = 0;
    v25 = a1[2];
    v24 = *a1;
    v6 = bswap32(*((_DWORD *)a1 + 59));
    v7 = bswap32(*((_DWORD *)a1 + 60));
    v23 = *a1 + 56 * *((__int16 *)a1 + 67);
    v8 = 0.0;
    a3.n128_u64[0] = 0;
    v26 = a3;
    do
    {
      v9 = v24 + 56 * v4;
      v35 = *(_DWORD *)(v9 + 8);
      v36 = *(_OWORD *)(v9 + 12);
      v37 = *(_DWORD *)(v9 + 28);
      v38 = *(_OWORD *)(v9 + 32);
      v39 = *(_DWORD *)(v9 + 48);
      v40 = v6;
      v41 = v7;
      v42 = *(_DWORD *)v9 | 0x80000000;
      v10 = v23;
      v11 = v25 - v3;
      if (v25 != v3)
      {
        do
        {
          v27 = *(_DWORD *)(v10 + 8);
          v28 = *(_OWORD *)(v10 + 12);
          v29 = *(_DWORD *)(v10 + 28);
          v30 = *(_OWORD *)(v10 + 32);
          v31 = *(_DWORD *)(v10 + 48);
          v32 = v6;
          v33 = v7;
          v34 = *(_DWORD *)v10 | 0x80000000;
          v12 = MEOWRawSVDDistance((float *)&v35, (float *)&v27);
          if (v12 != 0.0)
          {
            v13 = log(v12);
            v14.n128_u64[1] = v26.n128_u64[1];
            v14.n128_f64[0] = v26.n128_f64[0] + v13;
            v26 = v14;
            v8 = v8 + v13 * v13;
            ++v5;
          }
          v10 += 56;
          --v11;
        }
        while (v11);
      }
      ++v4;
    }
    while (v4 != v3);
  }
  else
  {
    v5 = 0;
    v26.n128_u64[0] = 0;
    v8 = 0.0;
  }
  v15.f64[0] = (double)v5;
  __asm { FMOV            V2.2D, #1.0 }
  *(_QWORD *)&_Q2.f64[0] = v26.n128_u64[0];
  v15.f64[1] = sqrt(((double)v5 * v8 - v26.n128_f64[0] * v26.n128_f64[0]) / (((double)v5 + -1.0) * (double)v5));
  *(uint64_t *)((char *)a1 + 236) = (uint64_t)vrev32_s8((int8x8_t)vcvt_f32_f64(vdivq_f64(_Q2, v15)));
  if (a2)
    *a2 = *(uint64_t *)((char *)a1 + 236);
}

void MEOWSVDDistanceEncoder::MEOWSVDDistanceEncoder(MEOWSVDDistanceEncoder *this, int a2, __int16 a3)
{
  uint64_t v5;

  MEOWDist::MEOWDist(this, a2);
  SLML::Vector<float>::Vector(v5 + 32, 0);
  SLML::Vector<float>::Vector((uint64_t)this + 56, 0);
  SLML::Vector<float>::Vector((uint64_t)this + 80, 0);
  MEOWVectorBase::MEOWVectorBase((MEOWSVDDistanceEncoder *)((char *)this + 104), 4);
  MEOWTreeBase::MEOWTreeBase((MEOWSVDDistanceEncoder *)((char *)this + 136), 0x10u);
  *((_QWORD *)this + 17) = &off_1E9367DB8;
  MEOWVectorBase::MEOWVectorBase((MEOWSVDDistanceEncoder *)((char *)this + 192), 4);
  *((_WORD *)this + 214) = 49;
  *((_DWORD *)this + 108) = 0;
  *((_WORD *)this + 218) = 2 * a3 - 1;
}

void sub_1D2284DC0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  void **v2;
  MEOWTreeBase *v3;

  MEOWTreeBase::~MEOWTreeBase(v3);
  MEOWVectorBase::~MEOWVectorBase(v2);
  SLML::Storage<float>::RemoveReference(v1[11]);
  SLML::Storage<float>::RemoveReference(v1[8]);
  SLML::Storage<float>::RemoveReference(v1[5]);
  SLML::Storage<float>::RemoveReference(v1[2]);
  _Unwind_Resume(a1);
}

void sub_1D2284E1C()
{
  JUMPOUT(0x1D2284E0CLL);
}

uint64_t MEOWSVDDistanceEncoder::AddCutPoint(MEOWSVDDistanceEncoder *this, unsigned int a2, int a3, int a4)
{
  int v7;
  unsigned int v8;
  __int16 v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  int v16;
  __int128 v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  _DWORD *v22;
  int v23;

  v7 = *((unsigned __int8 *)this + 429);
  v8 = *((unsigned __int8 *)this + 428);
  if (v7 != a3 || v8 < a2)
  {
    v10 = *((_WORD *)this + 60);
    do
    {
      LOBYTE(v8) = v8 + 1;
      if (v8 == 50)
      {
        LOBYTE(v8) = 0;
        LOBYTE(v7) = v7 == 0;
        *((_BYTE *)this + 429) = v7;
        *((_WORD *)this + 162) = v10;
      }
      v11 = (char *)this + 2 * v8;
      v12 = v11 + 326;
      v13 = v11 + 224;
      if (!(_BYTE)v7)
        v13 = v12;
      *(_WORD *)v13 = v10;
    }
    while (v7 != a3 || a2 > v8);
    *((_BYTE *)this + 428) = v8;
  }
  MEOWVectorBase::Append((_QWORD *)this + 13);
  *(_DWORD *)(*((_QWORD *)this + 13) + 4 * *((_QWORD *)this + 15) - 4) = a4;
  v23 = a3 | (2 * a4);
  v21 = 0uLL;
  v22 = 0;
  MEOWTreeBase::LowerBound((uint64_t)this + 136, (uint64_t)&v23, (unsigned __int16 *)&v21);
  LOWORD(v19) = 0;
  if (MEOWTreeIterBase::Equal((MEOWTreeIterBase *)&v21, (const MEOWTreeIterBase *)&v19))
  {
    v14 = v23;
  }
  else
  {
    v14 = v23;
    if (*v22 == v23)
      return 0;
  }
  v17 = v21;
  v18 = v22;
  v16 = *((_DWORD *)this + 8) / (*((_DWORD *)this + 1) * *((unsigned __int16 *)this + 218));
  v19 = v14;
  v20 = v16;
  MEOWTreeBase::Insert((MEOWSVDDistanceEncoder *)((char *)this + 136), &v19, (const MEOWTreeIterBase *)&v17);
  MEOWVectorBase::Append((_QWORD *)this + 24);
  *(_DWORD *)(*((_QWORD *)this + 24) + 4 * *((_QWORD *)this + 26) - 4) = a4;
  return 1;
}

uint64_t MEOWSVDDistanceEncoder::EndEncoding(uint64_t this)
{
  __int16 v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_WORD *)(this + 120);
  if (v1)
  {
    v2 = *(unsigned __int8 *)(this + 428);
    if (v2 <= 0x31)
    {
      v3 = 2 * v2;
      do
      {
        *(_WORD *)(this + 328 + v3) = v1;
        v3 += 2;
      }
      while (v3 != 100);
      *(_BYTE *)(this + 428) = 50;
    }
  }
  else
  {
    *(_OWORD *)(this + 224) = 0u;
    this += 224;
    *(_OWORD *)(this + 188) = 0u;
    *(_OWORD *)(this + 160) = 0u;
    *(_OWORD *)(this + 176) = 0u;
    *(_OWORD *)(this + 128) = 0u;
    *(_OWORD *)(this + 144) = 0u;
    *(_OWORD *)(this + 96) = 0u;
    *(_OWORD *)(this + 112) = 0u;
    *(_OWORD *)(this + 64) = 0u;
    *(_OWORD *)(this + 80) = 0u;
    *(_OWORD *)(this + 32) = 0u;
    *(_OWORD *)(this + 48) = 0u;
    *(_OWORD *)(this + 16) = 0u;
  }
  return this;
}

size_t MEOWSVDDistanceEncoder::Encode(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, char a6, int a7)
{
  size_t result;
  unsigned int v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  unsigned __int16 *v38;
  float *v39;
  uint64_t v40;
  unsigned int v41;
  __int16 *v42;
  float *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  __int16 *v47;
  float *v48;
  uint64_t v49;
  int v50;
  float v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  int *v63;
  uint64_t v64;
  int v65;
  int v66;

  result = MEOWSVDDistanceEncoder::AddCutPoint((MEOWSVDDistanceEncoder *)a1, a2, a3, a7);
  if (!(_DWORD)result)
    return fwrite("Duplicate cutpoint, omitted\n", 0x1CuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  v62 = a6;
  v13 = *(unsigned __int16 *)(a1 + 436);
  v14 = 6 - v13;
  if (v13 > 6)
    v14 = 7 - v13;
  if (*(_WORD *)(a1 + 436))
  {
    v15 = 0;
    v16 = *(int *)(a1 + 4) >> 1;
    v17 = a4 + 12 * (v14 >> 1);
    v64 = a1 + 32;
    v18 = v16;
    v61 = v17;
    v56 = v16;
    if (a3)
      v18 = 0;
    v58 = v18;
    v59 = a1 + 56;
    v66 = *(int *)(a1 + 4) >> 1;
    v57 = 4 * v16;
    v60 = a5;
    do
    {
      v19 = (int *)(v61 + 12 * v15);
      v20 = *(int *)(a1 + 4);
      v21 = v19[1];
      if ((int)v20 >= (int)v21)
        v22 = v19[1];
      else
        v22 = *(_DWORD *)(a1 + 4);
      if ((int)v20 >= v19[4])
        v23 = v19[4];
      else
        v23 = *(_DWORD *)(a1 + 4);
      v24 = *(_DWORD *)(a1 + 32);
      SLML::Vector<float>::push_back(v64, 0.0);
      v25 = *(_DWORD *)(a1 + 4) + v24;
      if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 12) < v25)
        SLML::Vector<float>::ResizeStorage(v64, *(_DWORD *)(a1 + 4) + v24);
      v26 = v22 >> 1;
      v63 = v19 + 3;
      v65 = v23 >> 1;
      *(_DWORD *)(a1 + 32) = v25;
      v27 = (char *)(*(_QWORD *)(a1 + 48) + 4 * *(_DWORD *)(a1 + 36) * v24);
      v28 = v66 - (v22 - (v22 >> 1));
      bzero(v27, 4 * v28);
      v29 = *v19;
      if ((v62 & 1) != 0)
      {
        if (v22 != v26)
        {
          v42 = (__int16 *)(v60 + 2 * v29 + 2 * v26);
          v43 = (float *)&v27[4 * v28];
          if (v21 >= v20)
            v44 = v20;
          else
            v44 = v21;
          v45 = 2 * v44 - 2 * v26;
          do
          {
            v46 = *v42++;
            *v43++ = (float)v46;
            v45 -= 2;
          }
          while (v45);
        }
        v35 = v23;
        v36 = v22 - (v22 >> 1);
        v37 = v23 >> 1;
        if (v23 >= 2)
        {
          v47 = (__int16 *)(v60 + 2 * *v63);
          v48 = (float *)&v27[4 * v56];
          v49 = 2 * v65;
          do
          {
            v50 = *v47++;
            *v48++ = (float)v50;
            v49 -= 2;
          }
          while (v49);
        }
      }
      else
      {
        if (v22 != v26)
        {
          v30 = (unsigned __int16 *)(v60 + 2 * v29 + 2 * v26);
          v31 = (float *)&v27[4 * v28];
          if (v21 >= v20)
            v32 = v20;
          else
            v32 = v21;
          v33 = 2 * v32 - 2 * v26;
          do
          {
            v34 = *v30++;
            *v31++ = (float)((int)bswap32(v34) >> 16);
            v33 -= 2;
          }
          while (v33);
        }
        v35 = v23;
        v36 = v22 - (v22 >> 1);
        v37 = v23 >> 1;
        if (v23 >= 2)
        {
          v38 = (unsigned __int16 *)(v60 + 2 * *v63);
          v39 = (float *)&v27[4 * v56];
          v40 = 2 * v65;
          do
          {
            v41 = *v38++;
            *v39++ = (float)((int)bswap32(v41) >> 16);
            v40 -= 2;
          }
          while (v40);
        }
      }
      bzero(&v27[4 * *(int *)(a1 + 4) + -4 * (v66 - (v35 >> 1))], 4 * (v66 - (v35 >> 1)));
      v51 = sqrtf(cblas_sdot(v36 + v37, (const float *)&v27[4 * v28], 1, (const float *)&v27[4 * v28], 1)/ (float)(v36 + v37));
      cblas_sscal(v36 + v37, 1.0 / v51, (float *)&v27[4 * v28], 1);
      result = SLML::Vector<float>::push_back(a1 + 80, v51);
      v52 = *(unsigned __int16 *)(a1 + 436);
      if (v15 == v52 >> 1)
      {
        v53 = *(_DWORD *)(a1 + 56);
        SLML::Vector<float>::push_back(v59, 0.0);
        if (*(_DWORD *)(*(_QWORD *)(a1 + 64) + 12) < v53 + v66)
          SLML::Vector<float>::ResizeStorage(v59, v53 + v66);
        *(_DWORD *)(a1 + 56) = v53 + v66;
        result = (size_t)memcpy((void *)(*(_QWORD *)(a1 + 72) + 4 * *(_DWORD *)(a1 + 60) * v53), &v27[4 * v58], v57);
        v52 = *(unsigned __int16 *)(a1 + 436);
      }
      ++v15;
      if (v36 <= v37)
        v54 = v37;
      else
        v54 = v36;
      if (*(_DWORD *)(a1 + 432) <= 2 * v54)
        v55 = 2 * v54;
      else
        v55 = *(_DWORD *)(a1 + 432);
      *(_DWORD *)(a1 + 432) = v55;
    }
    while (v15 < v52);
  }
  return result;
}

uint64_t SLML::Vector<float>::push_back(uint64_t result, float a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  v3 = result;
  v4 = *(_DWORD *)result;
  if (*(_DWORD *)result == *(_DWORD *)(*(_QWORD *)(result + 8) + 12))
  {
    v5 = 2 * v4;
    if (v5 <= 8)
      v6 = 8;
    else
      v6 = v5;
    result = SLML::Vector<float>::ResizeStorage(result, v6);
    v4 = *(_DWORD *)v3;
  }
  v7 = *(_QWORD *)(v3 + 16);
  *(_DWORD *)v3 = v4 + 1;
  *(float *)(v7 + 4 * v4) = a2;
  return result;
}

unint64_t MEOWCutPointTree::FindInPage(MEOWCutPointTree *this, unsigned int *a2, _DWORD *a3, unint64_t a4, BOOL *a5)
{
  unint64_t v5;
  unsigned int v6;
  unint64_t result;
  unsigned int v8;
  BOOL v9;

  if (a4)
  {
    v5 = 0;
    v6 = *a2;
    do
    {
      result = (a4 + v5) >> 1;
      v8 = a3[4 * result];
      if (v8 >= v6)
      {
        if (v8 <= v6)
        {
          v9 = 1;
          goto LABEL_11;
        }
        a4 = (a4 + v5) >> 1;
      }
      else
      {
        v5 = result + 1;
      }
    }
    while (v5 < a4);
    v9 = 0;
    result = v5;
  }
  else
  {
    v9 = 0;
    result = 0;
  }
LABEL_11:
  *a5 = v9;
  return result;
}

_QWORD *MEOWSVDDistanceEncoder::ComputeDistances(MEOWSVDDistanceEncoder *this, __sFILE *a2)
{
  __int16 v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  __CLPK_integer v8;
  _DWORD *v9;
  __CLPK_integer v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __CLPK_integer v20;
  __CLPK_real *v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  FILE **v31;
  __CLPK_real *v32;
  double v33;
  int v34;
  uint64_t j;
  uint64_t v36;
  _QWORD *v37;
  const float *v38;
  int v39;
  int v40;
  int v41;
  const float *v42;
  const float *v43;
  unint64_t v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  uint64_t v48;
  char *v49;
  __int16 v50;
  uint64_t v51;
  char *v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t k;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  char *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  __int16 *v88;
  unsigned __int8 v89;
  int v90;
  int v91;
  __int16 *v92;
  _QWORD *v93;
  void **v94;
  MEOWTreeBase *v95;
  int __N;
  uint64_t v97;
  int v98;
  int v99;
  unsigned __int16 v100[8];
  uint64_t v101;
  __CLPK_integer v102;
  int v103;
  uint64_t v104;
  __CLPK_real *v105;
  char v106[4];
  int v107;
  uint64_t v108;
  __CLPK_real *v109;
  char v110[4];
  int v111;
  uint64_t v112;
  __CLPK_real *v113;
  __CLPK_integer __lwork;
  char v115[4];
  int v116;
  uint64_t v117;
  __CLPK_real *v118;
  __CLPK_integer __lda;
  __CLPK_integer __m;
  __CLPK_integer __n[3];

  v4 = *((_WORD *)this + 60);
  if (v4)
  {
    v5 = *((unsigned __int8 *)this + 428);
    if (v5 <= 0x31)
    {
      v6 = 2 * v5;
      do
      {
        *(_WORD *)((char *)this + v6 + 328) = v4;
        v6 += 2;
      }
      while (v6 != 100);
      *((_BYTE *)this + 428) = 50;
    }
  }
  else
  {
    *((_OWORD *)this + 14) = 0u;
    *(_OWORD *)((char *)this + 412) = 0u;
    *((_OWORD *)this + 24) = 0u;
    *((_OWORD *)this + 25) = 0u;
    *((_OWORD *)this + 22) = 0u;
    *((_OWORD *)this + 23) = 0u;
    *((_OWORD *)this + 20) = 0u;
    *((_OWORD *)this + 21) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 19) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 15) = 0u;
  }
  v7 = (*((_DWORD *)this + 108) + 3) & 0xFFFFFFFC;
  *((_DWORD *)this + 108) = v7;
  v8 = *((_DWORD *)this + 1);
  v9 = (_DWORD *)((char *)this + 32);
  v10 = *((_DWORD *)this + 8) / v8;
  __m = v10;
  __n[0] = v8;
  __lda = (v10 + 3) & 0xFFFFFFFC;
  v11 = *((unsigned __int16 *)this + 218);
  v12 = __OFSUB__(v8, v7);
  v13 = v8 - v7;
  if (v13 < 0 != v12)
    v14 = v13 + 1;
  else
    v14 = v13;
  v90 = v7;
  SLML::Vector<float>::Vector((uint64_t)v115, ((v10 + 3) & 0xFFFFFFFC) * v7);
  v15 = __m;
  if (__m >= 1)
  {
    v16 = 0;
    v17 = 0;
    v18 = v14 >> 1;
    v19 = *((int *)this + 108);
    v20 = __n[0];
    v21 = v118;
    v22 = v116;
    v23 = v116 * __lda;
    do
    {
      if ((int)v19 >= 1)
      {
        v24 = *((_QWORD *)this + 6);
        v25 = *((_DWORD *)this + 9);
        v26 = v25 * v18;
        v27 = v16;
        v28 = v19;
        do
        {
          v21[v27] = *(__CLPK_real *)(v24 + 4 * v26);
          v27 += v23;
          v26 += v25;
          --v28;
        }
        while (v28);
      }
      ++v17;
      v16 += v22;
      v18 += v20;
    }
    while (v17 != v15);
  }
  if (a2)
  {
    fprintf(a2, "%d\n", __lda);
    fprintf(a2, "%u\n", *((_DWORD *)this + 108));
    fprintf(a2, "%u\n", *((unsigned __int16 *)this + 218));
    if (__lda >= 1)
    {
      for (i = 0; i < __lda; ++i)
      {
        if (*((int *)this + 108) >= 1)
        {
          v30 = 0;
          do
          {
            if (v30)
              fputc(32, a2);
            fprintf(a2, "%f", v118[v116 * ((int)i + (int)v30++ * __lda)]);
          }
          while (v30 < *((int *)this + 108));
        }
        fputc(10, a2);
      }
    }
  }
  *v9 = 0;
  SLML::Vector<float>::ResizeStorage((uint64_t)this + 32, 0);
  __n[0] = *((_DWORD *)this + 108);
  __lwork = -1;
  SLML::Vector<float>::Vector((uint64_t)v110, __n[0]);
  SLML::Vector<float>::Vector((uint64_t)v106, __n[0] + __n[0] * __n[0]);
  SLML::Vector<float>::Vector((uint64_t)&v103, 1);
  v102 = 0;
  v31 = (FILE **)MEMORY[0x1E0C80C10];
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "ComputeDistances %d x %d\n", __m, __n[0]);
  if (__m)
  {
    sgesvd_("O", "S", &__m, __n, v118, &__lda, v113, 0, &__lda, v109, __n, v105, &__lwork, &v102);
    v32 = v105;
    v33 = *v105 + 0.0001;
    v34 = (int)v33;
    __lwork = (int)v33;
    if (*(_DWORD *)(v104 + 12) < (int)v33)
    {
      SLML::Vector<float>::ResizeStorage((uint64_t)&v103, (int)v33);
      v32 = v105;
    }
    v103 = v34;
    sgesvd_("O", "S", &__m, __n, v118, &__lda, v113, 0, &__lda, v109, __n, v32, &__lwork, &v102);
    fprintf(*v31, "  S = %f %f %f %f %f\n", *v113, v113[v111], v113[2 * v111], v113[3 * v111], v113[4 * v111]);
  }
  if (a2)
  {
    fputc(10, a2);
    fwrite("== left singular vectors ==\n", 0x1CuLL, 1uLL, a2);
    if (__lda >= 1)
    {
      for (j = 0; j < __lda; ++j)
      {
        if (*((int *)this + 108) >= 1)
        {
          v36 = 0;
          do
          {
            if (v36)
              fputc(32, a2);
            fprintf(a2, "%f", v118[v116 * ((int)j + (int)v36++ * __lda)]);
          }
          while (v36 < *((int *)this + 108));
        }
        fputc(10, a2);
      }
    }
    fputc(10, a2);
    fwrite("== singular values ==\n", 0x16uLL, 1uLL, a2);
    fprintf(a2, "%f %f %f %f %f\n", *v113, v113[v111], v113[2 * v111], v113[3 * v111], v113[4 * v111]);
  }
  v103 = 0;
  SLML::Vector<float>::ResizeStorage((uint64_t)&v103, 0);
  v37 = (_QWORD *)operator new();
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v37, 56);
  v39 = v10 / v11;
  *(_QWORD *)((char *)v37 + 236) = 0x803F00000000;
  if (v10 / v11 >= 1)
  {
    v40 = 0;
    do
    {
      v41 = v40 * *((unsigned __int16 *)this + 218) + (*((unsigned __int16 *)this + 218) >> 1);
      scale_norm(&v118[v41 * v116], (float *)__lda, (uint64_t)v113, v38);
      scale_norm(&v118[v116 * (v41 - 1)], (float *)__lda, (uint64_t)v113, v42);
      scale_norm(&v118[v116 + v116 * v41], (float *)__lda, (uint64_t)v113, v43);
      ++v40;
    }
    while (v39 != v40);
  }
  v44 = *((_QWORD *)this + 15);
  if (v37[3] < v44)
    MEOWVectorBase::Allocate((MEOWVectorBase *)v37, *((_QWORD *)this + 15), 1);
  __N = v90 >> 1;
  v93 = v37;
  v37[2] = v44;
  if (a2)
  {
    fwrite("== border vectors ==\n", 0x15uLL, 1uLL, a2);
    fprintf(a2, "size = %u\n", *((_DWORD *)this + 14));
  }
  v45 = 0;
  v46 = *((_WORD *)this + 112);
  v94 = (void **)((char *)this + 104);
  v95 = (MEOWSVDDistanceEncoder *)((char *)this + 136);
  if (__N <= 1)
    v47 = 1;
  else
    v47 = v90 >> 1;
  do
  {
    v48 = v45 + 1;
    v49 = (char *)this + 2 * v45 + 2;
    v50 = *((_WORD *)v49 + 112);
    v88 = (__int16 *)(v49 + 224);
    if (v50 > v46)
    {
      v85 = v45 + 1;
      v86 = v45;
      v91 = 0;
      v51 = v46;
      v97 = 56 * v46 + 12;
      do
      {
        if (a2)
        {
          v52 = MEOWPhon::Name((MEOWPhon *)v86);
          fprintf(a2, "%s*.%d\n", v52, v91++);
        }
        v53 = (2 * *((_DWORD *)*v94 + v51)) | 1;
        v99 = v53;
        MEOWTreeBase::LowerBound((uint64_t)v95, (uint64_t)&v99, v100);
        v54 = *(_QWORD *)(v101 + 8);
        v55 = *((unsigned __int16 *)this + 218);
        v56 = *v93;
        v57 = *v93 + 56 * v51;
        *(_QWORD *)v57 = *(unsigned int *)(*((_QWORD *)this + 13) + 4 * v51);
        LODWORD(v55) = (v55 >> 1) + v54 * v55;
        *(_DWORD *)(v57 + 8) = *(_DWORD *)(*((_QWORD *)this + 12) + 4 * *((_DWORD *)this + 21) * (int)v55);
        cblas_scopy(5, &v118[v116 * ((int)v55 - 1)], __lda, (float *)(v57 + 32), 1);
        v58 = v54 + 1;
        cblas_sgemv(CblasColMajor, CblasNoTrans, 5, __N, 1.0, v109, __n[0], (const float *)(*((_QWORD *)this + 9)+ 4 * ((*((int *)this + 1) >> 1) * ((int)v54 + 1) - __N) * *((_DWORD *)this + 15)), 1, 0.0, (float *)(v56 + 56 * v51 + 12), 1);
        if (a2)
        {
          fprintf(a2, "cpside = %u, sequenceNum = %u, offset=%lu\n", v53, v54, v58 * ((uint64_t)*((int *)this + 1) >> 1) - __N);
          if (v90 >= 1)
          {
            v59 = 0;
            do
            {
              if (v59)
                fputc(32, a2);
              fprintf(a2, "%f", *(float *)(*((_QWORD *)this + 9)+ 4 * (v59 - __N + (*((int *)this + 1) >> 1) * (int)v58) * *((_DWORD *)this + 15)));
              ++v59;
            }
            while (v47 != v59);
          }
          fputc(10, a2);
          for (k = 0; k != 20; k += 4)
          {
            if (k)
              fputc(32, a2);
            fprintf(a2, "%f", *(float *)(v56 + v97 + k));
          }
          fputc(10, a2);
        }
        ++v51;
        v97 += 56;
      }
      while (v51 < *v88);
      v50 = *v88;
      v48 = v85;
    }
    v46 = v50;
    v45 = v48;
  }
  while (v48 != 50);
  v61 = 0;
  v62 = *((_WORD *)this + 163);
  do
  {
    v63 = v61 + 1;
    v64 = (char *)this + 2 * v61 + 2;
    v65 = *((__int16 *)v64 + 163);
    if (v65 > v62)
    {
      v87 = v61 + 1;
      v89 = v61;
      v98 = 0;
      v92 = (__int16 *)(v64 + 326);
      v66 = v62;
      v67 = 56 * v62 + 12;
      do
      {
        if (a2)
        {
          v68 = MEOWPhon::Name((MEOWPhon *)v89);
          fprintf(a2, "*%s.%d\n", v68, v98++);
        }
        v69 = 2 * *((_DWORD *)*v94 + v66);
        v99 = v69;
        MEOWTreeBase::LowerBound((uint64_t)v95, (uint64_t)&v99, v100);
        v70 = *(_QWORD *)(v101 + 8);
        v71 = *((unsigned __int16 *)this + 218);
        v72 = *v93;
        v73 = *v93 + 56 * v66;
        *(_QWORD *)v73 = *(unsigned int *)(*((_QWORD *)this + 13) + 4 * v66);
        LODWORD(v71) = (v71 >> 1) + v70 * v71;
        *(_DWORD *)(v73 + 8) = *(_DWORD *)(*((_QWORD *)this + 12) + 4 * *((_DWORD *)this + 21) * (int)v71);
        cblas_scopy(5, &v118[v116 + v116 * (int)v71], __lda, (float *)(v73 + 32), 1);
        cblas_sgemv(CblasColMajor, CblasNoTrans, 5, __N, 1.0, &v109[__n[0] * __N * v107], __n[0], (const float *)(*((_QWORD *)this + 9) + 4 * (*((int *)this + 1) >> 1) * (int)v70 * *((_DWORD *)this + 15)), 1, 0.0, (float *)(v72 + 56 * v66 + 12), 1);
        if (a2)
        {
          fprintf(a2, "cpside = %u, sequenceNum = %u, offset=%lu\n", v69, v70, v70 * ((uint64_t)*((int *)this + 1) >> 1));
          if (v90 >= 1)
          {
            v74 = 0;
            do
            {
              if (v74)
                fputc(32, a2);
              fprintf(a2, "%f", *(float *)(*((_QWORD *)this + 9)+ 4 * (v74 + (*((int *)this + 1) >> 1) * (int)v70) * *((_DWORD *)this + 15)));
              ++v74;
            }
            while (v47 != v74);
          }
          fputc(10, a2);
          v75 = 0;
          v76 = v72 + v67;
          do
          {
            if (v75)
              fputc(32, a2);
            fprintf(a2, "%f", *(float *)(v76 + v75));
            v75 += 4;
          }
          while (v75 != 20);
          fputc(10, a2);
        }
        ++v66;
        v67 += 56;
      }
      while (v66 < *v92);
      LOWORD(v65) = *v92;
      v63 = v87;
    }
    v62 = v65;
    v61 = v63;
  }
  while (v63 != 50);
  MEOWVectorBase::clear(v94);
  MEOWTreeBase::clear(v95);
  *((_DWORD *)this + 14) = 0;
  SLML::Vector<float>::ResizeStorage((uint64_t)this + 56, 0);
  *((_DWORD *)this + 20) = 0;
  SLML::Vector<float>::ResizeStorage((uint64_t)this + 80, 0);
  v77 = *((_OWORD *)this + 19);
  *((_OWORD *)v93 + 6) = *((_OWORD *)this + 18);
  *((_OWORD *)v93 + 7) = v77;
  *(_QWORD *)((char *)v93 + 126) = *(_QWORD *)((char *)this + 318);
  v78 = *((_OWORD *)this + 15);
  *((_OWORD *)v93 + 2) = *((_OWORD *)this + 14);
  *((_OWORD *)v93 + 3) = v78;
  v79 = *((_OWORD *)this + 17);
  *((_OWORD *)v93 + 4) = *((_OWORD *)this + 16);
  *((_OWORD *)v93 + 5) = v79;
  v80 = *(_OWORD *)((char *)this + 374);
  *(_OWORD *)((char *)v93 + 166) = *(_OWORD *)((char *)this + 358);
  v81 = *(_OWORD *)((char *)this + 326);
  *(_OWORD *)((char *)v93 + 150) = *(_OWORD *)((char *)this + 342);
  *(_OWORD *)((char *)v93 + 134) = v81;
  v82 = *(_OWORD *)((char *)this + 390);
  v83 = *(_OWORD *)((char *)this + 406);
  *(_QWORD *)((char *)v93 + 228) = *(_QWORD *)((char *)this + 420);
  *(_OWORD *)((char *)v93 + 214) = v83;
  *(_OWORD *)((char *)v93 + 198) = v82;
  *(_OWORD *)((char *)v93 + 182) = v80;
  *((_WORD *)this + 214) = 49;
  *((_DWORD *)this + 108) = 0;
  SLML::Storage<float>::RemoveReference(v104);
  SLML::Storage<float>::RemoveReference(v108);
  SLML::Storage<float>::RemoveReference(v112);
  SLML::Storage<float>::RemoveReference(v117);
  return v93;
}

void sub_1D22860F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  uint64_t v35;

  MEMORY[0x1D8233BA8](v34, 0x1080C400B0AA978);
  SLML::Storage<float>::RemoveReference(a34);
  SLML::Storage<float>::RemoveReference(*(_QWORD *)(v35 - 176));
  SLML::Storage<float>::RemoveReference(*(_QWORD *)(v35 - 152));
  SLML::Storage<float>::RemoveReference(*(_QWORD *)(v35 - 120));
  _Unwind_Resume(a1);
}

float *scale_norm(float *result, float *a2, uint64_t a3, const float *a4)
{
  uint64_t v4;
  float v5;
  float *v6;
  float v7;
  float v8;
  uint64_t v9;

  v4 = 0;
  v5 = 0.0;
  v6 = result;
  do
  {
    v7 = *(float *)(a3 + v4) * *v6;
    *v6 = v7;
    v5 = v5 + (float)(v7 * v7);
    v6 += (int)a2;
    v4 += 4;
  }
  while (v4 != 20);
  v8 = 1.0 / sqrtf(v5);
  if (*result < 0.0)
    v8 = -v8;
  v9 = 5;
  do
  {
    *result = v8 * *result;
    result += (int)a2;
    --v9;
  }
  while (v9);
  return result;
}

unsigned __int16 *MEOWSVDDistanceEncoder::UnpackCookie(unsigned __int16 *a1, float *a2)
{
  unint64_t v2;
  unsigned __int16 *result;
  unsigned int v4;
  uint64_t v5;
  float *v6;

  v2 = 0;
  v4 = *a1;
  result = a1 + 6;
  *a2 = (float)(bswap32(v4) >> 16);
  v5 = 0x7FFFFFFFFFFFFFFBLL;
  do
  {
    v6 = &a2[v2 / 2];
    *((_DWORD *)v6 + 1) = bswap32(*(_DWORD *)&result[v2]);
    v6[6] = (float)((int)bswap32(result[v5]) >> 16) / 32767.0;
    v2 += 2;
    ++v5;
  }
  while (v5 * 2);
  return result;
}

void MEOWDistPrecompStart()
{
  MEOWDistPrecompute *v0;

  v0 = (MEOWDistPrecompute *)operator new();
  MEOWDistPrecompute::MEOWDistPrecompute(v0);
  sMEOWDistPrecompute = (uint64_t)v0;
}

void sub_1D228628C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A0C40C08CCBE5);
  _Unwind_Resume(a1);
}

double MEOWDistPrecompAddCandidates(unsigned int a1, unsigned int a2, int a3, char a4, uint64_t a5, uint64_t a6)
{
  return MEOWDistPrecompute::AddCandidates(sMEOWDistPrecompute, a1, a2, a3, a4, a5, a6);
}

double MEOWDistPrecompute::AddCandidates(uint64_t a1, unsigned int a2, unsigned int a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  MEOWVectorBase *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  double result;
  __int128 v21;
  _OWORD v24[2];

  v11 = 0;
  v12 = (MEOWVectorBase *)(a1 + 160400);
  v13 = *(_QWORD *)(a1 + 160416);
  LODWORD(v24[0]) = a4;
  *((_QWORD *)&v24[0] + 1) = v13;
  do
  {
    v14 = *(_DWORD *)(a6 + 4 * v11 + 4);
    *(_WORD *)((char *)&v24[1] + v11) = v14;
    v15 = (__int16)v14;
    MEOWVectorBase::Append(v12);
    v16 = *(_QWORD *)v12;
    *(_WORD *)(*(_QWORD *)v12 + 2 * *((_QWORD *)v12 + 2) - 2) = 0;
    v17 = v13 + v15;
    if (*((_QWORD *)v12 + 3) < v17)
    {
      MEOWVectorBase::Allocate(v12, v13 + v15, 1);
      v16 = *(_QWORD *)v12;
    }
    *((_QWORD *)v12 + 2) = v17;
    memcpy((void *)(v16 + 2 * v13), (const void *)(a7 + 2 * *(int *)(a6 + 4 * v11)), 2 * v15);
    v11 += 2;
    v13 += v15;
  }
  while (v11 != 12);
  if ((a5 & 1) != 0)
    v18 = (_QWORD *)(a1 + 1600 * a2 + 32 * a3);
  else
    v18 = (_QWORD *)(a1 + 1600 * a2 + 32 * a3 + 80000);
  MEOWVectorBase::Append(v18);
  v19 = *v18 + 32 * v18[2];
  result = *(double *)v24;
  v21 = v24[1];
  *(_OWORD *)(v19 - 32) = v24[0];
  *(_OWORD *)(v19 - 16) = v21;
  return result;
}

_QWORD *MEOWDistPrecompCompute()
{
  return MEOWDistPrecompute::Compute((MEOWDistPrecompute *)sMEOWDistPrecompute);
}

_QWORD *MEOWDistPrecompute::Compute(MEOWDistPrecompute *this)
{
  MEOWSVDDistanceEncoder *v2;
  uint64_t v3;
  char *v4;
  MEOWDistPrecompute *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  MEOWDistPrecompute *v9;
  _QWORD *result;

  v2 = (MEOWSVDDistanceEncoder *)operator new();
  if (kMEOWNumSVDPPs)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMEOWNumSVDPPs, (const __CFString *)&qword_1EFC74F48, (uint64_t *)qword_1EFC74F48);
    kMEOWNumSVDPPs = 0;
  }
  MEOWSVDDistanceEncoder::MEOWSVDDistanceEncoder(v2, 9, qword_1EFC74F48);
  v3 = 0;
  v4 = (char *)this + 80000;
  v5 = this;
  do
  {
    v6 = 0;
    v7 = v4;
    do
    {
      MEOWDistPrecompute::Encode((size_t)this, (uint64_t)v2, v7, v6++, 1);
      v7 += 200;
    }
    while (v6 != 50);
    v8 = 0;
    v9 = v5;
    do
    {
      MEOWDistPrecompute::Encode((size_t)this, (uint64_t)v2, v9, v8++, 0);
      v9 = (MEOWDistPrecompute *)((char *)v9 + 32);
    }
    while (v8 != 50);
    result = MEOWSVDDistanceEncoder::ComputeDistances(v2, 0);
    *((_QWORD *)this + v3++ + 20000) = result;
    v4 += 32;
    v5 = (MEOWDistPrecompute *)((char *)v5 + 1600);
  }
  while (v3 != 50);
  return result;
}

void sub_1D2286544(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A0C40ED9C5895);
  _Unwind_Resume(a1);
}

void MEOWDistPrecompGetInfo(MEOWPhon *this, MEOWPhon *a2, int a3, _WORD *a4, _WORD *a5)
{
  MEOWDistPrecompute::GetInfo(sMEOWDistPrecompute, this, a2, a3, a4, a5);
}

void MEOWDistPrecompute::GetInfo(uint64_t a1, MEOWPhon *this, MEOWPhon *a3, int a4, _WORD *a5, _WORD *a6)
{
  uint64_t v8;
  int **v9;
  int *v10;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  FILE *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  int v28;
  __int128 v29;
  int v30;
  int8x8_t v31;
  unsigned int v32;

  v8 = a3;
  v9 = (int **)(a1 + 1600 * this + 32 * a3);
  v10 = v9[2];
  if (v10)
  {
    v12 = 0;
    v13 = this;
    v14 = *v9;
    v15 = -(uint64_t)v10;
    while (1)
    {
      v16 = *v14;
      v14 += 8;
      if (v16 == a4)
        break;
      if (v15 == --v12)
        goto LABEL_5;
    }
    v20 = a1 + 160000;
    v21 = *(_QWORD *)(a1 + 160000 + 8 * this);
    v22 = *(_QWORD *)v21 + 56 * (*(__int16 *)(v21 + 2 * a3 + 134) - v12);
    v26 = *(_DWORD *)(v22 + 8);
    v27 = *(_OWORD *)(v22 + 12);
    v28 = *(_DWORD *)(v22 + 28);
    v29 = *(_OWORD *)(v22 + 32);
    v30 = *(_DWORD *)(v22 + 48);
    v31 = vrev32_s8(*(int8x8_t *)(v21 + 236));
    v32 = *(_DWORD *)v22 | 0x80000000;
    MEOWDistPrecompute::CookieToInfo(a1, (float *)&v26, a5);
    v23 = *(_QWORD *)(v20 + 8 * v8);
    v24 = *(_QWORD *)v23 + 56 * (*(__int16 *)(v23 + 2 * v13 + 32) - v12);
    v26 = *(_DWORD *)(v24 + 8);
    v27 = *(_OWORD *)(v24 + 12);
    v28 = *(_DWORD *)(v24 + 28);
    v29 = *(_OWORD *)(v24 + 32);
    v30 = *(_DWORD *)(v24 + 48);
    v31 = vrev32_s8(*(int8x8_t *)(v23 + 236));
    v32 = *(_DWORD *)v24 | 0x80000000;
    MEOWDistPrecompute::CookieToInfo(v25, (float *)&v26, a6);
  }
  else
  {
LABEL_5:
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = MEOWPhon::Name(this);
    v19 = MEOWPhon::Name(a3);
    fprintf(v17, "Didn't find %s-%s %d\n", v18, v19, a4);
  }
}

void MEOWDistPrecompGetNorm(uint64_t a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = 0;
  v4 = sMEOWDistPrecompute + 160000;
  do
  {
    MEOWSVDDistances::ComputeNorm(*(uint64_t **)(v4 + v3), (_QWORD *)(a1 + v3), a2);
    v3 += 8;
  }
  while (v3 != 400);
}

void MEOWDistPrecompute::GetNorm(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = a1 + 160000;
  do
  {
    MEOWSVDDistances::ComputeNorm(*(uint64_t **)(v5 + v4), (_QWORD *)(a2 + v4), a3);
    v4 += 8;
  }
  while (v4 != 400);
}

uint64_t MEOWDistPrecompEnd()
{
  uint64_t result;

  result = sMEOWDistPrecompute;
  if (sMEOWDistPrecompute)
  {
    MEOWDistPrecompute::~MEOWDistPrecompute((void **)sMEOWDistPrecompute);
    JUMPOUT(0x1D8233BA8);
  }
  return result;
}

void MEOWDistPrecompute::MEOWDistPrecompute(MEOWDistPrecompute *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;

  v2 = 0;
  v3 = 2500;
  do
  {
    MEOWVectorBase::MEOWVectorBase((MEOWDistPrecompute *)((char *)this + v2), 32);
    v2 += 32;
    --v3;
  }
  while (v3);
  for (i = 0; i != 80000; i += 32)
    MEOWVectorBase::MEOWVectorBase((MEOWDistPrecompute *)((char *)this + i + 80000), 32);
  MEOWVectorBase::MEOWVectorBase((MEOWDistPrecompute *)((char *)this + 160400), 2);
  *((_OWORD *)this + 10023) = 0u;
  *((_OWORD *)this + 10024) = 0u;
  *((_OWORD *)this + 10021) = 0u;
  *((_OWORD *)this + 10022) = 0u;
  *((_OWORD *)this + 10019) = 0u;
  *((_OWORD *)this + 10020) = 0u;
  *((_OWORD *)this + 10017) = 0u;
  *((_OWORD *)this + 10018) = 0u;
  *((_OWORD *)this + 10015) = 0u;
  *((_OWORD *)this + 10016) = 0u;
  *((_OWORD *)this + 10013) = 0u;
  *((_OWORD *)this + 10014) = 0u;
  *((_OWORD *)this + 10011) = 0u;
  *((_OWORD *)this + 10012) = 0u;
  *((_OWORD *)this + 10009) = 0u;
  *((_OWORD *)this + 10010) = 0u;
  *((_OWORD *)this + 10007) = 0u;
  *((_OWORD *)this + 10008) = 0u;
  *((_OWORD *)this + 10005) = 0u;
  *((_OWORD *)this + 10006) = 0u;
  *((_OWORD *)this + 10003) = 0u;
  *((_OWORD *)this + 10004) = 0u;
  *((_OWORD *)this + 10001) = 0u;
  *((_OWORD *)this + 10002) = 0u;
  *((_OWORD *)this + 10000) = 0u;
}

void sub_1D22868C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;

  v4 = (void **)(v1 + 159968);
  v5 = -80000;
  do
  {
    MEOWVectorBase::~MEOWVectorBase(v4);
    v4 = (void **)(v6 - 32);
    v5 += 32;
  }
  while (v5);
  v7 = (void **)(v1 + 79968);
  do
  {
    MEOWVectorBase::~MEOWVectorBase(v7);
    v7 = (void **)(v8 - 32);
    v2 += 32;
  }
  while (v2);
  _Unwind_Resume(a1);
}

void MEOWDistPrecompute::~MEOWDistPrecompute(void **this)
{
  uint64_t v2;
  char *v3;
  void **v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;

  v2 = 0;
  v3 = (char *)(this + 20000);
  do
  {
    v4 = *(void ***)&v3[v2];
    if (v4)
    {
      MEOWVectorBase::~MEOWVectorBase(v4);
      MEMORY[0x1D8233BA8]();
    }
    v2 += 8;
  }
  while (v2 != 400);
  MEOWVectorBase::~MEOWVectorBase(this + 20050);
  v5 = this + 19996;
  v6 = 0x1FFFFFFFFFFFD8F0;
  do
  {
    MEOWVectorBase::~MEOWVectorBase(v5);
    v5 = (void **)(v7 - 32);
    v6 += 4;
  }
  while (v6 * 8);
  do
  {
    MEOWVectorBase::~MEOWVectorBase(&this[v6 + 9996]);
    v6 -= 4;
  }
  while (v6 != -10000);
}

size_t MEOWDistPrecompute::Encode(size_t result, uint64_t a2, _QWORD *a3, unsigned int a4, int a5)
{
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int16 *v14;
  int v15;
  int *v16;
  _BYTE v17[72];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a3[2])
  {
    v9 = 0;
    v10 = (uint64_t *)(result + 160400);
    v11 = 16;
    do
    {
      v12 = 0;
      v13 = *(_DWORD *)(*a3 + 32 * v9 + 8);
      v14 = (__int16 *)(*a3 + v11);
      do
      {
        v15 = *v14++;
        v16 = (int *)&v17[v12];
        *v16 = v13;
        v16[1] = v15;
        v13 += v15;
        v12 += 12;
      }
      while (v12 != 72);
      result = MEOWSVDDistanceEncoder::Encode(a2, a4, a5, (uint64_t)v17, *v10, 1, v13);
      ++v9;
      v11 += 32;
    }
    while (v9 < a3[2]);
  }
  return result;
}

void MEOWDistPrecompute::CookieToInfo(uint64_t a1, float *a2, _WORD *a3)
{
  unint64_t v3;
  _WORD *v4;
  uint64_t v5;

  v3 = 0;
  *a3 = __rev16((int)*a2);
  v4 = a3 + 6;
  v5 = 0x7FFFFFFFFFFFFFFBLL;
  do
  {
    *(_DWORD *)&v4[v3 / 2] = bswap32(LODWORD(a2[v3 / 4 + 1]));
    v4[v5] = bswap32((int)(float)(a2[v3 / 4 + 6] * 32767.0)) >> 16;
    v3 += 4;
    ++v5;
  }
  while (v5 * 2);
}

MEOWSVDDistanceEncoder *CreateMEOWSVDDistanceEncoder(void)
{
  MEOWSVDDistanceEncoder *v0;

  v0 = (MEOWSVDDistanceEncoder *)operator new();
  if (kMEOWNumSVDPPs)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMEOWNumSVDPPs, (const __CFString *)&qword_1EFC74F48, (uint64_t *)qword_1EFC74F48);
    kMEOWNumSVDPPs = 0;
  }
  MEOWSVDDistanceEncoder::MEOWSVDDistanceEncoder(v0, 9, qword_1EFC74F48);
  return v0;
}

void sub_1D2286BAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A0C40ED9C5895);
  _Unwind_Resume(a1);
}

void MEOWCutPointTree::~MEOWCutPointTree(MEOWCutPointTree *this)
{
  MEOWTreeBase::~MEOWTreeBase(this);
  JUMPOUT(0x1D8233BA8);
}

uint64_t SLML::Vector<float>::Vector(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)a1 = a2;
  v4 = operator new();
  *(_BYTE *)v4 = 1;
  *(_QWORD *)(v4 + 4) = 0x100000001;
  *(_DWORD *)(v4 + 12) = a2;
  v5 = operator new[]();
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(v4 + 8);
  return a1;
}

void sub_1D2286C84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x1080C401B11B02ALL);
  _Unwind_Resume(a1);
}

uint64_t SLML::Storage<float>::RemoveReference(uint64_t result)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(result + 4) - 1;
  *(_DWORD *)(result + 4) = v1;
  if (result && !v1)
  {
    if (*(_BYTE *)result)
    {
      v2 = *(_QWORD *)(result + 16);
      if (v2)
        MEMORY[0x1D8233B90](v2, 0x1000C8052888210);
    }
    JUMPOUT(0x1D8233BA8);
  }
  return result;
}

uint64_t SLML::Vector<float>::ResizeStorage(uint64_t a1, int a2)
{
  uint64_t v4;
  float *v5;
  uint64_t result;
  uint64_t v7;

  v4 = operator new();
  *(_BYTE *)v4 = 1;
  *(_QWORD *)(v4 + 4) = 0x100000001;
  *(_DWORD *)(v4 + 12) = a2;
  v5 = (float *)operator new[]();
  *(_QWORD *)(v4 + 16) = v5;
  cblas_scopy(*(_DWORD *)a1, *(const float **)(a1 + 16), *(_DWORD *)(a1 + 4), v5, 1);
  result = SLML::Storage<float>::RemoveReference(*(_QWORD *)(a1 + 8));
  v7 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(v4 + 8);
  return result;
}

void sub_1D2286DC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x1080C401B11B02ALL);
  _Unwind_Resume(a1);
}

MEOWVectorBase *MEOWPath::MEOWPath(MEOWVectorBase *a1, int *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _WORD *v6;
  uint64_t v7;

  MEOWVectorBase::MEOWVectorBase(a1, 8, *a2);
  v4 = *a2;
  if ((int)v4 >= 1)
  {
    v5 = (_DWORD *)*((_QWORD *)a2 + 2);
    v6 = (_WORD *)(*(_QWORD *)a1 + 4);
    v7 = 4 * a2[1];
    do
    {
      *((_DWORD *)v6 - 1) = *v5;
      *v6 = -1;
      v6 += 4;
      v5 = (_DWORD *)((char *)v5 + v7);
      --v4;
    }
    while (v4);
  }
  MEOWPath::SortNodes((uint64_t *)a1);
  return a1;
}

uint64_t *MEOWPath::SortNodes(uint64_t *this)
{
  uint64_t v1;
  unint64_t v2;
  int v3;
  uint64_t i;
  float v5;
  int v6;
  uint64_t v7;
  _WORD *v8;
  unsigned __int16 v9;
  int v10;

  *((_DWORD *)this + 8) = 0;
  v1 = *this;
  *(_WORD *)(*this + 6) = -1;
  v2 = this[2];
  if (v2 >= 2)
  {
    v3 = 0;
    for (i = 1; i != v2; ++i)
    {
      v5 = *(float *)(v1 + 8 * i);
      v6 = v3;
      if (v5 <= *(float *)(v1 + 8 * v3))
      {
        *(_WORD *)(v1 + 8 * i + 6) = v3;
        *((_DWORD *)this + 8) = i;
        v3 = i;
      }
      else
      {
        do
        {
          v7 = v1 + 8 * v6;
          v10 = *(__int16 *)(v7 + 6);
          v8 = (_WORD *)(v7 + 6);
          v9 = v10;
          if (v10 < 0)
            break;
          v6 = v9;
        }
        while (v5 > *(float *)(v1 + 8 * v9));
        *(_WORD *)(v1 + 8 * i + 6) = v9;
        *v8 = i;
      }
    }
  }
  return this;
}

MEOWVectorBase *MEOWPath::MEOWPath(MEOWVectorBase *a1, uint64_t *a2, uint64_t a3, _QWORD *a4, int *a5, float a6)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  unint64_t v22;
  float v23;
  int v24;
  int v25;
  float *v26;
  int v27;
  float v28;
  float v29;
  uint64_t v30;
  unsigned int v31;
  float v32;
  float v33;
  int v34;
  uint64_t v35;
  int v38;
  int v39;
  uint64_t v40;
  float *__X;
  float *v42;
  int v43;
  float *v44;
  int v45;
  float *v46;
  int v47;

  MEOWVectorBase::MEOWVectorBase(a1, 8, *a5);
  if (*a5 >= 1)
  {
    v11 = 0;
    do
    {
      v12 = *a4 + 60 * v11;
      v13 = *((_DWORD *)a2 + 8);
      if ((MTBEDebugFlags::sMEOWDebug & 0x200) != 0)
      {
        SLML::Vector<float>::Vector((uint64_t)&v38, *(_DWORD *)(a3 + 16));
        if (*(_QWORD *)(a3 + 16))
        {
          v21 = 0;
          v22 = 0;
          do
          {
            MEOWDistance(*(_QWORD *)a3 + v21, v12);
            __X[v39 * (int)v22++] = v23;
            v21 += 60;
          }
          while (v22 < *(_QWORD *)(a3 + 16));
        }
        v24 = v38;
        v25 = v38 >> 1;
        v26 = __X;
        v27 = v39 * (v38 >> 1);
        if (v27 != v39 * v38)
        {
          v46 = __X;
          v47 = v39;
          v44 = &__X[v27];
          v45 = v39;
          v42 = &__X[v39 * v38];
          v43 = v39;
          std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,SLML::Vector<float>::iterator>((uint64_t)&v46, &v44, (uint64_t)&v42);
          v26 = __X;
          v24 = v38;
          v27 = v39 * v25;
        }
        v28 = v26[v27];
        if (v28 == 0.0)
          v29 = 1.0;
        else
          v29 = 1.0 / v28;
        cblas_sscal(v24, v29, v26, 1);
        if ((v13 & 0x80000000) != 0)
        {
          v14 = 3.4028e38;
        }
        else
        {
          v30 = *a2;
          v14 = 3.4028e38;
          v31 = v13;
          do
          {
            v32 = *(float *)(v30 + 8 * v31);
            if (v32 >= v14)
              break;
            v33 = v32 + (float)(__X[v39 * v31] * a6);
            if (v33 < v14)
            {
              v14 = v33;
              LOWORD(v13) = v31;
            }
            v34 = *(__int16 *)(v30 + 8 * v31 + 6);
            v31 = *(unsigned __int16 *)(v30 + 8 * v31 + 6);
          }
          while ((v34 & 0x80000000) == 0);
        }
        SLML::Storage<float>::RemoveReference(v40);
      }
      else
      {
        v14 = 3.4028e38;
        if ((v13 & 0x80000000) == 0)
        {
          v15 = *((_DWORD *)a2 + 8);
          do
          {
            v16 = *a2;
            v17 = *(float *)(*a2 + 8 * v15);
            if (v17 >= v14)
              break;
            v18 = v15;
            MEOWDistance(*(_QWORD *)a3 + 60 * v15, v12);
            v20 = v17 + (float)(v19 * a6);
            if (v20 < v14)
            {
              v14 = v20;
              LOWORD(v13) = v18;
            }
            v15 = *(unsigned __int16 *)(v16 + 8 * v18 + 6);
          }
          while ((*(__int16 *)(v16 + 8 * v18 + 6) & 0x80000000) == 0);
        }
      }
      v35 = *(_QWORD *)a1 + 8 * v11;
      *(float *)v35 = v14 + *(float *)(*((_QWORD *)a5 + 2) + 4 * a5[1] * (int)v11);
      *(_WORD *)(v35 + 4) = v13;
      ++v11;
    }
    while (v11 < *a5);
  }
  MEOWPath::SortNodes((uint64_t *)a1);
  return a1;
}

void sub_1D228716C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void **v12;

  SLML::Storage<float>::RemoveReference(a12);
  MEOWVectorBase::~MEOWVectorBase(v12);
  _Unwind_Resume(a1);
}

uint64_t *MEOWPath::Force(uint64_t *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _WORD *v5;
  uint64_t v6;
  __int16 v7;

  v2 = this[2];
  if ((int)v2 > a2)
  {
    *((_DWORD *)this + 8) = a2;
    v3 = *this;
    v4 = *this + 8 * a2;
    *(_WORD *)(v4 + 6) = -1;
    v5 = (_WORD *)(v4 + 6);
    if ((int)v2 >= 1)
    {
      v6 = 0;
      v7 = -1;
      do
      {
        if (a2 != v6)
        {
          *(_DWORD *)v3 = 2139095040;
          *(_WORD *)(v3 + 6) = v7;
          v7 = v6;
          *v5 = v6;
        }
        ++v6;
        v3 += 8;
      }
      while (v2 != v6);
    }
  }
  return this;
}

uint64_t *MEOWPath::Veto(uint64_t *this, int a2)
{
  if (*((_DWORD *)this + 4) > a2)
  {
    *(_DWORD *)(*this + 8 * a2) = 2139095040;
    return MEOWPath::SortNodes(this);
  }
  return this;
}

uint64_t std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,SLML::Vector<float>::iterator>(uint64_t result, float **a2, uint64_t a3)
{
  float **v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float *v11;
  int v12;
  uint64_t v13;
  float v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  uint64_t v21;
  BOOL v22;
  float *v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  float *v27;
  float v28;
  uint64_t v29;
  float *v30;
  uint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  float *v37;
  float v38;
  float *v39;
  int v40;
  float *v41;
  int v42;
  float *v43;
  int v44;
  uint64_t v45;
  int v46;
  float *v47;
  int v48;
  float *v49;
  int v50;
  float *v51;
  int v52;
  float *v53;
  int v54;

  if (*a2 != *(float **)a3)
  {
    v5 = (float **)result;
    do
    {
      result = SLML::operator-(a3, (uint64_t)v5);
      if ((unint64_t)result < 2)
        break;
      if (result == 3)
      {
        v34 = *((int *)v5 + 2);
        v53 = *v5;
        v54 = v34;
        v51 = &v53[v34];
        v52 = v34;
        v35 = *(int *)(a3 + 8);
        v36 = (float *)(*(_QWORD *)a3 - 4 * v35);
        *(_QWORD *)a3 = v36;
        v49 = v36;
        v50 = v35;
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,SLML::Vector<float>::iterator>(&v53, &v51, &v49);
      }
      if (result == 2)
      {
        v37 = (float *)(*(_QWORD *)a3 - 4 * *(int *)(a3 + 8));
        *(_QWORD *)a3 = v37;
        v38 = **v5;
        if (*v37 < v38)
        {
          **v5 = *v37;
          *v37 = v38;
        }
        return result;
      }
      if (result <= 7)
      {
        v47 = *v5;
        v48 = *((_DWORD *)v5 + 2);
        v45 = *(_QWORD *)a3;
        v46 = *(_DWORD *)(a3 + 8);
        return std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,SLML::Vector<float>::iterator>((uint64_t)&v47, (uint64_t)&v45);
      }
      v6 = *((_DWORD *)v5 + 2);
      v7 = *(_QWORD *)a3;
      v8 = *(int *)(a3 + 8);
      v9 = &(*v5)[(int)(v6 * ((unint64_t)result >> 1))];
      v43 = *v5;
      v44 = v6;
      v41 = v9;
      v42 = v6;
      v10 = (float *)(v7 - 4 * v8);
      v39 = v10;
      v40 = v8;
      result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,SLML::Vector<float>::iterator>(&v43, &v41, &v39);
      v11 = *v5;
      v12 = *((_DWORD *)v5 + 2);
      v13 = v12;
      v14 = **v5;
      if (v14 < *v9)
      {
LABEL_11:
        v16 = &v11[v12];
        if (v16 < v10)
        {
          while (1)
          {
            v17 = *v9;
            while (1)
            {
              v18 = *v16;
              if (*v16 >= v17)
                break;
              v16 += v12;
            }
            do
              v10 -= v8;
            while (*v10 >= v17);
            if (v16 >= v10)
              break;
            *v16 = *v10;
            *v10 = v18;
            result = (result + 1);
            if (v9 == v16)
              v9 = v10;
            v16 += v12;
          }
        }
        if (v16 != v9)
        {
          v19 = *v16;
          if (*v9 < *v16)
          {
            *v16 = *v9;
            *v9 = v19;
            result = (result + 1);
          }
        }
        v20 = *a2;
        if (*a2 == v16)
          return result;
        if (!(_DWORD)result)
        {
          if (v20 >= v16)
          {
            v29 = v12;
            v30 = v16;
            while (&v30[v29] != *(float **)a3)
            {
              v22 = v30[v12] < *v30;
              v30 = (float *)((char *)v30 + v29 * 4);
              if (v22)
                goto LABEL_25;
            }
          }
          else
          {
            v21 = v12;
            while (&v11[v21] != v16)
            {
              v22 = v11[v12] < *v11;
              v11 = (float *)((char *)v11 + v21 * 4);
              if (v22)
                goto LABEL_25;
            }
          }
          return result;
        }
LABEL_25:
        if (v20 >= v16)
        {
          *v5 = &v16[v12];
        }
        else
        {
          *(_QWORD *)a3 = v16;
          *(_DWORD *)(a3 + 8) = v12;
        }
      }
      else
      {
        while (1)
        {
          v15 = (float *)(v7 - 8 * v8);
          if (v15 == v11)
            break;
          v7 -= 4 * v8;
          if (*v15 < *v9)
          {
            *v11 = *v15;
            *(float *)(v7 - 4 * v8) = v14;
            result = (result + 1);
            v10 = (float *)(v7 - 4 * v8);
            goto LABEL_11;
          }
        }
        v23 = &v11[v12];
        v24 = *(int *)(a3 + 8);
        v25 = (float *)(*(_QWORD *)a3 - 4 * v24);
        v26 = 4 * v13;
        if (v14 >= *v25)
        {
          if (v23 == v25)
            return result;
          v27 = *v5;
          while (1)
          {
            v28 = v27[v13];
            if (v14 < v28)
              break;
            v27 = (float *)((char *)v27 + v26);
            if (&v27[(unint64_t)v26 / 4] == v25)
              return result;
          }
          v27[v13] = *v25;
          *v25 = v28;
          v23 = &v27[2 * v13];
        }
        if (v23 == v25)
          return result;
        v31 = -4 * v24;
        while (1)
        {
          v32 = *v11;
          while (1)
          {
            v33 = *v23;
            if (v32 < *v23)
              break;
            v23 = (float *)((char *)v23 + v26);
          }
          do
            v25 = (float *)((char *)v25 + v31);
          while (v32 < *v25);
          if (v23 >= v25)
            break;
          *v23 = *v25;
          *v25 = v33;
          v23 += v13;
        }
        if (*a2 < v23)
          return result;
        *v5 = v23;
      }
    }
    while (*a2 != *(float **)a3);
  }
  return result;
}

uint64_t SLML::operator-(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a2 + 8);
  if (v2 != (_DWORD)v3)
    SLML::Fatal((SLML *)"%s %d != %d", (const char *)a2, "Stride", *(unsigned int *)(a1 + 8), v3);
  return ((uint64_t)(*(_QWORD *)a1 - *(_QWORD *)a2) >> 2) / v2;
}

void sub_1D228763C()
{
  JUMPOUT(0x1D22875F8);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,SLML::Vector<float>::iterator>(float **a1, float **a2, float **a3)
{
  float *v3;
  float *v4;
  float v5;
  float v6;
  float *v7;
  float v8;
  float v9;

  v3 = *a2;
  v4 = *a1;
  v5 = **a2;
  v6 = **a1;
  v7 = *a3;
  v8 = **a3;
  if (v5 < v6)
  {
    if (v8 < v5)
    {
      *v4 = v8;
      *v7 = v6;
      return 1;
    }
    *v4 = v5;
    *v3 = v6;
    if (*v7 >= v6)
      return 1;
    *v3 = *v7;
    *v7 = v6;
    return 2;
  }
  if (v8 < v5)
  {
    *v3 = v8;
    *v7 = v5;
    v9 = *v4;
    if (*v3 >= *v4)
      return 1;
    *v4 = *v3;
    *v3 = v9;
    return 2;
  }
  return 0;
}

uint64_t std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,SLML::Vector<float>::iterator>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  float *v3;
  uint64_t v4;
  uint64_t v5;
  float *v6;
  float *v7;
  float v9;
  float *v10;
  float v11;
  float *v12;
  float *v13;

  v2 = *(_QWORD *)a2 - 4 * *(int *)(a2 + 8);
  v3 = *(float **)result;
  if (*(_QWORD *)result != v2)
  {
    v4 = *(int *)(result + 8);
    v5 = 4 * v4;
    v6 = &v3[v4];
    do
    {
      v7 = &v3[v4];
      if (v3 != *(float **)a2 && v7 != *(float **)a2)
      {
        v9 = *v3;
        v10 = v6;
        v11 = *v3;
        v12 = *(float **)a2;
        v13 = v3;
        do
        {
          if (*v10 < v11)
          {
            v12 = *(float **)a2;
            v11 = *v10;
            v13 = v10;
          }
          v10 = (float *)((char *)v10 + v5);
        }
        while (v10 != v12);
        if (v13 != v3)
        {
          *v3 = *v13;
          *v13 = v9;
        }
      }
      *(_QWORD *)result = v7;
      v6 = (float *)((char *)v6 + v5);
      v3 += v4;
    }
    while (v7 != (float *)v2);
  }
  return result;
}

char *MEOWPhon::Name(MEOWPhon *this)
{
  char *v1;

  if (this <= 0x31)
    return MEOWPhon::sName[this];
  v1 = MEOWPhon::Name(unsigned char)::sBuf;
  sprintf(MEOWPhon::Name(unsigned char)::sBuf, "BOGUS[%02x]", (_DWORD)this);
  return v1;
}

_UNKNOWN **MEOWPhon::Match(MEOWPhon *this)
{
  return &sMatchers + this;
}

void MEOWVectorBase::MEOWVectorBase(MEOWVectorBase *this, __int16 a2)
{
  *(_QWORD *)this = 0;
  *((_WORD *)this + 4) = a2;
  *((_BYTE *)this + 10) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

{
  *(_QWORD *)this = 0;
  *((_WORD *)this + 4) = a2;
  *((_BYTE *)this + 10) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

void MEOWVectorBase::MEOWVectorBase(MEOWVectorBase *this, __int16 a2, unint64_t a3)
{
  *(_QWORD *)this = 0;
  *((_WORD *)this + 4) = a2;
  *((_BYTE *)this + 10) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (a3)
    MEOWVectorBase::Allocate(this, a3, 1);
  *((_QWORD *)this + 2) = a3;
}

{
  *(_QWORD *)this = 0;
  *((_WORD *)this + 4) = a2;
  *((_BYTE *)this + 10) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (a3)
    MEOWVectorBase::Allocate(this, a3, 1);
  *((_QWORD *)this + 2) = a3;
}

void MEOWVectorBase::MEOWVectorBase(MEOWVectorBase *this, const MEOWVectorBase *a2)
{
  unint64_t v4;

  *(_QWORD *)this = 0;
  *((_WORD *)this + 4) = *((_WORD *)a2 + 4);
  *((_BYTE *)this + 10) = 1;
  v4 = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 2) = v4;
  MEOWVectorBase::Allocate(this, v4, 1);
  memcpy(*(void **)this, *(const void **)a2, *((_QWORD *)this + 2) * *((unsigned __int16 *)this + 4));
}

{
  unint64_t v4;

  *(_QWORD *)this = 0;
  *((_WORD *)this + 4) = *((_WORD *)a2 + 4);
  *((_BYTE *)this + 10) = 1;
  v4 = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 2) = v4;
  MEOWVectorBase::Allocate(this, v4, 1);
  memcpy(*(void **)this, *(const void **)a2, *((_QWORD *)this + 2) * *((unsigned __int16 *)this + 4));
}

void *MEOWVectorBase::Allocate(MEOWVectorBase *this, unint64_t a2, char a3)
{
  unint64_t v4;
  unint64_t v5;
  void *v6;
  void *result;
  void *v8;

  v4 = 8;
  if (a2 >= 8)
    v4 = (3 * a2) >> 1;
  if ((a3 & 1) != 0)
    v5 = a2;
  else
    v5 = v4;
  if (*((_BYTE *)this + 10))
  {
    v6 = *(void **)this;
    *((_QWORD *)this + 3) = v5;
    result = malloc_type_realloc(v6, v5 * *((unsigned __int16 *)this + 4), 0x8BDF91E2uLL);
    v8 = result;
  }
  else
  {
    v8 = malloc_type_malloc(v5 * *((unsigned __int16 *)this + 4), 0x713CAB7AuLL);
    result = memcpy(v8, *(const void **)this, *((_QWORD *)this + 3) * *((unsigned __int16 *)this + 4));
    *((_BYTE *)this + 10) = 1;
    *((_QWORD *)this + 3) = v5;
  }
  *(_QWORD *)this = v8;
  return result;
}

void MEOWVectorBase::Map(void **this, void *a2, void *a3)
{
  if (*((_BYTE *)this + 10))
    free(*this);
  *this = a2;
  *((_BYTE *)this + 10) = 0;
  this[2] = a3;
  this[3] = a3;
}

void MEOWVectorBase::~MEOWVectorBase(void **this)
{
  if (*((_BYTE *)this + 10))
    free(*this);
}

{
  if (*((_BYTE *)this + 10))
    free(*this);
}

void *MEOWVectorBase::Append(MEOWVectorBase *this, const void *__src, uint64_t a3)
{
  uint64_t v6;
  void *result;

  v6 = *((_QWORD *)this + 2);
  if ((unint64_t)(v6 + a3) > *((_QWORD *)this + 3))
  {
    MEOWVectorBase::Allocate(this, v6 + a3, 0);
    v6 = *((_QWORD *)this + 2);
  }
  result = memcpy((void *)(*(_QWORD *)this + v6 * *((unsigned __int16 *)this + 4)), __src, *((unsigned __int16 *)this + 4) * a3);
  *((_QWORD *)this + 2) += a3;
  return result;
}

uint64_t *MEOWVectorBase::Swap(uint64_t *this, MEOWVectorBase *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_BYTE *)this + 10);
  *((_BYTE *)this + 10) = *((_BYTE *)a2 + 10);
  *((_BYTE *)a2 + 10) = v2;
  v3 = *this;
  *this = *(_QWORD *)a2;
  *(_QWORD *)a2 = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

void MEOWVectorBase::clear(void **this)
{
  if (*((_BYTE *)this + 10))
    free(*this);
  else
    *((_BYTE *)this + 10) = 1;
  *this = 0;
  this[2] = 0;
  this[3] = 0;
}

void MEOWReader::MEOWReader(MEOWReader *this, int a2, unsigned __int16 *a3, char a4)
{
  char *v5;
  MEOWSVDDistanceEncoder *MEOWSVDDistanceEncoder;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int16 *v11;
  char *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  MEOWSampleCache *v19;
  char *v20;
  MEOWSpectralCost *v21;
  unsigned int v22;
  _BOOL8 v23;

  v5 = (char *)this + 30536;
  *(_DWORD *)this = a2;
  *((_OWORD *)this + 1901) = 0u;
  *((_QWORD *)this + 3804) = a3;
  *((_BYTE *)this + 30536) = a4;
  *((_WORD *)this + 15269) = bswap32(a3[2]) >> 16;
  *((_WORD *)this + 15270) = bswap32(a3[3]) >> 16;
  *((_OWORD *)this + 1910) = 0u;
  ComputeSectionLengths((uint64_t)a3, (MEOWReader *)((char *)this + 30584));
  if (*v5)
  {
    if (*v5 == 1)
      MEOWReader::MEOWReader();
    MEOWSVDDistanceEncoder = 0;
  }
  else
  {
    MEOWSVDDistanceEncoder = CreateMEOWSVDDistanceEncoder();
  }
  *((_QWORD *)this + 1) = MEOWSVDDistanceEncoder;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  bzero((char *)this + 10416, 0x4E20uLL);
  v7 = (unsigned int *)*((_QWORD *)this + 3804);
  v8 = v7[5];
  *((_QWORD *)this + 3807) = (char *)v7 + bswap32(v7[4]);
  v9 = v7[6];
  *((_QWORD *)this + 3808) = (char *)v7 + bswap32(v7[7]);
  *((_QWORD *)this + 3809) = (char *)v7 + bswap32(v9);
  v10 = v7[3];
  v11 = (unsigned __int16 *)((char *)v7 + bswap32(v7[2]));
  *((_QWORD *)this + 3805) = v11;
  v12 = (char *)v7 + bswap32(v10);
  *((_QWORD *)this + 3806) = v12;
  *((_QWORD *)this + 3810) = (char *)v7 + bswap32(v8);
  *((_QWORD *)this + 3811) = (char *)v7 + bswap32(v7[8]);
  *((_OWORD *)this + 1907) = 0u;
  v13 = *((unsigned __int16 *)v5 + 1);
  if ((v13 > 1 || v13 == 1 && *((unsigned __int16 *)v5 + 2) >= 5u) && (v14 = v7[9]) != 0)
  {
    v15 = (unsigned __int8 *)v7 + bswap32(v14);
    *((_QWORD *)this + 3812) = v15;
    v16 = *v15;
    if (*v15)
    {
      *((_QWORD *)this + 3814) = v15;
      if (v13 >= 2)
      {
        if (v16 == 2)
        {
          v17 = *((_DWORD *)v15 + 8);
          if (v17)
            *((_QWORD *)this + 3815) = &v15[bswap32(v17)];
        }
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }
  else
  {
    *((_QWORD *)this + 3812) = 0;
  }
  if (v13 > 1)
  {
LABEL_19:
    *((_QWORD *)this + 3813) = (char *)v7 + bswap32(v7[10]);
    *((_QWORD *)this + 3829) = 0;
    *((_QWORD *)this + 3830) = v12 + 10000;
LABEL_20:
    v19 = (MEOWSampleCache *)operator new();
    MEOWSampleCache::MEOWSampleCache(v19, this, 0x80000uLL);
    *((_QWORD *)this + 3818) = v19;
    v11 = (unsigned __int16 *)*((_QWORD *)this + 3805);
    goto LABEL_26;
  }
  if (v13 != 1)
  {
    *((_QWORD *)this + 3813) = 0;
    v20 = v12 + 10000;
LABEL_24:
    *((_QWORD *)this + 3829) = v20;
    *((_QWORD *)this + 3830) = 0;
    goto LABEL_25;
  }
LABEL_18:
  v18 = *((unsigned __int16 *)v5 + 2);
  if (v18 > 5)
    goto LABEL_19;
  *((_QWORD *)this + 3813) = 0;
  v20 = v12 + 10000;
  if (v18 <= 1)
    goto LABEL_24;
  *((_QWORD *)this + 3829) = 0;
  *((_QWORD *)this + 3830) = v20;
  if (v18 != 2)
    goto LABEL_20;
LABEL_25:
  *((_QWORD *)this + 3818) = 0;
LABEL_26:
  while (*((_BYTE *)v11 + 2))
  {
    if (*((_BYTE *)v11 + 2) == 1)
      goto LABEL_30;
    v11 += 2 * (bswap32(*v11) >> 16);
  }
  v11 = 0;
LABEL_30:
  *((_QWORD *)this + 3816) = v11;
  if ((MTBEDebugFlags::sMEOWDebug & 0x1000) != 0)
  {
    v21 = (MEOWSpectralCost *)operator new();
    MEOWSpectralCost::MEOWSpectralCost(v21, this);
  }
  else
  {
    v21 = 0;
  }
  *((_QWORD *)this + 3819) = v21;
  v22 = *((unsigned __int16 *)v5 + 1);
  if (v22 <= 1)
    v23 = v22 == 1 && *((unsigned __int16 *)v5 + 2) > 5u;
  else
    v23 = 1;
  *((_QWORD *)this + 3822) = MEOWPPReaderFactory::Create((MEOWPPReaderFactory *)v23);
  MEOWReader::ComputeDemiListSize(this);
  v5[1] = *((unsigned __int16 *)v5 + 1) > 1u;
}

void sub_1D2287EDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A0C405167EBAELL);
  _Unwind_Resume(a1);
}

uint64_t ComputeSectionLengths@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  _DWORD *v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  *(_OWORD *)((char *)a2 + 28) = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  v2 = (_DWORD *)a2 + 2;
  v3 = *(unsigned __int16 *)(result + 4);
  if (__rev16(v3) > 1)
    goto LABEL_2;
  v4 = result + 36;
  if (v3 != 256)
    goto LABEL_7;
  v5 = *(unsigned __int16 *)(result + 6);
  if (__rev16(v5) < 5)
    goto LABEL_7;
  if (v5 == 1280)
    v4 = result + 40;
  else
LABEL_2:
    v4 = result + 44;
LABEL_7:
  v6 = (unsigned int *)(result + 8);
  do
  {
    v7 = bswap32(*v6);
    v8 = -1;
    v9 = (unsigned int *)(result + 8);
    do
    {
      v10 = *v9++;
      v11 = bswap32(v10);
      v12 = v11 - v7;
      if (v11 - v7 >= v8)
        v12 = v8;
      if (v11 > v7)
        v8 = v12;
    }
    while ((unint64_t)v9 < v4);
    ++v6;
    *v2++ = bswap32(v8);
  }
  while ((unint64_t)v6 < v4);
  return result;
}

unsigned __int16 *MEOWReader::GetGlobalParams(MEOWReader *this, int a2)
{
  unsigned __int16 *result;

  for (result = (unsigned __int16 *)*((_QWORD *)this + 3805);
        *((_BYTE *)result + 2);
        result += 2 * (bswap32(*result) >> 16))
  {
    if (*((unsigned __int8 *)result + 2) == a2)
      return result;
  }
  return 0;
}

void MEOWReader::ComputeDemiListSize(MEOWReader *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t i;
  unsigned int v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  int *v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  void *v21[4];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v21, 4, 0x9C5uLL);
  v2 = *((_QWORD *)this + 3806);
  v3 = -10000;
  v4 = (char *)v21[0];
  do
  {
    *(_DWORD *)&v4[v3 + 10000] = bswap32(*(_DWORD *)(v2 + v3 + 10000));
    v3 += 4;
  }
  while (v3);
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v5 = 0;
  v6 = (int *)v21[0];
  *((_DWORD *)v21[0] + 2500) = bswap32(*((_DWORD *)this + 7650));
  v7 = *((_QWORD *)this + 3806);
  do
  {
    for (i = 0; i != 50; ++i)
    {
      v9 = bswap32(*(_DWORD *)(v7 + 200 * v5 + 4 * i));
      v10 = v6;
      v11 = 2500;
      do
      {
        v12 = v11 >> 1;
        v13 = (unsigned int *)&v10[v11 >> 1];
        v15 = *v13;
        v14 = (int *)(v13 + 1);
        v11 += ~(v11 >> 1);
        if (v15 < v9)
          v10 = v14;
        else
          v11 = v12;
      }
      while (v11);
      v16 = *v10;
      v17 = v10[1];
      if (v17 == *v10)
      {
        v18 = *((_QWORD *)this + 3829);
        if (v18)
          v19 = *(unsigned __int8 *)(v18 + 50 * v5 + i);
        else
          v19 = bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 3830) + 100 * v5 + 2 * i)) >> 16;
        v16 = v10[1];
        if (v19)
        {
          v20 = v10 + 2;
          do
          {
            v16 = *(v20 - 1);
            v17 = *v20++;
          }
          while (v17 == v16);
        }
      }
      *((_DWORD *)this + 50 * v5 + i + 104) = v17 - v16;
    }
    ++v5;
  }
  while (v5 != 50);
  MEOWVectorBase::~MEOWVectorBase(v21);
}

void sub_1D228813C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MEOWReader::CountDiphones(MEOWReader *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 3829);
  if (v3)
    return *(unsigned __int8 *)(v3 + 50 * a2 + a3);
  else
    return bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 3830) + 100 * a2 + 2 * a3)) >> 16;
}

void MEOWReader::~MEOWReader(MEOWReader *this)
{
  FILE **v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void **v6;
  uint64_t i;
  uint64_t v8;
  MEOWSampleCache *v9;
  void **v10;
  uint64_t v11;

  close(*(_DWORD *)this);
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kTrackDecodingRatio))
  {
    v2 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Samples decoded: %lu used: %lu ratio: %5.2f%%\n", 0, *((_QWORD *)this + 3821), (float)((float)((float)*((unint64_t *)this + 3821) * 100.0) / 0.0));
    fprintf(*v2, "      requested: %lu used: %lu ratio: %5.2f%%\n", *((_QWORD *)this + 3820), *((_QWORD *)this + 3821), (float)((float)((float)*((unint64_t *)this + 3821) * 100.0) / (float)*((unint64_t *)this + 3820)));
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    MEOWVectorBase::~MEOWVectorBase((void **)(v3 + 192));
    MEOWTreeBase::~MEOWTreeBase((MEOWTreeBase *)(v3 + 136));
    MEOWVectorBase::~MEOWVectorBase((void **)(v3 + 104));
    SLML::Storage<float>::RemoveReference(*(_QWORD *)(v3 + 88));
    SLML::Storage<float>::RemoveReference(*(_QWORD *)(v3 + 64));
    SLML::Storage<float>::RemoveReference(*(_QWORD *)(v3 + 40));
    SLML::Storage<float>::RemoveReference(*(_QWORD *)(v3 + 16));
    MEMORY[0x1D8233BA8](v3, 0x10A0C40ED9C5895);
  }
  v4 = 0;
  v5 = (char *)this + 10416;
  do
  {
    v6 = (void **)*((_QWORD *)this + v4 + 2);
    if (v6)
    {
      MEOWVectorBase::~MEOWVectorBase(v6);
      MEMORY[0x1D8233BA8]();
    }
    for (i = 0; i != 400; i += 8)
    {
      v8 = *(_QWORD *)&v5[i];
      if (v8)
        MEMORY[0x1D8233B90](v8, 0x60C8044C4A2DFLL);
    }
    ++v4;
    v5 += 400;
  }
  while (v4 != 50);
  v9 = (MEOWSampleCache *)*((_QWORD *)this + 3818);
  if (v9)
  {
    MEOWSampleCache::~MEOWSampleCache(v9);
    MEMORY[0x1D8233BA8]();
  }
  v10 = (void **)*((_QWORD *)this + 3819);
  if (v10)
  {
    MEOWSpectralCost::~MEOWSpectralCost(v10);
    MEMORY[0x1D8233BA8]();
  }
  v11 = *((_QWORD *)this + 3822);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
}

uint64_t MEOWReader::MappedSize(MEOWReader *this, uint64_t a2)
{
  int v3;
  unsigned int v4;
  _BYTE __buf[4];
  unsigned __int16 v7;
  unsigned __int16 v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (int)this;
  if ((MEOWSampleCache::MapSamples((MEOWSampleCache *)this) & 1) == 0)
  {
    pread(v3, __buf, 0x2CuLL, 0);
    if (__rev16(v7) > 1 || v7 == 256 && bswap32(v8) >> 16 >= 6)
    {
      if (v10)
      {
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis))
          v4 = v9;
        else
          v4 = v10;
        return bswap32(v4);
      }
    }
  }
  return a2;
}

void MEOWReader::AdvisePreload(MEOWReader *this, __int128 *a2, unint64_t a3)
{
  int v5;
  __int128 v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  __int128 v23;
  _BYTE v24[28];

  v5 = (int)this;
  if (kPreloadVoice)
  {
    MTBEDebugParams::GetParam((const __CFString *)kPreloadVoice, (const __CFString *)&qword_1EFC76570, (uint64_t *)qword_1EFC76570);
    kPreloadVoice = 0;
  }
  if (qword_1EFC76570)
  {
    v6 = a2[1];
    v23 = *a2;
    *(_OWORD *)v24 = v6;
    *(_OWORD *)&v24[12] = *(__int128 *)((char *)a2 + 28);
    ComputeSectionLengths((uint64_t)&v23, &v17);
    if (kPreloadVoice)
    {
      MTBEDebugParams::GetParam((const __CFString *)kPreloadVoice, (const __CFString *)&qword_1EFC76570, (uint64_t *)qword_1EFC76570);
      kPreloadVoice = 0;
    }
    if (qword_1EFC76570 != 3)
    {
      if (qword_1EFC76570 == 2)
      {
        v15 = bswap32(HIDWORD(v23));
        v16 = bswap32(HIDWORD(v17));
        fcntl(v5, 44, &v15);
        v14[0] = bswap32(*(unsigned int *)&v24[12]);
        v14[1] = bswap32(v20);
        fcntl(v5, 44, v14);
        v13[0] = bswap32(*(unsigned int *)&v24[8]);
        v13[1] = bswap32(v19);
        fcntl(v5, 44, v13);
        v12[0] = bswap32(*(unsigned int *)&v24[4]);
        v12[1] = bswap32(v18);
        fcntl(v5, 44, v12);
        if (!v22)
          return;
        v11[0] = bswap32(*(unsigned int *)&v24[16]);
        v11[1] = bswap32(v21);
        v10 = v11;
        goto LABEL_18;
      }
      if (qword_1EFC76570 != 1)
        return;
      v15 = bswap32(*(unsigned int *)&v24[4]);
      v16 = 0;
      v7 = bswap32(v18);
LABEL_15:
      LODWORD(v16) = v7;
      v10 = &v15;
LABEL_18:
      fcntl(v5, 44, v10);
      return;
    }
    if (v22)
    {
      v8 = bswap32(*(unsigned int *)&v24[24]);
      v9 = v8 + bswap32(v22);
      if (!v8)
      {
LABEL_13:
        if (v9 >= a3)
          return;
        v15 = v9;
        v16 = 0;
        v7 = a3 - v9;
        goto LABEL_15;
      }
    }
    else
    {
      v8 = bswap32(*(unsigned int *)&v24[16]);
      v9 = bswap32(v21) + v8;
      if (!v8)
        goto LABEL_13;
    }
    v15 = 0;
    v16 = v8;
    fcntl(v5, 44, &v15);
    goto LABEL_13;
  }
}

uint64_t MEOWReader::MEOWAdvanceDemi(uint64_t a1, char **a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  result = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis);
  if ((result & 1) != 0)
  {
    result = (uint64_t)MEOWReader::HeapDemiForMappedDemi(a1, *a2, a3, a4, 1);
    if (a5)
    {
      LODWORD(v11) = 0;
      do
      {
        v12 = *(unsigned __int8 *)result;
        v11 = (v11 + v12);
        result += 4 * v12;
        --a5;
      }
      while (a5);
    }
    else
    {
      v11 = 0;
    }
    v13 = &(*a2)[4 * v11];
  }
  else
  {
    if (!a5)
      return result;
    v13 = *a2;
    do
    {
      v13 += 4 * *v13;
      --a5;
    }
    while (a5);
  }
  *a2 = v13;
  return result;
}

char *MEOWReader::HeapDemiForMappedDemi(uint64_t a1, char *a2, unsigned int a3, unsigned int a4, int a5)
{
  unsigned int v10;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t *v26;
  BOOL v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t **v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  _QWORD *v57;
  uint64_t v58;

  if (a5)
    pthread_mutex_lock(&sDemiCacheLock);
  if (a2)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    v10 = *(_DWORD *)(a1 + 200 * a3 + 4 * a4 + 416);
    v11 = *(_QWORD *)(a1 + 30456) + (int)bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 30448) + 200 * a3 + 4 * a4));
    a2 = (char *)v11;
  }
  v12 = *(uint64_t **)(a1 + 30416);
  if (!v12)
  {
    v14 = 0;
    v13 = 0;
    if (v10)
      goto LABEL_15;
    goto LABEL_17;
  }
  v13 = 0;
  v14 = 0;
  v15 = *(uint64_t **)(a1 + 30416);
  while (1)
  {
    v16 = v15[2];
    if (v16)
    {
      v17 = *((unsigned int *)v15 + 6);
      v18 = v17 + v16;
      if (v18 <= (unint64_t)a2 && (unint64_t)&a2[v10] < v18 + *((unsigned int *)v15 + 7))
        break;
    }
    if (v14 + v10 > 0x80000)
      ++v13;
    v14 += *((_DWORD *)v15 + 7);
    v15 = (uint64_t *)*v15;
    if (!v15)
    {
      if (v10)
      {
LABEL_15:
        v19 = 0;
        goto LABEL_52;
      }
LABEL_17:
      if (a4 | a3)
      {
        v11 = *(_QWORD *)(a1 + 30456) + (int)bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 30448) + 200 * a3 + 4 * a4));
        goto LABEL_37;
      }
      if (!v11)
      {
        v22 = 0;
        v23 = a1 + 10416;
        v24 = a1 + 416;
        while (1)
        {
          for (i = 0; i != 50; ++i)
          {
            v26 = *(unint64_t **)(v23 + 8 * i);
            if (v26)
            {
              v11 = *v26;
              v27 = *v26 && (unint64_t)a2 >= v11;
              if (v27 && *(unsigned int *)(v24 + 4 * i) + v11 > (unint64_t)a2)
              {
                a3 = v22;
                a4 = i;
                goto LABEL_37;
              }
            }
          }
          v23 += 400;
          v24 += 200;
          v27 = v22++ >= 0x31;
          if (v27)
          {
            v11 = 0;
            break;
          }
        }
      }
LABEL_37:
      v28 = *(_QWORD *)(a1 + 30632);
      if (v28)
      {
        v29 = a3;
        v30 = a4;
        v31 = v28 + 50 * a3;
        v32 = *(unsigned __int8 *)(v31 + a4);
        if (*(_BYTE *)(v31 + a4))
        {
LABEL_39:
          v33 = 0;
          v10 = 0;
          v19 = 0;
          v34 = *(_QWORD **)(a1 + 400 * v29 + 8 * v30 + 10416);
          v35 = (unint64_t)(2 * v32 + 31) >> 5;
          v36 = a1 + 200 * v29;
          v37 = v35 - 1;
          v38 = (unsigned int *)(v36 + 4 * v30 + 416);
          v39 = 8 * v35;
          while (1)
          {
            if (v39 - 8 == v33)
            {
              v40 = v34[v37];
              if ((unint64_t)a2 >= v40)
              {
                v41 = *v38 + *v34;
                v42 = v40 - v11;
                v43 = v41 - v40;
                if (v41 > (unint64_t)a2)
                {
                  v19 = v42;
                  v10 = v43;
                }
              }
            }
            else
            {
              v44 = v34[v33 / 8];
              if ((unint64_t)a2 >= v44)
              {
                v45 = v34[v33 / 8 + 1];
                if ((unint64_t)a2 < v45)
                {
                  v19 = v44 - v11;
                  v10 = v45 - v44;
                  if ((_DWORD)v45 != (_DWORD)v44)
                    goto LABEL_52;
LABEL_51:
                  puts("Help, attempting to read 0 bytes for a demi.");
                  v10 = 0;
LABEL_52:
                  if (v10 + v14 > 0x80000 && v13 != 0)
                  {
                    v48 = (uint64_t **)(a1 + 30424);
                    do
                    {
                      v49 = *v48;
                      if (*v48)
                      {
                        v51 = *v49;
                        v50 = (_QWORD *)v49[1];
                        if (v50)
                        {
                          *v50 = v51;
                          v51 = *v49;
                        }
                        else
                        {
                          *(_QWORD *)(a1 + 30416) = v51;
                        }
                        if (v51)
                          v52 = (_QWORD *)(v51 + 8);
                        else
                          v52 = (_QWORD *)(a1 + 30424);
                        *v52 = v50;
                      }
                      --v13;
                      free((void *)v49[4]);
                      MEMORY[0x1D8233BA8](v49, 0x10E0C40A8F1378CLL);
                    }
                    while (v13);
                  }
                  v53 = operator new();
                  *(_QWORD *)(v53 + 16) = v11;
                  *(_DWORD *)(v53 + 24) = v19;
                  *(_DWORD *)(v53 + 28) = v10;
                  v54 = malloc_type_malloc(v10, 0x11722D3uLL);
                  *(_QWORD *)(v53 + 32) = v54;
                  if (pread(*(_DWORD *)a1, v54, v10, v19 + (_DWORD)v11 - *(_DWORD *)(a1 + 30432)) == v10)
                  {
                    v55 = *(_QWORD *)(a1 + 30416);
                    if (v55)
                      *(_QWORD *)(v55 + 8) = v53;
                    *(_QWORD *)v53 = v55;
                    *(_QWORD *)(v53 + 8) = 0;
                    *(_QWORD *)(a1 + 30416) = v53;
                    a2 = &a2[-v11 - v19 + (_QWORD)v54];
                    if (!a5)
                      return a2;
                  }
                  else
                  {
                    fwrite("HELP, couldn't read demi directly from voice table file. Falling back to using mapped access.\n", 0x5EuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                    if (!a5)
                      return a2;
                  }
LABEL_72:
                  pthread_mutex_unlock(&sDemiCacheLock);
                  return a2;
                }
              }
            }
            v33 += 8;
            if (v39 == v33)
            {
              if (v10)
                goto LABEL_52;
              goto LABEL_51;
            }
          }
        }
      }
      else
      {
        v29 = a3;
        v30 = a4;
        v46 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 30640) + 100 * a3 + 2 * a4));
        v32 = HIWORD(v46);
        if (HIWORD(v46))
          goto LABEL_39;
      }
      v19 = 0;
      goto LABEL_51;
    }
  }
  if (v15 != v12)
  {
    v21 = (uint64_t *)*v15;
    v20 = (_QWORD *)v15[1];
    if (v20)
    {
      *v20 = v21;
      v21 = (uint64_t *)*v15;
    }
    else
    {
      *(_QWORD *)(a1 + 30416) = v21;
    }
    if (v21)
      v57 = v21 + 1;
    else
      v57 = (_QWORD *)(a1 + 30424);
    *v57 = v20;
    v58 = *(_QWORD *)(a1 + 30416);
    if (v58)
      *(_QWORD *)(v58 + 8) = v15;
    *v15 = v58;
    v15[1] = 0;
    *(_QWORD *)(a1 + 30416) = v15;
    v18 = v17 + v15[2];
  }
  a2 = &a2[v15[4] - v18];
  if (a5)
    goto LABEL_72;
  return a2;
}

char *MEOWReader::GetDemiRecord(MEOWReader *this, unsigned int a2, unsigned int a3, unint64_t a4, int a5)
{
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  char *v15;

  v10 = (char *)this + 400 * a2 + 8 * a3;
  v11 = *((_QWORD *)v10 + 1302);
  if (!v11)
  {
    v12 = (uint64_t *)(v10 + 10416);
    pthread_mutex_lock(&sDemiCacheLock);
    if (!*v12)
    {
      v13 = MEOWReader::ComputeDemiCache(this, a2, a3);
      __dmb(0xBu);
      *v12 = (uint64_t)v13;
    }
    pthread_mutex_unlock(&sDemiCacheLock);
    v11 = *v12;
  }
  v15 = *(char **)(v11 + ((a4 >> 1) & 0x3FFFFFFFFFFFFFF8));
  MEOWReader::MEOWAdvanceDemi((uint64_t)this, &v15, a2, a3, a5 & 0xFFFFFFE1 | (2 * (a4 & 0xF)));
  return v15;
}

_QWORD *MEOWReader::ComputeDemiCache(MEOWReader *this, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  int v10;
  unsigned __int8 *v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *__dst;
  unsigned int v26;

  v6 = *((_QWORD *)this + 3829);
  if (v6)
  {
    v7 = *(unsigned __int8 *)(v6 + 50 * a2 + a3);
    if (v7)
      goto LABEL_3;
    return 0;
  }
  v7 = bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 3830) + 100 * a2 + 2 * a3)) >> 16;
  if (!v7)
    return 0;
LABEL_3:
  v8 = (unint64_t)(2 * v7 + 31) >> 5;
  v9 = (_QWORD *)operator new[]();
  v10 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis);
  v11 = (unsigned __int8 *)(*((_QWORD *)this + 3807)
                          + (int)bswap32(*(_DWORD *)(*((_QWORD *)this + 3806) + 200 * a2 + 4 * a3)));
  if (v10)
  {
    v12 = MEOWReader::HeapDemiForMappedDemi((uint64_t)this, 0, a2, a3, 0);
    *v9 = v11;
    v13 = v8 - 1;
    if (v8 != 1)
    {
      v14 = v9;
      v15 = v12;
      do
      {
        v16 = 32;
        do
        {
          v15 += 4 * *v15;
          --v16;
        }
        while (v16);
        v14[1] = &v11[v15 - v12];
        ++v14;
        --v13;
      }
      while (v13);
    }
    return v9;
  }
  if (kPreloadDemis)
  {
    MTBEDebugParams::GetParam((const __CFString *)kPreloadDemis, (const __CFString *)&qword_1EFC765C0, (uint64_t *)qword_1EFC765C0);
    kPreloadDemis = 0;
  }
  if (qword_1EFC765C0 == 3)
  {
    posix_madvise(v11, *((unsigned int *)this + 50 * a2 + a3 + 104), 3);
  }
  else
  {
    if (qword_1EFC765C0 == 2)
    {
      v20 = (char *)this + 200 * a2 + 4 * a3;
      MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)&__dst, 1, *((unsigned int *)v20 + 104));
      pread(*(_DWORD *)this, __dst, *((unsigned int *)v20 + 104), ((_DWORD)v11 - *((_DWORD *)this + 7608)));
    }
    else
    {
      if (qword_1EFC765C0 == 1)
      {
        v17 = *((_DWORD *)this + 50 * a2 + a3 + 104);
        if (v17 > 0x4000)
        {
          v18 = &v11[-*((_QWORD *)this + 3804)];
          __dst = (void *)((v18 & 0xFFFFF000) + 0x4000);
          v26 = (v17 + (_DWORD)v18 - (_DWORD)__dst + 4095) & 0xFFFFF000;
          fcntl(*(_DWORD *)this, 44, &__dst);
          goto LABEL_23;
        }
      }
      v19 = (char *)this + 200 * a2 + 4 * a3;
      MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)&__dst, 1, *((unsigned int *)v19 + 104));
      memcpy(__dst, v11, *((unsigned int *)v19 + 104));
    }
    MEOWVectorBase::~MEOWVectorBase(&__dst);
  }
LABEL_23:
  *v9 = v11;
  v21 = v8 - 1;
  if (v8 != 1)
  {
    v22 = v9;
    do
    {
      v23 = 32;
      do
      {
        v11 += 4 * *v11;
        --v23;
      }
      while (v23);
      v22[1] = v11;
      ++v22;
      --v21;
    }
    while (v21);
  }
  return v9;
}

void sub_1D2288EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

double MEOWReader::GetDemi(uint64_t a1, char *a2, int a3, uint64_t a4)
{
  char v8;
  unsigned int v9;
  char v10;
  double result;
  _BYTE *v12;
  int v13;
  char *v14;
  unsigned int *v15;
  char v16;
  _WORD *v17;

  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis))
    a2 = MEOWReader::HeapDemiForMappedDemi(a1, a2, 0, 0, 1);
  if ((a2[1] & 0x3F) == 2)
  {
    a2 = (char *)(*(_QWORD *)(a1 + 30456) + (int)bswap32(*((_DWORD *)a2 + 1)));
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis))
      a2 = MEOWReader::HeapDemiForMappedDemi(a1, a2, 0, 0, 1);
  }
  *(_BYTE *)(a4 + 67) = -1;
  *(_WORD *)(a4 + 68) = -1;
  *(_WORD *)(a4 + 65) = 0;
  v8 = a2[1];
  v9 = v8 & 0x3F;
  *(_BYTE *)(a4 + 64) = v8 & 0x3F;
  switch(v8 & 0x3F)
  {
    case 0:
      goto LABEL_9;
    case 1:
    case 3:
      v10 = 0;
      *(_QWORD *)(a4 + 24) = bswap32(*((unsigned __int16 *)a2 + 3)) >> 16;
      goto LABEL_16;
    case 4:
    case 5:
      goto LABEL_15;
    case 6:
      *(_WORD *)(a4 + 68) = bswap32(*((unsigned __int16 *)a2 + 21)) >> 16;
      *(_BYTE *)(a4 + 67) = a2[41];
      if ((a3 & 1) != 0)
        goto LABEL_15;
      v12 = a2 + 40;
      break;
    case 7:
      *(_WORD *)(a4 + 68) = bswap32(*((unsigned __int16 *)a2 + 5)) >> 16;
      *(_BYTE *)(a4 + 67) = a2[9];
      if ((a3 & 1) != 0)
        goto LABEL_15;
      v12 = a2 + 8;
      break;
    case 8:
      result = 0.0;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_BYTE *)(a4 + 65) = 0x80;
      return result;
    default:
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "MEOW: Bad Demi Format %d @ %08x\n", v9, (_DWORD)a2 - *(_DWORD *)(a1 + 30432));
LABEL_9:
      result = 0.0;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      return result;
  }
  *(_BYTE *)(a4 + 65) = *v12;
LABEL_15:
  *(_QWORD *)(a4 + 24) = a2[6];
  v10 = a2[7];
LABEL_16:
  *(_BYTE *)(a4 + 66) = v10;
  if (v9 <= 7)
  {
    v13 = 1 << v9;
    if ((v13 & 0x68) != 0)
    {
      v14 = a2 + 8;
      goto LABEL_21;
    }
    if ((v13 & 0x92) != 0)
    {
      v14 = 0;
LABEL_21:
      *(_QWORD *)(a4 + 56) = v14;
    }
  }
  v15 = (unsigned int *)(***(uint64_t (****)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 30576))(*(_QWORD *)(a1 + 30576), a1, (bswap32(*((unsigned __int16 *)a2 + 1)) >> 16) & 0xFFFCFFFF | ((((v8 & 0xC0) >> 6) & 3) << 16), a2[4]);
  (*(void (**)(unsigned int *, _QWORD))(*(_QWORD *)v15 + 24))(v15, a2[5]);
  *(_DWORD *)a4 = (bswap32(*((unsigned __int16 *)a2 + 1)) >> 16) & 0xFFFCFFFF | ((((a2[1] & 0xC0) >> 6) & 3) << 16);
  *(_WORD *)(a4 + 4) = a2[4];
  *(_WORD *)(a4 + 6) = a2[5];
  *(_QWORD *)(a4 + 40) = v15[4];
  *(_BYTE *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 88) = 0;
  if (a3)
  {
    *(_QWORD *)(a4 + 16) = 0;
    (*(void (**)(unsigned int *, _QWORD, uint64_t))(*(_QWORD *)v15 + 32))(v15, *(unsigned int *)(a4 + 24), a4 + 72);
    *(_DWORD *)(a4 + 44) = v15[4] - *(_DWORD *)(a4 + 40);
    *(_DWORD *)(a4 + 48) = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v15 + 64))(v15)
                         - *(_DWORD *)(a1 + 30432);
    v16 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v15 + 56))(v15, a4 + 72);
    v17 = *(_WORD **)(a4 + 72);
  }
  else
  {
    *(_DWORD *)(a4 + 48) = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v15 + 64))(v15)
                         - *(_DWORD *)(a1 + 30432);
    *(_BYTE *)(a4 + 8) = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v15 + 48))(v15, a4 + 72);
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a4 + 88);
    (*(void (**)(unsigned int *, _QWORD, uint64_t))(*(_QWORD *)v15 + 32))(v15, *(unsigned int *)(a4 + 24), a4 + 72);
    *(_DWORD *)(a4 + 44) = v15[4] - *(_DWORD *)(a4 + 40);
    v17 = *(_WORD **)(a4 + 72);
    if (*(_BYTE *)(a4 + 8))
      v16 = ((v17[5] | v17[4] | v17[3]) & 0x8000u) == 0;
    else
      v16 = 0;
  }
  *(_BYTE *)(a4 + 8) = v16;
  *(_QWORD *)(a4 + 32) = v17;
  (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
  return result;
}

double MEOWReader::GetDemiCookie(uint64_t a1, char *a2, int a3, int a4, uint64_t a5)
{
  double result;
  int v11;
  uint64_t v12;
  uint64_t v13;

  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis))
    a2 = MEOWReader::HeapDemiForMappedDemi(a1, a2, 0, 0, 1);
  if ((a2[1] & 0x3F) == 2)
  {
    a2 = (char *)(*(_QWORD *)(a1 + 30456) + (int)bswap32(*((_DWORD *)a2 + 1)));
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis))
      a2 = MEOWReader::HeapDemiForMappedDemi(a1, a2, 0, 0, 1);
  }
  *(_WORD *)(a5 + 52) = 255;
  v11 = a2[1] & 0x3F;
  switch(a2[1] & 0x3F)
  {
    case 3:
      v12 = bswap32(*((unsigned __int16 *)a2 + 3)) >> 16;
      goto LABEL_15;
    case 5:
      goto LABEL_14;
    case 6:
      *(_BYTE *)(a5 + 52) = a2[41];
      if ((a3 & 1) == 0 && a2[40] < 0)
        goto LABEL_13;
      goto LABEL_14;
    case 7:
      *(_BYTE *)(a5 + 52) = a2[9];
      if ((a3 & 1) != 0 || (a2[8] & 0x80000000) == 0)
        goto LABEL_14;
LABEL_13:
      *(_BYTE *)(a5 + 53) = 1;
      if (a4)
      {
LABEL_14:
        v12 = a2[6];
LABEL_15:
        MEOWSVDDistanceEncoder::UnpackCookie((unsigned __int16 *)a2 + 4, (float *)a5);
        v13 = (***(uint64_t (****)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 30576))(*(_QWORD *)(a1 + 30576), a1, (bswap32(*((unsigned __int16 *)a2 + 1)) >> 16) & 0xFFFCFFFF | ((((a2[1] & 0xC0) >> 6) & 3) << 16), a2[4]);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, a2[5]);
        if (a3)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v12);
        *(_DWORD *)(a5 + 56) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 64))(v13)
                             - *(_DWORD *)(a1 + 30432);
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
      break;
    case 8:
      *(_BYTE *)(a5 + 53) = 1;
      if (a4)
        goto LABEL_19;
      return result;
    default:
LABEL_19:
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "MEOW: Bad Demi Format %d @ %08x\n", v11, (_DWORD)a2 - *(_DWORD *)(a1 + 30432));
      result = 0.0;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
      *(_OWORD *)(a5 + 32) = 0u;
      *(_OWORD *)(a5 + 44) = 0u;
      break;
  }
  return result;
}

uint64_t MEOWReader::IsWordOnly(uint64_t a1, char *a2)
{
  int v4;
  int v5;

  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis))
    a2 = MEOWReader::HeapDemiForMappedDemi(a1, a2, 0, 0, 1);
  if ((a2[1] & 0x3F) == 2)
  {
    a2 = (char *)(*(_QWORD *)(a1 + 30456) + (int)bswap32(*((_DWORD *)a2 + 1)));
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis))
      a2 = MEOWReader::HeapDemiForMappedDemi(a1, a2, 0, 0, 1);
  }
  v4 = a2[1] & 0x3F;
  switch(v4)
  {
    case 6:
      v5 = a2[40];
      return v5 < 0;
    case 8:
      return 1;
    case 7:
      v5 = a2[8];
      return v5 < 0;
  }
  return 0;
}

uint64_t MEOWReader::GetAdjacent(uint64_t a1, uint64_t a2, _BYTE *a3, char *a4)
{
  uint64_t result;
  int v9;
  char v10;

  result = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis);
  if ((_DWORD)result)
  {
    result = (uint64_t)MEOWReader::HeapDemiForMappedDemi(a1, (char *)a2, 0, 0, 1);
    a2 = result;
  }
  if ((*(_BYTE *)(a2 + 1) & 0x3F) == 2)
  {
    a2 = *(_QWORD *)(a1 + 30456) + (int)bswap32(*(_DWORD *)(a2 + 4));
    result = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis);
    if ((_DWORD)result)
    {
      result = (uint64_t)MEOWReader::HeapDemiForMappedDemi(a1, (char *)a2, 0, 0, 1);
      a2 = result;
    }
  }
  *a3 = -1;
  *a4 = 0;
  v9 = *(_BYTE *)(a2 + 1) & 0x3F;
  if ((*(_BYTE *)(a2 + 1) & 0x3F) != 0)
  {
    if (v9 == 6)
    {
      *a3 = *(_BYTE *)(a2 + 41);
      v10 = *(_BYTE *)(a2 + 40);
    }
    else
    {
      if (v9 != 7)
        return result;
      *a3 = *(_BYTE *)(a2 + 9);
      v10 = *(_BYTE *)(a2 + 8);
    }
  }
  else
  {
    v10 = 2;
  }
  *a4 = v10;
  return result;
}

void MEOWReader::PrefetchDemi(MEOWReader *this, unsigned int a2, unsigned int a3, unint64_t a4, int a5)
{
  char *DemiRecord;
  unsigned int v11[18];
  void *v12[4];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v12, 2);
  DemiRecord = MEOWReader::GetDemiRecord(this, a2, a3, a4, a5);
  MEOWReader::GetDemi((uint64_t)this, DemiRecord, a5, (uint64_t)v11);
  MEOWReader::PrefetchSamples(this, v11[0], v11[10], v11[11]);
  MEOWVectorBase::~MEOWVectorBase(v12);
}

void sub_1D22896FC(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

MEOWReader *MEOWReader::PrefetchSamples(MEOWReader *this, int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  MEOWReader *v5;
  unsigned __int16 *v6;
  unsigned int v7;
  unsigned __int16 *v8;
  int v9;
  unsigned __int16 *v10;
  const unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v4 = a4;
  v5 = this;
  v6 = (unsigned __int16 *)(*((_QWORD *)this + 3811) + (int)bswap32(*(_DWORD *)(*((_QWORD *)this + 3808) + 12 * a2)));
  v7 = *((unsigned __int16 *)this + 15269);
  if (v7 < 2)
  {
    if (v7 != 1)
      return (MEOWReader *)Prefetch((const unsigned __int8 *)&v6[a3], v6 + 2 * a3 - *((_DWORD *)this + 7608), a4);
    v16 = *((unsigned __int16 *)this + 15270);
    if (v16 < 3)
      return (MEOWReader *)Prefetch((const unsigned __int8 *)&v6[a3], v6 + 2 * a3 - *((_DWORD *)this + 7608), a4);
    v8 = v6 + 1;
    v9 = (int)bswap32(*v6) >> 16;
    if (v16 <= 4)
    {
      v10 = 0;
      v11 = (const unsigned __int8 *)&v8[3 * v9];
      if (!v9)
        return this;
      while (1)
      {
LABEL_4:
        if (v10)
        {
          v12 = bswap32(*((_DWORD *)v10 + 2));
          if (a3 < v12)
            goto LABEL_17;
          v13 = bswap32(*((_DWORD *)v10 + 1));
          v10 += 6;
        }
        else
        {
          v14 = bswap32(v8[2]);
          if (a3 < HIWORD(v14))
          {
LABEL_17:
            if (a4)
            {
              v17 = 1;
              do
              {
                if (v10)
                {
                  v18 = bswap32(*((_DWORD *)v10 + 2)) - a3;
                  v19 = v4 >= v18;
                  v20 = v4 - v18;
                  if (v19)
                    v4 = v20;
                  else
                    v4 = 0;
                  this = (MEOWReader *)Prefetch(v11, ((_DWORD)v11 - *((_DWORD *)v5 + 7608)), bswap32(*((_DWORD *)v10 + 1)));
                  v21 = bswap32(*((_DWORD *)v10 + 1));
                  v10 += 6;
                }
                else
                {
                  v22 = (bswap32(v8[2]) >> 16) - a3;
                  v19 = v4 >= v22;
                  v23 = v4 - v22;
                  if (v19)
                    v4 = v23;
                  else
                    v4 = 0;
                  this = (MEOWReader *)Prefetch(v11, ((_DWORD)v11 - *((_DWORD *)v5 + 7608)), bswap32(*v8) >> 16);
                  v24 = *v8;
                  v8 += 3;
                  v21 = bswap32(v24) >> 16;
                }
                if (v9 == v17)
                  break;
                a3 = 0;
                v11 += v21;
                ++v17;
              }
              while (v4);
            }
            return this;
          }
          v10 = 0;
          v12 = HIWORD(v14);
          v15 = *v8;
          v8 += 3;
          v13 = bswap32(v15) >> 16;
        }
        a3 -= v12;
        v11 += v13;
        if (!--v9)
          return this;
      }
    }
  }
  else
  {
    v8 = v6 + 1;
    v9 = (int)bswap32(*v6) >> 16;
  }
  v10 = v8;
  v11 = (const unsigned __int8 *)&v6[6 * v9 + 1];
  v8 = 0;
  if (v9)
    goto LABEL_4;
  return this;
}

uint64_t Prefetch(const unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v5;

  if ((MTBEDebugFlags::sMEOWDebug & 1) != 0)
    result = fprintf((FILE *)*MEMORY[0x1E0C80C10], "Prefetch %lu@%08lx\n", (unint64_t)(a3 + 4095) >> 12, a2);
  if (a3)
  {
    v5 = a3 + 2048;
    do
      v5 -= 2048;
    while (v5 > 0x800);
  }
  return result;
}

uint64_t MEOWReader::ReadSamples(MEOWReader *this, int a2, uint64_t a3, unsigned int a4, __int16 *a5, unint64_t *a6, unint64_t *a7)
{
  unsigned int v9;
  unsigned __int16 *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  unsigned __int16 *v18;
  unsigned int v19;
  char *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int16 *v25;
  unsigned int v26;
  unint64_t *v27;
  unsigned __int16 *v28;
  unsigned int v29;
  unsigned int v30;
  __int16 v31;
  int v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  void *v45;
  unsigned int v46;
  int v47;
  unsigned __int16 *v48;
  uint64_t v49;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  void *v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned __int16 *v66;

  v9 = a4;
  v13 = (unsigned __int16 *)((char *)this + 30538);
  v14 = *(_DWORD *)(*((_QWORD *)this + 3808) + 12 * a2);
  v15 = *((_QWORD *)this + 3811);
  *((_QWORD *)this + 3821) += a4;
  pthread_mutex_lock(&sSampleCacheLock);
  v16 = *v13;
  v17 = v16 == 1;
  if (v16 > 1)
    goto LABEL_2;
  v25 = (unsigned __int16 *)(v15 + (int)bswap32(v14));
  if (!v17 || (v26 = v13[1], v26 < 3))
  {
    v40 = v9;
    v47 = *((_DWORD *)this + 7608);
    v48 = &v25[a3];
    *a6 = ((_DWORD)v48 - v47);
    *a7 = v48 + 2 * v9 - v47;
    if (v9)
    {
      v49 = 0;
      do
      {
        a5[v49] = bswap32(v48[v49]) >> 16;
        ++v49;
      }
      while (v9 != (_DWORD)v49);
    }
    else
    {
      v40 = 0;
    }
    goto LABEL_45;
  }
  if (v26 >= 6)
  {
LABEL_2:
    v18 = (unsigned __int16 *)(*((_QWORD *)this + 3811) + (int)bswap32(*(_DWORD *)(*((_QWORD *)this + 3808) + 12 * a2)));
    v19 = __rev16(*v18);
    v20 = (char *)(*((_QWORD *)this + 3813) + bswap32(*((_DWORD *)v18 + 1)));
    v66 = v18;
    v21 = (unsigned int *)(v18 + 4);
    if (*v18)
    {
      while (1)
      {
        v22 = bswap32(v21[1]);
        v23 = a3 - v22;
        if (a3 < v22)
          break;
        v24 = *v21;
        v21 += 2;
        v20 += bswap32(v24);
        a3 = a3 - v22;
        if (!--v19)
          goto LABEL_28;
      }
    }
    v23 = a3;
LABEL_28:
    v40 = 0;
    *a6 = v23 | ((unint64_t)((_DWORD)v21 - *((_DWORD *)this + 7608)) << 32);
    if (v19 && v9)
    {
      LODWORD(v40) = 0;
      do
      {
        v41 = *v21;
        v42 = bswap32(v21[1]);
        v43 = v42 - v23;
        if ((int)v42 - (int)v23 >= v9)
          v44 = v9;
        else
          v44 = v42 - v23;
        *((_QWORD *)this + 3820) += v42;
        v45 = MEOWSampleCache::Samples(*((MEOWSampleCache **)this + 3818), bswap32(v66[1]) >> 16, bswap32(v41), v42, v20, v23, v44);
        memcpy(a5, v45, 2 * v44);
        if (v9 <= v43)
        {
          *a7 = (v44 + v23) | ((unint64_t)((_DWORD)v21 - *((_DWORD *)this + 7608)) << 32);
        }
        else
        {
          v23 = 0;
          v46 = *v21;
          v21 += 2;
          v20 += bswap32(v46);
          --v19;
        }
        v40 = v44 + v40;
        if (!v19)
          break;
        a5 += v44;
        v9 -= v44;
      }
      while (v9);
    }
  }
  else
  {
    v27 = a6;
    v30 = *v25;
    v28 = v25 + 1;
    v29 = v30;
    v31 = __rev16(v30);
    v32 = (int)bswap32(v30) >> 16;
    if (v26 == 5)
      v33 = v28;
    else
      v33 = 0;
    if (v26 == 5)
      v34 = 0;
    else
      v34 = v28;
    if (v26 == 5)
      v35 = &v33[6 * v31];
    else
      v35 = &v34[3 * v31];
    if (!v29)
      goto LABEL_48;
    while (v33)
    {
      v36 = bswap32(*((_DWORD *)v33 + 2));
      if (a3 < v36)
      {
        v51 = (int)v33;
        goto LABEL_51;
      }
      v37 = bswap32(*((_DWORD *)v33 + 1));
      v33 += 6;
LABEL_25:
      a3 = a3 - v36;
      v35 = (unsigned __int16 *)((char *)v35 + v37);
      if (!--v32)
        goto LABEL_48;
    }
    v38 = bswap32(v34[2]);
    if (a3 >= HIWORD(v38))
    {
      v33 = 0;
      v36 = HIWORD(v38);
      v39 = *v34;
      v34 += 3;
      v37 = bswap32(v39) >> 16;
      goto LABEL_25;
    }
    v33 = 0;
LABEL_48:
    if (v33)
      v51 = (int)v33;
    else
      v51 = (int)v34;
LABEL_51:
    v40 = 0;
    *v27 = a3 | ((unint64_t)(v51 - *((_DWORD *)this + 7608)) << 32);
    if (v32 && v9)
    {
      LODWORD(v40) = 0;
      while (1)
      {
        if (v33)
        {
          v52 = *((_DWORD *)v33 + 1);
          v53 = bswap32(*((_DWORD *)v33 + 2));
          if ((int)v53 - (int)a3 >= v9)
            v54 = v9;
          else
            v54 = v53 - a3;
          *((_QWORD *)this + 3820) += v53;
          v55 = bswap32(*v33) >> 16;
          v56 = bswap32(v52);
        }
        else
        {
          v53 = bswap32(v34[2]) >> 16;
          if ((int)v53 - (int)a3 >= v9)
            v54 = v9;
          else
            v54 = v53 - a3;
          *((_QWORD *)this + 3820) += v53;
          v55 = bswap32(v34[1]) >> 16;
          v56 = bswap32(*v34) >> 16;
        }
        v57 = MEOWSampleCache::Samples(*((MEOWSampleCache **)this + 3818), v55, v56, v53, v35, a3, v54);
        memcpy(a5, v57, 2 * v54);
        v58 = v9 - v54;
        if (v9 == v54)
        {
          if (v33)
          {
            v59 = bswap32(*((_DWORD *)v33 + 2)) - a3;
            v60 = (int)v33;
            if (v59 != v9)
              goto LABEL_74;
            if ((__int16)*v33 != -1)
            {
              v60 = (int)v33;
              if (v59 == v9)
              {
                v60 = (int)v33;
                if ((__int16)*v33 == -1)
                {
                  v61 = (_DWORD)v33 + 12;
                  goto LABEL_84;
                }
              }
LABEL_74:
              v62 = (v9 + a3) | ((unint64_t)(v60 - *((_DWORD *)this + 7608)) << 32);
              goto LABEL_75;
            }
            goto LABEL_77;
          }
          if ((bswap32(v34[2]) >> 16) - (_DWORD)a3 != v9 || (__int16)v34[1] != -1)
          {
            v60 = (int)v34;
            if ((bswap32(v34[2]) >> 16) - (_DWORD)a3 != v9)
              goto LABEL_74;
            v60 = (int)v34;
            if ((__int16)v34[1] != -1)
              goto LABEL_74;
            v61 = (_DWORD)v34 + 6;
LABEL_84:
            v62 = (unint64_t)(v61 - *((_DWORD *)this + 7608)) << 32;
LABEL_75:
            *a7 = v62;
            goto LABEL_80;
          }
        }
        if (!v33)
        {
          v64 = *v34;
          v34 += 3;
          v63 = bswap32(v64) >> 16;
          goto LABEL_79;
        }
LABEL_77:
        v63 = bswap32(*((_DWORD *)v33 + 1));
        v33 += 6;
LABEL_79:
        a3 = 0;
        v35 = (unsigned __int16 *)((char *)v35 + v63);
        --v32;
LABEL_80:
        v40 = v54 + v40;
        if (v32)
        {
          a5 += v54;
          v9 -= v54;
          if (v58)
            continue;
        }
        break;
      }
    }
  }
LABEL_45:
  pthread_mutex_unlock(&sSampleCacheLock);
  return v40;
}

uint64_t MEOWReader::NoSkipDup(MEOWReader *this, unsigned int a2, unsigned int a3)
{
  return bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 3816) + 100 * a3 + 2 * a2 + 6)) >> 16;
}

BOOL MEOWReader::IsAlias(uint64_t a1, char *a2, _WORD *a3)
{
  int v6;

  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis))
    a2 = MEOWReader::HeapDemiForMappedDemi(a1, a2, 0, 0, 1);
  v6 = a2[1] & 0x3F;
  if (a3 && v6 == 2)
    *a3 = bswap32(*((unsigned __int16 *)a2 + 1)) >> 16;
  return v6 == 2;
}

void MEOWReader::GetDistanceCookies(uint64_t a1, unsigned int a2, unsigned int a3, int a4, MEOWVectorBase *a5, _QWORD *a6)
{
  _BYTE *v11;
  unsigned int v12;
  unsigned __int16 *i;
  unsigned int v14;
  float v15;
  float v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *DemiRecord;
  unint64_t j;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  _BYTE v40[48];
  int v41;
  uint64_t v42;
  void *v43[4];
  char *v44[2];

  v11 = (_BYTE *)(a1 + 30536);
  v12 = *(unsigned __int16 *)(a1 + 30538);
  if (v12 > 1 || (v16 = 1.0, v15 = 0.5, v12 == 1) && *(unsigned __int16 *)(a1 + 30540) >= 4u)
  {
    for (i = *(unsigned __int16 **)(a1 + 30440); *((_BYTE *)i + 2) != 1; i += 2 * (bswap32(*i) >> 16))
      ;
    v14 = a3;
    if (!a4)
      v14 = a2;
    v15 = COERCE_FLOAT(bswap32(*(_DWORD *)&i[4 * v14 + 106])) * 0.5;
    v16 = 1.0 / expf(COERCE_FLOAT(bswap32(*(_DWORD *)&i[4 * v14 + 104])));
  }
  v17 = (char)*v11;
  if (v17 == 3)
    goto LABEL_19;
  if (v17 == 2)
  {
    if (a4)
      v20 = 0x10000;
    else
      v20 = 0;
    srandom(a2 | (a3 << 8) | v20);
LABEL_19:
    v21 = *(_QWORD *)(a1 + 30632);
    if (v21)
      v22 = *(unsigned __int8 *)(v21 + 50 * a2 + a3);
    else
      v22 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 30640) + 100 * a2 + 2 * a3)) >> 16;
    v23 = v22;
    if (a6)
      v23 = a6[2];
    DemiRecord = MEOWReader::GetDemiRecord((MEOWReader *)a1, a2, a3, 0, a4);
    v44[0] = DemiRecord;
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v43, 2);
    MEOWReader::GetDemi(a1, DemiRecord, a4, (uint64_t)v40);
    if (*((_QWORD *)a5 + 3) < v22)
      MEOWVectorBase::Allocate(a5, v22, 1);
    *((_QWORD *)a5 + 2) = v22;
    if (v23)
    {
      for (j = 0; j != v23; ++j)
      {
        if (a6)
        {
          v26 = *(unsigned __int16 *)(*a6 + 2 * j);
          v27 = MEOWReader::GetDemiRecord((MEOWReader *)a1, a2, a3, v26, a4);
          MEOWReader::GetDemi(a1, v27, a4, (uint64_t)v40);
        }
        else if (j)
        {
          MEOWReader::MEOWAdvanceDemi(a1, v44, a2, a3, 1);
          MEOWReader::MEOWAdvanceDemi(a1, v44, a2, a3, 1);
          MEOWReader::GetDemi(a1, v44[0], a4, (uint64_t)v40);
          v26 = j;
        }
        else
        {
          v26 = 0;
        }
        v28 = *(_QWORD *)a5;
        *(_DWORD *)(*(_QWORD *)a5 + 60 * v26 + 56) = v41 | 0x40000000;
        if (*v11 == 2)
          *(float *)(*(_QWORD *)a5 + 60 * v26) = (float)random() * 1.0842e-19;
        else
          *(float *)(v28 + 60 * v26) = (float)(a4 ^ 1u);
      }
    }
    goto LABEL_52;
  }
  if (*v11)
    return;
  v18 = *(_QWORD *)(a1 + 30632);
  if (v18)
    v19 = *(unsigned __int8 *)(v18 + 50 * a2 + a3);
  else
    v19 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 30640) + 100 * a2 + 2 * a3)) >> 16;
  v29 = v19;
  if (a6)
    v29 = a6[2];
  if (!v29)
  {
    *((_QWORD *)a5 + 2) = 0;
    return;
  }
  v30 = MEOWReader::GetDemiRecord((MEOWReader *)a1, a2, a3, 0, a4);
  v44[0] = v30;
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v43, 2);
  v38 = v30;
  MEOWReader::GetDemi(a1, v30, a4, (uint64_t)v40);
  if (!v42)
  {
    fwrite("MacinTalk: Voice has no distance information!\n", 0x2EuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    abort();
  }
  if (*((_QWORD *)a5 + 3) < v19)
    MEOWVectorBase::Allocate(a5, v19, 1);
  v31 = 0;
  v32 = 0;
  *((_QWORD *)a5 + 2) = v19;
  do
  {
    v33 = v29;
    if (a6)
    {
      v34 = *(unsigned __int16 *)(*a6 + 2 * v32);
      v35 = *(_QWORD *)a5;
      v36 = MEOWReader::GetDemiRecord((MEOWReader *)a1, a2, a3, v34, a4);
      MEOWReader::GetDemiCookie(a1, v36, a4, 0, v35 + 60 * v34);
    }
    else
    {
      if (v32)
      {
        MEOWReader::MEOWAdvanceDemi(a1, v44, a2, a3, 1);
        MEOWReader::MEOWAdvanceDemi(a1, v44, a2, a3, 1);
        v38 = v44[0];
      }
      MEOWReader::GetDemiCookie(a1, v38, a4, 0, *(_QWORD *)a5 + v31);
      v34 = v32;
    }
    v37 = *(_QWORD *)a5 + 60 * v34;
    *(_DWORD *)(v37 + 56) |= 0x80000000;
    *(float *)(v37 + 44) = v16;
    *(float *)(v37 + 48) = v15;
    ++v32;
    v31 += 60;
    v29 = v33;
  }
  while (v33 != v32);
LABEL_52:
  MEOWVectorBase::~MEOWVectorBase(v43);
}

void sub_1D228A3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, MEOWVectorBase *a10)
{
  MEOWVectorBase::~MEOWVectorBase(a9);
  _Unwind_Resume(a1);
}

void MEOWReader::GetDistanceCookie(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, int a5, uint64_t a6)
{
  _BYTE *v12;
  unsigned int v13;
  unsigned __int16 *i;
  unsigned int v15;
  float v16;
  float v17;
  char *DemiRecord;
  int v19;
  int v20;
  int v21;
  float v22;
  _BYTE v23[48];
  int v24;
  unsigned __int16 *v25;
  unsigned __int8 v26;
  char v27;
  void *v28[4];

  v12 = (_BYTE *)(a1 + 30536);
  v13 = *(unsigned __int16 *)(a1 + 30538);
  if (v13 > 1 || (v17 = 1.0, v16 = 0.5, v13 == 1) && *(unsigned __int16 *)(a1 + 30540) >= 4u)
  {
    for (i = *(unsigned __int16 **)(a1 + 30440); *((_BYTE *)i + 2) != 1; i += 2 * (bswap32(*i) >> 16))
      ;
    if (a5)
      v15 = a3;
    else
      v15 = a2;
    v16 = COERCE_FLOAT(bswap32(*(_DWORD *)&i[4 * v15 + 106])) * 0.5;
    v17 = 1.0 / expf(COERCE_FLOAT(bswap32(*(_DWORD *)&i[4 * v15 + 104])));
  }
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v28, 2);
  DemiRecord = MEOWReader::GetDemiRecord((MEOWReader *)a1, a2, a3, a4, a5);
  MEOWReader::GetDemi(a1, DemiRecord, a5, (uint64_t)v23);
  v19 = (char)*v12;
  if (!*v12)
  {
    MEOWSVDDistanceEncoder::UnpackCookie(v25, (float *)a6);
    *(_BYTE *)(a6 + 52) = v27;
    *(_BYTE *)(a6 + 53) = v26 >> 7;
    *(_DWORD *)(a6 + 56) = v24 | 0x80000000;
    *(float *)(a6 + 44) = v17;
    *(float *)(a6 + 48) = v16;
    goto LABEL_24;
  }
  if (v19 == 2)
  {
    if (a5)
      v21 = 0x10000;
    else
      v21 = 0;
    srandom(a2 | (a3 << 8) | v21);
    v20 = *v12;
  }
  else
  {
    if (v19 != 3)
      goto LABEL_24;
    v20 = 3;
  }
  *(_DWORD *)(a6 + 56) = v24 | 0x40000000;
  if (v20 == 2)
    v22 = (float)random() * 1.0842e-19;
  else
    v22 = (float)(a5 ^ 1u);
  *(float *)a6 = v22;
LABEL_24:
  MEOWVectorBase::~MEOWVectorBase(v28);
}

void sub_1D228A5A4(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

char *MEOWReader::GetAdjacent(MEOWReader *this, unsigned int a2, unsigned int a3, int a4, MEOWVectorBase *a5, MEOWVectorBase *a6)
{
  uint64_t v11;
  unint64_t v12;
  char *result;
  char *v14;
  uint64_t v15;
  char *v16;

  v11 = *((_QWORD *)this + 3829);
  if (v11)
    v12 = *(unsigned __int8 *)(v11 + 50 * a2 + a3);
  else
    v12 = bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 3830) + 100 * a2 + 2 * a3)) >> 16;
  result = MEOWReader::GetDemiRecord(this, a2, a3, 0, a4);
  v14 = result;
  v16 = result;
  if (*((_QWORD *)a5 + 3) < v12)
    result = (char *)MEOWVectorBase::Allocate(a5, v12, 1);
  *((_QWORD *)a5 + 2) = v12;
  if (*((_QWORD *)a6 + 3) >= v12)
  {
    *((_QWORD *)a6 + 2) = v12;
    if (!v12)
      return result;
  }
  else
  {
    MEOWVectorBase::Allocate(a6, v12, 1);
    *((_QWORD *)a6 + 2) = v12;
  }
  v15 = 0;
  do
  {
    if (v15)
    {
      MEOWReader::MEOWAdvanceDemi((uint64_t)this, &v16, a2, a3, 1);
      MEOWReader::MEOWAdvanceDemi((uint64_t)this, &v16, a2, a3, 1);
      v14 = v16;
    }
    result = (char *)MEOWReader::GetAdjacent((uint64_t)this, (uint64_t)v14, (_BYTE *)(*(_QWORD *)a5 + v15), (char *)(*(_QWORD *)a6 + v15));
    ++v15;
  }
  while (v12 != v15);
  return result;
}

uint64_t MEOWReader::DescribeDemi(MEOWReader *a1, unsigned int a2, unsigned int a3, unint64_t a4, int a5, uint64_t a6, uint64_t a7, MEOWVectorBase *a8)
{
  char *DemiRecord;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int16 *v21;
  __int16 v22;
  uint64_t v23;

  DemiRecord = MEOWReader::GetDemiRecord(a1, a2, a3, a4, a5);
  MEOWReader::GetDemi((uint64_t)a1, DemiRecord, a5, a6);
  v17 = *(_QWORD *)(a6 + 24);
  if (v17)
  {
    if (a5)
    {
      v18 = v17 - 1;
      if (v17 != 1)
      {
        v19 = *(_DWORD *)(a6 + 40);
        v20 = 2 * v17 - 2;
        v21 = *(__int16 **)(a6 + 32);
        do
        {
          v22 = *v21++;
          v19 += v22 & 0x7FFF;
          --v18;
        }
        while (v18);
        *(_QWORD *)(a6 + 32) += v20;
        *(_DWORD *)(a6 + 40) = v19;
      }
      if (!*(_BYTE *)(a6 + 8))
      {
        *(_DWORD *)(a6 + 40) = *(_DWORD *)(a6 + 40) + (**(_WORD **)(a6 + 32) & 0x7FFF) - 110;
        return MEOWReader::GetVoicelessPPs(a1, (int *)a6, a7, a8);
      }
    }
    else
    {
      *(_QWORD *)(a6 + 32) += 2 * *(_QWORD *)(a6 + 16);
      if (!*(_BYTE *)(a6 + 8))
        return MEOWReader::GetVoicelessPPs(a1, (int *)a6, a7, a8);
    }
    return MEOWReader::GetVoicedPPs(a1, a6, a7, a8);
  }
  v23 = 60;
  if (a5)
    v23 = 62;
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "Empty demi %d%c%d#%lu\n", a2, v23, a3, a4);
}

uint64_t MEOWReader::GetVoicedPPs(MEOWReader *this, uint64_t a2, uint64_t a3, MEOWVectorBase *a4)
{
  uint16x4_t *v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t result;
  int v13;
  _BYTE *v14;
  uint64_t i;
  int v16;
  unint64_t v17;
  unint64_t v18;

  v8 = *(uint16x4_t **)(a2 + 32);
  v9 = v8[-1].u16[2] + v8[-1].u16[1] + v8[-1].u16[3];
  v10 = vaddvq_s32((int32x4_t)vmovl_u16(*v8));
  v11 = (v10 + v9);
  if (*((_QWORD *)a4 + 3) < v11)
  {
    MEOWVectorBase::Allocate(a4, (v10 + v9), 1);
    v9 = v8[-1].u16[1] + v8[-1].u16[2] + v8[-1].u16[3];
  }
  *((_QWORD *)a4 + 2) = v11;
  result = MEOWReader::ReadSamples(this, *(_DWORD *)a2, (*(_DWORD *)(a2 + 40) - v9), v11, *(__int16 **)a4, &v18, &v17);
  v13 = 0;
  v14 = (_BYTE *)(a3 + 8);
  for (i = 0x7FFFFFFFFFFFFFFDLL; i != 4; ++i)
  {
    *((_DWORD *)v14 - 2) = v13;
    *v14 = 0;
    v16 = v8->u16[i];
    *((_DWORD *)v14 - 1) = v16;
    v13 += v16;
    v14 += 12;
  }
  return result;
}

uint64_t MEOWReader::GetVoicelessPPs(MEOWReader *this, int *a2, uint64_t a3, MEOWVectorBase *a4)
{
  uint64_t result;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;

  if (*((_QWORD *)a4 + 3) <= 0x301uLL)
    MEOWVectorBase::Allocate(a4, 0x302uLL, 1);
  *((_QWORD *)a4 + 2) = 770;
  result = MEOWReader::ReadSamples(this, *a2, (a2[10] - 330), 0x302u, *(__int16 **)a4, &v12, &v11);
  v9 = 0;
  v10 = (_BYTE *)(a3 + 8);
  do
  {
    *((_DWORD *)v10 - 2) = v9;
    *((_DWORD *)v10 - 1) = 110;
    *v10 = 1;
    v10 += 12;
    v9 += 110;
  }
  while (v9 != 770);
  return result;
}

void MEOWReader::GetUnitCosts(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, int a6, int a7, char a8, char a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, _QWORD *a14)
{
  unint64_t v14;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  BOOL v23;
  char v24;
  BOOL v25;
  char v26;
  float *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  int v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v60;
  int v62;
  uint64_t v63;
  float *v64;
  int v65;
  _BYTE v66[16];
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  char v71;
  unsigned __int8 v72;
  void *v73[4];
  char *DemiRecord;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78[5];

  v14 = a4;
  if (a12)
    a14 = 0;
  MEOWUnitCostWindow::MEOWUnitCostWindow((MEOWUnitCostWindow *)v78, a5 + a4, 1, 0.0);
  v19 = *(_QWORD *)(a1 + 30632);
  if (!v19)
  {
    v20 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 30640) + 100 * a2 + 2 * a3)) >> 16;
    if (!a14)
      goto LABEL_7;
    goto LABEL_6;
  }
  v20 = *(unsigned __int8 *)(v19 + 50 * a2 + a3);
  if (a14)
LABEL_6:
    v20 = a14[2];
LABEL_7:
  SLML::Vector<float>::Vector((uint64_t)&v75, 0);
  if (a12)
    v21 = &v75;
  else
    v21 = 0;
  DemiRecord = MEOWReader::GetDemiRecord((MEOWReader *)a1, a2, a3, 0, 0);
  if (!v20)
    goto LABEL_64;
  v63 = 0;
  v62 = 0;
  if ((_DWORD)a2)
    v23 = v14 == 0;
  else
    v23 = 1;
  v24 = v23;
  v57 = v24;
  v53 = a2;
  if ((_DWORD)a3)
    v25 = a5 == 0;
  else
    v25 = 1;
  v26 = v25;
  v60 = v26;
  v55 = a3;
  v56 = a10 + 4 * v14;
  do
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v73, 2);
    if (a14)
    {
      v65 = *(unsigned __int16 *)(*a14 + 2 * v63);
      DemiRecord = MEOWReader::GetDemiRecord((MEOWReader *)a1, a2, a3, *(unsigned __int16 *)(*a14 + 2 * v63), 0);
      if (a13)
        goto LABEL_29;
    }
    else if (v63)
    {
      MEOWReader::MEOWAdvanceDemi(a1, &DemiRecord, a2, a3, 1);
      v65 = v63;
      if (a13)
        goto LABEL_29;
    }
    else
    {
      v65 = 0;
      if (a13)
      {
LABEL_29:
        v27 = (float *)(*(_QWORD *)(a13 + 16) + 4 * *(_DWORD *)(a13 + 4) * v65);
        goto LABEL_32;
      }
    }
    v27 = 0;
LABEL_32:
    MEOWReader::GetDemi(a1, DemiRecord, 0, (uint64_t)v66);
    v64 = v27;
    if (a12)
    {
      v28 = v21;
      v29 = a13;
      v30 = a1;
      v31 = a2;
      v32 = a3;
      v33 = v14;
      v34 = v20;
      v35 = a14;
      v36 = a12[2];
      v37 = a12[3];
      v38 = *(_QWORD *)((char *)a12 + 4);
      ++*(_DWORD *)(v36 + 4);
      if (v76 != v36)
      {
        SLML::Storage<float>::RemoveReference(v76);
        ++*(_DWORD *)(v36 + 4);
        v76 = v36;
      }
      v75 = v38;
      v77 = v37 + 4 * v65;
      SLML::Storage<float>::RemoveReference(v36);
      a14 = v35;
      v20 = v34;
      v14 = v33;
      a3 = v32;
      a2 = v31;
      a1 = v30;
      a13 = v29;
      v21 = v28;
      v27 = v64;
    }
    if ((_DWORD)a2 == 1)
    {
      v39 = MEOWComputeBreathCost((MEOWUnitWeightStrategy *)v70, v14, (uint64_t)v21, v27);
    }
    else
    {
      v39 = 0.0;
      if ((v57 & 1) == 0)
      {
        v40 = MEOWComputeUnitCost((MEOWUnitWeightStrategy *)v70, v68, v69 + 2 * v67, v14, a10, (uint64_t)v78[0], MEOWPhon::sVoiced[v53], (uint64_t)v21);
        MEOWComputeAccentCost(a6, v72, (uint64_t)v21);
        v39 = v40 + v41;
      }
    }
    v42 = *(_QWORD *)(a11 + 16);
    v43 = *(int *)(a11 + 4) * (uint64_t)v65;
    *(float *)(v42 + 4 * v43) = v39;
    v44 = 100000.0;
    if ((v71 & 0x80) == 0)
    {
      if (a5 && (v71 & 3) != 0 && v14 && (a8 & 1) == 0)
      {
        v44 = flt_1D22CF490[(v71 & 1) == 0];
      }
      else if (!v70 || (v71 & 3) != 0 || (v44 = 100000.0, (a8 & 1) == 0))
      {
        v45 = 1;
        if ((v71 & 1) == 0)
          goto LABEL_54;
        v44 = 200000.0;
        if (!a9)
          goto LABEL_54;
      }
    }
    *(float *)(v42 + 4 * v43) = v44 + *(float *)(v42 + 4 * v43);
    if (v64)
      *v64 = v44 + *v64;
    v45 = v62;
LABEL_54:
    MEOWReader::MEOWAdvanceDemi(a1, &DemiRecord, a2, a3, 1);
    MEOWReader::GetDemi(a1, DemiRecord, 1, (uint64_t)v66);
    v46 = 0.0;
    if ((v60 & 1) == 0)
    {
      v47 = MEOWComputeUnitCost((MEOWUnitWeightStrategy *)v70, v68, v69 + 2 * v67, a5, v56, (uint64_t)v78[0] + 4 * v14, MEOWPhon::sVoiced[v55], (uint64_t)v21);
      MEOWComputeAccentCost(a7, v72, (uint64_t)v21);
      v46 = v47 + v48;
    }
    *(float *)(*(_QWORD *)(a11 + 16) + 4 * *(_DWORD *)(a11 + 4) * v65) = v46
                                                                         + *(float *)(*(_QWORD *)(a11 + 16)
                                                                                    + 4 * *(_DWORD *)(a11 + 4) * v65);
    MEOWVectorBase::~MEOWVectorBase(v73);
    v62 = v45;
    ++v63;
  }
  while (v20 != v63);
  if ((v45 & 1) == 0)
  {
    v49 = 0;
    v50 = *(_QWORD *)(a11 + 16);
    v51 = *(_DWORD *)(a11 + 4);
    do
    {
      v52 = v49;
      if (a14)
        v52 = *(unsigned __int16 *)(*a14 + 2 * v49);
      *(float *)(v50 + 4 * v51 * v52) = *(float *)(v50 + 4 * v51 * v52) + -100000.0;
      if (a13)
        *(float *)(*(_QWORD *)(a13 + 16) + 4 * *(_DWORD *)(a13 + 4) * v52) = *(float *)(*(_QWORD *)(a13 + 16)
                                                                                        + 4
                                                                                        * *(_DWORD *)(a13 + 4)
                                                                                        * v52)
                                                                             + -100000.0;
      ++v49;
    }
    while (v20 != v49);
  }
LABEL_64:
  SLML::Storage<float>::RemoveReference(v76);
  MEOWVectorBase::~MEOWVectorBase(v78);
}

void sub_1D228AF58(_Unwind_Exception *a1)
{
  uint64_t v1;

  SLML::Storage<float>::RemoveReference(*(_QWORD *)(v1 - 168));
  MEOWVectorBase::~MEOWVectorBase((void **)(v1 - 152));
  _Unwind_Resume(a1);
}

void MEOWReader::GetUnitCost(MEOWReader *a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, unint64_t a6, int a7, int a8, char a9, uint64_t a10, float *a11, uint64_t *a12)
{
  char *DemiRecord;
  void **v21;
  uint64_t *v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  int v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[16];
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  char v40;
  unsigned __int8 v41;
  uint64_t v42;
  char *v43;
  void *v44[5];

  MEOWUnitCostWindow::MEOWUnitCostWindow((MEOWUnitCostWindow *)v44, a6 + a5, 1, 0.0);
  DemiRecord = MEOWReader::GetDemiRecord(a1, a2, a3, a4, 0);
  v43 = DemiRecord;
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)&v42, 2);
  v31 = v21;
  v30 = a8;
  v22 = &v32;
  SLML::Vector<float>::Vector((uint64_t)&v32, 0);
  if (!a12)
    v22 = 0;
  MEOWReader::GetDemi((uint64_t)a1, DemiRecord, 0, (uint64_t)v35);
  if (a12)
  {
    if (v33 != a12[1])
    {
      SLML::Storage<float>::RemoveReference(v33);
      v23 = a12[1];
      ++*(_DWORD *)(v23 + 4);
      v33 = v23;
    }
    v32 = *a12;
    v34 = a12[2];
  }
  if (a2 == 1)
  {
    v24 = MEOWComputeBreathCost((MEOWUnitWeightStrategy *)v39, a5, (uint64_t)v22, 0);
  }
  else
  {
    if (!a5)
    {
      v27 = 0.0;
      goto LABEL_17;
    }
    v25 = MEOWComputeUnitCost((MEOWUnitWeightStrategy *)v39, v37, v38 + 2 * v36, a5, a10, (uint64_t)v44[0], MEOWPhon::sVoiced[a2], (uint64_t)v22);
    MEOWComputeAccentCost(a7, v41, (uint64_t)v22);
    v24 = v25 + v26;
  }
  *a11 = v24;
  if (a5 && a6 && (v40 & 3) != 0 && (a9 & 1) == 0)
  {
    v27 = v24 + 100000.0;
LABEL_17:
    *a11 = v27;
  }
  MEOWReader::MEOWAdvanceDemi((uint64_t)a1, &v43, a2, a3, 1);
  MEOWReader::GetDemi((uint64_t)a1, v43, 1, (uint64_t)v35);
  v28 = MEOWComputeUnitCost((MEOWUnitWeightStrategy *)v39, v37, v38 + 2 * v36, a6, a10 + 4 * a5, (uint64_t)v44[0] + 4 * a5, MEOWPhon::sVoiced[a3], (uint64_t)v22);
  MEOWComputeAccentCost(v30, v41, (uint64_t)v22);
  *a11 = (float)(v28 + v29) + *a11;
  SLML::Storage<float>::RemoveReference(v33);
  MEOWVectorBase::~MEOWVectorBase(v31);
  MEOWVectorBase::~MEOWVectorBase(v44);
}

void sub_1D228B218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  MEOWVectorBase::~MEOWVectorBase(a12);
  MEOWVectorBase::~MEOWVectorBase((void **)(v14 - 136));
  _Unwind_Resume(a1);
}

void MEOWReader::GetSpectralCosts(MEOWReader *this, int a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, float *a8)
{
  uint64_t *v12;
  uint64_t v14;
  unint64_t i;
  float v16;
  uint64_t v17;
  uint64_t v18;
  void *v19[2];
  unint64_t v20;
  float v21[15];

  v12 = (uint64_t *)*((_QWORD *)this + 3819);
  if (v12 && (MEOWSpectralCost::GetSpectralCookie(v12, a2, a3, a4, a7, v21) & 1) != 0)
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v19, 60);
    MEOWReader::GetDistanceCookies((uint64_t)this, a5, a6, a7, (MEOWVectorBase *)v19, 0);
    if (v20)
    {
      v14 = 0;
      for (i = 0; i < v20; ++i)
      {
        v16 = MEOWRawSVDDistance(v21, (float *)((char *)v19[0] + v14));
        a8[i] = powf(v16, 0.33333);
        v14 += 60;
      }
    }
    MEOWVectorBase::~MEOWVectorBase(v19);
  }
  else
  {
    v17 = *((_QWORD *)this + 3829);
    if (v17)
      v18 = *(unsigned __int8 *)(v17 + 50 * a5 + a6);
    else
      v18 = bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 3830) + 100 * a5 + 2 * a6)) >> 16;
    bzero(a8, 4 * v18);
  }
}

void sub_1D228B36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  MEOWVectorBase::~MEOWVectorBase(&a9);
  _Unwind_Resume(a1);
}

void MEOWReader::GetSpectralCost(MEOWReader *this, int a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, float *a9)
{
  uint64_t *v10;
  float v15;
  void *v16[4];
  float v17[15];

  v10 = (uint64_t *)*((_QWORD *)this + 3819);
  if (v10 && (MEOWSpectralCost::GetSpectralCookie(v10, a2, a3, a4, a8, v17) & 1) != 0)
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v16, 60);
    MEOWReader::GetDistanceCookies((uint64_t)this, a5, a6, a8, (MEOWVectorBase *)v16, 0);
    v15 = MEOWRawSVDDistance(v17, (float *)v16[0] + 15 * a7);
    *a9 = powf(v15, 0.33333);
    MEOWVectorBase::~MEOWVectorBase(v16);
  }
  else
  {
    *a9 = 0.0;
  }
}

void sub_1D228B440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  MEOWVectorBase::~MEOWVectorBase(&a9);
  _Unwind_Resume(a1);
}

uint64_t MEOWReader::SubstituteDemis(MEOWReader *this, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *a2;
  v7 = *a3;
  v8 = *((_QWORD *)this + 3829);
  if (!v8)
  {
    v10 = *((_QWORD *)this + 3830);
    if (*(_WORD *)(v10 + 100 * *a2 + 2 * v7))
    {
      v9 = bswap32(*(unsigned __int16 *)(v10 + 100 * *a3 + 2 * *a4)) >> 16;
      goto LABEL_6;
    }
LABEL_8:
    v11 = 1;
    goto LABEL_9;
  }
  if (!*(_BYTE *)(v8 + 50 * *a2 + v7))
    goto LABEL_8;
  v9 = *(unsigned __int8 *)(v8 + 50 * *a3 + *a4);
LABEL_6:
  v11 = 0;
  if (v9)
    return v11;
  v11 = 0;
LABEL_9:
  v12 = v7 - 2;
  v13 = 8;
  switch(v12)
  {
    case 0:
      v13 = 3;
      if (v8)
        goto LABEL_14;
      goto LABEL_18;
    case 1:
      v13 = 2;
      goto LABEL_13;
    case 2:
LABEL_13:
      if (v8)
        goto LABEL_14;
      goto LABEL_18;
    case 3:
      v13 = 20;
      if (v8)
      {
LABEL_14:
        if (*(_BYTE *)(v8 + 50 * *a2 + v13) && *(_BYTE *)(v8 + 50 * v13 + *a4))
          goto LABEL_20;
      }
      else
      {
LABEL_18:
        v14 = *((_QWORD *)this + 3830);
        if (*(_WORD *)(v14 + 100 * *a2 + 2 * v13)
          && bswap32(*(unsigned __int16 *)(v14 + 100 * v13 + 2 * *a4)) >> 16)
        {
LABEL_20:
          *a3 = v13;
          return 2;
        }
      }
LABEL_21:
      if (!(_DWORD)v11)
        return v11;
      v15 = 1;
LABEL_23:
      v16 = 0;
      v17 = 42;
      break;
    default:
      goto LABEL_21;
  }
  while (1)
  {
    if (v8)
    {
      if (*(_BYTE *)(v8 + 50 * v6 + v17))
        break;
      goto LABEL_28;
    }
    if (bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 3830) + 100 * v6 + 2 * v17)) >> 16)
      break;
LABEL_28:
    v17 = asc_1D22DBA08[++v16];
    if (v16 == 4)
    {
      v18 = 0;
      *a5 = 0;
      do
      {
        v19 = *((_QWORD *)this + 3829);
        if (v19)
        {
          if (*(_BYTE *)(v19 + 50 * *a2 + v18))
            goto LABEL_37;
        }
        else if (bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 3830) + 100 * *a2 + 2 * v18)) >> 16)
        {
          goto LABEL_37;
        }
        *a5 = ++v18;
      }
      while (v18 != 50);
      return 0xFFFFFFFFLL;
    }
  }
  *a5 = v17;
  v19 = *((_QWORD *)this + 3829);
LABEL_37:
  v20 = 0;
  v21 = *a3;
  v22 = 42;
  do
  {
    if (v19)
    {
      if (*(_BYTE *)(v19 + 50 * v22 + v21))
        goto LABEL_55;
    }
    else if (bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 3830) + 100 * v22 + 2 * v21)) >> 16)
    {
LABEL_55:
      *a6 = v22;
      return v15;
    }
    v22 = asc_1D22DBA08[++v20];
  }
  while (v20 != 4);
  v23 = 0;
  *a6 = 0;
  v24 = 1;
  do
  {
    v25 = *a3;
    v26 = *((_QWORD *)this + 3829);
    if (v26)
    {
      if (*(_BYTE *)(v26 + v25 + v23))
        return v15;
    }
    else if (bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 3830) + 2 * v25 + 2 * v23)) >> 16)
    {
      return v15;
    }
    *a6 = v24;
    v23 += 50;
    ++v24;
  }
  while (v23 != 2500);
  if (!*a3)
    return 0xFFFFFFFFLL;
  *a3 = 0;
  v6 = *a2;
  v8 = *((_QWORD *)this + 3829);
  if (v8)
    v27 = *(unsigned __int8 *)(v8 + 50 * *a2);
  else
    v27 = bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 3830) + 100 * *a2)) >> 16;
  v11 = 2;
  v15 = 3;
  if (!v27)
    goto LABEL_23;
  return v11;
}

uint64_t MEOWReader::SubstituteFirst(MEOWReader *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  while (1)
  {
    *a2 = 42;
    v3 = *a3;
    v4 = *((_QWORD *)this + 3829);
    if (!v4)
      break;
    v5 = *(unsigned __int8 *)(v4 + v3 + 2100);
    if (v5)
      return 1;
LABEL_5:
    *a2 = 0;
    v6 = 1;
    do
    {
      v7 = *a3;
      v8 = *((_QWORD *)this + 3829);
      if (v8)
      {
        if (*(_BYTE *)(v8 + v7 + v5))
          return 1;
      }
      else if (bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 3830) + 2 * v7 + 2 * v5)) >> 16)
      {
        return 1;
      }
      *a2 = v6;
      v5 += 50;
      ++v6;
    }
    while (v5 != 2500);
    *a3 = 0;
  }
  v5 = bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 3830) + 2 * v3 + 4200)) >> 16;
  if (!v5)
    goto LABEL_5;
  return 1;
}

uint64_t MEOWReader::SubstituteSecond(MEOWReader *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  while (1)
  {
    *a3 = 42;
    v3 = *((_QWORD *)this + 3829);
    if (!v3)
      break;
    v4 = *(unsigned __int8 *)(v3 + 50 * *a2 + 42);
    if (*(_BYTE *)(v3 + 50 * *a2 + 42))
      return 1;
LABEL_5:
    *a3 = 0;
    do
    {
      v5 = *((_QWORD *)this + 3829);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 50 * *a2 + v4))
          return 1;
      }
      else if (bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 3830) + 100 * *a2 + 2 * v4)) >> 16)
      {
        return 1;
      }
      *a3 = ++v4;
    }
    while (v4 != 50);
    *a2 = 0;
  }
  v4 = bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 3830) + 100 * *a2 + 84)) >> 16;
  if (!v4)
    goto LABEL_5;
  return 1;
}

uint64_t MEOWReader::GetWordEntry(uint64_t a1, const char **a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  size_t v24;
  uint64_t v25;
  const void *v26;
  int v27;
  uint64_t v29;
  size_t v30;
  uint64_t *v31;

  v3 = *(_QWORD *)(a1 + 30512);
  if (!v3)
    return 0;
  v5 = *(_QWORD *)(a1 + 30496);
  v6 = v5 + bswap32(*(_DWORD *)(v3 + 16));
  v7 = *a2;
  v8 = strlen(*a2);
  v9 = v8 >= 5 ? 5 : v8;
  if (v9)
  {
    v29 = v5;
    v30 = v8;
    v31 = a3;
    v10 = *(unsigned __int16 *)(v3 + 2 * v9 + 4);
    do
    {
      v11 = v9--;
      v12 = bswap32(v10);
      v10 = *(unsigned __int16 *)(v3 + 2 * v9 + 4);
      v13 = __rev16(v10);
      v14 = HIWORD(v12);
      while (v13 < v14)
      {
        v15 = (v14 + v13) >> 1;
        v16 = memcmp(v7, (const void *)(v6 + 8 * v15), v11);
        if (v16 >= 1)
          v13 = v15 + 1;
        if (v16)
          v17 = 0;
        else
          v17 = 6;
        if (v16 < 0)
        {
          v17 = 0;
          v14 = v15;
        }
        if (v17)
        {
          a3 = v31;
          goto LABEL_20;
        }
      }
    }
    while (v9);
    v11 = 0;
    v15 = 0;
    a3 = v31;
LABEL_20:
    v5 = v29;
    v8 = v30;
  }
  else
  {
    v11 = 0;
    v15 = 0;
  }
  v18 = v5 + bswap32(*(_DWORD *)(v3 + 20)) + bswap32(*(_DWORD *)(v6 + 8 * v15 + 4) & 0xFFFFFF00);
  v19 = *(unsigned __int16 *)(v18 + 4);
  *a3 = v18;
  a3[1] = v18;
  if (!v19)
    return 0;
  v20 = 0;
  v21 = __rev16(v19);
  v22 = v18 + 2 * v21 + 6;
  v23 = &v7[v11];
  v24 = v8 - v11;
  while (1)
  {
    v25 = (v21 + v20) >> 1;
    v26 = (const void *)(v22 + (bswap32(*(unsigned __int16 *)(v18 + (2 * v25) + 6)) >> 16));
    v27 = memcmp(v23, v26, v24);
    if (v27 < 1)
      break;
    v20 = v25 + 1;
    v25 = v21;
LABEL_28:
    v21 = v25;
    if (v20 >= v25)
      return 0;
  }
  if (v27 < 0 || *((_BYTE *)v26 + v24))
    goto LABEL_28;
  return (uint64_t)v26 + v24 + 1;
}

uint64_t MEOWReader::GetHomophoneClusterEntry(MEOWReader *this, unint64_t a2, unint64_t *a3, unint64_t *a4)
{
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t result;
  char *v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  int v19;
  int v20;

  v4 = (unsigned __int16 *)*((_QWORD *)this + 3815);
  v5 = bswap32(*v4) >> 16;
  result = *((_QWORD *)this + 3812)
         + bswap32(*(_DWORD *)(*((_QWORD *)this + 3814) + 20))
         + bswap32(*(_DWORD *)&v4[2 * (a2 / v5) + 2]);
  v7 = (char *)(result
              + 6
              + 2 * (bswap32(*(unsigned __int16 *)(result + 4)) >> 16)
              + (bswap32(*(unsigned __int16 *)(result + 6 + 2 * (a2 % v5))) >> 16));
  v9 = *v7;
  v8 = v7 + 1;
  v10 = v9;
  if (v9 < 0)
  {
    v12 = 0;
    do
    {
      v13 = v10 & 0x7F | (v12 << 7);
      v14 = *v8++;
      v10 = v14;
      v12 = v13;
    }
    while (v14 < 0);
    v11 = v13 << 7;
  }
  else
  {
    v11 = 0;
  }
  *a3 = v10 | v11;
  v15 = *v8;
  if (*v8 < 0)
  {
    v17 = 0;
    v18 = v8 + 1;
    do
    {
      v19 = v15 & 0x7F | (v17 << 7);
      v20 = *v18++;
      v15 = v20;
      v17 = v19;
    }
    while (v20 < 0);
    v16 = v19 << 7;
  }
  else
  {
    v16 = 0;
  }
  *a4 = v15 | v16;
  return result;
}

uint64_t MEOWReader::GetWordDescriptor(uint64_t a1, const char **a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  FILE **v19;
  const char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  FILE *v24;
  unint64_t v25;
  const char *v26;
  int v27;
  _BYTE *v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  const char **v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  __int16 v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  int v54;
  FILE *v55;
  FILE *v56;
  int v57;
  char *v58;
  int v59;
  int v60;
  unsigned __int8 v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t HomophoneClusterEntry;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  FILE *v95;
  int v96;
  char *v97;
  int v98;
  int v99;
  const char **v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  char *v107;
  int v108;
  int v109;
  const char *v110;
  MEOWReader *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  int v115;
  int v117;
  unsigned __int8 v118;
  unint64_t v119;
  SLWordTagSet v120;

  result = MEOWReader::GetWordEntry(a1, a2, a3);
  if (!result)
    return result;
  v112 = *a3;
  v6 = *(_QWORD *)(a1 + 30512);
  v7 = *(_QWORD *)(a1 + 30496);
  v8 = *(_DWORD *)(v6 + 24);
  v9 = *(_DWORD *)(v6 + 28);
  a3[5] = 0;
  v11 = (char *)(result + 1);
  v10 = *(unsigned __int8 *)result;
  if ((v10 & 0x80) != 0)
  {
    v13 = 0;
    do
    {
      v14 = v10 & 0x7F | (v13 << 7);
      v15 = *v11++;
      v10 = v15;
      v13 = v14;
    }
    while (v15 < 0);
    v12 = v14 << 7;
  }
  else
  {
    v12 = 0;
  }
  v16 = v10 | v12;
  if (!(_DWORD)v16)
  {
    v87 = v11 + 1;
    v88 = *v11;
    if (v88 == 128)
    {
      v89 = *v87;
      v90 = *v87;
      if (v89 < 0)
      {
        v96 = 0;
        v97 = v11 + 2;
        do
        {
          v98 = v90 & 0x7F | (v96 << 7);
          v99 = *v97++;
          v90 = v99;
          v96 = v98;
        }
        while (v99 < 0);
        v91 = v98 << 7;
      }
      else
      {
        v91 = 0;
      }
      v100 = a2;
      *a3 = MEOWReader::GetHomophoneClusterEntry((MEOWReader *)a1, v90 | v91, a3 + 2, a3 + 3);
    }
    else
    {
      if ((v88 & 0x80) != 0)
      {
        v101 = 0;
        do
        {
          v102 = v88 & 0x7F | (v101 << 7);
          v103 = *v87++;
          v88 = v103;
          v101 = v102;
        }
        while (v103 < 0);
        v92 = v102 << 7;
      }
      else
      {
        v92 = 0;
      }
      v100 = a2;
      a3[2] = v88 | v92;
      v104 = *v87;
      if (*v87 < 0)
      {
        v106 = 0;
        v107 = v87 + 1;
        do
        {
          v108 = v104 & 0x7F | (v106 << 7);
          v109 = *v107++;
          v104 = v109;
          v106 = v108;
        }
        while (v109 < 0);
        v105 = v108 << 7;
      }
      else
      {
        v105 = 0;
      }
      a3[3] = v104 | v105;
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDebugHomographs))
    return 1;
  }
  v113 = a3;
  v114 = v7 + bswap32(v8);
  v17 = v7 + bswap32(v9);
  v18 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDebugHomographs);
  v19 = (FILE **)MEMORY[0x1E0C80C10];
  if (v18)
  {
    v20 = "";
    if (*((_BYTE *)a2 + 26))
      v20 = "!";
    v21 = *(uint64_t *)((char *)a2 + 10);
    if ((_WORD)v21)
    {
      v22 = 0;
      do
      {
        v23 = *(uint64_t *)((char *)a2 + 18);
        v24 = *v19;
        *(_QWORD *)v120.var0 = v21;
        *(_QWORD *)&v120.var0[4] = v23;
        v25 = v22 + 1;
        v26 = (const char *)SLTagEng::Name((SLTagEng *)v120.var0[v22 + 1]);
        fprintf(v24, " %s", v26);
        v21 = *(uint64_t *)((char *)a2 + 10);
        v22 = v25;
      }
      while (v25 < (unsigned __int16)v21);
    }
    fputc(10, *v19);
  }
  v115 = 0;
  v27 = 0;
  v111 = (MEOWReader *)a1;
  v28 = (_BYTE *)(a1 + 30537);
  do
  {
    v117 = v27;
    v29 = v11 + 1;
    v30 = *v11;
    if (*v11 < 0)
    {
      v32 = 0;
      do
      {
        v33 = v30 & 0x7F | (v32 << 7);
        v34 = *v29++;
        v30 = v34;
        v32 = v33;
      }
      while (v34 < 0);
      v31 = v33 << 7;
    }
    else
    {
      v31 = 0;
    }
    v35 = a2;
    v36 = *(_DWORD *)(v114 + 4 * (v30 | v31));
    v37 = bswap32(v36);
    if (v36)
      v38 = 41;
    else
      v38 = 0;
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDebugHomographs))
    {
      v39 = v16;
      fwrite("  {", 3uLL, 1uLL, *v19);
      v40 = 0;
      v41 = "";
      do
      {
        if (((v37 >> v40) & 1) != 0)
        {
          fprintf(*v19, "%s%s", v41, *(const char **)(MEMORY[0x1E0DA8E90] + 8 * v40));
          v41 = ", ";
        }
        ++v40;
      }
      while (v40 != 32);
      fputc(125, *v19);
      v16 = v39;
    }
    v42 = *((unsigned __int8 *)a2 + 8);
    if (((v37 >> v42) & 1) == 0)
    {
      if (*((_BYTE *)a2 + 26)
        && (v42 == 19 && (v37 & 0x80) != 0
         || v42 <= 1 && (v37 & 0x10C) != 0
         || v42 == 6 && (v37 & 1) != 0
         || !*((_BYTE *)a2 + 8) && (v37 & 0x12000) != 0))
      {
        v38 -= 10;
      }
      else
      {
        v38 -= 50;
      }
    }
    v118 = 0;
    v43 = v16 - 1;
    while (1)
    {
      v44 = *v29++;
      v45 = v44;
      if (v44 < 0)
      {
        v47 = 0;
        do
        {
          v48 = v45 & 0x7F | (v47 << 7);
          v49 = *v29++;
          v45 = v49;
          v47 = v48;
        }
        while (v49 < 0);
        v46 = (_WORD)v48 << 7;
      }
      else
      {
        v46 = 0;
      }
      v50 = v45 | v46 & 0xFF80;
      if (!v50)
        break;
      v51 = bswap32(*(unsigned __int16 *)(v17 + 2 * v50)) >> 16;
      if (*v28)
      {
LABEL_52:
        if ((_WORD)v51)
        {
          v120 = *(SLWordTagSet *)((char *)v35 + 10);
          if (SLWordTagSet::find(&v120))
          {
            if ((v51 & 0xFFFE) == 0x42)
              v52 = -10;
            else
              v52 = -50;
            v38 += v52;
            v53 = 45;
          }
          else
          {
            v120 = *(SLWordTagSet *)((char *)v35 + 10);
            if (SLWordTagSet::find(&v120))
            {
              v38 += 5;
              v53 = 43;
LABEL_60:
              v35 = a2;
              goto LABEL_65;
            }
            if ((unsigned __int16)v51 != 74)
            {
              if ((v51 & 0xFFFE) == 0x48)
              {
                v38 -= 50;
                v53 = 32;
              }
              else
              {
                if ((v51 & 1) != 0)
                  --v38;
                else
                  v38 -= 2;
                v53 = 63;
              }
              goto LABEL_60;
            }
            v35 = a2;
            v120 = *(SLWordTagSet *)((char *)a2 + 10);
            v54 = SLWordTagSet::find(&v120);
            v118 |= v54 ^ 1;
            if (v54)
              v38 -= 50;
            v53 = 63;
          }
LABEL_65:
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDebugHomographs))
          {
            v55 = *v19;
            v110 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v51);
            v56 = v55;
            v35 = a2;
            fprintf(v56, " %s%c", v110, v53);
          }
        }
      }
      else if (v51 - 34 <= 0x21)
      {
        LOWORD(v51) = *(__int16 *)((char *)L"@BDЀЂFHЈЊЌVJЄІTNЎ" + ((v51 - 34) & 0xFFFFFFFE)) | v51 & 1;
        goto LABEL_52;
      }
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDebugHomographs))
      fprintf(*v19, " -> %d", v38);
    v119 = 0;
    *(_QWORD *)v120.var0 = 0;
    v58 = v29 + 1;
    v57 = *v29;
    v16 = v43;
    if (v57 == 128)
    {
      v11 = v29 + 2;
      v59 = v29[1];
      if (v29[1] < 0)
      {
        v63 = 0;
        v27 = v117;
        v61 = v118;
        do
        {
          v64 = v59 & 0x7F | (v63 << 7);
          v65 = *v11++;
          v59 = v65;
          v63 = v64;
        }
        while (v65 < 0);
        v60 = v64 << 7;
      }
      else
      {
        v60 = 0;
        v27 = v117;
        v61 = v118;
      }
      *(_QWORD *)v120.var0 = v59 | v60;
      if ((v61 & (v38 > v27)) != 0 || v38 > v115)
        HomophoneClusterEntry = MEOWReader::GetHomophoneClusterEntry(v111, v59 | v60, (unint64_t *)v120.var0, &v119);
      else
        HomophoneClusterEntry = 0;
    }
    else
    {
      if ((v57 & 0x80) != 0)
      {
        v67 = 0;
        v27 = v117;
        do
        {
          v68 = v57 & 0x7F | (v67 << 7);
          v69 = *v58++;
          v57 = v69;
          v67 = v68;
        }
        while (v69 < 0);
        v62 = v68 << 7;
      }
      else
      {
        v62 = 0;
        v27 = v117;
      }
      v61 = v118;
      *(_QWORD *)v120.var0 = v57 | v62;
      v70 = *v58;
      v11 = v58 + 1;
      v71 = v70;
      if (v70 < 0)
      {
        v73 = 0;
        do
        {
          v74 = v71 & 0x7F | (v73 << 7);
          v75 = *v11++;
          v71 = v75;
          v73 = v74;
        }
        while (v75 < 0);
        v72 = v74 << 7;
      }
      else
      {
        v72 = 0;
      }
      HomophoneClusterEntry = 0;
      v119 = v71 | v72;
    }
    if ((v61 & (v38 > v27)) == 1)
    {
      v76 = v112;
      if (HomophoneClusterEntry)
        v76 = HomophoneClusterEntry;
      v113[1] = v76;
      v77 = v119;
      v113[4] = *(_QWORD *)v120.var0;
      v113[5] = v77;
      if ((MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDebugHomographs) & 1) != 0)
      {
        v78 = 63;
        v27 = v38;
        goto LABEL_106;
      }
      v27 = v38;
    }
    else if (v38 > v115)
    {
      v79 = v112;
      if (HomophoneClusterEntry)
        v79 = HomophoneClusterEntry;
      *v113 = v79;
      v80 = v119;
      v113[2] = *(_QWORD *)v120.var0;
      v113[3] = v80;
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDebugHomographs))
      {
        v78 = 33;
        v115 = v38;
LABEL_106:
        fputc(v78, *v19);
      }
      else
      {
        v115 = v38;
      }
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDebugHomographs))
      fputc(10, *v19);
  }
  while (v16);
  if (v27 < 1)
  {
    v81 = v113;
  }
  else
  {
    v81 = v113;
    if (v27 < v115 - 3)
      goto LABEL_128;
    if (v115 <= 0)
    {
      *v113 = v113[1];
      v86 = v113[5];
      v113[2] = v113[4];
      goto LABEL_127;
    }
    if (*v113 == v113[1])
    {
      v83 = v113[2];
      v82 = v113[3];
      v85 = v113[4];
      v84 = v113[5];
      if (v85 == v82 + v83)
        goto LABEL_119;
      if (v83 == v84 + v85)
      {
        v113[2] = v85;
LABEL_119:
        v86 = v84 + v82;
        v27 = v115;
LABEL_127:
        v113[3] = v86;
        v115 = v27;
LABEL_128:
        v113[5] = 0;
      }
    }
  }
  v93 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDebugHomographs);
  v94 = v115;
  if (v93)
  {
    if (v115 < 1)
    {
      fwrite("  -> No matching instances.\n", 0x1CuLL, 1uLL, *v19);
    }
    else
    {
      v95 = *v19;
      if (v81[5])
        fprintf(v95, "  -> %lu@%lu, %lu@%lu\n");
      else
        fprintf(v95, "  -> %lu@%lu\n");
    }
    v94 = v115;
  }
  return v94 > 0;
}

uint64_t MEOWReader::TranslateTag(MEOWReader *this, uint64_t a2)
{
  if (!*((_BYTE *)this + 30537))
  {
    if ((a2 - 34) > 0x21)
      return 0;
    else
      return *(unsigned __int16 *)((char *)L"@BDЀЂFHЈЊЌVJЄІTNЎ" + (((_DWORD)a2 - 34) & 0xFFFFFFFE)) | (a2 & 1);
  }
  return a2;
}

void MEOWReader::GetWordData(int a1, unsigned __int16 **a2, void **this, uint64_t a4)
{
  char *v7;
  char *v8;
  unsigned __int16 *v9;
  void **v10;
  unsigned __int16 *v11;
  char *v12;
  char *v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  char *v16;
  char v17;
  unsigned __int16 *v18;
  char *v19;
  char v20;
  _QWORD *v21;

  v7 = (char *)*a2 + (bswap32((*a2)[1]) >> 16);
  v8 = (char *)*a2 + (bswap32(**a2) >> 16);
  v10 = (void **)(a2 + 5);
  v9 = a2[5];
  if (!v9)
  {
    v21 = a2 + 2;
    v10 = (void **)(a2 + 3);
    MEOWVectorBase::Map(this, &v7[8 * (_QWORD)a2[2]], a2[3]);
    v13 = v8;
LABEL_12:
    MEOWVectorBase::Map((void **)a4, &v13[*v21], *v10);
    return;
  }
  v11 = a2[1];
  v12 = (char *)v11 + (bswap32(v11[1]) >> 16);
  v13 = (char *)v11 + (bswap32(*v11) >> 16);
  v14 = a2[3];
  if (!v14)
  {
    v21 = a2 + 4;
    MEOWVectorBase::Map(this, &v12[8 * (_QWORD)a2[4]], v9);
    goto LABEL_12;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,MEOWWordInstance const*,MEOWWordInstance const*,std::back_insert_iterator<MEOWVector<MEOWWordInstance>>,0>((uint64_t *)&v7[8 * (_QWORD)a2[2]], (uint64_t *)&v7[8 * (_QWORD)a2[2] + 8 * (_QWORD)v14], (MEOWVectorBase *)this);
  v15 = a2[3];
  if (v15)
  {
    v16 = (char *)a2[2] + (_QWORD)v8;
    do
    {
      v17 = *v16++;
      MEOWVectorBase::Append((_QWORD *)a4);
      *(_BYTE *)(*(_QWORD *)a4 + *(_QWORD *)(a4 + 16) - 1) = v17;
      v15 = (unsigned __int16 *)((char *)v15 - 1);
    }
    while (v15);
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,MEOWWordInstance const*,MEOWWordInstance const*,std::back_insert_iterator<MEOWVector<MEOWWordInstance>>,0>((uint64_t *)&v12[8 * (_QWORD)a2[4]], (uint64_t *)&v12[8 * (_QWORD)a2[4] + 8 * (_QWORD)a2[5]], (MEOWVectorBase *)this);
  v18 = a2[5];
  if (v18)
  {
    v19 = (char *)a2[4] + (_QWORD)v13;
    do
    {
      v20 = *v19++;
      MEOWVectorBase::Append((_QWORD *)a4);
      *(_BYTE *)(*(_QWORD *)a4 + *(_QWORD *)(a4 + 16) - 1) = v20;
      v18 = (unsigned __int16 *)((char *)v18 - 1);
    }
    while (v18);
  }
}

void MEOWReader::GetWordData(uint64_t a1, _QWORD *a2, unint64_t a3, _DWORD *a4)
{
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _DWORD *v9;

  v4 = a2[3];
  v5 = v4 > a3;
  if (v4 <= a3)
    v6 = a2[4] - v4;
  else
    v6 = a2[2];
  v7 = v6 + a3;
  if (v5)
    v8 = a2;
  else
    v8 = a2 + 1;
  v9 = (_DWORD *)(*v8 + (bswap32(*(unsigned __int16 *)(*v8 + 2)) >> 16) + 8 * v7);
  *a4 = *v9;
  a4[1] = v9[1];
}

void MEOWReader::GetWordData(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v4 = a2[3];
  v5 = v4 > a3;
  if (v4 <= a3)
    v6 = a2[4] - v4;
  else
    v6 = a2[2];
  v7 = v6 + a3;
  if (v5)
    v8 = a2;
  else
    v8 = a2 + 1;
  *a4 = *v8 + (bswap32(*(unsigned __int16 *)(*v8 + 2)) >> 16) + 8 * v7;
}

void MEOWReader::GetWordGlue(MEOWReader *a1, unsigned __int8 *a2, uint64_t a3)
{
  _BYTE v6[67];
  char v7;
  unsigned __int16 v8;
  void *v9[4];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v9, 2);
  MEOWReader::GetDemi(a1, a2, 1, (uint64_t)v6);
  *(_BYTE *)a3 = v7;
  *(_WORD *)(a3 + 2) = bswap32(v8) >> 16;
  MEOWReader::GetDemi(a1, a2 + 4, 0, (uint64_t)v6);
  *(_BYTE *)(a3 + 1) = v7;
  *(_WORD *)(a3 + 4) = bswap32(v8) >> 16;
  MEOWVectorBase::~MEOWVectorBase(v9);
}

void sub_1D228C710(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

double MEOWReader::GetDemi(MEOWReader *a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  char *DemiRecord;

  DemiRecord = MEOWReader::GetDemiRecord(a1, *a2, a2[1], bswap32(*((unsigned __int16 *)a2 + 1)) >> 16, a3);
  return MEOWReader::GetDemi((uint64_t)a1, DemiRecord, a3, a4);
}

void MEOWReader::GetDiphoneNeighbor()
{
  fwrite("We're not supposed to be using GetDiphoneNeighbor() anymore!\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  exit(1);
}

uint64_t MEOWReader::GetWord(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, char a5)
{
  char *DemiRecord;
  char *v11;
  _DWORD *v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t v22;

  DemiRecord = MEOWReader::GetDemiRecord((MEOWReader *)a1, *a2, a2[1], bswap32(*((unsigned __int16 *)a2 + 1)) >> 16, 1);
  v11 = MEOWReader::GetDemiRecord((MEOWReader *)a1, a2[4], a2[5], bswap32(*((unsigned __int16 *)a2 + 3)) >> 16, 0);
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis))
  {
    DemiRecord = MEOWReader::HeapDemiForMappedDemi(a1, DemiRecord, 0, 0, 1);
    v11 = MEOWReader::HeapDemiForMappedDemi(a1, v11, 0, 0, 1);
  }
  v12 = (_DWORD *)(***(uint64_t (****)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 30576))(*(_QWORD *)(a1 + 30576), a1, (bswap32(*((unsigned __int16 *)DemiRecord + 1)) >> 16) & 0xFFFCFFFF | ((((DemiRecord[1] & 0xC0) >> 6) & 3) << 16), DemiRecord[4]);
  v13 = DemiRecord[1];
  *(_DWORD *)a3 = (bswap32(*((unsigned __int16 *)DemiRecord + 1)) >> 16) & 0xFFFCFFFF | ((((v13 & 0xC0) >> 6) & 3) << 16);
  *(_WORD *)(a3 + 4) = DemiRecord[4];
  v14 = DemiRecord[5];
  *(_WORD *)(a3 + 6) = v14;
  if (a4)
  {
    v15 = v13 & 0x3F;
    if ((v15 - 4) >= 4)
    {
      if (v15 == 3 || v15 == 1)
        v14 = v14 + (bswap32(*((unsigned __int16 *)DemiRecord + 3)) >> 16);
      else
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "MEOW: Bad Demi Format %d @ %08x\n", v15, (_DWORD)DemiRecord - *(_DWORD *)(a1 + 30432));
    }
    else
    {
      v14 = DemiRecord[6] + v14;
    }
  }
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v12 + 24))(v12, v14);
  v17 = (***(uint64_t (****)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 30576))(*(_QWORD *)(a1 + 30576), a1, (bswap32(*((unsigned __int16 *)v11 + 1)) >> 16) & 0xFFFCFFFF | ((((v11[1] & 0xC0) >> 6) & 3) << 16), v11[4]);
  v18 = v11[5];
  if ((a5 & 1) == 0)
  {
    v19 = v11[1] & 0x3F;
    if ((v19 - 4) >= 4)
    {
      if (v19 == 3 || v19 == 1)
        v18 = v18 + (bswap32(*((unsigned __int16 *)v11 + 3)) >> 16);
      else
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "MEOW: Bad Demi Format %d @ %08x\n", v11[1] & 0x3F, (_DWORD)v11 - *(_DWORD *)(a1 + 30432));
    }
    else
    {
      v18 = v11[6] + v18;
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 24))(v17, v18);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 64))(v17);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  *(_DWORD *)(a3 + 40) = v12[4];
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, v21, a3 + 72);
  *(_DWORD *)(a3 + 44) = v12[4] - *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a3 + 48) = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 64))(v12) - *(_DWORD *)(a1 + 30432);
  v22 = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = v22;
  *(_QWORD *)(a3 + 32) = *(_QWORD *)(a3 + 72);
  return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
}

uint64_t MEOWReader::GetInclusion(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, uint64_t a5)
{
  char *DemiRecord;
  char *v11;
  uint64_t result;
  char v13;
  char *v14;
  char v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  DemiRecord = MEOWReader::GetDemiRecord((MEOWReader *)a1, a2, a3, a4, 0);
  v11 = MEOWReader::GetDemiRecord((MEOWReader *)a1, a2, a3, a4, 1);
  result = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis);
  if ((_DWORD)result)
  {
    DemiRecord = MEOWReader::HeapDemiForMappedDemi(a1, DemiRecord, 0, 0, 1);
    result = (uint64_t)MEOWReader::HeapDemiForMappedDemi(a1, v11, 0, 0, 1);
    v11 = (char *)result;
  }
  v13 = DemiRecord[1];
  if ((v13 & 0x3F) == 7)
  {
    v14 = DemiRecord + 8;
  }
  else
  {
    if ((v13 & 0x3F) != 6)
    {
      *(_BYTE *)(a5 + 65) = 0;
      goto LABEL_11;
    }
    v14 = DemiRecord + 40;
  }
  v15 = *v14;
  *(_BYTE *)(a5 + 65) = v15;
  if ((v15 & 3) == 0)
  {
LABEL_11:
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    return result;
  }
  v16 = (_DWORD *)(***(uint64_t (****)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 30576))(*(_QWORD *)(a1 + 30576), a1, (bswap32(*((unsigned __int16 *)DemiRecord + 1)) >> 16) & 0xFFFCFFFF | ((((v13 & 0xC0) >> 6) & 3) << 16), DemiRecord[4]);
  *(_DWORD *)a5 = (bswap32(*((unsigned __int16 *)DemiRecord + 1)) >> 16) & 0xFFFCFFFF | ((((DemiRecord[1] & 0xC0) >> 6) & 3) << 16);
  *(_WORD *)(a5 + 4) = DemiRecord[4];
  v17 = DemiRecord[5];
  *(_WORD *)(a5 + 6) = v17;
  (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v16 + 24))(v16, DemiRecord[6] + v17);
  if ((v11[1] & 0x3F) != 0)
  {
    v18 = (***(uint64_t (****)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 30576))(*(_QWORD *)(a1 + 30576), a1, (bswap32(*((unsigned __int16 *)v11 + 1)) >> 16) & 0xFFFCFFFF | ((((v11[1] & 0xC0) >> 6) & 3) << 16), v11[4]);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 24))(v18, v11[5]);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 64))(v18);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  else
  {
    v19 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v16 + 64))(v16);
  }
  *(_DWORD *)(a5 + 40) = v16[4];
  *(_BYTE *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 88) = 0;
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v16 + 40))(v16, v19, a5 + 72);
  *(_DWORD *)(a5 + 44) = v16[4] - *(_DWORD *)(a5 + 40);
  *(_DWORD *)(a5 + 48) = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v16 + 64))(v16) - *(_DWORD *)(a1 + 30432);
  v20 = *(_QWORD *)(a5 + 88);
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = v20;
  *(_QWORD *)(a5 + 32) = *(_QWORD *)(a5 + 72);
  return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
}

uint64_t MEOWReader::InclusionLength(MEOWReader *a1, unsigned __int8 *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  _BYTE v8[40];
  int v9;
  int v10;
  char v11;
  void *v12[4];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v12, 2);
  MEOWReader::GetDemi(a1, a2, 0, (uint64_t)v8);
  if ((v11 & 3) != 0)
  {
    v4 = v9;
    v5 = v10;
    MEOWReader::GetDemi(a1, a2, 1, (uint64_t)v8);
    if (v9)
      v6 = (v9 - (v5 + v4));
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  MEOWVectorBase::~MEOWVectorBase(v12);
  return v6;
}

void sub_1D228CDD8(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

uint64_t MEOWReader::TouchMetadata(MEOWReader *this)
{
  char *v1;
  uint64_t v2;
  int v3;
  char *v4;
  int v5;
  int v6;
  int v8;

  v8 = 0;
  v1 = (char *)*((_QWORD *)this + 3804);
  v2 = 40;
  if (!*((_QWORD *)this + 3813))
    v2 = 32;
  v3 = bswap32(*(_DWORD *)&v1[v2]);
  if (v3 >= 1)
  {
    v4 = &v1[v3];
    v5 = getpagesize();
    do
    {
      v6 = *v1;
      if (v8 >= v6)
        v6 = v8;
      v8 = v6;
      v1 += v5;
    }
    while (v1 < v4);
  }
  return 0;
}

uint64_t MEOWReader::ReadMetadataAsync(MEOWReader *this)
{
  uint64_t v1;
  unsigned int v2;
  _QWORD v4[2];

  v1 = 40;
  if (!*((_QWORD *)this + 3813))
    v1 = 32;
  v2 = bswap32(*(_DWORD *)(*((_QWORD *)this + 3804) + v1));
  v4[0] = 0;
  v4[1] = v2;
  fcntl(*(_DWORD *)this, 44, v4);
  return 0;
}

uint64_t MEOWReader::MakeMetadataResident(MEOWReader *this, int a2)
{
  uint64_t v2;
  unsigned int v3;
  _QWORD v5[2];

  if (a2 == 2)
  {
    v2 = 40;
    if (!*((_QWORD *)this + 3813))
      v2 = 32;
    v3 = bswap32(*(_DWORD *)(*((_QWORD *)this + 3804) + v2));
    v5[0] = 0;
    v5[1] = v3;
    fcntl(*(_DWORD *)this, 44, v5);
    return 0;
  }
  if (a2 == 1)
  {
    MEOWReader::TouchMetadata(this);
    return 0;
  }
  return 1;
}

uint64_t MEOWReader::PercentageResidentMetadata(MEOWReader *this)
{
  int v2;
  int v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  float v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;

  v2 = getpagesize();
  v3 = v2;
  v4 = *((_QWORD *)this + 3804);
  v5 = (const void *)(v2 * (v4 / v2) + v2);
  v6 = 40;
  if (!*((_QWORD *)this + 3813))
    v6 = 32;
  v7 = v4 - (_QWORD)v5 + (int)bswap32(*(_DWORD *)(v4 + v6));
  v8 = v7 / v2;
  v9 = (char *)operator new[]();
  mincore(v5, v7, v9);
  v10 = 0.0;
  if (v7 >= v3)
  {
    v11 = 0;
    if (v8 <= 1)
      v12 = 1;
    else
      v12 = v8;
    v13 = v9;
    do
    {
      if (*v13++)
        ++v11;
      --v12;
    }
    while (v12);
    v10 = (float)v11;
  }
  MEMORY[0x1D8233B90](v9, 0x1000C8077774924);
  return (int)((float)(v10 / (float)v8) * 100.0);
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,MEOWWordInstance const*,MEOWWordInstance const*,std::back_insert_iterator<MEOWVector<MEOWWordInstance>>,0>(uint64_t *a1, uint64_t *a2, MEOWVectorBase *this)
{
  uint64_t *v4;
  uint64_t v6;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      v6 = *v4++;
      MEOWVectorBase::Append(this);
      *(_QWORD *)(*(_QWORD *)this + 8 * *((_QWORD *)this + 2) - 8) = v6;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t MEOWTreePage::MEOWTreePage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E9367E10;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) = *(_WORD *)(a3 + 18);
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = malloc_type_malloc(0x2000uLL, 0x799C9CB2uLL);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(v4 + 32) + *(unsigned __int16 *)(a1 + 10);
  ++*(_QWORD *)(v4 + 24);
  *(_QWORD *)(v4 + 32) = v5;
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E9367E10;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) = *(_WORD *)(a3 + 18);
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = malloc_type_malloc(0x2000uLL, 0x799C9CB2uLL);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(v4 + 32) + *(unsigned __int16 *)(a1 + 10);
  ++*(_QWORD *)(v4 + 24);
  *(_QWORD *)(v4 + 32) = v5;
  return a1;
}

void MEOWTreePage::~MEOWTreePage(void **this)
{
  *this = &off_1E9367E10;
  free(this[4]);
}

{
  *this = &off_1E9367E10;
  free(this[4]);
}

{
  *this = &off_1E9367E10;
  free(this[4]);
  JUMPOUT(0x1D8233BA8);
}

BOOL MEOWTreePage::LowerBound(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v10;

  v10 = 0;
  v7 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, char *))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a3, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 8), &v10);
  v8 = *(unsigned __int16 *)(a1 + 8);
  if (v7 != v8)
  {
    *(_WORD *)a4 = a2;
    *(_WORD *)(a4 + 2 * a2) = v7;
    *(_QWORD *)(a4 + 8) = a1;
  }
  return v7 != v8;
}

BOOL MEOWTreePage::Insert(uint64_t a1, int a2, void *__src, unsigned __int16 *a4)
{
  unsigned __int16 *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  unsigned __int16 v12;

  v6 = &a4[a2];
  v7 = *(unsigned __int16 *)(a1 + 8);
  if (*a4 < a2)
    v6 = (unsigned __int16 *)(a1 + 8);
  v8 = *v6;
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(unsigned __int16 *)(v9 + 16);
  v11 = (char *)(*(_QWORD *)(a1 + 32) + v10 * v8);
  if (v8 < v7)
    memmove(&v11[v10], (const void *)(*(_QWORD *)(a1 + 32) + *(unsigned __int16 *)(v9 + 16) * (unint64_t)v8), (int)(v7 - v8) * (unint64_t)*(unsigned __int16 *)(v9 + 16));
  memcpy(v11, __src, v10);
  v12 = *(_WORD *)(a1 + 8) + 1;
  *(_WORD *)(a1 + 8) = v12;
  return *(unsigned __int16 *)(a1 + 10) == v12;
}

uint64_t MEOWTreePage::Rebalance(MEOWTreePage *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(MEOWTreePage *))(*(_QWORD *)this + 32))(this);
  ++*(_QWORD *)(*((_QWORD *)this + 3) + 40);
  return result;
}

void *MEOWTreePage::DoRebalance(MEOWTreePage *this, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void *result;
  uint64_t v16;
  size_t v17;

  v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 40) + 8 * a2 + 8);
  v10 = *(unsigned __int16 *)(*((_QWORD *)this + 3) + 16);
  v11 = (void *)(*(_QWORD *)(*((_QWORD *)this + 2) + 32) + v10 * a2);
  v12 = *((unsigned __int16 *)this + 4);
  if (v12 >= a3)
  {
    v16 = a4 - *(unsigned __int16 *)(v9 + 8);
    v17 = v16 * v10;
    memmove((void *)(*(_QWORD *)(v9 + 32) + v16 * v10), *(const void **)(v9 + 32), *(unsigned __int16 *)(v9 + 8) * (unint64_t)v10);
    if (a5)
    {
      v17 = (v16 - 1) * v10;
      memcpy((void *)(*(_QWORD *)(v9 + 32) + v17), v11, v10);
    }
    memcpy(*(void **)(v9 + 32), (const void *)(*((_QWORD *)this + 4) + v10 + v10 * a3), v17);
    result = memcpy(v11, (const void *)(*((_QWORD *)this + 4) + v10 * a3), v10);
  }
  else
  {
    if (a5)
    {
      v13 = *((_QWORD *)this + 4);
      *((_WORD *)this + 4) = v12 + 1;
      memcpy((void *)(v13 + v12 * (unint64_t)v10), v11, v10);
      v12 = *((unsigned __int16 *)this + 4);
    }
    v14 = (a3 - v12) * v10;
    memcpy((void *)(*((_QWORD *)this + 4) + v12 * (unint64_t)v10), *(const void **)(v9 + 32), v14);
    memcpy(v11, (const void *)(*(_QWORD *)(v9 + 32) + v14), v10);
    result = memmove(*(void **)(v9 + 32), (const void *)(*(_QWORD *)(v9 + 32) + v10 + v14), v10 * a4);
  }
  *((_WORD *)this + 4) = a3;
  *(_WORD *)(v9 + 8) = a4;
  return result;
}

uint64_t MEOWTreePage::Split(MEOWTreePage *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = operator new();
  v5 = *((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3);
  *(_QWORD *)v4 = &off_1E9367E10;
  *(_WORD *)(v4 + 8) = 0;
  *(_WORD *)(v4 + 10) = *(_WORD *)(v6 + 18);
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 24) = v6;
  *(_QWORD *)(v4 + 32) = malloc_type_malloc(0x2000uLL, 0x799C9CB2uLL);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(_QWORD *)(v7 + 32) + *(unsigned __int16 *)(v4 + 10);
  ++*(_QWORD *)(v7 + 24);
  *(_QWORD *)(v7 + 32) = v8;
  v9 = 8 * a2 + 8;
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 40) + v9) = v4;
  v10 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 40) + v9) + 8)
      + (unint64_t)*((unsigned __int16 *)this + 4);
  result = (*(uint64_t (**)(MEOWTreePage *, uint64_t, unint64_t, unint64_t, _QWORD))(*(_QWORD *)this + 32))(this, a2, v10 >> 1, v10 + ~(v10 >> 1), 0);
  ++*(_QWORD *)(*((_QWORD *)this + 3) + 40);
  return result;
}

void sub_1D228D5F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10B1C4009E930FDLL);
  _Unwind_Resume(a1);
}

uint64_t MEOWTreePage::Begin(uint64_t result, int a2, uint64_t a3)
{
  *(_WORD *)a3 = a2;
  *(_WORD *)(a3 + 2 * a2) = 0;
  *(_QWORD *)(a3 + 8) = result;
  return result;
}

uint64_t MEOWTreePage::Next(uint64_t result, int a2, uint64_t a3)
{
  unsigned __int16 v3;
  uint64_t v4;
  int v5;

  v3 = *(_WORD *)(a3 + 2 * a2) + 1;
  *(_WORD *)(a3 + 2 * a2) = v3;
  if (*(unsigned __int16 *)(result + 8) == v3)
  {
    v4 = a2 - 1;
    while (v4)
    {
      v5 = *(unsigned __int16 *)(a3 + 2 * v4);
      result = *(_QWORD *)(result + 16);
      --v4;
      LOWORD(a2) = a2 - 1;
      if (v5 != *(unsigned __int16 *)(result + 8))
        goto LABEL_7;
    }
    LOWORD(a2) = 0;
  }
LABEL_7:
  *(_WORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result;
  return result;
}

uint64_t MEOWTreePage::SanityCheck(MEOWTreePage *this, int a2, int a3)
{
  unsigned int v3;

  v3 = *((unsigned __int16 *)this + 4);
  if (!*((_WORD *)this + 4) || *((unsigned __int16 *)this + 5) <= v3)
    abort();
  if (a3)
  {
    printf("%.*s%8p %3u %08X %08X\n", a2, "               ", this, v3, **((_DWORD **)this + 4), *(_DWORD *)(*((_QWORD *)this + 4)+ (int)(v3 - 1) * (unint64_t)*(unsigned __int16 *)(*((_QWORD *)this + 3) + 16)));
    return *((unsigned __int16 *)this + 4);
  }
  return v3;
}

uint64_t MEOWTreePage::SetTree(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t MEOWTreeBranch::SetupBranches(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(this + 24);
  v2 = *(_QWORD *)(this + 32);
  v3 = *(unsigned __int16 *)(v1 + 20);
  *(_WORD *)(this + 10) = v3;
  *(_QWORD *)(this + 40) = v2 + 8 * ~v3 + 0x2000;
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(v1 + 32) + v3 - *(unsigned __int16 *)(v1 + 18);
  return this;
}

uint64_t MEOWTreeBranch::MEOWTreeBranch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_1E9367E10;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) = *(_WORD *)(a3 + 18);
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  v4 = (char *)malloc_type_malloc(0x2000uLL, 0x799C9CB2uLL);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(v5 + 24) + 1;
  v7 = *(_QWORD *)(v5 + 32) + *(unsigned __int16 *)(a1 + 10);
  *(_QWORD *)a1 = &off_1E9367E70;
  v8 = *(unsigned __int16 *)(v5 + 20);
  *(_WORD *)(a1 + 10) = v8;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = &v4[8 * ~v8 + 0x2000];
  v9 = v7 + v8 - *(unsigned __int16 *)(v5 + 18);
  *(_QWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 32) = v9;
  return a1;
}

uint64_t MEOWTreeBranch::MEOWTreeBranch(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  *(_QWORD *)a1 = &off_1E9367E10;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) = *(_WORD *)(a4 + 18);
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a4;
  v6 = (char *)malloc_type_malloc(0x2000uLL, 0x799C9CB2uLL);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(v7 + 24);
  v9 = *(_QWORD *)(v7 + 32) + *(unsigned __int16 *)(a1 + 10);
  *(_QWORD *)a1 = &off_1E9367E70;
  v10 = *(unsigned __int16 *)(v7 + 20);
  v11 = &v6[8 * ~v10 + 0x2000];
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v11;
  *(_WORD *)(a1 + 10) = v10;
  v12 = v9 + v10 - *(unsigned __int16 *)(v7 + 18);
  *(_QWORD *)(v7 + 24) = v8 + 1;
  *(_QWORD *)(v7 + 32) = v12;
  *(_QWORD *)v11 = a3;
  a3[2] = a1;
  (*(void (**)(_QWORD *, _QWORD))(*a3 + 40))(a3, 0);
  *(_WORD *)(a1 + 8) = 1;
  return a1;
}

void sub_1D228D890(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)v1 = v2;
  free(*(void **)(v1 + 32));
  _Unwind_Resume(a1);
}

void MEOWTreeBranch::~MEOWTreeBranch(MEOWTreeBranch *this)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 0;
  *(_QWORD *)this = &off_1E9367E70;
  do
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v2);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  while (v2++ < *((unsigned __int16 *)this + 4));
  *(_QWORD *)this = &off_1E9367E10;
  free(*((void **)this + 4));
}

{
  MEOWTreeBranch::~MEOWTreeBranch(this);
  JUMPOUT(0x1D8233BA8);
}

uint64_t MEOWTreeBranch::LowerBound(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;

  v12 = 0;
  v8 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, char *))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a3, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 8), &v12);
  v9 = v8;
  *(_WORD *)(a4 + 2 * a2) = v8;
  if (!v12)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v8);
    if (((*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, (a2 + 1), a3, a4) & 1) != 0)return 1;
    if (v9 == *(unsigned __int16 *)(a1 + 8))
      return 0;
  }
  *(_WORD *)a4 = a2;
  *(_QWORD *)(a4 + 8) = a1;
  return 1;
}

uint64_t MEOWTreeBranch::Insert(uint64_t a1, int a2, uint64_t a3, unsigned __int16 *a4)
{
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int16 v21;

  if (*a4 >= a2)
    v5 = &a4[a2];
  else
    v5 = (unsigned __int16 *)(a1 + 8);
  v6 = *v5;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6);
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 24))(v7, (a2 + 1));
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(_QWORD *)(v9 + 8 * v6);
    v11 = (7 * (unint64_t)*(unsigned __int16 *)(v10 + 10)) >> 3;
    v12 = *(unsigned __int16 *)(a1 + 8);
    v13 = v6 < v12;
    if ((_DWORD)v6)
      v14 = v6 >= v12;
    else
      v14 = 1;
    if (v14)
    {
      if (!(_DWORD)v6)
        goto LABEL_16;
      v15 = *(_QWORD *)(v9 + 8 * (v6 - 1));
      v16 = *(unsigned __int16 *)(v15 + 8);
    }
    else
    {
      v15 = *(_QWORD *)(v9 + 8 * (v6 - 1));
      v16 = *(unsigned __int16 *)(v15 + 8);
      if (v16 >= *(unsigned __int16 *)(*(_QWORD *)(v9 + 8 * v6 + 8) + 8))
        goto LABEL_17;
      v13 = 0;
    }
    if (v11 > v16)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
      result = 0;
      v17 = *(_QWORD *)(v15 + 24);
LABEL_19:
      ++*(_QWORD *)(v17 + 40);
      return result;
    }
LABEL_16:
    if (!v13)
    {
      LODWORD(v18) = v6 + 1;
LABEL_21:
      memmove((void *)(*(_QWORD *)(a1 + 32)+ v18 * (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 24) + 16)), (const void *)(*(_QWORD *)(a1 + 32)+ *(unsigned __int16 *)(*(_QWORD *)(a1 + 24) + 16) * (unint64_t)v6), (int)(v12 - v6) * (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 24) + 16));
      memmove((void *)(*(_QWORD *)(a1 + 40) + 8 * v6 + 16), (const void *)(*(_QWORD *)(a1 + 40) + 8 * v6 + 8), 8 * (*(unsigned __int16 *)(a1 + 8) - v6));
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 40))(v20, v6);
      v21 = *(_WORD *)(a1 + 8) + 1;
      *(_WORD *)(a1 + 8) = v21;
      return *(unsigned __int16 *)(a1 + 10) == v21;
    }
LABEL_17:
    v18 = v6 + 1;
    if (v11 > *(unsigned __int16 *)(*(_QWORD *)(v9 + 8 * (v6 + 1)) + 8))
    {
      v19 = *(unsigned __int16 *)(v10 + 8)
          + (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 40) + 8 * v18)
                                                  + 8)
          + 1;
      (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, v6, v19 >> 1, v19 + ~(v19 >> 1), 1);
      result = 0;
      v17 = *(_QWORD *)(v10 + 24);
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  return result;
}

void *MEOWTreeBranch::DoRebalance(MEOWTreeBranch *this, uint64_t a2, unint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 40) + 8 * a2 + 8);
  v11 = *((unsigned __int16 *)this + 4);
  v12 = a3 + 1;
  if (a3 + 1 <= v11)
  {
    v18 = *(unsigned __int16 *)(v10 + 8);
    if (*(_WORD *)(v10 + 8))
      v19 = a4 - v18;
    else
      v19 = a4 - v18 + 1;
    if (*(_WORD *)(v10 + 8))
      memmove((void *)(*(_QWORD *)(v10 + 40) + 8 * v19), *(const void **)(v10 + 40), 8 * v18 + 8);
    memcpy(*(void **)(v10 + 40), (const void *)(*((_QWORD *)this + 5) + 8 * a3 + 8), 8 * v19);
    if (v19)
    {
      v20 = *(uint64_t **)(v10 + 40);
      do
      {
        v21 = *v20++;
        *(_QWORD *)(v21 + 16) = v10;
        --v19;
      }
      while (v19);
    }
  }
  else
  {
    v13 = a3 + 1 - v11 - a5;
    memcpy((void *)(*((_QWORD *)this + 5) + 8 * v11 + 8 * a5), *(const void **)(v10 + 40), 8 * v13);
    memmove(*(void **)(v10 + 40), (const void *)(*(_QWORD *)(v10 + 40) + 8 * v13), 8 * a4 + 8);
    v14 = *((unsigned __int16 *)this + 4);
    if (v12 > v14)
    {
      v15 = a3 - v14 + 1;
      v16 = (uint64_t *)(*((_QWORD *)this + 5) + 8 * v14);
      do
      {
        v17 = *v16++;
        *(_QWORD *)(v17 + 16) = this;
        --v15;
      }
      while (v15);
    }
  }
  return MEOWTreePage::DoRebalance(this, a2, a3, a4, a5);
}

uint64_t MEOWTreeBranch::Split(MEOWTreeBranch *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = operator new();
  MEOWTreeBranch::MEOWTreeBranch(v4, *((_QWORD *)this + 2), *((_QWORD *)this + 3));
  v5 = 8 * a2 + 8;
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 40) + v5) = v4;
  v6 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 40) + v5) + 8)
     + (unint64_t)*((unsigned __int16 *)this + 4);
  result = (*(uint64_t (**)(MEOWTreeBranch *, uint64_t, unint64_t, unint64_t, _QWORD))(*(_QWORD *)this + 32))(this, a2, v6 >> 1, v6 + ~(v6 >> 1), 0);
  ++*(_QWORD *)(*((_QWORD *)this + 3) + 40);
  return result;
}

void sub_1D228DDD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10B1C40ADA3C39ALL);
  _Unwind_Resume(a1);
}

uint64_t MEOWTreeBranch::Begin(uint64_t a1, int a2, uint64_t a3)
{
  *(_WORD *)(a3 + 2 * a2) = 0;
  return (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 40) + 48))(**(_QWORD **)(a1 + 40), (a2 + 1));
}

uint64_t MEOWTreeBranch::Next(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int16 v4;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_WORD *)(a3 + 2 * a2) + 1;
  *(_WORD *)(a3 + 2 * a2) = v4;
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + 8 * v4) + 48))(*(_QWORD *)(v3 + 8 * v4), (a2 + 1));
}

uint64_t MEOWTreeBranch::SanityCheck(MEOWTreeBranch *this, int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = MEOWTreePage::SanityCheck(this, a2, a3);
  v7 = 0;
  v8 = (a2 + 1);
  do
  {
    v9 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v7);
    v6 += (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 64))(v9, v8, a3);
  }
  while (v7++ < *((unsigned __int16 *)this + 4));
  return v6;
}

uint64_t MEOWTreeBranch::SetTree(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = 0;
  *(_QWORD *)(a1 + 24) = a2;
  do
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v4);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 72))(v5, a2);
  }
  while (v4++ < *(unsigned __int16 *)(a1 + 8));
  return result;
}

void MEOWTreeBase::MEOWTreeBase(MEOWTreeBase *this, unsigned __int16 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E9367ED0;
  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 8) = a2;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_WORD *)this + 9) = 0x2000u / a2;
  *((_WORD *)this + 10) = 0x1FF8 / (a2 + 8);
  v3 = operator new();
  *(_QWORD *)v3 = &off_1E9367E10;
  *(_WORD *)(v3 + 8) = 0;
  *(_WORD *)(v3 + 10) = *((_WORD *)this + 9);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = this;
  *(_QWORD *)(v3 + 32) = malloc_type_malloc(0x2000uLL, 0x799C9CB2uLL);
  v4 = *(_QWORD *)(v3 + 24);
  v5 = *(_QWORD *)(v4 + 32) + *(unsigned __int16 *)(v3 + 10);
  ++*(_QWORD *)(v4 + 24);
  *(_QWORD *)(v4 + 32) = v5;
  *((_QWORD *)this + 6) = v3;
}

void sub_1D228DFD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10B1C4009E930FDLL);
  _Unwind_Resume(a1);
}

void MEOWTreeBase::~MEOWTreeBase(MEOWTreeBase *this)
{
  uint64_t v1;

  *(_QWORD *)this = off_1E9367ED0;
  v1 = *((_QWORD *)this + 6);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void *MEOWTreeBase::clear(MEOWTreeBase *this)
{
  uint64_t v2;
  uint64_t v3;
  void *result;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 6);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  v3 = operator new();
  *(_QWORD *)v3 = &off_1E9367E10;
  *(_WORD *)(v3 + 8) = 0;
  *(_WORD *)(v3 + 10) = *((_WORD *)this + 9);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = this;
  result = malloc_type_malloc(0x2000uLL, 0x799C9CB2uLL);
  *(_QWORD *)(v3 + 32) = result;
  v5 = *(_QWORD *)(v3 + 24);
  v6 = *(_QWORD *)(v5 + 32) + *(unsigned __int16 *)(v3 + 10);
  ++*(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 32) = v6;
  *((_QWORD *)this + 6) = v3;
  return result;
}

void sub_1D228E0E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10B1C4009E930FDLL);
  _Unwind_Resume(a1);
}

uint64_t MEOWTreeBase::LowerBound(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t result;
  unint64_t v5;

  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, unsigned __int16 *))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), 1, a2, a3);
  if ((result & 1) != 0)
  {
    v5 = *a3;
    if (*a3)
      v5 = *(_QWORD *)(*((_QWORD *)a3 + 1) + 32)
         + *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 24) + 16)
         * (unint64_t)a3[(v5 - 1) + 1];
  }
  else
  {
    v5 = 0;
    *a3 = 0;
  }
  *((_QWORD *)a3 + 2) = v5;
  return result;
}

unsigned __int16 *MEOWTreeIterBase::Deref(unsigned __int16 *this)
{
  unint64_t v1;

  v1 = *this;
  if (*this)
    v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 32)
       + *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 16)
       * (unint64_t)this[(v1 - 1) + 1];
  *((_QWORD *)this + 2) = v1;
  return this;
}

uint64_t MEOWTreeBase::Insert(MEOWTreeBase *this, const void *a2, const MEOWTreeIterBase *a3)
{
  uint64_t result;
  uint64_t v5;

  ++*((_QWORD *)this + 1);
  result = (*(uint64_t (**)(_QWORD, uint64_t, const void *, const MEOWTreeIterBase *))(**((_QWORD **)this + 6)
                                                                                              + 24))(*((_QWORD *)this + 6), 1, a2, a3);
  if ((_DWORD)result)
  {
    v5 = operator new();
    result = MEOWTreeBranch::MEOWTreeBranch(v5, 0, *((_QWORD **)this + 6), (uint64_t)this);
    *((_QWORD *)this + 6) = v5;
  }
  return result;
}

void sub_1D228E220(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10B1C40ADA3C39ALL);
  _Unwind_Resume(a1);
}

uint64_t MEOWTreeBase::Begin(MEOWTreeBase *this, MEOWTreeIterBase *a2)
{
  uint64_t result;
  unint64_t v4;

  result = (*(uint64_t (**)(_QWORD, uint64_t, MEOWTreeIterBase *))(**((_QWORD **)this + 6) + 48))(*((_QWORD *)this + 6), 1, a2);
  v4 = *(unsigned __int16 *)a2;
  if (*(_WORD *)a2)
    v4 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 32)
       + *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 24) + 16)
       * (unint64_t)*((unsigned __int16 *)a2 + (v4 - 1) + 1);
  *((_QWORD *)a2 + 2) = v4;
  return result;
}

uint64_t MEOWTreeBase::Swap(MEOWTreeBase *this, MEOWTreeBase *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 5);
  v7 = *((_QWORD *)this + 6);
  v8 = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 6) = v8;
  *((_QWORD *)a2 + 5) = v6;
  *((_QWORD *)a2 + 6) = v7;
  (*(void (**)(_QWORD, MEOWTreeBase *))(**((_QWORD **)this + 6) + 72))(*((_QWORD *)this + 6), this);
  return (*(uint64_t (**)(_QWORD, MEOWTreeBase *))(**((_QWORD **)a2 + 6) + 72))(*((_QWORD *)a2 + 6), a2);
}

uint64_t MEOWTreeBase::Dump(MEOWTreeBase *this)
{
  uint64_t v2;
  uint64_t result;

  printf("%lu Elements %lu Pages (%4.1f%%) %lu Rebalances\n", *((_QWORD *)this + 1), *((_QWORD *)this + 3), (double)*((unint64_t *)this + 1) * 100.0 / (double)*((unint64_t *)this + 4), *((_QWORD *)this + 5));
  v2 = *((_QWORD *)this + 1);
  result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 6) + 64))(*((_QWORD *)this + 6), 1, 0);
  if (v2 != result)
    abort();
  return result;
}

uint64_t MEOWTreeIterBase::operator++(uint64_t result)
{
  unsigned __int16 *v1;
  unint64_t v2;

  if (*(_WORD *)result)
  {
    v1 = (unsigned __int16 *)result;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 56))(*(_QWORD *)(result + 8));
    v2 = *v1;
    if (*v1)
      v2 = *(_QWORD *)(*((_QWORD *)v1 + 1) + 32)
         + *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)v1 + 1) + 24) + 16)
         * (unint64_t)v1[(v2 - 1) + 1];
    *((_QWORD *)v1 + 2) = v2;
  }
  return result;
}

BOOL MEOWTreeIterBase::Equal(MEOWTreeIterBase *this, const MEOWTreeIterBase *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  v2 = *(unsigned __int16 *)this;
  if ((_DWORD)v2 != *(unsigned __int16 *)a2)
    return 0;
  if (!*(_WORD *)this)
    return 1;
  if (*((_QWORD *)this + 1) != *((_QWORD *)a2 + 1) || *((unsigned __int16 *)this + 1) != *((unsigned __int16 *)a2 + 1))
    return 0;
  v3 = 0;
  do
  {
    v4 = v3;
    if (v2 - 1 == v3)
      break;
    v5 = *((unsigned __int16 *)this + v3 + 2);
    v6 = *((unsigned __int16 *)a2 + v3++ + 2);
  }
  while (v5 == v6);
  return v4 + 1 >= v2;
}

_QWORD *MTMBCFArrayBuilder::AddElement(_QWORD *this, const void *a2)
{
  _QWORD *v3;

  if (a2)
  {
    v3 = this;
    this = MEOWVectorBase::Append(this);
    *(_QWORD *)(*v3 + 8 * v3[2] - 8) = a2;
  }
  return this;
}

CFArrayRef MTMBCFArrayBuilder::BuildArray(MTMBCFArrayBuilder *this)
{
  return CFArrayCreate(0, *(const void ***)this, *((_QWORD *)this + 2), MEMORY[0x1E0C9B378]);
}

void MTMBCFArrayBuilder::~MTMBCFArrayBuilder(MTMBCFArrayBuilder *this)
{
  unint64_t v2;

  if (*((_QWORD *)this + 2))
  {
    v2 = 0;
    do
      CFRelease(*(CFTypeRef *)(*(_QWORD *)this + 8 * v2++));
    while (v2 < *((_QWORD *)this + 2));
  }
  MEOWVectorBase::~MEOWVectorBase((void **)this);
}

void MTMBCFDictBuilder::MTMBCFDictBuilder(MTMBCFDictBuilder *this, const __CFString *a2)
{
  uint64_t v4;
  CFTypeRef v5;

  MEOWVectorBase::MEOWVectorBase(this, 8);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)(v4 + 32), 8);
  v5 = CFRetain(CFSTR("IsA"));
  MTMBCFDictBuilder::AddPair(this, v5, a2);
}

void sub_1D228E590(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *MTMBCFDictBuilder::AddPair(_QWORD *this, const void *a2, const void *a3)
{
  _QWORD *v5;

  if (a2)
  {
    if (a3)
    {
      v5 = this;
      MEOWVectorBase::Append(this);
      *(_QWORD *)(*v5 + 8 * v5[2] - 8) = a2;
      this = MEOWVectorBase::Append(v5 + 4);
      *(_QWORD *)(v5[4] + 8 * v5[6] - 8) = a3;
    }
  }
  return this;
}

void MTMBCFDictBuilder::MTMBCFDictBuilder(MTMBCFDictBuilder *this, const __CFString *a2, MTMBCFArrayBuilder *a3)
{
  uint64_t v6;
  CFTypeRef v7;
  CFArrayRef v8;
  CFTypeRef v9;

  MEOWVectorBase::MEOWVectorBase(this, 8);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)(v6 + 32), 8);
  v7 = CFRetain(CFSTR("IsA"));
  MTMBCFDictBuilder::AddPair(this, v7, a2);
  v8 = CFArrayCreate(0, *(const void ***)a3, *((_QWORD *)a3 + 2), MEMORY[0x1E0C9B378]);
  v9 = CFRetain(CFSTR("Children"));
  MTMBCFDictBuilder::AddPair(this, v9, v8);
}

void sub_1D228E6B4(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

CFDictionaryRef MTMBCFDictBuilder::BuildDict(MTMBCFDictBuilder *this)
{
  return CFDictionaryCreate(0, *(const void ***)this, *((const void ***)this + 4), *((_QWORD *)this + 2), MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
}

void MTMBCFDictBuilder::~MTMBCFDictBuilder(MTMBCFDictBuilder *this)
{
  unint64_t v2;

  if (*((_QWORD *)this + 2))
  {
    v2 = 0;
    do
    {
      CFRelease(*(CFTypeRef *)(*(_QWORD *)this + 8 * v2));
      CFRelease(*(CFTypeRef *)(*((_QWORD *)this + 4) + 8 * v2++));
    }
    while (v2 < *((_QWORD *)this + 2));
  }
  MEOWVectorBase::~MEOWVectorBase((void **)this + 4);
  MEOWVectorBase::~MEOWVectorBase((void **)this);
}

void MTMBLogDiphones::MTMBLogDiphones(MTMBLogDiphones *this, __CFArray *a2, MTMBDiphoneStatistics *a3)
{
  *(_QWORD *)this = &off_1E9367F30;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 4) = a3;
}

{
  *(_QWORD *)this = &off_1E9367F30;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 4) = a3;
}

void MTMBLogDiphones::VisitSentence(MTMBLogDiphones *this, MTFESpeechElement *a2)
{
  const __CFString *v4;
  CFDictionaryRef v5;
  void **keys[8];
  _BYTE v7[32];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v7, 8);
  *((_QWORD *)this + 2) = v7;
  MTFESpeechElement::VisitChildren(a2, this);
  if (*((_QWORD *)this + 1))
  {
    v4 = (const __CFString *)CFRetain(CFSTR("Sentence"));
    MTMBCFDictBuilder::MTMBCFDictBuilder((MTMBCFDictBuilder *)keys, v4, (MTMBCFArrayBuilder *)v7);
    v5 = CFDictionaryCreate(0, (const void **)keys[0], (const void **)keys[4], (CFIndex)keys[2], MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFArrayAppendValue(*((CFMutableArrayRef *)this + 1), v5);
    CFRelease(v5);
    MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
  }
  MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)v7);
}

void sub_1D228E850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)va);
  _Unwind_Resume(a1);
}

void MTMBLogDiphones::VisitIntonationalPhrase(MTMBLogDiphones *this, MTFESpeechElement *a2)
{
  _QWORD *v4;
  const __CFString *v5;
  int v6;
  const __CFString *v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFDictionaryRef v10;
  void **keys[8];
  _BYTE v12[32];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v12, 8);
  v4 = (_QWORD *)*((_QWORD *)this + 2);
  *((_BYTE *)this + 26) = BYTE6(a2[2].var6) == 71;
  *((_QWORD *)this + 2) = v12;
  MTFESpeechElement::VisitChildren(a2, this);
  *((_QWORD *)this + 2) = v4;
  if (*((_QWORD *)this + 1))
  {
    v5 = (const __CFString *)CFRetain(CFSTR("IntonationalPhrase"));
    MTMBCFDictBuilder::MTMBCFDictBuilder((MTMBCFDictBuilder *)keys, v5, (MTMBCFArrayBuilder *)v12);
    v6 = *((unsigned __int8 *)this + 26);
    v7 = CFSTR("H%");
    if (!v6 && (BYTE6(a2[2].var6) & 0xFE) != 0x44)
      v7 = CFSTR("L%");
    v8 = CFRetain(CFSTR("FinalBoundary"));
    v9 = CFRetain(v7);
    MTMBCFDictBuilder::AddPair(keys, v8, v9);
    v10 = CFDictionaryCreate(0, (const void **)keys[0], (const void **)keys[4], (CFIndex)keys[2], MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v10)
    {
      MEOWVectorBase::Append(v4);
      *(_QWORD *)(*v4 + 8 * v4[2] - 8) = v10;
    }
    MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
  }
  MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)v12);
}

void sub_1D228E9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)va);
  _Unwind_Resume(a1);
}

void MTMBLogDiphones::VisitIntermediatePhrase(MTMBLogDiphones *this, MTFESpeechElement *a2)
{
  _QWORD *v4;
  const __CFString *v5;
  const __CFString *v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFDictionaryRef v9;
  void **keys[8];
  _BYTE v11[32];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v11, 8);
  v4 = (_QWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v11;
  MTFESpeechElement::VisitChildren(a2, this);
  *((_QWORD *)this + 2) = v4;
  if (*((_QWORD *)this + 1))
  {
    v5 = (const __CFString *)CFRetain(CFSTR("IntermediatePhrase"));
    MTMBCFDictBuilder::MTMBCFDictBuilder((MTMBCFDictBuilder *)keys, v5, (MTMBCFArrayBuilder *)v11);
    v6 = CFSTR("L-");
    if (a2->var5->var4 == a2 && *((_BYTE *)this + 26))
      v6 = CFSTR("H-");
    v7 = CFRetain(CFSTR("PhraseAccent"));
    v8 = CFRetain(v6);
    MTMBCFDictBuilder::AddPair(keys, v7, v8);
    v9 = CFDictionaryCreate(0, (const void **)keys[0], (const void **)keys[4], (CFIndex)keys[2], MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v9)
    {
      MEOWVectorBase::Append(v4);
      *(_QWORD *)(*v4 + 8 * v4[2] - 8) = v9;
    }
    MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
  }
  MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)v11);
}

void sub_1D228EAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)va);
  _Unwind_Resume(a1);
}

void MTMBLogDiphones::VisitWord(MTMBLogDiphones *this, MTFESpeechElement *a2)
{
  _QWORD *v4;
  const __CFString *v5;
  CFTypeRef v6;
  CFStringRef v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFDictionaryRef v13;
  CFTypeRef v14;
  CFDictionaryRef v15;
  CFTypeRef v16;
  CFDictionaryRef v17;
  CFTypeRef v18;
  CFStringRef v19;
  unint64_t v20;
  const char *v21;
  CFStringRef v22;
  CFTypeRef v23;
  CFArrayRef v24;
  CFDictionaryRef v25;
  void **keys[2];
  CFIndex numValues;
  void **values;
  void **v29[8];
  _BYTE v30[32];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v30, 8);
  v4 = (_QWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v30;
  MTFESpeechElement::VisitChildren(a2, this);
  *((_QWORD *)this + 2) = v4;
  if (*((_QWORD *)this + 1))
  {
    v5 = (const __CFString *)CFRetain(CFSTR("Word"));
    MTMBCFDictBuilder::MTMBCFDictBuilder((MTMBCFDictBuilder *)v29, v5, (MTMBCFArrayBuilder *)v30);
    if (LOBYTE(a2[3].var5))
    {
      v6 = CFRetain(CFSTR("Text"));
      v7 = CFStringCreateWithCString(0, (const char *)&a2[3].var5, 0x8000100u);
      MTMBCFDictBuilder::AddPair(v29, v6, v7);
    }
    if ((BYTE1(a2[1].var0) & 0x10) != 0)
    {
      v8 = CFRetain(CFSTR("MorphEnding"));
      v9 = CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
      MTMBCFDictBuilder::AddPair(v29, v8, v9);
    }
    if (HIBYTE(a2[1].var0) - 1 <= 1)
    {
      v10 = CFRetain(CFSTR("Compound"));
      v11 = CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
      MTMBCFDictBuilder::AddPair(v29, v10, v11);
    }
    if (a2[4].var6)
    {
      MTMBCFDictBuilder::MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
      v12 = CFRetain(CFSTR("Start"));
      v13 = DiphoneDict((char)a2[4].var6->var0, BYTE1(a2[4].var6->var0), bswap32(WORD1(a2[4].var6->var0)) >> 16);
      MTMBCFDictBuilder::AddPair(keys, v12, v13);
      v14 = CFRetain(CFSTR("End"));
      v15 = DiphoneDict(BYTE4(a2[4].var6->var0), BYTE5(a2[4].var6->var0), bswap32(HIWORD(a2[4].var6->var0)) >> 16);
      MTMBCFDictBuilder::AddPair(keys, v14, v15);
      v16 = CFRetain(CFSTR("Instance"));
      v17 = CFDictionaryCreate(0, (const void **)keys[0], (const void **)values, numValues, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      MTMBCFDictBuilder::AddPair(v29, v16, v17);
      MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
    }
    if (BYTE6(a2[1].var4) != 255)
    {
      v18 = CFRetain(CFSTR("PartOfSpeech"));
      v19 = CFStringCreateWithCString(0, *(const char **)(MEMORY[0x1E0DA8E90] + 8 * BYTE6(a2[1].var4)), 0x8000100u);
      MTMBCFDictBuilder::AddPair(v29, v18, v19);
    }
    if (WORD2(a2[1].var5))
    {
      MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)keys, 8);
      if (WORD2(a2[1].var5))
      {
        v20 = 0;
        do
        {
          v21 = (const char *)SLTagEng::Name((SLTagEng *)*((unsigned __int16 *)&a2[1].var5 + v20 + 3));
          v22 = CFStringCreateWithCString(0, v21, 0x8000100u);
          if (v22)
          {
            MEOWVectorBase::Append(keys);
            keys[0][numValues - 1] = (void *)v22;
          }
          ++v20;
        }
        while (v20 < WORD2(a2[1].var5));
      }
      v23 = CFRetain(CFSTR("Tags"));
      v24 = CFArrayCreate(0, (const void **)keys[0], numValues, MEMORY[0x1E0C9B378]);
      MTMBCFDictBuilder::AddPair(v29, v23, v24);
      MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)keys);
    }
    v25 = CFDictionaryCreate(0, (const void **)v29[0], (const void **)v29[4], (CFIndex)v29[2], MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v25)
    {
      MEOWVectorBase::Append(v4);
      *(_QWORD *)(*v4 + 8 * v4[2] - 8) = v25;
    }
    MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)v29);
  }
  MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)v30);
}

void sub_1D228EE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)va);
  MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)(v9 - 80));
  _Unwind_Resume(a1);
}

void MTMBLogDiphones::VisitSyllable(MTMBLogDiphones *this, MTFESpeechElement *a2)
{
  _QWORD *v4;
  const __CFString *v5;
  CFDictionaryRef v6;
  void **keys[8];
  _BYTE v8[32];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v8, 8);
  v4 = (_QWORD *)*((_QWORD *)this + 2);
  *((_WORD *)this + 12) = HIWORD(a2[1].var0);
  *((_QWORD *)this + 2) = v8;
  MTFESpeechElement::VisitChildren(a2, this);
  *((_QWORD *)this + 2) = v4;
  if (*((_QWORD *)this + 1))
  {
    v5 = (const __CFString *)CFRetain(CFSTR("Syllable"));
    MTMBCFDictBuilder::MTMBCFDictBuilder((MTMBCFDictBuilder *)keys, v5, (MTMBCFArrayBuilder *)v8);
    v6 = CFDictionaryCreate(0, (const void **)keys[0], (const void **)keys[4], (CFIndex)keys[2], MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v6)
    {
      MEOWVectorBase::Append(v4);
      *(_QWORD *)(*v4 + 8 * v4[2] - 8) = v6;
    }
    MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
  }
  MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)v8);
}

void sub_1D228EFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)&a9);
  MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)&a17);
  _Unwind_Resume(a1);
}

MTMBDiphoneStatistics *MTMBLogDiphones::VisitPhoneme(MTMBLogDiphones *this, MTFEPhoneme *a2)
{
  const __CFString *v4;
  uint64_t var9;
  char **v6;
  const char *v7;
  CFTypeRef v8;
  CFStringRef v9;
  CFTypeRef v10;
  CFStringRef v11;
  CFTypeRef v12;
  CFDictionaryRef v13;
  CFTypeRef v14;
  CFDictionaryRef v15;
  CFTypeRef v16;
  CFDictionaryRef v17;
  _QWORD *v18;
  CFDictionaryRef v19;
  MTMBDiphoneStatistics *result;
  void **keys[8];
  void **v22[8];

  if (!*((_QWORD *)this + 1))
    goto LABEL_16;
  v4 = (const __CFString *)CFRetain(CFSTR("Phoneme"));
  MTMBCFDictBuilder::MTMBCFDictBuilder((MTMBCFDictBuilder *)v22, v4);
  var9 = a2->var9;
  if (!a2->var10)
  {
    v6 = (char **)MEMORY[0x1E0DA8EB0];
    goto LABEL_6;
  }
  LODWORD(var9) = var9 - 46;
  if (var9 < 5)
  {
    var9 = (char)var9;
    v6 = off_1E9367FE8;
LABEL_6:
    v7 = v6[var9];
    goto LABEL_8;
  }
  v7 = "!!!";
LABEL_8:
  v8 = CFRetain(CFSTR("Name"));
  v9 = CFStringCreateWithCString(0, v7, 0x8000100u);
  MTMBCFDictBuilder::AddPair(v22, v8, v9);
  if (*((_WORD *)this + 12) && (*(_DWORD *)(MEMORY[0x1E0DA8EC8] + 4 * a2->var9) & 1) != 0)
  {
    v10 = CFRetain(CFSTR("Accent"));
    v11 = CFStringCreateWithCString(0, MTFEToBI::sTone[*((__int16 *)this + 12)], 0x8000100u);
    MTMBCFDictBuilder::AddPair(v22, v10, v11);
  }
  if (a2->var21)
  {
    MTMBCFDictBuilder::MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
    v12 = CFRetain(CFSTR("Left"));
    v13 = DiphoneDict(a2->var20, a2->var21, a2->var18);
    MTMBCFDictBuilder::AddPair(keys, v12, v13);
    v14 = CFRetain(CFSTR("Right"));
    v15 = DiphoneDict(a2->var21, a2->var22, a2->var19);
    MTMBCFDictBuilder::AddPair(keys, v14, v15);
    v16 = CFRetain(CFSTR("Instance"));
    v17 = CFDictionaryCreate(0, (const void **)keys[0], (const void **)keys[4], (CFIndex)keys[2], MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    MTMBCFDictBuilder::AddPair(v22, v16, v17);
    MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
  }
  v18 = (_QWORD *)*((_QWORD *)this + 2);
  v19 = CFDictionaryCreate(0, (const void **)v22[0], (const void **)v22[4], (CFIndex)v22[2], MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v19)
  {
    MEOWVectorBase::Append(v18);
    *(_QWORD *)(*v18 + 8 * v18[2] - 8) = v19;
  }
  MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)v22);
LABEL_16:
  result = (MTMBDiphoneStatistics *)*((_QWORD *)this + 4);
  if (result)
  {
    if (a2->var21)
    {
      MTMBDiphoneStatistics::LogDiphone(result, a2->var20, a2->var21, a2->var18);
      return MTMBDiphoneStatistics::LogDiphone(*((MTMBDiphoneStatistics **)this + 4), a2->var21, a2->var22, a2->var19);
    }
  }
  return result;
}

void sub_1D228F22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)va);
  _Unwind_Resume(a1);
}

CFDictionaryRef DiphoneDict(char a1, char a2, uint64_t a3)
{
  CFTypeRef v3;
  CFNumberRef v4;
  CFTypeRef v5;
  CFNumberRef v6;
  CFTypeRef v7;
  CFNumberRef v8;
  CFDictionaryRef v9;
  void **keys[8];
  uint64_t v12;
  char v13;
  char valuePtr;

  valuePtr = a1;
  v13 = a2;
  v12 = a3;
  MTMBCFDictBuilder::MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
  v3 = CFRetain(CFSTR("FirstPhoneme"));
  v4 = CFNumberCreate(0, kCFNumberSInt8Type, &valuePtr);
  MTMBCFDictBuilder::AddPair(keys, v3, v4);
  v5 = CFRetain(CFSTR("SecondPhoneme"));
  v6 = CFNumberCreate(0, kCFNumberSInt8Type, &v13);
  MTMBCFDictBuilder::AddPair(keys, v5, v6);
  v7 = CFRetain(CFSTR("Index"));
  v8 = CFNumberCreate(0, kCFNumberLongType, &v12);
  MTMBCFDictBuilder::AddPair(keys, v7, v8);
  v9 = CFDictionaryCreate(0, (const void **)keys[0], (const void **)keys[4], (CFIndex)keys[2], MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
  return v9;
}

void sub_1D228F34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)&a9);
  _Unwind_Resume(a1);
}

void MTMBLogDiphones::~MTMBLogDiphones(MTMBLogDiphones *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void MTMBCFDictBuilder::MTMBCFDictBuilder(MTMBCFDictBuilder *this)
{
  uint64_t v1;

  MEOWVectorBase::MEOWVectorBase(this, 8);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)(v1 + 32), 8);
}

void sub_1D228F3BC(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void MT3UnicodeString::MT3UnicodeString(MT3UnicodeString *this, CFStringRef theString)
{
  void **v4;
  CFIndex Length;
  const UChar *CharactersPtr;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *i;
  int32_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  char *v15;
  int j;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  const __CFString *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  CFIndex v37;
  CFMutableStringRef MutableCopy;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  const __CFString *v49;
  CFIndex v50;
  CFIndex v51;
  CFMutableStringRef v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  const void *v57;
  CFStringRef v58;
  char *v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  __n128 (*v68)(_QWORD *, uint64_t);
  void (*v69)(uint64_t);
  void *__p;
  void *v71;
  uint64_t v72;
  UCharIterator iter;
  int v74;
  UniChar *v75;
  UniChar *v76;
  uint64_t v77;
  _BYTE v78[48];
  uint64_t v79;
  CFRange v80;
  CFRange v81;

  v79 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (void **)((char *)this + 8);
  *(_QWORD *)this = &off_1E9368020;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = (char *)this + 40;
  *((_QWORD *)this + 6) = (char *)this + 40;
  v59 = (char *)this + 40;
  *((_QWORD *)this + 7) = 0;
  Length = CFStringGetLength(theString);
  CharactersPtr = CFStringGetCharactersPtr(theString);
  v75 = 0;
  v76 = 0;
  v77 = 0;
  isCurrentlyProcessingEmoji = 0;
  if (!CharactersPtr)
  {
    std::vector<unsigned short>::resize((uint64_t)&v75, Length);
    CharactersPtr = v75;
    v80.location = 0;
    v80.length = Length;
    CFStringGetCharacters(theString, v80, v75);
  }
  v74 = 0;
  uiter_setString(&iter, CharactersPtr, Length);
  v58 = theString;
  v7 = (_QWORD *)((char *)this + 24);
  v8 = 24;
  for (i = v78; ; i = v60)
  {
    v10 = ((uint64_t (*)(UCharIterator *, uint64_t))iter.getIndex)(&iter, 1);
    v11 = unorm_next();
    v12 = v11;
    if (v74 != 15 || (int)v11 <= (int)v8)
    {
      v14 = v11;
      v12 = v8;
    }
    else
    {
      if (v78 != i)
        free(i);
      i = malloc_type_malloc(2 * v12, 0x1000040BDFB0063uLL);
      if (i)
      {
        iter.index = v10;
        v74 = 0;
        v14 = unorm_next();
      }
      else
      {
        v14 = v12;
      }
    }
    v15 = (char *)*((_QWORD *)this + 2);
    if (v14 < 1)
      break;
    v60 = i;
    for (j = 0; j != v14; ++j)
    {
      if ((unint64_t)v15 >= *v7)
      {
        v18 = (char *)*v4;
        v19 = (v15 - (_BYTE *)*v4) >> 3;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
        v21 = *v7 - (_QWORD)v18;
        if (v21 >> 2 > v20)
          v20 = v21 >> 2;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)this + 24, v22);
          v18 = (char *)*((_QWORD *)this + 1);
          v15 = (char *)*((_QWORD *)this + 2);
        }
        else
        {
          v23 = 0;
        }
        v24 = &v23[8 * v19];
        *(_QWORD *)v24 = v10;
        v17 = v24 + 8;
        while (v15 != v18)
        {
          v25 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *((_QWORD *)v24 - 1) = v25;
          v24 -= 8;
        }
        *((_QWORD *)this + 1) = v24;
        *((_QWORD *)this + 2) = v17;
        *((_QWORD *)this + 3) = &v23[8 * v22];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_QWORD *)v15 = v10;
        v17 = v15 + 8;
      }
      *((_QWORD *)this + 2) = v17;
      v15 = v17;
    }
    v8 = v12;
  }
  if ((unint64_t)v15 >= *v7)
  {
    v28 = (char *)*v4;
    v29 = (v15 - (_BYTE *)*v4) >> 3;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 61)
      std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
    v31 = *v7 - (_QWORD)v28;
    if (v31 >> 2 > v30)
      v30 = v31 >> 2;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    if (v32)
    {
      v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)this + 24, v32);
      v28 = (char *)*((_QWORD *)this + 1);
      v15 = (char *)*((_QWORD *)this + 2);
    }
    else
    {
      v33 = 0;
    }
    v34 = &v33[8 * v29];
    v35 = &v33[8 * v32];
    *(_QWORD *)v34 = v10;
    v26 = v34 + 8;
    if (v15 == v28)
    {
      v27 = v58;
    }
    else
    {
      v27 = v58;
      do
      {
        v36 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v34 - 1) = v36;
        v34 -= 8;
      }
      while (v15 != v28);
    }
    *((_QWORD *)this + 1) = v34;
    *((_QWORD *)this + 2) = v26;
    *((_QWORD *)this + 3) = v35;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *(_QWORD *)v15 = v10;
    v26 = v15 + 8;
    v27 = v58;
  }
  *((_QWORD *)this + 2) = v26;
  if (v78 != i && i)
    free(i);
  if (CEMStringContainsEmoji())
  {
    v65 = 0;
    v66 = &v65;
    v67 = 0x4002000000;
    v68 = __Block_byref_object_copy_;
    v69 = __Block_byref_object_dispose_;
    v71 = 0;
    v72 = 0;
    __p = 0;
    v61 = 0;
    v62 = &v61;
    v63 = 0x2000000000;
    v64 = 0;
    v37 = CFStringGetLength(v27);
    MutableCopy = CFStringCreateMutableCopy(0, v37, v27);
    if (EmojiLocaleData(void)::token != -1)
      dispatch_once(&EmojiLocaleData(void)::token, &__block_literal_global_1);
    CFStringGetLength(v27);
    CEMEnumerateEmojiTokensInStringWithLocaleAndBlock();
    v39 = v66[5];
    v40 = v66[6];
    if (v39 != v40)
    {
      v41 = v40 - v39;
      if (v41 >= 1)
      {
        v42 = (unint64_t)v41 >> 4;
        v43 = v42 + 1;
        v44 = 16 * v42;
        do
        {
          v45 = v66[5];
          if (v43 - 2 >= (v66[6] - v45) >> 4)
            std::vector<CFRange>::__throw_out_of_range[abi:ne180100]();
          v46 = *(_QWORD *)(v45 + v44 - 16);
          v47 = *(_QWORD *)(v45 + v44 - 8);
          if (v46 < CFStringGetLength(MutableCopy) - 1)
          {
            CFArrayGetValueAtIndex((CFArrayRef)v62[3], v43 - 2);
            v48 = (const void *)CEMEmojiTokenCreateWithString();
            v49 = (const __CFString *)CEMEmojiTokenCopyName();
            CFRelease(v48);
            if (v49)
            {
              v50 = CFStringGetLength(MutableCopy);
              MT3UnicodeString::AddMapping(this, v46, v47, v49, v50, 1);
              v51 = CFStringGetLength(v49);
              v52 = CFStringCreateMutableCopy(0, v51, v49);
              CFRelease(v49);
              CFStringInsert(v52, 0, CFSTR("( "));
              CFStringAppend(v52, CFSTR(")"));
              v81.location = v46;
              v81.length = v47;
              CFStringReplace(MutableCopy, v81, v52);
              v53 = operator new(0x18uLL);
              v53[2] = v47 + v46;
              v54 = (_QWORD *)*((_QWORD *)this + 6);
              *v53 = v59;
              v53[1] = v54;
              *v54 = v53;
              v55 = *((_QWORD *)this + 7);
              *((_QWORD *)this + 6) = v53;
              *((_QWORD *)this + 7) = v55 + 1;
              v56 = operator new(0x18uLL);
              v56[1] = v53;
              v56[2] = v46;
              *v56 = v59;
              *v53 = v56;
              *((_QWORD *)this + 6) = v56;
              *((_QWORD *)this + 7) = v55 + 2;
              CFRelease(v52);
            }
          }
          --v43;
          v44 -= 16;
        }
        while (v43 > 1);
      }
    }
    v57 = (const void *)v62[3];
    if (v57)
      CFRelease(v57);
    *((_QWORD *)this + 4) = MutableCopy;
    _Block_object_dispose(&v61, 8);
    _Block_object_dispose(&v65, 8);
    if (__p)
    {
      v71 = __p;
      operator delete(__p);
    }
  }
  else
  {
    *((_QWORD *)this + 4) = CFRetain(v27);
  }
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
}

void sub_1D228FA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;
  void **v30;
  uint64_t v31;
  void *v33;
  void *v34;

  v33 = *(void **)(v31 - 168);
  if (v33)
  {
    *(_QWORD *)(v31 - 160) = v33;
    operator delete(v33);
  }
  std::__list_imp<SpeechChannelManager *>::clear(a11);
  v34 = *v30;
  if (*v30)
  {
    *(_QWORD *)(v29 + 16) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<unsigned short>::__append((char **)a1, a2 - v2);
  }
}

__n128 __Block_byref_object_copy_(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN16MT3UnicodeStringC2EPK10__CFString_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __CFArray *v19;
  const void *String;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v7 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
  v8 = (char *)v7[6];
  v9 = v7[7];
  if ((unint64_t)v8 >= v9)
  {
    v11 = (char *)v7[5];
    v12 = (v8 - v11) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
    v14 = v9 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CFRange>>((uint64_t)(v7 + 7), v15);
      v11 = (char *)v7[5];
      v8 = (char *)v7[6];
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[16 * v12];
    v18 = &v16[16 * v15];
    *(_QWORD *)v17 = a3;
    *((_QWORD *)v17 + 1) = a4;
    v10 = v17 + 16;
    if (v8 != v11)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v8 - 1);
        v17 -= 16;
        v8 -= 16;
      }
      while (v8 != v11);
      v11 = (char *)v7[5];
    }
    v7[5] = v17;
    v7[6] = v10;
    v7[7] = v18;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_QWORD *)v8 = a3;
    *((_QWORD *)v8 + 1) = a4;
    v10 = v8 + 16;
  }
  v7[6] = v10;
  v19 = *(__CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  String = (const void *)CEMEmojiTokenGetString();
  CFArrayAppendValue(v19, String);
}

void MT3UnicodeString::AddMapping(MT3UnicodeString *this, uint64_t a2, uint64_t a3, CFStringRef theString, uint64_t a5, int a6)
{
  CFIndex Length;
  CFIndex v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  Length = CFStringGetLength(theString);
  v12 = Length;
  v13 = 4;
  if (a6)
  {
    v14 = 2;
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v15 = a5 + 1;
  std::vector<long>::resize((uint64_t)this + 8, v15 - a3 + v13 + Length);
  if (v15 != a3 + a2)
    memmove((void *)(*((_QWORD *)this + 2) - (8 * v15 - 8 * (a3 + a2))), (const void *)(*((_QWORD *)this + 1) + 8 * (a3 + a2)), 8 * v15 - 8 * (a3 + a2));
  v16 = *((_QWORD *)this + 1);
  v17 = v12 + v14 + 1;
  if (v12 + v14 != -1)
  {
    v18 = (_QWORD *)(v16 + 8 * a2 + 8);
    do
    {
      *v18++ = *(_QWORD *)(v16 + 8 * a2);
      --v17;
    }
    while (v17);
  }
  v19 = (_QWORD *)(v16 + 8 * (v12 + v14 + a2));
  v20 = v19[2];
  *v19 = v20;
  v19[1] = v20;
}

uint64_t MT3UnicodeString::getTextWithEmojiDesc(MT3UnicodeString *this)
{
  return *((_QWORD *)this + 4);
}

void std::vector<long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<long>::__append((char **)a1, a2 - v2);
  }
}

uint64_t MT3UnicodeString::shouldReturnWordCallback(MT3UnicodeString *this, CFRange a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v2 = *((_QWORD *)this + 7);
  if (v2
    && ((v3 = (uint64_t *)*((_QWORD *)this + 6),
         v4 = v3[2],
         v5 = *((_QWORD *)this + 1),
         v6 = (*((_QWORD *)this + 2) - v5) >> 3,
         v6 <= a2.location)
      ? (v7 = -1)
      : (v7 = *(_QWORD *)(v5 + 8 * a2.location)),
        v4 == v7
     || (v6 <= a2.location + a2.length ? (v8 = -1) : (v8 = *(_QWORD *)(v5 + 8 * (a2.location + a2.length))), v4 == v8)))
  {
    v9 = v2 - 1;
    if (isCurrentlyProcessingEmoji == 1)
    {
      isCurrentlyProcessingEmoji = 0;
      v10 = *v3;
      *(_QWORD *)(v10 + 8) = v3[1];
      *(_QWORD *)v3[1] = v10;
      *((_QWORD *)this + 7) = v9;
      operator delete(v3);
      v11 = 0;
    }
    else
    {
      v11 = 1;
      isCurrentlyProcessingEmoji = 1;
      v12 = *v3;
      *(_QWORD *)(v12 + 8) = v3[1];
      *(_QWORD *)v3[1] = v12;
      *((_QWORD *)this + 7) = v9;
      operator delete(v3);
    }
  }
  else
  {
    v11 = isCurrentlyProcessingEmoji ^ 1;
  }
  return v11 & 1;
}

uint64_t MT3UnicodeString::MapIndexToSrc(MT3UnicodeString *this, unint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (a2 >= (*((_QWORD *)this + 2) - v2) >> 3)
    return -1;
  else
    return *(_QWORD *)(v2 + 8 * a2);
}

void MT3UnicodeString::~MT3UnicodeString(MT3UnicodeString *this)
{
  const void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E9368020;
  v2 = (const void *)*((_QWORD *)this + 4);
  if (v2)
    CFRelease(v2);
  std::__list_imp<SpeechChannelManager *>::clear((_QWORD *)this + 5);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  MT3UnicodeString::~MT3UnicodeString(this);
  JUMPOUT(0x1D8233BA8);
}

uint64_t MT3UnicodeString::MapRangeToSrc(MT3UnicodeString *this, CFRange a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  if (isCurrentlyProcessingEmoji == 1)
  {
    v2 = *((_QWORD *)this + 1);
    if (a2.location >= (unint64_t)((*((_QWORD *)this + 2) - v2) >> 3))
      return -1;
    else
      return *(_QWORD *)(v2 + 8 * a2.location);
  }
  else
  {
    v4 = *((_QWORD *)this + 1);
    v5 = (*((_QWORD *)this + 2) - v4) >> 3;
    if (v5 <= a2.location)
      return -1;
    else
      return *(_QWORD *)(v4 + 8 * a2.location);
  }
}

uint64_t ___ZL15EmojiLocaleDatav_block_invoke()
{
  uint64_t result;

  result = CEMCreateEmojiLocaleData();
  EmojiLocaleData(void)::sEmojiLocaleData = result;
  return result;
}

void std::vector<unsigned short>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CFRange>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void std::vector<CFRange>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E9364DD0, MEMORY[0x1E0DE42E0]);
}

void sub_1D22901A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void std::vector<long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

MTMBDiphoneStatistics *MTMBDiphoneStatistics::LogDiphone(MTMBDiphoneStatistics *this, int a2, unsigned int a3, unint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;

  v5 = (uint64_t *)((char *)this + 1600 * a2 + 32 * a3);
  if (v5[2] <= a4)
  {
    do
    {
      this = (MTMBDiphoneStatistics *)MEOWVectorBase::Append(v5);
      v6 = *v5;
      *(_QWORD *)(*v5 + 8 * v5[2] - 8) = 0;
    }
    while (v5[2] <= a4);
  }
  else
  {
    v6 = *v5;
  }
  ++*(_QWORD *)(v6 + 8 * a4);
  return this;
}

uint64_t MTMBDiphoneStatistics::CreateArray(MTMBDiphoneStatistics *this)
{
  uint64_t v2;
  CFDataRef v3;
  CFDataRef v4;
  CFDataRef *v5;
  CFDataRef *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  CFDataRef *v11;
  CFDataRef *v12;
  char *v13;
  const __CFData *v14;
  uint64_t Array;
  char *v17;
  CFDataRef *v18;
  CFDataRef *v19;

  v2 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  do
  {
    v3 = CFDataCreate(0, *((const UInt8 **)this + 4 * v2), 4 * *((_QWORD *)this + 4 * v2 + 2));
    v4 = v3;
    v5 = v18;
    if (v18 >= v19)
    {
      v7 = ((char *)v18 - v17) >> 3;
      if ((unint64_t)(v7 + 1) >> 61)
        std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
      v8 = ((char *)v19 - v17) >> 2;
      if (v8 <= v7 + 1)
        v8 = v7 + 1;
      if ((unint64_t)((char *)v19 - v17) >= 0x7FFFFFFFFFFFFFF8)
        v9 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v9 = v8;
      if (v9)
        v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)&v19, v9);
      else
        v10 = 0;
      v11 = (CFDataRef *)&v10[8 * v7];
      *v11 = v4;
      v6 = v11 + 1;
      v13 = v17;
      v12 = v18;
      if (v18 != (CFDataRef *)v17)
      {
        do
        {
          v14 = *--v12;
          *--v11 = v14;
        }
        while (v12 != (CFDataRef *)v13);
        v12 = (CFDataRef *)v17;
      }
      v17 = (char *)v11;
      v18 = v6;
      v19 = (CFDataRef *)&v10[8 * v9];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *v18 = v3;
      v6 = v5 + 1;
    }
    v18 = v6;
    ++v2;
  }
  while (v2 != 2500);
  Array = SLCFArrayBuilder::CreateArray((SLCFArrayBuilder *)&v17);
  SLCFArrayBuilder::~SLCFArrayBuilder((SLCFArrayBuilder *)&v17);
  return Array;
}

void sub_1D229049C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SLCFArrayBuilder::~SLCFArrayBuilder((SLCFArrayBuilder *)va);
  _Unwind_Resume(a1);
}

CFDictionaryRef MTBEDebugParams::OverrideDefaults(CFDictionaryRef theDict, const __CFDictionary *a2)
{
  CFDictionaryRef result;

  if (sSynthesisOverrideParam)
    CFRelease((CFTypeRef)sSynthesisOverrideParam);
  result = CFDictionaryCreateCopy(0, theDict);
  sSynthesisOverrideParam = (uint64_t)result;
  return result;
}

CFPropertyListRef GetParam(CFStringRef key)
{
  char *v2;
  CFStringRef v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  const void *v8;
  const void *v9;
  char *v10;
  char *v11;
  CFStringRef v12;
  int v13;
  void *v14;
  CFTypeRef v15;
  float v16;
  unint64_t i;
  CFPropertyListRef result;
  uint64_t v19;
  char *__lasts;
  void **values[2];
  uint64_t v22;
  void **keys[2];
  CFIndex numValues;

  if (!sSynthesisDebugParam)
  {
    v2 = getenv("MTX_DEBUG_PARAM");
    if (!v2 || (v3 = CFStringCreateWithCString(0, v2, 0x8000100u)) == 0)
      v3 = CFSTR("com.apple.speech.synthesis.debugparam");
    sSynthesisDebugParam = (uint64_t)v3;
    v4 = getenv("MTX_DEBUG_PARAM_VALUES");
    if (v4)
    {
      v5 = v4;
      MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)keys, 8);
      MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)values, 8);
      __lasts = 0;
      v6 = strtok_r(v5, " \t", &__lasts);
      if (v6)
      {
        v7 = v6;
        v8 = (const void *)*MEMORY[0x1E0C9AE40];
        v9 = (const void *)*MEMORY[0x1E0C9AE50];
        do
        {
          v10 = strchr(v7, 61);
          v11 = v10;
          if (v10)
            *v10 = 0;
          v12 = CFStringCreateWithCString(0, v7, 0x8000100u);
          MEOWVectorBase::Append(keys);
          keys[0][numValues - 1] = (void *)v12;
          if (v11)
          {
            v13 = v11[1];
            if (v13 == 102)
            {
              v14 = (void *)CFRetain(v8);
              MEOWVectorBase::Append(values);
            }
            else if (v13 == 116)
            {
              v14 = (void *)CFRetain(v9);
              MEOWVectorBase::Append(values);
            }
            else
            {
              if (strchr(v11 + 1, 46))
              {
                LODWORD(v19) = 0;
                v16 = atof(v11 + 1);
                *(float *)&v19 = v16;
                v14 = CFNumberCreate(0, kCFNumberFloatType, &v19);
              }
              else
              {
                v19 = 0;
                v19 = atol(v11 + 1);
                v14 = CFNumberCreate(0, kCFNumberLongType, &v19);
              }
              MEOWVectorBase::Append(values);
            }
            values[0][v22 - 1] = v14;
            *v11 = 61;
          }
          else
          {
            v15 = CFRetain(v9);
            MEOWVectorBase::Append(values);
            values[0][v22 - 1] = (void *)v15;
          }
          v7 = strtok_r(0, " \t", &__lasts);
        }
        while (v7);
      }
      if (numValues)
      {
        sSynthesisOverrideParam = (uint64_t)CFDictionaryCreate(0, (const void **)keys[0], (const void **)values[0], numValues, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (numValues)
        {
          for (i = 0; i < numValues; ++i)
          {
            CFRelease(keys[0][i]);
            CFRelease(values[0][i]);
          }
        }
      }
      MEOWVectorBase::~MEOWVectorBase((void **)values);
      MEOWVectorBase::~MEOWVectorBase((void **)keys);
    }
  }
  if (!sSynthesisOverrideParam)
    return CFPreferencesCopyAppValue(key, (CFStringRef)sSynthesisDebugParam);
  result = CFDictionaryGetValue((CFDictionaryRef)sSynthesisOverrideParam, key);
  if (!result)
    return CFPreferencesCopyAppValue(key, (CFStringRef)sSynthesisDebugParam);
  return result;
}

void sub_1D22907D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  MEOWVectorBase::~MEOWVectorBase((void **)va1);
  _Unwind_Resume(a1);
}

void MTBEDebugParams::GetParam(const __CFString *this, const __CFString *a2, BOOL *a3)
{
  int v3;
  const __CFBoolean *Param;
  const __CFBoolean *v7;
  CFTypeID v8;
  int v9;
  const __CFData *ExternalRepresentation;
  FILE *v11;
  int Length;
  const char *BytePtr;
  const char *v14;
  const char *v15;

  v3 = (int)a3;
  Param = (const __CFBoolean *)GetParam(this);
  if (Param)
  {
    v7 = Param;
    v8 = CFGetTypeID(Param);
    if (v8 == CFBooleanGetTypeID())
    {
      v9 = CFBooleanGetValue(v7) != 0;
      LOBYTE(a2->isa) = v9;
      if ((MTBEDebugFlags::sMEOWDebug & 0x4000) != 0 && v9 != v3)
      {
        ExternalRepresentation = CFStringCreateExternalRepresentation(0, this, 0x8000100u, 0);
        v11 = (FILE *)*MEMORY[0x1E0C80C10];
        Length = CFDataGetLength(ExternalRepresentation);
        BytePtr = (const char *)CFDataGetBytePtr(ExternalRepresentation);
        v14 = "false";
        if (v3)
          v15 = "true";
        else
          v15 = "false";
        if (LOBYTE(a2->isa))
          v14 = "true";
        fprintf(v11, "Param %.*s default %s now %s\n", Length, BytePtr, v15, v14);
        CFRelease(ExternalRepresentation);
      }
    }
  }
}

void MTBEDebugParams::GetParam(const __CFString *this, const __CFString *a2, uint64_t *a3)
{
  const __CFNumber *Param;
  uint64_t *v7;
  const __CFData *ExternalRepresentation;
  FILE *v9;
  int Length;
  const char *BytePtr;
  uint64_t *valuePtr;

  Param = (const __CFNumber *)GetParam(this);
  if (Param)
  {
    valuePtr = 0;
    if (CFNumberGetValue(Param, kCFNumberLongType, &valuePtr))
    {
      v7 = valuePtr;
      a2->isa = valuePtr;
      if ((MTBEDebugFlags::sMEOWDebug & 0x4000) != 0 && v7 != a3)
      {
        ExternalRepresentation = CFStringCreateExternalRepresentation(0, this, 0x8000100u, 0);
        v9 = (FILE *)*MEMORY[0x1E0C80C10];
        Length = CFDataGetLength(ExternalRepresentation);
        BytePtr = (const char *)CFDataGetBytePtr(ExternalRepresentation);
        fprintf(v9, "Param %.*s default %ld now %ld\n", Length, BytePtr, a3, a2->isa);
        CFRelease(ExternalRepresentation);
      }
    }
  }
}

void MTBEDebugParams::GetParam(const __CFString *this, const __CFString *a2, float *a3, float a4)
{
  const __CFNumber *Param;
  float v8;
  const __CFData *ExternalRepresentation;
  FILE *v10;
  int Length;
  const char *BytePtr;
  double valuePtr;

  Param = (const __CFNumber *)GetParam(this);
  if (Param)
  {
    valuePtr = 0.0;
    if (CFNumberGetValue(Param, kCFNumberDoubleType, &valuePtr))
    {
      v8 = valuePtr;
      *(float *)&a2->isa = v8;
      if ((MTBEDebugFlags::sMEOWDebug & 0x4000) != 0 && v8 != a4)
      {
        ExternalRepresentation = CFStringCreateExternalRepresentation(0, this, 0x8000100u, 0);
        v10 = (FILE *)*MEMORY[0x1E0C80C10];
        Length = CFDataGetLength(ExternalRepresentation);
        BytePtr = (const char *)CFDataGetBytePtr(ExternalRepresentation);
        fprintf(v10, "Param %.*s default %g now %g\n", Length, BytePtr, a4, *(float *)&a2->isa);
        CFRelease(ExternalRepresentation);
      }
    }
  }
}

uint64_t MTBEDebugFlags::Update(MTBEDebugFlags *this)
{
  char *v1;
  char *v2;
  int v3;
  uint64_t result;

  v1 = getenv("MTX_DEBUG");
  v2 = getenv("MEOW_DEBUG");
  if (v1)
  {
    v3 = atoi(v1);
  }
  else
  {
    if (kMTXDebugParam)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTXDebugParam, (const __CFString *)&qword_1EFC76620, (uint64_t *)qword_1EFC76620);
      kMTXDebugParam = 0;
    }
    v3 = qword_1EFC76620;
  }
  MTBEDebugFlags::sMTXDebug = v3;
  if (v2)
  {
    result = atoi(v2);
  }
  else
  {
    if (kMEOWDebugParam)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMEOWDebugParam, (const __CFString *)&qword_1EFC76630, (uint64_t *)qword_1EFC76630);
      kMEOWDebugParam = 0;
    }
    result = qword_1EFC76630;
  }
  MTBEDebugFlags::sMEOWDebug = (int)result;
  return result;
}

uint64_t MTBEBufferWriteFun(std::string *a1, const std::string::value_type *a2, int a3)
{
  std::string::append(a1, a2, a3);
  return 0;
}

MTFESpeechElement *MTBEAbort(MTFESpeechElement *result)
{
  MTFESpeechElement *v1;
  FILE *v2;
  _QWORD v3[3];
  int v4;
  char v5;
  _QWORD v6[3];

  if (MTBEAbort(MTFESpeechElement *)::sAborting != 1)
  {
    MTBEAbort(MTFESpeechElement *)::sAborting = 1;
    if (result)
    {
      do
      {
        v1 = result;
        result = result->var5;
      }
      while (result);
      memset(v6, 0, sizeof(v6));
      v2 = funopen(v6, 0, (int (__cdecl *)(void *, const char *, int))MTBEBufferWriteFun, 0, 0);
      fputs("While processing:\n", v2);
      v3[0] = &off_1E9365EB0;
      v3[1] = v2;
      v3[2] = 0;
      v4 = 0;
      v5 = 0;
      MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v3, v1);
      MTBEAbort(v2, (MTFESpeechVisitor *)v3, (uint64_t)v6);
    }
    abort();
  }
  return result;
}

void sub_1D2290C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&a9);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1D2290D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MTFVoice;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1D2290EE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MEOWUnitWeightStrategy::PitchStrategy(MEOWUnitWeightStrategy *this)
{
  uint64_t v1;
  float *v2;
  float v3;
  float v4;
  int v5;
  _QWORD *v6;
  char *v7;

  v1 = MEOWUnitWeightStrategy::sPitchStrategy;
  if (!MEOWUnitWeightStrategy::sPitchStrategy)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kPitchPowerStrategy))
    {
      v1 = operator new();
      if (kPitchPivot)
      {
        MTBEDebugParams::GetParam((const __CFString *)kPitchPivot, (const __CFString *)&dword_1EFC76650, v2, *(float *)&dword_1EFC76650);
        kPitchPivot = 0;
      }
      v3 = *(float *)&dword_1EFC76650;
      if (kPitchExponent)
      {
        MTBEDebugParams::GetParam((const __CFString *)kPitchExponent, (const __CFString *)&dword_1EFC76660, v2, *(float *)&dword_1EFC76660);
        kPitchExponent = 0;
      }
      v4 = *(float *)&dword_1EFC76660;
      *(_QWORD *)v1 = &unk_1E93680B8;
      *(float *)(v1 + 8) = v4 + 1.0;
      *(float *)(v1 + 12) = powf(v3, -v4);
    }
    else
    {
      v5 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUsePitchRMS);
      v6 = (_QWORD *)operator new();
      v1 = (uint64_t)v6;
      if (v5)
      else
      *v6 = v7 + 16;
    }
    MEOWUnitWeightStrategy::sPitchStrategy = v1;
  }
  return v1;
}

void sub_1D2291030(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

uint64_t MEOWUnitWeightStrategy::DurationStrategy(MEOWUnitWeightStrategy *this)
{
  uint64_t v1;
  float *v2;
  float v3;
  float v4;

  v1 = MEOWUnitWeightStrategy::sDurationStrategy;
  if (!MEOWUnitWeightStrategy::sDurationStrategy)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDurationPowerStrategy))
    {
      v1 = operator new();
      if (kDurationPivot)
      {
        MTBEDebugParams::GetParam((const __CFString *)kDurationPivot, (const __CFString *)&dword_1EFC76690, v2, *(float *)&dword_1EFC76690);
        kDurationPivot = 0;
      }
      v3 = *(float *)&dword_1EFC76690;
      if (kDurationExponent)
      {
        MTBEDebugParams::GetParam((const __CFString *)kDurationExponent, (const __CFString *)&dword_1EFC766A0, v2, *(float *)&dword_1EFC766A0);
        kDurationExponent = 0;
      }
      v4 = *(float *)&dword_1EFC766A0;
      *(_QWORD *)v1 = &unk_1E93680B8;
      *(float *)(v1 + 8) = v4 + 1.0;
      *(float *)(v1 + 12) = powf(v3, -v4);
    }
    else
    {
      v1 = operator new();
      *(_QWORD *)v1 = &unk_1E9368130;
    }
    MEOWUnitWeightStrategy::sDurationStrategy = v1;
  }
  return v1;
}

void sub_1D2291168(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

uint64_t MEOWUnitWeightStrategy::WordPitchStrategy(MEOWUnitWeightStrategy *this)
{
  uint64_t v1;
  float *v2;
  float v3;
  float v4;
  int v5;
  _QWORD *v6;
  char *v7;

  v1 = MEOWUnitWeightStrategy::sWordPitchStrategy;
  if (!MEOWUnitWeightStrategy::sWordPitchStrategy)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kWordPitchPowerStrategy))
    {
      v1 = operator new();
      if (kWordPitchPivot)
      {
        MTBEDebugParams::GetParam((const __CFString *)kWordPitchPivot, (const __CFString *)&dword_1EFC766C0, v2, *(float *)&dword_1EFC766C0);
        kWordPitchPivot = 0;
      }
      v3 = *(float *)&dword_1EFC766C0;
      if (kWordPitchExponent)
      {
        MTBEDebugParams::GetParam((const __CFString *)kWordPitchExponent, (const __CFString *)&dword_1EFC766D0, v2, *(float *)&dword_1EFC766D0);
        kWordPitchExponent = 0;
      }
      v4 = *(float *)&dword_1EFC766D0;
      *(_QWORD *)v1 = &unk_1E93680B8;
      *(float *)(v1 + 8) = v4 + 1.0;
      *(float *)(v1 + 12) = powf(v3, -v4);
    }
    else
    {
      v5 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUsePitchRMS);
      v6 = (_QWORD *)operator new();
      v1 = (uint64_t)v6;
      if (v5)
      else
      *v6 = v7 + 16;
    }
    MEOWUnitWeightStrategy::sWordPitchStrategy = v1;
  }
  return v1;
}

void sub_1D22912C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

uint64_t MEOWUnitWeightStrategy::WordDurationStrategy(MEOWUnitWeightStrategy *this)
{
  uint64_t v1;
  float *v2;
  float v3;
  float v4;

  v1 = MEOWUnitWeightStrategy::sWordDurationStrategy;
  if (!MEOWUnitWeightStrategy::sWordDurationStrategy)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kWordDurationPowerStrategy))
    {
      v1 = operator new();
      if (kWordDurationPivot)
      {
        MTBEDebugParams::GetParam((const __CFString *)kWordDurationPivot, (const __CFString *)&dword_1EFC766F0, v2, *(float *)&dword_1EFC766F0);
        kWordDurationPivot = 0;
      }
      v3 = *(float *)&dword_1EFC766F0;
      if (kWordDurationExponent)
      {
        MTBEDebugParams::GetParam((const __CFString *)kWordDurationExponent, (const __CFString *)&dword_1EFC76700, v2, *(float *)&dword_1EFC76700);
        kWordDurationExponent = 0;
      }
      v4 = *(float *)&dword_1EFC76700;
      *(_QWORD *)v1 = &unk_1E93680B8;
      *(float *)(v1 + 8) = v4 + 1.0;
      *(float *)(v1 + 12) = powf(v3, -v4);
    }
    else
    {
      v1 = operator new();
      *(_QWORD *)v1 = &unk_1E9368130;
    }
    MEOWUnitWeightStrategy::sWordDurationStrategy = v1;
  }
  return v1;
}

void sub_1D22913F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

void MEOWUnitCostWindow::MEOWUnitCostWindow(MEOWUnitCostWindow *this, int64_t a2, int a3, float a4)
{
  uint64_t v8;
  unint64_t v9;
  float v10;
  unint64_t v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  unint64_t v16;
  float *v17;
  uint64_t v18;
  unint64_t v19;
  float *v20;
  unint64_t v21;

  MEOWVectorBase::MEOWVectorBase(this, 4, a2);
  if (a3 && MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseUnitCostWindow))
  {
    if (kCostWindowSlope)
    {
      MTBEDebugParams::GetParam(kCostWindowSlope, (const __CFString *)&qword_1EFC76720, (uint64_t *)qword_1EFC76720);
      kCostWindowSlope = 0;
    }
    v8 = qword_1EFC76720;
    if ((unint64_t)(a2 + 1) >> 1 >= qword_1EFC76720)
      v9 = qword_1EFC76720;
    else
      v9 = (unint64_t)(a2 + 1) >> 1;
    v10 = *(float *)&dword_1EFC76730;
    if (kCostWindowTrough)
    {
      MTBEDebugParams::GetParam(kCostWindowTrough, (const __CFString *)&dword_1EFC76730, (float *)qword_1EFC76720, *(float *)&dword_1EFC76730);
      kCostWindowTrough = 0;
      v8 = qword_1EFC76720;
      v10 = *(float *)&dword_1EFC76730;
      if (kCostWindowSlope)
      {
        MTBEDebugParams::GetParam(kCostWindowSlope, (const __CFString *)&qword_1EFC76720, (uint64_t *)qword_1EFC76720);
        kCostWindowSlope = 0;
        v8 = qword_1EFC76720;
      }
    }
    v11 = 0;
    if (v9)
    {
      v12 = (float)(1.0 - v10) / (float)v8;
      if (v12 != 0.0)
      {
        v13 = *(float **)this;
        v14 = (float *)(*(_QWORD *)this + 4 * a2 - 4);
        v15 = 1.0;
        v16 = v9;
        do
        {
          *v14-- = v15;
          *v13++ = v15;
          v15 = v15 - v12;
          --v16;
        }
        while (v16);
        v11 = v9;
      }
    }
    if (a2 > 2 * v11)
    {
      v17 = (float *)(*(_QWORD *)this + 4 * v11);
      v18 = *(_QWORD *)this + 4 * (a2 - v11) - (_QWORD)v17;
      if (v18 >= 1)
      {
        v19 = ((unint64_t)v18 >> 2) + 1;
        do
        {
          *v17++ = v10;
          --v19;
        }
        while (v19 > 1);
      }
    }
  }
  else if (a2 >= 1)
  {
    v20 = *(float **)this;
    v21 = (a2 & 0x3FFFFFFFFFFFFFFFLL) + 1;
    do
    {
      *v20++ = 1.0 - a4;
      --v21;
    }
    while (v21 > 1);
  }
}

void sub_1D22915C0(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

float MEOWComputeUnitCost(MEOWUnitWeightStrategy *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  MEOWUnitWeightStrategy *v16;
  float *v17;
  float v18;
  uint64_t v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  int v25;
  unsigned int v26;
  float v27;
  unint64_t v28;
  float v29;
  float v30;
  __CFString **v31;
  __CFString **v32;
  const __CFString *v33;
  __CFString **v34;
  float v35;
  uint64_t v36;
  float v38;
  float v39;
  float v40;
  float *v41;
  float v42;
  uint64_t v43;

  if (!a4)
    return 0.0;
  v16 = (MEOWUnitWeightStrategy *)MEOWUnitWeightStrategy::PitchStrategy(a1);
  v43 = MEOWUnitWeightStrategy::DurationStrategy(v16);
  v18 = (float)a4;
  if (!a2)
  {
    v23 = (*(float (**)(MEOWUnitWeightStrategy *, float, float))(*(_QWORD *)v16 + 16))(v16, 200.0, 100.0);
    v22 = 1.0;
    a2 = 1;
    goto LABEL_27;
  }
  v19 = 0;
  v20 = 0;
  v42 = v18;
  v21 = v18 / (float)(unint64_t)a1;
  v22 = 0.0;
  v23 = 0.0;
  v24 = 0.0;
  do
  {
    v25 = *(__int16 *)(a3 + 2 * v19);
    v26 = v25 & 0x7FFF;
    v27 = (float)v26;
    if (v25 < 0)
    {
      ++v20;
    }
    else
    {
      v28 = (unint64_t)(float)(v21 * v24);
      v29 = *(float *)(a6 + 4 * v28);
      v30 = 22050.0 / *(float *)(a5 + 4 * v28);
      v23 = v23
          + (float)((*(float (**)(MEOWUnitWeightStrategy *, float, float))(*(_QWORD *)v16 + 16))(v16, v30, (float)v26)* v29);
      v22 = v22 + v30;
    }
    v24 = v24 + v27;
    ++v19;
  }
  while (a2 != v19);
  if (!v20)
  {
    v18 = v42;
LABEL_27:
    if (kVoicedPitchWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kVoicedPitchWeight, (const __CFString *)&dword_1EFC76760, v17, *(float *)&dword_1EFC76760);
      kVoicedPitchWeight = 0;
    }
    v38 = *(float *)&dword_1EFC76760;
    v35 = v38 * (*(float (**)(MEOWUnitWeightStrategy *, float))(*(_QWORD *)v16 + 8))(v16, v23 / (float)a2);
    v24 = v22;
    v36 = v43;
    goto LABEL_30;
  }
  if (a7)
    v31 = &kUnvoicedPenalty;
  else
    v31 = &kUnvoicedPitchCost;
  if (*v31)
  {
    if (a7)
      v32 = &kUnvoicedPenalty;
    else
      v32 = &kUnvoicedPitchCost;
    if (a7)
      v33 = (const __CFString *)&unk_1EFC76740;
    else
      v33 = (const __CFString *)&unk_1EFC76750;
    MTBEDebugParams::GetParam(*v31, v33, v17, *((float *)v32 + 2));
    *v31 = 0;
  }
  if (a7)
    v34 = &kUnvoicedPenalty;
  else
    v34 = &kUnvoicedPitchCost;
  v35 = *((float *)v34 + 2);
  v36 = v43;
  v18 = v42;
LABEL_30:
  if (kDurWeight)
  {
    MTBEDebugParams::GetParam((const __CFString *)kDurWeight, (const __CFString *)&dword_1EFC76770, v17, *(float *)&dword_1EFC76770);
    kDurWeight = 0;
  }
  v39 = *(float *)&dword_1EFC76770;
  v40 = v39
      * (*(float (**)(uint64_t, float, float))(*(_QWORD *)v36 + 16))(v36, (float)(v18 * 22050.0) / 200.0, v24);
  if (a8)
  {
    v41 = *(float **)(a8 + 16);
    *v41 = v35 + *v41;
    v41[*(int *)(a8 + 4)] = v40 + v41[*(int *)(a8 + 4)];
  }
  return v35 + v40;
}

float MEOWComputeBreathCost(MEOWUnitWeightStrategy *a1, unint64_t a2, uint64_t a3, float *a4)
{
  float *v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;

  v9 = MEOWUnitWeightStrategy::DurationStrategy(a1);
  v10 = (float)((float)a2 * 22050.0) / 200.0;
  if (kBreathProportion)
  {
    MTBEDebugParams::GetParam((const __CFString *)kBreathProportion, (const __CFString *)&dword_1EFC76780, v8, *(float *)&dword_1EFC76780);
    kBreathProportion = 0;
  }
  v11 = v10 * *(float *)&dword_1EFC76780;
  if (kMaxBreathLength)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMaxBreathLength, (const __CFString *)&dword_1EFC76790, v8, *(float *)&dword_1EFC76790);
    kMaxBreathLength = 0;
  }
  if ((float)(*(float *)&dword_1EFC76790 * 22.05) < v11)
    v11 = *(float *)&dword_1EFC76790 * 22.05;
  if (v10 < (float)(unint64_t)a1)
  {
    if (kExcessiveBreathCost)
    {
      MTBEDebugParams::GetParam(kExcessiveBreathCost, (const __CFString *)&dword_1EFC767A0, v8, *(float *)&dword_1EFC767A0);
      kExcessiveBreathCost = 0;
    }
    v12 = *(float *)&dword_1EFC767A0;
    if (!a3)
      return v12;
LABEL_15:
    v14 = *(float *)&dword_1EFC767A0;
    if (kExcessiveBreathCost)
    {
      MTBEDebugParams::GetParam(kExcessiveBreathCost, (const __CFString *)&dword_1EFC767A0, v8, *(float *)&dword_1EFC767A0);
      kExcessiveBreathCost = 0;
      v14 = *(float *)&dword_1EFC767A0;
    }
    if (v12 != v14)
      a4 = (float *)(*(_QWORD *)(a3 + 16) + 4 * *(int *)(a3 + 4));
    *a4 = v12 + *a4;
    return v12;
  }
  if (kBreathWeight)
  {
    MTBEDebugParams::GetParam((const __CFString *)kBreathWeight, (const __CFString *)&dword_1EFC767B0, v8, *(float *)&dword_1EFC767B0);
    kBreathWeight = 0;
  }
  v13 = *(float *)&dword_1EFC767B0;
  v12 = v13
      * (*(float (**)(uint64_t, float, float))(*(_QWORD *)v9 + 16))(v9, v11, (float)(unint64_t)a1);
  if (a3)
    goto LABEL_15;
  return v12;
}

void MEOWComputeWordUnitCost(MEOWUnitWeightStrategy *a1, uint64_t a2, float *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  float *v12;
  MEOWUnitWeightStrategy *v14;
  float *v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  int v21;
  unsigned int v22;
  float v23;
  unint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  float v32;

  if (a4)
  {
    v7 = a2;
    if (a2)
    {
      v12 = a3;
      v14 = (MEOWUnitWeightStrategy *)MEOWUnitWeightStrategy::WordPitchStrategy(a1);
      v16 = MEOWUnitWeightStrategy::WordDurationStrategy(v14);
      v17 = 0.0;
      v32 = 0.0;
      v18 = 0.0;
      v19 = 0.0;
      v20 = 0.0;
      do
      {
        v21 = *(__int16 *)v12;
        v12 = (float *)((char *)v12 + 2);
        v22 = v21 & 0x7FFF;
        v23 = (float)v22;
        if (v21 < 0)
        {
          v32 = v32 + v23;
        }
        else
        {
          v24 = (unint64_t)(float)((float)((float)a4 / (float)(unint64_t)a1) * v20);
          v25 = *(float *)(a6 + 4 * v24);
          v26 = 22050.0 / *(float *)(a5 + 4 * v24);
          v19 = v19
              + (float)((*(float (**)(MEOWUnitWeightStrategy *, float, float))(*(_QWORD *)v14 + 16))(v14, v26, (float)v22)* v25);
          v18 = v18 + v26;
          v17 = v17 + 1.0;
        }
        v20 = v20 + v23;
        --v7;
      }
      while (v7);
      if (v17 == 0.0)
      {
        if (kUnvoicedWordCost)
        {
          MTBEDebugParams::GetParam((const __CFString *)kUnvoicedWordCost, (const __CFString *)&dword_1EFC767D0, v15, *(float *)&dword_1EFC767D0);
          kUnvoicedWordCost = 0;
        }
        v28 = *(float *)&dword_1EFC767D0;
      }
      else
      {
        if (kVoicedPitchWeight)
        {
          MTBEDebugParams::GetParam((const __CFString *)kVoicedPitchWeight, (const __CFString *)&dword_1EFC76760, v15, *(float *)&dword_1EFC76760);
          kVoicedPitchWeight = 0;
        }
        v27 = *(float *)&dword_1EFC76760;
        v28 = v27 * (*(float (**)(MEOWUnitWeightStrategy *, float))(*(_QWORD *)v14 + 8))(v14, v19 / v17);
      }
      if (kDurWeight)
      {
        MTBEDebugParams::GetParam((const __CFString *)kDurWeight, (const __CFString *)&dword_1EFC76770, v15, *(float *)&dword_1EFC76770);
        kDurWeight = 0;
      }
      v29 = *(float *)&dword_1EFC76770;
      v30 = v29
          * (*(float (**)(uint64_t, float, float))(*(_QWORD *)v16 + 16))(v16, (float)a4 * 110.25, v18 + v32);
      if (a7)
      {
        v31 = *(float **)(a7 + 16);
        *v31 = v28 + *v31;
        v31[*(int *)(a7 + 4)] = v30 + v31[*(int *)(a7 + 4)];
      }
    }
    else if (kMissingWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMissingWeight, (const __CFString *)&dword_1EFC767C0, a3, *(float *)&dword_1EFC767C0);
      kMissingWeight = 0;
    }
  }
}

void MEOWComputeAccentCost(int a1, int a2, uint64_t a3)
{
  float v4;

  v4 = 0.0;
  if ((MTBEDebugFlags::sMEOWDebug & 0x8000) == 0)
  {
    if (kAccentCostWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kAccentCostWeight, (const __CFString *)&dword_1EFC767E0, (float *)a3, *(float *)&dword_1EFC767E0);
      kAccentCostWeight = 0;
    }
    v4 = *(float *)&dword_1EFC767E0 * sAccentCost[3 * a1 - 3 + a2];
  }
  if (a3)
    *(float *)(*(_QWORD *)(a3 + 16) + 8 * *(int *)(a3 + 4)) = v4
                                                              + *(float *)(*(_QWORD *)(a3 + 16) + 8 * *(int *)(a3 + 4));
}

float MEOWLinearL1Strategy::norm(MEOWLinearL1Strategy *this, float a2)
{
  return fabsf(a2);
}

void MEOWPowerStrategy::weigh(MEOWPowerStrategy *this, float a2, float a3, uint64_t a4, float *a5)
{
  float v7;

  v7 = *((float *)this + 2);
  if (kPowerClipMax)
  {
    MTBEDebugParams::GetParam((const __CFString *)kPowerClipMax, (const __CFString *)&dword_1EFC767F0, a5, *(float *)&dword_1EFC767F0);
    kPowerClipMax = 0;
  }
  powf(fabsf((float)(a3 - a2) / a3), v7);
}

void MEOWPowerStrategy::~MEOWPowerStrategy(MEOWPowerStrategy *this)
{
  JUMPOUT(0x1D8233BA8);
}

uint64_t MEOWLinearL1Strategy::weigh(MEOWLinearL1Strategy *this, float a2, float a3)
{
  return (**(uint64_t (***)(MEOWLinearL1Strategy *, float))this)(this, (float)(a3 - a2) / a3);
}

void MEOWLinearL1Strategy::~MEOWLinearL1Strategy(MEOWLinearL1Strategy *this)
{
  JUMPOUT(0x1D8233BA8);
}

float MEOWLinearRMSStrategy::norm(MEOWLinearRMSStrategy *this, float a2)
{
  return a2 * a2;
}

float MEOWLinearRMSStrategy::renorm(MEOWLinearRMSStrategy *this, float a2)
{
  return sqrtf(a2);
}

void MEOWLinearRMSStrategy::~MEOWLinearRMSStrategy(MEOWLinearRMSStrategy *this)
{
  JUMPOUT(0x1D8233BA8);
}

void *MEOWTrivialDecoder::Decode(MEOWTrivialDecoder *this, unsigned int a2, const void *__src, unsigned int a4, unsigned int a5, unsigned int a6, __int16 *__dst)
{
  return memcpy(__dst, __src, 2 * a6);
}

void MEOWByteSwapDecoder::Decode(MEOWByteSwapDecoder *this, unsigned int a2, char *a3, unsigned int a4, unsigned int a5, unsigned int a6, __int16 *a7)
{
  uint64_t v7;
  unsigned int v8;

  if (a6)
  {
    v7 = 2 * a6;
    do
    {
      v8 = *(unsigned __int16 *)a3;
      a3 += 2;
      *a7++ = bswap32(v8) >> 16;
      v7 -= 2;
    }
    while (v7);
  }
}

void MEOWCodebookDecoder::MEOWCodebookDecoder(MEOWCodebookDecoder *this, unsigned int a2, int a3, int a4, int a5, char **a6)
{
  int v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = &off_1E93681B8;
  if (a4)
    v10 = 96;
  else
    v10 = 160;
  if (a5)
    v11 = 7;
  else
    v11 = 6;
  *((_DWORD *)this + 3) = v10;
  *((_DWORD *)this + 4) = v11;
  v12 = a2;
  MEOWVectorBase::MEOWVectorBase((MEOWCodebookDecoder *)((char *)this + 24), 8, a2);
  if (a3 > 13)
  {
    if (a3 == 14)
    {
      v14 = 8;
    }
    else
    {
      if (a3 != 24)
        goto LABEL_17;
      v14 = 16;
    }
  }
  else if (a3 == 4)
  {
    v14 = 2;
  }
  else
  {
    if (a3 != 7)
      goto LABEL_17;
    v14 = 4;
  }
  *((_DWORD *)this + 2) = v14;
LABEL_17:
  v15 = *a6;
  if (a2)
  {
    v16 = 0;
    v17 = 2 * *((int *)this + 2);
    do
    {
      *(_QWORD *)(*v13 + v16) = v15;
      v16 += 8;
      v15 += v17;
    }
    while (8 * v12 != v16);
  }
  *a6 = v15;
}

uint64_t MEOWCodebookDecoder::Decode(MEOWCodebookDecoder *this, unsigned int a2, unsigned __int8 *a3, unsigned int a4, unsigned int a5, unsigned int a6, __int16 *a7)
{
  int v9;
  const unsigned __int8 *v10;
  int v11;
  int v12;
  uint64_t v13;

  v10 = a3 + 1;
  v9 = (char)a3[1];
  v11 = a3[1];
  v12 = 0;
  if ((v9 & 0x80000000) == 0)
  {
    v13 = *((_DWORD *)this + 3) / *((_DWORD *)this + 2) + 2;
    do
    {
      MEOWCodebookDecoder::Expand((uint64_t)this, v10, v11, a7, v12);
      v10 += v13;
      v12 += *((_DWORD *)this + 3);
      v11 = *v10;
    }
    while ((*(char *)v10 & 0x80000000) == 0);
  }
  return MEOWCodebookDecoder::Expand((uint64_t)this, v10, v10[(v11 & 0x7F) + 2], a7, v12);
}

uint64_t MEOWCodebookDecoder::Expand(uint64_t this, const unsigned __int8 *a2, int a3, __int16 *a4, int a5)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  __int16 *v12;
  __int16 *v13;
  __int16 *v14;
  int v15;
  const unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned __int16 *v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned __int16 *v28;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned __int16 *v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;

  v7 = this;
  v8 = (a3 & 0xF) + 1;
  v9 = a2[1];
  v10 = v9 + *(_DWORD *)(this + 12) - 1;
  v11 = *(_DWORD *)(this + 16) - (a3 >> 4);
  v12 = &a4[a5];
  if (v10 <= a5)
    v13 = &a4[a5];
  else
    v13 = &a4[v10];
  if (v10 <= a5)
    v14 = &v12[-v10];
  else
    v14 = a4;
  if (v10 <= a5)
    v15 = *(_DWORD *)(this + 12);
  else
    v15 = a5 - (v9 - 1);
  if ((MTBEDebugFlags::sMEOWDebug & 0x400) != 0)
  {
    v40 = v15;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "X %02x%02x %2d %2d %3d %4d %4d -> %4d %3d | ", a3, v9, v11, (a3 & 0xF) + 1, v10, a5, (unint64_t)((char *)v14 - (char *)a4) >> 1, (unint64_t)((char *)v13 - (char *)a4) >> 1, v15);
    this = fputc(10, (FILE *)*MEMORY[0x1E0C80C10]);
    v15 = v40;
  }
  v16 = a2 + 2;
  if (v11 < 1)
  {
    v24 = *(_DWORD *)(v7 + 12);
    if (v11 < 0)
    {
      if (v24 >= 1)
      {
        v31 = 0;
        v32 = *(_QWORD *)(v7 + 24);
        v33 = *(_DWORD *)(v7 + 8);
        do
        {
          if (v33 >= 1)
          {
            v34 = *(unsigned __int16 **)(v32 + 8 * *v16);
            v35 = v33;
            do
            {
              v36 = *v34++;
              *v12++ = bswap32(v36) >> 16 << -(char)v11;
              --v35;
            }
            while (v35);
          }
          ++v16;
          v31 += v33;
        }
        while (v31 < v24);
      }
    }
    else if (v24 >= 1)
    {
      v25 = 0;
      v26 = *(_QWORD *)(v7 + 24);
      v27 = *(_DWORD *)(v7 + 8);
      do
      {
        if (v27 >= 1)
        {
          v28 = *(unsigned __int16 **)(v26 + 8 * *v16);
          v29 = v27;
          do
          {
            v30 = *v28++;
            *v12++ = bswap32(v30) >> 16;
            --v29;
          }
          while (v29);
        }
        ++v16;
        v25 += v27;
      }
      while (v25 < v24);
    }
  }
  else
  {
    v17 = *(_DWORD *)(v7 + 12);
    if (v17 >= 1)
    {
      v18 = 0;
      v19 = *(_QWORD *)(v7 + 24);
      v20 = *(_DWORD *)(v7 + 8);
      do
      {
        if (v20 >= 1)
        {
          v21 = *(unsigned __int16 **)(v19 + 8 * *v16);
          v22 = v20;
          do
          {
            v23 = *v21++;
            *v12++ = (int)bswap32(v23) >> 16 >> v11;
            --v22;
          }
          while (v22);
        }
        ++v16;
        v18 += v20;
      }
      while (v18 < v17);
    }
  }
  if (v15 >= 1)
  {
    if (a5 >= v10)
      v37 = v10;
    else
      v37 = a5;
    v38 = v37 - v9 + 2;
    do
    {
      v39 = *v14++;
      *v13++ += (v8 * v39) >> 4;
      --v38;
    }
    while (v38 > 1);
  }
  return this;
}

void MEOWCodebookDecoder::Filter14to16(MEOWCodebookDecoder *this, __int16 *a2, int a3)
{
  int v3;

  if (a3 >= 1)
  {
    v3 = 0;
    do
    {
      v3 = *a2 - (v3 >> 5) + ((7 * v3) >> 3);
      if (v3 >= 0x1FFF)
        v3 = 0x1FFF;
      if (v3 <= -8191)
        v3 = -8191;
      *a2++ = 4 * v3;
      --a3;
    }
    while (a3);
  }
}

uint64_t MEOWACDecoder::MEOWACDecoder(uint64_t a1, unsigned __int16 *a2)
{
  AudioConverterRef *v4;
  unint64_t v5;
  UInt32 mBytesPerPacket;
  OSStatus Property;
  BOOL v8;
  Float64 v9;
  UInt32 v11;
  int outPropertyData;
  uint64_t v13;
  int inPropertyData;
  AudioStreamBasicDescription inSourceFormat;

  *(_QWORD *)a1 = &off_1E93681E0;
  *(_QWORD *)&inSourceFormat.mSampleRate = bswap64(*(_QWORD *)(a2 + 2));
  *(int8x16_t *)&inSourceFormat.mFormatID = vrev32q_s8(*(int8x16_t *)(a2 + 6));
  *(int8x8_t *)&inSourceFormat.mBytesPerFrame = vrev32_s8(*(int8x8_t *)(a2 + 14));
  inSourceFormat.mBitsPerChannel = bswap32(*((_DWORD *)a2 + 9));
  inSourceFormat.mReserved = 0;
  if (inSourceFormat.mFormatID == 1869641075)
  {
    if (MEOWACDecoder::LoadOpus(void)::sHasOpus != -1)
      dispatch_once(&MEOWACDecoder::LoadOpus(void)::sHasOpus, &__block_literal_global_2);
  }
  else if (inSourceFormat.mFormatID == 1633772320)
  {
    inSourceFormat.mFormatFlags = 0;
    inSourceFormat.mBytesPerFrame = 0;
    inSourceFormat.mBitsPerChannel = 0;
  }
  v4 = (AudioConverterRef *)(a1 + 8);
  if (!AudioConverterNew(&inSourceFormat, &MEOWACDecoder::MEOWACDecoder(MEOWACCodecParam const&)::sACUncompressed, (AudioConverterRef *)(a1 + 8)))
  {
    inPropertyData = 2;
    AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 8), 0x70726D6Du, 8u, &inPropertyData);
    v13 = 2112;
    *(_DWORD *)(a1 + 24) = 2112;
    if (inSourceFormat.mFormatID == 1869641075)
    {
      *(_DWORD *)(a1 + 24) = 4800;
      outPropertyData = 1650553971;
      LODWORD(v13) = 156;
      AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 8), 0x73726361u, 4u, &outPropertyData);
    }
    AudioConverterSetProperty(*v4, 0x7072696Du, 8u, &v13);
    AudioConverterSetProperty(*v4, 0x646D6763u, ((bswap32(*a2) >> 14) & 0x3FFFC) - 44, a2 + 22);
    v11 = 4;
    outPropertyData = 0;
    if (inSourceFormat.mFormatID == 1869641075)
    {
      mBytesPerPacket = -1;
    }
    else
    {
      Property = AudioFormatGetProperty(0x66657866u, 0x28u, &inSourceFormat, &v11, &outPropertyData);
      if (outPropertyData)
        v8 = Property == 0;
      else
        v8 = 0;
      mBytesPerPacket = inSourceFormat.mBytesPerPacket;
      if (v8)
        mBytesPerPacket = -1;
    }
    LODWORD(v5) = inSourceFormat.mFramesPerPacket;
    v9 = MEOWACDecoder::MEOWACDecoder(MEOWACCodecParam const&)::sACUncompressed.mSampleRate
       * (double)v5
       / inSourceFormat.mSampleRate;
    *(_DWORD *)(a1 + 16) = mBytesPerPacket;
    *(_DWORD *)(a1 + 20) = (int)v9;
  }
  return a1;
}

{
  unsigned int v4;
  AudioFormatID v5;
  unsigned int v6;
  UInt32 v7;
  UInt32 v9;
  const void *v10;
  OSStatus Property;
  unint64_t v12;
  BOOL v13;
  unsigned int v14;
  int v15;
  int v17;
  uint64_t v18;
  int inPropertyData;
  UInt32 ioPropertyDataSize;
  AudioStreamBasicDescription outPropertyData;

  *(_QWORD *)a1 = &off_1E93681E0;
  v4 = *((_DWORD *)a2 + 3);
  v5 = bswap32(v4);
  v6 = bswap32(*a2) >> 16;
  outPropertyData.mSampleRate = (float)((float)bswap32(*((_DWORD *)a2 + 2)) * 0.000015259);
  if (v4 == 1630826605)
    v5 = 1633772320;
  outPropertyData.mFormatID = v5;
  *(_QWORD *)&outPropertyData.mFramesPerPacket = 0;
  *(_QWORD *)&outPropertyData.mFormatFlags = 0;
  v7 = *((char *)a2 + 3);
  *(_QWORD *)&outPropertyData.mBitsPerChannel = 0;
  outPropertyData.mChannelsPerFrame = v7;
  ioPropertyDataSize = 40;
  if (v6 < 5 || v4 == 1630826605)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v9 = 4 * v6 - 16;
    v10 = a2 + 8;
  }
  AudioFormatGetProperty(0x666D7469u, v9, v10, &ioPropertyDataSize, &outPropertyData);
  if (!AudioConverterNew(&outPropertyData, &MEOWACDecoder::MEOWACDecoder(MEOWQTCodecParam const&)::sACUncompressed, (AudioConverterRef *)(a1 + 8)))
  {
    inPropertyData = 2;
    AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 8), 0x70726D6Du, 8u, &inPropertyData);
    v18 = 2112;
    *(_DWORD *)(a1 + 24) = 2112;
    AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 8), 0x7072696Du, 8u, &v18);
    AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 8), 0x646D6763u, 4 * v6 - 16, a2 + 8);
    v17 = 0;
    ioPropertyDataSize = 4;
    Property = AudioFormatGetProperty(0x66657866u, 0x28u, &outPropertyData, &ioPropertyDataSize, &v17);
    if (v17)
      v13 = Property == 0;
    else
      v13 = 0;
    v14 = bswap32(a2[3]) >> 16;
    LODWORD(v12) = outPropertyData.mFramesPerPacket;
    v15 = (int)(MEOWACDecoder::MEOWACDecoder(MEOWQTCodecParam const&)::sACUncompressed.mSampleRate
              * (double)v12
              / outPropertyData.mSampleRate);
    if (v13)
      v14 = -1;
    *(_DWORD *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 20) = v15;
  }
  return a1;
}

void MEOWACDecoder::LoadOpus(MEOWACDecoder *this)
{
  if (MEOWACDecoder::LoadOpus(void)::sHasOpus != -1)
    dispatch_once(&MEOWACDecoder::LoadOpus(void)::sHasOpus, &__block_literal_global_2);
}

void MEOWACDecoder::~MEOWACDecoder(AudioConverterRef *this)
{
  *this = (AudioConverterRef)&off_1E93681E0;
  AudioConverterDispose(this[1]);
}

{
  MEOWACDecoder::~MEOWACDecoder(this);
  JUMPOUT(0x1D8233BA8);
}

void MEOWACIterator::MEOWACIterator(MEOWACIterator *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, char *a6, unsigned int a7)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  *(_DWORD *)this = a2;
  if ((a2 & 0x80000000) != 0)
  {
    v8 = (a7 - a4) / a3;
    if (a7 <= a4)
      v8 = 0;
    if (a5 < 2)
    {
      v11 = 0;
      v12 = a6;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      LODWORD(v11) = 0;
      v12 = a6;
      do
      {
        v13 = *(unsigned __int16 *)v12;
        v12 += 2;
        v14 = bswap32(v13);
        v15 = HIWORD(v14);
        if (v9 >= v8)
          v15 = 0;
        v11 = v11 + v15;
        v10 += HIWORD(v14) + 2;
        ++v9;
      }
      while (a5 - 1 > v10);
    }
    *((_DWORD *)this + 1) = ((unint64_t)(v12 - a6) >> 1) - v8;
    *((_QWORD *)this + 1) = &a6[2 * v8];
    *((_QWORD *)this + 2) = &v12[v11];
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    v16 = v8 * a3;
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
    if (a2)
      v7 = a5 / a2;
    else
      v7 = 0;
    v16 = 0;
    *((_DWORD *)this + 1) = v7;
    *((_QWORD *)this + 2) = a6;
  }
  *((_DWORD *)this + 10) = v16;
}

uint64_t MEOWACIterator::FetchData(uint64_t this, unsigned int *a2, AudioBuffer *a3, AudioStreamPacketDescription **a4)
{
  int v4;
  char *v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int16 *v9;
  char *v10;
  uint64_t v11;

  v4 = *(_DWORD *)(this + 4);
  if ((*(_DWORD *)this & 0x80000000) != 0)
  {
    if (v4 >= 1)
      v4 = 1;
    *a2 = v4;
    if (v4)
    {
      v9 = *(unsigned __int16 **)(this + 8);
      v10 = *(char **)(this + 16);
      v11 = bswap32(*v9) >> 16;
      a3->mData = v10;
      a3->mNumberChannels = 1;
      a3->mDataByteSize = v11;
      *(_DWORD *)(this + 36) = v11;
      *(_QWORD *)(this + 8) = v9 + 1;
      *(_QWORD *)(this + 16) = &v10[v11];
      *a4 = (AudioStreamPacketDescription *)(this + 24);
      v8 = *(_DWORD *)(this + 4) - 1;
      goto LABEL_10;
    }
  }
  else
  {
    if (v4 >= *a2)
      v4 = *a2;
    *a2 = v4;
    if (v4)
    {
      a3->mNumberChannels = 1;
      v5 = *(char **)(this + 16);
      a3->mData = v5;
      v6 = *(_DWORD *)(this + 4);
      v7 = *(_DWORD *)this * *a2;
      a3->mDataByteSize = v7;
      *(_QWORD *)(this + 16) = &v5[v7];
      v8 = v6 - *a2;
LABEL_10:
      *(_DWORD *)(this + 4) = v8;
    }
  }
  return this;
}

const char *MEOWACDecoder::Decode(MEOWACDecoder *this, unsigned int a2, char *a3, unsigned int a4, int a5, uint64_t a6, __int16 *a7)
{
  const char *v12;
  unsigned int v13;
  UInt32 v14;
  BOOL v15;
  const char *v17;
  UInt32 ioOutputDataPacketSize;
  AudioBufferList outOutputData;
  _BYTE inInputDataProcUserData[40];
  unsigned int v22;

  MEOWACIterator::MEOWACIterator((MEOWACIterator *)inInputDataProcUserData, *((_DWORD *)this + 4), *((_DWORD *)this + 5), *((_DWORD *)this + 6), a2, a3, a4);
  MTBEWorker::DebugLog("Decode %d samples\n", v12, a6);
  outOutputData.mNumberBuffers = 1;
  outOutputData.mBuffers[0].mNumberChannels = 1;
  v13 = v22;
  v14 = a5 + a4 - v22;
  while (1)
  {
    outOutputData.mBuffers[0].mDataByteSize = 2 * v14 + 2048;
    outOutputData.mBuffers[0].mData = &a7[v13];
    if (v13)
      bzero(a7, 2 * v13);
    ioOutputDataPacketSize = v14;
    v15 = AudioConverterFillComplexBuffer(*((AudioConverterRef *)this + 1), (AudioConverterComplexInputDataProc)MEOWACFetchData, inInputDataProcUserData, &ioOutputDataPacketSize, &outOutputData, 0)|| ioOutputDataPacketSize == 0;
    if (v15 || ioOutputDataPacketSize >= v14)
      break;
    a7 += ioOutputDataPacketSize;
    v14 -= ioOutputDataPacketSize;
    v13 = v22;
  }
  AudioConverterReset(*((AudioConverterRef *)this + 1));
  return MTBEWorker::DebugLog("Decoded\n", v17);
}

uint64_t MEOWACFetchData(OpaqueAudioConverter *a1, unsigned int *a2, AudioBufferList *a3, AudioStreamPacketDescription **a4, MEOWACIterator *this)
{
  MEOWACIterator::FetchData((uint64_t)this, a2, a3->mBuffers, a4);
  return 0;
}

_QWORD *MEOWDecoder::CreateUncompressedDecoder(MEOWDecoder *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E9368298;
  return result;
}

MEOWCodebookDecoder *MEOWDecoder::CreateCodebookDecoder(MEOWDecoder *this, int a2, int a3, int a4, char **a5, const void **a6)
{
  unsigned int v10;
  MEOWCodebookDecoder *v11;

  v10 = this;
  v11 = (MEOWCodebookDecoder *)operator new();
  MEOWCodebookDecoder::MEOWCodebookDecoder(v11, v10, a2, a3, a4, a5);
  return v11;
}

void sub_1D2292A9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x1081C4003839DB1);
  _Unwind_Resume(a1);
}

uint64_t MEOWDecoder::CreateQTDecoder(unsigned __int16 *a1)
{
  uint64_t v2;

  v2 = operator new();
  MEOWACDecoder::MEOWACDecoder(v2, a1);
  return v2;
}

void sub_1D2292B04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40F536243ELL);
  _Unwind_Resume(a1);
}

uint64_t MEOWDecoder::CreateACDecoder(unsigned __int16 *a1)
{
  uint64_t v2;

  v2 = operator new();
  MEOWACDecoder::MEOWACDecoder(v2, a1);
  return v2;
}

void sub_1D2292B6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40F536243ELL);
  _Unwind_Resume(a1);
}

void MEOWTrivialDecoder::~MEOWTrivialDecoder(MEOWTrivialDecoder *this)
{
  JUMPOUT(0x1D8233BA8);
}

void MEOWByteSwapDecoder::~MEOWByteSwapDecoder(MEOWByteSwapDecoder *this)
{
  JUMPOUT(0x1D8233BA8);
}

void MEOWCodebookDecoder::~MEOWCodebookDecoder(void **this)
{
  *this = &off_1E93681B8;
  MEOWVectorBase::~MEOWVectorBase(this + 3);
}

{
  *this = &off_1E93681B8;
  MEOWVectorBase::~MEOWVectorBase(this + 3);
  JUMPOUT(0x1D8233BA8);
}

uint64_t MEOWSampleCache::MapSamples(MEOWSampleCache *this)
{
  return MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMapSamples);
}

void MEOWSampleCache::MEOWSampleCache(MEOWSampleCache *this, MEOWReader *a2)
{
  unsigned __int16 *GlobalParams;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t ACDecoder;
  MEOWDecoder *QTDecoder;
  MEOWDecoder **v13;
  _QWORD *UncompressedDecoder;
  const void **v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t i;
  MEOWCodebookDecoder *v19;
  unint64_t v20;
  char *v21;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = (char *)this + 8;
  *((_QWORD *)this + 2) = (char *)this + 8;
  *((_QWORD *)this + 3) = 0;
  GlobalParams = MEOWReader::GetGlobalParams(a2, 1);
  v5 = MEOWReader::GetGlobalParams(a2, 3);
  v6 = MEOWReader::GetGlobalParams(a2, 4);
  v7 = MEOWReader::GetGlobalParams(a2, 2);
  v8 = v7;
  v21 = (char *)(v7 + 3);
  if (v7)
  {
    v9 = *((unsigned __int8 *)v7 + 3);
    *((_QWORD *)this + 5) = v9;
    if (v9 == 255)
    {
      *((_QWORD *)this + 5) = v7[3];
      v21 = (char *)(v7 + 4);
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  v10 = (_QWORD *)operator new[]();
  *((_QWORD *)this + 4) = v10;
  if (v6)
  {
    ACDecoder = MEOWDecoder::CreateACDecoder(v6);
    v10 = (_QWORD *)*((_QWORD *)this + 4);
  }
  else
  {
    ACDecoder = 0;
  }
  *((_QWORD *)this + 4) = v10 + 1;
  *v10 = ACDecoder;
  if (v5)
    QTDecoder = (MEOWDecoder *)MEOWDecoder::CreateQTDecoder(v5);
  else
    QTDecoder = 0;
  v13 = (MEOWDecoder **)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v13 + 1;
  *v13 = QTDecoder;
  UncompressedDecoder = MEOWDecoder::CreateUncompressedDecoder(QTDecoder);
  v16 = (_QWORD *)*((_QWORD *)this + 4);
  v17 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 4) = v16 + 1;
  *v16 = UncompressedDecoder;
  if (v17)
  {
    for (i = 0; i < v20; ++i)
    {
      v19 = MEOWDecoder::CreateCodebookDecoder((MEOWDecoder *)(bswap32(v8[2]) >> 16), *((unsigned __int8 *)GlobalParams + 3), bswap32(GlobalParams[2]) >> 16 < 0xA5, 0, &v21, v15);
      v20 = *((_QWORD *)this + 5);
      *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i) = v19;
    }
  }
}

void sub_1D2292DC8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<SpeechChannelManager *>::clear(v1);
  _Unwind_Resume(a1);
}

void MEOWSampleCache::~MEOWSampleCache(MEOWSampleCache *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  while (*((_QWORD *)this + 3))
  {
    free(*(void **)(*((_QWORD *)this + 2) + 32));
    v2 = (uint64_t *)*((_QWORD *)this + 2);
    v3 = *((_QWORD *)this + 3);
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = v2[1];
    *(_QWORD *)v2[1] = v4;
    *((_QWORD *)this + 3) = v3 - 1;
    operator delete(v2);
  }
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    for (i = 0; i < v5; ++i)
    {
      v7 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        v5 = *((_QWORD *)this + 5);
      }
    }
  }
  v8 = -1;
  do
  {
    v9 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v8);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    v10 = ~(_DWORD)v8--;
  }
  while ((v10 & 0xFFFFFFFE) == 0);
  MEMORY[0x1D8233B90](*((_QWORD *)this + 4) - 24, 0x20C8093837F09);
  std::__list_imp<SpeechChannelManager *>::clear((_QWORD *)this + 1);
}

void *MEOWSampleCache::Samples(MEOWSampleCache *this, __int16 a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unsigned int a7)
{
  char *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v20;
  uint64_t v21;
  double v22;
  void *v23;
  double Current;
  uint64_t v25;
  char *v26;
  double v27;
  void (***v28)(_QWORD, uint64_t, void *, uint64_t, uint64_t, uint64_t, char *);
  double v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  void *__buf[4];

  v14 = (char *)this + 8;
  v15 = *((_QWORD *)this + 2);
  if ((MEOWSampleCache *)v15 != (MEOWSampleCache *)((char *)this + 8))
  {
    v16 = 0;
    v17 = 0;
    do
    {
      if (*(void **)(v15 + 16) == a5)
      {
        v18 = *(_DWORD *)(v15 + 24);
        if (a6 >= v18 && *(_DWORD *)(v15 + 28) + v18 >= a7 + a6)
          return (void *)(*(_QWORD *)(v15 + 32) + 2 * (a6 - v18));
      }
      if (v17 < a7)
        ++v16;
      v17 += *(_DWORD *)(v15 + 28);
      v15 = *(_QWORD *)(v15 + 8);
    }
    while ((char *)v15 != v14);
    if (v17 + a7 > 0x10000 && v16 != 0)
    {
      do
      {
        --v16;
        free(*(void **)(*((_QWORD *)this + 2) + 32));
        v20 = (uint64_t *)*((_QWORD *)this + 2);
        v21 = *v20;
        *(_QWORD *)(v21 + 8) = v20[1];
        *(_QWORD *)v20[1] = v21;
        --*((_QWORD *)this + 3);
        operator delete(v20);
      }
      while (v16);
    }
  }
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__buf, 1);
  v22 = 0.0;
  v23 = a5;
  if ((MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMapSamples) & 1) == 0)
  {
    Current = CFAbsoluteTimeGetCurrent();
    if (__buf[3] < (void *)a3)
      MEOWVectorBase::Allocate((MEOWVectorBase *)__buf, a3, 1);
    __buf[2] = (void *)a3;
    pread(**(_DWORD **)this, __buf[0], a3, ((_DWORD)a5 - *(_DWORD *)(*(_QWORD *)this + 30432)));
    v23 = __buf[0];
    v22 = CFAbsoluteTimeGetCurrent() - Current;
  }
  if (a7 + 1300 + a6 >= a4)
    v25 = (a4 - a6);
  else
    v25 = a7 + 1300;
  v26 = (char *)malloc_type_calloc(2uLL, (a4 + 1024), 0xBAFE32B4uLL);
  v27 = CFAbsoluteTimeGetCurrent();
  v28 = *(void (****)(_QWORD, uint64_t, void *, uint64_t, uint64_t, uint64_t, char *))(*((_QWORD *)this + 4)
                                                                                            + 8 * a2);
  (**v28)(v28, a3, v23, a6, v25, a4, v26);
  v29 = CFAbsoluteTimeGetCurrent();
  v30 = malloc_type_malloc(2 * v25, 0x1000040BDFB0063uLL);
  memcpy(v30, &v26[2 * a6], 2 * v25);
  v31 = operator new(0x28uLL);
  v31[1] = v14;
  v31[2] = a5;
  *((_DWORD *)v31 + 6) = a6;
  *((_DWORD *)v31 + 7) = v25;
  v31[4] = v30;
  v32 = *((_QWORD *)this + 1);
  *v31 = v32;
  *(_QWORD *)(v32 + 8) = v31;
  *((_QWORD *)this + 1) = v31;
  ++*((_QWORD *)this + 3);
  free(v26);
  *(double *)&MEOWSampleCache::Samples(unsigned short,unsigned int,unsigned int,void const*,unsigned int,unsigned int)::totalDecodeTime = v29 - v27 + *(double *)&MEOWSampleCache::Samples(unsigned short,unsigned int,unsigned int,void const*,unsigned int,unsigned int)::totalDecodeTime;
  *(double *)&MEOWSampleCache::Samples(unsigned short,unsigned int,unsigned int,void const*,unsigned int,unsigned int)::totalReadTime = v22 + *(double *)&MEOWSampleCache::Samples(unsigned short,unsigned int,unsigned int,void const*,unsigned int,unsigned int)::totalReadTime;
  MEOWVectorBase::~MEOWVectorBase(__buf);
  return v30;
}

void sub_1D2293178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  MEOWVectorBase::~MEOWVectorBase(&a9);
  _Unwind_Resume(a1);
}

float FrameToSamp(float a1)
{
  return a1 * 110.25;
}

uint64_t MTMBSmartSegmentAssembler::CountDemi(uint64_t result, unsigned __int16 **a2, int a3, _OWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  float v8;
  int v9;
  unsigned __int16 *v10;
  unint64_t v11;
  int v12;
  unsigned __int16 *v13;
  unsigned int v14;
  int v15;
  int v16;
  char *v17;
  char *v18;

  v6 = result;
  v7 = (uint64_t)a2[2];
  v8 = 0.0;
  if (v7 >= 1)
  {
    v9 = 0;
    v10 = *a2;
    v11 = (unint64_t)&(*a2)[16 * v7];
    do
    {
      v9 += v10[4];
      v10 += 16;
    }
    while ((unint64_t)v10 < v11);
    if (v9)
      v8 = (float)a3 / (float)v9;
  }
  *(_OWORD *)((char *)a4 + 28) = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  if ((uint64_t)a2[2] >= 1)
  {
    v12 = 0;
    v13 = *a2;
    do
    {
      v14 = v13[8];
      if ((v14 & 1) != 0)
      {
        result = (*(uint64_t (**)(_QWORD, float, float))(**(_QWORD **)(v6 + 8) + 16))(*(_QWORD *)(v6 + 8), (float)((float)*(int *)(v6 + 24) + (float)(v8 * (float)v12)) + (float)(v13[4] >> 1), (float)v13[4]);
        v16 = (unsigned __int16)result;
        v15 = v13[4];
        v14 = v13[8];
      }
      else
      {
        v15 = v13[4];
        v16 = v15;
      }
      v13[6] = v16;
      v12 += v15;
      *(_DWORD *)a4 += v16;
      v17 = (char *)a4 + 4 * ((v14 >> 3) & 3);
      *((_DWORD *)v17 + 3) += v16;
      v18 = (char *)a4 + 4 * ((v14 >> 5) & 3);
      *((_DWORD *)v18 + 7) += v16;
      v13 += 16;
    }
    while (v13 < &(*a2)[16 * (_QWORD)a2[2]]);
  }
  return result;
}

float MTMBSmartSegmentAssembler::AdjustForWSOLA(MTMBSmartSegmentAssembler *this, MTMBDemi *a2, float *a3, int a4, int a5)
{
  float v5;
  uint64_t v9;
  float v10;
  float v11;

  v5 = 1.0;
  if (*(_DWORD *)a3 > a5 + a4)
  {
    v9 = a4;
    if (kMTMBWSOLAMinSamples)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBWSOLAMinSamples, (const __CFString *)&qword_1EFC76860, (uint64_t *)qword_1EFC76860);
      kMTMBWSOLAMinSamples = 0;
    }
    if (qword_1EFC76860 < v9)
    {
      if (kMTMBWSOLAMinScale)
      {
        MTBEDebugParams::GetParam((const __CFString *)kMTMBWSOLAMinScale, (const __CFString *)&dword_1EFC76870, a3, *(float *)&dword_1EFC76870);
        kMTMBWSOLAMinScale = 0;
      }
      v5 = *(float *)&dword_1EFC76870;
      if (kMTMBWSOLAMaxScale)
      {
        MTBEDebugParams::GetParam((const __CFString *)kMTMBWSOLAMaxScale, (const __CFString *)&dword_1EFC76880, a3, *(float *)&dword_1EFC76880);
        kMTMBWSOLAMaxScale = 0;
      }
      v10 = *(float *)&dword_1EFC76880;
      v11 = (float)*(int *)a3 / (float)a4;
      if (v11 < *(float *)&dword_1EFC76880)
        v10 = (float)*(int *)a3 / (float)a4;
      if (v5 < v10)
        v5 = v10;
      MTMBDemi::ScaleSpeechRate(a2, 1.0 / v5, v11);
      *(_DWORD *)a3 = a4;
    }
  }
  return v5;
}

float MTMBSmartSegmentAssembler::AdjustForWSOLA(MTMBSmartSegmentAssembler *this, MTMBDemi *a2, MTMBDemi *a3, float *a4, int a5, int a6)
{
  float v7;
  float v8;

  v7 = MTMBSmartSegmentAssembler::AdjustForWSOLA(this, a2, a4, a5, a6);
  MTMBDemi::ScaleSpeechRate(a3, 1.0 / v7, v8);
  return v7;
}

uint64_t MTMBSmartSegmentAssembler::AdjustWantSamples(MTMBSmartSegmentAssembler *this, int a2, float *a3)
{
  int v3;
  int v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t result;

  v3 = (int)a3;
  v6 = (_DWORD)a3 - a2;
  if (kMTMBSmoothDuration)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTMBSmoothDuration, (const __CFString *)&dword_1EFC76890, a3, *(float *)&dword_1EFC76890);
    kMTMBSmoothDuration = 0;
  }
  v7 = (float)v6;
  if (!a2 || *(float *)&dword_1EFC76890 == 0.0)
  {
    if (kMTMBDurationSlack)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBDurationSlack, (const __CFString *)&dword_1EFC768A0, a3, *(float *)&dword_1EFC768A0);
      kMTMBDurationSlack = 0;
    }
    return (v3 - (int)(float)((float)(*(float *)&dword_1EFC768A0 * v7) * 0.01));
  }
  else
  {
    v8 = v7 / (float)a2;
    v9 = (float)((float)(v8 * (float)(100.0 - *(float *)&dword_1EFC76890))
               + (float)(*(float *)&dword_1EFC76890 * *((float *)this + 18)))
       * 0.01;
    v10 = 0.0;
    if ((float)(v8 * v9) >= 0.0)
    {
      v10 = v7 / (float)a2;
      if (fabsf(v9) < fabsf(v8))
        v10 = (float)((float)(v8 * (float)(100.0 - *(float *)&dword_1EFC76890))
                    + (float)(*(float *)&dword_1EFC76890 * *((float *)this + 18)))
            * 0.01;
    }
    result = (int)(float)((float)(v10 + 1.0) * (float)a2);
    *((float *)this + 18) = v10;
  }
  return result;
}

uint64_t MTMBSmartSegmentAssembler::Assemble(MTMBSmartSegmentAssembler *this, MTMBDemi *a2, MTMBDemi *a3)
{
  int v6;
  int v7;
  const char *v8;
  int v9;
  int v10;
  MTMBSmartSegmentAssembler *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  float v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  MTMBDemi *v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  __int128 v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  __int128 v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;

  v6 = *(_DWORD *)(*((_QWORD *)a2 + 13) + 32);
  v7 = *(_DWORD *)(*((_QWORD *)a3 + 13) + 32);
  *((_QWORD *)this + 1) = MTMBPitchInterpolator::CreatePhonemeInterpolator(a2, a3, a3);
  MTBEWorker::DebugLog("Segment assembly\n", v8);
  *((_DWORD *)this + 6) = 0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
  v9 = (int)(float)((float)v6 * 110.25);
  MTMBSmartSegmentAssembler::CountDemi((uint64_t)this, (unsigned __int16 **)a2, v9, &v52);
  *((_DWORD *)this + 6) = v9;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  v10 = (int)(float)((float)v7 * 110.25);
  v11 = (MTMBSmartSegmentAssembler *)MTMBSmartSegmentAssembler::CountDemi((uint64_t)this, (unsigned __int16 **)a3, v10, &v45);
  v12 = v51;
  v13 = v57;
  v14 = v45 + v52;
  v44 = v10 + v9;
  v15 = v58;
  v16 = v50;
  v17 = v58 + v57;
  v41 = v56;
  v18 = v58 + v57 + v56;
  v42 = v49;
  v43 = v52;
  v19 = MTMBSmartSegmentAssembler::AdjustForWSOLA(v11, a2, (float *)&v44, v45 + v52, v18 + v49 + v50 + v51);
  MTMBDemi::ScaleSpeechRate(a3, 1.0 / v19, 1.0);
  v20 = v44;
  v21 = *((_QWORD *)a2 + 13);
  if (v14 >= v44)
  {
    if (!v21 || (*(_WORD *)(v21 + 16) & 1) == 0)
    {
      v26 = *((_QWORD *)a3 + 13);
      if (!v26 || (*(_WORD *)(v26 + 16) & 1) == 0)
        v20 = MTMBSmartSegmentAssembler::AdjustWantSamples(this, v14, (float *)v44);
    }
    v27 = a2;
    v28 = v14 - v20;
    v29 = v55;
    v30 = v48 + v55;
    DWORD1(v52) = v55;
    DWORD1(v45) = v48;
    if (v14 - v20 <= v48 + v55)
    {
      v31 = 24;
      if (v30)
        goto LABEL_21;
    }
    else
    {
      v30 += v54 + v47;
      v29 = v54 + v55;
      DWORD1(v52) = v54 + v55;
      DWORD1(v45) = v47 + v48;
      if (v28 > v30)
      {
        v30 += v53 + v46;
        v29 += v53;
        DWORD1(v52) = v29;
        DWORD1(v45) = v46 + v47 + v48;
        v31 = 8;
        if (!v30)
          goto LABEL_28;
LABEL_21:
        v32 = v29 * v28 / v30;
LABEL_29:
        v36 = v43 - v32;
        v37 = v20;
        (*(void (**)(_QWORD, float))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1), (float)v20);
        (*(void (**)(_QWORD, float))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1), (float)v36);
        *((_DWORD *)this + 6) = 0;
        (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
        *((_DWORD *)this + 6) = MTMBSmartSegmentAssembler::ShrinkDemi((uint64_t)this, (uint64_t)a2, &v52, v36, v31);
        MTMBSmartSegmentAssembler::CopyAssembledSegments(this, a2);
        (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
        MTMBSmartSegmentAssembler::ShrinkDemi((uint64_t)this, (uint64_t)a3, &v45, v37 - *((_DWORD *)this + 6), v31);
        goto LABEL_30;
      }
      v31 = 16;
      if (v30)
        goto LABEL_21;
    }
LABEL_28:
    v32 = 0;
    goto LABEL_29;
  }
  if (!v21 || (*(_WORD *)(v21 + 16) & 1) == 0)
  {
    v22 = *((_QWORD *)a3 + 13);
    if (!v22 || (*(_WORD *)(v22 + 16) & 1) == 0)
      v20 = MTMBSmartSegmentAssembler::AdjustWantSamples(this, v14, (float *)v44);
  }
  v23 = v20 - v14;
  v24 = v12 + v15;
  DWORD2(v52) = v15;
  DWORD2(v45) = v12;
  if (v20 - v14 <= v12 + v15)
  {
    v25 = 96;
  }
  else
  {
    v24 += v16 + v13;
    DWORD2(v52) = v17;
    DWORD2(v45) = v12 + v16;
    if (v23 <= v24)
    {
      v25 = 64;
      v15 = v17;
    }
    else
    {
      v24 += v42 + v41;
      DWORD2(v52) = v18;
      DWORD2(v45) = v12 + v16 + v42;
      v25 = 32;
      v15 = v18;
    }
  }
  v27 = a2;
  if (v24)
    v33 = v15 * v23 / v24;
  else
    v33 = 0;
  v34 = v33 + v43;
  v35 = v20;
  (*(void (**)(_QWORD, float))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1), (float)v20);
  (*(void (**)(_QWORD, float))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1), (float)v34);
  *((_DWORD *)this + 6) = 0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
  *((_DWORD *)this + 6) = MTMBSmartSegmentAssembler::StretchDemi((uint64_t)this, (uint64_t)a2, &v52, v34, v25);
  MTMBSmartSegmentAssembler::CopyAssembledSegments(this, a2);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  MTMBSmartSegmentAssembler::StretchDemi((uint64_t)this, (uint64_t)a3, &v45, v35 - *((_DWORD *)this + 6), v25);
LABEL_30:
  MTMBSmartSegmentAssembler::CopyAssembledSegments(this, a3);
  result = *((_QWORD *)this + 1);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v39 = *((_QWORD *)this + 10);
  if (v39 && v39 == *((_QWORD *)v27 + 8) && *((_QWORD *)v27 + 2))
    *(_WORD *)(*(_QWORD *)v27 + 16) |= 2u;
  v40 = *((_QWORD *)a3 + 2);
  if (v40)
  {
    if (*(_QWORD *)(*(_QWORD *)a3 + 32 * v40 - 32)
       + 4 * (unint64_t)*(unsigned __int16 *)(*(_QWORD *)a3 + 32 * v40 - 24) < *((_QWORD *)a3 + 4)
                                                                                    + 4
                                                                                    * (unint64_t)*((unsigned int *)a3 + 25))
      *((_QWORD *)this + 10) = *((_QWORD *)a3 + 9);
  }
  return result;
}

uint64_t MTMBSmartSegmentAssembler::StretchDemi(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, unsigned int a5)
{
  const MTMBSegment *v10;
  int v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unint64_t v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 *v17;
  int v18;
  int v19;
  int v21;
  int v22;

  MEOWVectorBase::clear((void **)(a1 + 32));
  *(_QWORD *)(a1 + 64) = 0;
  v12 = *(_QWORD *)(a2 + 16);
  if (!*(_DWORD *)(a2 + 100))
  {
    if (v12)
      MTMBSmartSegmentAssembler::CopySegment((MTMBSmartSegmentAssembler *)a1, *(const MTMBSegment **)a2);
    return 0;
  }
  if (v12 < 1)
    return 0;
  v13 = *(unsigned __int16 **)a2;
  v14 = *(_QWORD *)a2 + 32 * v12;
  v15 = a3[2];
  do
  {
    v16 = v13[8];
    if ((v16 & 0x60u) >= a5)
    {
      v18 = v16 & 1;
      if ((unint64_t)v13 >= v14)
      {
        v19 = 0;
        v17 = v13;
      }
      else
      {
        v19 = 0;
        v17 = v13;
        do
        {
          if (v18 != (v17[8] & 1) || (v17[8] & 0x60u) < a5)
            break;
          v19 += v17[6];
          v17 += 16;
        }
        while ((unint64_t)v17 < v14);
      }
      v21 = (*(_DWORD *)(a1 + 64) + a4 - (*a3 + *(_DWORD *)(a1 + 68))) & ~((*(_DWORD *)(a1 + 64)
                                                                          + a4
                                                                          - (*a3
                                                                           + *(_DWORD *)(a1 + 68))) >> 31);
      if (v15)
        v21 = v21 * v19 / v15;
      v22 = v21 + v19;
      if (v18)
        MTMBSmartSegmentAssembler::StretchVoicedRange((_QWORD *)a1, (const MTMBSegment *)v13, (const MTMBSegment *)v17, v11, v22);
      else
        MTMBSmartSegmentAssembler::StretchUnvoicedRange((MTMBSmartSegmentAssembler *)a1, (const MTMBSegment *)v13, v10, v19, v22);
      v15 -= v19;
      *(_DWORD *)(a1 + 64) += v19;
    }
    else
    {
      *(_DWORD *)(a1 + 64) += v13[6];
      v17 = v13 + 16;
      MTMBSmartSegmentAssembler::CopySegment((MTMBSmartSegmentAssembler *)a1, (const MTMBSegment *)v13);
    }
    v14 = *(_QWORD *)a2 + 32 * *(_QWORD *)(a2 + 16);
    v13 = v17;
  }
  while ((unint64_t)v17 < v14);
  return *(unsigned int *)(a1 + 68);
}

void MTMBSmartSegmentAssembler::CopyAssembledSegments(MTMBSmartSegmentAssembler *this, MTMBDemi *a2)
{
  unint64_t v2;
  unsigned __int8 v5;
  int *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float v11;
  float v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  float *v25;
  float v26;
  float v27;

  if ((v5 & 1) == 0
  {
    if (kMTMBPowerThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBPowerThreshold, (const __CFString *)&dword_1EFC768B0, v25, *(float *)&dword_1EFC768B0);
      kMTMBPowerThreshold = 0;
    }
    *(float *)&MTMBSmartSegmentAssembler::CopyAssembledSegments(MTMBDemi *)::kLinPowerThreshold = (float)((float)(*(float *)&dword_1EFC768B0 * *(float *)&dword_1EFC768B0) * 8192.0)
                                                                                                * 8192.0;
  }
  v6 = (int *)*((_QWORD *)a2 + 13);
  v7 = *v6 + *((_DWORD *)this + 12) - *((_DWORD *)a2 + 4);
  *v6 = v7;
  if (v7 <= 0)
    MEMORY[0x1D8233BA8]();
  MEOWVectorBase::Swap((uint64_t *)a2, (MTMBSmartSegmentAssembler *)((char *)this + 32));
  if ((MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDoAmplitudeNormalization) & 1) != 0)
  {
    if (*((uint64_t *)a2 + 2) < 1)
    {
      v8 = 0;
      v26 = 0.0;
      v27 = 0.0;
      v12 = 0.0;
      v11 = 0.0;
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = *(_QWORD *)a2;
      v11 = 0.0;
      v26 = 0.0;
      v27 = 0.0;
      v12 = 0.0;
      do
      {
        if ((*(_WORD *)(v10 + 16) & 1) != 0)
        {
          v14 = MTMBSegment::LinPower((const float **)v10);
          LOWORD(v2) = *(_WORD *)(v10 + 12);
          if (kAmplitudeScaleThreshold)
          {
            MTBEDebugParams::GetParam((const __CFString *)kAmplitudeScaleThreshold, (const __CFString *)&dword_1EFC768D0, v13, *(float *)&dword_1EFC768D0);
            kAmplitudeScaleThreshold = 0;
          }
          v15 = 22050.0 / (double)v2;
          v16 = sqrtf(fmaxf((float)((float)(v15 * -292600.0) + (float)((float)(v15 * 3560.0) * v15)) + 10450000.0, 10000000.0)/ v14);
          if (v16 < *(float *)&dword_1EFC768D0
            && v14 > *(float *)&MTMBSmartSegmentAssembler::CopyAssembledSegments(MTMBDemi *)::kLinPowerThreshold)
          {
            v18 = (float)(v9 + ((unint64_t)*(unsigned __int16 *)(v10 + 8) >> 1));
            v11 = v11 + v18;
            v12 = v12 + v16;
            v26 = v26 + (float)(v18 * v16);
            v27 = v27 + (float)(v18 * v18);
            ++v8;
          }
        }
        v9 += *(unsigned __int16 *)(v10 + 8);
        v10 += 32;
      }
      while (v10 < *(_QWORD *)a2 + 32 * *((_QWORD *)a2 + 2));
    }
    if (kAmplitudeMinPP)
    {
      MTBEDebugParams::GetParam((const __CFString *)kAmplitudeMinPP, (const __CFString *)&qword_1EFC768E0, (uint64_t *)qword_1EFC768E0);
      kAmplitudeMinPP = 0;
    }
    v19 = (float)v8;
    v20 = v12 / (float)v8;
    if (!v8)
      v20 = 1.0;
    v21 = (float)((float)(v19 * v26) - (float)(v11 * v12)) / (float)((float)(v19 * v27) - (float)(v11 * v11));
    v22 = (float)(v12 - (float)(v21 * v11)) / v19;
    if (v8 >= qword_1EFC768E0)
    {
      v23 = v22;
    }
    else
    {
      v21 = 0.0;
      v23 = v20;
    }
    v24 = *((_QWORD *)a2 + 13);
    *(float *)(v24 + 72) = v23;
    *(float *)(v24 + 76) = v21;
    *(_BYTE *)(v24 + 80) = 1;
  }
}

void sub_1D2293E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MTMBSmartSegmentAssembler::ShrinkDemi(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, unsigned int a5)
{
  const MTMBSegment *v10;
  int v11;
  const MTMBSegment *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  __int16 v16;
  unsigned __int16 *v17;
  int v18;
  int v19;
  int v21;
  uint64_t v22;
  uint64_t result;

  MEOWVectorBase::clear((void **)(a1 + 32));
  *(_QWORD *)(a1 + 64) = 0;
  if (*(_DWORD *)(a2 + 100))
  {
    v12 = *(const MTMBSegment **)a2;
    v13 = *(_QWORD *)(a2 + 16);
    v14 = *(_QWORD *)a2 + 32 * v13;
    if (v13 < 1)
    {
      result = 0;
      if (!v13)
        return result;
    }
    else
    {
      v15 = a3[1];
      do
      {
        v16 = *((_WORD *)v12 + 8);
        if ((v16 & 0x18u) >= a5)
        {
          v18 = v16 & 1;
          if ((unint64_t)v12 >= v14)
          {
            v19 = 0;
            v17 = (unsigned __int16 *)v12;
          }
          else
          {
            v19 = 0;
            v17 = (unsigned __int16 *)v12;
            do
            {
              if (v18 != (v17[8] & 1) || (v17[8] & 0x18u) < a5)
                break;
              v19 += v17[6];
              v17 += 16;
            }
            while ((unint64_t)v17 < v14);
          }
          v21 = v19
              - ((*a3 - (*(_DWORD *)(a1 + 64) + a4) + *(_DWORD *)(a1 + 68)) & ~((*a3
                                                                               - (*(_DWORD *)(a1 + 64)
                                                                                + a4)
                                                                               + *(_DWORD *)(a1 + 68)) >> 31))
              * v19
              / v15;
          if (v18)
            MTMBSmartSegmentAssembler::ShrinkVoicedRange((_QWORD *)a1, v12, (const MTMBSegment *)v17, v11, v21);
          else
            MTMBSmartSegmentAssembler::ShrinkUnvoicedRange((MTMBSmartSegmentAssembler *)a1, v12, v10, v19, v21);
          v15 -= v19;
          *(_DWORD *)(a1 + 64) += v19;
        }
        else
        {
          *(_DWORD *)(a1 + 64) += *((unsigned __int16 *)v12 + 6);
          v17 = (unsigned __int16 *)((char *)v12 + 32);
          MTMBSmartSegmentAssembler::CopySegment((MTMBSmartSegmentAssembler *)a1, v12);
        }
        v22 = *(_QWORD *)(a2 + 16);
        v14 = *(_QWORD *)a2 + 32 * v22;
        v12 = (const MTMBSegment *)v17;
      }
      while ((unint64_t)v17 < v14);
      result = *(unsigned int *)(a1 + 68);
      if (!v22)
        return result;
    }
    if (!(_DWORD)result)
    {
      MTMBSmartSegmentAssembler::CopySegment((MTMBSmartSegmentAssembler *)a1, (const MTMBSegment *)(v14 - 32));
      return *(unsigned int *)(a1 + 68);
    }
    return result;
  }
  if (*(_QWORD *)(a2 + 16))
    MTMBSmartSegmentAssembler::CopySegment((MTMBSmartSegmentAssembler *)a1, *(const MTMBSegment **)a2);
  return 0;
}

uint64_t MTMBSmartSegmentAssembler::Assemble(uint64_t this, MTMBDemi *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t WordInterpolator;
  const char *v7;
  int v8;
  MTMBSmartSegmentAssembler *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25[5];
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;

  if (*((_QWORD *)a2 + 2))
  {
    v3 = *((_QWORD *)a2 + 13);
    v4 = *(_DWORD *)(v3 + 32);
    if (v4)
    {
      v5 = this;
      if (*(char *)(v3 + 18) < 0)
        WordInterpolator = MTMBPitchInterpolator::CreateWordInterpolator(a2, a2);
      else
        WordInterpolator = MTMBPitchInterpolator::CreateDemiInterpolator(a2, a2);
      *(_QWORD *)(v5 + 8) = WordInterpolator;
      MTBEWorker::DebugLog("Segment assembly\n", v7);
      *(_DWORD *)(v5 + 24) = 0;
      v8 = (int)(float)((float)v4 * 110.25);
      v9 = (MTMBSmartSegmentAssembler *)MTMBSmartSegmentAssembler::CountDemi(v5, (unsigned __int16 **)a2, v8, v25);
      v24 = v8;
      v10 = v25[0];
      v11 = v30;
      v12 = v30 + v29;
      v13 = v30 + v29 + v28;
      MTMBSmartSegmentAssembler::AdjustForWSOLA(v9, a2, (float *)&v24, v25[0], v13);
      v14 = v24;
      v15 = *((_QWORD *)a2 + 13);
      if (v10 >= v24)
      {
        if (!v15 || (*(_WORD *)(v15 + 16) & 1) == 0)
          v14 = MTMBSmartSegmentAssembler::AdjustWantSamples((MTMBSmartSegmentAssembler *)v5, v10, (float *)v24);
        v25[1] = v27;
        if (v10 - v14 <= v27)
        {
          v20 = 24;
        }
        else
        {
          v25[1] = v26 + v27;
          if (v10 - v14 <= v26 + v27)
          {
            v20 = 16;
          }
          else
          {
            v25[1] = v25[4] + v26 + v27;
            v20 = 8;
          }
        }
        (*(void (**)(_QWORD, float))(**(_QWORD **)(v5 + 8) + 40))(*(_QWORD *)(v5 + 8), (float)v14);
        *(_DWORD *)(v5 + 24) = 0;
        v21 = MTMBSmartSegmentAssembler::ShrinkDemi(v5, (uint64_t)a2, v25, v14, v20);
      }
      else
      {
        if (!v15 || (*(_WORD *)(v15 + 16) & 1) == 0)
          v14 = MTMBSmartSegmentAssembler::AdjustWantSamples((MTMBSmartSegmentAssembler *)v5, v10, (float *)v24);
        v16 = v14 - v10;
        v25[2] = v11;
        if (v14 - v10 <= v11)
        {
          v19 = 96;
        }
        else
        {
          v17 = v16 <= v12;
          if (v16 <= v12)
            v18 = v12;
          else
            v18 = v13;
          v25[2] = v18;
          if (v17)
            v19 = 64;
          else
            v19 = 32;
        }
        (*(void (**)(_QWORD, float))(**(_QWORD **)(v5 + 8) + 40))(*(_QWORD *)(v5 + 8), (float)v14);
        *(_DWORD *)(v5 + 24) = 0;
        v21 = MTMBSmartSegmentAssembler::StretchDemi(v5, (uint64_t)a2, v25, v14, v19);
      }
      *(_DWORD *)(v5 + 24) = v21;
      MTMBSmartSegmentAssembler::CopyAssembledSegments((MTMBSmartSegmentAssembler *)v5, a2);
      this = *(_QWORD *)(v5 + 8);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      v22 = *(_QWORD *)(v5 + 80);
      if (v22)
      {
        v23 = *((_QWORD *)a2 + 2);
        if (v22 == *((_QWORD *)a2 + 8))
        {
          if (!v23)
            return this;
          *(_WORD *)(*(_QWORD *)a2 + 16) |= 2u;
LABEL_36:
          if (*(_QWORD *)(*(_QWORD *)a2 + 32 * v23 - 32)
             + 4 * (unint64_t)*(unsigned __int16 *)(*(_QWORD *)a2 + 32 * v23 - 24) < *((_QWORD *)a2 + 4)
                                                                                          + 4
                                                                                          * (unint64_t)*((unsigned int *)a2 + 25))
            *(_QWORD *)(v5 + 80) = *((_QWORD *)a2 + 9);
          return this;
        }
      }
      else
      {
        v23 = *((_QWORD *)a2 + 2);
      }
      if (!v23)
        return this;
      goto LABEL_36;
    }
  }
  return this;
}

_QWORD *MTMBSmartSegmentAssembler::CopySegment(MTMBSmartSegmentAssembler *this, const MTMBSegment *a2)
{
  uint64_t v3;
  unsigned int v4;
  __int16 v5;
  unsigned __int16 v6;
  __int16 v7;
  __int16 v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  _QWORD *result;
  uint64_t v13;
  _BYTE v14[14];

  v3 = *(_QWORD *)a2;
  v4 = *((unsigned __int16 *)a2 + 4);
  v5 = *((_WORD *)a2 + 5);
  v6 = *((_WORD *)a2 + 6);
  v7 = *((_WORD *)a2 + 7);
  v8 = *((_WORD *)a2 + 8);
  *(_QWORD *)v14 = *(_QWORD *)((char *)a2 + 18);
  *(_QWORD *)&v14[6] = *((_QWORD *)a2 + 3);
  v9 = (_QWORD *)((char *)this + 32);
  v10 = *((_QWORD *)this + 6);
  if (v10)
  {
    v11 = ((unint64_t)(v3 - *(_QWORD *)(*v9 + 32 * v10 - 32)) >> 2) - *(unsigned __int16 *)(*v9 + 32 * v10 - 24);
    if (v11)
    {
      if (v11 < 0)
      {
        v8 |= 4u;
        if ((v8 & 1) == 0)
          goto LABEL_7;
        goto LABEL_6;
      }
      v8 |= 2u;
    }
  }
  if ((v8 & 1) != 0)
LABEL_6:
    v6 = (*(uint64_t (**)(_QWORD, float, float))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (float)(int)(*((_DWORD *)this + 17) + (v4 >> 1) + *((_DWORD *)this + 6)), (float)v4);
LABEL_7:
  *((_DWORD *)this + 17) += v6;
  result = MEOWVectorBase::Append(v9);
  v13 = *((_QWORD *)this + 4) + 32 * *((_QWORD *)this + 6);
  *(_QWORD *)(v13 - 32) = v3;
  *(_WORD *)(v13 - 24) = v4;
  *(_WORD *)(v13 - 22) = v5;
  *(_WORD *)(v13 - 20) = v6;
  *(_WORD *)(v13 - 18) = v7;
  *(_WORD *)(v13 - 16) = v8;
  *(_QWORD *)(v13 - 14) = *(_QWORD *)v14;
  *(_QWORD *)(v13 - 8) = *(_QWORD *)&v14[6];
  return result;
}

_QWORD *MTMBSmartSegmentAssembler::StretchVoicedRange(_QWORD *this, const MTMBSegment *a2, const MTMBSegment *a3, int a4, int a5)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int64_t v10;
  unsigned __int16 *v11;
  int v12;

  if (a2 < a3)
  {
    v7 = (uint64_t)this;
    v8 = 0;
    v9 = a5;
    v10 = (a3 - a2) >> 5;
    v11 = (unsigned __int16 *)a2;
    do
    {
      this = (_QWORD *)(*(uint64_t (**)(_QWORD, float, float))(**(_QWORD **)(v7 + 8) + 16))(*(_QWORD *)(v7 + 8), (float)(*(_DWORD *)(v7 + 68) + *(_DWORD *)(v7 + 24) + (v11[4] >> 1)), (float)v11[4]);
      if ((int)this >= 0)
        v12 = (int)this;
      else
        v12 = (_DWORD)this + 1;
      if ((v9 + v9 * (((char *)v11 - (char *)a2) >> 5)) / v10 <= v8 + (v12 >> 1))
      {
        v11 += 16;
      }
      else
      {
        this = MTMBSmartSegmentAssembler::CopySegment((MTMBSmartSegmentAssembler *)v7, (const MTMBSegment *)v11);
        v8 += *(unsigned __int16 *)(*(_QWORD *)(v7 + 32) + 32 * *(_QWORD *)(v7 + 48) - 20);
      }
    }
    while (v11 < (unsigned __int16 *)a3);
  }
  return this;
}

MTMBSmartSegmentAssembler *MTMBSmartSegmentAssembler::StretchUnvoicedRange(MTMBSmartSegmentAssembler *this, const MTMBSegment *a2, const MTMBSegment *a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  float v9;
  float v10;
  unsigned int v11;
  float v12;
  int v13;
  int v14;
  signed int v15;
  __int128 v16;
  signed int v17;
  MTMBSmartSegmentAssembler *v19;
  int v20;
  int v21;
  float v22;
  int v23;
  int v24;
  float v25;
  int v26;
  int v27;
  _OWORD v28[2];

  v5 = *(_QWORD *)a2;
  v6 = *((unsigned __int16 *)a2 + 4);
  v7 = *((unsigned __int16 *)a2 + 7);
  v8 = a5 - a4;
  v9 = 220.0;
  if (a4 < 220)
    v9 = 80.0;
  v10 = (float)a5 / v9;
  v11 = vcvtps_s32_f32(v10);
  v12 = (float)((float)a5 / (float)(int)ceilf(v10)) * 0.9;
  if (a4 >= 80)
  {
    v13 = v11;
  }
  else
  {
    v8 = 0;
    v13 = 1;
  }
  if (v8 >= 16)
    v14 = v8;
  else
    v14 = 0;
  if (v8 < 16)
    v12 = 100000.0;
  v15 = vcvtps_s32_f32((float)v14 / v12);
  v16 = *((_OWORD *)a2 + 1);
  if (v13 - 1 >= v15)
    v17 = v15;
  else
    v17 = v13 - 1;
  v28[0] = *(_OWORD *)a2;
  v28[1] = v16;
  if (v13)
  {
    v19 = this;
    v20 = 0;
    v21 = a4 / (v17 + 1);
    v22 = (float)v21;
    if (v8 >= 16)
      v23 = a5;
    else
      v23 = a4;
    v24 = v5 + 4 * v6 + 4 * v7;
    v25 = (float)v21;
    do
    {
      v26 = v23 / v13;
      WORD4(v28[0]) = v23 / v13;
      WORD6(v28[0]) = WORD4(v28[0]);
      if (v20 && v17 && v25 < (float)(v26 + v20))
      {
        v27 = v14 / v17--;
        v14 -= v27;
        v20 -= v27;
        v25 = v25 + v22;
      }
      *(_QWORD *)&v28[0] = *(_QWORD *)a2 + 4 * v20;
      HIWORD(v28[0]) = ((v24 - LODWORD(v28[0])) >> 2) - v26;
      this = (MTMBSmartSegmentAssembler *)MTMBSmartSegmentAssembler::CopySegment(v19, (const MTMBSegment *)v28);
      v20 += v26;
      v23 -= v26;
      --v13;
    }
    while (v13);
  }
  return this;
}

_QWORD *MTMBSmartSegmentAssembler::ShrinkVoicedRange(_QWORD *this, const MTMBSegment *a2, const MTMBSegment *a3, int a4, int a5)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int64_t v10;
  unsigned __int16 *v11;
  int v12;

  if (a2 < a3)
  {
    v7 = (uint64_t)this;
    v8 = 0;
    v9 = a5;
    v10 = (a3 - a2) >> 5;
    v11 = (unsigned __int16 *)a2;
    do
    {
      this = (_QWORD *)(*(uint64_t (**)(_QWORD, float, float))(**(_QWORD **)(v7 + 8) + 16))(*(_QWORD *)(v7 + 8), (float)(*(_DWORD *)(v7 + 68) + *(_DWORD *)(v7 + 24) + (v11[4] >> 1)), (float)v11[4]);
      if ((int)this >= 0)
        v12 = (int)this;
      else
        v12 = (_DWORD)this + 1;
      if ((v9 + v9 * (((char *)v11 - (char *)a2) >> 5)) / v10 <= v8 + (v12 >> 1))
      {
        v11 += 16;
      }
      else
      {
        this = MTMBSmartSegmentAssembler::CopySegment((MTMBSmartSegmentAssembler *)v7, (const MTMBSegment *)v11);
        v8 += *(unsigned __int16 *)(*(_QWORD *)(v7 + 32) + 32 * *(_QWORD *)(v7 + 48) - 20);
      }
    }
    while (v11 < (unsigned __int16 *)a3);
  }
  return this;
}

MTMBSmartSegmentAssembler *MTMBSmartSegmentAssembler::ShrinkUnvoicedRange(MTMBSmartSegmentAssembler *this, const MTMBSegment *a2, const MTMBSegment *a3, int a4, int a5)
{
  MTMBSmartSegmentAssembler *v6;
  float v7;
  float v8;
  int v9;
  float v10;
  float v11;
  int v12;
  int v13;
  signed int v14;
  int v15;
  int v16;
  __int128 v17;
  int v18;
  int v19;
  float v20;
  int v21;
  int v22;
  _OWORD v23[2];

  v6 = this;
  v7 = 220.0;
  if (a4 < 220)
    v7 = 80.0;
  v8 = (float)(a4 - a5);
  if (a4 - a5 >= 16)
    v9 = a5;
  else
    v9 = a4;
  v10 = 0.0;
  if (a4 - a5 < 16)
    v8 = 0.0;
  v11 = 100000.0;
  if (a4 - a5 >= 16)
    v11 = v7;
  v12 = vcvtps_s32_f32((float)v9 / v7);
  v13 = v12 & ~(v12 >> 31);
  v14 = vcvtps_s32_f32(v8 / v11);
  if (v13 - 1 >= v14)
    v15 = v14;
  else
    v15 = v13 - 1;
  if (v9 <= a4 - (int)(float)(v7 * (float)v15))
    v16 = a4 - (int)(float)(v7 * (float)v15);
  else
    v16 = v9;
  if (v15 != -1)
    v10 = (float)(v16 / (v15 + 1));
  v17 = *((_OWORD *)a2 + 1);
  v23[0] = *(_OWORD *)a2;
  v23[1] = v17;
  if (v12 >= 1)
  {
    v18 = 0;
    v19 = a4 - v16;
    v20 = v10;
    do
    {
      v21 = v16 / v13;
      WORD4(v23[0]) = v16 / v13;
      WORD6(v23[0]) = WORD4(v23[0]);
      if (v18 && v15 && v20 < (float)(v21 + v18))
      {
        v22 = v19 / v15--;
        v19 -= v22;
        v18 += v22;
        v20 = v10 + v20;
      }
      *(_QWORD *)&v23[0] = *(_QWORD *)a2 + 4 * v18;
      this = (MTMBSmartSegmentAssembler *)MTMBSmartSegmentAssembler::CopySegment(v6, (const MTMBSegment *)v23);
      v18 += v21;
      v16 -= v21;
      --v13;
    }
    while (v13);
  }
  return this;
}

_DWORD *MTMBSmartSegmentAssembler::SmoothAmplitude(_DWORD *this, MTMBDemi *a2, MTMBDemi *a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 *v13;
  unint64_t v14;
  unsigned int v15;
  float v16;
  uint64_t v17;
  int v18;
  _WORD *v19;
  int v20;
  uint64_t v21;
  _WORD *v22;
  int v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;
  FILE **v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  FILE **v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  void *__dst[2];
  __int16 v45;
  uint64_t v46;
  int v47;
  float v48;

  v3 = *((_QWORD *)a2 + 2);
  if (v3 >= 2 && *((_QWORD *)a3 + 2) > 1uLL)
  {
    v6 = (uint64_t)this;
    v7 = *((_QWORD *)a2 + 13);
    v8 = *(float *)(v7 + 72);
    v9 = *(float *)(v7 + 76);
    v10 = *((_QWORD *)a3 + 13);
    v47 = *(_DWORD *)(v10 + 72);
    v48 = v8;
    v11 = *(_QWORD *)a2;
    v12 = v3 - 2;
    if (v3 != 2)
    {
      v13 = (unsigned __int16 *)(v11 + 8);
      v14 = v3 - 2;
      do
      {
        v15 = *v13;
        v13 += 16;
        v8 = v8 + (float)((float)v15 * v9);
        --v14;
      }
      while (v14);
      v48 = v8;
    }
    v16 = *(float *)(v10 + 76);
    __dst[0] = 0;
    __dst[1] = 0;
    v45 = 1;
    v46 = 0;
    v17 = v11 + 32 * v3;
    v20 = *(unsigned __int16 *)(v17 - 24);
    v19 = (_WORD *)(v17 - 24);
    v18 = v20;
    v21 = v11 + 32 * v12;
    v23 = *(unsigned __int16 *)(v21 + 8);
    v22 = (_WORD *)(v21 + 8);
    MTMBSegment::Allocate((MTMBSegment *)__dst, v18 + v23);
    if (*v22)
      memmove(__dst[0], *(const void **)(v11 + 32 * v12), 4 * (unsigned __int16)*v22);
    if (*v19)
      memmove((char *)__dst[0] + 4 * (unsigned __int16)*v22, *((const void **)v19 - 1), 4 * (unsigned __int16)*v19);
    (*(void (**)(_QWORD, void **, float *, uint64_t, float))(**(_QWORD **)(v6 + 16) + 32))(*(_QWORD *)(v6 + 16), __dst, &v48, 1, v9);
    v24 = MTMBSegment::RawPower((MTMBSegment *)__dst);
    v25 = *(_QWORD *)a3;
    MTMBSegment::Allocate((MTMBSegment *)__dst, *(unsigned __int16 *)(*(_QWORD *)a3 + 40) + *(unsigned __int16 *)(*(_QWORD *)a3 + 8));
    if (*(_WORD *)(v25 + 8))
      memmove(__dst[0], *(const void **)v25, 4 * *(unsigned __int16 *)(v25 + 8));
    if (*(_WORD *)(v25 + 40))
      memmove((char *)__dst[0] + 4 * *(unsigned __int16 *)(v25 + 8), *(const void **)(v25 + 32), 4 * *(unsigned __int16 *)(v25 + 40));
    (*(void (**)(_QWORD, void **, int *, uint64_t, float))(**(_QWORD **)(v6 + 16) + 32))(*(_QWORD *)(v6 + 16), __dst, &v47, 1, v16);
    v26 = MTMBSegment::RawPower((MTMBSegment *)__dst);
    if (v24 == 0.0)
      v27 = 1.0;
    else
      v27 = sqrtf(v26 / v24);
    if ((MTBEDebugFlags::sMEOWDebug & 1) != 0)
    {
      v28 = (FILE **)MEMORY[0x1E0C80C10];
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Smooth Amplitude %f", *(float *)(*((_QWORD *)a2 + 13) + 72));
      v29 = *((_QWORD *)a2 + 13);
      v30 = *(float *)(v29 + 76);
      if (v30 != 0.0)
        fprintf(*v28, "-%f", (float)(*(float *)(v29 + 72) + (float)((float)*((unsigned int *)a2 + 25) * v30)));
      fprintf(*v28, " [%f (%f) %f] %f", v24, v27, v26, *(float *)(*((_QWORD *)a3 + 13) + 72));
      v31 = *((_QWORD *)a3 + 13);
      v32 = *(float *)(v31 + 76);
      if (v32 != 0.0)
        fprintf(*v28, "-%f", (float)(*(float *)(v31 + 72) + (float)((float)*((unsigned int *)a3 + 25) * v32)));
    }
    v33 = *((_QWORD *)a2 + 13);
    *(float *)(v33 + 76) = (float)-(float)(*(float *)(v33 + 72) - (float)(v48 * v27))
                         / (float)*((unsigned int *)a2 + 25);
    *(_BYTE *)(v33 + 80) = 0;
    v34 = *((_QWORD *)a3 + 13);
    v35 = (float)*((unsigned int *)a3 + 25);
    v36 = *(float *)(v34 + 72);
    v37 = v36 + (float)(v35 * *(float *)(v34 + 76));
    v38 = v36 / v27;
    *(float *)(v34 + 72) = v38;
    *(float *)(v34 + 76) = (float)(v37 - v38) / v35;
    *(_BYTE *)(v34 + 80) = 0;
    if ((MTBEDebugFlags::sMEOWDebug & 1) != 0)
    {
      v39 = (FILE **)MEMORY[0x1E0C80C10];
      fprintf((FILE *)*MEMORY[0x1E0C80C10], " -> %f", *(float *)(v33 + 72));
      v40 = *((_QWORD *)a2 + 13);
      v41 = *(float *)(v40 + 76);
      if (v41 != 0.0)
        fprintf(*v39, "-%f", (float)(*(float *)(v40 + 72) + (float)((float)*((unsigned int *)a2 + 25) * v41)));
      fprintf(*v39, " %f", *(float *)(*((_QWORD *)a3 + 13) + 72));
      v42 = *((_QWORD *)a3 + 13);
      v43 = *(float *)(v42 + 76);
      if (v43 != 0.0)
        fprintf(*v39, "-%f", (float)(*(float *)(v42 + 72) + (float)((float)*((unsigned int *)a3 + 25) * v43)));
      fputc(10, *v39);
    }
    return MTMBSegment::Free((MTMBSegment *)__dst);
  }
  else if ((MTBEDebugFlags::sMEOWDebug & 1) != 0)
  {
    return (_DWORD *)fwrite("Phoneme smoothing skipped due to insufficient material\n", 0x37uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  }
  return this;
}

void MTMBWsolaSegmentAssembler::MTMBWsolaSegmentAssembler(MTMBWsolaSegmentAssembler *this)
{
  *(_QWORD *)this = &off_1E9368330;
}

{
  *(_QWORD *)this = &off_1E9368330;
}

void MTMBSegmentAssembler::MTMBSegmentAssembler(MTMBSegmentAssembler *this)
{
  *(_QWORD *)this = &unk_1E9368370;
}

uint64_t MTMBWsolaSegmentAssembler::Assemble(MTMBWsolaSegmentAssembler *this, MTMBDemi *a2, MTMBDemi *a3)
{
  uint64_t PhonemeInterpolator;
  int v7;
  int v8;
  uint64_t result;

  PhonemeInterpolator = MTMBPitchInterpolator::CreatePhonemeInterpolator(a2, a3, a3);
  *((_QWORD *)this + 1) = PhonemeInterpolator;
  *((_DWORD *)this + 4) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)PhonemeInterpolator + 24))(PhonemeInterpolator);
  v7 = MTMBWsolaSegmentAssembler::ProcessDemi((uint64_t)this, (unsigned __int16 **)a2);
  MTMBDemi::SetNaturalSize((uint64_t)a2, v7);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  v8 = MTMBWsolaSegmentAssembler::ProcessDemi((uint64_t)this, (unsigned __int16 **)a3);
  MTMBDemi::SetNaturalSize((uint64_t)a3, v8);
  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t MTMBWsolaSegmentAssembler::ProcessDemi(uint64_t a1, unsigned __int16 **a2)
{
  uint64_t v4;
  int v5;
  unsigned __int16 *v6;
  int v7;
  int v8;

  if ((uint64_t)a2[2] < 1)
    return 0;
  LODWORD(v4) = 0;
  v5 = 0;
  v6 = *a2;
  do
  {
    if ((v6[8] & 1) != 0)
    {
      v8 = (*(unsigned __int16 (**)(_QWORD, float, float))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), (float)(*(_DWORD *)(a1 + 16) + v5 + (v6[4] >> 1)), (float)v6[4]);
      v7 = v6[4];
    }
    else
    {
      v7 = v6[4];
      v8 = v7;
    }
    v6[6] = v8;
    v5 += v7;
    v4 = (v4 + v8);
    v6 += 16;
  }
  while (v6 < &(*a2)[16 * (_QWORD)a2[2]]);
  return v4;
}

_QWORD *MTMBWsolaSegmentAssembler::Assemble(_QWORD *this, MTMBDemi *a2)
{
  uint64_t v3;
  int v4;

  if (*((_DWORD *)a2 + 25) && *(_QWORD *)(*((_QWORD *)a2 + 13) + 32))
  {
    v3 = (uint64_t)this;
    this[1] = MTMBPitchInterpolator::CreateWordInterpolator(a2, a2);
    *(_DWORD *)(v3 + 16) = 0;
    v4 = MTMBWsolaSegmentAssembler::ProcessDemi(v3, (unsigned __int16 **)a2);
    MTMBDemi::SetNaturalSize((uint64_t)a2, v4);
    this = *(_QWORD **)(v3 + 8);
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t MTMBAssemblerCreator::Create(int a1)
{
  uint64_t v1;

  if (a1 == 1)
  {
    v1 = operator new();
    *(_QWORD *)v1 = &off_1E9368330;
  }
  else if (a1)
  {
    return 0;
  }
  else
  {
    v1 = operator new();
    *(_QWORD *)v1 = &off_1E93683D0;
    *(_QWORD *)(v1 + 16) = MTMBSignalProcessor::Create((MTMBSignalProcessor *)v1);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)(v1 + 32), 32);
    *(_DWORD *)(v1 + 72) = 0;
    *(_QWORD *)(v1 + 80) = 0;
  }
  return v1;
}

void sub_1D2294F28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40242BC664);
  _Unwind_Resume(a1);
}

void MTMBAssemblerCreator::MTMBAssemblerCreator(MTMBAssemblerCreator *this)
{
  *(_QWORD *)this = &off_1E93683B0;
}

{
  *(_QWORD *)this = &off_1E93683B0;
}

void MTMBAssemblerCreator::~MTMBAssemblerCreator(MTMBAssemblerCreator *this)
{
  JUMPOUT(0x1D8233BA8);
}

void MTMBSmartSegmentAssembler::~MTMBSmartSegmentAssembler(MTMBSmartSegmentAssembler *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E93683D0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 4);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E93683D0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 4);
  JUMPOUT(0x1D8233BA8);
}

void MTMBWsolaSegmentAssembler::~MTMBWsolaSegmentAssembler(MTMBWsolaSegmentAssembler *this)
{
  JUMPOUT(0x1D8233BA8);
}

void MTMBSimpleSignalProcessor::MTMBSimpleSignalProcessor(MTMBSimpleSignalProcessor *this)
{
  *(_QWORD *)this = &off_1E9368460;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = MTMBCrossfader::Create(this);
}

{
  *(_QWORD *)this = &off_1E9368460;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = MTMBCrossfader::Create(this);
}

void MTMBSimpleSignalProcessor::~MTMBSimpleSignalProcessor(MTMBSimpleSignalProcessor *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_1E9368460;
  v1 = *((_QWORD *)this + 2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E9368460;
  v1 = *((_QWORD *)this + 2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E9368460;
  v1 = *((_QWORD *)this + 2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1D8233BA8);
}

MTFESpeechElement *MTMBSimpleSignalProcessor::BlendSegments(MTMBCrossfader **this, MTFESpeechElement *a2, const float **a3)
{
  if (((uint64_t)a2->var3 & 1) != 0 && ((_WORD)a3[2] & 1) != 0)
    return (MTFESpeechElement *)MTMBSimpleSignalProcessor::BlendVoicedSegments(this, a2, (MTFESpeechElement *)a3);
  else
    return MTMBSimpleSignalProcessor::BlendUnvoicedSegments(this, a2, a3);
}

uint64_t MTMBSimpleSignalProcessor::BlendVoicedSegments(MTMBCrossfader **this, MTFESpeechElement *a2, MTFESpeechElement *a3)
{
  uint64_t var1;
  int v7;
  float *var0;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  unsigned int v16;
  signed int v17;
  signed __int16 *p_var1;
  int v19;
  uint64_t v20;
  float v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  float v26;
  uint64_t v27;

  MTMBSegment::Modify(a2);
  MTMBSegment::Modify(a3);
  var1 = (unsigned __int16)a2->var1;
  v7 = 512 - var1;
  if (512 - (int)var1 >= (int)var1)
    v7 = (unsigned __int16)a2->var1;
  if (v7)
  {
    memmove((char *)a2->var0 + 4 * var1, a2->var0, 4 * v7);
    LODWORD(var1) = (unsigned __int16)a2->var1;
  }
  var0 = (float *)a2->var0;
  if (var1 >= 2)
  {
    v9 = var0[2] + (float)((float)(*var0 - var0[1]) * 3.0);
    v10 = &var0[var1];
    v12 = *(v10 - 1);
    v11 = v10 - 1;
    v13 = v9 - v12;
    v14 = *var0 - v12;
    if (vabds_f32(v9, v12) <= vabds_f32(*var0, v12))
      v15 = v13;
    else
      v15 = v14;
    v16 = var1 >> 1;
    do
    {
      *v11 = v15 + *v11;
      --v11;
      v15 = v15 * 0.9375;
      --v16;
    }
    while (v16);
  }
  v17 = 0;
  p_var1 = &a3->var1;
  if ((unsigned __int16)a3->var1 >= var1)
    p_var1 = &a2->var1;
  v19 = (unsigned __int16)*p_var1;
  LODWORD(v20) = 512 - v19;
  if (512 - v19 >= v19)
    v20 = v19;
  else
    v20 = v20;
  v21 = 1.0e20;
LABEL_17:
  result = v20;
  v23 = (uint64_t)&var0[(v20 - 1) + 1];
  while (1)
  {
    v24 = __OFSUB__((_DWORD)v20, 1);
    v20 = (v20 - 1);
    if (((int)v20 < 0) ^ v24 | ((_DWORD)v20 == 0))
      break;
    v23 -= 4;
    if ((int)result > (int)(var1 >> 1) || (int)v20 <= 512 - (int)var1)
    {
      if (v19)
      {
        v25 = 0;
        v26 = 0.0;
        do
        {
          v26 = v26 + vabds_f32(*(float *)&a3->var0[v25], *(float *)(v23 + v25 * 8));
          v25 += 2;
        }
        while (((4 * v19 + 12) & 0x7FFF0) != (_DWORD)(v25 * 8));
      }
      else
      {
        v26 = 0.0;
      }
      if (v26 < v21)
      {
        v21 = v26;
        v17 = v20;
      }
      goto LABEL_17;
    }
  }
  if (v17 >= (int)(var1 >> 1))
    LOWORD(var1) = 0;
  a2->var1 = var1 + v17;
  if (512 - v17 >= v19)
    v27 = v19;
  else
    v27 = (512 - v17);
  if ((_DWORD)v27)
    return MTMBCrossfader::CrossfadePartial(this[2], v27, 1, v27, &var0[v17], (const float *)a3->var0, (const float *)a3->var0);
  return result;
}

MTFESpeechElement *MTMBSimpleSignalProcessor::BlendUnvoicedSegments(MTMBCrossfader **this, MTFESpeechElement *a2, const float **a3)
{
  unsigned int var1;
  uint64_t v7;
  MTFESpeechElement *result;
  unsigned __int16 v9;

  if (kBlendUnvoicedWindow)
  {
    MTBEDebugParams::GetParam((const __CFString *)kBlendUnvoicedWindow, (const __CFString *)&qword_1EFC768F0, (uint64_t *)qword_1EFC768F0);
    kBlendUnvoicedWindow = 0;
  }
  var1 = *((unsigned __int16 *)a3 + 4);
  if (var1 >= (unsigned __int16)a2->var1)
    var1 = (unsigned __int16)a2->var1;
  if ((int)var1 >= (int)qword_1EFC768F0)
    v7 = qword_1EFC768F0;
  else
    v7 = var1;
  result = MTMBSegment::Modify(a2);
  v9 = a2->var1 - v7;
  a2->var1 = v9;
  if ((_DWORD)v7)
    return (MTFESpeechElement *)MTMBCrossfader::CrossfadePartial(this[2], v7, 1, v7, (const float *)a2->var0 + v9, *a3, *a3);
  return result;
}

void MTMBSimpleSignalProcessor::AdjustAmplitude(MTMBSimpleSignalProcessor *this, MTMBSegment *a2, float *a3, float a4, int a5)
{
  float *v8;
  unsigned int v9;
  float v10;
  float v11;
  const __CFString *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int v18;
  float *v19;
  float v20;
  float v21;
  int v22;
  float v23;
  float *__C[4];
  float __B;

  __B = a4;
  if (a4 != 0.0)
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__C, 4, *((unsigned __int16 *)a2 + 4));
    vDSP_vramp(a3, &__B, __C[0], 1, *((unsigned __int16 *)a2 + 4));
    LOWORD(v9) = *((_WORD *)a2 + 4);
    v10 = *a3 + (float)(__B * (float)v9);
    if (!a5)
    {
LABEL_34:
      vDSP_vmul(*(const float **)a2, 1, __C[0], 1, *(float **)a2, 1, *((unsigned __int16 *)a2 + 4));
      *a3 = v10;
      if (a5)
      {
        if (kAmplitudeMinScale)
        {
          MTBEDebugParams::GetParam(kAmplitudeMinScale, (const __CFString *)&dword_1EFC76900, v19, *(float *)&dword_1EFC76900);
          kAmplitudeMinScale = 0;
        }
        v20 = __B;
        if (v10 <= *(float *)&dword_1EFC76900 && __B < 0.0)
          goto LABEL_43;
        v21 = *a3;
        if (kAmplitudeMaxScale)
        {
          MTBEDebugParams::GetParam(kAmplitudeMaxScale, (const __CFString *)&dword_1EFC76910, v19, *(float *)&dword_1EFC76910);
          kAmplitudeMaxScale = 0;
          v20 = __B;
        }
        if (v21 >= *(float *)&dword_1EFC76910 && v20 > 0.0)
LABEL_43:
          __B = 0.0;
      }
      MEOWVectorBase::~MEOWVectorBase((void **)__C);
      return;
    }
    if (kAmplitudeMinScale)
    {
      MTBEDebugParams::GetParam(kAmplitudeMinScale, (const __CFString *)&dword_1EFC76900, v8, *(float *)&dword_1EFC76900);
      kAmplitudeMinScale = 0;
    }
    v11 = *(float *)&dword_1EFC76900;
    if (v10 >= *(float *)&dword_1EFC76900)
    {
      if (kAmplitudeMaxScale)
      {
        MTBEDebugParams::GetParam(kAmplitudeMaxScale, (const __CFString *)&dword_1EFC76910, v8, *(float *)&dword_1EFC76910);
        kAmplitudeMaxScale = 0;
        v12 = kAmplitudeMinScale;
        v11 = *(float *)&dword_1EFC76900;
        if (v10 > *(float *)&dword_1EFC76910)
        {
LABEL_29:
          if (v12)
          {
            MTBEDebugParams::GetParam(v12, (const __CFString *)&dword_1EFC76900, v8, v11);
            kAmplitudeMinScale = 0;
            v11 = *(float *)&dword_1EFC76900;
          }
          goto LABEL_31;
        }
        v13 = *a3;
        if (kAmplitudeMinScale)
        {
          MTBEDebugParams::GetParam(kAmplitudeMinScale, (const __CFString *)&dword_1EFC76900, v8, *(float *)&dword_1EFC76900);
          kAmplitudeMinScale = 0;
          v11 = *(float *)&dword_1EFC76900;
        }
      }
      else
      {
        if (v10 > *(float *)&dword_1EFC76910)
          goto LABEL_31;
        v13 = *a3;
      }
      if (v13 >= v11)
      {
        v16 = *a3;
        v17 = *(float *)&dword_1EFC76910;
        if (kAmplitudeMaxScale)
        {
          MTBEDebugParams::GetParam(kAmplitudeMaxScale, (const __CFString *)&dword_1EFC76910, v8, *(float *)&dword_1EFC76910);
          kAmplitudeMaxScale = 0;
          v17 = *(float *)&dword_1EFC76910;
        }
        if (v16 <= v17)
          goto LABEL_34;
        v12 = kAmplitudeMinScale;
        v11 = *(float *)&dword_1EFC76900;
        goto LABEL_29;
      }
    }
LABEL_31:
    v23 = v11;
    v18 = dword_1EFC76910;
    if (kAmplitudeMaxScale)
    {
      MTBEDebugParams::GetParam(kAmplitudeMaxScale, (const __CFString *)&dword_1EFC76910, v8, *(float *)&dword_1EFC76910);
      kAmplitudeMaxScale = 0;
      v18 = dword_1EFC76910;
    }
    v22 = v18;
    vDSP_vclip(__C[0], 1, &v23, (const float *)&v22, __C[0], 1, *((unsigned __int16 *)a2 + 4));
    goto LABEL_34;
  }
  v14 = *a3;
  if (*a3 != 1.0)
  {
    if (a5)
    {
      if (kAmplitudeMinScale)
      {
        MTBEDebugParams::GetParam(kAmplitudeMinScale, (const __CFString *)&dword_1EFC76900, a3, *(float *)&dword_1EFC76900);
        kAmplitudeMinScale = 0;
      }
      v15 = *(float *)&dword_1EFC76900;
      if (kAmplitudeMaxScale)
      {
        MTBEDebugParams::GetParam(kAmplitudeMaxScale, (const __CFString *)&dword_1EFC76910, a3, *(float *)&dword_1EFC76910);
        kAmplitudeMaxScale = 0;
      }
      v14 = *(float *)&dword_1EFC76910;
      if (*a3 < *(float *)&dword_1EFC76910)
        v14 = *a3;
      if (v15 >= v14)
        v14 = v15;
      *a3 = v14;
    }
    cblas_sscal(*((unsigned __int16 *)a2 + 4), v14, *(float **)a2, 1);
  }
}

void sub_1D229575C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MTMBSimpleSignalProcessor::SmoothSegment(MTMBCrossfader **this, MTMBSegment *a2, MTFESpeechElement *a3)
{
  __int16 var3;
  uint64_t var1;
  const float *v8;

  MTMBSegment::Modify(a3);
  var3 = (__int16)a3->var3;
  if ((var3 & 6) != 0)
  {
    if (*((unsigned __int16 *)a2 + 7) >= (unsigned __int16)a3->var1)
      var1 = (unsigned __int16)a3->var1;
    else
      var1 = *((unsigned __int16 *)a2 + 7);
    if ((var3 & 1) == 0 && var1 >= 0x10)
    {
      v8 = (const float *)(*(_QWORD *)a2 + 4 * *((unsigned __int16 *)a2 + 4));
      var1 = 15;
LABEL_10:
      MTMBCrossfader::CrossfadePartial(this[2], var1, 1, var1, v8, (const float *)a3->var0, (const float *)a3->var0);
      return (*((uint64_t (**)(MTMBCrossfader **, MTFESpeechElement *, MTFESpeechElement **, _QWORD, float))*this
              + 4))(this, a3, &a3->var4[1].var3, LOBYTE(a3->var4[1].var4), *((float *)&a3->var4[1].var3 + 1));
    }
    if ((_DWORD)var1)
    {
      v8 = (const float *)(*(_QWORD *)a2 + 4 * *((unsigned __int16 *)a2 + 4));
      goto LABEL_10;
    }
  }
  return (*((uint64_t (**)(MTMBCrossfader **, MTFESpeechElement *, MTFESpeechElement **, _QWORD, float))*this
          + 4))(this, a3, &a3->var4[1].var3, LOBYTE(a3->var4[1].var4), *((float *)&a3->var4[1].var3 + 1));
}

void MTMBSimpleSignalProcessor::ChangePitch(MTMBCrossfader **this, MTMBSegment *a2, const float **a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  float v9;
  const float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const float *v15;
  uint64_t v16;
  uint64_t v17;
  const float *v18;
  MTMBCrossfader *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const float *v26;

  v3 = *((unsigned __int16 *)a2 + 4);
  if (v3 != *((unsigned __int16 *)a2 + 6))
  {
    if ((*((_WORD *)a2 + 8) & 1) == 0)
    {
      *((_WORD *)a2 + 6) = v3;
      return;
    }
    MTMBSegment::Modify((MTFESpeechElement *)a2);
    v7 = *((unsigned __int16 *)a2 + 6);
    v8 = *((unsigned __int16 *)a2 + 4);
    v9 = (float)v7 / (float)v8;
    if (v9 >= 1.5 || v9 <= 0.5)
    {
      if (v9 <= 1.0)
      {
        if (v7 >= 0x10)
          v14 = 16;
        else
          v14 = *((unsigned __int16 *)a2 + 6);
        if (!(_DWORD)v14)
          goto LABEL_39;
        v15 = (const float *)(*(_QWORD *)a2 + 4 * v8 - 4 * v14);
        v16 = *(_QWORD *)a2 + 4 * v7;
      }
      else
      {
        v11 = (const float *)(*(_QWORD *)a2 + 4 * v8);
        v12 = *(_QWORD *)a2 + 4 * v7 - (_QWORD)v11;
        if (v12 >= 1)
          bzero((void *)(*(_QWORD *)a2 + 4 * v8), 4 * (((unint64_t)v12 >> 2) - ((unint64_t)v12 > 3)) + 4);
        if ((int)v7 - (int)v8 >= 16)
          v13 = 16;
        else
          v13 = (v7 - v8);
        if ((_DWORD)v13)
        {
          MTMBCrossfader::CrossfadePartial(this[2], v13, 1, v13, *a3, v11, v11);
          LODWORD(v8) = *((unsigned __int16 *)a2 + 4);
        }
        if (v8 >= 0x10)
          v14 = 16;
        else
          v14 = v8;
        if (!(_DWORD)v14)
          goto LABEL_39;
        v15 = (const float *)(*(_QWORD *)a2 + 4 * v8 - 4 * v14);
        v16 = *(_QWORD *)a2 + 4 * *((unsigned __int16 *)a2 + 6);
      }
      v18 = (const float *)(v16 - 4 * v14);
    }
    else
    {
      if (v9 <= 1.0)
      {
        MTMBSegment::Modify((MTFESpeechElement *)a3);
        v22 = *((unsigned __int16 *)a2 + 4);
        v23 = *((unsigned __int16 *)a2 + 6);
        v24 = (v22 - v23);
        if (2 * (int)v24 >= (int)v23)
          v25 = *((unsigned __int16 *)a2 + 6);
        else
          v25 = (2 * v24);
        v26 = (const float *)(*(_QWORD *)a2 + 4 * v22 - 4 * (int)v25);
        MTMBCrossfader::CrossfadePartial(this[2], v25, 1, (v25 - v24), v26, (const float *)(*(_QWORD *)a2 + 4 * v23), v26);
        v19 = this[2];
        v18 = *a3;
        v15 = (const float *)(*(_QWORD *)a2 + 4 * *((unsigned __int16 *)a2 + 6));
        v14 = v25;
        v20 = v24;
        v21 = 1;
        goto LABEL_38;
      }
      v17 = (int)v7 - (int)v8;
      if ((_DWORD)v7 != (_DWORD)v8)
      {
        memmove((void *)(*(_QWORD *)a2 + 4 * v8), (const void *)(*(_QWORD *)a2 + 4 * v8 - 4 * v17), 4 * v17);
        LODWORD(v7) = *((unsigned __int16 *)a2 + 4);
      }
      if ((_DWORD)v17 == (_DWORD)v7)
        goto LABEL_39;
      v14 = (v7 - v17);
      v15 = *(const float **)a2;
      v18 = (const float *)(*(_QWORD *)a2 + 4 * v17);
    }
    v19 = this[2];
    v20 = 1;
    v21 = v14;
LABEL_38:
    MTMBCrossfader::CrossfadePartial(v19, v14, v20, v21, v18, v15, v18);
LABEL_39:
    *((_WORD *)a2 + 4) = *((_WORD *)a2 + 6);
  }
}

void MTMBAltSignalProcessor::ChangePitch(MTMBCrossfader **this, MTMBSegment *a2, MTMBSegment *a3)
{
  int v3;
  float *v7;
  float v8;
  unint64_t __N;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  int v13;
  float *v14;
  unsigned int v15;
  int v16;
  _BOOL4 v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  const float *v27;
  MTMBCrossfader *v28;
  const float *v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  uint64_t v33;
  float v34;
  const float *v35;
  void *v36;
  uint64_t v37;
  const void *v38;
  float *__D[4];
  float *__C[4];

  v3 = *((unsigned __int16 *)a2 + 4);
  if (v3 == *((unsigned __int16 *)a2 + 6))
    return;
  if ((*((_WORD *)a2 + 8) & 1) == 0)
  {
    *((_WORD *)a2 + 6) = v3;
    return;
  }
  MTMBSegment::Modify((MTFESpeechElement *)a2);
  if (*((unsigned __int16 *)a2 + 6) > *((unsigned __int16 *)a2 + 4)
    && MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kPitchChangeUseHann))
  {
    if (kPitchChangeHannProportion)
    {
      MTBEDebugParams::GetParam((const __CFString *)kPitchChangeHannProportion, (const __CFString *)&dword_1EFC76930, v7, *(float *)&dword_1EFC76930);
      kPitchChangeHannProportion = 0;
    }
    v8 = *(float *)&dword_1EFC76930;
    __N = *((unsigned __int16 *)a2 + 4);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__C, 4, __N);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__D, 4, *((unsigned __int16 *)a2 + 6));
    vDSP_hann_window(__C[0], 2 * *((unsigned __int16 *)a2 + 4), 1);
    vDSP_vmul(*(const float **)a2, 1, &__C[0][*((unsigned __int16 *)a2 + 4) - 1], -1, __D[0], 1, *((unsigned __int16 *)a2 + 4));
    LODWORD(__N) = vcvtps_s32_f32(v8 * (float)__N);
    vDSP_hann_window(__C[0], (2 * __N), 1);
    v10 = *((unsigned __int16 *)a2 + 6);
    v11 = *((unsigned __int16 *)a2 + 4);
    v12 = &__D[0][v11];
    if (v10 <= (int)v11 + (int)__N)
    {
      bzero(v12, 4 * (v10 - v11));
      v32 = &__D[0][*((unsigned __int16 *)a2 + 6) - (int)__N];
      vDSP_vma((const float *)(*(_QWORD *)a2 + 4 * (*((unsigned __int16 *)a2 + 4) - (int)__N)), 1, __C[0], 1, v32, 1, v32, 1, __N);
    }
    else
    {
      bzero(v12, 4 * ((int)v10 - ((int)v11 + (int)__N)));
      vDSP_vmul((const float *)(*(_QWORD *)a2 + 4 * (*((unsigned __int16 *)a2 + 4) - (int)__N)), 1, __C[0], 1, &__D[0][*((unsigned __int16 *)a2 + 6) - (int)__N], 1, __N);
    }
    goto LABEL_37;
  }
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kPitchChangeUseHann))
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__C, 4, *((unsigned __int16 *)a2 + 6));
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__D, 4, *((unsigned __int16 *)a2 + 6));
    vDSP_hann_window(__C[0], 2 * *((unsigned __int16 *)a2 + 6), 1);
    vDSP_vmul(*(const float **)a2, 1, &__C[0][*((unsigned __int16 *)a2 + 6) - 1], -1, __D[0], 1, *((unsigned __int16 *)a2 + 6));
    vDSP_vma((const float *)(*(_QWORD *)a2+ 4 * (*((unsigned __int16 *)a2 + 4) - (unint64_t)*((unsigned __int16 *)a2 + 6))), 1, __C[0], 1, __D[0], 1, __D[0], 1, *((unsigned __int16 *)a2 + 6));
LABEL_37:
    v33 = *((unsigned __int16 *)a2 + 6);
    if (*((_WORD *)a2 + 6))
    {
      memmove(*(void **)a2, __D[0], 4 * v33);
      LOWORD(v33) = *((_WORD *)a2 + 6);
    }
    *((_WORD *)a2 + 4) = v33;
    MEOWVectorBase::~MEOWVectorBase((void **)__D);
    MEOWVectorBase::~MEOWVectorBase((void **)__C);
    return;
  }
  v13 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kPitchDetectExcitation);
  v15 = *((unsigned __int16 *)a2 + 4);
  if (v13)
  {
    v16 = cblas_isamax(*((unsigned __int16 *)a2 + 4), *(const float **)a2, 1);
    v15 = *((unsigned __int16 *)a2 + 4);
    v17 = v16 < (int)(v15 >> 1);
  }
  else
  {
    v17 = 1;
  }
  v18 = *((unsigned __int16 *)a2 + 6);
  if (v18 <= 2 * v15)
  {
    v20 = v18 - v15;
    if (v18 <= v15)
    {
      if (kPitchIncreaseWindow)
      {
        MTBEDebugParams::GetParam((const __CFString *)kPitchIncreaseWindow, (const __CFString *)&dword_1EFC76970, v14, *(float *)&dword_1EFC76970);
        kPitchIncreaseWindow = 0;
        v18 = *((unsigned __int16 *)a2 + 6);
      }
      v34 = *(float *)&dword_1EFC76970 * (float)v18;
      v30 = (int)v34;
      if (!v17)
      {
        v36 = *(void **)a2;
        v37 = *(_QWORD *)a2 + 4 * *((unsigned __int16 *)a2 + 4);
        v38 = (const void *)(v37 - 4 * v18);
        if ((_DWORD)v30)
        {
          MTMBCrossfader::CrossfadePartial(this[2], v30, 1, (int)v34, *(const float **)a2, (const float *)(v37 - 4 * v18), (const float *)(v37 - 4 * v18));
          v18 = *((unsigned __int16 *)a2 + 6);
        }
        if (v18)
          memmove(v36, v38, 4 * v18);
        goto LABEL_55;
      }
      if (!(_DWORD)v30)
      {
LABEL_55:
        *((_WORD *)a2 + 4) = *((_WORD *)a2 + 6);
        return;
      }
      v27 = (const float *)(*(_QWORD *)a2 + 4 * *((unsigned __int16 *)a2 + 4) - 4 * (int)v30);
      v29 = (const float *)(*(_QWORD *)a2 + 4 * v18 - 4 * (int)v30);
      v28 = this[2];
      v31 = (int)v34;
    }
    else
    {
      if (kPitchDecreaseWindow)
      {
        MTBEDebugParams::GetParam((const __CFString *)kPitchDecreaseWindow, (const __CFString *)&dword_1EFC76950, v14, *(float *)&dword_1EFC76950);
        kPitchDecreaseWindow = 0;
      }
      v21 = (int)(float)(*(float *)&dword_1EFC76950 * (float)v20);
      if (kPitchDecreaseMinWin)
      {
        MTBEDebugParams::GetParam((const __CFString *)kPitchDecreaseMinWin, (const __CFString *)&qword_1EFC76960, (uint64_t *)qword_1EFC76960);
        kPitchDecreaseMinWin = 0;
      }
      if (v21 <= (int)qword_1EFC76960)
        v22 = qword_1EFC76960;
      else
        v22 = v21;
      v23 = *((unsigned __int16 *)a2 + 4);
      if ((int)v23 - v20 >= v22)
        v24 = v22;
      else
        v24 = (v23 - v20);
      v25 = *(_QWORD *)a2;
      if (!v17)
      {
        if (*((_WORD *)a2 + 4))
          memmove((void *)(v25 + 4 * *((unsigned __int16 *)a2 + 6) - 4 * v23), *(const void **)a2, 4 * v23);
        if (!(_DWORD)v24)
          goto LABEL_55;
        v27 = (const float *)(v25 + 4 * v20);
        v29 = &v27[v20];
        v28 = this[2];
        v30 = v24;
        v31 = v24;
        v35 = v27;
        goto LABEL_50;
      }
      v26 = (char *)(v25 + 4 * v23);
      if (v18 != v15)
        memmove(v26, &v26[-4 * v20], 4 * v20);
      if (!(_DWORD)v24)
        goto LABEL_55;
      v27 = (const float *)&v26[-4 * v20 + -4 * (int)v24];
      v28 = this[2];
      v29 = (const float *)&v26[-4 * (int)v24];
      v30 = v24;
      v31 = v24;
    }
    v35 = v29;
LABEL_50:
    MTMBCrossfader::CrossfadePartial(v28, v30, 1, v31, v29, v27, v35);
    goto LABEL_55;
  }
  do
  {
    v19 = 2 * (v15 & 0x7FFF);
    if (v19 >= v18)
      LOWORD(v19) = v18;
    *((_WORD *)a2 + 6) = v19;
    (*((void (**)(MTMBCrossfader **, MTMBSegment *, MTMBSegment *))*this + 5))(this, a2, a3);
    v15 = *((unsigned __int16 *)a2 + 4);
  }
  while (v15 < v18);
}

void sub_1D2295F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MTMBSimpleSignalProcessor::BlendBeg(uint64_t this, const float **a2)
{
  uint64_t v3;

  if (*((unsigned __int16 *)a2 + 4) >= 0xFu)
    v3 = 15;
  else
    v3 = *((unsigned __int16 *)a2 + 4);
  if ((_DWORD)v3)
    return MTMBCrossfader::CrossfadePartial(*(MTMBCrossfader **)(this + 16), v3, 1, v3, MTMBSimpleSignalProcessor::BlendBeg(MTMBSegment *)::sZero, *a2, *a2);
  return this;
}

void MTMBSimpleSignalProcessor::BlendEnd(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *((unsigned __int16 *)a2 + 4);
  if (*((_WORD *)a2 + 4))
  {
    v3 = *a2;
    v4 = *(float *)(*a2 + 4 * v2 - 4);
    if (v4 <= 0.0)
    {
      if (v4 < 0.0)
      {
        do
        {
          v7 = v3 + 4 * v2;
          *(_DWORD *)(v7 - 4) = 0;
        }
        while (*(float *)(v7 - 8) < 0.0 && v2-- > 1);
      }
    }
    else
    {
      do
      {
        v5 = v3 + 4 * v2;
        *(_DWORD *)(v5 - 4) = 0;
      }
      while (*(float *)(v5 - 8) > 0.0 && v2-- > 1);
    }
  }
}

uint64_t MTMBSimpleSignalProcessor::ChangeAmplitude(uint64_t this, MTMBSegment *a2, float a3, float a4, float a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float v14;
  uint64_t v15;
  const float *v16;
  float v17;
  float *v18;
  uint64_t v19;
  float v20;
  const float *v22;
  float *v23;
  float i;
  float v25;
  float v26;
  int v27;
  int v28;
  int v29;
  int v30;
  float *v31;
  int v32;
  float v33;
  int v34;

  if (!*((_WORD *)a2 + 4))
    return this;
  v11 = this;
  MTMBSegment::Modify((MTFESpeechElement *)a2);
  if (a6)
  {
    v12 = *((unsigned __int16 *)a2 + 4);
    if (*((_WORD *)a2 + 4))
    {
      v13 = *(float **)a2;
      do
      {
        v14 = (float)((float)(*(float *)(v11 + 8) * 27.0) * 0.03125) + *v13;
        *(float *)(v11 + 8) = v14;
        *v13++ = v14 * 4.0;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    a3 = a3 * 1.05;
    a4 = a4 * 1.05;
  }
  if (a4 == a3)
  {
    cblas_sscal(*((unsigned __int16 *)a2 + 4), a3, *(float **)a2, 1);
    LODWORD(v15) = *((unsigned __int16 *)a2 + 4);
    v16 = *(const float **)a2;
    if (!*((_WORD *)a2 + 4))
      goto LABEL_22;
LABEL_15:
    v19 = 0;
    do
    {
      v20 = fabsf(v16[v19]);
      if ((LODWORD(v16[v19]) & 0x7FFFFFFFu) > 0x7F7FFFFF || v20 > (float)(a5 * 4.0))
        v16[v19] = 0.0;
      ++v19;
    }
    while (v15 != v19);
    goto LABEL_22;
  }
  v15 = *((unsigned __int16 *)a2 + 4);
  v16 = *(const float **)a2;
  if (*((_WORD *)a2 + 4))
  {
    v17 = (float)(a4 - a3) / (float)v15;
    v18 = *(float **)a2;
    do
    {
      a3 = v17 + a3;
      *v18 = a3 * *v18;
      ++v18;
    }
    while (v18 < &v16[v15]);
    if ((_DWORD)v15)
      goto LABEL_15;
  }
LABEL_22:
  this = cblas_isamax(v15, v16, 1);
  v22 = *(const float **)a2;
  v23 = (float *)(*(_QWORD *)a2 + 4 * (int)this);
  for (i = fabsf(*v23); i > a5; i = fabsf(*v23))
  {
    v25 = a5 / i;
    v26 = (float)(1.0 - v25) / 10.0;
    if ((int)this <= 10)
      v27 = 10;
    else
      v27 = this;
    v28 = v27 - 10;
    v29 = this + 10;
    v30 = *((unsigned __int16 *)a2 + 4);
    if (v30 - 1 < (int)this + 10)
      v29 = v30 - 1;
    if ((int)this > v28)
    {
      v31 = v23 - 1;
      v32 = this;
      v33 = v25;
      do
      {
        --v32;
        v33 = v26 + v33;
        *v31 = v33 * *v31;
        --v31;
      }
      while (v32 > v28);
    }
    if ((int)this <= v29)
    {
      v34 = v29 - this + 1;
      do
      {
        *v23 = v25 * *v23;
        ++v23;
        v25 = v26 + v25;
        --v34;
      }
      while (v34);
    }
    this = cblas_isamax(v30, v22, 1);
    v22 = *(const float **)a2;
    v23 = (float *)(*(_QWORD *)a2 + 4 * (int)this);
  }
  return this;
}

uint64_t MTMBSignalProcessor::Create(MTMBSignalProcessor *this)
{
  int v1;
  uint64_t v2;

  v1 = MTBEDebugFlags::sMEOWDebug;
  v2 = operator new();
  *(_QWORD *)v2 = &off_1E9368460;
  *(_DWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = MTMBCrossfader::Create((MTMBCrossfader *)v2);
  if ((v1 & 0x10000) == 0)
    *(_QWORD *)v2 = &off_1E9368538;
  return v2;
}

void sub_1D22962C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C406B6A53AFLL);
  _Unwind_Resume(a1);
}

void MTMBAltSignalProcessor::~MTMBAltSignalProcessor(MTMBAltSignalProcessor *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_1E9368460;
  v1 = *((_QWORD *)this + 2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E9368460;
  v1 = *((_QWORD *)this + 2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1D8233BA8);
}

uint64_t MTMBSegment::SetProperties(uint64_t result, _DWORD *a2)
{
  *(_QWORD *)(result + 24) = a2;
  ++*a2;
  return result;
}

_DWORD *MTMBSegment::Allocate(MTMBSegment *this, int a2)
{
  _DWORD *v4;
  __int16 v5;
  _DWORD *v6;
  _DWORD *result;

  v4 = (_DWORD *)*((_QWORD *)this + 3);
  if (v4)
    ++*v4;
  MTMBSegment::Free(this);
  if (a2 <= 512)
    v5 = 512;
  else
    v5 = a2;
  *((_WORD *)this + 5) = v5;
  v6 = (_DWORD *)operator new[]();
  *v6 = -1091585519;
  result = v6 + 1;
  *(_QWORD *)this = result;
  result[*((unsigned __int16 *)this + 5)] = -1091585519;
  *((_WORD *)this + 4) = a2;
  *((_WORD *)this + 8) |= 0x8000u;
  return result;
}

_DWORD *MTMBSegment::Free(MTMBSegment *this)
{
  uint64_t v2;
  _DWORD *result;

  if (*((__int16 *)this + 8) < 0)
  {
    v2 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      if (*(_DWORD *)(v2 - 4) != -1091585519 || *(_DWORD *)(v2 + 4 * *((unsigned __int16 *)this + 5)) != -1091585519)
      {
        MTBEAbort(0);
        v2 = *(_QWORD *)this;
      }
      MEMORY[0x1D8233B90](v2 - 4, 0x1000C8052888210);
    }
  }
  *(_QWORD *)this = 0;
  result = (_DWORD *)*((_QWORD *)this + 3);
  if (result)
  {
    if ((*result)-- == 1)
      JUMPOUT(0x1D8233BA8);
  }
  return result;
}

MTFESpeechElement *MTMBSegment::Grow(MTFESpeechElement *this, int a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;

  if (SLOWORD(this->var3) < 0)
  {
    v2 = (uint64_t)this;
    if (this->var0)
    {
      v4 = (void *)operator new[]();
      v5 = *(unsigned __int16 *)(v2 + 8);
      memcpy(v4, *(const void **)v2, 4 * v5);
      MTMBSegment::Allocate((MTMBSegment *)v2, *(unsigned __int16 *)(v2 + 10) + a2);
      memcpy(*(void **)v2, v4, 4 * v5);
      *(_WORD *)(v2 + 8) = v5;
      this = (MTFESpeechElement *)MEMORY[0x1D8233B90](v4, 0x1000C8052888210);
      if (*(__int16 *)(v2 + 16) < 0
        && (*(_DWORD *)(*(_QWORD *)v2 - 4) != -1091585519
         || *(_DWORD *)(*(_QWORD *)v2 + 4 * *(unsigned __int16 *)(v2 + 10)) != -1091585519))
      {
        return MTBEAbort(0);
      }
    }
  }
  return this;
}

MTFESpeechElement *MTMBSegment::Modify(MTFESpeechElement *this)
{
  uint64_t v1;
  void **var0;

  if ((SLOWORD(this->var3) & 0x80000000) == 0)
  {
    v1 = (uint64_t)this;
    var0 = this->var0;
    this = (MTFESpeechElement *)MTMBSegment::Allocate((MTMBSegment *)this, (unsigned __int16)this->var1);
    if (var0 && *(_WORD *)(v1 + 8))
      this = (MTFESpeechElement *)memmove(*(void **)v1, var0, 4 * *(unsigned __int16 *)(v1 + 8));
    if (*(__int16 *)(v1 + 16) < 0
      && (*(_DWORD *)(*(_QWORD *)v1 - 4) != -1091585519
       || *(_DWORD *)(*(_QWORD *)v1 + 4 * *(unsigned __int16 *)(v1 + 10)) != -1091585519))
    {
      return MTBEAbort(0);
    }
  }
  return this;
}

int *MTMBSegment::Abstract(MTMBSegment **this)
{
  MTMBSegment *v2;
  char v3;

  v2 = *this;
  v3 = ((__int16)this[2] & 0x80000000) == 0
    || *((_DWORD *)v2 - 1) == -1091585519 && *((_DWORD *)v2 + *((unsigned __int16 *)this + 5)) == -1091585519;
  MTMBSegment::Abstract(v2, (const float *)*((unsigned __int16 *)this + 4), v3);
  return &MTMBSegment::Abstract(float const*,int,BOOL)::sBuf;
}

int *MTMBSegment::Abstract(MTMBSegment *this, const float *a2, char a3)
{
  int v3;
  int v5;
  int v6;
  int v7;
  float v8;
  uint64_t v9;
  MTMBSegment *v10;
  float v11;
  float v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  char *v17;
  int v18;
  float v19;
  char *v20;
  uint64_t v21;
  const char *v23;
  double v24;
  double v25;
  double v26;
  float *v27;
  double v28;
  double v29;
  float v30;
  char *v37;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;

  v3 = (int)a2;
  if ((int)a2 < 1)
  {
    v6 = 0;
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0.0;
    v9 = a2;
    v10 = this;
    do
    {
      v11 = *(float *)v10;
      v10 = (MTMBSegment *)((char *)v10 + 4);
      v12 = v11;
      v13 = (int)v8;
      if (v6 > v5)
      {
        v14 = v6;
      }
      else
      {
        v13 = v7;
        v14 = v5;
      }
      v15 = v12 == v8;
      if (v12 == v8)
      {
        ++v6;
      }
      else
      {
        v7 = v13;
        v8 = v12;
        v6 = 1;
      }
      if (!v15)
        v5 = v14;
      --v9;
    }
    while (v9);
  }
  if (v6 <= v5)
    v16 = v5;
  else
    v16 = v6;
  v17 = (char *)&MTMBSegment::Abstract(float const*,int,BOOL)::sBuf;
  if ((a3 & 1) == 0)
  {
    strcpy((char *)&MTMBSegment::Abstract(float const*,int,BOOL)::sBuf, "!!! ");
    v17 = &byte_1EFC771D8;
  }
  v18 = sprintf(v17, "[%u]", (_DWORD)a2);
  if (v3)
    v19 = fabsf(*((float *)this + cblas_isamax(v3, (const float *)this, 1)));
  else
    v19 = 0.0;
  v20 = &v17[v18];
  if (v19 > 100000.0)
  {
    *(_DWORD *)v20 = 3940670;
    v20 += 3;
  }
  switch(v3)
  {
    case 0:
      strcpy(v20, "{}");
      v21 = 2;
      goto LABEL_81;
    case 1:
      if (v19 > 0.0001 && v19 < 10.0)
        v23 = "{%.5f}";
      else
        v23 = "{%.0f}";
      v24 = *(float *)this;
      goto LABEL_80;
    case 2:
      if (v19 > 0.0001 && v19 < 10.0)
        v23 = "{%.5f %.5f}";
      else
        v23 = "{%.0f %.0f}";
      v24 = *(float *)this;
      v25 = *((float *)this + 1);
      goto LABEL_79;
    case 3:
      if (v19 > 0.0001 && v19 < 10.0)
        v23 = "{%.5f %.5f %.5f}";
      else
        v23 = "{%.0f %.0f %.0f}";
      v24 = *(float *)this;
      v25 = *((float *)this + 1);
      v26 = *((float *)this + 2);
      goto LABEL_78;
    case 4:
      if (v19 > 0.0001 && v19 < 10.0)
        v23 = "{%.5f %.5f %.5f %.5f}";
      else
        v23 = "{%.0f %.0f %.0f %.0f}";
      v24 = *(float *)this;
      v25 = *((float *)this + 1);
      v26 = *((float *)this + 2);
      v28 = *((float *)this + 3);
      goto LABEL_77;
    case 5:
      if (v19 > 0.0001 && v19 < 10.0)
        v23 = "{%.5f %.5f %.5f %.5f %.5f}";
      else
        v23 = "{%.0f %.0f %.0f %.0f %.0f}";
      v24 = *(float *)this;
      v25 = *((float *)this + 1);
      v26 = *((float *)this + 2);
      v28 = *((float *)this + 3);
      v29 = *((float *)this + 4);
      goto LABEL_76;
    case 6:
      if (v19 > 0.0001 && v19 < 10.0)
        v23 = "{%.5f %.5f %.5f %.5f %.5f %.5f}";
      else
        v23 = "{%.0f %.0f %.0f %.0f %.0f %.0f}";
      v24 = *(float *)this;
      v25 = *((float *)this + 1);
      v26 = *((float *)this + 2);
      v28 = *((float *)this + 3);
      v30 = *((float *)this + 5);
      v29 = *((float *)this + 4);
      goto LABEL_75;
    default:
      if (v19 > 0.0001 && v19 < 10.0)
        v23 = "{%.5f %.5f %.5f ... %.5f %.5f %.5f}";
      else
        v23 = "{%.0f %.0f %.0f ... %.0f %.0f %.0f}";
      v24 = *(float *)this;
      v25 = *((float *)this + 1);
      v26 = *((float *)this + 2);
      v27 = (float *)((char *)this + 4 * v3);
      v28 = *(v27 - 3);
      v29 = *(v27 - 2);
      v30 = *(v27 - 1);
LABEL_75:
      v43 = v30;
LABEL_76:
      v42 = v29;
LABEL_77:
      v41 = v28;
LABEL_78:
      v40 = v26;
LABEL_79:
      v39 = v25;
LABEL_80:
      v21 = sprintf(v20, v23, *(_QWORD *)&v24, *(_QWORD *)&v39, *(_QWORD *)&v40, *(_QWORD *)&v41, *(_QWORD *)&v42, *(_QWORD *)&v43);
LABEL_81:
      if (v16 >= 3)
      {
        v37 = &v20[v21];
        if (v16 == v3)
          sprintf(v37, " all %d");
        else
          sprintf(v37, " run %d len %d");
      }
      return &MTMBSegment::Abstract(float const*,int,BOOL)::sBuf;
  }
}

float MTMBSegment::RawPower(MTMBSegment *this)
{
  int v2;
  float v4;
  unsigned int v5;

  v2 = *((unsigned __int16 *)this + 4);
  if (!v2 || (*((_WORD *)this + 8) & 1) == 0)
    return 0.0;
  v4 = cblas_sdot(v2, *(const float **)this, 1, *(const float **)this, 1);
  LOWORD(v5) = *((_WORD *)this + 4);
  return sqrtf(v4 / (float)v5);
}

float MTMBSegment::LinPower(const float **this)
{
  int v2;
  float result;
  float v4;
  unsigned int v5;

  v2 = *((unsigned __int16 *)this + 4);
  result = 0.0;
  if (v2)
  {
    if (((_WORD)this[2] & 1) != 0)
    {
      v4 = cblas_sdot(v2, *this, 1, *this, 1);
      LOWORD(v5) = *((_WORD *)this + 4);
      return v4 / (float)v5;
    }
  }
  return result;
}

MTFESpeechElement *MTMBSegment::Check(MTFESpeechElement *this)
{
  if (SLOWORD(this->var3) < 0
    && (*((_DWORD *)this->var0 - 1) != -1091585519
     || *((_DWORD *)this->var0 + *(unsigned __int16 *)&this->var2) != -1091585519))
  {
    return MTBEAbort(0);
  }
  return this;
}

void MTMBDemiProperties::MTMBDemiProperties(MTMBDemiProperties *this)
{
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 17) = 0;
  *((_QWORD *)this + 9) = 1065353216;
  *((_BYTE *)this + 80) = 0;
}

{
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 17) = 0;
  *((_QWORD *)this + 9) = 1065353216;
  *((_BYTE *)this + 80) = 0;
}

const char *MTMBDemiProperties::Phon(MTMBDemiProperties *this, char *a2)
{
  _BYTE *v2;
  char *v3;

  v2 = (_BYTE *)*((_QWORD *)this + 1);
  if (!v2 || !*v2)
    return "";
  if (*((unsigned __int8 *)this + 18) == 255)
    return (const char *)*((_QWORD *)this + 1);
  v3 = a2;
  if (*((_BYTE *)this + 18))
    sprintf(a2, ">%s");
  else
    sprintf(a2, "%s<");
  return v3;
}

uint64_t MTMBDemiProperties::UseWordPitch(MTMBDemiProperties *this)
{
  if ((*((char *)this + 18) & 0x80000000) == 0)
    return 0;
  if ((*((_WORD *)this + 8) & 1) != 0)
    return MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBEnforceTunes) ^ 1;
  return 1;
}

uint64_t MTMBDemiProperties::UseGluePitch(MTMBDemiProperties *this)
{
  if ((*((_WORD *)this + 8) & 0x10) != 0)
    return MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBForceGluePitch);
  else
    return 0;
}

void MTMBDemi::MTMBDemi(MTMBDemi *this)
{
  uint64_t v2;

  MEOWVectorBase::MEOWVectorBase(this, 32);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)(v2 + 32), 4);
  *((_DWORD *)this + 25) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
}

void sub_1D2296DC4(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void MTMBDemi::~MTMBDemi(MTMBDemi *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 13);
  if (v2)
  {
    if ((*v2)-- == 1)
      MEMORY[0x1D8233BA8]();
  }
  MEOWVectorBase::~MEOWVectorBase((void **)this + 4);
  MEOWVectorBase::~MEOWVectorBase((void **)this);
}

void MTMBDemi::Load(size_t a1, MEOWReader *this, uint64_t a3, uint64_t a4, unsigned __int16 *a5, int a6, float *a7)
{
  unsigned __int16 *GlobalParams;
  uint64_t Segments;
  unsigned int v15;
  uint64_t v16;
  unsigned int Samples;
  unint64_t v18;
  __int16 *v19;
  float *v20;
  uint64_t v21;
  int v22;
  __int16 *v23[2];
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  *(_QWORD *)(a1 + 104) = a3;
  GlobalParams = MEOWReader::GetGlobalParams(this, 1);
  Segments = MTMBDemi::LoadSegments((void **)a1, *(_QWORD *)(a4 + 24), (const unsigned __int16 *)(*(_QWORD *)(a4 + 32) + 2 * *(_QWORD *)(a4 + 16)), bswap32(GlobalParams[2]) >> 16);
  v15 = Segments;
  if (Segments)
    v16 = 200;
  else
    v16 = 0;
  v26 = 0;
  v27 = 0;
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v23, 2, Segments + v16);
  Samples = MEOWReader::ReadSamples(this, *(_DWORD *)a4, *(unsigned int *)(a4 + 40), v15, v23[0], (unint64_t *)(a1 + 64), (unint64_t *)(a1 + 72));
  v18 = Samples
      + (unint64_t)MEOWReader::ReadSamples(this, *(_DWORD *)a4, *(_DWORD *)(a4 + 40) + Samples, v16, &v23[0][Samples], &v27, &v26);
  if (*(_QWORD *)(a1 + 56) < v18)
    MEOWVectorBase::Allocate((MEOWVectorBase *)(a1 + 32), v18, 1);
  *(_QWORD *)(a1 + 48) = v18;
  if (v25 >= v18)
  {
    v24 = v18;
    *(_DWORD *)(a1 + 100) = Samples;
    if (!v18)
      goto LABEL_11;
  }
  else
  {
    MEOWVectorBase::Allocate((MEOWVectorBase *)v23, v18, 1);
    v24 = v18;
    *(_DWORD *)(a1 + 100) = Samples;
  }
  v19 = v23[0];
  v20 = *(float **)(a1 + 32);
  v21 = 2 * v18;
  do
  {
    v22 = *v19++;
    *v20++ = (float)v22;
    v21 -= 2;
  }
  while (v21);
LABEL_11:
  MTMBDemi::ProtectSegments(a1, a5, 0);
  MTMBDemi::SetBoundaryPitch((MTMBDemi *)a1, a6, a7);
  if ((MTBEDebugFlags::sMTXDebug & 0x10000) != 0)
    MTMBDemi::DumpSBXF(a1);
  MEOWVectorBase::~MEOWVectorBase((void **)v23);
}

void sub_1D2296FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  MEOWVectorBase::~MEOWVectorBase(&a9);
  _Unwind_Resume(a1);
}

uint64_t MTMBDemi::LoadSegments(void **this, uint64_t a2, const unsigned __int16 *a3, unsigned int a4)
{
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v20;
  unsigned int v21;

  MEOWVectorBase::clear(this);
  if (a2)
  {
    v8 = 0;
    v9 = 4 * a4;
    v20 = a4 >> 1;
    v21 = a4;
    do
    {
      v10 = *a3 & 0x7FFF;
      if ((*a3 & 0x8000) != 0 || v10 > v9)
      {
        if (((_DWORD)v10 != 0) <= (unint64_t)((v10 + v20) / v21))
          v13 = (v10 + v20) / v21;
        else
          v13 = (_DWORD)v10 != 0;
        if (v13)
        {
          v14 = *a3 & 0x7FFF;
          do
          {
            v15 = this[13];
            ++*v15;
            MEOWVectorBase::Append(this);
            v16 = (uint64_t)*this + 32 * (_QWORD)this[2];
            *(_QWORD *)(v16 - 32) = 0;
            *(_DWORD *)(v16 - 24) = (unsigned __int16)(v14 / v13);
            *(_WORD *)(v16 - 20) = v14 / v13;
            *(_DWORD *)(v16 - 18) = 0;
            *(_QWORD *)(v16 - 8) = v15;
            v14 -= (unsigned __int16)(v14 / v13--);
          }
          while (v13);
        }
      }
      else
      {
        v11 = this[13];
        ++*v11;
        MEOWVectorBase::Append(this);
        v12 = (uint64_t)*this + 32 * (_QWORD)this[2];
        *(_QWORD *)(v12 - 32) = 0;
        *(_WORD *)(v12 - 24) = v10;
        *(_WORD *)(v12 - 22) = 0;
        *(_WORD *)(v12 - 20) = v10;
        *(_DWORD *)(v12 - 18) = 0x10000;
        *(_QWORD *)(v12 - 8) = v11;
      }
      v8 += v10;
      ++a3;
      --a2;
    }
    while (a2);
  }
  else
  {
    v17 = this[13];
    ++*v17;
    MEOWVectorBase::Append(this);
    v8 = 0;
    v18 = (uint64_t)*this + 32 * (_QWORD)this[2];
    *(_QWORD *)(v18 - 32) = 0;
    *(_QWORD *)(v18 - 24) = 0;
    *(_WORD *)(v18 - 16) = 0;
    *(_QWORD *)(v18 - 8) = v17;
  }
  return v8;
}

uint64_t MTMBDemi::ProtectSegments(uint64_t result, unsigned __int16 *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  uint64_t v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  uint64_t v32;
  unsigned __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  unsigned int v37;

  v4 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 32);
  v6 = *a2;
  if (v6 == 0xFFFF)
  {
    v7 = *(_QWORD *)(result + 104);
    if (*(_BYTE *)(v7 + 18))
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
    }
    else
    {
      result = strcmp(*(const char **)(v7 + 8), "k");
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v12 = 0;
      if ((_DWORD)result)
        v11 = 882;
      else
        v11 = 1102;
    }
  }
  else
  {
    v11 = 0;
    v12 = v6 >> 12;
    v8 = (v6 >> 8) & 0xF;
    v10 = v6 & 0xF;
    v9 = v6 >> 4;
  }
  v13 = v4[2];
  if (v13 >= 1)
  {
    v14 = 0;
    v15 = *v4 + 32 * v13;
    v16 = v5 + 4 * v4[6];
    v17 = (unsigned __int16 *)(*v4 + 16);
    v18 = 32 * v13;
    result = 16;
    while (1)
    {
      *((_QWORD *)v17 - 2) = v5;
      v19 = v17 - 8;
      v20 = *(v17 - 4);
      v5 += 4 * v20;
      *(v17 - 1) = (v16 - v5) >> 2;
      if (v11 < 1)
        break;
      v11 -= v20;
LABEL_50:
      v17 += 16;
      v18 -= 32;
      ++v14;
      if ((unint64_t)(v19 + 16) >= v15)
        return result;
    }
    v21 = (v18 >> 5) - 1;
    if (v12 > v14 || v21 < v8)
    {
      if (!v14 || (v18 >> 5) == 1)
      {
LABEL_19:
        if (v9 > v14 || v21 < v10)
        {
          if (v14 && (v18 >> 5) != 1)
          {
            v23 = *v17 | 0x20;
            *v17 |= 0x20u;
            goto LABEL_27;
          }
        }
        else
        {
          *v17 |= 0x60u;
        }
        if (!v14)
        {
LABEL_48:
          if (a3)
            *v17 |= 0x800u;
          goto LABEL_50;
        }
        v23 = *v17;
LABEL_27:
        if (((*(v17 - 16) ^ v23) & 1) != 0)
        {
          v24 = (v23 & 1) == 0;
          if ((v23 & 1) != 0)
            v25 = 0;
          else
            v25 = -1;
          v26 = 16 * v25;
          v27 = v17[v26];
          if (v24)
            v28 = 0;
          else
            v28 = -1;
          v29 = v17[v26] & 0x18;
          if ((v27 & 0x10) != 0)
            v29 = 16;
          v30 = v29 | v27 & 0xFF87;
          if ((v27 & 0x40) != 0)
            v31 = 64;
          else
            v31 = v17[v26] & 0x60;
          v17[v26] = v30 | v31;
          v32 = 16 * v28;
          v33 = v17[16 * v28];
          v34 = v33 & 0x18;
          if ((v33 & 0x18) != 0)
            v34 = 8;
          v35 = v34 | v33 & 0xFF87;
          if ((v33 & 0x60) != 0)
            v36 = 32;
          else
            v36 = 0;
          v17[v32] = v35 | v36;
        }
        if ((v18 >> 5) != 1)
        {
          v37 = v17[12] + *(v17 - 20);
          if ((int)((v37 >> 1) - v20) > (int)(v37 >> 3))
            *v17 &= 0xFF87u;
        }
        goto LABEL_48;
      }
      v22 = 8;
    }
    else
    {
      v22 = 24;
    }
    *v17 |= v22;
    goto LABEL_19;
  }
  return result;
}

size_t MTMBDemi::DumpSBXF(size_t this)
{
  uint64_t v1;
  FILE **v2;
  FILE *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  _QWORD v14[11];
  char v15[8];
  uint64_t v16;

  v1 = this;
  v16 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(this + 16) || *(_QWORD *)(*(_QWORD *)(this + 104) + 32))
  {
    v2 = (FILE **)MEMORY[0x1E0C80C20];
    if ((MTMBDemi::DumpSBXF(void)::sHasHeader & 1) == 0)
    {
      fwrite("R 1.0\n", 6uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C20]);
      MTMBDemi::DumpSBXF(void)::sHasHeader = 1;
    }
    v3 = *v2;
    v4 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v1 + 104), v15);
    fprintf(v3, "W \"%s\" %4.2f 0x%16llx 0x%16llx\n", v4, (float)((float)*(uint64_t *)(*(_QWORD *)(v1 + 104) + 24) * 0.000015259), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
    v5 = *(_QWORD *)(*(_QWORD *)(v1 + 104) + 32);
    if (v5)
    {
      fprintf(*v2, "D %ld\n", 5 * v5);
      MTFEPitchTargets::MTFEPitchTargets((MTFEPitchTargets *)v14, 1, *(const float **)(*(_QWORD *)(v1 + 104) + 40), *(_DWORD *)(*(_QWORD *)(v1 + 104) + 32));
      fputc(80, *v2);
      if (SLODWORD(v14[0]) >= 1)
      {
        v6 = 1;
        do
          fprintf(*v2, " %5.1f:%d", (float)((float)(v14[v6] & 0xFFFFFFLL) / 100.0), v14[v6] >> 24);
        while (v6++ < SLODWORD(v14[0]));
      }
      fputc(10, *v2);
      fputc(70, *v2);
      v8 = *(_QWORD *)(v1 + 104);
      if (*(_QWORD *)(v8 + 32))
      {
        v9 = 0;
        do
        {
          fprintf(*v2, " %5.1f", *(float *)(*(_QWORD *)(v8 + 40) + 4 * v9++));
          v8 = *(_QWORD *)(v1 + 104);
        }
        while (v9 < *(_QWORD *)(v8 + 32));
      }
      fputc(10, *v2);
    }
    if (*(_QWORD *)(v1 + 16))
    {
      v10 = 0;
      do
      {
        v11 = *(_QWORD *)v1 + 32 * v10;
        if ((*(_WORD *)(v11 + 16) & 1) != 0)
          v12 = 86;
        else
          v12 = 85;
        fputc(v12, *v2);
        if (*(_WORD *)(v11 + 8))
        {
          v13 = 0;
          do
            fprintf(*v2, " %.0f", *(float *)(*(_QWORD *)v11 + 4 * v13++));
          while (v13 < *(unsigned __int16 *)(v11 + 8));
        }
        fputc(10, *v2);
        ++v10;
      }
      while (v10 < *(_QWORD *)(v1 + 16));
    }
    return fwrite("E\n", 2uLL, 1uLL, *v2);
  }
  return this;
}

void MTMBDemi::Load(size_t a1, MEOWReader *this, uint64_t a3)
{
  unsigned int v6;
  uint64_t Segments;
  unsigned int v8;
  unsigned int Samples;
  unint64_t v10;
  __int16 *v11;
  float *v12;
  uint64_t v13;
  int v14;
  unsigned __int16 v15;
  __int16 *v16[2];
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v6 = bswap32(MEOWReader::GetGlobalParams(this, 1)[2]) >> 16;
  *(_QWORD *)(a1 + 104) = 0;
  Segments = MTMBDemi::LoadSegments((void **)a1, *(_QWORD *)(a3 + 24), (const unsigned __int16 *)(*(_QWORD *)(a3 + 32) + 2 * *(_QWORD *)(a3 + 16)), v6);
  v8 = Segments;
  v19 = 0;
  v18 = 0;
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v16, 2, Segments + 200);
  Samples = MEOWReader::ReadSamples(this, *(_DWORD *)a3, *(unsigned int *)(a3 + 40), v8, v16[0], (unint64_t *)(a1 + 64), (unint64_t *)(a1 + 72));
  v10 = Samples
      + (unint64_t)MEOWReader::ReadSamples(this, *(_DWORD *)a3, *(_DWORD *)(a3 + 40) + Samples, 0xC8u, &v16[0][Samples], &v19, &v18);
  if (*(_QWORD *)(a1 + 56) < v10)
    MEOWVectorBase::Allocate((MEOWVectorBase *)(a1 + 32), v10, 1);
  *(_QWORD *)(a1 + 48) = v10;
  *(_DWORD *)(a1 + 100) = Samples;
  if (v17)
  {
    v11 = v16[0];
    v12 = *(float **)(a1 + 32);
    v13 = 2 * v17;
    do
    {
      v14 = *v11++;
      *v12++ = (float)v14;
      v13 -= 2;
    }
    while (v13);
  }
  v15 = 0;
  MTMBDemi::ProtectSegments(a1, &v15, 0);
  MTMBDemi::SetBoundaryPitch((MTMBDemi *)a1, 0, 0);
  if ((MTBEDebugFlags::sMTXDebug & 0x10000) != 0)
    MTMBDemi::DumpSBXF(a1);
  MEOWVectorBase::~MEOWVectorBase((void **)v16);
}

void sub_1D22977E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MTMBDemi::Load(MTMBDemi *this, uint64_t a2, _QWORD *a3, const void *a4, unsigned int a5, unsigned int a6)
{
  uint64_t v10;
  unint64_t Segments;
  void **v12;
  unsigned __int16 v14;

  *((_QWORD *)this + 13) = a2;
  v10 = a3[3];
  if (!a4 && !v10)
  {
    MEOWVectorBase::clear((void **)this);
    Segments = 0;
    v12 = (void **)((char *)this + 32);
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 25) = 0;
LABEL_8:
    bzero(*v12, 4 * Segments);
    goto LABEL_9;
  }
  Segments = MTMBDemi::LoadSegments((void **)this, v10, (const unsigned __int16 *)(a3[4] + 2 * a3[2]), 0xC8u);
  v12 = (void **)((char *)this + 32);
  if (*((_QWORD *)this + 7) < Segments)
    MEOWVectorBase::Allocate((MTMBDemi *)((char *)this + 32), Segments, 1);
  *((_QWORD *)this + 6) = Segments;
  *((_DWORD *)this + 25) = Segments;
  if (!a4)
    goto LABEL_8;
  memcpy(*v12, a4, 4 * Segments);
LABEL_9:
  *((_QWORD *)this + 8) = a5;
  *((_QWORD *)this + 9) = a6;
  v14 = 0;
  MTMBDemi::ProtectSegments((uint64_t)this, &v14, a4 == 0);
  return MTMBDemi::SetBoundaryPitch(this, 0, 0);
}

void MTMBDemi::Load(size_t a1, PROWReader *a2, uint64_t a3, unsigned __int8 *a4, unsigned __int16 *a5)
{
  uint64_t Segments;
  unsigned int Samples;
  __int16 *v11;
  float *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v22[4];

  *(_QWORD *)(a1 + 104) = a3;
  Segments = MTMBDemi::LoadSegments((void **)a1, *((_QWORD *)a4 + 1), *((const unsigned __int16 **)a4 + 2), bswap32(*(unsigned __int16 *)(*(_QWORD *)a2 + 2)) >> 16);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v22, 2, Segments + 512);
  Samples = PROWReader::ReadSamples(a2, *((_DWORD *)a4 + 6), Segments, v22[0]);
  if (*(_QWORD *)(a1 + 56) < (unint64_t)Samples)
    MEOWVectorBase::Allocate((MEOWVectorBase *)(a1 + 32), Samples, 1);
  *(_QWORD *)(a1 + 48) = Samples;
  *(_DWORD *)(a1 + 100) = Samples;
  if (Samples)
  {
    v11 = v22[0];
    v12 = *(float **)(a1 + 32);
    v13 = 2 * Samples;
    do
    {
      v14 = *v11++;
      *v12++ = (float)v14;
      v13 -= 2;
    }
    while (v13);
  }
  MTMBDemi::ProtectSegments(a1, a5, 0);
  MTMBDemi::SetBoundaryPitch((MTMBDemi *)a1, 0, 0);
  v15 = *a4;
  v16 = 4 * v15;
  v17 = (_DWORD)v15 == 0;
  v18 = 3;
  if (v17)
    v18 = 0;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 18))
    v19 = v18;
  else
    v19 = 1;
  v20 = 2;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 104) + 18))
    v20 = v16;
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = v20;
  v21 = *(_QWORD *)(a1 + 16);
  if (v21)
    *(_WORD *)(*(_QWORD *)a1 + 32 * v21 - 16) &= 0xFF87u;
  if ((MTBEDebugFlags::sMTXDebug & 0x10000) != 0)
    MTMBDemi::DumpSBXF(a1);
  *(_QWORD *)(a1 + 80) = -1;
  MEOWVectorBase::~MEOWVectorBase((void **)v22);
}

void sub_1D2297A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  MEOWVectorBase::~MEOWVectorBase(&a9);
  _Unwind_Resume(a1);
}

void MTMBDemi::Unload(MTMBDemi *this)
{
  uint64_t v2;
  unint64_t v3;

  if (*((_QWORD *)this + 2))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      MTMBSegment::Free((MTMBSegment *)(*(_QWORD *)this + v2));
      ++v3;
      v2 += 32;
    }
    while (v3 < *((_QWORD *)this + 2));
  }
  MEOWVectorBase::clear((void **)this + 4);
}

uint64_t *MTMBDemi::swap(MTMBDemi *this, MTMBDemi *a2)
{
  uint64_t *result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  MEOWVectorBase::Swap((uint64_t *)this, a2);
  result = MEOWVectorBase::Swap((uint64_t *)this + 4, (MTMBDemi *)((char *)a2 + 32));
  v5 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v5;
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v6;
  v7 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v7;
  LOWORD(v7) = *((_WORD *)this + 40);
  *((_WORD *)this + 40) = *((_WORD *)a2 + 40);
  *((_WORD *)a2 + 40) = v7;
  LOWORD(v7) = *((_WORD *)this + 41);
  *((_WORD *)this + 41) = *((_WORD *)a2 + 41);
  *((_WORD *)a2 + 41) = v7;
  LOWORD(v7) = *((_WORD *)this + 42);
  *((_WORD *)this + 42) = *((_WORD *)a2 + 42);
  *((_WORD *)a2 + 42) = v7;
  LOWORD(v7) = *((_WORD *)this + 43);
  *((_WORD *)this + 43) = *((_WORD *)a2 + 43);
  *((_WORD *)a2 + 43) = v7;
  LOWORD(v7) = *((_WORD *)this + 44);
  *((_WORD *)this + 44) = *((_WORD *)a2 + 44);
  *((_WORD *)a2 + 44) = v7;
  LOWORD(v7) = *((_WORD *)this + 45);
  *((_WORD *)this + 45) = *((_WORD *)a2 + 45);
  *((_WORD *)a2 + 45) = v7;
  LODWORD(v7) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v7;
  LODWORD(v7) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v7;
  v8 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v8;
  return result;
}

void MTMBDemi::clear(void **this)
{
  MEOWVectorBase::clear(this);
  MEOWVectorBase::clear(this + 4);
  *((_DWORD *)this + 25) = 0;
  this[8] = 0;
  this[9] = 0;
}

uint64_t MTMBDemi::Dump(uint64_t this, __sFILE *a2)
{
  uint64_t v3;
  MTMBDemiProperties *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned int v8;
  const char *v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  float v21;
  double v22;
  float v23;
  float Factor;
  double v25;
  int v26;
  int v27;
  int v28;
  float v29;
  float *v30;
  uint64_t v31;
  float v32;
  unint64_t v33;
  __int16 v34;
  const char *v35;
  unsigned int v36;
  unsigned int v37;
  double v38;
  char v39[32];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(this + 100))
  {
    v3 = this;
    v4 = *(MTMBDemiProperties **)(this + 104);
    if (v4 && **((_BYTE **)v4 + 1))
    {
      v5 = *(_QWORD *)(v3 + 16);
      if (v5)
      {
        v6 = 0;
        v7 = (unsigned __int16 *)(*(_QWORD *)v3 + 12);
        do
        {
          v8 = *v7;
          v7 += 16;
          v6 += v8;
          --v5;
        }
        while (v5);
      }
      else
      {
        v6 = 0;
      }
      v9 = MTMBDemiProperties::Phon(v4, v39);
      v10 = *(_QWORD *)(v3 + 104);
      v11 = 110250 * *(_QWORD *)(v10 + 32) / 0x3E8uLL;
      v12 = (*(_WORD *)(v10 + 16) & 1) == 0;
      v13 = "";
      if (!v12)
        v13 = "!";
      fprintf(a2, "Unit %s  Samples %lu->%lu[%lu]  %sFrames", v9, *(unsigned int *)(v3 + 100), v6, v11, v13);
      v14 = *(_QWORD *)(v3 + 104);
      if (*(_QWORD *)(v14 + 32))
      {
        v15 = 0;
        do
        {
          fprintf(a2, " %.0f", *(float *)(*(_QWORD *)(v14 + 40) + 4 * v15++));
          v14 = *(_QWORD *)(v3 + 104);
        }
        while (v15 < *(_QWORD *)(v14 + 32));
      }
      fputc(10, a2);
      if (*(_QWORD *)(*(_QWORD *)(v3 + 104) + 48))
      {
        fwrite("OrigFrames", 0xAuLL, 1uLL, a2);
        v16 = *(_QWORD *)(v3 + 104);
        if (*(_QWORD *)(v16 + 32))
        {
          v17 = 0;
          do
          {
            fprintf(a2, " %.0f", *(float *)(*(_QWORD *)(v16 + 48) + 4 * v17++));
            v16 = *(_QWORD *)(v3 + 104);
          }
          while (v17 < *(_QWORD *)(v16 + 32));
        }
        fputc(10, a2);
      }
    }
    fprintf(a2, "Start Parcel %016llx  End Parcel %016llx", *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72));
    v18 = *(unsigned __int16 *)(v3 + 84);
    v19 = *(unsigned __int16 *)(v3 + 88);
    v20 = *(_DWORD *)(v3 + 92);
    Factor = MTMBDemi::FirstFactor((MTMBDemi *)v3, v21, v22, v23);
    v25 = Factor;
    v26 = *(unsigned __int16 *)(v3 + 86);
    v27 = *(unsigned __int16 *)(v3 + 90);
    v28 = *(_DWORD *)(v3 + 96);
    v29 = MTMBDemi::LastFactor((MTMBDemi *)v3, Factor);
    fprintf(a2, "  First PP %u->%u\\%u [%4.2f] Last PP %u->%u\\%u [%4.2f]", v18, v19, v20, v25, v26, v27, v28, v29);
    if (kMTMBPowerThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBPowerThreshold, (const __CFString *)&dword_1EFC769A0, v30, *(float *)&dword_1EFC769A0);
      kMTMBPowerThreshold = 0;
    }
    if (*(float *)&dword_1EFC769A0 != 0.0)
      fprintf(a2, " Threshold %5.3f", *(float *)&dword_1EFC769A0);
    fprintf(a2, " Rate %d/%d", *(unsigned __int16 *)(*(_QWORD *)(v3 + 104) + 64), *(unsigned __int16 *)(*(_QWORD *)(v3 + 104) + 66));
    fprintf(a2, " Power* %f", *(float *)(*(_QWORD *)(v3 + 104) + 72));
    v31 = *(_QWORD *)(v3 + 104);
    v32 = *(float *)(v31 + 76);
    if (v32 != 0.0)
      fprintf(a2, "-%f", (float)(*(float *)(v31 + 72) + (float)((float)*(unsigned int *)(v3 + 100) * v32)));
    this = fputc(10, a2);
    if (*(uint64_t *)(v3 + 16) >= 1)
    {
      v33 = *(_QWORD *)v3;
      while (1)
      {
        fprintf(a2, "%p %5d %3d->%-3d [", *(const void **)(v33 + 24), (*(_QWORD *)v33 - *(_QWORD *)(v3 + 32)) >> 2, *(unsigned __int16 *)(v33 + 8), *(unsigned __int16 *)(v33 + 12));
        v34 = *(_WORD *)(v33 + 16);
        if ((v34 & 1) != 0)
          break;
        v35 = "";
        if ((v34 & 2) != 0)
          goto LABEL_31;
LABEL_32:
        if ((v34 & 0x18) != 0)
        {
          fprintf(a2, "%sSkip%s", v35, *(const char **)((char *)&sPrio + (v34 & 0x18)));
          v34 = *(_WORD *)(v33 + 16);
          v35 = ", ";
        }
        if ((v34 & 4) != 0)
        {
          fprintf(a2, "%sIs Copy");
        }
        else
        {
          if ((v34 & 0x60) == 0)
            goto LABEL_39;
          fprintf(a2, "%sCopy%s");
        }
        v35 = ", ";
LABEL_39:
        v36 = *(unsigned __int16 *)(v33 + 16);
        if ((v36 & 0x800) != 0)
        {
          fprintf(a2, "%sSilence", v35);
          v36 = *(unsigned __int16 *)(v33 + 16);
          v35 = ", ";
          if ((v36 & 0x1000) == 0)
          {
LABEL_41:
            if ((v36 & 0x2000) != 0)
              goto LABEL_55;
            goto LABEL_42;
          }
        }
        else if ((v36 & 0x1000) == 0)
        {
          goto LABEL_41;
        }
        fprintf(a2, "%sBlendBeg", v35);
        v36 = *(unsigned __int16 *)(v33 + 16);
        v35 = ", ";
        if ((v36 & 0x2000) != 0)
        {
LABEL_55:
          fprintf(a2, "%sBlendEnd", v35);
          v36 = *(unsigned __int16 *)(v33 + 16);
          v35 = ", ";
          if ((v36 & 0x4000) == 0)
            goto LABEL_44;
LABEL_43:
          fprintf(a2, "%sBlend", v35);
          v36 = *(unsigned __int16 *)(v33 + 16);
          v35 = ", ";
          goto LABEL_44;
        }
LABEL_42:
        if ((v36 & 0x4000) != 0)
          goto LABEL_43;
LABEL_44:
        if ((v36 & 0x380) != 0)
        {
          if (((v36 >> 7) & 1) != 0)
          {
            fprintf(a2, "%sEndOfPhon", v35);
            v35 = ", ";
          }
          v37 = (v36 >> 7) & 7;
          if ((v37 & 2) != 0)
          {
            fprintf(a2, "%sEndOfWord", v35);
            v35 = ", ";
          }
          if (v37 >= 4)
            fprintf(a2, "%sEndOfSentence", v35);
        }
        v38 = (float)(MTMBSegment::RawPower((MTMBSegment *)v33) * 0.00012207);
        MTMBSegment::Abstract((MTMBSegment **)v33);
        this = fprintf(a2, "] %5.3f %s\n", v38, (const char *)&MTMBSegment::Abstract(float const*,int,BOOL)::sBuf);
        v33 += 32;
        if (v33 >= *(_QWORD *)v3 + 32 * *(_QWORD *)(v3 + 16))
          return this;
      }
      fprintf(a2, "%sVoiced", "");
      v34 = *(_WORD *)(v33 + 16);
      v35 = ", ";
      if ((v34 & 2) == 0)
        goto LABEL_32;
LABEL_31:
      fprintf(a2, "%sFollows Gap", v35);
      v34 = *(_WORD *)(v33 + 16);
      v35 = ", ";
      goto LABEL_32;
    }
  }
  return this;
}

uint64_t MTMBDemi::SetNaturalSize(uint64_t this, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 104);
  if (v2)
    *(_QWORD *)(v2 + 56) = a2;
  return this;
}

float MTMBDemi::ScaleSpeechRate(MTMBDemi *this, float result, float a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    LOWORD(a3) = *(_WORD *)(v3 + 66);
    result = (float)LODWORD(a3) * result;
    *(_WORD *)(v3 + 66) = (int)result;
  }
  return result;
}

void MTMBConsumerComponent::~MTMBConsumerComponent(MTMBConsumerComponent *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_1E93685C8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E93685C8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E93685C8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  JUMPOUT(0x1D8233BA8);
}

void MTCBSegmentProducer::MTCBSegmentProducer(MTCBSegmentProducer *this, MTFEFrameFiller *a2, MTBEParam *a3)
{
  uint64_t v5;

  *(_QWORD *)this = &off_1E93685E8;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a3;
  v5 = MTMBAssemblerCreator::Create(0);
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 3) = v5;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  MTMBDemi::MTMBDemi((MTCBSegmentProducer *)((char *)this + 128));
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 64) = -1;
  *((_QWORD *)a2 + 11) = MTBEDelayedNotifier::MTBEDelayedNotifier((MTCBSegmentProducer *)((char *)this + 280), *((MTBENotifier **)a2 + 11));
}

void sub_1D229833C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  MTMBDemi *v3;

  MTMBDemi::~MTMBDemi(v3);
  std::deque<unsigned short>::~deque[abi:ne180100]((_QWORD *)(v1 + 80));
  std::deque<MTMBDemi>::~deque[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void MTCBSegmentProducer::~MTCBSegmentProducer(MTCBSegmentProducer *this)
{
  uint64_t v2;
  MTMBSegment *v3;
  MTMBSegment *v4;
  unint64_t v5;
  unint64_t v6;

  *(_QWORD *)this = &off_1E93685E8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (MTMBSegment *)*((_QWORD *)this + 30);
  while (1)
  {
    while (v3 != *((MTMBSegment **)this + 31))
    {
      v4 = (MTMBSegment *)((char *)v3 + 32);
      MTMBSegment::Free(v3);
      v3 = v4;
    }
    v5 = *((int *)this + 64) + 1;
    *((_DWORD *)this + 64) = v5;
    if (*((_QWORD *)this + 9) <= v5)
      break;
    v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((*((_QWORD *)this + 8) + v5) / 0x24))
       + 112 * ((*((_QWORD *)this + 8) + v5) % 0x24);
    v3 = *(MTMBSegment **)v6;
    *((_QWORD *)this + 31) = *(_QWORD *)v6 + 32 * *(_QWORD *)(v6 + 16);
  }
  MTBEDelayedNotifier::~MTBEDelayedNotifier((MTCBSegmentProducer *)((char *)this + 280));
  MTMBDemi::~MTMBDemi((MTCBSegmentProducer *)((char *)this + 128));
  std::deque<unsigned short>::~deque[abi:ne180100]((_QWORD *)this + 10);
  std::deque<MTMBDemi>::~deque[abi:ne180100]((_QWORD *)this + 4);
}

uint64_t MTCBSegmentProducer::NextSegment(int64x2_t *this, MTMBSegment *a2)
{
  _OWORD *v4;
  int v5;
  __sFILE **v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t result;
  void **v16;
  void **v17;
  unint64_t v18;
  void **v19;
  MTMBDemi *v20;
  unint64_t v21;
  uint64_t v22;
  MTMBDemi *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;

  if (!this[4].i64[1])
  {
    std::deque<MTMBDemi>::resize((MTMBDemi *)&this[2], 4uLL);
    v32 = 2;
    std::deque<unsigned short>::push_back((int64x2_t *)this[5].i64, &v32);
    this[16].i32[0] = 3;
  }
  v4 = (_OWORD *)this[15].i64[0];
  if (v4 != (_OWORD *)this[15].i64[1])
  {
LABEL_16:
    this[15].i64[0] = (uint64_t)(v4 + 2);
    v14 = v4[1];
    *(_OWORD *)a2 = *v4;
    *((_OWORD *)a2 + 1) = v14;
    return 1;
  }
  v5 = this[16].i32[0];
  v6 = (__sFILE **)MEMORY[0x1E0C80C10];
  while (1)
  {
    v7 = v5 + 1;
    this[16].i32[0] = v5 + 1;
    if (((v5 + 1) & 3) == 0)
      break;
LABEL_15:
    v11 = *(_QWORD *)(this[2].i64[1] + 8 * ((this[4].i64[0] + v7) / 0x24uLL)) + 112 * ((this[4].i64[0] + v7) % 0x24uLL);
    v4 = *(_OWORD **)v11;
    v12 = *(_QWORD *)(v11 + 16);
    v13 = *(_QWORD *)v11 + 32 * v12;
    this[15].i64[0] = (uint64_t)v4;
    this[15].i64[1] = v13;
    v5 = v7;
    if (v12)
      goto LABEL_16;
  }
  if (v5 >= 4)
  {
    MTCBSegmentProducer::DiscardUnit(this);
    v7 = this[16].i32[0];
  }
  if (this[4].i64[1] == v7)
  {
    MTCBSegmentProducer::GetNextUnit((MTFEFrameFiller **)this);
    v7 = this[16].i32[0];
  }
  v8 = this[7].i64[0] + v7 / 4;
  if (*(_WORD *)(*(_QWORD *)(this[5].i64[1] + ((v8 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v8 & 0x7FF)))
  {
    MTCBSegmentProducer::AssembleUnit((MTCBSegmentProducer *)this, v7);
    if ((MTBEDebugFlags::sMEOWDebug & 1) != 0)
    {
      v9 = this[16].i32[0];
      do
        MTMBDemi::Dump(*(_QWORD *)(this[2].i64[1] + 8 * ((v9 + this[4].i64[0]) / 0x24uLL)) + 112 * ((v9 + this[4].i64[0]) % 0x24uLL), *v6);
      while (v9++ < this[16].i32[0] + 3);
    }
    MTBEDelayedNotifier::ForwardUnit((MTBEDelayedNotifier *)&this[17].u64[1]);
    v7 = this[16].i32[0];
    goto LABEL_15;
  }
  v16 = (void **)this[2].i64[1];
  v17 = (void **)this[3].i64[0];
  if (v17 == v16)
  {
    v17 = (void **)this[2].i64[1];
  }
  else
  {
    v18 = this[4].u64[0];
    v19 = &v16[v18 / 0x24];
    v20 = (MTMBDemi *)((char *)*v19 + 112 * (v18 % 0x24));
    v21 = (unint64_t)v16[(this[4].i64[1] + v18) / 0x24] + 112 * ((this[4].i64[1] + v18) % 0x24);
    if (v20 != (MTMBDemi *)v21)
    {
      do
      {
        MTMBDemi::~MTMBDemi(v20);
        v20 = (MTMBDemi *)(v22 + 112);
        if (v20 - (MTMBDemi *)*v19 == 4032)
        {
          v23 = (MTMBDemi *)v19[1];
          ++v19;
          v20 = v23;
        }
      }
      while (v20 != (MTMBDemi *)v21);
      v16 = (void **)this[2].i64[1];
      v17 = (void **)this[3].i64[0];
    }
  }
  this[4].i64[1] = 0;
  v24 = (char *)v17 - (char *)v16;
  if (v24 >= 0x11)
  {
    do
    {
      operator delete(*v16);
      v25 = this[3].i64[0];
      v16 = (void **)(this[2].i64[1] + 8);
      this[2].i64[1] = (uint64_t)v16;
      v24 = v25 - (_QWORD)v16;
    }
    while (v24 > 0x10);
  }
  if (v24 >> 3 == 1)
  {
    v26 = 18;
LABEL_30:
    this[4].i64[0] = v26;
  }
  else if (v24 >> 3 == 2)
  {
    v26 = 36;
    goto LABEL_30;
  }
  v27 = (void **)this[5].i64[1];
  v28 = this[6].i64[0];
  this[7].i64[1] = 0;
  v29 = v28 - (_QWORD)v27;
  if (v29 >= 0x11)
  {
    do
    {
      operator delete(*v27);
      v30 = this[6].i64[0];
      v27 = (void **)(this[5].i64[1] + 8);
      this[5].i64[1] = (uint64_t)v27;
      v29 = v30 - (_QWORD)v27;
    }
    while (v29 > 0x10);
  }
  if (v29 >> 3 == 1)
  {
    v31 = 1024;
LABEL_37:
    result = 0;
    this[7].i64[0] = v31;
  }
  else
  {
    if (v29 >> 3 == 2)
    {
      v31 = 2048;
      goto LABEL_37;
    }
    return 0;
  }
  return result;
}

MTMBDemi *std::deque<MTMBDemi>::resize(MTMBDemi *result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  MTMBDemi *v9;
  _QWORD *v10;
  MTMBDemi *v11;

  v2 = (uint64_t)result;
  v3 = *((_QWORD *)result + 5);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
    return std::deque<MTMBDemi>::__append(result, v5);
  if (!v4)
  {
    v6 = *((_QWORD *)result + 4);
    v7 = *((_QWORD *)result + 1);
    v8 = (_QWORD *)(v7 + 8 * (v6 / 0x24));
    if (*((_QWORD *)result + 2) == v7)
      v9 = 0;
    else
      v9 = (MTMBDemi *)(*v8 + 112 * (v6 % 0x24));
    v10 = v8;
    v11 = v9;
    std::__deque_iterator<MTMBDemi,MTMBDemi*,MTMBDemi&,MTMBDemi**,long,36l>::operator+=[abi:ne180100](&v10, a2);
    return (MTMBDemi *)std::deque<MTMBDemi>::__erase_to_end(v2, v10, v11);
  }
  return result;
}

void std::deque<unsigned short>::push_back(_QWORD *a1, _WORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 8) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<unsigned short>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_WORD *)(*(_QWORD *)(v5 + ((v8 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v8 & 0x7FF)) = *a2;
  a1[5] = v7 + 1;
}

uint64_t MTCBSegmentProducer::DiscardUnit(int64x2_t *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t result;

  v2 = 3;
  while (v2 != -1)
  {
    v3 = this[4].i64[0] + v2;
    v4 = *(_QWORD *)(this[2].i64[1] + 8 * (v3 / 0x24));
    v5 = v3 % 0x24;
    --v2;
    if (*(_DWORD *)(v4 + 112 * v5 + 100))
    {
      MTMBDemi::swap((MTMBDemi *)&this[8], (MTMBDemi *)(v4 + 112 * v5));
      break;
    }
  }
  v6 = 4;
  do
  {
    std::deque<MTMBDemi>::pop_front(this + 2);
    --v6;
  }
  while (v6);
  this[7] = vaddq_s64(this[7], (int64x2_t)xmmword_1D22CF6F0);
  result = std::deque<unsigned short>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this[5].i64, 1);
  this[16].i32[0] -= 4;
  return result;
}

void MTCBSegmentProducer::GetNextUnit(MTFEFrameFiller **this)
{
  int Frame;
  MTFEFrameFiller *v3;
  MTBEParam *v4;
  unsigned __int16 DurModFakeRate;
  unsigned int v6;
  MTFEFrameFiller *v7;
  __int16 v8;
  __int16 v9;
  uint64_t v10;
  int v11;
  MTFEFrameFiller *v12;
  __int16 v13;

  MTBEDelayedNotifier::StartUnit((MTBEDelayedNotifier *)(this + 35));
  Frame = MTFEFrameFiller::FillNextFrame(this[1], 0);
  v3 = this[9];
  v13 = 0;
  std::deque<MTMBDemi>::resize((MTMBDemi *)(this + 4), (unint64_t)v3 + 4);
  if (Frame)
  {
    v13 = 2;
    this[33] = (MTFEFrameFiller *)MTBEParam::GetVolume(this[2]);
    v4 = this[2];
    *((_WORD *)this + 137) = *(_WORD *)(*((_QWORD *)this[1] + 35) + 178);
    if (MTBEParam::GetUsePostDurMod(v4))
    {
      DurModFakeRate = MTBEParam::GetDurModFakeRate(this[2]);
      v6 = *((unsigned __int16 *)this + 137);
    }
    else
    {
      v6 = *((unsigned __int16 *)this + 137);
      DurModFakeRate = *((_WORD *)this + 137);
    }
    *((_WORD *)this + 136) = DurModFakeRate;
    *((float *)this + 89) = (float)DurModFakeRate / (float)v6;
    v7 = this[1];
    if (*(_QWORD *)(*((_QWORD *)v7 + 35) + 264) || *((_BYTE *)v7 + 288))
    {
      if ((*((unsigned int (**)(MTFEFrameFiller **, MTFEFrameFiller *, __int16 *))*this + 5))(this, v3, &v13))
      {
        v8 = 12;
      }
      else
      {
        v8 = 4;
      }
      v9 = v8 | v13;
    }
    else
    {
      v11 = *(unsigned __int8 *)(*((_QWORD *)v7 + 34) + 93);
      v12 = *this;
      if (v11 == 1)
      {
        (*((void (**)(MTFEFrameFiller **, MTFEFrameFiller *))v12 + 4))(this, v3);
        v9 = 98;
      }
      else
      {
        (*((void (**)(MTFEFrameFiller **, MTFEFrameFiller *))v12 + 3))(this, v3);
        v9 = 66;
      }
    }
    v13 = v9;
    v10 = (uint64_t)this[1];
    if (*(_QWORD *)(*(_QWORD *)(v10 + 280) + 264))
    {
      MTFEFrameFiller::SkipWord(v10);
      v10 = (uint64_t)this[1];
      v9 = v13;
    }
    v13 = v9 | (*(unsigned __int8 *)(v10 + 80) << 7);
  }
  std::deque<unsigned short>::push_back(this + 10, &v13);
}

unint64_t MTCBSegmentProducer::AssembleUnit(MTCBSegmentProducer *this, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  unint64_t v8;
  __int16 v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  MTMBDemi *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  MTMBDemi *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  __int16 v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __int16 v61;
  unint64_t result;
  unint64_t v63;
  int v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  float *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  float *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  FILE **v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  const char *v93;
  FILE *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unint64_t v99;
  char v100[8];
  unint64_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v4 = a2 >> 2;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11)
                             + (((*((_QWORD *)this + 14) + (a2 >> 2)) >> 8) & 0xFFFFFFFFFFFFF8))
                 + 2 * ((*((_QWORD *)this + 14) + (a2 >> 2)) & 0x7FF)) & 4) == 0
    || (MTBEDebugFlags::sMEOWDebug & 0x2000) != 0)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
    v14 = a2 + 3;
  }
  else
  {
    if (v4 == *((_QWORD *)this + 15) - 1)
      MTCBSegmentProducer::GetNextUnit((MTFEFrameFiller **)this);
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLinearSlack))
    {
      if ((MTMBDemiProperties::UseWordPitch(*(MTMBDemiProperties **)(*(_QWORD *)(*((_QWORD *)this + 5)
                                                                                + 8
                                                                                * ((a2 + *((_QWORD *)this + 8) + 3)
                                                                                 / 0x24))
                                                                    + 112 * ((a2 + *((_QWORD *)this + 8) + 3) % 0x24)
                                                                    + 104)) & 1) == 0)
      {
        v5 = *((_QWORD *)this + 14);
        v6 = *((_QWORD *)this + 11);
        v7 = *(_WORD *)(*(_QWORD *)(v6 + (((v4 + v5 + 1) >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * ((v4 + v5 + 1) & 0x7FF));
        if ((v7 & 0x70) == 0x20 || (v7 & 0x440) == 0x400)
        {
          v8 = v4 + 2;
          do
          {
            if (v8 == *((_QWORD *)this + 15))
            {
              MTCBSegmentProducer::GetNextUnit((MTFEFrameFiller **)this);
              v5 = *((_QWORD *)this + 14);
              v6 = *((_QWORD *)this + 11);
            }
            v9 = *(_WORD *)(*(_QWORD *)(v6 + (((v5 + v8) >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * ((v5 + v8) & 0x7FF));
            ++v8;
          }
          while ((v9 & 0x70) == 0x20 || (v9 & 0x440) == 0x400);
        }
      }
    }
    v10 = *((_QWORD *)this + 8);
    v11 = *((_QWORD *)this + 5);
    v12 = (_QWORD *)(v11 + 8 * (v10 / 0x24));
    if (*((_QWORD *)this + 6) == v11)
      v13 = 0;
    else
      v13 = *v12 + 112 * (v10 % 0x24);
    *(_QWORD *)v100 = v12;
    v101 = v13;
    std::__deque_iterator<MTMBDemi,MTMBDemi*,MTMBDemi&,MTMBDemi**,long,36l>::operator+=[abi:ne180100](v100, a2);
    v66 = *((_QWORD *)this + 8);
    v67 = *((_QWORD *)this + 5);
    v68 = (_QWORD *)(v67 + 8 * (v66 / 0x24));
    if (*((_QWORD *)this + 6) == v67)
      v69 = 0;
    else
      v69 = *v68 + 112 * (v66 % 0x24);
    v70 = *(float **)v100;
    v71 = v101;
    *(_QWORD *)v100 = v68;
    v101 = v69;
    std::__deque_iterator<MTMBDemi,MTMBDemi*,MTMBDemi&,MTMBDemi**,long,36l>::operator+=[abi:ne180100](v100, a2);
    v72 = v101 - **(_QWORD **)v100;
    v73 = 0x6DB6DB6DB6DB6DB7 * (v72 >> 4);
    if (v72 < -447)
    {
      v77 = 31 - v73;
      v75 = (float *)(*(_QWORD *)v100 - 8 * (v77 / 0x24));
      v76 = *(_QWORD *)v75 + 112 * (36 * (v77 / 0x24) - v77) + 3920;
    }
    else
    {
      v74 = v73 + 4;
      v75 = (float *)(*(_QWORD *)v100 + 8 * (v74 / 0x24));
      v76 = *(_QWORD *)v75 + 112 * (v74 % 0x24);
    }
    v78 = *((_QWORD *)this + 8) + *((_QWORD *)this + 9);
    v79 = *((_QWORD *)this + 5);
    v80 = (_QWORD *)(v79 + 8 * (v78 / 0x24));
    if (*((_QWORD *)this + 6) == v79)
      v81 = 0;
    else
      v81 = *v80 + 112 * (v78 % 0x24);
    v82 = *((_QWORD *)this + 15) + *((_QWORD *)this + 14) - 1;
    if (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + ((v82 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v82 & 0x7FF)))
      v83 = 0;
    else
      v83 = -4;
    *(_QWORD *)v100 = v80;
    v101 = v81;
    std::__deque_iterator<MTMBDemi,MTMBDemi*,MTMBDemi&,MTMBDemi**,long,36l>::operator+=[abi:ne180100](v100, v83);
    v84 = MTMBPitchStrategy::SetPitchTargets(v70, v71, v75, v76, *(float **)v100, v101);
    v85 = v84;
    if ((MTBEDebugFlags::sMEOWDebug & 1) != 0)
    {
      v98 = v84;
      v99 = v4;
      v86 = (FILE **)MEMORY[0x1E0C80C10];
      fwrite("Assemble", 8uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      if (*((_QWORD *)this + 9))
      {
        v87 = 0;
        do
        {
          if (!*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11)
                                     + (((*((_QWORD *)this + 14) + (v87 >> 2)) >> 8) & 0xFFFFFFFFFFFFF8))
                         + 2 * ((*((_QWORD *)this + 14) + (v87 >> 2)) & 0x7FF)))
            break;
          v88 = v87 + *((_QWORD *)this + 8);
          v89 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * (v88 / 0x24));
          v90 = v88 % 0x24;
          if (*(_QWORD *)(v89 + 112 * v90 + 16))
          {
            v91 = v89 + 112 * v90;
            v92 = *(char **)(v91 + 104);
            v93 = v92[18] >= 0 ? "" : "\"";
            v94 = *v86;
            v95 = MTMBDemiProperties::Phon((MTMBDemiProperties *)v92, v100);
            fprintf(v94, " %s%s%s (%d:%d %d:%d)", v93, v95, v93, *(unsigned __int16 *)(v91 + 80), *(unsigned __int16 *)(v91 + 88), *(unsigned __int16 *)(v91 + 82), *(unsigned __int16 *)(v91 + 90));
          }
          else
          {
            fwrite(" ()", 3uLL, 1uLL, *v86);
          }
          ++v87;
        }
        while (v87 < *((_QWORD *)this + 9));
      }
      fputc(10, *v86);
      v4 = v99;
      v85 = v98;
    }
    v96 = *((_QWORD *)this + 3);
    if (v85)
    {
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v96 + 24))(v96, *(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((*((_QWORD *)this + 8) + a2) / 0x24))+ 112 * ((*((_QWORD *)this + 8) + a2) % 0x24));
      (*(void (**)(_QWORD, unint64_t))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), *(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((a2 + *((_QWORD *)this + 8) + 1) / 0x24))+ 112 * ((a2 + *((_QWORD *)this + 8) + 1) % 0x24));
      (*(void (**)(_QWORD, unint64_t))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), *(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((a2 + *((_QWORD *)this + 8) + 2) / 0x24))+ 112 * ((a2 + *((_QWORD *)this + 8) + 2) % 0x24));
      v14 = a2 + 3;
      (*(void (**)(_QWORD, unint64_t))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), *(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((a2 + 3 + *((_QWORD *)this + 8)) / 0x24))+ 112 * ((a2 + 3 + *((_QWORD *)this + 8)) % 0x24));
    }
    else
    {
      v97 = *((_QWORD *)this + 8);
      v14 = a2 + 3;
      (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v96 + 16))(v96, *(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((a2 + v97 + 2) / 0x24)) + 112 * ((a2 + v97 + 2) % 0x24), *(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((a2 + 3 + v97) / 0x24)) + 112 * ((a2 + 3 + v97) % 0x24));
    }
  }
  v15 = a2 + 4;
  if (a2 > 0xFFFFFFFFFFFFFFFCLL)
    goto LABEL_30;
  v16 = v14;
  do
  {
    v17 = *((_QWORD *)this + 8);
    v18 = *((_QWORD *)this + 5);
    v19 = (MTMBDemi *)(*(_QWORD *)(v18 + 8 * ((v17 + v16) / 0x24)) + 112 * ((v17 + v16) % 0x24));
    if (!*((_QWORD *)v19 + 2))
    {
      v20 = v17 - 1;
      v21 = v16;
      while (v21 > a2)
      {
        v22 = v20 + v21--;
        v23 = (MTMBDemi *)(*(_QWORD *)(v18 + 8 * (v22 / 0x24)) + 112 * (v22 % 0x24));
        if (*((_QWORD *)v23 + 2))
        {
          MTMBDemi::swap(v19, v23);
          break;
        }
      }
    }
    --v16;
  }
  while (v16 > a2);
  if (a2 > 0xFFFFFFFFFFFFFFFBLL)
  {
LABEL_30:
    v30 = 0;
  }
  else
  {
    v24 = 0;
    v25 = *((_QWORD *)this + 8);
    v26 = *((_QWORD *)this + 5);
    v27 = v25 + a2;
    while (1)
    {
      v28 = *(_QWORD *)(v26 + 8 * ((v27 + v24) / 0x24uLL));
      v29 = (v27 + v24) % 0x24uLL;
      if (*(_DWORD *)(v28 + 112 * v29 + 100))
        break;
      ++v24;
      if (a2 + v24 >= v15)
        goto LABEL_47;
    }
    if (*(_QWORD *)(v28 + 112 * v29 + 64))
      v31 = a2 + v24;
    else
      v31 = 0;
    if (a2 + v24 + 1 < v15)
    {
      v32 = v25 + a2;
      do
      {
        v33 = v32 + v24;
        v34 = *(_QWORD *)(*(_QWORD *)(v26 + 8 * ((v32 + v24) / 0x24uLL)) + 112 * ((v32 + v24) % 0x24uLL) + 72);
        if (v34)
        {
          v35 = v33 + 1;
          v36 = (v33 + 1) / 0x24uLL;
          v37 = *(_QWORD *)(v26 + 8 * v36);
          v38 = v35 - 36 * v36;
          if (v34 != *(_QWORD *)(v37 + 112 * v38 + 64))
            *(_WORD *)(*(_QWORD *)(v37 + 112 * v38) + 16) |= 0x4000u;
        }
        ++v24;
      }
      while (v24 != 3);
    }
    if (v31)
    {
      v39 = a2;
      while (v39)
      {
        v40 = v25 - 1 + v39--;
        v41 = *(_QWORD *)(v26 + 8 * (v40 / 0x24));
        v42 = v40 % 0x24;
        if (*(_DWORD *)(v41 + 112 * v42 + 100))
        {
          v43 = *(_QWORD *)(v41 + 112 * v42 + 72);
          if (v43)
          {
            v44 = v25 + v31;
            v45 = *(_QWORD *)(v26 + 8 * (v44 / 0x24));
            v46 = v44 % 0x24;
            if (v43 != *(_QWORD *)(v45 + 112 * v46 + 64))
              *(_WORD *)(*(_QWORD *)(v45 + 112 * v46) + 16) |= 0x4000u;
          }
          break;
        }
      }
    }
LABEL_47:
    v30 = 1;
  }
  v47 = *((_QWORD *)this + 14);
  v48 = *((_QWORD *)this + 11);
  v49 = *(_QWORD *)(v48 + (((v47 + v4) >> 8) & 0xFFFFFFFFFFFFF8));
  v50 = (v47 + v4) & 0x7FF;
  v51 = *(_WORD *)(v49 + 2 * v50);
  v52 = *((_QWORD *)this + 8);
  v53 = *((_QWORD *)this + 5);
  if ((v51 & 8) != 0 && v30)
  {
    v54 = a2;
    while (1)
    {
      v55 = *(_QWORD *)(v53 + 8 * ((v52 + v54) / 0x24));
      v56 = (v52 + v54) % 0x24;
      if (*(_DWORD *)(v55 + 112 * v56 + 100))
        break;
      if (++v54 >= v15)
        goto LABEL_55;
    }
    *(_WORD *)(*(_QWORD *)(v55 + 112 * v56) + 16) |= 0x1000u;
    v51 = *(_WORD *)(v49 + 2 * v50);
  }
LABEL_55:
  v57 = v51 & 0x380;
  v58 = *(_QWORD *)(v53 + 8 * ((v52 + v14) / 0x24));
  v59 = (v52 + v14) % 0x24;
  v60 = *(_QWORD *)(v58 + 112 * v59) + 32 * *(_QWORD *)(v58 + 112 * v59 + 16);
  v61 = *(_WORD *)(v60 - 16) | v57;
  *(_WORD *)(v60 - 16) = v61;
  result = *((_QWORD *)this + 15) - 1;
  if (v4 == result
    || ((v63 = v4 + v47 + 1,
         result = (v63 >> 8) & 0xFFFFFFFFFFFFF8,
         (v64 = *(unsigned __int16 *)(*(_QWORD *)(v48 + result) + 2 * (v63 & 0x7FF))) != 0)
      ? (v65 = (v64 & 0x40) == 0)
      : (v65 = 0),
        !v65))
  {
    if (*(_DWORD *)(v58 + 112 * v59 + 100) && (*(_WORD *)(v49 + 2 * v50) & 0x40) == 0)
      *(_WORD *)(v60 - 16) = v61 | 0x2000;
  }
  if ((*(_WORD *)(v49 + 2 * v50) & 0x800) != 0)
    return (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), *(_QWORD *)(v53 + 8 * ((a2 + v52 + 2) / 0x24)) + 112 * ((a2 + v52 + 2) % 0x24));
  return result;
}

uint64_t std::deque<MTMBDemi>::pop_front(int64x2_t *a1)
{
  MTMBDemi::~MTMBDemi((MTMBDemi *)(*(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x24uLL))
                                 + 112 * (a1[2].i64[0] % 0x24uLL)));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1D22CF6F0);
  return std::deque<MTMBDemi>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

void MTCBSegmentProducer::LoadPseudo(MTCBSegmentProducer *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[9];
  void *v7[4];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v7, 2);
  v4 = operator new();
  MTMBDemiProperties::MTMBDemiProperties((MTMBDemiProperties *)v4);
  *(_QWORD *)(v4 + 8) = "";
  *(_BYTE *)(v4 + 18) = -1;
  *(_WORD *)(v4 + 16) = 0;
  v5 = *((_QWORD *)this + 33);
  *(_DWORD *)(v4 + 64) = *((_DWORD *)this + 68);
  *(_QWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 32) = 0;
  v6[5] = 0;
  v6[2] = 0;
  v6[3] = 0;
  MTMBDemi::Load((MTMBDemi *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((*((_QWORD *)this + 8) + a2) / 0x24uLL))+ 112 * ((*((_QWORD *)this + 8) + a2) % 0x24uLL)), v4, v6, 0, 0, 0);
  MEOWVectorBase::~MEOWVectorBase(v7);
}

void sub_1D2299684(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  MEMORY[0x1D8233BA8](v2, 0x10D0C4050FF3235);
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void MTCBSegmentProducer::LoadSilence(MTCBSegmentProducer *this, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[9];
  void *v15[2];
  uint64_t v16;

  if ((MTBEDebugFlags::sMEOWDebug & 1) != 0)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Fetch SIL %5.1fms\n", (float)((float)*(__int16 *)(*((_QWORD *)this + 1) + 346) * 5.0));
  v4 = *(__int16 *)(*((_QWORD *)this + 1) + 346);
  MTCBSegmentProducer::LoadPseudo(this, a2);
  MTCBSegmentProducer::LoadPseudo(this, a2 + 1);
  MTCBSegmentProducer::LoadPseudo(this, a2 + 2);
  v5 = operator new();
  MTMBDemiProperties::MTMBDemiProperties((MTMBDemiProperties *)v5);
  v6 = 110250 * v4;
  *(_QWORD *)(v5 + 8) = "SIL";
  *(_BYTE *)(v5 + 18) = -1;
  if (MTFEFrameFiller::AtEndOfPhrase(*((MTFEFrameFiller **)this + 1)))
    v7 = 6;
  else
    v7 = 4;
  *(_WORD *)(v5 + 16) = v7;
  *(_QWORD *)(v5 + 24) = *((_QWORD *)this + 33);
  *(_DWORD *)(v5 + 64) = *((_DWORD *)this + 68);
  v8 = *((_QWORD *)this + 1);
  *(_QWORD *)(v5 + 32) = *(__int16 *)(v8 + 346);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)(v8 + 64);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v15, 2);
  if ((v6 + 999) > 0x7CE)
  {
    v11 = v6 / 1000;
    do
    {
      MEOWVectorBase::Append(v15);
      if (v11 >> 3 >= 0x753)
        v12 = 10000;
      else
        v12 = (unsigned __int16)v11;
      v10 = v15[0];
      v9 = v16;
      *((_WORD *)v15[0] + v16 - 1) = v12 | 0x8000;
      v11 -= v12;
    }
    while (v11);
  }
  else
  {
    v9 = v16;
    v10 = v15[0];
  }
  v14[2] = 0;
  v14[3] = v9;
  v14[4] = v10;
  v13 = a2 + 3;
  MTMBDemi::Load((MTMBDemi *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((*((_QWORD *)this + 8) + v13) / 0x24uLL))+ 112 * ((*((_QWORD *)this + 8) + v13) % 0x24uLL)), v5, v14, 0, 0, 0);
  if ((MTBEDebugFlags::sMTXDebug & 0x10000) != 0)
    MTMBDemi::DumpSBXF(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((*((_QWORD *)this + 8) + v13) / 0x24uLL))+ 112 * ((*((_QWORD *)this + 8) + v13) % 0x24uLL));
  MEOWVectorBase::~MEOWVectorBase(v15);
}

void sub_1D229990C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10D0C4050FF3235);
  _Unwind_Resume(a1);
}

uint64_t MTCBSegmentProducer::LoadBreath(MTCBSegmentProducer *this)
{
  return (*(uint64_t (**)(MTCBSegmentProducer *))(*(_QWORD *)this + 24))(this);
}

void MTMBSegmentProducer::MTMBSegmentProducer(MTMBSegmentProducer *this, MTFEFrameFiller *a2, MEOWReader *a3, MTBEParam *a4)
{
  uint64_t v5;

  MTCBSegmentProducer::MTCBSegmentProducer(this, a2, a4);
  *(_QWORD *)v5 = &off_1E9368628;
  *(_QWORD *)(v5 + 424) = a3;
  *(_WORD *)(v5 + 434) = -1;
}

{
  uint64_t v5;

  MTCBSegmentProducer::MTCBSegmentProducer(this, a2, a4);
  *(_QWORD *)v5 = &off_1E9368628;
  *(_QWORD *)(v5 + 424) = a3;
  *(_WORD *)(v5 + 434) = -1;
}

void MTMBSegmentProducer::LoadSilence(MTCBSegmentProducer *this, uint64_t a2)
{
  *((_WORD *)this + 217) = -1;
  MTCBSegmentProducer::LoadSilence(this, a2);
}

void MTMBSegmentProducer::LoadBreath(MTMBSegmentProducer *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  MEOWReader *v11;
  char *DemiRecord;
  int v13;
  int v14;
  unsigned int v15;
  FILE *v16;
  char *v17;
  int v18;
  char *v19;
  MEOWReader *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _BOOL4 v24;
  FILE *v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  __int16 v33;
  uint64_t v34;
  size_t v35;
  MEOWReader *v36;
  MEOWReader *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v42;
  uint64_t v43;
  size_t v44;
  MEOWReader *v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  MEOWPhon *v50;
  uint64_t v51;
  __int16 v52;
  _QWORD v53[2];
  __int128 v54;
  __int16 *v55;
  void *v56[4];
  _BYTE v57[44];
  int v58;
  unsigned __int8 v59;
  unsigned __int16 v60;
  void *v61[5];

  *((_QWORD *)this + 33) = MTBEParam::GetVolume(*((MTBEParam **)this + 2));
  v4 = *((_QWORD *)this + 1);
  v5 = *(__int16 *)(v4 + 346);
  v6 = *(_QWORD *)(v4 + 272);
  v7 = *(unsigned __int8 *)(v6 + 93);
  v8 = *(unsigned __int8 *)(v6 + 94);
  v9 = *(unsigned __int16 *)(v6 + 90);
  v10 = *(_QWORD *)(v4 + 72);
  v50 = (MEOWPhon *)a2;
  v51 = *(_QWORD *)(v4 + 64);
  MTCBSegmentProducer::LoadPseudo(this, a2);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v61, 2);
  v11 = (MEOWReader *)*((_QWORD *)this + 53);
  v49 = v8;
  v48 = v9;
  DemiRecord = MEOWReader::GetDemiRecord(v11, v7, v8, v9, 0);
  MEOWReader::GetDemi((uint64_t)v11, DemiRecord, 0, (uint64_t)v57);
  v13 = 110250 * (int)v5 / 1000 - v58;
  v14 = v60;
  v47 = v7;
  if (v60 == 0xFFFF)
  {
    if ((MTBEDebugFlags::sMEOWDebug & 1) != 0)
    {
      v25 = (FILE *)*MEMORY[0x1E0C80C10];
      v26 = MEOWPhon::Name((MEOWPhon *)v8);
      fprintf(v25, "Fetch BR<%s#%lu\n", v26, v48);
    }
    v24 = v13 > 0;
    v23 = (uint64_t)v50 + 1;
    v22 = (char *)v50 + 2;
    v46 = (unint64_t)v50 + 2;
  }
  else
  {
    v15 = v60;
    if ((MTBEDebugFlags::sMEOWDebug & 1) != 0)
    {
      v16 = (FILE *)*MEMORY[0x1E0C80C10];
      v17 = MEOWPhon::Name((MEOWPhon *)v59);
      v18 = v60;
      v19 = MEOWPhon::Name((MEOWPhon *)v49);
      fprintf(v16, "Fetch %s>BR#%d BR<%s#%lu\n", v17, v18, v19, v48);
      v15 = v60;
    }
    v20 = (MEOWReader *)*((_QWORD *)this + 53);
    v21 = MEOWReader::GetDemiRecord(v20, v59, v7, v15, 1);
    MEOWReader::GetDemi((uint64_t)v20, v21, 1, (uint64_t)v57);
    v13 -= v58;
    v22 = (char *)v50 + 1;
    v46 = (unint64_t)v50 + 2;
    v23 = (uint64_t)v50 + 1;
    v24 = v13 > 0;
    if (v13 > 0)
      goto LABEL_15;
  }
  MTCBSegmentProducer::LoadPseudo(this, v23);
  v27 = v14 != 0xFFFF || v24;
  if ((v27 & 1) == 0)
  {
    MTCBSegmentProducer::LoadPseudo(this, v46);
    goto LABEL_35;
  }
  if (v24)
  {
    v24 = 1;
LABEL_15:
    v28 = operator new();
    MTMBDemiProperties::MTMBDemiProperties((MTMBDemiProperties *)v28);
    v29 = 1000 * v13 / 110250;
    *(_QWORD *)(v28 + 8) = "SIL";
    *(_BYTE *)(v28 + 18) = -1;
    *(_WORD *)(v28 + 16) = 4;
    *(_DWORD *)(v28 + 64) = *((_DWORD *)this + 68);
    *(_QWORD *)(v28 + 24) = *((_QWORD *)this + 33);
    *(_QWORD *)(v28 + 32) = v29;
    *(_QWORD *)(v28 + 40) = v51;
    *(_QWORD *)(v28 + 48) = v10;
    if (v10)
      v10 += 4 * v29;
    else
      v10 = 0;
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v56, 2);
    v52 = v13;
    v54 = xmmword_1D22CF130;
    v55 = &v52;
    MTMBDemi::Load((MTMBDemi *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((unint64_t)&v22[*((_QWORD *)this + 8)] / 0x24))+ 112 * ((unint64_t)&v22[*((_QWORD *)this + 8)] % 0x24)), v28, v53, 0, 0, 0);
    if ((MTBEDebugFlags::sMTXDebug & 0x10000) != 0)
      MTMBDemi::DumpSBXF(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((unint64_t)&v22[*((_QWORD *)this + 8)] / 0x24))+ 112 * ((unint64_t)&v22[*((_QWORD *)this + 8)] % 0x24));
    v5 -= v29;
    v51 += 4 * v29;
    MEOWVectorBase::~MEOWVectorBase(v56);
  }
  if (v14 != 0xFFFF)
  {
    v30 = v58;
    v31 = operator new();
    MTMBDemiProperties::MTMBDemiProperties((MTMBDemiProperties *)v31);
    v32 = 1000 * v30 / 0x1AEAAu;
    *(_QWORD *)(v31 + 8) = "BR";
    *(_BYTE *)(v31 + 18) = 1;
    if (v24)
      v33 = 0;
    else
      v33 = 4;
    *(_WORD *)(v31 + 16) = v33;
    v34 = *((_QWORD *)this + 33);
    *(_DWORD *)(v31 + 64) = *((_DWORD *)this + 68);
    *(_QWORD *)(v31 + 24) = v34;
    *(_QWORD *)(v31 + 32) = v32;
    *(_QWORD *)(v31 + 40) = v51;
    *(_QWORD *)(v31 + 48) = v10;
    v35 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((*((_QWORD *)this + 8) + v46) / 0x24))
        + 112 * ((*((_QWORD *)this + 8) + v46) % 0x24);
    v36 = (MEOWReader *)*((_QWORD *)this + 53);
    LOWORD(v53[0]) = 0;
    MTMBDemi::Load(v35, v36, v31, (uint64_t)v57, (unsigned __int16 *)v53, 0, 0);
    if ((MTBEDebugFlags::sMTXDebug & 0x10000) != 0)
      MTMBDemi::DumpSBXF(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((*((_QWORD *)this + 8) + v46) / 0x24))+ 112 * ((*((_QWORD *)this + 8) + v46) % 0x24));
    v37 = (MEOWReader *)*((_QWORD *)this + 53);
    v38 = MEOWReader::GetDemiRecord(v37, v47, v49, v48, 0);
    if (v10)
      v10 += 4 * v32;
    else
      v10 = 0;
    if (v5 - 1 >= v32)
      v39 = 1000 * v30 / 0x1AEAAu;
    else
      v39 = v5 - 1;
    MEOWReader::GetDemi((uint64_t)v37, v38, 0, (uint64_t)v57);
    v51 += 4 * v32;
    v5 -= v39;
  }
LABEL_35:
  v40 = operator new();
  MTMBDemiProperties::MTMBDemiProperties((MTMBDemiProperties *)v40);
  *(_QWORD *)(v40 + 8) = "BR";
  *(_BYTE *)(v40 + 18) = 0;
  if (v14 != 0xFFFF || v24)
    v42 = 0;
  else
    v42 = 4;
  *(_WORD *)(v40 + 16) = v42;
  v43 = *((_QWORD *)this + 33);
  *(_DWORD *)(v40 + 64) = *((_DWORD *)this + 68);
  *(_QWORD *)(v40 + 24) = v43;
  *(_QWORD *)(v40 + 32) = v5;
  *(_QWORD *)(v40 + 40) = v51;
  *(_QWORD *)(v40 + 48) = v10;
  v44 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * (((unint64_t)v50 + *((_QWORD *)this + 8) + 3) / 0x24))
      + 112 * (((unint64_t)v50 + *((_QWORD *)this + 8) + 3) % 0x24);
  v45 = (MEOWReader *)*((_QWORD *)this + 53);
  LOWORD(v53[0]) = 0;
  MTMBDemi::Load(v44, v45, v40, (uint64_t)v57, (unsigned __int16 *)v53, 0, 0);
  *((_BYTE *)this + 432) = v47;
  *((_BYTE *)this + 433) = v49;
  *((_WORD *)this + 217) = __rev16(v48);
  if ((MTBEDebugFlags::sMTXDebug & 0x10000) != 0)
    MTMBDemi::DumpSBXF(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * (((unint64_t)v50 + *((_QWORD *)this + 8) + 3) / 0x24))+ 112 * (((unint64_t)v50 + *((_QWORD *)this + 8) + 3) % 0x24));
  MEOWVectorBase::~MEOWVectorBase(v61);
}

void sub_1D229A024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  MEOWVectorBase::~MEOWVectorBase(a15);
  _Unwind_Resume(a1);
}

BOOL MTMBSegmentProducer::LoadUnit(MTMBSegmentProducer *this, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  BOOL v19;
  FILE **v21;
  FILE *v22;
  uint64_t v23;
  MEOWPhon *v24;
  MEOWPhon *v25;
  unsigned int v26;
  unint64_t v27;
  FILE *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  MEOWReader *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  MEOWReader *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  MEOWReader *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  MEOWReader *v51;
  FILE *v52;
  char *v53;
  char *v54;
  FILE *v55;
  char *v56;
  FILE *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  MEOWPhon *v66;
  uint64_t v67;
  uint64_t v68;
  MEOWReader *v69;
  char *DemiRecord;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  MEOWReader *v74;
  MEOWPhon *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  size_t v81;
  MEOWReader *v82;
  float *v83;
  uint64_t v84;
  MEOWPhon *v85;
  MEOWPhon *v86;
  uint64_t v87;
  uint64_t v88;
  MEOWReader *v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  MEOWReader *v93;
  char *v95;
  char *v96;
  int v97;
  uint64_t v98;
  int v99;
  unsigned __int8 *v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  unint64_t v105;
  MEOWPhon *v106;
  uint64_t v107;
  __int16 v108;
  unsigned __int16 v109;
  unsigned __int16 v110[12];
  uint64_t v111;
  void *v112[4];
  _BYTE v113[72];
  void *v114[4];
  _BYTE v115[2];
  unsigned __int16 v116;

  v6 = *((_QWORD *)this + 1);
  v7 = *(_QWORD *)(v6 + 280);
  v8 = (*(_DWORD *)(v7 + 56) & 0x801) != 0 && (*(_DWORD *)(v7 + 56) & 2) == 0;
  if (v8 || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 208))
  {
    *a3 |= 0x400u;
    v108 = 1;
  }
  else
  {
    v108 = 0;
  }
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBSilenceGlue))
  {
    v9 = v7;
    do
    {
      v9 = *(_QWORD *)(v9 + 40);
      if (!v9)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 40);
        if (!v10)
          break;
        v9 = *(_QWORD *)(v10 + 16);
        if (!v9)
          break;
      }
      v11 = *(_DWORD *)(v9 + 56);
      if ((v11 & 0x40) != 0)
      {
        v108 |= 8u;
        break;
      }
    }
    while ((v11 & 0x1000) != 0);
  }
  v12 = *((_QWORD *)this + 1);
  v13 = *(unsigned __int8 **)(*(_QWORD *)(v12 + 280) + 264);
  v107 = a2;
  if (v13
    && ((v14 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 16),
         v15 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 24),
         v16 = *(unsigned __int16 *)(v14 + 88),
         v17 = *(unsigned __int16 *)(v15 + 90),
         v14 == v15)
      ? (v18 = v16 == 0xFFFF)
      : (v18 = 1),
        !v18 ? (v19 = v17 == 0xFFFF) : (v19 = 1),
        v19))
  {
    *a3 |= 0x10u;
    if (v16 != 0xFFFF || v17 != 0xFFFF)
      MEOWReader::GetWordGlue(*((MEOWReader **)this + 53), v13, (uint64_t)v115);
    v100 = v13;
    v98 = v15;
    v103 = v16;
    if ((MTBEDebugFlags::sMEOWDebug & 1) != 0)
    {
      v21 = (FILE **)MEMORY[0x1E0C80C10];
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Fetch \"%s\" ", (const char *)(*(_QWORD *)(*((_QWORD *)this + 1) + 280) + 200));
      v22 = *v21;
      if (v16 == 0xFFFF)
      {
        MEOWPhon::Name((MEOWPhon *)*v100);
        MEOWPhon::Name((MEOWPhon *)v100[1]);
        fprintf(v22, "%s>%s#%d");
      }
      else
      {
        MEOWPhon::Name((MEOWPhon *)*(unsigned __int8 *)(v14 + 92));
        MEOWPhon::Name((MEOWPhon *)v100[1]);
        MEOWPhon::Name((MEOWPhon *)v115[0]);
        fprintf(v22, "%s>%s-%s#(%d,%d)");
      }
      v52 = *v21;
      if (v17 == 0xFFFF)
      {
        v56 = MEOWPhon::Name((MEOWPhon *)v100[4]);
        v95 = MEOWPhon::Name((MEOWPhon *)v100[5]);
        v57 = v52;
        v13 = v100;
        fprintf(v57, " - %s<%s#%d\n", v56, v95, bswap32(*((unsigned __int16 *)v100 + 3)) >> 16);
        v15 = v98;
      }
      else
      {
        v53 = MEOWPhon::Name((MEOWPhon *)v115[1]);
        v54 = MEOWPhon::Name((MEOWPhon *)v100[4]);
        v15 = v98;
        v96 = MEOWPhon::Name((MEOWPhon *)*(unsigned __int8 *)(v98 + 94));
        v55 = v52;
        v13 = v100;
        fprintf(v55, " - %s-%s<%s#(%d,%d)\n", v53, v54, v96, bswap32(v116) >> 16, *(unsigned __int16 *)(v98 + 90));
      }
      v16 = v103;
    }
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v114, 2);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v112, 2);
    if (v16 == 0xFFFF)
      v58 = 0;
    else
      v58 = (int)(float)(*(float *)(v14 + 68) * *(float *)(v14 + 64));
    v59 = *((_QWORD *)this + 1);
    v102 = v58;
    if (v17 == 0xFFFF)
      v101 = 0;
    else
      v101 = (int)(float)((float)(1.0 - *(float *)(v15 + 68)) * *(float *)(v15 + 64));
    v60 = *(_QWORD *)(v59 + 64);
    v106 = *(MEOWPhon **)(v59 + 72);
    MEOWReader::GetWord(*((_QWORD *)this + 53), v13, (uint64_t)v110, v16 != 0xFFFF, v17 != 0xFFFF);
    v61 = v111;
    v99 = v17;
    if (!v111)
    {
      v62 = v101 + v102;
      if (v101 + v102)
      {
        v63 = *(__int16 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 280) + 176);
        v101 = v63 - ((v63 - v62) * v102 / v62 + v102);
        v102 += (v63 - v62) * v102 / v62;
      }
      MTCBSegmentProducer::LoadPseudo(this, a2);
    }
    if (v103 == 0xFFFF)
    {
      MTCBSegmentProducer::LoadPseudo(this, a2);
      if (v61)
        v76 = a2;
      else
        v76 = a2 + 1;
      v77 = v76 + 1;
      if (*((_DWORD *)this + 108) == *(_DWORD *)v13)
        MTMBSegmentProducer::LoadInclusion(this, v77);
      else
        MTCBSegmentProducer::LoadPseudo(this, v77);
    }
    else
    {
      if (*(unsigned __int16 *)(v14 + 88) == bswap32(*((unsigned __int16 *)this + 217)) >> 16
        && *((unsigned __int8 *)this + 432) == *(unsigned __int8 *)(v14 + 92)
        && *((unsigned __int8 *)this + 433) == *(unsigned __int8 *)(v14 + 93))
      {
        if (v61)
          v64 = a2;
        else
          v64 = a2 + 1;
        MTMBSegmentProducer::LoadInclusion(this, v64);
      }
      else
      {
        if (v61)
          v65 = a2;
        else
          v65 = a2 + 1;
        MTCBSegmentProducer::LoadPseudo(this, v65);
      }
      v66 = (MEOWPhon *)*(unsigned __int8 *)(v14 + 93);
      v67 = operator new();
      MTMBDemiProperties::MTMBDemiProperties((MTMBDemiProperties *)v67);
      *(_QWORD *)(v67 + 8) = MEOWPhon::Name(v66);
      *(_BYTE *)(v67 + 18) = 1;
      *(_WORD *)(v67 + 16) = v108 | (16 * (*(_WORD *)(v7 + 182) != 0));
      v68 = *((_QWORD *)this + 33);
      *(_DWORD *)(v67 + 64) = *((_DWORD *)this + 68);
      *(_QWORD *)(v67 + 24) = v68;
      *(_QWORD *)(v67 + 32) = v102;
      *(_QWORD *)(v67 + 40) = v60;
      *(_QWORD *)(v67 + 48) = v106;
      v69 = (MEOWReader *)*((_QWORD *)this + 53);
      DemiRecord = MEOWReader::GetDemiRecord(v69, *(unsigned __int8 *)(v14 + 92), *(unsigned __int8 *)(v14 + 93), *(unsigned __int16 *)(v14 + 88), 1);
      MEOWReader::GetDemi((uint64_t)v69, DemiRecord, 1, (uint64_t)v113);
      if (v61)
        v71 = a2;
      else
        v71 = a2 + 1;
      v72 = v71 + *((_QWORD *)this + 8) + 1;
      v73 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * (v72 / 0x24));
      v74 = (MEOWReader *)*((_QWORD *)this + 53);
      v109 = MEOWReader::NoSkipDup(v74, v66, 1u);
      MTMBDemi::Load(v73 + 112 * (v72 % 0x24), v74, v67, (uint64_t)v113, &v109, 0, 0);
      a2 = v107;
      v75 = (MEOWPhon *)((char *)v106 + 4 * v102);
      v60 += 4 * v102;
      if (!v106)
        v75 = 0;
      v106 = v75;
      v15 = v98;
      v13 = v100;
    }
    if (v61)
    {
      v78 = operator new();
      MTMBDemiProperties::MTMBDemiProperties((MTMBDemiProperties *)v78);
      v79 = *(_QWORD *)(*((_QWORD *)this + 1) + 280);
      *(_QWORD *)(v78 + 8) = v79 + 200;
      *(_BYTE *)(v78 + 18) = -1;
      *(_WORD *)(v78 + 16) = v108;
      *(_QWORD *)(v78 + 24) = *((_QWORD *)this + 33);
      *(_DWORD *)(v78 + 64) = *((_DWORD *)this + 68);
      *(_QWORD *)(v78 + 32) = *(__int16 *)(v79 + 176) - (v102 + v101);
      *(_QWORD *)(v78 + 40) = v60;
      *(_QWORD *)(v78 + 48) = v106;
      v80 = a2 + 2;
      v81 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((*((_QWORD *)this + 8) + a2 + 2) / 0x24uLL))
          + 112 * ((*((_QWORD *)this + 8) + a2 + 2) % 0x24uLL);
      v82 = (MEOWReader *)*((_QWORD *)this + 53);
      v109 = 0;
      MTMBDemi::Load(v81, v82, v78, (uint64_t)v110, &v109, v103 != 0xFFFF, (float *)(v99 != 0xFFFF));
      v84 = *(_QWORD *)(v78 + 32);
      v85 = (MEOWPhon *)((char *)v106 + 4 * v84);
      if (!v106)
        v85 = 0;
      v106 = v85;
      if (*(_WORD *)(v7 + 182))
        MTMBDemi::SetFirstPPTarget(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((*((_QWORD *)this + 8) + v80) / 0x24uLL))+ 112 * ((*((_QWORD *)this + 8) + v80) % 0x24uLL), *(unsigned __int16 *)(v7 + 182), v83);
      v60 += 4 * v84;
      if (*(_WORD *)(v7 + 184))
        MTMBDemi::SetLastPPTarget(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((*((_QWORD *)this + 8) + v80) / 0x24uLL))+ 112 * ((*((_QWORD *)this + 8) + v80) % 0x24uLL), *(unsigned __int16 *)(v7 + 184), v83);
    }
    if (v99 == 0xFFFF)
    {
      MTCBSegmentProducer::LoadPseudo(this, a2 + 3);
      *((_DWORD *)this + 108) = *((_DWORD *)v13 + 1);
    }
    else
    {
      v86 = (MEOWPhon *)*(unsigned __int8 *)(v15 + 93);
      v87 = operator new();
      MTMBDemiProperties::MTMBDemiProperties((MTMBDemiProperties *)v87);
      *(_QWORD *)(v87 + 8) = MEOWPhon::Name(v86);
      *(_BYTE *)(v87 + 18) = 0;
      *(_WORD *)(v87 + 16) = v108 | (16 * (*(_WORD *)(v7 + 184) != 0));
      v88 = *((_QWORD *)this + 33);
      *(_DWORD *)(v87 + 64) = *((_DWORD *)this + 68);
      *(_QWORD *)(v87 + 24) = v88;
      *(_QWORD *)(v87 + 32) = v101;
      *(_QWORD *)(v87 + 40) = v60;
      *(_QWORD *)(v87 + 48) = v106;
      v89 = (MEOWReader *)*((_QWORD *)this + 53);
      v90 = MEOWReader::GetDemiRecord(v89, *(unsigned __int8 *)(v15 + 93), *(unsigned __int8 *)(v15 + 94), *(unsigned __int16 *)(v15 + 90), 0);
      MEOWReader::GetDemi((uint64_t)v89, v90, 0, (uint64_t)v113);
      v91 = v107 + *((_QWORD *)this + 8) + 3;
      v92 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * (v91 / 0x24));
      v93 = (MEOWReader *)*((_QWORD *)this + 53);
      v109 = MEOWReader::NoSkipDup(v93, v86, 0);
      MTMBDemi::Load(v92 + 112 * (v91 % 0x24), v93, v87, (uint64_t)v113, &v109, 0, 0);
      *((_WORD *)this + 216) = *(_WORD *)(v15 + 93);
      *((_WORD *)this + 217) = bswap32(*(unsigned __int16 *)(v15 + 90)) >> 16;
    }
    MEOWVectorBase::~MEOWVectorBase(v112);
  }
  else
  {
    *a3 |= 0x20u;
    v23 = *(_QWORD *)(v12 + 272);
    v24 = (MEOWPhon *)*(unsigned __int8 *)(v23 + 92);
    v25 = (MEOWPhon *)*(unsigned __int8 *)(v23 + 93);
    v26 = *(unsigned __int8 *)(v23 + 94);
    v27 = *(unsigned __int16 *)(v23 + 88);
    v105 = *(unsigned __int16 *)(v23 + 90);
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBPhonemeAmplitudeSmoothing))
    {
      if (v25 >= 2 && v25 <= 0x1B)
        *a3 |= 0x800u;
    }
    v104 = v26;
    if ((MTBEDebugFlags::sMEOWDebug & 1) != 0)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = MEOWPhon::Name(v24);
      v31 = MEOWPhon::Name(v25);
      v32 = MEOWPhon::Name(v25);
      v33 = MEOWPhon::Name((MEOWPhon *)v104);
      v34 = MEOWReader::NoSkipDup(*((MEOWReader **)this + 53), v25, 1u);
      v35 = MEOWReader::NoSkipDup(*((MEOWReader **)this + 53), v25, 0);
      v97 = v34;
      a2 = v107;
      fprintf(v29, "Fetch %s>%s#%lu|%s<%s#%lu SkipDup %04x%04x\n", v30, v31, v27, v32, v33, v105, v97, v35);
    }
    MTCBSegmentProducer::LoadPseudo(this, a2);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v114, 2);
    if ((_DWORD)v27 == bswap32(*((unsigned __int16 *)this + 217)) >> 16
      && *((unsigned __int8 *)this + 432) == (_DWORD)v24
      && *((unsigned __int8 *)this + 433) == (_DWORD)v25)
    {
      MTMBSegmentProducer::LoadInclusion(this, a2 + 1);
    }
    else
    {
      MTCBSegmentProducer::LoadPseudo(this, a2 + 1);
    }
    v36 = operator new();
    MTMBDemiProperties::MTMBDemiProperties((MTMBDemiProperties *)v36);
    *(_QWORD *)(v36 + 8) = MEOWPhon::Name(v25);
    *(_BYTE *)(v36 + 18) = 1;
    *(_WORD *)(v36 + 16) = v108;
    *(_QWORD *)(v36 + 24) = *((_QWORD *)this + 33);
    *(_DWORD *)(v36 + 64) = *((_DWORD *)this + 68);
    v37 = *((_QWORD *)this + 1);
    *(_QWORD *)(v36 + 32) = *(__int16 *)(v37 + 348);
    *(_OWORD *)(v36 + 40) = *(_OWORD *)(v37 + 64);
    *(_DWORD *)(v36 + 68) = *(_DWORD *)(*(_QWORD *)(v37 + 272) + 76);
    v38 = (MEOWReader *)*((_QWORD *)this + 53);
    v39 = MEOWReader::GetDemiRecord(v38, v24, v25, v27, 1);
    MEOWReader::GetDemi((uint64_t)v38, v39, 1, (uint64_t)v113);
    v40 = a2 + *((_QWORD *)this + 8) + 2;
    v41 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * (v40 / 0x24));
    v42 = (MEOWReader *)*((_QWORD *)this + 53);
    v110[0] = MEOWReader::NoSkipDup(v42, v25, 1u);
    MTMBDemi::Load(v41 + 112 * (v40 % 0x24), v42, v36, (uint64_t)v113, v110, 0, 0);
    v43 = *(__int16 *)(*((_QWORD *)this + 1) + 348);
    v44 = operator new();
    MTMBDemiProperties::MTMBDemiProperties((MTMBDemiProperties *)v44);
    *(_QWORD *)(v44 + 8) = MEOWPhon::Name(v25);
    *(_BYTE *)(v44 + 18) = 0;
    *(_WORD *)(v44 + 16) = v108;
    *(_QWORD *)(v44 + 24) = *((_QWORD *)this + 33);
    *(_DWORD *)(v44 + 64) = *((_DWORD *)this + 68);
    v45 = *((_QWORD *)this + 1);
    *(_QWORD *)(v44 + 32) = *(__int16 *)(v45 + 346) - v43;
    *(_QWORD *)(v44 + 40) = *(_QWORD *)(v45 + 64) + 4 * v43;
    v46 = *(_QWORD *)(v45 + 72);
    if (v46)
      *(_QWORD *)(v44 + 48) = v46 + 4 * v43;
    v47 = (MEOWReader *)*((_QWORD *)this + 53);
    v48 = MEOWReader::GetDemiRecord(v47, v25, v104, v105, 0);
    MEOWReader::GetDemi((uint64_t)v47, v48, 0, (uint64_t)v113);
    v49 = v107 + *((_QWORD *)this + 8) + 3;
    v50 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * (v49 / 0x24));
    v51 = (MEOWReader *)*((_QWORD *)this + 53);
    v110[0] = MEOWReader::NoSkipDup(v51, v25, 0);
    MTMBDemi::Load(v50 + 112 * (v49 % 0x24), v51, v44, (uint64_t)v113, v110, 0, 0);
    *((_BYTE *)this + 432) = (_BYTE)v25;
    *((_BYTE *)this + 433) = v104;
    *((_WORD *)this + 217) = __rev16(v105);
  }
  MEOWVectorBase::~MEOWVectorBase(v114);
  return *(_BYTE *)(*((_QWORD *)this + 1) + 290) == 0;
}

void sub_1D229ACF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, void **a19)
{
  uint64_t v19;

  MEMORY[0x1D8233BA8](v19, 0x10D0C4050FF3235);
  MEOWVectorBase::~MEOWVectorBase(a18);
  MEOWVectorBase::~MEOWVectorBase(a19);
  _Unwind_Resume(a1);
}

void MTMBSegmentProducer::LoadInclusion(MTMBSegmentProducer *this, uint64_t a2)
{
  uint64_t v4;
  __int16 v5;
  FILE *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  size_t v12;
  MEOWReader *v13;
  unsigned __int16 v14;
  _BYTE v15[44];
  int v16;
  char v17;
  void *v18[4];

  v4 = *((_QWORD *)this + 1);
  v5 = (*(_DWORD *)(*(_QWORD *)(v4 + 280) + 56) & 3) == 1 || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 208) != 0;
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v18, 2);
  MEOWReader::GetInclusion(*((_QWORD *)this + 53), *((unsigned __int8 *)this + 432), *((unsigned __int8 *)this + 433), bswap32(*((unsigned __int16 *)this + 217)) >> 16, (uint64_t)v15);
  if (v16)
  {
    if ((MTBEDebugFlags::sMEOWDebug & 1) != 0)
    {
      v6 = (FILE *)*MEMORY[0x1E0C80C10];
      v7 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)this + 432));
      v8 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)this + 433));
      fprintf(v6, "Fetch Inclusion %s[]%s#%d\n", v7, v8, bswap32(*((unsigned __int16 *)this + 217)) >> 16);
    }
    v9 = operator new();
    MTMBDemiProperties::MTMBDemiProperties((MTMBDemiProperties *)v9);
    if ((v17 & 1) != 0)
      v10 = "[QX]";
    else
      v10 = "[]";
    *(_QWORD *)(v9 + 8) = v10;
    *(_BYTE *)(v9 + 18) = 1;
    *(_WORD *)(v9 + 16) = v5;
    v11 = *((_QWORD *)this + 33);
    *(_DWORD *)(v9 + 64) = *((_DWORD *)this + 68);
    *(_QWORD *)(v9 + 24) = v11;
    *(_QWORD *)(v9 + 32) = 0;
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(*((_QWORD *)this + 1) + 64);
    v12 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((*((_QWORD *)this + 8) + a2) / 0x24uLL))
        + 112 * ((*((_QWORD *)this + 8) + a2) % 0x24uLL);
    v13 = (MEOWReader *)*((_QWORD *)this + 53);
    v14 = 0;
    MTMBDemi::Load(v12, v13, v9, (uint64_t)v15, &v14, 0, 0);
  }
  else
  {
    MTCBSegmentProducer::LoadPseudo(this, a2);
  }
  MEOWVectorBase::~MEOWVectorBase(v18);
}

void sub_1D229AF84(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void MTPBSegmentProducer::MTPBSegmentProducer(MTPBSegmentProducer *this, MTFEFrameFiller *a2, PROWReader *a3, MTBEParam *a4)
{
  uint64_t v5;

  MTCBSegmentProducer::MTCBSegmentProducer(this, a2, a4);
  *(_QWORD *)v5 = &off_1E9368668;
  *(_QWORD *)(v5 + 424) = a3;
  *(_BYTE *)(v5 + 432) = 0;
}

{
  uint64_t v5;

  MTCBSegmentProducer::MTCBSegmentProducer(this, a2, a4);
  *(_QWORD *)v5 = &off_1E9368668;
  *(_QWORD *)(v5 + 424) = a3;
  *(_BYTE *)(v5 + 432) = 0;
}

void MTPBSegmentProducer::LoadSilence(MTCBSegmentProducer *this, uint64_t a2)
{
  *((_BYTE *)this + 432) = 0;
  MTCBSegmentProducer::LoadSilence(this, a2);
}

BOOL MTPBSegmentProducer::LoadUnit(MTPBSegmentProducer *this, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v8;
  FILE *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  size_t v20;
  PROWReader *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  PROWReader *v26;
  unsigned __int8 v28;
  __int16 v29;
  unsigned __int16 v30;
  unsigned __int8 v31[32];

  v5 = *((_QWORD *)this + 1);
  v6 = *(_DWORD *)(*(_QWORD *)(v5 + 280) + 56) & 3;
  if (v6 != 1)
    LOWORD(v6) = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 208) != 0;
  v29 = v6;
  v7 = *((unsigned __int8 *)this + 432);
  v8 = PROWPhonEng::sP2M[*(unsigned __int8 *)(v5 + 288)] + *(_BYTE *)(v5 + 289);
  v28 = PROWPhonEng::sP2M[*(unsigned __int8 *)(v5 + 293)] + *(_BYTE *)(v5 + 294);
  *((_BYTE *)this + 432) = v8;
  if ((MTBEDebugFlags::sMEOWDebug & 1) != 0)
  {
    v9 = (FILE *)*MEMORY[0x1E0C80C10];
    v10 = PROWPhonEng::sName[v7];
    v11 = PROWPhonEng::sName[v8];
    v12 = PROWPhonEng::sName[v28];
    v13 = v7;
    v14 = PROWReader::NoSkipDup(*((PROWReader **)this + 53), v8, 1u);
    v15 = PROWReader::NoSkipDup(*((PROWReader **)this + 53), v8, 0);
    v16 = v14;
    LODWORD(v7) = v13;
    fprintf(v9, "Fetch %s>%s<%s SkipDup %04x%04x\n", v10, v11, v12, v16, v15);
  }
  MTCBSegmentProducer::LoadPseudo(this, a2);
  MTCBSegmentProducer::LoadPseudo(this, a2 + 1);
  v17 = *(__int16 *)(*((_QWORD *)this + 1) + 348);
  v18 = operator new();
  MTMBDemiProperties::MTMBDemiProperties((MTMBDemiProperties *)v18);
  *(_QWORD *)(v18 + 8) = PROWPhonEng::sName[v8];
  *(_BYTE *)(v18 + 18) = 1;
  *(_WORD *)(v18 + 16) = v29;
  *(_DWORD *)(v18 + 64) = *((_DWORD *)this + 68);
  *(_QWORD *)(v18 + 24) = *((_QWORD *)this + 33);
  *(_QWORD *)(v18 + 32) = v17;
  *(_OWORD *)(v18 + 40) = *(_OWORD *)(*((_QWORD *)this + 1) + 64);
  v19 = v7;
  PROWReader::GetDemi(*((unsigned __int16 ***)this + 53), v7, v8, 1u, (uint64_t)v31);
  v20 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((a2 + *((_QWORD *)this + 8) + 2) / 0x24uLL))
      + 112 * ((a2 + *((_QWORD *)this + 8) + 2) % 0x24uLL);
  v21 = (PROWReader *)*((_QWORD *)this + 53);
  v30 = PROWReader::NoSkipDup(v21, v8, 1u);
  MTMBDemi::Load(v20, v21, v18, v31, &v30);
  if ((MTBEDebugFlags::sMEOWDebug & 1) != 0 && v31[0])
    fwrite("First Demi was Aliased\n", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  v22 = operator new();
  MTMBDemiProperties::MTMBDemiProperties((MTMBDemiProperties *)v22);
  *(_QWORD *)(v22 + 8) = PROWPhonEng::sName[v8];
  *(_BYTE *)(v22 + 18) = 0;
  *(_WORD *)(v22 + 16) = v29;
  *(_QWORD *)(v22 + 24) = *((_QWORD *)this + 33);
  *(_DWORD *)(v22 + 64) = *((_DWORD *)this + 68);
  v23 = *((_QWORD *)this + 1);
  *(_QWORD *)(v22 + 32) = *(__int16 *)(v23 + 346) - v17;
  *(_QWORD *)(v22 + 40) = *(_QWORD *)(v23 + 64) + 4 * v17;
  v24 = *(_QWORD *)(v23 + 72);
  if (v24)
    *(_QWORD *)(v22 + 48) = v24 + 4 * v17;
  PROWReader::GetDemi(*((unsigned __int16 ***)this + 53), v8, v28, 0, (uint64_t)v31);
  v25 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * ((a2 + *((_QWORD *)this + 8) + 3) / 0x24uLL))
      + 112 * ((a2 + *((_QWORD *)this + 8) + 3) % 0x24uLL);
  v26 = (PROWReader *)*((_QWORD *)this + 53);
  v30 = PROWReader::NoSkipDup(v26, v8, 0);
  MTMBDemi::Load(v25, v26, v22, v31, &v30);
  if ((MTBEDebugFlags::sMEOWDebug & 1) != 0 && v31[0])
    fwrite("Second Demi was Aliased\n", 0x18uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  return v19 == 0;
}

void sub_1D229B3F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10D0C4050FF3235);
  _Unwind_Resume(a1);
}

void MTWBSegmentProducer::MTWBSegmentProducer(MTWBSegmentProducer *this, const MTMBDemi *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)this = &off_1E93686A8;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 2) = v2 + 32 * *((_QWORD *)a2 + 2);
  if ((MTBEDebugFlags::sMEOWDebug & 1) != 0)
    MTMBDemi::Dump((uint64_t)a2, (__sFILE *)*MEMORY[0x1E0C80C10]);
}

BOOL MTWBSegmentProducer::NextSegment(MTWBSegmentProducer *this, MTMBSegment *a2)
{
  _OWORD *v2;
  unint64_t v3;
  __int128 v4;

  v2 = (_OWORD *)*((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  if ((unint64_t)v2 < v3)
  {
    *((_QWORD *)this + 1) = v2 + 2;
    v4 = v2[1];
    *(_OWORD *)a2 = *v2;
    *((_OWORD *)a2 + 1) = v4;
  }
  return (unint64_t)v2 < v3;
}

uint64_t MTMBSmoothSegment::NextSegment(MTMBSmoothSegment *this, MTMBSegment *a2)
{
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  FILE **v8;
  FILE *v9;
  int *v10;
  FILE *v11;
  int *v12;
  MTFESpeechElement v14;

  v4 = (_OWORD *)((char *)this + 32);
  v5 = *((_OWORD *)this + 3);
  *(_OWORD *)&v14.var0 = *((_OWORD *)this + 2);
  *(_OWORD *)&v14.var3 = v5;
  v6 = (***((uint64_t (****)(_QWORD, char *))this + 1))(*((_QWORD *)this + 1), (char *)this + 32);
  if ((_DWORD)v6)
  {
    v7 = v4[1];
    *(_OWORD *)a2 = *v4;
    *((_OWORD *)a2 + 1) = v7;
    v8 = (FILE **)MEMORY[0x1E0C80C10];
    if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
    {
      v9 = (FILE *)*MEMORY[0x1E0C80C10];
      v10 = MTMBSegment::Abstract((MTMBSegment **)a2);
      fprintf(v9, "Smooth      %s -> ", (const char *)v10);
    }
    (*(void (**)(_QWORD, MTFESpeechElement *, MTMBSegment *))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), &v14, a2);
    if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
    {
      v11 = *v8;
      v12 = MTMBSegment::Abstract((MTMBSegment **)a2);
      fprintf(v11, "%s\n", (const char *)v12);
    }
    MTMBSegment::Check(&v14);
    MTMBSegment::Check((MTFESpeechElement *)a2);
  }
  return v6;
}

uint64_t `non-virtual thunk to'MTMBSmoothSegment::NextSegment(MTMBSmoothSegment *this, MTMBSegment *a2)
{
  return MTMBSmoothSegment::NextSegment((MTMBSmoothSegment *)((char *)this - 16), a2);
}

void MTMBSmoothSegment::~MTMBSmoothSegment(MTMBSmoothSegment *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_1E93685C8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E93685C8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E93685C8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  JUMPOUT(0x1D8233BA8);
}

void `non-virtual thunk to'MTMBSmoothSegment::~MTMBSmoothSegment(MTMBSmoothSegment *this)
{
  uint64_t v1;

  *((_QWORD *)this - 2) = &off_1E93685C8;
  v1 = *((_QWORD *)this - 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

{
  uint64_t v1;

  *((_QWORD *)this - 2) = &off_1E93685C8;
  v1 = *((_QWORD *)this - 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  JUMPOUT(0x1D8233BA8);
}

void MTMBChangePitch::MTMBChangePitch(MTMBChangePitch *this, MTMBProducerComponent *a2, MTMBSignalProcessor *a3)
{
  *(_QWORD *)this = &off_1E93686D0;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = &unk_1E93686F8;
  *((_QWORD *)this + 3) = a3;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_WORD *)this + 24) = 0;
  *((_BYTE *)this + 65) = 1;
}

{
  *(_QWORD *)this = &off_1E93686D0;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = &unk_1E93686F8;
  *((_QWORD *)this + 3) = a3;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_WORD *)this + 24) = 0;
  *((_BYTE *)this + 65) = 1;
}

uint64_t MTMBChangePitch::NextSegment(MTMBChangePitch *this, MTMBSegment *a2)
{
  char v4;
  uint64_t result;
  __int128 v6;
  int v7;
  FILE **v8;
  FILE *v9;
  int *v10;
  FILE *v11;
  int *v12;

  if (*((_BYTE *)this + 65))
  {
    *((_BYTE *)this + 65) = 0;
    v4 = (***((uint64_t (****)(_QWORD, char *))this + 1))(*((_QWORD *)this + 1), (char *)this + 32);
    *((_BYTE *)this + 64) = v4;
    if ((v4 & 1) == 0)
    {
LABEL_3:
      result = 0;
      *((_BYTE *)this + 65) = 1;
      return result;
    }
  }
  else if (!*((_BYTE *)this + 64))
  {
    goto LABEL_3;
  }
  v6 = *((_OWORD *)this + 3);
  *(_OWORD *)a2 = *((_OWORD *)this + 2);
  *((_OWORD *)a2 + 1) = v6;
  v7 = (***((uint64_t (****)(_QWORD, char *))this + 1))(*((_QWORD *)this + 1), (char *)this + 32);
  *((_BYTE *)this + 64) = v7;
  v8 = (FILE **)MEMORY[0x1E0C80C10];
  if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
  {
    v9 = (FILE *)*MEMORY[0x1E0C80C10];
    v10 = MTMBSegment::Abstract((MTMBSegment **)a2);
    fprintf(v9, "ChangePitch %s -> ", (const char *)v10);
    v7 = *((unsigned __int8 *)this + 64);
  }
  if (v7)
    (*(void (**)(_QWORD, MTMBSegment *, char *))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), a2, (char *)this + 32);
  if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
  {
    v11 = *v8;
    v12 = MTMBSegment::Abstract((MTMBSegment **)a2);
    fprintf(v11, "%s\n", (const char *)v12);
  }
  MTMBSegment::Check((MTFESpeechElement *)a2);
  if (*((_BYTE *)this + 64))
    MTMBSegment::Check((MTFESpeechElement *)((char *)this + 32));
  return 1;
}

uint64_t `non-virtual thunk to'MTMBChangePitch::NextSegment(MTMBChangePitch *this, MTMBSegment *a2)
{
  return MTMBChangePitch::NextSegment((MTMBChangePitch *)((char *)this - 16), a2);
}

void MTMBChangePitch::~MTMBChangePitch(MTMBChangePitch *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E93686D0;
  *((_QWORD *)this + 2) = &unk_1E93686F8;
  if (!*((_BYTE *)this + 65) && *((_BYTE *)this + 64))
    MTMBSegment::Free((MTMBChangePitch *)((char *)this + 32));
  *(_QWORD *)this = &off_1E93685C8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
}

{
  MTMBChangePitch::~MTMBChangePitch(this);
  JUMPOUT(0x1D8233BA8);
}

void `non-virtual thunk to'MTMBChangePitch::~MTMBChangePitch(MTMBChangePitch *this)
{
  MTMBChangePitch::~MTMBChangePitch((MTMBChangePitch *)((char *)this - 16));
}

{
  MTMBChangePitch::~MTMBChangePitch((MTMBChangePitch *)((char *)this - 16));
  JUMPOUT(0x1D8233BA8);
}

void MTMBBlend::MTMBBlend(MTMBBlend *this, MTMBProducerComponent *a2, MTMBSignalProcessor *a3)
{
  *(_QWORD *)this = &off_1E9368720;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = &unk_1E9368748;
  *((_QWORD *)this + 3) = a3;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_WORD *)this + 24) = 0;
  *((_BYTE *)this + 65) = 1;
}

{
  *(_QWORD *)this = &off_1E9368720;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = &unk_1E9368748;
  *((_QWORD *)this + 3) = a3;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_WORD *)this + 24) = 0;
  *((_BYTE *)this + 65) = 1;
}

BOOL MTMBBlend::NextSegment(MTMBBlend *this, MTMBSegment *a2)
{
  int v4;
  MTMBSegment **v5;
  __int128 v6;
  int v7;
  char v8;
  const char *v9;
  MTMBDemiProperties **v10;
  FILE **v11;
  FILE *v12;
  int *v13;
  FILE *v14;
  int *v15;
  FILE *v17;
  int *v18;
  FILE *v19;
  int *v20;
  FILE **v21;
  FILE *v22;
  int *v23;
  FILE *v24;
  int *v25;
  FILE **v26;
  FILE *v27;
  int *v28;
  FILE *v29;
  int *v30;

  if (*((_BYTE *)this + 65))
  {
    *((_BYTE *)this + 65) = 0;
    v4 = (***((uint64_t (****)(_QWORD, char *))this + 1))(*((_QWORD *)this + 1), (char *)this + 32);
    *((_BYTE *)this + 64) = v4;
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *((unsigned __int8 *)this + 64);
    if (*((_BYTE *)this + 64))
    {
LABEL_3:
      v5 = (MTMBSegment **)((char *)this + 32);
      v6 = *((_OWORD *)this + 3);
      *(_OWORD *)a2 = *((_OWORD *)this + 2);
      *((_OWORD *)a2 + 1) = v6;
      v7 = (***((uint64_t (****)(_QWORD, char *))this + 1))(*((_QWORD *)this + 1), (char *)this + 32);
      *((_BYTE *)this + 64) = v7;
      if (v7)
      {
        while (!*((_WORD *)this + 20))
        {
          MTMBSegment::Free((MTMBBlend *)((char *)this + 32));
          v8 = (***((uint64_t (****)(_QWORD, char *))this + 1))(*((_QWORD *)this + 1), (char *)this + 32);
          *((_BYTE *)this + 64) = v8;
          if ((v8 & 1) == 0)
            goto LABEL_14;
        }
        if ((*((_WORD *)this + 24) & 0x1000) != 0)
        {
          if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
          {
            v17 = (FILE *)*MEMORY[0x1E0C80C10];
            v18 = MTMBSegment::Abstract((MTMBSegment **)this + 4);
            fprintf(v17, "BlendBeg    %s -> ", (const char *)v18);
          }
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog))
            BlendingLog("   ", (MTMBDemiProperties **)a2);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog))
            BlendingLog("- <", (MTMBDemiProperties **)this + 4);
          (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 3) + 48))(*((_QWORD *)this + 3), (char *)this + 32);
          if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
          {
            v19 = (FILE *)*MEMORY[0x1E0C80C10];
            v20 = MTMBSegment::Abstract(v5);
            fprintf(v19, "%s\n", (const char *)v20);
          }
          if (!MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog))
            goto LABEL_26;
          v9 = "+ <";
LABEL_24:
          v10 = v5;
          goto LABEL_25;
        }
        if ((*((_WORD *)a2 + 8) & 0x2000) == 0)
        {
          if ((*((_WORD *)this + 24) & 0x4000) != 0)
          {
            if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
            {
              v21 = (FILE **)MEMORY[0x1E0C80C10];
              v22 = (FILE *)*MEMORY[0x1E0C80C10];
              v23 = MTMBSegment::Abstract((MTMBSegment **)a2);
              fprintf(v22, "Blend       %s ", (const char *)v23);
              v24 = *v21;
              v25 = MTMBSegment::Abstract((MTMBSegment **)this + 4);
              fprintf(v24, "%s\n", (const char *)v25);
            }
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog))
              BlendingLog("- =", (MTMBDemiProperties **)a2);
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog))
              BlendingLog("- =", (MTMBDemiProperties **)this + 4);
            (*(void (**)(_QWORD, MTMBSegment *, char *))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), a2, (char *)this + 32);
            if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
            {
              v26 = (FILE **)MEMORY[0x1E0C80C10];
              v27 = (FILE *)*MEMORY[0x1E0C80C10];
              v28 = MTMBSegment::Abstract((MTMBSegment **)a2);
              fprintf(v27, " -> %s ", (const char *)v28);
              v29 = *v26;
              v30 = MTMBSegment::Abstract(v5);
              fprintf(v29, "%s\n", (const char *)v30);
            }
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog))
              BlendingLog("+ =", (MTMBDemiProperties **)a2);
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog))
              BlendingLog("+ =", v5);
            MTMBSegment::Check((MTFESpeechElement *)v5);
            goto LABEL_26;
          }
          if (!MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog))
          {
LABEL_26:
            MTMBSegment::Check((MTFESpeechElement *)a2);
            return v4 != 0;
          }
          v9 = "   ";
          v10 = (MTMBDemiProperties **)a2;
LABEL_25:
          BlendingLog(v9, v10);
          goto LABEL_26;
        }
      }
LABEL_14:
      v11 = (FILE **)MEMORY[0x1E0C80C10];
      if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
      {
        v12 = (FILE *)*MEMORY[0x1E0C80C10];
        v13 = MTMBSegment::Abstract((MTMBSegment **)a2);
        fprintf(v12, "BlendEnd    %s -> ", (const char *)v13);
      }
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog))
        BlendingLog("   ", (MTMBDemiProperties **)a2);
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog))
        BlendingLog("- >", (MTMBDemiProperties **)this + 4);
      (*(void (**)(_QWORD, MTMBSegment *))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3), a2);
      if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
      {
        v14 = *v11;
        v15 = MTMBSegment::Abstract((MTMBSegment **)a2);
        fprintf(v14, "%s\n", (const char *)v15);
      }
      if (!MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog))
        goto LABEL_26;
      v9 = "+ >";
      goto LABEL_24;
    }
  }
  *((_BYTE *)this + 65) = 1;
  return v4 != 0;
}

uint64_t BlendingLog(const char *a1, MTMBDemiProperties **a2)
{
  const char *v4;
  uint64_t v5;
  unint64_t v6;
  char v8[16];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = MTMBDemiProperties::Phon(a2[3], v8);
  v5 = 85;
  if (((_WORD)a2[2] & 1) != 0)
    v5 = 86;
  printf("%s %s %c %u", a1, v4, v5, *((unsigned __int16 *)a2 + 4));
  if (*((_WORD *)a2 + 4))
  {
    v6 = 0;
    do
      printf(" %.0f", *((float *)*a2 + v6++));
    while (v6 < *((unsigned __int16 *)a2 + 4));
  }
  return putchar(10);
}

BOOL `non-virtual thunk to'MTMBBlend::NextSegment(MTMBBlend *this, MTMBSegment *a2)
{
  return MTMBBlend::NextSegment((MTMBBlend *)((char *)this - 16), a2);
}

void MTMBBlend::~MTMBBlend(MTMBBlend *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E9368720;
  *((_QWORD *)this + 2) = &unk_1E9368748;
  if (!*((_BYTE *)this + 65) && *((_BYTE *)this + 64))
    MTMBSegment::Free((MTMBBlend *)((char *)this + 32));
  *(_QWORD *)this = &off_1E93685C8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
}

{
  MTMBBlend::~MTMBBlend(this);
  JUMPOUT(0x1D8233BA8);
}

void `non-virtual thunk to'MTMBBlend::~MTMBBlend(MTMBBlend *this)
{
  MTMBBlend::~MTMBBlend((MTMBBlend *)((char *)this - 16));
}

{
  MTMBBlend::~MTMBBlend((MTMBBlend *)((char *)this - 16));
  JUMPOUT(0x1D8233BA8);
}

void MTMBChangeAmplitude::MTMBChangeAmplitude(MTMBChangeAmplitude *this, MTMBProducerComponent *a2, MTMBSignalProcessor *a3, char a4)
{
  *(_QWORD *)this = &off_1E9368770;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = &unk_1E9368798;
  *((_QWORD *)this + 3) = a3;
  *((_QWORD *)this + 4) = 0x3800000038000000;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = a4;
}

{
  *(_QWORD *)this = &off_1E9368770;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = &unk_1E9368798;
  *((_QWORD *)this + 3) = a3;
  *((_QWORD *)this + 4) = 0x3800000038000000;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = a4;
}

uint64_t MTMBChangeAmplitude::NextSegment(MTMBChangeAmplitude *this, MTFESpeechElement *a2)
{
  uint64_t v4;
  MTFESpeechElement *var4;
  FILE *v6;
  int *v7;
  float *v8;
  float v9;
  float v10;
  BOOL v11;
  float *v12;
  float v13;
  FILE *v14;
  int *v15;
  float v17;
  float v18;

  v4 = (***((uint64_t (****)(_QWORD))this + 1))(*((_QWORD *)this + 1));
  if ((_DWORD)v4)
  {
    var4 = a2->var4;
    if (var4 != *((MTFESpeechElement **)this + 5))
    {
      *((_QWORD *)this + 5) = var4;
      if (var4)
        *((float *)this + 9) = (float)(uint64_t)var4->var4 * 4.6566e-10;
      if (((uint64_t)a2->var3 & 0x1000) != 0)
        *((_DWORD *)this + 8) = *((_DWORD *)this + 9);
    }
    if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
    {
      v6 = (FILE *)*MEMORY[0x1E0C80C10];
      v7 = MTMBSegment::Abstract((MTMBSegment **)a2);
      fprintf(v6, "ChangeAmp   %s -> ", (const char *)v7);
    }
    v8 = (float *)((char *)this + 36);
    v9 = *((float *)this + 9);
    v10 = *((float *)this + 8);
    if (v9 <= v10)
    {
      v17 = v10 + -0.1;
      v11 = v9 < (float)(v10 + -0.1);
      v12 = &v17;
    }
    else
    {
      v18 = v10 + 0.1;
      v11 = (float)(v10 + 0.1) < v9;
      v12 = &v18;
    }
    if (v11)
      v8 = v12;
    v13 = *v8;
    (*(void (**)(_QWORD, MTFESpeechElement *, _QWORD))(**((_QWORD **)this + 3) + 64))(*((_QWORD *)this + 3), a2, *((unsigned __int8 *)this + 48));
    *((float *)this + 8) = v13;
    if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
    {
      v14 = (FILE *)*MEMORY[0x1E0C80C10];
      v15 = MTMBSegment::Abstract((MTMBSegment **)a2);
      fprintf(v14, "%s %f\n", (const char *)v15, v13);
    }
    MTMBSegment::Check(a2);
  }
  return v4;
}

uint64_t `non-virtual thunk to'MTMBChangeAmplitude::NextSegment(MTMBChangeAmplitude *this, MTFESpeechElement *a2)
{
  return MTMBChangeAmplitude::NextSegment((MTMBChangeAmplitude *)((char *)this - 16), a2);
}

void MTMBSpeechRateModifier::MTMBSpeechRateModifier(MTMBSpeechRateModifier *this, MTMBProducerComponent *a2)
{
  *(_QWORD *)this = &off_1E93687C0;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = &unk_1E93687E8;
  *((_QWORD *)this + 3) = MTMBModRate::CreateConcreteModifier(this);
  MEOWVectorBase::MEOWVectorBase((MTMBSpeechRateModifier *)((char *)this + 32), 4);
  MEOWVectorBase::MEOWVectorBase((MTMBSpeechRateModifier *)((char *)this + 64), 4);
  *((_QWORD *)this + 12) = (char *)this + 96;
  *((_QWORD *)this + 13) = (char *)this + 96;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = (char *)this + 120;
  *((_QWORD *)this + 16) = (char *)this + 120;
  *((_QWORD *)this + 17) = 0;
  *((_WORD *)this + 72) = 257;
  *((_DWORD *)this + 37) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_DWORD *)this + 39) = 1065353216;
}

void sub_1D229C250(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  uint64_t v5;

  v3 = v2;
  MEOWVectorBase::~MEOWVectorBase(v3);
  *v1 = &off_1E93685C8;
  v5 = v1[1];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  _Unwind_Resume(a1);
}

void MTMBSpeechRateModifier::~MTMBSpeechRateModifier(MTMBSpeechRateModifier *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E93687C0;
  *((_QWORD *)this + 2) = &unk_1E93687E8;
  if (*((_QWORD *)this + 17))
  {
    MTMBSegment::Free((MTMBSegment *)(*((_QWORD *)this + 16) + 16));
    v2 = (uint64_t *)*((_QWORD *)this + 16);
    v3 = *((_QWORD *)this + 17);
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = v2[1];
    *(_QWORD *)v2[1] = v4;
    *((_QWORD *)this + 17) = v3 - 1;
    operator delete(v2);
  }
  v5 = *((_QWORD *)this + 3);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::__list_imp<SpeechChannelManager *>::clear((_QWORD *)this + 15);
  std::__list_imp<SpeechChannelManager *>::clear((_QWORD *)this + 12);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 8);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 4);
  *(_QWORD *)this = &off_1E93685C8;
  v6 = *((_QWORD *)this + 1);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
}

{
  MTMBSpeechRateModifier::~MTMBSpeechRateModifier(this);
  JUMPOUT(0x1D8233BA8);
}

void `non-virtual thunk to'MTMBSpeechRateModifier::~MTMBSpeechRateModifier(MTMBSpeechRateModifier *this)
{
  MTMBSpeechRateModifier::~MTMBSpeechRateModifier((MTMBSpeechRateModifier *)((char *)this - 16));
}

{
  MTMBSpeechRateModifier::~MTMBSpeechRateModifier((MTMBSpeechRateModifier *)((char *)this - 16));
  JUMPOUT(0x1D8233BA8);
}

uint64_t MTMBSpeechRateModifier::NextSegment(MTMBSpeechRateModifier *this, MTMBSegment *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  char *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  MTMBDemiProperties *v14;
  float v15;
  float v16;
  int v17;
  int v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  FILE *v27;
  const char *v28;
  void *__src;
  unint64_t v30;
  unsigned __int16 v31;
  MTMBDemiProperties *v32;
  char v33[4];
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  __src = 0;
  v30 = 0;
  v31 = 0;
  if (*((_QWORD *)this + 17))
  {
LABEL_2:
    v4 = *((_QWORD *)this + 16);
    v5 = *(_OWORD *)(v4 + 32);
    *(_OWORD *)a2 = *(_OWORD *)(v4 + 16);
    *((_OWORD *)a2 + 1) = v5;
    MTMBSegment::Modify((MTFESpeechElement *)a2);
    v6 = (uint64_t *)*((_QWORD *)this + 16);
    v7 = *v6;
    *(_QWORD *)(v7 + 8) = v6[1];
    *(_QWORD *)v6[1] = v7;
    --*((_QWORD *)this + 17);
    operator delete(v6);
    MTMBSegment::Check((MTFESpeechElement *)a2);
    *((_DWORD *)this + 37) += *((unsigned __int16 *)a2 + 4);
    return 1;
  }
  v9 = (char *)this + 96;
  while (*((_BYTE *)this + 145))
  {
    v10 = (***((uint64_t (****)(_QWORD, void **))this + 1))(*((_QWORD *)this + 1), &__src);
    v13 = v10;
    *((_BYTE *)this + 145) = v10;
    if (!v10)
      goto LABEL_25;
    v14 = v32;
    LOWORD(v11) = *((_WORD *)v32 + 32);
    LOWORD(v12) = *((_WORD *)v32 + 33);
    v15 = (float)v11 / (float)v12;
    if (*((_BYTE *)this + 144))
    {
      v16 = *((float *)this + 39);
    }
    else
    {
      v17 = *((_DWORD *)v32 + 17);
      if (v17 == *((_DWORD *)this + 38))
        goto LABEL_20;
      *((_DWORD *)this + 38) = v17;
      if (!v17)
        goto LABEL_20;
      v18 = *((_DWORD *)this + 37) - v17;
      v19 = 1.1;
      if (v18 >= -4410)
      {
        v19 = 1.05;
        if (v18 >= -2205)
        {
          v19 = 1.02;
          if (v18 >= -1100)
          {
            v19 = 1.01;
            if (v18 >= -550)
            {
              v19 = 1.0;
              if (v18 >= 550)
              {
                v19 = 0.99;
                if (v18 >= 0x44C)
                {
                  v19 = 0.98;
                  if (v18 >= 0x89D)
                    v19 = flt_1D22CF720[v18 >> 1 < 0x89D];
                }
              }
            }
          }
        }
      }
      *((float *)this + 39) = v19;
      if ((MTBEDebugFlags::sMEOWDebug & 1) == 0)
      {
LABEL_20:
        v16 = *((float *)this + 39);
LABEL_21:
        (*(void (**)(_QWORD, float))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), v15 * v16);
        goto LABEL_22;
      }
      v27 = (FILE *)*MEMORY[0x1E0C80C10];
      v28 = MTMBDemiProperties::Phon(v14, v33);
      fprintf(v27, "Unit %s Target %u Actual %u Diff %d [%5.2fs] Tweak %5.2f\n", v28, *((_DWORD *)this + 38), *((_DWORD *)this + 37), v18, (float)((float)v18 / 22050.0), *((float *)this + 39));
      v16 = *((float *)this + 39);
      if (!*((_BYTE *)this + 144))
        goto LABEL_21;
    }
    (*(void (**)(_QWORD, float))(**((_QWORD **)this + 3) + 48))(*((_QWORD *)this + 3), v15 * v16);
    MEOWVectorBase::clear((void **)this + 4);
    *((_BYTE *)this + 144) = 0;
    *((_DWORD *)this + 37) = 0;
    *((_DWORD *)this + 38) = 0;
LABEL_22:
    v20 = (v31 >> 7) & 7;
    if ((_DWORD)v20)
    {
      v21 = *((unsigned int *)this + 12);
      v22 = operator new(0x18uLL);
      v22[1] = v9;
      v22[2] = v21 | (v20 << 32);
      v23 = *((_QWORD *)this + 12);
      *v22 = v23;
      *(_QWORD *)(v23 + 8) = v22;
      *((_QWORD *)this + 12) = v22;
      ++*((_QWORD *)this + 14);
    }
    MEOWVectorBase::Append((MTMBSpeechRateModifier *)((char *)this + 32), __src, (unsigned __int16)v30);
    MTMBSegment::Free((MTMBSegment *)&__src);
LABEL_25:
    if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), *((unsigned int *)this + 12)))
    {
      do
      {
        (*(void (**)(_QWORD, char *, char *, char *, _QWORD))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), (char *)this + 32, (char *)this + 64, v33, 0);
        v24 = v34;
        if ((v34 & 0x80000000) == 0)
        {
          if (v34 >= *(int *)v33)
          {
            v26 = *((_QWORD *)this + 14);
            goto LABEL_38;
          }
          v25 = *((_QWORD *)this + 13);
          if ((char *)v25 != v9)
          {
            v26 = 0;
            while (*(_DWORD *)(v25 + 16) < v34)
            {
              ++v26;
              v25 = *(_QWORD *)(v25 + 8);
              if ((char *)v25 == v9)
                goto LABEL_38;
            }
            while ((char *)v25 != v9)
            {
              *(_DWORD *)(v25 + 16) -= v24;
              v25 = *(_QWORD *)(v25 + 8);
            }
            goto LABEL_38;
          }
        }
        v26 = 0;
LABEL_38:
        MTMBSpeechRateModifier::PushToQueue((uint64_t)this, (uint64_t)this + 64, (uint64_t)this + 96, v26);
      }
      while (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), *((unsigned int *)this + 12)) & 1) != 0);
    }
    if ((v13 & 1) == 0)
    {
      (*(void (**)(_QWORD, char *, char *, char *, uint64_t))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), (char *)this + 32, (char *)this + 64, v33, 1);
      if (*((_QWORD *)this + 10))
        MTMBSpeechRateModifier::PushToQueue((uint64_t)this, (uint64_t)this + 64, (uint64_t)this + 96, *((_QWORD *)this + 14));
    }
    if (*((_QWORD *)this + 17))
      goto LABEL_2;
  }
  result = 0;
  *((_WORD *)this + 72) = 257;
  return result;
}

void MTMBSpeechRateModifier::PushToQueue(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v4 = a4;
  if (*(_QWORD *)(a2 + 16))
  {
    if (a4)
      goto LABEL_3;
LABEL_10:
    v19 = operator new(0x30uLL);
    v19[3] = 0;
    v19[2] = 0;
    *((_WORD *)v19 + 16) = 0;
    v19[5] = 0;
    v21 = *(_QWORD *)(a1 + 120);
    v20 = (_QWORD *)(a1 + 120);
    *v19 = v21;
    v19[1] = v20;
    *(_QWORD *)(v21 + 8) = v19;
    *v20 = v19;
    ++v20[2];
    MTMBSegment::Allocate((MTMBSegment *)(v19 + 2), *(_DWORD *)(a2 + 16));
    memcpy(*(void **)(*v20 + 16), *(const void **)a2, 4 * *(_QWORD *)(a2 + 16));
    return;
  }
  MTBEAbort(0);
  if (!v4)
    goto LABEL_10;
LABEL_3:
  v8 = 0;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = v9 / v4;
  v11 = v9 % v4;
  do
  {
    if (--v4)
      v12 = 0;
    else
      v12 = v11;
    v13 = v12 + v10;
    v14 = operator new(0x30uLL);
    v14[3] = 0;
    *((_WORD *)v14 + 16) = 0;
    v14[2] = 0;
    v14[5] = 0;
    v15 = *(_QWORD *)(a1 + 120);
    *v14 = v15;
    v14[1] = a1 + 120;
    *(_QWORD *)(v15 + 8) = v14;
    *(_QWORD *)(a1 + 120) = v14;
    ++*(_QWORD *)(a1 + 136);
    MTMBSegment::Allocate((MTMBSegment *)(v14 + 2), v13);
    memcpy(*(void **)(*(_QWORD *)(a1 + 120) + 16), (const void *)(*(_QWORD *)a2 + 4 * v8), 4 * v13);
    v16 = *(uint64_t **)(a3 + 8);
    v17 = *(_QWORD *)(a3 + 16);
    *(_WORD *)(*(_QWORD *)(a1 + 120) + 32) |= *((unsigned __int8 *)v16 + 20) << 7;
    v18 = *v16;
    *(_QWORD *)(v18 + 8) = v16[1];
    *(_QWORD *)v16[1] = v18;
    *(_QWORD *)(a3 + 16) = v17 - 1;
    operator delete(v16);
    v8 += v13;
  }
  while (v4);
}

uint64_t `non-virtual thunk to'MTMBSpeechRateModifier::NextSegment(MTMBSpeechRateModifier *this, MTMBSegment *a2)
{
  return MTMBSpeechRateModifier::NextSegment((MTMBSpeechRateModifier *)((char *)this - 16), a2);
}

void MTMBSegmentProducer::~MTMBSegmentProducer(MTMBSegmentProducer *this)
{
  MTCBSegmentProducer::~MTCBSegmentProducer(this);
  JUMPOUT(0x1D8233BA8);
}

void MTPBSegmentProducer::~MTPBSegmentProducer(MTPBSegmentProducer *this)
{
  MTCBSegmentProducer::~MTCBSegmentProducer(this);
  JUMPOUT(0x1D8233BA8);
}

void MTWBSegmentProducer::~MTWBSegmentProducer(MTWBSegmentProducer *this)
{
  JUMPOUT(0x1D8233BA8);
}

void MTMBChangeAmplitude::~MTMBChangeAmplitude(MTMBChangeAmplitude *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_1E93685C8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E93685C8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  JUMPOUT(0x1D8233BA8);
}

void `non-virtual thunk to'MTMBChangeAmplitude::~MTMBChangeAmplitude(MTMBChangeAmplitude *this)
{
  uint64_t v1;

  *((_QWORD *)this - 2) = &off_1E93685C8;
  v1 = *((_QWORD *)this - 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

{
  uint64_t v1;

  *((_QWORD *)this - 2) = &off_1E93685C8;
  v1 = *((_QWORD *)this - 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  JUMPOUT(0x1D8233BA8);
}

uint64_t std::deque<MTMBDemi>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  MTMBDemi *v7;
  unint64_t v8;
  uint64_t v9;
  MTMBDemi *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x24];
    v7 = (MTMBDemi *)((char *)*v6 + 112 * (v5 % 0x24));
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x24] + 112 * ((a1[5] + v5) % 0x24);
    if (v7 != (MTMBDemi *)v8)
    {
      do
      {
        MTMBDemi::~MTMBDemi(v7);
        v7 = (MTMBDemi *)(v9 + 112);
        if (v7 - (MTMBDemi *)*v6 == 4032)
        {
          v10 = (MTMBDemi *)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (MTMBDemi *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 18;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_16;
    v13 = 36;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<MTMBDemi *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<MTMBDemi *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t std::deque<unsigned short>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 1024;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 2048;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<MTMBDemi *>::~__split_buffer((uint64_t)a1);
}

MTMBDemi *std::deque<MTMBDemi>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  MTMBDemi *result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v4 = a1[1];
  v5 = a1[2];
  if (v5 == v4)
    v6 = 0;
  else
    v6 = 36 * ((v5 - v4) >> 3) - 1;
  v7 = a1[5] + a1[4];
  v8 = v6 - v7;
  v9 = a2 > v8;
  v10 = a2 - v8;
  if (v9)
  {
    std::deque<MTMBDemi>::__add_back_capacity(a1, v10);
    v4 = a1[1];
    v5 = a1[2];
    v7 = a1[4] + a1[5];
  }
  v11 = (_QWORD *)(v4 + 8 * (v7 / 0x24));
  if (v5 == v4)
    v12 = 0;
  else
    v12 = *v11 + 112 * (v7 % 0x24);
  v19 = (_QWORD *)(v4 + 8 * (v7 / 0x24));
  v20 = v12;
  result = (MTMBDemi *)std::__deque_iterator<MTMBDemi,MTMBDemi*,MTMBDemi&,MTMBDemi**,long,36l>::operator+=[abi:ne180100](&v19, a2);
  v14 = v20;
  if (v12 != v20)
  {
    v15 = v19;
    do
    {
      if (v11 == v15)
        v16 = v14;
      else
        v16 = *v11 + 4032;
      if (v12 == v16)
      {
        v16 = v12;
      }
      else
      {
        v17 = 0;
        do
        {
          result = MTMBDemi::MTMBDemi((MTMBDemi *)(v12 + v17));
          v17 += 112;
        }
        while (v12 + v17 != v16);
      }
      a1[5] += 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v16 - v12) >> 4);
      if (v11 == v15)
        break;
      v18 = v11[1];
      ++v11;
      v12 = v18;
    }
    while (v18 != v14);
  }
  return result;
}

void sub_1D229CEB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 40) += 0x6DB6DB6DB6DB6DB7 * (v2 >> 4);
  _Unwind_Resume(a1);
}

uint64_t std::deque<MTMBDemi>::__erase_to_end(uint64_t result, _QWORD *a2, MTMBDemi *a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  MTMBDemi *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  MTMBDemi *v13;
  uint64_t v14;
  MTMBDemi *v15;
  _QWORD *v16;
  uint64_t v17;
  MTMBDemi *v18;
  _QWORD *v19;
  MTMBDemi *v20;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 32);
  v5 = v4 + *(_QWORD *)(result + 40);
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = (_QWORD *)(v6 + 8 * (v5 / 0x24));
  if (v7 == v6)
    v9 = 0;
  else
    v9 = (MTMBDemi *)(*v8 + 112 * (v5 % 0x24));
  if (v9 != a3)
  {
    v10 = ((uint64_t)a3 - *a2) >> 4;
    v11 = 36 * (v8 - a2) + 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v9 - *v8) >> 4) - 0x6DB6DB6DB6DB6DB7 * v10;
    if (v11 >= 1)
    {
      v12 = (_QWORD *)(v6 + 8 * (v4 / 0x24));
      if (v7 == v6)
        v13 = 0;
      else
        v13 = (MTMBDemi *)(*v12 + 112 * (v4 % 0x24));
      if (a3 == v13)
        v14 = 0;
      else
        v14 = 36 * (a2 - v12) + 0x6DB6DB6DB6DB6DB7 * v10 - 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v13 - *v12) >> 4);
      v19 = v12;
      v20 = v13;
      std::__deque_iterator<MTMBDemi,MTMBDemi*,MTMBDemi&,MTMBDemi**,long,36l>::operator+=[abi:ne180100](&v19, v14);
      v15 = v20;
      if (v20 != v9)
      {
        v16 = v19;
        do
        {
          MTMBDemi::~MTMBDemi(v15);
          v15 = (MTMBDemi *)(v17 + 112);
          if ((MTMBDemi *)((char *)v15 - *v16) == (MTMBDemi *)4032)
          {
            v18 = (MTMBDemi *)v16[1];
            ++v16;
            v15 = v18;
          }
        }
        while (v15 != v9);
      }
      v3[5] -= v11;
      do
        result = std::deque<MTMBDemi>::__maybe_remove_back_spare[abi:ne180100](v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

void std::deque<MTMBDemi>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if (v5 % 0x24)
    v6 = v5 / 0x24 + 1;
  else
    v6 = v5 / 0x24;
  v7 = a1[4];
  if (v6 >= v7 / 0x24)
    v8 = v7 / 0x24;
  else
    v8 = v6;
  if (v6 <= v7 / 0x24)
  {
    for (a1[4] = v7 - 36 * v8; v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFC0uLL);
          std::__split_buffer<MTMBDemi *>::push_back(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFC0uLL);
          std::__split_buffer<MTMBDemi *>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 35;
          else
            v64 = 36;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - 36 * v8;
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = -36 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0xFC0uLL);
        std::__split_buffer<MTMBDemi *>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<MTMBDemi *>::push_front((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] += v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1D229D5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<MTMBDemi *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<MTMBDemi *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<MTMBDemi>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 36 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x24)
    a2 = 1;
  if (v5 < 0x48)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<unsigned short>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x800;
  v4 = v2 - 2048;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<MTMBDemi *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<MTMBDemi *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<MTMBDemi *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<MTMBDemi *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1D229DDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<MTMBDemi>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x24)
    a2 = 1;
  if (v2 < 0x48)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 36;
  }
  return v4 ^ 1u;
}

uint64_t std::deque<unsigned short>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x800)
    a2 = 1;
  if (v2 < 0x1000)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 2048;
  }
  return v4 ^ 1u;
}

_QWORD *std::__deque_iterator<MTMBDemi,MTMBDemi*,MTMBDemi&,MTMBDemi**,long,36l>::operator+=[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 4);
    if ((uint64_t)v3 < 1)
    {
      v5 = 35 - v3;
      v6 = &v2[-(v5 / 0x24)];
      *result = v6;
      v4 = *v6 + 112 * (36 * (v5 / 0x24) - v5) + 3920;
    }
    else
    {
      *result = &v2[v3 / 0x24];
      v4 = v2[v3 / 0x24] + 112 * (v3 % 0x24);
    }
    result[1] = v4;
  }
  return result;
}

MTFESpeechElement *MTFEAdjustPhrasing::VisitIntonationalPhrase(MTFEAdjustPhrasing *this, MTFESpeechElement *a2)
{
  MTFEAdjustPhrasing::PeekInto(this, a2);
  return MTFESpeechElement::VisitChildren(a2, this);
}

void MTFEAdjustPhrasing::PeekInto(MTFEAdjustPhrasing *this, MTFESpeechElement *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  _BYTE v11[16];
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  MTFESpeechIterator::MTFESpeechIterator((MTFESpeechIterator *)v11, a2);
  v3 = v12;
  if (!v12 || (v4 = (_QWORD *)*((_QWORD *)this + 2), v12 == v4))
  {
    LOBYTE(v4) = 0;
  }
  else
  {
    if (v4)
    {
      do
      {
        v5 = v4;
        v4 = (_QWORD *)v4[3];
      }
      while (v4);
      *((_QWORD *)this + 4) = v6;
      if (v6)
        LOBYTE(v4) = v6[58] == 0;
      else
        LOBYTE(v4) = 0;
    }
    else
    {
      *((_QWORD *)this + 4) = 0;
    }
    *((_QWORD *)this + 2) = v3;
    *((_BYTE *)this + 40) = *((_BYTE *)this + 41);
    *((_BYTE *)this + 41) = *((_BYTE *)v3 + 158);
  }
  v7 = v13;
  if (v13 != *((_QWORD *)this + 3))
  {
    *((_QWORD *)this + 3) = v13;
    *((_BYTE *)this + 42) = *((_BYTE *)this + 43);
    *((_BYTE *)this + 43) = *(_BYTE *)(v7 + 80);
    if ((v4 & 1) == 0)
    {
      v8 = v15;
      if (*(_BYTE *)(v15 + 58))
        v8 = 0;
      *((_QWORD *)this + 4) = v8;
    }
  }
  if (v14)
  {
    v9 = *(__int16 *)(v14 + 178);
    *((_WORD *)this + 4) = v9;
    v10 = 180.0 / (double)v9;
    *((float *)this + 3) = v10;
  }
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v11);
}

uint64_t MTFEAdjustPhrasing::DemoteIntonationalPhrase(uint64_t this, MTFESpeechElement *a2)
{
  uint64_t v3;
  MTFESpeechElement *var3;
  MTFESpeechElement *var7;
  MTFESpeechElement *v6;
  MTFESpeechElement *v7;
  MTFESpeechElement *v8;
  MTFESpeechElement *var6;

  v3 = this;
  var3 = a2->var3;
  var7 = a2->var7;
  if (var7)
  {
    if (var3)
    {
      v6 = var3;
      do
      {
        v7 = v6;
        v6 = v6->var3;
      }
      while (v6);
      do
      {
        v8 = var7;
        var7 = var7->var4;
      }
      while (var7);
      MTFESpeechElement::SetPrevCousin(v7, v8);
      var7 = a2->var7;
    }
    MTFESpeechElement::TransferChildren(a2, var7);
    this = (*((uint64_t (**)(MTFESpeechElement *))a2->var0 + 2))(a2);
  }
  if (var3)
  {
    do
    {
      var6 = var3->var6;
      this = (*(uint64_t (**)(MTFESpeechElement *, uint64_t))var3->var0)(var3, v3);
      var3 = var6;
    }
    while (var6);
  }
  return this;
}

float MTFEAdjustPhrasing::VisitIntermediatePhrase(MTFEAdjustPhrasing *this, MTFESpeechElement *a2)
{
  float result;
  uint64_t v4;
  unint64_t v5;
  float v6;

  MTFEAdjustPhrasing::PeekInto(this, a2);
  if (*((__int16 *)this + 4) >= 200)
  {
    v4 = *((_QWORD *)this + 4);
    if (v4)
    {
      v5 = *(unsigned int *)(v4 + 72);
      if ((v5 & 0x8000) != 0)
        v6 = *(float *)(v4 + 64) * 5.0;
      else
        v6 = (float)(__int16)MTFEPhonemeFlags::sBoundaryDur[(v5 >> 20) & 0x1F];
      *(_DWORD *)(v4 + 72) = v5 | 0x8000;
      result = (float)(v6 * 0.5) / 5.0;
      *(float *)(v4 + 64) = result;
    }
  }
  return result;
}

float MTFEAdjustPhrasing::SetPause(MTFEAdjustPhrasing *this, float result)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    *(_DWORD *)(v2 + 72) |= 0x8000u;
    result = result / 5.0;
    *(float *)(v2 + 64) = result;
  }
  return result;
}

float MTFEAdjustPhrasing::GetPause(MTFEAdjustPhrasing *this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0.0;
  v2 = *(unsigned int *)(v1 + 72);
  if ((v2 & 0x8000) != 0)
    return *(float *)(v1 + 64) * 5.0;
  else
    return (float)(__int16)MTFEPhonemeFlags::sBoundaryDur[(v2 >> 20) & 0x1F];
}

uint64_t MTFEAdjustPhrasing::DemoteIntermediatePhrase(MTFEAdjustPhrasing *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *var7;
  uint64_t result;

  var7 = a2->var7;
  if (var7)
  {
    MTFESpeechElement::TransferChildren(a2, var7);
    return (*((uint64_t (**)(MTFESpeechElement *))a2->var0 + 2))(a2);
  }
  return result;
}

void MTFEAdjustPhrasing::~MTFEAdjustPhrasing(MTFEAdjustPhrasing *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

MTFESpeechElement *MTFESkipContext::VisitSentence(MTFESkipContext *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *result;

  result = (MTFESpeechElement *)(*(uint64_t (**)(MTFESkipContext *))(*(_QWORD *)this + 96))(this);
  if ((_DWORD)result)
  {
    *((_BYTE *)this + 8) = 0;
    return MTFESpeechElement::VisitChildren(a2, this);
  }
  return result;
}

uint64_t MTFESkipWordContext::ShouldProcess(MTFESkipWordContext *this, MTFESentence *a2)
{
  return ((unsigned __int16)a2->var8 >> 3) & 1;
}

uint64_t MTFESkipTextContext::ShouldProcess(MTFESkipTextContext *this, MTFESentence *a2)
{
  return ((unsigned __int16)a2->var8 >> 4) & 1;
}

BOOL MTFESkipToWord::ShouldProcess(MTFESkipToWord *this, MTFESentence *a2)
{
  return *((_QWORD *)this + 4) != 0;
}

uint64_t MTFESkipContext::VisitIntonationalPhrase(MTFESkipContext *this, MTFESpeechElement *a2)
{
  uint64_t result;

  *((_BYTE *)this + 9) = 0;
  MTFESpeechElement::VisitChildren(a2, this);
  result = MTFECommands::Visit((uint64_t)&a2[1].var1, (uint64_t)this);
  if (a2)
  {
    if (!*((_BYTE *)this + 9))
      return (*((uint64_t (**)(MTFESpeechElement *))a2->var0 + 2))(a2);
  }
  return result;
}

uint64_t MTFESkipTextContext::VisitIntonationalPhrase(MTFESkipContext *this, MTFESpeechElement *a2)
{
  char *v2;

  if (HIDWORD(a2[2].var5))
    v2 = (char *)a2[2].var3 + 4 * SLODWORD(a2[2].var5);
  else
    v2 = 0;
  *((_QWORD *)this + 2) = v2;
  *((_QWORD *)this + 3) = v2;
  return MTFESkipContext::VisitIntonationalPhrase(this, a2);
}

MTFESpeechElement *MTFESkipContext::VisitIntermediatePhrase(MTFESkipContext *this, MTFESpeechElement *a2)
{
  char v4;
  MTFESpeechElement *result;

  v4 = *((_BYTE *)this + 9);
  *((_BYTE *)this + 9) = 0;
  result = MTFESpeechElement::VisitChildren(a2, this);
  if (!a2->var1 || !*((_BYTE *)this + 9) && a2->var7 && a2->var6)
    result = (MTFESpeechElement *)(*((uint64_t (**)(MTFESpeechElement *))a2->var0 + 2))(a2);
  *((_BYTE *)this + 9) |= v4;
  return result;
}

MTFESpeechElement *MTFESkipContext::VisitWord(MTFESkipContext *this, MTFESpeechElement *a2)
{
  int v4;
  MTFESpeechElement *v5;
  MTFESpeechElement *var5;
  uint64_t v8;
  uint64_t v9;
  MTFEPhoneme *v10;

  v4 = *((unsigned __int8 *)this + 8);
  v5 = a2 + 2;
  MTFECommands::Visit((uint64_t)&a2[2], (uint64_t)this);
  if (!*((_BYTE *)this + 8))
    return (MTFESpeechElement *)(*(uint64_t (**)(MTFESkipContext *, MTFESpeechElement *))(*(_QWORD *)this
                                                                                                  + 112))(this, a2);
  if (((uint64_t)a2[1].var0 & 0x40) != 0)
    return MTFESpeechElement::VisitChildren(a2, this);
  if (!v4)
  {
    var5 = a2->var5;
    if (var5)
    {
      if (a2[2].var1 >= 1)
      {
        v8 = operator new();
        MTFEWord::MTFEWord((MTFEWord *)v8, 0, 0);
        MTFESpeechElement::TransferChildren(v5, (MTFESpeechElement *)(v8 + 112));
        strcpy((char *)(v8 + 200), "  ");
        v9 = operator new();
        MTFESpeechElement::MTFESpeechElement((MTFESpeechElement *)v9);
        *(_QWORD *)v9 = &unk_1E9366448;
        *(_DWORD *)(v9 + 56) = 0x7FFFFFFF;
        *(_WORD *)(v9 + 60) = 0;
        v10 = (MTFEPhoneme *)operator new();
        MTFEPhoneme::MTFEPhoneme(v10, 0);
        v10->var15 |= 0x8000u;
        MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v9, (MTFESpeechElement *)v10, *(MTFESpeechElement **)(v9 + 24));
        MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v8, (MTFESpeechElement *)v9, *(MTFESpeechElement **)(v8 + 24));
        *(_DWORD *)(v8 + 56) |= 0x40u;
        *(_QWORD *)(v8 + 192) = a2[3].var4;
        MTFESpeechElement::AddChildBefore(var5, (MTFESpeechElement *)v8, a2);
        MTFESpeechElement::VisitChildren(a2, this);
      }
    }
  }
  return (MTFESpeechElement *)(*((uint64_t (**)(MTFESpeechElement *))a2->var0 + 2))(a2);
}

void sub_1D229E5F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

MTFESpeechElement *MTFESkipContext::DeleteWord(MTFESkipContext *this, MTFESpeechElement *a2)
{
  if (((uint64_t)a2[1].var0 & 0x40) != 0)
    return MTFESpeechElement::VisitChildren(a2, this);
  else
    return (MTFESpeechElement *)(*((uint64_t (**)(MTFESpeechElement *))a2->var0 + 2))(a2);
}

uint64_t MTFESkipContext::KeepWord(uint64_t this, MTFEWord *a2)
{
  if ((a2->var8 & 0x40) == 0)
    *(_BYTE *)(this + 9) = 1;
  return this;
}

uint64_t MTFESkipWordContext::VisitCommand(uint64_t this, MTFECommand *a2)
{
  if (a2->var8 == 1668577396)
    *(_BYTE *)(this + 8) = a2->var9 == 1465076560;
  return this;
}

uint64_t MTFESkipTextContext::VisitCommand(uint64_t this, MTFECommand *a2)
{
  if (a2->var8 == 1668577396)
    *(_BYTE *)(this + 8) = a2->var9 == 1414744912;
  return this;
}

uint64_t MTFESkipWordContext::KeepWord(uint64_t this, MTFEWord *a2)
{
  if ((a2->var8 & 0x40) == 0)
    *(_BYTE *)(this + 9) = 1;
  a2->var10 = 1;
  return this;
}

char *MTFESkipTextContext::KeepWord(MTFESkipTextContext *this, MTFEWord *a2)
{
  char *result;
  char *v5;

  if ((a2->var8 & 0x40) == 0)
    *((_BYTE *)this + 9) = 1;
  result = (char *)*((_QWORD *)this + 2);
  if (result)
  {
    v5 = (char *)*((_QWORD *)this + 3);
    if (v5 > result)
    {
      memmove(result, v5, 4 * a2->var21);
      result = (char *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 2) = &result[4 * a2->var21];
  }
  return result;
}

uint64_t MTFESkipTextContext::VisitWord(MTFESkipTextContext *this, MTFEWord *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (*((_QWORD *)this + 2))
    v4 = *((_QWORD *)this + 3) + 4 * a2->var21;
  else
    v4 = 0;
  MTFECommands::Visit((uint64_t)&a2->var18, (uint64_t)this);
  v5 = 104;
  if (!*((_BYTE *)this + 8))
    v5 = 112;
  result = (*(uint64_t (**)(MTFESkipTextContext *, MTFEWord *))(*(_QWORD *)this + v5))(this, a2);
  *((_QWORD *)this + 3) = v4;
  return result;
}

uint64_t MTFESkipToWord::VisitWord(MTFESkipToWord *this, MTFEWord *a2)
{
  MTFEWord *v2;

  v2 = (MTFEWord *)*((_QWORD *)this + 4);
  if (v2 == a2)
  {
    v2 = 0;
    *((_QWORD *)this + 4) = 0;
  }
  *((_BYTE *)this + 8) = v2 != 0;
  return MTFESkipTextContext::VisitWord(this, a2);
}

float MTFESkipTextContext::VisitPhoneme(MTFESkipTextContext *this, MTFEPhoneme *a2)
{
  _DWORD *v2;
  float *v3;
  float result;

  a2->var13 = 1.0;
  v2 = (_DWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (float *)*((_QWORD *)this + 3);
    result = *v3;
    *v2 = *(_DWORD *)v3;
    *((_QWORD *)this + 2) = v2 + 1;
  }
  return result;
}

void MTFESkipTextContext::~MTFESkipTextContext(MTFESkipTextContext *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void MTFESkipToWord::~MTFESkipToWord(MTFESkipToWord *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void MTFESkipWordContext::~MTFESkipWordContext(MTFESkipWordContext *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void PROWReader::PROWReader(PROWReader *this, const void *a2, int a3)
{
  uint64_t v5;
  const void **v6;
  const void **v7;
  uint64_t v8;
  char *v9;
  char *v10;

  *(_QWORD *)this = a2;
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)((char *)this + 80), 2);
  v5 = *(_QWORD *)this;
  *((_QWORD *)this + 1) = *(_QWORD *)this + bswap32(*(_DWORD *)(*(_QWORD *)this + 16));
  *((_QWORD *)this + 2) = v5 + bswap32(*(_DWORD *)(v5 + 20));
  *((_QWORD *)this + 3) = v5 + bswap32(*(_DWORD *)(v5 + 40));
  *((_QWORD *)this + 4) = v5 + bswap32(*(_DWORD *)(v5 + 44));
  *((_QWORD *)this + 7) = v5 + bswap32(*(_DWORD *)(v5 + 60));
  *((_DWORD *)this + 10) = bswap32(*(_DWORD *)(v5 + 24));
  *((_DWORD *)this + 11) = bswap32(*(_DWORD *)(v5 + 28));
  *((_DWORD *)this + 12) = bswap32(*(_DWORD *)(v5 + 32) | 0x80);
  *((_DWORD *)this + 13) = bswap32(*(_DWORD *)(v5 + 36) | 0x80);
  v10 = (char *)(v5 + bswap32(*(_DWORD *)(v5 + 56)));
  *((_QWORD *)this + 9) = MEOWDecoder::CreateCodebookDecoder((MEOWDecoder *)0x100, *(unsigned __int8 *)(v5 + 14), (int)bswap32(*(unsigned __int16 *)(v5 + 2)) >> 16 < 165, a3, &v10, v6);
  v8 = 64;
  if (*(_DWORD *)(v5 + 64) == -1)
    v8 = 56;
  v9 = (char *)(*(_QWORD *)this + bswap32(*(_DWORD *)(v5 + v8)));
  *((_QWORD *)this + 8) = MEOWDecoder::CreateCodebookDecoder((MEOWDecoder *)0x100, *(unsigned __int8 *)(v5 + 14), (int)bswap32(*(unsigned __int16 *)(v5 + 2)) >> 16 < 165, a3, &v9, v7);
}

void sub_1D229E9FC(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void PROWReader::~PROWReader(PROWReader *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *((_QWORD *)this + 9);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 10);
}

void PROWReader::GetDemi(unsigned __int16 **a1, char a2, char a3, unsigned int a4, uint64_t a5)
{
  unsigned int v7;
  unsigned int v8;
  _QWORD *v10;
  unsigned __int16 *v11;
  _BYTE *v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v24;
  unsigned int v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;

  LOBYTE(v7) = a3;
  LOBYTE(v8) = a2;
  v10 = a1 + 10;
  MEOWVectorBase::clear((void **)a1 + 10);
  *(_BYTE *)a5 = 0;
  v11 = a1[a4 + 1];
  v12 = *a1;
  v13 = (__int16)(bswap32(**a1) >> 16);
  while (1)
  {
    v14 = (unsigned int *)&v11[4 * v13 * (unint64_t)v8 + 4 * v7];
    v16 = *v14;
    v15 = v14[1];
    v17 = bswap32(v16);
    if (v17 != 0xFFFF)
      break;
    *(_BYTE *)a5 = 1;
    v8 = v15 >> 8;
    v7 = HIBYTE(v15);
  }
  if (v17 == -1)
  {
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  else
  {
    if (a4)
      v18 = v7;
    else
      v18 = v8;
    if (PROWPhonEng::sVoiced[v18])
    {
      v19 = *((unsigned __int16 *)v12 + 3);
      *(_DWORD *)(a5 + 24) = (v17 << v12[15]) + *((_DWORD *)a1 + a4 + 10);
      v20 = a1[a4 + 3];
      v21 = bswap32(v15);
      v22 = v20[v21];
      if (v22 == 0xFFFF)
      {
        v27 = a1[12];
        v26 = a1[10];
      }
      else
      {
        v23 = bswap32(v19) >> 16;
        v24 = &v20[v21 + 1];
        do
        {
          v25 = v23 + (bswap32(v22) >> 16);
          MEOWVectorBase::Append(v10);
          v26 = a1[10];
          v27 = a1[12];
          v26[(_QWORD)v27 - 1] = v25;
          v28 = *v24++;
          v22 = v28;
        }
        while (v28 != 0xFFFF);
      }
    }
    else
    {
      *(_DWORD *)(a5 + 24) = (v17 << v12[15]) + *((_DWORD *)a1 + a4 + 12);
      v29 = bswap32(v15);
      v30 = (v29 + (bswap32(*((unsigned __int16 *)v12 + 2)) >> 16) * HIWORD(v29)) ^ 0x8000;
      MEOWVectorBase::Append(v10);
      v26 = a1[10];
      v27 = a1[12];
      v26[(_QWORD)v27 - 1] = v30;
    }
    *(_QWORD *)(a5 + 8) = v27;
    *(_QWORD *)(a5 + 16) = v26;
  }
}

uint64_t PROWReader::ReadSamples(PROWReader *this, unsigned int a2, uint64_t a3, __int16 *a4)
{
  (***((void (****)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, __int16 *))this + (a2 >> 31) + 8))(*((_QWORD *)this + (a2 >> 31) + 8), 0, *(_QWORD *)this + (a2 & 0x7FFFFFFF), 0, a3, a3, a4);
  return a3;
}

uint64_t PROWReader::NoSkipDup(PROWReader *this, unsigned int a2, unsigned int a3)
{
  unsigned __int8 *v4;

  if (a2 <= 0x2A)
  {
    v4 = (unsigned __int8 *)(*((_QWORD *)this + 7) + 8 * a2 + 4 * a3);
    return (unsigned __int16)((v4[1] << 8) | (*v4 << 12) | (16 * v4[2]) | v4[3]);
  }
  else
  {
    return (unsigned __int16)-1;
  }
}

uint64_t MT3BPhraseProcessor::MT3BPhraseProcessor(uint64_t a1, uint64_t a2, __int128 *a3)
{
  MTMBProducerComponent *v5;
  MTMBChangeAmplitude *v6;
  MTMBProducerComponent *v7;
  MTMBSpeechRateModifier *v8;

  *(_QWORD *)MTBEPhraseProcessor::MTBEPhraseProcessor(a1, a2, a3, 0) = off_1E9368D78;
  if ((MTBEDebugFlags::sMEOWDebug & 8) != 0)
  {
    v5 = (MTMBProducerComponent *)operator new();
    MT3BFloatSegmentProducer::MT3BFloatSegmentProducer(v5, a1 + 2728, a1 + 88, a2);
  }
  else
  {
    v5 = (MTMBProducerComponent *)operator new();
    MT3BSegmentProducer::MT3BSegmentProducer(v5, a1 + 2728, a1 + 88, a2);
  }
  v6 = (MTMBChangeAmplitude *)operator new();
  MTMBChangeAmplitude::MTMBChangeAmplitude(v6, v5, *(MTMBSignalProcessor **)(a1 + 4232), 0);
  v7 = (MTMBChangeAmplitude *)((char *)v6 + 16);
  if (MTBEParam::GetUsePostDurMod((MTBEParam *)(a1 + 88)))
  {
    v8 = (MTMBSpeechRateModifier *)operator new();
    MTMBSpeechRateModifier::MTMBSpeechRateModifier(v8, v7);
    v7 = (MTMBSpeechRateModifier *)((char *)v8 + 16);
  }
  *(_QWORD *)(a1 + 72) = v7;
  MTBEPhraseProcessor::ProcessPhrase((MTBEPhraseProcessor *)a1);
  return a1;
}

void sub_1D229EDD8(_Unwind_Exception *a1)
{
  MTBEPhraseProcessor *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1D8233BA8](v3, 0x10A1C4036524A53);
  MTBEPhraseProcessor::~MTBEPhraseProcessor(v1);
  _Unwind_Resume(a1);
}

void MT3BPhraseProcessor::InsertPlosiveReleases(MT3BPhraseProcessor *this, MTFESpeechElement *a2)
{
  _QWORD v2[3];
  int v3;

  v3 = 0;
  v2[0] = &unk_1E9367090;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v2, a2);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v2);
}

void sub_1D229EEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&a9);
  _Unwind_Resume(a1);
}

void MT3BPhraseProcessor::~MT3BPhraseProcessor(MT3BPhraseProcessor *this)
{
  MTBEPhraseProcessor::~MTBEPhraseProcessor(this);
  JUMPOUT(0x1D8233BA8);
}

_QWORD *MTMBCrossfader::Create(MTMBCrossfader *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E9368DE8;
  return result;
}

uint64_t MTMBCrossfader::CrossfadePartial(MTMBCrossfader *this, uint64_t a2, uint64_t a3, uint64_t a4, const float *a5, const float *a6, const float *a7)
{
  int v7;
  uint64_t v8;
  const float *v9;

  v7 = a4 - a3;
  if ((int)a4 - (int)a3 < 0)
    v7 = a3 - a4;
  v8 = (v7 + 1);
  v9 = &a5[v8];
  if ((a7 <= a5 || v9 <= a7) && (a7 <= a6 || &a6[v8] <= a7))
    return (*(uint64_t (**)(MTMBCrossfader *, uint64_t, uint64_t))(*(_QWORD *)this + 16))(this, a2, a3);
  else
    return (*(uint64_t (**)(MTMBCrossfader *, uint64_t, uint64_t, uint64_t, uint64_t, const float *, const float *, const float *))(*(_QWORD *)this + 16))(this, a2, a4, a3, 0xFFFFFFFFLL, v9 - 1, &a6[v8 - 1], &a7[v8 - 1]);
}

float MTMBLinearCrossfader::Fade(MTMBLinearCrossfader *this, int a2, int a3, int a4, int a5, const float *a6, const float *a7, float *a8)
{
  uint64_t v8;
  float v9;
  float result;
  int v11;
  int v12;

  v8 = 0;
  v9 = 1.0 / (double)(a2 + 1);
  result = (float)a3 * v9;
  if (a4 - a3 >= 0)
    v11 = a4 - a3;
  else
    v11 = a3 - a4;
  if (a4 < a3)
    v9 = -v9;
  v12 = v11 + 1;
  do
  {
    a8[v8] = (float)(result * a7[v8]) + (float)(a6[v8] * (float)(1.0 - result));
    result = v9 + result;
    v8 += a5;
    --v12;
  }
  while (v12);
  return result;
}

float MTMBRaisedSineCrossfader::Fade(MTMBRaisedSineCrossfader *this, int a2, int a3, int a4, int a5, const float *a6, const float *a7, float *a8)
{
  uint64_t v8;
  float v9;
  float result;
  int v11;
  int v12;
  float v13;

  v8 = 0;
  v9 = 129.0 / (float)(a2 + 1);
  result = v9 * (float)a3;
  if (a4 < a3)
    v9 = -v9;
  if (a4 - a3 >= 0)
    v11 = a4 - a3;
  else
    v11 = a3 - a4;
  v12 = v11 + 1;
  do
  {
    v13 = MTMBRaisedSineCrossfader::sCoeffs[result];
    a8[v8] = (float)(v13 * a7[v8]) + (float)(a6[v8] * (float)(1.0 - v13));
    result = v9 + result;
    v8 += a5;
    --v12;
  }
  while (v12);
  return result;
}

MTMBCrossfader *MTMBCrossfade(uint64_t a1, const float *a2, const float *a3, const float *a4)
{
  MTMBCrossfader *result;

  result = (MTMBCrossfader *)MTMBCrossfade::sXF;
  if (MTMBCrossfade::sXF)
  {
    if (!(_DWORD)a1)
      return result;
    return (MTMBCrossfader *)MTMBCrossfader::CrossfadePartial(result, a1, 1, a1, a2, a3, a4);
  }
  result = (MTMBCrossfader *)operator new();
  *(_QWORD *)result = &off_1E9368DE8;
  MTMBCrossfade::sXF = (uint64_t)result;
  if ((_DWORD)a1)
    return (MTMBCrossfader *)MTMBCrossfader::CrossfadePartial(result, a1, 1, a1, a2, a3, a4);
  return result;
}

void MTMBRaisedSineCrossfader::~MTMBRaisedSineCrossfader(MTMBRaisedSineCrossfader *this)
{
  JUMPOUT(0x1D8233BA8);
}

void MTMBLinearCrossfader::~MTMBLinearCrossfader(MTMBLinearCrossfader *this)
{
  JUMPOUT(0x1D8233BA8);
}

void MEOWTriphoneSum(unint64_t *a1, unint64_t *a2, float *__Y, uint64_t a4)
{
  uint64_t v6;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t i;

  v6 = a1[2];
  if (v6 < 1)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v10 = *a1;
    v11 = *a2;
    v12 = *a1;
    do
    {
      for (i = *a2 + 60 * a2[2]; v11 < i; v11 += 60)
      {
        if (*(_DWORD *)(v12 + 56) <= *(_DWORD *)(v11 + 56))
          break;
      }
      if (v11 == i)
        break;
      if (*(_DWORD *)(v12 + 56) == *(_DWORD *)(v11 + 56))
      {
        ++v9;
        cblas_saxpy(11, 1.0, (const float *)v12, 1, __Y, 1);
        cblas_saxpy(11, 1.0, (const float *)v11, 1, (float *)a4, 1);
        v10 = *a1;
        v6 = a1[2];
      }
      v12 += 60;
    }
    while (v12 < v10 + 60 * v6);
  }
  *((_DWORD *)__Y + 14) += v9;
  *(_DWORD *)(a4 + 56) += v9;
}

void MEOWSpectralCost::MEOWSpectralCost(MEOWSpectralCost *this, MEOWReader *a2)
{
  *(_QWORD *)this = a2;
  MEOWVectorBase::MEOWVectorBase((MEOWSpectralCost *)((char *)this + 8), 60, 0x1FA4uLL);
  bzero(*((void **)this + 1), 0x76A70uLL);
}

{
  *(_QWORD *)this = a2;
  MEOWVectorBase::MEOWVectorBase((MEOWSpectralCost *)((char *)this + 8), 60, 0x1FA4uLL);
  bzero(*((void **)this + 1), 0x76A70uLL);
}

void MEOWSpectralCost::~MEOWSpectralCost(void **this)
{
  MEOWVectorBase::~MEOWVectorBase(this + 1);
}

{
  MEOWVectorBase::~MEOWVectorBase(this + 1);
}

uint64_t MEOWSpectralCost::GetSpectralCookie(uint64_t *a1, int a2, unsigned int a3, int a4, unsigned int a5, _OWORD *a6)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t i;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  unsigned int v23;
  _OWORD *v24;
  unsigned int *v25;
  int v26;
  void *v27[2];
  unint64_t v28;
  void *v29[2];
  unint64_t v30;
  char v31;

  v6 = a1[1] + 120 * (int)(9 * (a3 + 50 * sMEOWSpectralClass[a2]) + sMEOWSpectralClass[a4]);
  v7 = *(_DWORD *)(v6 + 56);
  if (!v7)
  {
    v24 = a6;
    v25 = (unsigned int *)(v6 + 56);
    v23 = a5;
    v10 = 0;
    v11 = sMEOWSpectralClass[a2];
    v12 = sMEOWSpectralClass[a4];
    v26 = v11;
    do
    {
      if (sMEOWSpectralClass[v10] == v11)
      {
        MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v29, 60);
        MEOWReader::GetDistanceCookies(*a1, v10, a3, 1, (MEOWVectorBase *)v29, 0);
        v13 = 126 - 2 * __clz(v30);
        if (v30)
          v14 = v13;
        else
          v14 = 0;
        std::__introsort<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *,false>((uint64_t)v29[0], (__n128 *)((char *)v29[0] + 60 * v30), (uint64_t)v27, v14, 1);
        for (i = 0; i != 50; ++i)
        {
          if (sMEOWSpectralClass[i] == v12)
          {
            MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v27, 60);
            MEOWReader::GetDistanceCookies(*a1, a3, i, 0, (MEOWVectorBase *)v27, 0);
            v16 = 126 - 2 * __clz(v28);
            if (v28)
              v17 = v16;
            else
              v17 = 0;
            std::__introsort<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *,false>((uint64_t)v27[0], (__n128 *)((char *)v27[0] + 60 * v28), (uint64_t)&v31, v17, 1);
            MEOWTriphoneSum((unint64_t *)v29, (unint64_t *)v27, (float *)v6, v6 + 60);
            MEOWVectorBase::~MEOWVectorBase(v27);
          }
        }
        MEOWVectorBase::~MEOWVectorBase(v29);
        v11 = v26;
      }
      ++v10;
    }
    while (v10 != 50);
    if (!*v25)
    {
      result = 0;
      *v25 = -1;
      return result;
    }
    cblas_sscal(11, 1.0 / (float)*v25, (float *)v6, 1);
    cblas_sscal(11, 1.0 / (float)*v25, (float *)(v6 + 60), 1);
    v7 = *v25 | 0x80000000;
    *v25 = v7;
    *(_DWORD *)(v6 + 116) |= 0x80000000;
    a6 = v24;
    a5 = v23;
  }
  if (v7 == -1)
    return 0;
  v18 = (__int128 *)(v6 + 60 * a5);
  v19 = *v18;
  v20 = v18[1];
  v21 = v18[2];
  *(_OWORD *)((char *)a6 + 44) = *(__int128 *)((char *)v18 + 44);
  a6[1] = v20;
  a6[2] = v21;
  *a6 = v19;
  return 1;
}

void sub_1D229F59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *,false>(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  __int128 v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __n128 v38;
  __int128 v39;
  _BYTE v40[28];
  _BYTE v41[28];
  __int128 v42;
  uint64_t v43;

LABEL_1:
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)((uint64_t)a2 - v9) >> 2);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (a2[-1].n128_u32[3] < *(_DWORD *)(v9 + 56))
        {
          *(_OWORD *)&v41[12] = *(_OWORD *)(v9 + 44);
          v38 = *(__n128 *)(v9 + 16);
          *(_OWORD *)v41 = *(_OWORD *)(v9 + 32);
          v35 = *(_OWORD *)v9;
          v26 = *(__int128 *)((char *)&a2[-4] + 4);
          v27 = *(__int128 *)((char *)&a2[-3] + 4);
          v28 = *(__int128 *)((char *)&a2[-2] + 4);
          *(__n128 *)(v9 + 44) = a2[-1];
          *(_OWORD *)(v9 + 16) = v27;
          *(_OWORD *)(v9 + 32) = v28;
          *(_OWORD *)v9 = v26;
          *(__n128 *)((char *)&a2[-4] + 4) = (__n128)v35;
          *(__n128 *)((char *)a2 - 44) = v38;
          *(__n128 *)((char *)a2 - 28) = *(__n128 *)v41;
          a2[-1] = *(__n128 *)&v41[12];
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>((__int128 *)v9, (__int128 *)(v9 + 60), (__int128 *)&a2[-4].n128_u8[4]);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(v9, v9 + 60, v9 + 120, (__int128 *)&a2[-4].n128_u8[4]);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(v9, v9 + 60, v9 + 120, v9 + 180, (__int128 *)&a2[-4].n128_u8[4]);
        return;
      default:
        if (v12 > 1439)
        {
          if (v11 == 1)
          {
            if ((__n128 *)v9 != a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *,MEOWDistanceCookie *>(v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = (__int128 *)(v9 + 60 * (v13 >> 1));
          if ((unint64_t)v12 < 0x1E01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(v15, (__int128 *)v9, (__int128 *)&a2[-4].n128_u8[4]);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>((__int128 *)v9, v15, (__int128 *)&a2[-4].n128_u8[4]);
            v16 = 60 * v14;
            v17 = (__int128 *)(60 * v14 + v9 - 60);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>((__int128 *)(v9 + 60), v17, (__int128 *)&a2[-8].n128_i8[8]);
            v18 = (__int128 *)(v9 + 120);
            v19 = (__int128 *)(v9 + 60 + v16);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(v18, v19, (__int128 *)((char *)&a2[-12].n128_f64[1] + 4));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(v17, v15, v19);
            *(_OWORD *)&v40[12] = *(_OWORD *)(a1 + 44);
            v37 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)v40 = *(_OWORD *)(a1 + 32);
            v34 = *(_OWORD *)a1;
            v20 = *v15;
            v21 = v15[1];
            v22 = v15[2];
            *(_OWORD *)(a1 + 44) = *(__int128 *)((char *)v15 + 44);
            *(_OWORD *)(a1 + 16) = v21;
            *(_OWORD *)(a1 + 32) = v22;
            *(_OWORD *)a1 = v20;
            *(__int128 *)((char *)v15 + 44) = *(_OWORD *)&v40[12];
            v15[1] = v37;
            v15[2] = *(_OWORD *)v40;
            *v15 = v34;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(_DWORD *)(a1 - 4) >= *(_DWORD *)(a1 + 56))
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MEOWDistanceCookie *,MEOWSortCookieByCutPoint &>(a1, a2);
            goto LABEL_16;
          }
LABEL_11:
          v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,MEOWDistanceCookie *,MEOWSortCookieByCutPoint &>(a1, a2);
          if ((v24 & 1) == 0)
            goto LABEL_14;
          v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(a1, v23);
          v9 = v23 + 60;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(v23 + 60, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v25)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *,false>(a1, v23, a3, -v11, a5 & 1);
            v9 = v23 + 60;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (__n128 *)v23;
          if (v25)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(v9, (uint64_t)a2);
        }
        else if ((__n128 *)v9 != a2)
        {
          while ((__n128 *)(a1 + 60) != a2)
          {
            v30 = *(_DWORD *)(a1 + 116);
            v31 = *(_DWORD *)(a1 + 56);
            v29 = a1 + 60;
            a1 += 60;
            if (v30 < v31)
            {
              v43 = *(_QWORD *)(v29 + 48);
              v39 = *(_OWORD *)(v29 + 16);
              v42 = *(_OWORD *)(v29 + 32);
              v36 = *(_OWORD *)v29;
              do
              {
                v32 = *(_OWORD *)(v29 - 44);
                *(_OWORD *)v29 = *(_OWORD *)(v29 - 60);
                *(_OWORD *)(v29 + 16) = v32;
                *(_OWORD *)(v29 + 32) = *(_OWORD *)(v29 - 28);
                *(_OWORD *)(v29 + 44) = *(_OWORD *)(v29 - 16);
                v33 = *(_DWORD *)(v29 - 64);
                v29 -= 60;
              }
              while (v30 < v33);
              *(_QWORD *)(v29 + 48) = v43;
              *(_OWORD *)(v29 + 16) = v39;
              *(_OWORD *)(v29 + 32) = v42;
              *(_OWORD *)v29 = v36;
              *(_DWORD *)(v29 + 56) = v30;
            }
          }
        }
        return;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if (result != a2)
  {
    v2 = result + 60;
    if (result + 60 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = *(_DWORD *)(v4 + 116);
        v6 = *(_DWORD *)(v4 + 56);
        v4 = v2;
        if (v5 < v6)
        {
          v11 = *(_OWORD *)v2;
          v12 = *(_OWORD *)(v2 + 16);
          v13 = *(_OWORD *)(v2 + 32);
          v14 = *(_QWORD *)(v2 + 48);
          v7 = v3;
          while (1)
          {
            v8 = result + v7;
            v9 = *(_OWORD *)(result + v7 + 16);
            *(_OWORD *)(v8 + 60) = *(_OWORD *)(result + v7);
            *(_OWORD *)(v8 + 76) = v9;
            *(_OWORD *)(v8 + 92) = *(_OWORD *)(result + v7 + 32);
            *(_OWORD *)(v8 + 104) = *(_OWORD *)(result + v7 + 44);
            if (!v7)
              break;
            v7 -= 60;
            if (v5 >= *(_DWORD *)(v8 - 4))
            {
              v10 = result + v7 + 60;
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *(_OWORD *)v10 = v11;
          *(_OWORD *)(v10 + 16) = v12;
          *(_OWORD *)(v10 + 32) = v13;
          *(_QWORD *)(v10 + 48) = v14;
          *(_DWORD *)(v10 + 56) = v5;
        }
        v2 = v4 + 60;
        v3 += 60;
      }
      while (v4 + 60 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(__int128 *a1, __int128 *a2, __int128 *a3)
{
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v31[28];
  _BYTE v32[28];
  _BYTE v33[28];
  _BYTE v34[28];
  _BYTE v35[28];

  v3 = *((_DWORD *)a2 + 14);
  v4 = *((_DWORD *)a3 + 14);
  if (v3 < *((_DWORD *)a1 + 14))
  {
    if (v4 < v3)
    {
      *(_OWORD *)v31 = a1[2];
      *(_OWORD *)&v31[12] = *(__int128 *)((char *)a1 + 44);
      v6 = *a1;
      v5 = a1[1];
      v8 = a3[1];
      v7 = a3[2];
      v9 = *a3;
      *(__int128 *)((char *)a1 + 44) = *(__int128 *)((char *)a3 + 44);
      a1[1] = v8;
      a1[2] = v7;
      *a1 = v9;
      *a3 = v6;
      a3[1] = v5;
      a3[2] = *(_OWORD *)v31;
      *(__int128 *)((char *)a3 + 44) = *(_OWORD *)&v31[12];
      return 1;
    }
    *(_OWORD *)v34 = a1[2];
    *(_OWORD *)&v34[12] = *(__int128 *)((char *)a1 + 44);
    v21 = *a1;
    v20 = a1[1];
    v23 = a2[1];
    v22 = a2[2];
    v24 = *a2;
    *(__int128 *)((char *)a1 + 44) = *(__int128 *)((char *)a2 + 44);
    a1[1] = v23;
    a1[2] = v22;
    *a1 = v24;
    *a2 = v21;
    a2[1] = v20;
    a2[2] = *(_OWORD *)v34;
    *(__int128 *)((char *)a2 + 44) = *(_OWORD *)&v34[12];
    if (*((_DWORD *)a3 + 14) >= *((_DWORD *)a2 + 14))
      return 1;
    *(_OWORD *)v35 = a2[2];
    *(_OWORD *)&v35[12] = *(__int128 *)((char *)a2 + 44);
    v26 = *a2;
    v25 = a2[1];
    v28 = a3[1];
    v27 = a3[2];
    v29 = *a3;
    *(__int128 *)((char *)a2 + 44) = *(__int128 *)((char *)a3 + 44);
    a2[1] = v28;
    a2[2] = v27;
    *a2 = v29;
    *a3 = v26;
    a3[1] = v25;
    a3[2] = *(_OWORD *)v35;
    *(__int128 *)((char *)a3 + 44) = *(_OWORD *)&v35[12];
    return 2;
  }
  if (v4 < v3)
  {
    *(_OWORD *)v32 = a2[2];
    *(_OWORD *)&v32[12] = *(__int128 *)((char *)a2 + 44);
    v11 = *a2;
    v10 = a2[1];
    v13 = a3[1];
    v12 = a3[2];
    v14 = *a3;
    *(__int128 *)((char *)a2 + 44) = *(__int128 *)((char *)a3 + 44);
    a2[1] = v13;
    a2[2] = v12;
    *a2 = v14;
    *a3 = v11;
    a3[1] = v10;
    a3[2] = *(_OWORD *)v32;
    *(__int128 *)((char *)a3 + 44) = *(_OWORD *)&v32[12];
    if (*((_DWORD *)a2 + 14) >= *((_DWORD *)a1 + 14))
      return 1;
    *(_OWORD *)v33 = a1[2];
    *(_OWORD *)&v33[12] = *(__int128 *)((char *)a1 + 44);
    v16 = *a1;
    v15 = a1[1];
    v18 = a2[1];
    v17 = a2[2];
    v19 = *a2;
    *(__int128 *)((char *)a1 + 44) = *(__int128 *)((char *)a2 + 44);
    a1[1] = v18;
    a1[2] = v17;
    *a1 = v19;
    *a2 = v16;
    a2[1] = v15;
    a2[2] = *(_OWORD *)v33;
    *(__int128 *)((char *)a2 + 44) = *(_OWORD *)&v33[12];
    return 2;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MEOWDistanceCookie *,MEOWSortCookieByCutPoint &>(uint64_t a1, _OWORD *a2)
{
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  _OWORD *v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  unsigned int v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[28];

  v22 = *(_OWORD *)(a1 + 32);
  v23 = *(_QWORD *)(a1 + 48);
  v2 = *(_DWORD *)(a1 + 56);
  if (v2 >= *((_DWORD *)a2 - 1))
  {
    v6 = a1 + 60;
    do
    {
      v4 = v6;
      if (v6 >= (unint64_t)a2)
        break;
      v7 = *(_DWORD *)(v6 + 56);
      v6 += 60;
    }
    while (v2 >= v7);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3 + 60;
      v5 = *(_DWORD *)(v3 + 116);
      v3 += 60;
    }
    while (v2 >= v5);
  }
  if (v4 >= (unint64_t)a2)
  {
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = (_OWORD *)((char *)a2 - 60);
      v9 = *((_DWORD *)a2 - 1);
      a2 = (_OWORD *)((char *)a2 - 60);
    }
    while (v2 < v9);
  }
  while (v4 < (unint64_t)v8)
  {
    *(_OWORD *)&v26[12] = *(_OWORD *)(v4 + 44);
    v25 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v26 = *(_OWORD *)(v4 + 32);
    v24 = *(_OWORD *)v4;
    v10 = *v8;
    v11 = v8[1];
    v12 = v8[2];
    *(_OWORD *)(v4 + 44) = *(_OWORD *)((char *)v8 + 44);
    *(_OWORD *)(v4 + 16) = v11;
    *(_OWORD *)(v4 + 32) = v12;
    *(_OWORD *)v4 = v10;
    *(_OWORD *)((char *)v8 + 44) = *(_OWORD *)&v26[12];
    v8[1] = v25;
    v8[2] = *(_OWORD *)v26;
    *v8 = v24;
    do
    {
      v13 = *(_DWORD *)(v4 + 116);
      v4 += 60;
    }
    while (v2 >= v13);
    do
    {
      v14 = *((_DWORD *)v8 - 1);
      v8 = (_OWORD *)((char *)v8 - 60);
    }
    while (v2 < v14);
  }
  v15 = (__int128 *)(v4 - 60);
  if (v4 - 60 != a1)
  {
    v16 = *v15;
    v17 = *(_OWORD *)(v4 - 44);
    v18 = *(_OWORD *)(v4 - 28);
    *(_OWORD *)(a1 + 44) = *(_OWORD *)(v4 - 16);
    *(_OWORD *)(a1 + 16) = v17;
    *(_OWORD *)(a1 + 32) = v18;
    *(_OWORD *)a1 = v16;
  }
  *(_QWORD *)(v4 - 12) = v23;
  *(_OWORD *)(v4 - 44) = v21;
  *(_OWORD *)(v4 - 28) = v22;
  *v15 = v20;
  *(_DWORD *)(v4 - 4) = v2;
  return v4;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,MEOWDistanceCookie *,MEOWSortCookieByCutPoint &>(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  _OWORD *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  unsigned int v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  _BYTE v27[28];

  v2 = 0;
  v24 = *(_OWORD *)(a1 + 32);
  v25 = *(_QWORD *)(a1 + 48);
  v3 = *(_DWORD *)(a1 + 56);
  do
  {
    v4 = *(_DWORD *)(a1 + v2 + 116);
    v2 += 60;
  }
  while (v4 < v3);
  v5 = a1 + v2;
  if (v2 == 60)
  {
    while (v5 < (unint64_t)a2)
    {
      v6 = (_OWORD *)((char *)a2 - 60);
      v8 = *((_DWORD *)a2 - 1);
      a2 = (_OWORD *)((char *)a2 - 60);
      if (v8 < v3)
        goto LABEL_9;
    }
    v6 = a2;
  }
  else
  {
    do
    {
      v6 = (_OWORD *)((char *)a2 - 60);
      v7 = *((_DWORD *)a2 - 1);
      a2 = (_OWORD *)((char *)a2 - 60);
    }
    while (v7 >= v3);
  }
LABEL_9:
  v9 = v5;
  if (v5 < (unint64_t)v6)
  {
    v10 = v6;
    do
    {
      v11 = *(_OWORD *)v9;
      v26 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)&v27[12] = *(_OWORD *)(v9 + 44);
      *(_OWORD *)v27 = *(_OWORD *)(v9 + 32);
      v12 = *(_OWORD *)((char *)v10 + 44);
      v13 = v10[2];
      v14 = *v10;
      *(_OWORD *)(v9 + 16) = v10[1];
      *(_OWORD *)(v9 + 32) = v13;
      *(_OWORD *)(v9 + 44) = v12;
      *(_OWORD *)v9 = v14;
      *(_OWORD *)((char *)v10 + 44) = *(_OWORD *)&v27[12];
      v10[1] = v26;
      v10[2] = *(_OWORD *)v27;
      *v10 = v11;
      do
      {
        v15 = *(_DWORD *)(v9 + 116);
        v9 += 60;
      }
      while (v15 < v3);
      do
      {
        v16 = *((_DWORD *)v10 - 1);
        v10 = (_OWORD *)((char *)v10 - 60);
      }
      while (v16 >= v3);
    }
    while (v9 < (unint64_t)v10);
  }
  v17 = (__int128 *)(v9 - 60);
  if (v9 - 60 != a1)
  {
    v18 = *v17;
    v19 = *(_OWORD *)(v9 - 44);
    v20 = *(_OWORD *)(v9 - 28);
    *(_OWORD *)(a1 + 44) = *(_OWORD *)(v9 - 16);
    *(_OWORD *)(a1 + 16) = v19;
    *(_OWORD *)(a1 + 32) = v20;
    *(_OWORD *)a1 = v18;
  }
  *(_QWORD *)(v9 - 12) = v25;
  *(_OWORD *)(v9 - 44) = v23;
  *(_OWORD *)(v9 - 28) = v24;
  *v17 = v22;
  *(_DWORD *)(v9 - 4) = v3;
  return v9 - 60;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[28];
  __int128 v22;
  uint64_t v23;

  v4 = 0xEEEEEEEEEEEEEEEFLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 56))
      {
        *(_OWORD *)v21 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)&v21[12] = *(_OWORD *)(a1 + 44);
        v7 = *(_OWORD *)a1;
        v6 = *(_OWORD *)(a1 + 16);
        v8 = *(_OWORD *)(a2 - 44);
        v9 = *(_OWORD *)(a2 - 28);
        v10 = *(_OWORD *)(a2 - 60);
        *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 32) = v9;
        *(_OWORD *)a1 = v10;
        *(_OWORD *)(a2 - 60) = v7;
        *(_OWORD *)(a2 - 44) = v6;
        *(_OWORD *)(a2 - 28) = *(_OWORD *)v21;
        *(_OWORD *)(a2 - 16) = *(_OWORD *)&v21[12];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>((__int128 *)a1, (__int128 *)(a1 + 60), (__int128 *)(a2 - 60));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(a1, a1 + 60, a1 + 120, (__int128 *)(a2 - 60));
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(a1, a1 + 60, a1 + 120, a1 + 180, (__int128 *)(a2 - 60));
      return 1;
    default:
      v11 = a1 + 120;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>((__int128 *)a1, (__int128 *)(a1 + 60), (__int128 *)(a1 + 120));
      v12 = a1 + 180;
      if (a1 + 180 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(_DWORD *)(v12 + 56);
    if (v15 < *(_DWORD *)(v11 + 56))
    {
      v19 = *(_OWORD *)v12;
      v20 = *(_OWORD *)(v12 + 16);
      v22 = *(_OWORD *)(v12 + 32);
      v23 = *(_QWORD *)(v12 + 48);
      v16 = v13;
      while (1)
      {
        v17 = a1 + v16;
        *(_OWORD *)(v17 + 180) = *(_OWORD *)(a1 + v16 + 120);
        *(_OWORD *)(v17 + 196) = *(_OWORD *)(a1 + v16 + 136);
        *(_OWORD *)(v17 + 212) = *(_OWORD *)(a1 + v16 + 152);
        *(_OWORD *)(v17 + 224) = *(_OWORD *)(a1 + v16 + 164);
        if (v16 == -120)
          break;
        v16 -= 60;
        if (v15 >= *(_DWORD *)(v17 + 116))
        {
          v18 = a1 + v16 + 180;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_OWORD *)v18 = v19;
      *(_OWORD *)(v18 + 16) = v20;
      *(_OWORD *)(v18 + 32) = v22;
      *(_QWORD *)(v18 + 48) = v23;
      *(_DWORD *)(v18 + 56) = v15;
      if (++v14 == 8)
        return v12 + 60 == a2;
    }
    v11 = v12;
    v13 += 60;
    v12 += 60;
    if (v12 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[28];
  _BYTE v25[28];
  _BYTE v26[28];

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (*((_DWORD *)a4 + 14) < *(_DWORD *)(a3 + 56))
  {
    *(_OWORD *)v24 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)&v24[12] = *(_OWORD *)(a3 + 44);
    v10 = *(_OWORD *)a3;
    v9 = *(_OWORD *)(a3 + 16);
    v12 = a4[1];
    v11 = a4[2];
    v13 = *a4;
    *(_OWORD *)(a3 + 44) = *(__int128 *)((char *)a4 + 44);
    *(_OWORD *)(a3 + 16) = v12;
    *(_OWORD *)(a3 + 32) = v11;
    *(_OWORD *)a3 = v13;
    *a4 = v10;
    a4[1] = v9;
    a4[2] = *(_OWORD *)v24;
    result = *(__n128 *)&v24[12];
    *(__int128 *)((char *)a4 + 44) = *(_OWORD *)&v24[12];
    if (*(_DWORD *)(a3 + 56) < *(_DWORD *)(a2 + 56))
    {
      *(_OWORD *)v25 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v25[12] = *(_OWORD *)(a2 + 44);
      v15 = *(_OWORD *)a2;
      v14 = *(_OWORD *)(a2 + 16);
      v17 = *(_OWORD *)(a3 + 16);
      v16 = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 44) = *(_OWORD *)(a3 + 44);
      *(_OWORD *)(a2 + 16) = v17;
      *(_OWORD *)(a2 + 32) = v16;
      *(_OWORD *)a2 = v18;
      *(_OWORD *)a3 = v15;
      *(_OWORD *)(a3 + 16) = v14;
      *(_OWORD *)(a3 + 32) = *(_OWORD *)v25;
      result = *(__n128 *)&v25[12];
      *(_OWORD *)(a3 + 44) = *(_OWORD *)&v25[12];
      if (*(_DWORD *)(a2 + 56) < *(_DWORD *)(a1 + 56))
      {
        *(_OWORD *)v26 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)&v26[12] = *(_OWORD *)(a1 + 44);
        v20 = *(_OWORD *)a1;
        v19 = *(_OWORD *)(a1 + 16);
        v22 = *(_OWORD *)(a2 + 16);
        v21 = *(_OWORD *)(a2 + 32);
        v23 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
        *(_OWORD *)(a1 + 16) = v22;
        *(_OWORD *)(a1 + 32) = v21;
        *(_OWORD *)a1 = v23;
        *(_OWORD *)a2 = v20;
        *(_OWORD *)(a2 + 16) = v19;
        *(_OWORD *)(a2 + 32) = *(_OWORD *)v26;
        result = *(__n128 *)&v26[12];
        *(_OWORD *)(a2 + 44) = *(_OWORD *)&v26[12];
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[28];
  _BYTE v32[28];
  _BYTE v33[28];
  _BYTE v34[28];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(a1, a2, a3, (__int128 *)a4).n128_u64[0];
  if (*((_DWORD *)a5 + 14) < *(_DWORD *)(a4 + 56))
  {
    *(_OWORD *)v31 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)&v31[12] = *(_OWORD *)(a4 + 44);
    v12 = *(_OWORD *)a4;
    v11 = *(_OWORD *)(a4 + 16);
    v14 = a5[1];
    v13 = a5[2];
    v15 = *a5;
    *(_OWORD *)(a4 + 44) = *(__int128 *)((char *)a5 + 44);
    *(_OWORD *)(a4 + 16) = v14;
    *(_OWORD *)(a4 + 32) = v13;
    *(_OWORD *)a4 = v15;
    *a5 = v12;
    a5[1] = v11;
    a5[2] = *(_OWORD *)v31;
    result = *(__n128 *)&v31[12];
    *(__int128 *)((char *)a5 + 44) = *(_OWORD *)&v31[12];
    if (*(_DWORD *)(a4 + 56) < *(_DWORD *)(a3 + 56))
    {
      *(_OWORD *)v32 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)&v32[12] = *(_OWORD *)(a3 + 44);
      v17 = *(_OWORD *)a3;
      v16 = *(_OWORD *)(a3 + 16);
      v19 = *(_OWORD *)(a4 + 16);
      v18 = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 44) = *(_OWORD *)(a4 + 44);
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 32) = v18;
      *(_OWORD *)a3 = v20;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = v16;
      *(_OWORD *)(a4 + 32) = *(_OWORD *)v32;
      result = *(__n128 *)&v32[12];
      *(_OWORD *)(a4 + 44) = *(_OWORD *)&v32[12];
      if (*(_DWORD *)(a3 + 56) < *(_DWORD *)(a2 + 56))
      {
        *(_OWORD *)v33 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)&v33[12] = *(_OWORD *)(a2 + 44);
        v22 = *(_OWORD *)a2;
        v21 = *(_OWORD *)(a2 + 16);
        v24 = *(_OWORD *)(a3 + 16);
        v23 = *(_OWORD *)(a3 + 32);
        v25 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 44) = *(_OWORD *)(a3 + 44);
        *(_OWORD *)(a2 + 16) = v24;
        *(_OWORD *)(a2 + 32) = v23;
        *(_OWORD *)a2 = v25;
        *(_OWORD *)a3 = v22;
        *(_OWORD *)(a3 + 16) = v21;
        *(_OWORD *)(a3 + 32) = *(_OWORD *)v33;
        result = *(__n128 *)&v33[12];
        *(_OWORD *)(a3 + 44) = *(_OWORD *)&v33[12];
        if (*(_DWORD *)(a2 + 56) < *(_DWORD *)(a1 + 56))
        {
          *(_OWORD *)v34 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)&v34[12] = *(_OWORD *)(a1 + 44);
          v27 = *(_OWORD *)a1;
          v26 = *(_OWORD *)(a1 + 16);
          v29 = *(_OWORD *)(a2 + 16);
          v28 = *(_OWORD *)(a2 + 32);
          v30 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
          *(_OWORD *)(a1 + 16) = v29;
          *(_OWORD *)(a1 + 32) = v28;
          *(_OWORD *)a1 = v30;
          *(_OWORD *)a2 = v27;
          *(_OWORD *)(a2 + 16) = v26;
          *(_OWORD *)(a2 + 32) = *(_OWORD *)v34;
          result = *(__n128 *)&v34[12];
          *(_OWORD *)(a2 + 44) = *(_OWORD *)&v34[12];
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *,MEOWDistanceCookie *>(uint64_t a1, __n128 *a2, __n128 *a3, uint64_t a4)
{
  __n128 *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  int64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  __n128 *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v37;
  __n128 v38;
  _BYTE v39[28];
  _BYTE v40[28];

  if ((__n128 *)a1 != a2)
  {
    v6 = a2;
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 60;
    if ((uint64_t)a2 - a1 >= 61)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 60 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(a1, a4, v9, v12);
        v12 = (__n128 *)((char *)v12 - 60);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (v14[3].n128_u32[2] < *(_DWORD *)(a1 + 56))
        {
          *(__n128 *)v39 = v14[2];
          *(__n128 *)&v39[12] = *(__n128 *)((char *)v14 + 44);
          v16 = *v14;
          v15 = v14[1];
          v18 = *(__n128 *)(a1 + 16);
          v17 = *(__n128 *)(a1 + 32);
          v19 = *(__n128 *)a1;
          *(__n128 *)((char *)v14 + 44) = *(__n128 *)(a1 + 44);
          v14[1] = v18;
          v14[2] = v17;
          *v14 = v19;
          *(__n128 *)a1 = v16;
          *(__n128 *)(a1 + 16) = v15;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)v39;
          *(_OWORD *)(a1 + 44) = *(_OWORD *)&v39[12];
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(a1, a4, v9, (__n128 *)a1);
        }
        v14 = (__n128 *)((char *)v14 + 60);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 61)
    {
      v20 = v8 / 0x3CuLL;
      do
      {
        v21 = 0;
        v37 = *(__n128 *)a1;
        v38 = *(__n128 *)(a1 + 16);
        *(_OWORD *)v40 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)&v40[12] = *(_OWORD *)(a1 + 44);
        v22 = (_OWORD *)a1;
        do
        {
          v23 = v21 + 1;
          v24 = (__n128 *)((char *)v22 + 60 * v21 + 60);
          v25 = (2 * v21) | 1;
          v26 = 2 * v21 + 2;
          if (v26 < v20)
          {
            v27 = *((_DWORD *)v22 + 15 * v23 + 14);
            v28 = v24[7].n128_u32[1];
            v24 = (__n128 *)((char *)v24 + 60 * (v27 < v28));
            if (v27 < v28)
              v25 = v26;
          }
          v29 = *v24;
          v30 = v24[1];
          v31 = v24[2];
          *(__n128 *)((char *)v22 + 44) = *(__n128 *)((char *)&v24[2] + 12);
          v22[1] = v30;
          v22[2] = v31;
          *v22 = v29;
          v22 = v24;
          v21 = v25;
        }
        while (v25 <= (uint64_t)((unint64_t)(v20 - 2) >> 1));
        v6 = (__n128 *)((char *)v6 - 60);
        if (v24 == v6)
        {
          *(__n128 *)((char *)v24 + 44) = *(__n128 *)&v40[12];
          v24[1] = v38;
          v24[2] = *(__n128 *)v40;
          *v24 = v37;
        }
        else
        {
          v32 = *v6;
          v33 = v6[1];
          v34 = v6[2];
          *(__n128 *)((char *)v24 + 44) = *(__n128 *)((char *)v6 + 44);
          v24[1] = v33;
          v24[2] = v34;
          *v24 = v32;
          *v6 = v37;
          v6[1] = v38;
          v6[2] = *(__n128 *)v40;
          *(__n128 *)((char *)v6 + 44) = *(__n128 *)&v40[12];
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(a1, (uint64_t)&v24[3].n128_i64[1] + 4, a4, 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)&v24[3].n128_i64[1] - a1 + 4) >> 2));
        }
      }
      while (v20-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  int64_t v4;
  int64_t v5;
  __int128 *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  __n128 *v10;
  __n128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  __n128 result;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  uint64_t v22;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xEEEEEEEEEEEEEEEFLL * (((uint64_t)a4 - a1) >> 2)))
    {
      v5 = (0xDDDDDDDDDDDDDDDELL * (((uint64_t)a4 - a1) >> 2)) | 1;
      v6 = (__int128 *)(a1 + 60 * v5);
      if ((uint64_t)(0xDDDDDDDDDDDDDDDELL * (((uint64_t)a4 - a1) >> 2) + 2) < a3)
      {
        v7 = *(_DWORD *)(a1 + 60 * v5 + 56);
        v8 = *((_DWORD *)v6 + 29);
        v6 = (__int128 *)((char *)v6 + 60 * (v7 < v8));
        if (v7 < v8)
          v5 = 0xDDDDDDDDDDDDDDDELL * (((uint64_t)a4 - a1) >> 2) + 2;
      }
      v9 = a4[3].n128_u32[2];
      if (*((_DWORD *)v6 + 14) >= v9)
      {
        v19 = *a4;
        v20 = a4[1];
        v21 = a4[2];
        v22 = a4[3].n128_i64[0];
        do
        {
          v10 = a4;
          a4 = (__n128 *)v6;
          v11 = (__n128)*v6;
          v12 = v6[1];
          v13 = v6[2];
          *(__n128 *)((char *)&v10[2] + 12) = *(__n128 *)((char *)v6 + 44);
          v10[1] = (__n128)v12;
          v10[2] = (__n128)v13;
          *v10 = v11;
          if (v4 < v5)
            break;
          v14 = (2 * v5) | 1;
          v6 = (__int128 *)(a1 + 60 * v14);
          v15 = 2 * v5 + 2;
          if (v15 < a3)
          {
            v16 = *(_DWORD *)(a1 + 60 * v14 + 56);
            v17 = *((_DWORD *)v6 + 29);
            v6 = (__int128 *)((char *)v6 + 60 * (v16 < v17));
            if (v16 < v17)
              v14 = v15;
          }
          v5 = v14;
        }
        while (*((_DWORD *)v6 + 14) >= v9);
        result = v19;
        a4[3].n128_u64[0] = v22;
        a4[1] = v20;
        a4[2] = v21;
        *a4 = v19;
        a4[3].n128_u32[2] = v9;
      }
    }
  }
  return result;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  __int128 *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __n128 v16;
  uint64_t v17;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = *(_DWORD *)(a1 + 60 * (v4 >> 1) + 56);
    v7 = *(_DWORD *)(a2 - 4);
    if (v6 < v7)
    {
      v8 = (__int128 *)(a2 - 60);
      v14 = *(_OWORD *)(a2 - 60);
      v15 = *(_OWORD *)(a2 - 44);
      v16 = *(__n128 *)(a2 - 28);
      v17 = *(_QWORD *)(a2 - 12);
      do
      {
        v9 = v8;
        v8 = (__int128 *)(a1 + 60 * v5);
        v10 = *v8;
        v11 = v8[1];
        v12 = v8[2];
        *(_OWORD *)((char *)v9 + 44) = *(__int128 *)((char *)v8 + 44);
        v9[1] = v11;
        v9[2] = v12;
        *v9 = v10;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
      }
      while (*(_DWORD *)(a1 + 60 * v5 + 56) < v7);
      *v8 = v14;
      v8[1] = v15;
      result = v16;
      v8[2] = (__int128)v16;
      *((_QWORD *)v8 + 6) = v17;
      *((_DWORD *)v8 + 14) = v7;
    }
  }
  return result;
}

void MTBEPhraseMemo::MTBEPhraseMemo(MTBEPhraseMemo *this, const MTBEPhraseParam *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _QWORD v8[5];

  MTBEPersistentParam::MTBEPersistentParam((MTBEPersistentParam *)((char *)this + 8), *((const MTBEPersistentParam **)a2 + 5));
  *((_QWORD *)this + 28) = &off_1E93659F0;
  v4 = *((_QWORD *)a2 + 3);
  v5 = *(_OWORD *)(v4 + 8);
  v6 = *(_OWORD *)(v4 + 24);
  v7 = *(_OWORD *)(v4 + 40);
  *((_DWORD *)this + 70) = *(_DWORD *)(v4 + 56);
  *(_OWORD *)((char *)this + 264) = v7;
  *(_OWORD *)((char *)this + 248) = v6;
  *(_OWORD *)((char *)this + 232) = v5;
  v8[0] = &unk_1E9368EA0;
  *(_QWORD *)this = MTFEClone::Clone((MTFEClone *)v8, *((MTFESpeechElement **)a2 + 1));
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v8);
}

void sub_1D22A08C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  MTBEPersistentParam *v2;
  MTBENotifier *v3;
  va_list va;

  va_start(va, a2);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)va);
  MTBENotifier::~MTBENotifier(v3);
  MTBEPersistentParam::~MTBEPersistentParam(v2);
  _Unwind_Resume(a1);
}

void MTBEPhraseMemo::~MTBEPhraseMemo(MTBEPhraseMemo *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  MTBENotifier::~MTBENotifier((MTBENotifier *)((char *)this + 224));
  MTBEPersistentParam::~MTBEPersistentParam((MTBEPersistentParam *)((char *)this + 8));
}

__n128 MTBEPhraseMemo::Thaw(MTBEPhraseMemo *this, MTBEPhraseParam *a2)
{
  uint64_t v4;
  int v5;
  __n128 result;
  __int128 v7;

  *((_QWORD *)a2 + 1) = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  MTBEPersistentParam::operator=(*((_QWORD *)a2 + 5), (uint64_t)this + 8);
  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_DWORD *)this + 70);
  result = *(__n128 *)((char *)this + 264);
  v7 = *(_OWORD *)((char *)this + 248);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)((char *)this + 232);
  *(_OWORD *)(v4 + 24) = v7;
  *(__n128 *)(v4 + 40) = result;
  *(_DWORD *)(v4 + 56) = v5;
  return result;
}

uint64_t MTFEClone::Clone(MTFEClone *this, MTFESpeechElement *a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  ((void (*)(MTFESpeechElement *, MTFEClone *))*a2->var0)(a2, this);
  return *((_QWORD *)this + 3);
}

MTFESpeechElement *MTFEClone::PushRoot(MTFEClone *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *result;

  if (!*((_QWORD *)this + 3))
    *((_QWORD *)this + 3) = a2;
  MTFESpeechElement::CleanseClone(a2);
  result = (MTFESpeechElement *)*((_QWORD *)this + 1);
  if (result)
    result = MTFESpeechElement::AddChildAfter(result, a2, result->var4);
  *((_QWORD *)this + 1) = a2;
  return result;
}

MTFESpeechElement *MTFEClone::VisitSentence(MTFEClone *this, MTFESpeechElement *a2)
{
  uint64_t v4;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)&a2->var1;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&a2->var4;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)&a2->var6;
  *(_QWORD *)v4 = &off_1E93661E0;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)&a2[1].var0;
  *(_OWORD *)(v4 + 72) = *(_OWORD *)&a2[1].var3;
  MTFEClone::PushRoot(this, (MTFESpeechElement *)v4);
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFEClone::VisitIntonationalPhrase(MTFEClone *this, MTFESpeechElement *a2)
{
  uint64_t v4;
  MTFESpeechElement *v5;
  void *v6;
  _OWORD *v7;
  MTFEMelody *var6;
  __int128 v9;
  uint64_t v10;
  MTFESpeechElement *result;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)&a2->var1;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&a2->var4;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)&a2->var6;
  *(_QWORD *)v4 = &off_1E9366208;
  *(_QWORD *)(v4 + 56) = a2[1].var0;
  *(_QWORD *)(v4 + 64) = &off_1E93665A8;
  v5 = (MTFESpeechElement *)(v4 + 64);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)&a2[1].var3;
  *(_OWORD *)(v4 + 88) = *(_OWORD *)&a2[1].var5;
  *(_OWORD *)(v4 + 104) = *(_OWORD *)&a2[1].var7;
  *(_OWORD *)(v4 + 200) = *(_OWORD *)&a2[3].var5;
  *(_OWORD *)(v4 + 184) = *(_OWORD *)&a2[3].var3;
  *(_OWORD *)(v4 + 168) = *(_OWORD *)&a2[3].var0;
  *(_OWORD *)(v4 + 152) = *(_OWORD *)&a2[2].var6;
  *(_OWORD *)(v4 + 136) = *(_OWORD *)&a2[2].var4;
  *(_OWORD *)(v4 + 120) = *(_OWORD *)&a2[2].var1;
  if (a2[2].var3)
  {
    v6 = (void *)operator new[]();
    *(_QWORD *)(v4 + 128) = v6;
    memcpy(v6, a2[2].var3, 4 * SHIDWORD(a2[2].var5));
  }
  if (a2[3].var6)
  {
    v7 = (_OWORD *)operator new();
    var6 = (MTFEMelody *)a2[3].var6;
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v7, (const MEOWVectorBase *)var6);
    v9 = *((_OWORD *)var6 + 2);
    *(_OWORD *)((char *)v7 + 44) = *(_OWORD *)((char *)var6 + 44);
    v7[2] = v9;
    *(_QWORD *)(v4 + 208) = v7;
  }
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v5;
  *((_QWORD *)this + 2) = v10;
  MTFESpeechElement::CleanseClone(v5);
  MTFESpeechElement::VisitChildren((MTFESpeechElement *)((char *)a2 + 64), this);
  *((_QWORD *)this + 1) = *((_QWORD *)this + 2);
  MTFEClone::PushRoot(this, (MTFESpeechElement *)v4);
  result = MTFESpeechElement::VisitChildren(a2, this);
  *((_QWORD *)this + 1) = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  return result;
}

void sub_1D22A0C40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x1080C40ED847058);
  _Unwind_Resume(a1);
}

MTFESpeechElement *MTFEClone::VisitIntermediatePhrase(MTFEClone *this, MTFESpeechElement *a2)
{
  uint64_t v4;
  MTFESpeechElement *result;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)&a2->var1;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&a2->var4;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)&a2->var6;
  *(_QWORD *)v4 = &off_1E9366230;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)&a2[1].var0;
  *(_OWORD *)(v4 + 72) = *(_OWORD *)&a2[1].var3;
  MTFEClone::PushRoot(this, (MTFESpeechElement *)v4);
  result = MTFESpeechElement::VisitChildren(a2, this);
  *((_QWORD *)this + 1) = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  return result;
}

MTFESpeechElement *MTFEClone::VisitWord(MTFEClone *this, MTFESpeechElement *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  MTFESpeechElement *result;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)&a2->var1;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&a2->var4;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)&a2->var6;
  *(_QWORD *)v4 = &off_1E9366258;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)&a2[1].var0;
  *(_OWORD *)(v4 + 72) = *(_OWORD *)&a2[1].var3;
  *(_OWORD *)(v4 + 88) = *(_OWORD *)&a2[1].var5;
  *(_DWORD *)(v4 + 104) = a2[1].var7;
  v5 = *(_OWORD *)&a2[2].var1;
  v6 = *(_OWORD *)&a2[2].var4;
  *(_OWORD *)(v4 + 152) = *(_OWORD *)&a2[2].var6;
  *(_OWORD *)(v4 + 136) = v6;
  *(_QWORD *)(v4 + 112) = &off_1E93665A8;
  *(_OWORD *)(v4 + 120) = v5;
  *(_QWORD *)(v4 + 264) = a2[4].var6;
  *(_OWORD *)(v4 + 248) = *(_OWORD *)&a2[4].var4;
  *(_OWORD *)(v4 + 232) = *(_OWORD *)&a2[4].var1;
  *(_OWORD *)(v4 + 216) = *(_OWORD *)&a2[3].var7;
  *(_OWORD *)(v4 + 200) = *(_OWORD *)&a2[3].var5;
  *(_OWORD *)(v4 + 184) = *(_OWORD *)&a2[3].var3;
  *(_OWORD *)(v4 + 168) = *(_OWORD *)&a2[3].var0;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v4 + 112;
  *((_QWORD *)this + 2) = v7;
  MTFESpeechElement::CleanseClone((MTFESpeechElement *)(v4 + 112));
  MTFESpeechElement::VisitChildren(a2 + 2, this);
  *((_QWORD *)this + 1) = *((_QWORD *)this + 2);
  MTFEClone::PushRoot(this, (MTFESpeechElement *)v4);
  result = MTFESpeechElement::VisitChildren(a2, this);
  *((_QWORD *)this + 1) = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  a2[3].var4 = (MTFESpeechElement *)v4;
  return result;
}

MTFESpeechElement *MTFEClone::VisitHomograph(MTFEClone *this, MTFESpeechElement *a2)
{
  uint64_t v4;
  MTFESpeechElement *result;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)&a2->var1;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&a2->var4;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)&a2->var6;
  *(_QWORD *)v4 = &unk_1E9366448;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)&a2[1].var0;
  *(_DWORD *)(v4 + 72) = a2[1].var3;
  MTFEClone::PushRoot(this, (MTFESpeechElement *)v4);
  result = MTFESpeechElement::VisitChildren(a2, this);
  *((_QWORD *)this + 1) = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  return result;
}

MTFESpeechElement *MTFEClone::VisitSyllable(MTFEClone *this, MTFESpeechElement *a2)
{
  uint64_t v4;
  MTFESpeechElement *result;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)&a2->var1;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&a2->var4;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)&a2->var6;
  *(_QWORD *)v4 = &off_1E9366280;
  *(_QWORD *)(v4 + 56) = a2[1].var0;
  *(_DWORD *)(v4 + 64) = *(_DWORD *)&a2[1].var1;
  MTFEClone::PushRoot(this, (MTFESpeechElement *)v4);
  result = MTFESpeechElement::VisitChildren(a2, this);
  *((_QWORD *)this + 1) = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  return result;
}

MTFESpeechElement *MTFEClone::VisitPhoneme(MTFESpeechElement **this, MTFESpeechElement *a2)
{
  uint64_t v4;
  uint64_t v5;
  MTFEPitchTargets *var4;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  MTFESpeechElement *result;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)&a2->var1;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&a2->var4;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)&a2->var6;
  *(_QWORD *)v4 = &off_1E93662A8;
  *(_QWORD *)(v4 + 87) = *(MTFESpeechElement **)((char *)&a2[1].var4 + 7);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)&a2[1].var3;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)&a2[1].var0;
  if (*(_QWORD *)(v4 + 80))
  {
    v5 = operator new();
    var4 = (MTFEPitchTargets *)a2[1].var4;
    v7 = *((_OWORD *)var4 + 1);
    *(_OWORD *)v5 = *(_OWORD *)var4;
    *(_OWORD *)(v5 + 16) = v7;
    v8 = *((_OWORD *)var4 + 2);
    v9 = *((_OWORD *)var4 + 3);
    v10 = *((_OWORD *)var4 + 4);
    *(_QWORD *)(v5 + 80) = *((_QWORD *)var4 + 10);
    *(_OWORD *)(v5 + 48) = v9;
    *(_OWORD *)(v5 + 64) = v10;
    *(_OWORD *)(v5 + 32) = v8;
    *(_QWORD *)(v4 + 80) = v5;
  }
  MTFESpeechElement::CleanseClone((MTFESpeechElement *)v4);
  result = MTFESpeechElement::AddChildAfter(this[1], (MTFESpeechElement *)v4, this[1]->var4);
  if ((MTFESpeechElement *)v4 == this[1]->var3 && a2->var7)
    result = MTFESpeechElement::SetPrevCousin(a2, this[4]);
  this[4] = (MTFESpeechElement *)v4;
  return result;
}

MTFESpeechElement *MTFEClone::VisitCommand(MTFESpeechElement **this, MTFECommand *a2)
{
  uint64_t v4;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)&a2->var1;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&a2->var4;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)&a2->var6;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)&a2->var8;
  *(_QWORD *)v4 = &unk_1E9366488;
  MTFESpeechElement::CleanseClone((MTFESpeechElement *)v4);
  return MTFESpeechElement::AddChildAfter(this[1], (MTFESpeechElement *)v4, this[1]->var4);
}

void MTFEClone::~MTFEClone(MTFEClone *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void MT3BFloatSegmentProducer::MT3BFloatSegmentProducer(uint64_t a1, uint64_t a2, MT3BFloatSegmentProducer *this, __int16 *a4)
{
  float v5;
  void *v6;
  void *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  MT3BFloatSegmentProducer *v12;
  MT3BFloatSegmentProducer *v13;
  MT3BFloatSegmentProducer *v14;
  MT3BFloatSegmentProducer *v15;
  MT3BFloatSegmentProducer *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_1E9368F28;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = this;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 96) = -1;
  *(_BYTE *)(a1 + 100) = 0;
  v5 = (float)a4[6];
  *(_WORD *)(a1 + 452) = 4096;
  *(float *)(a1 + 448) = v5 * 0.04;
  v6 = &MT3BFloatSegmentProducer::sHPNoise;
  if (a4[30] == 1)
    v6 = &MT3BFloatSegmentProducer::sNoiseWave;
  if (a4[30])
    v7 = v6;
  else
    v7 = &MT3BFloatSegmentProducer::sBandNoise;
  *(_QWORD *)(a1 + 472) = v7;
  *(_WORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v8 = a4[8];
  if (v8 >= 801)
  {
    v8 = MTBEParam::HzToPitch(this, a4[8]);
    this = *(MT3BFloatSegmentProducer **)(a1 + 16);
    a4 = *(__int16 **)(a1 + 24);
  }
  v9 = MTBEParam::HzToPitch(this, a4[10]);
  v10 = MTBEParam::HzToPitch(*(MTBEParam **)(a1 + 16), *(__int16 *)(*(_QWORD *)(a1 + 24) + 24));
  v11 = MTBEParam::HzToPitch(*(MTBEParam **)(a1 + 16), 0x125Cu);
  v12 = (MT3BFloatSegmentProducer *)MTBEParam::HzToPitch(*(MTBEParam **)(a1 + 16), *(__int16 *)(*(_QWORD *)(a1 + 24) + 32));
  *(_WORD *)(a1 + 440) = (_WORD)v12;
  MT3BFloatSegmentProducer::CalcPoleCoefficients(v12, (float)v8, (float)*(__int16 *)(*(_QWORD *)(a1 + 24) + 18), (float *)(a1 + 324), (float *)(a1 + 328), (float *)(a1 + 332));
  MT3BFloatSegmentProducer::CalcPoleCoefficients(v13, (float)v9, (float)*(__int16 *)(*(_QWORD *)(a1 + 24) + 22), (float *)(a1 + 360), (float *)(a1 + 364), (float *)(a1 + 368));
  *(float *)(a1 + 360) = *(float *)(a1 + 360) * 0.4;
  MT3BFloatSegmentProducer::CalcPoleCoefficients(v14, (float)v10, (float)*(__int16 *)(*(_QWORD *)(a1 + 24) + 26), (float *)(a1 + 336), (float *)(a1 + 340), (float *)(a1 + 344));
  *(float *)(a1 + 336) = *(float *)(a1 + 336) * 0.4;
  MT3BFloatSegmentProducer::CalcPoleCoefficients(v15, (float)v11, (float)*(__int16 *)(*(_QWORD *)(a1 + 24) + 30), (float *)(a1 + 348), (float *)(a1 + 352), (float *)(a1 + 356));
  *(float *)(a1 + 348) = *(float *)(a1 + 348) * 0.4;
  MT3BFloatSegmentProducer::CalcPoleCoefficients(v16, (float)*(__int16 *)(a1 + 440), (float)*(__int16 *)(*(_QWORD *)(a1 + 24) + 36), (float *)(a1 + 384), (float *)(a1 + 388), (float *)(a1 + 392));
  *(_OWORD *)(a1 + 180) = 0u;
  *(_QWORD *)(a1 + 428) = 0;
  *(_OWORD *)(a1 + 196) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(float *)(a1 + 424) = *(float *)(a1 + 448) * 0.4;
  *(_DWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  v17 = *(_QWORD *)(a1 + 24);
  *(float *)(a1 + 444) = (float)*(__int16 *)(v17 + 312) * 0.01;
  v18 = *(__int16 *)(v17 + 310);
  *(_QWORD *)(a1 + 456) = v18;
  if (v18 > 100)
  {
    v18 = 100;
LABEL_12:
    *(_QWORD *)(a1 + 456) = v18;
    goto LABEL_13;
  }
  if ((int)v18 <= 9)
  {
    v18 = 10;
    goto LABEL_12;
  }
LABEL_13:
  *(_QWORD *)(a1 + 456) = (v18 << 16) / 100;
  *(_WORD *)(a1 + 480) = (2318 * ((v18 << 16) / 100)) >> 16;
  *(_WORD *)(a1 + 482) = (2909 * ((v18 << 16) / 100)) >> 16;
  *(_WORD *)(a1 + 484) = (3723 * ((v18 << 16) / 100)) >> 16;
  v19 = (unint64_t)((v18 << 16) / 100) >> 4;
  *(_WORD *)(a1 + 486) = v19;
  *(_WORD *)(a1 + 438) = v19;
  *(_WORD *)(a1 + 436) = 0;
  bzero((void *)(a1 + 496), 0x2000uLL);
}

void sub_1D22A13E0(_Unwind_Exception *a1)
{
  MTMBProducerComponent *v1;

  MTMBProducerComponent::~MTMBProducerComponent(v1);
  _Unwind_Resume(a1);
}

float MT3BFloatSegmentProducer::CalcPoleCoefficients(MT3BFloatSegmentProducer *this, float a2, float a3, float *a4, float *a5, float *a6)
{
  uint64_t v6;
  float v7;
  float result;

  if (a3 > 1225.0)
    a3 = 1225.0;
  if (a3 < 50.0)
    a3 = 50.0;
  if (a2 < 256.0)
    a2 = 256.0;
  v6 = (uint64_t)((unint64_t)(((int)a3 - 50) / 5) << 48) >> 46;
  *a6 = *(float *)((char *)&sCcoeffTbl + v6);
  v7 = sCosTbl[(int)a2 - 256] * *(float *)((char *)&sBcoeffTbl + v6);
  *a5 = v7;
  result = (float)(1.0 - v7) - *a6;
  *a4 = result;
  return result;
}

BOOL MT3BFloatSegmentProducer::NextSegment(MT3BFloatSegmentProducer *this, MTMBSegment *a2)
{
  int Frame;
  int v5;
  int v6;
  int v7;
  int v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  const char *v15;
  MTBEParam *v16;
  int UsePostDurMod;
  MTBEParam *v18;
  __int16 DurModFakeRate;
  MT3BFloatSegmentProducer *v20;
  __int16 *v21;
  float v22;
  MT3BFloatSegmentProducer *v23;
  MT3BFloatSegmentProducer *v24;
  uint64_t v25;
  int v26;
  int v27;
  MT3BFloatSegmentProducer *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  __int16 v48;
  __int16 v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  _QWORD *v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  BOOL v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  float v75;
  int v76;
  float v77;
  uint64_t v78;
  float v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  int v87;
  float v88;
  int v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  uint64_t v113;
  int v114;
  float v115;
  int v116;
  __int16 v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  __int16 v128;
  float v129;
  __int16 v130;
  float v131;
  int v132;
  float v133;
  int v134;
  float v135;
  int v136;
  float v137;
  int v138;
  float v139;
  __int16 v140;
  float v141;
  int v142;
  float v143;
  float v144;

  Frame = *((_DWORD *)this + 24);
  if ((Frame & 0x80000000) == 0)
  {
    if (!Frame)
      return Frame != 0;
    goto LABEL_5;
  }
  Frame = MTFEFrameFiller::FillNextFrame(*((MTFEFrameFiller **)this + 1), (const char *)this + 40);
  *((_DWORD *)this + 24) = Frame;
  *((_BYTE *)this + 100) = *(_BYTE *)(*((_QWORD *)this + 1) + 80);
  if (Frame)
  {
LABEL_5:
    v122 = Frame;
    v142 = *((__int16 *)this + 20);
    v127 = *((unsigned __int8 *)this + 42);
    v128 = *((_WORD *)this + 22);
    v5 = *((__int16 *)this + 24);
    v6 = *((__int16 *)this + 25);
    v7 = *((__int16 *)this + 26);
    v8 = *((unsigned __int16 *)this + 27);
    v138 = *((unsigned __int16 *)this + 28);
    v140 = *((_WORD *)this + 23);
    v136 = *((unsigned __int16 *)this + 29);
    v132 = *((unsigned __int16 *)this + 31);
    v134 = *((unsigned __int16 *)this + 30);
    v124 = *((__int16 *)this + 32);
    v130 = *((_WORD *)this + 33);
    v9 = *((_WORD *)this + 34);
    v10 = *((_WORD *)this + 35);
    v11 = *((_WORD *)this + 36);
    v126 = *((_QWORD *)this + 10);
    v121 = *((_QWORD *)this + 11);
    v12 = MTFEFrameFiller::FillNextFrame(*((MTFEFrameFiller **)this + 1), (const char *)this + 40);
    *((_DWORD *)this + 24) = v12;
    if (!v12 || *((_BYTE *)this + 42))
    {
      *((_WORD *)this + 226) |= *((unsigned __int8 *)this + 100) << 7;
      *((_BYTE *)this + 100) = *(_BYTE *)(*((_QWORD *)this + 1) + 80);
    }
    if (v127)
    {
      v13 = (_DWORD *)*((_QWORD *)this + 4);
      if (v13)
      {
        v65 = (*v13)-- == 1;
        if (v65)
          MEMORY[0x1D8233BA8]();
      }
      v14 = operator new();
      MTMBDemiProperties::MTMBDemiProperties((MTMBDemiProperties *)v14);
      *((_QWORD *)this + 4) = v14;
      v15 = "Stress1";
      v16 = (MTBEParam *)*((_QWORD *)this + 2);
      if (!*(_BYTE *)(*((_QWORD *)this + 1) + 288))
        v15 = "SIL";
      if (*(unsigned __int8 *)(*((_QWORD *)this + 1) + 288) == 255)
        v15 = "None";
      *(_QWORD *)(v14 + 8) = v15;
      *(_BYTE *)(v14 + 18) = 1;
      *(_QWORD *)(*((_QWORD *)this + 4) + 24) = MTBEParam::GetVolume(v16);
      UsePostDurMod = MTBEParam::GetUsePostDurMod(*((MTBEParam **)this + 2));
      v18 = (MTBEParam *)*((_QWORD *)this + 2);
      if (UsePostDurMod)
        DurModFakeRate = MTBEParam::GetDurModFakeRate(v18);
      else
        DurModFakeRate = MTBEParam::GetRate(v18);
      *(_WORD *)(*((_QWORD *)this + 4) + 64) = DurModFakeRate;
      *(_WORD *)(*((_QWORD *)this + 4) + 66) = MTBEParam::GetRate(*((MTBEParam **)this + 2));
    }
    MTMBSegment::Allocate(a2, 0);
    *((_WORD *)a2 + 4) = 112;
    v20 = (MT3BFloatSegmentProducer *)MTMBSegment::SetProperties((uint64_t)a2, *((_DWORD **)this + 4));
    *((_WORD *)a2 + 8) |= *((_WORD *)this + 226);
    if (*((float *)this + 26) == 0.0 && *((float *)this + 28) == 0.0)
    {
      *(_QWORD *)((char *)this + 252) = 0;
      *((_QWORD *)this + 17) = 0;
      *((_QWORD *)this + 16) = 0;
      *((_OWORD *)this + 11) = 0u;
      *((_OWORD *)this + 12) = 0u;
      *((_DWORD *)this + 52) = 0;
      *(_QWORD *)((char *)this + 260) = 0;
      *(_QWORD *)((char *)this + 268) = 0;
    }
    v21 = (__int16 *)*((_QWORD *)this + 3);
    v22 = (float)(v21[23] + v5);
    v144 = *((float *)this + 111);
    *((float *)this + 69) = v22;
    *((float *)this + 70) = (float)(v21[24] + v6);
    *((float *)this + 71) = (float)(v21[25] + v7);
    MT3BFloatSegmentProducer::CalcPoleCoefficients(v20, v22, (float)v9, (float *)this + 72, (float *)this + 73, (float *)this + 74);
    MT3BFloatSegmentProducer::CalcPoleCoefficients(v23, *((float *)this + 70), (float)v10, (float *)this + 75, (float *)this + 76, (float *)this + 77);
    MT3BFloatSegmentProducer::CalcPoleCoefficients(v24, *((float *)this + 71), (float)v11, (float *)this + 78, (float *)this + 79, (float *)this + 80);
    v25 = *((_QWORD *)this + 3);
    v26 = *(__int16 *)(v25 + 296) + v124;
    v27 = *((__int16 *)this + 220);
    MT3BFloatSegmentProducer::CalcZeroCoefficients(v28, (float)v26, (float)*(__int16 *)(v25 + 36), (float *)this + 93, (float *)this + 94, (float *)this + 95);
    v29 = *((float *)this + 96);
    v30 = *((float *)this + 93);
    v31 = (float)v140 * 0.125;
    *((float *)this + 27) = (float)v128 * 0.03125;
    *((float *)this + 28) = v31;
    *((float *)this + 29) = (float)v130 * 0.03125;
    if (v8)
    {
      v32 = (float)(__int16)v8 * 0.03125;
      v33 = v32 * *((float *)this + 75);
    }
    else
    {
      *((_DWORD *)this + 57) = 0;
      *((_DWORD *)this + 58) = 0;
      v32 = 0.0;
      v33 = 0.0;
    }
    v141 = v33;
    v34 = v142;
    *((float *)this + 99) = v32;
    if (v138)
    {
      v35 = (float)(__int16)v138 * 0.03125;
      v36 = v35 * *((float *)this + 78);
    }
    else
    {
      *((_DWORD *)this + 59) = 0;
      *((_DWORD *)this + 60) = 0;
      v35 = 0.0;
      v36 = 0.0;
    }
    v139 = v36;
    *((float *)this + 100) = v35;
    if (v136 && v31 == 0.0)
    {
      v37 = (float)(__int16)v136 * 0.03125;
      v38 = v37 * *((float *)this + 90);
    }
    else
    {
      *((_DWORD *)this + 61) = 0;
      *((_DWORD *)this + 62) = 0;
      v37 = 0.0;
      v38 = 0.0;
    }
    v137 = v38;
    *((float *)this + 101) = v37;
    if (v134)
    {
      v39 = (float)(__int16)v134 * 0.03125;
      v40 = v39 * *((float *)this + 84);
    }
    else
    {
      *((_DWORD *)this + 53) = 0;
      *((_DWORD *)this + 54) = 0;
      v39 = 0.0;
      v40 = 0.0;
    }
    v135 = v40;
    *((float *)this + 102) = v39;
    if (v132)
    {
      v41 = (float)(__int16)v132 * 0.03125;
      v42 = v41 * *((float *)this + 87);
    }
    else
    {
      *((_DWORD *)this + 55) = 0;
      *((_DWORD *)this + 56) = 0;
      v41 = 0.0;
      v42 = 0.0;
    }
    v133 = v42;
    *((float *)this + 103) = v41;
    if ((MTBEDebugFlags::sMEOWDebug & 2) != 0)
      printf("P %6g %6g %6g  %6g %6g %6g  %6g %6g %6g  %6g %6g %6g  %6g %6g %6g\n", v141, *((float *)this + 76), *((float *)this + 77), v36, *((float *)this + 79), *((float *)this + 80), v137, *((float *)this + 91), *((float *)this + 92), v135, *((float *)this + 85), *((float *)this + 86), v42, *((float *)this + 88), *((float *)this + 89));
    *((_DWORD *)this + 104) = v142;
    v43 = *((_QWORD *)this + 2);
    if (*(_WORD *)(v43 + 210) == 1)
    {
      if (*((float *)this + 27) != 0.0)
        *((float *)this + 105) = (float)*(uint64_t *)(v43 + 8);
      *((_QWORD *)this + 18) = MT3BFloatSegmentProducer::sTopOctave[(*(_WORD *)(v43 + 192) + v142)] >> (3 - ((unsigned __int16)(*(_WORD *)(v43 + 192) + v142) >> 8));
      if (*(_BYTE *)(v43 + 50))
      {
        v44 = *((_QWORD *)this + 3);
        if (*(_WORD *)(v44 + 52))
          v123 = MT3BFloatSegmentProducer::sTopOctave[(*(_WORD *)(v44 + 52) - 51)] >> (7 - ((unsigned __int16)(*(_WORD *)(v44 + 52) + 461) >> 8));
        else
          v123 = 0;
        if (v121 != -1)
        {
          *((_QWORD *)this + 20) = v121 << 14;
          *((_QWORD *)this + 21) = v121 << 14;
        }
        v125 = 0x4000;
      }
      else
      {
        if (!*(_QWORD *)(v43 + 200))
        {
          v34 = *(__int16 *)(v43 + 190);
          *((_DWORD *)this + 104) = v34;
        }
        v125 = MT3BFloatSegmentProducer::sTopOctave[v34] >> (7 - BYTE1(v34));
        v44 = *((_QWORD *)this + 3);
        if (*(_WORD *)(v44 + 52))
        {
          v46 = (v34 + *(__int16 *)(v44 + 52)) & ~((v34 + *(__int16 *)(v44 + 52)) >> 31);
          *((_DWORD *)this + 104) = v46;
          v123 = MT3BFloatSegmentProducer::sTopOctave[v46] >> (7 - BYTE1(v46));
        }
        else
        {
          v123 = 0;
        }
      }
    }
    else
    {
      *((_QWORD *)this + 18) = MT3BFloatSegmentProducer::sTopOctave[v142] >> (3 - BYTE1(v142));
      v44 = *((_QWORD *)this + 3);
      v123 = 0;
      v125 = 0;
      if (*(_WORD *)(v44 + 52))
      {
        v45 = (*(__int16 *)(v44 + 52) + v142) & ~((*(__int16 *)(v44 + 52) + v142) >> 31);
        *((_DWORD *)this + 104) = v45;
        *((_QWORD *)this + 19) = MT3BFloatSegmentProducer::sTopOctave[v45] >> (3 - BYTE1(v45));
      }
    }
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = *((float *)this + 27);
    v51 = *((float *)this + 106) * v50;
    v52 = *((float *)this + 44);
    v129 = v29 / v30;
    v131 = (float)(v50 - v52) * 0.03125;
    v53 = 0.0;
    v54 = 0.5;
    *((float *)this + 44) = v50;
    v55 = (_QWORD *)((char *)this + 128);
    v56 = 0.0;
    v57 = 0.0;
    v58 = 0.0;
    v59 = 0.0;
    v60 = 0.0;
    while (1)
    {
      if (v49 > 7)
      {
        v61 = *((float *)this + 27);
      }
      else
      {
        v61 = v131 + v52;
        ++v49;
        v52 = v131 + v52;
      }
      *((float *)this + 26) = v61;
      if (v61 != 0.0)
        break;
      v73 = *((float *)this + 28);
      if (v73 != 0.0
        || *((float *)this + 99) != 0.0
        || *((float *)this + 100) != 0.0
        || *((float *)this + 101) != 0.0
        || *((float *)this + 102) != 0.0
        || *((float *)this + 103) != 0.0
        || *((float *)this + 29) != 0.0)
      {
        v62 = (*((_WORD *)this + 60) + 1) & 0x7FF;
        *((_WORD *)this + 60) = v62;
        *((_DWORD *)this + 107) = 0;
        *((_DWORD *)this + 44) = 0;
        *v55 = 0;
        *((_QWORD *)this + 17) = 0;
        if (v73 != 0.0)
        {
          LODWORD(v74) = 0;
          v75 = 0.0;
          goto LABEL_103;
        }
        v85 = 0.0;
        v86 = v62;
LABEL_109:
        v104 = (float)(MT3BFloatSegmentProducer::sNoiseWave[v86] * (float)*(__int16 *)(*((_QWORD *)this + 2) + 16))
             * 0.00012207;
        v105 = *((float *)this + 29);
        if (v105 != 0.0)
          v60 = v105 * v104;
        if (*((float *)this + 99) != 0.0)
        {
          v106 = *((float *)this + 57);
          v59 = (float)((float)(*((float *)this + 76) * v106) + (float)(v141 * v104))
              + (float)(*((float *)this + 77) * *((float *)this + 58));
          *((float *)this + 57) = v59;
          *((float *)this + 58) = v106;
        }
        if (*((float *)this + 100) != 0.0)
        {
          v107 = *((float *)this + 59);
          v58 = (float)((float)(*((float *)this + 79) * v107) + (float)(v139 * v104))
              + (float)(*((float *)this + 80) * *((float *)this + 60));
          *((float *)this + 59) = v58;
          *((float *)this + 60) = v107;
        }
        if (*((float *)this + 101) != 0.0)
        {
          v108 = *((float *)this + 61);
          v57 = (float)((float)(*((float *)this + 91) * v108) + (float)(v137 * v104))
              + (float)(*((float *)this + 92) * *((float *)this + 62));
          *((float *)this + 61) = v57;
          *((float *)this + 62) = v108;
        }
        if (*((float *)this + 102) != 0.0)
        {
          v109 = *((float *)this + 53);
          v56 = (float)((float)(*((float *)this + 85) * v109) + (float)(v135 * v104))
              + (float)(*((float *)this + 86) * *((float *)this + 54));
          *((float *)this + 53) = v56;
          *((float *)this + 54) = v109;
        }
        if (*((float *)this + 103) != 0.0)
        {
          v110 = *((float *)this + 55);
          v53 = (float)((float)(*((float *)this + 88) * v110) + (float)(v133 * v104))
              + (float)(*((float *)this + 89) * *((float *)this + 56));
          *((float *)this + 55) = v53;
          *((float *)this + 56) = v110;
        }
        v111 = v85 + (float)((float)((float)((float)((float)(v60 - v58) + v57) - v56) + v53) - v59);
        if ((MTBEDebugFlags::sMEOWDebug & 4) != 0)
        {
          v143 = v52;
          printf("S\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\n", v111, v85, v60, v59, v58, v57, v56, v53);
          v54 = 0.5;
          v52 = v143;
          v44 = *((_QWORD *)this + 3);
        }
        if (*(__int16 *)(v44 + 308) >= 1)
        {
          v112 = (float)(v111 * 1.25) + (float)(*((float *)this + 108) * -0.75);
          *((float *)this + 108) = v111 * 1.25;
          v111 = v112 + (float)((float)(v111 * 1.25) * v54);
        }
        if (v144 > 0.0)
        {
          v113 = 0;
          v114 = *((__int16 *)this + 218);
          *((float *)this + *((__int16 *)this + 218) + 124) = v111;
          v115 = 0.0;
          do
          {
            v116 = v114 - *(__int16 *)((char *)this + v113 + 486);
            if (v116 < 0)
              v116 += *((__int16 *)this + 219);
            v115 = v115 + *((float *)this + v116 + 124);
            v113 -= 2;
          }
          while (v113 != -8);
          v111 = v111 + (float)((float)((float)(v115 + *((float *)this + 116)) * 0.125) * *((float *)this + 111));
          *((float *)this + 116) = v115;
          if (*((__int16 *)this + 219) > (__int16)(v114 + 1))
            v117 = v114 + 1;
          else
            v117 = 0;
          *((_WORD *)this + 218) = v117;
        }
        v48 = 0;
        v118 = *(_QWORD *)a2;
        *(float *)(*(_QWORD *)a2 + 4 * v47) = (float)(*((float *)this + 107)
                                                    + (float)((float)(v111 - *((float *)this + 107)) * v54))
                                            + (float)(*((float *)this + 107)
                                                    + (float)((float)(v111 - *((float *)this + 107)) * v54));
        *(float *)(v118 + ((4 * v47) | 4)) = v111 + v111;
        *((float *)this + 107) = v111;
        goto LABEL_135;
      }
      *((_DWORD *)this + 107) = 0;
      *((_DWORD *)this + 44) = 0;
      *v55 = 0;
      *((_QWORD *)this + 17) = 0;
      *(_QWORD *)(*(_QWORD *)a2 + 4 * v47) = 0;
      v48 += 2;
LABEL_135:
      v119 = v47 >= 0x6E;
      v47 += 2;
      if (v119)
      {
        *((_WORD *)this + 226) = (v48 > 30) << 12;
        Frame = v122;
        return Frame != 0;
      }
    }
    LODWORD(v62) = (*((_WORD *)this + 60) + 1) & 0x7FF;
    *((_WORD *)this + 60) = v62;
    v63 = *((_QWORD *)this + 2);
    v64 = *(unsigned __int16 *)(v63 + 210);
    if (v64 != 1)
    {
      v76 = *(unsigned __int16 *)(v44 + 52);
      v77 = 0.0;
      goto LABEL_97;
    }
    if (v127)
      v65 = *(unsigned __int16 *)(v44 + 288) == 0;
    else
      v65 = 1;
    v66 = v65;
    v67 = *((_QWORD *)this + 20) + v125;
    *((_QWORD *)this + 20) = v67;
    if ((v126 & 0x10) == 0)
      v66 = 1;
    if (v66 == 1)
    {
      v68 = v67 >> 14;
      v69 = *(_QWORD *)(v63 + 216);
      v70 = __OFSUB__(v68, v69);
      v71 = v68 - v69;
      if (v71 < 0 != v70)
        goto LABEL_88;
      v68 = v71 + *(int *)(v44 + 290);
      v72 = v68 << 14;
    }
    else
    {
      v72 = 0;
      v68 = 0;
    }
    *((_QWORD *)this + 20) = v72;
LABEL_88:
    v78 = *(_QWORD *)(v63 + 232);
    v79 = (float)(*(unsigned __int8 *)(v78 + v68) - 128) * 12.0;
    v76 = *(unsigned __int16 *)(v44 + 52);
    if (!*(_WORD *)(v44 + 52))
    {
LABEL_96:
      v77 = v61 * (float)(v79 * *((float *)this + 105));
LABEL_97:
      v87 = *((_DWORD *)this + 32) + *((_DWORD *)this + 36);
      *((_QWORD *)this + 16) = *(_QWORD *)&v87 & 0xFFFFFFLL;
      v74 = BYTE2(v87);
      v88 = (float)*(__int16 *)(v63 + 2 * v74 + 274);
      if (v64 != 1 && v76 != 0)
      {
        v90 = *((_DWORD *)this + 34) + *((_DWORD *)this + 38);
        *((_QWORD *)this + 17) = *(_QWORD *)&v90 & 0xFFFFFFLL;
        LODWORD(v74) = BYTE2(v90);
        v88 = (float)(v88 + (float)*(__int16 *)(v63 + 2 * BYTE2(v90) + 786)) * v54;
      }
      v75 = v77 + (float)(v88 * v61);
      v73 = *((float *)this + 28);
LABEL_103:
      v86 = v62;
      v91 = v75 + (float)(MT3BFloatSegmentProducer::sBandNoise[v62] * v73);
      if (v51 != 0.0 && (int)v74 > *(__int16 *)(v44 + 14))
        v91 = v91 + (float)(*(float *)(*((_QWORD *)this + 59) + 4 * v62) * v51);
      if (v26 != v27)
      {
        v92 = *((float *)this + 63);
        v93 = (float)(v91 + (float)(*((float *)this + 94) * v92))
            + (float)(*((float *)this + 95) * *((float *)this + 64));
        *((float *)this + 63) = v91;
        *((float *)this + 64) = v92;
        v94 = *((float *)this + 65);
        v91 = (float)((float)(v129 * v93) + (float)(*((float *)this + 97) * v94))
            + (float)(*((float *)this + 98) * *((float *)this + 66));
        *((float *)this + 66) = v94;
        *((float *)this + 65) = v91;
      }
      v95 = *((float *)this + 45);
      v96 = (float)((float)(*((float *)this + 73) * v95) + (float)(*((float *)this + 72) * v91))
          + (float)(*((float *)this + 74) * *((float *)this + 46));
      *((float *)this + 45) = v96;
      *((float *)this + 46) = v95;
      v97 = *((float *)this + 47);
      v98 = (float)((float)(*((float *)this + 76) * v97) + (float)(*((float *)this + 75) * v96))
          + (float)(*((float *)this + 77) * *((float *)this + 48));
      *((float *)this + 47) = v98;
      *((float *)this + 48) = v97;
      v99 = *((float *)this + 49);
      v100 = (float)((float)(*((float *)this + 79) * v99) + (float)(*((float *)this + 78) * v98))
           + (float)(*((float *)this + 80) * *((float *)this + 50));
      v101 = *((float *)this + 51);
      v102 = *((float *)this + 52);
      v103 = (float)(*((float *)this + 82) * v101) + (float)(*((float *)this + 81) * v100);
      *((float *)this + 49) = v100;
      *((float *)this + 50) = v99;
      v85 = v103 + (float)(*((float *)this + 83) * v102);
      *((float *)this + 51) = v85;
      *((float *)this + 52) = v101;
      goto LABEL_109;
    }
    v80 = *((_QWORD *)this + 21) + v123;
    *((_QWORD *)this + 21) = v80;
    if (v66)
    {
      v81 = v80 >> 14;
      v82 = *(_QWORD *)(v63 + 216);
      v70 = __OFSUB__(v81, v82);
      v83 = v81 - v82;
      if (v83 < 0 != v70)
      {
LABEL_95:
        v79 = (float)(v79 + (float)((float)(*(unsigned __int8 *)(v78 + v81) - 128) * 12.0)) * v54;
        goto LABEL_96;
      }
      v81 = v83 + *(int *)(v44 + 290);
      v84 = v81 << 14;
    }
    else
    {
      v84 = 0;
      v81 = 0;
    }
    *((_QWORD *)this + 21) = v84;
    goto LABEL_95;
  }
  return Frame != 0;
}

void sub_1D22A21B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10D0C4050FF3235);
  _Unwind_Resume(a1);
}

float MT3BFloatSegmentProducer::CalcZeroCoefficients(MT3BFloatSegmentProducer *this, float a2, float a3, float *a4, float *a5, float *a6)
{
  uint64_t v6;
  float v7;
  float result;

  if (a3 > 1225.0)
    a3 = 1225.0;
  v6 = (uint64_t)((unint64_t)(((int)a3 - 50) / 5) << 48) >> 46;
  *a6 = -*(float *)((char *)&sCcoeffTbl + v6);
  v7 = -(float)(*(float *)((char *)&sBcoeffTbl + v6) * sCosTbl[(int)a2 - 256]);
  *a5 = v7;
  result = (float)(v7 + 1.0) + *a6;
  *a4 = result;
  return result;
}

void MT3BFloatSegmentProducer::~MT3BFloatSegmentProducer(MT3BFloatSegmentProducer *this)
{
  MTMBProducerComponent::~MTMBProducerComponent(this);
  JUMPOUT(0x1D8233BA8);
}

void MTMBModRateWsola::MTMBModRateWsola(MTMBModRateWsola *this)
{
  MEOWVectorBase *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  vDSP_Length v6;
  CorrelationFFT *v7;

  *(_QWORD *)this = &off_1E9368F98;
  *((_DWORD *)this + 5) = 0;
  v2 = (MTMBModRateWsola *)((char *)this + 24);
  MEOWVectorBase::MEOWVectorBase((MTMBModRateWsola *)((char *)this + 24), 4);
  MEOWVectorBase::MEOWVectorBase((MTMBModRateWsola *)((char *)this + 56), 4);
  MEOWVectorBase::MEOWVectorBase((MTMBModRateWsola *)((char *)this + 88), 4);
  MEOWVectorBase::MEOWVectorBase((MTMBModRateWsola *)((char *)this + 120), 4);
  *((_BYTE *)this + 152) = 1;
  *((_DWORD *)this + 39) = 0;
  *((_QWORD *)this + 1) = 0x1A000000058;
  *((_DWORD *)this + 4) = 208;
  if (*((_QWORD *)this + 6) > 0xCFuLL)
  {
    v3 = 416;
  }
  else
  {
    MEOWVectorBase::Allocate(v2, 0xD0uLL, 1);
    v3 = *((unsigned int *)this + 3);
  }
  *((_QWORD *)this + 5) = 208;
  v4 = v3;
  if (*((_QWORD *)this + 10) < v3)
  {
    MEOWVectorBase::Allocate((MTMBModRateWsola *)((char *)this + 56), v3, 1);
    v4 = *((unsigned int *)this + 3);
  }
  *((_QWORD *)this + 9) = v3;
  v5 = v4;
  if (*((_QWORD *)this + 18) < v4)
  {
    MEOWVectorBase::Allocate((MTMBModRateWsola *)((char *)this + 120), v4, 1);
    v5 = *((unsigned int *)this + 3);
  }
  *((_QWORD *)this + 17) = v4;
  v6 = v5;
  if (*((_QWORD *)this + 14) < v5)
  {
    MEOWVectorBase::Allocate((MTMBModRateWsola *)((char *)this + 88), v5, 1);
    v6 = *((unsigned int *)this + 3);
  }
  *((_QWORD *)this + 13) = v5;
  vDSP_hann_window(*((float **)this + 11), v6, 0);
  (*(void (**)(MTMBModRateWsola *, float))(*(_QWORD *)this + 32))(this, 1.0);
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kModRateUseFFT))
  {
    v7 = (CorrelationFFT *)operator new();
    CorrelationFFT::CorrelationFFT(v7, *((_DWORD *)this + 3), *((_DWORD *)this + 2));
  }
  else
  {
    v7 = (CorrelationFFT *)operator new();
    CorrelationTimeDomain::CorrelationTimeDomain(v7, *((_DWORD *)this + 3));
  }
  *((_QWORD *)this + 22) = v7;
}

void sub_1D22A2458(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  void **v4;
  uint64_t v5;

  MEMORY[0x1D8233BA8](v5, 0x1081C40EA7901CCLL);
  MEOWVectorBase::~MEOWVectorBase(v4);
  MEOWVectorBase::~MEOWVectorBase(v3);
  MEOWVectorBase::~MEOWVectorBase(v2);
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void MTMBModRateWsola::~MTMBModRateWsola(MTMBModRateWsola *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E9368F98;
  v2 = *((_QWORD *)this + 22);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 15);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 11);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 7);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 3);
}

{
  MTMBModRateWsola::~MTMBModRateWsola(this);
  JUMPOUT(0x1D8233BA8);
}

MTFESpeechElement *MTMBModRateWsola::SetScaleFactor(MTFESpeechElement *this, float a2)
{
  uint64_t v3;

  if (*((float *)&this[2].var6 + 1) != a2)
  {
    v3 = (uint64_t)this;
    if ((LODWORD(a2) & 0x7FFFFFFFu) >= 0x7F800000)
    {
      this = MTBEAbort(0);
    }
    *(float *)(v3 + 156) = a2;
    *(_DWORD *)(v3 + 160) = (uint64_t)rintf((float)*(unsigned int *)(v3 + 16) / a2);
  }
  return this;
}

float MTMBModRateWsola::GetScaleFactor(MTMBModRateWsola *this)
{
  return *((float *)this + 39);
}

uint64_t MTMBModRateWsola::Reset(MTMBModRateWsola *this, float a2)
{
  uint64_t result;

  *((_BYTE *)this + 152) = 1;
  *((_DWORD *)this + 5) = 0;
  result = (*(uint64_t (**)(MTMBModRateWsola *, float))(*(_QWORD *)this + 32))(this, a2);
  *((_DWORD *)this + 41) = 0;
  *((_DWORD *)this + 42) = 0;
  return result;
}

BOOL MTMBModRateWsola::HasEnoughData(MTMBModRateWsola *this, unsigned int a2)
{
  char *v2;
  int v3;

  if (*((_BYTE *)this + 152))
  {
    v2 = (char *)this + 12;
    v3 = *((_DWORD *)this + 4);
  }
  else
  {
    v3 = *((_DWORD *)this + 2) + *((_DWORD *)this + 5) + *((_DWORD *)this + 3);
    v2 = (char *)this + 16;
  }
  return v3 + *(_DWORD *)v2 <= a2;
}

void MTMBModRateWsola::ModifyRate(uint64_t a1, MEOWVectorBase *this, MEOWVectorBase *a3, _DWORD *a4, int a5)
{
  unint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  float v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  vDSP_Length v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v40;
  int v41;
  int v42;
  vDSP_Length __N;
  const float *v44;
  const float *v45;
  const float *v46;
  const float *v47;
  const char *v48;
  void *v49[4];

  *a4 = *((_QWORD *)this + 2);
  v10 = *(unsigned int *)(a1 + 16);
  if (*((_QWORD *)a3 + 2) != v10)
  {
    if (*((_QWORD *)a3 + 3) < v10)
      MEOWVectorBase::Allocate(a3, v10, 1);
    *((_QWORD *)a3 + 2) = v10;
  }
  if (*(_BYTE *)(a1 + 152))
  {
    v11 = 0;
    *(_BYTE *)(a1 + 152) = 0;
    *(_DWORD *)(a1 + 164) = 0;
LABEL_8:
    v12 = *((_DWORD *)this + 4) - v11;
    if (*(_DWORD *)(a1 + 16) < v12)
      v12 = *(_DWORD *)(a1 + 16);
    v13 = v12 & ~(v12 >> 31);
    if (v12 >= 1)
      memcpy(*(void **)a3, (const void *)(*(_QWORD *)this + 4 * v11), 4 * v12);
    if (*((_QWORD *)a3 + 3) < (unint64_t)v13)
      MEOWVectorBase::Allocate(a3, v13, 1);
    *((_QWORD *)a3 + 2) = v13;
    goto LABEL_15;
  }
  v11 = *(_DWORD *)(a1 + 20);
  if (*(float *)(a1 + 156) == 1.0)
    goto LABEL_8;
  v31 = *(_DWORD *)(a1 + 8);
  v32 = *((_DWORD *)this + 4);
  v33 = v32 - *(_DWORD *)(a1 + 12);
  if ((int)v33 >= v31 + v11)
    v34 = (v31 + v11);
  else
    v34 = v33;
  v35 = v32 - v11;
  if (v32 >= v11)
  {
    v36 = (v11 - v31) & ~((v11 - v31) >> 31);
    if ((int)v34 <= (int)v36)
    {
      v40 = *(_DWORD *)(a1 + 16);
      if (v40 >= v35)
        v41 = v35;
      else
        v41 = *(_DWORD *)(a1 + 16);
      if (v41 >= 1)
      {
        memcpy(*(void **)(a1 + 120), (const void *)(*(_QWORD *)this + 4 * v11), 4 * v41);
        v40 = *(_DWORD *)(a1 + 16);
      }
      v26 = __OFSUB__(v40, v41);
      v42 = v40 - v41;
      if (!((v42 < 0) ^ v26 | (v42 == 0)))
        bzero((void *)(*(_QWORD *)(a1 + 120) + 4 * v41), 4 * v42);
      if ((MTBEDebugFlags::sMTXDebug & 0x20000) != 0)
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "WSOLA overlap-add %d %d\n", v11, *((_QWORD *)this + 2));
      __N = *(unsigned int *)(a1 + 16);
      v44 = *(const float **)(a1 + 88);
      v45 = &v44[__N];
      v46 = *(const float **)(a1 + 24);
      v47 = *(const float **)(a1 + 120);
    }
    else
    {
      v37 = *(_DWORD *)(a1 + 164);
      v38 = *(_DWORD *)(a1 + 172);
      if (v37 + (int)v36 > v38 || v37 + (int)v34 < v38)
      {
        v11 = (*(uint64_t (**)(_QWORD, MEOWVectorBase *, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 176) + 16))(*(_QWORD *)(a1 + 176), this, a1 + 56, a1 + 88, v36, v34);
        v48 = "highest correlation";
      }
      else
      {
        v11 = v38 - v37;
        v48 = "optimal";
      }
      if ((MTBEDebugFlags::sMTXDebug & 0x20000) != 0)
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "WSOLA found %s %d %d %d %d\n", v48, v11, *((_QWORD *)this + 2), v36, v34);
      __N = *(unsigned int *)(a1 + 16);
      v44 = *(const float **)(a1 + 88);
      v45 = &v44[__N];
      v46 = *(const float **)(a1 + 24);
      v47 = (const float *)(*(_QWORD *)this + 4 * v11);
    }
    vDSP_vmma(v45, 1, v46, 1, v44, 1, v47, 1, *(float **)a3, 1, __N);
  }
  else
  {
    if ((MTBEDebugFlags::sMTXDebug & 0x20000) != 0)
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "WSOLA no data %d %d\n", *(_DWORD *)(a1 + 20), v32);
    memcpy(*(void **)a3, *(const void **)(a1 + 24), 4 * *(unsigned int *)(a1 + 16));
  }
LABEL_15:
  if ((MTBEDebugFlags::sMTXDebug & 0x20000) != 0)
  {
    v14 = (double)(*(_DWORD *)(a1 + 164) + v11) / 22050.0;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%d %d [%f,%f]\n", v11, *(_DWORD *)(a1 + 164), v14, v14 + 0.02);
  }
  v15 = *(_DWORD *)(a1 + 16);
  if (a5)
  {
    v16 = (v15 + v11);
    v17 = *((_QWORD *)this + 2);
    if (v17 > v16)
      MEOWVectorBase::Append(a3, (const void *)(*(_QWORD *)this + 4 * v16), (uint64_t)(*(_QWORD *)this + 4 * v17 - (*(_QWORD *)this + 4 * v16)) >> 2);
    MEOWVectorBase::clear((void **)this);
    if ((MTBEDebugFlags::sMTXDebug & 0x20000) != 0)
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "last segment [%f,%f]\n", (double)(*(_DWORD *)(a1 + 16) + v11 + *(_DWORD *)(a1 + 164)) / 22050.0, (double)(unint64_t)(*((_QWORD *)this + 2) + *(int *)(a1 + 164)) / 22050.0);
    (*(void (**)(uint64_t, float))(*(_QWORD *)a1 + 48))(a1, *(float *)(a1 + 156));
    bzero(*(void **)(a1 + 24), 4 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    v18 = *((_DWORD *)this + 4) - (v15 + v11);
    if (v18 >= v15)
      v18 = *(_DWORD *)(a1 + 16);
    v19 = v18 & ~(v18 >> 31);
    if (v18 >= 1)
    {
      memcpy(*(void **)(a1 + 24), (const void *)(*(_QWORD *)this + 4 * (v15 + v11)), 4 * v18);
      v15 = *(_DWORD *)(a1 + 16);
    }
    if (v15 > v19)
    {
      bzero((void *)(*(_QWORD *)(a1 + 24) + 4 * v19), 4 * (v15 - v19));
      v15 = *(_DWORD *)(a1 + 16);
    }
    v20 = v15 + v11;
    *(_DWORD *)(a1 + 172) = v20 + *(_DWORD *)(a1 + 164);
    v21 = *(_DWORD *)(a1 + 12);
    v22 = *((_DWORD *)this + 4) - v20;
    if ((int)v22 >= (int)v21)
      v23 = v21;
    else
      v23 = v22;
    v24 = v23 & ~((int)v23 >> 31);
    if ((int)v23 >= 1)
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 24))(*(_QWORD *)(a1 + 176)))
        vDSP_vmul(*(const float **)(a1 + 88), 1, (const float *)(*(_QWORD *)this + 4 * (*(_DWORD *)(a1 + 16) + v11)), 1, *(float **)(a1 + 56), 1, v23);
      else
        memcpy(*(void **)(a1 + 56), (const void *)(*(_QWORD *)this + 4 * (*(_DWORD *)(a1 + 16) + v11)), 4 * v23);
    }
    v25 = *(_DWORD *)(a1 + 12);
    v26 = __OFSUB__(v25, v24);
    v27 = v25 - v24;
    if (!((v27 < 0) ^ v26 | (v27 == 0)))
      bzero((void *)(*(_QWORD *)(a1 + 56) + 4 * v24), 4 * v27);
    v28 = *(_DWORD *)(a1 + 160) + *(_DWORD *)(a1 + 20);
    v29 = v28 - *(_DWORD *)(a1 + 8);
    a4[1] = v29;
    if (v29 < 0)
    {
      *(_DWORD *)(a1 + 20) = v28;
    }
    else
    {
      v30 = *((_QWORD *)this + 2);
      if (v29 >= (int)v30)
      {
        *(_DWORD *)(a1 + 20) = v28 - v30;
        *(_DWORD *)(a1 + 164) += v30;
        MEOWVectorBase::clear((void **)this);
      }
      else
      {
        MEOWVector<float>::MEOWVector((MEOWVectorBase *)v49, (const void *)(*(_QWORD *)this + 4 * v29), *(_QWORD *)this + 4 * v30);
        MEOWVector<float>::operator=((uint64_t *)this, (const MEOWVectorBase *)v49);
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 164) += v29;
        MEOWVectorBase::~MEOWVectorBase(v49);
      }
    }
    ++*(_DWORD *)(a1 + 168);
  }
}

void sub_1D22A2C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

void MEOWVector<float>::operator=(uint64_t *a1, const MEOWVectorBase *a2)
{
  void *v3[4];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v3, a2);
  MEOWVectorBase::Swap(a1, (MEOWVectorBase *)v3);
  MEOWVectorBase::~MEOWVectorBase(v3);
}

void sub_1D22A2C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  MEOWVectorBase::~MEOWVectorBase(&a9);
  _Unwind_Resume(a1);
}

void CorrelationFFT::CorrelationFFT(CorrelationFFT *this, int a2, int a3)
{
  MEOWVectorBase *v6;
  unint64_t v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E9368FE0;
  v6 = (CorrelationFFT *)((char *)this + 8);
  MEOWVectorBase::MEOWVectorBase((CorrelationFFT *)((char *)this + 8), 4);
  *((_DWORD *)this + 28) = a3;
  *((_DWORD *)this + 29) = a2;
  v7 = vcvtps_u32_f32(log2f((float)(2 * (a3 + a2) - 2)));
  *((_QWORD *)this + 12) = v7;
  v8 = (1 << v7);
  *((_DWORD *)this + 26) = v8;
  *((_DWORD *)this + 27) = v8 >> 1;
  if (*((_QWORD *)this + 4) < v8)
    MEOWVectorBase::Allocate(v6, v8, 1);
  *((_QWORD *)this + 3) = v8;
  *((_QWORD *)this + 5) = operator new[]();
  *((_QWORD *)this + 6) = operator new[]();
  *((_QWORD *)this + 7) = operator new[]();
  *((_QWORD *)this + 8) = operator new[]();
  *((_QWORD *)this + 9) = operator new[]();
  *((_QWORD *)this + 10) = operator new[]();
  *((_QWORD *)this + 11) = vDSP_create_fftsetup(*((_QWORD *)this + 12), 0);
}

void sub_1D22A2E04(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

float *CorrelationFFT::allocComplexSplit(CorrelationFFT *this, DSPSplitComplex *a2)
{
  float *result;

  a2->realp = (float *)operator new[]();
  result = (float *)operator new[]();
  a2->imagp = result;
  return result;
}

void CorrelationFFT::~CorrelationFFT(CorrelationFFT *this)
{
  float *v2;
  float *v3;

  *(_QWORD *)this = &off_1E9368FE0;
  v2 = CorrelationFFT::deallocComplexSplit(this, (DSPSplitComplex *)((char *)this + 40));
  v3 = CorrelationFFT::deallocComplexSplit((CorrelationFFT *)v2, (DSPSplitComplex *)((char *)this + 56));
  CorrelationFFT::deallocComplexSplit((CorrelationFFT *)v3, (DSPSplitComplex *)((char *)this + 72));
  vDSP_destroy_fftsetup(*((FFTSetup *)this + 11));
  MEOWVectorBase::~MEOWVectorBase((void **)this + 1);
}

{
  CorrelationFFT::~CorrelationFFT(this);
  JUMPOUT(0x1D8233BA8);
}

float *CorrelationFFT::deallocComplexSplit(CorrelationFFT *this, DSPSplitComplex *a2)
{
  float *result;

  if (a2->realp)
    MEMORY[0x1D8233B90](a2->realp, 0x1000C8052888210);
  result = a2->imagp;
  if (result)
    JUMPOUT(0x1D8233B90);
  return result;
}

uint64_t CorrelationFFT::FindBestCorrelationIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  const DSPSplitComplex *v11;
  size_t v12;
  size_t v13;
  signed int v14;
  signed int v15;
  int v16;
  vDSP_Length v18;
  float __C;

  v11 = (const DSPSplitComplex *)(a1 + 40);
  v12 = 4 * *(int *)(a1 + 108);
  bzero(*(void **)(a1 + 40), v12);
  bzero(*(void **)(a1 + 48), v12);
  v13 = 4 * *(int *)(a1 + 108);
  bzero(*(void **)(a1 + 56), v13);
  bzero(*(void **)(a1 + 64), v13);
  v14 = (a6 - a5 + *(_DWORD *)(a1 + 116)) & 0xFFFFFFFE;
  if ((int)((*(_DWORD *)(a2 + 16) - a5 - (*(_DWORD *)(a1 + 116) >> 1)) & 0xFFFFFFFE) >= v14)
    v15 = (a6 - a5 + *(_DWORD *)(a1 + 116)) & 0xFFFFFFFE;
  else
    v15 = (*(_DWORD *)(a2 + 16) - a5 - (*(_DWORD *)(a1 + 116) >> 1)) & 0xFFFFFFFE;
  v16 = *(_DWORD *)(a3 + 16);
  vDSP_ctoz((const DSPComplex *)(*(_QWORD *)a2 + 4 * a5), 2, v11, 1, (uint64_t)v14 >> 1);
  vDSP_ctoz(*(const DSPComplex **)a3, 2, (const DSPSplitComplex *)(a1 + 56), 1, (uint64_t)v16 >> 1);
  vDSP_fft_zrip(*(FFTSetup *)(a1 + 88), v11, 1, *(_QWORD *)(a1 + 96), 1);
  vDSP_fft_zrip(*(FFTSetup *)(a1 + 88), (const DSPSplitComplex *)(a1 + 56), 1, *(_QWORD *)(a1 + 96), 1);
  vDSP_zvcmul((const DSPSplitComplex *)(a1 + 56), 1, v11, 1, (const DSPSplitComplex *)(a1 + 72), 1, *(unsigned int *)(a1 + 108));
  vDSP_fft_zrip(*(FFTSetup *)(a1 + 88), (const DSPSplitComplex *)(a1 + 72), 1, *(_QWORD *)(a1 + 96), -1);
  bzero(*(void **)(a1 + 8), 4 * *(_QWORD *)(a1 + 24));
  vDSP_ztoc((const DSPSplitComplex *)(a1 + 72), 1, *(DSPComplex **)(a1 + 8), 2, *(unsigned int *)(a1 + 108));
  __C = 0.0;
  v18 = 0;
  vDSP_maxvi(*(const float **)(a1 + 8), 1, &__C, &v18, v15);
  return (v18 + a5);
}

void CorrelationFFT::zeroFillComplexSplit(CorrelationFFT *this, DSPSplitComplex *a2, int a3)
{
  size_t v4;

  v4 = 4 * a3;
  bzero(a2->realp, v4);
  bzero(a2->imagp, v4);
}

void CorrelationTimeDomain::CorrelationTimeDomain(CorrelationTimeDomain *this, unsigned int a2)
{
  MEOWVectorBase *v4;

  *(_QWORD *)this = &off_1E9369010;
  v4 = (CorrelationTimeDomain *)((char *)this + 8);
  MEOWVectorBase::MEOWVectorBase((CorrelationTimeDomain *)((char *)this + 8), 4);
  *((_DWORD *)this + 10) = a2;
  if (*((_QWORD *)this + 4) < (unint64_t)a2)
    MEOWVectorBase::Allocate(v4, a2, 1);
  *((_QWORD *)this + 3) = a2;
}

void sub_1D22A31A0(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CorrelationTimeDomain::FindBestCorrelationIndex(uint64_t a1, _QWORD *a2, const float **a3, uint64_t a4, unsigned int a5, int a6)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  float v15;
  float __C;
  void *__dst[4];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__dst, 4, *(unsigned int *)(a4 + 16));
  v12 = 0;
  __C = 0.0;
  if ((int)a5 <= a6)
  {
    LODWORD(v12) = 0;
    v13 = a6 + 1;
    v14 = 4 * (int)a5;
    v15 = 3.4028e38;
    do
    {
      memcpy(__dst[0], (const void *)(*a2 + v14), 4 * *(unsigned int *)(a1 + 40));
      vDSP_vmsb(*(const float **)a4, 1, (const float *)__dst[0], 1, *a3, 1, *(float **)(a1 + 8), 1, *(unsigned int *)(a1 + 40));
      vDSP_svemg(*(const float **)(a1 + 8), 1, &__C, *(unsigned int *)(a1 + 40));
      if (__C > v15)
      {
        v12 = v12;
      }
      else
      {
        v15 = __C;
        v12 = a5;
      }
      v14 += 4;
      ++a5;
    }
    while (v13 != a5);
  }
  MEOWVectorBase::~MEOWVectorBase(__dst);
  return v12;
}

void sub_1D22A32C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

MTMBModRateWsola *MTMBModRate::CreateConcreteModifier(MTMBModRate *this)
{
  MTMBModRateWsola *v1;

  v1 = (MTMBModRateWsola *)operator new();
  MTMBModRateWsola::MTMBModRateWsola(v1);
  return v1;
}

void sub_1D22A331C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40A4BB592CLL);
  _Unwind_Resume(a1);
}

void CorrelationTimeDomain::~CorrelationTimeDomain(void **this)
{
  *this = &off_1E9369010;
  MEOWVectorBase::~MEOWVectorBase(this + 1);
}

{
  *this = &off_1E9369010;
  MEOWVectorBase::~MEOWVectorBase(this + 1);
  JUMPOUT(0x1D8233BA8);
}

uint64_t CorrelationTimeDomain::ShouldApplyAnalysisWindowToReference(CorrelationTimeDomain *this)
{
  return 1;
}

uint64_t CorrelationFFT::ShouldApplyAnalysisWindowToReference(CorrelationFFT *this)
{
  return 0;
}

MEOWVectorBase *MEOWVector<float>::MEOWVector(MEOWVectorBase *a1, const void *a2, uint64_t a3)
{
  MEOWVectorBase *v6;

  MEOWVectorBase::MEOWVectorBase(a1, 4);
  MEOWVectorBase::Append(v6, a2, (a3 - (uint64_t)a2) >> 2);
  return a1;
}

void sub_1D22A3408(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

uint64_t MTMBPitchInterpolatorBase::SetEstimatedLength(uint64_t this, float a2)
{
  float v2;

  v2 = *(float *)(this + 8) * (float)(*(float *)(this + 12) / a2);
  if (v2 > 4.0)
    v2 = 4.0;
  *(float *)(this + 8) = v2;
  *(float *)(this + 12) = a2;
  return this;
}

void MTMBModelPitchInterpolator::MTMBModelPitchInterpolator(MTMBModelPitchInterpolator *this, const float *a2, int a3)
{
  *((_DWORD *)this + 2) = 1065353216;
  *((float *)this + 3) = (float)a3 * 110.25;
  *(_QWORD *)this = &off_1E93690F0;
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 6) = a3;
}

{
  *((_DWORD *)this + 2) = 1065353216;
  *((float *)this + 3) = (float)a3 * 110.25;
  *(_QWORD *)this = &off_1E93690F0;
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 6) = a3;
}

uint64_t MTMBModelPitchInterpolator::PeriodLenAtSample(MTMBModelPitchInterpolator *this, float a2, float a3)
{
  float v3;
  uint64_t v4;
  float *v5;
  float v6;
  int v7;

  v3 = (float)(*((float *)this + 2) * a2) * 0.0090703;
  v4 = *((int *)this + 6) - 1;
  if (v3 >= (float)(int)v4)
  {
    v6 = *(float *)(*((_QWORD *)this + 2) + 4 * v4);
  }
  else
  {
    v5 = (float *)(*((_QWORD *)this + 2) + 4 * (int)vcvtms_s32_f32(v3));
    v6 = *v5 + (float)((float)(v5[1] - *v5) * (float)(v3 - floorf(v3)));
  }
  v7 = (int)(float)(22050.0 / v6);
  if (v7 >= 512)
    return 512;
  else
    return v7;
}

void MTMBSlackPitchInterpolator::MTMBSlackPitchInterpolator(MTMBSlackPitchInterpolator *this, const float *a2, int a3)
{
  float *v5;
  char v6;

  *((_DWORD *)this + 2) = 1065353216;
  *((float *)this + 3) = (float)a3 * 110.25;
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 6) = a3;
  *(_QWORD *)this = &off_1E9369138;
  v6 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBUseSlackWindow);
  if (kMTMBPitchSlack)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTMBPitchSlack, (const __CFString *)&dword_1EFC76BA0, v5, *(float *)&dword_1EFC76BA0);
    kMTMBPitchSlack = 0;
  }
  MEOWUnitCostWindow::MEOWUnitCostWindow((MTMBSlackPitchInterpolator *)((char *)this + 32), a3, v6, *(float *)&dword_1EFC76BA0 / 100.0);
}

uint64_t MTMBSlackPitchInterpolator::PeriodLenAtSample(MTMBSlackPitchInterpolator *this, float a2, float a3)
{
  float v3;
  uint64_t v4;
  float v5;
  float v6;
  int v7;

  v3 = (float)(*((float *)this + 2) * a2) * 0.0090703;
  v4 = *((int *)this + 6) - 1;
  if (v3 >= (float)(int)v4)
  {
    v5 = *(float *)(*((_QWORD *)this + 2) + 4 * v4);
  }
  else
  {
    v4 = (int)vcvtms_s32_f32(v3);
    v5 = *(float *)(*((_QWORD *)this + 2) + 4 * v4)
       + (float)((float)(*(float *)(*((_QWORD *)this + 2) + 4 * v4 + 4) - *(float *)(*((_QWORD *)this + 2) + 4 * v4))
               * (float)(v3 - floorf(v3)));
  }
  v6 = *(float *)(*((_QWORD *)this + 4) + 4 * v4);
  v7 = (int)(float)((float)((float)(1.0 - v6) * a3) + (float)((float)(int)(float)(22050.0 / v5) * v6));
  if (v7 >= 512)
    return 512;
  else
    return v7;
}

void MTMBLinearPitchInterpolator::MTMBLinearPitchInterpolator(MTMBLinearPitchInterpolator *this, int a2, float a3, float a4)
{
  float v4;
  float v5;

  *((_DWORD *)this + 2) = 1065353216;
  *(_QWORD *)this = &off_1E9369180;
  v4 = (float)a2 * 110.25;
  *((float *)this + 3) = v4;
  *((float *)this + 4) = a3;
  if (a2)
    v5 = (float)(a4 - a3) / v4;
  else
    v5 = 1.0;
  *((float *)this + 5) = v5;
}

{
  float v4;
  float v5;

  *((_DWORD *)this + 2) = 1065353216;
  *(_QWORD *)this = &off_1E9369180;
  v4 = (float)a2 * 110.25;
  *((float *)this + 3) = v4;
  *((float *)this + 4) = a3;
  if (a2)
    v5 = (float)(a4 - a3) / v4;
  else
    v5 = 1.0;
  *((float *)this + 5) = v5;
}

uint64_t MTMBLinearPitchInterpolator::PeriodLenAtSample(MTMBLinearPitchInterpolator *this, float a2, float a3)
{
  int v3;

  v3 = (int)(float)((float)(*((float *)this + 4) + (float)((float)(*((float *)this + 2) * a2) * *((float *)this + 5)))
                  * a3);
  if (v3 >= 512)
    return 512;
  else
    return v3;
}

void MTMBSawtoothPitchInterpolator::MTMBSawtoothPitchInterpolator(MTMBSawtoothPitchInterpolator *this, int a2, int a3, float a4, float a5, float a6, float a7)
{
  float v7;
  float v8;
  float v9;
  float v10;

  *((_DWORD *)this + 2) = 1065353216;
  *((float *)this + 3) = (float)(a3 + a2) * 110.25;
  *(_QWORD *)this = &off_1E93691C8;
  *((_DWORD *)this + 6) = 1065353216;
  v7 = (float)a2 * 110.25;
  *((_QWORD *)this + 2) = &off_1E9369180;
  *((float *)this + 7) = v7;
  *((float *)this + 8) = a4;
  v8 = 1.0;
  v9 = 1.0;
  if (a2)
    v9 = (float)(a5 - a4) / v7;
  *((float *)this + 9) = v9;
  *((_DWORD *)this + 12) = 1065353216;
  v10 = (float)a3 * 110.25;
  *((_QWORD *)this + 5) = &off_1E9369180;
  *((float *)this + 13) = v10;
  *((float *)this + 14) = a6;
  if (a3)
    v8 = (float)(a7 - a6) / v10;
  *((float *)this + 15) = v8;
  *((float *)this + 16) = v7;
  *((_BYTE *)this + 68) = 0;
}

float *MTMBSawtoothPitchInterpolator::SetEstimatedFirstLength(float *this, float a2)
{
  float v2;
  float v3;
  float v4;

  this[16] = a2;
  v2 = this[6] * (float)(this[7] / a2);
  if (v2 > 4.0)
    v2 = 4.0;
  this[6] = v2;
  this[7] = a2;
  v3 = this[3] - a2;
  v4 = this[12] * (float)(this[13] / v3);
  if (v4 > 4.0)
    v4 = 4.0;
  this[12] = v4;
  this[13] = v3;
  return this;
}

uint64_t MTMBSawtoothPitchInterpolator::PeriodLenAtSample(MTMBSawtoothPitchInterpolator *this, float a2, float a3)
{
  float v3;
  float v4;
  float v5;
  int v6;

  if (*((_BYTE *)this + 68))
  {
    v3 = *((float *)this + 15);
    v4 = (float)(a2 - *((float *)this + 16)) * *((float *)this + 12);
    v5 = *((float *)this + 14);
  }
  else
  {
    v4 = *((float *)this + 6) * a2;
    v5 = *((float *)this + 8);
    v3 = *((float *)this + 9);
  }
  v6 = (int)(float)((float)(v5 + (float)(v4 * v3)) * a3);
  if (v6 >= 512)
    return 512;
  else
    return v6;
}

float MTMBMetaPitchInterpolator::MTMBMetaPitchInterpolator(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  float result;

  *(_DWORD *)(a1 + 8) = 1065353216;
  result = (float)a2 * 110.25;
  *(float *)(a1 + 12) = result;
  *(_QWORD *)a1 = &off_1E9369210;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  return result;
}

{
  float result;

  *(_DWORD *)(a1 + 8) = 1065353216;
  result = (float)a2 * 110.25;
  *(float *)(a1 + 12) = result;
  *(_QWORD *)a1 = &off_1E9369210;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  return result;
}

void MTMBMetaPitchInterpolator::~MTMBMetaPitchInterpolator(MTMBMetaPitchInterpolator *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E9369210;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E9369210;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E9369210;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1D8233BA8);
}

uint64_t MTMBMetaPitchInterpolator::PeriodLenAtSample(MTMBMetaPitchInterpolator *this, float a2, float a3)
{
  float v6;
  int v7;

  v6 = fminf(a2 / *((float *)this + 3), 1.0);
  (*(void (**)(_QWORD, float, float))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), a2, a3);
  return (int)(float)((float)(v6
                                          * (float)(*(int (**)(_QWORD, float, float))(**((_QWORD **)this + 3)
                                                                                               + 16))(*((_QWORD *)this + 3), a2, a3))+ (float)((float)(1.0 - v6) * (float)v7));
}

uint64_t MTMBMetaPitchInterpolator::ForceFirst(MTMBMetaPitchInterpolator *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3));
}

uint64_t MTMBMetaPitchInterpolator::ForceSecond(MTMBMetaPitchInterpolator *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
}

uint64_t MTMBMetaPitchInterpolator::SetEstimatedLength(MTMBMetaPitchInterpolator *this, float a2)
{
  uint64_t result;
  float v5;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  result = (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), a2);
  v5 = *((float *)this + 2) * (float)(*((float *)this + 3) / a2);
  if (v5 > 4.0)
    v5 = 4.0;
  *((float *)this + 2) = v5;
  *((float *)this + 3) = a2;
  return result;
}

uint64_t MTMBMetaPitchInterpolator::SetEstimatedFirstLength(MTMBMetaPitchInterpolator *this, float a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2));
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 3) + 48))(*((_QWORD *)this + 3), a2);
}

uint64_t MTMBPitchInterpolator::CreateWordInterpolator(MTMBPitchInterpolator *this, MTMBDemi *a2)
{
  uint64_t v3;
  const float *v4;
  int v5;
  uint64_t v6;
  float v7;
  double v8;
  float v9;
  float Factor;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  double v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;

  v3 = *((_QWORD *)this + 13);
  v4 = *(const float **)(v3 + 40);
  v5 = *(_DWORD *)(v3 + 32);
  if ((MTMBDemiProperties::UseWordPitch((MTMBDemiProperties *)v3) & 1) == 0)
    goto LABEL_13;
  if (!MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBSilenceConform)
    || (*(_WORD *)(*((_QWORD *)this + 13) + 16) & 8) == 0)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBUseLinearPitch))
    {
      v6 = operator new();
      Factor = MTMBDemi::FirstFactor(this, v7, v8, v9);
      v11 = 1.0;
      v12 = 1.0;
      if (*((_WORD *)this + 43))
      {
        LOWORD(v12) = *((_WORD *)this + 45);
        v12 = (float)LODWORD(v12) / (float)*((unsigned __int16 *)this + 43);
        if (v12 > 4.0)
          v12 = 4.0;
        if (v12 < 0.25)
          v12 = 0.25;
      }
      *(_DWORD *)(v6 + 8) = 1065353216;
      v13 = (float)v5 * 110.25;
      *(_QWORD *)v6 = &off_1E9369180;
      *(float *)(v6 + 12) = v13;
      *(float *)(v6 + 16) = Factor;
      if (v5)
        v11 = (float)(v12 - Factor) / v13;
      *(float *)(v6 + 20) = v11;
      return v6;
    }
LABEL_13:
    v6 = operator new();
    MTMBSlackPitchInterpolator::MTMBSlackPitchInterpolator((MTMBSlackPitchInterpolator *)v6, v4, v5);
    return v6;
  }
  v14 = operator new();
  v18 = MTMBDemi::FirstFactor(this, v15, v16, v17);
  v19 = 1.0;
  v20 = 1.0;
  if (*((_WORD *)this + 43))
  {
    LOWORD(v20) = *((_WORD *)this + 45);
    v20 = (float)LODWORD(v20) / (float)*((unsigned __int16 *)this + 43);
    if (v20 > 4.0)
      v20 = 4.0;
    if (v20 < 0.25)
      v20 = 0.25;
  }
  *(_DWORD *)(v14 + 8) = 1065353216;
  v21 = (float)v5 * 110.25;
  *(_QWORD *)v14 = &off_1E9369180;
  *(float *)(v14 + 12) = v21;
  *(float *)(v14 + 16) = v18;
  if (v5)
    v19 = (float)(v20 - v18) / v21;
  *(float *)(v14 + 20) = v19;
  v22 = operator new();
  *(_DWORD *)(v22 + 8) = 1065353216;
  *(float *)(v22 + 12) = v21;
  *(_QWORD *)v22 = &off_1E93690F0;
  *(_QWORD *)(v22 + 16) = v4;
  *(_DWORD *)(v22 + 24) = v5;
  v6 = operator new();
  *(_DWORD *)(v6 + 8) = 1065353216;
  *(float *)(v6 + 12) = v21;
  *(_QWORD *)v6 = &off_1E9369210;
  *(_QWORD *)(v6 + 16) = v14;
  *(_QWORD *)(v6 + 24) = v22;
  return v6;
}

void sub_1D22A3DBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10C1C404F8B535CLL);
  _Unwind_Resume(a1);
}

float MTMBDemi::FirstFactor(MTMBDemi *this, float a2, double a3, float a4)
{
  unsigned int v4;
  float v5;
  float result;
  unsigned int v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;
  float *v12;
  float v13;
  float v14;

  v4 = *((unsigned __int16 *)this + 42);
  if (!*((_WORD *)this + 42))
    return 1.0;
  LOWORD(a2) = *((_WORD *)this + 44);
  v5 = (float)v4;
  result = (float)LODWORD(a2) / (float)v4;
  v7 = *((_DWORD *)this + 23);
  if (v7)
  {
    LOWORD(v5) = *((_WORD *)this + 45);
    LOWORD(a4) = *((_WORD *)this + 43);
    v8 = (float)((float)LODWORD(v5) / (float)LODWORD(a4)) - result;
    v9 = v8 * 0.5;
    v10 = (float)(v8 / (float)(*((_DWORD *)this + 25) - (v7 + *((_DWORD *)this + 24)))) * (float)v7;
    v13 = v10;
    v14 = v8 * 0.5;
    if (v8 >= 0.0)
      v11 = v10 < v9;
    else
      v11 = v9 < v10;
    v12 = &v14;
    if (v11)
      v12 = &v13;
    result = result - *v12;
  }
  if (result > 4.0)
    result = 4.0;
  if (result < 0.25)
    return 0.25;
  return result;
}

float MTMBDemi::LastFactor(MTMBDemi *this, float a2)
{
  float result;

  if (!*((_WORD *)this + 43))
    return 1.0;
  LOWORD(a2) = *((_WORD *)this + 45);
  result = (float)LODWORD(a2) / (float)*((unsigned __int16 *)this + 43);
  if (result > 4.0)
    result = 4.0;
  if (result < 0.25)
    return 0.25;
  return result;
}

uint64_t MTMBPitchInterpolator::CreateDemiInterpolator(MTMBPitchInterpolator *this, MTMBDemi *a2)
{
  uint64_t v3;
  const float *v4;
  int v5;
  uint64_t v6;
  float v7;
  double v8;
  float v9;
  float Factor;
  float v11;
  float v12;
  float v13;

  v3 = *((_QWORD *)this + 13);
  v4 = *(const float **)(v3 + 40);
  v5 = *(_DWORD *)(v3 + 32);
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBUseLinearPitch)
    && (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLinearSlack) & 1) == 0)
  {
    v6 = operator new();
    Factor = MTMBDemi::FirstFactor(this, v7, v8, v9);
    v11 = 1.0;
    v12 = 1.0;
    if (*((_WORD *)this + 43))
    {
      LOWORD(v12) = *((_WORD *)this + 45);
      v12 = (float)LODWORD(v12) / (float)*((unsigned __int16 *)this + 43);
      if (v12 > 4.0)
        v12 = 4.0;
      if (v12 < 0.25)
        v12 = 0.25;
    }
    *(_DWORD *)(v6 + 8) = 1065353216;
    v13 = (float)v5 * 110.25;
    *(_QWORD *)v6 = &off_1E9369180;
    *(float *)(v6 + 12) = v13;
    *(float *)(v6 + 16) = Factor;
    if (v5)
      v11 = (float)(v12 - Factor) / v13;
    *(float *)(v6 + 20) = v11;
  }
  else
  {
    v6 = operator new();
    MTMBSlackPitchInterpolator::MTMBSlackPitchInterpolator((MTMBSlackPitchInterpolator *)v6, v4, v5);
  }
  return v6;
}

void sub_1D22A3FEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10C1C404F8B535CLL);
  _Unwind_Resume(a1);
}

uint64_t MTMBPitchInterpolator::CreatePhonemeInterpolator(MTMBPitchInterpolator *this, MTMBDemi *a2, MTMBDemi *a3)
{
  uint64_t v5;
  const float *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  float v11;
  double v12;
  float v13;
  float Factor;
  float v15;
  float v16;
  float v17;
  float v19;
  double v20;
  float v21;
  float v22;
  double v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;

  v5 = *((_QWORD *)this + 13);
  v6 = *(const float **)(v5 + 40);
  v7 = *(_DWORD *)(v5 + 32);
  v8 = *(_DWORD *)(*((_QWORD *)a2 + 13) + 32);
  v9 = v8 + v7;
  if (!MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBUseLinearPitch)
    || (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLinearSlack) & 1) != 0
    || *((__int16 *)this + 40) == -1)
  {
    v10 = operator new();
    MTMBSlackPitchInterpolator::MTMBSlackPitchInterpolator((MTMBSlackPitchInterpolator *)v10, v6, v8 + v7);
  }
  else if ((MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBWordLinearPitch) & 1) == 0
         && *((_QWORD *)this + 9) == *((_QWORD *)a2 + 8)
         && *((_WORD *)this + 40)
         && *((_WORD *)a2 + 40))
  {
    v10 = operator new();
    Factor = MTMBDemi::FirstFactor(this, v11, v12, v13);
    v15 = 1.0;
    v16 = 1.0;
    if (*((_WORD *)a2 + 43))
    {
      LOWORD(v16) = *((_WORD *)a2 + 45);
      v16 = (float)LODWORD(v16) / (float)*((unsigned __int16 *)a2 + 43);
      if (v16 > 4.0)
        v16 = 4.0;
      if (v16 < 0.25)
        v16 = 0.25;
    }
    *(_DWORD *)(v10 + 8) = 1065353216;
    v17 = (float)v9 * 110.25;
    *(_QWORD *)v10 = &off_1E9369180;
    *(float *)(v10 + 12) = v17;
    *(float *)(v10 + 16) = Factor;
    if (v9)
      v15 = (float)(v16 - Factor) / v17;
    *(float *)(v10 + 20) = v15;
  }
  else
  {
    v10 = operator new();
    v22 = MTMBDemi::FirstFactor(this, v19, v20, v21);
    v25 = v22;
    v26 = 1.0;
    v27 = 1.0;
    if (*((_WORD *)this + 43))
    {
      LOWORD(v22) = *((_WORD *)this + 45);
      v22 = (float)LODWORD(v22) / (float)*((unsigned __int16 *)this + 43);
      if (v22 > 4.0)
        v22 = 4.0;
      LODWORD(v23) = 0.25;
      if (v22 >= 0.25)
        v27 = v22;
      else
        v27 = 0.25;
    }
    v28 = MTMBDemi::FirstFactor(a2, v22, v23, v24);
    v29 = v28;
    if (*((_WORD *)a2 + 43))
    {
      LOWORD(v28) = *((_WORD *)a2 + 45);
      v30 = (float)LODWORD(v28) / (float)*((unsigned __int16 *)a2 + 43);
      if (v30 > 4.0)
        v30 = 4.0;
      if (v30 >= 0.25)
        v26 = v30;
      else
        v26 = 0.25;
    }
    MTMBSawtoothPitchInterpolator::MTMBSawtoothPitchInterpolator((MTMBSawtoothPitchInterpolator *)v10, v7, v8, v25, v27, v29, v26);
  }
  return v10;
}

void sub_1D22A424C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10C1C404F8B535CLL);
  _Unwind_Resume(a1);
}

float *SetLinearPitchTargets(float *a1, MTMBDemi *this, float *a3, unint64_t a4, float *a5, unint64_t a6, double a7, float a8)
{
  MTMBDemi *v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float *v25;
  unint64_t v26;
  unsigned __int16 v27;
  unint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  unint64_t v31;
  float v32;
  uint64_t v33;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  unint64_t v39;
  float *v40;
  unint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  unint64_t v56;
  _BOOL4 v57;
  unsigned int v58;
  unsigned int v59;
  MTMBDemi *v60;

  v12 = this;
  if (!*((_WORD *)this + 44))
    MTMBDemi::SetFirstPPTarget((uint64_t)this, *((unsigned __int16 *)this + 40), a3);
  v14 = *((_QWORD *)v12 + 9);
  v15 = *((unsigned int *)v12 + 25);
  v16 = (uint64_t)v12 - *(_QWORD *)a1;
  v17 = 0x6DB6DB6DB6DB6DB7 * (v16 >> 4);
  if (v16 < -111)
  {
    v22 = 34 - v17;
    v23 = 34 - v17;
    v19 = &a1[-2 * ((34 - v17) / 0x24uLL)];
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)v19 + 112 * (36 * (v23 / 0x24) - v22) + 3920;
  }
  else
  {
    v18 = v17 + 1;
    v19 = &a1[2 * ((v17 + 1) / 0x24uLL)];
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)v19 + 112 * (v18 % 0x24);
  }
  v24 = (unint64_t)v12;
  v25 = a1;
  v26 = (unint64_t)v12;
  v27 = *((_WORD *)v12 + 41);
LABEL_7:
  v28 = v21 - 4032;
  while (1)
  {
    v29 = v19 == a5;
    if (v21 >= a6)
      v29 = 0;
    if (v19 >= a5 && !v29)
      break;
    v30 = *(unsigned int *)(v21 + 100);
    if ((_DWORD)v30)
    {
      if (*(_QWORD *)(v21 + 64) != v14
        || v25 >= a3 && (v25 != a3 || v24 >= a4)
        || *(char *)(*(_QWORD *)(v21 + 104) + 18) < 0)
      {
        v24 = v21;
        v25 = v19;
        break;
      }
      if (*(_WORD *)(v21 + 82))
        v27 = *(_WORD *)(v21 + 82);
      v14 = *(_QWORD *)(v21 + 72);
      v15 += v30;
      v24 = v21;
      v25 = v19;
      v26 = v21;
    }
    v21 += 112;
    v28 += 112;
    if (v20 == v28)
    {
      v31 = *((_QWORD *)v19 + 1);
      v19 += 2;
      v20 = v31;
      v21 = v31;
      goto LABEL_7;
    }
  }
  if ((MTMBDemi *)v24 == v12)
  {
    MTMBDemi::SetLastPPTarget((uint64_t)v12, *((unsigned __int16 *)v12 + 41), a3);
    return a1;
  }
  v32 = (float)v27;
  v33 = *(unsigned __int16 *)(v24 + 80);
  if (*(_QWORD *)(v24 + 64) == v14)
  {
    MTMBDemi::SetFirstPPTarget(v24, v33, a3);
LABEL_60:
    v50 = (float)v27;
    goto LABEL_63;
  }
  if (*(_WORD *)(v24 + 80))
  {
    v35 = (float)v33;
    if (v32 > (float)v33)
      v36 = v32 / (float)v33;
    else
      v36 = (float)v33 / v32;
    if (kMTMBUnvoicedBackoff)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBUnvoicedBackoff, (const __CFString *)&dword_1EFC76C00, a3, *(float *)&dword_1EFC76C00);
      kMTMBUnvoicedBackoff = 0;
    }
    if (*(float *)&dword_1EFC76C00 != 0.0)
    {
      v37 = (float)*(unsigned int *)(v24 + 92);
      v38 = *(_QWORD *)v25;
      v39 = v24;
      v40 = v25;
      while (1)
      {
        if (v39 == v38)
        {
          v42 = *((_QWORD *)v40 - 1);
          v40 -= 2;
          v38 = v42;
          v41 = v42 + 4032;
        }
        else
        {
          v41 = v39;
        }
        v39 = v41 - 112;
        if (v40 < a1 || v40 == a1 && v39 < (unint64_t)v12)
          break;
        if (*(_DWORD *)(v41 - 12))
        {
          v37 = v37 + (float)*(unsigned int *)(v41 - 16);
          if (*(_WORD *)(v41 - 30))
            break;
        }
      }
      v43 = 1.0;
      if (v37 != 0.0)
        v43 = exp2f(v37 / (float)(*(float *)&dword_1EFC76C00 * 22.05));
      v36 = fmaxf(v36 / v43, 1.0);
    }
    v44 = sqrtf(v36);
    if (v32 <= v35)
    {
      v46 = v44 * v32;
      v45 = v35 / v44;
    }
    else
    {
      v45 = v44 * v35;
      v46 = v32 / v44;
    }
    v50 = (float)(int)v46;
    MTMBDemi::SetFirstPPTarget(v24, (int)v45, a3);
  }
  else
  {
    if ((*(_WORD *)(*(_QWORD *)(v24 + 104) + 16) & 2) == 0
      || (v47 = *((_QWORD *)v12 + 13)) == 0
      || !*(_QWORD *)(v47 + 40)
      || !*(_QWORD *)(v47 + 32))
    {
      v15 += *(unsigned int *)(v24 + 100);
      goto LABEL_60;
    }
    v48 = 22050.0
        / *(float *)(*(_QWORD *)(*(_QWORD *)(v26 + 104) + 40)
                   + 4
                   * (int)vcvtms_s32_f32((float)((float)(*(_DWORD *)(v26 + 100) - *(_DWORD *)(v26 + 96))/ (float)*(unsigned int *)(v26 + 100))* (float)*(unint64_t *)(*(_QWORD *)(v26 + 104) + 32)));
    if (kMTMBFinalSlack)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBFinalSlack, (const __CFString *)&dword_1EFC76BF0, a3, *(float *)&dword_1EFC76BF0);
      kMTMBFinalSlack = 0;
    }
    HIWORD(a8) = 18350;
    v49 = (float)((float)(*(float *)&dword_1EFC76BF0 * v32) + (float)(v48 * (float)(100.0 - *(float *)&dword_1EFC76BF0)))
        * 0.01;
    if (v32 >= v49)
      v50 = (float)v27;
    else
      v50 = (float)((float)(*(float *)&dword_1EFC76BF0 * v32)
                  + (float)(v48 * (float)(100.0 - *(float *)&dword_1EFC76BF0)))
          * 0.01;
  }
LABEL_63:
  v51 = 1.0;
  v52 = 1.0;
  if (*((_WORD *)v12 + 40))
  {
    LOWORD(a8) = *((_WORD *)v12 + 44);
    v52 = (float)LODWORD(a8) / (float)*((unsigned __int16 *)v12 + 40);
  }
  if (v27)
    v51 = v50 / v32;
  v53 = v51 - v52;
  v54 = v53 / (float)v15;
  v55 = 0.0;
LABEL_68:
  v56 = (unint64_t)v12;
  while (1)
  {
    v57 = a1 == v25;
    if (v56 >= v24)
      v57 = 0;
    if (a1 >= v25 && !v57)
      return a1;
    v58 = *(_DWORD *)(v56 + 100);
    if (v58)
    {
      if (v55 != 0.0)
      {
        LOWORD(v53) = *(_WORD *)(v56 + 80);
        MTMBDemi::SetFirstPPTarget(v56, (int)(float)((float)(v52 + (float)(v54 * v55)) * (float)LODWORD(v53)), a3);
        v58 = *(_DWORD *)(v56 + 100);
      }
      *(float *)&v59 = (float)v58;
      v55 = v55 + (float)v58;
      LOWORD(v59) = *(_WORD *)(v56 + 82);
      MTMBDemi::SetLastPPTarget(v56, (int)(float)((float)(v52 + (float)(v54 * v55)) * (float)v59), a3);
    }
    v56 += 112;
    v12 = (MTMBDemi *)((char *)v12 + 112);
    if ((MTMBDemi *)(*(_QWORD *)a1 + 4032) == v12)
    {
      v60 = (MTMBDemi *)*((_QWORD *)a1 + 1);
      a1 += 2;
      v12 = v60;
      goto LABEL_68;
    }
  }
}

uint64_t MTMBDemi::SetFirstPPTarget(uint64_t this, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = this;
  if ((_DWORD)a2)
  {
    v4 = *(_QWORD *)(this + 104);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 40);
      if (v5)
      {
        v6 = *(_QWORD *)(v4 + 32);
        if (v6)
        {
          this = PinPPTarget((float)a2, 22050.0/ *(float *)(v5+ 4* (int)vcvtms_s32_f32((float)((float)*(unsigned int *)(this + 92) / (float)*(unsigned int *)(this + 100))* (float)v6)), this, a2, a3);
          LOWORD(a2) = this;
        }
      }
    }
  }
  *(_WORD *)(v3 + 88) = a2;
  return this;
}

uint64_t MTMBDemi::SetLastPPTarget(uint64_t this, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = this;
  if ((_DWORD)a2)
  {
    v4 = *(_QWORD *)(this + 104);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 40);
      if (v5)
      {
        v6 = *(_QWORD *)(v4 + 32);
        if (v6)
        {
          this = PinPPTarget((float)a2, 22050.0/ *(float *)(v5+ 4* (int)vcvtms_s32_f32((float)((float)(*(_DWORD *)(this + 100) - *(_DWORD *)(this + 96))/ (float)*(unsigned int *)(this + 100))* (float)v6)), this, a2, a3);
          LOWORD(a2) = this;
        }
      }
    }
  }
  *(_WORD *)(v3 + 90) = a2;
  return this;
}

float MTMBDemi::LastModelPP(MTMBDemi *this)
{
  return 22050.0
       / *(float *)(*(_QWORD *)(*((_QWORD *)this + 13) + 40)
                  + 4
                  * (int)vcvtms_s32_f32((float)((float)(*((_DWORD *)this + 25) - *((_DWORD *)this + 24))/ (float)*((unsigned int *)this + 25))* (float)*(unint64_t *)(*((_QWORD *)this + 13) + 32)));
}

uint64_t SetCompromisePitchTargets(MTMBDemi *this, MTMBDemi *a2, float a3, float a4, float a5, float *a6)
{
  BOOL v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  double v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  uint64_t result;
  float *v23;
  FILE *v24;
  const char *v25;
  const char *v26;
  char v27[20];
  char v28[20];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v11 = a3 <= a4;
  v12 = a4 / a3;
  v13 = a3 / a4;
  if (v11)
    v14 = v12;
  else
    v14 = v13;
  if (kMTMBUnvoicedBackoff)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTMBUnvoicedBackoff, (const __CFString *)&dword_1EFC76C00, a6, *(float *)&dword_1EFC76C00);
    kMTMBUnvoicedBackoff = 0;
  }
  if (*(float *)&dword_1EFC76C00 == 0.0)
  {
    v16 = 0.0;
    v17 = 0.0;
  }
  else
  {
    v15 = (float)(*((_DWORD *)a2 + 23) + *((_DWORD *)this + 24)) + a5;
    v16 = 1.0;
    if (v15 != 0.0)
      v16 = exp2f(v15 / (float)(*(float *)&dword_1EFC76C00 * 22.05));
    v14 = fmaxf(v14 / v16, 1.0);
    v17 = v15;
  }
  v18 = sqrtf(v14);
  if (a3 <= a4)
  {
    v19 = v18 * a3;
    MTMBDemi::SetLastPPTarget((uint64_t)this, (int)(float)(v18 * a3), a6);
    v20 = a4 / v18;
    MTMBDemi::SetFirstPPTarget((uint64_t)a2, (int)(float)(a4 / v18), v23);
    result = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLogBoundaryPitch);
    if (!(_DWORD)result)
      return result;
    goto LABEL_15;
  }
  v19 = a3 / v18;
  MTMBDemi::SetLastPPTarget((uint64_t)this, (int)(float)(a3 / v18), a6);
  v20 = v18 * a4;
  MTMBDemi::SetFirstPPTarget((uint64_t)a2, (int)(float)(v18 * a4), v21);
  result = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLogBoundaryPitch);
  if ((result & 1) != 0)
  {
LABEL_15:
    v24 = (FILE *)*MEMORY[0x1E0C80C10];
    v25 = MTMBDemiProperties::Phon(*((MTMBDemiProperties **)this + 13), v28);
    v26 = MTMBDemiProperties::Phon(*((MTMBDemiProperties **)a2 + 13), v27);
    return fprintf(v24, "Compromise %s-%s %5.1f %5.1f -> %5.1f %5.1f [%5.2f] (%f\\%f->%f)\n", v25, v26, a3, a4, v19, v20, v18, v17, a5, v16);
  }
  return result;
}

uint64_t SetCompromisePitchTargets(int a1, MTMBDemi *this, float *a3, MTMBDemi *a4, float a5, float a6, float a7)
{
  return SetCompromisePitchTargets(this, a4, a5, a6, a7, a3);
}

_QWORD *SetLinearSlackPitchTargets(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, unint64_t a6)
{
  unsigned int v6;
  unint64_t v9;
  float *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  MTMBDemiProperties *v19;
  float *v20;
  uint64_t v21;
  float *v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  unint64_t v32;
  uint64_t v33;
  MTMBDemiProperties *v34;
  float *v35;
  unsigned int v36;
  unsigned int v37;
  FILE *v38;
  const char *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  FILE *v45;
  const char *v46;
  char v47;
  float *v48;
  float v49;
  float v50;
  float v51;
  uint64_t v52;
  float *v53;
  float v54;
  uint64_t v55;
  unint64_t v56;
  float v57;
  float v58;
  float v59;
  float *v60;
  unsigned int v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  _BOOL4 v65;
  MTMBDemiProperties *v66;
  unint64_t v67;
  float *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _BOOL4 v76;
  MTMBDemiProperties *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  float v85;
  float *v86;
  float v87;
  float *v88;
  float v89;
  unint64_t v90;
  _BOOL4 v91;
  uint64_t v92;
  float *v93;
  float *v94;
  unint64_t v95;
  unsigned int v96;
  uint64_t v97;
  char v99[16];
  uint64_t v100;

  v9 = a2;
  v100 = *MEMORY[0x1E0C80C00];
  if (MTMBDemiProperties::UseWordPitch(*(MTMBDemiProperties **)(a2 + 104)))
  {
    if (!*(_WORD *)(v9 + 88))
      MTMBDemi::SetFirstPPTarget(v9, *(unsigned __int16 *)(v9 + 80), v11);
    v13 = v9 - *a1;
    v14 = 0x6DB6DB6DB6DB6DB7 * (v13 >> 4);
    if (v13 < -111)
    {
      v28 = 34 - v14;
      v29 = 34 - v14;
      v16 = &a1[-((34 - v14) / 0x24uLL)];
      v17 = *v16;
      v18 = *v16 + 112 * (36 * (v29 / 0x24) - v28) + 3920;
    }
    else
    {
      v15 = v14 + 1;
      v16 = &a1[(v14 + 1) / 0x24uLL];
      v17 = *v16;
      v18 = *v16 + 112 * (v15 % 0x24);
    }
LABEL_20:
    v30 = v17 - v18 + 4032;
    while (1)
    {
      v31 = v16 == a5;
      if (v18 >= a6)
        v31 = 0;
      if (v16 >= a5 && !v31 || *(_DWORD *)(v18 + 100))
        break;
      v18 += 112;
      v30 -= 112;
      if (!v30)
      {
        v32 = v16[1];
        ++v16;
        v17 = v32;
        v18 = v32;
        goto LABEL_20;
      }
    }
    if (v18 == a6)
    {
      MTMBDemi::SetLastPPTarget(v9, *(unsigned __int16 *)(v9 + 82), v11);
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
      {
        v45 = (FILE *)*MEMORY[0x1E0C80C20];
        v46 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
        fprintf(v45, "Pitch \"%s\" (%d:%d) (%d:%d) [%d]\n", v46, *(unsigned __int16 *)(v9 + 80), *(unsigned __int16 *)(v9 + 88), *(unsigned __int16 *)(v9 + 82), *(unsigned __int16 *)(v9 + 90), 779);
      }
    }
    else
    {
      v33 = *(_QWORD *)(v9 + 104);
      if ((*(_WORD *)(v33 + 16) & 8) != 0)
      {
        LOWORD(v6) = *(_WORD *)(v9 + 82);
        v47 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBSilenceConform);
        v49 = 22050.0
            / *(float *)(*(_QWORD *)(*(_QWORD *)(v9 + 104) + 40)
                       + 4
                       * (int)vcvtms_s32_f32((float)((float)(*(_DWORD *)(v9 + 100) - *(_DWORD *)(v9 + 96))/ (float)*(unsigned int *)(v9 + 100))* (float)*(unint64_t *)(*(_QWORD *)(v9 + 104) + 32)));
        if ((v47 & 1) == 0)
        {
          v50 = (float)v6;
          if (kMTMBFinalSlack)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTMBFinalSlack, (const __CFString *)&dword_1EFC76BF0, v48, *(float *)&dword_1EFC76BF0);
            kMTMBFinalSlack = 0;
          }
          v51 = (float)((float)(*(float *)&dword_1EFC76BF0 * v50)
                      + (float)(v49 * (float)(100.0 - *(float *)&dword_1EFC76BF0)))
              * 0.01;
          if (v50 >= v51)
            v49 = v50;
          else
            v49 = (float)((float)(*(float *)&dword_1EFC76BF0 * v50)
                        + (float)(v49 * (float)(100.0 - *(float *)&dword_1EFC76BF0)))
                * 0.01;
        }
        MTMBDemi::SetLastPPTarget(v9, (int)v49, v48);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
        {
          v38 = (FILE *)*MEMORY[0x1E0C80C20];
          v39 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
          v40 = *(unsigned __int16 *)(v9 + 80);
          v41 = *(unsigned __int16 *)(v9 + 88);
          v42 = *(unsigned __int16 *)(v9 + 82);
          v43 = *(unsigned __int16 *)(v9 + 90);
          v44 = 793;
          goto LABEL_133;
        }
      }
      else
      {
        v34 = *(MTMBDemiProperties **)(v18 + 104);
        if (*(_WORD *)(v18 + 80))
        {
          if (MTMBDemiProperties::UseWordPitch(v34))
          {
            LOWORD(v36) = *(_WORD *)(v9 + 82);
            LOWORD(v37) = *(_WORD *)(v18 + 80);
            SetCompromisePitchTargets((MTMBDemi *)v9, (MTMBDemi *)v18, (float)v36, (float)v37, 0.0, v35);
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
            {
              v38 = (FILE *)*MEMORY[0x1E0C80C20];
              v39 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
              v40 = *(unsigned __int16 *)(v9 + 80);
              v41 = *(unsigned __int16 *)(v9 + 88);
              v42 = *(unsigned __int16 *)(v9 + 82);
              v43 = *(unsigned __int16 *)(v9 + 90);
              v44 = 827;
              goto LABEL_133;
            }
          }
          else if (MTMBDemiProperties::UseGluePitch(*(MTMBDemiProperties **)(v18 + 104)))
          {
            v62 = v18;
            v63 = v16;
LABEL_61:
            v64 = v62 - 4032;
            while (1)
            {
              v65 = v63 == a5;
              if (v62 >= a6)
                v65 = 0;
              if (v63 >= a5 && !v65)
                break;
              v66 = *(MTMBDemiProperties **)(v62 + 104);
              if ((*((_WORD *)v66 + 8) & 0x10) == 0 && *(_DWORD *)(v62 + 100))
              {
                if (v63 < a5)
                  goto LABEL_128;
                break;
              }
              v62 += 112;
              v64 += 112;
              if (*v63 == v64)
              {
                v67 = v63[1];
                ++v63;
                v62 = v67;
                goto LABEL_61;
              }
            }
            if (v63 != a5 || v62 >= a6)
              goto LABEL_131;
            v66 = *(MTMBDemiProperties **)(v62 + 104);
LABEL_128:
            if (!MTMBDemiProperties::UseWordPitch(v66))
              goto LABEL_131;
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
            {
              v38 = (FILE *)*MEMORY[0x1E0C80C20];
              v39 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
              v40 = *(unsigned __int16 *)(v9 + 80);
              v41 = *(unsigned __int16 *)(v9 + 88);
              v42 = *(unsigned __int16 *)(v9 + 82);
              v43 = *(unsigned __int16 *)(v9 + 90);
              v44 = 839;
              goto LABEL_133;
            }
          }
          else
          {
LABEL_131:
            LOWORD(v61) = *(_WORD *)(v9 + 82);
            SetCompromisePitchTargets((MTMBDemi *)v9, (MTMBDemi *)v18, (float)v61, 22050.0/ *(float *)(*(_QWORD *)(*(_QWORD *)(v18 + 104) + 40)+ 4* (int)vcvtms_s32_f32((float)((float)*(unsigned int *)(v18 + 92) / (float)*(unsigned int *)(v18 + 100))* (float)*(unint64_t *)(*(_QWORD *)(v18 + 104) + 32))), 0.0, v60);
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
            {
              v38 = (FILE *)*MEMORY[0x1E0C80C20];
              v39 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
              v40 = *(unsigned __int16 *)(v9 + 80);
              v41 = *(unsigned __int16 *)(v9 + 88);
              v42 = *(unsigned __int16 *)(v9 + 82);
              v43 = *(unsigned __int16 *)(v9 + 90);
              v44 = 849;
LABEL_133:
              fprintf(v38, "Pitch \"%s\" (%d:%d) (%d:%d) [%d]\n", v39, v40, v41, v42, v43, v44);
            }
          }
        }
        else if ((*((_WORD *)v34 + 8) & 2) != 0
               && (v55 = *(_QWORD *)(v33 + 40)) != 0
               && (v56 = *(_QWORD *)(v33 + 32)) != 0)
        {
          LOWORD(v12) = *(_WORD *)(v9 + 82);
          v57 = (float)v12;
          v58 = 22050.0
              / *(float *)(v55
                         + 4
                         * (int)vcvtms_s32_f32((float)((float)(*(_DWORD *)(v9 + 100) - *(_DWORD *)(v9 + 96))/ (float)*(unsigned int *)(v9 + 100))* (float)v56));
          if (kMTMBFinalSlack)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTMBFinalSlack, (const __CFString *)&dword_1EFC76BF0, v11, *(float *)&dword_1EFC76BF0);
            kMTMBFinalSlack = 0;
          }
          v59 = (float)((float)(*(float *)&dword_1EFC76BF0 * v57)
                      + (float)(v58 * (float)(100.0 - *(float *)&dword_1EFC76BF0)))
              * 0.01;
          if (v57 >= v59)
            v59 = v57;
          MTMBDemi::SetLastPPTarget(v9, (int)v59, v11);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
          {
            v38 = (FILE *)*MEMORY[0x1E0C80C20];
            v39 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
            v40 = *(unsigned __int16 *)(v9 + 80);
            v41 = *(unsigned __int16 *)(v9 + 88);
            v42 = *(unsigned __int16 *)(v9 + 82);
            v43 = *(unsigned __int16 *)(v9 + 90);
            v44 = 812;
            goto LABEL_133;
          }
        }
        else
        {
          MTMBDemi::SetLastPPTarget(v9, *(unsigned __int16 *)(v9 + 82), v11);
          MTMBDemi::SetFirstPPTarget(v18, *(unsigned __int16 *)(v9 + 90), v68);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
          {
            v38 = (FILE *)*MEMORY[0x1E0C80C20];
            v39 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
            v40 = *(unsigned __int16 *)(v9 + 80);
            v41 = *(unsigned __int16 *)(v9 + 88);
            v42 = *(unsigned __int16 *)(v9 + 82);
            v43 = *(unsigned __int16 *)(v9 + 90);
            v44 = 819;
            goto LABEL_133;
          }
        }
      }
    }
    return v16;
  }
  v19 = *(MTMBDemiProperties **)(v9 + 104);
  if (!v19 || !*((_QWORD *)v19 + 5) || !*((_QWORD *)v19 + 4))
  {
    MTMBDemi::SetLastPPTarget(v9, *(unsigned __int16 *)(v9 + 82), v11);
    v26 = v9 - *a1;
    v27 = 0x6DB6DB6DB6DB6DB7 * (v26 >> 4);
    if (v26 < -111)
      v16 = &a1[-((34 - v27) / 0x24uLL)];
    else
      v16 = &a1[(v27 + 1) / 0x24uLL];
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
    {
      v38 = (FILE *)*MEMORY[0x1E0C80C20];
      v39 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
      v40 = *(unsigned __int16 *)(v9 + 80);
      v41 = *(unsigned __int16 *)(v9 + 88);
      v42 = *(unsigned __int16 *)(v9 + 82);
      v43 = *(unsigned __int16 *)(v9 + 90);
      v44 = 858;
      goto LABEL_133;
    }
    return v16;
  }
  if (MTMBDemiProperties::UseGluePitch(v19))
  {
    if (*(_DWORD *)(v9 + 100))
    {
      v21 = *(_QWORD *)(v9 + 104);
      if (v21)
      {
        v22 = *(float **)(v21 + 40);
        if (v22)
        {
          if (*(_QWORD *)(v21 + 32))
          {
            MTMBDemi::SetFirstPPTarget(v9, (int)(float)(22050.0 / *v22), v20);
            MTMBDemi::SetLastPPTarget(v9, (int)(float)(22050.0/ *(float *)(*(_QWORD *)(*(_QWORD *)(v9 + 104) + 40)+ 4 * *(_QWORD *)(*(_QWORD *)(v9 + 104) + 32)- 4)), v23);
          }
        }
      }
    }
    v24 = v9 - *a1;
    v25 = 0x6DB6DB6DB6DB6DB7 * (v24 >> 4);
    if (v24 < -111)
      v16 = &a1[-((34 - v25) / 0x24uLL)];
    else
      v16 = &a1[(v25 + 1) / 0x24uLL];
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
    {
      v38 = (FILE *)*MEMORY[0x1E0C80C20];
      v39 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
      v40 = *(unsigned __int16 *)(v9 + 80);
      v41 = *(unsigned __int16 *)(v9 + 88);
      v42 = *(unsigned __int16 *)(v9 + 82);
      v43 = *(unsigned __int16 *)(v9 + 90);
      v44 = 873;
      goto LABEL_133;
    }
    return v16;
  }
  v52 = *(_QWORD *)(v9 + 104);
  v53 = *(float **)(v52 + 40);
  if (*(_WORD *)(v9 + 88))
    v54 = (float)*(unsigned __int16 *)(v9 + 88);
  else
    v54 = 22050.0
        / v53[vcvtms_s32_f32((float)((float)*(unsigned int *)(v9 + 92) / (float)*(unsigned int *)(v9 + 100))* (float)*(unint64_t *)(v52 + 32))];
  v69 = v9 - *a1;
  v70 = 0x6DB6DB6DB6DB6DB7 * (v69 >> 4);
  if (v69 < -111)
  {
    v73 = 34 - v70;
    v16 = &a1[-(v73 / 0x24)];
    v72 = *v16 + 112 * (36 * (v73 / 0x24) - v73) + 3920;
  }
  else
  {
    v71 = v70 + 1;
    v16 = &a1[v71 / 0x24];
    v72 = *v16 + 112 * (v71 % 0x24);
  }
  v74 = v9;
LABEL_80:
  v75 = v72 - 4032;
  while (1)
  {
    v76 = v16 == a5;
    if (v72 >= a6)
      v76 = 0;
    if (v16 >= a5 && !v76)
    {
LABEL_94:
      v80 = *(_QWORD *)(v74 + 104);
      v82 = *(_QWORD *)(v80 + 32);
      v81 = *(_QWORD *)(v80 + 40);
      v83 = v81 + 4 * v82;
      goto LABEL_95;
    }
    if (*(_DWORD *)(v72 + 100))
      break;
LABEL_92:
    v72 += 112;
    v75 += 112;
    if (*v16 == v75)
    {
      v79 = v16[1];
      ++v16;
      v72 = v79;
      goto LABEL_80;
    }
  }
  v77 = *(MTMBDemiProperties **)(v72 + 104);
  if ((*((_WORD *)v77 + 8) & 4) != 0)
    goto LABEL_94;
  if (!MTMBDemiProperties::UseWordPitch(v77))
  {
    v78 = *(_QWORD *)(v72 + 104);
    if (v78 && *(_QWORD *)(v78 + 40) && *(_QWORD *)(v78 + 32))
      v74 = v72;
    goto LABEL_92;
  }
  if ((MTMBDemiProperties::UseGluePitch(*(MTMBDemiProperties **)(v74 + 104)) & 1) == 0)
  {
    HIWORD(v96) = 18092;
    LOWORD(v96) = *(_WORD *)(v72 + 80);
    SetCompromisePitchTargets((MTMBDemi *)v74, (MTMBDemi *)v72, 22050.0/ *(float *)(*(_QWORD *)(*(_QWORD *)(v74 + 104) + 40)+ 4* (int)vcvtms_s32_f32((float)((float)(*(_DWORD *)(v74 + 100) - *(_DWORD *)(v74 + 96))/ (float)*(unsigned int *)(v74 + 100))* (float)*(unint64_t *)(*(_QWORD *)(v74 + 104) + 32))), (float)v96, 0.0, v20);
  }
  v97 = *(_QWORD *)(v74 + 104);
  v82 = *(_QWORD *)(v97 + 32);
  v81 = *(_QWORD *)(v97 + 40);
  v83 = v81 + 4 * v82;
  if (!*(_WORD *)(v74 + 90))
  {
LABEL_95:
    v84 = (int)vcvtms_s32_f32((float)((float)(*(_DWORD *)(v74 + 100) - *(_DWORD *)(v74 + 96))/ (float)*(unsigned int *)(v74 + 100))* (float)v82);
    v85 = 22050.0 / *(float *)(v81 + 4 * v84);
    goto LABEL_96;
  }
  v85 = (float)*(unsigned __int16 *)(v74 + 90);
  v84 = (int)vcvtms_s32_f32((float)((float)(*(_DWORD *)(v74 + 100) - *(_DWORD *)(v74 + 96))/ (float)*(unsigned int *)(v74 + 100))* (float)v82);
LABEL_96:
  v86 = (float *)(*(_QWORD *)(*(_QWORD *)(v9 + 104) + 40)
                + 4
                * (int)vcvtms_s32_f32((float)((float)*(unsigned int *)(v9 + 92) / (float)*(unsigned int *)(v9 + 100))* (float)*(unint64_t *)(*(_QWORD *)(v9 + 104) + 32)));
  v87 = (float)(22050.0 / *v86) / v54;
  v88 = (float *)(v81 + 4 * v84);
  v89 = 1.0;
  if (v86 < v88)
    v89 = (float)((float)((float)(22050.0 / *v88) / v85) - v87) / (float)(v88 - v86);
  while (v53 < v86)
  {
    *v53 = v87 * *v53;
    ++v53;
  }
  while (v53 < v88)
  {
    *v53 = v87 * *v53;
    ++v53;
    v87 = v89 + v87;
  }
  while ((unint64_t)v53 < v83)
  {
    *v53 = v87 * *v53;
    ++v53;
  }
LABEL_106:
  v90 = v9 - 4032;
  while (1)
  {
    v91 = a1 == v16;
    if (v9 >= v72)
      v91 = 0;
    if (a1 >= v16 && !v91)
      break;
    if (*(_DWORD *)(v9 + 100))
    {
      v92 = *(_QWORD *)(v9 + 104);
      if (v92)
      {
        v93 = *(float **)(v92 + 40);
        if (v93)
        {
          if (*(_QWORD *)(v92 + 32))
          {
            MTMBDemi::SetFirstPPTarget(v9, (int)(float)(22050.0 / *v93), v20);
            MTMBDemi::SetLastPPTarget(v9, (int)(float)(22050.0/ *(float *)(*(_QWORD *)(*(_QWORD *)(v9 + 104) + 40)+ 4 * *(_QWORD *)(*(_QWORD *)(v9 + 104) + 32)- 4)), v94);
          }
        }
      }
    }
    v9 += 112;
    v90 += 112;
    if (*a1 == v90)
    {
      v95 = a1[1];
      ++a1;
      v9 = v95;
      goto LABEL_106;
    }
  }
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
  {
    v38 = (FILE *)*MEMORY[0x1E0C80C20];
    v39 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
    v40 = *(unsigned __int16 *)(v9 + 80);
    v41 = *(unsigned __int16 *)(v9 + 88);
    v42 = *(unsigned __int16 *)(v9 + 82);
    v43 = *(unsigned __int16 *)(v9 + 90);
    v44 = 957;
    goto LABEL_133;
  }
  return v16;
}

float MTMBDemi::FirstModelPP(MTMBDemi *this)
{
  return 22050.0
       / *(float *)(*(_QWORD *)(*((_QWORD *)this + 13) + 40)
                  + 4
                  * (int)vcvtms_s32_f32((float)((float)*((unsigned int *)this + 23) / (float)*((unsigned int *)this + 25))* (float)*(unint64_t *)(*((_QWORD *)this + 13) + 32)));
}

uint64_t MTMBDemi::FirstModelFreq(MTMBDemi *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 13) + 40)
       + 4
       * (int)vcvtms_s32_f32((float)((float)*((unsigned int *)this + 23) / (float)*((unsigned int *)this + 25))* (float)*(unint64_t *)(*((_QWORD *)this + 13) + 32));
}

uint64_t MTMBDemi::LastModelFreq(MTMBDemi *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 13) + 40)
       + 4
       * (int)vcvtms_s32_f32((float)((float)(*((_DWORD *)this + 25) - *((_DWORD *)this + 24))/ (float)*((unsigned int *)this + 25))* (float)*(unint64_t *)(*((_QWORD *)this + 13) + 32));
}

uint64_t MTMBPitchStrategy::SetPitchTargets(float *a1, unint64_t a2, float *a3, unint64_t a4, float *a5, unint64_t a6)
{
  unint64_t v10;
  float *v11;
  unint64_t v12;
  float *v13;
  unint64_t v14;
  _BOOL4 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _BOOL4 v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  float v28;
  float *v29;
  unint64_t v30;

  v10 = a2;
  v11 = a1;
  v12 = a2;
  v13 = a1;
LABEL_2:
  v14 = v12 - 4032;
  while (1)
  {
    v15 = v13 == a3;
    if (v12 >= a4)
      v15 = 0;
    if (v13 >= a3 && !v15)
    {
      v17 = 0;
      goto LABEL_13;
    }
    if (*(_DWORD *)(v12 + 100) && *(char *)(*(_QWORD *)(v12 + 104) + 18) < 0)
      break;
    v14 += 112;
    v12 += 112;
    if (*(_QWORD *)v13 == v14)
    {
      v16 = *((_QWORD *)v13 + 1);
      v13 += 2;
      v12 = v16;
      goto LABEL_2;
    }
  }
  v17 = 1;
LABEL_13:
  v18 = v10 - 4032;
  while (1)
  {
    v19 = v11 == a3;
    if (v10 >= a4)
      v19 = 0;
    if (v11 >= a3 && !v19)
      break;
    if (*(_DWORD *)(v10 + 100))
    {
      v20 = *(_QWORD *)(v10 + 104);
      if (v20)
      {
        if (*(_QWORD *)(v20 + 40) && *(_QWORD *)(v20 + 32) && (!*(_WORD *)(v10 + 90) || !*(_WORD *)(v10 + 88)))
          break;
      }
    }
    v10 += 112;
    v18 += 112;
    if (*(_QWORD *)v11 == v18)
    {
      v21 = *((_QWORD *)v11 + 1);
      v11 += 2;
      v10 = v21;
      goto LABEL_13;
    }
  }
LABEL_26:
  v22 = v10;
  while (1)
  {
    v23 = v11 == a3;
    if (v22 >= a4)
      v23 = 0;
    if (v11 >= a3 && !v23)
      return v17;
    if (*(_WORD *)(v22 + 80))
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLinearSlack))
        v29 = (float *)SetLinearSlackPitchTargets(v11, v10, v25, v26, a5, a6);
      else
        v29 = SetLinearPitchTargets(v11, (MTMBDemi *)v10, a3, a4, a5, a6, v27, v28);
      v11 = v29;
      v10 = v30;
      goto LABEL_26;
    }
    v10 += 112;
    v22 += 112;
    if (*(_QWORD *)v11 + 4032 == v10)
    {
      v24 = *((_QWORD *)v11 + 1);
      v11 += 2;
      v10 = v24;
      goto LABEL_26;
    }
  }
}

void MTMBPitchStrategy::ForceGluePitch(MTMBPitchStrategy *this, MTMBDemi *a2, MTMBDemi *a3)
{
  unint64_t v5;
  uint64_t v6;
  float *v7;
  unint64_t v8;
  unsigned int v9;
  float v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  double v14;
  float v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;

  v5 = *(_QWORD *)(*((_QWORD *)this + 13) + 32);
  v6 = *(_QWORD *)(*((_QWORD *)this + 13) + 40);
  v7 = (float *)(v6
               + 4
               * (int)vcvtms_s32_f32((float)((float)(*((_DWORD *)this + 25) - *((_DWORD *)this + 24))/ (float)*((unsigned int *)this + 25))* (float)v5));
  v8 = *(_QWORD *)(*((_QWORD *)a2 + 13) + 40);
  *(float *)&v9 = (float)*(unint64_t *)(*((_QWORD *)a2 + 13) + 32);
  v10 = (float)((float)*((unsigned int *)a2 + 23) / (float)*((unsigned int *)a2 + 25)) * *(float *)&v9;
  v11 = v8 + 4 * (int)vcvtms_s32_f32(v10);
  v12 = v6 + 4 * v5 + 4;
  LOWORD(v10) = *((_WORD *)this + 41);
  LOWORD(v9) = *((_WORD *)a2 + 40);
  SetCompromisePitchTargets(this, a2, (float)LODWORD(v10), (float)v9, (float)((float)((uint64_t)(v11 - (_QWORD)v7) >> 2) * 22.05) * 5.0, (float *)a3);
  v16 = (float)*((unsigned __int16 *)this + 45);
  v17 = *((unsigned __int16 *)a2 + 44);
  if (*((_WORD *)this + 45))
  {
    if (*((_DWORD *)this + 24))
    {
      v18 = *(_QWORD *)this + 32 * *((_QWORD *)this + 2);
      if ((*(_WORD *)(v18 - 16) & 1) != 0)
      {
        LOWORD(v13) = *(_WORD *)(v18 - 24);
        v19 = (float)v13;
        if (*((_WORD *)this + 43))
        {
          *(float *)&v14 = v16 / (float)*((unsigned __int16 *)this + 43);
          if (*(float *)&v14 > 4.0)
            *(float *)&v14 = 4.0;
          v15 = 0.25;
          if (*(float *)&v14 < 0.25)
            *(float *)&v14 = 0.25;
        }
        else
        {
          LODWORD(v14) = 1.0;
        }
        v16 = *(float *)&v14 * v19;
        if (kMTMBPPThreshold)
        {
          MTBEDebugParams::GetParam(kMTMBPPThreshold, (const __CFString *)&qword_1EFC76C30, (uint64_t *)qword_1EFC76C30);
          kMTMBPPThreshold = 0;
        }
        if (v16 > (float)qword_1EFC76C30)
          v16 = (float)qword_1EFC76C30;
        v7 = (float *)v12;
      }
    }
  }
  v20 = (float)v17;
  if (v17 && *((_DWORD *)a2 + 23) && (*(_WORD *)(*(_QWORD *)a2 + 16) & 1) != 0)
  {
    LOWORD(v20) = *(_WORD *)(*(_QWORD *)a2 + 8);
    v21 = MTMBDemi::FirstFactor(a2, v20, v14, v15) * (float)LODWORD(v20);
    v22 = qword_1EFC76C30;
    if (kMTMBPPThreshold)
    {
      MTBEDebugParams::GetParam(kMTMBPPThreshold, (const __CFString *)&qword_1EFC76C30, (uint64_t *)qword_1EFC76C30);
      kMTMBPPThreshold = 0;
      v22 = qword_1EFC76C30;
    }
    v20 = (float)v22;
    if (v21 <= (float)v22)
      v20 = v21;
    v11 = v8;
  }
  if (v16 == 0.0)
  {
    v23 = v20;
    if (v20 == 0.0)
      return;
  }
  else
  {
    if (v20 == 0.0)
      v23 = v16;
    else
      v23 = v20;
    v20 = v16;
  }
  if (v11 >= (unint64_t)v7)
  {
    v24 = 22050.0 / v20;
    v25 = (float)((float)(22050.0 / v23) - v24) / (float)((uint64_t)(v11 - (_QWORD)v7) >> 2);
    do
    {
      if ((unint64_t)v7 >= v12 && (unint64_t)v7 <= v8)
        *v7 = v24;
      v24 = v25 + v24;
      ++v7;
    }
    while ((unint64_t)v7 <= v11);
  }
}

uint64_t MTMBDemi::LastFrame(MTMBDemi *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 13) + 40) + 4 * *(_QWORD *)(*((_QWORD *)this + 13) + 32) + 4;
}

uint64_t MTMBDemi::FirstFrame(MTMBDemi *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 13) + 40);
}

uint64_t PinPPTarget(float a1, float a2, uint64_t a3, uint64_t a4, float *a5)
{
  float v7;
  float v8;
  float v9;

  if (kMTMBLinearPitchBandwidth)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTMBLinearPitchBandwidth, (const __CFString *)&dword_1EFC76C80, a5, *(float *)&dword_1EFC76C80);
    kMTMBLinearPitchBandwidth = 0;
  }
  v7 = (float)(*(float *)&dword_1EFC76C80 * a2) * 0.01;
  v8 = a2 - v7;
  v9 = v7 + a2;
  if (v8 < a1)
    v8 = a1;
  if (v8 < v9)
    v9 = v8;
  return (int)v9;
}

uint64_t MTMBDemi::SetBoundaryPitch(MTMBDemi *this, int a2, float *a3)
{
  float v4;
  uint64_t v5;
  _WORD *v6;
  float v7;
  FILE *v8;
  const char *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  __int16 v15;
  unsigned __int16 *v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  __int16 v21;
  unsigned int v22;
  float *v23;
  unsigned int v24;
  __int16 v25;
  int v26;
  MTMBDemiProperties *v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  float v31;
  uint64_t v32;
  float v33;
  unsigned int v34;
  int v35;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  __int128 v42;
  char v43[20];
  uint64_t v44;

  v38 = (int)a3;
  v44 = *MEMORY[0x1E0C80C00];
  if (kMTMBPowerThreshold)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTMBPowerThreshold, (const __CFString *)&dword_1EFC76C40, a3, *(float *)&dword_1EFC76C40);
    kMTMBPowerThreshold = 0;
  }
  v4 = *(float *)&dword_1EFC76C40;
  if (kMTMBPPThreshold)
  {
    MTBEDebugParams::GetParam(kMTMBPPThreshold, (const __CFString *)&qword_1EFC76C30, (uint64_t *)qword_1EFC76C30);
    kMTMBPPThreshold = 0;
  }
  v39 = qword_1EFC76C30;
  if (kMTMBNumPPConsidered)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTMBNumPPConsidered, (const __CFString *)&qword_1EFC76C50, (uint64_t *)qword_1EFC76C50);
    kMTMBNumPPConsidered = 0;
  }
  v5 = qword_1EFC76C50;
  if (qword_1EFC76C50 <= 3)
    v5 = 3;
  v40 = v5;
  memset(v41, 0, sizeof(v41));
  v42 = 0u;
  *(_QWORD *)((char *)this + 84) = 0;
  v6 = (_WORD *)((char *)this + 84);
  *(_QWORD *)((char *)this + 92) = 0;
  if (*((_QWORD *)this + 2))
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLogBoundaryPitch))
    {
      v8 = (FILE *)*MEMORY[0x1E0C80C10];
      v9 = MTMBDemiProperties::Phon(*((MTMBDemiProperties **)this + 13), v43);
      fprintf(v8, "SetBoundaryPitch \"%s\" %d %d\n", v9, a2, v38);
    }
    if (*((uint64_t *)this + 2) < 1)
    {
      v15 = 0;
      LOWORD(v13) = 0;
      v11 = 0;
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      LOWORD(v13) = 0;
      v14 = 0;
      v15 = 0;
      v16 = *(unsigned __int16 **)this;
      do
      {
        if ((v16[8] & 1) != 0)
        {
          v13 = v16[4];
          if (v39 <= v13)
          {
            v20 = 0;
          }
          else
          {
            v20 = (float)(MTMBSegment::RawPower((MTMBSegment *)v16) * 0.00012207) > v4;
            v13 = v16[4];
          }
          if (!v15)
            v15 = v13;
          v17 = v13;
          if (v20
            || (_WORD)v12
            && (LOWORD(v7) = *(_WORD *)(*(_QWORD *)(*((_QWORD *)&v41[0] + 1)
                                                  + (((unint64_t)(*((_QWORD *)&v42 + 1) + v42 - 1) >> 8) & 0xFFFFFFFFFFFFF8))
                                      + 2 * ((*((_QWORD *)&v42 + 1) + v42 - 1) & 0x7FF)),
                fabsf((float)((float)v13 / (float)LODWORD(v7)) + -1.0) < 0.05)
            && (v17 = v12, fabsf((float)((float)v13 / (float)(unsigned __int16)v12) + -1.0) < 0.15))
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLogBoundaryPitch))
              fprintf((FILE *)*MEMORY[0x1E0C80C10], " %d", v16[4]);
            v21 = v16[4];
            if (!v14)
              v14 = v16[4];
            *((_DWORD *)this + 24) = 0;
            PPRingBuffer::push_back((PPRingBuffer *)&v40, v21);
            if (a2 && !*v6)
              *v6 = v16[4];
            if (v38)
              *((_WORD *)this + 43) = v16[4];
            if (*((_QWORD *)&v42 + 1) != v40)
              goto LABEL_56;
            v22 = PPRingBuffer::min((PPRingBuffer *)&v40);
            v24 = PPRingBuffer::max((PPRingBuffer *)&v40);
            if (kMTMBPPRangeTheshold)
            {
              MTBEDebugParams::GetParam((const __CFString *)kMTMBPPRangeTheshold, (const __CFString *)&dword_1EFC76C60, v23, *(float *)&dword_1EFC76C60);
              kMTMBPPRangeTheshold = 0;
            }
            v7 = (float)(22050.0 / (float)v22) - (float)(22050.0 / (float)v24);
            if (v7 >= *(float *)&dword_1EFC76C60)
              goto LABEL_56;
            if ((v38 & 1) == 0)
            {
              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLinearPitchUseMedian))
                v25 = PPRingBuffer::median((PPRingBuffer *)&v40);
              else
                v25 = *(_WORD *)(*(_QWORD *)(*((_QWORD *)&v41[0] + 1)
                                           + (((unint64_t)(*((_QWORD *)&v42 + 1) + v42 - 1) >> 8) & 0xFFFFFFFFFFFFF8))
                               + 2 * ((*((_QWORD *)&v42 + 1) + v42 - 1) & 0x7FF));
              *((_WORD *)this + 43) = v25;
            }
            if (!*v6)
            {
              v10 = 0;
              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLinearPitchUseMedian))
                *v6 = PPRingBuffer::median((PPRingBuffer *)&v40);
              else
                *v6 = *(_WORD *)(*(_QWORD *)(*((_QWORD *)&v41[0] + 1)
                                           + (((unint64_t)v42 >> 8) & 0xFFFFFFFFFFFFF8))
                               + 2 * (v42 & 0x7FF));
            }
            else
            {
LABEL_56:
              v10 = 0;
            }
          }
          else
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLogBoundaryPitch))
              fprintf((FILE *)*MEMORY[0x1E0C80C10], " (%d)", v16[4]);
            PPRingBuffer::clear((PPRingBuffer *)&v40);
            v26 = v16[4];
            if (!v14)
              *((_DWORD *)this + 23) += v26;
            v17 = 0;
            v10 = 0;
            *((_DWORD *)this + 24) += v26;
          }
        }
        else
        {
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLogBoundaryPitch))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], " <%d>", v16[4]);
          if (!v14)
            *((_DWORD *)this + 23) += v16[4];
          PPRingBuffer::clear((PPRingBuffer *)&v40);
          v17 = 0;
          v18 = v16[4];
          if (v15)
            v19 = 0;
          else
            v19 = v16[4];
          v11 += v19;
          *((_DWORD *)this + 24) += v18;
          v10 += v18;
        }
        v16 += 16;
        v12 = v17;
      }
      while ((unint64_t)v16 < *(_QWORD *)this + 32 * *((_QWORD *)this + 2));
    }
    if (*v6)
    {
      if (*((_WORD *)this + 43))
        goto LABEL_68;
      *((_WORD *)this + 43) = v13;
    }
    else
    {
      *((_WORD *)this + 42) = v15;
      *((_WORD *)this + 43) = v13;
      *((_DWORD *)this + 23) = v11;
    }
    *((_DWORD *)this + 24) = v10;
LABEL_68:
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBWordLinearPitch)
      && (v27 = (MTMBDemiProperties *)*((_QWORD *)this + 13)) != 0
      && (MTMBDemiProperties::UseWordPitch(v27) & 1) == 0
      && (v28 = *((_QWORD *)this + 13), (v29 = *(_QWORD *)(v28 + 32)) != 0)
      && *v6)
    {
      v30 = *((_DWORD *)this + 25);
      v31 = (float)v29;
      v32 = *(_QWORD *)(v28 + 40);
      v33 = 22050.0
          / *(float *)(v32
                     + 4 * (int)vcvtms_s32_f32((float)((float)*((unsigned int *)this + 23) / (float)v30) * (float)v29));
      v34 = v30 - *((_DWORD *)this + 24);
      *((_WORD *)this + 40) = (int)v33;
      v35 = (int)(float)(22050.0 / *(float *)(v32 + 4 * (int)vcvtms_s32_f32((float)((float)v34 / (float)v30) * v31)));
    }
    else
    {
      *((_WORD *)this + 40) = *((_WORD *)this + 42);
      LOWORD(v35) = *((_WORD *)this + 43);
    }
    *((_WORD *)this + 41) = v35;
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLogBoundaryPitch))
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "\n -> %d\\%d %d\\%d\n", *((unsigned __int16 *)this + 42), *((_DWORD *)this + 23), *((unsigned __int16 *)this + 43), *((_DWORD *)this + 24));
  }
  return std::deque<unsigned short>::~deque[abi:ne180100](v41);
}

void sub_1D22A61E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  std::deque<unsigned short>::~deque[abi:ne180100](a14);
  _Unwind_Resume(a1);
}

void PPRingBuffer::push_back(PPRingBuffer *this, __int16 a2)
{
  _QWORD *v2;
  uint64_t v3;
  __int16 v4;

  v4 = a2;
  v2 = (_QWORD *)((char *)this + 8);
  v3 = *((_QWORD *)this + 6);
  if (v3 == *(_QWORD *)this)
  {
    ++*((_QWORD *)this + 5);
    *((_QWORD *)this + 6) = v3 - 1;
    std::deque<unsigned short>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 8, 1);
  }
  std::deque<unsigned short>::push_back(v2, &v4);
}

uint64_t PPRingBuffer::min(PPRingBuffer *this)
{
  unsigned __int16 *v1;
  unsigned __int16 *v2;
  char **v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;

  std::deque<unsigned short>::deque((uint64_t)&v7, (_QWORD *)this + 1);
  v1 = (unsigned __int16 *)(v8 + 8 * (v10 >> 11));
  if (v9 == v8)
  {
    v2 = 0;
    v4 = 0;
    v3 = (char **)(v8 + 8 * ((v11 + v10) >> 11));
  }
  else
  {
    v2 = (unsigned __int16 *)(*(_QWORD *)v1 + 2 * (v10 & 0x7FF));
    v3 = (char **)(v8 + 8 * ((v11 + v10) >> 11));
    v4 = (unsigned __int16 *)&(*v3)[2 * ((v11 + v10) & 0x7FF)];
  }
  std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__less<void,void>>(v1, v2, v3, v4, (uint64_t)&v12);
  v5 = *(unsigned __int16 *)(*(_QWORD *)(v8 + ((v10 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v10 & 0x7FF));
  std::deque<unsigned short>::~deque[abi:ne180100](&v7);
  return v5;
}

void sub_1D22A6324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::deque<unsigned short>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t PPRingBuffer::max(PPRingBuffer *this)
{
  unsigned __int16 *v1;
  unsigned __int16 *v2;
  char **v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;

  std::deque<unsigned short>::deque((uint64_t)&v7, (_QWORD *)this + 1);
  v1 = (unsigned __int16 *)(v8 + 8 * (v10 >> 11));
  if (v9 == v8)
  {
    v2 = 0;
    v4 = 0;
    v3 = (char **)(v8 + 8 * ((v11 + v10) >> 11));
  }
  else
  {
    v2 = (unsigned __int16 *)(*(_QWORD *)v1 + 2 * (v10 & 0x7FF));
    v3 = (char **)(v8 + 8 * ((v11 + v10) >> 11));
    v4 = (unsigned __int16 *)&(*v3)[2 * ((v11 + v10) & 0x7FF)];
  }
  std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__less<void,void>>(v1, v2, v3, v4, (uint64_t)&v12);
  v5 = *(unsigned __int16 *)(*(_QWORD *)(v8 + (((v11 + v10 - 1) >> 8) & 0xFFFFFFFFFFFFF8))
                           + 2 * ((v11 + v10 - 1) & 0x7FF));
  std::deque<unsigned short>::~deque[abi:ne180100](&v7);
  return v5;
}

void sub_1D22A63F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::deque<unsigned short>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t PPRingBuffer::median(PPRingBuffer *this)
{
  unsigned __int16 *v1;
  unsigned __int16 *v2;
  char **v3;
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  std::deque<unsigned short>::deque((uint64_t)&v8, (_QWORD *)this + 1);
  v1 = (unsigned __int16 *)(v9 + 8 * (v11 >> 11));
  if (v10 == v9)
  {
    v2 = 0;
    v4 = 0;
    v3 = (char **)(v9 + 8 * ((v12 + v11) >> 11));
  }
  else
  {
    v2 = (unsigned __int16 *)(*(_QWORD *)v1 + 2 * (v11 & 0x7FF));
    v3 = (char **)(v9 + 8 * ((v12 + v11) >> 11));
    v4 = (unsigned __int16 *)&(*v3)[2 * ((v12 + v11) & 0x7FF)];
  }
  std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__less<void,void>>(v1, v2, v3, v4, (uint64_t)&v13);
  v5 = v11 + (v12 >> 1);
  v6 = *(unsigned __int16 *)(*(_QWORD *)(v9 + ((v5 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v5 & 0x7FF));
  if ((v12 & 1) == 0)
    v6 = (*(unsigned __int16 *)(*(_QWORD *)(v9 + (((v5 - 1) >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * ((v5 - 1) & 0x7FF))
        + v6) >> 1;
  std::deque<unsigned short>::~deque[abi:ne180100](&v8);
  return v6;
}

void sub_1D22A64EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::deque<unsigned short>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void PPRingBuffer::clear(PPRingBuffer *this)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void **)*((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 6) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *((_QWORD *)this + 3);
      v2 = (void **)(*((_QWORD *)this + 2) + 8);
      *((_QWORD *)this + 2) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 1024;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    v6 = 2048;
LABEL_7:
    *((_QWORD *)this + 5) = v6;
  }
  std::deque<unsigned short>::resize((_QWORD *)this + 1, 0);
}

void MTMBModelPitchInterpolator::~MTMBModelPitchInterpolator(MTMBModelPitchInterpolator *this)
{
  JUMPOUT(0x1D8233BA8);
}

void MTMBSlackPitchInterpolator::~MTMBSlackPitchInterpolator(void **this)
{
  *this = &off_1E9369138;
  MEOWVectorBase::~MEOWVectorBase(this + 4);
}

{
  *this = &off_1E9369138;
  MEOWVectorBase::~MEOWVectorBase(this + 4);
  JUMPOUT(0x1D8233BA8);
}

void MTMBLinearPitchInterpolator::~MTMBLinearPitchInterpolator(MTMBLinearPitchInterpolator *this)
{
  JUMPOUT(0x1D8233BA8);
}

void MTMBSawtoothPitchInterpolator::~MTMBSawtoothPitchInterpolator(MTMBSawtoothPitchInterpolator *this)
{
  JUMPOUT(0x1D8233BA8);
}

uint64_t MTMBSawtoothPitchInterpolator::ForceFirst(uint64_t this)
{
  *(_BYTE *)(this + 68) = 0;
  return this;
}

uint64_t MTMBSawtoothPitchInterpolator::ForceSecond(uint64_t this)
{
  *(_BYTE *)(this + 68) = 1;
  return this;
}

uint64_t std::deque<unsigned short>::deque(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char **)(v5 + 8 * (v4 >> 11));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 11));
  }
  else
  {
    v8 = &(*v7)[2 * (v4 & 0x7FF)];
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 11));
    v11 = (char *)(*(_QWORD *)v10 + 2 * (v9 & 0x7FF));
  }
  std::deque<unsigned short>::__append<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>,0>((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_1D22A66E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__split_buffer<MTMBDemi *>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::deque<unsigned short>::__append<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>,0>(_QWORD *a1, char **a2, char *a3, char *a4, char *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 1) + ((a4 - (char *)a2) << 8) - ((a3 - *a2) >> 1);
  return std::deque<unsigned short>::__append_with_size[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>>(a1, a2, a3, v5);
}

_QWORD *std::deque<unsigned short>::__append_with_size[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>>(_QWORD *a1, char **a2, char *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _WORD *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;
  _QWORD v24[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = ((v9 - v8) << 8) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    std::deque<unsigned short>::__add_back_capacity(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 11));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 2 * (v11 & 0x7FF);
  v24[0] = v8 + 8 * (v11 >> 11);
  v24[1] = v14;
  result = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)v24, a4);
  if (v14 != v16)
  {
    v17 = a1[5];
    do
    {
      if (v13 == result)
        v18 = v16;
      else
        v18 = *v13 + 4096;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = *a2;
        v20 = (_WORD *)v14;
        do
        {
          v21 = *(_WORD *)a3;
          a3 += 2;
          *v20++ = v21;
          if (a3 - v19 == 4096)
          {
            v22 = a2[1];
            ++a2;
            v19 = v22;
            a3 = v22;
          }
        }
        while (v20 != (_WORD *)v18);
      }
      v17 += (v18 - v14) >> 1;
      if (v13 == result)
        break;
      v23 = v13[1];
      ++v13;
      v14 = v23;
    }
    while (v23 != v16);
    a1[5] = v17;
  }
  return result;
}

void std::deque<unsigned short>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x7FF) != 0)
    v6 = (v5 >> 11) + 1;
  else
    v6 = v5 >> 11;
  v7 = a1[4];
  if (v6 >= v7 >> 11)
    v8 = v7 >> 11;
  else
    v8 = v6;
  if (v6 <= v7 >> 11)
  {
    for (a1[4] = v7 - (v8 << 11); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<MTMBDemi *>::push_back(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<MTMBDemi *>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 2047;
          else
            v64 = 2048;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 11);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 11;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        std::__split_buffer<MTMBDemi *>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<MTMBDemi *>::push_front((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1D22A6D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 1);
    if (v4 < 1)
      result -= (unint64_t)(2047 - v4) >> 11;
    else
      result += (unint64_t)v4 >> 11;
  }
  return result;
}

unsigned __int16 *std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__less<void,void>>(unsigned __int16 *a1, unsigned __int16 *a2, char **a3, unsigned __int16 *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (a4 == a2
    || (v5 = (((char *)a4 - *a3) >> 1) + (((char *)a3 - (char *)a1) << 8),
        v6 = (uint64_t)a2 - *(_QWORD *)a1,
        v5 == v6 >> 1))
  {
    v7 = 0;
  }
  else
  {
    v7 = 63 - __clz(v5 - (v6 >> 1));
  }
  return std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,false>(a1, a2, a3, a4, a5, 2 * v7, 1);
}

unsigned __int16 *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,false>(unsigned __int16 *result, unsigned __int16 *a2, char **a3, unsigned __int16 *a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned __int16 *v9;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  char *v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char **v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char **v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char **v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  unint64_t v43;
  _WORD *v44;
  _WORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char **v50;
  char *v51;
  unsigned __int16 *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned __int16 *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _WORD *v61;
  _WORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char **v67;
  char *v68;
  unint64_t v69;
  _QWORD *v70;
  _WORD *v71;
  _WORD *v72;
  _QWORD *v73;
  _WORD *v74;
  _WORD *v75;
  _QWORD *v76;
  _WORD *v77;
  unsigned __int16 v78;
  unsigned __int16 *v79;
  char *v80;
  unsigned __int16 *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  unsigned __int16 *v87;
  unint64_t v88;
  unsigned __int16 *v89;
  unsigned __int16 *v90;
  unsigned int v91;
  unsigned __int16 v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unsigned __int16 *v96;
  _WORD *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int16 *v100;
  _WORD *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int16 *v105;
  _WORD *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unsigned __int16 *v110;
  _WORD *v111;
  unsigned __int16 *v112;
  _WORD *v113;
  unint64_t v114;
  unsigned __int16 *v115;
  _WORD *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  char *v122;
  unsigned __int16 *v123;
  char v124;
  unsigned __int16 **v125;
  unsigned __int16 *v126;

  v125 = (unsigned __int16 **)result;
  v126 = a2;
  if (a2 != a4)
  {
    v9 = a4;
    v11 = a2;
    v12 = a6 - 1;
    while (2)
    {
      v13 = (unsigned __int16 *)v125;
      v14 = *a3;
      v15 = *v125;
      v16 = (((char *)v9 - *a3) >> 1) + (((char *)a3 - (char *)v125) << 8) - (v11 - *v125);
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          if (v9 == (unsigned __int16 *)v14)
            v9 = (unsigned __int16 *)(*(a3 - 1) + 4096);
          v91 = *(v9 - 1);
          if (v91 < *v11)
          {
            v92 = *v11;
            *v11 = v91;
            *(v9 - 1) = v92;
          }
          return result;
        case 3uLL:
          v93 = (char *)v11 - (char *)v15;
          v94 = v11 - v15;
          if (v93 < -1)
          {
            v108 = 2046 - v94;
            v96 = (unsigned __int16 *)&v125[-(v108 >> 11)];
            v97 = (_WORD *)(*(_QWORD *)v96 + 2 * (~(_WORD)v108 & 0x7FF));
          }
          else
          {
            v95 = v94 + 1;
            v96 = (unsigned __int16 *)&v125[v95 >> 11];
            v97 = (_WORD *)(*(_QWORD *)v96 + 2 * (v95 & 0x7FF));
          }
          if (v9 == (unsigned __int16 *)v14)
          {
            v109 = (uint64_t)*--a3;
            v9 = (unsigned __int16 *)(v109 + 4096);
          }
          return (unsigned __int16 *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)v125, v11, (uint64_t)v96, v97, (uint64_t)a3, v9 - 1);
        case 4uLL:
          v98 = (char *)v11 - (char *)v15;
          v99 = v11 - v15;
          if (v98 >= -1)
          {
            v100 = (unsigned __int16 *)&v125[(unint64_t)(v99 + 1) >> 11];
            v101 = (_WORD *)(*(_QWORD *)v100 + 2 * ((v99 + 1) & 0x7FF));
            v102 = v99 + 2;
LABEL_68:
            v110 = (unsigned __int16 *)&v125[v102 >> 11];
            v111 = (_WORD *)(*(_QWORD *)v110 + 2 * (v102 & 0x7FF));
            goto LABEL_78;
          }
          v100 = (unsigned __int16 *)&v125[-((unint64_t)(2046 - v99) >> 11)];
          v101 = (_WORD *)(*(_QWORD *)v100 + 2 * (~(2046 - (_WORD)v99) & 0x7FF));
          if ((unint64_t)v98 >= 0xFFFFFFFFFFFFFFFDLL)
          {
            v102 = 1;
            goto LABEL_68;
          }
          v118 = 2045 - v99;
          v110 = (unsigned __int16 *)&v125[-(v118 >> 11)];
          v111 = (_WORD *)(*(_QWORD *)v110 + 2 * (~(_WORD)v118 & 0x7FF));
LABEL_78:
          if (v9 == (unsigned __int16 *)v14)
          {
            v119 = (uint64_t)*--a3;
            v9 = (unsigned __int16 *)(v119 + 4096);
          }
          return (unsigned __int16 *)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)v125, v11, (uint64_t)v100, v101, (uint64_t)v110, v111, (uint64_t)a3, v9 - 1);
        case 5uLL:
          v103 = (char *)v11 - (char *)v15;
          v104 = v11 - v15;
          if (v103 >= -1)
          {
            v105 = (unsigned __int16 *)&v125[(unint64_t)(v104 + 1) >> 11];
            v106 = (_WORD *)(*(_QWORD *)v105 + 2 * ((v104 + 1) & 0x7FF));
            v107 = v104 + 2;
LABEL_71:
            v112 = (unsigned __int16 *)&v125[v107 >> 11];
            v113 = (_WORD *)(*(_QWORD *)v112 + 2 * (v107 & 0x7FF));
            v114 = v104 + 3;
LABEL_72:
            v115 = (unsigned __int16 *)&v125[v114 >> 11];
            v116 = (_WORD *)(*(_QWORD *)v115 + 2 * (v114 & 0x7FF));
            goto LABEL_73;
          }
          v105 = (unsigned __int16 *)&v125[-((unint64_t)(2046 - v104) >> 11)];
          v106 = (_WORD *)(*(_QWORD *)v105 + 2 * (~(2046 - (_WORD)v104) & 0x7FF));
          if ((unint64_t)v103 >= 0xFFFFFFFFFFFFFFFDLL)
          {
            v107 = 1;
            goto LABEL_71;
          }
          v112 = (unsigned __int16 *)&v125[-((unint64_t)(2045 - v104) >> 11)];
          v113 = (_WORD *)(*(_QWORD *)v112 + 2 * (~(2045 - (_WORD)v104) & 0x7FF));
          if ((unint64_t)v103 >= 0xFFFFFFFFFFFFFFFBLL)
          {
            v114 = 1;
            goto LABEL_72;
          }
          v120 = 2044 - v104;
          v115 = (unsigned __int16 *)&v125[-(v120 >> 11)];
          v116 = (_WORD *)(*(_QWORD *)v115 + 2 * (~(_WORD)v120 & 0x7FF));
LABEL_73:
          if (v9 == (unsigned __int16 *)v14)
          {
            v117 = (uint64_t)*--a3;
            v9 = (unsigned __int16 *)(v117 + 4096);
          }
          return (unsigned __int16 *)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)v125, v11, (uint64_t)v105, v106, (uint64_t)v112, v113, (uint64_t)v115, v116, (uint64_t)a3, v9 - 1);
        default:
          if ((uint64_t)v16 <= 23)
          {
            if ((a7 & 1) != 0)
              return (unsigned __int16 *)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(v125, v11, (uint64_t)a3, v9);
            else
              return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((unsigned __int16 *)v125, v11, (uint64_t)a3, v9);
          }
          if (v12 == -1)
          {
            if (v9 != v11)
              return (unsigned __int16 *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((char *)v125, v11, a3, v9, (uint64_t)a3, v9, a5);
            return result;
          }
          v17 = v16 >> 1;
          v18 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)&v125, v16 >> 1);
          if (v16 < 0x81)
          {
            v25 = (char *)v9 - *a3;
            v26 = v25 >> 1;
            if (v25 < 3)
            {
              v37 = 2048 - v26;
              v28 = &a3[-(v37 >> 11)];
              v29 = &(*v28)[2 * (~(_WORD)v37 & 0x7FF)];
            }
            else
            {
              v27 = v26 - 1;
              v28 = &a3[v27 >> 11];
              v29 = &(*v28)[2 * (v27 & 0x7FF)];
            }
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)v18, v19, (uint64_t)v125, v126, (uint64_t)v28, v29);
            if ((a7 & 1) != 0)
              goto LABEL_32;
          }
          else
          {
            v20 = (char *)v9 - *a3;
            v21 = v20 >> 1;
            if (v20 < 3)
            {
              v30 = 2048 - v21;
              v23 = &a3[-(v30 >> 11)];
              v24 = &(*v23)[2 * (~(_WORD)v30 & 0x7FF)];
            }
            else
            {
              v22 = v21 - 1;
              v23 = &a3[v22 >> 11];
              v24 = &(*v23)[2 * (v22 & 0x7FF)];
            }
            v121 = a7;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)v13, v11, (uint64_t)v18, v19, (uint64_t)v23, v24);
            v31 = (char *)v126 - (char *)*v125;
            v32 = v31 >> 1;
            if (v31 < -1)
            {
              v43 = 2046 - v32;
              v34 = (unsigned __int16 *)&v125[-(v43 >> 11)];
              v35 = *(_QWORD *)v34;
              v36 = ~(_DWORD)v43 & 0x7FFLL;
            }
            else
            {
              v33 = v32 + 1;
              v34 = (unsigned __int16 *)&v125[v33 >> 11];
              v35 = *(_QWORD *)v34;
              v36 = v33 & 0x7FF;
            }
            v44 = (_WORD *)(v35 + 2 * v36);
            v46 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)&v125, v17 - 1);
            v47 = (char *)v9 - *a3;
            v48 = v47 >> 1;
            if (v47 < 5)
            {
              v53 = 2049 - v48;
              v50 = &a3[-(v53 >> 11)];
              v51 = &(*v50)[2 * (~(_WORD)v53 & 0x7FF)];
            }
            else
            {
              v49 = v48 - 2;
              v50 = &a3[v49 >> 11];
              v51 = &(*v50)[2 * (v49 & 0x7FF)];
            }
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)v34, v44, (uint64_t)v46, v45, (uint64_t)v50, v51);
            v54 = (char *)v126 - (char *)*v125;
            v55 = v54 >> 1;
            if (v54 < -3)
            {
              v60 = 2045 - v55;
              v57 = (unsigned __int16 *)&v125[-(v60 >> 11)];
              v58 = *(_QWORD *)v57;
              v59 = ~(_DWORD)v60 & 0x7FFLL;
            }
            else
            {
              v56 = v55 + 2;
              v57 = (unsigned __int16 *)&v125[v56 >> 11];
              v58 = *(_QWORD *)v57;
              v59 = v56 & 0x7FF;
            }
            v61 = (_WORD *)(v58 + 2 * v59);
            v63 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)&v125, v17 + 1);
            v64 = (char *)v9 - *a3;
            v65 = v64 >> 1;
            if (v64 < 7)
            {
              v69 = 2050 - v65;
              v67 = &a3[-(v69 >> 11)];
              v68 = &(*v67)[2 * (~(_WORD)v69 & 0x7FF)];
            }
            else
            {
              v66 = v65 - 3;
              v67 = &a3[v66 >> 11];
              v68 = &(*v67)[2 * (v66 & 0x7FF)];
            }
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)v57, v61, (uint64_t)v63, v62, (uint64_t)v67, v68);
            v70 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)&v125, v17 - 1);
            v72 = v71;
            v73 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)&v125, v16 >> 1);
            v75 = v74;
            v76 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)&v125, v17 + 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)v70, v72, (uint64_t)v73, v75, (uint64_t)v76, v77);
            std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)&v125, v17);
            v78 = *v126;
            *v126 = *v79;
            *v79 = v78;
            a7 = v121;
            if ((v121 & 1) != 0)
            {
LABEL_32:
              v38 = (char **)v125;
              v39 = (char *)v126;
              goto LABEL_33;
            }
          }
          v38 = (char **)v125;
          v39 = (char *)v126;
          v40 = (char *)v126 - (char *)*v125;
          v41 = v40 >> 1;
          if (v40 < 3)
            v42 = &v125[-((unint64_t)(2048 - v41) >> 11)][~(2048 - (_WORD)v41) & 0x7FF];
          else
            v42 = &(*(unsigned __int16 **)((char *)v125 + (((unint64_t)(v41 - 1) >> 8) & 0xFFFFFFFFFFFFF8)))[(v41 - 1) & 0x7FF];
          if (*v42 >= *v126)
          {
            result = (unsigned __int16 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__less<void,void> &>((char **)v125, v126, (unsigned __int16 **)a3, v9);
            a7 = 0;
            v125 = (unsigned __int16 **)result;
            v126 = v52;
            goto LABEL_45;
          }
LABEL_33:
          std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__less<void,void> &>(v38, v39, a3, (char *)v9, (uint64_t)&v122);
          v80 = v122;
          v81 = v123;
          if (!v124)
            goto LABEL_41;
          v82 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((char *)v125, v126, v122, v123);
          v83 = (uint64_t)v81 - *(_QWORD *)v80;
          v84 = v83 >> 1;
          if (v83 < -1)
          {
            v88 = 2046 - v84;
            v86 = &v80[-8 * (v88 >> 11)];
            v87 = (unsigned __int16 *)(*(_QWORD *)v86 + 2 * (~(_WORD)v88 & 0x7FF));
          }
          else
          {
            v85 = v84 + 1;
            v86 = &v80[8 * (v85 >> 11)];
            v87 = (unsigned __int16 *)(*(_QWORD *)v86 + 2 * (v85 & 0x7FF));
          }
          result = (unsigned __int16 *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(v86, v87, (char *)a3, v9);
          if ((_DWORD)result)
          {
            a3 = (char **)v80;
            v9 = v81;
            if ((v82 & 1) != 0)
              return result;
          }
          else
          {
            if (!v82)
            {
LABEL_41:
              result = (unsigned __int16 *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,false>(v125, v126, v80, v81, a5, v12, a7 & 1);
              a7 = 0;
            }
            v89 = v81 + 1;
            if ((unsigned __int16 *)((char *)v81 - *(_QWORD *)v80 + 2) == (unsigned __int16 *)4096)
            {
              v90 = (unsigned __int16 *)*((_QWORD *)v80 + 1);
              v80 += 8;
              v89 = v90;
            }
            v125 = (unsigned __int16 **)v80;
            v126 = v89;
          }
LABEL_45:
          v11 = v126;
          --v12;
          if (v9 != v126)
            continue;
          break;
      }
      break;
    }
  }
  return result;
}

unsigned __int16 **std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(unsigned __int16 **result, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned __int16 **v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned int v16;

  if (a2 != a4)
  {
    v4 = a2 + 1;
    v5 = *result;
    while (1)
    {
      if ((char *)v4 - (char *)v5 == 4096)
      {
        v6 = result[1];
        ++result;
        v5 = v6;
        v4 = v6;
      }
      if (v4 == a4)
        break;
      v7 = result;
      v8 = (uint64_t)v4;
      if (v4 == v5)
      {
        v7 = result - 1;
        v8 = (uint64_t)(*(result - 1) + 2048);
      }
      v11 = *(unsigned __int16 *)(v8 - 2);
      v9 = (unsigned __int16 *)(v8 - 2);
      v10 = v11;
      v12 = *v4;
      if (v12 < v11)
      {
        v13 = v4;
        while (1)
        {
          *v13 = v10;
          if (v9 == a2)
            break;
          v14 = v9;
          if (v9 == *v7)
          {
            v15 = (uint64_t)*--v7;
            v9 = (unsigned __int16 *)(v15 + 4096);
          }
          v16 = *--v9;
          v10 = v16;
          v13 = v14;
          if (v12 >= v16)
            goto LABEL_16;
        }
        v14 = a2;
LABEL_16:
        *v14 = v12;
      }
      ++v4;
    }
  }
  return result;
}

unsigned __int16 *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(unsigned __int16 *result, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  unsigned __int16 *v7;
  unint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  __int16 v12;
  unsigned __int16 **v13;
  unint64_t v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unsigned __int16 *v22;

  if (a2 != a4)
  {
    v4 = (uint64_t)a2 - *(_QWORD *)result;
    v5 = v4 >> 1;
    if (v4 < -1)
    {
      v8 = 2046 - v5;
      v6 = ~(_WORD)v8;
      v7 = &result[-4 * (v8 >> 11)];
    }
    else
    {
      v6 = v5 + 1;
      v7 = &result[4 * ((unint64_t)(v5 + 1) >> 11)];
    }
    v9 = *(unsigned __int16 **)v7;
    v10 = (unsigned __int16 *)(*(_QWORD *)v7 + 2 * (v6 & 0x7FF));
    while (v10 != a4)
    {
      v11 = v10 - v9;
      if ((char *)v10 - (char *)v9 < 3)
      {
        v14 = 2048 - v11;
        v12 = ~(_WORD)v14;
        v13 = (unsigned __int16 **)&v7[-4 * (v14 >> 11)];
      }
      else
      {
        v12 = v11 - 1;
        v13 = (unsigned __int16 **)&v7[4 * ((unint64_t)(v11 - 1) >> 11)];
      }
      v15 = *v13;
      v16 = &(*v13)[v12 & 0x7FF];
      v17 = *v10;
      v18 = *v16;
      if (v17 < v18)
      {
        result = v10;
        do
        {
          v19 = v16;
          *result = v18;
          if (v16 == v15)
          {
            v20 = *--v13;
            v15 = v20;
            v16 = v20 + 2048;
          }
          v21 = *--v16;
          LOWORD(v18) = v21;
          result = v19;
        }
        while (v17 < v21);
        *v19 = v17;
      }
      if ((char *)++v10 - (char *)v9 == 4096)
      {
        v22 = (unsigned __int16 *)*((_QWORD *)v7 + 1);
        v7 += 4;
        v9 = v22;
        v10 = v22;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(uint64_t a1, _WORD *a2, uint64_t a3, _WORD *a4, uint64_t a5, _WORD *a6)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v6 = (unsigned __int16)*a4;
  v7 = (unsigned __int16)*a2;
  v8 = (unsigned __int16)*a6;
  if (v6 < v7)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1;
    }
    *a2 = v6;
    *a4 = v7;
    v11 = (unsigned __int16)*a6;
    if (v11 >= v7)
      return 1;
    *a4 = v11;
    *a6 = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    v9 = (unsigned __int16)*a4;
    v10 = (unsigned __int16)*a2;
    if (v9 >= v10)
      return 1;
    *a2 = v9;
    *a4 = v10;
    return 2;
  }
  return 0;
}

char **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__less<void,void> &>(char **result, unsigned __int16 *a2, unsigned __int16 **a3, unsigned __int16 *a4)
{
  unsigned int v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  unsigned __int16 *v13;
  unsigned int v14;
  unsigned __int16 v15;
  char *v16;
  unsigned __int16 *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;

  v4 = *a2;
  v5 = *a3;
  v6 = (char *)a4 - (char *)*a3;
  v7 = v6 >> 1;
  if (v6 < 3)
    v8 = &a3[-((unint64_t)(2048 - v7) >> 11)][~(2048 - (_WORD)v7) & 0x7FF];
  else
    v8 = &(*(unsigned __int16 **)((char *)a3 + (((unint64_t)(v7 - 1) >> 8) & 0xFFFFFFFFFFFFF8)))[(v7 - 1) & 0x7FF];
  v9 = *result;
  if (v4 >= *v8)
  {
    v10 = (char *)a2;
    do
    {
      v10 += 2;
      if (v10 - v9 == 4096)
      {
        v12 = result[1];
        ++result;
        v9 = v12;
        v10 = v12;
      }
    }
    while ((result < (char **)a3 || result == (char **)a3 && v10 < (char *)a4) && v4 >= *(unsigned __int16 *)v10);
  }
  else
  {
    v10 = (char *)a2;
    do
    {
      v10 += 2;
      if (v10 - v9 == 4096)
      {
        v11 = result[1];
        ++result;
        v9 = v11;
        v10 = v11;
      }
    }
    while (v4 >= *(unsigned __int16 *)v10);
  }
  if (result < (char **)a3 || result == (char **)a3 && v10 < (char *)a4)
  {
    do
    {
      if (a4 == v5)
      {
        v13 = *--a3;
        v5 = v13;
        a4 = v13 + 2048;
      }
      v14 = *--a4;
    }
    while (v4 < v14);
  }
  while (result < (char **)a3 || result == (char **)a3 && v10 < (char *)a4)
  {
    v15 = *(_WORD *)v10;
    *(_WORD *)v10 = *a4;
    *a4 = v15;
    do
    {
      v10 += 2;
      if (v10 - v9 == 4096)
      {
        v16 = result[1];
        ++result;
        v9 = v16;
        v10 = v16;
      }
    }
    while (v4 >= *(unsigned __int16 *)v10);
    do
    {
      if (a4 == v5)
      {
        v17 = *--a3;
        v5 = v17;
        a4 = v17 + 2048;
      }
      v18 = *--a4;
    }
    while (v4 < v18);
  }
  v19 = v10 - v9;
  v20 = v19 >> 1;
  if (v19 < 3)
    v21 = (unsigned __int16 *)&result[-((unint64_t)(2048 - v20) >> 11)][2 * (~(2048 - (_WORD)v20) & 0x7FF)];
  else
    v21 = (unsigned __int16 *)&(*(char **)((char *)result + (((unint64_t)(v20 - 1) >> 8) & 0xFFFFFFFFFFFFF8)))[2 * ((v20 - 1) & 0x7FF)];
  if (v21 != a2)
    *a2 = *v21;
  *v21 = v4;
  return result;
}

char **std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__less<void,void> &>@<X0>(char **result@<X0>, char *a2@<X1>, char **a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v5;
  char *v6;
  char *v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v18;
  char *v19;
  char *v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  char **v26;
  unint64_t v27;
  char *v28;

  v5 = *(unsigned __int16 *)a2;
  v6 = *result;
  v7 = a2;
  do
  {
    v7 += 2;
    if (v7 - v6 == 4096)
    {
      v8 = result[1];
      ++result;
      v6 = v8;
      v7 = v8;
    }
    v9 = *(unsigned __int16 *)v7;
  }
  while (v9 < v5);
  v10 = (v7 - v6) >> 1;
  if (v7 - v6 < 3)
    v11 = (uint64_t)&result[-((unint64_t)(2048 - v10) >> 11)][2 * (~(2048 - (_WORD)v10) & 0x7FF)];
  else
    v11 = (uint64_t)&(*(char **)((char *)result + (((unint64_t)(v10 - 1) >> 8) & 0xFFFFFFFFFFFFF8)))[2 * ((v10 - 1) & 0x7FF)];
  if ((char *)v11 == a2)
  {
    do
    {
      if (result >= a3 && (result != a3 || v7 >= a4))
        break;
      if (a4 == *a3)
      {
        v15 = (uint64_t)*--a3;
        a4 = (char *)(v15 + 4096);
      }
      v16 = *((unsigned __int16 *)a4 - 1);
      a4 -= 2;
    }
    while (v16 >= v5);
  }
  else
  {
    v12 = *a3;
    do
    {
      if (a4 == v12)
      {
        v13 = *--a3;
        v12 = v13;
        a4 = v13 + 4096;
      }
      v14 = *((unsigned __int16 *)a4 - 1);
      a4 -= 2;
    }
    while (v14 >= v5);
  }
  v18 = result != a3 || v7 >= a4;
  if (result < a3)
    v18 = 0;
  while (result < a3 || result == a3 && v7 < a4)
  {
    *(_WORD *)v7 = *(_WORD *)a4;
    *(_WORD *)a4 = v9;
    do
    {
      v7 += 2;
      if (v7 - v6 == 4096)
      {
        v19 = result[1];
        ++result;
        v6 = v19;
        v7 = v19;
      }
      v9 = *(unsigned __int16 *)v7;
    }
    while (v9 < v5);
    v20 = *a3;
    do
    {
      if (a4 == v20)
      {
        v21 = *--a3;
        v20 = v21;
        a4 = v21 + 4096;
      }
      v22 = *((unsigned __int16 *)a4 - 1);
      a4 -= 2;
    }
    while (v22 >= v5);
  }
  v23 = v7 - v6;
  v24 = v23 >> 1;
  if (v23 < 3)
  {
    v27 = 2048 - v24;
    v25 = ~(_WORD)v27;
    v26 = &result[-(v27 >> 11)];
  }
  else
  {
    v25 = v24 - 1;
    v26 = &result[(unint64_t)(v24 - 1) >> 11];
  }
  v28 = &(*v26)[2 * (v25 & 0x7FF)];
  if (v28 != a2)
    *(_WORD *)a2 = *(_WORD *)v28;
  *(_WORD *)v28 = v5;
  *(_QWORD *)a5 = v26;
  *(_QWORD *)(a5 + 8) = v28;
  *(_BYTE *)(a5 + 16) = v18;
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(char *a1, unsigned __int16 *a2, char *a3, unsigned __int16 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  unsigned __int16 *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  _WORD *v18;
  char *v19;
  _WORD *v20;
  unint64_t v21;
  char *v22;
  _WORD *v23;
  unint64_t v24;
  char *v25;
  _WORD *v26;
  uint64_t v27;
  char *v28;
  _WORD *v29;
  unint64_t v30;
  char *v31;
  _WORD *v32;
  uint64_t v33;
  char *v34;
  _WORD *v35;
  unsigned __int16 *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  unsigned __int16 *v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int16 *v44;
  int v45;
  unsigned __int16 *v46;
  char *v47;
  unsigned __int16 *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  unsigned int v54;
  uint64_t v55;
  unsigned __int16 *v57;

  if (a4 == a2)
    return 1;
  v4 = (uint64_t)a4;
  v5 = (uint64_t)a3;
  v7 = *(unsigned __int16 **)a3;
  v8 = (uint64_t)a2 - *(_QWORD *)a1;
  v9 = v8 >> 1;
  v10 = 1;
  switch((((uint64_t)a4 - *(_QWORD *)a3) >> 1) + ((a3 - a1) << 8) - (v8 >> 1))
  {
    case 0:
    case 1:
      return v10;
    case 2:
      if (v7 == a4)
        v4 = *((_QWORD *)a3 - 1) + 4096;
      v11 = *(unsigned __int16 *)(v4 - 2);
      v12 = *a2;
      if (v11 < v12)
      {
        *a2 = v11;
        *(_WORD *)(v4 - 2) = v12;
      }
      return v10;
    case 3:
      if (v8 < -1)
      {
        v17 = &a1[-8 * ((unint64_t)(2046 - v9) >> 11)];
        v18 = (_WORD *)(*(_QWORD *)v17 + 2 * (~(2046 - (_WORD)v9) & 0x7FF));
      }
      else
      {
        v17 = &a1[8 * ((unint64_t)(v9 + 1) >> 11)];
        v18 = (_WORD *)(*(_QWORD *)v17 + 2 * (((_WORD)v9 + 1) & 0x7FF));
      }
      if (v7 == (unsigned __int16 *)v4)
      {
        v27 = *(_QWORD *)(v5 - 8);
        v5 -= 8;
        v4 = v27 + 4096;
      }
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)a1, a2, (uint64_t)v17, v18, v5, (_WORD *)(v4 - 2));
      return 1;
    case 4:
      if (v8 >= -1)
      {
        v22 = &a1[8 * ((unint64_t)(v9 + 1) >> 11)];
        v23 = (_WORD *)(*(_QWORD *)v22 + 2 * ((v9 + 1) & 0x7FF));
        v24 = v9 + 2;
LABEL_31:
        v34 = &a1[8 * (v24 >> 11)];
        v35 = (_WORD *)(*(_QWORD *)v34 + 2 * (v24 & 0x7FF));
        goto LABEL_54;
      }
      v22 = &a1[-8 * ((unint64_t)(2046 - v9) >> 11)];
      v23 = (_WORD *)(*(_QWORD *)v22 + 2 * (~(2046 - (_WORD)v9) & 0x7FF));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFFDLL)
      {
        v24 = 1;
        goto LABEL_31;
      }
      v34 = &a1[-8 * ((unint64_t)(2045 - v9) >> 11)];
      v35 = (_WORD *)(*(_QWORD *)v34 + 2 * (~(2045 - (_WORD)v9) & 0x7FF));
LABEL_54:
      if (v7 == (unsigned __int16 *)v4)
      {
        v55 = *(_QWORD *)(v5 - 8);
        v5 -= 8;
        v4 = v55 + 4096;
      }
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)a1, a2, (uint64_t)v22, v23, (uint64_t)v34, v35, v5, (_WORD *)(v4 - 2));
      return 1;
    case 5:
      if (v8 >= -1)
      {
        v19 = &a1[8 * ((unint64_t)(v9 + 1) >> 11)];
        v20 = (_WORD *)(*(_QWORD *)v19 + 2 * ((v9 + 1) & 0x7FF));
        v21 = v9 + 2;
LABEL_24:
        v28 = &a1[8 * (v21 >> 11)];
        v29 = (_WORD *)(*(_QWORD *)v28 + 2 * (v21 & 0x7FF));
        v30 = v9 + 3;
LABEL_25:
        v31 = &a1[8 * (v30 >> 11)];
        v32 = (_WORD *)(*(_QWORD *)v31 + 2 * (v30 & 0x7FF));
        goto LABEL_26;
      }
      v19 = &a1[-8 * ((unint64_t)(2046 - v9) >> 11)];
      v20 = (_WORD *)(*(_QWORD *)v19 + 2 * (~(2046 - (_WORD)v9) & 0x7FF));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFFDLL)
      {
        v21 = 1;
        goto LABEL_24;
      }
      v28 = &a1[-8 * ((unint64_t)(2045 - v9) >> 11)];
      v29 = (_WORD *)(*(_QWORD *)v28 + 2 * (~(2045 - (_WORD)v9) & 0x7FF));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFFBLL)
      {
        v30 = 1;
        goto LABEL_25;
      }
      v31 = &a1[-8 * ((unint64_t)(2044 - v9) >> 11)];
      v32 = (_WORD *)(*(_QWORD *)v31 + 2 * (~(2044 - (_WORD)v9) & 0x7FF));
LABEL_26:
      if (v7 == (unsigned __int16 *)v4)
      {
        v33 = *(_QWORD *)(v5 - 8);
        v5 -= 8;
        v4 = v33 + 4096;
      }
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)a1, a2, (uint64_t)v19, v20, (uint64_t)v28, v29, (uint64_t)v31, v32, v5, (_WORD *)(v4 - 2));
      return 1;
    default:
      if (v8 <= -4)
      {
        v13 = &a1[-8 * ((unint64_t)(2045 - v9) >> 11)];
        v14 = (unsigned __int16 *)(*(_QWORD *)v13 + 2 * (~(2045 - (_WORD)v9) & 0x7FF));
        v16 = 2046 - v9;
        goto LABEL_17;
      }
      v13 = &a1[8 * ((unint64_t)(v9 + 2) >> 11)];
      v14 = (unsigned __int16 *)(*(_QWORD *)v13 + 2 * ((v9 + 2) & 0x7FF));
      v15 = v9 + 1;
      if (v9 == -1)
      {
        v16 = 2047;
LABEL_17:
        v25 = &a1[-8 * (v16 >> 11)];
        v26 = (_WORD *)(*(_QWORD *)v25 + 2 * (~(_WORD)v16 & 0x7FF));
        goto LABEL_33;
      }
      v25 = &a1[8 * (v15 >> 11)];
      v26 = (_WORD *)(*(_QWORD *)v25 + 2 * (v15 & 0x7FF));
LABEL_33:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)a1, a2, (uint64_t)v25, v26, (uint64_t)v13, v14);
      v36 = *(unsigned __int16 **)v13;
      v37 = (uint64_t)v14 - *(_QWORD *)v13;
      v38 = v37 >> 1;
      if (v37 < -1)
      {
        v43 = 2046 - v38;
        v40 = &v13[-8 * (v43 >> 11)];
        v41 = *(unsigned __int16 **)v40;
        v42 = ~(_DWORD)v43 & 0x7FFLL;
      }
      else
      {
        v39 = v38 + 1;
        v40 = &v13[8 * (v39 >> 11)];
        v41 = *(unsigned __int16 **)v40;
        v42 = v39 & 0x7FF;
      }
      v44 = &v41[v42];
      if (v44 == (unsigned __int16 *)v4)
        return 1;
      v45 = 0;
      while (1)
      {
        v46 = v44;
        v47 = v40;
        v48 = v41;
        v49 = *v44;
        v50 = *v14;
        if (v49 < v50)
        {
          v51 = v46;
          while (1)
          {
            *v51 = v50;
            if (v14 == a2)
              break;
            v52 = v14;
            if (v14 == v36)
            {
              v53 = (unsigned __int16 *)*((_QWORD *)v13 - 1);
              v13 -= 8;
              v36 = v53;
              v14 = v53 + 2048;
            }
            v54 = *--v14;
            LOWORD(v50) = v54;
            v51 = v52;
            if (v49 >= v54)
              goto LABEL_46;
          }
          v52 = a2;
LABEL_46:
          *v52 = v49;
          if (++v45 == 8)
            break;
        }
        v44 = v46 + 1;
        v41 = v48;
        v40 = v47;
        if ((char *)(v46 + 1) - (char *)v48 == 4096)
        {
          v40 = v47 + 8;
          v41 = (unsigned __int16 *)*((_QWORD *)v47 + 1);
          v44 = v41;
        }
        v36 = v48;
        v13 = v47;
        v14 = v46;
        if (v44 == (unsigned __int16 *)v4)
          return 1;
      }
      v57 = v46 + 1;
      if ((char *)(v46 + 1) - (char *)v48 == 4096)
        v57 = (unsigned __int16 *)*((_QWORD *)v47 + 1);
      v10 = v57 == (unsigned __int16 *)v4;
      break;
  }
  return v10;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(uint64_t a1, _WORD *a2, uint64_t a3, _WORD *a4, uint64_t a5, _WORD *a6, uint64_t a7, _WORD *a8)
{
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(a1, a2, a3, a4, a5, a6);
  v13 = (unsigned __int16)*a8;
  v14 = (unsigned __int16)*a6;
  if (v13 < v14)
  {
    *a6 = v13;
    *a8 = v14;
    v15 = (unsigned __int16)*a6;
    v16 = (unsigned __int16)*a4;
    if (v15 < v16)
    {
      *a4 = v15;
      *a6 = v16;
      v17 = (unsigned __int16)*a4;
      v18 = (unsigned __int16)*a2;
      if (v17 < v18)
      {
        *a2 = v17;
        *a4 = v18;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(uint64_t a1, _WORD *a2, uint64_t a3, _WORD *a4, uint64_t a5, _WORD *a6, uint64_t a7, _WORD *a8, uint64_t a9, _WORD *a10)
{
  uint64_t result;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(a1, a2, a3, a4, a5, a6, a7, a8);
  v15 = (unsigned __int16)*a10;
  v16 = (unsigned __int16)*a8;
  if (v15 < v16)
  {
    *a8 = v15;
    *a10 = v16;
    v17 = (unsigned __int16)*a8;
    v18 = (unsigned __int16)*a6;
    if (v17 < v18)
    {
      *a6 = v17;
      *a8 = v18;
      v19 = (unsigned __int16)*a6;
      v20 = (unsigned __int16)*a4;
      if (v19 < v20)
      {
        *a4 = v19;
        *a6 = v20;
        v21 = (unsigned __int16)*a4;
        v22 = (unsigned __int16)*a2;
        if (v21 < v22)
        {
          *a2 = v21;
          *a4 = v22;
        }
      }
    }
  }
  return result;
}

char **std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(char *a1, unsigned __int16 *a2, char **a3, unsigned __int16 *a4, uint64_t a5, unsigned __int16 *a6, uint64_t a7)
{
  unsigned __int16 *v9;
  char **v10;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unsigned __int16 *v18;
  char *v19;
  _WORD *v20;
  unsigned __int16 *v21;
  char **v22;
  unsigned int v23;
  unsigned int v24;
  char *v25;
  unsigned __int16 v26;
  char *v27;
  unsigned __int16 *v28;
  char *v29;
  unsigned __int16 *v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v39;
  char *v40;
  unsigned __int16 *v41;

  if (a2 == a4)
    return (char **)a5;
  v9 = a4;
  v10 = a3;
  v40 = a1;
  v41 = a2;
  v13 = ((char *)a3 - a1) << 8;
  v14 = *a3;
  v15 = (((char *)a4 - *a3) >> 1) + v13 - (((uint64_t)a2 - *(_QWORD *)a1) >> 1);
  if (v15 >= 2)
  {
    v39 = ((char *)a3 - a1) << 8;
    v16 = (unint64_t)(v15 - 2) >> 1;
    do
    {
      v17 = v40;
      v18 = v41;
      v19 = (char *)std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)&v40, v16);
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(v17, v18, a7, v15, v19, v20);
      --v16;
    }
    while (v16 != -1);
    v14 = *v10;
    v13 = v39;
    v15 = v39 + (((char *)v9 - *v10) >> 1) - (((uint64_t)a2 - *(_QWORD *)a1) >> 1);
  }
  if (v9 == a6)
  {
    v22 = v10;
  }
  else
  {
    v21 = v9;
    v22 = v10;
    do
    {
      v23 = *v21;
      v24 = *a2;
      if (v23 < v24)
      {
        *v21 = v24;
        *a2 = v23;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(a1, a2, a7, v15, a1, a2);
        v14 = *v22;
      }
      if ((char *)++v21 - v14 == 4096)
      {
        v25 = v22[1];
        ++v22;
        v14 = v25;
        v21 = (unsigned __int16 *)v25;
      }
    }
    while (v21 != a6);
    v15 = v13 + (((char *)v9 - *v10) >> 1) - (((uint64_t)a2 - *(_QWORD *)a1) >> 1);
  }
  if (v15 >= 2)
  {
    do
    {
      v26 = *a2;
      v27 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(a1, a2, a7, v15);
      v29 = v27;
      v30 = (unsigned __int16 *)*v10;
      v31 = (uint64_t)v9;
      if (*v10 == (char *)v9)
        v31 = (uint64_t)(*(v10 - 1) + 4096);
      v32 = (unsigned __int16 *)(v31 - 2);
      if (v32 == v28)
      {
        *v28 = v26;
      }
      else
      {
        *v28 = *v32;
        v33 = (uint64_t)(v28 + 1);
        v34 = *(_QWORD *)v27;
        if ((unsigned __int16 *)((char *)v28 - *(_QWORD *)v27 + 2) == (unsigned __int16 *)4096)
        {
          v29 = v27 + 8;
          v33 = *((_QWORD *)v27 + 1);
          v34 = v33;
        }
        *v32 = v26;
        if ((unsigned __int16 *)v33 == a2)
          v35 = 0;
        else
          v35 = ((v29 - a1) << 8) + ((v33 - v34) >> 1) - (((uint64_t)a2 - *(_QWORD *)a1) >> 1);
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(a1, (uint64_t)a2, v29, v33, a7, v35);
        v30 = (unsigned __int16 *)*v10;
      }
      if (v9 == v30)
      {
        v36 = (uint64_t)*--v10;
        v9 = (unsigned __int16 *)(v36 + 4096);
      }
      --v9;
    }
    while (v15-- > 2);
  }
  return v22;
}

char *std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(char *result, _WORD *a2, uint64_t a3, uint64_t a4, char *a5, _WORD *a6)
{
  _WORD *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  _QWORD v23[2];

  v6 = a6;
  v23[0] = result;
  v23[1] = a2;
  if (a2 == a6)
    v8 = 0;
  else
    v8 = (((uint64_t)a6 - *(_QWORD *)a5) >> 1) + ((a5 - result) << 8) - (((uint64_t)a2 - *(_QWORD *)result) >> 1);
  v9 = a4 - 2;
  if (a4 >= 2)
  {
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) >= v8)
    {
      v11 = 2 * v8;
      v12 = (2 * v8) | 1;
      result = (char *)std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)v23, v12);
      if (v11 + 2 < a4)
      {
        v14 = (uint64_t)v13 - *(_QWORD *)result;
        v15 = v14 >> 1;
        v16 = (unsigned __int16 *)(v14 < -1
                                 ? *(_QWORD *)&result[-8 * ((unint64_t)(2046 - v15) >> 11)]
                                 + 2 * (~(2046 - (_WORD)v15) & 0x7FF)
                                 : *(_QWORD *)&result[((unint64_t)(v15 + 1) >> 8) & 0xFFFFFFFFFFFFF8]
                                 + 2 * ((v15 + 1) & 0x7FF));
        if (*v13 < *v16)
        {
          if ((unsigned __int16 *)((char *)++v13 - *(_QWORD *)result) == (unsigned __int16 *)4096)
            v13 = (unsigned __int16 *)*((_QWORD *)result + 1);
          v12 = v11 + 2;
        }
      }
      v17 = *v13;
      v18 = (unsigned __int16)*v6;
      if (v17 >= v18)
      {
        do
        {
          *v6 = v17;
          v6 = v13;
          if (v10 < v12)
            break;
          v19 = 2 * v12;
          v12 = (2 * v12) | 1;
          result = (char *)std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)v23, v12);
          if (v19 + 2 < a4)
          {
            v20 = (uint64_t)v13 - *(_QWORD *)result;
            v21 = v20 >> 1;
            v22 = (unsigned __int16 *)(v20 < -1
                                     ? *(_QWORD *)&result[-8 * ((unint64_t)(2046 - v21) >> 11)]
                                     + 2 * (~(2046 - (_WORD)v21) & 0x7FF)
                                     : *(_QWORD *)&result[((unint64_t)(v21 + 1) >> 8) & 0xFFFFFFFFFFFFF8]
                                     + 2 * ((v21 + 1) & 0x7FF));
            if (*v13 < *v22)
            {
              if ((unsigned __int16 *)((char *)++v13 - *(_QWORD *)result) == (unsigned __int16 *)4096)
                v13 = (unsigned __int16 *)*((_QWORD *)result + 1);
              v12 = v19 + 2;
            }
          }
          v17 = *v13;
        }
        while (v17 >= v18);
        *v6 = v18;
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(_QWORD *result, _WORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  _WORD *v14;

  v4 = 0;
  v5 = a4 - 2;
  if (a4 < 2)
    v5 = a4 - 1;
  v6 = v5 >> 1;
  do
  {
    v7 = a2;
    if (v4 != -1)
    {
      v8 = v4 + 1 + (((uint64_t)a2 - *result) >> 1);
      if (v8 < 1)
      {
        v9 = 2047 - v8;
        result -= v9 >> 11;
        a2 = (_WORD *)(*result + 2 * (~(_WORD)v9 & 0x7FF));
      }
      else
      {
        result += (unint64_t)v8 >> 11;
        a2 = (_WORD *)(*result + 2 * (v8 & 0x7FF));
      }
    }
    v10 = (2 * v4) | 1;
    v4 = 2 * v4 + 2;
    if (v4 >= a4
      || ((v11 = (uint64_t)a2 - *result, v12 = v11 >> 1, v11 < -1)
        ? (v13 = (unsigned __int16 *)(result[-((unint64_t)(2046 - v12) >> 11)]
                                    + 2 * (~(2046 - (_WORD)v12) & 0x7FF)))
        : (v13 = (unsigned __int16 *)(*(_QWORD *)((char *)result
                                                + (((unint64_t)(v12 + 1) >> 8) & 0xFFFFFFFFFFFFF8))
                                    + 2 * ((v12 + 1) & 0x7FF))),
          (unsigned __int16)*a2 >= *v13))
    {
      v4 = v10;
    }
    else if ((_WORD *)((char *)++a2 - *result) == (_WORD *)4096)
    {
      v14 = (_WORD *)result[1];
      ++result;
      a2 = v14;
    }
    *v7 = *a2;
  }
  while (v4 <= v6);
  return result;
}

_QWORD *std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  uint64_t v9;
  unsigned __int16 *v10;
  _WORD *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD v15[2];

  v15[0] = result;
  v15[1] = a2;
  v6 = a6 - 2;
  if (a6 >= 2)
  {
    v9 = v6 >> 1;
    result = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)v15, v6 >> 1);
    if (*a3 == a4)
      a4 = *(a3 - 1) + 4096;
    v13 = *(unsigned __int16 *)(a4 - 2);
    v11 = (_WORD *)(a4 - 2);
    v12 = v13;
    v14 = *v10;
    if (v14 < v13)
    {
      do
      {
        *v11 = v14;
        v11 = v10;
        if (!v9)
          break;
        v9 = (unint64_t)(v9 - 1) >> 1;
        result = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)v15, v9);
        v14 = *v10;
      }
      while (v14 < v12);
      *v11 = v12;
    }
  }
  return result;
}

void std::deque<unsigned short>::resize(_QWORD *a1, unint64_t a2)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v10[2];

  v3 = a1[5];
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    std::deque<unsigned short>::__append(a1, v5);
  }
  else if (!v4)
  {
    v6 = a1[1];
    if (a1[2] == v6)
      v7 = 0;
    else
      v7 = *(_QWORD *)(v6 + 8 * (a1[4] >> 11)) + 2 * (a1[4] & 0x7FFLL);
    v10[0] = v6 + 8 * (a1[4] >> 11);
    v10[1] = v7;
    v8 = (char *)std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)v10, a2);
    std::deque<unsigned short>::__erase_to_end((uint64_t)a1, v8, v9);
  }
}

void std::deque<unsigned short>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v4 = a1[1];
  v5 = a1[2];
  if (v5 == v4)
    v6 = 0;
  else
    v6 = ((v5 - v4) << 8) - 1;
  v7 = a1[5] + a1[4];
  v8 = v6 - v7;
  v9 = a2 > v8;
  v10 = a2 - v8;
  if (v9)
  {
    std::deque<unsigned short>::__add_back_capacity(a1, v10);
    v4 = a1[1];
    v5 = a1[2];
    v7 = a1[4] + a1[5];
  }
  v11 = (_QWORD *)(v4 + 8 * (v7 >> 11));
  if (v5 == v4)
    v12 = 0;
  else
    v12 = (char *)(*v11 + 2 * (v7 & 0x7FF));
  v22[0] = v4 + 8 * (v7 >> 11);
  v22[1] = v12;
  v13 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)v22, a2);
  if (v12 != v14)
  {
    v15 = v13;
    v16 = (uint64_t)v14;
    v17 = a1[5];
    do
    {
      if (v11 == v15)
        v18 = v16;
      else
        v18 = *v11 + 4096;
      if (v12 == (char *)v18)
      {
        v20 = v12;
      }
      else
      {
        v19 = ((v18 - (_QWORD)v12 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2;
        bzero(v12, v19);
        v20 = &v12[v19];
      }
      v17 += (v20 - v12) >> 1;
      if (v11 == v15)
        break;
      v21 = (char *)v11[1];
      ++v11;
      v12 = v21;
    }
    while (v21 != (char *)v16);
    a1[5] = v17;
  }
}

uint64_t std::deque<unsigned short>::__erase_to_end(uint64_t result, char *a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 32);
  v5 = v4 + *(_QWORD *)(result + 40);
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = (char *)(v6 + 8 * (v5 >> 11));
  if (v7 == v6)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8 + 2 * (v5 & 0x7FF);
  if (v9 != a3)
  {
    v10 = ((v9 - *(_QWORD *)v8) >> 1) + ((v8 - a2) << 8);
    v11 = a3 - *(_QWORD *)a2;
    v12 = v10 - (v11 >> 1);
    if (v12 >= 1)
    {
      v13 = (char *)(v6 + 8 * (v4 >> 11));
      if (v7 == v6)
        v14 = 0;
      else
        v14 = *(_QWORD *)v13 + 2 * (*(_QWORD *)(result + 32) & 0x7FFLL);
      v16[0] = v13;
      v16[1] = v14;
      if (v14 == a3)
        v15 = 0;
      else
        v15 = (v11 >> 1) + ((a2 - v13) << 8) - ((v14 - *(_QWORD *)v13) >> 1);
      std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)v16, v15);
      v3[5] -= v12;
      do
        result = std::deque<unsigned short>::__maybe_remove_back_spare[abi:ne180100](v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

uint64_t std::deque<unsigned short>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 8) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x800)
    a2 = 1;
  if (v5 < 0x1000)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void MTMBSelectGlue::MTMBSelectGlue(MTMBSelectGlue *this, MEOWReader *a2, MTBEPersistentParam *a3, char a4)
{
  *(_QWORD *)this = &off_1E9369340;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a3;
  *((_BYTE *)this + 24) = a4;
  *((_BYTE *)this + 25) = 0;
  MTMBUnitInstructions::MTMBUnitInstructions((MTMBSelectGlue *)((char *)this + 112));
  *((_QWORD *)this + 4) = MEOWSearchLattice::Create(a2, (MEOWReader *)1);
}

void sub_1D22A8BB0(_Unwind_Exception *a1)
{
  MTFESpeechVisitor *v1;
  MTMBUnitInstructions *v2;

  MTMBUnitInstructions::~MTMBUnitInstructions(v2);
  MTFESpeechVisitor::~MTFESpeechVisitor(v1);
  _Unwind_Resume(a1);
}

void MTMBSelectGlue::~MTMBSelectGlue(MTMBSelectGlue *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E9369340;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MTMBUnitInstructions::~MTMBUnitInstructions((MTMBSelectGlue *)((char *)this + 112));
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
}

{
  MTMBSelectGlue::~MTMBSelectGlue(this);
  JUMPOUT(0x1D8233BA8);
}

void MTMBSelectGlue::VisitSentence(MTMBSelectGlue *this, MTFESpeechElement *a2)
{
  uint64_t v4;
  uint64_t v5;
  signed __int16 v6;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 144))(*((_QWORD *)this + 4));
  v4 = *(__int16 *)(*((_QWORD *)this + 2) + 48);
  if (kMTMBBreathSentenceLimit)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTMBBreathSentenceLimit, (const __CFString *)&qword_1EFC76C90, (uint64_t *)qword_1EFC76C90);
    kMTMBBreathSentenceLimit = 0;
  }
  if (qword_1EFC76C90 >= v4)
  {
    if (kMTMBBreathSentenceLength)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBBreathSentenceLength, (const __CFString *)&qword_1EFC76CA0, (uint64_t *)qword_1EFC76CA0);
      kMTMBBreathSentenceLength = 0;
    }
    v6 = qword_1EFC76CA0;
    v5 = *((_QWORD *)this + 2);
  }
  else
  {
    v5 = *((_QWORD *)this + 2);
    v6 = *(_WORD *)(v5 + 50) - 1;
  }
  *(_WORD *)(v5 + 50) = v6;
  if (((uint64_t)a2[1].var0 & 3) == 1)
  {
    if (kMTMBBreathParagraphAdjust)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBBreathParagraphAdjust, (const __CFString *)&qword_1EFC76CB0, (uint64_t *)qword_1EFC76CB0);
      kMTMBBreathParagraphAdjust = 0;
      v5 = *((_QWORD *)this + 2);
    }
    v6 = *(_WORD *)(v5 + 50) - qword_1EFC76CB0;
    *(_WORD *)(v5 + 50) = v6;
  }
  *((_BYTE *)this + 106) = a2[1].var1 >= v6;
  if (kMTMBBreathPhraseLength)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTMBBreathPhraseLength, (const __CFString *)&qword_1EFC76CC0, (uint64_t *)qword_1EFC76CC0);
    kMTMBBreathPhraseLength = 0;
  }
  *((_WORD *)this + 54) = qword_1EFC76CC0;
  if (!*((_BYTE *)this + 24))
    MTFESpeechElement::VisitChildren(a2, this);
}

void MTMBSelectGlue::VisitIntonationalPhrase(MTMBSelectGlue *this, MTFESpeechElement *a2)
{
  float *v4;
  uint64_t var5_high;
  float *v6;
  uint64_t v7;
  uint64_t v8;

  if ((MTBEDebugFlags::sMEOWDebug & 1) != 0)
  {
    v4 = (float *)operator new[]();
    a2[2].var4 = (MTFESpeechElement *)v4;
    var5_high = SHIDWORD(a2[2].var5);
    if ((_DWORD)var5_high)
      memmove(v4, a2[2].var3, 4 * var5_high);
  }
  *((_QWORD *)this + 5) = 0;
  v6 = (float *)((char *)a2[2].var3 + 4 * SLODWORD(a2[2].var5));
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = v6;
  *((_BYTE *)this + 107) = 0;
  (*(void (**)(_QWORD, MTFESpeechElement *))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), a2);
  if (*((_BYTE *)this + 106))
  {
    v7 = *(__int16 *)(*((_QWORD *)this + 2) + 48);
    if (kMTMBBreathPhraseLimit)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBBreathPhraseLimit, (const __CFString *)&qword_1EFC76CD0, (uint64_t *)qword_1EFC76CD0);
      kMTMBBreathPhraseLimit = 0;
    }
    if (qword_1EFC76CD0 >= v7)
    {
      if (kMTMBBreathPhraseLength)
      {
        MTBEDebugParams::GetParam((const __CFString *)kMTMBBreathPhraseLength, (const __CFString *)&qword_1EFC76CC0, (uint64_t *)qword_1EFC76CC0);
        kMTMBBreathPhraseLength = 0;
      }
      *((_WORD *)this + 54) = qword_1EFC76CC0;
    }
    else
    {
      --*((_WORD *)this + 54);
    }
    if (!a2->var7)
      goto LABEL_17;
    v8 = *(__int16 *)(*((_QWORD *)this + 2) + 48);
    if (kMTMBBreathSpacing)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBBreathSpacing, (const __CFString *)&qword_1EFC76CE0, (uint64_t *)qword_1EFC76CE0);
      kMTMBBreathSpacing = 0;
    }
    if (qword_1EFC76CE0 <= v8 && SWORD1(a2[2].var7) >= *((__int16 *)this + 54))
LABEL_17:
      *((_BYTE *)this + 107) = 1;
  }
  if (!*((_BYTE *)this + 24))
  {
    MTFESpeechElement::VisitChildren(a2, this);
    MTFECommands::Visit((uint64_t)&a2[1].var1, (uint64_t)this);
  }
}

uint64_t MTMBSelectGlue::VisitIntermediatePhrase(MTMBSelectGlue *this, MTFESpeechElement *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;

  result = (uint64_t)MTFESpeechElement::VisitChildren(a2, this);
  if (*((_BYTE *)this + 24))
  {
    v4 = *((_QWORD *)this + 5);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 264);
      if (v5)
      {
        v6 = *((_QWORD *)this + 7);
        v7 = *(_QWORD *)(v6 + 40);
        if (v7)
        {
          if (!*(_BYTE *)(v7 + 58))
          {
            v8 = *(_DWORD *)(v5 + 4);
            if (*(_BYTE *)(v7 + 93))
              v9 = 1;
            else
              v9 = (v8 & 0xFE00) == 0;
            if (!v9)
            {
              v10 = *(unsigned __int8 *)(v7 + 94);
              v11 = bswap32(*(unsigned __int16 *)(v7 + 90));
              v13 = v8;
              MTMBSelectGlue::Prev((uint64_t)this, (uint64_t)&v13, &v14);
              v12 = v11 & 0xFFFF0000 | (v10 << 8);
              result = MTMBSelectGlue::FindGlue((uint64_t)this, v6, v7, &v14, (unsigned __int8 *)&v12);
            }
            *((_QWORD *)this + 5) = 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t MTMBSelectGlue::FindGlue(uint64_t result, uint64_t a2, uint64_t a3, int *a4, unsigned __int8 *a5)
{
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  char v25;

  v9 = result;
  if (*((__int16 *)a4 + 1) == -1)
    v10 = 0;
  else
    v10 = *((unsigned __int8 *)a4 + 1);
  if (*((__int16 *)a5 + 1) == -1)
    v11 = 0;
  else
    v11 = *a5;
  if (*(__int16 *)(a2 + 88) == -1 || *(unsigned __int8 *)(a2 + 93) == v10)
  {
    result = MEOWReader::CountDiphones(*(MEOWReader **)(result + 8), v10, v11);
    if (result)
    {
      if (v10)
      {
        MEOWAnchorSliceInfo::MEOWAnchorSliceInfo((MEOWAnchorSliceInfo *)&v19);
        v19 = *a4;
        (*(void (**)(_QWORD, int *))(**(_QWORD **)(v9 + 32) + 64))(*(_QWORD *)(v9 + 32), &v19);
      }
      MEOWDiphoneSliceInfo::MEOWDiphoneSliceInfo((MEOWDiphoneSliceInfo *)&v19);
      LOBYTE(v19) = v10;
      BYTE1(v19) = v11;
      if ((*(_DWORD *)(a2 + 72) & 0x1400) != 0)
        v12 = 2;
      else
        v12 = 1;
      if ((*(_DWORD *)(a3 + 72) & 0x1400) != 0)
        v13 = 2;
      else
        v13 = 1;
      v20 = v12;
      v21 = v13;
      v14 = *(_QWORD *)(v9 + 64);
      v22 = *(_OWORD *)(v9 + 88);
      v23 = v14 - 4 * v22;
      v24 = *(_BYTE *)(v9 + 105) ^ 1;
      v25 = 1;
      (*(void (**)(_QWORD, int *))(**(_QWORD **)(v9 + 32) + 32))(*(_QWORD *)(v9 + 32), &v19);
      MTMBSelectGlue::HandleInstructions((MTMBSelectGlue *)v9);
      if (v11)
      {
        MEOWAnchorSliceInfo::MEOWAnchorSliceInfo((MEOWAnchorSliceInfo *)&v19);
        v19 = *(_DWORD *)a5;
        (*(void (**)(_QWORD, int *))(**(_QWORD **)(v9 + 32) + 64))(*(_QWORD *)(v9 + 32), &v19);
        v15 = *(_QWORD *)(v9 + 32);
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 80))(v15) - 1;
        v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 32) + 120))(*(_QWORD *)(v9 + 32));
        v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 136))(v15, v16, v17);
        if (!v10)
        {
LABEL_21:
          if (v11)
          {
            *(_BYTE *)(a3 + 92) = v10;
            *(_BYTE *)(a3 + 93) = v11;
            *(_WORD *)(a3 + 88) = v18;
          }
          return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 32) + 88))(*(_QWORD *)(v9 + 32));
        }
      }
      else
      {
        v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 32) + 120))(*(_QWORD *)(v9 + 32));
        if (!v10)
          goto LABEL_21;
      }
      *(_BYTE *)(a2 + 93) = v10;
      *(_BYTE *)(a2 + 94) = v11;
      *(_WORD *)(a2 + 90) = v18;
      goto LABEL_21;
    }
  }
  return result;
}

void MTMBSelectGlue::Prev(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  _BYTE v6[68];
  unsigned __int16 v7;
  void *v8[4];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v8, 2);
  MEOWReader::GetDemi(*(MEOWReader **)(a1 + 8), (unsigned __int8 *)a2, 0, (uint64_t)v6);
  *(_BYTE *)(a2 + 1) = *(_BYTE *)a2;
  *(_BYTE *)a2 = v6[67];
  *(_WORD *)(a2 + 2) = bswap32(v7) >> 16;
  *a3 = *(_DWORD *)a2;
  MEOWVectorBase::~MEOWVectorBase(v8);
}

void sub_1D22A9290(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

MTFESpeechElement *MTMBSelectGlue::VisitWord(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *v3;

  if (!BYTE1(this->var4))
  {
    v3 = this;
    this->var7 = a2;
    this[1].var4 = *(MTFESpeechElement **)&this[1].var1;
    LOBYTE(this[1].var7) = 1;
    BYTE1(this[1].var7) = ((uint64_t)a2[1].var0 & 0x1000) != 0;
    *((_DWORD *)&a2[3].var2 + 1) = 0;
    MTFECommands::Visit((uint64_t)&a2[2], (uint64_t)this);
    this = MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)v3);
    v3->var6 = v3->var7;
    v3[1].var3 = v3[1].var4;
    if (((uint64_t)a2[1].var0 & 0x40) == 0)
    {
      BYTE3(v3[1].var7) = 0;
      ++LOWORD(v3->var3->var7);
    }
  }
  return this;
}

uint64_t MTMBSelectGlue::VisitCommand(uint64_t this, MTFECommand *a2)
{
  unint64_t var8;

  var8 = a2->var8;
  if ((var8 == 1835429746 || var8 == 1836475764 || var8 == 1836021362) && (a2->var9 & 0x80000000) != 0)
  {
    MTMBUnitInstructions::AddCommand((uint64_t *)(this + 112), a2);
    return (*((uint64_t (**)(MTFECommand *))a2->var0 + 2))(a2);
  }
  return this;
}

uint64_t MTMBSelectGlue::VisitPhoneme(uint64_t this, MTFEPhoneme *a2)
{
  uint64_t v3;
  float var13;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int *v8;
  int v9;
  uint64_t v10;
  int *v11;
  int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int var21;
  BOOL v17;
  int *v18;
  unsigned __int8 *v19;
  int v22;
  uint64_t v23;
  uint64_t v24;
  MTFEPhoneme *v25;
  int v26;
  BOOL v27;
  BOOL v28;
  int var22;
  unsigned int v30;
  unint64_t v31;
  BOOL v32;
  BOOL v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;

  v3 = this;
  var13 = a2->var13;
  *(_QWORD *)(this + 96) = (unint64_t)(float)(var13 * a2->var14);
  if (!*(_BYTE *)(this + 104))
    goto LABEL_67;
  v5 = *(_QWORD *)(this + 40);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 264)) == 0)
  {
    v10 = *(_QWORD *)(this + 56);
    v11 = *(int **)(*(_QWORD *)(this + 48) + 264);
    if (v11)
    {
      if (!v10 || *(_BYTE *)(v10 + 58))
      {
        v12 = *v11;
        v13 = *(unsigned __int8 *)(v10 + 93);
        if (v13 == v12
          || (v12 <= 0x24u ? (v17 = ((1 << v12) & 0x1071804001) == 0) : (v17 = 1),
              v17 && (v13 <= 0x1E ? (v32 = ((1 << v13) & 0x61804000) == 0) : (v32 = 1), v32)))
        {
          this = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBForceGlue);
          if (!(_DWORD)this)
            goto LABEL_67;
          v10 = *(_QWORD *)(v3 + 56);
          v13 = *(unsigned __int8 *)(v10 + 93);
        }
        v37 = bswap32(*(unsigned __int16 *)(v10 + 88)) & 0xFFFF0000 | (v13 << 8) | *(unsigned __int8 *)(v10 + 92);
        v35 = v12;
        MTMBSelectGlue::Next(v3, (uint64_t)&v35, &v36);
        v18 = (int *)&v37;
        v19 = (unsigned __int8 *)&v36;
        goto LABEL_66;
      }
      v22 = *v11;
      if (v22 > 1u)
      {
        v38 = v22;
        MTMBSelectGlue::Next(this, (uint64_t)&v38, &v39);
        v14 = (unsigned __int8 *)&v39;
        v23 = v3;
        v24 = v10;
        v25 = a2;
        v26 = 1;
        goto LABEL_63;
      }
      v40 = v22;
      MTMBSelectGlue::Next(this, (uint64_t)&v40, &v41);
      v14 = (unsigned __int8 *)&v41;
    }
    else
    {
      if (!v10 || *(_BYTE *)(v10 + 58))
        goto LABEL_67;
      v34 = bswap32(a2->var19) & 0xFFFF0000 | (a2->var22 << 8) | a2->var21;
      v14 = (unsigned __int8 *)&v34;
    }
    v23 = v3;
    v24 = v10;
    v25 = a2;
    v26 = 0;
LABEL_63:
    this = MTMBSelectGlue::FindBreath(v23, v24, (uint64_t)v25, v14, v26);
    goto LABEL_67;
  }
  v7 = *(_DWORD *)(v6 + 4);
  v8 = *(int **)(*(_QWORD *)(this + 48) + 264);
  if (!v8)
  {
    var21 = a2->var21;
    if (var21 == BYTE1(v7)
      || (BYTE1(v7) <= 0x24u ? (v27 = ((1 << SBYTE1(v7)) & 0x1071804001) == 0) : (v27 = 1),
          v27 && (var21 > 0x1E || ((1 << var21) & 0x61804000) == 0)))
    {
      if (BYTE1(v7) >= 2u && var21 == 0)
      {
        var21 = 0;
      }
      else
      {
        this = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBForceGlue);
        if (!(_DWORD)this)
          goto LABEL_67;
        var21 = a2->var21;
        if (!a2->var21)
          goto LABEL_67;
      }
    }
    var22 = a2->var22;
    v30 = bswap32(a2->var19);
    v10 = *(_QWORD *)(v3 + 56);
    v43 = v7;
    MTMBSelectGlue::Prev(v3, (uint64_t)&v43, &v44);
    v42 = v30 & 0xFFFF0000 | (var22 << 8) | var21;
    v18 = &v44;
    v19 = (unsigned __int8 *)&v42;
LABEL_66:
    this = MTMBSelectGlue::FindGlue(v3, v10, (uint64_t)a2, v18, v19);
    goto LABEL_67;
  }
  v9 = *v8;
  if (BYTE1(v7) != BYTE1(*v8))
  {
    if (BYTE1(v7) <= 0x24u && ((1 << SBYTE1(v7)) & 0x1071804001) != 0)
      goto LABEL_82;
    if (BYTE1(v9) <= 0x1Eu && ((1 << SBYTE1(v9)) & 0x61804000) != 0)
      goto LABEL_82;
  }
  if (*v8 != *(_DWORD *)(v6 + 4)
    && (*v8 <= 0x24u ? (v28 = ((1 << v9) & 0x1071804001) == 0) : (v28 = 1),
        !v28
     || (*(_DWORD *)(v6 + 4) <= 0x1Eu ? (v33 = ((1 << v7) & 0x61804000) == 0) : (v33 = 1), !v33))
    || (this = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBForceQXGlue), (_DWORD)this)
    && v9 != v7
    && (v49 = v9,
        v50 = v7,
        this = MTMBSelectGlue::NeedQXGlue(v3, (unsigned __int8 *)&v50, (unsigned __int8 *)&v49),
        (_DWORD)this))
  {
LABEL_82:
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBForceGluePitch))
      MTMBSelectGlue::ForceGluePitch((MTMBSelectGlue *)v3);
    v10 = *(_QWORD *)(v3 + 56);
    v47 = v7;
    MTMBSelectGlue::Prev(v3, (uint64_t)&v47, &v48);
    v45 = v9;
    MTMBSelectGlue::Next(v3, (uint64_t)&v45, &v46);
    v18 = &v48;
    v19 = (unsigned __int8 *)&v46;
    goto LABEL_66;
  }
LABEL_67:
  *(_BYTE *)(v3 + 104) = 0;
  v31 = *(_QWORD *)(v3 + 64) + 4 * (unint64_t)var13;
  *(_QWORD *)(v3 + 56) = a2;
  *(_QWORD *)(v3 + 64) = v31;
  *(_QWORD *)(v3 + 88) = (unint64_t)var13 - *(_QWORD *)(v3 + 96);
  return this;
}

uint64_t MTMBSelectGlue::NeedQXGlue(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v6;
  _BYTE v8[65];
  char v9;
  void *v10[4];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v10, 2);
  MEOWReader::GetDemi(*(MEOWReader **)(a1 + 8), a2, 0, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    MEOWReader::GetDemi(*(MEOWReader **)(a1 + 8), a3, 0, (uint64_t)v8);
    v6 = v9 & 1;
  }
  MEOWVectorBase::~MEOWVectorBase(v10);
  return v6;
}

void sub_1D22A9844(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void MTMBSelectGlue::ForceGluePitch(MTMBSelectGlue *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  MEOWReader *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  MEOWReader *v11;
  MTMBDemi *v12;
  unsigned __int16 v13;
  _BYTE v14[72];
  void *v15[4];
  _BYTE v16[88];
  __int16 v17;
  _BYTE v18[90];
  __int16 v19;

  MTMBDemi::MTMBDemi((MTMBDemi *)v18);
  MTMBDemi::MTMBDemi((MTMBDemi *)v16);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v15, 2);
  MEOWReader::GetWord(*((_QWORD *)this + 1), *(unsigned __int8 **)(*((_QWORD *)this + 5) + 264), (uint64_t)v14, 0, 1);
  v2 = operator new();
  MTMBDemiProperties::MTMBDemiProperties((MTMBDemiProperties *)v2);
  v3 = *((_QWORD *)this + 5);
  *(_QWORD *)(v2 + 8) = v3 + 200;
  *(_BYTE *)(v2 + 18) = -1;
  *(_WORD *)(v2 + 16) = 0;
  v4 = *((_QWORD *)this + 9);
  *(_QWORD *)(v2 + 32) = *(__int16 *)(v3 + 176) - *((_QWORD *)this + 11);
  *(_QWORD *)(v2 + 40) = v4;
  v5 = (MEOWReader *)*((_QWORD *)this + 1);
  v13 = 0;
  MTMBDemi::Load((size_t)v18, v5, v2, (uint64_t)v14, &v13, 0, (float *)1);
  MEOWReader::GetWord(*((_QWORD *)this + 1), *(unsigned __int8 **)(*((_QWORD *)this + 6) + 264), (uint64_t)v14, 1, 0);
  v6 = operator new();
  MTMBDemiProperties::MTMBDemiProperties((MTMBDemiProperties *)v6);
  v7 = *((_QWORD *)this + 6);
  *(_QWORD *)(v6 + 8) = v7 + 200;
  *(_BYTE *)(v6 + 18) = -1;
  *(_WORD *)(v6 + 16) = 0;
  v8 = *((_QWORD *)this + 12);
  v9 = *(__int16 *)(v7 + 176) - v8;
  v10 = *((_QWORD *)this + 10) + 4 * v8;
  *(_QWORD *)(v6 + 32) = v9;
  *(_QWORD *)(v6 + 40) = v10;
  v11 = (MEOWReader *)*((_QWORD *)this + 1);
  v13 = 0;
  MTMBDemi::Load((size_t)v16, v11, v6, (uint64_t)v14, &v13, 1, 0);
  MTMBPitchStrategy::ForceGluePitch((MTMBPitchStrategy *)v18, (MTMBDemi *)v16, v12);
  *(_WORD *)(*((_QWORD *)this + 5) + 184) = v19;
  *(_WORD *)(*((_QWORD *)this + 6) + 182) = v17;
  MTMBDemi::Unload((MTMBDemi *)v18);
  MTMBDemi::Unload((MTMBDemi *)v16);
  MEOWVectorBase::~MEOWVectorBase(v15);
  MTMBDemi::~MTMBDemi((MTMBDemi *)v16);
  MTMBDemi::~MTMBDemi((MTMBDemi *)v18);
}

void sub_1D22A9A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void **v15;
  uint64_t v16;
  va_list va;

  va_start(va, a15);
  MEOWVectorBase::~MEOWVectorBase(v15);
  MTMBDemi::~MTMBDemi((MTMBDemi *)va);
  MTMBDemi::~MTMBDemi((MTMBDemi *)(v16 - 144));
  _Unwind_Resume(a1);
}

void MTMBSelectGlue::Next(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  _BYTE v6[68];
  unsigned __int16 v7;
  void *v8[4];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v8, 2);
  MEOWReader::GetDemi(*(MEOWReader **)(a1 + 8), (unsigned __int8 *)a2, 1, (uint64_t)v6);
  *(_BYTE *)a2 = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a2 + 1) = v6[67];
  *(_WORD *)(a2 + 2) = bswap32(v7) >> 16;
  *a3 = *(_DWORD *)a2;
  MEOWVectorBase::~MEOWVectorBase(v8);
}

void sub_1D22A9AFC(_Unwind_Exception *a1)
{
  void **v1;

  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

uint64_t MTMBSelectGlue::FindBreath(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5)
{
  uint64_t v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  int v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char *v28;
  char v29;
  char v30;
  char v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int16 v35;
  char v36;
  uint64_t v37;

  v9 = result;
  v37 = *MEMORY[0x1E0C80C00];
  if (*((__int16 *)a4 + 1) != -1)
  {
    if (*(_BYTE *)(result + 107))
    {
      if (*(float *)(a2 + 64) >= 30.0)
      {
        v10 = *a4;
        result = MEOWReader::CountDiphones(*(MEOWReader **)(result + 8), 1u, v10);
        if (result)
        {
          if (a5)
          {
            MEOWDiphoneSliceInfo::MEOWDiphoneSliceInfo((MEOWDiphoneSliceInfo *)&v29);
            v29 = 1;
            v30 = v10;
            if ((*(_DWORD *)(a3 + 72) & 0x1400) != 0)
              v11 = 2;
            else
              v11 = 1;
            v31 = 1;
            v32 = v11;
            v12 = *(_QWORD *)(v9 + 64);
            v33 = *(_OWORD *)(v9 + 88);
            v34 = v12 - 4 * v33;
            v35 = 257;
            (*(void (**)(_QWORD, char *))(**(_QWORD **)(v9 + 32) + 40))(*(_QWORD *)(v9 + 32), &v29);
            MTMBSelectGlue::HandleInstructions((MTMBSelectGlue *)v9);
            MEOWAnchorSliceInfo::MEOWAnchorSliceInfo((MEOWAnchorSliceInfo *)&v21);
            v21 = *(_DWORD *)a4;
            (*(void (**)(_QWORD, int *))(**(_QWORD **)(v9 + 32) + 64))(*(_QWORD *)(v9 + 32), &v21);
            v13 = *(_QWORD *)(v9 + 32);
            v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 80))(v13) - 1;
            v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 32) + 120))(*(_QWORD *)(v9 + 32));
            v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 136))(v13, v14, v15);
          }
          else
          {
            MEOWDemiSliceInfo::MEOWDemiSliceInfo((MEOWDemiSliceInfo *)&v21, 0);
            v29 = 1;
            v30 = v10;
            *(_QWORD *)&v33 = 0;
            BYTE8(v33) = 0;
            v36 = 0;
            LOBYTE(v21) = 1;
            BYTE1(v21) = v10;
            v22 = 1;
            v17 = *(_QWORD *)(v9 + 64) - 4 * *(_QWORD *)(v9 + 88);
            v23 = *(_QWORD *)(v9 + 88);
            v24 = 0;
            v25 = v17;
            v26 = 1;
            v27 = 1;
            v28 = &v29;
            (*(void (**)(_QWORD, int *))(**(_QWORD **)(v9 + 32) + 56))(*(_QWORD *)(v9 + 32), &v21);
            MTMBSelectGlue::HandleInstructions((MTMBSelectGlue *)v9);
            v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 32) + 120))(*(_QWORD *)(v9 + 32));
          }
          v18 = v16;
          if ((*(float (**)(_QWORD))(**(_QWORD **)(v9 + 32) + 128))(*(_QWORD *)(v9 + 32)) < 1000.0)
          {
            *(_WORD *)(*(_QWORD *)(v9 + 16) + 48) = 0;
            if (kMTMBBreathPhraseLength)
            {
              MTBEDebugParams::GetParam((const __CFString *)kMTMBBreathPhraseLength, (const __CFString *)&qword_1EFC76CC0, (uint64_t *)qword_1EFC76CC0);
              kMTMBBreathPhraseLength = 0;
            }
            *(_WORD *)(v9 + 108) = qword_1EFC76CC0;
            if (kMTMBBreathSentenceLength)
            {
              MTBEDebugParams::GetParam((const __CFString *)kMTMBBreathSentenceLength, (const __CFString *)&qword_1EFC76CA0, (uint64_t *)qword_1EFC76CA0);
              kMTMBBreathSentenceLength = 0;
            }
            *(_WORD *)(*(_QWORD *)(v9 + 16) + 50) = qword_1EFC76CA0;
            *(_BYTE *)(a2 + 93) = 1;
            *(_BYTE *)(a2 + 94) = v10;
            *(_WORD *)(a2 + 90) = v18;
            if (v10)
            {
              if (a5)
              {
                *(_BYTE *)(a3 + 92) = 1;
                *(_BYTE *)(a3 + 93) = v10;
                *(_WORD *)(a3 + 88) = v18;
              }
            }
            return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 32) + 88))(*(_QWORD *)(v9 + 32));
          }
          result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 32) + 88))(*(_QWORD *)(v9 + 32));
        }
      }
    }
  }
  if (a5)
  {
    v19 = *(_DWORD *)a4;
    v20 = -65536;
    return MTMBSelectGlue::FindGlue(v9, a2, a3, &v20, (unsigned __int8 *)&v19);
  }
  return result;
}

uint64_t *MTMBSelectGlue::HandleInstructions(MTMBSelectGlue *this)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned __int16 v5;

  v5 = 0;
  v2 = (uint64_t *)((char *)this + 112);
  v3 = (uint64_t *)((char *)this + 120);
  if (MTMBUnitInstructions::ReadyInQueue((uint64_t)this + 112, (uint64_t *)this + 15, &v5))
  {
    do
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 4) + 112))(*((_QWORD *)this + 4), v5);
    while ((MTMBUnitInstructions::ReadyInQueue((uint64_t)v2, v3, &v5) & 1) != 0);
  }
  if (MTMBUnitInstructions::ReadyInQueue((uint64_t)v2, v2, &v5))
  {
    do
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 4) + 96))(*((_QWORD *)this + 4), v5);
    while ((MTMBUnitInstructions::ReadyInQueue((uint64_t)v2, v2, &v5) & 1) != 0);
  }
  return MTMBUnitInstructions::NextSlice((uint64_t **)v2);
}

_QWORD *MTMBDiphoneVariants::AddPassThrough(MTMBDiphoneVariants *this)
{
  _QWORD *result;
  uint64_t v3;

  result = MEOWVectorBase::Append(this);
  v3 = *(_QWORD *)this + 144 * *((_QWORD *)this + 2);
  *(_WORD *)(v3 - 144) = 0;
  *(_QWORD *)(v3 - 136) = 0;
  *(_BYTE *)(v3 - 128) = 0;
  *(_BYTE *)(v3 - 64) = 0;
  return result;
}

_QWORD *MTMBDiphoneVariants::AddVariant(_QWORD *this, MEOWReader *a2, unsigned int a3, unsigned int a4)
{
  char v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;

  v4 = a4;
  v5 = a3;
  v6 = this;
  v7 = this[2];
  if (v7)
  {
    v8 = (unsigned __int8 *)(*this + 1);
    while (*(v8 - 1) != a3 || *v8 != a4)
    {
      v8 += 144;
      if (!--v7)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    this = (_QWORD *)MEOWReader::CountDiphones(a2, a3, a4);
    if (this)
    {
      this = MEOWVectorBase::Append(v6);
      v9 = *v6 + 144 * v6[2];
      *(_BYTE *)(v9 - 144) = v5;
      *(_BYTE *)(v9 - 143) = v4;
      *(_QWORD *)(v9 - 136) = 0;
      *(_BYTE *)(v9 - 128) = 0;
      *(_BYTE *)(v9 - 64) = 0;
    }
  }
  return this;
}

_QWORD *MTMBDiphoneVariants::AddVariants(_QWORD *result, MEOWReader *this, _BYTE *a3, unsigned __int8 *a4)
{
  unsigned int v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned __int8 v13;
  uint64_t v14;

  v4 = *a3;
  if (*a3)
  {
    v8 = result;
    v9 = 0;
    LODWORD(v10) = *a4;
    do
    {
      if ((_DWORD)v10)
      {
        v11 = 0;
        v12 = a3[v9 + 1];
        do
        {
          v13 = a4[v11 + 1];
          result = (_QWORD *)MEOWReader::CountDiphones(this, v12, v13);
          if (result)
          {
            result = MEOWVectorBase::Append(v8);
            v14 = *v8 + 144 * v8[2];
            *(_BYTE *)(v14 - 144) = v12;
            *(_BYTE *)(v14 - 143) = v13;
            *(_QWORD *)(v14 - 136) = 0;
            *(_BYTE *)(v14 - 128) = 0;
            *(_BYTE *)(v14 - 64) = 0;
          }
          ++v11;
          v10 = *a4;
        }
        while (v11 < v10);
        v4 = *a3;
      }
      ++v9;
    }
    while (v9 < v4);
  }
  return result;
}

_QWORD *MTMBDiphoneVariants::AddLeftContext(_QWORD *a1, MEOWReader *a2, _QWORD *a3)
{
  _QWORD v4[3];
  _QWORD v5[3];

  v5[0] = *a3 + 4;
  v5[1] = 8;
  v5[2] = a3[2];
  v4[0] = *a1 + 16;
  v4[1] = 144;
  v4[2] = a1[2];
  return MTMBDiphoneVariants::AddContext(a1, a2, 0, v5, v4);
}

_QWORD *MTMBDiphoneVariants::AddContext(_QWORD *result, MEOWReader *this, int a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  char *DemiRecord;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 v20;
  size_t v21;
  char __c[10];

  if (a4[2])
  {
    v9 = result;
    v10 = 0;
    do
    {
      *(_WORD *)__c = 0;
      v11 = (unsigned __int8 *)(*a4 + a4[1] * v10);
      DemiRecord = MEOWReader::GetDemiRecord(this, *v11, v11[1], bswap32(*((unsigned __int16 *)v11 + 1)) >> 16, a3);
      result = (_QWORD *)MEOWReader::GetAdjacent((uint64_t)this, (uint64_t)DemiRecord, &__c[1], __c);
      v13 = a5[2];
      if (v13)
      {
        v14 = 0;
        v15 = (unsigned __int8 *)(*a4 + a4[1] * v10);
        v16 = (unsigned __int8 *)(*v9 + 1);
        while (1)
        {
          if (a3)
          {
            v17 = *v16;
            v18 = v15[1];
          }
          else
          {
            v17 = *(v16 - 1);
            v18 = *v15;
          }
          if (v17 == v18)
            break;
          ++v14;
          v16 += 144;
          if (v13 == v14)
            goto LABEL_13;
        }
        v19 = (unsigned __int8 *)(*a5 + a5[1] * v14);
        v20 = __c[1];
        v21 = *v19;
        result = memchr(v19 + 1, __c[1], v21);
        if (!result)
        {
          *v19 = v21 + 1;
          v19[v21 + 1] = v20;
        }
      }
LABEL_13:
      ++v10;
    }
    while (v10 < a4[2]);
  }
  return result;
}

_QWORD *MTMBDiphoneVariants::AddRightContext(_QWORD *a1, MEOWReader *a2, _QWORD *a3)
{
  _QWORD v4[3];
  _QWORD v5[3];

  v5[0] = *a3;
  v5[1] = 8;
  v5[2] = a3[2];
  v4[0] = *a1 + 80;
  v4[1] = 144;
  v4[2] = a1[2];
  return MTMBDiphoneVariants::AddContext(a1, a2, 1, v5, v4);
}

uint64_t MTMBDiphoneVariants::Index2Variant(MTMBDiphoneVariants *this, unint64_t *a2)
{
  uint64_t result;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  BOOL v7;

  if (!*((_QWORD *)this + 2))
    return 0xFFFFFFFLL;
  result = 0;
  v4 = *a2;
  v5 = (unint64_t *)(*(_QWORD *)this + 8);
  while (1)
  {
    v6 = *v5;
    v5 += 18;
    v7 = v4 >= v6;
    v4 -= v6;
    if (!v7)
      break;
    *a2 = v4;
    if ((unint64_t)++result >= *((_QWORD *)this + 2))
      return 0xFFFFFFFLL;
  }
  return result;
}

uint64_t MTMBUnitSlice::Override(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  return this;
}

void MTMBWordSlice::SelectCandidate(MTMBWordSlice *this, MEOWReader *a2, unint64_t a3)
{
  int v3;

  v3 = *((_DWORD *)this + 2);
  if ((v3 & 0x80000000) == 0 && v3 < *((_DWORD *)this + 12))
    a3 = *((unsigned int *)this + 2);
  MEOWReader::GetWordData((uint64_t)a2, (_QWORD *)this + 3, a3, (_QWORD *)(*((_QWORD *)this + 2) + 264));
}

uint64_t MTMBFirstDemiSlice::SelectCandidate(uint64_t this, MEOWReader *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  if (*(int *)(this + 8) >= 0)
    v3 = *(unsigned int *)(this + 8);
  else
    v3 = a3;
  v4 = *(_QWORD *)(this + 32);
  v5 = *(_QWORD *)(this + 16);
  if (v4)
  {
    v6 = 0;
    v7 = (unint64_t *)(v5 + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 18;
      v9 = v3 - v8;
      if (v3 < v8)
        break;
      ++v6;
      v3 = v9;
      if (v4 == v6)
      {
        LOWORD(v3) = v9;
        goto LABEL_9;
      }
    }
    if (v6 == 0xFFFFFFFFLL)
    {
      v6 = 0;
      v11 = (unint64_t *)(v5 + 8);
      while (1)
      {
        v12 = *v11;
        v11 += 18;
        v3 = a3 - v12;
        if (a3 < v12)
          break;
        ++v6;
        a3 = v3;
        if (v4 == v6)
          goto LABEL_9;
      }
      LOWORD(v3) = a3;
    }
  }
  else
  {
LABEL_9:
    v6 = 0xFFFFFFFLL;
  }
  v10 = *(_QWORD *)(this + 48);
  *(_WORD *)(v10 + 90) = v3;
  *(_BYTE *)(v10 + 94) = *(_BYTE *)(v5 + 144 * v6 + 1);
  return this;
}

uint64_t MTMBSecondDemiSlice::SelectCandidate(uint64_t this, MEOWReader *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  if (*(int *)(this + 8) >= 0)
    v3 = *(unsigned int *)(this + 8);
  else
    v3 = a3;
  v4 = *(_QWORD *)(this + 32);
  v5 = *(_QWORD *)(this + 16);
  if (v4)
  {
    v6 = 0;
    v7 = (unint64_t *)(v5 + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 18;
      v9 = v3 - v8;
      if (v3 < v8)
        break;
      ++v6;
      v3 = v9;
      if (v4 == v6)
      {
        LOWORD(v3) = v9;
        goto LABEL_9;
      }
    }
    if (v6 == 0xFFFFFFFFLL)
    {
      v6 = 0;
      v11 = (unint64_t *)(v5 + 8);
      while (1)
      {
        v12 = *v11;
        v11 += 18;
        v3 = a3 - v12;
        if (a3 < v12)
          break;
        ++v6;
        a3 = v3;
        if (v4 == v6)
          goto LABEL_9;
      }
      LOWORD(v3) = a3;
    }
  }
  else
  {
LABEL_9:
    v6 = 0xFFFFFFFLL;
  }
  v10 = *(_QWORD *)(this + 48);
  *(_WORD *)(v10 + 88) = v3;
  *(_BYTE *)(v10 + 92) = *(_BYTE *)(v5 + 144 * v6);
  return this;
}

uint64_t MTMBDiphoneSlice::SelectCandidate(uint64_t this, MEOWReader *a2, __int16 a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  LOWORD(v3) = a3;
  v4 = this;
  v5 = *(_DWORD *)(this + 8);
  if ((v5 & 0x80000000) == 0)
  {
    this = MEOWReader::CountDiphones(a2, *(unsigned __int8 *)(*(_QWORD *)(this + 16) + 93), *(unsigned __int8 *)(*(_QWORD *)(this + 16) + 94));
    if (v5 < (int)this)
      v3 = *(_DWORD *)(v4 + 8);
  }
  v6 = *(_QWORD *)(v4 + 24);
  *(_WORD *)(*(_QWORD *)(v4 + 16) + 90) = v3;
  *(_WORD *)(v6 + 88) = v3;
  return this;
}

void MTMBSelectUnits::MTMBSelectUnits(MTMBSelectUnits *this, MEOWReader *a2, MTBEPersistentParam *a3, int a4, char a5)
{
  BOOL v9;
  MTMBSelectGlue *v10;

  *((_QWORD *)this + 1) = &unk_1E9369478;
  *(_QWORD *)this = &off_1E93693F8;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = a3;
  *((_QWORD *)this + 4) = a3->var6;
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)((char *)this + 96), 8);
  MTMBUnitInstructions::MTMBUnitInstructions((MTMBUnitInstructions *)((char *)this + 128));
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)((char *)this + 152), 8);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)((char *)this + 184), 8);
  v9 = (MTBEDebugFlags::sMEOWDebug & 0x100) != 0 || *((_QWORD *)a2 + 3814) == 0;
  *((_BYTE *)this + 232) = v9;
  *((_BYTE *)this + 233) = a5;
  *((_BYTE *)this + 234) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 5) = MEOWSearchLattice::Create(a2, 0);
  if (a4)
  {
    v10 = (MTMBSelectGlue *)operator new();
    MTMBSelectGlue::MTMBSelectGlue(v10, *((MEOWReader **)this + 2), *((MTBEPersistentParam **)this + 3), 1);
    *((_QWORD *)this + 30) = v10;
  }
  sprintf((char *)this + 271, "Select<%p>", this);
}

void sub_1D22AA5B4(_Unwind_Exception *a1)
{
  MTFESpeechVisitor *v1;
  MTBEWorker::Task *v2;
  void **v3;
  MTMBUnitInstructions *v4;
  void **v5;
  void **v6;
  uint64_t v7;

  MEMORY[0x1D8233BA8](v7, 0x10E1C40730BE78DLL);
  MEOWVectorBase::~MEOWVectorBase(v6);
  MEOWVectorBase::~MEOWVectorBase(v5);
  MTMBUnitInstructions::~MTMBUnitInstructions(v4);
  MEOWVectorBase::~MEOWVectorBase(v3);
  MTBEWorker::Task::~Task(v2);
  MTFESpeechVisitor::~MTFESpeechVisitor(v1);
  _Unwind_Resume(a1);
}

void MTMBSelectUnits::~MTMBSelectUnits(MTMBSelectUnits *this)
{
  MTBEWorker::Task *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E93693F8;
  *((_QWORD *)this + 1) = &unk_1E9369478;
  v2 = (MTBEWorker::Task *)((char *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 30);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 23);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 19);
  MTMBUnitInstructions::~MTMBUnitInstructions((MTMBUnitInstructions *)((char *)this + 128));
  MEOWVectorBase::~MEOWVectorBase((void **)this + 12);
  MTBEWorker::Task::~Task(v2);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)this);
}

{
  MTMBSelectUnits::~MTMBSelectUnits(this);
  JUMPOUT(0x1D8233BA8);
}

void `non-virtual thunk to'MTMBSelectUnits::~MTMBSelectUnits(MTMBSelectUnits *this)
{
  MTMBSelectUnits::~MTMBSelectUnits((MTMBSelectUnits *)((char *)this - 8));
}

{
  MTMBSelectUnits::~MTMBSelectUnits((MTMBSelectUnits *)((char *)this - 8));
  JUMPOUT(0x1D8233BA8);
}

void MTMBSelectUnits::VisitSentence(MTMBSelectUnits *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *var3;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 5) + 144))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = a2;
  var3 = a2->var3;
  if (var3)
  {
    while (!var3->var1)
    {
      var3 = var3->var6;
      if (!var3)
        goto LABEL_6;
    }
    a2[1].var4 = var3->var3;
  }
LABEL_6:
  if (*((_BYTE *)this + 233))
  {
    pthread_once(&sScheduleInit, (void (*)(void))InitSearchSchedule);
    MTBEWorker::AddTask((MTBEWorker *)sUnitSearchSchedule, (MTBEWorker::Task *)((char *)this + 8), *((_QWORD *)this + 8));
  }
  else
  {
    MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
    MTMBSelectUnits::ProcessIntermediatePhrases(this, 0);
    (*(void (**)(MTMBSelectUnits *))(*(_QWORD *)this + 88))(this);
  }
}

MTBEWorker *InitSearchSchedule(void)
{
  MTBEWorker *v0;
  MTBEWorker *result;

  v0 = (MTBEWorker *)operator new();
  result = MTBEWorker::MTBEWorker(v0, "Unit");
  sUnitSearchSchedule = (uint64_t)v0;
  return result;
}

void sub_1D22AA810(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x1070C40AA5774DALL);
  _Unwind_Resume(a1);
}

MTMBSelectUnits *MTMBSelectUnits::ProcessIntermediatePhrases(MTMBSelectUnits *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *v2;
  MTFESpeechElement *v3;
  MTMBSelectUnits *v4;
  void (***v5)(_QWORD, MTFESpeechElement *);
  MTFESpeechElement *v6;
  MTFESpeechElement *v7;
  MTFESpeechElement *var6;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  int v15;
  char v16;

  v2 = *(MTFESpeechElement **)(*((_QWORD *)this + 8) + 80);
  if (v2 != a2)
  {
    v3 = a2;
    v4 = this;
    do
    {
      v5 = (void (***)(_QWORD, MTFESpeechElement *))*((_QWORD *)v4 + 30);
      if (v5)
      {
        v6 = v2;
        do
        {
          v7 = v6;
          v6 = v6->var5;
        }
        while (v6 && v6->var3 == v7);
        while (1)
        {
          (**v5)(v5, v7);
          if (v7 == v2)
            break;
          v7 = v7->var3;
          v5 = (void (***)(_QWORD, MTFESpeechElement *))*((_QWORD *)v4 + 30);
        }
      }
      var6 = v2->var6;
      if (!var6)
      {
        var6 = v2->var5;
        while (1)
        {
          var6 = var6->var6;
          if (!var6)
            break;
          if (var6->var1)
          {
            var6 = var6->var3;
            break;
          }
        }
        if (!var6)
          v3 = 0;
      }
      v2 = var6;
    }
    while (var6 != v3);
    pthread_mutex_lock((pthread_mutex_t *)(*((_QWORD *)v4 + 3) + 96));
    *(_QWORD *)(*((_QWORD *)v4 + 8) + 80) = v3;
    MTBEWorker::DebugLog("Report unit selection progress [%08x].\n", v9, v3);
    if (*((_BYTE *)v4 + 234))
    {
      if (!v3)
      {
        v10 = *((_QWORD *)v4 + 3);
        *(_QWORD *)(v10 + 208) = 0;
        pthread_cond_broadcast((pthread_cond_t *)(v10 + 160));
      }
    }
    else
    {
      pthread_cond_broadcast((pthread_cond_t *)(*((_QWORD *)v4 + 3) + 160));
      if (!v3)
      {
        if ((MTBEDebugFlags::sMTXDebug & 2) != 0)
        {
          v11 = *MEMORY[0x1E0C80C10];
          v12 = *((_QWORD *)v4 + 2);
          v14[0] = &off_1E9365EB0;
          v14[1] = v11;
          v14[2] = v12;
          v15 = 0;
          v16 = 0;
          MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v14, *((MTFESpeechElement **)v4 + 8));
          MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v14);
        }
        v13 = *((_QWORD *)v4 + 3);
        if (*(_OWORD *)(v13 + 64) != 0)
        {
          MTMBLogDiphones::MTMBLogDiphones((MTMBLogDiphones *)v14, *(__CFArray **)(v13 + 64), *(MTMBDiphoneStatistics **)(v13 + 72));
          MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v14, *((MTFESpeechElement **)v4 + 8));
          MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v14);
        }
      }
    }
    return (MTMBSelectUnits *)pthread_mutex_unlock((pthread_mutex_t *)(*((_QWORD *)v4 + 3) + 96));
  }
  return this;
}

void sub_1D22AA9CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)va);
  _Unwind_Resume(a1);
}

uint64_t MTMBSelectUnits::Execute(MTMBSelectUnits *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  pthread_mutex_lock((pthread_mutex_t *)(*((_QWORD *)this + 3) + 96));
  v3 = *((_QWORD *)this + 3);
  *(_QWORD *)(v3 + 208) = this;
  pthread_mutex_unlock((pthread_mutex_t *)(v3 + 96));
  MTFESpeechElement::VisitChildren(*((MTFESpeechElement **)this + 8), (MTFESpeechVisitor *)this);
  MTMBSelectUnits::ProcessIntermediatePhrases(this, 0);
  pthread_mutex_lock((pthread_mutex_t *)(*((_QWORD *)this + 3) + 96));
  v4 = *((_QWORD *)this + 3);
  *(_QWORD *)(v4 + 208) = 0;
  pthread_cond_broadcast((pthread_cond_t *)(v4 + 160));
  pthread_mutex_unlock((pthread_mutex_t *)(*((_QWORD *)this + 3) + 96));
  return (*(uint64_t (**)(MTMBSelectUnits *))(*(_QWORD *)this + 88))(this);
}

uint64_t `non-virtual thunk to'MTMBSelectUnits::Execute(MTMBSelectUnits *this, void *a2)
{
  return MTMBSelectUnits::Execute((MTMBSelectUnits *)((char *)this - 8), a2);
}

uint64_t MTMBSelectUnits::VisitIntonationalPhrase(MTMBSelectUnits *this, MTFESpeechElement *a2)
{
  BOOL v4;
  char v5;
  char v6;

  *((_QWORD *)this + 9) = a2;
  *((_WORD *)this + 124) = 256;
  *((_QWORD *)this + 11) = (char *)a2[2].var3 + 4 * SLODWORD(a2[2].var5);
  *((_QWORD *)this + 32) = 0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5));
  v4 = 1;
  *((_BYTE *)this + 216) = 1;
  if (BYTE6(a2[2].var6) - 68 >= 5)
    v5 = 0;
  else
    v5 = 0x203020303uLL >> (8 * (BYTE6(a2[2].var6) - 68));
  *((_BYTE *)this + 217) = v5;
  v6 = *((_BYTE *)this + 232);
  if (!v6)
    v4 = a2[3].var6 != 0;
  *((_BYTE *)this + 232) = v4;
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  MTFECommands::Visit((uint64_t)&a2[1].var1, (uint64_t)this);
  *((_BYTE *)this + 232) = v6;
  return MTMBSelectUnits::EvaluatePath(this, 1);
}

uint64_t MTMBSelectUnits::EvaluatePath(MTMBSelectUnits *this, int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 80))(*((_QWORD *)this + 5));
  if (result)
  {
    v5 = result;
    if (a2)
      (*(void (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
    for (i = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 120))(*((_QWORD *)this + 5));
          ;
          i = (*(uint64_t (**)(void))(v9 + 136))())
    {
      --v5;
      v7 = *((_QWORD *)this + 14);
      v8 = *(_QWORD *)(*((_QWORD *)this + 12) + 8 * v7 - 8);
      *((_QWORD *)this + 14) = v7 - 1;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 16))(v8, *((_QWORD *)this + 2), i);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v9 = **((_QWORD **)this + 5);
      if (!v5)
        break;
    }
    result = (*(uint64_t (**)(void))(v9 + 88))();
  }
  *((_BYTE *)this + 248) = 0;
  return result;
}

MTMBSelectUnits *MTMBSelectUnits::VisitIntermediatePhrase(MTMBSelectUnits *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *var3;
  MTMBSelectUnits *v4;

  *((_QWORD *)this + 10) = a2;
  var3 = a2->var3;
  if (var3)
  {
    v4 = this;
    do
    {
      if (!var3->var2)
      {
        MTBEAbort(a2);
      }
      this = (MTMBSelectUnits *)(*(uint64_t (**)(MTFESpeechElement *, MTMBSelectUnits *))var3->var0)(var3, v4);
      var3 = var3->var6;
    }
    while (var3);
  }
  return this;
}

uint64_t MTMBSelectUnits::FindWordCandidates(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5, int a6)
{
  char *v12;
  const char *v13;
  size_t v14;
  unint64_t v15;
  const char *v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char *v21;
  char v22;
  CFStringRef v23;
  CFStringRef v24;
  const __CFString *Value;
  int WordDescriptor;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  MTMBSelectUnits *v32;
  uint64_t v33;
  char *v34;
  MTMBSelectUnits *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  MTMBSelectUnits *WordCandidates;
  uint64_t v41;
  char __dst[64];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (MEOWReader::GetWordDescriptor(*(_QWORD *)(a1 + 16), (const char **)a3, a4))
  {
    v12 = (char *)(a2 + 200);
    v13 = *(const char **)a3;
    if (a2 + 200 == *(_QWORD *)a3)
      return 1;
    goto LABEL_23;
  }
  strcpy(__dst, *(const char **)a3);
  v14 = strlen(__dst);
  v15 = v14;
  if (v14 < 4)
  {
    v17 = v14 - 1;
    if (__dst[v14 - 1] != 39)
      goto LABEL_14;
LABEL_13:
    v22 = 0;
    __dst[v17] = 0;
    goto LABEL_17;
  }
  v16 = &__dst[v14 - 2];
  v17 = v14 - 1;
  v18 = &__dst[v14 - 1];
  if (!strcmp(&__dst[v14 - 2], "N'"))
  {
    *v18 = 71;
    v22 = 0;
LABEL_16:
    v17 = v15;
    goto LABEL_17;
  }
  if (*v18 == 39)
    goto LABEL_13;
  if (strcmp(v16, "'S"))
  {
LABEL_14:
    v22 = 0;
    goto LABEL_18;
  }
  v19 = v15 - 3;
  v20 = __dst[v15 - 3];
  if (v15 < 5)
  {
    v19 = 1;
  }
  else if (v20 == 72)
  {
    v21 = &__dst[v15];
    if ((__dst[v15 - 4] | 0x10) == 0x53)
    {
      v22 = 0;
LABEL_49:
      *(v21 - 2) = 69;
      goto LABEL_16;
    }
    goto LABEL_47;
  }
  if (v20 == 83)
  {
    v22 = 0;
    v21 = &__dst[v15];
    goto LABEL_49;
  }
  if (v20 == 89)
  {
    __dst[v19] = 73;
    __dst[v15 - 2] = 69;
    *(_QWORD *)a3 = __dst;
    if ((MEOWReader::GetWordDescriptor(*(_QWORD *)(a1 + 16), (const char **)a3, a4) & 1) != 0)
      goto LABEL_22;
    __dst[v19] = 89;
  }
LABEL_47:
  *(_WORD *)(v18 - 1) = 83;
  v22 = 1;
LABEL_17:
  *(_QWORD *)a3 = __dst;
  v15 = v17;
  if ((MEOWReader::GetWordDescriptor(*(_QWORD *)(a1 + 16), (const char **)a3, a4) & 1) != 0)
  {
LABEL_22:
    v12 = (char *)(a2 + 200);
    v13 = __dst;
LABEL_23:
    *(_QWORD *)a3 = strcpy(v12, v13);
    return 1;
  }
LABEL_18:
  v23 = CFStringCreateWithCStringNoCopy(0, __dst, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  *(_QWORD *)a3 = __dst;
  if (v23)
  {
    v24 = v23;
    Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v23);
    if (Value && CFStringGetCString(Value, __dst, 64, 0))
    {
      WordDescriptor = MEOWReader::GetWordDescriptor(*(_QWORD *)(a1 + 16), (const char **)a3, a4);
      CFRelease(v24);
      if (WordDescriptor)
        goto LABEL_22;
    }
    else
    {
      CFRelease(v24);
    }
  }
  if (!a5)
    goto LABEL_69;
  v28 = v15 - 1;
  if (__dst[v15 - 1] != 83
    || *(__int16 *)(a2 + 172) - *(__int16 *)(a2 + 168) < 3
    || (SLWordTagSet::find((SLWordTagSet *)(a2 + 92)) & 1) != 0)
  {
    goto LABEL_69;
  }
  v29 = MTFELastPhoneme((MTFESpeechElement *)a2);
  v30 = v29[6];
  if (v15 >= 4)
  {
    v41 = *(_QWORD *)(v30 + 48);
    if (!strcmp(&__dst[v15 - 2], "ES") && *((_BYTE *)v29 + 58) == 43)
    {
      v31 = *(unsigned __int8 *)(v30 + 58);
      if (v31 == 25 || v31 == 3)
      {
        if ((v22 & 1) != 0)
          goto LABEL_36;
        v36 = v15 - 3;
        v37 = __dst[v15 - 3];
        if (v37 > 82)
        {
          if (v37 == 83)
          {
            if (__dst[v15 - 4] == 83)
              goto LABEL_39;
          }
          else if (v37 == 88)
          {
            goto LABEL_39;
          }
        }
        else
        {
          if (v37 != 72)
          {
            if (v37 == 73)
            {
              __dst[v36] = 89;
              v38 = v15 - 2;
              v34 = &__dst[v15 - 2];
              *v34 = 0;
              *(_QWORD *)a3 = __dst;
              if (MTMBSelectUnits::IsSafeToMorph((MTMBSelectUnits *)a1, __dst, v38, *(unsigned __int8 *)(v30 + 58)))
              {
                WordCandidates = (MTMBSelectUnits *)MTMBSelectUnits::FindWordCandidates(a1, a2, a3, a4, 0, 0);
                if ((_DWORD)WordCandidates)
                {
                  v27 = 1;
                  MTMBSelectUnits::AddMorphWord(WordCandidates, (MTFESpeechElement *)a2, "S", 1);
                  return v27;
                }
              }
              __dst[v36] = 73;
LABEL_64:
              *v34 = 69;
              goto LABEL_65;
            }
            goto LABEL_36;
          }
          if (((__dst[v15 - 4] - 67) & 0xEF) == 0)
          {
LABEL_39:
            v33 = v15 - 2;
            v34 = &__dst[v15 - 2];
            *v34 = 0;
            *(_QWORD *)a3 = __dst;
            if (MTMBSelectUnits::IsSafeToMorph((MTMBSelectUnits *)a1, __dst, v33, *(unsigned __int8 *)(v41 + 58)))
            {
              v35 = (MTMBSelectUnits *)MTMBSelectUnits::FindWordCandidates(a1, a2, a3, a4, 0, 0);
              if ((_DWORD)v35)
              {
                MTMBSelectUnits::AddMorphWord(v35, (MTFESpeechElement *)a2, "ES", 2);
                return 1;
              }
            }
            goto LABEL_64;
          }
        }
LABEL_36:
        __dst[v28] = 0;
        *(_QWORD *)a3 = __dst;
        if (MTMBSelectUnits::IsSafeToMorph((MTMBSelectUnits *)a1, __dst, v15 - 1, *(unsigned __int8 *)(v30 + 58)))
        {
          v32 = (MTMBSelectUnits *)MTMBSelectUnits::FindWordCandidates(a1, a2, a3, a4, 0, 0);
          if ((_DWORD)v32)
            goto LABEL_68;
        }
        __dst[v28] = 83;
        goto LABEL_39;
      }
    }
  }
LABEL_65:
  if ((*((_BYTE *)v29 + 58) & 0xFE) == 0x2A)
  {
    __dst[v28] = 0;
    *(_QWORD *)a3 = __dst;
    if (MTMBSelectUnits::IsSafeToMorph((MTMBSelectUnits *)a1, __dst, v28, *(unsigned __int8 *)(v30 + 58)))
    {
      v32 = (MTMBSelectUnits *)MTMBSelectUnits::FindWordCandidates(a1, a2, a3, a4, 0, 0);
      if ((_DWORD)v32)
      {
LABEL_68:
        v27 = 1;
        MTMBSelectUnits::AddMorphWord(v32, (MTFESpeechElement *)a2, "S", 1);
        return v27;
      }
    }
  }
LABEL_69:
  if (!a6 || !MTMBSelectUnits::FindHyphenatedConstituents((MTMBSelectUnits *)a1, (MTFESpeechElement *)a2))
    return 0;
  *(_QWORD *)a3 = a2 + 200;
  *(_BYTE *)(a3 + 8) = *(_BYTE *)(a2 + 86);
  *(_OWORD *)(a3 + 10) = *(_OWORD *)(a2 + 92);
  *(_BYTE *)(a3 + 26) = 0;
  return MTMBSelectUnits::FindWordCandidates(a1, a2, a3, a4, 1, 0);
}

BOOL MTMBSelectUnits::IsSafeToMorph(MTMBSelectUnits *this, const char *a2, uint64_t a3, int a4)
{
  _BOOL8 v4;
  SLToken *Temp;
  uint64_t v10;
  const __CFData *Phonemes;
  const __CFData *v12;
  CFIndex Length;
  SLWordTagSet v15;

  if (a2[a3 - 1] == 83)
    return 0;
  Temp = (SLToken *)SLTokenCreateTemp();
  v4 = SLDictLookup::Lookup(*(SLDictLookup **)(*((_QWORD *)this + 3) + 88), *(SLDictionary **)(*(_QWORD *)(*((_QWORD *)this + 3) + 88) + 8), a2, a3, Temp)&& SLTokenCountHomographs() <= 1&& (SLTokenGetHomograph(), *(_QWORD *)v15.var0 = SLHomographGetTags(), *(_QWORD *)&v15.var0[4] = v10, (SLWordTagSet::find(&v15) & 1) == 0)&& (Phonemes = (const __CFData *)SLHomographGetPhonemes()) != 0&& (v12 = Phonemes, (Length = CFDataGetLength(Phonemes)) != 0)&& CFDataGetBytePtr(v12)[Length - 1] == a4;
  SLTokenRelease();
  return v4;
}

MTFESpeechElement *MTMBSelectUnits::AddMorphWord(MTMBSelectUnits *this, MTFESpeechElement *a2, const char *a3, uint64_t a4)
{
  uint64_t v7;
  MTFEPosition var0_high;
  MTFESpeechElement *v9;
  __int16 v10;
  MTFESyllable *var5;
  MTFESpeechElement *var7;
  MTFESyllable *v13;
  signed __int16 var0;
  signed __int16 var8;

  v7 = operator new();
  MTFEWord::MTFEWord((MTFEWord *)v7, 0, 0);
  MTFESpeechElement::AddChildAfter(a2->var5, (MTFESpeechElement *)v7, a2);
  strcpy((char *)(v7 + 200), a3);
  *(_DWORD *)(v7 + 56) = 4100;
  LODWORD(a2[1].var0) |= 8u;
  *(_BYTE *)(v7 + 86) = BYTE6(a2[1].var4);
  var0_high = (MTFEPosition)HIDWORD(a2[3].var0);
  *(MTFEPosition *)(v7 + 172) = var0_high;
  WORD2(a2[3].var0) = var0_high.var0 - a4;
  *(_WORD *)(v7 + 178) = *(_WORD *)&a2[3].var2;
  v9 = (MTFESpeechElement *)MTFELastPhoneme(a2);
  v10 = 0;
  do
  {
    v10 += (int)*(float *)&v9[1].var1;
    if (!--a4)
      break;
    v9 = v9->var7;
  }
  while (v9);
  *(_WORD *)(v7 + 176) = v10;
  a2[3].var1 -= v10;
  var5 = (MTFESyllable *)v9->var5;
  if (v9 == var5->var3)
  {
    var8 = var5->var8;
    HIWORD(a2[3].var0) = var8;
    v13 = var5;
  }
  else
  {
    var7 = v9->var7;
    v13 = (MTFESyllable *)operator new();
    MTFESyllable::MTFESyllable(v13);
    v13->var8 = var5->var8;
    var0 = (signed __int16)v9[1].var0;
    v13->var9 = var0;
    v13->var10 = var5->var10;
    var5->var10 = var0;
    MTFESpeechElement::AddChildAfter(a2, (MTFESpeechElement *)v13, (MTFESpeechElement *)var5);
    MTFESpeechElement::SplitChildren((MTFESpeechElement *)var5, v9, (MTFESpeechElement *)v13);
    MTFESpeechElement::SetPrevCousin(v9, var7);
    var8 = v13->var8;
  }
  *(_WORD *)(v7 + 170) = var8;
  *(_WORD *)(v7 + 168) = v9[1].var0;
  return MTFESpeechElement::SplitChildren(a2, (MTFESpeechElement *)v13, (MTFESpeechElement *)v7);
}

void sub_1D22AB508(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C405D120DB7);
  _Unwind_Resume(a1);
}

uint64_t MTMBSelectUnits::FindHyphenatedConstituents(MTMBSelectUnits *this, MTFESpeechElement *a2)
{
  char *p_var5;
  const char **v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  size_t v10;
  SLToken *Temp;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  MTFEPhoneme *v18;
  const char *v19;
  _QWORD v20[32];

  v20[31] = *MEMORY[0x1E0C80C00];
  p_var5 = (char *)&a2[3].var5;
  v18 = (MTFEPhoneme *)MTFEFirstPhoneme(a2);
  v5 = &v19 - 4;
  v6 = -1;
  do
  {
    v7 = v6;
    v8 = strchr(p_var5, 45);
    v9 = v8;
    if (v8)
      v10 = v8 - p_var5;
    else
      v10 = strlen(p_var5);
    v5[4] = p_var5;
    Temp = (SLToken *)SLTokenCreateTemp();
    v5[5] = (const char *)Temp;
    v5[6] = 0;
    if (!SLDictLookup::Lookup(*(SLDictLookup **)(*((_QWORD *)this + 3) + 88), *(SLDictionary **)(*(_QWORD *)(*((_QWORD *)this + 3) + 88) + 8), p_var5, v10, Temp)|| !MTMBConstituent::FindHomograph((MTMBConstituent *)(v5 + 4), (MTFEWord *)a2, &v18))
    {
      v14 = 0;
      if (!v7)
        return v14;
      goto LABEL_15;
    }
    p_var5 = v9 + 1;
    v5 += 4;
    v6 = v7 - 1;
  }
  while (v9);
  if (v7 != -1)
  {
    v12 = v7 + 1;
    do
    {
      MTMBConstituent::SplitWord((MTMBConstituent *)v5, a2);
      v5 -= 4;
    }
    while (!__CFADD__(v12++, 1));
  }
  MTMBConstituent::SetWord(&v19, a2);
  v14 = 1;
  if (v7)
  {
LABEL_15:
    v15 = -v7;
    v16 = v20;
    do
    {
      v16 += 4;
      SLTokenRelease();
      --v15;
    }
    while (v15);
  }
  return v14;
}

uint64_t MTMBConstituent::clear(MTMBConstituent *this)
{
  return SLTokenRelease();
}

uint64_t MTMBConstituent::FindHomograph(MTMBConstituent *this, MTFEWord *a2, MTFEPhoneme **a3)
{
  uint64_t var0_low;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  const __CFData *Phonemes;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v13;
  uint64_t v14;
  CFIndex v15;
  uint64_t v16;
  int v17;
  int v18;
  const UInt8 *v19;

  if (*a3)
  {
    var0_low = SLOWORD((*a3)->var5[1].var0);
    v7 = SLTokenCountHomographs();
    if (v7 >= 1)
    {
      v8 = v7;
      for (i = 0; i != v8; ++i)
      {
        *((_QWORD *)this + 2) = SLTokenGetHomograph();
        Phonemes = (const __CFData *)SLHomographGetPhonemes();
        BytePtr = CFDataGetBytePtr(Phonemes);
        Length = CFDataGetLength(Phonemes);
        v13 = (uint64_t)*a3;
        if (*a3)
        {
          do
          {
            v14 = 0;
LABEL_6:
            v15 = Length - v14;
            if (Length == v14)
              break;
            v16 = *(_QWORD *)(v13 + 32);
            if (*(MTFEWord **)(v16 + 32) != a2)
              break;
            v17 = *(unsigned __int8 *)(v13 + 58);
            v18 = BytePtr[v14];
            if (v17 != v18)
            {
              if (BytePtr[v14] > 0x2Fu)
              {
                switch(BytePtr[v14])
                {
                  case '4':
                    if (v17 != 48)
                      goto LABEL_49;
                    v13 = *(_QWORD *)(v13 + 40);
                    if (!v13 || *(_BYTE *)(v13 + 58) != 44)
                      goto LABEL_49;
                    goto LABEL_43;
                  case '5':
                    if (v17 != 49)
                      goto LABEL_49;
                    v13 = *(_QWORD *)(v13 + 40);
                    if (!v13 || *(_BYTE *)(v13 + 58) != 45)
                      goto LABEL_49;
                    goto LABEL_43;
                  case '6':
                  case '7':
                  case '8':
                  case '9':
                  case ';':
                    goto LABEL_49;
                  case ':':
                  case '<':
                    goto LABEL_13;
                  default:
                    if ((v18 - 74) < 2)
                      goto LABEL_13;
                    if (v18 != 48 || v17 != 55)
                      goto LABEL_49;
                    goto LABEL_43;
                }
              }
              switch(BytePtr[v14])
              {
                case 1u:
                case 2u:
LABEL_13:
                  if (Length == ++v14)
                    goto LABEL_48;
                  goto LABEL_6;
                case 3u:
                case 4u:
                  if (v17 != 20)
                    goto LABEL_49;
                  goto LABEL_31;
                case 5u:
                case 6u:
                case 0xCu:
                case 0xDu:
                case 0xEu:
                case 0xFu:
                case 0x10u:
                  goto LABEL_49;
                case 7u:
                  if (v17 == 22)
                    goto LABEL_31;
                  goto LABEL_49;
                case 8u:
                case 0xBu:
                  if (v17 != 12)
                    goto LABEL_49;
                  goto LABEL_31;
                case 9u:
                case 0x11u:
                  if (v17 != 23)
                    goto LABEL_49;
                  goto LABEL_31;
                case 0xAu:
                case 0x12u:
                  if (v17 != 24)
                    goto LABEL_49;
LABEL_31:
                  if (Length - 1 == v14)
                    goto LABEL_49;
                  v19 = &BytePtr[v14 + 1];
                  if (*v19 != 32)
                    goto LABEL_49;
                  v15 = ~v14 + Length;
                  goto LABEL_44;
                default:
                  if (v18 == 32)
                  {
                    if (v17 != 26)
                      goto LABEL_49;
                  }
                  else if (v18 != 33 || v17 != 27)
                  {
                    goto LABEL_49;
                  }
                  break;
              }
            }
LABEL_43:
            v19 = &BytePtr[v14];
LABEL_44:
            Length = v15 - 1;
            if (v15 == 1)
            {
              v16 = *(_QWORD *)(v13 + 32);
LABEL_48:
              if (v13 == *(_QWORD *)(v16 + 24))
              {
                *((_QWORD *)this + 3) = *(__int16 *)(v16 + 56) - var0_low + 1;
                *a3 = *(MTFEPhoneme **)(v13 + 40);
                return 1;
              }
              break;
            }
            BytePtr = v19 + 1;
            v13 = *(_QWORD *)(v13 + 40);
          }
          while (v13);
        }
LABEL_49:
        ;
      }
    }
  }
  return 0;
}

_DWORD *MTMBConstituent::SplitWord(MTMBConstituent *this, MTFESpeechElement *a2)
{
  uint64_t v4;
  unint64_t v5;
  MTFESpeechElement *var4;
  unint64_t v7;

  v4 = operator new();
  MTFEWord::MTFEWord((MTFEWord *)v4, 0, 0);
  MTFESpeechElement::AddChildAfter(a2->var5, (MTFESpeechElement *)v4, a2);
  v5 = *((_QWORD *)this + 3);
  var4 = a2->var4;
  if (v5 >= 2)
  {
    v7 = v5 - 1;
    do
    {
      var4 = var4->var7;
      --v7;
    }
    while (v7);
  }
  MTFESpeechElement::SplitChildren(a2, var4, (MTFESpeechElement *)v4);
  *(_WORD *)(v4 + 168) = *((_WORD *)MTFEFirstPhoneme(var4) + 28);
  *(_WORD *)(v4 + 170) = var4[1].var0;
  *(_DWORD *)(v4 + 178) = *(_DWORD *)&a2[3].var2;
  return MTMBConstituent::SetWord((const char **)this, (MTFESpeechElement *)v4);
}

void sub_1D22AB9E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40BE0D601BLL);
  _Unwind_Resume(a1);
}

_DWORD *MTMBConstituent::SetWord(const char **this, MTFESpeechElement *a2)
{
  char *v4;
  char *v5;
  SLWordTagSet *v6;
  MTFESpeechElement *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  MTFESpeechElement *var4;
  _DWORD *result;
  _QWORD v20[2];

  v4 = strcpy((char *)&a2[3].var5, *this);
  v5 = strchr(v4, 45);
  if (v5)
    *v5 = 0;
  SLHomographGetPOS();
  BYTE6(a2[1].var4) = SLFirstPOSInSet();
  *(MTFESpeechElement **)((char *)&a2[1].var5 + 4) = (MTFESpeechElement *)SLHomographGetTags();
  v6 = (SLWordTagSet *)((char *)&a2[1].var5 + 4);
  *(MTFESpeechElement **)((char *)&a2[1].var6 + 4) = v7;
  v8 = SLTokenCountHomographs();
  if (v8 >= 1)
  {
    v9 = v8;
    for (i = 0; i != v9; ++i)
    {
      if ((const char *)SLTokenGetHomograph() != this[2])
      {
        v20[0] = SLHomographGetTags();
        v20[1] = v11;
        v12 = LOWORD(v20[0]);
        if (LOWORD(v20[0]))
        {
          v13 = 0x100000000;
          do
          {
            v14 = *(_WORD *)((char *)v20 + (v13 >> 31));
            if ((SLWordTagSet::find((SLWordTagSet *)((char *)&a2[1].var5 + 4)) & 1) == 0)
            {
              v15 = v14 ^ 1;
              if ((SLWordTagSet::find((SLWordTagSet *)((char *)&a2[1].var5 + 4)) & 1) == 0)
              {
                v16 = v6->var0[0];
                if (v16 <= 6)
                {
                  v17 = v16 + 1;
                  v6->var0[0] = v17;
                  v6->var0[v17] = v15;
                }
              }
            }
            v13 += 0x100000000;
            --v12;
          }
          while (v12);
        }
      }
    }
  }
  var4 = a2->var4;
  WORD2(a2[3].var0) = WORD2(var4[1].var0);
  *(_DWORD *)((char *)&a2[3].var0 + 6) = (unsigned __int16)(LOWORD(var4[1].var0) + 1);
  result = MTFEFirstPhoneme(a2);
  result[18] |= 0x10000u;
  do
  {
    if (*(MTFESpeechElement **)(*((_QWORD *)result + 4) + 32) != a2)
      break;
    a2[3].var1 += (int)*((float *)result + 16);
    result = (_DWORD *)*((_QWORD *)result + 5);
  }
  while (result);
  return result;
}

MTMBSelectUnits *MTMBSelectUnits::VisitWord(MTMBSelectUnits *this, MTFESpeechElement *a2)
{
  MTMBSelectUnits *v3;
  uint64_t v4;
  float v5;
  char var5;
  _BOOL4 v7;
  uint64_t v8;
  MTFESpeechElement *v9;
  char v10;
  MTFESpeechElement *var4;
  _BYTE *v12;
  char v13;
  char v14;
  _BYTE *v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  void *v19[4];
  void *v20[4];
  _OWORD v21[3];
  char *p_var5;
  unsigned __int8 v23;
  SLWordTagSet v24;
  BOOL v25;
  uint64_t v26;
  uint64_t var1;
  uint64_t v28;
  char v29;
  char v30;
  char v31;

  if (!*((_BYTE *)this + 234))
  {
    v3 = this;
    *((_QWORD *)this + 28) = a2;
    MTFECommands::Visit((uint64_t)&a2[2], (uint64_t)this);
    if (*((_QWORD *)v3 + 7) && *((_BYTE *)MTFEFirstPhoneme(a2) + 58))
    {
      v4 = *((_QWORD *)v3 + 3);
      v5 = *(float *)(v4 + 32);
      *((_QWORD *)v3 + 11) += 4 * ((int)v5 - 1);
      *(float *)(*((_QWORD *)v3 + 7) + 64) = (float)(v5 + -1.0) + *(float *)(*((_QWORD *)v3 + 7) + 64);
      *((_QWORD *)v3 + 7) = 0;
      *(_DWORD *)(v4 + 32) = 0;
    }
    var5 = (char)a2[3].var5;
    if (var5)
    {
      if (BYTE1(a2[3].var5))
        var5 = 0;
      else
        var5 = ((uint64_t)a2[1].var0 & 0xC) != 0;
    }
    if (*((_BYTE *)v3 + 232)
      || (var5 & 1) != 0
      || (BYTE1(a2[1].var0) & 0x10) != 0
      || (SLWordTagSet::find((SLWordTagSet *)((char *)&a2[1].var5 + 4)) & 1) != 0)
    {
      return (MTMBSelectUnits *)MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)v3);
    }
    else
    {
      MEOWWordSliceInfo::MEOWWordSliceInfo((MEOWWordSliceInfo *)&p_var5);
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBAllowHyphenatedWordUnits))
        v7 = strchr((char *)&a2[3].var5, 45) != 0;
      else
        v7 = 0;
      p_var5 = (char *)&a2[3].var5;
      v23 = BYTE6(a2[1].var4);
      v24 = *(SLWordTagSet *)((char *)&a2[1].var5 + 4);
      v25 = ((uint64_t)a2[1].var0 & 0x200) != 0;
      if (MTMBSelectUnits::FindWordCandidates((uint64_t)v3, (uint64_t)a2, (uint64_t)&p_var5, v21, 1, v7))
      {
        MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v20, 1);
        MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v19, 8);
        MEOWReader::GetWordData(*((_QWORD *)v3 + 2), (unsigned __int16 **)v21, v19, (uint64_t)v20);
        if (*((_BYTE *)v3 + 248) == 3)
          MTMBSelectUnits::AddFirstDemiSlice((uint64_t)v3, v19);
        MEOWVectorBase::Swap((uint64_t *)v3 + 19, (MEOWVectorBase *)v19);
        v8 = *((_QWORD *)v3 + 11) + 4 * *((_QWORD *)v3 + 32);
        var1 = a2[3].var1;
        v28 = v8;
        v9 = a2->var5;
        v10 = *((_BYTE *)v3 + 216);
        if (v9 == v9->var5->var4)
        {
          var4 = v9->var4;
          if (var4 == a2 || a2->var6 == var4 && ((uint64_t)var4[1].var0 & 0x40) != 0)
            v10 = *((_BYTE *)v3 + 217);
        }
        v29 = (4 * LOBYTE(a2[1].var0)) & 0x30 | v10;
        v26 = SWORD2(a2[3].var0) - (uint64_t)SLOWORD(a2[3].var0);
        v12 = MTFEFirstPhoneme(a2);
        v13 = MEOWPhon::sP2M[v12[58]];
        v14 = v12[59];
        v15 = MTFELastPhoneme(a2);
        v16 = v15[59] + MEOWPhon::sP2M[v15[58]];
        v30 = v14 + v13;
        v31 = v16;
        *((_BYTE *)v3 + 248) = 1;
        MEOWVectorBase::~MEOWVectorBase(v19);
        MEOWVectorBase::~MEOWVectorBase(v20);
      }
      this = (MTMBSelectUnits *)MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)v3);
      if (*((_BYTE *)v3 + 248) == 1)
      {
        (*(void (**)(_QWORD, char **))(**((_QWORD **)v3 + 5) + 24))(*((_QWORD *)v3 + 5), &p_var5);
        v17 = operator new();
        *(_DWORD *)(v17 + 8) = -1;
        *(_QWORD *)v17 = &off_1E93694E0;
        *(_QWORD *)(v17 + 16) = a2;
        v18 = v21[1];
        *(_OWORD *)(v17 + 24) = v21[0];
        *(_OWORD *)(v17 + 40) = v18;
        *(_OWORD *)(v17 + 56) = v21[2];
        this = (MTMBSelectUnits *)MTMBSelectUnits::AddSlice(v3, (MTMBUnitSlice *)v17);
        *((_BYTE *)v3 + 248) = 2;
      }
    }
  }
  return this;
}

void sub_1D22ABEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *MTMBSelectUnits::AddFirstDemiSlice(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  MEOWReader *v10;
  unsigned __int8 v11;
  uint64_t v12;
  MEOWReader *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[3];
  unsigned __int8 v22[8];
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25[8];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 __s[64];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 40);
  v5 = &MTFEPhonemeFlags::sSIL;
  if (!v4)
    v4 = &MTFEPhonemeFlags::sSIL;
  v6 = (_BYTE *)v4[5];
  v7 = operator new();
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)v7 = off_1E93694A8;
  *(_DWORD *)(v7 + 8) = -1;
  v9 = (_QWORD *)(v7 + 16);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)(v7 + 16), 144);
  *(_QWORD *)(v7 + 48) = v8;
  *(_QWORD *)v7 = &off_1E9369520;
  __s[0] = 0;
  v21[0] = *a2 + 1;
  v21[1] = 8;
  v21[2] = a2[2];
  MEOWDemiSliceInfo::PhonemeSet::AddPhonemes(__s, v21);
  v10 = *(MEOWReader **)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 265);
  v25[0] = 1;
  v25[1] = v11;
  MTMBDiphoneVariants::AddVariants((_QWORD *)(v7 + 16), v10, v25, __s);
  v12 = *(_QWORD *)(v7 + 32);
  if (!v12)
  {
    v25[0] = *(_BYTE *)(a1 + 265);
    v22[0] = 0;
    MEOWReader::SubstituteSecond(*(MEOWReader **)(a1 + 16), v25, v22);
    MTMBDiphoneVariants::AddVariant(v9, *(MEOWReader **)(a1 + 16), v25[0], v22[0]);
    v12 = *(_QWORD *)(v7 + 32);
  }
  if (v6)
    v5 = v6;
  v13 = *(MEOWReader **)(a1 + 16);
  *(_QWORD *)v25 = *a2;
  v26 = 8;
  v14 = *(_QWORD *)(v7 + 16);
  v27 = a2[2];
  *(_QWORD *)v22 = v14 + 80;
  v23 = 144;
  v24 = v12;
  MTMBDiphoneVariants::AddContext(v9, v13, 1, v25, v22);
  MEOWDemiSliceInfo::MEOWDemiSliceInfo((MEOWDemiSliceInfo *)v25, 0);
  v15 = *(_BYTE *)(a1 + 270);
  v16 = v5[59] + MEOWPhon::sP2M[v5[58]];
  *(_WORD *)&v25[2] = *(_WORD *)(a1 + 268);
  v25[4] = v15;
  v25[5] = v16;
  v25[6] = *(_BYTE *)(a1 + 251);
  v25[7] = 0;
  v17 = *(_QWORD *)(a1 + 88);
  v26 = *(_QWORD *)(a1 + 256);
  v27 = 0;
  v18 = *(_QWORD *)(v7 + 32);
  v19 = *(_QWORD *)(v7 + 16);
  v28 = v17;
  v29 = v18;
  v30 = v19;
  (*(void (**)(_QWORD, unsigned __int8 *))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40), v25);
  return MTMBSelectUnits::AddSlice((MTMBSelectUnits *)a1, (MTMBUnitSlice *)v7);
}

void sub_1D22AC110(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C4034FE1429);
  _Unwind_Resume(a1);
}

uint64_t *MTMBSelectUnits::AddSlice(MTMBSelectUnits *this, MTMBUnitSlice *a2)
{
  _QWORD *v4;
  unsigned __int16 v6;

  v4 = (_QWORD *)((char *)this + 96);
  if (!*((_QWORD *)this + 14) && *((_BYTE *)this + 248) != 2)
  {
    MTMBSelectUnits::ProcessIntermediatePhrases(this, *((MTFESpeechElement **)this + 10));
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBConcurrencyTorture))
      sleep(1u);
  }
  MEOWVectorBase::Append(v4);
  *(_QWORD *)(*((_QWORD *)this + 12) + 8 * *((_QWORD *)this + 14) - 8) = a2;
  v6 = 0;
  if (MTMBUnitInstructions::ReadyInQueue((uint64_t)this + 128, (uint64_t *)this + 17, &v6))
  {
    do
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 5) + 112))(*((_QWORD *)this + 5), v6);
    while ((MTMBUnitInstructions::ReadyInQueue((uint64_t)this + 128, (uint64_t *)this + 17, &v6) & 1) != 0);
  }
  if (MTMBUnitInstructions::ReadyInQueue((uint64_t)this + 128, (uint64_t *)this + 16, &v6))
  {
    do
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 5) + 96))(*((_QWORD *)this + 5), v6);
    while ((MTMBUnitInstructions::ReadyInQueue((uint64_t)this + 128, (uint64_t *)this + 16, &v6) & 1) != 0);
  }
  if (MTMBUnitInstructions::ReadyInQueue((uint64_t)this + 128, (uint64_t *)this + 18, &v6))
  {
    do
    {
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 5) + 104))(*((_QWORD *)this + 5), v6);
      *((_DWORD *)a2 + 2) = v6;
    }
    while ((MTMBUnitInstructions::ReadyInQueue((uint64_t)this + 128, (uint64_t *)this + 18, &v6) & 1) != 0);
  }
  return MTMBUnitInstructions::NextSlice((uint64_t **)this + 16);
}

MTMBSelectUnits *MTMBSelectUnits::VisitCommand(MTMBSelectUnits *this, MTFECommand *a2)
{
  unint64_t var8;

  var8 = a2->var8;
  if ((var8 == 1835429746 || var8 == 1836475764 || var8 == 1836021362) && (a2->var9 & 0x80000000) == 0)
  {
    MTMBUnitInstructions::AddCommand((uint64_t *)this + 16, a2);
    return (MTMBSelectUnits *)(*((uint64_t (**)(MTFECommand *))a2->var0 + 2))(a2);
  }
  return this;
}

MTMBSelectUnits *MTMBSelectUnits::VisitPhoneme(MTMBSelectUnits *this, MTFESpeechElement *a2)
{
  MTMBSelectUnits *v3;
  int v4;
  char v5;
  MTFESpeechElement *var6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  char v16;
  int *v17;
  char v18;
  unsigned __int8 *v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unsigned __int8 v22;
  char v23;
  BOOL v24;
  FILE *v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  int v30;
  unsigned __int8 v31;
  int v32;
  uint64_t v33;
  MTFESpeechElement *var5;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  _QWORD *v44;
  MEOWReader *v45;
  unsigned __int8 v46;
  uint64_t v47;
  MEOWReader *v48;
  MEOWReader *v49;
  _QWORD *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  FILE *v57;
  _QWORD v58[3];
  _BYTE v59[2];
  int v60;
  __int16 v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  _QWORD v69[3];
  unsigned __int8 v70[8];
  uint64_t v71;
  uint64_t v72;
  _BYTE __s[64];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 234))
    return this;
  v3 = this;
  if (*((_BYTE *)this + 249))
  {
    *((_WORD *)this + 134) = 0;
    v4 = BYTE2(a2[1].var0);
    v5 = BYTE3(a2[1].var0) + MEOWPhon::sP2M[BYTE2(a2[1].var0)];
    *((_BYTE *)this + 270) = v5;
    *((_BYTE *)this + 265) = 0;
    *((_BYTE *)this + 266) = v5;
    *((_BYTE *)this + 251) = 0;
    *((_BYTE *)this + 249) = 0;
  }
  else
  {
    v4 = BYTE2(a2[1].var0);
  }
  var6 = a2->var6;
  if (!var6)
    var6 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  if (v4)
  {
    v7 = *((_QWORD *)this + 7);
    v8 = *((_QWORD *)this + 3);
    if (v7)
    {
      v9 = *(float *)(v8 + 32);
      *((_QWORD *)this + 11) += 4 * ((int)v9 - 1);
      *(float *)(v7 + 64) = (float)(v9 + -1.0) + *(float *)(v7 + 64);
      *((_QWORD *)this + 7) = 0;
    }
    *(_DWORD *)(v8 + 32) = 0;
  }
  else
  {
    v10 = *((_QWORD *)this + 3);
    v11 = *(float *)(v10 + 32);
    if (v11 == 0.0)
    {
      v14 = *(float *)&a2[1].var1;
      v15 = fminf(v14, 200.0);
      *(float *)(v10 + 32) = v15;
      *(float *)&a2[1].var1 = v14 - (float)(v15 + -1.0);
      *((_QWORD *)this + 7) = a2;
    }
    else
    {
      v12 = v11 + -1.0;
      *(float *)&a2[1].var1 = v12 + *(float *)&a2[1].var1;
      v13 = *((_QWORD *)this + 9);
      if (v13)
      {
        *(_DWORD *)(v13 + 144) -= (int)v12;
        *((_QWORD *)this + 11) -= 4 * (int)v12;
      }
      *(_DWORD *)(v10 + 32) = 0;
      *((_QWORD *)this + 7) = 0;
    }
  }
  *((_BYTE *)this + 250) = *((_BYTE *)this + 251);
  if (((uint64_t)a2[1].var3 & 0x1400) != 0)
    v16 = 2;
  else
    v16 = 1;
  *((_BYTE *)this + 251) = v16;
  v17 = (int *)((char *)this + 267);
  *(_WORD *)((char *)this + 267) = *((_WORD *)this + 134);
  *((_BYTE *)this + 269) = *((_BYTE *)this + 270);
  v18 = BYTE3(var6[1].var0) + MEOWPhon::sP2M[BYTE2(var6[1].var0)];
  *((_BYTE *)this + 270) = v18;
  v19 = (unsigned __int8 *)this + 265;
  v20 = *((_BYTE *)this + 265);
  v21 = (char *)this + 264;
  *((_BYTE *)this + 264) = v20;
  v22 = *((_BYTE *)this + 266);
  *((_BYTE *)this + 265) = v22;
  *((_BYTE *)this + 266) = v18;
  if (!(v20 | v22))
    MEOWReader::SubstituteFirst(*((MEOWReader **)this + 2), (unsigned __int8 *)this + 264, (unsigned __int8 *)this + 265);
  v68 = 0;
  this = (MTMBSelectUnits *)MEOWReader::SubstituteDemis(*((MEOWReader **)v3 + 2), (unsigned __int8 *)v3 + 264, (unsigned __int8 *)v3 + 265, (unsigned __int8 *)v3 + 266, (unsigned __int8 *)&v68 + 1, (unsigned __int8 *)&v68);
  v23 = (char)this;
  if ((_DWORD)this)
  {
    if ((this & 0x80000000) != 0)
    {
      v25 = (FILE *)*MEMORY[0x1E0C80C10];
      v26 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)v3 + 268));
      v27 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)v3 + 269));
      v28 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)v3 + 270));
      fprintf(v25, "MacinTalk Fatal Error: This voice is broken beyond repair.\n  There are no units for %s-%s-%s, and no even remotely\n  conceivable substitutions.\n", v26, v27, v28);
      this = (MTMBSelectUnits *)MTBEAbort(a2);
    }
    else if ((MTBEDebugFlags::sMEOWDebug & 0x800) != 0)
    {
      v24 = (this & 1) == 0;
      v57 = (FILE *)*MEMORY[0x1E0C80C10];
      MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)v3 + 268));
      MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)v3 + 269));
      MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)v3 + 264));
      if (v24)
      {
        MEOWPhon::Name((MEOWPhon *)*v19);
        this = (MTMBSelectUnits *)fprintf(v57, "MEOW Substitution %s-%s -> %s-%s\n");
      }
      else
      {
        MEOWPhon::Name((MEOWPhon *)HIBYTE(v68));
        MEOWPhon::Name((MEOWPhon *)v68);
        MEOWPhon::Name((MEOWPhon *)*v19);
        this = (MTMBSelectUnits *)fprintf(v57, "MEOW Substitution %s-%s -> %s(-%s)-(%s-)%s\n");
      }
    }
  }
  v29 = vcvtms_u32_f32(*(float *)&a2[1].var1 * *(float *)(&a2[1].var2 + 2));
  v30 = *((char *)v3 + 248);
  if ((v30 - 3) < 2)
  {
    if ((v23 & 1) == 0)
    {
      v31 = *v19;
      if ((v23 & 2) != 0)
        *(_BYTE *)(*((_QWORD *)v3 + 6) + 94) = v31;
      BYTE4(a2[1].var5) = *((_BYTE *)v3 + 264);
      BYTE5(a2[1].var5) = v31;
      BYTE6(a2[1].var5) = *((_BYTE *)v3 + 266);
      MEOWDiphoneSliceInfo::MEOWDiphoneSliceInfo((MEOWDiphoneSliceInfo *)v59);
      v32 = *((unsigned __int8 *)v3 + 265);
      v59[0] = *((_BYTE *)v3 + 264);
      v59[1] = v32;
      v60 = *v17;
      v61 = *((_WORD *)v3 + 125);
      v33 = *((_QWORD *)v3 + 11);
      v62 = *((_QWORD *)v3 + 32);
      v63 = v29;
      v64 = v33;
      var5 = a2->var5;
      if (var5->var3 == a2)
      {
        v35 = *((_QWORD *)v3 + 28);
        while (var5 != (MTFESpeechElement *)v35 || (*(_BYTE *)(v35 + 57) & 0x10) != 0)
        {
          v36 = var5->var5->var3 == var5;
          var5 = var5->var5;
          if (!v36)
            goto LABEL_52;
        }
        v65 = 1;
      }
LABEL_52:
      if (v32
        || (this = (MTMBSelectUnits *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 5) + 80))(*((_QWORD *)v3 + 5))) != 0)
      {
        (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)v3 + 5) + 32))(*((_QWORD *)v3 + 5), v59);
        v54 = operator new();
        v55 = *((_QWORD *)v3 + 6);
        *(_DWORD *)(v54 + 8) = -1;
        *(_QWORD *)v54 = &off_1E9369600;
        *(_QWORD *)(v54 + 16) = v55;
        *(_QWORD *)(v54 + 24) = a2;
        this = (MTMBSelectUnits *)MTMBSelectUnits::AddSlice(v3, (MTMBUnitSlice *)v54);
      }
      if (*v19)
        goto LABEL_56;
      goto LABEL_57;
    }
    if (*v21)
    {
      *(_BYTE *)(*((_QWORD *)v3 + 6) + 94) = HIBYTE(v68);
      v37 = operator new();
      v38 = *((_QWORD *)v3 + 6);
      *(_QWORD *)v37 = off_1E93694A8;
      *(_DWORD *)(v37 + 8) = -1;
      MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)(v37 + 16), 144);
      *(_QWORD *)(v37 + 48) = v38;
      *(_QWORD *)v37 = &off_1E9369520;
      MTMBDiphoneVariants::AddVariant(v39, *((MEOWReader **)v3 + 2), *((unsigned __int8 *)v3 + 264), HIBYTE(v68));
      MEOWDemiSliceInfo::MEOWDemiSliceInfo((MEOWDemiSliceInfo *)v59, 0);
      v40 = *(_QWORD *)(v37 + 16);
      v66 = *(_QWORD *)(v37 + 32);
      v67 = v40;
      v60 = *v17;
      v61 = *((unsigned __int8 *)v3 + 250);
      v41 = *((_QWORD *)v3 + 11);
      v62 = *((_QWORD *)v3 + 32);
      v63 = 0;
      v64 = v41;
      (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)v3 + 5) + 48))(*((_QWORD *)v3 + 5), v59);
      MTMBSelectUnits::AddSlice(v3, (MTMBUnitSlice *)v37);
      MTMBSelectUnits::EvaluatePath(v3, 0);
      *((_BYTE *)v3 + 248) = 2;
    }
LABEL_43:
    v42 = *v19;
    if (*v19)
    {
      BYTE4(a2[1].var5) = *((_BYTE *)v3 + 264);
      BYTE5(a2[1].var5) = v42;
      BYTE6(a2[1].var5) = *((_BYTE *)v3 + 266);
      MEOWDemiSliceInfo::MEOWDemiSliceInfo((MEOWDemiSliceInfo *)v59, 1);
      if (*((_BYTE *)v3 + 248) == 2)
      {
        __s[0] = 0;
        v58[0] = *((_QWORD *)v3 + 19) + 4;
        v58[1] = 8;
        v58[2] = *((_QWORD *)v3 + 21);
        MEOWDemiSliceInfo::PhonemeSet::AddPhonemes(__s, v58);
        v43 = operator new();
        *(_QWORD *)v43 = off_1E93694A8;
        *(_DWORD *)(v43 + 8) = -1;
        v44 = (_QWORD *)(v43 + 16);
        MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)(v43 + 16), 144);
        *(_QWORD *)(v43 + 48) = a2;
        *(_QWORD *)v43 = &off_1E93695C0;
        v45 = (MEOWReader *)*((_QWORD *)v3 + 2);
        v46 = *((_BYTE *)v3 + 265);
        v70[0] = 1;
        v70[1] = v46;
        MTMBDiphoneVariants::AddVariants((_QWORD *)(v43 + 16), v45, __s, v70);
        v47 = *(_QWORD *)(v43 + 32);
        if (!v47)
        {
          v70[0] = 0;
          v48 = (MEOWReader *)*((_QWORD *)v3 + 2);
          LOBYTE(v69[0]) = *((_BYTE *)v3 + 265);
          MEOWReader::SubstituteFirst(v48, v70, (unsigned __int8 *)v69);
          MTMBDiphoneVariants::AddVariant(v44, *((MEOWReader **)v3 + 2), v70[0], LOBYTE(v69[0]));
          v47 = *(_QWORD *)(v43 + 32);
        }
        v49 = (MEOWReader *)*((_QWORD *)v3 + 2);
        *(_QWORD *)v70 = *((_QWORD *)v3 + 19) + 4;
        v71 = 8;
        v72 = *((_QWORD *)v3 + 21);
        v69[0] = *v44 + 16;
        v69[1] = 144;
        v69[2] = v47;
        MTMBDiphoneVariants::AddContext(v44, v49, 0, v70, v69);
      }
      else
      {
        v43 = operator new();
        *(_QWORD *)v43 = off_1E93694A8;
        *(_DWORD *)(v43 + 8) = -1;
        MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)(v43 + 16), 144);
        *(_QWORD *)(v43 + 48) = a2;
        *(_QWORD *)v43 = &off_1E93695C0;
        MTMBDiphoneVariants::AddVariant(v50, *((MEOWReader **)v3 + 2), v68, *((unsigned __int8 *)v3 + 265));
      }
      v51 = *(_QWORD *)(v43 + 16);
      v66 = *(_QWORD *)(v43 + 32);
      v67 = v51;
      v60 = *v17;
      v52 = *((_BYTE *)v3 + 251);
      LOBYTE(v61) = 0;
      HIBYTE(v61) = v52;
      v53 = *((_QWORD *)v3 + 11) + 4 * *((_QWORD *)v3 + 32);
      v62 = 0;
      v63 = v29;
      v64 = v53;
      (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)v3 + 5) + 48))(*((_QWORD *)v3 + 5), v59);
      this = (MTMBSelectUnits *)MTMBSelectUnits::AddSlice(v3, (MTMBUnitSlice *)v43);
LABEL_56:
      v56 = 3;
LABEL_58:
      *((_BYTE *)v3 + 248) = v56;
      goto LABEL_59;
    }
LABEL_57:
    this = (MTMBSelectUnits *)MTMBSelectUnits::EvaluatePath(v3, 1);
    v56 = 4;
    goto LABEL_58;
  }
  if (!*((_BYTE *)v3 + 248) || v30 == 2)
    goto LABEL_43;
LABEL_59:
  *((_QWORD *)v3 + 11) += 4 * (*((_QWORD *)v3 + 32) + v29);
  *((_QWORD *)v3 + 32) = (unint64_t)*(float *)&a2[1].var1 - v29;
  *((_QWORD *)v3 + 6) = a2;
  if (*((_BYTE *)v3 + 269))
    *((_BYTE *)v3 + 216) = 0;
  *((_QWORD *)v3 + 9) = 0;
  return this;
}

void sub_1D22ACAEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C4034FE1429);
  _Unwind_Resume(a1);
}

const char *MTMBSelectUnits::AbortUnitSelection(MTMBSelectUnits *this, const char *a2)
{
  uint64_t v2;
  const char *result;

  *((_BYTE *)this + 234) = 1;
  v2 = *((_QWORD *)this + 30);
  if (v2)
    *(_BYTE *)(v2 + 25) = 1;
  result = MTBEWorker::DebugLog("Aborting unit search.\n", a2);
  __dmb(0xBu);
  return result;
}

MTMBSelectUnits *MTMBSelectUnits::DeletePhrase(MTMBSelectUnits *this, MTFESpeechElement *a2, MTBEPersistentParam *a3)
{
  MTMBSelectUnits *v3;
  const char *v5;
  MTFESpeechElement *var6;
  MTFESpeechElement *var3;
  MTFESpeechElement *v8;

  v3 = this;
  if ((_DWORD)a3)
  {
    this = (MTMBSelectUnits *)sUnitSearchSchedule;
    if (sUnitSearchSchedule)
    {
      MTBEWorker::PurgeTasks((MTBEWorker *)sUnitSearchSchedule, (const char *)v3);
      pthread_mutex_lock((pthread_mutex_t *)&a2[1].var6);
      var6 = a2[3].var6;
      if (var6 && *(MTMBSelectUnits **)&var6[1].var1 == v3)
      {
        var6[4].var2 = 1;
        var3 = var6[4].var3;
        if (var3)
          BYTE1(var3->var4) = 1;
        MTBEWorker::DebugLog("Aborting unit search.\n", v5);
        __dmb(0xBu);
        do
        {
          pthread_cond_wait((pthread_cond_t *)&a2[2].var7, (pthread_mutex_t *)&a2[1].var6);
          v8 = a2[3].var6;
        }
        while (v8 && *(MTMBSelectUnits **)&v8[1].var1 == v3);
      }
      this = (MTMBSelectUnits *)pthread_mutex_unlock((pthread_mutex_t *)&a2[1].var6);
    }
  }
  if (v3)
    return (MTMBSelectUnits *)(*(uint64_t (**)(MTMBSelectUnits *))(*(_QWORD *)v3 + 16))(v3);
  return this;
}

void MTMBWordSlice::~MTMBWordSlice(MTMBWordSlice *this)
{
  JUMPOUT(0x1D8233BA8);
}

void MTMBFirstDemiSlice::~MTMBFirstDemiSlice(void **this)
{
  MEOWVectorBase::~MEOWVectorBase(this + 2);
}

{
  MEOWVectorBase::~MEOWVectorBase(this + 2);
  JUMPOUT(0x1D8233BA8);
}

void MTMBSecondDemiSlice::~MTMBSecondDemiSlice(void **this)
{
  MEOWVectorBase::~MEOWVectorBase(this + 2);
}

{
  MEOWVectorBase::~MEOWVectorBase(this + 2);
  JUMPOUT(0x1D8233BA8);
}

void MTMBDiphoneSlice::~MTMBDiphoneSlice(MTMBDiphoneSlice *this)
{
  JUMPOUT(0x1D8233BA8);
}

uint64_t MTMBSelectUnits::Name(MTMBSelectUnits *this)
{
  return (uint64_t)this + 271;
}

uint64_t `non-virtual thunk to'MTMBSelectUnits::Name(MTMBSelectUnits *this)
{
  return (uint64_t)this + 263;
}

MEOWSearchLatticeLookahead *MEOWSearchLattice::Create(MEOWReader *this, MEOWReader *a2)
{
  char v2;
  MEOWSearchLatticeLookahead *v4;

  v2 = (char)a2;
  v4 = (MEOWSearchLatticeLookahead *)operator new();
  MEOWSearchLatticeLookahead::MEOWSearchLatticeLookahead(v4, this, v2);
  return v4;
}

void sub_1D22ACD8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10F1C40FA58F6FALL);
  _Unwind_Resume(a1);
}

void MEOWWordSliceInfo::MEOWWordSliceInfo(MEOWWordSliceInfo *this)
{
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
  *((_WORD *)this + 5) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_DWORD *)((char *)this + 55) = 0;
}

{
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
  *((_WORD *)this + 5) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_DWORD *)((char *)this + 55) = 0;
}

__n128 MEOWWordSliceInfo::MEOWWordSliceInfo(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 55) = 0;
  return result;
}

{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 55) = 0;
  return result;
}

void MEOWDiphoneSliceInfo::MEOWDiphoneSliceInfo(MEOWDiphoneSliceInfo *this)
{
  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

{
  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

void MEOWDemiSliceInfo::MEOWDemiSliceInfo(MEOWDemiSliceInfo *this, char a2)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 6) = 0;
  *(_OWORD *)this = 0u;
  *((_BYTE *)this + 56) = a2;
  *((_BYTE *)this + 32) = 1;
}

{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 6) = 0;
  *(_OWORD *)this = 0u;
  *((_BYTE *)this + 56) = a2;
  *((_BYTE *)this + 32) = 1;
}

_BYTE *MEOWDemiSliceInfo::PhonemeSet::AddPhonemes(_BYTE *__s, _QWORD *a2)
{
  unint64_t v2;
  _BYTE *v4;
  unint64_t v5;
  void *v6;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;

  v2 = a2[2];
  if (v2)
  {
    v4 = __s;
    v5 = 0;
    v6 = __s + 1;
    v7 = *__s;
    do
    {
      v8 = *(unsigned __int8 *)(*a2 + a2[1] * v5);
      v9 = v7;
      __s = memchr(v6, v8, v7);
      if (!__s)
      {
        *v4 = ++v7;
        v4[v9 + 1] = v8;
        v2 = a2[2];
      }
      ++v5;
    }
    while (v5 < v2);
  }
  return __s;
}

void MEOWAnchorSliceInfo::MEOWAnchorSliceInfo(MEOWAnchorSliceInfo *this)
{
  *(_DWORD *)this = 0;
}

{
  *(_DWORD *)this = 0;
}

void MEOWSearchLatticeImpl::MEOWSearchLatticeImpl(MEOWSearchLatticeImpl *this, MEOWReader *a2, char a3)
{
  char v5;
  FILE **v6;

  *(_QWORD *)this = &off_1E9369698;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  MEOWVectorBase::MEOWVectorBase((MEOWSearchLatticeImpl *)((char *)this + 40), 2);
  MEOWVectorBase::MEOWVectorBase((MEOWSearchLatticeImpl *)((char *)this + 72), 8);
  MEOWVectorBase::MEOWVectorBase((MEOWSearchLatticeImpl *)((char *)this + 104), 2);
  SLML::Vector<float>::Vector((uint64_t)this + 136, 0);
  MEOWVectorBase::MEOWVectorBase((MEOWSearchLatticeImpl *)((char *)this + 160), 2);
  SLML::Vector<float>::Vector((uint64_t)this + 192, 0);
  SLML::Vector<float>::Vector((uint64_t)this + 216, 0);
  SLML::Matrix<float>::Matrix((uint64_t)this + 240, 0, 0);
  SLML::Vector<float>::Vector((uint64_t)this + 272, 0);
  MEOWVectorBase::MEOWVectorBase((MEOWSearchLatticeImpl *)((char *)this + 296), 1);
  MEOWVectorBase::MEOWVectorBase((MEOWSearchLatticeImpl *)((char *)this + 328), 1);
  MEOWVectorBase::MEOWVectorBase((MEOWSearchLatticeImpl *)((char *)this + 360), 8);
  MEOWVectorBase::MEOWVectorBase((MEOWSearchLatticeImpl *)((char *)this + 392), 1);
  *((_DWORD *)this + 134) = 0;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_BYTE *)this + 28) = a3;
  v5 = MTBEDebugFlags::sMEOWDebug;
  *((_BYTE *)this + 29) = (MTBEDebugFlags::sMEOWDebug & 0x40) != 0;
  if (MEOWSearchLatticeImpl::sNeedsHeader)
  {
    if ((v5 & 0x40) != 0)
    {
      v6 = (FILE **)MEMORY[0x1E0C80C20];
      fprintf((FILE *)*MEMORY[0x1E0C80C20], "# EWOC %s\n#\n# Formats:\n#  Word:     ID  Prev  Path  Concat  Unit  Pos   Match  Desc\n#  Diphone:  ID  Prev  Path  Concat  Unit  Spec  Match\n#  Demi:     ID  Prev  Path  Concat  Unit  Spec  Match\n#\n\n", (const char *)kEWOCDumpVersion);
      fflush(*v6);
      MEOWSearchLatticeImpl::sNeedsHeader = 0;
    }
  }
}

void sub_1D22AD090(_Unwind_Exception *a1)
{
  uint64_t *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;

  MEOWVectorBase::~MEOWVectorBase(v8);
  MEOWVectorBase::~MEOWVectorBase(v7);
  MEOWVectorBase::~MEOWVectorBase(v6);
  SLML::Storage<float>::RemoveReference(v1[35]);
  SLML::Storage<float>::RemoveReference(v1[32]);
  SLML::Storage<float>::RemoveReference(v1[28]);
  SLML::Storage<float>::RemoveReference(v1[25]);
  MEOWVectorBase::~MEOWVectorBase(v5);
  SLML::Storage<float>::RemoveReference(v1[18]);
  MEOWVectorBase::~MEOWVectorBase(v4);
  MEOWVectorBase::~MEOWVectorBase(v3);
  MEOWVectorBase::~MEOWVectorBase(v2);
  _Unwind_Resume(a1);
}

void sub_1D22AD11C()
{
  JUMPOUT(0x1D22AD0DCLL);
}

void sub_1D22AD124()
{
  JUMPOUT(0x1D22AD0E4);
}

void sub_1D22AD12C()
{
  JUMPOUT(0x1D22AD0ECLL);
}

void sub_1D22AD134()
{
  JUMPOUT(0x1D22AD0F4);
}

void sub_1D22AD13C()
{
  JUMPOUT(0x1D22AD0FCLL);
}

void sub_1D22AD144()
{
  JUMPOUT(0x1D22AD104);
}

void sub_1D22AD14C()
{
  JUMPOUT(0x1D22AD10CLL);
}

void MEOWSearchLatticeImpl::~MEOWSearchLatticeImpl(MEOWSearchLatticeImpl *this)
{
  *(_QWORD *)this = &off_1E9369698;
  MEOWVectorBase::~MEOWVectorBase((void **)this + 49);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 45);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 41);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 37);
  SLML::Storage<float>::RemoveReference(*((_QWORD *)this + 35));
  SLML::Storage<float>::RemoveReference(*((_QWORD *)this + 32));
  SLML::Storage<float>::RemoveReference(*((_QWORD *)this + 28));
  SLML::Storage<float>::RemoveReference(*((_QWORD *)this + 25));
  MEOWVectorBase::~MEOWVectorBase((void **)this + 20);
  SLML::Storage<float>::RemoveReference(*((_QWORD *)this + 18));
  MEOWVectorBase::~MEOWVectorBase((void **)this + 13);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 9);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 5);
}

{
  MEOWSearchLatticeImpl::~MEOWSearchLatticeImpl(this);
  JUMPOUT(0x1D8233BA8);
}

void MEOWSearchLatticeImpl::AddWordSlice(uint64_t a1, const char **a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;
  float *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float *v17;
  float v18;
  float *v19;
  int v20;
  int v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  float v25;
  float v26;
  int v27;
  uint64_t v28;
  const float *v29;
  char v30;
  _BOOL8 v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  vDSP_Stride v48;
  int v49;
  float v50;
  FILE *v51;
  float v52;
  float *v53;
  int v54;
  float v55;
  float v56;
  char *v57;
  char *v58;
  unsigned int v59;
  char *v60;
  char *v61;
  float *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const float *v66;
  int __N[2];
  int v68;
  char *v69;
  int v70;
  char *v71;
  uint64_t v72;
  unsigned __int16 *__C[5];
  unsigned int v74;
  void *v75[4];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  float *v82;
  void *v83[4];
  void *v84[4];
  void *v85[2];
  unint64_t v86;

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v85, 8);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v84, 1);
  MEOWReader::GetWordDescriptor(*(_QWORD *)(a1 + 8), a2, __C);
  MEOWReader::GetWordData(*(_QWORD *)(a1 + 8), __C, v85, (uint64_t)v84);
  *(_QWORD *)__N = v86;
  MEOWSearchLatticeImpl::AllocateCostVectors((MEOWSearchLatticeImpl *)a1, v86, 4);
  v6 = *(_QWORD *)(a1 + 56);
  MEOWVectorBase::Append((_QWORD *)(a1 + 72));
  *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(_QWORD *)(a1 + 88) - 8) = v6;
  v7 = *(_DWORD *)(a1 + 24);
  if (v7)
  {
    if (v7 == 3)
    {
      MEOWSearchLatticeImpl::Demi2WordCull(a1, (uint64_t)a2, v85, a3);
    }
    else if (v7 == 6)
    {
      MEOWSearchLatticeImpl::Word2WordCull((MEOWSearchLatticeImpl *)a1, (uint64_t)a2, v85, a3);
    }
    else
    {
      fwrite("Illegal concatenation for word slice.\n", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      MTBEAbort(*(MTFESpeechElement **)(a1 + 16));
    }
  }
  else
  {
    MEOWSearchLatticeImpl::Null2WordCull((MEOWSearchLatticeImpl *)a1, (uint64_t)a2, v85, a3);
  }
  MEOWUnitCostWindow::MEOWUnitCostWindow((MEOWUnitCostWindow *)v83, (unint64_t)a2[5], 1, 0.0);
  SLML::Vector<float>::Vector((uint64_t)&v79, __N[0]);
  SLML::Vector<float>::Vector((uint64_t)&v76, 0);
  v71 = (char *)*MEOWPhon::Match((MEOWPhon *)1);
  v69 = (char *)*MEOWPhon::Match(0);
  catlas_sset(v79, 100000.0, v82, v80);
  if (*(_QWORD *)(a1 + 176))
  {
    v9 = 0;
    v10 = 0;
    do
    {
      MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v75, 2);
      v11 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 160) + 2 * v9);
      MEOWReader::GetWord(*(_QWORD *)(a1 + 8), (unsigned __int8 *)v85[0] + 8 * v11, (uint64_t)__C, 0, 0);
      v12 = v74;
      v13 = *(_QWORD *)(a1 + 256);
      v14 = *(_QWORD *)(a1 + 264);
      v15 = *(_QWORD *)(a1 + 244);
      ++*(_DWORD *)(v13 + 4);
      if (v77 != v13)
      {
        SLML::Storage<float>::RemoveReference(v77);
        ++*(_DWORD *)(v13 + 4);
        v77 = v13;
      }
      v76 = v15;
      v78 = v14 + 4 * v11;
      SLML::Storage<float>::RemoveReference(v13);
      v16 = (unint64_t)a2[4];
      MEOWComputeWordUnitCost((MEOWUnitWeightStrategy *)v74, (uint64_t)__C[3], (float *)&__C[4][(uint64_t)__C[2]], (unint64_t)a2[5], (uint64_t)a2[6], (uint64_t)v83[0], (uint64_t)&v76);
      v19 = v82;
      v20 = v80;
      v21 = v80 * v11;
      v82[v80 * (int)v11] = (float)((float)v16 + (float)v16) * v18;
      v22 = (char *)v85[0];
      if (v71[51 * *((char *)a2 + 57) + *((char *)v85[0] + 8 * v11 + 1)] >= 2)
      {
        if (kWordPhonMismatch)
        {
          MTBEDebugParams::GetParam((const __CFString *)kWordPhonMismatch, (const __CFString *)&dword_1EFC76D60, v17, *(float *)&dword_1EFC76D60);
          kWordPhonMismatch = 0;
          v19 = v82;
          v20 = v80;
          v23 = v80 * (int)v11;
        }
        else
        {
          v23 = v21;
        }
        v19[v23] = *(float *)&dword_1EFC76D60 + v19[v23];
        v22 = (char *)v85[0];
        *(float *)(*(_QWORD *)(a1 + 288) + 4 * *(_DWORD *)(a1 + 276) * (int)v11) = *(float *)&dword_1EFC76D60
                                                                                   + *(float *)(*(_QWORD *)(a1 + 288)
                                                                                              + 4
                                                                                              * *(_DWORD *)(a1 + 276)
                                                                                              * (int)v11);
      }
      if (v69[51 * *((char *)a2 + 58) + v22[8 * v11 + 4]] >= 2)
      {
        if (kWordPhonMismatch)
        {
          MTBEDebugParams::GetParam((const __CFString *)kWordPhonMismatch, (const __CFString *)&dword_1EFC76D60, v17, *(float *)&dword_1EFC76D60);
          kWordPhonMismatch = 0;
          v19 = v82;
          v20 = v80;
        }
        v19[v20 * (int)v11] = *(float *)&dword_1EFC76D60 + v19[v20 * (int)v11];
        *(float *)(*(_QWORD *)(a1 + 288) + 4 * *(_DWORD *)(a1 + 276) * (int)v11) = *(float *)&dword_1EFC76D60
                                                                                   + *(float *)(*(_QWORD *)(a1 + 288)
                                                                                              + 4
                                                                                              * *(_DWORD *)(a1 + 276)
                                                                                              * (int)v11);
      }
      v10 += v12;
      MEOWVectorBase::~MEOWVectorBase(v75);
      ++v9;
      v24 = *(_QWORD *)(a1 + 176);
    }
    while (v9 < v24);
  }
  else
  {
    v10 = 0;
    v24 = 0;
  }
  if (kWordLengthWeight)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordLengthWeight, (const __CFString *)&dword_1EFC76D70, v8, *(float *)&dword_1EFC76D70);
    kWordLengthWeight = 0;
  }
  v25 = *(float *)&dword_1EFC76D70 * (float)v24;
  v26 = v25 / (float)v10;
  v27 = *(_DWORD *)(a1 + 24);
  if (v27)
  {
    if (v27 == 3)
    {
      MEOWSearchLatticeImpl::Demi2Word(a1, (uint64_t)a2, (uint64_t *)v85, (uint64_t *)v84);
    }
    else if (v27 == 6)
    {
      MEOWSearchLatticeImpl::Word2Word(a1, v25 / (float)v10, (uint64_t)a2, (uint64_t)v85, (uint64_t *)v84);
    }
    else
    {
      fwrite("Illegal concatenation for word slice.\n", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      MTBEAbort(*(MTFESpeechElement **)(a1 + 16));
    }
  }
  else
  {
    MEOWSearchLatticeImpl::Null2Word(a1, v25 / (float)v10, (uint64_t)a2, (float *)v85, (uint64_t *)v84);
  }
  if (*a3 == 1 && !a3[1])
    MEOWSearchLatticeImpl::Word2Null(a1, v26, (uint64_t)a2, (float *)v85, (uint64_t *)v84);
  v28 = *(_QWORD *)(a1 + 256);
  v29 = (const float *)(*(_QWORD *)(a1 + 264) + 12 * *(int *)(a1 + 248));
  ++*(_DWORD *)(v28 + 4);
  v30 = *((_BYTE *)a2 + 56);
  v31 = (v30 & 0x10) == 0;
  v32 = (v30 & 0x20) == 0;
  if (*(_QWORD *)__N)
  {
    v33 = 0;
    v34 = v30 & 3;
    v35 = (char *)v84[0];
    v36 = (char *)&sPosCost + 16 * v34;
    v37 = (char *)&sHyphenAfter + 8 * v31;
    v38 = *(_QWORD *)__N;
    v39 = (char *)&sHyphenAfter + 8 * v32;
    do
    {
      v40 = *v35++;
      *(float *)((char *)v29 + (v33 >> 30)) = (float)(*(float *)&v36[4 * (v40 & 3)]
                                                    + *(float *)&v37[4 * ((v40 & 0x10) == 0)])
                                            + *(float *)&v39[4 * ((v40 & 0x20) == 0)];
      v33 += 0x100000000;
      --v38;
    }
    while (v38);
  }
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseOptimalWeighting))
  {
    if (kWordOptWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kWordOptWeight, (const __CFString *)&dword_1EFC76D90, v41, *(float *)&dword_1EFC76D90);
      kWordOptWeight = 0;
    }
    MEOWSearchLatticeImpl::ComputeWeightedCosts((MEOWSearchLatticeImpl *)a1, *(float *)&dword_1EFC76D90);
  }
  if (*(_BYTE *)(a1 + 29))
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C20], "Location %p %p\nWord \"%s\" %s\n", *(const void **)(a1 + 32), a2[6], *a2, *(const char **)(MEMORY[0x1E0DA8E90] + 8 * *((unsigned __int8 *)a2 + 8)));
    v63 = v28;
    if (*(_DWORD *)(a1 + 24))
      v42 = *(_QWORD *)(a1 + 40) + 2 * *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(_QWORD *)(a1 + 88) - 8);
    else
      v42 = 0;
    if (*(_QWORD *)__N)
    {
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v65 = v42;
      v66 = v29;
      do
      {
        v47 = *(_QWORD *)(a1 + 256);
        v46 = *(_QWORD *)(a1 + 264);
        v48 = *(int *)(a1 + 248);
        ++*(_DWORD *)(v47 + 4);
        if (v42)
          v49 = *(unsigned __int16 *)(v42 + 2 * v45);
        else
          v49 = -1;
        v70 = v49;
        v50 = *(float *)(*(_QWORD *)(a1 + 208) + 4 * *(_DWORD *)(a1 + 196) * (int)v45);
        v51 = (FILE *)*MEMORY[0x1E0C80C20];
        v52 = *(float *)(*(_QWORD *)(a1 + 232) + 4 * *(_DWORD *)(a1 + 220) * (int)v45);
        v72 = v47;
        v54 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseOptimalWeighting);
        if (v54)
        {
          ++*(_DWORD *)(v47 + 4);
          LODWORD(__C[0]) = 0;
          vDSP_sve((const float *)(v46 + (v43 >> 30)), v48, (float *)__C, 3uLL);
          v55 = *(float *)__C + *(float *)(*(_QWORD *)(a1 + 288) + 4 * *(_DWORD *)(a1 + 276) * (int)v45);
          v64 = v47;
        }
        else
        {
          if (kWordUnitCostWeight)
          {
            MTBEDebugParams::GetParam((const __CFString *)kWordUnitCostWeight, (const __CFString *)&dword_1EFC76DA0, v53, *(float *)&dword_1EFC76DA0);
            kWordUnitCostWeight = 0;
          }
          v55 = *(float *)&dword_1EFC76DA0 * v82[v80 * (int)v45];
        }
        v56 = v29[v43 >> 32];
        if (*(_QWORD *)(a1 + 312))
          v68 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 296) + v45);
        else
          v68 = 0;
        v57 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)v85[0] + v44));
        v58 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)v85[0] + v44 + 1));
        v59 = *(unsigned __int16 *)((char *)v85[0] + v44 + 2);
        v60 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)v85[0] + v44 + 4));
        v61 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)v85[0] + v44 + 5));
        fprintf(v51, " %3lu %3d   %6g  %6g  %6g  %6g   %d [%s-%s#%d - %s-%s#%d]\n", v45, v70, v50, v52, v55, v56, v68, v57, v58, bswap32(v59) >> 16, v60, v61, bswap32(*(unsigned __int16 *)((char *)v85[0] + v44 + 6)) >> 16);
        if (v54)
          SLML::Storage<float>::RemoveReference(v64);
        SLML::Storage<float>::RemoveReference(v72);
        ++v45;
        v44 += 8;
        v43 += 0x100000000;
        v29 = v66;
        v42 = v65;
      }
      while (*(_QWORD *)__N != v45);
    }
    fflush((FILE *)*MEMORY[0x1E0C80C20]);
    v28 = v63;
  }
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseOptimalWeighting))
  {
    MEOWSearchLatticeImpl::ApplyWeightedCosts(a1);
  }
  else
  {
    if (kWordUnitCostWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kWordUnitCostWeight, (const __CFString *)&dword_1EFC76DA0, v62, *(float *)&dword_1EFC76DA0);
      kWordUnitCostWeight = 0;
    }
    cblas_saxpy(__N[0], *(const float *)&dword_1EFC76DA0, v82, 1, *(float **)(a1 + 208), 1);
    cblas_saxpy(__N[0], 1.0, v29, 1, *(float **)(a1 + 208), 1);
  }
  MEOWSearchLatticeImpl::RecomputePathCost((MEOWSearchLatticeImpl *)a1);
  *(_DWORD *)(a1 + 24) = 6;
  MEOWVectorBase::Swap((uint64_t *)(a1 + 360), (MEOWVectorBase *)v85);
  MEOWVectorBase::Swap((uint64_t *)(a1 + 392), (MEOWVectorBase *)v84);
  *(float *)(a1 + 424) = v26;
  SLML::Storage<float>::RemoveReference(v28);
  SLML::Storage<float>::RemoveReference(v77);
  SLML::Storage<float>::RemoveReference(v81);
  MEOWVectorBase::~MEOWVectorBase(v83);
  MEOWVectorBase::~MEOWVectorBase(v84);
  MEOWVectorBase::~MEOWVectorBase(v85);
}

void sub_1D22ADB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;

  SLML::Storage<float>::RemoveReference(a45);
  SLML::Storage<float>::RemoveReference(*(_QWORD *)(v45 - 248));
  MEOWVectorBase::~MEOWVectorBase((void **)(v45 - 232));
  MEOWVectorBase::~MEOWVectorBase((void **)(v45 - 200));
  MEOWVectorBase::~MEOWVectorBase((void **)(v45 - 168));
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::AllocateCostVectors(MEOWSearchLatticeImpl *this, unint64_t a2, int a3)
{
  uint64_t v6;
  int v7;
  _WORD *v8;

  if (*(_DWORD *)(*((_QWORD *)this + 25) + 12) < (int)a2)
    SLML::Vector<float>::ResizeStorage((uint64_t)this + 192, a2);
  *((_DWORD *)this + 48) = a2;
  if (*(_DWORD *)(*((_QWORD *)this + 28) + 12) < (int)a2)
    SLML::Vector<float>::ResizeStorage((uint64_t)this + 216, a2);
  *((_DWORD *)this + 54) = a2;
  if (*((_QWORD *)this + 23) < a2)
    MEOWVectorBase::Allocate((MEOWSearchLatticeImpl *)((char *)this + 160), a2, 1);
  *((_QWORD *)this + 22) = a2;
  if ((a3 & 0x80000000) == 0)
  {
    v6 = *((_QWORD *)this + 32);
    if (*(_DWORD *)(v6 + 8) < (int)a2 || *(_DWORD *)(v6 + 12) < a3)
      SLML::Matrix<float>::ResizeStorage((uint64_t)this + 240, a2, a3);
    *((_DWORD *)this + 60) = a2;
    *((_DWORD *)this + 61) = a3;
    SLML::Matrix<float>::operator=((uint64_t)this + 240, 0.0);
    if (*(_DWORD *)(*((_QWORD *)this + 35) + 12) < (int)a2)
      SLML::Vector<float>::ResizeStorage((uint64_t)this + 272, a2);
    *((_DWORD *)this + 68) = a2;
    catlas_sset(a2, 0.0, *((float **)this + 36), *((_DWORD *)this + 69));
  }
  catlas_sset(*((_DWORD *)this + 48), 500000.0, *((float **)this + 26), *((_DWORD *)this + 49));
  catlas_sset(*((_DWORD *)this + 54), 500000.0, *((float **)this + 29), *((_DWORD *)this + 55));
  if (a2)
  {
    v7 = 0;
    v8 = (_WORD *)*((_QWORD *)this + 20);
    do
      *v8++ = v7++;
    while (a2 > (unsigned __int16)v7);
  }
}

uint64_t MEOWSearchLatticeImpl::ComputeWeightedCosts(MEOWSearchLatticeImpl *this, float a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  FILE **v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float v17;
  uint64_t v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  float v30;
  int v31;
  __CLPK_integer v32;
  __CLPK_integer *v33;
  int v34;
  uint64_t v35;
  float *v36;
  uint64_t v37;
  char v38;
  int v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  const float *v54;
  vDSP_Stride v55;
  vDSP_Length v56;
  int v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const float *__C;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __CLPK_integer __info;
  __CLPK_integer v68;
  __CLPK_integer v69;
  __CLPK_integer v70;
  __CLPK_real __abstol;
  __CLPK_integer v72;
  __CLPK_integer __il;
  __CLPK_real __vu;
  __CLPK_real __vl;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  char __uplo[3];
  __CLPK_integer *__iwork[4];
  __CLPK_integer *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  __CLPK_real *__work;
  uint64_t v86;
  __int128 v87;
  _BYTE v88[8];
  uint64_t v89;
  __CLPK_real *__w;
  const float *v91;
  uint64_t v92;
  uint64_t v93;
  __CLPK_real *v94;
  _BYTE v95[12];
  __int128 v96;

  SLML::Matrix<float>::Matrix((uint64_t)v95, *((_DWORD *)this + 44), *((_DWORD *)this + 61));
  if (*((_QWORD *)this + 22))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *((_QWORD *)this + 32);
      v7 = *((_QWORD *)this + 33) + 4 * *(unsigned __int16 *)(*((_QWORD *)this + 20) + 2 * v5);
      v91 = *(const float **)((char *)this + 244);
      ++*(_DWORD *)(v6 + 4);
      v92 = v6;
      v93 = v7;
      v8 = v96;
      v9 = *((_QWORD *)&v96 + 1) + v4;
      v80 = *(__CLPK_integer **)&v95[4];
      ++*(_DWORD *)(v96 + 4);
      v81 = v8;
      v82 = v9;
      SLML::copy(&v91, (unsigned int *)&v80);
      SLML::Storage<float>::RemoveReference(v81);
      SLML::Storage<float>::RemoveReference(v92);
      ++v5;
      v4 += 4;
    }
    while (*((_QWORD *)this + 22) > v5);
  }
  if (kDumpOptCosts)
  {
    MTBEDebugParams::GetParam(kDumpOptCosts, (const __CFString *)&qword_1EFC76E10, (uint64_t *)qword_1EFC76E10);
    kDumpOptCosts = 0;
  }
  v10 = (FILE **)MEMORY[0x1E0C80C10];
  if ((qword_1EFC76E10 & 1) != 0)
  {
    fwrite("Raw costs:\n", 0xBuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    if (*(int *)v95 >= 1)
    {
      v11 = 0;
      do
      {
        fprintf(*v10, " [%4u]", *(unsigned __int16 *)(*((_QWORD *)this + 20) + 2 * v11));
        if (*(int *)&v95[4] >= 1)
        {
          v12 = 0;
          do
            fprintf(*v10, " %5.2f", *(float *)(*((_QWORD *)&v96 + 1) + 4 * v11 + 4 * *(_DWORD *)&v95[8] * v12++));
          while (v12 < *(int *)&v95[4]);
        }
        fputc(10, *v10);
        ++v11;
      }
      while (v11 < *(int *)v95);
    }
    fputc(10, *v10);
  }
  if (*(int *)&v95[4] >= 1)
  {
    v13 = 0;
    do
    {
      v14 = v96;
      v15 = *(unsigned int *)v95;
      v16 = (float *)(*((_QWORD *)&v96 + 1) + 4 * *(_DWORD *)&v95[8] * v13);
      ++*(_DWORD *)(v96 + 4);
      v17 = *v16;
      if ((int)v15 < 1)
        goto LABEL_32;
      v18 = v15;
      v19 = v16;
      v20 = *v16;
      v21 = *v16;
      do
      {
        v22 = v20;
        v23 = *v19;
        if (*v19 >= v21)
        {
          if (v23 <= v20)
          {
            if (v23 > v17)
              v17 = *v19;
          }
          else
          {
            v20 = *v19;
            v17 = v22;
          }
        }
        else
        {
          v21 = *v19;
        }
        ++v19;
        --v18;
      }
      while (v18);
      if (v21 == v20)
      {
LABEL_32:
        catlas_sset(v15, 0.0, v16, 1);
      }
      else
      {
        if (v17 == 0.0)
          v24 = 1.0;
        else
          v24 = 1.0 / v17;
        do
        {
          *v16 = powf(v24 * *v16, 0.3);
          ++v16;
          --v15;
        }
        while (v15);
      }
      SLML::Storage<float>::RemoveReference(v14);
      ++v13;
    }
    while (v13 < *(int *)&v95[4]);
  }
  v25 = qword_1EFC76E10;
  if (kDumpOptCosts)
  {
    MTBEDebugParams::GetParam(kDumpOptCosts, (const __CFString *)&qword_1EFC76E10, (uint64_t *)qword_1EFC76E10);
    kDumpOptCosts = 0;
    v25 = qword_1EFC76E10;
  }
  if ((v25 & 2) != 0)
  {
    fwrite("Normalized costs:\n", 0x12uLL, 1uLL, *v10);
    if (*(int *)v95 >= 1)
    {
      v26 = 0;
      do
      {
        fprintf(*v10, " [%4u]", *(unsigned __int16 *)(*((_QWORD *)this + 20) + 2 * v26));
        if (*(int *)&v95[4] >= 1)
        {
          v27 = 0;
          do
            fprintf(*v10, " %5.2f", *(float *)(*((_QWORD *)&v96 + 1) + 4 * v26 + 4 * *(_DWORD *)&v95[8] * v27++));
          while (v27 < *(int *)&v95[4]);
        }
        fputc(10, *v10);
        ++v26;
      }
      while (v26 < *(int *)v95);
    }
    fputc(10, *v10);
  }
  v80 = (__CLPK_integer *)v95;
  SLML::matmul((const int **)&v80, (unsigned int *)v95, (uint64_t)&v91);
  if (kDumpOptCosts)
  {
    MTBEDebugParams::GetParam(kDumpOptCosts, (const __CFString *)&qword_1EFC76E10, (uint64_t *)qword_1EFC76E10);
    kDumpOptCosts = 0;
  }
  if ((qword_1EFC76E10 & 4) != 0)
  {
    fwrite("Q:\n", 3uLL, 1uLL, *v10);
    if ((int)v91 >= 1)
    {
      v28 = 0;
      do
      {
        if (SHIDWORD(v91) >= 1)
        {
          v29 = 0;
          do
            fprintf(*v10, " %5.2f", v94[v28 + (int)v92 * v29++]);
          while (v29 < SHIDWORD(v91));
        }
        fputc(10, *v10);
        ++v28;
      }
      while (v28 < (int)v91);
    }
  }
  SLML::Vector<float>::Vector((uint64_t)v88, SHIDWORD(v91));
  SLML::Vector<float>::Vector((uint64_t)&v86, SHIDWORD(v91));
  SLML::Vector<float>::Vector((uint64_t)&v83, 1);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)&v80, 4, 2 * SHIDWORD(v91));
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__iwork, 4, 1uLL);
  qmemcpy(__uplo, "UIV", sizeof(__uplo));
  __lda = v92;
  __n = HIDWORD(v91);
  __vu = 0.0;
  __vl = 0.0;
  v72 = HIDWORD(v91);
  __il = HIDWORD(v91);
  v70 = 0;
  __abstol = 0.0;
  v68 = -1;
  v69 = -1;
  __info = 0;
  ssyevr_(&__uplo[2], &__uplo[1], __uplo, &__n, v94, &__lda, &__vl, &__vu, &__il, &v72, &__abstol, &v70, __w, *((__CLPK_real **)&v87 + 1), &__n, v80, __work, &v69, __iwork[0],
    &v68,
    &__info);
  v30 = *__work;
  v31 = (int)*__work;
  v69 = v31;
  v32 = *__iwork[0];
  v68 = *__iwork[0];
  if (*(_DWORD *)(v84 + 12) < v31)
  {
    SLML::Vector<float>::ResizeStorage((uint64_t)&v83, (int)v30);
    v32 = v68;
  }
  v83 = v31;
  v33 = (__CLPK_integer *)v32;
  if (__iwork[3] < (__CLPK_integer *)v32)
    MEOWVectorBase::Allocate((MEOWVectorBase *)__iwork, v32, 1);
  __iwork[2] = v33;
  ssyevr_(&__uplo[2], &__uplo[1], __uplo, &__n, v94, &__lda, &__vl, &__vu, &__il, &v72, &__abstol, &v70, __w, *((__CLPK_real **)&v87 + 1), &__n, v80, __work, &v69, __iwork[0],
    &v68,
    &__info);
  if (kDumpOptCosts)
  {
    MTBEDebugParams::GetParam(kDumpOptCosts, (const __CFString *)&qword_1EFC76E10, (uint64_t *)qword_1EFC76E10);
    kDumpOptCosts = 0;
  }
  if ((qword_1EFC76E10 & 8) != 0)
  {
    fwrite("p_max:\n", 7uLL, 1uLL, *v10);
    if ((int)v86 >= 1)
    {
      v34 = 0;
      do
        fprintf(*v10, " %5.2f", *(float *)(*((_QWORD *)&v87 + 1) + 4 * HIDWORD(v86) * v34++));
      while (v34 < (int)v86);
    }
    fputc(10, *v10);
  }
  v35 = v86;
  if ((int)v86 >= 1)
  {
    v36 = (float *)*((_QWORD *)&v87 + 1);
    v37 = 4 * SHIDWORD(v86);
    do
    {
      *v36 = *v36 * *v36;
      v36 = (float *)((char *)v36 + v37);
      --v35;
    }
    while (v35);
  }
  v38 = qword_1EFC76E10;
  if (kDumpOptCosts)
  {
    MTBEDebugParams::GetParam(kDumpOptCosts, (const __CFString *)&qword_1EFC76E10, (uint64_t *)qword_1EFC76E10);
    kDumpOptCosts = 0;
    v38 = qword_1EFC76E10;
  }
  if ((v38 & 0x10) != 0)
  {
    fwrite("weights:\n", 9uLL, 1uLL, *v10);
    if ((int)v86 >= 1)
    {
      v39 = 0;
      do
        fprintf(*v10, " %5.2f", *(float *)(*((_QWORD *)&v87 + 1) + 4 * HIDWORD(v86) * v39++));
      while (v39 < (int)v86);
    }
    fputc(10, *v10);
  }
  cblas_sscal(v86, a2, *((float **)&v87 + 1), SHIDWORD(v86));
  v65 = v86;
  v40 = v87;
  ++*(_DWORD *)(v87 + 4);
  v66 = v40;
  __C = *(const float **)v95;
  LODWORD(v63) = *(_DWORD *)&v95[8];
  v41 = v96;
  ++*(_DWORD *)(v96 + 4);
  v64 = v41;
  SLML::MatrixColumns<float>::operator*=((uint64_t)&__C, (const char *)&v65);
  SLML::Storage<float>::RemoveReference(v64);
  SLML::Storage<float>::RemoveReference(v66);
  if (kDumpOptCosts)
  {
    MTBEDebugParams::GetParam(kDumpOptCosts, (const __CFString *)&qword_1EFC76E10, (uint64_t *)qword_1EFC76E10);
    kDumpOptCosts = 0;
  }
  v42 = qword_1EFC76E10;
  if ((qword_1EFC76E10 & 0x20) != 0)
  {
    fwrite("Weighted costs:\n", 0x10uLL, 1uLL, *v10);
    if (*(int *)v95 >= 1)
    {
      v43 = 0;
      do
      {
        fprintf(*v10, " [%4u]", *(unsigned __int16 *)(*((_QWORD *)this + 20) + 2 * v43));
        if (*(int *)&v95[4] >= 1)
        {
          v44 = 0;
          do
            fprintf(*v10, " %5.2f", *(float *)(*((_QWORD *)&v96 + 1) + 4 * v43 + 4 * *(_DWORD *)&v95[8] * v44++));
          while (v44 < *(int *)&v95[4]);
        }
        fputc(10, *v10);
        ++v43;
      }
      while (v43 < *(int *)v95);
    }
    fputc(10, *v10);
    v42 = qword_1EFC76E10;
    if (kDumpOptCosts)
    {
      MTBEDebugParams::GetParam(kDumpOptCosts, (const __CFString *)&qword_1EFC76E10, (uint64_t *)qword_1EFC76E10);
      kDumpOptCosts = 0;
      v42 = qword_1EFC76E10;
    }
  }
  if (v42)
    fputc(10, *v10);
  if (*((_BYTE *)this + 29))
  {
    SLML::Matrix<float>::operator=((uint64_t)this + 240, 0.0);
    if (*((_QWORD *)this + 22))
    {
      v45 = 0;
      v46 = 0;
      do
      {
        v47 = v96;
        v48 = *((_QWORD *)&v96 + 1) + v45;
        __C = *(const float **)&v95[4];
        ++*(_DWORD *)(v96 + 4);
        v63 = v47;
        *(_QWORD *)&v64 = v48;
        v49 = *((_QWORD *)this + 32);
        v50 = *((_QWORD *)this + 33) + 4 * *(unsigned __int16 *)(*((_QWORD *)this + 20) + 2 * v46);
        v59 = *(_QWORD *)((char *)this + 244);
        ++*(_DWORD *)(v49 + 4);
        v60 = v49;
        v61 = v50;
        SLML::copy(&__C, (unsigned int *)&v59);
        SLML::Storage<float>::RemoveReference(v60);
        SLML::Storage<float>::RemoveReference(v63);
        ++v46;
        v45 += 4;
      }
      while (*((_QWORD *)this + 22) > v46);
    }
  }
  else if (*((_QWORD *)this + 22))
  {
    v51 = 0;
    v52 = 0;
    do
    {
      v53 = v96;
      v54 = (const float *)(*((_QWORD *)&v96 + 1) + v51);
      v56 = *(int *)&v95[4];
      v55 = *(int *)&v95[8];
      ++*(_DWORD *)(v96 + 4);
      LODWORD(__C) = 0;
      vDSP_sve(v54, v55, (float *)&__C, v56);
      v57 = *((_DWORD *)this + 49) * *(unsigned __int16 *)(*((_QWORD *)this + 20) + 2 * v52);
      *(float *)(*((_QWORD *)this + 26) + 4 * v57) = *(float *)&__C + *(float *)(*((_QWORD *)this + 26) + 4 * v57);
      SLML::Storage<float>::RemoveReference(v53);
      ++v52;
      v51 += 4;
    }
    while (*((_QWORD *)this + 22) > v52);
  }
  SLML::Vector<float>::operator+=((float **)this + 24, (unsigned int *)this + 68);
  MEOWVectorBase::~MEOWVectorBase((void **)__iwork);
  MEOWVectorBase::~MEOWVectorBase((void **)&v80);
  SLML::Storage<float>::RemoveReference(v84);
  SLML::Storage<float>::RemoveReference(v87);
  SLML::Storage<float>::RemoveReference(v89);
  SLML::Storage<float>::RemoveReference(v93);
  return SLML::Storage<float>::RemoveReference(v96);
}

void sub_1D22AE7F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  SLML::Storage<float>::RemoveReference(*(_QWORD *)(v1 - 168));
  SLML::Storage<float>::RemoveReference(*(_QWORD *)(v1 - 136));
  _Unwind_Resume(a1);
}

uint64_t MEOWSearchLatticeImpl::ApplyWeightedCosts(uint64_t this)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  int v4;
  __int128 v5;
  unsigned int v6;
  uint64_t v7;

  if (*(_BYTE *)(this + 29))
  {
    v1 = this;
    v3 = *(_QWORD *)(this + 240);
    v4 = *(_DWORD *)(this + 248);
    v2 = *(_OWORD *)(this + 256);
    ++*(_DWORD *)(*(_QWORD *)(this + 256) + 4);
    v5 = v2;
    SLML::MatrixRows<float>::sum((int *)&v3, (uint64_t)&v6);
    SLML::Vector<float>::operator+=((float **)(v1 + 192), &v6);
    SLML::Storage<float>::RemoveReference(v7);
    return SLML::Storage<float>::RemoveReference(v5);
  }
  return this;
}

void sub_1D22AE940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  SLML::Storage<float>::RemoveReference(a15);
  SLML::Storage<float>::RemoveReference(a12);
  _Unwind_Resume(a1);
}

uint64_t MEOWSearchLatticeImpl::RecomputePathCost(MEOWSearchLatticeImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  MEOWVectorBase::Swap((uint64_t *)this + 13, (MEOWSearchLatticeImpl *)((char *)this + 160));
  v2 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = v2;
  v3 = *((_QWORD *)this + 26);
  v4 = *((_OWORD *)this + 9);
  *((_QWORD *)this + 18) = *((_QWORD *)this + 25);
  *((_QWORD *)this + 19) = v3;
  *(_OWORD *)((char *)this + 200) = v4;
  v5 = *((_QWORD *)this + 13);
  v6 = *((_QWORD *)this + 15);
  v10 = v3;
  v7 = 126 - 2 * __clz(v6);
  if (v6)
    v8 = v7;
  else
    v8 = 0;
  return std::__introsort<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *,false>(v5, (unsigned __int16 *)(v5 + 2 * v6), &v10, v8, 1);
}

uint64_t MEOWSearchLatticeImpl::AddDiphoneSlice(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  FILE *v9;
  const void *v10;
  const void *v11;
  const char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  vDSP_Stride v19;
  vDSP_Length v20;
  int v21;
  float v22;
  FILE *v23;
  float v24;
  float *v25;
  float v26;
  uint64_t v27;
  float *v28;
  float *v29;
  float *v30;
  __int128 v31;
  __int128 v32;
  unsigned __int8 *v34;
  uint64_t i;
  int v36;
  int v37;
  uint64_t v38;
  float *v39;
  int v40;
  int v41;
  uint64_t v42;
  float *v43;
  int v44;
  int v45;
  uint64_t v46;
  float *__X;
  float __C[3];

  v4 = a2;
  v6 = MEOWReader::CountDiphones(*(MEOWReader **)(a1 + 8), *a2, a2[1]);
  MEOWSearchLatticeImpl::AllocateCostVectors((MEOWSearchLatticeImpl *)a1, v6, 3);
  v7 = *(_QWORD *)(a1 + 56);
  MEOWVectorBase::Append((_QWORD *)(a1 + 72));
  *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(_QWORD *)(a1 + 88) - 8) = v7;
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      MEOWSearchLatticeImpl::Null2Diphone(a1, v4, a3);
      break;
    case 1:
      MEOWSearchLatticeImpl::Diphone2Diphone(a1, v4, a3);
      break;
    case 3:
      MEOWSearchLatticeImpl::Demi2Diphone(a1, v4, a3);
      break;
    case 5:
      MEOWSearchLatticeImpl::Anchor2Diphone(a1, v4, a3);
      break;
    default:
      fwrite("Illegal concatenation for diphone slice.\n", 0x29uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      MTBEAbort(*(MTFESpeechElement **)(a1 + 16));
      break;
  }
  SLML::Vector<float>::Vector((uint64_t)&v44, v6);
  catlas_sset(v44, 0.0, __X, v45);
  if ((MTBEDebugFlags::sMEOWDebug & 0x20) == 0)
    MEOWReader::GetUnitCosts(*(_QWORD *)(a1 + 8), *v4, v4[1], *((_QWORD *)v4 + 1), *((_QWORD *)v4 + 2), v4[6], v4[7], v4[32], v4[33], *((_QWORD *)v4 + 3), (uint64_t)&v44, (_QWORD *)(a1 + 240), a1 + 272, (_QWORD *)(a1 + 160));
  SLML::Vector<float>::Vector((uint64_t)&v40, v6);
  SLML::Vector<float>::Vector((uint64_t)&v36, v6);
  if ((MTBEDebugFlags::sMEOWDebug & 0x1000) != 0)
  {
    MEOWReader::GetSpectralCosts(*(MEOWReader **)(a1 + 8), v4[2], v4[3], v4[4], *v4, v4[1], 0, v43);
    MEOWReader::GetSpectralCosts(*(MEOWReader **)(a1 + 8), v4[3], v4[4], v4[5], *v4, v4[1], 1u, v39);
  }
  else
  {
    catlas_sset(v40, 0.0, v43, v41);
    catlas_sset(v36, 0.0, v39, v37);
  }
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseOptimalWeighting))
  {
    if (kDiphoneOptWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneOptWeight, (const __CFString *)&dword_1EFC76DB0, v8, *(float *)&dword_1EFC76DB0);
      kDiphoneOptWeight = 0;
    }
    MEOWSearchLatticeImpl::ComputeWeightedCosts((MEOWSearchLatticeImpl *)a1, *(float *)&dword_1EFC76DB0);
  }
  if (*(_BYTE *)(a1 + 29))
  {
    v9 = (FILE *)*MEMORY[0x1E0C80C20];
    v10 = *(const void **)(a1 + 32);
    v11 = (const void *)*((_QWORD *)v4 + 3);
    if (*(_BYTE *)(a1 + 28))
      v12 = "Glue";
    else
      v12 = "Diphone";
    v13 = MEOWPhon::Name((MEOWPhon *)*v4);
    v14 = MEOWPhon::Name((MEOWPhon *)v4[1]);
    fprintf(v9, "Location %p %p\n%s %s-%s\n", v10, v11, v12, v13, v14);
    v34 = v4;
    if (*(_DWORD *)(a1 + 24))
    {
      v15 = *(_QWORD *)(a1 + 40) + 2 * *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(_QWORD *)(a1 + 88) - 8);
      if (!v6)
        goto LABEL_38;
    }
    else
    {
      v15 = 0;
      if (!v6)
      {
LABEL_38:
        fflush((FILE *)*MEMORY[0x1E0C80C20]);
        v4 = v34;
        goto LABEL_39;
      }
    }
    v16 = 0;
    v17 = 0;
    for (i = v6; i != v17; LODWORD(v6) = i)
    {
      v6 = *(_QWORD *)(a1 + 256);
      v18 = *(_QWORD *)(a1 + 264);
      v20 = *(int *)(a1 + 244);
      v19 = *(int *)(a1 + 248);
      ++*(_DWORD *)(v6 + 4);
      if (v15)
        v21 = *(unsigned __int16 *)(v15 + 2 * v17);
      else
        v21 = -1;
      v22 = *(float *)(*(_QWORD *)(a1 + 208) + 4 * *(_DWORD *)(a1 + 196) * (int)v17);
      v23 = (FILE *)*MEMORY[0x1E0C80C20];
      v24 = *(float *)(*(_QWORD *)(a1 + 232) + 4 * *(_DWORD *)(a1 + 220) * (int)v17);
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseOptimalWeighting))
      {
        __C[0] = 0.0;
        vDSP_sve((const float *)(v18 + (v16 >> 30)), v19, __C, v20);
        v26 = __C[0] + *(float *)(*(_QWORD *)(a1 + 288) + 4 * *(_DWORD *)(a1 + 276) * (int)v17);
      }
      else
      {
        if (kDiphoneUnitCostWeight)
        {
          MTBEDebugParams::GetParam((const __CFString *)kDiphoneUnitCostWeight, (const __CFString *)&dword_1EFC76DC0, v25, *(float *)&dword_1EFC76DC0);
          kDiphoneUnitCostWeight = 0;
        }
        v26 = *(float *)&dword_1EFC76DC0 * __X[v45 * (int)v17];
      }
      if (kDiphoneSpectralWeight)
      {
        MTBEDebugParams::GetParam((const __CFString *)kDiphoneSpectralWeight, (const __CFString *)&dword_1EFC76DD0, v25, *(float *)&dword_1EFC76DD0);
        kDiphoneSpectralWeight = 0;
      }
      v27 = *(_QWORD *)(a1 + 312);
      if (v27)
        LODWORD(v27) = *(unsigned __int8 *)(*(_QWORD *)(a1 + 296) + v17);
      fprintf(v23, " %3lu %3d   %6g  %6g  %6g  %6g  %d\n", v17, v21, v22, v24, v26, (float)(*(float *)&dword_1EFC76DD0 * (float)(v43[v41 * (int)v17] + v39[v37 * (int)v17])), v27);
      SLML::Storage<float>::RemoveReference(v6);
      ++v17;
      v16 += 0x100000000;
    }
    goto LABEL_38;
  }
LABEL_39:
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseOptimalWeighting))
  {
    MEOWSearchLatticeImpl::ApplyWeightedCosts(a1);
  }
  else
  {
    if (kDiphoneUnitCostWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneUnitCostWeight, (const __CFString *)&dword_1EFC76DC0, v28, *(float *)&dword_1EFC76DC0);
      kDiphoneUnitCostWeight = 0;
    }
    cblas_saxpy(v6, *(const float *)&dword_1EFC76DC0, __X, 1, *(float **)(a1 + 208), 1);
    if (kDiphoneSpectralWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneSpectralWeight, (const __CFString *)&dword_1EFC76DD0, v29, *(float *)&dword_1EFC76DD0);
      kDiphoneSpectralWeight = 0;
    }
    cblas_saxpy(v6, *(const float *)&dword_1EFC76DD0, v43, 1, *(float **)(a1 + 208), 1);
    if (kDiphoneSpectralWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneSpectralWeight, (const __CFString *)&dword_1EFC76DD0, v30, *(float *)&dword_1EFC76DD0);
      kDiphoneSpectralWeight = 0;
    }
    cblas_saxpy(v6, *(const float *)&dword_1EFC76DD0, v39, 1, *(float **)(a1 + 208), 1);
  }
  MEOWSearchLatticeImpl::RecomputePathCost((MEOWSearchLatticeImpl *)a1);
  *(_DWORD *)(a1 + 24) = 1;
  v31 = *(_OWORD *)v4;
  v32 = *((_OWORD *)v4 + 1);
  *(_WORD *)(a1 + 464) = *((_WORD *)v4 + 16);
  *(_OWORD *)(a1 + 432) = v31;
  *(_OWORD *)(a1 + 448) = v32;
  SLML::Storage<float>::RemoveReference(v38);
  SLML::Storage<float>::RemoveReference(v42);
  return SLML::Storage<float>::RemoveReference(v46);
}

void sub_1D22AEFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  SLML::Storage<float>::RemoveReference(a22);
  SLML::Storage<float>::RemoveReference(a25);
  _Unwind_Resume(a1);
}

uint64_t MEOWSearchLatticeImpl::AddBreathDiphoneSlice(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  float *v5;
  FILE *v6;
  const void *v7;
  const void *v8;
  const char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  vDSP_Stride v16;
  vDSP_Length v17;
  float v18;
  FILE *v19;
  float v20;
  float *v21;
  float v22;
  uint64_t v23;
  float *v24;
  float *v25;
  __int128 v26;
  __int128 v27;
  unsigned __int8 *v29;
  uint64_t __N;
  _BYTE v31[4];
  int v32;
  uint64_t v33;
  float *v34;
  int v35;
  int v36;
  uint64_t v37;
  float *__X;
  float __C[3];

  v2 = a2;
  __N = MEOWReader::CountDiphones(*(MEOWReader **)(a1 + 8), *a2, a2[1]);
  MEOWSearchLatticeImpl::AllocateCostVectors((MEOWSearchLatticeImpl *)a1, __N, 3);
  v4 = *(_QWORD *)(a1 + 56);
  MEOWVectorBase::Append((_QWORD *)(a1 + 72));
  *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(_QWORD *)(a1 + 88) - 8) = v4;
  if (*(_DWORD *)(a1 + 24))
  {
    fwrite("Illegal concatenation for breath diphone slice.\n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    MTBEAbort(*(MTFESpeechElement **)(a1 + 16));
  }
  else
  {
    catlas_sset(*(_DWORD *)(a1 + 192), 0.0, *(float **)(a1 + 208), *(_DWORD *)(a1 + 196));
    catlas_sset(*(_DWORD *)(a1 + 216), 0.0, *(float **)(a1 + 232), *(_DWORD *)(a1 + 220));
  }
  SLML::Vector<float>::Vector((uint64_t)&v35, __N);
  catlas_sset(v35, 0.0, __X, v36);
  if ((MTBEDebugFlags::sMEOWDebug & 0x20) == 0)
    MEOWReader::GetUnitCosts(*(_QWORD *)(a1 + 8), *v2, v2[1], *((_QWORD *)v2 + 1), *((_QWORD *)v2 + 2), v2[6], v2[7], v2[32], v2[33], *((_QWORD *)v2 + 3), (uint64_t)&v35, (_QWORD *)(a1 + 240), a1 + 272, 0);
  SLML::Vector<float>::Vector((uint64_t)v31, __N);
  if ((MTBEDebugFlags::sMEOWDebug & 0x1000) != 0)
    MEOWReader::GetSpectralCosts(*(MEOWReader **)(a1 + 8), v2[3], v2[4], v2[5], *v2, v2[1], 1u, v34);
  else
    bzero(v34, 4 * __N);
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseOptimalWeighting))
  {
    if (kDiphoneOptWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneOptWeight, (const __CFString *)&dword_1EFC76DB0, v5, *(float *)&dword_1EFC76DB0);
      kDiphoneOptWeight = 0;
    }
    MEOWSearchLatticeImpl::ComputeWeightedCosts((MEOWSearchLatticeImpl *)a1, *(float *)&dword_1EFC76DB0);
  }
  if (*(_BYTE *)(a1 + 29))
  {
    v6 = (FILE *)*MEMORY[0x1E0C80C20];
    v7 = *(const void **)(a1 + 32);
    v8 = (const void *)*((_QWORD *)v2 + 3);
    if (*(_BYTE *)(a1 + 28))
      v9 = "Glue";
    else
      v9 = "Diphone";
    v10 = MEOWPhon::Name((MEOWPhon *)*v2);
    v11 = MEOWPhon::Name((MEOWPhon *)v2[1]);
    v29 = v2;
    fprintf(v6, "Location %p %p\n%s %s-%s\n", v7, v8, v9, v10, v11);
    if (__N)
    {
      v12 = 0;
      for (i = 0; i != __N; ++i)
      {
        v15 = *(_QWORD *)(a1 + 256);
        v14 = *(_QWORD *)(a1 + 264);
        v17 = *(int *)(a1 + 244);
        v16 = *(int *)(a1 + 248);
        ++*(_DWORD *)(v15 + 4);
        v18 = *(float *)(*(_QWORD *)(a1 + 208) + 4 * *(_DWORD *)(a1 + 196) * (int)i);
        v19 = (FILE *)*MEMORY[0x1E0C80C20];
        v20 = *(float *)(*(_QWORD *)(a1 + 232) + 4 * *(_DWORD *)(a1 + 220) * (int)i);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseOptimalWeighting))
        {
          __C[0] = 0.0;
          vDSP_sve((const float *)(v14 + (v12 >> 30)), v16, __C, v17);
          v22 = __C[0] + *(float *)(*(_QWORD *)(a1 + 288) + 4 * *(_DWORD *)(a1 + 276) * (int)i);
        }
        else
        {
          if (kDiphoneUnitCostWeight)
          {
            MTBEDebugParams::GetParam((const __CFString *)kDiphoneUnitCostWeight, (const __CFString *)&dword_1EFC76DC0, v21, *(float *)&dword_1EFC76DC0);
            kDiphoneUnitCostWeight = 0;
          }
          v22 = *(float *)&dword_1EFC76DC0 * __X[v36 * (int)i];
        }
        if (kDiphoneSpectralWeight)
        {
          MTBEDebugParams::GetParam((const __CFString *)kDiphoneSpectralWeight, (const __CFString *)&dword_1EFC76DD0, v21, *(float *)&dword_1EFC76DD0);
          kDiphoneSpectralWeight = 0;
        }
        v23 = *(_QWORD *)(a1 + 312);
        if (v23)
          LODWORD(v23) = *(unsigned __int8 *)(*(_QWORD *)(a1 + 296) + i);
        fprintf(v19, " %3lu  -1   %6g  %6g  %6g  %6g  %d\n", i, v18, v20, v22, (float)(*(float *)&dword_1EFC76DD0 * v34[v32 * (int)i]), v23);
        SLML::Storage<float>::RemoveReference(v15);
        v12 += 0x100000000;
      }
    }
    fflush((FILE *)*MEMORY[0x1E0C80C20]);
    v2 = v29;
  }
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseOptimalWeighting))
  {
    MEOWSearchLatticeImpl::ApplyWeightedCosts(a1);
  }
  else
  {
    if (kDiphoneUnitCostWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneUnitCostWeight, (const __CFString *)&dword_1EFC76DC0, v24, *(float *)&dword_1EFC76DC0);
      kDiphoneUnitCostWeight = 0;
    }
    cblas_saxpy(__N, *(const float *)&dword_1EFC76DC0, __X, 1, *(float **)(a1 + 208), 1);
    if (kDiphoneSpectralWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneSpectralWeight, (const __CFString *)&dword_1EFC76DD0, v25, *(float *)&dword_1EFC76DD0);
      kDiphoneSpectralWeight = 0;
    }
    cblas_saxpy(__N, *(const float *)&dword_1EFC76DD0, v34, 1, *(float **)(a1 + 208), 1);
  }
  MEOWSearchLatticeImpl::RecomputePathCost((MEOWSearchLatticeImpl *)a1);
  *(_DWORD *)(a1 + 24) = 1;
  v26 = *(_OWORD *)v2;
  v27 = *((_OWORD *)v2 + 1);
  *(_WORD *)(a1 + 464) = *((_WORD *)v2 + 16);
  *(_OWORD *)(a1 + 432) = v26;
  *(_OWORD *)(a1 + 448) = v27;
  SLML::Storage<float>::RemoveReference(v33);
  return SLML::Storage<float>::RemoveReference(v37);
}

void sub_1D22AF49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  SLML::Storage<float>::RemoveReference(a21);
  _Unwind_Resume(a1);
}

uint64_t MEOWSearchLatticeImpl::AddDemiSlice(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  FILE *v13;
  const char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int16 *v30;
  char *v31;
  unint64_t v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  unint64_t v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  unsigned int v42;
  unsigned __int16 v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  float *v52;
  FILE **v53;
  FILE *v54;
  char *v55;
  int v56;
  char *v57;
  uint64_t v58;
  FILE *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  FILE *v63;
  char *v64;
  const char *v65;
  FILE *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  FILE *v73;
  char *v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  vDSP_Stride v84;
  vDSP_Length v85;
  int v86;
  float v87;
  FILE **v88;
  FILE *v89;
  float v90;
  float *v91;
  float v92;
  uint64_t v93;
  float *v94;
  float *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  void *__C[4];
  _DWORD v104[2];
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float *__X;
  uint64_t v110;
  _DWORD v111[2];
  uint64_t v112;
  float *v113;
  int v114;
  int v115;
  uint64_t v116;
  float *v117;

  v4 = a2;
  if (*(_QWORD *)(a2 + 40))
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = (unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v6);
      v10 = MEOWReader::CountDiphones(*(MEOWReader **)(a1 + 8), *v9, v9[1]);
      *((_QWORD *)v9 + 1) = v10;
      v7 += v10;
      ++v8;
      v6 += 144;
    }
    while (v8 < *(_QWORD *)(v4 + 40));
  }
  else
  {
    v7 = 0;
  }
  MEOWSearchLatticeImpl::AllocateCostVectors((MEOWSearchLatticeImpl *)a1, v7, 3);
  v11 = *(_QWORD *)(a1 + 56);
  MEOWVectorBase::Append((_QWORD *)(a1 + 72));
  *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(_QWORD *)(a1 + 88) - 8) = v11;
  v12 = *(_DWORD *)(a1 + 24);
  if (!*(_BYTE *)(v4 + 56))
  {
    if (v12 == 3)
    {
      MEOWSearchLatticeImpl::Demi2Demi(a1, v4, a3);
      goto LABEL_18;
    }
    if (v12 == 1)
    {
      MEOWSearchLatticeImpl::Diphone2Demi(a1, v4, a3);
      goto LABEL_18;
    }
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = "Illegal concatenation for -demi slice.\n";
LABEL_17:
    fwrite(v14, 0x27uLL, 1uLL, v13);
    MTBEAbort(*(MTFESpeechElement **)(a1 + 16));
    goto LABEL_18;
  }
  if (!v12)
  {
    catlas_sset(*(_DWORD *)(a1 + 192), 0.0, *(float **)(a1 + 208), *(_DWORD *)(a1 + 196));
    catlas_sset(*(_DWORD *)(a1 + 216), 0.0, *(float **)(a1 + 232), *(_DWORD *)(a1 + 220));
    MEOWSearchLatticeImpl::Null2Demi((MEOWSearchLatticeImpl *)a1, (const MEOWDemiSliceInfo *)v4);
    goto LABEL_18;
  }
  if (v12 != 6)
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = "Illegal concatenation for demi- slice.\n";
    goto LABEL_17;
  }
  MEOWSearchLatticeImpl::Word2Demi(a1, v4, a3);
LABEL_18:
  v101 = v7;
  SLML::Vector<float>::Vector((uint64_t)&v114, v7);
  catlas_sset(v114, 0.0, v117, v115);
  v102 = v4;
  if ((MTBEDebugFlags::sMEOWDebug & 0x20) == 0 && *(_QWORD *)(v4 + 40))
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(v4 + 48);
      v18 = v17 + 144 * v15;
      v21 = *(_DWORD *)(v18 + 8);
      v20 = (_QWORD *)(v18 + 8);
      v19 = v21;
      v22 = v115;
      v111[0] = v21;
      v111[1] = v115;
      v23 = v116;
      ++*(_DWORD *)(v116 + 4);
      v112 = v23;
      v113 = v117;
      if ((_DWORD)v16)
        v113 = &v117[v22 * (int)v16];
      LODWORD(v108) = *(_DWORD *)(a1 + 248);
      v24 = *(_QWORD *)(a1 + 256);
      ++*(_DWORD *)(v24 + 4);
      v25 = *(_QWORD *)(a1 + 264);
      __X = (float *)v24;
      v110 = v25;
      v107 = v19 | 0x300000000;
      if ((_DWORD)v16)
        v110 = v25 + 4 * (int)v16;
      v26 = *(_DWORD *)(a1 + 276);
      v104[0] = v19;
      v104[1] = v26;
      v27 = *(_QWORD *)(a1 + 280);
      ++*(_DWORD *)(v27 + 4);
      v28 = *(_QWORD *)(a1 + 288);
      v105 = v27;
      v106 = v28;
      if ((_DWORD)v16)
        v106 = v28 + 4 * v26 * (int)v16;
      MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__C, 2);
      v29 = *(_QWORD *)(a1 + 176);
      if (v29)
      {
        v30 = *(unsigned __int16 **)(a1 + 160);
        v31 = (char *)&v30[v29];
        do
        {
          v32 = v29 >> 1;
          v33 = &v30[v29 >> 1];
          v35 = *v33;
          v34 = v33 + 1;
          v29 += ~(v29 >> 1);
          if (v16 > v35)
            v30 = v34;
          else
            v29 = v32;
        }
        while (v29);
        v36 = v31 - (char *)v30;
        if (v36)
        {
          v37 = v36 >> 1;
          v38 = v30;
          do
          {
            v39 = v37 >> 1;
            v40 = &v38[v37 >> 1];
            v42 = *v40;
            v41 = v40 + 1;
            v37 += ~(v37 >> 1);
            if (*v20 + v16 > v42)
              v38 = v41;
            else
              v37 = v39;
          }
          while (v37);
          while (v30 < v38)
          {
            v43 = *v30;
            MEOWVectorBase::Append(__C);
            ++v30;
            *((_WORD *)__C[0] + (uint64_t)__C[2] - 1) = v43 - v16;
          }
        }
      }
      v4 = v102;
      MEOWReader::GetUnitCosts(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(v17 + 144 * v15), *(unsigned __int8 *)(v17 + 144 * v15 + 1), *(_QWORD *)(v102 + 8), *(_QWORD *)(v102 + 16), *(unsigned __int8 *)(v102 + 6), *(unsigned __int8 *)(v102 + 7), 1, 0, *(_QWORD *)(v102 + 24), (uint64_t)v111, &v107, (uint64_t)v104, __C);
      v16 += *v20;
      MEOWVectorBase::~MEOWVectorBase(__C);
      SLML::Storage<float>::RemoveReference(v105);
      SLML::Storage<float>::RemoveReference((uint64_t)__X);
      SLML::Storage<float>::RemoveReference(v112);
      ++v15;
    }
    while (v15 < *(_QWORD *)(v102 + 40));
  }
  v44 = v101;
  SLML::Vector<float>::Vector((uint64_t)&v107, v101);
  if ((MTBEDebugFlags::sMEOWDebug & 0x1000) != 0)
  {
    if (*(_QWORD *)(v4 + 40))
    {
      v45 = 0;
      v46 = 0;
      v47 = 0;
      do
      {
        v48 = (unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v45);
        v49 = *(_BYTE *)(v4 + 5);
        v50 = *(_BYTE *)(v4 + 4);
        if (!*(_BYTE *)(v4 + 56))
          v49 = *(_BYTE *)(v4 + 4);
        v51 = *(_BYTE *)(v4 + 3);
        if (!*(_BYTE *)(v4 + 56))
        {
          v50 = *(_BYTE *)(v4 + 3);
          v51 = *(_BYTE *)(v4 + 2);
        }
        MEOWReader::GetSpectralCosts(*(MEOWReader **)(a1 + 8), v51, v50, v49, *v48, v48[1], *(unsigned __int8 *)(v4 + 56), &__X[HIDWORD(v107) * (int)v47]);
        v47 += *((_QWORD *)v48 + 1);
        ++v46;
        v45 += 144;
      }
      while (v46 < *(_QWORD *)(v4 + 40));
    }
  }
  else
  {
    catlas_sset(v107, 0.0, __X, SHIDWORD(v107));
  }
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseOptimalWeighting))
  {
    if (kDemiOptWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDemiOptWeight, (const __CFString *)&dword_1EFC76DE0, v52, *(float *)&dword_1EFC76DE0);
      kDemiOptWeight = 0;
    }
    MEOWSearchLatticeImpl::ComputeWeightedCosts((MEOWSearchLatticeImpl *)a1, *(float *)&dword_1EFC76DE0);
  }
  if (*(_BYTE *)(a1 + 29))
  {
    v53 = (FILE **)MEMORY[0x1E0C80C20];
    fprintf((FILE *)*MEMORY[0x1E0C80C20], "Location %p %p\nDemi ", *(const void **)(a1 + 32), *(const void **)(v4 + 24));
    if (*(_QWORD *)(v4 + 40) == 1)
    {
      v54 = *v53;
      v55 = MEOWPhon::Name((MEOWPhon *)**(unsigned __int8 **)(v4 + 48));
      v56 = *(unsigned __int8 *)(v4 + 56);
      v57 = MEOWPhon::Name((MEOWPhon *)*(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + 1));
      v58 = 62;
      if (!v56)
        v58 = 60;
      fprintf(v54, "%s%c%s\n", v55, v58, v57);
    }
    else
    {
      v59 = *v53;
      if (*(_BYTE *)(v4 + 56))
      {
        fputc(123, *v53);
        v60 = v4;
        if (*(_QWORD *)(v4 + 40))
        {
          v61 = 0;
          v62 = 0;
          do
          {
            v63 = *v53;
            v64 = MEOWPhon::Name((MEOWPhon *)*(unsigned __int8 *)(*(_QWORD *)(v60 + 48) + v61));
            if (v62)
              v65 = ",";
            else
              v65 = "";
            fprintf(v63, "%s%s", v65, v64);
            ++v62;
            v61 += 144;
          }
          while (v62 < *(_QWORD *)(v60 + 40));
        }
        v66 = *v53;
        v67 = MEOWPhon::Name((MEOWPhon *)*(unsigned __int8 *)(*(_QWORD *)(v60 + 48) + 1));
        v68 = v60;
        fprintf(v66, "}>%s [", v67);
      }
      else
      {
        v69 = MEOWPhon::Name((MEOWPhon *)**(unsigned __int8 **)(v4 + 48));
        fprintf(v59, "%s>{", v69);
        v70 = v4;
        if (*(_QWORD *)(v4 + 40))
        {
          v71 = 0;
          v72 = 1;
          do
          {
            v73 = *v53;
            v74 = MEOWPhon::Name((MEOWPhon *)*(unsigned __int8 *)(*(_QWORD *)(v70 + 48) + v72));
            if (v71)
              v75 = ",";
            else
              v75 = "";
            fprintf(v73, "%s%s", v75, v74);
            ++v71;
            v72 += 144;
          }
          while (v71 < *(_QWORD *)(v70 + 40));
        }
        fwrite("} [", 3uLL, 1uLL, *v53);
        v68 = v70;
      }
      if (*(_QWORD *)(v68 + 40))
      {
        v76 = 0;
        v77 = 8;
        do
        {
          if (v76)
            v78 = ",";
          else
            v78 = "";
          fprintf(*v53, "%s%lu", v78, *(_QWORD *)(*(_QWORD *)(v68 + 48) + v77));
          ++v76;
          v77 += 144;
        }
        while (v76 < *(_QWORD *)(v68 + 40));
      }
      fwrite("]\n", 2uLL, 1uLL, *v53);
    }
    if (*(_DWORD *)(a1 + 24))
    {
      v79 = *(_QWORD *)(a1 + 40) + 2 * *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(_QWORD *)(a1 + 88) - 8);
      if (!v101)
        goto LABEL_101;
    }
    else
    {
      v79 = 0;
      if (!v101)
      {
LABEL_101:
        fflush(*v53);
        v4 = v102;
        goto LABEL_102;
      }
    }
    v80 = 0;
    v81 = 0;
    v100 = v79;
    do
    {
      v83 = *(_QWORD *)(a1 + 256);
      v82 = *(_QWORD *)(a1 + 264);
      v85 = *(int *)(a1 + 244);
      v84 = *(int *)(a1 + 248);
      ++*(_DWORD *)(v83 + 4);
      if (v79)
        v86 = *(unsigned __int16 *)(v79 + 2 * v81);
      else
        v86 = -1;
      v87 = *(float *)(*(_QWORD *)(a1 + 208) + 4 * *(_DWORD *)(a1 + 196) * (int)v81);
      v88 = v53;
      v89 = *v53;
      v90 = *(float *)(*(_QWORD *)(a1 + 232) + 4 * *(_DWORD *)(a1 + 220) * (int)v81);
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseOptimalWeighting))
      {
        LODWORD(__C[0]) = 0;
        vDSP_sve((const float *)(v82 + (v80 >> 30)), v84, (float *)__C, v85);
        v92 = *(float *)__C + *(float *)(*(_QWORD *)(a1 + 288) + 4 * *(_DWORD *)(a1 + 276) * (int)v81);
      }
      else
      {
        if (kDemiUnitCostWeight)
        {
          MTBEDebugParams::GetParam((const __CFString *)kDemiUnitCostWeight, (const __CFString *)&dword_1EFC76DF0, v91, *(float *)&dword_1EFC76DF0);
          kDemiUnitCostWeight = 0;
        }
        v92 = *(float *)&dword_1EFC76DF0 * v117[v115 * (int)v81];
      }
      if (kDemiSpectralWeight)
      {
        MTBEDebugParams::GetParam((const __CFString *)kDemiSpectralWeight, (const __CFString *)&dword_1EFC76E00, v91, *(float *)&dword_1EFC76E00);
        kDemiSpectralWeight = 0;
      }
      v93 = *(_QWORD *)(a1 + 312);
      if (v93)
        LODWORD(v93) = *(unsigned __int8 *)(*(_QWORD *)(a1 + 296) + v81);
      v44 = v101;
      fprintf(v89, " %3lu %3d   %6g  %6g  %6g  %6g  %d\n", v81, v86, v87, v90, v92, (float)(*(float *)&dword_1EFC76E00 * __X[HIDWORD(v107) * (int)v81]), v93);
      SLML::Storage<float>::RemoveReference(v83);
      ++v81;
      v80 += 0x100000000;
      v53 = v88;
      v79 = v100;
    }
    while (v101 != v81);
    goto LABEL_101;
  }
LABEL_102:
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseOptimalWeighting))
  {
    MEOWSearchLatticeImpl::ApplyWeightedCosts(a1);
  }
  else
  {
    if (kDemiUnitCostWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDemiUnitCostWeight, (const __CFString *)&dword_1EFC76DF0, v94, *(float *)&dword_1EFC76DF0);
      kDemiUnitCostWeight = 0;
    }
    cblas_saxpy(v44, *(const float *)&dword_1EFC76DF0, v117, 1, *(float **)(a1 + 208), 1);
    if (kDemiSpectralWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDemiSpectralWeight, (const __CFString *)&dword_1EFC76E00, v95, *(float *)&dword_1EFC76E00);
      kDemiSpectralWeight = 0;
    }
    cblas_saxpy(v44, *(const float *)&dword_1EFC76E00, __X, 1, *(float **)(a1 + 208), 1);
  }
  MEOWSearchLatticeImpl::RecomputePathCost((MEOWSearchLatticeImpl *)a1);
  *(_DWORD *)(a1 + 24) = 3;
  v96 = *(_OWORD *)v4;
  v97 = *(_OWORD *)(v4 + 16);
  v98 = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(a1 + 513) = *(_OWORD *)(v4 + 41);
  *(_OWORD *)(a1 + 488) = v97;
  *(_OWORD *)(a1 + 504) = v98;
  *(_OWORD *)(a1 + 472) = v96;
  SLML::Storage<float>::RemoveReference(v108);
  return SLML::Storage<float>::RemoveReference(v116);
}

void sub_1D22AFE6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  SLML::Storage<float>::RemoveReference(*(_QWORD *)(v1 - 136));
  _Unwind_Resume(a1);
}

uint64_t MEOWSearchLatticeImpl::AddBreathDemiSlice(uint64_t a1, __int128 *a2)
{
  __int128 *v2;
  unsigned __int8 *v4;
  uint64_t v5;
  float *v6;
  FILE **v7;
  FILE *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  vDSP_Length v16;
  vDSP_Stride v17;
  float v18;
  FILE *v19;
  float v20;
  float *v21;
  float v22;
  uint64_t v23;
  float *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 *v29;
  uint64_t __N;
  int v31;
  int v32;
  uint64_t v33;
  float *__X;
  float __C;

  v2 = a2;
  v4 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
  __N = MEOWReader::CountDiphones(*(MEOWReader **)(a1 + 8), *v4, v4[1]);
  MEOWSearchLatticeImpl::AllocateCostVectors((MEOWSearchLatticeImpl *)a1, __N, 3);
  v5 = *(_QWORD *)(a1 + 56);
  MEOWVectorBase::Append((_QWORD *)(a1 + 72));
  *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(_QWORD *)(a1 + 88) - 8) = v5;
  if (*(_DWORD *)(a1 + 24))
  {
    fwrite("Illegal concatenation for -demi slice.\n", 0x27uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    MTBEAbort(*(MTFESpeechElement **)(a1 + 16));
  }
  else
  {
    catlas_sset(*(_DWORD *)(a1 + 192), 0.0, *(float **)(a1 + 208), *(_DWORD *)(a1 + 196));
    catlas_sset(*(_DWORD *)(a1 + 216), 0.0, *(float **)(a1 + 232), *(_DWORD *)(a1 + 220));
  }
  SLML::Vector<float>::Vector((uint64_t)&v31, __N);
  catlas_sset(v31, 0.0, __X, v32);
  if ((MTBEDebugFlags::sMEOWDebug & 0x20) == 0)
    MEOWReader::GetUnitCosts(*(_QWORD *)(a1 + 8), *v4, v4[1], *((_QWORD *)v2 + 1), *((_QWORD *)v2 + 2), *((unsigned __int8 *)v2 + 6), *((unsigned __int8 *)v2 + 7), 1, 0, *((_QWORD *)v2 + 3), (uint64_t)&v31, (_QWORD *)(a1 + 240), a1 + 272, 0);
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseOptimalWeighting))
  {
    if (kDemiOptWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDemiOptWeight, (const __CFString *)&dword_1EFC76DE0, v6, *(float *)&dword_1EFC76DE0);
      kDemiOptWeight = 0;
    }
    MEOWSearchLatticeImpl::ComputeWeightedCosts((MEOWSearchLatticeImpl *)a1, *(float *)&dword_1EFC76DE0);
  }
  if (*(_BYTE *)(a1 + 29))
  {
    v7 = (FILE **)MEMORY[0x1E0C80C20];
    fprintf((FILE *)*MEMORY[0x1E0C80C20], "Location %p %p\nGlue ", *(const void **)(a1 + 32), *((const void **)v2 + 3));
    v8 = *v7;
    v9 = MEOWPhon::Name((MEOWPhon *)**((unsigned __int8 **)v2 + 6));
    LODWORD(v7) = *((unsigned __int8 *)v2 + 56);
    v10 = MEOWPhon::Name((MEOWPhon *)*(unsigned __int8 *)(*((_QWORD *)v2 + 6) + 1));
    v29 = v2;
    v11 = 62;
    if (!(_DWORD)v7)
      v11 = 60;
    fprintf(v8, "%s%c%s\n", v9, v11, v10);
    if (__N)
    {
      v12 = 0;
      for (i = 0; i != __N; ++i)
      {
        v15 = *(_QWORD *)(a1 + 256);
        v14 = *(_QWORD *)(a1 + 264);
        v16 = *(int *)(a1 + 244);
        v17 = *(int *)(a1 + 248);
        ++*(_DWORD *)(v15 + 4);
        v18 = *(float *)(*(_QWORD *)(a1 + 208) + 4 * *(_DWORD *)(a1 + 196) * (int)i);
        v19 = (FILE *)*MEMORY[0x1E0C80C20];
        v20 = *(float *)(*(_QWORD *)(a1 + 232) + 4 * *(_DWORD *)(a1 + 220) * (int)i);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseOptimalWeighting))
        {
          __C = 0.0;
          vDSP_sve((const float *)(v14 + (v12 >> 30)), v17, &__C, v16);
          v22 = __C + *(float *)(*(_QWORD *)(a1 + 288) + 4 * *(_DWORD *)(a1 + 276) * (int)i);
        }
        else
        {
          if (kDemiUnitCostWeight)
          {
            MTBEDebugParams::GetParam((const __CFString *)kDemiUnitCostWeight, (const __CFString *)&dword_1EFC76DF0, v21, *(float *)&dword_1EFC76DF0);
            kDemiUnitCostWeight = 0;
          }
          v22 = *(float *)&dword_1EFC76DF0 * __X[v32 * (int)i];
        }
        v23 = *(_QWORD *)(a1 + 312);
        if (v23)
          LODWORD(v23) = *(unsigned __int8 *)(*(_QWORD *)(a1 + 296) + i);
        fprintf(v19, " %3lu  -1   %6g  %6g  %6g  %6g  %d\n", i, v18, v20, v22, 0.0, v23);
        SLML::Storage<float>::RemoveReference(v15);
        v12 += 0x100000000;
      }
    }
    fflush((FILE *)*MEMORY[0x1E0C80C20]);
    v2 = v29;
  }
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseOptimalWeighting))
  {
    MEOWSearchLatticeImpl::ApplyWeightedCosts(a1);
  }
  else
  {
    if (kDemiUnitCostWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDemiUnitCostWeight, (const __CFString *)&dword_1EFC76DF0, v24, *(float *)&dword_1EFC76DF0);
      kDemiUnitCostWeight = 0;
    }
    cblas_saxpy(__N, *(const float *)&dword_1EFC76DF0, __X, 1, *(float **)(a1 + 208), 1);
  }
  MEOWSearchLatticeImpl::RecomputePathCost((MEOWSearchLatticeImpl *)a1);
  *(_DWORD *)(a1 + 24) = 3;
  v25 = *v2;
  v26 = v2[1];
  v27 = v2[2];
  *(_OWORD *)(a1 + 513) = *(__int128 *)((char *)v2 + 41);
  *(_OWORD *)(a1 + 488) = v26;
  *(_OWORD *)(a1 + 504) = v27;
  *(_OWORD *)(a1 + 472) = v25;
  return SLML::Storage<float>::RemoveReference(v33);
}

void sub_1D22B02C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  SLML::Storage<float>::RemoveReference(a18);
  _Unwind_Resume(a1);
}

uint64_t MEOWSearchLatticeImpl::AddAnchorSlice(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  int v5;
  FILE **v6;
  FILE *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  FILE *v11;
  int v12;
  uint64_t result;

  MEOWSearchLatticeImpl::AllocateCostVectors((MEOWSearchLatticeImpl *)a1, 1uLL, 0);
  v4 = *(_QWORD *)(a1 + 56);
  MEOWVectorBase::Append((_QWORD *)(a1 + 72));
  *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(_QWORD *)(a1 + 88) - 8) = v4;
  v5 = *(_DWORD *)(a1 + 24);
  if (v5 == 1)
  {
    MEOWSearchLatticeImpl::Diphone2Anchor(a1, a2);
  }
  else if (v5)
  {
    fwrite("Illegal concatenation for anchor slice.\n", 0x28uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    MTBEAbort(*(MTFESpeechElement **)(a1 + 16));
  }
  else
  {
    **(_DWORD **)(a1 + 208) = 0;
    **(_DWORD **)(a1 + 232) = 0;
  }
  if (*(_BYTE *)(a1 + 29))
  {
    v6 = (FILE **)MEMORY[0x1E0C80C20];
    v7 = (FILE *)*MEMORY[0x1E0C80C20];
    v8 = MEOWPhon::Name((MEOWPhon *)*(unsigned __int8 *)a2);
    v9 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)a2 + 1));
    fprintf(v7, "Anchor %s-%s#%u\n", v8, v9, bswap32(*((unsigned __int16 *)a2 + 1)) >> 16);
    if (*(_DWORD *)(a1 + 24))
    {
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *v6;
      if (v10)
      {
        v12 = *(unsigned __int16 *)(v10 + 2 * *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(_QWORD *)(a1 + 88) - 8));
LABEL_12:
        fprintf(v11, "   0 %3d   %6g  %6g\n", v12, **(float **)(a1 + 208), **(float **)(a1 + 232));
        fflush(*v6);
        goto LABEL_13;
      }
    }
    else
    {
      v11 = *v6;
    }
    v12 = -1;
    goto LABEL_12;
  }
LABEL_13:
  result = MEOWSearchLatticeImpl::RecomputePathCost((MEOWSearchLatticeImpl *)a1);
  *(_DWORD *)(a1 + 24) = 5;
  *(_DWORD *)(a1 + 536) = *a2;
  return result;
}

uint64_t MEOWSearchLatticeImpl::AddSilenceSlice(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t MEOWSearchLatticeImpl::BestPath(MEOWSearchLatticeImpl *this)
{
  FILE **v2;

  if (*((_BYTE *)this + 29))
  {
    v2 = (FILE **)MEMORY[0x1E0C80C20];
    fprintf((FILE *)*MEMORY[0x1E0C80C20], "Best %d\n", **((unsigned __int16 **)this + 13));
    fflush(*v2);
  }
  return **((unsigned __int16 **)this + 13);
}

float MEOWSearchLatticeImpl::BestPathCost(MEOWSearchLatticeImpl *this)
{
  return *(float *)(*((_QWORD *)this + 19) + 4 * *((_DWORD *)this + 35) * **((unsigned __int16 **)this + 13));
}

uint64_t MEOWSearchLatticeImpl::BestPredecessor(MEOWSearchLatticeImpl *this, uint64_t a2, uint64_t a3)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 5) + 2 * (*(_QWORD *)(*((_QWORD *)this + 9) + 8 * a2) + a3));
}

uint64_t MEOWSearchLatticeImpl::Force(uint64_t this, unint64_t a2)
{
  __int16 v2;
  _QWORD *v3;
  FILE **v4;

  if (*(int *)(this + 136) > a2)
  {
    v2 = a2;
    v3 = (_QWORD *)this;
    if (*(_BYTE *)(this + 29))
    {
      v4 = (FILE **)MEMORY[0x1E0C80C20];
      fprintf((FILE *)*MEMORY[0x1E0C80C20], "Force %lu\n", a2);
      this = fflush(*v4);
    }
    if (!v3[16])
      this = (uint64_t)MEOWVectorBase::Allocate((MEOWVectorBase *)(v3 + 13), 1uLL, 1);
    v3[15] = 1;
    *(_WORD *)v3[13] = v2;
  }
  return this;
}

uint64_t MEOWSearchLatticeImpl::Override(uint64_t this, unint64_t a2)
{
  FILE **v2;

  if (*(int *)(this + 136) > a2)
  {
    if (*(_BYTE *)(this + 29))
    {
      v2 = (FILE **)MEMORY[0x1E0C80C20];
      fprintf((FILE *)*MEMORY[0x1E0C80C20], "Override %lu\n", a2);
      return fflush(*v2);
    }
  }
  return this;
}

uint64_t MEOWSearchLatticeImpl::Veto(uint64_t this, uint64_t a2)
{
  _QWORD *v3;
  FILE **v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_QWORD *)this;
  if (*(_BYTE *)(this + 29))
  {
    v4 = (FILE **)MEMORY[0x1E0C80C20];
    fprintf((FILE *)*MEMORY[0x1E0C80C20], "Veto %lu\n", a2);
    this = fflush(*v4);
  }
  v5 = v3[15];
  if (v5)
  {
    this = v3[13];
    v6 = 1 - v5;
    while (*(unsigned __int16 *)this != a2)
    {
      ++v6;
      this += 2;
      if (v6 == 1)
        return this;
    }
    this = (uint64_t)memmove((void *)this, (const void *)(this + 2), -v6);
    if (v3[16] < (unint64_t)(v5 - 1))
      this = (uint64_t)MEOWVectorBase::Allocate((MEOWVectorBase *)(v3 + 13), v5 - 1, 1);
    v3[15] = v5 - 1;
  }
  return this;
}

uint64_t MEOWSearchLatticeImpl::size(MEOWSearchLatticeImpl *this)
{
  return *((_QWORD *)this + 11);
}

void MEOWSearchLatticeImpl::clear(void **this)
{
  MEOWVectorBase::clear(this + 5);
  MEOWVectorBase::clear(this + 9);
  *((_DWORD *)this + 6) = 0;
}

uint64_t SLML::Matrix<float>::operator=(uint64_t a1, float a2)
{
  int v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v4 = 0;
    do
      catlas_sset(*(_DWORD *)a1, a2, (float *)(*(_QWORD *)(a1 + 24) + 4 * *(_DWORD *)(a1 + 8) * v4++), 1);
    while (v4 < *(_DWORD *)(a1 + 4));
  }
  return a1;
}

void SLML::copy(const float **a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned int *)a1;
  v4 = *a2;
  if ((_DWORD)v3 != (_DWORD)v4)
    SLML::Fatal((SLML *)"%s %d != %d", (const char *)a2, "Size", v3, v4);
  cblas_scopy(v3, a1[2], *((_DWORD *)a1 + 1), *((float **)a2 + 2), a2[1]);
}

void sub_1D22B07D8()
{
  JUMPOUT(0x1D22B079CLL);
}

void SLML::matmul(const int **a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  v6 = *a2;
  if (**a1 != (_DWORD)v6)
    SLML::Fatal((SLML *)"%s %d != %d", (const char *)a2, "Dimension", *(unsigned int *)*a1, v6);
  SLML::Matrix<float>::Matrix(a3, (*a1)[1], a2[1]);
  cblas_sgemm(CblasColMajor, CblasTrans, CblasNoTrans, (*a1)[1], a2[1], **a1, 1.0, *((const float **)*a1 + 3), (*a1)[2], *((const float **)a2 + 3), a2[2], 0.0, *(float **)(a3 + 24), *(_DWORD *)(a3 + 8));
}

void sub_1D22B089C()
{
  JUMPOUT(0x1D22B0814);
}

void sub_1D22B08A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  SLML::Storage<float>::RemoveReference(*(_QWORD *)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t SLML::MatrixColumns<float>::operator*=(uint64_t a1, const char *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  float v7;
  int v8;
  uint64_t v9;
  float *v10;

  v4 = *(_DWORD *)(a1 + 4);
  v5 = *(unsigned int *)a2;
  if (v4 != (_DWORD)v5)
    SLML::Fatal((SLML *)"%s %d != %d", a2, "Dimension", *(unsigned int *)(a1 + 4), v5);
  if (v4 >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(float *)(*((_QWORD *)a2 + 2) + 4 * *((_DWORD *)a2 + 1) * v6);
      v8 = *(_DWORD *)a1;
      v9 = *(_QWORD *)(a1 + 16);
      v10 = (float *)(*(_QWORD *)(a1 + 24) + 4 * *(_DWORD *)(a1 + 8) * v6);
      ++*(_DWORD *)(v9 + 4);
      cblas_sscal(v8, v7, v10, 1);
      SLML::Storage<float>::RemoveReference(v9);
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 4));
  }
  return a1;
}

void sub_1D22B0974()
{
  JUMPOUT(0x1D22B08E4);
}

void sub_1D22B097C(_Unwind_Exception *a1)
{
  uint64_t v1;

  SLML::Storage<float>::RemoveReference(v1);
  _Unwind_Resume(a1);
}

float **SLML::Vector<float>::operator+=(float **a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned int *)a1;
  v4 = *a2;
  if ((_DWORD)v3 != (_DWORD)v4)
    SLML::Fatal((SLML *)"%s %d != %d", (const char *)a2, "Size", v3, v4);
  cblas_saxpy(v3, 1.0, *((const float **)a2 + 2), a2[1], a1[2], *((_DWORD *)a1 + 1));
  return a1;
}

void sub_1D22B0A00()
{
  JUMPOUT(0x1D22B09B8);
}

uint64_t SLML::MatrixRows<float>::sum@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const float *v8;
  vDSP_Stride v9;
  vDSP_Length v10;
  float __C;

  result = SLML::Vector<float>::Vector(a2, *a1);
  if (*a1 >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *((_QWORD *)a1 + 2);
      v8 = (const float *)(*((_QWORD *)a1 + 3) + v5);
      v10 = a1[1];
      v9 = a1[2];
      ++*(_DWORD *)(v7 + 4);
      __C = 0.0;
      vDSP_sve(v8, v9, &__C, v10);
      *(float *)(*(_QWORD *)(a2 + 16) + 4 * *(_DWORD *)(a2 + 4) * (int)v6) = __C;
      result = SLML::Storage<float>::RemoveReference(v7);
      ++v6;
      v5 += 4;
    }
    while (v6 < *a1);
  }
  return result;
}

void sub_1D22B0AB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  SLML::Storage<float>::RemoveReference(v2);
  SLML::Storage<float>::RemoveReference(*(_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t MEOWSearchLatticeImpl::SetPhraseID(uint64_t this, const void *a2)
{
  *(_QWORD *)(this + 32) = a2;
  return this;
}

uint64_t MEOWSearchLatticeImpl::ProcessingSentence(uint64_t this, MTFESentence *a2)
{
  *(_QWORD *)(this + 16) = a2;
  return this;
}

uint64_t SLML::Matrix<float>::Matrix(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  v6 = operator new();
  v7 = v6;
  *(_BYTE *)v6 = 1;
  v8 = (a2 + 3) & 0xFFFFFFFC;
  if (a2 <= 4)
    v8 = a2;
  *(_DWORD *)(v6 + 4) = 1;
  *(_DWORD *)(v6 + 8) = v8;
  *(_DWORD *)(v6 + 12) = a3;
  v9 = operator new[]();
  *(_QWORD *)(v7 + 16) = v9;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v9;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v7 + 8);
  return a1;
}

void sub_1D22B0BA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x1080C401B11B02ALL);
  _Unwind_Resume(a1);
}

uint64_t SLML::Matrix<float>::ResizeStorage(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;
  uint64_t v13;

  v6 = operator new();
  v7 = v6;
  *(_BYTE *)v6 = 1;
  v8 = (a2 + 3) & 0xFFFFFFFC;
  if (a2 <= 4)
    v8 = a2;
  *(_DWORD *)(v6 + 4) = 1;
  *(_DWORD *)(v6 + 8) = v8;
  *(_DWORD *)(v6 + 12) = a3;
  *(_QWORD *)(v6 + 16) = operator new[]();
  v9 = *(_DWORD *)a1;
  v10 = *(_DWORD *)(a1 + 4);
  if (*(_DWORD *)a1 >= a2)
    v9 = a2;
  if (v10 >= a3)
    v10 = a3;
  *(_DWORD *)a1 = v9;
  *(_DWORD *)(a1 + 4) = v10;
  if (v10 >= 1)
  {
    v11 = 0;
    do
    {
      cblas_scopy(*(_DWORD *)a1, (const float *)(*(_QWORD *)(a1 + 24) + 4 * *(_DWORD *)(a1 + 8) * v11), 1, (float *)(*(_QWORD *)(v7 + 16) + 4 * *(_DWORD *)(v7 + 8) * v11), 1);
      ++v11;
    }
    while (v11 < *(_DWORD *)(a1 + 4));
  }
  result = SLML::Storage<float>::RemoveReference(*(_QWORD *)(a1 + 16));
  v13 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v7 + 8);
  return result;
}

void sub_1D22B0CD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x1080C401B11B02ALL);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *,false>(uint64_t result, unsigned __int16 *a2, uint64_t *a3, uint64_t a4, char a5)
{
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int16 *v15;
  unsigned __int16 v16;
  unsigned __int16 *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (unsigned __int16 *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (*(float *)(*a3 + 4 * v20) < *(float *)(*a3 + 4 * v21))
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 47)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v9, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x101)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(float *)(*a3 + 4 * *(v9 - 1)) >= *(float *)(*a3 + 4 * *v9))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned short *,MEOWCompareIndexed &>(v9, a2, a3);
            v9 = (unsigned __int16 *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned short *,MEOWCompareIndexed &>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *,unsigned short *>(v9, a2, a2, a3);
        return result;
    }
  }
}

unsigned __int16 *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(unsigned __int16 *result, unsigned __int16 *a2, uint64_t *a3)
{
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  unsigned __int16 *v11;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = 0;
      v5 = *a3;
      v6 = result;
      do
      {
        v7 = v6[1];
        v8 = *v6;
        v6 = v3;
        v9 = *(float *)(v5 + 4 * v7);
        if (v9 < *(float *)(v5 + 4 * v8))
        {
          v10 = v4;
          while (1)
          {
            *(unsigned __int16 *)((char *)result + v10 + 2) = v8;
            if (!v10)
              break;
            v8 = *(unsigned __int16 *)((char *)result + v10 - 2);
            v10 -= 2;
            if (v9 >= *(float *)(v5 + 4 * v8))
            {
              v11 = (unsigned __int16 *)((char *)result + v10 + 2);
              goto LABEL_10;
            }
          }
          v11 = result;
LABEL_10:
          *v11 = v7;
        }
        v3 = v6 + 1;
        v4 += 2;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

unsigned __int16 *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(unsigned __int16 *result, unsigned __int16 *a2, uint64_t *a3)
{
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = *a3;
      do
      {
        v5 = result[1];
        v6 = *result;
        result = v3;
        v7 = *(float *)(v4 + 4 * v5);
        if (v7 < *(float *)(v4 + 4 * v6))
        {
          do
          {
            *v3 = v6;
            v6 = *(v3 - 2);
            --v3;
          }
          while (v7 < *(float *)(v4 + 4 * v6));
          *v3 = v5;
        }
        v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(_WORD *a1, _WORD *a2, _WORD *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (unsigned __int16)*a2;
  v5 = (unsigned __int16)*a1;
  v6 = *a4;
  v7 = *(float *)(*a4 + 4 * v4);
  v8 = *(float *)(*a4 + 4 * v5);
  v9 = (unsigned __int16)*a3;
  v10 = *(float *)(*a4 + 4 * v9);
  if (v7 < v8)
  {
    if (v10 < v7)
    {
      *a1 = v9;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    v13 = (unsigned __int16)*a3;
    if (*(float *)(v6 + 4 * v13) >= v8)
      return 1;
    *a2 = v13;
    *a3 = v5;
    return 2;
  }
  if (v10 < v7)
  {
    *a2 = v9;
    *a3 = v4;
    v11 = (unsigned __int16)*a2;
    v12 = (unsigned __int16)*a1;
    if (*(float *)(v6 + 4 * v11) >= *(float *)(v6 + 4 * v12))
      return 1;
    *a1 = v11;
    *a2 = v12;
    return 2;
  }
  return 0;
}

unsigned __int16 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned short *,MEOWCompareIndexed &>(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  unsigned __int16 *v6;
  unsigned int v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned int v12;
  unsigned int v13;

  v3 = *a1;
  v4 = *a3;
  v5 = *(float *)(*a3 + 4 * v3);
  if (v5 >= *(float *)(*a3 + 4 * *(a2 - 1)))
  {
    v8 = a1 + 1;
    do
    {
      v6 = v8;
      if (v8 >= a2)
        break;
      ++v8;
    }
    while (v5 >= *(float *)(v4 + 4 * *v6));
  }
  else
  {
    v6 = a1;
    do
    {
      v7 = v6[1];
      ++v6;
    }
    while (v5 >= *(float *)(v4 + 4 * v7));
  }
  if (v6 < a2)
  {
    do
      v9 = *--a2;
    while (v5 < *(float *)(v4 + 4 * v9));
  }
  if (v6 < a2)
  {
    v10 = *v6;
    v11 = *a2;
    do
    {
      *v6 = v11;
      *a2 = v10;
      do
      {
        v12 = v6[1];
        ++v6;
        v10 = v12;
      }
      while (v5 >= *(float *)(v4 + 4 * v12));
      do
      {
        v13 = *--a2;
        v11 = v13;
      }
      while (v5 < *(float *)(v4 + 4 * v13));
    }
    while (v6 < a2);
  }
  if (v6 - 1 != a1)
    *a1 = *(v6 - 1);
  *(v6 - 1) = v3;
  return v6;
}

_WORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned short *,MEOWCompareIndexed &>(_WORD *a1, _WORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  unsigned int v10;
  unsigned int v11;
  __int16 v12;
  __int16 v13;
  _WORD *v14;
  _WORD *v15;
  unsigned int v16;
  unsigned int v17;

  v3 = 0;
  v4 = (unsigned __int16)*a1;
  v5 = *a3;
  v6 = *(float *)(*a3 + 4 * v4);
  do
    v7 = (unsigned __int16)a1[++v3];
  while (*(float *)(v5 + 4 * v7) < v6);
  v8 = &a1[v3];
  v9 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v8 >= a2)
        break;
      v11 = (unsigned __int16)*--a2;
    }
    while (*(float *)(v5 + 4 * v11) >= v6);
  }
  else
  {
    do
      v10 = (unsigned __int16)*--a2;
    while (*(float *)(v5 + 4 * v10) >= v6);
  }
  if (v8 < a2)
  {
    v12 = *a2;
    v13 = v7;
    v14 = v8;
    v15 = a2;
    do
    {
      *v14 = v12;
      *v15 = v13;
      do
      {
        v16 = (unsigned __int16)v14[1];
        ++v14;
        v13 = v16;
      }
      while (*(float *)(v5 + 4 * v16) < v6);
      do
      {
        v17 = (unsigned __int16)*--v15;
        v12 = v17;
      }
      while (*(float *)(v5 + 4 * v17) >= v6);
    }
    while (v14 < v15);
    v9 = v14 - 1;
  }
  if (v9 != a1)
    *a1 = *v9;
  *v9 = v4;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(*a3 + 4 * v8) < *(float *)(*a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *a3;
      v14 = 6;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(float *)(v13 + 4 * v15);
    if (v17 < *(float *)(v13 + 4 * v16))
    {
      v18 = v14;
      while (1)
      {
        *(unsigned __int16 *)((char *)a1 + v18) = v16;
        v19 = v18 - 2;
        if (v18 == 2)
          break;
        v16 = *(unsigned __int16 *)((char *)a1 + v18 - 4);
        v18 -= 2;
        if (v17 >= *(float *)(v13 + 4 * v16))
        {
          v20 = (unsigned __int16 *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 2;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(_WORD *a1, _WORD *a2, _WORD *a3, _WORD *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(a1, a2, a3, a5);
  v11 = (unsigned __int16)*a4;
  v12 = (unsigned __int16)*a3;
  v13 = *a5;
  if (*(float *)(*a5 + 4 * v11) < *(float *)(*a5 + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    v14 = (unsigned __int16)*a3;
    v15 = (unsigned __int16)*a2;
    if (*(float *)(v13 + 4 * v14) < *(float *)(v13 + 4 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = (unsigned __int16)*a2;
      v17 = (unsigned __int16)*a1;
      if (*(float *)(v13 + 4 * v16) < *(float *)(v13 + 4 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(_WORD *a1, _WORD *a2, _WORD *a3, _WORD *a4, _WORD *a5, uint64_t *a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(a1, a2, a3, a4, a6);
  v13 = (unsigned __int16)*a5;
  v14 = (unsigned __int16)*a4;
  v15 = *a6;
  if (*(float *)(*a6 + 4 * v13) < *(float *)(*a6 + 4 * v14))
  {
    *a4 = v13;
    *a5 = v14;
    v16 = (unsigned __int16)*a4;
    v17 = (unsigned __int16)*a3;
    if (*(float *)(v15 + 4 * v16) < *(float *)(v15 + 4 * v17))
    {
      *a3 = v16;
      *a4 = v17;
      v18 = (unsigned __int16)*a3;
      v19 = (unsigned __int16)*a2;
      if (*(float *)(v15 + 4 * v18) < *(float *)(v15 + 4 * v19))
      {
        *a2 = v18;
        *a3 = v19;
        v20 = (unsigned __int16)*a2;
        v21 = (unsigned __int16)*a1;
        if (*(float *)(v15 + 4 * v20) < *(float *)(v15 + 4 * v21))
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

unsigned __int16 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *,unsigned short *>(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned __int16 v19;
  unsigned __int16 *v20;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 3)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (*(float *)(*a4 + 4 * v15) < *(float *)(*a4 + 4 * v16))
        {
          *v14 = v16;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 3)
    {
      v17 = (unint64_t)v8 >> 1;
      v18 = a2 - 1;
      do
      {
        v19 = *a1;
        v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(a1, a4, v17);
        if (v18 == v20)
        {
          *v20 = v19;
        }
        else
        {
          *v20 = *v18;
          *v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>((uint64_t)a1, (uint64_t)(v20 + 1), a4, v20 + 1 - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(uint64_t result, uint64_t *a2, uint64_t a3, _WORD *a4)
{
  char *v4;
  int64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 >= 2)
  {
    v4 = (char *)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 1)
    {
      v6 = (uint64_t)(v4 + 1);
      v7 = (unsigned __int16 *)(result + 2 * (_QWORD)(v4 + 1));
      v8 = (uint64_t)(v4 + 2);
      v9 = *a2;
      if (v8 < a3 && *(float *)(v9 + 4 * *v7) < *(float *)(v9 + 4 * v7[1]))
      {
        ++v7;
        v6 = v8;
      }
      v10 = *v7;
      v11 = (unsigned __int16)*a4;
      v12 = *(float *)(v9 + 4 * v11);
      if (*(float *)(v9 + 4 * v10) >= v12)
      {
        do
        {
          v13 = v7;
          *a4 = v10;
          if (v5 < v6)
            break;
          v14 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (unsigned __int16 *)(result + 2 * v6);
          v15 = v14 + 2;
          if (v15 < a3 && *(float *)(v9 + 4 * *v7) < *(float *)(v9 + 4 * v7[1]))
          {
            ++v7;
            v6 = v15;
          }
          v10 = *v7;
          a4 = v13;
        }
        while (*(float *)(v9 + 4 * v10) >= v12);
        *v13 = v11;
      }
    }
  }
  return result;
}

unsigned __int16 *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(unsigned __int16 *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  v6 = *a2;
  do
  {
    v7 = result;
    v8 = 2 * v3 + 2;
    result = (unsigned __int16 *)((char *)result + v8);
    v3 = (2 * v3) | 1;
    if (v8 < a3 && *(float *)(v6 + 4 * *result) < *(float *)(v6 + 4 * result[1]))
    {
      ++result;
      v3 = v8;
    }
    *v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  _WORD *v7;
  __int16 v8;
  unsigned int v9;
  uint64_t v10;
  float v11;
  _WORD *v12;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (unsigned __int16 *)(result + 2 * v4);
    v6 = *v5;
    v9 = *(unsigned __int16 *)(a2 - 2);
    v7 = (_WORD *)(a2 - 2);
    v8 = v9;
    v10 = *a3;
    v11 = *(float *)(*a3 + 4 * v9);
    if (*(float *)(*a3 + 4 * v6) < v11)
    {
      do
      {
        v12 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (unsigned __int16 *)(result + 2 * v4);
        v6 = *v5;
        v7 = v12;
      }
      while (*(float *)(v10 + 4 * v6) < v11);
      *v12 = v8;
    }
  }
  return result;
}

void MEOWSearchLatticeImpl::Cookie2Cookie(uint64_t a1, unsigned __int16 **a2, uint64_t a3, uint64_t a4, float *a5, float *a6, _QWORD *a7, float a8)
{
  unsigned __int16 v12;
  float *v14;
  float *v15;
  unint64_t v16;
  float v17;
  float v18;
  int v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  unint64_t v24;
  float *v25;
  int v26;
  float v27;
  int v28;
  int v29;
  int v30;
  float v31;
  float v32;
  uint64_t v33;
  unsigned __int16 *v34;
  int v35;
  int v36;
  float v37;
  float v38;
  int __N;
  int v41;
  uint64_t v42;
  float *__X;
  float *v44;
  int v45;
  float *v46;
  int v47;
  float *v48;
  int v49;

  v12 = **a2;
  if ((MTBEDebugFlags::sMEOWDebug & 0x200) != 0)
  {
    v14 = a5;
    v15 = a6;
    SLML::Vector<float>::Vector((uint64_t)&__N, *(_DWORD *)(a3 + 16));
    if (*(_QWORD *)(a3 + 16))
    {
      v23 = 0;
      v24 = 0;
      do
      {
        MEOWDistance(*(_QWORD *)a3 + 60 * SHIDWORD(v23), a4);
        v25 = __X;
        v26 = v41;
        __X[v41 * (int)v24++] = v27;
        v23 += 0x100000000;
      }
      while (v24 < *(_QWORD *)(a3 + 16));
    }
    else
    {
      v25 = __X;
      v26 = v41;
    }
    v28 = __N;
    v29 = __N >> 1;
    v30 = v26 * (__N >> 1);
    if (v30 != v26 * __N)
    {
      v48 = v25;
      v49 = v26;
      v46 = &v25[v30];
      v47 = v26;
      v44 = &v25[v26 * __N];
      v45 = v26;
      std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,SLML::Vector<float>::iterator>((uint64_t)&v48, &v46, (uint64_t)&v44);
      v28 = __N;
    }
    v31 = __X[v41 * v29];
    if (v31 == 0.0)
      v32 = 1.0;
    else
      v32 = 1.0 / v31;
    cblas_sscal(v28, v32, __X, 1);
    v33 = *(_QWORD *)(a1 + 120);
    if (v33)
    {
      v34 = *(unsigned __int16 **)(a1 + 104);
      v17 = 3.4028e38;
      v18 = 3.4028e38;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v37 = *(float *)(*(_QWORD *)(a1 + 152) + 4 * *(_DWORD *)(a1 + 140) * v36);
        if (v37 >= v18)
          break;
        v38 = v37 + (float)(__X[v41 * v35] * a8);
        if (v38 < v18)
        {
          v18 = v38;
          v17 = __X[v41 * v35] * a8;
          v12 = v35;
        }
        --v33;
      }
      while (v33);
    }
    else
    {
      v18 = 3.4028e38;
      v17 = 3.4028e38;
    }
    SLML::Storage<float>::RemoveReference(v42);
  }
  else
  {
    v14 = a5;
    v15 = a6;
    if (a2[2])
    {
      v16 = 0;
      v17 = 3.4028e38;
      v18 = 3.4028e38;
      do
      {
        v19 = (*a2)[v16];
        v20 = *(float *)(*(_QWORD *)(a1 + 152) + 4 * *(_DWORD *)(a1 + 140) * v19);
        if (v20 >= v18)
          break;
        MEOWDistance(*(_QWORD *)a3 + 60 * (*a2)[v16], a4);
        v22 = v21 * a8;
        if ((float)(v20 + v22) < v18)
        {
          v18 = v20 + v22;
          v17 = v22;
          v12 = v19;
        }
        ++v16;
      }
      while (v16 < (unint64_t)a2[2]);
    }
    else
    {
      v18 = 3.4028e38;
      v17 = 3.4028e38;
    }
  }
  *v14 = v18;
  *v15 = v17;
  *a7 = v12;
}

void sub_1D22B1C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  SLML::Storage<float>::RemoveReference(a12);
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::Cookie2Cookie(uint64_t a1, unsigned __int16 **a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = a7;
  v9 = a6;
  if (a6)
  {
    if (a7)
      goto LABEL_3;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 208);
    a5 = *(int *)(a1 + 192);
    if (a7)
      goto LABEL_3;
  }
  v8 = *(_QWORD *)(a1 + 232);
LABEL_3:
  v16 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 64) < (unint64_t)(v16 + a5))
    MEOWVectorBase::Allocate((MEOWVectorBase *)(a1 + 40), v16 + a5, 1);
  *(_QWORD *)(a1 + 56) = v16 + a5;
  bzero((void *)(*(_QWORD *)(a1 + 40) + 2 * v16), 2 * a5);
  v17 = *(_QWORD *)(a1 + 176);
  if (v17)
  {
    for (i = 0; i != v17; ++i)
    {
      v19 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 160) + 2 * i);
      v20 = 0;
      v21 = 0;
      MEOWSearchLatticeImpl::Cookie2Cookie(a1, a2, a3, *a4 + 60 * v19, (float *)&v21 + 1, (float *)&v21, &v20, a8);
      *(_DWORD *)(v9 + 4 * v19) = HIDWORD(v21);
      *(_DWORD *)(v8 + 4 * v19) = v21;
      *(_WORD *)(*(_QWORD *)(a1 + 40) + 2 * (v16 + v19)) = v20;
    }
  }
}

uint64_t MEOWSearchLatticeImpl::ResetMatchVector(uint64_t this)
{
  *(_QWORD *)(this + 312) = 0;
  return this;
}

void MEOWSearchLatticeImpl::MatchContexts(_QWORD *a1, _QWORD *a2, char a3, MEOWPhon *this)
{
  _BYTE *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v7 = *MEOWPhon::Match(this);
  v8 = a1[39];
  v9 = a2[2];
  if (v9 > v8)
  {
    if (a1[40] < v9)
      MEOWVectorBase::Allocate((MEOWVectorBase *)(a1 + 37), a2[2], 1);
    a1[39] = v9;
    bzero((void *)(a1[37] + v8), v9 - v8);
    v9 = a2[2];
  }
  if (v9)
  {
    v10 = 0;
    do
    {
      *(_BYTE *)(a1[37] + v10) += v7[51 * a3 + *(char *)(*a2 + a2[1] * v10)];
      ++v10;
    }
    while (v10 < a2[2]);
  }
}

void MEOWSearchLatticeImpl::MatchContexts(_QWORD *a1, __int128 *a2, uint64_t a3, MEOWPhon *this)
{
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  __int128 v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 16) == 1)
  {
    v14 = *a2;
    v15 = *((_QWORD *)a2 + 2);
    MEOWSearchLatticeImpl::MatchContexts(a1, &v14, **(_BYTE **)a3, this);
  }
  else
  {
    v7 = (char *)*MEOWPhon::Match(this);
    v8 = a1[39];
    v9 = *((_QWORD *)a2 + 2);
    if (v9 > v8)
    {
      if (a1[40] < v9)
        MEOWVectorBase::Allocate((MEOWVectorBase *)(a1 + 37), *((_QWORD *)a2 + 2), 1);
      a1[39] = v9;
      bzero((void *)(a1[37] + v8), v9 - v8);
      v9 = *((_QWORD *)a2 + 2);
    }
    if (v9)
    {
      v10 = 0;
      do
      {
        v11 = *(_QWORD *)(a3 + 16);
        if (v11)
        {
          v12 = *(char **)a3;
          v13 = 50;
          do
          {
            if (v13 >= v7[51 * *v12 + *(char *)(*(_QWORD *)a2 + *((_QWORD *)a2 + 1) * v10)])
              v13 = v7[51 * *v12 + *(char *)(*(_QWORD *)a2 + *((_QWORD *)a2 + 1) * v10)];
            v12 += *(_QWORD *)(a3 + 8);
            --v11;
          }
          while (v11);
        }
        else
        {
          LOBYTE(v13) = 50;
        }
        *(_BYTE *)(a1[37] + v10++) += v13;
      }
      while (v10 < *((_QWORD *)a2 + 2));
    }
  }
}

void MEOWSearchLatticeImpl::MatchWordBoundaries(MEOWSearchLatticeImpl *this, int a2, int a3)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  unint64_t i;
  int v11;
  int v12;
  int v13;

  v6 = *((_QWORD *)this + 39);
  v7 = *((_QWORD *)this + 43);
  if (v7 > v6)
  {
    if (*((_QWORD *)this + 40) < v7)
      MEOWVectorBase::Allocate((MEOWSearchLatticeImpl *)((char *)this + 296), v7, 1);
    *((_QWORD *)this + 39) = v7;
    bzero((void *)(*((_QWORD *)this + 37) + v6), v7 - v6);
    v7 = *((_QWORD *)this + 43);
  }
  if (a3)
    v8 = 2;
  else
    v8 = 3;
  if (a2)
  {
    v9 = a3;
  }
  else
  {
    v8 = 0;
    v9 = 3;
  }
  if (v7)
  {
    for (i = 0; i < v7; ++i)
    {
      v11 = *(unsigned __int8 *)(*((_QWORD *)this + 41) + i);
      if ((v11 & v8) != 0)
        v12 = 1;
      else
        v12 = a2 ^ 1;
      v13 = v9 & v11;
      if (v12 != 1 || v13 != 0)
      {
        *(_BYTE *)(*((_QWORD *)this + 37) + i) += 100;
        v7 = *((_QWORD *)this + 43);
      }
    }
  }
}

void MEOWSearchLatticeImpl::CookieStride(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  *a2 = *a1 + 52;
  a2[1] = 60;
  a2[2] = a1[2];
}

void MEOWSearchLatticeImpl::VariantStride(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = 144;
  a3[2] = a2;
}

void MEOWSearchLatticeImpl::SetStride(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = a1 + 1;
  a2[1] = 1;
  a2[2] = v2;
}

void MEOWSearchLatticeImpl::MatchContexts(MEOWReader **this, unsigned int a2, unsigned int a3, char a4, MEOWPhon *a5)
{
  _QWORD v10[3];
  void *v11[4];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v11, 1);
  MEOWReader::GetAdjacent(this[1], a2, a3, a5 ^ 1, (MEOWVectorBase *)v11, (MEOWVectorBase *)(this + 41));
  v10[0] = v11[0];
  v10[1] = 1;
  v10[2] = v11[2];
  MEOWSearchLatticeImpl::MatchContexts(this, v10, a4, a5);
  MEOWVectorBase::~MEOWVectorBase(v11);
}

void sub_1D22B211C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::MatchContexts(uint64_t a1, unsigned int a2, unsigned int a3, __int128 *a4, MEOWPhon *a5)
{
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  void *v14[4];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v14, 1);
  MEOWReader::GetAdjacent(*(MEOWReader **)(a1 + 8), a2, a3, a5 ^ 1, (MEOWVectorBase *)v14, (MEOWVectorBase *)(a1 + 328));
  *(void **)&v12 = v14[0];
  *((_QWORD *)&v12 + 1) = 1;
  v13 = v14[2];
  v10 = *a4;
  v11 = *((_QWORD *)a4 + 2);
  MEOWSearchLatticeImpl::MatchContexts((_QWORD *)a1, &v12, (uint64_t)&v10, a5);
  MEOWVectorBase::~MEOWVectorBase(v14);
}

void sub_1D22B21DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::WeedCandidates(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t i;
  uint64_t v6;
  void *v7[2];
  uint64_t v8;

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v7, 2);
  v4 = *(_QWORD *)(a1 + 176);
  if (v4)
  {
    for (i = 0; i < v4; ++i)
    {
      v6 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 160) + 2 * i);
      if (!*(_BYTE *)(*a2 + a2[1] * v6))
      {
        MEOWVectorBase::Append(v7);
        *((_WORD *)v7[0] + v8 - 1) = v6;
        v4 = *(_QWORD *)(a1 + 176);
      }
    }
  }
  if (v8)
    MEOWVectorBase::Swap((uint64_t *)v7, (MEOWVectorBase *)(a1 + 160));
  MEOWVectorBase::~MEOWVectorBase(v7);
}

void sub_1D22B22A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  MEOWVectorBase::~MEOWVectorBase(&a9);
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::WeedCandidates(MEOWSearchLatticeImpl *this, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  unsigned __int16 v7;
  MEOWReader *v8;
  char *DemiRecord;
  void *v10[2];
  uint64_t v11;

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v10, 2);
  if (*((_QWORD *)this + 22))
  {
    v6 = 0;
    do
    {
      v7 = *(_WORD *)(*((_QWORD *)this + 20) + 2 * v6);
      v8 = (MEOWReader *)*((_QWORD *)this + 1);
      DemiRecord = MEOWReader::GetDemiRecord(v8, a2, a3, v7, 0);
      if ((MEOWReader::IsWordOnly((uint64_t)v8, DemiRecord) & 1) != 0)
        break;
      MEOWVectorBase::Append(v10);
      *((_WORD *)v10[0] + v11 - 1) = v7;
      ++v6;
    }
    while (v6 < *((_QWORD *)this + 22));
  }
  if (v11)
    MEOWVectorBase::Swap((uint64_t *)v10, (MEOWSearchLatticeImpl *)((char *)this + 160));
  MEOWVectorBase::~MEOWVectorBase(v10);
}

void sub_1D22B2384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  MEOWVectorBase::~MEOWVectorBase(&a9);
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::CullCandidates(MEOWSearchLatticeImpl *this, unint64_t a2, const char *a3, ...)
{
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  uint64_t v13;
  void *v14[4];
  _QWORD v15[202];

  v15[201] = *MEMORY[0x1E0C80C00];
  bzero(v15, 0x648uLL);
  v5 = *((_QWORD *)this + 22);
  if (v5)
  {
    v6 = (unsigned __int16 *)*((_QWORD *)this + 20);
    v7 = *((_QWORD *)this + 37);
    do
    {
      v8 = *v6++;
      ++v15[*(unsigned __int8 *)(v7 + v8)];
      --v5;
    }
    while (v5);
  }
  v9 = 0;
  v10 = 0;
  do
  {
    v10 += v15[v9];
    if (v10 >= a2)
      break;
    ++v9;
  }
  while (v9 != 201);
  if (v10 > 2 * a2)
    LODWORD(v9) = v9 - (v10 - v15[v9] > a2 >> 1);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v14, 2);
  v11 = *((_QWORD *)this + 22);
  if (v11)
  {
    for (i = 0; i < v11; ++i)
    {
      v13 = *(unsigned __int16 *)(*((_QWORD *)this + 20) + 2 * i);
      if ((int)v9 >= *(unsigned __int8 *)(*((_QWORD *)this + 37) + v13))
      {
        MEOWVectorBase::Append(v14);
        *((_WORD *)v14[0] + (uint64_t)v14[2] - 1) = v13;
        v11 = *((_QWORD *)this + 22);
      }
    }
  }
  MEOWVectorBase::Swap((uint64_t *)v14, (MEOWSearchLatticeImpl *)((char *)this + 160));
  MEOWVectorBase::~MEOWVectorBase(v14);
}

void sub_1D22B24F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  MEOWVectorBase::~MEOWVectorBase(&a9);
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::Null2Diphone(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  const char *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  void *v22[4];

  MEOWSearchLatticeImpl::WeedCandidates((MEOWSearchLatticeImpl *)a1, *a2, a2[1]);
  if (kDiphoneThreshold)
  {
    MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EFC76E20, (uint64_t *)qword_1EFC76E20);
    kDiphoneThreshold = 0;
  }
  if (qword_1EFC76E20)
  {
    *(_QWORD *)(a1 + 312) = 0;
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v22, 1);
    MEOWReader::GetAdjacent(*(MEOWReader **)(a1 + 8), *a2, a2[1], 0, (MEOWVectorBase *)v22, (MEOWVectorBase *)(a1 + 328));
    MEOWSearchLatticeImpl::MatchWordBoundaries((MEOWSearchLatticeImpl *)a1, a2[32], a2[33]);
    v6 = *a2;
    v7 = a2[1];
    v8 = *a3;
    *(_QWORD *)&v20 = a3 + 1;
    *((_QWORD *)&v20 + 1) = 1;
    v21 = v8;
    MEOWSearchLatticeImpl::MatchContexts(a1, v6, v7, &v20, 0);
    if (kDiphoneThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EFC76E20, (uint64_t *)qword_1EFC76E20);
      kDiphoneThreshold = 0;
    }
    v9 = qword_1EFC76E20;
    v10 = MEOWPhon::Name((MEOWPhon *)*a2);
    v11 = MEOWPhon::Name((MEOWPhon *)a2[1]);
    MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, v9, v12, v10, v11);
    MEOWVectorBase::~MEOWVectorBase(v22);
  }
  v13 = *(_QWORD *)(a1 + 176);
  if (v13)
  {
    v14 = *(unsigned __int16 **)(a1 + 160);
    v15 = *(_QWORD *)(a1 + 208);
    v16 = *(_DWORD *)(a1 + 196);
    v17 = *(_QWORD *)(a1 + 232);
    v18 = *(_DWORD *)(a1 + 220);
    do
    {
      v19 = *v14++;
      *(_DWORD *)(v15 + 4 * v16 * v19) = 0;
      *(_DWORD *)(v17 + 4 * v18 * v19) = 0;
      --v13;
    }
    while (v13);
  }
}

void sub_1D22B266C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::Diphone2Diphone(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  float v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  const char *v13;
  __int128 v14;
  uint64_t v15;
  void *v16[4];
  void *v17[4];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v17, 60);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v16, 60);
  v6 = MEOWPhon::sDWt[*a2];
  MEOWSearchLatticeImpl::WeedCandidates((MEOWSearchLatticeImpl *)a1, *a2, a2[1]);
  if (kDiphoneThreshold)
  {
    MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EFC76E20, (uint64_t *)qword_1EFC76E20);
    kDiphoneThreshold = 0;
  }
  if (qword_1EFC76E20)
  {
    *(_QWORD *)(a1 + 312) = 0;
    MEOWSearchLatticeImpl::MatchContexts((MEOWReader **)a1, *a2, a2[1], *(_BYTE *)(a1 + 432), (MEOWPhon *)1);
    MEOWSearchLatticeImpl::MatchWordBoundaries((MEOWSearchLatticeImpl *)a1, a2[32], a2[33]);
    v7 = a2[1];
    if (a2[1])
    {
      v8 = *a2;
      v9 = *a3;
      *(_QWORD *)&v14 = a3 + 1;
      *((_QWORD *)&v14 + 1) = 1;
      v15 = v9;
      MEOWSearchLatticeImpl::MatchContexts(a1, v8, v7, &v14, 0);
    }
    if (kDiphoneThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EFC76E20, (uint64_t *)qword_1EFC76E20);
      kDiphoneThreshold = 0;
    }
    v10 = qword_1EFC76E20;
    v11 = MEOWPhon::Name((MEOWPhon *)*a2);
    v12 = MEOWPhon::Name((MEOWPhon *)a2[1]);
    MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, v10, v13, v11, v12);
  }
  MEOWReader::GetDistanceCookies(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 432), *(unsigned __int8 *)(a1 + 433), 1, (MEOWVectorBase *)v17, (_QWORD *)(a1 + 104));
  MEOWReader::GetDistanceCookies(*(_QWORD *)(a1 + 8), *a2, a2[1], 0, (MEOWVectorBase *)v16, (_QWORD *)(a1 + 160));
  MEOWSearchLatticeImpl::Cookie2Cookie(a1, (unsigned __int16 **)(a1 + 104), (uint64_t)v17, v16, 0, 0, 0, v6);
  MEOWVectorBase::~MEOWVectorBase(v16);
  MEOWVectorBase::~MEOWVectorBase(v17);
}

void sub_1D22B2830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::Demi2Diphone(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v6;
  float v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  char *v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  const char *v23;
  __int128 v24;
  uint64_t v25;
  void *v26[4];
  void *__src[4];
  void *v28[4];
  __int128 v29;
  uint64_t v30;

  v6 = *a2;
  v7 = MEOWPhon::sDWt[v6];
  MEOWSearchLatticeImpl::WeedCandidates((MEOWSearchLatticeImpl *)a1, v6, a2[1]);
  if (kDiphoneThreshold)
  {
    MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EFC76E20, (uint64_t *)qword_1EFC76E20);
    kDiphoneThreshold = 0;
  }
  if (qword_1EFC76E20)
  {
    *(_QWORD *)(a1 + 312) = 0;
    v8 = a2[1];
    if (a2[1])
    {
      v9 = *a2;
      v10 = *a3;
      *(_QWORD *)&v29 = a3 + 1;
      *((_QWORD *)&v29 + 1) = 1;
      v30 = v10;
      MEOWSearchLatticeImpl::MatchContexts(a1, v9, v8, &v29, 0);
    }
  }
  if (*(_QWORD *)(a1 + 512) == 1)
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v28, 60);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__src, 60);
    if (kDiphoneThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EFC76E20, (uint64_t *)qword_1EFC76E20);
      kDiphoneThreshold = 0;
    }
    if (qword_1EFC76E20)
    {
      MEOWSearchLatticeImpl::MatchContexts((MEOWReader **)a1, *a2, a2[1], **(_BYTE **)(a1 + 520), (MEOWPhon *)1);
      MEOWSearchLatticeImpl::MatchWordBoundaries((MEOWSearchLatticeImpl *)a1, a2[32], 0);
      if (kDiphoneThreshold)
      {
        MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EFC76E20, (uint64_t *)qword_1EFC76E20);
        kDiphoneThreshold = 0;
      }
      v11 = qword_1EFC76E20;
      v12 = MEOWPhon::Name((MEOWPhon *)*a2);
      v13 = MEOWPhon::Name((MEOWPhon *)a2[1]);
      MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, v11, v14, v12, v13);
    }
    MEOWReader::GetDistanceCookies(*(_QWORD *)(a1 + 8), **(unsigned __int8 **)(a1 + 520), *(unsigned __int8 *)(*(_QWORD *)(a1 + 520) + 1), 1, (MEOWVectorBase *)v28, (_QWORD *)(a1 + 104));
    MEOWReader::GetDistanceCookies(*(_QWORD *)(a1 + 8), *a2, a2[1], 0, (MEOWVectorBase *)__src, (_QWORD *)(a1 + 160));
    MEOWSearchLatticeImpl::Cookie2Cookie(a1, (unsigned __int16 **)(a1 + 104), (uint64_t)v28, __src, 0, 0, 0, v7);
  }
  else
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v28, 60);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__src, 60);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v26, 60);
    if (*(_QWORD *)(a1 + 512))
    {
      v15 = 0;
      v16 = 0;
      do
      {
        MEOWReader::GetDistanceCookies(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a1 + 520) + v15), *(unsigned __int8 *)(*(_QWORD *)(a1 + 520) + v15 + 1), 1, (MEOWVectorBase *)__src, 0);
        MEOWVectorBase::Append((MEOWVectorBase *)v28, __src[0], (uint64_t)__src[2]);
        ++v16;
        v15 += 144;
      }
      while (v16 < *(_QWORD *)(a1 + 512));
    }
    if (kDiphoneThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EFC76E20, (uint64_t *)qword_1EFC76E20);
      kDiphoneThreshold = 0;
    }
    if (qword_1EFC76E20)
    {
      v17 = *a2;
      v18 = a2[1];
      v19 = *(_QWORD *)(a1 + 512);
      *(_QWORD *)&v24 = *(_QWORD *)(a1 + 520);
      *((_QWORD *)&v24 + 1) = 144;
      v25 = v19;
      MEOWSearchLatticeImpl::MatchContexts(a1, v17, v18, &v24, (MEOWPhon *)1);
      MEOWSearchLatticeImpl::MatchWordBoundaries((MEOWSearchLatticeImpl *)a1, a2[32], 0);
      if (kDiphoneThreshold)
      {
        MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EFC76E20, (uint64_t *)qword_1EFC76E20);
        kDiphoneThreshold = 0;
      }
      v20 = qword_1EFC76E20;
      v21 = MEOWPhon::Name((MEOWPhon *)*a2);
      v22 = MEOWPhon::Name((MEOWPhon *)a2[1]);
      MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, v20, v23, v21, v22);
    }
    MEOWReader::GetDistanceCookies(*(_QWORD *)(a1 + 8), *a2, a2[1], 0, (MEOWVectorBase *)v26, (_QWORD *)(a1 + 160));
    MEOWSearchLatticeImpl::Cookie2Cookie(a1, (unsigned __int16 **)(a1 + 104), (uint64_t)v28, v26, 0, 0, 0, v7);
    MEOWVectorBase::~MEOWVectorBase(v26);
  }
  MEOWVectorBase::~MEOWVectorBase(__src);
  MEOWVectorBase::~MEOWVectorBase(v28);
}

void sub_1D22B2B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, void *);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  MEOWVectorBase::~MEOWVectorBase((void **)va1);
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::Null2Demi(MEOWSearchLatticeImpl *this, const MEOWDemiSliceInfo *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];
  void *__src[4];
  void *v8[4];

  if (*((_QWORD *)a2 + 5) == 1)
  {
    MEOWSearchLatticeImpl::WeedCandidates(this, **((unsigned __int8 **)a2 + 6), *(unsigned __int8 *)(*((_QWORD *)a2 + 6) + 1));
  }
  else
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v8, 60);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__src, 60);
    if (*((_QWORD *)a2 + 5))
    {
      v4 = 0;
      v5 = 0;
      do
      {
        MEOWReader::GetDistanceCookies(*((_QWORD *)this + 1), *(unsigned __int8 *)(*((_QWORD *)a2 + 6) + v4), *(unsigned __int8 *)(*((_QWORD *)a2 + 6) + v4 + 1), 0, (MEOWVectorBase *)__src, 0);
        MEOWVectorBase::Append((MEOWVectorBase *)v8, __src[0], (uint64_t)__src[2]);
        ++v5;
        v4 += 144;
      }
      while (v5 < *((_QWORD *)a2 + 5));
    }
    v6[0] = (char *)v8[0] + 53;
    v6[1] = 60;
    v6[2] = v8[2];
    MEOWSearchLatticeImpl::WeedCandidates((uint64_t)this, v6);
    MEOWVectorBase::~MEOWVectorBase(__src);
    MEOWVectorBase::~MEOWVectorBase(v8);
  }
}

void sub_1D22B2CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  MEOWVectorBase::~MEOWVectorBase((void **)va1);
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::Demi2Demi(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  float v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  const char *v15;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  const char *v24;
  _QWORD v25[3];
  __int128 v26;
  uint64_t v27;
  _QWORD v28[3];
  void *__src[2];
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  void *v33[2];
  uint64_t v34;
  void *v35[4];

  v5 = MEOWPhon::sDWt[**(unsigned __int8 **)(a2 + 48)];
  if (*(_QWORD *)(a1 + 512) == 1 && *(_QWORD *)(a2 + 40) == 1)
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v35, 60);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v33, 60);
    MEOWSearchLatticeImpl::WeedCandidates((MEOWSearchLatticeImpl *)a1, **(unsigned __int8 **)(a2 + 48), *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + 1));
    if (kDiphoneThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EFC76E20, (uint64_t *)qword_1EFC76E20);
      kDiphoneThreshold = 0;
    }
    if (qword_1EFC76E20)
    {
      *(_QWORD *)(a1 + 312) = 0;
      if (*(_BYTE *)(a2 + 1))
      {
        v17 = *(unsigned __int8 **)(a2 + 48);
        v18 = *v17;
        v19 = v17[1];
        v20 = *a3;
        *(_QWORD *)&v31 = a3 + 1;
        *((_QWORD *)&v31 + 1) = 1;
        v32 = v20;
        MEOWSearchLatticeImpl::MatchContexts(a1, v18, v19, &v31, 0);
      }
      MEOWSearchLatticeImpl::MatchContexts((MEOWReader **)a1, **(unsigned __int8 **)(a2 + 48), *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + 1), **(_BYTE **)(a1 + 520), (MEOWPhon *)1);
      if (kDiphoneThreshold)
      {
        MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EFC76E20, (uint64_t *)qword_1EFC76E20);
        kDiphoneThreshold = 0;
      }
      v21 = qword_1EFC76E20;
      v22 = MEOWPhon::Name((MEOWPhon *)**(unsigned __int8 **)(a2 + 48));
      v23 = MEOWPhon::Name((MEOWPhon *)*(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + 1));
      MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, v21, v24, v22, v23);
    }
    MEOWReader::GetDistanceCookies(*(_QWORD *)(a1 + 8), **(unsigned __int8 **)(a1 + 520), *(unsigned __int8 *)(*(_QWORD *)(a1 + 520) + 1), 1, (MEOWVectorBase *)v35, (_QWORD *)(a1 + 104));
    MEOWReader::GetDistanceCookies(*(_QWORD *)(a1 + 8), **(unsigned __int8 **)(a2 + 48), *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + 1), 0, (MEOWVectorBase *)v33, (_QWORD *)(a1 + 160));
    MEOWSearchLatticeImpl::Cookie2Cookie(a1, (unsigned __int16 **)(a1 + 104), (uint64_t)v35, v33, 0, 0, 0, v5);
  }
  else
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v35, 60);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v33, 60);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__src, 60);
    if (kDiphoneThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EFC76E20, (uint64_t *)qword_1EFC76E20);
      kDiphoneThreshold = 0;
    }
    if (qword_1EFC76E20)
      *(_QWORD *)(a1 + 312) = 0;
    if (*(_QWORD *)(a1 + 512))
    {
      v7 = 0;
      v8 = 0;
      do
      {
        MEOWReader::GetDistanceCookies(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a1 + 520) + v7), *(unsigned __int8 *)(*(_QWORD *)(a1 + 520) + v7 + 1), 1, (MEOWVectorBase *)__src, 0);
        MEOWVectorBase::Append((MEOWVectorBase *)v35, __src[0], v30);
        ++v8;
        v7 += 144;
      }
      while (v8 < *(_QWORD *)(a1 + 512));
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = 0;
      v10 = 0;
      do
      {
        MEOWReader::GetDistanceCookies(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v9), *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v9 + 1), 0, (MEOWVectorBase *)__src, 0);
        MEOWVectorBase::Append((MEOWVectorBase *)v33, __src[0], v30);
        ++v10;
        v9 += 144;
      }
      while (v10 < *(_QWORD *)(a2 + 40));
    }
    v28[0] = (char *)v33[0] + 53;
    v28[1] = 60;
    v28[2] = v34;
    MEOWSearchLatticeImpl::WeedCandidates(a1, v28);
    if (kDiphoneThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EFC76E20, (uint64_t *)qword_1EFC76E20);
      kDiphoneThreshold = 0;
    }
    if (qword_1EFC76E20)
    {
      *(_QWORD *)&v26 = (char *)v33[0] + 52;
      *((_QWORD *)&v26 + 1) = 60;
      v27 = v34;
      v11 = *(_QWORD *)(a1 + 512);
      v25[0] = *(_QWORD *)(a1 + 520);
      v25[1] = 144;
      v25[2] = v11;
      MEOWSearchLatticeImpl::MatchContexts((_QWORD *)a1, &v26, (uint64_t)v25, (MEOWPhon *)1);
      MEOWSearchLatticeImpl::MatchWordBoundaries((MEOWSearchLatticeImpl *)a1, *(unsigned __int8 *)(a2 + 32), 0);
      if (kDiphoneThreshold)
      {
        MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EFC76E20, (uint64_t *)qword_1EFC76E20);
        kDiphoneThreshold = 0;
      }
      v12 = qword_1EFC76E20;
      v13 = MEOWPhon::Name((MEOWPhon *)**(unsigned __int8 **)(a2 + 48));
      v14 = MEOWPhon::Name((MEOWPhon *)*(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + 1));
      MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, v12, v15, v13, v14);
    }
    MEOWSearchLatticeImpl::Cookie2Cookie(a1, (unsigned __int16 **)(a1 + 104), (uint64_t)v35, v33, 0, 0, 0, v5);
    MEOWVectorBase::~MEOWVectorBase(__src);
  }
  MEOWVectorBase::~MEOWVectorBase(v33);
  MEOWVectorBase::~MEOWVectorBase(v35);
}

void sub_1D22B3104(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEOWVectorBase::~MEOWVectorBase((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::Anchor2Diphone(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v6;
  float v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  const char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[28];
  __int128 v19;
  uint64_t v20;
  _OWORD v21[2];
  _BYTE v22[28];
  void *v23[4];
  void *v24[4];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v24, 60);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v23, 60);
  v6 = *(_DWORD *)(a1 + 536);
  v7 = MEOWPhon::sDWt[*a2];
  MEOWSearchLatticeImpl::WeedCandidates((MEOWSearchLatticeImpl *)a1, *a2, a2[1]);
  if (kDiphoneThreshold)
  {
    MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EFC76E20, (uint64_t *)qword_1EFC76E20);
    kDiphoneThreshold = 0;
  }
  if (qword_1EFC76E20)
  {
    *(_QWORD *)(a1 + 312) = 0;
    v8 = a2[1];
    if (a2[1])
    {
      v9 = *a2;
      v10 = *a3;
      *(_QWORD *)&v19 = a3 + 1;
      *((_QWORD *)&v19 + 1) = 1;
      v20 = v10;
      MEOWSearchLatticeImpl::MatchContexts(a1, v9, v8, &v19, 0);
      v8 = a2[1];
    }
    MEOWSearchLatticeImpl::MatchContexts((MEOWReader **)a1, *a2, v8, *(_BYTE *)(a1 + 536), (MEOWPhon *)1);
    MEOWSearchLatticeImpl::MatchWordBoundaries((MEOWSearchLatticeImpl *)a1, a2[32], a2[33]);
    if (kDiphoneThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EFC76E20, (uint64_t *)qword_1EFC76E20);
      kDiphoneThreshold = 0;
    }
    v11 = qword_1EFC76E20;
    v12 = MEOWPhon::Name((MEOWPhon *)*a2);
    v13 = MEOWPhon::Name((MEOWPhon *)a2[1]);
    MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, v11, v14, v12, v13);
  }
  MEOWReader::GetDistanceCookie(*(_QWORD *)(a1 + 8), v6, BYTE1(v6), (unsigned __int16)bswap32(v6), 1, (uint64_t)v21);
  v16 = v21[0];
  v17 = v21[1];
  *(_OWORD *)v18 = *(_OWORD *)v22;
  *(_OWORD *)&v18[12] = *(_OWORD *)&v22[12];
  MEOWVectorBase::Append(v24);
  v15 = (char *)v24[0] + 60 * (uint64_t)v24[2];
  *(_OWORD *)(v15 - 60) = v16;
  *(_OWORD *)(v15 - 44) = v17;
  *(_OWORD *)(v15 - 28) = *(_OWORD *)v18;
  *((_OWORD *)v15 - 1) = *(_OWORD *)&v18[12];
  MEOWReader::GetDistanceCookies(*(_QWORD *)(a1 + 8), *a2, a2[1], 0, (MEOWVectorBase *)v23, (_QWORD *)(a1 + 160));
  MEOWSearchLatticeImpl::Cookie2Cookie(a1, (unsigned __int16 **)(a1 + 104), (uint64_t)v24, v23, 0, 0, 0, v7);
  MEOWVectorBase::~MEOWVectorBase(v23);
  MEOWVectorBase::~MEOWVectorBase(v24);
}

void sub_1D22B3358(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEOWVectorBase::~MEOWVectorBase((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::Diphone2Anchor(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  float v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[28];
  _OWORD v10[2];
  _BYTE v11[28];
  void *v12[4];
  void *v13[4];

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v13, 60);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v12, 60);
  v4 = *a2;
  v5 = MEOWPhon::sDWt[*a2];
  MEOWReader::GetDistanceCookies(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 432), *(unsigned __int8 *)(a1 + 433), 1, (MEOWVectorBase *)v13, (_QWORD *)(a1 + 104));
  MEOWReader::GetDistanceCookie(*(_QWORD *)(a1 + 8), v4, BYTE1(v4), (unsigned __int16)bswap32(v4), 0, (uint64_t)v10);
  v7 = v10[0];
  v8 = v10[1];
  *(_OWORD *)v9 = *(_OWORD *)v11;
  *(_OWORD *)&v9[12] = *(_OWORD *)&v11[12];
  MEOWVectorBase::Append(v12);
  v6 = (char *)v12[0] + 60 * (uint64_t)v12[2];
  *(_OWORD *)(v6 - 60) = v7;
  *(_OWORD *)(v6 - 44) = v8;
  *(_OWORD *)(v6 - 28) = *(_OWORD *)v9;
  *((_OWORD *)v6 - 1) = *(_OWORD *)&v9[12];
  MEOWSearchLatticeImpl::Cookie2Cookie(a1, (unsigned __int16 **)(a1 + 104), (uint64_t)v13, v12, 0, 0, 0, v5);
  MEOWVectorBase::~MEOWVectorBase(v12);
  MEOWVectorBase::~MEOWVectorBase(v13);
}

void sub_1D22B34A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEOWVectorBase::~MEOWVectorBase((void **)(v1 - 80));
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::Word2Demi(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v5;
  float *v6;
  float v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  const char *v34;
  unint64_t v35;
  unsigned __int16 *v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  float v41;
  float v42;
  uint64_t v43;
  unsigned int v44;
  float v45;
  int v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  int v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  float *v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  void *v80[4];
  void *v81[5];

  if (kDemiThreshold)
  {
    MTBEDebugParams::GetParam((const __CFString *)kDemiThreshold, (const __CFString *)&qword_1EFC76E30, (uint64_t *)qword_1EFC76E30);
    kDemiThreshold = 0;
  }
  v5 = *(_QWORD *)(a2 + 40) - 1;
  if (v5 <= 1)
    v5 = 1;
  v61 = v5;
  v62 = qword_1EFC76E30;
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v81, 2);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v80, 1);
  SLML::Vector<float>::Vector((uint64_t)&v78, 0);
  SLML::Vector<float>::Vector((uint64_t)&v76, 0);
  if (kWordInstanceMismatch)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordInstanceMismatch, (const __CFString *)&dword_1EFC76E40, v6, *(float *)&dword_1EFC76E40);
    kWordInstanceMismatch = 0;
  }
  v7 = *(float *)&dword_1EFC76E40;
  if (kWordInnerMismatch)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordInnerMismatch, (const __CFString *)&dword_1EFC76E50, v6, *(float *)&dword_1EFC76E50);
    kWordInnerMismatch = 0;
  }
  v8 = dword_1EFC76E50;
  if (kWordOuterMismatch)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordOuterMismatch, (const __CFString *)&dword_1EFC76E60, v6, *(float *)&dword_1EFC76E60);
    kWordOuterMismatch = 0;
  }
  v9 = dword_1EFC76E60;
  if (kWordKeepWithNext)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordKeepWithNext, (const __CFString *)&dword_1EFC76E70, v6, *(float *)&dword_1EFC76E70);
    kWordKeepWithNext = 0;
  }
  if (*(_QWORD *)(a2 + 40))
  {
    v10 = 0;
    v11 = 0;
    v12 = dword_1EFC76E70;
    v60 = a2;
    v13 = v7 + 0.0;
    do
    {
      v14 = *(_QWORD *)(a2 + 48);
      v63 = v10;
      v15 = (unsigned __int8 *)(v14 + 144 * v10);
      v16 = *v15;
      v18 = v15 + 1;
      v17 = v15[1];
      v20 = (unint64_t *)(v15 + 8);
      v19 = *((_QWORD *)v15 + 1);
      v21 = *(_QWORD *)(a1 + 56);
      v22 = v19 + v21;
      if (*(_QWORD *)(a1 + 64) < v19 + v21)
      {
        MEOWVectorBase::Allocate((MEOWVectorBase *)(a1 + 40), v22, 1);
        v19 = *v20;
      }
      *(_QWORD *)(a1 + 56) = v22;
      bzero((void *)(*(_QWORD *)(a1 + 40) + 2 * v21), 2 * v19);
      MEOWSearchLatticeImpl::AllocateCostVectors((MEOWSearchLatticeImpl *)a1, *v20, -1);
      MEOWSearchLatticeImpl::WeedCandidates((MEOWSearchLatticeImpl *)a1, *v15, *v18);
      if (v61 <= v62)
      {
        v23 = v14 + 144 * v63;
        v25 = *(unsigned __int8 *)(v23 + 16);
        v24 = (unsigned __int8 *)(v23 + 16);
        if (v25)
        {
          *(_QWORD *)(a1 + 312) = 0;
          v26 = *v15;
          v27 = *v18;
          v28 = *a3;
          *(_QWORD *)&v74 = a3 + 1;
          *((_QWORD *)&v74 + 1) = 1;
          v75 = v28;
          MEOWSearchLatticeImpl::MatchContexts(a1, v26, v27, &v74, 0);
          v29 = *v15;
          v30 = *v18;
          v31 = *v24;
          *(_QWORD *)&v72 = v14 + 144 * v63 + 17;
          *((_QWORD *)&v72 + 1) = 1;
          v73 = v31;
          MEOWSearchLatticeImpl::MatchContexts(a1, v29, v30, &v72, (MEOWPhon *)1);
          MEOWSearchLatticeImpl::MatchWordBoundaries((MEOWSearchLatticeImpl *)a1, 1, 0);
          v32 = MEOWPhon::Name((MEOWPhon *)*v15);
          v33 = MEOWPhon::Name((MEOWPhon *)*v18);
          MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, v62 / v61, v34, v32, v33);
          MEOWVectorBase::Append((MEOWVectorBase *)v80, *(const void **)(a1 + 296), *(_QWORD *)(a1 + 312));
        }
      }
      if (*(_QWORD *)(a1 + 176))
      {
        v35 = 0;
        do
        {
          v36 = *(unsigned __int16 **)(a1 + 104);
          v37 = *v36;
          v38 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 160) + 2 * v35);
          v39 = *(_QWORD *)(a1 + 120);
          if (v39)
          {
            v40 = bswap32(v38) | (v17 << 8) | v16;
            v41 = 3.4028e38;
            v42 = 3.4028e38;
            do
            {
              v44 = *v36++;
              v43 = v44;
              v45 = *(float *)(*(_QWORD *)(a1 + 152) + 4 * (int)(*(_DWORD *)(a1 + 140) * v44));
              if (v45 >= v42)
                break;
              v46 = *(_DWORD *)(*(_QWORD *)(a1 + 360) + 8 * v43 + 4);
              v47 = 0.0;
              if (v40 != v46)
              {
                if (v16 == v46)
                  v48 = -0.0;
                else
                  v48 = *(float *)&v8;
                v49 = v13 + v48;
                if (v17 == BYTE1(v46))
                  v50 = -0.0;
                else
                  v50 = *(float *)&v9;
                v51 = v49 + v50;
                if (*(char *)(*(_QWORD *)(a1 + 392) + v43) >= 0)
                  v52 = -0.0;
                else
                  v52 = *(float *)&v12;
                v47 = v51 + v52;
              }
              v53 = v45 + v47;
              if (v53 < v42)
              {
                v42 = v53;
                v41 = v47;
                v37 = v43;
              }
              --v39;
            }
            while (v39);
          }
          else
          {
            v42 = 3.4028e38;
            v41 = 3.4028e38;
          }
          *(float *)(*(_QWORD *)(a1 + 208) + 4 * *(_DWORD *)(a1 + 196) * (int)v38) = v42;
          *(float *)(*(_QWORD *)(a1 + 232) + 4 * *(_DWORD *)(a1 + 220) * (int)v38) = v41;
          *(_WORD *)(*(_QWORD *)(a1 + 40) + 2 * (v21 + v38)) = v37;
          MEOWVectorBase::Append(v81);
          *((_WORD *)v81[0] + (uint64_t)v81[2] - 1) = v38 + v11;
          ++v35;
        }
        while (v35 < *(_QWORD *)(a1 + 176));
      }
      v70 = *((_QWORD *)&v79 + 1) + 4 * HIDWORD(v78) * (int)v78;
      v71 = HIDWORD(v78);
      v68 = *(_QWORD *)(a1 + 208);
      v54 = *(_DWORD *)(a1 + 192);
      v69 = *(_DWORD *)(a1 + 196);
      v66 = (float *)(v68 + 4 * v54 * v69);
      v67 = v69;
      SLML::Vector<float>::insert<SLML::Vector<float>::iterator>((uint64_t)&v78, (const char *)&v70, (uint64_t)&v68, &v66);
      v70 = *((_QWORD *)&v77 + 1) + 4 * HIDWORD(v76) * (int)v76;
      v71 = HIDWORD(v76);
      v64 = *(_QWORD *)(a1 + 232);
      v55 = *(_DWORD *)(a1 + 216);
      v65 = *(_DWORD *)(a1 + 220);
      v66 = (float *)(v64 + 4 * v55 * v65);
      v67 = v65;
      SLML::Vector<float>::insert<SLML::Vector<float>::iterator>((uint64_t)&v76, (const char *)&v70, (uint64_t)&v64, &v66);
      a2 = v60;
      v11 += *v20;
      v10 = v63 + 1;
    }
    while ((unint64_t)(v63 + 1) < *(_QWORD *)(v60 + 40));
  }
  v56 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v78;
  v78 = v56;
  v57 = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(a1 + 200) = v79;
  v79 = v57;
  *(_QWORD *)&v57 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v76;
  v76 = v57;
  v58 = *(_OWORD *)(a1 + 224);
  *(_OWORD *)(a1 + 224) = v77;
  v77 = v58;
  MEOWVectorBase::Swap((uint64_t *)(a1 + 160), (MEOWVectorBase *)v81);
  MEOWVectorBase::Swap((uint64_t *)(a1 + 296), (MEOWVectorBase *)v80);
  SLML::Storage<float>::RemoveReference(v77);
  SLML::Storage<float>::RemoveReference(v79);
  MEOWVectorBase::~MEOWVectorBase(v80);
  MEOWVectorBase::~MEOWVectorBase(v81);
}

void sub_1D22B3A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;

  SLML::Storage<float>::RemoveReference(a35);
  SLML::Storage<float>::RemoveReference(a38);
  MEOWVectorBase::~MEOWVectorBase((void **)(v38 - 200));
  MEOWVectorBase::~MEOWVectorBase((void **)(v38 - 168));
  _Unwind_Resume(a1);
}

uint64_t SLML::Vector<float>::insert<SLML::Vector<float>::iterator>(uint64_t result, const char *a2, uint64_t a3, float **a4)
{
  uint64_t v6;
  float *i;

  v6 = result;
  if (*(_QWORD *)a2 != *(_QWORD *)(result + 16) + 4 * *(_DWORD *)(result + 4) * *(_DWORD *)result)
    SLML::Fatal((SLML *)"Only inserts at end() are implemented!", a2);
  for (i = *(float **)a3; i != *a4; *(_QWORD *)a3 = i)
  {
    result = SLML::Vector<float>::push_back(v6, *i);
    i = (float *)(*(_QWORD *)a3 + 4 * *(int *)(a3 + 8));
  }
  return result;
}

void MEOWSearchLatticeImpl::Diphone2Demi(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  float v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  __int16 v17;
  uint64_t v18;
  unsigned __int8 *v19;
  MEOWPhon *v20;
  MEOWPhon *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  const char *v27;
  unint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  const char *v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  void *v44[4];
  void *v45[4];
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  void *v48[4];
  void *v49[5];

  v5 = MEOWPhon::sDWt[*(unsigned __int8 *)(a1 + 433)];
  if (*(_QWORD *)(a2 + 40) == 1)
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v49, 60);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v48, 60);
    MEOWSearchLatticeImpl::WeedCandidates((MEOWSearchLatticeImpl *)a1, **(unsigned __int8 **)(a2 + 48), *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + 1));
    if (kDiphoneThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EFC76E20, (uint64_t *)qword_1EFC76E20);
      kDiphoneThreshold = 0;
    }
    if (qword_1EFC76E20)
    {
      *(_QWORD *)(a1 + 312) = 0;
      v7 = *(unsigned __int8 **)(a2 + 48);
      v8 = v7[80];
      v9 = *v7;
      v10 = v7[1];
      if (v7[80])
      {
        v47 = v7 + 81;
        v11 = (__int128 *)&v47;
      }
      else
      {
        v8 = *a3;
        v46 = a3 + 1;
        v11 = (__int128 *)&v46;
      }
      *((_QWORD *)v11 + 1) = 1;
      *((_QWORD *)v11 + 2) = v8;
      MEOWSearchLatticeImpl::MatchContexts(a1, v9, v10, v11, 0);
      MEOWSearchLatticeImpl::MatchContexts((MEOWReader **)a1, **(unsigned __int8 **)(a2 + 48), *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + 1), *(_BYTE *)(a1 + 432), (MEOWPhon *)1);
      MEOWSearchLatticeImpl::MatchWordBoundaries((MEOWSearchLatticeImpl *)a1, *(unsigned __int8 *)(a2 + 32), 0);
      if (kDiphoneThreshold)
      {
        MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EFC76E20, (uint64_t *)qword_1EFC76E20);
        kDiphoneThreshold = 0;
      }
      v33 = qword_1EFC76E20;
      v34 = MEOWPhon::Name((MEOWPhon *)**(unsigned __int8 **)(a2 + 48));
      v35 = MEOWPhon::Name((MEOWPhon *)*(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + 1));
      MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, v33, v36, v34, v35);
    }
    MEOWReader::GetDistanceCookies(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 432), *(unsigned __int8 *)(a1 + 433), 1, (MEOWVectorBase *)v49, (_QWORD *)(a1 + 104));
    MEOWReader::GetDistanceCookies(*(_QWORD *)(a1 + 8), **(unsigned __int8 **)(a2 + 48), *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + 1), 0, (MEOWVectorBase *)v48, (_QWORD *)(a1 + 160));
    MEOWSearchLatticeImpl::Cookie2Cookie(a1, (unsigned __int16 **)(a1 + 104), (uint64_t)v49, v48, 0, 0, 0, v5);
  }
  else
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v49, 60);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v48, 60);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v45, 60);
    if (kDemiThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDemiThreshold, (const __CFString *)&qword_1EFC76E30, (uint64_t *)qword_1EFC76E30);
      kDemiThreshold = 0;
    }
    v37 = qword_1EFC76E30;
    if ((unint64_t)(*(_QWORD *)(a2 + 40) - 1) <= 1)
      v12 = 1;
    else
      v12 = *(_QWORD *)(a2 + 40) - 1;
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v44, 2);
    SLML::Vector<float>::Vector((uint64_t)&v42, 0);
    SLML::Vector<float>::Vector((uint64_t)&v40, 0);
    v13 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v42;
    v42 = v13;
    v14 = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a1 + 200) = v43;
    v43 = v14;
    *(_QWORD *)&v14 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v40;
    v40 = v14;
    v15 = *(_OWORD *)(a1 + 224);
    *(_OWORD *)(a1 + 224) = v41;
    v41 = v15;
    if (*(_QWORD *)(a2 + 40))
    {
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = *(_QWORD *)(a2 + 48);
        v19 = (unsigned __int8 *)(v18 + 144 * v16);
        v20 = (MEOWPhon *)*v19;
        v21 = (MEOWPhon *)v19[1];
        v22 = *((_QWORD *)v19 + 1);
        MEOWSearchLatticeImpl::AllocateCostVectors((MEOWSearchLatticeImpl *)a1, v22, -1);
        MEOWSearchLatticeImpl::WeedCandidates((MEOWSearchLatticeImpl *)a1, v20, v21);
        if (v12 <= v37)
        {
          *(_QWORD *)(a1 + 312) = 0;
          v23 = v18 + 144 * v16;
          v24 = *(unsigned __int8 *)(v23 + 80);
          *(_QWORD *)&v38 = v23 + 81;
          *((_QWORD *)&v38 + 1) = 1;
          v39 = v24;
          MEOWSearchLatticeImpl::MatchContexts(a1, v20, v21, &v38, 0);
          MEOWSearchLatticeImpl::MatchContexts((MEOWReader **)a1, v20, v21, *(_BYTE *)(a1 + 432), (MEOWPhon *)1);
          MEOWSearchLatticeImpl::MatchWordBoundaries((MEOWSearchLatticeImpl *)a1, *(unsigned __int8 *)(a2 + 32), 0);
          v25 = MEOWPhon::Name(v20);
          v26 = MEOWPhon::Name(v21);
          MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, v37 / v12, v27, v25, v26);
        }
        MEOWReader::GetDistanceCookies(*(_QWORD *)(a1 + 8), v20, v21, 0, (MEOWVectorBase *)v48, (_QWORD *)(a1 + 160));
        MEOWVectorBase::Append((MEOWVectorBase *)v45, v48[0], (uint64_t)v48[2]);
        if (*(_QWORD *)(a1 + 176))
        {
          v28 = 0;
          do
          {
            v29 = *(_WORD *)(*(_QWORD *)(a1 + 160) + 2 * v28);
            MEOWVectorBase::Append(v44);
            *((_WORD *)v44[0] + (uint64_t)v44[2] - 1) = v29 + v17;
            ++v28;
          }
          while (v28 < *(_QWORD *)(a1 + 176));
        }
        v17 += v22;
        ++v16;
      }
      while (v16 < *(_QWORD *)(a2 + 40));
    }
    MEOWVectorBase::Swap((uint64_t *)(a1 + 160), (MEOWVectorBase *)v44);
    v30 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v42;
    v42 = v30;
    v31 = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a1 + 200) = v43;
    v43 = v31;
    *(_QWORD *)&v31 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v40;
    v40 = v31;
    v32 = *(_OWORD *)(a1 + 224);
    *(_OWORD *)(a1 + 224) = v41;
    v41 = v32;
    MEOWReader::GetDistanceCookies(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 432), *(unsigned __int8 *)(a1 + 433), 1, (MEOWVectorBase *)v49, (_QWORD *)(a1 + 104));
    MEOWSearchLatticeImpl::Cookie2Cookie(a1, (unsigned __int16 **)(a1 + 104), (uint64_t)v49, v45, 0, 0, 0, v5);
    SLML::Storage<float>::RemoveReference(v41);
    SLML::Storage<float>::RemoveReference(v43);
    MEOWVectorBase::~MEOWVectorBase(v44);
    MEOWVectorBase::~MEOWVectorBase(v45);
  }
  MEOWVectorBase::~MEOWVectorBase(v48);
  MEOWVectorBase::~MEOWVectorBase(v49);
}

void sub_1D22B3FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  uint64_t v26;

  MEOWVectorBase::~MEOWVectorBase(&a26);
  MEOWVectorBase::~MEOWVectorBase((void **)(v26 - 168));
  MEOWVectorBase::~MEOWVectorBase((void **)(v26 - 136));
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::Word2WordCull(MEOWSearchLatticeImpl *a1, uint64_t a2, _QWORD *a3, unsigned __int8 *a4)
{
  uint64_t v8;
  const char *v9;
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];
  unsigned __int8 __s;
  _BYTE v20[71];

  *(_QWORD *)&v20[63] = *MEMORY[0x1E0C80C00];
  if (kWordThreshold)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordThreshold, (const __CFString *)&qword_1EFC76E80, (uint64_t *)qword_1EFC76E80);
    kWordThreshold = 0;
  }
  if (qword_1EFC76E80 && a3[2] > (unint64_t)qword_1EFC76E80)
  {
    *((_QWORD *)a1 + 39) = 0;
    __s = 0;
    v18[0] = *((_QWORD *)a1 + 45) + 4;
    v18[1] = 8;
    v18[2] = *((_QWORD *)a1 + 47);
    MEOWDemiSliceInfo::PhonemeSet::AddPhonemes(&__s, v18);
    *(_QWORD *)&v16 = *a3;
    *((_QWORD *)&v16 + 1) = 8;
    v17 = a3[2];
    v15[0] = v20;
    v15[1] = 1;
    v15[2] = __s;
    MEOWSearchLatticeImpl::MatchContexts(a1, &v16, (uint64_t)v15, 0);
    *(_QWORD *)&v13 = *a3 + 5;
    *((_QWORD *)&v13 + 1) = 8;
    v14 = a3[2];
    v8 = *a4;
    v12[0] = a4 + 1;
    v12[1] = 1;
    v12[2] = v8;
    MEOWSearchLatticeImpl::MatchContexts(a1, &v13, (uint64_t)v12, (MEOWPhon *)1);
    v11[0] = *a3 + 1;
    v11[1] = 8;
    v11[2] = a3[2];
    MEOWSearchLatticeImpl::MatchContexts(a1, v11, *(_BYTE *)(a2 + 57), (MEOWPhon *)1);
    v10[0] = *a3 + 4;
    v10[1] = 8;
    v10[2] = a3[2];
    MEOWSearchLatticeImpl::MatchContexts(a1, v10, *(_BYTE *)(a2 + 58), 0);
    if (kWordThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kWordThreshold, (const __CFString *)&qword_1EFC76E80, (uint64_t *)qword_1EFC76E80);
      kWordThreshold = 0;
    }
    MEOWSearchLatticeImpl::CullCandidates(a1, qword_1EFC76E80, v9, *(_QWORD *)a2);
  }
}

_UNKNOWN **MEOWSearchLatticeImpl::Word2Word(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float v14;
  int v15;
  int v16;
  _UNKNOWN **result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 v30;
  int v31;
  float v32;
  float v33;
  unsigned __int16 *v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  unsigned int v38;
  float v39;
  int v40;
  float v41;
  float v42;
  float v43;
  _QWORD *v44;
  _UNKNOWN **v45;

  v9 = *(float *)(a1 + 424);
  if (kWordLeftBias)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordLeftBias, (const __CFString *)&dword_1EFC76E90, (float *)a4, *(float *)&dword_1EFC76E90);
    kWordLeftBias = 0;
  }
  if ((float)(v9 + *(float *)&dword_1EFC76E90) >= a2)
    a2 = v9 + *(float *)&dword_1EFC76E90;
  v10 = *(_QWORD *)(a4 + 16);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = v10 + v11;
  if (*(_QWORD *)(a1 + 64) < (unint64_t)(v10 + v11))
    MEOWVectorBase::Allocate((MEOWVectorBase *)(a1 + 40), v10 + v11, 1);
  *(_QWORD *)(a1 + 56) = v12;
  bzero((void *)(*(_QWORD *)(a1 + 40) + 2 * v11), 2 * *(_QWORD *)(a4 + 16));
  if (kWordContextSubst)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordContextSubst, (const __CFString *)&dword_1EFC76EA0, v13, *(float *)&dword_1EFC76EA0);
    kWordContextSubst = 0;
  }
  v14 = *(float *)&dword_1EFC76EA0;
  if (kWordKeepWithNext)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordKeepWithNext, (const __CFString *)&dword_1EFC76E70, v13, *(float *)&dword_1EFC76E70);
    kWordKeepWithNext = 0;
  }
  v15 = dword_1EFC76E70;
  if (kWordKeepWithPrev)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordKeepWithPrev, (const __CFString *)&dword_1EFC76EB0, v13, *(float *)&dword_1EFC76EB0);
    kWordKeepWithPrev = 0;
  }
  v16 = dword_1EFC76EB0;
  v45 = MEOWPhon::Match(0);
  result = MEOWPhon::Match((MEOWPhon *)1);
  v44 = result;
  v18 = *(_QWORD *)(a1 + 176);
  if (v18)
  {
    v19 = 0;
    v20 = *(_QWORD *)(a1 + 160);
    result = *(_UNKNOWN ***)a4;
    v21 = *a5;
    v22 = *(unsigned __int16 **)(a1 + 104);
    v23 = *(_QWORD *)(a1 + 120);
    v24 = *(_QWORD *)(a1 + 208);
    v25 = *(_DWORD *)(a1 + 196);
    v26 = *(_QWORD *)(a1 + 232);
    v27 = *(_DWORD *)(a1 + 220);
    v28 = *(_QWORD *)(a1 + 40);
    do
    {
      v29 = *(unsigned __int16 *)(v20 + 2 * v19);
      v30 = *v22;
      if (v23)
      {
        v31 = (int)result[v29];
        if ((*(_BYTE *)(v21 + v29) & 0x40) != 0)
          v32 = *(float *)&v16;
        else
          v32 = -0.0;
        v33 = 3.4028e38;
        v34 = v22;
        v35 = v23;
        v36 = 3.4028e38;
        do
        {
          v38 = *v34++;
          v37 = v38;
          v39 = *(float *)(*(_QWORD *)(a1 + 152) + 4 * (int)(*(_DWORD *)(a1 + 140) * v38));
          if (v39 >= v36)
            break;
          v40 = *(_DWORD *)(*(_QWORD *)(a1 + 360) + 8 * v37 + 4);
          v41 = 0.0;
          if (v40 != v31)
          {
            if (*(char *)(*(_QWORD *)(a1 + 392) + v37) >= 0)
              v42 = -0.0;
            else
              v42 = *(float *)&v15;
            v41 = v32
                + (float)((float)((float)((float)(a2
                                                + (float)(v14 * (float)*(char *)(*v44 + 51 * (char)v31 + (char)v40)))
                                        + (float)(v14
                                                * (float)*((char *)*v45 + 51 * SBYTE1(v40)
                                                                        + ((uint64_t)(__int16)v31 >> 8))))
                                + 0.0)
                        + v42);
          }
          v43 = v39 + v41;
          if (v43 < v36)
          {
            v36 = v43;
            v33 = v41;
            v30 = v37;
          }
          --v35;
        }
        while (v35);
      }
      else
      {
        v36 = 3.4028e38;
        v33 = 3.4028e38;
      }
      *(float *)(v24 + 4 * v25 * (int)v29) = v36;
      *(float *)(v26 + 4 * v27 * (int)v29) = v33;
      *(_WORD *)(v28 + 2 * (v11 + v29)) = v30;
      ++v19;
    }
    while (v19 != v18);
  }
  return result;
}

void MEOWSearchLatticeImpl::Null2WordCull(MEOWSearchLatticeImpl *a1, uint64_t a2, _QWORD *a3, unsigned __int8 *a4)
{
  uint64_t v8;
  const char *v9;
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  __int128 v13;
  uint64_t v14;
  char *v15;
  int64x2_t v16;
  __int128 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (kWordThreshold)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordThreshold, (const __CFString *)&qword_1EFC76E80, (uint64_t *)qword_1EFC76E80);
    kWordThreshold = 0;
  }
  if (qword_1EFC76E80 && a3[2] > (unint64_t)qword_1EFC76E80)
  {
    *((_QWORD *)a1 + 39) = 0;
    v19 = 1;
    *(_QWORD *)&v17 = *a3;
    *((_QWORD *)&v17 + 1) = 8;
    v18 = a3[2];
    v15 = (char *)&v19 + 1;
    v16 = vdupq_n_s64(1uLL);
    MEOWSearchLatticeImpl::MatchContexts(a1, &v17, (uint64_t)&v15, 0);
    *(_QWORD *)&v13 = *a3 + 5;
    *((_QWORD *)&v13 + 1) = 8;
    v14 = a3[2];
    v8 = *a4;
    v12[0] = a4 + 1;
    v12[1] = 1;
    v12[2] = v8;
    MEOWSearchLatticeImpl::MatchContexts(a1, &v13, (uint64_t)v12, (MEOWPhon *)1);
    v11[0] = *a3 + 1;
    v11[1] = 8;
    v11[2] = a3[2];
    MEOWSearchLatticeImpl::MatchContexts(a1, v11, *(_BYTE *)(a2 + 57), (MEOWPhon *)1);
    v10[0] = *a3 + 4;
    v10[1] = 8;
    v10[2] = a3[2];
    MEOWSearchLatticeImpl::MatchContexts(a1, v10, *(_BYTE *)(a2 + 58), 0);
    if (kWordThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kWordThreshold, (const __CFString *)&qword_1EFC76E80, (uint64_t *)qword_1EFC76E80);
      kWordThreshold = 0;
    }
    MEOWSearchLatticeImpl::CullCandidates(a1, qword_1EFC76E80, v9, *(_QWORD *)a2);
  }
}

unint64_t MEOWSearchLatticeImpl::Null2Word(uint64_t a1, float a2, uint64_t a3, float *a4, uint64_t *a5)
{
  float v9;
  int v10;
  unint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  float v24;
  int v25;
  float v26;

  if (kWordContextSubst)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordContextSubst, (const __CFString *)&dword_1EFC76EA0, a4, *(float *)&dword_1EFC76EA0);
    kWordContextSubst = 0;
  }
  v9 = *(float *)&dword_1EFC76EA0;
  if (kWordKeepWithPrev)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordKeepWithPrev, (const __CFString *)&dword_1EFC76EB0, a4, *(float *)&dword_1EFC76EB0);
    kWordKeepWithPrev = 0;
  }
  v10 = dword_1EFC76EB0;
  result = (unint64_t)MEOWPhon::Match((MEOWPhon *)1);
  v12 = *(_QWORD *)(a1 + 176);
  if (v12)
  {
    v13 = *(_QWORD *)result;
    v14 = *(unsigned __int16 **)(a1 + 160);
    v15 = *(_QWORD *)a4;
    v16 = *a5;
    v17 = *(_QWORD *)(a1 + 208);
    v18 = *(_DWORD *)(a1 + 196);
    v19 = *(_QWORD *)(a1 + 232);
    v20 = *(_DWORD *)(a1 + 220);
    do
    {
      v22 = *v14++;
      v21 = v22;
      v23 = *(_DWORD *)(v15 + 8 * v22);
      v24 = 0.0;
      if (v23 >= 2u)
      {
        v25 = *(char *)(v13 + 51 * (char)v23);
        if ((*(_BYTE *)(v16 + v21) & 0x40) != 0)
          v26 = *(float *)&v10;
        else
          v26 = -0.0;
        v24 = v26 + (float)((float)(a2 + (float)(v9 * (float)v25)) + 0.0);
      }
      *(float *)(v17 + 4 * v18 * (int)v21) = v24;
      result = (v20 * v21);
      *(float *)(v19 + 4 * (int)result) = v24;
      --v12;
    }
    while (v12);
  }
  return result;
}

void MEOWSearchLatticeImpl::Demi2WordCull(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned __int8 *a4)
{
  uint64_t v8;
  const char *v9;
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];

  if (kWordThreshold)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordThreshold, (const __CFString *)&qword_1EFC76E80, (uint64_t *)qword_1EFC76E80);
    kWordThreshold = 0;
  }
  if (qword_1EFC76E80 && a3[2] > (unint64_t)qword_1EFC76E80)
  {
    *(_QWORD *)(a1 + 312) = 0;
    v15[0] = *a3;
    v15[1] = 8;
    v15[2] = a3[2];
    MEOWSearchLatticeImpl::MatchContexts((_QWORD *)a1, v15, **(_BYTE **)(a1 + 520), 0);
    *(_QWORD *)&v13 = *a3 + 5;
    *((_QWORD *)&v13 + 1) = 8;
    v14 = a3[2];
    v8 = *a4;
    v12[0] = a4 + 1;
    v12[1] = 1;
    v12[2] = v8;
    MEOWSearchLatticeImpl::MatchContexts((_QWORD *)a1, &v13, (uint64_t)v12, (MEOWPhon *)1);
    v11[0] = *a3 + 1;
    v11[1] = 8;
    v11[2] = a3[2];
    MEOWSearchLatticeImpl::MatchContexts((_QWORD *)a1, v11, *(_BYTE *)(a2 + 57), (MEOWPhon *)1);
    v10[0] = *a3 + 4;
    v10[1] = 8;
    v10[2] = a3[2];
    MEOWSearchLatticeImpl::MatchContexts((_QWORD *)a1, v10, *(_BYTE *)(a2 + 58), 0);
    if (kWordThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kWordThreshold, (const __CFString *)&qword_1EFC76E80, (uint64_t *)qword_1EFC76E80);
      kWordThreshold = 0;
    }
    MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, qword_1EFC76E80, v9, *(_QWORD *)a2);
  }
}

void MEOWSearchLatticeImpl::Demi2Word(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  unint64_t v29;
  int v30;
  float v31;
  float v32;
  float v33;
  unint64_t v34;
  float v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;

  v7 = a3[2];
  v8 = *(_QWORD *)(a1 + 56);
  v9 = v7 + v8;
  if (*(_QWORD *)(a1 + 64) < (unint64_t)(v7 + v8))
    MEOWVectorBase::Allocate((MEOWVectorBase *)(a1 + 40), v7 + v8, 1);
  *(_QWORD *)(a1 + 56) = v9;
  bzero((void *)(*(_QWORD *)(a1 + 40) + 2 * v8), 2 * a3[2]);
  if (kWordInstanceMismatch)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordInstanceMismatch, (const __CFString *)&dword_1EFC76E40, v10, *(float *)&dword_1EFC76E40);
    kWordInstanceMismatch = 0;
  }
  v11 = *(float *)&dword_1EFC76E40;
  if (kWordInnerMismatch)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordInnerMismatch, (const __CFString *)&dword_1EFC76E50, v10, *(float *)&dword_1EFC76E50);
    kWordInnerMismatch = 0;
  }
  v12 = dword_1EFC76E50;
  if (kWordOuterMismatch)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordOuterMismatch, (const __CFString *)&dword_1EFC76E60, v10, *(float *)&dword_1EFC76E60);
    kWordOuterMismatch = 0;
  }
  v13 = dword_1EFC76E60;
  if (kWordKeepWithPrev)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordKeepWithPrev, (const __CFString *)&dword_1EFC76EB0, v10, *(float *)&dword_1EFC76EB0);
    kWordKeepWithPrev = 0;
  }
  v14 = *(_QWORD *)(a1 + 176);
  if (v14)
  {
    v15 = 0;
    v16 = dword_1EFC76EB0;
    v17 = *(_QWORD *)(a1 + 160);
    v18 = *a3;
    v19 = *a4;
    v20 = *(__int16 **)(a1 + 104);
    v21 = *(_QWORD *)(a1 + 120);
    v22 = *(_QWORD *)(a1 + 208);
    v23 = *(_DWORD *)(a1 + 196);
    v24 = *(_QWORD *)(a1 + 232);
    v25 = *(_DWORD *)(a1 + 220);
    v26 = *(_QWORD *)(a1 + 40);
    do
    {
      v27 = *(unsigned __int16 *)(v17 + 2 * v15);
      v28 = *v20;
      if (v21)
      {
        v29 = 0;
        v30 = *(_DWORD *)(v18 + 8 * v27);
        if ((*(_BYTE *)(v19 + v27) & 0x40) != 0)
          v31 = *(float *)&v16;
        else
          v31 = -0.0;
        v32 = 3.4028e38;
        v33 = 3.4028e38;
        do
        {
          v34 = (unsigned __int16)v20[v29];
          v35 = *(float *)(*(_QWORD *)(a1 + 152) + 4 * *(_DWORD *)(a1 + 140) * (int)v34);
          if (v35 >= v33)
            break;
          v36 = *(_QWORD *)(a1 + 520);
          v37 = *(_QWORD *)(v36 + 8);
          if (v37 >= v34)
          {
            v39 = *(unsigned __int8 **)(a1 + 520);
            LODWORD(v38) = (unsigned __int16)v20[v29];
          }
          else
          {
            v38 = (unsigned __int16)v20[v29];
            do
            {
              v38 -= v37;
              v39 = (unsigned __int8 *)(v36 + 144);
              v37 = *(_QWORD *)(v36 + 152);
              v36 += 144;
            }
            while (v38 > v37);
          }
          v40 = *v39;
          v41 = v39[1];
          v42 = 0.0;
          if ((bswap32(v38) & 0xFFFF0000 | (v41 << 8) | v40) != v30)
          {
            if (v41 == BYTE1(v30))
              v43 = -0.0;
            else
              v43 = *(float *)&v12;
            v44 = (float)(v11 + 0.0) + v43;
            if (v40 == v30)
              v45 = -0.0;
            else
              v45 = *(float *)&v13;
            v42 = v31 + (float)(v45 + v44);
          }
          v46 = v35 + v42;
          if (v46 < v33)
          {
            v33 = v46;
            v32 = v42;
            v28 = v20[v29];
          }
          ++v29;
        }
        while (v29 < v21);
      }
      else
      {
        v33 = 3.4028e38;
        v32 = 3.4028e38;
      }
      *(float *)(v22 + 4 * v23 * (int)v27) = v33;
      *(float *)(v24 + 4 * v25 * (int)v27) = v32;
      *(_WORD *)(v26 + 2 * (v8 + v27)) = v28;
      ++v15;
    }
    while (v15 != v14);
  }
}

unint64_t MEOWSearchLatticeImpl::Word2Null(uint64_t a1, float a2, uint64_t a3, float *a4, uint64_t *a5)
{
  float v9;
  int v10;
  unint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  float v24;
  int v25;
  float v26;

  if (kWordContextSubst)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordContextSubst, (const __CFString *)&dword_1EFC76EA0, a4, *(float *)&dword_1EFC76EA0);
    kWordContextSubst = 0;
  }
  v9 = *(float *)&dword_1EFC76EA0;
  if (kWordKeepWithNext)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordKeepWithNext, (const __CFString *)&dword_1EFC76E70, a4, *(float *)&dword_1EFC76E70);
    kWordKeepWithNext = 0;
  }
  v10 = dword_1EFC76E70;
  result = (unint64_t)MEOWPhon::Match(0);
  v12 = *(_QWORD *)(a1 + 176);
  if (v12)
  {
    v13 = *(_QWORD *)result;
    v14 = *(unsigned __int16 **)(a1 + 160);
    v15 = *(_QWORD *)a4;
    v16 = *a5;
    v17 = *(_QWORD *)(a1 + 208);
    v18 = *(_DWORD *)(a1 + 196);
    v19 = *(_QWORD *)(a1 + 232);
    v20 = *(_DWORD *)(a1 + 220);
    do
    {
      v22 = *v14++;
      v21 = v22;
      v23 = *(_DWORD *)(v15 + 8 * v22 + 4);
      v24 = 0.0;
      if (BYTE1(v23))
      {
        v25 = *(char *)(v13 + 51 * SBYTE1(v23));
        if (*(char *)(v16 + v21) >= 0)
          v26 = -0.0;
        else
          v26 = *(float *)&v10;
        v24 = v26 + (float)((float)(a2 + (float)(v9 * (float)v25)) + 0.0);
      }
      *(float *)(v17 + 4 * v18 * (int)v21) = v24 + *(float *)(v17 + 4 * v18 * (int)v21);
      result = (v20 * v21);
      *(float *)(v19 + 4 * (int)result) = v24 + *(float *)(v19 + 4 * (int)result);
      --v12;
    }
    while (v12);
  }
  return result;
}

void MEOWSearchLatticeLookahead::MEOWSearchLatticeLookahead(MEOWSearchLatticeLookahead *this, MEOWReader *a2, char a3)
{
  uint64_t v4;
  __int128 v5;

  MEOWSearchLatticeImpl::MEOWSearchLatticeImpl(this, a2, a3);
  *(_QWORD *)v4 = &off_1E9369768;
  *(_DWORD *)(v4 + 540) = 0;
  MEOWDiphoneSliceInfo::MEOWDiphoneSliceInfo((MEOWDiphoneSliceInfo *)(v4 + 544));
  MEOWDiphoneSliceInfo::MEOWDiphoneSliceInfo((MEOWSearchLatticeLookahead *)((char *)this + 584));
  MEOWAnchorSliceInfo::MEOWAnchorSliceInfo((MEOWSearchLatticeLookahead *)((char *)this + 648));
  MEOWWordSliceInfo::MEOWWordSliceInfo((MEOWSearchLatticeLookahead *)((char *)this + 656));
  MEOWVectorBase::MEOWVectorBase((MEOWSearchLatticeLookahead *)((char *)this + 720), 8);
  *(_QWORD *)&v5 = 0xFFFFFFFFLL;
  *((_QWORD *)&v5 + 1) = 0xFFFFFFFFLL;
  *((_OWORD *)this + 47) = v5;
}

void sub_1D22B4D48(_Unwind_Exception *a1)
{
  MEOWSearchLatticeImpl *v1;

  MEOWSearchLatticeImpl::~MEOWSearchLatticeImpl(v1);
  _Unwind_Resume(a1);
}

__n128 MEOWSearchLatticeLookahead::AddWordSlice(MEOWSearchLatticeLookahead *this, const MEOWWordSliceInfo *a2)
{
  __n128 result;
  __int128 v5;
  __int128 v6;
  _QWORD v7[3];
  void *v8[4];
  void *v9[4];
  unsigned __int16 *v10[6];
  unsigned __int8 __s[64];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 135))
  {
    __s[0] = 0;
    if (*((_DWORD *)this + 6) == 6)
    {
      MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v9, 8);
      MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v8, 1);
      MEOWReader::GetWordDescriptor(*((_QWORD *)this + 1), (const char **)a2, v10);
      MEOWReader::GetWordData(*((_QWORD *)this + 1), v10, v9, (uint64_t)v8);
      v7[0] = (char *)v9[0] + 1;
      v7[1] = 8;
      v7[2] = v9[2];
      MEOWDemiSliceInfo::PhonemeSet::AddPhonemes(__s, v7);
      MEOWVectorBase::~MEOWVectorBase(v8);
      MEOWVectorBase::~MEOWVectorBase(v9);
    }
    MEOWSearchLatticeLookahead::DispatchCurrentSlice((uint64_t)this, __s);
  }
  *((_DWORD *)this + 135) = 6;
  result = *(__n128 *)a2;
  v5 = *((_OWORD *)a2 + 1);
  v6 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 699) = *(_OWORD *)((char *)a2 + 43);
  *((_OWORD *)this + 42) = v5;
  *((_OWORD *)this + 43) = v6;
  *((__n128 *)this + 41) = result;
  return result;
}

void sub_1D22B4E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeLookahead::DispatchCurrentSlice(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  switch(*(_DWORD *)(a1 + 540))
  {
    case 1:
      MEOWSearchLatticeImpl::AddDiphoneSlice(a1, (unsigned __int8 *)(a1 + 544), a2);
      break;
    case 2:
      MEOWSearchLatticeImpl::AddBreathDiphoneSlice(a1, (unsigned __int8 *)(a1 + 544));
      break;
    case 3:
      MEOWSearchLatticeImpl::AddDemiSlice(a1, a1 + 584, a2);
      break;
    case 4:
      MEOWSearchLatticeImpl::AddBreathDemiSlice(a1, (__int128 *)(a1 + 584));
      break;
    case 5:
      MEOWSearchLatticeImpl::AddAnchorSlice(a1, (unsigned int *)(a1 + 648));
      break;
    case 6:
      MEOWSearchLatticeImpl::AddWordSlice(a1, (const char **)(a1 + 656), a2);
      break;
    default:
      fwrite("What am I doing here?\n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      MTBEAbort(*(MTFESpeechElement **)(a1 + 16));
      break;
  }
  if (*(_QWORD *)(a1 + 736))
  {
    v3 = *(uint64_t **)(a1 + 720);
    do
    {
      v4 = *v3++;
      MEOWSearchLatticeImpl::Veto(a1, v4);
    }
    while (v3 != (uint64_t *)(*(_QWORD *)(a1 + 720) + 8 * *(_QWORD *)(a1 + 736)));
  }
  MEOWVectorBase::clear((void **)(a1 + 720));
  v5 = *(_QWORD *)(a1 + 752);
  if (v5 != 0xFFFFFFFF)
  {
    MEOWSearchLatticeImpl::Force(a1, v5);
    *(_QWORD *)(a1 + 752) = 0xFFFFFFFFLL;
  }
  v6 = *(_QWORD *)(a1 + 760);
  if (v6 != 0xFFFFFFFF)
  {
    MEOWSearchLatticeImpl::Override(a1, v6);
    *(_QWORD *)(a1 + 760) = 0xFFFFFFFFLL;
  }
}

__n128 MEOWSearchLatticeLookahead::AddDiphoneSlice(__n128 *this, __n128 *a2)
{
  unsigned __int8 v4;
  __n128 result;
  __n128 v6;
  unsigned __int8 v7[64];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (this[33].n128_u32[3])
  {
    v4 = a2->n128_u8[1];
    v7[0] = 1;
    v7[1] = v4;
    MEOWSearchLatticeLookahead::DispatchCurrentSlice((uint64_t)this, v7);
  }
  this[33].n128_u32[3] = 1;
  result = *a2;
  v6 = a2[1];
  this[36].n128_u16[0] = a2[2].n128_u16[0];
  this[34] = result;
  this[35] = v6;
  return result;
}

__n128 MEOWSearchLatticeLookahead::AddBreathDiphoneSlice(__n128 *this, __n128 *a2)
{
  unsigned __int8 v4;
  __n128 result;
  __n128 v6;
  unsigned __int8 v7[64];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (this[33].n128_u32[3])
  {
    v4 = a2->n128_u8[1];
    v7[0] = 1;
    v7[1] = v4;
    MEOWSearchLatticeLookahead::DispatchCurrentSlice((uint64_t)this, v7);
  }
  this[33].n128_u32[3] = 2;
  result = *a2;
  v6 = a2[1];
  this[36].n128_u16[0] = a2[2].n128_u16[0];
  this[34] = result;
  this[35] = v6;
  return result;
}

__n128 MEOWSearchLatticeLookahead::AddDemiSlice(MEOWSearchLatticeLookahead *this, const MEOWDemiSliceInfo *a2)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  _QWORD v8[3];
  unsigned __int8 __s[64];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 135))
  {
    __s[0] = 0;
    v4 = *((_QWORD *)a2 + 5);
    v8[0] = *((_QWORD *)a2 + 6) + 1;
    v8[1] = 144;
    v8[2] = v4;
    MEOWDemiSliceInfo::PhonemeSet::AddPhonemes(__s, v8);
    MEOWSearchLatticeLookahead::DispatchCurrentSlice((uint64_t)this, __s);
  }
  *((_DWORD *)this + 135) = 3;
  result = *(__n128 *)a2;
  v6 = *((_OWORD *)a2 + 1);
  v7 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 625) = *(_OWORD *)((char *)a2 + 41);
  *(_OWORD *)((char *)this + 600) = v6;
  *(_OWORD *)((char *)this + 616) = v7;
  *(__n128 *)((char *)this + 584) = result;
  return result;
}

__n128 MEOWSearchLatticeLookahead::AddBreathDemiSlice(MEOWSearchLatticeLookahead *this, const MEOWDemiSliceInfo *a2)
{
  __n128 result;
  __int128 v5;
  __int128 v6;
  unsigned __int8 v7[64];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 135))
  {
    v7[0] = 0;
    MEOWSearchLatticeLookahead::DispatchCurrentSlice((uint64_t)this, v7);
  }
  *((_DWORD *)this + 135) = 4;
  result = *(__n128 *)a2;
  v5 = *((_OWORD *)a2 + 1);
  v6 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 625) = *(_OWORD *)((char *)a2 + 41);
  *(_OWORD *)((char *)this + 600) = v5;
  *(_OWORD *)((char *)this + 616) = v6;
  *(__n128 *)((char *)this + 584) = result;
  return result;
}

void MEOWSearchLatticeLookahead::AddAnchorSlice(MEOWSearchLatticeLookahead *this, const MEOWAnchorSliceInfo *a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5[64];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 135))
  {
    v4 = *((_BYTE *)a2 + 1);
    v5[0] = 1;
    v5[1] = v4;
    MEOWSearchLatticeLookahead::DispatchCurrentSlice((uint64_t)this, v5);
  }
  *((_DWORD *)this + 135) = 5;
  *((_DWORD *)this + 162) = *(_DWORD *)a2;
}

uint64_t MEOWSearchLatticeLookahead::AddSilenceSlice(MEOWSearchLatticeLookahead *this)
{
  __int16 v3[32];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 135))
  {
    v3[0] = 1;
    MEOWSearchLatticeLookahead::DispatchCurrentSlice((uint64_t)this, (unsigned __int8 *)v3);
  }
  *((_DWORD *)this + 135) = 0;
  LOBYTE(v3[0]) = 0;
  return MEOWSearchLatticeImpl::AddSilenceSlice((uint64_t)this);
}

uint64_t MEOWSearchLatticeLookahead::Force(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 752) = a2;
  return this;
}

uint64_t MEOWSearchLatticeLookahead::Override(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 760) = a2;
  return this;
}

_QWORD *MEOWSearchLatticeLookahead::Veto(MEOWSearchLatticeLookahead *this, uint64_t a2)
{
  _QWORD *result;

  result = MEOWVectorBase::Append((_QWORD *)this + 90);
  *(_QWORD *)(*((_QWORD *)this + 90) + 8 * *((_QWORD *)this + 92) - 8) = a2;
  return result;
}

uint64_t MEOWSearchLatticeLookahead::BestPath(MEOWSearchLatticeLookahead *this)
{
  unsigned __int8 v3[64];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 135))
  {
    v3[0] = 0;
    MEOWSearchLatticeLookahead::DispatchCurrentSlice((uint64_t)this, v3);
    *((_DWORD *)this + 135) = 0;
  }
  return MEOWSearchLatticeImpl::BestPath(this);
}

uint64_t MEOWSearchLatticeLookahead::size(MEOWSearchLatticeLookahead *this)
{
  uint64_t result;

  result = MEOWSearchLatticeImpl::size(this);
  if (*((_DWORD *)this + 135))
    ++result;
  return result;
}

void MEOWSearchLatticeLookahead::clear(MEOWSearchLatticeLookahead *this)
{
  *((_DWORD *)this + 135) = 0;
  MEOWVectorBase::clear((void **)this + 90);
  *((_QWORD *)this + 94) = 0xFFFFFFFFLL;
  MEOWSearchLatticeImpl::clear((void **)this);
}

void MEOWSearchLatticeLookahead::~MEOWSearchLatticeLookahead(void **this)
{
  *this = &off_1E9369768;
  MEOWVectorBase::~MEOWVectorBase(this + 90);
  MEOWSearchLatticeImpl::~MEOWSearchLatticeImpl((MEOWSearchLatticeImpl *)this);
}

{
  *this = &off_1E9369768;
  MEOWVectorBase::~MEOWVectorBase(this + 90);
  MEOWSearchLatticeImpl::~MEOWSearchLatticeImpl((MEOWSearchLatticeImpl *)this);
  JUMPOUT(0x1D8233BA8);
}

const __CFDictionary *GetCoeffValue(const __CFDictionary *a1, const __CFString *a2)
{
  const __CFDictionary *result;
  const __CFDictionary *v3;
  CFTypeID v4;

  result = (const __CFDictionary *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    v3 = result;
    v4 = CFGetTypeID(result);
    if (v4 == CFNumberGetTypeID())
    {
      return v3;
    }
    else if (v4 == CFDictionaryGetTypeID())
    {
      result = (const __CFDictionary *)CFDictionaryGetValue(v3, CFSTR("Value"));
      if (!result)
        return (const __CFDictionary *)CFDictionaryGetValue(v3, CFSTR("Default"));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t SetFloatCoeff(const __CFDictionary *a1, const __CFString *a2, float *a3)
{
  const __CFDictionary *CoeffValue;
  uint64_t result;
  float v7;
  FILE *v8;
  const char *CStringPtr;
  double valuePtr;

  CoeffValue = GetCoeffValue(a1, a2);
  valuePtr = 0.0;
  if (CoeffValue && (result = CFNumberGetValue(CoeffValue, kCFNumberDoubleType, &valuePtr), (_DWORD)result))
  {
    v7 = valuePtr;
    *a3 = v7;
  }
  else
  {
    v8 = (FILE *)*MEMORY[0x1E0C80C10];
    CStringPtr = CFStringGetCStringPtr(a2, 0);
    return fprintf(v8, "Cannot read real number %s from plist.\n", CStringPtr);
  }
  return result;
}

uint64_t SetIntCoeff(const __CFDictionary *a1, const __CFString *a2, int *a3)
{
  const __CFDictionary *CoeffValue;
  uint64_t result;
  FILE *v7;
  const char *CStringPtr;
  int valuePtr;

  CoeffValue = GetCoeffValue(a1, a2);
  valuePtr = 0;
  if (CoeffValue && (result = CFNumberGetValue(CoeffValue, kCFNumberIntType, &valuePtr), (_DWORD)result))
  {
    *a3 = valuePtr;
  }
  else
  {
    v7 = (FILE *)*MEMORY[0x1E0C80C10];
    CStringPtr = CFStringGetCStringPtr(a2, 0);
    return fprintf(v7, "Cannot read integer %s from plist.\n", CStringPtr);
  }
  return result;
}

void MTFELogVisitor::MTFELogVisitor(MTFELogVisitor *this)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E9369828;
}

{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E9369828;
}

void MTFELogVisitor::~MTFELogVisitor(MTFELogVisitor *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E9369828;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E9369828;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E9369828;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void MTFELogVisitor::VisitSentence(MTFELogVisitor *this, MTFESentence *a2)
{
  uint64_t v3;
  SentenceLog *v4;

  v3 = *((_QWORD *)this + 1);
  if (v3)
    (*(void (**)(uint64_t, MTFESentence *))(*(_QWORD *)v3 + 8))(v3, a2);
  v4 = (SentenceLog *)operator new();
  SentenceLog::SentenceLog(v4);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 2) = v4;
}

void sub_1D22B57B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C401FA53C8BLL);
  _Unwind_Resume(a1);
}

void SpeechElementLog::SpeechElementLog(SpeechElementLog *this)
{
  *((_QWORD *)this + 2) = (char *)this + 8;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &unk_1E93698B0;
  *((_QWORD *)this + 1) = (char *)this + 8;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = &unk_1E93698E0;
  *((_QWORD *)this + 6) = &unk_1E9369900;
  *((_QWORD *)this + 7) = &unk_1E9369928;
}

void SentenceLog::SentenceLog(SentenceLog *this)
{
  *((_QWORD *)this + 2) = (char *)this + 8;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1E9369950;
  *((_QWORD *)this + 1) = (char *)this + 8;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = &unk_1E9369988;
  *((_QWORD *)this + 6) = &unk_1E93699A8;
  *((_QWORD *)this + 7) = &unk_1E93699D0;
}

{
  *((_QWORD *)this + 2) = (char *)this + 8;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1E9369950;
  *((_QWORD *)this + 1) = (char *)this + 8;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = &unk_1E9369988;
  *((_QWORD *)this + 6) = &unk_1E93699A8;
  *((_QWORD *)this + 7) = &unk_1E93699D0;
}

_QWORD *SentenceLog::NonRecursiveClone(SentenceLog *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[2] = result + 1;
  result[3] = 0;
  *result = &off_1E9369950;
  result[1] = result + 1;
  result[4] = 0;
  result[5] = &unk_1E9369988;
  result[6] = &unk_1E93699A8;
  result[7] = &unk_1E93699D0;
  return result;
}

void SentenceLog::~SentenceLog(SentenceLog *this)
{
  MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement(this);
  JUMPOUT(0x1D8233BA8);
}

uint64_t MiniToolbox::CompositeElement<SpeechElementLog,MiniToolbox::CompositeElementNonComparable,MiniToolbox::Clonable,std::list>::Clone(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v3 = a1 + 1;
  v4 = a1[2];
  if ((_QWORD *)v4 != a1 + 1)
  {
    do
    {
      v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 16) + 16))(*(_QWORD *)(v4 + 16));
      *(_QWORD *)(v5 + 32) = v2;
      v6 = operator new(0x18uLL);
      v6[2] = v5;
      v7 = *(_QWORD *)(v2 + 8);
      *v6 = v7;
      v6[1] = v2 + 8;
      *(_QWORD *)(v7 + 8) = v6;
      *(_QWORD *)(v2 + 8) = v6;
      ++*(_QWORD *)(v2 + 24);
      v4 = *(_QWORD *)(v4 + 8);
    }
    while ((_QWORD *)v4 != v3);
  }
  return v2;
}

uint64_t (***SentenceLog::Accept(uint64_t a1, void *lpsrc))(void *, uint64_t)
{
  uint64_t (***result)(void *, uint64_t);

  if (result)
    return (uint64_t (***)(void *, uint64_t))(**result)(result, a1);
  return result;
}

void `non-virtual thunk to'SentenceLog::~SentenceLog(SentenceLog *this)
{
  MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((_QWORD *)this - 5);
}

{
  MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((_QWORD *)this - 5);
  JUMPOUT(0x1D8233BA8);
}

{
  MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((_QWORD *)this - 6);
}

{
  MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((_QWORD *)this - 6);
  JUMPOUT(0x1D8233BA8);
}

{
  MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((_QWORD *)this - 7);
}

{
  MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((_QWORD *)this - 7);
  JUMPOUT(0x1D8233BA8);
}

uint64_t `non-virtual thunk to'MiniToolbox::CompositeElement<SpeechElementLog,MiniToolbox::CompositeElementNonComparable,MiniToolbox::Clonable,std::list>::Clone(uint64_t a1)
{
  return MiniToolbox::CompositeElement<SpeechElementLog,MiniToolbox::CompositeElementNonComparable,MiniToolbox::Clonable,std::list>::Clone((_QWORD *)(a1 - 48));
}

uint64_t (***`non-virtual thunk to'SentenceLog::Accept(uint64_t a1, void *lpsrc))(void *, uint64_t)
{
  uint64_t (***result)(void *, uint64_t);

  if (result)
    return (uint64_t (***)(void *, uint64_t))(**result)(result, a1 - 56);
  return result;
}

void MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement(_QWORD *a1)
{
  MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement(a1);
  JUMPOUT(0x1D8233BA8);
}

_QWORD *MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement(_QWORD *a1)
{
  *a1 = &unk_1E9369AE8;
  MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::DeleteAllChildren((uint64_t)a1);
  std::__list_imp<SpeechChannelManager *>::clear(a1 + 1);
  return a1;
}

_QWORD *MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::DeleteAllChildren(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *i;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  for (i = *(_QWORD **)(a1 + 16); i != v1; i = (_QWORD *)i[1])
  {
    v3 = i[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return std::__list_imp<SpeechChannelManager *>::clear(v1);
}

MTFESpeechElement *MTFEPlaceBoundaries::VisitIntonationalPhrase(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *v3;

  if (!BYTE4(a2[2].var6) && !a2[3].var6)
  {
    v3 = this;
    this->var6 = 0;
    *(_OWORD *)&this->var4 = 0u;
    *(_OWORD *)&this->var1 = 0u;
    LOBYTE(this[1].var5) = 1;
    MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
    LOBYTE(v3[1].var5) = 0;
    *(_OWORD *)&v3->var1 = 0u;
    *(_OWORD *)&v3->var4 = 0u;
    v3->var6 = 0;
    return MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)v3);
  }
  return this;
}

MTFESpeechElement *MTFEPlaceBoundaries::VisitIntermediatePhrase(MTFEPlaceBoundaries *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *v2;
  MTFESpeechElement *result;
  BOOL v5;

  v2 = a2;
  *((_QWORD *)this + 13) = a2;
  do
  {
    *((_BYTE *)this + 89) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 10) = 0;
    result = MTFESpeechElement::VisitChildren(v2, this);
    v5 = v2 == *((MTFESpeechElement **)this + 13);
    v2 = (MTFESpeechElement *)*((_QWORD *)this + 13);
  }
  while (!v5);
  return result;
}

void MTFEPlaceBoundaries::VisitWord(MTFEPlaceBoundaries *this, MTFEWord *a2)
{
  MTFESpeechElement *v4;
  MTFESpeechElement *Word;
  int var12;
  uint64_t var15;
  int v8;
  int v9;
  char v10;
  int v11;
  _BOOL4 v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char v17;
  MTFESpeechElement *v18;
  uint64_t v19;
  MTFESpeechElement *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  _BOOL4 v33;
  int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  FILE *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  int *v46;
  float *v47;
  float v48;
  float v49;
  float v50;
  int *v51;
  float *v52;
  float v53;
  float v54;
  float v55;
  int *v56;
  float *v57;
  float v58;
  float v59;
  float v60;
  int *v61;
  float v62;
  float v63;
  int *v64;
  float v65;
  float v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  FILE *v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  int *v80;
  float *v81;
  float v82;
  float v83;
  float v84;
  int *v85;
  float *v86;
  float v87;
  float v88;
  float v89;
  int *v90;
  float *v91;
  float v92;
  float v93;
  float v94;
  int *v95;
  float v96;
  float v97;
  int *v98;
  float v99;
  float v100;
  float *v101;
  uint64_t v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  unsigned __int8 v106;
  unsigned __int8 v107;
  unsigned __int8 v108;
  unsigned __int8 v109;
  unsigned __int8 v110;
  MTFEWord *v111;
  MTFEWord *v112;
  MTFEWord *v113;

  MTFECommands::Visit((uint64_t)&a2->var18, (uint64_t)this);
  if (a2->var12 == 60)
  {
    v4 = 0;
    v113 = 0;
LABEL_4:
    Word = MTFEWord::NextWord(a2);
    goto LABEL_5;
  }
  v4 = MTFEWord::PrevWord(a2);
  Word = 0;
  var12 = a2->var12;
  v113 = 0;
  if (var12 != 62)
    goto LABEL_4;
LABEL_5:
  v111 = 0;
  v112 = 0;
  var15 = a2->var15;
  v110 = -1;
  v109 = -1;
  v108 = -1;
  v107 = -1;
  v106 = -1;
  if (v4)
  {
    MTFEWord::POSForPrev((MTFEWord *)v4, &v110, 0, &v113);
    if (v113)
      MTFEWord::POSForPrev(v113, &v109, 0, 0);
  }
  if (Word)
    MTFEWord::POSForNext((MTFEWord *)Word, &v108, 0, &v112);
  if (v112)
    MTFEWord::POSForNext(v112, &v107, 0, &v111);
  if (v111)
    MTFEWord::POSForNext(v111, &v106, 0, 0);
  v8 = 1 << var15;
  v9 = v110;
  if (v110 == 255)
    v10 = 0;
  else
    v10 = 1 << v110;
  if (v4 && (v8 & 0x41) != 0)
  {
    if ((v10 & 0x41) != 0)
    {
LABEL_25:
      v11 = 1;
      goto LABEL_26;
    }
    if ((v8 & 0x413E) == 0)
      goto LABEL_31;
  }
  else if (!v4 || (v8 & 0x413E) == 0)
  {
    goto LABEL_31;
  }
  if (v110 == 14)
    goto LABEL_25;
LABEL_31:
  v11 = 0;
  if (!v4 || (_DWORD)var15 != 5)
  {
LABEL_26:
    if ((_DWORD)var15 == 11 && strchr(a2->var27, 39))
    {
      if (a2->var11)
      {
        if (!Word)
          goto LABEL_39;
      }
      else
      {
        a2->var11 = 2;
        if (!Word)
          goto LABEL_39;
      }
      if (!HIBYTE(Word[1].var0))
      {
        HIBYTE(Word[1].var0) = 2;
        if ((v11 & 1) == 0)
          goto LABEL_40;
        goto LABEL_34;
      }
    }
LABEL_39:
    if (!v11)
      goto LABEL_40;
LABEL_34:
    if (*((_BYTE *)this + 88))
    {
      v12 = 1;
    }
    else
    {
      v13 = *((_QWORD *)this + 10) + 1;
      *((_QWORD *)this + 10) = v13;
      v12 = v13 < 0xA;
    }
    goto LABEL_41;
  }
  if ((v10 & 0x30) != 0)
    goto LABEL_34;
LABEL_40:
  v12 = 0;
  *((_QWORD *)this + 10) = 0;
LABEL_41:
  if (*((_BYTE *)this + 89))
  {
    if (Word)
    {
      v14 = *((_QWORD *)this + 1);
      if (v14 >= 2
        && ((v12 | (((uint64_t)Word[1].var0 & 0x40) >> 6)) & 1) == 0
        && ((a2->var8 & 0x40) == 0 || a2->var6)
        && (!v4 || HIBYTE(v4[1].var0) <= 2u)
        && a2->var11 - 1 >= 2)
      {
        if ((v10 & 0x3E) != 0)
        {
          if ((SLWordTagSet::find(&a2->var17) & 1) != 0)
            goto LABEL_63;
          v14 = *((_QWORD *)this + 1);
          v9 = v110;
        }
        *((_QWORD *)this + 6) = *((_QWORD *)this + 2);
        *((_QWORD *)this + 7) = v14;
        *((_OWORD *)this + 4) = *((_OWORD *)this + 2);
        *((_QWORD *)this + 12) = a2;
        if (*((_BYTE *)this + 88))
          v15 = v9 == 14;
        else
          v15 = 0;
        v17 = v15 && (_DWORD)var15 == 4;
        *((_BYTE *)this + 90) = v17;
      }
    }
  }
LABEL_63:
  if ((a2->var8 & 0x40) == 0)
  {
    if (!*((_QWORD *)this + 4))
    {
      *((_QWORD *)this + 4) = 1;
      v18 = (MTFESpeechElement *)a2;
      do
      {
        if (((uint64_t)v18[1].var0 & 0x40) != 0)
          break;
        ++*((_QWORD *)this + 4);
        v18 = MTFEWord::NextWord((MTFEWord *)v18);
      }
      while (v18);
    }
    v19 = *((_QWORD *)this + 5);
    if (!v19)
    {
      v19 = 1;
      *((_QWORD *)this + 5) = 1;
      if (a2)
      {
        v20 = (MTFESpeechElement *)a2;
        do
        {
          if (((uint64_t)v20[1].var0 & 0x40) != 0 && BYTE6(v20[1].var4) == 31)
            break;
          ++*((_QWORD *)this + 5);
          v20 = MTFEWord::NextWord((MTFEWord *)v20);
        }
        while (v20);
        v19 = *((_QWORD *)this + 5);
      }
    }
    *(int64x2_t *)((char *)this + 8) = vaddq_s64(*(int64x2_t *)((char *)this + 8), vdupq_n_s64(1uLL));
    *(int64x2_t *)((char *)this + 24) = vaddq_s64(*(int64x2_t *)((char *)this + 24), (int64x2_t)xmmword_1D22CF6F0);
    *((_QWORD *)this + 5) = v19 - 1;
    if ((_DWORD)var15 == 255)
    {
      v21 = 0xBu;
      if (!v4)
        goto LABEL_87;
    }
    else
    {
      v21 = MTFEPlaceBoundaries::sPos2Class[var15];
      if (!v4)
        goto LABEL_87;
    }
    if (((uint64_t)v4[1].var0 & 0x40) == 0)
    {
      if (v110 == 255)
        v22 = 0xBu;
      else
        v22 = MTFEPlaceBoundaries::sPos2Class[v110];
LABEL_88:
      if (!v113 || (v113->var8 & 0x40) != 0)
      {
        v23 = 0xCu;
        if (!Word)
          goto LABEL_101;
      }
      else if (v109 == 255)
      {
        v23 = 0xBu;
        if (!Word)
          goto LABEL_101;
      }
      else
      {
        v23 = MTFEPlaceBoundaries::sPos2Class[v109];
        if (!Word)
          goto LABEL_101;
      }
      if (((uint64_t)Word[1].var0 & 0x40) == 0)
      {
        if (v108 == 255)
          v24 = 0xBu;
        else
          v24 = MTFEPlaceBoundaries::sPos2Class[v108];
LABEL_102:
        if (!v112 || (v112->var8 & 0x40) != 0)
        {
          v25 = 0xCu;
        }
        else if (v107 == 255)
        {
          v25 = 0xBu;
        }
        else
        {
          v25 = MTFEPlaceBoundaries::sPos2Class[v107];
        }
        if (!v111 || (v111->var8 & 0x40) != 0)
        {
          v26 = 0xCu;
        }
        else if (v106 == 255)
        {
          v26 = 0xBu;
        }
        else
        {
          v26 = MTFEPlaceBoundaries::sPos2Class[v106];
        }
        v27 = MTFEPlaceBoundaries::sC2CD[v21];
        v28 = MTFEPlaceBoundaries::sC2CC[v21];
        v29 = MTFEPlaceBoundaries::sC2CP[v21];
        v103 = MTFEPlaceBoundaries::sC2L2[v23];
        v30 = MTFEPlaceBoundaries::sC2LR[v22];
        v31 = MTFEPlaceBoundaries::sC2LR[v24];
        v104 = MTFEPlaceBoundaries::sC2LR[v25];
        v105 = MTFEPlaceBoundaries::sC2LR[v26];
        v102 = MTFEPlaceBoundaries::sC2RD[v24];
        if (Word && v108 == 7)
        {
          v32 = 0;
          v33 = strcmp((const char *)&Word[3].var5, "OF") == 0;
        }
        else
        {
          v33 = 0;
          v32 = 0;
          if (Word && v108 == 15)
          {
            v33 = 0;
            v32 = strcmp((const char *)&Word[3].var5, "TO") == 0;
          }
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "\nBnd after %s\n", a2->var27);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          fwrite("Bnd", 3uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          fprintf((FILE *)*MEMORY[0x1E0C80C10], " %s=%d", "l2", v103);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          fprintf((FILE *)*MEMORY[0x1E0C80C10], " %s=%d", "lp", v30);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          fprintf((FILE *)*MEMORY[0x1E0C80C10], " %s=%d", "cd", v27);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          fprintf((FILE *)*MEMORY[0x1E0C80C10], " %s=%d", "cc", v28);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          fprintf((FILE *)*MEMORY[0x1E0C80C10], " %s=%d", "cp", v29);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          fprintf((FILE *)*MEMORY[0x1E0C80C10], " %s=%d", "rd", v102);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          fprintf((FILE *)*MEMORY[0x1E0C80C10], " %s=%d", "rp", v31);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          fprintf((FILE *)*MEMORY[0x1E0C80C10], " %s=%d", "r2", v104);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          fprintf((FILE *)*MEMORY[0x1E0C80C10], " %s=%d", "r3", v105);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          fprintf((FILE *)*MEMORY[0x1E0C80C10], " %s=%d", "fFromStart", *((_QWORD *)this + 2));
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          fprintf((FILE *)*MEMORY[0x1E0C80C10], " %s=%d", "fFromLastSIL", *((_QWORD *)this + 1));
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          fprintf((FILE *)*MEMORY[0x1E0C80C10], " %s=%d", "fFromLastBnd", *((_QWORD *)this + 3));
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          fprintf((FILE *)*MEMORY[0x1E0C80C10], " %s=%d", "fToNextSIL", *((_QWORD *)this + 4));
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          fprintf((FILE *)*MEMORY[0x1E0C80C10], " %s=%d", "fToNextPunct", *((_QWORD *)this + 5));
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          fprintf((FILE *)*MEMORY[0x1E0C80C10], " %s=%d", "genitiveContext", v33);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          fprintf((FILE *)*MEMORY[0x1E0C80C10], " %s=%d", "infinitiveContext", v32);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          fputc(10, (FILE *)*MEMORY[0x1E0C80C10]);
        v34 = *((unsigned __int8 *)this + 89);
        if (*((_BYTE *)this + 88))
        {
          v35 = (float)*((int *)this + 2);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd %7.3f [%s]\n", 1.0644, "sSilCoeffs.fIntercept");
          v36 = 1.0;
          if (!v34)
            v36 = v35;
          v37 = floorf(logf(v36) / 0.47);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd %7.3f [%s]\n", (float)(v37 * 0.25655), "sSilCoeffs.fFromLastSilWrds*XFormWordCount(fromLastSIL)");
          v38 = (float)(0.0 + 1.0644) + (float)(0.25655 * v37);
          v39 = floorf(logf((float)*((unint64_t *)this + 5)) / 0.47);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          {
            v40 = (FILE *)*MEMORY[0x1E0C80C10];
            v41 = logf((float)*((unint64_t *)this + 5));
            fprintf(v40, "Bnd %7.3f [%s]\n", (float)(-0.14236 * floorf(v41 / 0.47)), "sSilCoeffs.fFromEndPunctWrds*XFormWordCount(fToNextPunct)");
          }
          v42 = (float)v33;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd %7.3f [%s]\n", (float)(-0.64336 * v42), "sSilCoeffs.fGenitiveContextBit*genitiveContext");
          v43 = (float)(v38 + (float)(-0.14236 * v39)) + (float)(-0.64336 * v42);
          v44 = (float)v32;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd %7.3f [%s]\n", (float)(-0.47091 * v44), "sSilCoeffs.fInfinitiveContextBit*infinitiveContext");
          v45 = v43 + (float)(-0.47091 * v44);
          v46 = &MTFEPlaceBoundaries::sSilCoeffs[3 * v27 + v31];
          v48 = *((float *)v46 + 5);
          v47 = (float *)(v46 + 5);
          v49 = v48;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd %7.3f [%s]\n", *v47, "sSilCoeffs.fCurDet_RightPos[cd][rp]");
          v50 = v45 + v49;
          v51 = &MTFEPlaceBoundaries::sSilCoeffs[11 * v28 + v102];
          v53 = *((float *)v51 + 26);
          v52 = (float *)(v51 + 26);
          v54 = v53;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd %7.3f [%s]\n", *v52, "sSilCoeffs.fCurCrs_RightDet[cc][rd]");
          v55 = v50 + v54;
          v56 = &MTFEPlaceBoundaries::sSilCoeffs[6 * v103 + 2 * v30 + v29];
          v58 = *((float *)v56 + 59);
          v57 = (float *)(v56 + 59);
          v59 = v58;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd %7.3f [%s]\n", *v57, "sSilCoeffs.fLeft2Pos_LeftPos_CurPos[l2][lp][cp]");
          v60 = v55 + v59;
          v61 = &MTFEPlaceBoundaries::sSilCoeffs[6 * v30 + 3 * v29 + v31];
          v62 = *((float *)v61 + 71);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd %7.3f [%s]\n", *((float *)v61 + 71), "sSilCoeffs.fLeftPos_CurPos_RightPos[lp][cp][rp]");
          v63 = v60 + v62;
          v64 = &MTFEPlaceBoundaries::sSilCoeffs[27 * v28 + 9 * v31 + 3 * v104 + v105];
          v65 = *((float *)v64 + 89);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd %7.3f [%s]\n", *((float *)v64 + 89), "sSilCoeffs.fCurCrs_RightPos_Right2Pos_Right3Pos[cc][rp][r2][r3]");
          v66 = v63 + v65;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd=%7.3f\n", v66);
          if (kMTFESilThreshold)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTFESilThreshold, (const __CFString *)&dword_1EFC76ED0, v67, *(float *)&dword_1EFC76ED0);
            kMTFESilThreshold = 0;
          }
          if (v66 <= *(float *)&dword_1EFC76ED0)
          {
            if (!*((_BYTE *)this + 89))
              return;
            v68 = 50.0;
LABEL_216:
            MTFEPlaceBoundaries::InsertBreak(this, v68);
            return;
          }
        }
        else
        {
          v69 = (float)*((int *)this + 6);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd %7.3f [%s]\n", 1.5773, "sPhrCoeffs.fIntercept");
          v70 = 1.0;
          if (!v34)
            v70 = v69;
          v71 = floorf(logf(v70) / 0.47);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd %7.3f [%s]\n", (float)(v71 * 0.22623), "sPhrCoeffs.fFromLastBndWrds*XFormWordCount(fromLastBnd)");
          v72 = (float)(0.0 + 1.5773) + (float)(0.22623 * v71);
          v73 = floorf(logf((float)*((unint64_t *)this + 4)) / 0.47);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          {
            v74 = (FILE *)*MEMORY[0x1E0C80C10];
            v75 = logf((float)*((unint64_t *)this + 4));
            fprintf(v74, "Bnd %7.3f [%s]\n", (float)(-0.0552 * floorf(v75 / 0.47)), "sPhrCoeffs.fFromEndSilWrds*XFormWordCount(fToNextSIL)");
          }
          v76 = (float)v33;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd %7.3f [%s]\n", (float)(-0.24608 * v76), "sPhrCoeffs.fGenitiveContextBit*genitiveContext");
          v77 = (float)(v72 + (float)(-0.0552 * v73)) + (float)(-0.24608 * v76);
          v78 = (float)v32;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd %7.3f [%s]\n", (float)(-0.01337 * v78), "sPhrCoeffs.fInfinitiveContextBit*infinitiveContext");
          v79 = v77 + (float)(-0.01337 * v78);
          v80 = &MTFEPlaceBoundaries::sPhrCoeffs[3 * v27 + v31];
          v82 = *((float *)v80 + 5);
          v81 = (float *)(v80 + 5);
          v83 = v82;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd %7.3f [%s]\n", *v81, "sPhrCoeffs.fCurDet_RightPos[cd][rp]");
          v84 = v79 + v83;
          v85 = &MTFEPlaceBoundaries::sPhrCoeffs[11 * v28 + v102];
          v87 = *((float *)v85 + 26);
          v86 = (float *)(v85 + 26);
          v88 = v87;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd %7.3f [%s]\n", *v86, "sPhrCoeffs.fCurCrs_RightDet[cc][rd]");
          v89 = v84 + v88;
          v90 = &MTFEPlaceBoundaries::sPhrCoeffs[6 * v103 + 2 * v30 + v29];
          v92 = *((float *)v90 + 59);
          v91 = (float *)(v90 + 59);
          v93 = v92;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd %7.3f [%s]\n", *v91, "sPhrCoeffs.fLeft2Pos_LeftPos_CurPos[l2][lp][cp]");
          v94 = v89 + v93;
          v95 = &MTFEPlaceBoundaries::sPhrCoeffs[6 * v30 + 3 * v29 + v31];
          v96 = *((float *)v95 + 71);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd %7.3f [%s]\n", *((float *)v95 + 71), "sPhrCoeffs.fLeftPos_CurPos_RightPos[lp][cp][rp]");
          v97 = v94 + v96;
          v98 = &MTFEPlaceBoundaries::sPhrCoeffs[27 * v28 + 9 * v31 + 3 * v104 + v105];
          v99 = *((float *)v98 + 89);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd %7.3f [%s]\n", *((float *)v98 + 89), "sPhrCoeffs.fCurCrs_RightPos_Right2Pos_Right3Pos[cc][rp][r2][r3]");
          v100 = v97 + v99;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bnd=%7.3f\n", v100);
          if (kMTFEPhrThreshold)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTFEPhrThreshold, (const __CFString *)&dword_1EFC76EE0, v101, *(float *)&dword_1EFC76EE0);
            kMTFEPhrThreshold = 0;
          }
          if (v100 <= *(float *)&dword_1EFC76EE0)
          {
            if (!*((_BYTE *)this + 89))
              return;
            v68 = 0.0;
            goto LABEL_216;
          }
        }
        *((_BYTE *)this + 89) = 1;
        return;
      }
LABEL_101:
      v24 = 0xCu;
      goto LABEL_102;
    }
LABEL_87:
    v22 = 0xCu;
    goto LABEL_88;
  }
  if (Word && *((_BYTE *)this + 89))
    MTFEPlaceBoundaries::InsertBreak(this, 0.0);
  *((_BYTE *)this + 89) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 4) = 0;
  if ((_DWORD)var15 == 31)
    *((_QWORD *)this + 5) = 0;
}

uint64_t MTFEPlaceBoundaries::InsertBreak(MTFEPlaceBoundaries *this, float a2)
{
  uint64_t v4;
  uint64_t result;
  MTFEIntermediatePhrase *v6;
  MTFEWord *v7;
  MTFEPhoneme *v8;

  v4 = *((_QWORD *)this + 12);
  result = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries);
  if (v4)
  {
    if ((_DWORD)result)
    if (a2 != 0.0 && *((_BYTE *)this + 90))
      *(_BYTE *)(*((_QWORD *)this + 13) + 81) = 3;
    v6 = (MTFEIntermediatePhrase *)operator new();
    MTFEIntermediatePhrase::MTFEIntermediatePhrase(v6);
    MTFESpeechElement::AddChildAfter(*(MTFESpeechElement **)(*((_QWORD *)this + 13) + 32), (MTFESpeechElement *)v6, *((MTFESpeechElement **)this + 13));
    result = (uint64_t)MTFESpeechElement::SplitChildren(*((MTFESpeechElement **)this + 13), *((MTFESpeechElement **)this + 12), (MTFESpeechElement *)v6);
    *((_QWORD *)this + 13) = v6;
    if (a2 != 0.0)
    {
      v7 = (MTFEWord *)operator new();
      MTFEWord::MTFEWord(v7, 0, 0);
      v8 = (MTFEPhoneme *)operator new();
      MTFEPhoneme::MTFEPhoneme(v8, 0);
      v7->var22 = *(_WORD *)(*((_QWORD *)this + 12) + 178);
      v7->var8 |= 0x40u;
      MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v7, (MTFESpeechElement *)v8, v7->var4);
      result = (uint64_t)MTFESpeechElement::AddChildBefore(*((MTFESpeechElement **)this + 13), (MTFESpeechElement *)v7, *((MTFESpeechElement **)this + 12));
      v8->var15 = 0x8000;
      v8->var13 = a2;
    }
    *((_BYTE *)this + 89) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 2) = *((_QWORD *)this + 6);
    if (!*((_BYTE *)this + 88))
      *((_QWORD *)this + 1) = *((_QWORD *)this + 7);
    *((_OWORD *)this + 2) = *((_OWORD *)this + 4);
    *((_QWORD *)this + 10) = 0;
  }
  else
  {
    if ((_DWORD)result)
      result = fwrite("\nNo suitable location found for break.\n", 0x27uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    *((_BYTE *)this + 89) = 0;
  }
  return result;
}

void sub_1D22B7014(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

void MTFEPlaceBoundaries::~MTFEPlaceBoundaries(MTFEPlaceBoundaries *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void MEOWPPReader::MEOWPPReader(MEOWPPReader *this, MEOWReader *a2, int a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t v5;

  v4 = *(_DWORD *)(*((_QWORD *)a2 + 3808) + 12 * a3 + 4);
  v5 = *((_QWORD *)a2 + 3809) + (int)bswap32(*(_DWORD *)(*((_QWORD *)a2 + 3808) + 12 * a3 + 8)) + 8 * a4;
  *(_QWORD *)this = off_1E9369BB0;
  *((_QWORD *)this + 1) = v5;
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3810) + (int)bswap32(v4);
  *((_DWORD *)this + 4) = bswap32(*(_DWORD *)(v5 + 4));
  LOWORD(v4) = *(_BYTE *)v5 != 0;
  *((_BYTE *)this + 20) = *(_BYTE *)v5 == 0;
  *((_WORD *)this + 11) = (_WORD)v4 << 15;
}

uint64_t MEOWPPReader::SegmentEnd(MEOWPPReader *this)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 1);
  v2 = bswap32(*(unsigned __int16 *)(v1 + 10)) >> 16;
  v3 = v2 > bswap32(*(unsigned __int16 *)(v1 + 2)) >> 16;
  v4 = 1000000;
  if (v3)
    v4 = v2;
  return *((_QWORD *)this + 3) + v4;
}

uint64_t MEOWPPReader::FindSegment(MEOWPPReader *this, unint64_t a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned __int16 *v6;
  BOOL v7;
  int v8;
  BOOL v9;
  __int16 v10;
  char v11;

  v2 = 1000000;
  v3 = (unsigned __int16 *)*((_QWORD *)this + 1);
  v4 = bswap32(v3[5]) >> 16;
  v5 = *((_QWORD *)this + 3);
  if (v4 > bswap32(v3[1]) >> 16)
  {
    while (v5 + (unint64_t)(unsigned __int16)v4 <= a2)
    {
      v6 = v3 + 4;
      *((_QWORD *)this + 1) = v3 + 4;
      v4 = bswap32(v3[9]) >> 16;
      v7 = v4 > bswap32(v3[5]) >> 16;
      v3 += 4;
      if (!v7)
      {
        v3 = v6;
        goto LABEL_6;
      }
    }
    v2 = (unsigned __int16)v4;
  }
LABEL_6:
  v8 = *(unsigned __int8 *)v3;
  v9 = v8 == 0;
  v10 = v8 != 0;
  v11 = v9;
  *((_BYTE *)this + 20) = v11;
  *((_WORD *)this + 11) = v10 << 15;
  return v5 + v2;
}

void MEOWFlatPPReader::MEOWFlatPPReader(MEOWFlatPPReader *this, MEOWReader *a2, int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  unsigned int v7;
  uint64_t v8;

  v4 = *((_QWORD *)a2 + 3809) + (int)bswap32(*(_DWORD *)(*((_QWORD *)a2 + 3808) + 12 * a3 + 8)) + 8 * a4;
  v5 = *((_QWORD *)a2 + 3810) + (int)bswap32(*(_DWORD *)(*((_QWORD *)a2 + 3808) + 12 * a3 + 4));
  *((_DWORD *)this + 4) = bswap32(*(_DWORD *)(v4 + 4));
  v6 = *(_BYTE *)v4 != 0;
  *((_BYTE *)this + 20) = *(_BYTE *)v4 == 0;
  *((_WORD *)this + 11) = v6 << 15;
  *(_QWORD *)this = &off_1E9369C08;
  *((_QWORD *)this + 1) = v4;
  v7 = bswap32(*(unsigned __int16 *)(v4 + 2));
  *((_QWORD *)this + 3) = v5;
  *((_QWORD *)this + 4) = v5 + HIWORD(v7);
  v8 = bswap32(*(unsigned __int16 *)(v4 + 10)) >> 16;
  if (v8 <= HIWORD(v7))
    v8 = 1000000;
  *((_QWORD *)this + 5) = v5 + v8;
}

_QWORD *MEOWFlatPPReader::Skip(_QWORD *this, int a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  v2 = this[5];
  v3 = this[4] + 2 * a2;
  this[4] = v3;
  if (v3 >= v2)
  {
    v4 = this;
    this = (_QWORD *)MEOWPPReader::FindSegment((MEOWPPReader *)this, v3);
    v4[5] = this;
  }
  return this;
}

uint64_t MEOWFlatPPReader::Advance(uint64_t this, int a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int16 *v8;
  unsigned int v9;

  v3 = this;
  v4 = *(_QWORD *)(this + 32);
  if (a2 >= 1)
  {
    v5 = *(_DWORD *)(this + 16);
    v6 = 2 * (a2 - 1) + 2;
    v7 = a2 + 1;
    v8 = *(unsigned __int16 **)(this + 32);
    do
    {
      v9 = *v8++;
      v5 += bswap32(v9) >> 16;
      --v7;
    }
    while (v7 > 1);
    v4 += v6;
    *(_DWORD *)(this + 16) = v5;
  }
  *(_QWORD *)(this + 32) = v4;
  if (v4 >= *(_QWORD *)(this + 40))
  {
    this = MEOWPPReader::FindSegment((MEOWPPReader *)this, v4);
    *(_QWORD *)(v3 + 40) = this;
  }
  return this;
}

uint64_t MEOWFlatPPReader::Copy(uint64_t result, int a2, MEOWVectorBase *this)
{
  uint64_t v4;
  unsigned int v5;
  unsigned __int16 *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;

  if (a2 >= 1)
  {
    v4 = result;
    v5 = a2 + 1;
    do
    {
      v6 = *(unsigned __int16 **)(v4 + 32);
      v7 = *v6;
      *(_QWORD *)(v4 + 32) = v6 + 1;
      LODWORD(v6) = bswap32(v7);
      *(_DWORD *)(v4 + 16) += v6 >> 16;
      v8 = *(unsigned __int16 *)(v4 + 22) | (v6 >> 16);
      result = (uint64_t)MEOWVectorBase::Append(this);
      *(_WORD *)(*(_QWORD *)this + 2 * *((_QWORD *)this + 2) - 2) = v8;
      v9 = *(_QWORD *)(v4 + 32);
      if (v9 >= *(_QWORD *)(v4 + 40))
      {
        result = MEOWPPReader::FindSegment((MEOWPPReader *)v4, v9);
        *(_QWORD *)(v4 + 40) = result;
      }
      --v5;
    }
    while (v5 > 1);
  }
  return result;
}

uint64_t MEOWFlatPPReader::CopyTill(uint64_t result, unint64_t a2, MEOWVectorBase *this)
{
  unsigned __int16 *v4;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v4 = *(unsigned __int16 **)(result + 32);
  if ((unint64_t)v4 < a2)
  {
    v6 = result;
    do
    {
      v8 = *v4;
      v7 = v8;
      *(_QWORD *)(v6 + 32) = v4 + 1;
      if (!v8)
        break;
      v9 = bswap32(v7);
      *(_DWORD *)(v6 + 16) += HIWORD(v9);
      v10 = *(unsigned __int16 *)(v6 + 22) | HIWORD(v9);
      result = (uint64_t)MEOWVectorBase::Append(this);
      *(_WORD *)(*(_QWORD *)this + 2 * *((_QWORD *)this + 2) - 2) = v10;
      v4 = *(unsigned __int16 **)(v6 + 32);
      if ((unint64_t)v4 >= *(_QWORD *)(v6 + 40))
      {
        result = MEOWPPReader::FindSegment((MEOWPPReader *)v6, (unint64_t)v4);
        *(_QWORD *)(v6 + 40) = result;
        v4 = *(unsigned __int16 **)(v6 + 32);
      }
    }
    while ((unint64_t)v4 < a2);
  }
  return result;
}

uint64_t MEOWFlatPPReader::CopyLeftContext(uint64_t a1, MEOWVectorBase *this)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;

  if (*(_BYTE *)(a1 + 20)
    && (v4 = *(_QWORD *)(a1 + 32),
        v4 - *(_QWORD *)(a1 + 24) - (bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2)) >> 16) >= 5))
  {
    v5 = bswap32(*(unsigned __int16 *)(v4 - 6)) >> 16;
    MEOWVectorBase::Append(this);
    *(_WORD *)(*(_QWORD *)this + 2 * *((_QWORD *)this + 2) - 2) = v5;
    v6 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 32) - 4)) >> 16;
    MEOWVectorBase::Append(this);
    *(_WORD *)(*(_QWORD *)this + 2 * *((_QWORD *)this + 2) - 2) = v6;
    v7 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 32) - 2)) >> 16;
    MEOWVectorBase::Append(this);
    result = 1;
  }
  else
  {
    MEOWVectorBase::Append(this);
    result = 0;
    LOWORD(v7) = -32438;
  }
  *(_WORD *)(*(_QWORD *)this + 2 * *((_QWORD *)this + 2) - 2) = v7;
  return result;
}

uint64_t MEOWFlatPPReader::CopyRightContext(uint64_t a1, MEOWVectorBase *this)
{
  int64_t v3;
  unsigned __int16 *v5;
  int v6;
  unint64_t v7;
  __int16 *v8;
  __int16 v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;

  if (!*(_BYTE *)(a1 + 20))
    goto LABEL_9;
  v3 = *((_QWORD *)this + 2);
  if ((unint64_t)v3 < 3)
    goto LABEL_9;
  v5 = *(unsigned __int16 **)(a1 + 32);
  if ((uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v5) < 5)
    goto LABEL_9;
  if (v3 < (uint64_t)0x8000000000000003)
    goto LABEL_8;
  LOWORD(v6) = 0;
  v7 = *(_QWORD *)this + 2 * v3;
  v8 = (__int16 *)(v7 - 6);
  do
  {
    v9 = *v8++;
    v6 = (__int16)(v9 | v6);
  }
  while ((unint64_t)v8 < v7);
  if (v6 < 0)
  {
LABEL_9:
    MEOWVectorBase::Append(this);
    result = 0;
    LOWORD(v12) = -32438;
  }
  else
  {
LABEL_8:
    v10 = bswap32(*v5) >> 16;
    MEOWVectorBase::Append(this);
    *(_WORD *)(*(_QWORD *)this + 2 * *((_QWORD *)this + 2) - 2) = v10;
    v11 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 2)) >> 16;
    MEOWVectorBase::Append(this);
    *(_WORD *)(*(_QWORD *)this + 2 * *((_QWORD *)this + 2) - 2) = v11;
    v12 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 4)) >> 16;
    MEOWVectorBase::Append(this);
    result = 1;
  }
  *(_WORD *)(*(_QWORD *)this + 2 * *((_QWORD *)this + 2) - 2) = v12;
  return result;
}

uint64_t MEOWFlatPPReader::PP(MEOWFlatPPReader *this)
{
  return *((_QWORD *)this + 4);
}

void MEOWEncodedPPReader::MEOWEncodedPPReader(MEOWEncodedPPReader *this, MEOWReader *a2, int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  unsigned int v7;
  uint64_t v8;

  v4 = *((_QWORD *)a2 + 3809) + (int)bswap32(*(_DWORD *)(*((_QWORD *)a2 + 3808) + 12 * a3 + 8)) + 8 * a4;
  v5 = *((_QWORD *)a2 + 3810) + (int)bswap32(*(_DWORD *)(*((_QWORD *)a2 + 3808) + 12 * a3 + 4));
  *((_DWORD *)this + 4) = bswap32(*(_DWORD *)(v4 + 4));
  v6 = *(_BYTE *)v4 != 0;
  *((_BYTE *)this + 20) = *(_BYTE *)v4 == 0;
  *((_WORD *)this + 11) = v6 << 15;
  *(_QWORD *)this = &off_1E9369C60;
  *((_QWORD *)this + 1) = v4;
  v7 = bswap32(*(unsigned __int16 *)(v4 + 2));
  *((_QWORD *)this + 3) = v5;
  *((_QWORD *)this + 4) = v5 + HIWORD(v7);
  v8 = bswap32(*(unsigned __int16 *)(v4 + 10)) >> 16;
  if (v8 <= HIWORD(v7))
    v8 = 1000000;
  *((_QWORD *)this + 5) = v5 + v8;
}

_QWORD *MEOWEncodedPPReader::Skip(_QWORD *this, int a2)
{
  _QWORD *v3;
  unint64_t v4;
  char *v5;
  int v6;
  BOOL v7;

  v3 = this;
  v4 = this[4];
  if (a2 >= 1)
  {
    do
    {
      v5 = (char *)(v4 + 1);
      do
      {
        this[4] = v5;
        v6 = *v5++;
      }
      while (v6 < 0);
      v4 = (unint64_t)(v5 - 1);
      v7 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v7 | (a2 == 0)));
  }
  if (v4 >= this[5])
  {
    this = (_QWORD *)MEOWPPReader::FindSegment((MEOWPPReader *)this, v4);
    v3[5] = this;
  }
  return this;
}

uint64_t MEOWEncodedPPReader::Advance(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  char *v6;
  int v7;
  int v8;
  BOOL v9;

  v2 = this;
  if (a2 <= 0)
  {
    v3 = *(_QWORD *)(this + 32);
  }
  else
  {
    v3 = *(_QWORD *)(this + 32);
    v4 = *(_DWORD *)(this + 16);
    do
    {
      v5 = 0;
      v6 = (char *)(v3 + 1);
      do
      {
        *(_QWORD *)(this + 32) = v6;
        v7 = *(v6 - 1) & 0x7F | (v5 << 7);
        v8 = *v6++;
        v5 = v7;
      }
      while (v8 < 0);
      v3 = (unint64_t)(v6 - 1);
      v4 += v7;
      *(_DWORD *)(this + 16) = v4;
      v9 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v9 | (a2 == 0)));
  }
  if (v3 >= *(_QWORD *)(this + 40))
  {
    this = MEOWPPReader::FindSegment((MEOWPPReader *)this, v3);
    *(_QWORD *)(v2 + 40) = this;
  }
  return this;
}

uint64_t MEOWEncodedPPReader::Copy(uint64_t result, int a2, MEOWVectorBase *this)
{
  int v4;
  uint64_t v5;
  int v6;
  char *v7;
  int v8;
  int v9;
  __int16 v10;
  unint64_t v11;

  if (a2 >= 1)
  {
    v4 = a2;
    v5 = result;
    do
    {
      v6 = 0;
      v7 = (char *)(*(_QWORD *)(v5 + 32) + 1);
      do
      {
        *(_QWORD *)(v5 + 32) = v7;
        v8 = *(v7 - 1) & 0x7F | (v6 << 7);
        v9 = *v7++;
        v6 = v8;
      }
      while (v9 < 0);
      *(_DWORD *)(v5 + 16) += (unsigned __int16)v8;
      v10 = *(_WORD *)(v5 + 22) | v8;
      result = (uint64_t)MEOWVectorBase::Append(this);
      *(_WORD *)(*(_QWORD *)this + 2 * *((_QWORD *)this + 2) - 2) = v10;
      v11 = *(_QWORD *)(v5 + 32);
      if (v11 >= *(_QWORD *)(v5 + 40))
      {
        result = MEOWPPReader::FindSegment((MEOWPPReader *)v5, v11);
        *(_QWORD *)(v5 + 40) = result;
      }
    }
    while (v4-- > 1);
  }
  return result;
}

uint64_t MEOWEncodedPPReader::CopyTill(uint64_t result, unint64_t a2, MEOWVectorBase *this)
{
  _BYTE *v4;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  __int16 v10;

  v4 = *(_BYTE **)(result + 32);
  if ((unint64_t)v4 < a2)
  {
    v6 = result;
    v7 = 0;
    do
    {
      do
      {
        *(_QWORD *)(v6 + 32) = v4 + 1;
        v8 = *v4 & 0x7F | (v7 << 7);
        v9 = (char)*++v4;
        v7 = v8;
      }
      while (v9 < 0);
      if (!(_WORD)v8)
        break;
      *(_DWORD *)(v6 + 16) += (unsigned __int16)v8;
      v10 = *(_WORD *)(v6 + 22) | v8;
      result = (uint64_t)MEOWVectorBase::Append(this);
      *(_WORD *)(*(_QWORD *)this + 2 * *((_QWORD *)this + 2) - 2) = v10;
      v4 = *(_BYTE **)(v6 + 32);
      if ((unint64_t)v4 >= *(_QWORD *)(v6 + 40))
      {
        result = MEOWPPReader::FindSegment((MEOWPPReader *)v6, (unint64_t)v4);
        *(_QWORD *)(v6 + 40) = result;
        v4 = *(_BYTE **)(v6 + 32);
      }
      v7 = 0;
    }
    while ((unint64_t)v4 < a2);
  }
  return result;
}

uint64_t MEOWEncodedPPReader::CopyLeftContext(uint64_t a1, MEOWVectorBase *this)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  char v7;
  int v8;
  int v9;
  char v10;
  int v11;
  int v12;
  char v13;
  uint64_t result;

  if (!*(_BYTE *)(a1 + 20))
    goto LABEL_10;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 24) + (bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2)) >> 16);
  if ((uint64_t)(v3 - v4) < 3)
    goto LABEL_10;
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = *(_BYTE *)--v3;
    v5 |= (v7 & 0x7F) << v6;
    v6 += 7;
  }
  while (v7 < 0);
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = *(_BYTE *)--v3;
    v8 |= (v10 & 0x7F) << v9;
    v9 += 7;
  }
  while (v10 < 0);
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = *(_BYTE *)--v3;
    v11 |= (v13 & 0x7F) << v12;
    v12 += 7;
  }
  while (v13 < 0);
  if (v3 >= v4)
  {
    MEOWVectorBase::Append(this);
    *(_WORD *)(*(_QWORD *)this + 2 * *((_QWORD *)this + 2) - 2) = v11;
    MEOWVectorBase::Append(this);
    *(_WORD *)(*(_QWORD *)this + 2 * *((_QWORD *)this + 2) - 2) = v8;
    MEOWVectorBase::Append(this);
    result = 1;
  }
  else
  {
LABEL_10:
    MEOWVectorBase::Append(this);
    result = 0;
    LOWORD(v5) = -32438;
  }
  *(_WORD *)(*(_QWORD *)this + 2 * *((_QWORD *)this + 2) - 2) = v5;
  return result;
}

uint64_t MEOWEncodedPPReader::CopyRightContext(uint64_t a1, MEOWVectorBase *this)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  unint64_t v8;
  __int16 *v9;
  __int16 v10;
  __int16 v11;
  char v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint64_t result;

  if (!*(_BYTE *)(a1 + 20))
    goto LABEL_17;
  v3 = *((_QWORD *)this + 2);
  if ((unint64_t)v3 < 3)
    goto LABEL_17;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = bswap32(*(unsigned __int16 *)(v4 + 10)) >> 16;
  if (v5 <= bswap32(*(unsigned __int16 *)(v4 + 2)) >> 16)
    v5 = 1000000;
  v6 = *(char **)(a1 + 32);
  if (*(_QWORD *)(a1 + 24) + v5 - (uint64_t)v6 < 3)
    goto LABEL_17;
  if (v3 >= (uint64_t)0x8000000000000003)
  {
    LOWORD(v7) = 0;
    v8 = *(_QWORD *)this + 2 * v3;
    v9 = (__int16 *)(v8 - 6);
    do
    {
      v10 = *v9++;
      v7 = (__int16)(v10 | v7);
    }
    while ((unint64_t)v9 < v8);
    if (v7 < 0)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = *v6;
  do
  {
    v13 = *++v6;
    v11 = v12 & 0x7F | (v11 << 7);
    v12 = v13;
  }
  while (v13 < 0);
  v14 = 0;
  do
  {
    v15 = *++v6;
    v14 = v12 & 0x7F | (v14 << 7);
    v12 = v15;
  }
  while (v15 < 0);
  v16 = 0;
  do
  {
    v17 = *++v6;
    v16 = v12 & 0x7F | (v16 << 7);
    v12 = v17;
  }
  while (v17 < 0);
  if ((unint64_t)v6 <= *(_QWORD *)(a1 + 40))
  {
    MEOWVectorBase::Append(this);
    *(_WORD *)(*(_QWORD *)this + 2 * *((_QWORD *)this + 2) - 2) = v11;
    MEOWVectorBase::Append(this);
    *(_WORD *)(*(_QWORD *)this + 2 * *((_QWORD *)this + 2) - 2) = v14;
    MEOWVectorBase::Append(this);
    result = 1;
  }
  else
  {
LABEL_17:
    MEOWVectorBase::Append(this);
    result = 0;
    v16 = -32438;
  }
  *(_WORD *)(*(_QWORD *)this + 2 * *((_QWORD *)this + 2) - 2) = v16;
  return result;
}

uint64_t MEOWEncodedPPReader::PP(MEOWEncodedPPReader *this)
{
  return *((_QWORD *)this + 4);
}

void MEOWFlatPPReaderFactory::CreateReader(MEOWFlatPPReaderFactory *this, MEOWReader *a2, int a3, unsigned int a4)
{
  MEOWFlatPPReader *v7;

  v7 = (MEOWFlatPPReader *)operator new();
  MEOWFlatPPReader::MEOWFlatPPReader(v7, a2, a3, a4);
}

void MEOWEncodedPPReaderFactory::CreateReader(MEOWEncodedPPReaderFactory *this, MEOWReader *a2, int a3, unsigned int a4)
{
  MEOWEncodedPPReader *v7;

  v7 = (MEOWEncodedPPReader *)operator new();
  MEOWEncodedPPReader::MEOWEncodedPPReader(v7, a2, a3, a4);
}

_QWORD *MEOWPPReaderFactory::Create(MEOWPPReaderFactory *this)
{
  int v1;
  _QWORD *result;
  char *v3;

  v1 = (int)this;
  result = (_QWORD *)operator new();
  if (v1)
  *result = v3 + 16;
  return result;
}

void MEOWFlatPPReader::~MEOWFlatPPReader(MEOWFlatPPReader *this)
{
  JUMPOUT(0x1D8233BA8);
}

void MEOWEncodedPPReader::~MEOWEncodedPPReader(MEOWEncodedPPReader *this)
{
  JUMPOUT(0x1D8233BA8);
}

void MEOWFlatPPReaderFactory::~MEOWFlatPPReaderFactory(MEOWFlatPPReaderFactory *this)
{
  JUMPOUT(0x1D8233BA8);
}

void MEOWEncodedPPReaderFactory::~MEOWEncodedPPReaderFactory(MEOWEncodedPPReaderFactory *this)
{
  JUMPOUT(0x1D8233BA8);
}

void MTMBUnitInstructions::MTMBUnitInstructions(MTMBUnitInstructions *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
}

void MTMBUnitInstructions::~MTMBUnitInstructions(MTMBUnitInstructions *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD **)this;
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      MEMORY[0x1D8233BA8]();
      v2 = v3;
    }
    while (v3);
  }
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      MEMORY[0x1D8233BA8]();
      v4 = v5;
    }
    while (v5);
  }
  v6 = (_QWORD *)*((_QWORD *)this + 2);
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      MEMORY[0x1D8233BA8]();
      v6 = v7;
    }
    while (v7);
  }
}

void MTMBUnitInstructions::DeleteQueue(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      MEMORY[0x1D8233BA8]();
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t *MTMBUnitInstructions::AddCommand(uint64_t *this, MTFECommand *a2)
{
  unint64_t var8;

  var8 = a2->var8;
  if (var8 != 1835429746)
  {
    if (var8 == 1836475764)
    {
      ++this;
    }
    else
    {
      if (var8 != 1836021362)
        return this;
      this += 2;
    }
  }
  return (uint64_t *)MTMBUnitInstructions::AddToQueue((uint64_t)this, this, HIWORD(LODWORD(a2->var9)) & 0x7FFF, a2->var9);
}

uint64_t MTMBUnitInstructions::AddToQueue(uint64_t a1, uint64_t *a2, unsigned __int16 a3, __int16 a4)
{
  uint64_t i;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;

  for (i = *a2; i; *a2 = i)
  {
    v8 = *(unsigned __int16 *)(i + 8);
    if (v8 > a3)
      break;
    a3 -= v8;
    i = *(_QWORD *)i;
  }
  result = operator new();
  v10 = *a2;
  *(_QWORD *)result = *a2;
  *(_WORD *)(result + 8) = a3;
  *(_WORD *)(result + 10) = a4;
  *a2 = result;
  if (v10)
    *(_WORD *)(v10 + 8) -= a3;
  return result;
}

uint64_t *MTMBUnitInstructions::NextSlice(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;

  v2 = MTMBUnitInstructions::AdvanceQueue((uint64_t)this, this);
  v3 = MTMBUnitInstructions::AdvanceQueue((uint64_t)v2, this + 2);
  return MTMBUnitInstructions::AdvanceQueue((uint64_t)v3, this + 1);
}

uint64_t *MTMBUnitInstructions::AdvanceQueue(uint64_t a1, uint64_t **a2)
{
  uint64_t *result;
  uint64_t *v4;

  result = *a2;
  if (*a2)
  {
    while (!*((_WORD *)result + 4))
    {
      v4 = (uint64_t *)*result;
      MEMORY[0x1D8233BA8]();
      *a2 = v4;
      result = v4;
      if (!v4)
        return result;
    }
    --*((_WORD *)result + 4);
  }
  return result;
}

uint64_t MTMBUnitInstructions::ReadyInQueue(uint64_t a1, uint64_t *a2, _WORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (*a2)
  {
    if (*(_WORD *)(result + 8))
    {
      return 0;
    }
    else
    {
      v5 = *(_QWORD *)result;
      *a3 = *(_WORD *)(result + 10);
      MEMORY[0x1D8233BA8]();
      *a2 = v5;
      return 1;
    }
  }
  return result;
}

MTFESpeechElement *MTFEQuestionPhrasing::VisitSentence(MTFEQuestionPhrasing *this, MTFESpeechElement *a2)
{
  *((_QWORD *)this + 1) = a2;
  *((_BYTE *)this + 17) = 1;
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFEQuestionPhrasing::VisitIntonationalPhrase(MTFEQuestionPhrasing *this, MTFESpeechElement *a2)
{
  MTFESpeechElement *result;

  *((_BYTE *)this + 19) = BYTE4(a2[2].var6) != 0;
  if (*((_BYTE *)this + 17))
  {
    *((_BYTE *)this + 16) = 1;
    *((_BYTE *)this + 20) = 0;
  }
  *((_BYTE *)this + 18) = 0;
  result = MTFESpeechElement::VisitChildren(a2, this);
  *((_BYTE *)this + 17) = *((_BYTE *)this + 18);
  return result;
}

unsigned __int8 *MTFEQuestionPhrasing::VisitWord(MTFEQuestionPhrasing *this, MTFEWord *a2)
{
  int var15;
  unsigned __int8 *result;
  int v6;
  BOOL v7;
  MTFESpeechElement *var7;
  int v9;

  var15 = a2->var15;
  result = (unsigned __int8 *)a2->var6;
  if (result)
  {
    if (result)
    {
      v6 = 1 << var15;
      if (var15 == 255)
        LOWORD(v6) = 0;
      v7 = var15 == 31 || result[86] == 31;
      if (!v7 && *((_BYTE *)this + 17))
      {
        var7 = a2->var7;
        if (var7)
        {
          if (var7->var7 || !*((_BYTE *)this + 20) || (v6 & 0x1400) == 0)
            return result;
LABEL_27:
          *((_BYTE *)this + 16) = 0;
          return result;
        }
        if (var15 == 12)
          goto LABEL_27;
        if ((v6 & 0x480) != 0)
          *((_BYTE *)this + 20) = 1;
      }
    }
  }
  else if (var15 == 31)
  {
    result = (unsigned __int8 *)a2->var3;
    if (result
    {
      v9 = result[58];
    }
    else
    {
      v9 = 70;
    }
    if (!*((_BYTE *)this + 16) && !*((_BYTE *)this + 19) && v9 == 71)
    {
      result[58] = 70;
      a2->var11 = 6;
      *(_WORD *)(*((_QWORD *)this + 1) + 56) |= 0x20u;
    }
    *((_BYTE *)this + 18) = v9 == 69;
  }
  return result;
}

void MTFEQuestionPhrasing::~MTFEQuestionPhrasing(MTFEQuestionPhrasing *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

MTFESpeechElement *MTFEMelodize::VisitIntonationalPhrase(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  MTFEMelody *var6;

  var6 = (MTFEMelody *)a2[3].var6;
  *(_QWORD *)&this->var1 = var6;
  if (var6)
  {
    LOWORD(this->var3) = 0;
    HIDWORD(this->var3) = 0;
    LODWORD(this->var4) = 0;
    return MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  }
  return this;
}

MTFESpeechElement *MTFEMelodize::VisitWord(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  uint64_t v3;
  int var3_low;
  float v6;
  __int16 v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t i;
  int v12;
  MTFEWord *v13;
  MTFESyllable *v14;
  MTFEPhoneme *v15;
  int v16;
  MTFESpeechElement *v17;
  signed __int16 v18;

  if (((uint64_t)a2[1].var0 & 0x40) == 0)
  {
    v3 = (uint64_t)this;
    *((float *)&this->var4 + 1) = (float)*((__int16 *)&a2[3].var2 + 1);
    var3_low = SLOWORD(this->var3);
    if (SWORD2(a2[1].var0) > var3_low && var3_low != 0)
    {
      if (var3_low >= 1)
      {
        do
        {
          v6 = MTFEMelody::Pitch(*(MTFEMelody **)(v3 + 8), (unsigned __int16)var3_low - 1);
          LOWORD(var3_low) = *(_WORD *)(v3 + 16);
          if (v6 != 0.0)
            break;
          v7 = var3_low - 1;
          var3_low = (__int16)(var3_low - 1);
          *(_WORD *)(v3 + 16) = v7;
        }
        while (var3_low > 0);
      }
      v8 = *(_DWORD *)(v3 + 24) + (__int16)var3_low;
      v9 = *(_DWORD *)(v3 + 20) - v8;
      MTFEMelody::SplitNote(*(MTFEMelody **)(v3 + 8), v8 - 1, v9 + 1);
      *(_DWORD *)(v3 + 24) += v9;
    }
    v10 = *(int *)(v3 + 20);
    for (i = *(_QWORD *)(v3 + 8); *(_QWORD *)(i + 16) > v10; i = *(_QWORD *)(v3 + 8))
    {
      if (MTFEMelody::Pitch((MTFEMelody *)i, v10) != 0.0)
        break;
      v12 = MTFEMelody::DurationFrames(*(MTFEMelody **)(v3 + 8), *(int *)(v3 + 20), *(float *)(v3 + 28));
      v13 = (MTFEWord *)operator new();
      MTFEWord::MTFEWord(v13, 0, 0);
      v14 = (MTFESyllable *)operator new();
      MTFESyllable::MTFESyllable(v14);
      v15 = (MTFEPhoneme *)operator new();
      MTFEPhoneme::MTFEPhoneme(v15, 0);
      v16 = 5 * v12;
      v17 = (MTFESpeechElement *)MTFEFirstPhoneme(a2);
      v15->var13 = (float)v16;
      v15->var15 |= 0x10018000u;
      v13->var8 |= 0x40u;
      v13->var23 = *((_WORD *)&a2[3].var2 + 1);
      v13->var9 = *(_WORD *)(v3 + 20) + 1;
      MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v14, (MTFESpeechElement *)v15, v14->var4);
      MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v13, (MTFESpeechElement *)v14, v13->var4);
      MTFESpeechElement::AddChildBefore(a2->var5, (MTFESpeechElement *)v13, a2);
      MTFESpeechElement::SetPrevCousin((MTFESpeechElement *)v15, v17->var7);
      MTFESpeechElement::SetNextCousin((MTFESpeechElement *)v15, v17);
      v10 = *(int *)(v3 + 20) + 1;
      *(_DWORD *)(v3 + 20) = v10;
    }
    v18 = WORD2(a2[1].var0);
    *(_WORD *)(v3 + 16) = v18;
    WORD2(a2[1].var0) = v18 + *(_WORD *)(v3 + 24);
    return MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)v3);
  }
  return this;
}

void sub_1D22B841C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

void MTFEMelodize::VisitSyllable(MTFEMelodize *this, uint64_t a2)
{
  MTFESpeechElement *v2;
  int v4;
  uint64_t v5;
  float v6;
  int v7;
  MTFESyllable *v8;
  MTFEPhoneme *v9;
  int v10;
  MTFESpeechElement *v11;

  v2 = (MTFESpeechElement *)a2;
  v4 = *((_DWORD *)this + 5);
  v5 = *((_QWORD *)this + 1);
  LODWORD(a2) = v4;
  if (*(_QWORD *)(v5 + 16) > (unint64_t)v4)
  {
    a2 = v4;
    do
    {
      v6 = MTFEMelody::Pitch((MTFEMelody *)v5, a2);
      LODWORD(a2) = *((_DWORD *)this + 5);
      if (v6 != 0.0)
        break;
      v7 = MTFEMelody::DurationFrames(*((MTFEMelody **)this + 1), (int)a2, *((float *)this + 7));
      v8 = (MTFESyllable *)operator new();
      MTFESyllable::MTFESyllable(v8);
      v9 = (MTFEPhoneme *)operator new();
      MTFEPhoneme::MTFEPhoneme(v9, 0);
      v10 = 5 * v7;
      v11 = (MTFESpeechElement *)MTFEFirstPhoneme(v2);
      v9->var13 = (float)v10;
      v9->var15 |= 0x10008000u;
      MTFESpeechElement::AddChildAfter((MTFESpeechElement *)v8, (MTFESpeechElement *)v9, v8->var4);
      MTFESpeechElement::AddChildBefore(v2->var5, (MTFESpeechElement *)v8, v2);
      MTFESpeechElement::SetPrevCousin((MTFESpeechElement *)v9, v11->var7);
      MTFESpeechElement::SetNextCousin((MTFESpeechElement *)v9, v11);
      a2 = *((int *)this + 5) + 1;
      *((_DWORD *)this + 5) = a2;
      v5 = *((_QWORD *)this + 1);
    }
    while (*(_QWORD *)(v5 + 16) > (unint64_t)a2);
  }
  *((_DWORD *)this + 5) = a2 + 1;
}

void sub_1D22B85B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8233BA8](v1, 0x10A1C405D120DB7);
  _Unwind_Resume(a1);
}

void MTFEMelodize::~MTFEMelodize(MTFEMelodize *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);
  JUMPOUT(0x1D8233BA8);
}

void MTFEMelody::MTFEMelody(MTFEMelody *this)
{
  uint64_t v1;

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)this, 4);
  *(_OWORD *)(v1 + 32) = xmmword_1D22D9010;
  *(_QWORD *)(v1 + 48) = 0x100000000;
  *(_DWORD *)(v1 + 56) = 0;
}

{
  uint64_t v1;

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)this, 4);
  *(_OWORD *)(v1 + 32) = xmmword_1D22D9010;
  *(_QWORD *)(v1 + 48) = 0x100000000;
  *(_DWORD *)(v1 + 56) = 0;
}

MTFEMelody *MTFEMelody::SetSwing(MTFEMelody *this, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  if (a2 == -65536)
  {
    v4 = -65536;
  }
  else
  {
    v2 = a2;
    v3 = a2 + 0x10000;
    do
    {
      v4 = v3;
      v3 = v2 % v3;
      v2 = v4;
    }
    while (v3);
  }
  v5 = 2 * (a2 / v4);
  v6 = (a2 + 0x10000) / v4;
  v7 = v5 - v6;
  v8 = 2 * v6;
  if (v8)
  {
    v9 = v7;
    v10 = v8;
    do
    {
      v11 = v10;
      v10 = v9 % v10;
      v9 = v11;
    }
    while (v10);
  }
  else
  {
    v11 = v7;
  }
  *((_DWORD *)this + 8) = v7 / v11;
  *((_DWORD *)this + 9) = v8 / v11;
  return this;
}

MTFEMelody *MTFEMelody::SetTranspose(MTFEMelody *this, int a2)
{
  *((_DWORD *)this + 14) = a2 >> 16;
  return this;
}

unsigned __int8 *MTFEMelody::AddNotes(MTFEMelody *this, CFDataRef theData)
{
  CFIndex Length;
  unsigned __int8 *result;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;

  Length = CFDataGetLength(theData);
  result = (unsigned __int8 *)CFDataGetBytePtr(theData);
  if ((unint64_t)(Length + 2) >= 5)
  {
    v6 = result;
    v7 = 0;
    if ((unint64_t)(Length / 3) <= 1)
      v8 = 1;
    else
      v8 = Length / 3;
    do
    {
      if (*v6)
        v9 = *((_DWORD *)this + 14) + *v6;
      else
        v9 = 0;
      v10 = v6[1];
      v11 = (4 * v10);
      v12 = v6[2];
      v13 = *((_DWORD *)this + 10);
      if (v13)
      {
        v14 = 8 * v10;
        if (v13 < 1 || v14 >= v12)
        {
          v16 = *((_DWORD *)this + 11);
          v17 = v16 * v11 - v13 * v12;
          v18 = v16 * v12;
          if (v18)
          {
            v19 = v17;
            v20 = v18;
            do
            {
              v21 = v20;
              v20 = v19 % v20;
              v19 = v21;
            }
            while (v20);
          }
          else
          {
            v21 = v17;
          }
          v11 = v17 / v21;
          v12 = v18 / v21;
        }
        else
        {
          v22 = *(_QWORD *)this + 4 * *((_QWORD *)this + 2);
          v23 = *((_DWORD *)this + 11);
          v24 = ((*(_DWORD *)(v22 - 4) >> 12) & 0xFFF) * v23 - (*(_DWORD *)(v22 - 4) & 0xFFF) * v13;
          v25 = (*(_DWORD *)(v22 - 4) & 0xFFF) * v23;
          if (v25)
          {
            v26 = v24;
            v27 = v25;
            do
            {
              v28 = v27;
              v27 = v26 % v27;
              v26 = v28;
            }
            while (v27);
          }
          else
          {
            v28 = v24;
          }
          *(_DWORD *)(v22 - 4) = *(_DWORD *)(v22 - 4) & 0xFF000000 | ((v24 / v28) << 12) | (v25 / v28);
        }
      }
      add(v11, v12, (unsigned int *)this + 12, (unsigned int *)this + 13);
      v29 = *((unsigned int *)this + 8);
      if ((_DWORD)v29 && *((_DWORD *)this + 13) == 2)
      {
        v30 = *((_DWORD *)this + 9);
        if (v30 * v12)
        {
          v31 = v29 * v12 + v30 * v11;
          v32 = v30 * v12;
          do
          {
            v33 = v32;
            v32 = v31 % v32;
            v31 = v33;
          }
          while (v32);
        }
        else
        {
          v33 = v29 * v12 + v30 * v11;
        }
        v37 = (v29 * v12 + v30 * (_DWORD)v11) / v33;
        v38 = v30 * v12 / v33;
        add(v29, v30, (unsigned int *)this + 12, (unsigned int *)this + 13);
        *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
      }
      else
      {
        *((_DWORD *)this + 10) = 0;
        v34 = v11;
        if (v12)
        {
          v35 = v11;
          v36 = v12;
          do
          {
            v34 = v36;
            v36 = v35 % v36;
            v35 = v34;
          }
          while (v36);
        }
        v37 = v11 / v34;
        v38 = v12 / v34;
      }
      v6 += 3;
      result = (unsigned __int8 *)MEOWVectorBase::Append(this);
      *(_DWORD *)(*(_QWORD *)this + 4 * *((_QWORD *)this + 2) - 4) = (v37 << 12) | (v9 << 24) | v38;
      ++v7;
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t add(uint64_t result, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  *a3 = *a3 * a2 + *a4 * result;
  v4 = *a4 * a2;
  *a4 = v4;
  if (v4)
  {
    v5 = *a3;
    do
    {
      v6 = v4;
      v4 = v5 % v4;
      v5 = v6;
    }
    while (v4);
  }
  else
  {
    v6 = *a3;
  }
  *a3 /= v6;
  *a4 /= v6;
  return result;
}

float MTFEMelody::Pitch(MTFEMelody *this, uint64_t a2)
{
  float result;
  int v3;

  result = 0.0;
  v3 = HIBYTE(*(_DWORD *)(*(_QWORD *)this + 4 * a2));
  if (v3)
    return expf((float)((float)(v3 - 69) / 12.0) * 0.69315) * 440.0;
  return result;
}

float MTFEMelody::Duration(MTFEMelody *this, uint64_t a2)
{
  return (float)((*(_DWORD *)(*(_QWORD *)this + 4 * a2) >> 12) & 0xFFF)
       / (float)(*(_DWORD *)(*(_QWORD *)this + 4 * a2) & 0xFFF);
}

uint64_t MTFEMelody::DurationFrames(MTFEMelody *this, uint64_t a2, float a3)
{
  return (int)(float)((float)((float)((float)((float)((*(_DWORD *)(*(_QWORD *)this + 4 * a2) >> 12) & 0xFFF)
                                                          / (float)(*(_DWORD *)(*(_QWORD *)this + 4 * a2) & 0xFFF))
                                                  * 12000.0)
                                          / a3)
                                  + 0.5);
}

uint64_t MTFEMelody::SilenceSamples(MTFEMelody *this, uint64_t a2, float a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  float v8;

  if (!a2)
    return 0;
  v4 = a2;
  v5 = 0;
  v6 = *(_QWORD *)this - 4;
  do
  {
    v7 = *(_DWORD *)(v6 + 4 * v4);
    v8 = 0.0;
    if (HIBYTE(v7))
      v8 = expf((float)((float)(int)(HIBYTE(v7) - 69) / 12.0) * 0.69315) * 440.0;
    if (v8 >= 0.00000001)
      break;
    v5 = (v5
                      + (int)(float)((float)((float)((float)((float)((v7 >> 12) & 0xFFF) / (float)(v7 & 0xFFF))
                                                   * 1323000.0)
                                           / a3)
                                   + 0.5));
    --v4;
  }
  while (v4);
  return v5;
}

uint64_t MTFEMelody::DurationSamples(MTFEMelody *this, uint64_t a2, float a3)
{
  return (int)(float)((float)((float)((float)((float)((*(_DWORD *)(*(_QWORD *)this + 4 * a2) >> 12) & 0xFFF)
                                                          / (float)(*(_DWORD *)(*(_QWORD *)this + 4 * a2) & 0xFFF))
                                                  * 1323000.0)
                                          / a3)
                                  + 0.5);
}

MTFEMelody *MTFEMelody::SplitNote(MTFEMelody *this, unint64_t a2, int a3)
{
  MTFEMelody *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int *v31;

  v5 = this;
  if (a3 < 2)
  {
    if (a3 != 1)
    {
      v15 = *((_QWORD *)this + 2);
      v16 = (1 - a3);
      v17 = *(_QWORD *)this;
      v18 = *(_DWORD *)(*(_QWORD *)this + 4 * a2);
      v19 = (v18 >> 12) & 0xFFF;
      v20 = v18 & 0xFFF;
      if (a3)
      {
        v21 = 2;
        if (v16 > 2)
          v21 = (1 - a3);
        v22 = 1;
        do
        {
          v23 = *(_DWORD *)(v17 + 4 * (v22 + a2)) & 0xFFF;
          v24 = v23 * v19 + ((*(_DWORD *)(v17 + 4 * (v22 + a2)) >> 12) & 0xFFF) * v20;
          v25 = v23 * v20;
          if (v25)
          {
            v26 = v24;
            v27 = v25;
            do
            {
              v28 = v27;
              v27 = v26 % v27;
              v26 = v28;
            }
            while (v27);
          }
          else
          {
            v28 = v24;
          }
          v19 = v24 / v28;
          ++v22;
          v20 = v25 / v28;
        }
        while (v22 != v21);
      }
      *(_DWORD *)(v17 + 4 * a2) = v18 & 0xFF000000 | (v19 << 12) | v20;
      return (MTFEMelody *)memmove((void *)(v17 + 4 * (a2 + 1)), (const void *)(v17 + 4 * (a2 + 1 + v16)), 4 * (v15 - (v16 + a2)));
    }
  }
  else
  {
    v6 = (a3 - 1);
    v7 = *((_QWORD *)this + 2);
    v8 = v7 + v6;
    if (*((_QWORD *)this + 3) < (unint64_t)(v7 + v6))
      MEOWVectorBase::Allocate((MEOWVectorBase *)this, v7 + v6, 1);
    *((_QWORD *)v5 + 2) = v8;
    v9 = a2 + a3;
    this = (MTFEMelody *)memmove((void *)(*(_QWORD *)v5 + 4 * v9), (const void *)(*(_QWORD *)v5 + 4 * (a2 + 1)), 4 * (v7 - (a2 + 1)));
    v10 = *(_DWORD *)(*(_QWORD *)v5 + 4 * a2);
    v11 = (v10 & 0xFFF) * a3;
    if (v11)
    {
      v12 = (v10 >> 12) & 0xFFF;
      v13 = (*(_DWORD *)(*(_QWORD *)v5 + 4 * a2) & 0xFFF) * a3;
      do
      {
        v14 = v13;
        v13 = v12 % v13;
        v12 = v14;
      }
      while (v13);
    }
    else
    {
      v14 = (v10 >> 12) & 0xFFF;
    }
    if (v9 > a2)
    {
      v29 = a3;
      v30 = v10 & 0xFF000000 | ((((v10 >> 12) & 0xFFF) / v14) << 12) | (v11 / v14);
      v31 = (unsigned int *)(*(_QWORD *)v5 + 4 * a2);
      do
      {
        *v31++ = v30;
        --v29;
      }
      while (v29);
    }
  }
  return this;
}

void MTFEPitchCoeffs::MTFEPitchCoeffs(MTFEPitchCoeffs *this, const __CFDictionary *a2)
{
  MTFEPitchCoeffs::Initialize(this);
  SetFloatCoeff(a2, CFSTR("BackupHighPhraseProm"), (float *)this);
  SetFloatCoeff(a2, CFSTR("BackupLowPhraseProm"), (float *)this + 1);
  SetIntCoeff(a2, CFSTR("ClosestPhraseAccentHigh"), (int *)this + 2);
  SetIntCoeff(a2, CFSTR("ClosestPhraseAccentLow"), (int *)this + 3);
  SetFloatCoeff(a2, CFSTR("CommaBoundary"), (float *)this + 4);
  SetFloatCoeff(a2, CFSTR("DownsteppedHighStarLegIntercept"), (float *)this + 5);
  SetFloatCoeff(a2, CFSTR("DownsteppedHighStarLegSlope"), (float *)this + 6);
  SetFloatCoeff(a2, CFSTR("ExclamBoundary"), (float *)this + 7);
  SetFloatCoeff(a2, CFSTR("ExclamLastAccentProm"), (float *)this + 8);
  SetFloatCoeff(a2, CFSTR("ExplicitAccentProm"), (float *)this + 9);
  SetIntCoeff(a2, CFSTR("FinalLoweringDuration"), (int *)this + 10);
  SetFloatCoeff(a2, CFSTR("FinalLoweringRatio"), (float *)this + 11);
  SetFloatCoeff(a2, CFSTR("FirstAccentProm"), (float *)this + 12);
  SetFloatCoeff(a2, CFSTR("FirstAccentPromForTwoAccentsPhrase"), (float *)this + 13);
  SetFloatCoeff(a2, CFSTR("HighAlternatingProm"), (float *)this + 14);
  SetFloatCoeff(a2, CFSTR("HighFinalBoundaryProm"), (float *)this + 15);
  SetIntCoeff(a2, CFSTR("HighFinalBoundaryWidth"), (int *)this + 16);
  SetFloatCoeff(a2, CFSTR("HighPlusDownstepIntercept"), (float *)this + 17);
  SetFloatCoeff(a2, CFSTR("HighPlusDownstepSlope"), (float *)this + 18);
  SetIntCoeff(a2, CFSTR("HighPlusDownsteppedHighStarWidth"), (int *)this + 19);
  SetFloatCoeff(a2, CFSTR("HighPlusIntercept"), (float *)this + 20);
  SetIntCoeff(a2, CFSTR("HighPlusLowStarWidth"), (int *)this + 21);
  SetFloatCoeff(a2, CFSTR("HighPlusSlope"), (float *)this + 22);
  SetFloatCoeff(a2, CFSTR("HighStarLegIntercept"), (float *)this + 23);
  SetFloatCoeff(a2, CFSTR("HighStarLegSlope"), (float *)this + 24);
  SetIntCoeff(a2, CFSTR("HighStarWidth"), (int *)this + 25);
  SetIntCoeff(a2, CFSTR("IntermediateNuclearTail"), (int *)this + 26);
  SetIntCoeff(a2, CFSTR("IntonationalNuclearTail"), (int *)this + 27);
  SetFloatCoeff(a2, CFSTR("LastAccentProm"), (float *)this + 28);
  SetFloatCoeff(a2, CFSTR("LongURLBoost"), (float *)this + 29);
  SetFloatCoeff(a2, CFSTR("LowAlternatingProm"), (float *)this + 30);
  SetIntCoeff(a2, CFSTR("LowPhraseAccentRecoverSlopeWidth"), (int *)this + 31);
  SetIntCoeff(a2, CFSTR("LowPlusHighStarWidth"), (int *)this + 32);
  SetFloatCoeff(a2, CFSTR("LowPlusIntercept"), (float *)this + 33);
  SetFloatCoeff(a2, CFSTR("LowPlusSlope"), (float *)this + 34);
  SetIntCoeff(a2, CFSTR("LowPlusWidth"), (int *)this + 35);
  SetFloatCoeff(a2, CFSTR("LowStarLegIntercept"), (float *)this + 36);
  SetFloatCoeff(a2, CFSTR("LowStarLegSlope"), (float *)this + 37);
  SetIntCoeff(a2, CFSTR("LowStarPlusHighWidth"), (int *)this + 38);
  SetIntCoeff(a2, CFSTR("LowStarPlusLegDelay"), (int *)this + 39);
  SetFloatCoeff(a2, CFSTR("LowStarPlusLegIntercept"), (float *)this + 40);
  SetFloatCoeff(a2, CFSTR("LowStarPlusLegSlope"), (float *)this + 41);
  SetIntCoeff(a2, CFSTR("LowStarWidth"), (int *)this + 42);
  SetFloatCoeff(a2, CFSTR("NonQuestPhraseProm"), (float *)this + 43);
  SetFloatCoeff(a2, CFSTR("ParagraphInitialBoost"), (float *)this + 44);
  SetFloatCoeff(a2, CFSTR("ParagraphRangePhrasalDownStep"), (float *)this + 45);
  SetFloatCoeff(a2, CFSTR("ParenBoost"), (float *)this + 46);
  SetFloatCoeff(a2, CFSTR("PeriodBoundary"), (float *)this + 47);
  SetFloatCoeff(a2, CFSTR("PerturbConsNoStress"), (float *)this + 48);
  SetFloatCoeff(a2, CFSTR("PerturbConsPrimaryStress"), (float *)this + 49);
  SetFloatCoeff(a2, CFSTR("PerturbConsSecondaryStress"), (float *)this + 50);
  SetFloatCoeff(a2, CFSTR("PerturbHClosureIntercept"), (float *)this + 51);
  SetFloatCoeff(a2, CFSTR("PerturbHClosureSlope"), (float *)this + 52);
  SetFloatCoeff(a2, CFSTR("PerturbHReleaseIntercept"), (float *)this + 53);
  SetFloatCoeff(a2, CFSTR("PerturbHReleaseSlope"), (float *)this + 54);
  SetIntCoeff(a2, CFSTR("PerturbPostConsFrames"), (int *)this + 55);
  SetIntCoeff(a2, CFSTR("PerturbPreConsFrames"), (int *)this + 56);
  SetFloatCoeff(a2, CFSTR("PerturbSonorClosureIntercept"), (float *)this + 57);
  SetFloatCoeff(a2, CFSTR("PerturbSonorClosureSlope"), (float *)this + 58);
  SetFloatCoeff(a2, CFSTR("PerturbSonorReleaseIntercept"), (float *)this + 59);
  SetFloatCoeff(a2, CFSTR("PerturbSonorReleaseSlope"), (float *)this + 60);
  SetFloatCoeff(a2, CFSTR("PerturbUObstClosureIntercept"), (float *)this + 61);
  SetFloatCoeff(a2, CFSTR("PerturbUObstClosureSlope"), (float *)this + 62);
  SetFloatCoeff(a2, CFSTR("PerturbUObstReleaseIntercept"), (float *)this + 63);
  SetFloatCoeff(a2, CFSTR("PerturbUObstReleaseSlope"), (float *)this + 64);
  SetFloatCoeff(a2, CFSTR("PerturbVObstClosureIntercept"), (float *)this + 65);
  SetFloatCoeff(a2, CFSTR("PerturbVObstClosureSlope"), (float *)this + 66);
  SetFloatCoeff(a2, CFSTR("PerturbVObstReleaseIntercept"), (float *)this + 67);
  SetFloatCoeff(a2, CFSTR("PerturbVObstReleaseSlope"), (float *)this + 68);
  SetFloatCoeff(a2, CFSTR("PerturbVowelNoStress"), (float *)this + 69);
  SetFloatCoeff(a2, CFSTR("PerturbVowelPrimaryStress"), (float *)this + 70);
  SetFloatCoeff(a2, CFSTR("PerturbVowelSecondaryStress"), (float *)this + 71);
  SetFloatCoeff(a2, CFSTR("Perturb_AA"), (float *)this + 72);
  SetFloatCoeff(a2, CFSTR("Perturb_AE"), (float *)this + 73);
  SetFloatCoeff(a2, CFSTR("Perturb_AH"), (float *)this + 74);
  SetFloatCoeff(a2, CFSTR("Perturb_AO"), (float *)this + 75);
  SetFloatCoeff(a2, CFSTR("Perturb_AR"), (float *)this + 76);
  SetFloatCoeff(a2, CFSTR("Perturb_AW"), (float *)this + 77);
  SetFloatCoeff(a2, CFSTR("Perturb_AX"), (float *)this + 78);
  SetFloatCoeff(a2, CFSTR("Perturb_AY"), (float *)this + 79);
  SetFloatCoeff(a2, CFSTR("Perturb_EH"), (float *)this + 80);
  SetFloatCoeff(a2, CFSTR("Perturb_EL"), (float *)this + 81);
  SetFloatCoeff(a2, CFSTR("Perturb_EN"), (float *)this + 82);
  SetFloatCoeff(a2, CFSTR("Perturb_ER"), (float *)this + 83);
  SetFloatCoeff(a2, CFSTR("Perturb_EY"), (float *)this + 84);
  SetFloatCoeff(a2, CFSTR("Perturb_IH"), (float *)this + 85);
  SetFloatCoeff(a2, CFSTR("Perturb_IR"), (float *)this + 86);
  SetFloatCoeff(a2, CFSTR("Perturb_IX"), (float *)this + 87);
  SetFloatCoeff(a2, CFSTR("Perturb_IY"), (float *)this + 88);
  SetFloatCoeff(a2, CFSTR("Perturb_LX"), (float *)this + 89);
  SetFloatCoeff(a2, CFSTR("Perturb_OR"), (float *)this + 90);
  SetFloatCoeff(a2, CFSTR("Perturb_OW"), (float *)this + 91);
  SetFloatCoeff(a2, CFSTR("Perturb_OY"), (float *)this + 92);
  SetFloatCoeff(a2, CFSTR("Perturb_RX"), (float *)this + 93);
  SetFloatCoeff(a2, CFSTR("Perturb_UH"), (float *)this + 94);
  SetFloatCoeff(a2, CFSTR("Perturb_UR"), (float *)this + 95);
  SetFloatCoeff(a2, CFSTR("Perturb_UW"), (float *)this + 96);
  SetFloatCoeff(a2, CFSTR("Perturb_XR"), (float *)this + 97);
  SetFloatCoeff(a2, CFSTR("Perturb_YU"), (float *)this + 98);
  SetIntCoeff(a2, CFSTR("PhraseAccentRangeHigh"), (int *)this + 99);
  SetIntCoeff(a2, CFSTR("PhraseAccentRangeLow"), (int *)this + 100);
  SetIntCoeff(a2, CFSTR("PitchSmoothWindow"), (int *)this + 101);
  SetIntCoeff(a2, CFSTR("PlusDownsteppedHighStarLegDelay"), (int *)this + 102);
  SetFloatCoeff(a2, CFSTR("PlusHighIntercept"), (float *)this + 103);
  SetFloatCoeff(a2, CFSTR("PlusHighSlope"), (float *)this + 104);
  SetFloatCoeff(a2, CFSTR("PlusHighStarIntercept"), (float *)this + 105);
  SetFloatCoeff(a2, CFSTR("PlusHighStarSlope"), (float *)this + 106);
  SetIntCoeff(a2, CFSTR("PlusHighStarWidth"), (int *)this + 107);
  SetIntCoeff(a2, CFSTR("PlusLowStarLegDelay"), (int *)this + 108);
  SetFloatCoeff(a2, CFSTR("PlusLowStarLegIntercept"), (float *)this + 109);
  SetFloatCoeff(a2, CFSTR("PlusLowStarLegSlope"), (float *)this + 110);
  SetFloatCoeff(a2, CFSTR("QuestBoundary"), (float *)this + 111);
  SetFloatCoeff(a2, CFSTR("QuestPhraseProm"), (float *)this + 112);
  SetFloatCoeff(a2, CFSTR("QuoteBoost"), (float *)this + 113);
  SetFloatCoeff(a2, CFSTR("RefProportion"), (float *)this + 114);
  SetFloatCoeff(a2, CFSTR("Sep1Prom"), (float *)this + 115);
  SetFloatCoeff(a2, CFSTR("Sep2Prom"), (float *)this + 116);
  SetFloatCoeff(a2, CFSTR("Sep3Prom"), (float *)this + 117);
  SetFloatCoeff(a2, CFSTR("Sep4Prom"), (float *)this + 118);
  SetFloatCoeff(a2, CFSTR("Sep5Prom"), (float *)this + 119);
  SetFloatCoeff(a2, CFSTR("Sep6Prom"), (float *)this + 120);
  SetFloatCoeff(a2, CFSTR("Sep7Prom"), (float *)this + 121);
  SetFloatCoeff(a2, CFSTR("ShortURLBoost"), (float *)this + 122);
  SetIntCoeff(a2, CFSTR("SlopeDelayRange"), (int *)this + 123);
  SetFloatCoeff(a2, CFSTR("SlopeEarly"), (float *)this + 124);
  SetIntCoeff(a2, CFSTR("SlopeEarlyDelay"), (int *)this + 125);
  SetFloatCoeff(a2, CFSTR("SlopeInterAccentDistance"), (float *)this + 126);
  SetFloatCoeff(a2, CFSTR("SlopeNonIntonationalPhraseFinal"), (float *)this + 127);
  SetFloatCoeff(a2, CFSTR("SlopeNonNuclear"), (float *)this + 128);
  SetFloatCoeff(a2, CFSTR("SlopeRange"), (float *)this + 129);
  SetFloatCoeff(a2, CFSTR("SlopeWordEnd"), (float *)this + 130);
  SetFloatCoeff(a2, CFSTR("URLDownStep"), (float *)this + 131);
  SetFloatCoeff(a2, CFSTR("VoicePitchFloor"), (float *)this + 132);
  SetFloatCoeff(a2, CFSTR("VoicePitchRange"), (float *)this + 133);
  SetFloatCoeff(a2, CFSTR("WHQuestBoundary"), (float *)this + 134);
}

double MTFEPitchCoeffs::Initialize(MTFEPitchCoeffs *this)
{
  double result;

  *(_QWORD *)this = 0x3F7FFF3A3F7FAE38;
  *((_QWORD *)this + 1) = 0x1900000019;
  *((_OWORD *)this + 1) = xmmword_1D22D90A0;
  *((_QWORD *)this + 4) = 0x3EFF48703F733333;
  *((_DWORD *)this + 10) = 400;
  *(_OWORD *)((char *)this + 44) = xmmword_1D22D90B0;
  *(_QWORD *)((char *)this + 60) = 0x1C3E4CCCCDLL;
  *(_QWORD *)((char *)this + 68) = 0x3ED88C4FBE996A75;
  *(_QWORD *)((char *)this + 76) = 24;
  *((_DWORD *)this + 21) = 36;
  *((_QWORD *)this + 11) = 0x3E42DDDB3F666666;
  *((_DWORD *)this + 24) = 1054594115;
  *(_QWORD *)((char *)this + 100) = 0x3A00000019;
  *((_DWORD *)this + 27) = 67;
  *((_QWORD *)this + 14) = 0x3FC000003F666666;
  *((_DWORD *)this + 30) = 1061997773;
  *(_QWORD *)((char *)this + 124) = 0x2400000017;
  *(_QWORD *)((char *)this + 132) = 0x3EB853663D40DF1ALL;
  *((_DWORD *)this + 35) = 12;
  *((_QWORD *)this + 18) = 0x3F7B003C00000000;
  *((_QWORD *)this + 19) = 0x1400000028;
  *((_QWORD *)this + 20) = 0x3E99999A00000000;
  *((_DWORD *)this + 42) = 33;
  *(_OWORD *)((char *)this + 172) = xmmword_1D22D90C0;
  *(_OWORD *)((char *)this + 188) = xmmword_1D22D90D0;
  *(_OWORD *)((char *)this + 204) = xmmword_1D22D90E0;
  *(_QWORD *)((char *)this + 220) = 0xC00000014;
  *(_OWORD *)((char *)this + 228) = xmmword_1D22D90F0;
  *(_OWORD *)((char *)this + 244) = xmmword_1D22D9100;
  *(_OWORD *)((char *)this + 260) = xmmword_1D22D9110;
  *(_OWORD *)((char *)this + 276) = xmmword_1D22D9120;
  *(_OWORD *)((char *)this + 292) = xmmword_1D22D9130;
  *(_OWORD *)((char *)this + 308) = xmmword_1D22D9140;
  *(_OWORD *)((char *)this + 324) = xmmword_1D22D9150;
  *(_OWORD *)((char *)this + 340) = xmmword_1D22D9160;
  *(_OWORD *)((char *)this + 356) = xmmword_1D22D9170;
  *(_OWORD *)((char *)this + 372) = xmmword_1D22D9180;
  *(_QWORD *)((char *)this + 388) = 0x3D4CCCCD3B5A740ELL;
  *(_OWORD *)((char *)this + 396) = xmmword_1D22D9190;
  *(_OWORD *)((char *)this + 412) = xmmword_1D22D91A0;
  *(_QWORD *)((char *)this + 428) = 0x1400000011;
  *(_OWORD *)((char *)this + 436) = xmmword_1D22D91B0;
  *(_OWORD *)((char *)this + 452) = xmmword_1D22D91C0;
  *(_OWORD *)((char *)this + 468) = xmmword_1D22D91D0;
  *(_QWORD *)((char *)this + 484) = 0x3F80000000000000;
  *(_QWORD *)((char *)this + 492) = 0x3D4CCCCD00000010;
  *((_DWORD *)this + 125) = -12;
  *(_OWORD *)((char *)this + 504) = xmmword_1D22D91E0;
  result = 0.0000305175852;
  *(_OWORD *)((char *)this + 520) = xmmword_1D22D91F0;
  *((_DWORD *)this + 134) = 1065353216;
  return result;
}

uint64_t sub_1D22B9A44()
{
  id v1;
  uint64_t v2;

  sub_1D22C7E10();
  sub_1D22B9B50();
  type metadata accessor for MTMacinTalkAUSPAudioUnit();
  v1 = sub_1D22B9C18();
  sub_1D22C7E10();
  sub_1D22B9C5C();
  v2 = sub_1D22C7C00();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v2;
}

unint64_t sub_1D22B9B50()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = qword_1ED946908;
  if (!qword_1ED946908)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1ED946908);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t type metadata accessor for MTMacinTalkAUSPAudioUnit()
{
  uint64_t v1;

  v1 = qword_1ED946D90;
  if (!qword_1ED946D90)
    return swift_getSingletonMetadata();
  return v1;
}

id sub_1D22B9C18()
{
  uint64_t ObjCClassFromMetadata;

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  return objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_bundleForClass_, ObjCClassFromMetadata);
}

uint64_t sub_1D22B9C5C()
{
  return sub_1D22C7E10();
}

uint64_t sub_1D22B9C84(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
  }
  return 3;
}

uint64_t sub_1D22B9D1C(char a1)
{
  if (!a1)
    return 0;
  if (a1 == 1)
    return 1;
  return 2;
}

uint64_t sub_1D22B9D88()
{
  sub_1D22B9DD0();
  return sub_1D22C8098() & 1;
}

unint64_t sub_1D22B9DD0()
{
  unint64_t v0;
  uint64_t v2;

  v2 = qword_1EFC76EE8;
  if (!qword_1EFC76EE8)
  {
    v0 = MEMORY[0x1D82343C4](&unk_1D22D9290, &unk_1E9369FD0);
    atomic_store(v0, (unint64_t *)&qword_1EFC76EE8);
    return v0;
  }
  return v2;
}

uint64_t sub_1D22B9E3C()
{
  sub_1D22B9DD0();
  return sub_1D22C7E88();
}

uint64_t sub_1D22B9E78()
{
  sub_1D22B9DD0();
  return sub_1D22C7EA0();
}

uint64_t sub_1D22B9EBC()
{
  sub_1D22B9DD0();
  return sub_1D22C7E94();
}

uint64_t sub_1D22B9F00@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1D22B9C84(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1D22B9F2C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;

  result = sub_1D22B9D1C(*v1);
  *a1 = result;
  return result;
}

void static MTMacinTalkAUSPAudioUnit.registerAudioUnit()()
{
  Swift::UInt32 v0;
  id v1;
  uint64_t ObjCClassFromMetadata;
  id v3;
  _DWORD v4[2];
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v10 = 0;
  sub_1D22C7E10();
  v0 = String.mtOSType()();
  swift_bridgeObjectRelease();
  v7 = __PAIR64__(v0, 1635087216);
  v8 = 1634758764;
  v9 = 0;
  v1 = (id)objc_opt_self();
  type metadata accessor for MTMacinTalkAUSPAudioUnit();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  sub_1D22C7E10();
  v3 = (id)sub_1D22C7DBC();
  swift_bridgeObjectRelease();
  v4[0] = 1635087216;
  v4[1] = v0;
  v5 = 1634758764;
  v6 = 0;
  objc_msgSend(v1, sel_registerSubclass_asComponentDescription_name_version_, ObjCClassFromMetadata, v4, v3, 0);

}

Swift::UInt32 __swiftcall String.mtOSType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt32 result;
  _QWORD v11[6];
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  Swift::UInt32 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v18 = v0;
  v19 = v1;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v25 = 0;
  v26 = 0;
  v16 = 0;
  v23 = sub_1D22C7DEC();
  v20 = *(_QWORD *)(v23 - 8);
  v17 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v21 = (char *)v11 - v17;
  v30 = MEMORY[0x1E0C80A78](v18, v19);
  v31 = v2;
  v29 = 0;
  sub_1D22C7DE0();
  sub_1D22C3D38();
  v22 = sub_1D22C7DD4();
  v24 = v3;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v23);
  if ((v24 & 0xF000000000000000) == 0xF000000000000000)
    goto LABEL_8;
  v14 = v22;
  v15 = v24;
  v12 = v24;
  v13 = v22;
  v25 = v22;
  v26 = v24;
  if (sub_1D22C7C54() != 4)
  {
    sub_1D22C3E7C(v13, v12);
    goto LABEL_8;
  }
  v5 = v16;
  sub_1D22C4120(v13, v12);
  v11[5] = v11;
  MEMORY[0x1E0C80A78](v11, v6);
  v7 = &v11[-6];
  v7[2] = v8;
  v7[3] = v9;
  v7[4] = &v29;
  result = sub_1D22C7C48();
  if (!v5)
  {
    sub_1D22C3E7C(v13, v12);
    sub_1D22C3E7C(v13, v12);
LABEL_8:
    v11[3] = &v27;
    v27 = v29;
    v11[1] = sub_1D22C3D44();
    v11[2] = sub_1D22C3DAC();
    sub_1D22C3E14();
    sub_1D22C7E7C();
    return v28;
  }
  __break(1u);
  return result;
}

void sub_1D22BA2F4()
{
  swift_getObjCClassMetadata();
  swift_getObjCClassMetadata();
  static MTMacinTalkAUSPAudioUnit.registerAudioUnit()();
}

id sub_1D22BA32C()
{
  uint64_t v0;
  id v1;
  id *v3;
  id v4;

  v3 = (id *)(v0 + qword_1ED946A00);
  swift_beginAccess();
  v4 = *v3;
  v1 = *v3;
  swift_endAccess();
  return v4;
}

void sub_1D22BA390(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + qword_1ED946A00);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;

  swift_endAccess();
}

uint64_t (*sub_1D22BA410())()
{
  swift_beginAccess();
  return sub_1D22BA460;
}

uint64_t sub_1D22BA460()
{
  return swift_endAccess();
}

uint64_t sub_1D22BA49C()
{
  return 0;
}

id sub_1D22BA4A4()
{
  uint64_t v0;
  id v1;
  id *v3;
  id v4;

  v3 = (id *)(v0 + qword_1ED9469B8);
  swift_beginAccess();
  v4 = *v3;
  v1 = *v3;
  swift_endAccess();
  return v4;
}

void sub_1D22BA508(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + qword_1ED9469B8);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;

  swift_endAccess();
}

uint64_t (*sub_1D22BA584())()
{
  swift_beginAccess();
  return sub_1D22BA460;
}

uint64_t sub_1D22BA5D4()
{
  sub_1D22C41D4();
  return sub_1D22C808C();
}

uint64_t sub_1D22BA604()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + qword_1ED9469F0);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t sub_1D22BA668(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_bridgeObjectRetain();
  v3 = (_QWORD *)(v1 + qword_1ED9469F0);
  swift_beginAccess();
  *v3 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1D22BA6E8())()
{
  swift_beginAccess();
  return sub_1D22BA460;
}

id sub_1D22BA738()
{
  uint64_t v0;
  id v1;
  id *v3;
  id v4;

  v3 = (id *)(v0 + qword_1ED9469E0);
  swift_beginAccess();
  v4 = *v3;
  v1 = *v3;
  swift_endAccess();
  return v4;
}

void sub_1D22BA79C(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + qword_1ED9469E0);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;

  swift_endAccess();
}

uint64_t (*sub_1D22BA818())()
{
  swift_beginAccess();
  return sub_1D22BA460;
}

id sub_1D22BA868()
{
  sub_1D22C4238();
  sub_1D22C7E10();
  return sub_1D22BA9E8();
}

id sub_1D22BA8B4()
{
  uint64_t v0;
  id v1;
  id *v3;
  id v4;

  v3 = (id *)(v0 + qword_1ED9469B0);
  swift_beginAccess();
  v4 = *v3;
  v1 = *v3;
  swift_endAccess();
  return v4;
}

void sub_1D22BA918(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + qword_1ED9469B0);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;

  swift_endAccess();
}

uint64_t (*sub_1D22BA998())()
{
  swift_beginAccess();
  return sub_1D22BA460;
}

id sub_1D22BA9E8()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1D22C4C14();
}

id sub_1D22BAA2C()
{
  uint64_t v0;
  id v1;
  id *v3;
  id v4;

  v3 = (id *)(v0 + qword_1ED9469C0);
  swift_beginAccess();
  v4 = *v3;
  v1 = *v3;
  swift_endAccess();
  return v4;
}

void sub_1D22BAA90(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + qword_1ED9469C0);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;

  swift_endAccess();
}

uint64_t (*sub_1D22BAB0C())()
{
  swift_beginAccess();
  return sub_1D22BA460;
}

uint64_t sub_1D22BAB5C()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + qword_1ED9469D8);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t sub_1D22BABBC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + qword_1ED9469D8);
  swift_beginAccess();
  *v3 = a1;
  return swift_endAccess();
}

uint64_t (*sub_1D22BAC24())()
{
  swift_beginAccess();
  return sub_1D22BA460;
}

uint64_t sub_1D22BAC74()
{
  return 0;
}

uint64_t sub_1D22BAC80()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + qword_1ED9469D0);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t sub_1D22BACF0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v6;

  v6 = v2 + qword_1ED9469D0;
  swift_beginAccess();
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return swift_endAccess();
}

uint64_t (*sub_1D22BAD88())()
{
  swift_beginAccess();
  return sub_1D22BA460;
}

id sub_1D22BADD8()
{
  uint64_t v0;
  id v1;
  id *v3;
  id v4;

  v3 = (id *)(v0 + qword_1ED9469E8);
  swift_beginAccess();
  v4 = *v3;
  v1 = *v3;
  swift_endAccess();
  return v4;
}

void sub_1D22BAE3C(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + qword_1ED9469E8);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;

  swift_endAccess();
}

uint64_t (*sub_1D22BAEB8())()
{
  swift_beginAccess();
  return sub_1D22BA460;
}

id sub_1D22BAF08()
{
  uint64_t v0;
  id v1;
  id *v3;
  id v4;

  v3 = (id *)(v0 + qword_1ED9469F8);
  swift_beginAccess();
  v4 = *v3;
  v1 = *v3;
  swift_endAccess();
  return v4;
}

void sub_1D22BAF6C(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + qword_1ED9469F8);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;

  swift_endAccess();
}

uint64_t (*sub_1D22BAFE8())()
{
  swift_beginAccess();
  return sub_1D22BA460;
}

id sub_1D22BB038()
{
  sub_1D22C429C();
  return sub_1D22BB418();
}

id sub_1D22BB060()
{
  uint64_t v0;
  id v1;
  id *v3;
  id v4;

  v3 = (id *)(v0 + qword_1ED9469C8);
  swift_beginAccess();
  v4 = *v3;
  v1 = *v3;
  swift_endAccess();
  return v4;
}

void sub_1D22BB0C4(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + qword_1ED9469C8);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;

  swift_endAccess();
}

uint64_t (*sub_1D22BB144())()
{
  swift_beginAccess();
  return sub_1D22BA460;
}

float sub_1D22BB194()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  float v11;
  float v12;
  char v13;
  uint64_t v14;

  v14 = 0;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946878);
  v8 = *(_QWORD *)(v10 - 8);
  v5 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](v10, v0);
  v1 = (char *)&v4 - v5;
  v9 = (char *)&v4 - v5;
  v14 = v2;
  v6 = v2 + qword_1ED946DE0;
  v7 = &v13;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v1, v6, v10);
  swift_endAccess();
  sub_1D22C7C84();
  v11 = v12;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v9, v10);
  return v11;
}

uint64_t sub_1D22BB284()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946878);
  sub_1D22C7C90();
  return swift_endAccess();
}

void (*sub_1D22BB308(_QWORD *a1))(void **a1)
{
  _QWORD *v3;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946878);
  v3[7] = sub_1D22C7C78();
  return sub_1D22BB3A0;
}

void sub_1D22BB3A0(void **a1)
{
  void (**v1)(void *, _QWORD);

  v1 = (void (**)(void *, _QWORD))*a1;
  v1[7](v1, 0);
  swift_endAccess();
  free(v1);
}

id sub_1D22BB418()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1D22C4C6C();
}

uint64_t sub_1D22BB444()
{
  double v0;
  double v1;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  unsigned int v7;

  v3 = (id)objc_opt_self();
  sub_1D22C7E10();
  v6 = (id)sub_1D22C7DBC();
  swift_bridgeObjectRelease();
  sub_1D22C7E10();
  sub_1D22B9A44();
  swift_bridgeObjectRelease();
  v5 = (id)sub_1D22C7DBC();
  swift_bridgeObjectRelease();
  v4 = sub_1D22B9D1C(2);
  type metadata accessor for AudioUnitParameterOptions();
  sub_1D22C808C();
  sub_1D22C440C();
  sub_1D22C7F90();
  LODWORD(v0) = 0;
  LODWORD(v1) = 1128792064;
  objc_msgSend(v3, sel_createParameterWithIdentifier_name_address_min_max_unit_unitName_flags_valueStrings_dependentParameters_, v6, v5, v4, 3, 0, v7, v0, v1, 0, 0);

  sub_1D22BB618();
  return sub_1D22C7CA8();
}

uint64_t sub_1D22BB618()
{
  return 0;
}

uint64_t sub_1D22BB630()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = 0;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946878);
  v8 = *(_QWORD *)(v9 - 8);
  v5 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](v9, v0);
  v1 = (char *)&v4 - v5;
  v10 = (char *)&v4 - v5;
  v13 = v2;
  v6 = v2 + qword_1ED946DE0;
  v7 = &v12;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v1, v6, v9);
  swift_endAccess();
  v11 = sub_1D22C7C9C();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v9);
  return v11;
}

float sub_1D22BB71C()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  float v11;
  float v12;
  char v13;
  uint64_t v14;

  v14 = 0;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946878);
  v8 = *(_QWORD *)(v10 - 8);
  v5 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](v10, v0);
  v1 = (char *)&v4 - v5;
  v9 = (char *)&v4 - v5;
  v14 = v2;
  v6 = v2 + qword_1ED946DD8;
  v7 = &v13;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v1, v6, v10);
  swift_endAccess();
  sub_1D22C7C84();
  v11 = v12;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v9, v10);
  return v11;
}

uint64_t sub_1D22BB80C()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946878);
  sub_1D22C7C90();
  return swift_endAccess();
}

void (*sub_1D22BB890(_QWORD *a1))(void **a1)
{
  _QWORD *v3;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946878);
  v3[7] = sub_1D22C7C78();
  return sub_1D22BB3A0;
}

uint64_t sub_1D22BB928@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  int v27;
  uint64_t v28;
  _DWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  _QWORD v34[5];
  _DWORD v35[2];

  v28 = a1;
  v20 = 0;
  v17 = sub_1D22C7D14();
  v16 = *(_QWORD *)(v17 - 8);
  v9 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](v17, v1);
  v2 = (char *)&v8 - v9;
  v18 = (char *)&v8 - v9;
  v22 = (id)objc_opt_self();
  v11 = 7;
  v12 = 1;
  sub_1D22C7E10();
  v10 = v3;
  v26 = (id)sub_1D22C7DBC();
  swift_bridgeObjectRelease();
  sub_1D22C7E10();
  v13 = v4;
  v14 = sub_1D22B9A44();
  v15 = v5;
  swift_bridgeObjectRelease();
  v25 = (id)sub_1D22C7DBC();
  swift_bridgeObjectRelease();
  v23 = sub_1D22B9D1C(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v2, *MEMORY[0x1E0DBEEB8], v17);
  sub_1D22C7D08();
  v19 = v6;
  v24 = (id)sub_1D22C7DBC();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v17);
  swift_bridgeObjectRelease();
  type metadata accessor for AudioUnitParameterOptions();
  v21 = sub_1D22C808C();
  sub_1D22C440C();
  sub_1D22C7F90();
  v27 = 1112014848;
  v33 = objc_msgSend(v22, sel_createParameterWithIdentifier_name_address_min_max_unit_unitName_flags_valueStrings_dependentParameters_, v26, v25, v23, 26, v24, v35[1], 0, 0);

  v29 = v35;
  v35[0] = v27;
  v30 = v34;
  memset(v34, 0, sizeof(v34));
  v31 = MEMORY[0x1E0DEB188];
  v32 = MEMORY[0x1E0DBEEF8];
  sub_1D22BB618();
  return sub_1D22C7CA8();
}

uint64_t sub_1D22BBBB0()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = 0;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946878);
  v8 = *(_QWORD *)(v9 - 8);
  v5 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](v9, v0);
  v1 = (char *)&v4 - v5;
  v10 = (char *)&v4 - v5;
  v13 = v2;
  v6 = v2 + qword_1ED946DD8;
  v7 = &v12;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v1, v6, v9);
  swift_endAccess();
  v11 = sub_1D22C7C9C();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v9);
  return v11;
}

float sub_1D22BBC9C()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  float v11;
  float v12;
  char v13;
  uint64_t v14;

  v14 = 0;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946878);
  v8 = *(_QWORD *)(v10 - 8);
  v5 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](v10, v0);
  v1 = (char *)&v4 - v5;
  v9 = (char *)&v4 - v5;
  v14 = v2;
  v6 = v2 + qword_1ED946DC0;
  v7 = &v13;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v1, v6, v10);
  swift_endAccess();
  sub_1D22C7C84();
  v11 = v12;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v9, v10);
  return v11;
}

uint64_t sub_1D22BBD8C()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946878);
  sub_1D22C7C90();
  return swift_endAccess();
}

void (*sub_1D22BBE10(_QWORD *a1))(void **a1)
{
  _QWORD *v3;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946878);
  v3[7] = sub_1D22C7C78();
  return sub_1D22BB3A0;
}

uint64_t sub_1D22BBEA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  _QWORD v10[6];
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  _DWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  _QWORD v29[5];
  _DWORD v30[2];

  v23 = a1;
  v16 = 0;
  v13 = sub_1D22C7D14();
  v12 = *(_QWORD *)(v13 - 8);
  v10[0] = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](v13, v1);
  v2 = (char *)v10 - v10[0];
  v14 = (char *)v10 - v10[0];
  v18 = (id)objc_opt_self();
  v10[2] = 7;
  v11 = 1;
  sub_1D22C7E10();
  v10[1] = v3;
  v22 = (id)sub_1D22C7DBC();
  swift_bridgeObjectRelease();
  sub_1D22C7E10();
  v10[3] = v4;
  v10[4] = sub_1D22B9A44();
  v10[5] = v5;
  swift_bridgeObjectRelease();
  v21 = (id)sub_1D22C7DBC();
  swift_bridgeObjectRelease();
  v19 = sub_1D22B9D1C(v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v2, *MEMORY[0x1E0DBEEB8], v13);
  sub_1D22C7D08();
  v15 = v6;
  v20 = (id)sub_1D22C7DBC();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v13);
  swift_bridgeObjectRelease();
  type metadata accessor for AudioUnitParameterOptions();
  v17 = sub_1D22C808C();
  sub_1D22C440C();
  sub_1D22C7F90();
  LODWORD(v7) = 1127219200;
  LODWORD(v8) = 1147207680;
  v28 = objc_msgSend(v18, sel_createParameterWithIdentifier_name_address_min_max_unit_unitName_flags_valueStrings_dependentParameters_, v22, v21, v19, 26, v20, v30[1], v7, v8, 0, 0);

  v24 = v30;
  v30[0] = 1140457472;
  v25 = v29;
  memset(v29, 0, sizeof(v29));
  v26 = MEMORY[0x1E0DEB188];
  v27 = MEMORY[0x1E0DBEEF8];
  sub_1D22BB618();
  return sub_1D22C7CA8();
}

uint64_t sub_1D22BC128()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = 0;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946878);
  v8 = *(_QWORD *)(v9 - 8);
  v5 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](v9, v0);
  v1 = (char *)&v4 - v5;
  v10 = (char *)&v4 - v5;
  v13 = v2;
  v6 = v2 + qword_1ED946DC0;
  v7 = &v12;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v1, v6, v9);
  swift_endAccess();
  v11 = sub_1D22C7C9C();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v9);
  return v11;
}

uint64_t sub_1D22BC214()
{
  id v1;
  id v2;
  uint64_t v3;

  v1 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v2 = objc_msgSend(v1, sel_resourcesWithType_subType_, 2, 1);

  sub_1D22C447C();
  sub_1D22C7EC4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946910);
  sub_1D22C44E0();
  v3 = sub_1D22C7FFC();

  return v3;
}

unint64_t sub_1D22BC318(id *a1)
{
  return (unint64_t)objc_msgSend(*a1, sel_isInstalled) & 1;
}

id sub_1D22BC354(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  objc_class *v4;
  id v5;
  void *v6;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _QWORD v12[2];
  int v13;
  id v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v14 = 0;
  v12[0] = a1;
  v12[1] = a2;
  v13 = a3;
  v11 = objc_msgSend(objc_allocWithZone(v4), sel_initWithComponentDescription_options_error_, v12, a4, &v14);
  v10 = v14;
  v5 = v14;
  v6 = v15;
  v15 = v10;

  if (v11)
    return v11;
  v9 = v15;
  sub_1D22C7C18();

  swift_willThrow();
  return (id)v8;
}

char *sub_1D22BC4EC(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  id v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  char v40;
  id v41;
  char *v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  double v51;
  double v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  uint64_t v73;
  id v74;
  id v75;
  _QWORD *v76;
  objc_class *v77;
  id v78;
  void *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  _QWORD *v84;
  id v85;
  uint64_t v86;
  void *v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id *v100;
  _QWORD *v101;
  id v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void **v107;
  id v108;
  char *v109;
  char *v110;
  id v111;
  void *v112;
  id *v113;
  id v114;
  char *v115;
  void *v116;
  uint64_t v117;
  unint64_t v118;
  id v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  uint64_t v138;
  id v139;
  id v140;
  uint64_t v141;
  _DWORD *v142;
  char *v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  id v154;
  id v155;
  id v156;
  int v157;
  uint64_t v158;
  int *v159;
  char *v160;
  id v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int *v168;
  void (*v169)(char *, uint64_t, uint64_t);
  uint64_t v170;
  uint64_t v171;
  void (*v172)(char *, uint64_t);
  char *v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  id v177;
  uint64_t v178;
  unsigned int v179;
  id v180;
  id v181;
  id v182;
  _QWORD *v183;
  uint64_t v184;
  _DWORD *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  id v189;
  char *v190;
  unsigned int v191;
  _BYTE *v192;
  char *v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  __int16 v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  _QWORD v203[2];
  int v204;
  objc_super v205;
  id v206;
  id v207;
  void *v208;
  void *v209;
  _DWORD v210[2];
  int v211;
  _DWORD v212[2];
  int v213;
  _QWORD v214[2];
  int v215;
  uint64_t v216;
  _BYTE __dst[40];
  char v218;
  char v219;
  char v220;
  char v221;
  char v222;
  uint64_t v223;

  v183 = v214;
  v127 = a4;
  v223 = *MEMORY[0x1E0C80C00];
  v216 = 0;
  v214[0] = 0;
  v214[1] = 0;
  v149 = 0;
  v215 = 0;
  v213 = 0;
  v208 = 0;
  v207 = 0;
  v200 = a1;
  v201 = a2;
  v202 = a3;
  v125 = a1;
  v128 = a2;
  v126 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9468C0);
  v123 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](v4, v5);
  v195 = (char *)&v89 - v123;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946880);
  v124 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](v6, v7);
  v193 = (char *)&v89 - v124;
  v194 = 0;
  v171 = sub_1D22C7D14();
  v150 = *(_QWORD *)(v171 - 8);
  v9 = (void *)MEMORY[0x1E0C80A78](v190, v8);
  v10 = v128;
  v11 = v183;
  v173 = (char *)&v89 - v12;
  v199 = 0;
  *(_DWORD *)v183 = v13;
  *((_DWORD *)v11 + 1) = v14;
  v11[1] = v10;
  *((_DWORD *)v11 + 4) = v15;
  v213 = v16;
  v17 = v9;
  v18 = v190;
  v19 = v190;
  v20 = v190;
  v21 = v190;
  v22 = v190;
  v23 = v190;
  v24 = v190;
  v25 = v190;
  v26 = v190;
  v27 = v190;
  v28 = v190;
  v29 = v190;
  v30 = v190;
  v31 = v194;
  v32 = v190;
  v183[3] = v190;
  v199 = 2;
  *(_QWORD *)&v32[qword_1ED9469B8] = v31;

  v129 = qword_1ED9469F0;
  sub_1D22C41D4();
  v33 = sub_1D22C808C();
  v34 = v190;
  v199 = 6;
  *(_QWORD *)&v190[v129] = v33;

  v35 = v190;
  v199 = 14;
  *(_QWORD *)&v190[qword_1ED9469E0] = v194;

  v130 = qword_1ED9469B0;
  sub_1D22C4238();
  v191 = 1;
  sub_1D22C7E10();
  v36 = sub_1D22BA9E8();
  v37 = v190;
  v199 = 30;
  *(_QWORD *)&v190[v130] = v36;

  v38 = v190;
  v199 = 62;
  *(_QWORD *)&v190[qword_1ED9469C0] = v194;

  v39 = v190;
  *(_QWORD *)&v190[qword_1ED9469D8] = v194;

  v40 = v191;
  v41 = v190;
  v42 = &v190[qword_1ED9469D0];
  *(_QWORD *)v42 = 0;
  v42[8] = v40 & 1;

  v43 = v190;
  v199 = 318;
  *(_QWORD *)&v190[qword_1ED9469E8] = v194;

  v44 = v190;
  v199 = 830;
  *(_QWORD *)&v190[qword_1ED9469F8] = v194;

  v131 = qword_1ED9469C8;
  sub_1D22C429C();
  v45 = sub_1D22BB418();
  v46 = v190;
  v199 = 1854;
  *(_QWORD *)&v190[v131] = v45;

  v141 = qword_1ED946DE0;
  v199 = 3902;
  v162 = 0x1E0CFF000uLL;
  v137 = (id)objc_opt_self();
  sub_1D22C7E10();
  v132 = v47;
  v140 = (id)sub_1D22C7DBC();
  swift_bridgeObjectRelease();
  sub_1D22C7E10();
  v133 = v48;
  v134 = sub_1D22B9A44();
  v135 = v49;
  swift_bridgeObjectRelease();
  v139 = (id)sub_1D22C7DBC();
  swift_bridgeObjectRelease();
  v138 = sub_1D22B9D1C(2);
  v170 = type metadata accessor for AudioUnitParameterOptions();
  v136 = sub_1D22C808C();
  v175 = sub_1D22C440C();
  sub_1D22C7F90();
  v50 = v173;
  v176 = 0x1F2FBA000uLL;
  LODWORD(v51) = 0;
  LODWORD(v52) = 1128792064;
  v144 = objc_msgSend(v137, (SEL)0x1F2FBAF1FLL, v140, v139, v138, 3, 0, v212[1], v51, v52, 0, 0);

  v53 = v183;
  v142 = v212;
  v212[0] = 1120403456;
  v143 = &v222;
  v183[26] = 0;
  v53[27] = 0;
  v53[28] = 0;
  v53[29] = 0;
  v53[30] = 0;
  v187 = MEMORY[0x1E0DEB188];
  v188 = MEMORY[0x1E0DBEEF8];
  sub_1D22BB618();
  sub_1D22C7CA8();

  v158 = qword_1ED946DD8;
  v199 = 7998;
  v152 = (id)objc_opt_self();
  v164 = 7;
  sub_1D22C7E10();
  v145 = v54;
  v156 = (id)sub_1D22C7DBC();
  swift_bridgeObjectRelease();
  sub_1D22C7E10();
  v146 = v55;
  v147 = sub_1D22B9A44();
  v148 = v56;
  swift_bridgeObjectRelease();
  v155 = (id)sub_1D22C7DBC();
  swift_bridgeObjectRelease();
  v153 = sub_1D22B9D1C(v149);
  v168 = (unsigned int *)MEMORY[0x1E0DBEEB8];
  v57 = *MEMORY[0x1E0DBEEB8];
  v169 = *(void (**)(char *, uint64_t, uint64_t))(v150 + 104);
  v169(v50, v57, v171);
  sub_1D22C7D08();
  v151 = v58;
  v154 = (id)sub_1D22C7DBC();
  v172 = *(void (**)(char *, uint64_t))(v150 + 8);
  v172(v173, v171);
  swift_bridgeObjectRelease();
  sub_1D22C808C();
  sub_1D22C7F90();
  v59 = v173;
  v157 = 1112014848;
  v179 = 26;
  v161 = objc_msgSend(v152, (SEL)(v176 + 3871), v156, v155, v153, 0, 0);

  v60 = v183;
  v159 = &v211;
  v211 = v157;
  v160 = &v221;
  v183[21] = 0;
  v60[22] = 0;
  v60[23] = 0;
  v60[24] = 0;
  v60[25] = 0;
  sub_1D22BB618();
  sub_1D22C7CA8();

  v184 = qword_1ED946DC0;
  v199 = 16190;
  v177 = (id)objc_opt_self();
  sub_1D22C7E10();
  v163 = v61;
  v182 = (id)sub_1D22C7DBC();
  swift_bridgeObjectRelease();
  sub_1D22C7E10();
  v165 = v62;
  v166 = sub_1D22B9A44();
  v167 = v63;
  swift_bridgeObjectRelease();
  v181 = (id)sub_1D22C7DBC();
  swift_bridgeObjectRelease();
  v178 = sub_1D22B9D1C(v191);
  v169(v59, *v168, v171);
  sub_1D22C7D08();
  v174 = v64;
  v180 = (id)sub_1D22C7DBC();
  v172(v173, v171);
  swift_bridgeObjectRelease();
  sub_1D22C808C();
  sub_1D22C7F90();
  LODWORD(v65) = 1127219200;
  LODWORD(v66) = 1147207680;
  v189 = objc_msgSend(v177, (SEL)(v176 + 3871), v182, v181, v178, v179, v180, v210[1], v65, v66, 0, 0);

  v67 = v183;
  v185 = v210;
  v210[0] = 1140457472;
  v186 = &v220;
  v183[16] = 0;
  v67[17] = 0;
  v67[18] = 0;
  v67[19] = 0;
  v67[20] = 0;
  sub_1D22BB618();
  sub_1D22C7CA8();

  type metadata accessor for CMFormatDescription();
  v192 = __dst;
  memcpy(__dst, &macinTalkOutputFormat, sizeof(__dst));
  v68 = sub_1D22C7D80();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)(v68 - 8) + 56))(v193, v191);
  v69 = sub_1D22C7F6C();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)(v69 - 8) + 56))(v195, v191);
  v70 = v196;
  sub_1D22C7D8C();
  v197 = v70;
  v198 = v70;
  if (v70)
  {
    swift_unexpectedError();
    __break(1u);
    goto LABEL_6;
  }
  v116 = v209;
  v208 = v209;
  v117 = 0;
  sub_1D22C4664();
  v71 = v116;
  v119 = sub_1D22BD508(v116);
  v207 = v119;
  v118 = sub_1D22C46C8();
  v72 = v119;
  v73 = v197;
  v74 = sub_1D22BD544(v119);
  v120 = v73;
  v121 = v74;
  v122 = v73;
  if (v73)
  {
LABEL_6:
    v98 = v122;

    v99 = v98;
    goto LABEL_8;
  }
  v75 = v190;
  v199 = 16191;
  *(_QWORD *)&v190[qword_1ED946A00] = v121;

  v76 = v183;
  v112 = (void *)v183[3];
  v183[15] = 0;
  v206 = (id)v76[15];
  v113 = &v206;
  v199 = 0x7FFF;
  v77 = (objc_class *)type metadata accessor for MTMacinTalkAUSPAudioUnit();
  v205.receiver = v112;
  v205.super_class = v77;
  v203[0] = v125;
  v203[1] = v128;
  v204 = v126;
  v115 = (char *)objc_msgSendSuper2(&v205, sel_initWithComponentDescription_options_error_, v203, v127, v113);
  v114 = v206;
  v78 = v206;
  v79 = (void *)v183[15];
  v183[15] = v114;

  if (v115)
  {
    v111 = v115;
    v110 = v115;
    v80 = v115;
    v81 = v110;
    v82 = v110;
    v83 = v110;
    v183[3] = v110;
    sub_1D22C477C();
    v104 = sub_1D22C808C();
    v101 = v84;
    v100 = (id *)&v110[qword_1ED946A00];
    v103 = &v219;
    v106 = 0;
    swift_beginAccess();
    v102 = *v100;
    v85 = v102;
    *v101 = v102;
    swift_endAccess();
    v86 = v104;
    sub_1D22BD5C4();
    v105 = v86;

    v108 = sub_1D22BD604(v110, 2);
    v107 = (void **)&v110[qword_1ED9469B8];
    v109 = &v218;
    swift_beginAccess();
    v87 = *v107;
    *v107 = v108;

    swift_endAccess();
    return v110;
  }
  v96 = (id)v183[15];
  v97 = sub_1D22C7C18();

  swift_willThrow();
  v99 = v97;
LABEL_8:
  v94 = v99;
  if ((v199 & 0x4000) == 0)
  {
    if ((v199 & 1) != 0)

    sub_1D22C472C((id *)(v183[3] + qword_1ED9469B8));
    sub_1D22C4754();
    sub_1D22C472C((id *)(v183[3] + qword_1ED9469E0));

    sub_1D22C472C((id *)(v183[3] + qword_1ED9469C0));
    sub_1D22C472C((id *)(v183[3] + qword_1ED9469E8));
    sub_1D22C472C((id *)(v183[3] + qword_1ED9469F8));

    v90 = v183[3] + qword_1ED946DE0;
    v91 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946878);
    v92 = *(void (**)(uint64_t))(*(_QWORD *)(v91 - 8) + 8);
    v92(v90);
    ((void (*)(uint64_t, uint64_t))v92)(v183[3] + qword_1ED946DD8, v91);
    ((void (*)(uint64_t, uint64_t))v92)(v183[3] + qword_1ED946DC0, v91);
    v93 = v183[3];
    type metadata accessor for MTMacinTalkAUSPAudioUnit();
    swift_deallocPartialClassInstance();
  }
  return (char *)v95;
}

id sub_1D22BD508(void *a1)
{
  id v1;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1D22C4C8C(a1);
}

id sub_1D22BD544(void *a1)
{
  id v1;
  uint64_t v3;
  uint64_t v4;
  id v6;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v6 = sub_1D22C4CD0(a1);
  if (v4)
    return (id)v3;
  else
    return v6;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1D22BD5C4()
{
  sub_1D22C7EE8();
  sub_1D22C6B40();
}

id sub_1D22BD604(void *a1, uint64_t a2)
{
  id v2;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1D22C4E44(a1, a2);
}

char *sub_1D22BD650(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return sub_1D22BC4EC(*(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_DWORD *)(a3 + 16), a4);
}

id sub_1D22BD768(id a1)
{
  id v1;
  id v4;

  v1 = a1;
  v4 = sub_1D22BD7B0();

  return v4;
}

id sub_1D22BD7B0()
{
  uint64_t v1;
  id v2;

  v2 = sub_1D22BA4A4();
  if (v2)
    return v2;
  sub_1D22C8050();
  __break(1u);
  return (id)v1;
}

void sub_1D22BD86C()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  unsigned __int8 v7;
  objc_super v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = v0;
  v1 = v0;
  v11 = 0;
  v9 = 0;
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for MTMacinTalkAUSPAudioUnit();
  v7 = objc_msgSendSuper2(&v8, sel_allocateRenderResourcesAndReturnError_, &v9);
  v6 = v9;
  v2 = v9;
  v3 = v11;
  v11 = v6;

  if ((v7 & 1) == 0)
  {
    v4 = v11;
    sub_1D22C7C18();

    swift_willThrow();
  }

}

uint64_t sub_1D22BD9B4(id a1)
{
  id v1;

  v1 = a1;
  sub_1D22BD86C();

  return 1;
}

id sub_1D22BDAB4(id a1)
{
  id v1;
  uint64_t v2;
  void (*v5)(_DWORD *, uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  id v7;
  uint64_t aBlock;
  int v9;
  int v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, unsigned int, uint64_t, uint64_t, uint64_t, const void *);
  void *v12;
  void (*v13)(_DWORD *, uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v1 = a1;
  v5 = sub_1D22BDB54();
  v6 = v2;

  v13 = v5;
  v14 = v6;
  aBlock = MEMORY[0x1E0C809B0];
  v9 = 1107296256;
  v10 = 0;
  v11 = sub_1D22BDBDC;
  v12 = &block_descriptor;
  v7 = _Block_copy(&aBlock);
  swift_release();
  return v7;
}

void (*sub_1D22BDB54())(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v0;
  id v2;

  swift_allocObject();
  v0 = v2;
  swift_unknownObjectWeakInit();

  swift_retain();
  swift_release();
  return sub_1D22C4878;
}

uint64_t sub_1D22BDBDC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8)
{
  unsigned int v9;
  uint64_t (*v10)(uint64_t, uint64_t, unsigned int, uint64_t, uint64_t);
  uint64_t (*v17)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t);
  void *v19;

  v17 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v19 = _Block_copy(a8);
  if (v19)
  {
    *(_QWORD *)(swift_allocObject() + 16) = v19;
    v10 = sub_1D22C6B38;
  }
  else
  {
    v10 = 0;
  }
  v9 = v17(a2, a3, a4, a5, a6, a7);
  sub_1D22C6AC4((uint64_t)v10);
  swift_release();
  return v9;
}

uint64_t sub_1D22BDD0C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(a6 + 16))(a6, a1, a2, a3, a4, a5);
}

void sub_1D22BDD68(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void (*v24)(char *, _QWORD);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v29;
  id v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  _QWORD *v56;
  id v57;
  _QWORD *v58;
  id v59;
  id v60;
  _QWORD *v61;
  id v62;
  uint64_t v63;
  int v64;
  id v65;
  _QWORD *v66;
  id v67;
  id v68;
  _QWORD *v69;
  id v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t *v76;
  BOOL v77;
  char v78;
  uint64_t (*v79)();
  uint64_t v80;
  id v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  id v97;
  int v98;
  void *v99;
  id v100;
  id v101;
  unint64_t v102;
  unint64_t v103;
  _DWORD *v104;
  int v105;
  uint64_t v106;
  uint64_t (*v107)();
  uint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  _QWORD *v118;
  uint64_t v119;
  id v120;
  id v121;
  _BOOL4 v122;
  id v123;
  unsigned int v124;
  id v125;
  id v126;
  _BOOL4 v127;
  _BOOL4 v128;
  _BOOL4 v129;
  id *v130;
  id v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t *v137;
  uint64_t v138;
  int v139;
  int v140;
  void *v141;
  int v142;
  void *j;
  void *v144;
  int v145;
  int v146;
  _BOOL4 v147;
  unsigned int v148;
  id *v149;
  id v150;
  unsigned int v151;
  uint64_t v152;
  int v153;
  _BOOL4 v154;
  _BOOL4 v155;
  _BOOL4 v156;
  _BOOL4 v157;
  id v158;
  int v159;
  id v160;
  void *v161;
  id v162;
  void *v163;
  id *v164;
  id v165;
  id *v166;
  unint64_t v167;
  id v168;
  id v169;
  void *v170;
  void *v171;
  float v172;
  float v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  id v178;
  id v179;
  id v180;
  void *v181;
  id v182;
  uint64_t v183;
  uint64_t v184;
  id v185;
  id v186;
  id v187;
  id v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  id v193;
  unint64_t v194;
  unint64_t v195;
  id v196;
  uint64_t v197;
  uint64_t v198;
  id v199;
  id v200;
  uint64_t v201;
  unint64_t v202;
  id v203;
  id v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  id v208;
  _BOOL4 v209;
  _BOOL4 v210;
  id v211;
  void *v212;
  uint64_t v213;
  unint64_t v214;
  _DWORD *v215;
  uint64_t v216;
  void *v217;
  int v218;
  unint64_t v219;
  unint64_t v220;
  int *v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  void *v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  void *i;
  uint64_t v233;
  id v234;
  char *v235;
  uint64_t v236;
  int v237;
  void *v238;
  const char *v239;
  const char *v240;
  const char *v241;
  const char *v242;
  int *v243;
  const char *v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  char *v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _DWORD *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  char *v268;
  uint64_t v269;
  char *v270;
  void *v271;
  int v272;
  uint64_t v273;
  int v274;
  id v275;
  id v276;
  id v277;
  uint64_t v278;
  int v279;
  int v280;
  uint64_t (*v281)(uint64_t, void *, uint64_t, uint64_t, void *, void *);
  void *v282;
  void (*v283)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *);
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _BYTE v287[24];
  int v288;
  int v289;
  char v290;
  int v291;
  char v292;
  id v293;
  id v294;
  id v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  unsigned int v299;
  char v300;
  id v301;
  unsigned int v302;
  uint64_t v303;
  int v304;
  _DWORD v305[5];
  char v306;
  int v307;
  int v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  id v312[2];
  id v313[2];
  _DWORD v314[5];
  char v315;
  int v316;
  int v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  char v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;

  v267 = v287;
  v263 = a1;
  v262 = a2;
  v255 = a3;
  v266 = a4;
  v256 = a5;
  v257 = a6;
  v258 = a7;
  v259 = a8;
  v260 = a9;
  v239 = "Fatal error";
  v240 = "Unexpectedly found nil while unwrapping an Optional value";
  v241 = "MacinTalk/MacinTalkAUSPAudioUnit.swift";
  v242 = "MacinTalkAUSP failed to start speaking with error %@";
  v243 = &dword_1D2256000;
  v244 = "Unexpectedly found nil while implicitly unwrapping an Optional value";
  v336 = 0;
  v335 = 0;
  v334 = 0;
  v333 = 0;
  v332 = 0;
  v331 = 0;
  v330 = 0;
  v328 = 0;
  v329 = 0;
  v327 = 0;
  v325 = 0;
  v323 = 0;
  v324 = 0;
  v320 = 0;
  v318 = 0;
  v319 = 0;
  v313[1] = 0;
  v312[1] = 0;
  v311 = 0;
  v309 = 0;
  v310 = 0;
  v304 = 0;
  v298 = 0;
  v261 = 0;
  v245 = 0;
  memset(v287, 0, sizeof(v287));
  v285 = 0;
  v286 = 0;
  v277 = 0;
  v274 = 0;
  v250 = 0;
  v246 = sub_1D22C7CC0();
  v247 = *(_QWORD *)(v246 - 8);
  v248 = (*(_QWORD *)(v247 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](0, v9);
  v249 = (uint64_t *)((char *)&v90 - v248);
  v251 = sub_1D22C7D38();
  v252 = *(_QWORD *)(v251 - 8);
  v253 = (*(_QWORD *)(v252 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](v250, v10);
  v254 = (char *)&v90 - v253;
  v267[60] = (char *)&v90 - v253;
  v264 = sub_1D22C7D5C();
  v265 = *(_QWORD *)(v264 - 8);
  v11 = MEMORY[0x1E0C80A78](v263, v262);
  v12 = v266;
  v13 = v267;
  v268 = (char *)&v90 - v14;
  v267[59] = v11;
  v13[58] = v15;
  v333 = v16;
  v13[56] = v12;
  v13[55] = v17;
  v13[54] = v18;
  v13[52] = v19;
  v13[53] = v20;
  v269 = v21 + 16;
  v13[51] = v21 + 16;
  v270 = &v326;
  swift_beginAccess();
  v271 = (void *)MEMORY[0x1D8234430](v269);
  swift_endAccess();
  if (!v271)
  {
    v237 = -1;
    return;
  }
  v238 = v271;
  v234 = v271;
  v267[47] = v271;
  sub_1D22C7D68();
  v235 = &v322;
  v22 = sub_1D22C7D74();
  v23 = v267;
  v24 = (void (*)(char *, _QWORD))v22;
  v25 = v235;
  v267[39] = v26;
  v23[40] = v27;
  v236 = v23[40];
  v323 = v321;
  v23[46] = v236;
  v24(v25, 0);
  (*(void (**)(char *, uint64_t))(v265 + 8))(v268, v264);
  if (v236)
  {
    v233 = v236;
  }
  else
  {
    sub_1D22C8050();
    __break(1u);
  }
  v28 = v255;
  v229 = v233;
  v267[38] = v233;
  v316 = 0;
  v317 = v28;
  v230 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC77058);
  v231 = sub_1D22C67EC();
  sub_1D22C7F30();
  for (i = v245; ; i = v29)
  {
    v226 = i;
    v227 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC77068);
    sub_1D22C8038();
    v228 = v314[4];
    if ((v315 & 1) != 0)
      break;
    v225 = v228;
    v274 = v228;
    v221 = &v272;
    v272 = v228;
    v219 = sub_1D22C58F8();
    v220 = sub_1D22C5960();
    sub_1D22C59C8();
    sub_1D22C7EAC();
    v29 = v226;
    *(_DWORD *)(v229 + 4 * v273) = 0;
  }
  v223 = sub_1D22BA604();
  v222 = sub_1D22C41D4();
  v224 = MEMORY[0x1D82332FC](v223);
  swift_bridgeObjectRelease();
  if (!v224)
  {
    v218 = -10863;

    v237 = v218;
    return;
  }
  v216 = sub_1D22BA604();
  swift_bridgeObjectRetain();
  v215 = v314;
  v267[32] = v216;
  v213 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC76F30);
  v214 = sub_1D22C57FC();
  sub_1D22C7F18();
  sub_1D22C4754();
  v217 = (void *)v267[33];
  swift_bridgeObjectRelease();
  if (v217)
  {
    v212 = v217;
  }
  else
  {
    sub_1D22C8050();
    __break(1u);
  }
  v211 = v212;
  v267[31] = v212;
  v30 = sub_1D22BA738();
  v31 = v267;
  v267[30] = v30;
  v210 = v31[30] == 0;
  v209 = v210;
  sub_1D22C472C(v313);
  if (v209)
  {
    v32 = v226;
    v204 = objc_msgSend(v211, sel_ssmlRepresentation);
    v33 = sub_1D22C7DC8();
    v34 = v267;
    v35 = v33;
    v36 = v204;
    v205 = v35;
    v206 = v37;
    v267[1] = v35;
    v34[2] = v37;

    swift_bridgeObjectRetain();
    sub_1D22C7D2C();
    v207 = v32;
    v208 = v32;
    if (v32)
    {
      v100 = v208;
      v81 = v208;
      *v267 = v100;
      v101 = (id)AXTTSLogCommon();
      if (v101)
      {
        v99 = v101;
      }
      else
      {
        sub_1D22C8050();
        __break(1u);
      }
      v97 = v99;
      v95 = sub_1D22C7F60();
      v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC76F08);
      v94 = sub_1D22C808C();
      v92 = v82;
      swift_getErrorValue();
      v90 = sub_1D22C80B0();
      v91 = v83;
      v92[3] = MEMORY[0x1E0DEA968];
      v84 = sub_1D22C6890();
      v85 = v90;
      v86 = v91;
      v87 = v92;
      v88 = v84;
      v89 = v94;
      v92[4] = v88;
      *v87 = v85;
      v87[1] = v86;
      sub_1D22BD5C4();
      v96 = v89;
      sub_1D22C7D44();
      swift_bridgeObjectRelease();

      objc_msgSend(v234, sel_cancelSpeechRequest);
      v98 = sub_1D22C7D50();

      swift_bridgeObjectRelease();
      v237 = v98;
      return;
    }
    v172 = sub_1D22BB71C();
    v173 = sub_1D22BBC9C();
    sub_1D22BF4F8();
    v183 = sub_1D22C7D20();
    v184 = v38;
    v285 = v183;
    v286 = v38;
    v201 = 0;
    sub_1D22C7CE4();
    v180 = (id)sub_1D22C7CD8();
    v179 = objc_msgSend(v211, sel_ssmlRepresentation);
    v174 = sub_1D22C7DC8();
    v175 = v39;
    swift_bridgeObjectRetain();
    v40 = v249;
    v41 = v175;
    v42 = v247;
    v43 = v183;
    v44 = v184;
    *v249 = v174;
    v40[1] = v41;
    v40[2] = v43;
    v40[3] = v44;
    (*(void (**)(void))(v42 + 104))();
    v178 = objc_msgSend(v211, sel_jobIdentifier);
    v176 = sub_1D22C7DC8();
    v177 = v45;
    sub_1D22C7CCC();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t *, uint64_t))(v247 + 8))(v249, v246);
    v182 = sub_1D22BB060();
    v46 = v211;
    v47 = swift_allocObject();
    *(_QWORD *)(v47 + 16) = v211;
    v283 = sub_1D22C6934;
    v284 = v47;
    v278 = MEMORY[0x1E0C809B0];
    v279 = 1107296256;
    v192 = 0;
    v280 = 0;
    v281 = sub_1D22BF708;
    v282 = &block_descriptor_14;
    v181 = _Block_copy(&v278);
    swift_release();
    objc_msgSend(v182, sel_setMatchLogger_, v181);
    _Block_release(v181);

    v186 = sub_1D22BB060();
    swift_bridgeObjectRetain();
    v185 = (id)sub_1D22C7DBC();
    swift_bridgeObjectRelease();
    v187 = objc_msgSend(v186, sel_processText_, v185);

    sub_1D22BA918(v187);
    v188 = sub_1D22BA8B4();
    v195 = 0x1F43A1000uLL;
    v193 = objc_msgSend(v188, (SEL)0x1F43A18E9);
    v189 = sub_1D22C7DC8();
    v190 = v48;

    v191 = sub_1D22C7DF8();
    swift_bridgeObjectRelease();
    sub_1D22BACF0(v191, v192);

    v194 = sub_1D22C6998();
    v196 = sub_1D22BA8B4();
    v199 = objc_msgSend(v196, (SEL)(v195 + 2281));
    v197 = sub_1D22C7DC8();
    v198 = v49;

    v200 = sub_1D22BF7F8();
    v277 = v200;
    v202 = sub_1D22C69FC();
    v203 = sub_1D22BADD8();
    if (v203)
    {
      v171 = v203;
    }
    else
    {
      sub_1D22C8050();
      __break(1u);
    }
    v170 = v171;
    v50 = v200;
    v51 = sub_1D22BF83C(v170, v200);
    sub_1D22BA79C(v51);
    v276 = sub_1D22BA738();
    if (v276)
    {
      v166 = &v276;
      v169 = v276;
      v52 = v276;
      sub_1D22C472C(v166);
      v167 = sub_1D22C6A60();
      sub_1D22BB194();
      v168 = sub_1D22BF880();
      objc_msgSend(v169, sel_setPitchModulation_);

    }
    else
    {
      sub_1D22C472C(&v276);
    }
    v275 = sub_1D22BA738();
    if (v275)
    {
      v164 = &v275;
      v165 = v275;
      v53 = v275;
      sub_1D22C472C(v164);
      v54 = v234;
      objc_msgSend(v165, sel_setDelegate_, v234);
      swift_unknownObjectRelease();

    }
    else
    {
      sub_1D22C472C(&v275);
    }

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v252 + 8))(v254, v251);
    swift_bridgeObjectRelease();
    v163 = v207;
  }
  else
  {
    v163 = v226;
  }
  v161 = v163;
  v162 = sub_1D22BA738();
  if (!v162)
  {
    v159 = sub_1D22C7D50();

    v237 = v159;
    return;
  }
  v160 = v162;
  v158 = v162;
  v267[29] = v162;
  v55 = sub_1D22BAA2C();
  v56 = v267;
  v267[28] = v55;
  v157 = v56[28] == 0;
  v156 = v157;
  sub_1D22C472C(v312);
  if (v156)
  {
    sub_1D22BAA90(objc_msgSend(v158, sel_nextBuffer));
    v57 = sub_1D22BAA2C();
    v58 = v267;
    v267[7] = v57;
    v155 = v58[7] == 0;
    v154 = v155;
    sub_1D22C472C(&v294);
    v59 = v234;
    if (v154)
    {
      v153 = 1;
    }
    else
    {
      v60 = sub_1D22BAA2C();
      v61 = v267;
      v267[6] = v60;
      if (v61[6])
      {
        v149 = &v293;
        v150 = (id)v267[6];
        v62 = v150;
        sub_1D22C472C(v149);
        v151 = objc_msgSend(v150, sel_frameLength);

        v152 = v151;
      }
      else
      {
        v148 = 0;
        sub_1D22C472C(&v293);
        v152 = v148 | 0x100000000;
      }
      v289 = v152;
      v290 = BYTE4(v152) & 1;
      v291 = 0;
      v292 = 0;
      v147 = (v152 & 0x100000000) == 0
          && (sub_1D22C6874((uint64_t)&v289, (uint64_t)&v288), (v292 & 1) == 0)
          && v288 == v291;
      v153 = v147;
    }
    v146 = v153;

    if ((v146 & 1) != 0)
    {
      v144 = 0;
      sub_1D22BAA90(0);
      sub_1D22BA79C(v144);
      sub_1D22BABBC((uint64_t)v144);
      *v263 = 128;
      v63 = sub_1D22C808C();
      sub_1D22BA668(v63);
      v145 = sub_1D22C7D50();

      v237 = v145;
      return;
    }
    sub_1D22BABBC(0);
  }
  v64 = v255;
  v267[27] = 0;
  v307 = 0;
  v308 = v64;
  sub_1D22C7F30();
  for (j = v161; ; j = v141)
  {
    v141 = j;
    sub_1D22C8038();
    v142 = v305[4];
    if ((v306 & 1) != 0)
      break;
    v140 = v142;
    v136 = v142;
    v304 = v142;
    v138 = sub_1D22BA604();
    swift_bridgeObjectRetain();
    v137 = &v303;
    v267[19] = v138;
    v139 = sub_1D22C7F24();
    sub_1D22C4754();
    swift_bridgeObjectRelease();
    if ((v139 & 1) != 0)
      break;
    v135 = sub_1D22BAB5C();
    v65 = sub_1D22BAA2C();
    v66 = v267;
    v267[17] = v65;
    if (v66[17])
    {
      v130 = &v301;
      v131 = (id)v267[17];
      v67 = v131;
      sub_1D22C472C(v130);
      v132 = objc_msgSend(v131, sel_frameLength);

      v134 = v132;
    }
    else
    {
      v133 = 0;
      sub_1D22C472C(&v301);
      v134 = v133 | 0x100000000;
    }
    v299 = v134;
    v300 = BYTE4(v134) & 1;
    if ((v134 & 0x100000000) != 0)
      v302 = 0;
    else
      v302 = v299;
    if (v135 >= v302)
    {
      sub_1D22BAA90(objc_msgSend(v158, sel_nextBuffer));
      v68 = sub_1D22BAA2C();
      v69 = v267;
      v267[8] = v68;
      v129 = v69[8] == 0;
      v128 = v129;
      sub_1D22C472C(&v295);
      v70 = v234;
      if (v128)
      {
        v127 = 1;
      }
      else
      {
        v126 = sub_1D22BAA2C();
        if (v126)
        {
          v125 = v126;
          v123 = v126;
          v124 = objc_msgSend(v126, sel_frameLength);

          v127 = v124 == 0;
        }
        else
        {
          sub_1D22C8050();
          __break(1u);
        }
      }
      v122 = v127;

      if (v122)
      {
        sub_1D22BAA90(0);
        break;
      }
      sub_1D22BABBC(0);
    }
    v121 = sub_1D22BAA2C();
    if (v121)
    {
      v120 = v121;
    }
    else
    {
      sub_1D22C8050();
      __break(1u);
    }
    v117 = v120;
    v118 = objc_msgSend(v120, sel_mutableAudioBufferList);

    v119 = v118[2];
    if (v119)
    {
      v116 = v119;
    }
    else
    {
      sub_1D22C8050();
      __break(1u);
    }
    v71 = v136;
    v113 = v116;
    v267[15] = v116;
    v112 = &v297;
    v297 = v71;
    v110 = sub_1D22C58F8();
    v111 = sub_1D22C5960();
    sub_1D22C59C8();
    sub_1D22C7EAC();
    v114 = v267[14];
    v72 = sub_1D22BAB5C();
    v73 = v267;
    *(_DWORD *)(v229 + 4 * v114) = *(_DWORD *)(v113 + 4 * v72);
    v74 = v73[27];
    v115 = v74 + 1;
    if (__OFADD__(v74, 1))
      goto LABEL_90;
    v267[27] = v115;
    v107 = sub_1D22BAC24();
    v108 = v76;
    v77 = __OFADD__(*v76, 1);
    v109 = *v76 + 1;
    v78 = v77;
    if ((v78 & 1) != 0)
      goto LABEL_91;
    v79 = v107;
    *v108 = v109;
    ((void (*)(uint64_t *, _QWORD))v79)(&v296, 0);
  }
  v80 = v267[27];
  v106 = 4 * v80;
  if ((unsigned __int128)(4 * (__int128)v80) >> 64 == (4 * v80) >> 63)
  {
    v104 = v305;
    v267[21] = v106;
    v102 = sub_1D22C3D44();
    v103 = sub_1D22C3DAC();
    sub_1D22C5B44();
    sub_1D22C7E7C();
    HIDWORD(v323) = v305[3];
    LODWORD(v323) = 1;
    v105 = sub_1D22C7D50();

    v237 = v105;
    return;
  }
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
}

float sub_1D22BF4F8()
{
  return 41.0;
}

void sub_1D22BF504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v30 = a1;
  v31 = a2;
  v34 = a3;
  v35 = a4;
  v32 = a5;
  v33 = a6;
  v29 = a7;
  v36 = a8;
  v51 = 0;
  v52 = 0;
  v49 = 0;
  v50 = 0;
  v47 = 0;
  v48 = 0;
  v46 = 0;
  v45 = 0;
  v27 = 0;
  v42 = sub_1D22C7CC0();
  v40 = *(_QWORD *)(v42 - 8);
  v28 = (*(_QWORD *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](0, v31);
  v41 = (uint64_t *)((char *)&v27 - v28);
  v51 = v8;
  v52 = v9;
  v49 = v10;
  v50 = v11;
  v47 = v12;
  v48 = v13;
  v46 = v14;
  v45 = v15;
  sub_1D22C7CE4();
  v44 = (id)sub_1D22C7CD8();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v43 = objc_msgSend(v29, sel_identifier);
  v16 = sub_1D22C7DC8();
  v17 = v31;
  v18 = v32;
  v19 = v33;
  v20 = v34;
  v21 = v35;
  v22 = v40;
  v23 = v16;
  v24 = v41;
  *v41 = v30;
  v24[1] = v17;
  v24[2] = v18;
  v24[3] = v19;
  v24[4] = v20;
  v24[5] = v21;
  v24[6] = v23;
  v24[7] = v25;
  (*(void (**)(void))(v22 + 104))();
  v39 = objc_msgSend(v36, sel_jobIdentifier);
  v37 = sub_1D22C7DC8();
  v38 = v26;
  sub_1D22C7CCC();
  swift_bridgeObjectRelease();

  (*(void (**)(_QWORD *, uint64_t))(v40 + 8))(v41, v42);
}

uint64_t sub_1D22BF708(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *);
  uint64_t v16;
  uint64_t v18;
  uint64_t v20;

  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a2;
  v16 = sub_1D22C7DC8();
  v20 = v7;
  v8 = a5;
  v14 = sub_1D22C7DC8();
  v18 = v9;
  v10 = a6;
  v15(v16, v20, a3, a4, v14, v18, a6);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

id sub_1D22BF7F8()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1D22C4EC4();
}

id sub_1D22BF83C(void *a1, void *a2)
{
  id v2;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1D22C4F1C(a1, a2);
}

id sub_1D22BF880()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1D22C4F70();
}

void sub_1D22BF8BC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  const __CFAllocator *v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  id v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  id *v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  CFBundleRef v77;
  id v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  CFBundleRef v83;
  CFURLRef v84;
  void (*v85)(char *, uint64_t);
  CFAllocatorRef v86;
  CFBundleRef v87;
  id v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  int v94;
  int v95;
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id *v102;
  id v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  id v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  id v128;
  _QWORD v129[3];
  void *v130;
  uint64_t v131;
  void *v132;
  CFBundleRef v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD v139[2];
  uint64_t v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;

  v120 = a1;
  v145 = 0;
  v144 = 0;
  v143 = 0;
  v133 = 0;
  v109 = 0;
  v130 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC76EF8);
  v110 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](v2, v3);
  v111 = (uint64_t)&v40 - v110;
  v118 = 0;
  v112 = sub_1D22C7C3C();
  v113 = *(_QWORD *)(v112 - 8);
  v114 = (*(_QWORD *)(v113 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x1E0C80A78](v118, v4);
  v115 = (char *)&v40 - v114;
  v116 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](v5, (char *)&v40 - v114);
  v117 = (char *)&v40 - v116;
  v145 = (char *)&v40 - v116;
  v127 = sub_1D22C7CC0();
  v125 = *(_QWORD *)(v127 - 8);
  v119 = (*(_QWORD *)(v125 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](v118, v7);
  v126 = (char *)&v40 - v119;
  v144 = v8;
  v143 = v1;
  sub_1D22C7CE4();
  v128 = (id)sub_1D22C7CD8();
  (*(void (**)(char *, _QWORD, uint64_t))(v125 + 104))(v126, *MEMORY[0x1E0DBEDE8], v127);
  v124 = objc_msgSend(v120, sel_jobIdentifier);
  v121 = sub_1D22C7DC8();
  v123 = v9;
  sub_1D22C7CCC();
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(v125 + 8))(v126, v127);
  v142 = sub_1D22BAF08();
  if (v142)
  {
    v102 = &v142;
    v103 = v142;
    v10 = v142;
    sub_1D22C472C(v102);
    v104 = objc_msgSend(v103, sel_identifier);
    v105 = sub_1D22C7DC8();
    v106 = v11;

    v107 = v105;
    v108 = v106;
  }
  else
  {
    v46 = 0;
    sub_1D22C472C(&v142);
    v107 = v46;
    v108 = v46;
  }
  v100 = v108;
  v99 = v107;
  swift_bridgeObjectRetain();
  v97 = objc_msgSend(v120, sel_voice);
  v96 = objc_msgSend(v97, sel_identifier);
  v98 = sub_1D22C7DC8();
  v101 = v12;

  swift_bridgeObjectRetain();
  v139[0] = v99;
  v139[1] = v100;
  v140 = v98;
  v141 = v101;
  if (v100)
  {
    sub_1D22C4BD8(v139, v129);
    if (v141)
    {
      v90 = v140;
      v93 = v139;
      v91 = v141;
      swift_bridgeObjectRetain();
      v92 = v129;
      v94 = sub_1D22C7E1C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1D22C4A14();
      sub_1D22C4A14();
      v95 = v94;
      goto LABEL_9;
    }
    sub_1D22C4A14();
    goto LABEL_11;
  }
  if (v141)
  {
LABEL_11:
    sub_1D22C489C();
    v95 = 0;
    goto LABEL_9;
  }
  sub_1D22C4A14();
  v95 = 1;
LABEL_9:
  v89 = v95;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if ((v89 & 1) != 0)
    goto LABEL_25;
  v13 = v122;
  v88 = objc_msgSend(v120, sel_voice);
  (*(void (**)(void))((*v13 & *MEMORY[0x1E0DEEDD8]) + class metadata base offset for MTMacinTalkAUSPAudioUnit + 488))();

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112) == 1)
  {
    sub_1D22C48D0(v111);
    v47 = 25;
    v30 = sub_1D22C8080();
    v53 = &v137;
    v137 = v30;
    v138 = v31;
    v51 = 1;
    sub_1D22C7E10();
    v48 = v32;
    sub_1D22C8074();
    swift_bridgeObjectRelease();
    v33 = objc_msgSend(v120, sel_voice);
    v50 = &v136;
    v136 = v33;
    v56 = 0;
    v49 = sub_1D22C4940();
    sub_1D22C49A4();
    sub_1D22C8068();

    sub_1D22C7E10();
    v52 = v34;
    sub_1D22C8074();
    swift_bridgeObjectRelease();
    v55 = v137;
    v54 = v138;
    swift_bridgeObjectRetain();
    sub_1D22C4A14();
    v57 = sub_1D22C7E04();
    v59 = v35;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC76F08);
    v58 = sub_1D22C808C();
    sub_1D22C7C60();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v14 = v115;
  (*(void (**)(char *, uint64_t, uint64_t))(v113 + 32))(v117, v111, v112);
  v86 = (CFAllocatorRef)*MEMORY[0x1E0C9AE00];
  v15 = v86;
  (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v14, v117, v112);
  v84 = (CFURLRef)sub_1D22C7C30();
  v87 = CFBundleCreate(v86, v84);

  v85 = *(void (**)(char *, uint64_t))(v113 + 8);
  v85(v115, v112);

  if (!v87)
  {
    v60 = 26;
    v25 = sub_1D22C8080();
    v64 = &v134;
    v134 = v25;
    v135 = v26;
    v62 = 1;
    sub_1D22C7E10();
    v61 = v27;
    sub_1D22C8074();
    swift_bridgeObjectRelease();
    sub_1D22C4A3C();
    sub_1D22C8068();
    v67 = 0;
    sub_1D22C7E10();
    v63 = v28;
    sub_1D22C8074();
    swift_bridgeObjectRelease();
    v66 = v134;
    v65 = v135;
    swift_bridgeObjectRetain();
    sub_1D22C4A14();
    v68 = sub_1D22C7E04();
    v70 = v29;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC76F08);
    v69 = sub_1D22C808C();
    sub_1D22C7C60();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v85(v117, v112);
    return;
  }
  v83 = v87;
  v16 = v109;
  v77 = v87;
  v133 = v87;
  v17 = objc_msgSend((id)objc_opt_self(), sel_loadVoiceBundle_, v87);
  sub_1D22BAE3C(v17);
  v78 = sub_1D22BB060();
  objc_msgSend(v78, sel_reset);

  v131 = sub_1D22BC214();
  v18 = v120;
  v79 = &v40;
  MEMORY[0x1E0C80A78](&v40, v19);
  v80 = &v40 - 4;
  *(&v40 - 2) = v20;
  v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946910);
  sub_1D22C4AD4();
  sub_1D22C7E64();
  v82 = v16;
  if (v16)
  {
    __break(1u);
  }
  else
  {

    sub_1D22C4754();
    v76 = v132;
    if (!v132)
      goto LABEL_21;
    v75 = v76;
    v21 = v82;
    v71 = v76;
    v130 = v76;
    sub_1D22C7CFC();
    v129[2] = sub_1D22C7CF0();
    v22 = v122;
    v72 = &v40;
    MEMORY[0x1E0C80A78](&v40, v23);
    v73 = &v40 - 4;
    *(&v40 - 2) = v24;
    v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC76F20);
    sub_1D22C4B68();
    sub_1D22C7E70();
    if (!v21)
    {

      sub_1D22C4754();
LABEL_21:

      v85(v117, v112);
LABEL_25:
      sub_1D22BAF6C(objc_msgSend(v120, sel_voice));
      v45 = 0;
      v42 = sub_1D22C41D4();
      v43 = sub_1D22C808C();
      v41 = v36;
      v37 = v120;
      v38 = v43;
      *v41 = v120;
      sub_1D22BD5C4();
      sub_1D22BA668(v38);
      sub_1D22C4238();
      v44 = 1;
      sub_1D22C7E10();
      v39 = sub_1D22BA9E8();
      sub_1D22BA918(v39);
      sub_1D22BACF0((uint64_t)v45, v44);
      sub_1D22BA79C(v45);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1D22C06E8(id *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  void *v20;
  id v21;

  v21 = 0;
  v20 = 0;
  v21 = *a1;
  v20 = a2;
  v16 = objc_msgSend(v21, sel_voiceId);
  if (v16)
  {
    v11 = sub_1D22C7DC8();
    v12 = v2;

    v13 = v11;
    v14 = v12;
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  swift_bridgeObjectRetain();
  v8 = objc_msgSend(a2, sel_voice);
  v7 = objc_msgSend(v8, sel_identifier);
  v9 = sub_1D22C7DC8();
  v10 = v3;

  swift_bridgeObjectRetain();
  v18[0] = v13;
  v18[1] = v14;
  v18[2] = v9;
  v19 = v10;
  if (!v14)
  {
    if (!v19)
    {
      sub_1D22C4A14();
      v6 = 1;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  sub_1D22C4BD8(v18, &v17);
  if (!v19)
  {
    sub_1D22C4A14();
LABEL_11:
    sub_1D22C489C();
    v6 = 0;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = sub_1D22C7E1C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1D22C4A14();
  v6 = v5;
LABEL_10:
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v6 & 1;
}

void sub_1D22C094C(uint64_t *a1)
{
  uint64_t v1;
  id v2;

  v1 = *a1;
  v2 = sub_1D22BB060();
  objc_msgSend(v2, sel_loadRuleSet_, v1);

}

void sub_1D22C09B4(void *a1, int a2, id a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  sub_1D22BF8BC(a3);

}

uint64_t sub_1D22C0A08()
{
  type metadata accessor for TTSSpeechGender();
  sub_1D22C56F4();
  if ((sub_1D22C7DB0() & 1) != 0)
    return 2;
  else
    return (sub_1D22C7DB0() & 1) != 0;
}

id sub_1D22C0AE4(id a1)
{
  id v1;
  id v4;

  v1 = a1;
  sub_1D22C0B50();

  sub_1D22C4940();
  v4 = (id)sub_1D22C7EB8();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1D22C0B50()
{
  uint64_t v0;
  id v1;
  unint64_t v2;
  id v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[16];
  id v10;
  uint64_t v11;
  uint64_t v12;

  v12 = v0;
  v11 = sub_1D22BC214();
  v1 = v4;
  v10 = v4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946910);
  v6 = sub_1D22C4940();
  v2 = sub_1D22C578C();
  v8 = sub_1D22C12D8((void (*)(char *, char *))sub_1D22C5764, (uint64_t)v9, v5, v6, MEMORY[0x1E0DEDCE8], v2, MEMORY[0x1E0DEDD18], v7);

  sub_1D22C4754();
  return v8;
}

void sub_1D22C0C38(void *a1, int a2, id a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  sub_1D22C4940();
  sub_1D22C7EC4();
  sub_1D22C0C9C();

}

uint64_t sub_1D22C0C9C()
{
  return swift_bridgeObjectRelease();
}

void sub_1D22C0CCC(id *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v36;
  _DWORD v37[10];
  id v38;
  _QWORD *v39;
  id v40;

  v40 = 0;
  v39 = 0;
  v38 = 0;
  v40 = *a1;
  v39 = a2;
  sub_1D22C4940();
  v36 = objc_msgSend(v40, sel_name);
  if (v36)
  {
    sub_1D22C7DC8();
    v32 = v3;

    v33 = v32;
  }
  else
  {
    v33 = 0;
  }
  if (!v33)
  {
    LOBYTE(v8) = 2;
    v11 = 245;
    LODWORD(v14) = 0;
    sub_1D22C8050();
    __break(1u);
  }
  v31 = objc_msgSend(v40, sel_voiceId, v8, v11, v14);
  if (v31)
  {
    sub_1D22C7DC8();
    v29 = v4;

    v30 = v29;
  }
  else
  {
    v30 = 0;
  }
  if (!v30)
  {
    LOBYTE(v9) = 2;
    v12 = 245;
    LODWORD(v15) = 0;
    sub_1D22C8050();
    __break(1u);
  }
  v28 = objc_msgSend(v40, sel_languages, v9, v12, v15);
  if (v28)
  {
    v26 = sub_1D22C7EC4();

    v27 = v26;
  }
  else
  {
    v27 = 0;
  }
  if (!v27)
  {
    LOBYTE(v10) = 2;
    v13 = 245;
    LODWORD(v16) = 0;
    sub_1D22C8050();
    __break(1u);
  }
  v25 = objc_msgSend(v40, sel_languages, v10, v13, v16);
  if (v25)
  {
    v23 = sub_1D22C7EC4();

    v24 = v23;
  }
  else
  {
    v24 = 0;
  }
  if (!v24)
  {
    sub_1D22C8050();
    __break(1u);
  }
  v22 = sub_1D22C1274();
  v38 = v22;
  v5 = objc_msgSend(v40, sel_gender);
  objc_msgSend(v22, sel_setGender_, (*(uint64_t (**)(id))((*a2 & *MEMORY[0x1E0DEEDD8])+ class metadata base offset for MTMacinTalkAUSPAudioUnit+ 480))(v5));
  objc_msgSend(v22, sel_setIsFirstParty_, 1);
  v6 = a2;
  objc_msgSend(a2, sel_componentDescription);
  v17 = v37[5];
  v18 = v37[6];
  v19 = v37[7];
  v20 = v37[8];
  v21 = v37[9];

  v37[0] = v17;
  v37[1] = v18;
  v37[2] = v19;
  v37[3] = v20;
  v37[4] = v21;
  objc_msgSend(v22, sel_setAuComponentDesc_, v37);
  v7 = v22;
  *a3 = v22;

}

id sub_1D22C1274()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1D22C4F94();
}

uint64_t sub_1D22C12D8(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v16;
  _QWORD v17[2];
  void (*v18)(char *, _QWORD);
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  void (*v32)(char *, char *);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t AssociatedTypeWitness;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v32 = a1;
  v33 = a2;
  v55 = a3;
  v46 = a4;
  v34 = a5;
  v54 = a6;
  v36 = a8;
  v37 = "Fatal error";
  v38 = "Index out of bounds";
  v39 = "Swift/Collection.swift";
  v40 = "Range requires lowerBound <= upperBound";
  v41 = "Swift/Range.swift";
  v42 = "Index out of range";
  v69 = a3;
  v68 = a4;
  v67 = a5;
  v43 = *(_QWORD *)(a5 - 8);
  v44 = (*(_QWORD *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](a1, a2);
  v45 = (char *)v17 - v44;
  v47 = 0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v49 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v50 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x1E0C80A78](v47, v54);
  v51 = (char *)v17 - v50;
  v52 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](v8, v10);
  v53 = (char *)v17 - v52;
  v56 = swift_getAssociatedTypeWitness();
  v57 = *(_QWORD *)(v56 - 8);
  v58 = (*(_QWORD *)(v57 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = MEMORY[0x1E0C80A78](v55, v54);
  v59 = (char *)v17 - v58;
  v60 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](v11, v13);
  v61 = (char *)v17 - v60;
  v62 = sub_1D22C7F00();
  if (v62)
  {
    v66 = sub_1D22C8020();
    v31 = sub_1D22C802C();
    sub_1D22C8008();
    result = sub_1D22C7EF4();
    if (v62 >= 0)
    {
      v29 = 0;
      for (i = v35; ; i = v20)
      {
        v27 = i;
        v28 = v29;
        if (v29 == v62)
          goto LABEL_17;
        if (v28 < 0 || v28 >= v62)
          goto LABEL_16;
        v64 = v28;
        if (v62 < 0)
          goto LABEL_15;
        if (v28 >= v62)
          break;
        v26 = v28 + 1;
        if (__OFADD__(v28, 1))
        {
          __break(1u);
          return result;
        }
        v65 = 0;
        v25 = v26;
LABEL_18:
        v24 = v25;
        if ((v65 & 1) != 0)
        {
          (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v59, v61, v56);
          sub_1D22C7FF0();
          (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v56);
          v21 = v66;
          swift_retain();
          swift_release();
          v22 = v21;
          v23 = v27;
          return v22;
        }
        v19 = &v63;
        v18 = (void (*)(char *, _QWORD))sub_1D22C7F48();
        (*(void (**)(char *))(v49 + 16))(v51);
        v18(v19, 0);
        v16 = v27;
        v32(v51, v45);
        v20 = v16;
        if (v16)
        {
          (*(void (**)(char *, uint64_t))(v49 + 8))(v51, AssociatedTypeWitness);
          (*(void (**)(char *, uint64_t))(v57 + 8))(v61, v56);
          sub_1D22C67C4();
          (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v36, v45, v34);
          return v17[1];
        }
        (*(void (**)(char *, uint64_t))(v49 + 8))(v51, AssociatedTypeWitness);
        sub_1D22C8014();
        sub_1D22C7F0C();
        result = v20;
        v29 = v24;
      }
      sub_1D22C8050();
      __break(1u);
LABEL_15:
      sub_1D22C8050();
      __break(1u);
LABEL_16:
      sub_1D22C805C();
      __break(1u);
LABEL_17:
      v64 = 0;
      v65 = 1;
      v25 = v28;
      goto LABEL_18;
    }
    sub_1D22C8050();
    __break(1u);
  }
  v22 = sub_1D22C7ED0();
  v23 = v35;
  return v22;
}

uint64_t sub_1D22C1AC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD v7[2];
  id v8;
  void *v9;
  int v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = 0;
  v18 = 0;
  v21 = sub_1D22C7CC0();
  v20 = *(_QWORD *)(v21 - 8);
  v19 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](0, v1);
  v22 = (char *)v7 - v19;
  v33 = v0;
  sub_1D22C7CE4();
  v23 = (id)sub_1D22C7CD8();
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v22, *MEMORY[0x1E0DBEDE0], v21);
  v26 = sub_1D22BA604();
  swift_bridgeObjectRetain();
  v25 = v30;
  v30[0] = v26;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC76F30);
  sub_1D22C57FC();
  sub_1D22C7F18();
  sub_1D22C4754();
  v27 = (id)v30[1];
  swift_bridgeObjectRelease();
  if (v27)
  {
    v17 = v27;
    v11 = v27;
    v12 = objc_msgSend(v27, sel_jobIdentifier);
    v13 = sub_1D22C7DC8();
    v14 = v2;

    v15 = v13;
    v16 = v14;
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  v28 = v15;
  v29 = v16;
  if (v16)
  {
    v31 = v28;
    v32 = v29;
  }
  else
  {
    v31 = sub_1D22C7E10();
    v32 = v3;
    sub_1D22C4A14();
  }
  v7[1] = v32;
  sub_1D22C7CCC();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v21);

  v8 = sub_1D22BB060();
  objc_msgSend(v8, sel_cancelProcessing);

  v9 = 0;
  sub_1D22C41D4();
  v4 = sub_1D22C808C();
  sub_1D22BA668(v4);
  sub_1D22C4238();
  v10 = 1;
  sub_1D22C7E10();
  v5 = sub_1D22BA9E8();
  sub_1D22BA918(v5);
  sub_1D22BAA90(v9);
  sub_1D22BABBC((uint64_t)v9);
  return sub_1D22BACF0((uint64_t)v9, v10);
}

void sub_1D22C1D98(id a1)
{
  id v1;

  v1 = a1;
  sub_1D22C1AC4();

}

void sub_1D22C1DD4(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v11;

  sub_1D22BC214();
  v2 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946910);
  sub_1D22C4AD4();
  sub_1D22C7E64();

  sub_1D22C4754();
  if (v11)
  {
    v8 = objc_msgSend(v11, sel_contentPath);
    if (v8)
    {
      sub_1D22C7DC8();
      v6 = v3;

      v7 = v6;
    }
    else
    {
      v7 = 0;
    }
    if (v7)
    {
      sub_1D22C7C24();
      v4 = sub_1D22C7C3C();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 0, 1);
      swift_bridgeObjectRelease();

      return;
    }

  }
  v5 = sub_1D22C7C3C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, 1);
}

uint64_t sub_1D22C2010(id *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  void *v19;
  id v20;

  v20 = 0;
  v19 = 0;
  v20 = *a1;
  v19 = a2;
  v15 = objc_msgSend(v20, sel_voiceId);
  if (v15)
  {
    v10 = sub_1D22C7DC8();
    v11 = v2;

    v12 = v10;
    v13 = v11;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  swift_bridgeObjectRetain();
  v7 = objc_msgSend(a2, sel_identifier);
  v8 = sub_1D22C7DC8();
  v9 = v3;
  swift_bridgeObjectRetain();
  v17[0] = v12;
  v17[1] = v13;
  v17[2] = v8;
  v18 = v9;
  if (!v13)
  {
    if (!v18)
    {
      sub_1D22C4A14();
      v6 = 1;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  sub_1D22C4BD8(v17, &v16);
  if (!v18)
  {
    sub_1D22C4A14();
LABEL_11:
    sub_1D22C489C();
    v6 = 0;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = sub_1D22C7E1C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1D22C4A14();
  v6 = v5;
LABEL_10:
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v6 & 1;
}

void sub_1D22C2250(uint64_t a1)
{
  id v1;
  _QWORD *v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t, uint64_t);
  id v8;
  id v9;
  void *v11;
  void *v12;

  sub_1D22BA604();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC76F30);
  sub_1D22C57FC();
  sub_1D22C7F18();
  sub_1D22C4754();
  if (v12)
  {
    swift_bridgeObjectRelease();
    sub_1D22C5894();
    sub_1D22C8080();
    sub_1D22C7E10();
    sub_1D22C8074();
    swift_bridgeObjectRelease();
    sub_1D22C58F8();
    sub_1D22C5960();
    sub_1D22C59C8();
    sub_1D22C7EAC();
    sub_1D22C8068();
    sub_1D22C7E10();
    sub_1D22C8074();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1D22C4A14();
    sub_1D22C7E04();
    if ((unsigned __int128)(4 * (__int128)a1) >> 64 == (4 * a1) >> 63)
    {
      v8 = sub_1D22C2680();
      v1 = v11;
      v9 = objc_msgSend(v11, sel_speechSynthesisOutputMetadataBlock);
      if (v9)
      {
        *(_QWORD *)(swift_allocObject() + 16) = v9;
        v7 = sub_1D22C5A6C;
      }
      else
      {
        v7 = 0;
      }

      if (v7)
      {
        v6 = v7;
      }
      else
      {
        sub_1D22C8050();
        __break(1u);
      }
      v5 = sub_1D22C808C();
      v4 = v2;
      v3 = v8;
      *v4 = v8;
      sub_1D22BD5C4();
      v6(v5, (uint64_t)v12);
      swift_bridgeObjectRelease();
      swift_release();

    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

id sub_1D22C2680()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1D22C507C();
}

void sub_1D22C26CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;

  sub_1D22C5894();
  v4 = (void *)sub_1D22C7EB8();
  (*(void (**)(void))(a3 + 16))();

}

void sub_1D22C2724(id a1, uint64_t a2, uint64_t a3)
{
  id v3;

  v3 = a1;
  sub_1D22C2250(a3);

}

void sub_1D22C2770(uint64_t a1)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t, uint64_t);
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  char v31;
  id v32;
  uint64_t v33;
  id v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;

  sub_1D22BA604();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC76F30);
  sub_1D22C57FC();
  sub_1D22C7F18();
  sub_1D22C4754();
  if (v41)
  {
    swift_bridgeObjectRelease();
    v32 = sub_1D22BA8B4();
    sub_1D22C58F8();
    sub_1D22C5960();
    sub_1D22C3E14();
    sub_1D22C7EAC();
    sub_1D22C5A74();
    sub_1D22C7EAC();
    v38 = (char *)objc_msgSend(v32, sel_translateRangeInTransformedString_, v40, v39);
    v33 = v1;

    if (__OFADD__(v38, v33))
    {
      __break(1u);
    }
    else
    {
      if (!&v38[v33])
        goto LABEL_7;
      v29 = sub_1D22BA8B4();
      v30 = objc_msgSend(v29, sel_originalString);
      sub_1D22C7DC8();

      sub_1D22C7F54();
      v31 = v3;
      swift_bridgeObjectRelease();

      if ((v31 & 1) != 0)
      {
LABEL_7:

        return;
      }
      v20 = sub_1D22BA8B4();
      v23 = objc_msgSend(v20, sel_originalString);
      sub_1D22C7DC8();

      sub_1D22C7E58();
      v21 = (id)sub_1D22C7F78();
      swift_bridgeObjectRelease();
      v22 = objc_msgSend(v21, sel_xmlEscaped);
      v27 = sub_1D22C7DC8();
      v28 = v4;

      swift_bridgeObjectRelease();
      v24 = objc_msgSend(v41, sel_ssmlRepresentation);
      v25 = sub_1D22C7DC8();
      v26 = v5;

      v6 = sub_1D22BAC80();
      sub_1D22C2F2C(v27, v28, v6, v7 & 1, v25, v26);
      if ((v8 & 1) != 0)
        goto LABEL_20;
      sub_1D22C7E34();
      v9 = sub_1D22C7E40();
      sub_1D22BACF0(v9, 0);
      sub_1D22C5ADC();
      v37 = sub_1D22C7E28();
      sub_1D22C5894();
      v19 = sub_1D22C7E34();
      if ((unsigned __int128)(4 * (__int128)a1) >> 64 == (4 * a1) >> 63)
      {
        sub_1D22C5B44();
        sub_1D22C7EAC();
        v17 = sub_1D22C369C(1, v37, v19, v36);
        v10 = v35;
        v18 = objc_msgSend(v35, sel_speechSynthesisOutputMetadataBlock);
        if (v18)
        {
          *(_QWORD *)(swift_allocObject() + 16) = v18;
          v16 = sub_1D22C5A6C;
        }
        else
        {
          v16 = 0;
        }

        if (v16)
        {
          v15 = v16;
        }
        else
        {
          sub_1D22C8050();
          __break(1u);
        }
        v14 = sub_1D22C808C();
        v13 = v11;
        v12 = v17;
        *v13 = v17;
        sub_1D22BD5C4();
        v15(v14, (uint64_t)v41);
        swift_bridgeObjectRelease();
        swift_release();

LABEL_20:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1D22C2F2C(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  void (*v15)(uint64_t, uint64_t);
  int v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  unint64_t v37;
  __int128 v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  const char *v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  char v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD v73[4];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;

  v55 = a1;
  v50 = a2;
  v51 = a3;
  v54 = a4;
  v52 = a5;
  v53 = a6;
  v47 = "Fatal error";
  v48 = "Range requires lowerBound <= upperBound";
  v49 = "Swift/Range.swift";
  v78 = 0;
  v79 = 0;
  v76 = 0;
  v77 = 0;
  v74 = 0;
  v75 = 0;
  v72 = 0;
  v56 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EFC76F70) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v57 = (uint64_t)&v18 - v56;
  v78 = MEMORY[0x1E0C80A78](v55, v50);
  v79 = v6;
  v76 = v7;
  v77 = v8 & 1;
  v74 = v9;
  v75 = v10;
  if ((v8 & 1) != 0)
  {
    v73[2] = v52;
    v73[3] = v53;
    v23 = v73;
    v73[0] = v55;
    v73[1] = v50;
    v21 = 0;
    v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(sub_1D22C7C6C() - 8) + 56);
    v22 = 1;
    v15(v57, 1);
    sub_1D22C5ADC();
    v24 = sub_1D22C7F84();
    v25 = v16;
    sub_1D22C5BE8(v57);
    if ((v25 & 1) != 0)
    {
      v18 = 0;
      v19 = 1;
    }
    else
    {
      v20 = v24;
      v18 = v24;
      v19 = 0;
    }
    v42 = v18;
    v43 = v19;
  }
  else
  {
    v46 = v51;
    v44 = v51;
    v72 = v51;
    v45 = (uint64_t *)&v71;
    v71 = v51;
    v70 = MEMORY[0x1D823326C](v52, v53);
    if ((sub_1D22C7DA4() & 1) != 0)
    {
      v42 = 0;
      v43 = 1;
    }
    else
    {
      v66 = v52;
      v67 = v53;
      v64 = v55;
      v65 = v50;
      v41 = MEMORY[0x1D823326C]();
      if (v41 >> 14 < v44 >> 14)
      {
        sub_1D22C8050();
        __break(1u);
      }
      v35 = sub_1D22C7C6C();
      v36 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56);
      v40 = 1;
      v36(v57, 1);
      v37 = sub_1D22C5ADC();
      *(_QWORD *)&v38 = sub_1D22C7F84();
      *((_QWORD *)&v38 + 1) = v11;
      v39 = v12;
      sub_1D22C5BE8(v57);
      v62 = v38;
      v63 = v39 & 1 & v40;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v63 & 1) != 0)
      {
        v60 = v52;
        v61 = v53;
        v58 = v55;
        v59 = v50;
        v34 = sub_1D22C7DF8();
        if (v44 >> 14 < v34 >> 14)
        {
          sub_1D22C8050();
          __break(1u);
        }
        v32 = 1;
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v36)(v57, 1, 1, v35);
        v33 = sub_1D22C7F84();
        v30 = v13;
        v31 = v14;
        sub_1D22C5BE8(v57);
        *(_QWORD *)&v68 = v33;
        *((_QWORD *)&v68 + 1) = v30;
        v69 = v31 & 1 & v32;
      }
      else
      {
        v68 = v62;
        v69 = 0;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = v68;
      if ((v69 & 1) != 0)
      {
        v26 = 0;
        v27 = 1;
      }
      else
      {
        v28 = v29;
        v26 = v29;
        v27 = 0;
      }
      v42 = v26;
      v43 = v27;
    }
  }
  return v42;
}

id sub_1D22C369C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v4;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1D22C50DC(a1, a2, a3, a4);
}

void sub_1D22C36F0(id a1, uint64_t a2, uint64_t a3)
{
  id v3;

  v3 = a1;
  sub_1D22C2770(a3);

}

void sub_1D22C3768(id a1)
{
  id v1;

  v1 = a1;
  sub_1D22C3744();

}

void sub_1D22C37C8(id a1)
{
  id v1;

  v1 = a1;
  sub_1D22C37B4();

}

uint64_t sub_1D22C3804()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);

  sub_1D22C472C((id *)(v0 + qword_1ED9469B8));
  sub_1D22C4754();
  sub_1D22C472C((id *)(v0 + qword_1ED9469E0));

  sub_1D22C472C((id *)(v0 + qword_1ED9469C0));
  sub_1D22C472C((id *)(v0 + qword_1ED9469E8));
  sub_1D22C472C((id *)(v0 + qword_1ED9469F8));

  v2 = qword_1ED946DE0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946878);
  v4 = *(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(v0 + v2);
  ((void (*)(uint64_t, uint64_t))v4)(v0 + qword_1ED946DD8, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(v0 + qword_1ED946DC0, v3);
}

id MTMacinTalkAUSPAudioUnit.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MTMacinTalkAUSPAudioUnit();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D22C3988(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  void (*v5)(uint64_t);

  sub_1D22C472C((id *)(a1 + qword_1ED9469B8));
  sub_1D22C4754();
  sub_1D22C472C((id *)(a1 + qword_1ED9469E0));

  sub_1D22C472C((id *)(a1 + qword_1ED9469C0));
  sub_1D22C472C((id *)(a1 + qword_1ED9469E8));
  sub_1D22C472C((id *)(a1 + qword_1ED9469F8));

  v2 = qword_1ED946DE0;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946878);
  v5 = *(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1 + v2);
  ((void (*)(uint64_t, uint64_t))v5)(a1 + qword_1ED946DD8, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1 + qword_1ED946DC0, v4);
}

Swift::UInt32 __swiftcall String.osType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt32 result;
  _QWORD v11[6];
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  Swift::UInt32 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v18 = v0;
  v19 = v1;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v25 = 0;
  v26 = 0;
  v16 = 0;
  v23 = sub_1D22C7DEC();
  v20 = *(_QWORD *)(v23 - 8);
  v17 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v21 = (char *)v11 - v17;
  v30 = MEMORY[0x1E0C80A78](v18, v19);
  v31 = v2;
  v29 = 0;
  sub_1D22C7DE0();
  sub_1D22C3D38();
  v22 = sub_1D22C7DD4();
  v24 = v3;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v23);
  if ((v24 & 0xF000000000000000) == 0xF000000000000000)
    goto LABEL_8;
  v14 = v22;
  v15 = v24;
  v12 = v24;
  v13 = v22;
  v25 = v22;
  v26 = v24;
  if (sub_1D22C7C54() != 4)
  {
    sub_1D22C3E7C(v13, v12);
    goto LABEL_8;
  }
  v5 = v16;
  sub_1D22C4120(v13, v12);
  v11[5] = v11;
  MEMORY[0x1E0C80A78](v11, v6);
  v7 = &v11[-6];
  v7[2] = v8;
  v7[3] = v9;
  v7[4] = &v29;
  result = sub_1D22C7C48();
  if (!v5)
  {
    sub_1D22C3E7C(v13, v12);
    sub_1D22C3E7C(v13, v12);
LABEL_8:
    v11[3] = &v27;
    v27 = v29;
    v11[1] = sub_1D22C3D44();
    v11[2] = sub_1D22C3DAC();
    sub_1D22C3E14();
    sub_1D22C7E7C();
    return v28;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D22C3D38()
{
  return 0;
}

unint64_t sub_1D22C3D44()
{
  unint64_t v0;
  uint64_t v2;

  v2 = qword_1ED946A08;
  if (!qword_1ED946A08)
  {
    v0 = MEMORY[0x1D82343C4](MEMORY[0x1E0DEE148], MEMORY[0x1E0DEE0F8]);
    atomic_store(v0, (unint64_t *)&qword_1ED946A08);
    return v0;
  }
  return v2;
}

unint64_t sub_1D22C3DAC()
{
  unint64_t v0;
  uint64_t v2;

  v2 = qword_1ED946978;
  if (!qword_1ED946978)
  {
    v0 = MEMORY[0x1D82343C4](MEMORY[0x1E0DEE120], MEMORY[0x1E0DEE0F8]);
    atomic_store(v0, (unint64_t *)&qword_1ED946978);
    return v0;
  }
  return v2;
}

unint64_t sub_1D22C3E14()
{
  unint64_t v0;
  uint64_t v2;

  v2 = qword_1ED946960;
  if (!qword_1ED946960)
  {
    v0 = MEMORY[0x1D82343C4](MEMORY[0x1E0DEBBD8], MEMORY[0x1E0DEBB98]);
    atomic_store(v0, (unint64_t *)&qword_1ED946960);
    return v0;
  }
  return v2;
}

uint64_t sub_1D22C3E7C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (((a2 >> 62) & 3) == 1)
    return swift_release();
  if (((a2 >> 62) & 3) == 2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1D22C3F04(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  char v5;
  uint64_t v7;
  uint64_t v9;

  if (sub_1D22C7C54() < 0)
  {
    sub_1D22C8050();
    __break(1u);
  }
  sub_1D22C7F3C();
  while (1)
  {
    result = sub_1D22C8044();
    if ((v5 & 1) != 0)
      break;
    v7 = *a4 << 8;
    sub_1D22C668C();
    sub_1D22C66F4();
    sub_1D22C675C();
    result = sub_1D22C7E7C();
    if (__CFADD__(v7, v9))
    {
      __break(1u);
      return result;
    }
    *a4 = v7 + v9;
  }
  return result;
}

uint64_t sub_1D22C4120(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (((a2 >> 62) & 3) == 1)
    return swift_retain();
  if (((a2 >> 62) & 3) == 2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1D22C41A8(uint64_t a1)
{
  uint64_t v1;

  return sub_1D22C3F04(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 32));
}

unint64_t sub_1D22C41D4()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = qword_1ED946900;
  if (!qword_1ED946900)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1ED946900);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t sub_1D22C4238()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = qword_1ED9468A8;
  if (!qword_1ED9468A8)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1ED9468A8);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t sub_1D22C429C()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = qword_1ED9468B0;
  if (!qword_1ED9468B0)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1ED9468B0);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  if (*a1 < 0)
  {
    v2 = MEMORY[0x1D82343AC]((char *)a1 + (int)*a1, -(*a1 >> 32), 0);
    *a1 = v2;
    return v2;
  }
  return v4;
}

uint64_t type metadata accessor for AudioUnitParameterOptions()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = qword_1ED9468F8;
  if (!qword_1ED9468F8)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1ED9468F8);
      return v1;
    }
  }
  return v4;
}

unint64_t sub_1D22C440C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = qword_1ED9468E0;
  if (!qword_1ED9468E0)
  {
    v0 = type metadata accessor for AudioUnitParameterOptions();
    v1 = MEMORY[0x1D82343C4](&unk_1D22D94FC, v0);
    atomic_store(v1, (unint64_t *)&qword_1ED9468E0);
    return v1;
  }
  return v3;
}

unint64_t sub_1D22C447C()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = qword_1ED946928;
  if (!qword_1ED946928)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1ED946928);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t sub_1D22C44E0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = qword_1ED946920;
  if (!qword_1ED946920)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED946910);
    v1 = MEMORY[0x1D82343C4](MEMORY[0x1E0DEAF60], v0);
    atomic_store(v1, (unint64_t *)&qword_1ED946920);
    return v1;
  }
  return v3;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  if (*a1 < 0)
  {
    v2 = MEMORY[0x1D82343B8](255, (char *)a1 + (int)*a1, -(*a1 >> 32), 0);
    *a1 = v2;
    return v2;
  }
  return v4;
}

uint64_t type metadata accessor for CMFormatDescription()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = qword_1ED9468C8;
  if (!qword_1ED9468C8)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1ED9468C8);
      return v1;
    }
  }
  return v4;
}

unint64_t sub_1D22C4664()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = qword_1ED946898;
  if (!qword_1ED946898)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1ED946898);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t sub_1D22C46C8()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = qword_1ED9468A0;
  if (!qword_1ED9468A0)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1ED9468A0);
    return ObjCClassMetadata;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1D22C472C(id *a1)
{

}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1D22C4754()
{
  swift_bridgeObjectRelease();
}

unint64_t sub_1D22C477C()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = qword_1ED9468B8;
  if (!qword_1ED9468B8)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1ED9468B8);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_1D22C483C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1D22C4878(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  sub_1D22BDD68(a1, a2, a3, a4, a5, a6, a7, a8, v8);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1D22C489C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_1D22C48D0(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1D22C7C3C();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

unint64_t sub_1D22C4940()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = qword_1ED946940;
  if (!qword_1ED946940)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1ED946940);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t sub_1D22C49A4()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = qword_1EFC76F00;
  if (!qword_1EFC76F00)
  {
    v0 = sub_1D22C4940();
    v1 = MEMORY[0x1D82343C4](MEMORY[0x1E0CB2120], v0);
    atomic_store(v1, (unint64_t *)&qword_1EFC76F00);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1D22C4A14()
{
  swift_bridgeObjectRelease();
}

unint64_t sub_1D22C4A3C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = qword_1EFC76F10;
  if (!qword_1EFC76F10)
  {
    v0 = sub_1D22C7C3C();
    v1 = MEMORY[0x1D82343C4](MEMORY[0x1E0CB0048], v0);
    atomic_store(v1, (unint64_t *)&qword_1EFC76F10);
    return v1;
  }
  return v3;
}

uint64_t sub_1D22C4AAC(id *a1)
{
  uint64_t v1;

  return sub_1D22C06E8(a1, *(void **)(v1 + 16)) & 1;
}

unint64_t sub_1D22C4AD4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = qword_1EFC76F18;
  if (!qword_1EFC76F18)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED946910);
    v1 = MEMORY[0x1D82343C4](MEMORY[0x1E0DEAF38], v0);
    atomic_store(v1, (unint64_t *)&qword_1EFC76F18);
    return v1;
  }
  return v3;
}

void sub_1D22C4B44(uint64_t *a1)
{
  sub_1D22C094C(a1);
}

unint64_t sub_1D22C4B68()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = qword_1EFC76F28;
  if (!qword_1EFC76F28)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFC76F20);
    v1 = MEMORY[0x1D82343C4](MEMORY[0x1E0DEAF38], v0);
    atomic_store(v1, (unint64_t *)&qword_1EFC76F28);
    return v1;
  }
  return v3;
}

_QWORD *sub_1D22C4BD8(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  *a2 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  result = a2;
  a2[1] = v4;
  return result;
}

id sub_1D22C4C14()
{
  id v1;
  id v2;
  id v3;

  v2 = (id)sub_1D22C7DBC();
  v3 = objc_msgSend(v1, sel_initWithOriginalString_);

  swift_bridgeObjectRelease();
  return v3;
}

id sub_1D22C4C6C()
{
  void *v0;

  return objc_msgSend(v0, sel_init);
}

id sub_1D22C4C8C(void *a1)
{
  void *v1;
  id v4;

  v4 = objc_msgSend(v1, sel_initWithCMAudioFormatDescription_);

  return v4;
}

id sub_1D22C4CD0(void *a1)
{
  id v1;
  uint64_t v3;
  id v4;
  id v6;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED946888);
  sub_1D22C6B4C();
  sub_1D22C80A4();
  v6 = objc_msgSend(v4, sel_initWithFormat_error_, a1, v7);
  v1 = 0;

  if (v6)
  {

    return v6;
  }
  else
  {
    sub_1D22C7C18();

    swift_willThrow();
    return (id)v3;
  }
}

id sub_1D22C4E44(void *a1, uint64_t a2)
{
  id v4;
  id v5;
  id v7;

  sub_1D22C46C8();
  v5 = (id)sub_1D22C7EB8();
  v7 = objc_msgSend(v4, sel_initWithAudioUnit_busType_busses_, a1, a2);

  swift_bridgeObjectRelease();
  return v7;
}

id sub_1D22C4EC4()
{
  id v1;
  id v2;
  id v3;

  v2 = (id)sub_1D22C7DBC();
  v3 = objc_msgSend(v1, sel_initWithString_);

  swift_bridgeObjectRelease();
  return v3;
}

id sub_1D22C4F1C(void *a1, void *a2)
{
  void *v2;
  id v6;

  v6 = objc_msgSend(v2, sel_initWithVoice_frontend_);

  return v6;
}

id sub_1D22C4F70()
{
  void *v0;

  return objc_msgSend(v0, sel_initWithFloat_);
}

id sub_1D22C4F94()
{
  id v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v5 = (void *)sub_1D22C7DBC();
  v4 = (void *)sub_1D22C7DBC();
  v3 = (id)sub_1D22C7EB8();
  v2 = (id)sub_1D22C7EB8();
  v6 = objc_msgSend(v1, sel_initWithName_identifier_primaryLanguages_supportedLanguages_, v5, v4, v3);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

id sub_1D22C507C()
{
  id v1;
  id v2;
  id v3;

  v2 = (id)sub_1D22C7DBC();
  v3 = objc_msgSend(v1, sel_initWithBookmarkName_atByteSampleOffset_);

  swift_bridgeObjectRelease();
  return v3;
}

id sub_1D22C50DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;

  return objc_msgSend(v4, sel_initWithMarkerType_forTextRange_atByteSampleOffset_, a1, a2, a3, a4);
}

uint64_t sub_1D22C5128()
{
  sub_1D22C65AC();
  sub_1D22C3D44();
  return sub_1D22C8134();
}

uint64_t sub_1D22C5168()
{
  sub_1D22C65AC();
  return sub_1D22C80E0() & 1;
}

uint64_t sub_1D22C51A0()
{
  sub_1D22C65AC();
  return sub_1D22C8104();
}

uint64_t sub_1D22C51DC()
{
  sub_1D22C65AC();
  return sub_1D22C80EC();
}

uint64_t sub_1D22C5218()
{
  sub_1D22C65AC();
  return sub_1D22C80F8();
}

uint64_t sub_1D22C5254()
{
  sub_1D22C65AC();
  return sub_1D22C80BC() & 1;
}

uint64_t sub_1D22C5294()
{
  sub_1D22C65AC();
  return sub_1D22C80C8();
}

uint64_t sub_1D22C52D0()
{
  sub_1D22C65AC();
  return sub_1D22C80D4();
}

uint64_t sub_1D22C530C()
{
  sub_1D22C65AC();
  sub_1D22C3D44();
  return sub_1D22C8128();
}

uint64_t sub_1D22C534C()
{
  sub_1D22C65AC();
  sub_1D22C3D44();
  return sub_1D22C8110();
}

uint64_t sub_1D22C538C()
{
  sub_1D22C65AC();
  sub_1D22C3D44();
  return sub_1D22C811C();
}

uint64_t sub_1D22C53CC()
{
  return sub_1D22C7FB4();
}

uint64_t sub_1D22C53E0()
{
  return sub_1D22C7FCC() & 1;
}

uint64_t sub_1D22C53F8()
{
  return sub_1D22C7F9C() & 1;
}

uint64_t sub_1D22C5410()
{
  return sub_1D22C7FA8() & 1;
}

uint64_t sub_1D22C5428()
{
  return sub_1D22C7FC0() & 1;
}

uint64_t sub_1D22C5440()
{
  return sub_1D22C7FE4();
}

uint64_t sub_1D22C5478()
{
  return sub_1D22C7FD8();
}

uint64_t sub_1D22C548C()
{
  sub_1D22C661C();
  return sub_1D22C8098() & 1;
}

uint64_t sub_1D22C54D4()
{
  sub_1D22C6420();
  return sub_1D22C8098() & 1;
}

uint64_t sub_1D22C551C()
{
  sub_1D22C440C();
  return sub_1D22C7F90();
}

uint64_t sub_1D22C5558@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = nullsub_1(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1D22C5584@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = nullsub_1(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_1D22C55C0@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = nullsub_1(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1D22C55EC@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = nullsub_1(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

uint64_t sub_1D22C5628@<X0>(_DWORD *a1@<X8>)
{
  unsigned int *v1;
  uint64_t result;

  result = nullsub_1(*v1);
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for TTSSpeechGender()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = qword_1ED946938;
  if (!qword_1ED946938)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1ED946938);
      return v1;
    }
  }
  return v4;
}

unint64_t sub_1D22C56F4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = qword_1ED946948;
  if (!qword_1ED946948)
  {
    v0 = type metadata accessor for TTSSpeechGender();
    v1 = MEMORY[0x1D82343C4](&unk_1D22D94D0, v0);
    atomic_store(v1, (unint64_t *)&qword_1ED946948);
    return v1;
  }
  return v3;
}

void sub_1D22C5764(id *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1D22C0CCC(a1, *(_QWORD **)(v2 + 16), a2);
}

unint64_t sub_1D22C578C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = qword_1ED946918;
  if (!qword_1ED946918)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED946910);
    v1 = MEMORY[0x1D82343C4](MEMORY[0x1E0DEAF50], v0);
    atomic_store(v1, (unint64_t *)&qword_1ED946918);
    return v1;
  }
  return v3;
}

unint64_t sub_1D22C57FC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = qword_1EFC76F38;
  if (!qword_1EFC76F38)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFC76F30);
    v1 = MEMORY[0x1D82343C4](MEMORY[0x1E0DEAF50], v0);
    atomic_store(v1, (unint64_t *)&qword_1EFC76F38);
    return v1;
  }
  return v3;
}

uint64_t sub_1D22C586C(id *a1)
{
  uint64_t v1;

  return sub_1D22C2010(a1, *(void **)(v1 + 16)) & 1;
}

unint64_t sub_1D22C5894()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = qword_1EFC76F40;
  if (!qword_1EFC76F40)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1EFC76F40);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t sub_1D22C58F8()
{
  unint64_t v0;
  uint64_t v2;

  v2 = qword_1EFC76F48;
  if (!qword_1EFC76F48)
  {
    v0 = MEMORY[0x1D82343C4](MEMORY[0x1E0DEB470], MEMORY[0x1E0DEB418]);
    atomic_store(v0, (unint64_t *)&qword_1EFC76F48);
    return v0;
  }
  return v2;
}

unint64_t sub_1D22C5960()
{
  unint64_t v0;
  uint64_t v2;

  v2 = qword_1EFC76F50;
  if (!qword_1EFC76F50)
  {
    v0 = MEMORY[0x1D82343C4](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(v0, (unint64_t *)&qword_1EFC76F50);
    return v0;
  }
  return v2;
}

unint64_t sub_1D22C59C8()
{
  unint64_t v0;
  uint64_t v2;

  v2 = qword_1EFC76F58;
  if (!qword_1EFC76F58)
  {
    v0 = MEMORY[0x1D82343C4](MEMORY[0x1E0DEE138], MEMORY[0x1E0DEE0F8]);
    atomic_store(v0, (unint64_t *)&qword_1EFC76F58);
    return v0;
  }
  return v2;
}

uint64_t sub_1D22C5A30()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_1D22C5A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1D22C26CC(a1, a2, *(_QWORD *)(v2 + 16));
}

unint64_t sub_1D22C5A74()
{
  unint64_t v0;
  uint64_t v2;

  v2 = qword_1EFC76F60;
  if (!qword_1EFC76F60)
  {
    v0 = MEMORY[0x1D82343C4](MEMORY[0x1E0DEE0A0], MEMORY[0x1E0DEE068]);
    atomic_store(v0, (unint64_t *)&qword_1EFC76F60);
    return v0;
  }
  return v2;
}

unint64_t sub_1D22C5ADC()
{
  unint64_t v0;
  uint64_t v2;

  v2 = qword_1ED946950;
  if (!qword_1ED946950)
  {
    v0 = MEMORY[0x1D82343C4](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(v0, (unint64_t *)&qword_1ED946950);
    return v0;
  }
  return v2;
}

unint64_t sub_1D22C5B44()
{
  unint64_t v0;
  uint64_t v2;

  v2 = qword_1EFC76F68;
  if (!qword_1EFC76F68)
  {
    v0 = MEMORY[0x1D82343C4](MEMORY[0x1E0DEB460], MEMORY[0x1E0DEB418]);
    atomic_store(v0, (unint64_t *)&qword_1EFC76F68);
    return v0;
  }
  return v2;
}

uint64_t sub_1D22C5BAC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1D22C5BE8(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1D22C7C6C();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

unint64_t sub_1D22C5C58()
{
  return sub_1D22C5C6C();
}

unint64_t sub_1D22C5C6C()
{
  unint64_t v0;
  uint64_t v2;

  v2 = qword_1EFC76F78;
  if (!qword_1EFC76F78)
  {
    v0 = MEMORY[0x1D82343C4](&unk_1D22D9228, &unk_1E9369FD0);
    atomic_store(v0, (unint64_t *)&qword_1EFC76F78);
    return v0;
  }
  return v2;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_1D22C5CE8(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *sub_1D22C5E98(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t sub_1D22C60DC(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1D22C60E4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void *type metadata accessor for MacinTalkParameter()
{
  return &unk_1E9369FD0;
}

uint64_t sub_1D22C6100()
{
  unint64_t v0;
  uint64_t inited;

  inited = sub_1D22C6350();
  if (v0 <= 0x3F)
  {
    inited = swift_initClassMetadata2();
    if (!inited)
      return 0;
  }
  return inited;
}

uint64_t method lookup function for MTMacinTalkAUSPAudioUnit()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MTMacinTalkAUSPAudioUnit.didGenerateSamples(forSync:message:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x1E0DEEDD8])
                              + class metadata base offset for MTMacinTalkAUSPAudioUnit
                              + 496))();
}

uint64_t dispatch thunk of MTMacinTalkAUSPAudioUnit.didGenerateSamples(forWord:stringPosition:length:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x1E0DEEDD8])
                              + class metadata base offset for MTMacinTalkAUSPAudioUnit
                              + 504))();
}

uint64_t dispatch thunk of MTMacinTalkAUSPAudioUnit.didGenerateSamples(forPhoneme:phonemeOpcode:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x1E0DEEDD8])
                              + class metadata base offset for MTMacinTalkAUSPAudioUnit
                              + 512))();
}

uint64_t dispatch thunk of MTMacinTalkAUSPAudioUnit.didFinishGeneratingSamples()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x1E0DEEDD8])
                              + class metadata base offset for MTMacinTalkAUSPAudioUnit
                              + 520))();
}

uint64_t sub_1D22C6350()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = qword_1ED9469A8;
  if (!qword_1ED9469A8)
  {
    v3 = sub_1D22C7CB4();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&qword_1ED9469A8);
      return v1;
    }
  }
  return v4;
}

uint64_t sub_1D22C63F4()
{
  return type metadata accessor for MTMacinTalkAUSPAudioUnit();
}

unint64_t sub_1D22C640C()
{
  return sub_1D22C6420();
}

unint64_t sub_1D22C6420()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = qword_1ED9468D8;
  if (!qword_1ED9468D8)
  {
    v0 = type metadata accessor for AudioUnitParameterOptions();
    v1 = MEMORY[0x1D82343C4](&unk_1D22D9414, v0);
    atomic_store(v1, (unint64_t *)&qword_1ED9468D8);
    return v1;
  }
  return v3;
}

unint64_t sub_1D22C6490()
{
  return sub_1D22C440C();
}

unint64_t sub_1D22C64A4()
{
  return sub_1D22C64B8();
}

unint64_t sub_1D22C64B8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = qword_1ED9468D0;
  if (!qword_1ED9468D0)
  {
    v0 = type metadata accessor for AudioUnitParameterOptions();
    v1 = MEMORY[0x1D82343C4](&unk_1D22D93EC, v0);
    atomic_store(v1, (unint64_t *)&qword_1ED9468D0);
    return v1;
  }
  return v3;
}

unint64_t sub_1D22C6528()
{
  return sub_1D22C653C();
}

unint64_t sub_1D22C653C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = qword_1ED9468E8;
  if (!qword_1ED9468E8)
  {
    v0 = type metadata accessor for AudioUnitParameterOptions();
    v1 = MEMORY[0x1D82343C4](&unk_1D22D93BC, v0);
    atomic_store(v1, (unint64_t *)&qword_1ED9468E8);
    return v1;
  }
  return v3;
}

unint64_t sub_1D22C65AC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = qword_1ED9468F0;
  if (!qword_1ED9468F0)
  {
    v0 = type metadata accessor for AudioUnitParameterOptions();
    v1 = MEMORY[0x1D82343C4](&unk_1D22D944C, v0);
    atomic_store(v1, (unint64_t *)&qword_1ED9468F0);
    return v1;
  }
  return v3;
}

unint64_t sub_1D22C661C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = qword_1ED946930;
  if (!qword_1ED946930)
  {
    v0 = type metadata accessor for TTSSpeechGender();
    v1 = MEMORY[0x1D82343C4](&unk_1D22D9494, v0);
    atomic_store(v1, (unint64_t *)&qword_1ED946930);
    return v1;
  }
  return v3;
}

unint64_t sub_1D22C668C()
{
  unint64_t v0;
  uint64_t v2;

  v2 = qword_1ED946968;
  if (!qword_1ED946968)
  {
    v0 = MEMORY[0x1D82343C4](MEMORY[0x1E0DEBBE0], MEMORY[0x1E0DEBB98]);
    atomic_store(v0, (unint64_t *)&qword_1ED946968);
    return v0;
  }
  return v2;
}

unint64_t sub_1D22C66F4()
{
  unint64_t v0;
  uint64_t v2;

  v2 = qword_1ED946958;
  if (!qword_1ED946958)
  {
    v0 = MEMORY[0x1D82343C4](MEMORY[0x1E0DEBBC0], MEMORY[0x1E0DEBB98]);
    atomic_store(v0, (unint64_t *)&qword_1ED946958);
    return v0;
  }
  return v2;
}

unint64_t sub_1D22C675C()
{
  unint64_t v0;
  uint64_t v2;

  v2 = qword_1ED946970;
  if (!qword_1ED946970)
  {
    v0 = MEMORY[0x1D82343C4](MEMORY[0x1E0DEDEA0], MEMORY[0x1E0DEDE70]);
    atomic_store(v0, (unint64_t *)&qword_1ED946970);
    return v0;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1D22C67C4()
{
  swift_release();
}

unint64_t sub_1D22C67EC()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  v4 = qword_1EFC77060;
  if (!qword_1EFC77060)
  {
    v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFC77058);
    v0 = sub_1D22C5960();
    v5[0] = MEMORY[0x1E0DEE130];
    v5[1] = v0;
    v1 = MEMORY[0x1D82343C4](MEMORY[0x1E0DEB8C0], v3, v5);
    atomic_store(v1, (unint64_t *)&qword_1EFC77060);
    return v1;
  }
  return v4;
}

uint64_t sub_1D22C6874(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = a2;
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 4);
  return result;
}

unint64_t sub_1D22C6890()
{
  unint64_t v0;
  uint64_t v2;

  v2 = qword_1EFC77070;
  if (!qword_1EFC77070)
  {
    v0 = MEMORY[0x1D82343C4](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(v0, (unint64_t *)&qword_1EFC77070);
    return v0;
  }
  return v2;
}

uint64_t sub_1D22C68F8()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1D22C6934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v7;

  sub_1D22BF504(a1, a2, a3, a4, a5, a6, a7, *(void **)(v7 + 16));
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

unint64_t sub_1D22C6998()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = qword_1EFC77078;
  if (!qword_1EFC77078)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1EFC77078);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t sub_1D22C69FC()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = qword_1EFC77080;
  if (!qword_1EFC77080)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1EFC77080);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t sub_1D22C6A60()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = qword_1EFC77088;
  if (!qword_1EFC77088)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1EFC77088);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_1D22C6AC4(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_1D22C6AFC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1D22C6B38(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return sub_1D22BDD0C(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16));
}

void sub_1D22C6B40()
{
  _QWORD *v0;

  *v0 = *v0;
}

unint64_t sub_1D22C6B4C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = qword_1ED946890;
  if (!qword_1ED946890)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED946888);
    v1 = MEMORY[0x1D82343C4](MEMORY[0x1E0DE9D90], v0);
    atomic_store(v1, (unint64_t *)&qword_1ED946890);
    return v1;
  }
  return v3;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  return result;
}

uint64_t sub_1D22C6BD0(uint64_t a1, int a2)
{
  int v3;

  if (a2)
  {
    if (*(_BYTE *)(a1 + 24))
      v3 = *(_DWORD *)a1;
    else
      v3 = -1;
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

uint64_t sub_1D22C6CB0(uint64_t result, int a2, int a3)
{
  _BOOL4 v3;

  v3 = a3 != 0;
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    if (a3)
    {
      if (v3)
        *(_BYTE *)(result + 24) = 1;
      else
        __break(1u);
    }
  }
  else if (a3)
  {
    if (v3)
      *(_BYTE *)(result + 24) = 0;
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for AudioBufferList()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = qword_1EFC77090;
  if (!qword_1EFC77090)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EFC77090);
      return v1;
    }
  }
  return v4;
}

uint64_t sub_1D22C6F34(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy64_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x40uLL);
}

uint64_t sub_1D22C6F9C(uint64_t a1, int a2)
{
  int v3;

  if (a2)
  {
    if (*(_BYTE *)(a1 + 64))
      v3 = *(_QWORD *)a1;
    else
      v3 = -1;
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

uint64_t sub_1D22C70C4(uint64_t result, int a2, int a3)
{
  _BOOL4 v3;

  v3 = a3 != 0;
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    if (a3)
    {
      if (v3)
        *(_BYTE *)(result + 64) = 1;
      else
        __break(1u);
    }
  }
  else if (a3)
  {
    if (v3)
      *(_BYTE *)(result + 64) = 0;
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for AudioTimeStamp()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = qword_1EFC77098;
  if (!qword_1EFC77098)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EFC77098);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AudioUnitRenderActionFlags()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = qword_1EFC770A0;
  if (!qword_1EFC770A0)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EFC770A0);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AudioTimeStampFlags()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = qword_1EFC770A8;
  if (!qword_1EFC770A8)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EFC770A8);
      return v1;
    }
  }
  return v4;
}

__n128 __swift_memcpy24_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  return result;
}

uint64_t type metadata accessor for SMPTETime()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = qword_1EFC770B0;
  if (!qword_1EFC770B0)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EFC770B0);
      return v1;
    }
  }
  return v4;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1D22C755C(uint64_t a1, int a2)
{
  int v3;

  if (a2)
  {
    if (*(_BYTE *)(a1 + 16))
      v3 = *(_OWORD *)a1;
    else
      v3 = -1;
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

uint64_t sub_1D22C7688(uint64_t result, int a2, int a3)
{
  _BOOL4 v3;

  v3 = a3 != 0;
  if (a2)
  {
    *(_OWORD *)result = (a2 - 1);
    if (a3)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 1;
      else
        __break(1u);
    }
  }
  else if (a3)
  {
    if (v3)
      *(_BYTE *)(result + 16) = 0;
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for AudioBuffer()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = qword_1EFC770B8;
  if (!qword_1EFC770B8)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EFC770B8);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for SMPTETimeFlags()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = qword_1EFC770C0;
  if (!qword_1EFC770C0)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EFC770C0);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for SMPTETimeType()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = qword_1EFC770C8;
  if (!qword_1EFC770C8)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EFC770C8);
      return v1;
    }
  }
  return v4;
}

void SpeechChannelManager::ReadPCMVoiceData()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_1D2256000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "SpeechChannelManager::UseVoice failed to load meow voice due to missing codec.", v0, 2u);
}

void MTFEToBIPitch::PhraseAccentForOverlappingHighFinalBoundary()
{
  __assert_rtn("PhraseAccentForOverlappingHighFinalBoundary", "MTFEToBIPitch.cp", 2658, "highFinalBoundary->fType == kHighFinalBoundary");
}

void MTBERemoteIOSoundOutput::WaitForOutputToStop(uint8_t *buf, uint64_t a2, _QWORD *a3)
{
  *(_DWORD *)buf = 134217984;
  *a3 = a2;
  _os_log_error_impl(&dword_1D2256000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "MTX WaitForOutputToStop AvailableCapacity not increasing %lu", buf, 0xCu);
}

void SLML::Fatal(SLML *this, const char *a2, ...)
{
  FILE **v3;
  va_list va;

  va_start(va, a2);
  v3 = (FILE **)MEMORY[0x1E0C80C10];
  fwrite("SpeechMatrix: ", 0xEuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  vfprintf(*v3, (const char *)this, va);
  fputc(10, *v3);
  abort();
}

void MEOWReader::MEOWReader()
{
  fwrite("MFCC distance metric no longer supported\n", 0x29uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  abort();
}

void MTBEAbort(FILE *a1, MTFESpeechVisitor *a2, uint64_t a3)
{
  fclose(a1);
  MTFESpeechVisitor::~MTFESpeechVisitor(a2);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
}

uint64_t sub_1D22C7C00()
{
  return MEMORY[0x1E0CAF328]();
}

uint64_t sub_1D22C7C0C()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t sub_1D22C7C18()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t sub_1D22C7C24()
{
  return MEMORY[0x1E0CAFDE0]();
}

uint64_t sub_1D22C7C30()
{
  return MEMORY[0x1E0CAFE38]();
}

uint64_t sub_1D22C7C3C()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t sub_1D22C7C48()
{
  return MEMORY[0x1E0CB01C8]();
}

uint64_t sub_1D22C7C54()
{
  return MEMORY[0x1E0CB0260]();
}

uint64_t sub_1D22C7C60()
{
  return MEMORY[0x1E0CB0A00]();
}

uint64_t sub_1D22C7C6C()
{
  return MEMORY[0x1E0CB0E38]();
}

uint64_t sub_1D22C7C78()
{
  return MEMORY[0x1E0DBED10]();
}

uint64_t sub_1D22C7C84()
{
  return MEMORY[0x1E0DBED18]();
}

uint64_t sub_1D22C7C90()
{
  return MEMORY[0x1E0DBED20]();
}

uint64_t sub_1D22C7C9C()
{
  return MEMORY[0x1E0DBED28]();
}

uint64_t sub_1D22C7CA8()
{
  return MEMORY[0x1E0DBED30]();
}

uint64_t sub_1D22C7CB4()
{
  return MEMORY[0x1E0DBED38]();
}

uint64_t sub_1D22C7CC0()
{
  return MEMORY[0x1E0DBEDF8]();
}

uint64_t sub_1D22C7CCC()
{
  return MEMORY[0x1E0DBEE78]();
}

uint64_t sub_1D22C7CD8()
{
  return MEMORY[0x1E0DBEE80]();
}

uint64_t sub_1D22C7CE4()
{
  return MEMORY[0x1E0DBEE88]();
}

uint64_t sub_1D22C7CF0()
{
  return MEMORY[0x1E0DBEEA8]();
}

uint64_t sub_1D22C7CFC()
{
  return MEMORY[0x1E0DBEEB0]();
}

uint64_t sub_1D22C7D08()
{
  return MEMORY[0x1E0DBEEC0]();
}

uint64_t sub_1D22C7D14()
{
  return MEMORY[0x1E0DBEEC8]();
}

uint64_t sub_1D22C7D20()
{
  return MEMORY[0x1E0DBEEE0]();
}

uint64_t sub_1D22C7D2C()
{
  return MEMORY[0x1E0DBEEE8]();
}

uint64_t sub_1D22C7D38()
{
  return MEMORY[0x1E0DBEEF0]();
}

uint64_t sub_1D22C7D44()
{
  return MEMORY[0x1E0DF2078]();
}

uint64_t sub_1D22C7D50()
{
  return MEMORY[0x1E0DEF3B8]();
}

uint64_t sub_1D22C7D5C()
{
  return MEMORY[0x1E0DEEFD8]();
}

uint64_t sub_1D22C7D68()
{
  return MEMORY[0x1E0DEEFE0]();
}

uint64_t sub_1D22C7D74()
{
  return MEMORY[0x1E0DEEFE8]();
}

uint64_t sub_1D22C7D80()
{
  return MEMORY[0x1E0DEF018]();
}

uint64_t sub_1D22C7D8C()
{
  return MEMORY[0x1E0DEF168]();
}

uint64_t sub_1D22C7D98()
{
  return MEMORY[0x1E0DE9D80]();
}

uint64_t sub_1D22C7DA4()
{
  return MEMORY[0x1E0DEA3E8]();
}

uint64_t sub_1D22C7DB0()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t sub_1D22C7DBC()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1D22C7DC8()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1D22C7DD4()
{
  return MEMORY[0x1E0CB1988]();
}

uint64_t sub_1D22C7DE0()
{
  return MEMORY[0x1E0CB19D0]();
}

uint64_t sub_1D22C7DEC()
{
  return MEMORY[0x1E0CB1A18]();
}

uint64_t sub_1D22C7DF8()
{
  return MEMORY[0x1E0DEA620]();
}

uint64_t sub_1D22C7E04()
{
  return MEMORY[0x1E0DEA708]();
}

uint64_t sub_1D22C7E10()
{
  return MEMORY[0x1E0DEA718]();
}

uint64_t sub_1D22C7E1C()
{
  return MEMORY[0x1E0DEA730]();
}

uint64_t sub_1D22C7E28()
{
  return MEMORY[0x1E0DEA770]();
}

uint64_t sub_1D22C7E34()
{
  return MEMORY[0x1E0DEA7B8]();
}

uint64_t sub_1D22C7E40()
{
  return MEMORY[0x1E0DEA7D8]();
}

uint64_t sub_1D22C7E4C()
{
  return MEMORY[0x1E0DEA8C8]();
}

uint64_t sub_1D22C7E58()
{
  return MEMORY[0x1E0DEAA50]();
}

uint64_t sub_1D22C7E64()
{
  return MEMORY[0x1E0DEAB00]();
}

uint64_t sub_1D22C7E70()
{
  return MEMORY[0x1E0DEAB40]();
}

uint64_t sub_1D22C7E7C()
{
  return MEMORY[0x1E0DEABC0]();
}

uint64_t sub_1D22C7E88()
{
  return MEMORY[0x1E0DEAD00]();
}

uint64_t sub_1D22C7E94()
{
  return MEMORY[0x1E0DEAD08]();
}

uint64_t sub_1D22C7EA0()
{
  return MEMORY[0x1E0DEAD10]();
}

uint64_t sub_1D22C7EAC()
{
  return MEMORY[0x1E0DEAD90]();
}

uint64_t sub_1D22C7EB8()
{
  return MEMORY[0x1E0CB1AC0]();
}

uint64_t sub_1D22C7EC4()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t sub_1D22C7ED0()
{
  return MEMORY[0x1E0DEAE10]();
}

uint64_t sub_1D22C7EDC()
{
  return MEMORY[0x1E0DEAE60]();
}

uint64_t sub_1D22C7EE8()
{
  return MEMORY[0x1E0DEAEC8]();
}

uint64_t sub_1D22C7EF4()
{
  return MEMORY[0x1E0DEB528]();
}

uint64_t sub_1D22C7F00()
{
  return MEMORY[0x1E0DEB560]();
}

uint64_t sub_1D22C7F0C()
{
  return MEMORY[0x1E0DEB5B0]();
}

uint64_t sub_1D22C7F18()
{
  return MEMORY[0x1E0DEB620]();
}

uint64_t sub_1D22C7F24()
{
  return MEMORY[0x1E0DEB660]();
}

uint64_t sub_1D22C7F30()
{
  return MEMORY[0x1E0DEB6B8]();
}

uint64_t sub_1D22C7F3C()
{
  return MEMORY[0x1E0DF0020]();
}

uint64_t sub_1D22C7F48()
{
  return MEMORY[0x1E0DEB6D0]();
}

uint64_t sub_1D22C7F54()
{
  return MEMORY[0x1E0CB1C58]();
}

uint64_t sub_1D22C7F60()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t sub_1D22C7F6C()
{
  return MEMORY[0x1E0DEF2A8]();
}

uint64_t sub_1D22C7F78()
{
  return MEMORY[0x1E0CB23C0]();
}

uint64_t sub_1D22C7F84()
{
  return MEMORY[0x1E0CB2540]();
}

uint64_t sub_1D22C7F90()
{
  return MEMORY[0x1E0DEC018]();
}

uint64_t sub_1D22C7F9C()
{
  return MEMORY[0x1E0DEC020]();
}

uint64_t sub_1D22C7FA8()
{
  return MEMORY[0x1E0DEC028]();
}

uint64_t sub_1D22C7FB4()
{
  return MEMORY[0x1E0DEC030]();
}

uint64_t sub_1D22C7FC0()
{
  return MEMORY[0x1E0DEC038]();
}

uint64_t sub_1D22C7FCC()
{
  return MEMORY[0x1E0DEC040]();
}

uint64_t sub_1D22C7FD8()
{
  return MEMORY[0x1E0DEC048]();
}

uint64_t sub_1D22C7FE4()
{
  return MEMORY[0x1E0DEC050]();
}

uint64_t sub_1D22C7FF0()
{
  return MEMORY[0x1E0DEC130]();
}

uint64_t sub_1D22C7FFC()
{
  return MEMORY[0x1E0DEC5F8]();
}

uint64_t sub_1D22C8008()
{
  return MEMORY[0x1E0DEC680]();
}

uint64_t sub_1D22C8014()
{
  return MEMORY[0x1E0DEC6E0]();
}

uint64_t sub_1D22C8020()
{
  return MEMORY[0x1E0DEC700]();
}

uint64_t sub_1D22C802C()
{
  return MEMORY[0x1E0DEC708]();
}

uint64_t sub_1D22C8038()
{
  return MEMORY[0x1E0DEC8F0]();
}

uint64_t sub_1D22C8044()
{
  return MEMORY[0x1E0DF0030]();
}

uint64_t sub_1D22C8050()
{
  return MEMORY[0x1E0DECBE0]();
}

uint64_t sub_1D22C805C()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t sub_1D22C8068()
{
  return MEMORY[0x1E0DED550]();
}

uint64_t sub_1D22C8074()
{
  return MEMORY[0x1E0DED560]();
}

uint64_t sub_1D22C8080()
{
  return MEMORY[0x1E0DED568]();
}

uint64_t sub_1D22C808C()
{
  return MEMORY[0x1E0DED5E8]();
}

uint64_t sub_1D22C8098()
{
  return MEMORY[0x1E0DED788]();
}

uint64_t sub_1D22C80A4()
{
  return MEMORY[0x1E0DED978]();
}

uint64_t sub_1D22C80B0()
{
  return MEMORY[0x1E0CB2650]();
}

uint64_t sub_1D22C80BC()
{
  return MEMORY[0x1E0DEE900]();
}

uint64_t sub_1D22C80C8()
{
  return MEMORY[0x1E0DEE908]();
}

uint64_t sub_1D22C80D4()
{
  return MEMORY[0x1E0DEE910]();
}

uint64_t sub_1D22C80E0()
{
  return MEMORY[0x1E0DEE918]();
}

uint64_t sub_1D22C80EC()
{
  return MEMORY[0x1E0DEE920]();
}

uint64_t sub_1D22C80F8()
{
  return MEMORY[0x1E0DEE928]();
}

uint64_t sub_1D22C8104()
{
  return MEMORY[0x1E0DEE930]();
}

uint64_t sub_1D22C8110()
{
  return MEMORY[0x1E0DEE938]();
}

uint64_t sub_1D22C811C()
{
  return MEMORY[0x1E0DEE940]();
}

uint64_t sub_1D22C8128()
{
  return MEMORY[0x1E0DEE948]();
}

uint64_t sub_1D22C8134()
{
  return MEMORY[0x1E0DEE950]();
}

uint64_t AXTTSLogCommon()
{
  return MEMORY[0x1E0CF3800]();
}

UInt32 AudioComponentCount(const AudioComponentDescription *inDesc)
{
  return MEMORY[0x1E0CFF3E0](inDesc);
}

AudioComponent AudioComponentFindNext(AudioComponent inComponent, const AudioComponentDescription *inDesc)
{
  return (AudioComponent)MEMORY[0x1E0CFF3E8](inComponent, inDesc);
}

OSStatus AudioComponentInstanceDispose(AudioComponentInstance inInstance)
{
  return MEMORY[0x1E0CFF408](inInstance);
}

OSStatus AudioComponentInstanceNew(AudioComponent inComponent, AudioComponentInstance *outInstance)
{
  return MEMORY[0x1E0CFF418](inComponent, outInstance);
}

AudioComponent AudioComponentRegister(const AudioComponentDescription *inDesc, CFStringRef inName, UInt32 inVersion, AudioComponentFactoryFunction inFactory)
{
  return (AudioComponent)MEMORY[0x1E0CFF428](inDesc, inName, *(_QWORD *)&inVersion, inFactory);
}

OSStatus AudioConverterDispose(AudioConverterRef inAudioConverter)
{
  return MEMORY[0x1E0CFF450](inAudioConverter);
}

OSStatus AudioConverterFillComplexBuffer(AudioConverterRef inAudioConverter, AudioConverterComplexInputDataProc inInputDataProc, void *inInputDataProcUserData, UInt32 *ioOutputDataPacketSize, AudioBufferList *outOutputData, AudioStreamPacketDescription *outPacketDescription)
{
  return MEMORY[0x1E0CFF458](inAudioConverter, inInputDataProc, inInputDataProcUserData, ioOutputDataPacketSize, outOutputData, outPacketDescription);
}

OSStatus AudioConverterNew(const AudioStreamBasicDescription *inSourceFormat, const AudioStreamBasicDescription *inDestinationFormat, AudioConverterRef *outAudioConverter)
{
  return MEMORY[0x1E0CFF478](inSourceFormat, inDestinationFormat, outAudioConverter);
}

OSStatus AudioConverterReset(AudioConverterRef inAudioConverter)
{
  return MEMORY[0x1E0CFF498](inAudioConverter);
}

OSStatus AudioConverterSetProperty(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x1E0CFF4A0](inAudioConverter, *(_QWORD *)&inPropertyID, *(_QWORD *)&inPropertyDataSize, inPropertyData);
}

OSStatus AudioFileOptimize(AudioFileID inAudioFile)
{
  return MEMORY[0x1E0CFF4E8](inAudioFile);
}

OSStatus AudioFileSetProperty(AudioFileID inAudioFile, AudioFilePropertyID inPropertyID, UInt32 inDataSize, const void *inPropertyData)
{
  return MEMORY[0x1E0CFF500](inAudioFile, *(_QWORD *)&inPropertyID, *(_QWORD *)&inDataSize, inPropertyData);
}

OSStatus AudioFormatGetProperty(AudioFormatPropertyID inPropertyID, UInt32 inSpecifierSize, const void *inSpecifier, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x1E0CFF510](*(_QWORD *)&inPropertyID, *(_QWORD *)&inSpecifierSize, inSpecifier, ioPropertyDataSize, outPropertyData);
}

OSStatus AudioOutputUnitStart(AudioUnit ci)
{
  return MEMORY[0x1E0CFF530](ci);
}

OSStatus AudioOutputUnitStop(AudioUnit ci)
{
  return MEMORY[0x1E0CFF538](ci);
}

OSStatus AudioUnitSetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, const void *inData, UInt32 inDataSize)
{
  return MEMORY[0x1E0CFF600](inUnit, *(_QWORD *)&inID, *(_QWORD *)&inScope, *(_QWORD *)&inElement, inData, *(_QWORD *)&inDataSize);
}

OSStatus AudioUnitUninitialize(AudioUnit inUnit)
{
  return MEMORY[0x1E0CFF608](inUnit);
}

uint64_t CEMCreateEmojiLocaleData()
{
  return MEMORY[0x1E0D15CE8]();
}

uint64_t CEMEmojiTokenCopyName()
{
  return MEMORY[0x1E0D15D28]();
}

uint64_t CEMEmojiTokenCreateWithString()
{
  return MEMORY[0x1E0D15D58]();
}

uint64_t CEMEmojiTokenGetString()
{
  return MEMORY[0x1E0D15D90]();
}

uint64_t CEMEnumerateEmojiTokensInStringWithLocaleAndBlock()
{
  return MEMORY[0x1E0D15DB0]();
}

uint64_t CEMStringContainsEmoji()
{
  return MEMORY[0x1E0D15DC0]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1E0C98080](bundle, resourceName, resourceType, subDirName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1E0C980D0](allocator, bundleURL);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1E0C98120](bundle);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98538](allocator, theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1E0C985C8](theDict, key, value);
}

CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues)
{
  return (CFErrorRef)MEMORY[0x1E0C98658](allocator, domain, code, userInfoKeys, userInfoValues, numUserInfoValues);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1E0C98798](allocator, localeIdentifier);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AE0](allocator, stream, streamLength, options, format, error);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1E0C98B48](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1E0C98B80](stream);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1E0C98F78](alloc, theString);
}

CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return (CFDataRef)MEMORY[0x1E0C98F80](alloc, theString, *(_QWORD *)&encoding, lossByte);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FE0](alloc, cStr, *(_QWORD *)&encoding, contentsDeallocator);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1E0C990B0](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1E0C990C8](theString);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99118](length, *(_QWORD *)&encoding);
}

void CFStringInsert(CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr)
{
  MEMORY[0x1E0C991B8](str, idx, insertedStr);
}

void CFStringReplace(CFMutableStringRef theString, CFRange range, CFStringRef replacement)
{
  MEMORY[0x1E0C991F0](theString, range.location, range.length, replacement);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1E0C992D8](anURL, pathStyle);
}

OSStatus ExtAudioFileCreateWithURL(CFURLRef inURL, AudioFileTypeID inFileType, const AudioStreamBasicDescription *inStreamDesc, const AudioChannelLayout *inChannelLayout, UInt32 inFlags, ExtAudioFileRef *outExtAudioFile)
{
  return MEMORY[0x1E0CFF630](inURL, *(_QWORD *)&inFileType, inStreamDesc, inChannelLayout, *(_QWORD *)&inFlags, outExtAudioFile);
}

OSStatus ExtAudioFileDispose(ExtAudioFileRef inExtAudioFile)
{
  return MEMORY[0x1E0CFF638](inExtAudioFile);
}

OSStatus ExtAudioFileGetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x1E0CFF640](inExtAudioFile, *(_QWORD *)&inPropertyID, ioPropertyDataSize, outPropertyData);
}

OSStatus ExtAudioFileSetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x1E0CFF668](inExtAudioFile, *(_QWORD *)&inPropertyID, *(_QWORD *)&inPropertyDataSize, inPropertyData);
}

OSStatus ExtAudioFileWrite(ExtAudioFileRef inExtAudioFile, UInt32 inNumberFrames, const AudioBufferList *ioData)
{
  return MEMORY[0x1E0CFF680](inExtAudioFile, *(_QWORD *)&inNumberFrames, ioData);
}

uint64_t SLHomographCopyTune()
{
  return MEMORY[0x1E0DA8D40]();
}

uint64_t SLHomographGetPOS()
{
  return MEMORY[0x1E0DA8D48]();
}

uint64_t SLHomographGetPhonemes()
{
  return MEMORY[0x1E0DA8D50]();
}

uint64_t SLHomographGetTags()
{
  return MEMORY[0x1E0DA8D58]();
}

uint64_t SLTokenCountHomographs()
{
  return MEMORY[0x1E0DA8D60]();
}

uint64_t SLTokenCreateTemp()
{
  return MEMORY[0x1E0DA8D68]();
}

uint64_t SLTokenGetClass()
{
  return MEMORY[0x1E0DA8D70]();
}

uint64_t SLTokenGetHomograph()
{
  return MEMORY[0x1E0DA8D78]();
}

uint64_t SLTokenGetInfo()
{
  return MEMORY[0x1E0DA8D80]();
}

uint64_t SLTokenGetText()
{
  return MEMORY[0x1E0DA8D88]();
}

uint64_t SLTokenGetTupleGroup()
{
  return MEMORY[0x1E0DA8D90]();
}

uint64_t SLTokenRelease()
{
  return MEMORY[0x1E0DA8D98]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t SLFirstPOSInSet()
{
  return MEMORY[0x1E0DA8DA0]();
}

uint64_t SLGetSpeechDictionaryBundle(void)
{
  return MEMORY[0x1E0DA8DA8]();
}

void SLMMapHint::~SLMMapHint(SLMMapHint *this)
{
  MEMORY[0x1E0DA8DB0](this);
}

uint64_t SLMMapCache::Map(SLMMapCache *this, const __CFURL *a2, SLMMapHint *a3)
{
  return MEMORY[0x1E0DA8DB8](this, a2, a3);
}

uint64_t SLMMapCache::Unmap(SLMMapCache *this, void *a2)
{
  return MEMORY[0x1E0DA8DC0](this, a2);
}

uint64_t SLDictLookup::CreatePhonemeSymbols(SLDictLookup *this, const __CFLocale *a2)
{
  return MEMORY[0x1E0DA8DC8](this, a2);
}

uint64_t SLDictLookup::Create(SLDictLookup *this, const __CFLocale *a2)
{
  return MEMORY[0x1E0DA8DD0](this, a2);
}

void SLDictionary::SLDictionary(SLDictionary *this)
{
  MEMORY[0x1E0DA8DD8](this);
}

void SLDictionary::~SLDictionary(SLDictionary *this)
{
  MEMORY[0x1E0DA8DE0](this);
}

uint64_t SLPronouncer::Create(SLPronouncer *this, const __CFLocale *a2, const SLDictLookup *a3)
{
  return MEMORY[0x1E0DA8DE8](this, a2, a3);
}

uint64_t SLWordTagSet::erase(SLWordTagSet *this)
{
  return MEMORY[0x1E0DA8DF0](this);
}

void SLWordBuilder::SLWordBuilder(SLWordBuilder *this)
{
  MEMORY[0x1E0DA8DF8](this);
}

void SLWordBuilder::~SLWordBuilder(SLWordBuilder *this)
{
  MEMORY[0x1E0DA8E00](this);
}

uint64_t SLEncyclopedia::Lookup(SLEncyclopedia *this, const char *a2, uint64_t a3, SLWordBuilder *a4, SLDictionary *a5)
{
  return MEMORY[0x1E0DA8E08](this, a2, a3, a4, a5);
}

uint64_t SLEncyclopedia::Remove(SLEncyclopedia *this, SLDictionary *a2)
{
  return MEMORY[0x1E0DA8E10](this, a2);
}

uint64_t SLEncyclopedia::PushBack(SLEncyclopedia *this, SLDictionary *a2)
{
  return MEMORY[0x1E0DA8E18](this, a2);
}

void SLEncyclopedia::~SLEncyclopedia(SLEncyclopedia *this)
{
  MEMORY[0x1E0DA8E20](this);
}

uint64_t SLCFArrayBuilder::CreateArray(SLCFArrayBuilder *this)
{
  return MEMORY[0x1E0DA8E28](this);
}

void SLCFArrayBuilder::~SLCFArrayBuilder(SLCFArrayBuilder *this)
{
  MEMORY[0x1E0DA8E30](this);
}

{
  MEMORY[0x1E0DA8E38](this);
}

void SLCFStringTextSource::SLCFStringTextSource(SLCFStringTextSource *this, const __CFString *a2)
{
  MEMORY[0x1E0DA8E40](this, a2);
}

{
  MEMORY[0x1E0DA8E48](this, a2);
}

void SLCFStringTextSource::~SLCFStringTextSource(SLCFStringTextSource *this)
{
  MEMORY[0x1E0DA8E50](this);
}

{
  MEMORY[0x1E0DA8E58](this);
}

uint64_t SLCFDictionaryBuilder::CreateDictionary(SLCFDictionaryBuilder *this)
{
  return MEMORY[0x1E0DA8E60](this);
}

uint64_t SLCFDictionaryBuilder::push_back(SLCFDictionaryBuilder *this, const void *a2, const void *a3)
{
  return MEMORY[0x1E0DA8E68](this, a2, a3);
}

uint64_t SLTag::Name(SLTag *this)
{
  return MEMORY[0x1E0DA8E70](this);
}

uint64_t SLLexer::Create()
{
  return MEMORY[0x1E0DA8E80]();
}

uint64_t SLBndEng::Name(SLBndEng *this)
{
  return MEMORY[0x1E0DA8E88](this);
}

uint64_t SLTagEng::Name(SLTagEng *this)
{
  return MEMORY[0x1E0DA8E98](this);
}

uint64_t SLDictLookup::Lookup(SLDictLookup *this, SLDictionary *a2, const char *a3, uint64_t a4, SLToken *a5)
{
  return MEMORY[0x1E0DA8ED0](this, a2, a3, a4, a5);
}

uint64_t SLWordTagSet::find(SLWordTagSet *this)
{
  return MEMORY[0x1E0DA8ED8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4278](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return MEMORY[0x1E0DE4B00]();
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E9364DF8();
}

void operator delete(void *__p)
{
  off_1E9364E00(__p);
}

uint64_t operator delete()
{
  return off_1E9364E08();
}

uint64_t operator new[]()
{
  return off_1E9364E10();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E9364E18(__sz);
}

uint64_t operator new()
{
  return off_1E9364E20();
}

uint64_t operator+=()
{
  return MEMORY[0x1E0DA8EE8]();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE50E0](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x1E0C80BD0](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

int asl_log(asl_object_t client, asl_object_t msg, int level, const char *format, ...)
{
  return MEMORY[0x1E0C815D0](client, msg, *(_QWORD *)&level, format);
}

double atof(const char *a1)
{
  double result;

  MEMORY[0x1E0C81658](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

uint64_t atol(const char *a1)
{
  return MEMORY[0x1E0C81678](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

void catlas_sset(const int __N, const float __alpha, float *__X, const int __incX)
{
  MEMORY[0x1E0C8BAE8](*(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __alpha);
}

int cblas_isamax(const int __N, const float *__X, const int __incX)
{
  return MEMORY[0x1E0C8BBA8](*(_QWORD *)&__N, __X, *(_QWORD *)&__incX);
}

void cblas_saxpy(const int __N, const float __alpha, const float *__X, const int __incX, float *__Y, const int __incY)
{
  MEMORY[0x1E0C8BBB8](*(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __Y, *(_QWORD *)&__incY, __alpha);
}

void cblas_scopy(const int __N, const float *__X, const int __incX, float *__Y, const int __incY)
{
  MEMORY[0x1E0C8BBC8](*(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __Y, *(_QWORD *)&__incY);
}

float cblas_sdot(const int __N, const float *__X, const int __incX, const float *__Y, const int __incY)
{
  float result;

  MEMORY[0x1E0C8BBD8](*(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __Y, *(_QWORD *)&__incY);
  return result;
}

void cblas_sgemm(const CBLAS_ORDER __Order, const CBLAS_TRANSPOSE __TransA, const CBLAS_TRANSPOSE __TransB, const int __M, const int __N, const int __K, const float __alpha, const float *__A, const int __lda, const float *__B, const int __ldb, const float __beta, float *__C, const int __ldc)
{
  MEMORY[0x1E0C8BBF8](*(_QWORD *)&__Order, *(_QWORD *)&__TransA, *(_QWORD *)&__TransB, *(_QWORD *)&__M, *(_QWORD *)&__N, *(_QWORD *)&__K, __A, *(_QWORD *)&__lda, __alpha, __beta);
}

void cblas_sgemv(const CBLAS_ORDER __Order, const CBLAS_TRANSPOSE __TransA, const int __M, const int __N, const float __alpha, const float *__A, const int __lda, const float *__X, const int __incX, const float __beta, float *__Y, const int __incY)
{
  MEMORY[0x1E0C8BC20](*(_QWORD *)&__Order, *(_QWORD *)&__TransA, *(_QWORD *)&__M, *(_QWORD *)&__N, __A, *(_QWORD *)&__lda, __X, *(_QWORD *)&__incX, __alpha, __beta);
}

void cblas_sscal(const int __N, const float __alpha, float *__X, const int __incX)
{
  MEMORY[0x1E0C8BC60](*(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __alpha);
}

clock_t clock(void)
{
  return MEMORY[0x1E0C82650]();
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

float cosf(float a1)
{
  float result;

  MEMORY[0x1E0C82B48](a1);
  return result;
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C18](queue, context, work);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
  MEMORY[0x1E0C82EE0](object, context);
}

uint64_t dispatch_set_qos_class_fallback()
{
  return MEMORY[0x1E0C82EF8]();
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
  MEMORY[0x1E0C82F60](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return MEMORY[0x1E0C82FC8](when, delta);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1E0C82FE0](label);
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x1E0C83010]();
}

int dlclose(void *__handle)
{
  return MEMORY[0x1E0C83030](__handle);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

float exp2f(float a1)
{
  float result;

  MEMORY[0x1E0C83290](a1);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C83488](*(_QWORD *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1E0C83490](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

FILE *__cdecl funopen(const void *a1, int (__cdecl *a2)(void *, char *, int), int (__cdecl *a3)(void *, const char *, int), fpos_t (__cdecl *a4)(void *, fpos_t, int), int (__cdecl *a5)(void *))
{
  return (FILE *)MEMORY[0x1E0C835C8](a1, a2, a3, a4, a5);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

int getpagesize(void)
{
  return MEMORY[0x1E0C83740]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

float log2f(float a1)
{
  float result;

  MEMORY[0x1E0C83BF0](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x1E0C83C00](a1);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

int mincore(const void *a1, size_t a2, char *a3)
{
  return MEMORY[0x1E0C84130](a1, a2, a3);
}

int mlock(const void *a1, size_t a2)
{
  return MEMORY[0x1E0C841D0](a1, a2);
}

int munlock(const void *a1, size_t a2)
{
  return MEMORY[0x1E0C84218](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

int posix_madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1E0C84B30](a1, a2, *(_QWORD *)&a3);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1E0C84BC8](*(_QWORD *)&__fd, __buf, __nbyte, a4);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D18](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D20](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1E0C84D28](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D30](a1);
}

int pthread_cond_timedwait(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x1E0C84D38](a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1E0C84D48](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

int pthread_detach(pthread_t a1)
{
  return MEMORY[0x1E0C84D78](a1);
}

void pthread_exit(void *a1)
{
  MEMORY[0x1E0C84D88](a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E48](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1E0C84E60](a1, *(_QWORD *)&a2);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1E0C84E68](a1, a2);
}

int putchar(int a1)
{
  return MEMORY[0x1E0C84F50](*(_QWORD *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

uint64_t random(void)
{
  return MEMORY[0x1E0C84FC0]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

float scalbnf(float a1, int a2)
{
  float result;

  MEMORY[0x1E0C85248](*(_QWORD *)&a2, a1);
  return result;
}

int sgesvd_(char *__jobu, char *__jobvt, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__s, __CLPK_real *__u, __CLPK_integer *__ldu, __CLPK_real *__vt, __CLPK_integer *__ldvt, __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1E0C8BE00](__jobu, __jobvt, __m, __n, __a, __lda, __s, __u);
}

float sinhf(float a1)
{
  float result;

  MEMORY[0x1E0C85430](a1);
  return result;
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1E0C85438](*(_QWORD *)&a1);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85460](a1, a2);
}

void srandom(unsigned int a1)
{
  MEMORY[0x1E0C85488](*(_QWORD *)&a1);
}

int ssyevr_(char *__jobz, char *__range, char *__uplo, __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__vl, __CLPK_real *__vu, __CLPK_integer *__il, __CLPK_integer *__iu, __CLPK_real *__abstol, __CLPK_integer *__m, __CLPK_real *__w, __CLPK_real *__z__, __CLPK_integer *__ldz, __CLPK_integer *__isuppz, __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__iwork, __CLPK_integer *__liwork,__CLPK_integer *__info)
{
  return MEMORY[0x1E0C8BF20](__jobz, __range, __uplo, __n, __a, __lda, __vl, __vu);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1E0C85530](__dst, __src);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

char *__cdecl strtok_r(char *__str, const char *__sep, char **__lasts)
{
  return (char *)MEMORY[0x1E0C85650](__str, __sep, __lasts);
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1E0DEEC50]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1E0DEED58]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1E0DEEF38]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1E0DEEF40]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1E0DEEF48]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

void uiter_setString(UCharIterator *iter, const UChar *s, int32_t length)
{
  MEMORY[0x1E0DE62F0](iter, s, *(_QWORD *)&length);
}

uint64_t unorm_next()
{
  return MEMORY[0x1E0DE6518]();
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

FFTSetup vDSP_create_fftsetup(vDSP_Length __Log2n, FFTRadix __Radix)
{
  return (FFTSetup)MEMORY[0x1E0C8C060](__Log2n, *(_QWORD *)&__Radix);
}

void vDSP_ctoz(const DSPComplex *__C, vDSP_Stride __IC, const DSPSplitComplex *__Z, vDSP_Stride __IZ, vDSP_Length __N)
{
  MEMORY[0x1E0C8C070](__C, __IC, __Z, __IZ, __N);
}

void vDSP_destroy_fftsetup(FFTSetup __setup)
{
  MEMORY[0x1E0C8C0A0](__setup);
}

void vDSP_fft_zrip(FFTSetup __Setup, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __Log2N, FFTDirection __Direction)
{
  MEMORY[0x1E0C8C130](__Setup, __C, __IC, __Log2N, *(_QWORD *)&__Direction);
}

void vDSP_hann_window(float *__C, vDSP_Length __N, int __Flag)
{
  MEMORY[0x1E0C8C160](__C, __N, *(_QWORD *)&__Flag);
}

void vDSP_maxvi(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length *__I, vDSP_Length __N)
{
  MEMORY[0x1E0C8C1C0](__A, __IA, __C, __I, __N);
}

void vDSP_sve(const float *__A, vDSP_Stride __I, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C2E8](__A, __I, __C, __N);
}

void vDSP_svemg(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C318](__A, __IA, __C, __N);
}

void vDSP_vclip(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x1E0C8C3D8](__A, __IA, __B, __C, __D, __ID, __N);
}

void vDSP_vma(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, vDSP_Stride __IC, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x1E0C8C6A0](__A, __IA, __B, __IB, __C, __IC, __D, __ID);
}

void vDSP_vmma(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, vDSP_Stride __IC, const float *__D, vDSP_Stride __ID, float *__E, vDSP_Stride __IE, vDSP_Length __N)
{
  MEMORY[0x1E0C8C6F8](__A, __IA, __B, __IB, __C, __IC, __D, __ID);
}

void vDSP_vmsb(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, vDSP_Stride __IC, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x1E0C8C728](__A, __IA, __B, __IB, __C, __IC, __D, __ID);
}

void vDSP_vmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C740](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vramp(const float *__A, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C7A0](__A, __B, __C, __IC, __N);
}

void vDSP_ztoc(const DSPSplitComplex *__Z, vDSP_Stride __IZ, DSPComplex *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8CA50](__Z, __IZ, __C, __IC, __N);
}

void vDSP_zvcmul(const DSPSplitComplex *__A, vDSP_Stride __IA, const DSPSplitComplex *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8CA88](__A, __IA, __B, __IB, __C, __IC, __N);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1E0C85A68](a1, a2, a3);
}

int vsprintf(char *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1E0C85BA8](a1, a2, a3);
}

