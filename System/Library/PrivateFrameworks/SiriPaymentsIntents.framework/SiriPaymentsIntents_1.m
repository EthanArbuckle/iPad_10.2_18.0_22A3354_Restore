uint64_t TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v11;

  v4[42] = v3;
  v4[41] = a2;
  v4[40] = a1;
  v4[34] = v4;
  v4[35] = 0;
  v4[36] = 0;
  v4[37] = 0;
  v4[39] = 0;
  v4[32] = 0;
  v4[33] = 0;
  v11 = (_QWORD *)*v3;
  v4[43] = *v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v4[44] = swift_task_alloc();
  v5 = type metadata accessor for TemplatingResult();
  v4[45] = v5;
  v4[46] = *(_QWORD *)(v5 - 8);
  v4[47] = swift_task_alloc();
  v6 = type metadata accessor for Locale();
  v4[48] = v6;
  v4[49] = *(_QWORD *)(v6 - 8);
  v4[50] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  v4[51] = swift_task_alloc();
  v4[52] = swift_task_alloc();
  v4[53] = swift_task_alloc();
  v7 = type metadata accessor for Logger();
  v4[54] = v7;
  v4[55] = *(_QWORD *)(v7 - 8);
  v4[56] = swift_task_alloc();
  v4[35] = a2;
  v4[36] = a3;
  v4[57] = v11[10];
  v4[37] = v3;
  v4[58] = v11[11];
  v4[59] = v11[12];
  return swift_task_switch();
}

uint64_t TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD, uint64_t, uint64_t);
  uint64_t v13;
  uint8_t *buf;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint32_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;

  v22 = *(_QWORD *)(v0 + 472);
  v21 = *(_QWORD *)(v0 + 464);
  v20 = *(_QWORD *)(v0 + 456);
  v1 = *(_QWORD *)(v0 + 448);
  v18 = *(_QWORD *)(v0 + 440);
  v19 = *(_QWORD *)(v0 + 432);
  v23 = *(_QWORD *)(v0 + 344);
  *(_QWORD *)(v0 + 272) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v1, v2, v19);
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = v20;
  v25[3] = v21;
  v25[4] = v22;
  v25[5] = *(_QWORD *)(v23 + 104);
  v25[6] = *(_QWORD *)(v23 + 112);
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 304) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v24 = *(_DWORD *)(v0 + 520);
  v28 = swift_allocObject();
  *(_BYTE *)(v28 + 16) = 32;
  v29 = swift_allocObject();
  *(_BYTE *)(v29 + 16) = 8;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for implicit closure #1 in TCCHandleStrategy.actionForInput(input:);
  *(_QWORD *)(v26 + 24) = v25;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v27 + 24) = v26;
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v30 + 24) = v27;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v31 = v3;
  swift_retain();
  *v31 = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[1] = v28;
  swift_retain();
  v31[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[3] = v29;
  swift_retain();
  v31[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[5] = v30;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v32, v33))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v15 = createStorage<A>(capacity:type:)(0);
    v16 = createStorage<A>(capacity:type:)(1);
    v34 = buf;
    v35 = v15;
    v36 = v16;
    serialize(_:at:)(2, &v34);
    serialize(_:at:)(1, &v34);
    v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v38 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v38 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v38 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    _os_log_impl(&dword_24701B000, v32, v33, "#TCCHandleStrategy<%s> makePromptForTCCAcceptance", buf, v24);
    destroyStorage<A>(_:count:)(v15, 0, v13);
    destroyStorage<A>(_:count:)(v16, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v7 = v17[56];
  v6 = v17[55];
  v8 = v17[54];
  v9 = v17[42];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  outlined init with copy of GlobalsProviding(v9 + 104, (uint64_t)(v17 + 2));
  v10 = v17[5];
  v11 = v17[6];
  __swift_project_boxed_opaque_existential_1(v17 + 2, v10);
  v12 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + 24) + **(int **)(v11 + 24));
  v4 = (_QWORD *)swift_task_alloc();
  v17[60] = v4;
  *v4 = v17[34];
  v4[1] = TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:);
  return v12(v17[41], v10, v11);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD, _QWORD, _QWORD *, uint64_t, uint64_t);
  const void *v13;
  void *v14;
  const void *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0[61];
  v20 = v0[50];
  v19 = v0[49];
  v22 = v0[48];
  v18 = v0[42];
  v0[34] = v0;
  v0[39] = v1;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  type metadata accessor for AppInformationResolver();
  swift_retain();
  AppInformationResolver.__allocating_init(app:)();
  outlined init with copy of GlobalsProviding(v18 + 192, (uint64_t)(v0 + 7));
  __swift_project_boxed_opaque_existential_1(v0 + 7, v0[10]);
  dispatch thunk of DeviceState.siriLocale.getter();
  v21 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  v23 = v2;
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v22);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  swift_release();
  if (v23)
  {
    v16 = (void *)v17[53];
    v15 = (const void *)v17[52];
    v17[32] = v21;
    v17[33] = v23;
    App.isFirstParty.getter();
    AppDisplayInfo.init(displayName:isFirstParty:)();
    v3 = type metadata accessor for AppDisplayInfo();
    (*(void (**)(const void *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v15, 0, 1);
    outlined init with take of AppDisplayInfo?(v15, v16);
  }
  else
  {
    v14 = (void *)v17[53];
    v13 = (const void *)v17[52];
    v4 = type metadata accessor for AppDisplayInfo();
    (*(void (**)(const void *, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v13, 1);
    outlined init with take of AppDisplayInfo?(v13, v14);
  }
  v8 = (const void *)v17[53];
  v7 = (void *)v17[51];
  v9 = v17[42];
  outlined init with copy of GlobalsProviding(v9 + 64, (uint64_t)(v17 + 12));
  v10 = v17[15];
  v11 = v17[16];
  __swift_project_boxed_opaque_existential_1(v17 + 12, v10);
  outlined init with copy of AppDisplayInfo?(v8, v7);
  outlined init with copy of GlobalsProviding(v9 + 192, (uint64_t)(v17 + 17));
  v12 = (uint64_t (*)(_QWORD, _QWORD, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v11 + 8) + **(int **)(v11 + 8));
  v5 = (_QWORD *)swift_task_alloc();
  v17[63] = v5;
  *v5 = v17[34];
  v5[1] = TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:);
  return v12(v17[47], v17[51], v17 + 17, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  v5 = *v1 + 16;
  v6 = *v1 + 136;
  *(_QWORD *)(v2 + 272) = *v1;
  *(_QWORD *)(v2 + 512) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 392);
    outlined destroy of FlowActivity?(v6);
    outlined destroy of AppDisplayInfo?(v4);
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  id v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = (id)v0[61];
  v12 = v0[53];
  v13 = v0[47];
  v9 = v0[46];
  v10 = v0[45];
  v14 = v0[44];
  v1 = v0[42];
  v7 = v0[41];
  v8 = (uint64_t *)v0[40];
  v0[34] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  outlined init with copy of GlobalsProviding(v1 + 192, (uint64_t)(v0 + 22));
  TCCHandleStrategy.ttsEnabled.getter();
  type metadata accessor for SAAceView();
  _allocateUninitializedArray<A>(_:)();
  v6 = v2;
  v3 = v11;
  *v6 = v11;
  _finalizeUninitializedArray<A>(_:)();
  static PaymentsContextProvider.tccAcceptanceContextUpdate(app:)(v7, v14);
  v4 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v14, 0, 1);
  v0[27] = 0;
  v0[28] = 0;
  v0[29] = 0;
  v0[30] = 0;
  v0[31] = 0;
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v8[3] = type metadata accessor for AceOutput();
  v8[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v8);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 27));
  outlined destroy of NLContextUpdate?(v14);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 22));
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v10);
  outlined destroy of AppDisplayInfo?(v12);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[34] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 272) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 272) + 8))();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v4 = (id)v0[61];
  v3 = v0[53];
  v2 = v0[51];
  v0[34] = v0;
  outlined destroy of FlowActivity?((uint64_t)(v0 + 17));
  outlined destroy of AppDisplayInfo?(v2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  outlined destroy of AppDisplayInfo?(v3);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[34] + 8))();
}

uint64_t TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[34] = *v2;
  v3[61] = a1;
  v3[62] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t TCCHandleStrategy.parseTCCConfirmationResponse(input:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v11;

  v3[20] = v2;
  v3[19] = a2;
  v3[18] = a1;
  v3[7] = v3;
  v3[8] = 0;
  v3[9] = 0;
  v3[16] = 0;
  v11 = (_QWORD *)*v2;
  v3[21] = *v2;
  v4 = type metadata accessor for Input();
  v3[22] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[23] = v5;
  v3[24] = *(_QWORD *)(v5 + 64);
  v3[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  v6 = type metadata accessor for Parse();
  v3[28] = v6;
  v3[29] = *(_QWORD *)(v6 - 8);
  v3[30] = swift_task_alloc();
  v7 = type metadata accessor for ConfirmationResponse();
  v3[31] = v7;
  v3[32] = *(_QWORD *)(v7 - 8);
  v3[33] = swift_task_alloc();
  v8 = type metadata accessor for Logger();
  v3[34] = v8;
  v3[35] = *(_QWORD *)(v8 - 8);
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  v3[38] = swift_task_alloc();
  v3[8] = a2;
  v3[9] = v2;
  v3[39] = v11[10];
  v3[40] = v11[11];
  v3[41] = v11[12];
  return swift_task_switch();
}

uint64_t TCCHandleStrategy.parseTCCConfirmationResponse(input:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  id v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint32_t v25;
  os_log_type_t v26;
  NSObject *log;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint32_t size;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  NSObject *oslog;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint8_t *buf;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint32_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(uint64_t, uint64_t, uint64_t);
  uint64_t v113;

  v90 = *(_QWORD *)(v0 + 328);
  v89 = *(_QWORD *)(v0 + 320);
  v88 = *(_QWORD *)(v0 + 312);
  v1 = *(_QWORD *)(v0 + 304);
  v85 = *(_QWORD *)(v0 + 280);
  v86 = *(_QWORD *)(v0 + 272);
  v91 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 56) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 16);
  v87(v1, v2, v86);
  v95 = (_QWORD *)swift_allocObject();
  v95[2] = v88;
  v95[3] = v89;
  v95[4] = v90;
  v92 = *(_QWORD *)(v91 + 104);
  v95[5] = v92;
  v93 = *(_QWORD *)(v91 + 112);
  v95[6] = v93;
  v102 = Logger.logObject.getter();
  v103 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 80) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v94 = *(_DWORD *)(v0 + 336);
  v98 = swift_allocObject();
  *(_BYTE *)(v98 + 16) = 32;
  v99 = swift_allocObject();
  *(_BYTE *)(v99 + 16) = 8;
  v96 = swift_allocObject();
  *(_QWORD *)(v96 + 16) = partial apply for implicit closure #1 in TCCHandleStrategy.actionForInput(input:);
  *(_QWORD *)(v96 + 24) = v95;
  v97 = swift_allocObject();
  *(_QWORD *)(v97 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v97 + 24) = v96;
  v100 = swift_allocObject();
  *(_QWORD *)(v100 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v100 + 24) = v97;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v101 = v3;
  swift_retain();
  *v101 = partial apply for closure #1 in OSLogArguments.append(_:);
  v101[1] = v98;
  swift_retain();
  v101[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v101[3] = v99;
  swift_retain();
  v101[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v101[5] = v100;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v102, v103))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v80 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v82 = createStorage<A>(capacity:type:)(0);
    v83 = createStorage<A>(capacity:type:)(1);
    v109 = buf;
    v110 = v82;
    v111 = v83;
    serialize(_:at:)(2, &v109);
    serialize(_:at:)(1, &v109);
    v112 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v113 = v98;
    closure #1 in osLogInternal(_:log:type:)(&v112, (uint64_t)&v109, (uint64_t)&v110, (uint64_t)&v111);
    v112 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v113 = v99;
    closure #1 in osLogInternal(_:log:type:)(&v112, (uint64_t)&v109, (uint64_t)&v110, (uint64_t)&v111);
    v112 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v113 = v100;
    closure #1 in osLogInternal(_:log:type:)(&v112, (uint64_t)&v109, (uint64_t)&v110, (uint64_t)&v111);
    _os_log_impl(&dword_24701B000, v102, v103, "##TCCHandleStrategy<%s> parseTCCConfirmationResponse", buf, v94);
    destroyStorage<A>(_:count:)(v82, 0, v80);
    destroyStorage<A>(_:count:)(v83, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v75 = *(_QWORD *)(v84 + 304);
  v74 = *(_QWORD *)(v84 + 280);
  v76 = *(_QWORD *)(v84 + 272);
  v78 = *(_QWORD *)(v84 + 160);

  v77 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
  v77(v75, v76);
  swift_beginAccess();
  v79 = *(void **)(v78 + 16);
  v4 = v79;
  swift_endAccess();
  if (v79)
  {
    v71 = *(_QWORD *)(v84 + 256);
    v73 = *(_QWORD *)(v84 + 248);
    v72 = *(_QWORD *)(v84 + 216);
    *(_QWORD *)(v84 + 128) = v79;
    Input.parse.getter();
    Parse.confirmationResponse.getter(v72);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v72, 1, v73) != 1)
    {
      v68 = *(_QWORD *)(v84 + 264);
      v66 = *(_QWORD *)(v84 + 256);
      v67 = *(_QWORD *)(v84 + 248);
      v69 = *(_QWORD *)(v84 + 240);
      v64 = *(_QWORD *)(v84 + 232);
      v65 = *(_QWORD *)(v84 + 224);
      v70 = *(_QWORD *)(v84 + 208);
      (*(void (**)(void))(v66 + 32))();
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v69, v65);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v70, v68, v67);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v66 + 56))(v70, 0, 1, v67);
      ConfirmIntentAnswer.init(confirmationResponse:intent:)();
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v68, v67);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(*(_QWORD *)(v84 + 56) + 8))();
    }
    v43 = *(_QWORD *)(v84 + 328);
    v42 = *(_QWORD *)(v84 + 320);
    v41 = *(_QWORD *)(v84 + 312);
    v6 = *(_QWORD *)(v84 + 296);
    v40 = *(_QWORD *)(v84 + 272);
    v39 = *(_QWORD *)(v84 + 240);
    v37 = *(_QWORD *)(v84 + 232);
    v38 = *(_QWORD *)(v84 + 224);
    v47 = *(_QWORD *)(v84 + 200);
    v46 = *(_QWORD *)(v84 + 184);
    v48 = *(_QWORD *)(v84 + 176);
    v44 = *(_QWORD *)(v84 + 152);
    outlined destroy of ConfirmationResponse?(*(_QWORD *)(v84 + 216));
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
    v7 = Logger.payments.unsafeMutableAddressor();
    v87(v6, v7, v40);
    v50 = (_QWORD *)swift_allocObject();
    v50[2] = v41;
    v50[3] = v42;
    v50[4] = v43;
    v50[5] = v92;
    v50[6] = v93;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v47, v44, v48);
    v45 = (*(unsigned __int8 *)(v46 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    v53 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v46 + 32))(v53 + v45, v47, v48);
    oslog = Logger.logObject.getter();
    v63 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v84 + 136) = 22;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v84 + 344);
    v55 = swift_allocObject();
    *(_BYTE *)(v55 + 16) = 32;
    v56 = swift_allocObject();
    *(_BYTE *)(v56 + 16) = 8;
    v51 = swift_allocObject();
    *(_QWORD *)(v51 + 16) = partial apply for implicit closure #1 in TCCHandleStrategy.actionForInput(input:);
    *(_QWORD *)(v51 + 24) = v50;
    v52 = swift_allocObject();
    *(_QWORD *)(v52 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v52 + 24) = v51;
    v57 = swift_allocObject();
    *(_QWORD *)(v57 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v57 + 24) = v52;
    v58 = swift_allocObject();
    *(_BYTE *)(v58 + 16) = 32;
    v59 = swift_allocObject();
    *(_BYTE *)(v59 + 16) = 8;
    v54 = swift_allocObject();
    *(_QWORD *)(v54 + 16) = partial apply for implicit closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
    *(_QWORD *)(v54 + 24) = v53;
    v60 = swift_allocObject();
    *(_QWORD *)(v60 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v60 + 24) = v54;
    _allocateUninitializedArray<A>(_:)();
    v61 = v8;
    swift_retain();
    *v61 = partial apply for closure #1 in OSLogArguments.append(_:);
    v61[1] = v55;
    swift_retain();
    v61[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v61[3] = v56;
    swift_retain();
    v61[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v61[5] = v57;
    swift_retain();
    v61[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v61[7] = v58;
    swift_retain();
    v61[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v61[9] = v59;
    swift_retain();
    v61[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v61[11] = v60;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v63))
    {
      v34 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v35 = createStorage<A>(capacity:type:)(0);
      v36 = createStorage<A>(capacity:type:)(2);
      v104 = v34;
      v105 = v35;
      v106 = v36;
      serialize(_:at:)(2, &v104);
      serialize(_:at:)(2, &v104);
      v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v108 = v55;
      closure #1 in osLogInternal(_:log:type:)(&v107, (uint64_t)&v104, (uint64_t)&v105, (uint64_t)&v106);
      v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v108 = v56;
      closure #1 in osLogInternal(_:log:type:)(&v107, (uint64_t)&v104, (uint64_t)&v105, (uint64_t)&v106);
      v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v108 = v57;
      closure #1 in osLogInternal(_:log:type:)(&v107, (uint64_t)&v104, (uint64_t)&v105, (uint64_t)&v106);
      v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v108 = v58;
      closure #1 in osLogInternal(_:log:type:)(&v107, (uint64_t)&v104, (uint64_t)&v105, (uint64_t)&v106);
      v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v108 = v59;
      closure #1 in osLogInternal(_:log:type:)(&v107, (uint64_t)&v104, (uint64_t)&v105, (uint64_t)&v106);
      v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v108 = v60;
      closure #1 in osLogInternal(_:log:type:)(&v107, (uint64_t)&v104, (uint64_t)&v105, (uint64_t)&v106);
      _os_log_impl(&dword_24701B000, oslog, v63, "#TCCHandleStrategy<%s> couldn't obtain confirmation response from input parse %s", v34, size);
      destroyStorage<A>(_:count:)(v35, 0, v33);
      destroyStorage<A>(_:count:)(v36, 2, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v34, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    v29 = *(_QWORD *)(v84 + 296);
    v30 = *(_QWORD *)(v84 + 272);

    v77(v29, v30);
    *(_QWORD *)(v84 + 40) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v84 + 48) = v9;
    v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v10);
    swift_bridgeObjectRelease();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v32 = String.init(stringInterpolation:)();
    v31 = v12;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v13 = v32;
    *(_QWORD *)(v13 + 8) = v31;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = 0;
    *(_BYTE *)(v13 + 48) = 15;
    swift_willThrow();

  }
  else
  {
    v14 = *(_QWORD *)(v84 + 288);
    v24 = *(_QWORD *)(v84 + 272);
    v15 = Logger.payments.unsafeMutableAddressor();
    v87(v14, v15, v24);
    log = Logger.logObject.getter();
    v26 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v84 + 88) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v25 = *(_DWORD *)(v84 + 340);
    v28 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v26))
    {
      v20 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v21 = createStorage<A>(capacity:type:)(0);
      v22 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v84 + 96) = v20;
      *(_QWORD *)(v84 + 104) = v21;
      *(_QWORD *)(v84 + 112) = v22;
      serialize(_:at:)(0, (_BYTE **)(v84 + 96));
      serialize(_:at:)(0, (_BYTE **)(v84 + 96));
      *(_QWORD *)(v84 + 120) = v28;
      v23 = (_QWORD *)swift_task_alloc();
      v23[2] = v84 + 96;
      v23[3] = v84 + 104;
      v23[4] = v84 + 112;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24701B000, log, v26, "couldn't restore in-progress intent", v20, v25);
      destroyStorage<A>(_:count:)(v21, 0, v19);
      destroyStorage<A>(_:count:)(v22, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v20, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v17 = *(_QWORD *)(v84 + 288);
    v18 = *(_QWORD *)(v84 + 272);

    v77(v17, v18);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v16 = 9;
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)(v16 + 24) = 0;
    *(_QWORD *)(v16 + 32) = 0;
    *(_QWORD *)(v16 + 40) = 0;
    *(_BYTE *)(v16 + 48) = 17;
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v84 + 56) + 8))();
}

uint64_t TCCHandleStrategy.makeTCCConfirmationRejectedResponse(app:intent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v10;

  v4[28] = v3;
  v4[27] = a1;
  v4[22] = v4;
  v4[23] = 0;
  v4[24] = 0;
  v4[25] = 0;
  v10 = (_QWORD *)*v3;
  v4[29] = *v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v4[30] = swift_task_alloc();
  v5 = type metadata accessor for TemplatingResult();
  v4[31] = v5;
  v4[32] = *(_QWORD *)(v5 - 8);
  v4[33] = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  v4[34] = v6;
  v4[35] = *(_QWORD *)(v6 - 8);
  v4[36] = swift_task_alloc();
  v4[23] = a2;
  v4[24] = a3;
  v4[37] = v10[10];
  v4[25] = v3;
  v4[38] = v10[11];
  v4[39] = v10[12];
  return swift_task_switch();
}

uint64_t TCCHandleStrategy.makeTCCConfirmationRejectedResponse(app:intent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD, _QWORD *, uint64_t, uint64_t);
  uint64_t v13;
  uint8_t *buf;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint32_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;

  v22 = *(_QWORD *)(v0 + 312);
  v21 = *(_QWORD *)(v0 + 304);
  v20 = *(_QWORD *)(v0 + 296);
  v1 = *(_QWORD *)(v0 + 288);
  v18 = *(_QWORD *)(v0 + 280);
  v19 = *(_QWORD *)(v0 + 272);
  v23 = *(_QWORD *)(v0 + 232);
  *(_QWORD *)(v0 + 176) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v1, v2, v19);
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = v20;
  v25[3] = v21;
  v25[4] = v22;
  v25[5] = *(_QWORD *)(v23 + 104);
  v25[6] = *(_QWORD *)(v23 + 112);
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 208) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v24 = *(_DWORD *)(v0 + 336);
  v28 = swift_allocObject();
  *(_BYTE *)(v28 + 16) = 32;
  v29 = swift_allocObject();
  *(_BYTE *)(v29 + 16) = 8;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for implicit closure #1 in TCCHandleStrategy.actionForInput(input:);
  *(_QWORD *)(v26 + 24) = v25;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v27 + 24) = v26;
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v30 + 24) = v27;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v31 = v3;
  swift_retain();
  *v31 = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[1] = v28;
  swift_retain();
  v31[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[3] = v29;
  swift_retain();
  v31[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[5] = v30;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v32, v33))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v15 = createStorage<A>(capacity:type:)(0);
    v16 = createStorage<A>(capacity:type:)(1);
    v34 = buf;
    v35 = v15;
    v36 = v16;
    serialize(_:at:)(2, &v34);
    serialize(_:at:)(1, &v34);
    v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v38 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v38 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v38 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    _os_log_impl(&dword_24701B000, v32, v33, "##TCCHandleStrategy<%s> makeTCCConfirmationRejectedResponse", buf, v24);
    destroyStorage<A>(_:count:)(v15, 0, v13);
    destroyStorage<A>(_:count:)(v16, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v7 = v17[36];
  v6 = v17[35];
  v8 = v17[34];
  v9 = v17[28];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  outlined init with copy of GlobalsProviding(v9 + 64, (uint64_t)(v17 + 2));
  v10 = v17[5];
  v11 = v17[6];
  __swift_project_boxed_opaque_existential_1(v17 + 2, v10);
  outlined init with copy of GlobalsProviding(v9 + 192, (uint64_t)(v17 + 7));
  v12 = (uint64_t (*)(_QWORD, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v11 + 24) + **(int **)(v11 + 24));
  v4 = (_QWORD *)swift_task_alloc();
  v17[40] = v4;
  *v4 = v17[22];
  v4[1] = TCCHandleStrategy.makeTCCConfirmationRejectedResponse(app:intent:);
  return v12(v17[33], v17 + 7, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 176) = *v1;
  v4 = v2 + 56;
  *(_QWORD *)(v2 + 328) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of FlowActivity?(v4);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = v0[33];
  v5 = v0[32];
  v6 = v0[31];
  v8 = v0[30];
  v1 = v0[28];
  v4 = (uint64_t *)v0[27];
  v0[22] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  outlined init with copy of GlobalsProviding(v1 + 192, (uint64_t)(v0 + 12));
  TCCHandleStrategy.ttsEnabled.getter();
  v2 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v8, 1);
  v0[17] = 0;
  v0[18] = 0;
  v0[19] = 0;
  v0[20] = 0;
  v0[21] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v4[3] = type metadata accessor for AceOutput();
  v4[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v4);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 17));
  outlined destroy of NLContextUpdate?(v8);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[22] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 176) = v0;
  outlined destroy of FlowActivity?(v0 + 56);
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 176) + 8))();
}

uint64_t TCCHandleStrategy.makeTCCCancelledResponse(app:intent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v10;

  v4[28] = v3;
  v4[27] = a1;
  v4[22] = v4;
  v4[23] = 0;
  v4[24] = 0;
  v4[25] = 0;
  v10 = (_QWORD *)*v3;
  v4[29] = *v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v4[30] = swift_task_alloc();
  v5 = type metadata accessor for TemplatingResult();
  v4[31] = v5;
  v4[32] = *(_QWORD *)(v5 - 8);
  v4[33] = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  v4[34] = v6;
  v4[35] = *(_QWORD *)(v6 - 8);
  v4[36] = swift_task_alloc();
  v4[23] = a2;
  v4[24] = a3;
  v4[37] = v10[10];
  v4[25] = v3;
  v4[38] = v10[11];
  v4[39] = v10[12];
  return swift_task_switch();
}

uint64_t TCCHandleStrategy.makeTCCCancelledResponse(app:intent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD, _QWORD *, uint64_t, uint64_t);
  uint64_t v13;
  uint8_t *buf;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint32_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;

  v22 = *(_QWORD *)(v0 + 312);
  v21 = *(_QWORD *)(v0 + 304);
  v20 = *(_QWORD *)(v0 + 296);
  v1 = *(_QWORD *)(v0 + 288);
  v18 = *(_QWORD *)(v0 + 280);
  v19 = *(_QWORD *)(v0 + 272);
  v23 = *(_QWORD *)(v0 + 232);
  *(_QWORD *)(v0 + 176) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v1, v2, v19);
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = v20;
  v25[3] = v21;
  v25[4] = v22;
  v25[5] = *(_QWORD *)(v23 + 104);
  v25[6] = *(_QWORD *)(v23 + 112);
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 208) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v24 = *(_DWORD *)(v0 + 336);
  v28 = swift_allocObject();
  *(_BYTE *)(v28 + 16) = 32;
  v29 = swift_allocObject();
  *(_BYTE *)(v29 + 16) = 8;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for implicit closure #1 in TCCHandleStrategy.actionForInput(input:);
  *(_QWORD *)(v26 + 24) = v25;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v27 + 24) = v26;
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v30 + 24) = v27;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v31 = v3;
  swift_retain();
  *v31 = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[1] = v28;
  swift_retain();
  v31[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[3] = v29;
  swift_retain();
  v31[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[5] = v30;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v32, v33))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v15 = createStorage<A>(capacity:type:)(0);
    v16 = createStorage<A>(capacity:type:)(1);
    v34 = buf;
    v35 = v15;
    v36 = v16;
    serialize(_:at:)(2, &v34);
    serialize(_:at:)(1, &v34);
    v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v38 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v38 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v38 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    _os_log_impl(&dword_24701B000, v32, v33, "##TCCHandleStrategy<%s> makeTCCCancelledResponse", buf, v24);
    destroyStorage<A>(_:count:)(v15, 0, v13);
    destroyStorage<A>(_:count:)(v16, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v7 = v17[36];
  v6 = v17[35];
  v8 = v17[34];
  v9 = v17[28];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  outlined init with copy of GlobalsProviding(v9 + 64, (uint64_t)(v17 + 2));
  v10 = v17[5];
  v11 = v17[6];
  __swift_project_boxed_opaque_existential_1(v17 + 2, v10);
  outlined init with copy of GlobalsProviding(v9 + 192, (uint64_t)(v17 + 7));
  v12 = (uint64_t (*)(_QWORD, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v11 + 16) + **(int **)(v11 + 16));
  v4 = (_QWORD *)swift_task_alloc();
  v17[40] = v4;
  *v4 = v17[22];
  v4[1] = TCCHandleStrategy.makeTCCConfirmationRejectedResponse(app:intent:);
  return v12(v17[33], v17 + 7, v10, v11);
}

uint64_t TCCHandleStrategy.catFamily.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 184);
  swift_retain();
  return v2;
}

_QWORD *TCCHandleStrategy.__allocating_init(previousIntent:globals:catFamily:commonLabelsProvider:tccTemplateProvider:confirmationViewBuilder:)(void *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_allocObject();
  return TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccTemplateProvider:confirmationViewBuilder:)(a1, a2, a3, a4, a5, a6);
}

_QWORD *TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccTemplateProvider:confirmationViewBuilder:)(void *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  id v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v21;
  _BYTE v22[40];
  _BYTE v23[40];
  _BYTE v24[40];
  _BYTE v25[40];
  _BYTE v26[40];
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;

  v36 = 0;
  v34 = 0;
  v33 = 0;
  v32 = 0;
  v31 = 0;
  v30 = 0;
  v29 = 0;
  v7 = (_QWORD *)*v6;
  v36 = a1;
  v35 = v7[10];
  v34 = a2;
  v33 = a3;
  v32 = a4;
  v31 = a5;
  v30 = a6;
  v29 = v6;
  v28 = v7[11];
  v27 = v7[12];
  v6[2] = 0;
  v12 = a2[3];
  v11 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v12);
  (*(void (**)(uint64_t))(v11 + 24))(v12);
  outlined init with take of CommonLabelsProviding(v26, v21 + 18);
  swift_retain();
  v21[23] = a3;
  v14 = a2[3];
  v13 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v14);
  (*(void (**)(uint64_t))(v13 + 16))(v14);
  outlined init with take of CommonLabelsProviding(v25, v21 + 24);
  v8 = a1;
  swift_beginAccess();
  v9 = (void *)v21[2];
  v21[2] = a1;

  swift_endAccess();
  outlined init with copy of GlobalsProviding(a4, (uint64_t)v24);
  outlined init with take of CommonLabelsProviding(v24, v21 + 3);
  outlined init with copy of GlobalsProviding(a5, (uint64_t)v23);
  outlined init with take of CommonLabelsProviding(v23, v21 + 8);
  outlined init with copy of GlobalsProviding(a6, (uint64_t)v22);
  outlined init with take of CommonLabelsProviding(v22, v21 + 13);
  __swift_destroy_boxed_opaque_existential_0(a6);
  __swift_destroy_boxed_opaque_existential_0(a5);
  __swift_destroy_boxed_opaque_existential_0(a4);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a2);

  return v21;
}

uint64_t sub_2470F2400()
{
  return swift_deallocObject();
}

NSJSONWritingOptions partial apply for implicit closure #1 in TCCHandleStrategy.actionForInput(input:)()
{
  uint64_t v0;

  return NSJSONWritingOptions.init(rawValue:)(*(_QWORD *)(v0 + 16));
}

uint64_t TCCHandleStrategy.__deallocating_deinit()
{
  TCCHandleStrategy.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for BaseTCCStrategyProviding.catFamily.getter in conformance TCCHandleStrategy<A, B, C>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = TCCHandleStrategy.catFamily.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for ClientHandledRequestTCCAcceptanceFlowStrategyAsync.handoffTCCFlow(deviceState:) in conformance TCCHandleStrategy<A1, B1, C1>()
{
  return ClientHandledRequestTCCAcceptanceFlowStrategyAsync.handoffTCCFlow(deviceState:)() & 1;
}

uint64_t protocol witness for ClientHandledRequestTCCAcceptanceFlowStrategyAsync.actionForInput(input:) in conformance TCCHandleStrategy<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return TCCHandleStrategy.actionForInput(input:)(a1, a2);
}

uint64_t protocol witness for ClientHandledRequestTCCAcceptanceFlowStrategyAsync.parseTCCConfirmationResponse(input:) in conformance TCCHandleStrategy<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return TCCHandleStrategy.parseTCCConfirmationResponse(input:)(a1, a2);
}

uint64_t protocol witness for ClientHandledRequestTCCAcceptanceFlowStrategyAsync.makeTCCConfirmationRejectedResponse(app:intent:) in conformance TCCHandleStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return TCCHandleStrategy.makeTCCConfirmationRejectedResponse(app:intent:)(a1, a2, a3);
}

uint64_t protocol witness for ClientHandledRequestTCCAcceptanceFlowStrategyAsync.makeTCCCancelledResponse(app:intent:) in conformance TCCHandleStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return TCCHandleStrategy.makeTCCCancelledResponse(app:intent:)(a1, a2, a3);
}

uint64_t protocol witness for ClientHandledRequestTCCAcceptanceFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance TCCHandleStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v13;

  v13 = v5;
  v5[7] = v5;
  v6 = (_QWORD *)swift_task_alloc();
  v13[8] = v6;
  v7 = a5[11];
  v8 = a5[12];
  v9 = a5[13];
  v10 = a5[14];
  v13[2] = a5[10];
  v13[3] = v7;
  v13[4] = v8;
  v13[5] = v9;
  v13[6] = v10;
  type metadata accessor for TCCHandleStrategy(0, (uint64_t)(v13 + 2));
  *v6 = v13[7];
  v6[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return ClientHandledRequestTCCAcceptanceFlowStrategyAsync.makeErrorResponse(error:app:intent:)();
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForTCCAcceptance(app:intent:) in conformance TCCHandleStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:)(a1, a2, a3);
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:) in conformance TCCHandleStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v12;

  v12 = v4;
  v4[7] = v4;
  v5 = (_QWORD *)swift_task_alloc();
  v12[8] = v5;
  v6 = a4[11];
  v7 = a4[12];
  v8 = a4[13];
  v9 = a4[14];
  v12[2] = a4[10];
  v12[3] = v6;
  v12[4] = v7;
  v12[5] = v8;
  v12[6] = v9;
  type metadata accessor for TCCHandleStrategy(0, (uint64_t)(v12 + 2));
  *v5 = v12[7];
  v5[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:)();
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnLowConfidence(app:intent:) in conformance TCCHandleStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v12;

  v12 = v4;
  v4[7] = v4;
  v5 = (_QWORD *)swift_task_alloc();
  v12[8] = v5;
  v6 = a4[11];
  v7 = a4[12];
  v8 = a4[13];
  v9 = a4[14];
  v12[2] = a4[10];
  v12[3] = v6;
  v12[4] = v7;
  v12[5] = v8;
  v12[6] = v9;
  type metadata accessor for TCCHandleStrategy(0, (uint64_t)(v12 + 2));
  *v5 = v12[7];
  v5[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnLowConfidence(app:intent:)();
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForDeviceUnlock(app:intent:) in conformance TCCHandleStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v12;

  v12 = v4;
  v4[7] = v4;
  v5 = (_QWORD *)swift_task_alloc();
  v12[8] = v5;
  v6 = a4[11];
  v7 = a4[12];
  v8 = a4[13];
  v9 = a4[14];
  v12[2] = a4[10];
  v12[3] = v6;
  v12[4] = v7;
  v12[5] = v8;
  v12[6] = v9;
  type metadata accessor for TCCHandleStrategy(0, (uint64_t)(v12 + 2));
  *v5 = v12[7];
  v5[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return RequestTCCAcceptanceFlowStrategyAsync.makePromptForDeviceUnlock(app:intent:)();
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeHandoffForAuthenticationResponse(app:intent:) in conformance TCCHandleStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v12;

  v12 = v4;
  v4[7] = v4;
  v5 = (_QWORD *)swift_task_alloc();
  v12[8] = v5;
  v6 = a4[11];
  v7 = a4[12];
  v8 = a4[13];
  v9 = a4[14];
  v12[2] = a4[10];
  v12[3] = v6;
  v12[4] = v7;
  v12[5] = v8;
  v12[6] = v9;
  type metadata accessor for TCCHandleStrategy(0, (uint64_t)(v12 + 2));
  *v5 = v12[7];
  v5[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return RequestTCCAcceptanceFlowStrategyAsync.makeHandoffForAuthenticationResponse(app:intent:)();
}

uint64_t sub_2470F2B68()
{
  return swift_deallocObject();
}

uint64_t sub_2470F2B90()
{
  return swift_deallocObject();
}

uint64_t sub_2470F2BB8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470F2BF4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470F2C30()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470F2C6C()
{
  return swift_deallocObject();
}

uint64_t sub_2470F2CB4()
{
  return swift_deallocObject();
}

uint64_t sub_2470F2CDC()
{
  return swift_deallocObject();
}

uint64_t sub_2470F2D04()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470F2D40()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470F2D7C()
{
  swift_release();
  return swift_deallocObject();
}

void *outlined init with take of AppDisplayInfo?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for AppDisplayInfo();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

void *outlined init with copy of AppDisplayInfo?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for AppDisplayInfo();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of AppDisplayInfo?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for AppDisplayInfo();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t sub_2470F2FA0()
{
  return swift_deallocObject();
}

uint64_t sub_2470F2FE8()
{
  return swift_deallocObject();
}

uint64_t sub_2470F3010()
{
  return swift_deallocObject();
}

uint64_t sub_2470F3038()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470F3074()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470F30B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470F30EC()
{
  return swift_deallocObject();
}

uint64_t sub_2470F3134()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Input() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_2470F31A4()
{
  return swift_deallocObject();
}

uint64_t sub_2470F31CC()
{
  return swift_deallocObject();
}

uint64_t sub_2470F31F4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470F3230()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470F326C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470F32A8()
{
  return swift_deallocObject();
}

uint64_t sub_2470F32D0()
{
  return swift_deallocObject();
}

uint64_t sub_2470F32F8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470F3334()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470F3370()
{
  return swift_deallocObject();
}

uint64_t sub_2470F33B8()
{
  return swift_deallocObject();
}

uint64_t sub_2470F33E0()
{
  return swift_deallocObject();
}

uint64_t sub_2470F3408()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470F3444()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470F3480()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470F34BC()
{
  return swift_deallocObject();
}

uint64_t sub_2470F3504()
{
  return swift_deallocObject();
}

uint64_t sub_2470F352C()
{
  return swift_deallocObject();
}

uint64_t sub_2470F3554()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470F3590()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470F35CC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for TCCHandleStrategy(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x249572C38](a1, a2, &nominal type descriptor for TCCHandleStrategy);
}

uint64_t type metadata accessor for SendTCCHandleStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SendTCCHandleStrategy;
  if (!type metadata singleton initialization cache for SendTCCHandleStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for SendTCCHandleStrategy()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t type metadata accessor for RequestTCCHandleStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for RequestTCCHandleStrategy;
  if (!type metadata singleton initialization cache for RequestTCCHandleStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata accessor for SearchForAccountsTCCHandleStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SearchForAccountsTCCHandleStrategy;
  if (!type metadata singleton initialization cache for SearchForAccountsTCCHandleStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for TCCHandleStrategy()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t instantiation function for generic protocol witness table for TCCHandleStrategy<A, B, C>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x249572C98](&protocol conformance descriptor for TCCHandleStrategy<A, B, C>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for RequestTCCAcceptanceFlowStrategyAsync in TCCHandleStrategy<A, B, C>(uint64_t a1)
{
  return MEMORY[0x249572C98](&protocol conformance descriptor for TCCHandleStrategy<A, B, C>, a1);
}

uint64_t associated type witness table accessor for ClientHandledRequestTCCAcceptanceFlowStrategyAsync.AnswerType : ConfirmationResponseProviding in TCCHandleStrategy<A, B, C>(uint64_t a1)
{
  return MEMORY[0x249572C98](MEMORY[0x24BE983A0], a1);
}

uint64_t INPerson.identifier.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;

  v14 = objc_msgSend(v0, sel_contactIdentifier);
  if (v14)
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v1;

    v12 = v10;
    v13 = v11;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  if (v13)
  {
    swift_bridgeObjectRetain();
    v15 = v12;
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    return v15;
  }
  v9 = objc_msgSend(v0, sel_customIdentifier);
  if (v9)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v2;

    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  if (v8)
  {
    swift_bridgeObjectRetain();
    v15 = v7;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  return INPerson.encodeBase64.getter();
}

uint64_t INPerson.hasHandleLabel.getter()
{
  void *v0;
  id v1;
  char v3;
  char v4;
  id v5;
  id v6;
  id v7;
  unsigned __int8 v8;
  void *v9;

  v9 = v0;
  v7 = objc_msgSend(v0, sel_personHandle);
  if (v7)
  {
    v5 = v7;
    v1 = v7;
    outlined destroy of SFRichText?(&v7);
    v6 = objc_msgSend(v5, sel_label);

    if (v6)
    {
      INPersonHandleLabel.rawValue.getter(v6);

      v3 = String.isEmpty.getter();
      swift_bridgeObjectRelease();
      v4 = v3 & 1;
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of SFRichText?(&v7);
  }
  v4 = 2;
LABEL_6:
  if (v4 == 2)
    v8 = 1;
  else
    v8 = v4 & 1;
  return (v8 ^ 1) & 1;
}

uint64_t INPerson.hasHandleValue.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  unsigned __int8 v11;
  void *v12;

  v12 = v0;
  v10 = objc_msgSend(v0, sel_personHandle);
  if (v10)
  {
    v8 = v10;
    v1 = v10;
    outlined destroy of SFRichText?(&v10);
    v9 = objc_msgSend(v8, sel_value);
    if (v9)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      v6 = v2;

      v7 = v6;
    }
    else
    {
      v7 = 0;
    }

    if (v7)
    {
      v4 = String.isEmpty.getter();
      swift_bridgeObjectRelease();
      v5 = v4 & 1;
      goto LABEL_9;
    }
  }
  else
  {
    outlined destroy of SFRichText?(&v10);
  }
  v5 = 2;
LABEL_9:
  if (v5 == 2)
    v11 = 1;
  else
    v11 = v5 & 1;
  return (v11 ^ 1) & 1;
}

uint64_t INPerson.uniqueContactIdentifier.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;

  v28 = v0;
  v26 = objc_msgSend(v0, sel_contactIdentifier);
  if (v26)
  {
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v23 = v1;

    v24 = v22;
    v25 = v23;
  }
  else
  {
    v24 = 0;
    v25 = 0;
  }
  if (v25)
    return v24;
  v20 = objc_msgSend(v0, sel_customIdentifier);
  if (v20)
  {
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v2;

    v18 = v16;
    v19 = v17;
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  if (v19)
    return v18;
  v27 = objc_msgSend(v0, sel_personHandle);
  if (v27)
  {
    v14 = v27;
    v3 = v27;
    outlined destroy of SFRichText?(&v27);
    v15 = objc_msgSend(v14, sel_value);
    if (v15)
    {
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v11 = v4;

      v12 = v10;
      v13 = v11;
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }

    v8 = v12;
    v9 = v13;
  }
  else
  {
    outlined destroy of SFRichText?(&v27);
    v8 = 0;
    v9 = 0;
  }
  if (v9)
    return v8;
  v6 = objc_msgSend(v0, sel_displayName);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v7;
}

uint64_t INPerson.toContactQuery()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD v23[3];
  unsigned int v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  uint64_t *v44;
  uint64_t v45;
  id *v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  Swift::String v53;
  Swift::String v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  id v76;
  id v77;
  Swift::String v78;
  Swift::String v79;
  Swift::String v80;
  Swift::String v81;
  Swift::String v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;
  Swift::String v89;
  char v90;
  uint64_t v92;
  id v93;
  id v94;
  id v95;
  Swift::String v96;
  Swift::String v97;
  uint64_t v98;
  char *v99;
  char *v100;

  v56 = a1;
  v100 = 0;
  v99 = 0;
  v98 = 0;
  v95 = 0;
  v94 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?);
  v57 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v58 = (char *)v23 - v57;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactRelationshipQuery?);
  v59 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v60 = (char *)v23 - v59;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandleQuery?);
  v61 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v62 = (uint64_t)v23 - v61;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  v63 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v64 = (uint64_t)v23 - v63;
  v65 = 0;
  v66 = type metadata accessor for PersonNameComponents();
  v67 = *(_QWORD *)(v66 - 8);
  v68 = (*(_QWORD *)(v67 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v65);
  v69 = (char *)v23 - v68;
  v70 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v71 = (char *)v23 - v70;
  v100 = (char *)v23 - v70;
  v72 = type metadata accessor for ContactQuery();
  v73 = *(_QWORD *)(v72 - 8);
  v74 = (*(_QWORD *)(v73 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v72);
  v75 = (char *)v23 - v74;
  v99 = (char *)v23 - v74;
  v98 = v1;
  ContactQuery.init()();
  v77 = objc_msgSend(v76, sel_contactIdentifier);
  if (v77)
  {
    v55 = v77;
    v52 = v77;
    v53._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v53._object = v8;

    v54 = v53;
  }
  else
  {
    v54._countAndFlagsBits = 0;
    v54._object = 0;
  }
  v96 = v54;
  if (v54._object)
  {
    v97 = v96;
  }
  else
  {
    v97 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of String.UTF8View();
  }
  ContactQuery.id.setter();
  v51 = objc_msgSend(v76, sel_nameComponents);
  if (v51)
  {
    v50 = v51;
    v49 = v51;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v67 + 32))(v64, v69, v66);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);

  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(v64, 1, 1, v66);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v64, 1, v66) != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v71, v64, v66);
    v88._countAndFlagsBits = PersonNameComponents.namePrefix.getter();
    v88._object = v9;
    if (v9)
    {
      v89 = v88;
    }
    else
    {
      v89 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      outlined destroy of String.UTF8View();
    }
    ContactQuery.namePrefix.setter();
    v86._countAndFlagsBits = PersonNameComponents.givenName.getter();
    v86._object = v10;
    if (v10)
    {
      v87 = v86;
    }
    else
    {
      v87 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      outlined destroy of String.UTF8View();
    }
    ContactQuery.givenName.setter();
    v84._countAndFlagsBits = PersonNameComponents.middleName.getter();
    v84._object = v11;
    if (v11)
    {
      v85 = v84;
    }
    else
    {
      v85 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      outlined destroy of String.UTF8View();
    }
    ContactQuery.middleName.setter();
    v82._countAndFlagsBits = PersonNameComponents.familyName.getter();
    v82._object = v12;
    if (v12)
    {
      v83 = v82;
    }
    else
    {
      v83 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      outlined destroy of String.UTF8View();
    }
    ContactQuery.familyName.setter();
    v80._countAndFlagsBits = PersonNameComponents.nameSuffix.getter();
    v80._object = v13;
    if (v13)
    {
      v81 = v80;
    }
    else
    {
      v81 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      outlined destroy of String.UTF8View();
    }
    ContactQuery.nameSuffix.setter();
    v78._countAndFlagsBits = PersonNameComponents.nickname.getter();
    v78._object = v14;
    if (v14)
    {
      v79 = v78;
    }
    else
    {
      v79 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      outlined destroy of String.UTF8View();
    }
    ContactQuery.nickname.setter();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v71, v66);
    goto LABEL_48;
  }
  outlined destroy of PersonNameComponents?(v64);
  v48 = objc_msgSend(v76, sel_personHandle);
  if (v48)
  {
    v47 = v48;
    v43 = v48;
    v94 = v48;
    v15 = objc_msgSend(v48, sel_type);
    v46 = &v93;
    v93 = v15;
    v44 = &v92;
    v92 = 0;
    v45 = type metadata accessor for INPersonHandleType();
    lazy protocol witness table accessor for type INPersonHandleType and conformance INPersonHandleType();
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    if ((v16 & 1) == 0)
    {
      v42 = objc_msgSend(v43, sel_value);
      if (v42)
      {
        v41 = v42;
        v36 = v42;
        v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v38 = v17;

        v39 = v37;
        v40 = v38;
      }
      else
      {
        v39 = 0;
        v40 = 0;
      }
      v34 = v40;
      v35 = v39;
      if (v40)
      {
        v32 = v35;
        v33 = v34;
        v29 = v34;
        v30 = String.isEmpty.getter();
        swift_bridgeObjectRelease();
        v31 = v30 & 1;
      }
      else
      {
        v31 = 2;
      }
      v90 = v31;
      if (v31 != 2 && !(v90 & 1))
      {
        INPersonHandle.toContactHandleQuery()(v62);
        v18 = type metadata accessor for ContactHandleQuery();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v62, 0, 1);
        ContactQuery.handle.setter();

        goto LABEL_48;
      }
    }

  }
  v28 = objc_msgSend(v76, sel_displayName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  ContactQuery.fullName.setter();

LABEL_48:
  v27 = objc_msgSend(v76, sel_relationship);
  if (v27)
  {
    v26 = v27;
    v25 = v27;
    v95 = v27;
    v23[1] = INPersonHandleLabel.rawValue.getter(v27);
    v23[2] = v19;
    v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v73 + 56);
    v24 = 1;
    v20(v58, 1, 1, v72);
    ContactRelationshipQuery.init(label:fromContact:)();
    v21 = type metadata accessor for ContactRelationshipQuery();
    (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v21 - 8) + 56))(v60, 0, v24);
    ContactQuery.relationship.setter();

  }
  objc_msgSend(v76, sel_isMe);
  ContactQuery.isMe.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v73 + 32))(v56, v75, v72);
}

id INPerson.toCNContact.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  id *v4;
  uint64_t v5;
  Class v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  id v16;
  id v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;

  type metadata accessor for CNMutableContact();
  v32 = SAUIAppPunchOut.__allocating_init()();
  v33 = objc_msgSend(v31, sel_personHandle);
  if (v33)
  {
    v30 = objc_msgSend(v33, sel_type);
    if (v30)
    {
      if (v30 == (id)1)
      {
        v29 = objc_msgSend(v33, sel_value);
        if (v29)
        {
          v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v26 = v0;

          v27 = v25;
          v28 = v26;
        }
        else
        {
          v27 = 0;
          v28 = 0;
        }
        if (v28)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
          _allocateUninitializedArray<A>(_:)();
          v23 = v1;
          v24 = objc_msgSend(v33, sel_label);
          if (v24)
          {
            v19 = INPersonHandleLabel.rawValue.getter(v24);
            v20 = v2;

            v21 = v19;
            v22 = v20;
          }
          else
          {
            v21 = 0;
            v22 = 0;
          }
          swift_bridgeObjectRetain();
          MEMORY[0x24957220C](v27, v28);
          type metadata accessor for NSString();
          v17 = CNLabeledValue.__allocating_init(label:value:)(v21, v22);
          swift_bridgeObjectRelease();
          *v23 = v17;
          _finalizeUninitializedArray<A>(_:)();
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v32, sel_setEmailAddresses_, isa);

          swift_bridgeObjectRelease();
        }
      }
      else if (v30 == (id)2)
      {
        v16 = objc_msgSend(v33, sel_value);
        if (v16)
        {
          v14._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v14._object = v3;

          v15 = v14;
        }
        else
        {
          v15 = (Swift::String)0;
        }
        if (v15._object)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
          _allocateUninitializedArray<A>(_:)();
          v12 = v4;
          v13 = objc_msgSend(v33, sel_label);
          if (v13)
          {
            v8 = INPersonHandleLabel.rawValue.getter(v13);
            v9 = v5;

            v10 = v8;
            v11 = v9;
          }
          else
          {
            v10 = 0;
            v11 = 0;
          }
          type metadata accessor for CNPhoneNumber();
          swift_bridgeObjectRetain();
          CNPhoneNumber.__allocating_init(stringValue:)(v15);
          *v12 = CNLabeledValue.__allocating_init(label:value:)(v10, v11);
          _finalizeUninitializedArray<A>(_:)();
          v7 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v32, sel_setPhoneNumbers_, v7);

          swift_bridgeObjectRelease();
        }
      }
    }

  }
  return v32;
}

void *INPerson.personType.unsafeMutableAddressor()
{
  return &static INPerson.personType;
}

uint64_t INPersonHandleLabel.rawValue.getter(void *a1)
{
  id v1;
  uint64_t v4;

  v1 = a1;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t INPerson.encodeBase64.getter()
{
  Swift::String v0;
  id v1;
  unint64_t v2;
  NSDataBase64EncodingOptions v3;
  Swift::String v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  void *v17;
  id v18;

  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("contactHandle://", 0x10uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v0);
  swift_bridgeObjectRelease();
  v1 = v17;
  v18 = (id)INIntentSlotValueTransformToContactValue();

  if (v18)
  {
    v16 = v18;
  }
  else
  {
    LOBYTE(v6) = 2;
    v7 = 31;
    LODWORD(v8) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  v15 = objc_msgSend(v16, sel_data, v6, v7, v8);
  if (v15)
  {
    v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v2;

    v13 = v11;
    v14 = v12;
  }
  else
  {
    v13 = 0;
    v14 = 0xF000000000000000;
  }

  if ((v14 & 0xF000000000000000) == 0xF000000000000000)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v9 = v13;
    v10 = v14;
  }
  v3 = default argument 0 of Data.base64EncodedString(options:)();
  Data.base64EncodedString(options:)(v3);
  outlined consume of Data._Representation(v9, v10);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  return String.init(stringInterpolation:)();
}

uint64_t default argument 0 of Data.base64EncodedString(options:)()
{
  return 0;
}

uint64_t INPerson.hasName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  _BOOL4 v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  id v34;
  id v35;
  id v36;
  int v37;
  int v38;
  _BOOL4 v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  id v46;
  id v47;
  id v48;
  int v49;
  int v50;
  _BOOL4 v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  id v58;
  id v59;
  id v60;
  int v61;
  int v62;
  _BOOL4 v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  id v70;
  id v71;
  id v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  char *v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  id v96;
  id v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  char v111;
  char v112;
  char v113;
  char v114;
  char v115;
  char v116;
  char v117;
  char v118;
  void *v119;

  v119 = 0;
  v74 = type metadata accessor for PersonNameComponents();
  v75 = *(_QWORD *)(v74 - 8);
  v76 = (*(_QWORD *)(v75 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v74);
  v77 = (char *)&v25 - v76;
  v78 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?)
                              - 8)
                  + 64);
  v79 = (v78 + 15) & 0xFFFFFFFFFFFFFFF0;
  v0 = MEMORY[0x24BDAC7A8](v97);
  v80 = (char *)&v25 - v79;
  v81 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v0);
  v82 = (char *)&v25 - v81;
  v83 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v2);
  v84 = (char *)&v25 - v83;
  v85 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v86 = (char *)&v25 - v85;
  v87 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v88 = (char *)&v25 - v87;
  v89 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v90 = (char *)&v25 - v89;
  v91 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v92 = (char *)&v25 - v91;
  v93 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v14 = (void *)MEMORY[0x24BDAC7A8](v12);
  v94 = (char *)&v25 - v93;
  v119 = v14;
  v96 = objc_msgSend(v14, sel_displayName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v95 = v15;
  v98 = String.isEmpty.getter();
  swift_bridgeObjectRelease();

  v16 = v97;
  if ((v98 & 1) == 0)
  {
    v73 = 1;
    goto LABEL_21;
  }
  v72 = objc_msgSend(v97, sel_nameComponents);
  if (v72)
  {
    v71 = v72;
    v70 = v72;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v92, v77, v74);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v92, 0, 1, v74);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v92, 1, 1, v74);
  }
  outlined init with take of PersonNameComponents?(v92, v94);
  if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 48))(v94, 1, v74) == 0)
  {
    v99 = PersonNameComponents.givenName.getter();
    v100 = v17;
    if (v17)
    {
      v64 = &v99;
      v65 = v99;
      v66 = v100;
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      outlined destroy of PersonNameComponents?((uint64_t)v94);
      v67 = String.isEmpty.getter();
      swift_bridgeObjectRelease();
      v68 = v67 & 1;
      goto LABEL_11;
    }
    outlined destroy of String.UTF8View();
    outlined destroy of PersonNameComponents?((uint64_t)v94);
  }
  else
  {
    outlined destroy of PersonNameComponents?((uint64_t)v94);
  }
  v68 = 2;
LABEL_11:
  v117 = v68;
  v118 = 0;
  if (v68 == 2)
  {
    if (v118 == 2)
    {
      v63 = 1;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  outlined init with copy of Bool?(&v117, &v101);
  if (v118 == 2)
  {
LABEL_18:
    v63 = 0;
    goto LABEL_17;
  }
  v63 = (v101 & 1) == (v118 & 1);
LABEL_17:
  v73 = v63;
LABEL_21:
  v62 = v73;

  v18 = v97;
  if ((v62 & 1) != 0)
  {
    v61 = 1;
    goto LABEL_41;
  }
  v60 = objc_msgSend(v97, sel_nameComponents);
  if (v60)
  {
    v59 = v60;
    v58 = v60;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v88, v77, v74);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v88, 0, 1, v74);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v88, 1, 1, v74);
  }
  outlined init with take of PersonNameComponents?(v88, v90);
  if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 48))(v90, 1, v74) == 0)
  {
    v102 = PersonNameComponents.familyName.getter();
    v103 = v19;
    if (v19)
    {
      v52 = &v102;
      v53 = v102;
      v54 = v103;
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      outlined destroy of PersonNameComponents?((uint64_t)v90);
      v55 = String.isEmpty.getter();
      swift_bridgeObjectRelease();
      v56 = v55 & 1;
      goto LABEL_31;
    }
    outlined destroy of String.UTF8View();
    outlined destroy of PersonNameComponents?((uint64_t)v90);
  }
  else
  {
    outlined destroy of PersonNameComponents?((uint64_t)v90);
  }
  v56 = 2;
LABEL_31:
  v115 = v56;
  v116 = 0;
  if (v56 == 2)
  {
    if (v116 == 2)
    {
      v51 = 1;
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  outlined init with copy of Bool?(&v115, &v104);
  if (v116 == 2)
  {
LABEL_38:
    v51 = 0;
    goto LABEL_37;
  }
  v51 = (v104 & 1) == (v116 & 1);
LABEL_37:
  v61 = v51;
LABEL_41:
  v50 = v61;

  v20 = v97;
  if ((v50 & 1) != 0)
  {
    v49 = 1;
    goto LABEL_61;
  }
  v48 = objc_msgSend(v97, sel_nameComponents);
  if (v48)
  {
    v47 = v48;
    v46 = v48;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v84, v77, v74);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v84, 0, 1, v74);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v84, 1, 1, v74);
  }
  outlined init with take of PersonNameComponents?(v84, v86);
  if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 48))(v86, 1, v74) == 0)
  {
    v105 = PersonNameComponents.middleName.getter();
    v106 = v21;
    if (v21)
    {
      v40 = &v105;
      v41 = v105;
      v42 = v106;
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      outlined destroy of PersonNameComponents?((uint64_t)v86);
      v43 = String.isEmpty.getter();
      swift_bridgeObjectRelease();
      v44 = v43 & 1;
      goto LABEL_51;
    }
    outlined destroy of String.UTF8View();
    outlined destroy of PersonNameComponents?((uint64_t)v86);
  }
  else
  {
    outlined destroy of PersonNameComponents?((uint64_t)v86);
  }
  v44 = 2;
LABEL_51:
  v113 = v44;
  v114 = 0;
  if (v44 == 2)
  {
    if (v114 == 2)
    {
      v39 = 1;
      goto LABEL_57;
    }
    goto LABEL_58;
  }
  outlined init with copy of Bool?(&v113, &v107);
  if (v114 == 2)
  {
LABEL_58:
    v39 = 0;
    goto LABEL_57;
  }
  v39 = (v107 & 1) == (v114 & 1);
LABEL_57:
  v49 = v39;
LABEL_61:
  v38 = v49;

  v22 = v97;
  if ((v38 & 1) == 0)
  {
    v36 = objc_msgSend(v97, sel_nameComponents);
    if (v36)
    {
      v35 = v36;
      v34 = v36;
      static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v80, v77, v74);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v80, 0, 1, v74);

    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v80, 1, 1, v74);
    }
    outlined init with take of PersonNameComponents?(v80, v82);
    if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 48))(v82, 1, v74) == 0)
    {
      v108 = PersonNameComponents.nickname.getter();
      v109 = v23;
      if (v23)
      {
        v28 = &v108;
        v29 = v108;
        v30 = v109;
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        outlined destroy of PersonNameComponents?((uint64_t)v82);
        v31 = String.isEmpty.getter();
        swift_bridgeObjectRelease();
        v32 = v31 & 1;
        goto LABEL_71;
      }
      outlined destroy of String.UTF8View();
      outlined destroy of PersonNameComponents?((uint64_t)v82);
    }
    else
    {
      outlined destroy of PersonNameComponents?((uint64_t)v82);
    }
    v32 = 2;
LABEL_71:
    v111 = v32;
    v112 = 0;
    if (v32 == 2)
    {
      if (v112 == 2)
      {
        v27 = 1;
        goto LABEL_77;
      }
    }
    else
    {
      outlined init with copy of Bool?(&v111, &v110);
      if (v112 != 2)
      {
        v27 = (v110 & 1) == (v112 & 1);
LABEL_77:
        v37 = v27;
        goto LABEL_81;
      }
    }
    v27 = 0;
    goto LABEL_77;
  }
  v37 = 1;
LABEL_81:
  v26 = v37;

  return v26 & 1;
}

uint64_t INPerson.hasIdentifier.getter()
{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  char v28;
  char v29;

  v27 = objc_msgSend(v0, sel_contactIdentifier);
  if (v27)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v25 = v1;

    v26 = v25;
  }
  else
  {
    v26 = 0;
  }
  outlined destroy of String.UTF8View();
  v2 = v0;
  if (v26)
  {
    v24 = objc_msgSend(v0, sel_contactIdentifier);
    if (v24)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      v22 = v3;

      v23 = v22;
    }
    else
    {
      v23 = 0;
    }
    if (v23)
    {
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      v20 = String.isEmpty.getter();
      swift_bridgeObjectRelease();
      v21 = v20 & 1;
    }
    else
    {
      outlined destroy of String.UTF8View();
      v21 = 2;
    }
    if (v21 == 2)
      v28 = 1;
    else
      v28 = v21 & 1;
    v19 = v28 ^ 1;
  }
  else
  {
    v19 = 0;
  }

  v4 = v0;
  if ((v19 & 1) != 0)
  {
    v18 = 1;
  }
  else
  {
    v17 = objc_msgSend(v0, sel_customIdentifier);
    if (v17)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      v15 = v5;

      v16 = v15;
    }
    else
    {
      v16 = 0;
    }
    outlined destroy of String.UTF8View();
    v6 = v0;
    if (v16)
    {
      v14 = objc_msgSend(v0, sel_customIdentifier);
      if (v14)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        v11 = v7;

        v12 = v11;
      }
      else
      {
        v12 = 0;
      }
      if (v12)
      {
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        v9 = String.isEmpty.getter();
        swift_bridgeObjectRelease();
        v10 = v9 & 1;
      }
      else
      {
        outlined destroy of String.UTF8View();
        v10 = 2;
      }
      if (v10 == 2)
        v29 = 1;
      else
        v29 = v10 & 1;
      v13 = v29 ^ 1;
    }
    else
    {
      v13 = 0;
    }

    v18 = v13;
  }

  return v18 & 1;
}

uint64_t INPerson.hasIdentifiableInfo.getter()
{
  id v0;
  id v1;
  char v3;
  char v4;
  id v5;
  char v6;

  v6 = INPerson.hasIdentifier.getter();
  v0 = v5;
  if ((v6 & 1) != 0)
    v4 = 1;
  else
    v4 = INPerson.hasName.getter();

  v1 = v5;
  if ((v4 & 1) != 0)
    v3 = 1;
  else
    v3 = INPerson.hasHandleValue.getter();

  return v3 & 1;
}

BOOL INPerson.isEmpty.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  _BOOL4 v26;
  _BOOL4 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  unsigned int v30;
  unsigned int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  _BOOL4 v34;
  _BOOL4 v35;
  id v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  _BOOL4 v43;
  _BOOL4 v44;
  _BOOL4 v45;
  _BOOL4 v46;
  id v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  id v53;
  _BOOL4 v54;
  _BOOL4 v55;
  _BOOL4 v56;
  _BOOL4 v57;
  int v58;
  uint64_t v59;
  id v60;
  int v61;
  int v62;
  _BOOL4 v63;
  _BOOL4 v64;
  _BOOL4 v65;
  _BOOL4 v66;
  id v67;
  id v68;
  id v69;
  _BOOL4 v70;
  _BOOL4 v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  id v76;
  unint64_t v77;
  uint64_t v78;
  id v79[5];
  id v80[3];
  id v81;
  void *v82;

  v82 = 0;
  v72 = type metadata accessor for PersonNameComponents();
  v73 = *(_QWORD *)(v72 - 8);
  v74 = (*(_QWORD *)(v73 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v72);
  v75 = (char *)&v14 - v74;
  v77 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v0 = (void *)MEMORY[0x24BDAC7A8](v76);
  v78 = (uint64_t)&v14 - v77;
  v82 = v0;
  v81 = objc_msgSend(v0, sel_personHandle);
  v71 = v81 == 0;
  v70 = v71;
  outlined destroy of SFRichText?(&v81);
  v1 = v76;
  if (v70)
  {
    v69 = objc_msgSend(v76, sel_nameComponents);
    if (v69)
    {
      v68 = v69;
      v67 = v69;
      static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))(v78, v75, v72);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56))(v78, 0, 1, v72);

    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56))(v78, 1, 1, v72);
    }
    v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v78, 1, v72) == 1;
    v64 = v66;
    outlined destroy of PersonNameComponents?(v78);
    v65 = v64;
  }
  else
  {
    v65 = 0;
  }
  v63 = v65;

  v2 = v76;
  if (v63)
  {
    v60 = objc_msgSend(v76, sel_displayName);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v59 = v3;
    v61 = String.isEmpty.getter();
    swift_bridgeObjectRelease();

    v62 = v61;
  }
  else
  {
    v62 = 0;
  }
  v58 = v62;

  v4 = v76;
  if ((v58 & 1) != 0)
  {
    v79[0] = objc_msgSend(v76, sel_image);
    v57 = v79[0] == 0;
    v55 = v57;
    outlined destroy of SFRichText?(v79);
    v56 = v55;
  }
  else
  {
    v56 = 0;
  }
  v54 = v56;

  v5 = v76;
  if (v54)
  {
    v53 = objc_msgSend(v76, sel_contactIdentifier);
    if (v53)
    {
      v52 = v53;
      v47 = v53;
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v49 = v6;

      v50 = (void *)v48;
      v51 = v49;
    }
    else
    {
      v50 = 0;
      v51 = 0;
    }
    v79[1] = v50;
    v79[2] = v51;
    v46 = v51 == 0;
    v44 = v46;
    outlined destroy of String.UTF8View();
    v45 = v44;
  }
  else
  {
    v45 = 0;
  }
  v43 = v45;

  v7 = v76;
  if (v43)
  {
    v42 = objc_msgSend(v76, sel_customIdentifier);
    if (v42)
    {
      v41 = v42;
      v36 = v42;
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v38 = v8;

      v39 = (void *)v37;
      v40 = v38;
    }
    else
    {
      v39 = 0;
      v40 = 0;
    }
    v79[3] = v39;
    v79[4] = v40;
    v35 = v40 == 0;
    v33 = v35;
    outlined destroy of String.UTF8View();
    v34 = v33;
  }
  else
  {
    v34 = 0;
  }
  v32 = v34;

  v9 = v76;
  if (v32)
    v31 = objc_msgSend(v76, sel_isMe) ^ 1;
  else
    v31 = 0;
  v30 = v31;

  v10 = v76;
  if ((v30 & 1) != 0)
  {
    v80[0] = objc_msgSend(v76, sel_relationship);
    v29 = v80[0] == 0;
    v27 = v29;
    outlined destroy of SFRichText?(v80);
    v28 = v27;
  }
  else
  {
    v28 = 0;
  }
  v26 = v28;

  v11 = v76;
  if (v26)
  {
    v25 = objc_msgSend(v76, sel_sourceAppBundleIdentifier);
    if (v25)
    {
      v24 = v25;
      v19 = v25;
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v21 = v12;

      v22 = (void *)v20;
      v23 = v21;
    }
    else
    {
      v22 = 0;
      v23 = 0;
    }
    v80[1] = v22;
    v80[2] = v23;
    v18 = v23 == 0;
    v16 = v18;
    outlined destroy of String.UTF8View();
    v17 = v16;
  }
  else
  {
    v17 = 0;
  }
  v15 = v17;

  return v15;
}

id CNLabeledValue.__allocating_init(label:value:)(uint64_t a1, uint64_t a2)
{
  id v2;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc CNLabeledValue.init(label:value:)(a1, a2);
}

CNPhoneNumber __swiftcall CNPhoneNumber.__allocating_init(stringValue:)(Swift::String stringValue)
{
  id v1;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (CNPhoneNumber)@nonobjc CNPhoneNumber.init(stringValue:)();
}

uint64_t INPersonHandle.toContactHandleQuery()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  _OWORD v7[2];
  Swift::String *v8;
  Swift::String *v9;
  Swift::String v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  void *v39;
  char *v40;

  v25 = a1;
  v40 = 0;
  v39 = 0;
  v38._countAndFlagsBits = 0;
  v38._object = 0;
  v37._countAndFlagsBits = 0;
  v37._object = 0;
  v35 = 0;
  v36 = 0;
  v34 = 0;
  v27 = type metadata accessor for ContactHandle.HandleType();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = (*(_QWORD *)(v28 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)v7 - v29;
  v31 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = (void *)MEMORY[0x24BDAC7A8](v1);
  v32 = (char *)v7 - v31;
  v40 = (char *)v7 - v31;
  v39 = v3;
  v33 = objc_msgSend(v3, sel_type);
  if (v33 == (id)1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v30, *MEMORY[0x24BE93578], v27);
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v32, v30, v27);
  }
  else
  {
    if (v33 == (id)2)
      (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v30, *MEMORY[0x24BE93580], v27);
    else
      (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v30, *MEMORY[0x24BE93588], v27);
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v32, v30, v27);
  }
  v38 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  v24 = objc_msgSend(v26, sel_label);
  if (v24)
  {
    v23 = v24;
    v22 = v24;
    v34 = v24;
    v38._countAndFlagsBits = INPersonHandleLabel.rawValue.getter(v24);
    v38._object = v4;
    swift_bridgeObjectRelease();

  }
  v37 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  v21 = objc_msgSend(v26, sel_value);
  if (v21)
  {
    v20 = v21;
    v15 = v21;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v5;

    v18 = v16;
    v19 = v17;
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  v13 = v19;
  v14 = v18;
  if (v19)
  {
    v11 = v14;
    v12 = v13;
    v10._object = v13;
    v10._countAndFlagsBits = v14;
    v35 = v14;
    v36 = v13;
    swift_bridgeObjectRetain();
    v37 = v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v30, v32, v27);
  v9 = &v38;
  v7[0] = v38;
  swift_bridgeObjectRetain();
  v8 = &v37;
  v7[1] = v37;
  swift_bridgeObjectRetain();
  ContactHandleQuery.init(type:label:value:)();
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v32, v27);
}

unint64_t type metadata accessor for CNMutableContact()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for CNMutableContact;
  if (!lazy cache variable for type metadata for CNMutableContact)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for CNMutableContact);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for CNPhoneNumber()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for CNPhoneNumber;
  if (!lazy cache variable for type metadata for CNPhoneNumber)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for CNPhoneNumber);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for NSString()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSString);
    return ObjCClassMetadata;
  }
  return v2;
}

_BYTE *outlined init with copy of Bool?(_BYTE *a1, _BYTE *a2)
{
  _BYTE *result;

  result = a2;
  *a2 = *a1;
  return result;
}

id @nonobjc CNLabeledValue.init(label:value:)(uint64_t a1, uint64_t a2)
{
  id v2;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;

  if (a2)
  {
    v6 = MEMORY[0x24957220C](a1);
    swift_bridgeObjectRelease();
    v2 = objc_msgSend(v7, sel_initWithLabel_value_, v6);
  }
  else
  {
    v2 = objc_msgSend(v7, sel_initWithLabel_value_, 0);
  }
  v5 = v2;
  swift_unknownObjectRelease();

  return v5;
}

id @nonobjc CNPhoneNumber.init(stringValue:)()
{
  id v1;
  id v2;
  id v3;

  v2 = (id)MEMORY[0x24957220C]();
  v3 = objc_msgSend(v1, sel_initWithStringValue_);

  swift_bridgeObjectRelease();
  return v3;
}

id SAUIButton.init(commands:text:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3;
  id v4;
  id v5;
  Class isa;
  id v9;
  id v11;

  v11 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v3 = v11;
  v4 = v11;
  v5 = v11;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setCommands_, isa);

  swift_bridgeObjectRetain();
  v9 = (id)MEMORY[0x24957220C](a2, a3);
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setText_, v9);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v11;
}

id SASTCommandTemplateAction.init(intent:appId:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v3;
  id v4;
  id *v5;
  Class isa;
  id v11;

  v11 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v3 = v11;
  v4 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  _allocateUninitializedArray<A>(_:)();
  *v5 = static SASTCommandTemplateAction.makeLaunchAppWithIntentCommand(intent:appId:)(a1, a2, a3);
  _finalizeUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setCommands_, isa);

  swift_bridgeObjectRelease();
  return v11;
}

id SASTApplicationBannerItem.init(intent:appId:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v8;
  id v12;

  v12 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v3 = v12;
  v4 = v12;
  v5 = v12;
  swift_bridgeObjectRetain();
  v8 = (id)MEMORY[0x24957220C](a2, a3);
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_setBundleId_, v8);

  type metadata accessor for SASTCommandTemplateAction();
  v6 = a1;
  swift_bridgeObjectRetain();
  SASTCommandTemplateAction.init(intent:appId:)(a1, a2, a3);
  objc_msgSend(v12, sel_setAction_);
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return v12;
}

id static SATextDecorationRegion.from(_:property:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Class isa;
  id v8;
  id v9;

  type metadata accessor for SATextDecorationRegion();
  v9 = SAUIAppPunchOut.__allocating_init()();
  String.count.getter();
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v9, sel_setLength_);

  swift_bridgeObjectRetain();
  v8 = (id)MEMORY[0x24957220C](a3, a4);
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setProperty_, v8);

  return v9;
}

void SASTItemGroup.addToTemplateIfApplicable(_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  Class isa;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t ObjectType;
  char v10;

  ObjectType = swift_getObjectType();
  swift_unknownObjectRetain();
  v10 = (*(uint64_t (**)(uint64_t))(a2 + 8))(ObjectType);
  swift_unknownObjectRelease();
  if ((v10 & 1) != 0)
  {
    v7 = objc_msgSend(v2, sel_templateItems);
    if (v7)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
      v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v6 = v5;
    }
    else
    {
      v6 = 0;
    }
    if (v6)
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SASTTemplateItem]);
      Array.append(_:)();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v2, sel_setTemplateItems_);

    }
    else
    {
      swift_bridgeObjectRetain();
      objc_msgSend(v2, sel_setTemplateItems_, 0);

      outlined destroy of [SFCardSection]();
    }
  }
}

id SAIntentGroupProtobufMessage.init(intent:)(void *a1)
{
  id v1;
  id v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  id v7;
  id v8;
  Class isa;
  Class v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  id v17;
  id v18;

  v15 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v1 = v15;
  v2 = v15;
  v3 = v15;
  v17 = objc_msgSend(a1, sel_backingStore);
  v18 = objc_msgSend(v17, sel_data);
  if (v18)
  {
    v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v4;

    v13 = v11;
    v14 = v12;
  }
  else
  {
    v13 = 0;
    v14 = 0xF000000000000000;
  }
  if ((v14 & 0xF000000000000000) == 0xF000000000000000)
  {
    v10 = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v13, v14);
    v10 = isa;
  }

  objc_msgSend(v15, sel_setData_, v10);
  v7 = objc_msgSend(a1, sel_typeName);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = (id)MEMORY[0x24957220C](v5);
  swift_bridgeObjectRelease();

  objc_msgSend(v15, sel_setTypeName_, v8);
  return v15;
}

id SAIntentGroupProtobufMessage.init(response:)(void *a1)
{
  id v1;
  id v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  Class isa;
  Class v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  id v25;
  id v27;

  v25 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v1 = v25;
  v2 = v25;
  v3 = v25;
  v27 = objc_msgSend(a1, sel_backingStore);
  if (v27)
  {
    v24 = v27;
  }
  else
  {
    LOBYTE(v7) = 2;
    v8 = 83;
    LODWORD(v9) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  v23 = objc_msgSend(v24, sel_data, v7, v8, v9);
  if (v23)
  {
    v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v20 = v4;

    v21 = v19;
    v22 = v20;
  }
  else
  {
    v21 = 0;
    v22 = 0xF000000000000000;
  }
  if ((v22 & 0xF000000000000000) == 0xF000000000000000)
  {
    v18 = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v21, v22);
    v18 = isa;
  }

  objc_msgSend(v25, sel_setData_, v18);
  v16 = objc_msgSend(a1, sel__payloadResponseTypeName);
  if (v16)
  {
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v5;

    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  if (v15)
  {
    v10 = MEMORY[0x24957220C](v14);
    swift_bridgeObjectRelease();
    v11 = (void *)v10;
  }
  else
  {
    v11 = 0;
  }
  objc_msgSend(v25, sel_setTypeName_);

  return v25;
}

uint64_t SASTColumnDataListItem.shouldAddToSnippet.getter()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  char v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  id v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  v21 = v0;
  v15 = objc_msgSend(v0, sel_decoratedRows);
  if (v15)
  {
    type metadata accessor for SAUIDecoratedText();
    v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v14 = v13;
  }
  else
  {
    v14 = 0;
  }
  v19 = v14;
  if (v14)
  {
    v20 = v19;
  }
  else
  {
    type metadata accessor for SAUIDecoratedText();
    v20 = _allocateUninitializedArray<A>(_:)();
    outlined destroy of [SFCardSection]();
  }
  swift_bridgeObjectRetain();
  v18 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAUIDecoratedText]);
  lazy protocol witness table accessor for type [SAUIDecoratedText] and conformance [A]();
  v12 = Collection.isEmpty.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  v1 = v0;
  if ((v12 & 1) != 0)
  {
    v16 = objc_msgSend(v0, sel_title);
    if (v16)
    {
      v9 = v16;
      v2 = v16;
      outlined destroy of SFRichText?(&v16);
      v10 = objc_msgSend(v9, sel_text);
      if (v10)
      {
        v6._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v6._object = v3;

        v7 = v6;
      }
      else
      {
        v7 = (Swift::String)0;
      }

      v8 = v7;
    }
    else
    {
      outlined destroy of SFRichText?(&v16);
      v8 = (Swift::String)0;
    }
    if (v8._object)
    {
      v17 = v8;
    }
    else
    {
      v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      outlined destroy of String.UTF8View();
    }
    v5 = String.isEmpty.getter();
    swift_bridgeObjectRelease();
    v11 = v5 ^ 1;
  }
  else
  {
    v11 = 1;
  }

  return v11 & 1;
}

uint64_t protocol witness for SASTItemGroupChildView.shouldAddToSnippet.getter in conformance SASTColumnDataListItem()
{
  return SASTColumnDataListItem.shouldAddToSnippet.getter() & 1;
}

uint64_t SASTPropertyListItem.shouldAddToSnippet.getter()
{
  void *v0;
  int v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v5 = objc_msgSend(v0, sel_decoratedValues);
  if (v5)
  {
    type metadata accessor for SAUIDecoratedText();
    v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v4 = v3;
  }
  else
  {
    v4 = 0;
  }
  if (!v4)
  {
    type metadata accessor for SAUIDecoratedText();
    _allocateUninitializedArray<A>(_:)();
    outlined destroy of [SFCardSection]();
  }
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAUIDecoratedText]);
  lazy protocol witness table accessor for type [SAUIDecoratedText] and conformance [A]();
  v2 = Collection.isEmpty.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  return (v2 ^ 1) & 1;
}

uint64_t protocol witness for SASTItemGroupChildView.shouldAddToSnippet.getter in conformance SASTPropertyListItem()
{
  return SASTPropertyListItem.shouldAddToSnippet.getter() & 1;
}

id static SASTCommandTemplateAction.makeLaunchAppWithIntentCommand(intent:appId:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v14 = a1;
  v16 = a2;
  v17 = a3;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v25 = 0;
  v13[1] = 0;
  v20 = type metadata accessor for UUID();
  v19 = *(_QWORD *)(v20 - 8);
  v13[0] = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v21 = (char *)v13 - v13[0];
  v29 = v4;
  v27 = v5;
  v28 = v6;
  v26 = v3;
  type metadata accessor for SAIntentGroupLaunchAppWithIntent();
  v24 = SAUIAppPunchOut.__allocating_init()();
  v25 = v24;
  type metadata accessor for SAIntentGroupProtobufMessage();
  v7 = v14;
  v15 = SAIntentGroupProtobufMessage.init(intent:)(v14);
  objc_msgSend(v24, sel_setHandledIntent_);

  v8 = v24;
  swift_bridgeObjectRetain();
  v18 = (id)MEMORY[0x24957220C](v16, v17);
  swift_bridgeObjectRelease();
  objc_msgSend(v24, sel_setAppId_, v18);

  v9 = v24;
  UUID.init()();
  v10 = UUID.uuidString.getter();
  v22 = v11;
  v23 = (id)MEMORY[0x24957220C](v10);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v20);
  swift_bridgeObjectRelease();
  objc_msgSend(v24, sel_setAceId_, v23);

  return v24;
}

unint64_t lazy protocol witness table accessor for type [SAUIDecoratedText] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [SAUIDecoratedText] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SAUIDecoratedText] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SAUIDecoratedText]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [SAUIDecoratedText] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t type metadata accessor for SAIntentGroupLaunchAppWithIntent()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent;
  if (!lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t static FlowUtil.actionForInput(parse:intentType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t *v108;
  uint64_t *v109;
  _BYTE **v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  uint32_t v118;
  int v119;
  NSObject *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint8_t *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t *v129;
  uint64_t *v130;
  _BYTE **v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t *v137;
  uint32_t v138;
  int v139;
  NSObject *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint8_t *v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE **v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t *v153;
  uint32_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  NSObject *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint8_t *v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t *v176;
  uint64_t *v177;
  _BYTE **v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t *v184;
  uint32_t v185;
  int v186;
  NSObject *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint8_t *v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  uint64_t *v207;
  uint64_t *v208;
  _BYTE **v209;
  uint64_t *v210;
  uint64_t *v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t *v215;
  uint32_t v216;
  int v217;
  NSObject *v218;
  uint64_t v219;
  void (*v220)(char *, uint64_t);
  int v221;
  int v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint8_t *v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  uint64_t *v231;
  uint64_t *v232;
  _BYTE **v233;
  uint64_t *v234;
  uint64_t *v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t *v239;
  uint32_t v240;
  int v241;
  NSObject *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint8_t *v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int v251;
  uint64_t *v252;
  uint64_t *v253;
  _BYTE **v254;
  uint64_t *v255;
  uint64_t *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t *v260;
  uint32_t v261;
  int v262;
  NSObject *v263;
  uint64_t v264;
  _BOOL4 v265;
  _BOOL4 v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint8_t *v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t *v274;
  uint64_t *v275;
  _BYTE **v276;
  uint64_t *v277;
  uint64_t *v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  uint64_t *v282;
  uint32_t v283;
  int v284;
  NSObject *v285;
  uint64_t v286;
  void (*v287)(char *, uint64_t);
  int v288;
  uint64_t *v289;
  uint64_t *v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint8_t *v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int v300;
  uint64_t *v301;
  uint64_t *v302;
  _BYTE **v303;
  uint64_t *v304;
  uint64_t *v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t *v309;
  uint32_t v310;
  int v311;
  NSObject *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  char *v321;
  unint64_t v322;
  char *v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  char *v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  char *v334;
  unint64_t v335;
  char *v336;
  unint64_t v337;
  char *v338;
  unint64_t v339;
  char *v340;
  unint64_t v341;
  char *v342;
  unint64_t v343;
  char *v344;
  unint64_t v345;
  char *v346;
  unint64_t v347;
  char *v348;
  unint64_t v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  char *v355;
  unint64_t v356;
  char *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  char *v363;
  int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  _BYTE *v368;
  uint64_t v369;
  uint32_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  _BYTE *v374;
  uint64_t v375;
  uint32_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  _BYTE *v380;
  uint64_t v381;
  uint32_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  _BYTE *v387;
  uint64_t v388;
  uint32_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  _BYTE *v393;
  uint64_t v394;
  uint32_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  _BYTE *v399;
  uint64_t v400;
  uint32_t v401;
  uint64_t (*v402)(uint64_t, uint64_t, uint64_t);
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  _BYTE *v406;
  uint64_t v407;
  uint32_t v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  _BYTE *v414;
  uint64_t v415;
  uint32_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  _BYTE *v420;
  uint64_t v421;
  uint32_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  char *v426;
  char *v427;
  char *v428;

  v314 = a4;
  v358 = a1;
  v359 = a2;
  v360 = a3;
  v428 = 0;
  v425 = 0;
  v423 = 0;
  v424 = 0;
  v315 = 0;
  v427 = 0;
  v409 = 0;
  v410 = 0;
  v426 = 0;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v316 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v317 = (uint64_t)&v100 - v316;
  v351 = 0;
  v318 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v319 = *(_QWORD *)(v318 - 8);
  v320 = (*(_QWORD *)(v319 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v351);
  v321 = (char *)&v100 - v320;
  v322 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v323 = (char *)&v100 - v322;
  v428 = (char *)&v100 - v322;
  v324 = type metadata accessor for USOParse();
  v325 = *(_QWORD *)(v324 - 8);
  v326 = (*(_QWORD *)(v325 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v324);
  v327 = (char *)&v100 - v326;
  v427 = (char *)&v100 - v326;
  v328 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v351);
  v329 = (uint64_t)&v100 - v328;
  v330 = type metadata accessor for Logger();
  v331 = *(_QWORD *)(v330 - 8);
  v332 = *(_QWORD *)(v331 + 64);
  v333 = (v332 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v351);
  v334 = (char *)&v100 - v333;
  v335 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v336 = (char *)&v100 - v335;
  v337 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v338 = (char *)&v100 - v337;
  v339 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v340 = (char *)&v100 - v339;
  v341 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v342 = (char *)&v100 - v341;
  v343 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v344 = (char *)&v100 - v343;
  v345 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v346 = (char *)&v100 - v345;
  v347 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v348 = (char *)&v100 - v347;
  v349 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v21);
  v350 = (char *)&v100 - v349;
  v352 = type metadata accessor for Parse.DirectInvocation();
  v353 = *(_QWORD *)(v352 - 8);
  v354 = (*(_QWORD *)(v353 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = MEMORY[0x24BDAC7A8](v351);
  v355 = (char *)&v100 - v354;
  v356 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v23);
  v357 = (char *)&v100 - v356;
  v426 = (char *)&v100 - v356;
  v362 = type metadata accessor for Parse();
  v361 = *(_QWORD *)(v362 - 8);
  MEMORY[0x24BDAC7A8](v362);
  v363 = (char *)&v100 - v25;
  v425 = v26;
  v423 = v359;
  v424 = v360;
  (*(void (**)(void))(v27 + 16))();
  v364 = (*(uint64_t (**)(char *, uint64_t))(v361 + 88))(v363, v362);
  if (v364 == *MEMORY[0x24BE98E88])
  {
    (*(void (**)(char *, uint64_t))(v361 + 96))(v363, v362);
    (*(void (**)(char *, char *, uint64_t))(v353 + 32))(v357, v363, v352);
    v426 = v357;
    if ((Parse.isCancel.getter() & 1) != 0)
    {
      v28 = v350;
      v29 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v331 + 16))(v28, v29, v330);
      v312 = Logger.logObject.getter();
      v311 = static os_log_type_t.debug.getter();
      v309 = &v369;
      v369 = 2;
      v307 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v308 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v310 = v370;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v313 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v312, (os_log_type_t)v311))
      {
        v30 = v315;
        v297 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v295 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v296 = 0;
        v298 = createStorage<A>(capacity:type:)(0);
        v299 = createStorage<A>(capacity:type:)(v296);
        v303 = &v368;
        v368 = v297;
        v304 = &v367;
        v367 = v298;
        v301 = &v366;
        v366 = v299;
        v300 = 0;
        serialize(_:at:)(0, &v368);
        serialize(_:at:)(v300, v303);
        v365 = v313;
        v302 = &v100;
        MEMORY[0x24BDAC7A8](&v100);
        v31 = v304;
        v32 = &v100 - 6;
        v305 = &v100 - 6;
        v32[2] = (uint64_t)v303;
        v32[3] = (uint64_t)v31;
        v32[4] = v33;
        v306 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v30)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_24701B000, v312, (os_log_type_t)v311, "#actionForInput received cancel input, returning .cancel", v297, v310);
          v294 = 0;
          destroyStorage<A>(_:count:)(v298, 0, v295);
          destroyStorage<A>(_:count:)(v299, v294, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v297, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v331 + 8))(v350, v330);
      static ActionForInput.cancel()();
      return (*(uint64_t (**)(char *, uint64_t))(v353 + 8))(v357, v352);
    }
    else
    {
      v35 = v315;
      v383 = static PaymentsDirectInvocations.Identifiers.allCases.getter();
      (*(void (**)(char *, char *, uint64_t))(v353 + 16))(v355, v357, v352);
      v289 = &v100;
      MEMORY[0x24BDAC7A8](&v100);
      v290 = &v100 - 4;
      *(&v100 - 2) = v36;
      v291 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PaymentsDirectInvocations.Identifiers]);
      lazy protocol witness table accessor for type [PaymentsDirectInvocations.Identifiers] and conformance [A]();
      result = Sequence.contains(where:)();
      v292 = v35;
      v293 = result;
      if (v35)
      {
        __break(1u);
        return result;
      }
      v288 = v293;
      v287 = *(void (**)(char *, uint64_t))(v353 + 8);
      v287(v355, v352);
      outlined destroy of [SFCardSection]();
      if ((v288 & 1) != 0)
      {
        v37 = v348;
        v38 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v331 + 16))(v37, v38, v330);
        v285 = Logger.logObject.getter();
        v284 = static os_log_type_t.debug.getter();
        v282 = &v375;
        v375 = 2;
        v280 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v281 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v283 = v376;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        v286 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v285, (os_log_type_t)v284))
        {
          v39 = v292;
          v270 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v268 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v269 = 0;
          v271 = createStorage<A>(capacity:type:)(0);
          v272 = createStorage<A>(capacity:type:)(v269);
          v276 = &v374;
          v374 = v270;
          v277 = &v373;
          v373 = v271;
          v274 = &v372;
          v372 = v272;
          v273 = 0;
          serialize(_:at:)(0, &v374);
          serialize(_:at:)(v273, v276);
          v371 = v286;
          v275 = &v100;
          MEMORY[0x24BDAC7A8](&v100);
          v40 = v277;
          v41 = &v100 - 6;
          v278 = &v100 - 6;
          v41[2] = (uint64_t)v276;
          v41[3] = (uint64_t)v40;
          v41[4] = v42;
          v279 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v39)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_24701B000, v285, (os_log_type_t)v284, "#actionForInput returning .handle for supported direct invocation", v270, v283);
            v267 = 0;
            destroyStorage<A>(_:count:)(v271, 0, v268);
            destroyStorage<A>(_:count:)(v272, v267, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x2495725CC](v270, MEMORY[0x24BEE4260]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        (*(void (**)(char *, uint64_t))(v331 + 8))(v348, v330);
        static ActionForInput.handle()();
        return ((uint64_t (*)(char *, uint64_t))v287)(v357, v352);
      }
      else
      {
        Parse.confirmationResponse.getter(v329);
        v43 = type metadata accessor for ConfirmationResponse();
        v266 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v329, 1) != 1;
        v265 = v266;
        outlined destroy of ConfirmationResponse?(v329);
        if (!v265)
        {
          v287(v357, v352);
          v244 = v292;
          goto LABEL_72;
        }
        v44 = v346;
        v45 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v331 + 16))(v44, v45, v330);
        v263 = Logger.logObject.getter();
        v262 = static os_log_type_t.debug.getter();
        v260 = &v381;
        v381 = 2;
        v258 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v259 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v261 = v382;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        v264 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v263, (os_log_type_t)v262))
        {
          v46 = v292;
          v248 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v246 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v247 = 0;
          v249 = createStorage<A>(capacity:type:)(0);
          v250 = createStorage<A>(capacity:type:)(v247);
          v254 = &v380;
          v380 = v248;
          v255 = &v379;
          v379 = v249;
          v252 = &v378;
          v378 = v250;
          v251 = 0;
          serialize(_:at:)(0, &v380);
          serialize(_:at:)(v251, v254);
          v377 = v264;
          v253 = &v100;
          MEMORY[0x24BDAC7A8](&v100);
          v47 = v255;
          v48 = &v100 - 6;
          v256 = &v100 - 6;
          v48[2] = (uint64_t)v254;
          v48[3] = (uint64_t)v47;
          v48[4] = v49;
          v257 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v46)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_24701B000, v263, (os_log_type_t)v262, "#actionForInput returning .handle for supported direct invocation confirmation response", v248, v261);
            v245 = 0;
            destroyStorage<A>(_:count:)(v249, 0, v246);
            destroyStorage<A>(_:count:)(v250, v245, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x2495725CC](v248, MEMORY[0x24BEE4260]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        (*(void (**)(char *, uint64_t))(v331 + 8))(v346, v330);
        static ActionForInput.handle()();
        return ((uint64_t (*)(char *, uint64_t))v287)(v357, v352);
      }
    }
  }
  else
  {
    if (v364 != *MEMORY[0x24BE98E98])
    {
      (*(void (**)(char *, uint64_t))(v361 + 8))(v363, v362);
      v244 = v315;
LABEL_72:
      v94 = v334;
      v114 = v244;
      v95 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v331 + 16))(v94, v95, v330);
      v120 = Logger.logObject.getter();
      v119 = static os_log_type_t.debug.getter();
      v117 = &v421;
      v421 = 2;
      v115 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v116 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v118 = v422;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v121 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v120, (os_log_type_t)v119))
      {
        v96 = v114;
        v104 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v102 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v103 = 0;
        v105 = createStorage<A>(capacity:type:)(0);
        v106 = createStorage<A>(capacity:type:)(v103);
        v110 = &v420;
        v420 = v104;
        v111 = &v419;
        v419 = v105;
        v108 = &v418;
        v418 = v106;
        v107 = 0;
        serialize(_:at:)(0, &v420);
        serialize(_:at:)(v107, v110);
        v417 = v121;
        v109 = &v100;
        MEMORY[0x24BDAC7A8](&v100);
        v97 = v111;
        v98 = &v100 - 6;
        v112 = &v100 - 6;
        v98[2] = (uint64_t)v110;
        v98[3] = (uint64_t)v97;
        v98[4] = v99;
        v113 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v96)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_24701B000, v120, (os_log_type_t)v119, "#FlowUtil actionForInput received unsupported parse type, returning .ignore", v104, v118);
          v101 = 0;
          destroyStorage<A>(_:count:)(v105, 0, v102);
          destroyStorage<A>(_:count:)(v106, v101, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v104, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v331 + 8))(v334, v330);
      return static ActionForInput.ignore()();
    }
    v50 = v327;
    (*(void (**)(char *, uint64_t))(v361 + 96))(v363, v362);
    (*(void (**)(char *, char *, uint64_t))(v325 + 32))(v50, v363, v324);
    v427 = v50;
    USOParse.preferredUserDialogAct.getter(v317);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v319 + 48))(v317, 1, v318) == 1)
    {
      outlined destroy of Siri_Nlu_External_UserDialogAct?(v317);
      (*(void (**)(char *, uint64_t))(v325 + 8))(v327, v324);
      v244 = v315;
      goto LABEL_72;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v319 + 32))(v323, v317, v318);
    if ((Siri_Nlu_External_UserDialogAct.hasAccepted.getter() & 1) != 0)
    {
      v51 = v344;
      v52 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v331 + 16))(v51, v52, v330);
      v242 = Logger.logObject.getter();
      v241 = static os_log_type_t.debug.getter();
      v239 = &v388;
      v388 = 2;
      v237 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v238 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v240 = v389;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v243 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v242, (os_log_type_t)v241))
      {
        v53 = v315;
        v227 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v225 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v226 = 0;
        v228 = createStorage<A>(capacity:type:)(0);
        v229 = createStorage<A>(capacity:type:)(v226);
        v233 = &v387;
        v387 = v227;
        v234 = &v386;
        v386 = v228;
        v231 = &v385;
        v385 = v229;
        v230 = 0;
        serialize(_:at:)(0, &v387);
        serialize(_:at:)(v230, v233);
        v384 = v243;
        v232 = &v100;
        MEMORY[0x24BDAC7A8](&v100);
        v54 = v234;
        v55 = &v100 - 6;
        v235 = &v100 - 6;
        v55[2] = (uint64_t)v233;
        v55[3] = (uint64_t)v54;
        v55[4] = v56;
        v236 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v53)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_24701B000, v242, (os_log_type_t)v241, "#actionForInput returning .handle for supported USO confirmation response", v227, v240);
          v224 = 0;
          destroyStorage<A>(_:count:)(v228, 0, v225);
          destroyStorage<A>(_:count:)(v229, v224, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v227, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v331 + 8))(v344, v330);
      static ActionForInput.handle()();
      (*(void (**)(char *, uint64_t))(v319 + 8))(v323, v318);
      return (*(uint64_t (**)(char *, uint64_t))(v325 + 8))(v327, v324);
    }
    else
    {
      v223 = Siri_Nlu_External_UserDialogAct.hasRejected.getter();
      (*(void (**)(char *, char *, uint64_t))(v319 + 16))(v321, v323, v318);
      if ((v223 & 1) != 0)
        v222 = 1;
      else
        v222 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
      v221 = v222;
      v220 = *(void (**)(char *, uint64_t))(v319 + 8);
      v220(v321, v318);
      if ((v221 & 1) != 0)
      {
        v57 = v342;
        v58 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v331 + 16))(v57, v58, v330);
        v218 = Logger.logObject.getter();
        v217 = static os_log_type_t.debug.getter();
        v215 = &v394;
        v394 = 2;
        v213 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v214 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v216 = v395;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        v219 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v218, (os_log_type_t)v217))
        {
          v59 = v315;
          v203 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v201 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v202 = 0;
          v204 = createStorage<A>(capacity:type:)(0);
          v205 = createStorage<A>(capacity:type:)(v202);
          v209 = &v393;
          v393 = v203;
          v210 = &v392;
          v392 = v204;
          v207 = &v391;
          v391 = v205;
          v206 = 0;
          serialize(_:at:)(0, &v393);
          serialize(_:at:)(v206, v209);
          v390 = v219;
          v208 = &v100;
          MEMORY[0x24BDAC7A8](&v100);
          v60 = v210;
          v61 = &v100 - 6;
          v211 = &v100 - 6;
          v61[2] = (uint64_t)v209;
          v61[3] = (uint64_t)v60;
          v61[4] = v62;
          v212 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v59)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_24701B000, v218, (os_log_type_t)v217, "#actionForInput returning .cancel for supported USO confirmation response", v203, v216);
            v200 = 0;
            destroyStorage<A>(_:count:)(v204, 0, v201);
            destroyStorage<A>(_:count:)(v205, v200, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x2495725CC](v203, MEMORY[0x24BEE4260]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        (*(void (**)(char *, uint64_t))(v331 + 8))(v342, v330);
        static ActionForInput.cancel()();
        v220(v323, v318);
        return (*(uint64_t (**)(char *, uint64_t))(v325 + 8))(v327, v324);
      }
      else
      {
        v199 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
        if (v199)
        {
          v198 = v199;
          v193 = v199;
          v194 = UsoTask.siriKitIntentType.getter();
          v195 = v63;
          swift_release();
          v196 = v194;
          v197 = v195;
        }
        else
        {
          v196 = 0;
          v197 = 0;
        }
        v191 = v197;
        v192 = v196;
        if (v196)
        {
          v189 = v192;
          v190 = v191;
          v409 = v192;
          v410 = v191;
          if (v192 == v359)
          {
            v64 = v340;
            v65 = Logger.payments.unsafeMutableAddressor();
            (*(void (**)(char *, uint64_t, uint64_t))(v331 + 16))(v64, v65, v330);
            v187 = Logger.logObject.getter();
            v186 = static os_log_type_t.debug.getter();
            v184 = &v400;
            v400 = 2;
            v182 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
            v183 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
            lazy protocol witness table accessor for type Int and conformance Int();
            UnsignedInteger<>.init<A>(_:)();
            v185 = v401;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
            v188 = _allocateUninitializedArray<A>(_:)();
            if (os_log_type_enabled(v187, (os_log_type_t)v186))
            {
              v66 = v315;
              v172 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
              v170 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
              v171 = 0;
              v173 = createStorage<A>(capacity:type:)(0);
              v174 = createStorage<A>(capacity:type:)(v171);
              v178 = &v399;
              v399 = v172;
              v179 = &v398;
              v398 = v173;
              v176 = &v397;
              v397 = v174;
              v175 = 0;
              serialize(_:at:)(0, &v399);
              serialize(_:at:)(v175, v178);
              v396 = v188;
              v177 = &v100;
              MEMORY[0x24BDAC7A8](&v100);
              v67 = v179;
              v68 = &v100 - 6;
              v180 = &v100 - 6;
              v68[2] = (uint64_t)v178;
              v68[3] = (uint64_t)v67;
              v68[4] = v69;
              v181 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
              lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
              Sequence.forEach(_:)();
              if (v66)
              {
                __break(1u);
              }
              else
              {
                _os_log_impl(&dword_24701B000, v187, (os_log_type_t)v186, "#FlowUtil actionForInput returning .handle for supported USO task", v172, v185);
                v169 = 0;
                destroyStorage<A>(_:count:)(v173, 0, v170);
                destroyStorage<A>(_:count:)(v174, v169, MEMORY[0x24BEE4AD8] + 8);
                MEMORY[0x2495725CC](v172, MEMORY[0x24BEE4260]);
                swift_bridgeObjectRelease();
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }

            (*(void (**)(char *, uint64_t))(v331 + 8))(v340, v330);
            static ActionForInput.handle()();
            v220(v323, v318);
            return (*(uint64_t (**)(char *, uint64_t))(v325 + 8))(v327, v324);
          }
          else
          {
            v70 = v338;
            v71 = Logger.payments.unsafeMutableAddressor();
            (*(void (**)(char *, uint64_t, uint64_t))(v331 + 16))(v70, v71, v330);
            v157 = 32;
            v158 = 7;
            v72 = swift_allocObject();
            v73 = v360;
            v156 = v72;
            *(_QWORD *)(v72 + 16) = v359;
            *(_QWORD *)(v72 + 24) = v73;
            v167 = Logger.logObject.getter();
            v168 = static os_log_type_t.debug.getter();
            v153 = &v407;
            v407 = 12;
            v151 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
            v152 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
            lazy protocol witness table accessor for type Int and conformance Int();
            UnsignedInteger<>.init<A>(_:)();
            v154 = v408;
            v155 = 17;
            v161 = swift_allocObject();
            *(_BYTE *)(v161 + 16) = 32;
            v162 = swift_allocObject();
            *(_BYTE *)(v162 + 16) = 8;
            v74 = swift_allocObject();
            v75 = v156;
            v159 = v74;
            *(_QWORD *)(v74 + 16) = partial apply for implicit closure #2 in static FlowUtil.actionForInput(parse:intentType:);
            *(_QWORD *)(v74 + 24) = v75;
            v76 = swift_allocObject();
            v77 = v159;
            v160 = v76;
            *(_QWORD *)(v76 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
            *(_QWORD *)(v76 + 24) = v77;
            v78 = swift_allocObject();
            v79 = v160;
            v164 = v78;
            *(_QWORD *)(v78 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
            *(_QWORD *)(v78 + 24) = v79;
            v166 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
            v163 = _allocateUninitializedArray<A>(_:)();
            v165 = v80;
            swift_retain();
            v81 = v161;
            v82 = v165;
            *v165 = partial apply for closure #1 in OSLogArguments.append(_:);
            v82[1] = v81;
            swift_retain();
            v83 = v162;
            v84 = v165;
            v165[2] = partial apply for closure #1 in OSLogArguments.append(_:);
            v84[3] = v83;
            swift_retain();
            v85 = v164;
            v86 = v165;
            v165[4] = partial apply for closure #1 in OSLogArguments.append(_:);
            v86[5] = v85;
            _finalizeUninitializedArray<A>(_:)();
            swift_bridgeObjectRelease();
            if (os_log_type_enabled(v167, (os_log_type_t)v168))
            {
              v87 = v315;
              v144 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
              v143 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
              v145 = createStorage<A>(capacity:type:)(0);
              v146 = createStorage<A>(capacity:type:)(1);
              v147 = &v406;
              v406 = v144;
              v148 = &v405;
              v405 = v145;
              v149 = &v404;
              v404 = v146;
              serialize(_:at:)(2, &v406);
              serialize(_:at:)(1, v147);
              v402 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
              v403 = v161;
              closure #1 in osLogInternal(_:log:type:)(&v402, (uint64_t)v147, (uint64_t)v148, (uint64_t)v149);
              v150 = v87;
              if (v87)
              {
                __break(1u);
              }
              else
              {
                v402 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                v403 = v162;
                closure #1 in osLogInternal(_:log:type:)(&v402, (uint64_t)&v406, (uint64_t)&v405, (uint64_t)&v404);
                v142 = 0;
                v402 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                v403 = v164;
                closure #1 in osLogInternal(_:log:type:)(&v402, (uint64_t)&v406, (uint64_t)&v405, (uint64_t)&v404);
                _os_log_impl(&dword_24701B000, v167, (os_log_type_t)v168, "#actionForInput returning .ignore for USO task as it is supported but does not match current intent %s", v144, v154);
                destroyStorage<A>(_:count:)(v145, 0, v143);
                destroyStorage<A>(_:count:)(v146, 1, MEMORY[0x24BEE4AD8] + 8);
                MEMORY[0x2495725CC](v144, MEMORY[0x24BEE4260]);
                swift_release();
                swift_release();
                swift_release();
              }
            }
            else
            {
              swift_release();
              swift_release();
              swift_release();
            }

            (*(void (**)(char *, uint64_t))(v331 + 8))(v338, v330);
            static ActionForInput.ignore()();
            v220(v323, v318);
            return (*(uint64_t (**)(char *, uint64_t))(v325 + 8))(v327, v324);
          }
        }
        else
        {
          v88 = v336;
          v89 = Logger.payments.unsafeMutableAddressor();
          (*(void (**)(char *, uint64_t, uint64_t))(v331 + 16))(v88, v89, v330);
          v140 = Logger.logObject.getter();
          v139 = static os_log_type_t.debug.getter();
          v137 = &v415;
          v415 = 2;
          v135 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          v136 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          lazy protocol witness table accessor for type Int and conformance Int();
          UnsignedInteger<>.init<A>(_:)();
          v138 = v416;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
          v141 = _allocateUninitializedArray<A>(_:)();
          if (os_log_type_enabled(v140, (os_log_type_t)v139))
          {
            v90 = v315;
            v125 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            v123 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
            v124 = 0;
            v126 = createStorage<A>(capacity:type:)(0);
            v127 = createStorage<A>(capacity:type:)(v124);
            v131 = &v414;
            v414 = v125;
            v132 = &v413;
            v413 = v126;
            v129 = &v412;
            v412 = v127;
            v128 = 0;
            serialize(_:at:)(0, &v414);
            serialize(_:at:)(v128, v131);
            v411 = v141;
            v130 = &v100;
            MEMORY[0x24BDAC7A8](&v100);
            v91 = v132;
            v92 = &v100 - 6;
            v133 = &v100 - 6;
            v92[2] = (uint64_t)v131;
            v92[3] = (uint64_t)v91;
            v92[4] = v93;
            v134 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
            lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
            Sequence.forEach(_:)();
            if (v90)
            {
              __break(1u);
            }
            else
            {
              _os_log_impl(&dword_24701B000, v140, (os_log_type_t)v139, "#FlowUtil actionForInput returning .ignore for unsupported USO task", v125, v138);
              v122 = 0;
              destroyStorage<A>(_:count:)(v126, 0, v123);
              destroyStorage<A>(_:count:)(v127, v122, MEMORY[0x24BEE4AD8] + 8);
              MEMORY[0x2495725CC](v125, MEMORY[0x24BEE4260]);
              swift_bridgeObjectRelease();
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }

          (*(void (**)(char *, uint64_t))(v331 + 8))(v336, v330);
          static ActionForInput.ignore()();
          v220(v323, v318);
          return (*(uint64_t (**)(char *, uint64_t))(v325 + 8))(v327, v324);
        }
      }
    }
  }
}

uint64_t closure #1 in static FlowUtil.actionForInput(parse:intentType:)(char *a1)
{
  char v2;

  PaymentsDirectInvocations.Identifiers.rawValue.getter(*a1);
  Parse.DirectInvocation.identifier.getter();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_2470FB1E0()
{
  return swift_deallocObject();
}

NSJSONWritingOptions partial apply for implicit closure #2 in static FlowUtil.actionForInput(parse:intentType:)()
{
  uint64_t v0;

  return NSJSONWritingOptions.init(rawValue:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2470FB214()
{
  return swift_deallocObject();
}

uint64_t sub_2470FB23C()
{
  return swift_deallocObject();
}

uint64_t sub_2470FB264()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470FB2A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470FB2DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static FlowUtil.actionForInput(parse:intentType:)(char *a1)
{
  return closure #1 in static FlowUtil.actionForInput(parse:intentType:)(a1) & 1;
}

unint64_t lazy protocol witness table accessor for type [PaymentsDirectInvocations.Identifiers] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [PaymentsDirectInvocations.Identifiers] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PaymentsDirectInvocations.Identifiers] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PaymentsDirectInvocations.Identifiers]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [PaymentsDirectInvocations.Identifiers] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [PaymentsDirectInvocations.Identifiers] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PaymentsDirectInvocations.Identifiers] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PaymentsDirectInvocations.Identifiers]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [PaymentsDirectInvocations.Identifiers] and conformance [A]);
    return v1;
  }
  return v3;
}

ValueMetadata *type metadata accessor for FlowUtil()
{
  return &type metadata for FlowUtil;
}

id Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  char *v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  _UNKNOWN **v64;
  uint64_t v66;
  id v67;
  _UNKNOWN **v68;
  uint64_t v69;
  uint64_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE **v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint32_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  NSObject *v90;
  int v91;
  void *v92;
  _UNKNOWN **v93;
  id v94;
  _UNKNOWN **v95;
  _UNKNOWN **v96;
  _UNKNOWN **v97;
  _UNKNOWN **v98;
  id v99;
  uint64_t v100;
  void (*v101)(_UNKNOWN ***__return_ptr, uint64_t *);
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  id v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  _UNKNOWN **v112;
  id v113;
  _UNKNOWN **v114;
  _UNKNOWN **v115;
  _UNKNOWN **v116;
  _UNKNOWN **v117;
  id v118;
  uint64_t v119;
  void (*v120)(_UNKNOWN ***__return_ptr, uint64_t *);
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  id v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  _UNKNOWN **v131;
  id v132;
  _UNKNOWN **v133;
  _UNKNOWN **v134;
  _UNKNOWN **v135;
  _UNKNOWN **v136;
  id v137;
  uint64_t v138;
  void (*v139)(_UNKNOWN ***__return_ptr, uint64_t *);
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  id v144;
  uint64_t v145;
  id v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  _UNKNOWN **v150;
  id v151;
  _UNKNOWN **v152;
  _UNKNOWN **v153;
  _UNKNOWN **v154;
  _UNKNOWN **v155;
  id v156;
  uint64_t v157;
  void (*v158)(_UNKNOWN ***__return_ptr, uint64_t *);
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  id v163;
  uint64_t v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  _UNKNOWN **v169;
  id v170;
  _UNKNOWN **v171;
  _UNKNOWN **v172;
  _UNKNOWN **v173;
  _UNKNOWN **v174;
  id v175;
  uint64_t v176;
  void (*v177)(_UNKNOWN ***__return_ptr, uint64_t *);
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  id v182;
  uint64_t v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  _UNKNOWN **v188;
  id v189;
  _UNKNOWN **v190;
  id v191;
  _UNKNOWN **v192;
  _UNKNOWN **v193;
  _UNKNOWN **v194;
  _UNKNOWN **v195;
  id v196;
  uint64_t v197;
  void (*v198)(_UNKNOWN ***__return_ptr, uint64_t *);
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  id v203;
  uint64_t v204;
  id v205;
  uint64_t v206;
  _BYTE *v207;
  uint64_t v208;
  _BYTE *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void (*v213)(char *, char *, uint64_t);
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  void (*v220)(char *, uint64_t);
  int v221;
  void *v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  uint8_t *v226;
  uint64_t v227;
  uint64_t v228;
  _BYTE **v229;
  uint64_t *v230;
  uint64_t *v231;
  void *v232;
  _UNKNOWN **v233;
  _UNKNOWN **v234;
  _UNKNOWN **v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  char *v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char *v275;
  unint64_t v276;
  char *v277;
  void *v278;
  unint64_t v279;
  char *v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  id v285;
  unint64_t v286;
  uint64_t v287;
  char *v288;
  unint64_t v289;
  char *v290;
  _QWORD *v291;
  uint64_t v292;
  void (*v293)(char *, uint64_t, uint64_t);
  uint64_t v294;
  void (*v295)(char *, uint64_t, uint64_t);
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  char *v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t *v303;
  unint64_t v304;
  uint32_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  NSObject *v317;
  int v318;
  uint64_t (*v319)(uint64_t, uint64_t, uint64_t);
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  _BYTE *v323;
  _UNKNOWN **v324;
  uint64_t v325;
  uint64_t v326;
  _UNKNOWN **v327;
  uint64_t v328;
  uint64_t v329;
  _UNKNOWN **v330;
  uint64_t v331;
  uint64_t v332;
  _UNKNOWN **v333;
  uint64_t v334;
  uint64_t v335;
  _UNKNOWN **v336;
  uint64_t v337;
  uint64_t v338;
  _UNKNOWN **v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  _BYTE v348[32];
  uint64_t (*v349)(uint64_t, uint64_t, uint64_t);
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  _BYTE *v353[2];
  uint32_t v354;
  uint64_t v355;
  _QWORD v356[3];
  uint64_t v357;
  _BYTE v358[32];
  uint64_t v359;
  uint32_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  char *v366;
  char *v367;

  v285 = a1;
  v284 = a2;
  v282 = a3;
  v283 = a4;
  v233 = &protocol witness table for INSearchForAccountsIntent;
  v234 = &protocol witness table for INRequestPaymentIntent;
  v235 = &protocol witness table for INSendPaymentIntent;
  v364 = 0;
  v365 = 0;
  v363 = 0;
  v362 = 0;
  v361 = 0;
  v367 = 0;
  v366 = 0;
  v236 = 0;
  v341 = 0;
  v338 = 0;
  v335 = 0;
  v332 = 0;
  v329 = 0;
  v326 = 0;
  v278 = 0;
  v237 = type metadata accessor for Parse.DirectInvocation();
  v238 = *(_QWORD *)(v237 - 8);
  v239 = (*(_QWORD *)(v238 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v237);
  v240 = (char *)&v66 - v239;
  v367 = (char *)&v66 - v239;
  v241 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_noVerb_common_PaymentAccount, INSearchForAccountsIntent>);
  v242 = *(_QWORD *)(v241 - 8);
  v243 = (*(_QWORD *)(v242 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v241);
  v244 = (char *)&v66 - v243;
  v245 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_summarise_common_PaymentAccount, INSearchForAccountsIntent>);
  v246 = *(_QWORD *)(v245 - 8);
  v247 = (*(_QWORD *)(v246 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v245);
  v248 = (char *)&v66 - v247;
  v249 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_request_common_PaymentAccount, INSearchForAccountsIntent>);
  v250 = *(_QWORD *)(v249 - 8);
  v251 = (*(_QWORD *)(v250 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v249);
  v252 = (char *)&v66 - v251;
  v253 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_requestMoney_common_Payment, INRequestPaymentIntent>);
  v254 = *(_QWORD *)(v253 - 8);
  v255 = (*(_QWORD *)(v254 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v253);
  v256 = (char *)&v66 - v255;
  v257 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_noVerb_common_Payment, INSendPaymentIntent>);
  v258 = *(_QWORD *)(v257 - 8);
  v259 = (*(_QWORD *)(v258 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v257);
  v260 = (char *)&v66 - v259;
  v261 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_pay_common_Payment, INSendPaymentIntent>);
  v262 = *(_QWORD *)(v261 - 8);
  v263 = (*(_QWORD *)(v262 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v278);
  v264 = (char *)&v66 - v263;
  v265 = type metadata accessor for Siri_Nlu_External_UserParse();
  v266 = *(_QWORD *)(v265 - 8);
  v267 = (*(_QWORD *)(v266 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v265);
  v268 = (char *)&v66 - v267;
  v269 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v278);
  v270 = (uint64_t)&v66 - v269;
  v271 = type metadata accessor for USOParse();
  v272 = *(_QWORD *)(v271 - 8);
  v273 = *(_QWORD *)(v272 + 64);
  v274 = (v273 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v278);
  v275 = (char *)&v66 - v274;
  v276 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v277 = (char *)&v66 - v276;
  v366 = (char *)&v66 - v276;
  v300 = type metadata accessor for Parse();
  v297 = *(_QWORD *)(v300 - 8);
  v296 = *(_QWORD *)(v297 + 64);
  v279 = (v296 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v278);
  v280 = (char *)&v66 - v279;
  v281 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v299 = (char *)&v66 - v281;
  v292 = type metadata accessor for Logger();
  v291 = *(_QWORD **)(v292 - 8);
  v287 = v291[8];
  v286 = (v287 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v285);
  v288 = (char *)&v66 - v286;
  v289 = (v287 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v66 - v289;
  v290 = (char *)&v66 - v289;
  v364 = v9;
  v365 = v11;
  v363 = v12;
  v362 = v13;
  v361 = v14;
  v15 = Logger.payments.unsafeMutableAddressor();
  v293 = (void (*)(char *, uint64_t, uint64_t))v291[2];
  v293(v10, v15, v292);
  v295 = *(void (**)(char *, uint64_t, uint64_t))(v297 + 16);
  v295(v299, v294, v300);
  v298 = (*(unsigned __int8 *)(v297 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v297 + 80);
  v308 = 7;
  v309 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v297 + 32))(v309 + v298, v299, v300);
  v317 = Logger.logObject.getter();
  v318 = static os_log_type_t.debug.getter();
  v303 = &v359;
  v359 = 12;
  v301 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v302 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v304 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v305 = v360;
  v306 = 17;
  v311 = swift_allocObject();
  *(_BYTE *)(v311 + 16) = 32;
  v312 = swift_allocObject();
  *(_BYTE *)(v312 + 16) = 8;
  v307 = 32;
  v16 = swift_allocObject();
  v17 = v309;
  v310 = v16;
  *(_QWORD *)(v16 + 16) = partial apply for implicit closure #3 in FlowFactory.findFlow(for:);
  *(_QWORD *)(v16 + 24) = v17;
  v18 = swift_allocObject();
  v19 = v310;
  v314 = v18;
  *(_QWORD *)(v18 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v18 + 24) = v19;
  v316 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v313 = _allocateUninitializedArray<A>(_:)();
  v315 = v20;
  swift_retain();
  v21 = v311;
  v22 = v315;
  *v315 = partial apply for closure #1 in OSLogArguments.append(_:);
  v22[1] = v21;
  swift_retain();
  v23 = v312;
  v24 = v315;
  v315[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v24[3] = v23;
  swift_retain();
  v25 = v314;
  v26 = v315;
  v315[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[5] = v25;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v317, (os_log_type_t)v318))
  {
    v27 = v236;
    v226 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v225 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v227 = createStorage<A>(capacity:type:)(0);
    v228 = createStorage<A>(capacity:type:)(1);
    v229 = &v323;
    v323 = v226;
    v230 = &v322;
    v322 = v227;
    v231 = &v321;
    v321 = v228;
    serialize(_:at:)(2, &v323);
    serialize(_:at:)(1, v229);
    v319 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v320 = v311;
    closure #1 in osLogInternal(_:log:type:)(&v319, (uint64_t)v229, (uint64_t)v230, (uint64_t)v231);
    v232 = v27;
    if (v27)
    {
      __break(1u);
    }
    else
    {
      v319 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v320 = v312;
      closure #1 in osLogInternal(_:log:type:)(&v319, (uint64_t)&v323, (uint64_t)&v322, (uint64_t)&v321);
      v223 = 0;
      v319 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v320 = v314;
      closure #1 in osLogInternal(_:log:type:)(&v319, (uint64_t)&v323, (uint64_t)&v322, (uint64_t)&v321);
      v222 = 0;
      _os_log_impl(&dword_24701B000, v317, (os_log_type_t)v318, "#Parse toSiriKitIntent %s", v226, v305);
      destroyStorage<A>(_:count:)(v227, 0, v225);
      destroyStorage<A>(_:count:)(v228, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v226, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v224 = v222;
    }
  }
  else
  {
    v28 = v236;
    swift_release();
    swift_release();
    swift_release();
    v224 = v28;
  }
  v219 = v224;

  v220 = (void (*)(char *, uint64_t))v291[1];
  v220(v290, v292);
  v295(v280, v294, v300);
  v221 = (*(uint64_t (**)(char *, uint64_t))(v297 + 88))(v280, v300);
  if (v221 == *MEMORY[0x24BE98E88])
  {
    v63 = v240;
    (*(void (**)(char *, uint64_t))(v297 + 96))(v280, v300);
    (*(void (**)(char *, char *, uint64_t))(v238 + 32))(v63, v280, v237);
    v367 = v63;
    v67 = Parse.DirectInvocation.toSiriKitIntent(previousIntent:)((uint64_t)v285, v284);
    v68 = v64;
    (*(void (**)(char *, uint64_t))(v238 + 8))(v240, v237);
    v189 = v67;
    v190 = v68;
    return v189;
  }
  if (v221 != *MEMORY[0x24BE98E98])
  {
    (*(void (**)(char *, uint64_t))(v297 + 8))(v280, v300);
    v189 = v278;
    v190 = (_UNKNOWN **)v278;
    return v189;
  }
  v29 = v277;
  (*(void (**)(char *, uint64_t))(v297 + 96))(v280, v300);
  v213 = *(void (**)(char *, char *, uint64_t))(v272 + 32);
  v213(v29, v280, v271);
  v366 = v29;
  v30 = USOParse.userParse.getter();
  v216 = MEMORY[0x249571348](v30);
  (*(void (**)(char *, uint64_t))(v266 + 8))(v268, v265);
  swift_bridgeObjectRetain();
  v215 = &v355;
  v355 = v216;
  v214 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
  lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  v217 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v218 = *(_QWORD *)(v217 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v218 + 48))(v270, 1) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v270);
  }
  else
  {
    v212 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v218 + 8))(v270, v217);
    if (v212)
    {
      v211 = v212;
      v210 = v212;
      UsoTask.eraseToAny.getter();
      swift_release();
      goto LABEL_13;
    }
  }
  memset(v356, 0, sizeof(v356));
  v357 = 0;
LABEL_13:
  if (v357)
  {
    v207 = v358;
    outlined init with take of Any((uint64_t)v356, (uint64_t)v358);
    v209 = v348;
    outlined init with copy of Any((uint64_t)v207, (uint64_t)v348);
    v208 = 0;
    type metadata accessor for UsoTask_pay_common_Payment();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v206 = v347;
      v326 = v347;
      v31 = v285;
      if (v285)
      {
        v205 = v285;
        v203 = v285;
        objc_opt_self();
        v204 = swift_dynamicCastObjCClass();
        if (v204)
        {
          v202 = (void *)v204;
        }
        else
        {
          v201 = 0;

          v202 = v201;
        }
        v200 = v202;
      }
      else
      {
        v200 = 0;
      }
      v32 = v219;
      v196 = v200;
      static Transformer<>.transformer(previousIntent:contactResolver:)(v200, v283);

      v198 = (void (*)(_UNKNOWN ***__return_ptr, uint64_t *))Transformer.transform.getter();
      v197 = v33;
      (*(void (**)(char *, uint64_t))(v262 + 8))(v264, v261);
      v325 = v206;
      v198(&v324, &v325);
      v199 = v32;
      if (v32)
      {
        v191 = v199;
        v192 = 0;
        swift_release();

        v194 = v192;
        v195 = v192;
      }
      else
      {
        v193 = v324;
        swift_release();
        v194 = v193;
        v195 = v235;
      }
      v188 = v195;
      v187 = v194;
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v348);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v358);
      (*(void (**)(char *, uint64_t))(v272 + 8))(v277, v271);
      v189 = v187;
      v190 = v188;
    }
    else
    {
      v186 = 0;
      type metadata accessor for UsoTask_noVerb_common_Payment();
      if ((swift_dynamicCast() & 1) != 0)
      {
        v185 = v346;
        v329 = v346;
        v34 = v285;
        if (v285)
        {
          v184 = v285;
          v182 = v285;
          objc_opt_self();
          v183 = swift_dynamicCastObjCClass();
          if (v183)
          {
            v181 = (void *)v183;
          }
          else
          {
            v180 = 0;

            v181 = v180;
          }
          v179 = v181;
        }
        else
        {
          v179 = 0;
        }
        v35 = v219;
        v175 = v179;
        static Transformer<>.transformer(previousIntent:contactResolver:)(v179, v283);

        v177 = (void (*)(_UNKNOWN ***__return_ptr, uint64_t *))Transformer.transform.getter();
        v176 = v36;
        (*(void (**)(char *, uint64_t))(v258 + 8))(v260, v257);
        v328 = v185;
        v177(&v327, &v328);
        v178 = v35;
        if (v35)
        {
          v170 = v178;
          v171 = 0;
          swift_release();

          v173 = v171;
          v174 = v171;
        }
        else
        {
          v172 = v327;
          swift_release();
          v173 = v172;
          v174 = v235;
        }
        v169 = v174;
        v168 = v173;
        swift_release();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v348);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v358);
        (*(void (**)(char *, uint64_t))(v272 + 8))(v277, v271);
        v189 = v168;
        v190 = v169;
      }
      else
      {
        v167 = 0;
        type metadata accessor for UsoTask_requestMoney_common_Payment();
        if ((swift_dynamicCast() & 1) != 0)
        {
          v166 = v345;
          v332 = v345;
          v37 = v285;
          if (v285)
          {
            v165 = v285;
            v163 = v285;
            objc_opt_self();
            v164 = swift_dynamicCastObjCClass();
            if (v164)
            {
              v162 = (void *)v164;
            }
            else
            {
              v161 = 0;

              v162 = v161;
            }
            v160 = v162;
          }
          else
          {
            v160 = 0;
          }
          v38 = v219;
          v156 = v160;
          static Transformer<>.transformer(previousIntent:contactResolver:)(v160, v283);

          v158 = (void (*)(_UNKNOWN ***__return_ptr, uint64_t *))Transformer.transform.getter();
          v157 = v39;
          (*(void (**)(char *, uint64_t))(v254 + 8))(v256, v253);
          v331 = v166;
          v158(&v330, &v331);
          v159 = v38;
          if (v38)
          {
            v151 = v159;
            v152 = 0;
            swift_release();

            v154 = v152;
            v155 = v152;
          }
          else
          {
            v153 = v330;
            swift_release();
            v154 = v153;
            v155 = v234;
          }
          v150 = v155;
          v149 = v154;
          swift_release();
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v348);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v358);
          (*(void (**)(char *, uint64_t))(v272 + 8))(v277, v271);
          v189 = v149;
          v190 = v150;
        }
        else
        {
          v148 = 0;
          type metadata accessor for UsoTask_request_common_PaymentAccount();
          if ((swift_dynamicCast() & 1) != 0)
          {
            v147 = v344;
            v335 = v344;
            v40 = v285;
            if (v285)
            {
              v146 = v285;
              v144 = v285;
              objc_opt_self();
              v145 = swift_dynamicCastObjCClass();
              if (v145)
              {
                v143 = (void *)v145;
              }
              else
              {
                v142 = 0;

                v143 = v142;
              }
              v141 = v143;
            }
            else
            {
              v141 = 0;
            }
            v41 = v219;
            v137 = v141;
            static Transformer<>.transformer(previousIntent:)(v141);

            v139 = (void (*)(_UNKNOWN ***__return_ptr, uint64_t *))Transformer.transform.getter();
            v138 = v42;
            (*(void (**)(char *, uint64_t))(v250 + 8))(v252, v249);
            v334 = v147;
            v139(&v333, &v334);
            v140 = v41;
            if (v41)
            {
              v132 = v140;
              v133 = 0;
              swift_release();

              v135 = v133;
              v136 = v133;
            }
            else
            {
              v134 = v333;
              swift_release();
              v135 = v134;
              v136 = v233;
            }
            v131 = v136;
            v130 = v135;
            swift_release();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v348);
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v358);
            (*(void (**)(char *, uint64_t))(v272 + 8))(v277, v271);
            v189 = v130;
            v190 = v131;
          }
          else
          {
            v129 = 0;
            type metadata accessor for UsoTask_summarise_common_PaymentAccount();
            if ((swift_dynamicCast() & 1) != 0)
            {
              v128 = v343;
              v338 = v343;
              v43 = v285;
              if (v285)
              {
                v127 = v285;
                v125 = v285;
                objc_opt_self();
                v126 = swift_dynamicCastObjCClass();
                if (v126)
                {
                  v124 = (void *)v126;
                }
                else
                {
                  v123 = 0;

                  v124 = v123;
                }
                v122 = v124;
              }
              else
              {
                v122 = 0;
              }
              v44 = v219;
              v118 = v122;
              static Transformer<>.transformer(previousIntent:)(v122);

              v120 = (void (*)(_UNKNOWN ***__return_ptr, uint64_t *))Transformer.transform.getter();
              v119 = v45;
              (*(void (**)(char *, uint64_t))(v246 + 8))(v248, v245);
              v337 = v128;
              v120(&v336, &v337);
              v121 = v44;
              if (v44)
              {
                v113 = v121;
                v114 = 0;
                swift_release();

                v116 = v114;
                v117 = v114;
              }
              else
              {
                v115 = v336;
                swift_release();
                v116 = v115;
                v117 = v233;
              }
              v112 = v117;
              v111 = v116;
              swift_release();
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v348);
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v358);
              (*(void (**)(char *, uint64_t))(v272 + 8))(v277, v271);
              v189 = v111;
              v190 = v112;
            }
            else
            {
              v110 = 0;
              type metadata accessor for UsoTask_noVerb_common_PaymentAccount();
              if ((swift_dynamicCast() & 1) != 0)
              {
                v109 = v342;
                v341 = v342;
                v46 = v285;
                if (v285)
                {
                  v108 = v285;
                  v106 = v285;
                  objc_opt_self();
                  v107 = swift_dynamicCastObjCClass();
                  if (v107)
                  {
                    v105 = (void *)v107;
                  }
                  else
                  {
                    v104 = 0;

                    v105 = v104;
                  }
                  v103 = v105;
                }
                else
                {
                  v103 = 0;
                }
                v47 = v219;
                v99 = v103;
                static Transformer<>.transformer(previousIntent:)(v103);

                v101 = (void (*)(_UNKNOWN ***__return_ptr, uint64_t *))Transformer.transform.getter();
                v100 = v48;
                (*(void (**)(char *, uint64_t))(v242 + 8))(v244, v241);
                v340 = v109;
                v101(&v339, &v340);
                v102 = v47;
                if (v47)
                {
                  v94 = v102;
                  v95 = 0;
                  swift_release();

                  v97 = v95;
                  v98 = v95;
                }
                else
                {
                  v96 = v339;
                  swift_release();
                  v97 = v96;
                  v98 = v233;
                }
                v93 = v98;
                v92 = v97;
                swift_release();
                __swift_destroy_boxed_opaque_existential_0((uint64_t)v348);
                __swift_destroy_boxed_opaque_existential_0((uint64_t)v358);
                (*(void (**)(char *, uint64_t))(v272 + 8))(v277, v271);
                v189 = v92;
                v190 = v93;
              }
              else
              {
                __swift_destroy_boxed_opaque_existential_0((uint64_t)v348);
                __swift_destroy_boxed_opaque_existential_0((uint64_t)v358);
                (*(void (**)(char *, uint64_t))(v272 + 8))(v277, v271);
                v189 = v278;
                v190 = (_UNKNOWN **)v278;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v49 = v288;
    outlined destroy of FlowActivity?((uint64_t)v356);
    v50 = Logger.payments.unsafeMutableAddressor();
    v293(v49, v50, v292);
    (*(void (**)(char *, char *, uint64_t))(v272 + 16))(v275, v277, v271);
    v78 = (*(unsigned __int8 *)(v272 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v272 + 80);
    v82 = 7;
    v83 = swift_allocObject();
    v213((char *)(v83 + v78), v275, v271);
    v90 = Logger.logObject.getter();
    v91 = static os_log_type_t.debug.getter();
    v353[1] = (_BYTE *)12;
    UnsignedInteger<>.init<A>(_:)();
    v79 = v354;
    v80 = 17;
    v85 = swift_allocObject();
    *(_BYTE *)(v85 + 16) = 32;
    v86 = swift_allocObject();
    *(_BYTE *)(v86 + 16) = 8;
    v81 = 32;
    v51 = swift_allocObject();
    v52 = v83;
    v84 = v51;
    *(_QWORD *)(v51 + 16) = partial apply for implicit closure #2 in Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:);
    *(_QWORD *)(v51 + 24) = v52;
    v53 = swift_allocObject();
    v54 = v84;
    v88 = v53;
    *(_QWORD *)(v53 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v53 + 24) = v54;
    v87 = _allocateUninitializedArray<A>(_:)();
    v89 = v55;
    swift_retain();
    v56 = v85;
    v57 = v89;
    *v89 = partial apply for closure #1 in OSLogArguments.append(_:);
    v57[1] = v56;
    swift_retain();
    v58 = v86;
    v59 = v89;
    v89[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v59[3] = v58;
    swift_retain();
    v60 = v88;
    v61 = v89;
    v89[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v61[5] = v60;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v90, (os_log_type_t)v91))
    {
      v62 = (uint64_t)v219;
      v71 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v72 = createStorage<A>(capacity:type:)(0);
      v73 = createStorage<A>(capacity:type:)(1);
      v74 = v353;
      v353[0] = v71;
      v75 = &v352;
      v352 = v72;
      v76 = &v351;
      v351 = v73;
      serialize(_:at:)(2, v353);
      serialize(_:at:)(1, v74);
      v349 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v350 = v85;
      closure #1 in osLogInternal(_:log:type:)(&v349, (uint64_t)v74, (uint64_t)v75, (uint64_t)v76);
      v77 = v62;
      if (v62)
      {
        __break(1u);
      }
      else
      {
        v349 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v350 = v86;
        closure #1 in osLogInternal(_:log:type:)(&v349, (uint64_t)v353, (uint64_t)&v352, (uint64_t)&v351);
        v69 = 0;
        v349 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v350 = v88;
        closure #1 in osLogInternal(_:log:type:)(&v349, (uint64_t)v353, (uint64_t)&v352, (uint64_t)&v351);
        _os_log_impl(&dword_24701B000, v90, (os_log_type_t)v91, "#Parse toSiriKitIntent from USO parse: %s", v71, v79);
        destroyStorage<A>(_:count:)(v72, 0, v70);
        destroyStorage<A>(_:count:)(v73, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v71, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    v220(v288, v292);
    (*(void (**)(char *, uint64_t))(v272 + 8))(v277, v271);
    v189 = v278;
    v190 = (_UNKNOWN **)v278;
  }
  return v189;
}

uint64_t Parse.confirmationResponse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE **v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t *v110;
  uint32_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  NSObject *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE **v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t *v137;
  uint32_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  NSObject *v150;
  int v151;
  void *v152;
  unsigned int v153;
  int v154;
  Swift::String v155;
  int v156;
  uint64_t v157;
  void *v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  void (*v168)(char *, uint64_t *, uint64_t);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint8_t *v172;
  uint64_t v173;
  uint64_t v174;
  _BYTE **v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t v178;
  unint64_t v179;
  uint32_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  NSObject *v191;
  int v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  _BYTE *v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE *v210;
  uint64_t v211;
  _BYTE *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void (*v217)(char *, uint64_t);
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint8_t *v225;
  uint64_t v226;
  uint64_t v227;
  _BYTE **v228;
  uint64_t *v229;
  uint64_t *v230;
  uint64_t v231;
  void (*v232)(char *, uint64_t, uint64_t);
  unint64_t v233;
  void (*v234)(char *, uint64_t *, uint64_t);
  unint64_t v235;
  unint64_t v236;
  uint64_t *v237;
  unint64_t v238;
  uint32_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  NSObject *v251;
  int v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  id v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  id v262;
  unsigned int v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  id v267;
  uint64_t v268;
  uint64_t v269;
  uint8_t *v270;
  uint64_t v271;
  uint64_t v272;
  _BYTE **v273;
  uint64_t *v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t *v280;
  uint32_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  NSObject *v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  char *v301;
  unint64_t v302;
  char *v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  char *v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  char *v318;
  unint64_t v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  char *v325;
  unint64_t v326;
  char *v327;
  unint64_t v328;
  char *v329;
  unint64_t v330;
  char *v331;
  unint64_t v332;
  char *v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  char *v337;
  unint64_t v338;
  void (*v339)(void);
  uint64_t v340;
  uint64_t v341;
  uint64_t *v342;
  int v343;
  uint64_t (*v344)(uint64_t, uint64_t, uint64_t);
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  _BYTE *v348;
  uint64_t v349;
  uint32_t v350;
  uint64_t v351;
  uint64_t (*v352)(uint64_t, uint64_t, uint64_t);
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  _BYTE *v356[3];
  _BYTE v357[32];
  _BYTE v358[24];
  uint64_t v359;
  uint64_t (*v360)(uint64_t, uint64_t, uint64_t);
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  _BYTE *v364[2];
  uint32_t v365;
  uint64_t v366;
  uint64_t v367;
  uint32_t v368;
  uint64_t v369;
  void *v370;
  char v371;
  uint64_t v372;
  void *v373;
  _QWORD v374[2];
  _QWORD v375[4];
  uint64_t v376;
  uint64_t (*v377)(uint64_t, uint64_t, uint64_t);
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  _BYTE *v381;
  uint64_t v382;
  uint32_t v383;
  uint64_t (*v384)(uint64_t, uint64_t, uint64_t);
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  _BYTE *v388;
  uint64_t v389;
  uint32_t v390;
  uint64_t v391;
  char *v392;
  char *v393;
  char *v394;

  v295 = a1;
  v393 = 0;
  v391 = 0;
  v296 = 0;
  v394 = 0;
  v376 = 0;
  v372 = 0;
  v373 = 0;
  v371 = 0;
  v392 = 0;
  v351 = 0;
  v321 = 0;
  v297 = type metadata accessor for Parse.DirectInvocation();
  v298 = *(_QWORD *)(v297 - 8);
  v299 = *(_QWORD *)(v298 + 64);
  v300 = (v299 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v297);
  v301 = (char *)&v98 - v300;
  v302 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v98 - v300);
  v303 = (char *)&v98 - v302;
  v394 = (char *)&v98 - v302;
  v304 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v321);
  v305 = (uint64_t)&v98 - v304;
  v306 = type metadata accessor for Siri_Nlu_External_UserParse();
  v307 = *(_QWORD *)(v306 - 8);
  v308 = (*(_QWORD *)(v307 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v321);
  v309 = (char *)&v98 - v308;
  v310 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v311 = *(_QWORD *)(v310 - 8);
  v312 = (*(_QWORD *)(v311 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v321);
  v313 = (char *)&v98 - v312;
  v393 = (char *)&v98 - v312;
  v314 = type metadata accessor for USOParse();
  v315 = *(_QWORD *)(v314 - 8);
  v316 = *(_QWORD *)(v315 + 64);
  v317 = (v316 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v321);
  v318 = (char *)&v98 - v317;
  v319 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v320 = (char *)&v98 - v319;
  v392 = (char *)&v98 - v319;
  v322 = type metadata accessor for Logger();
  v323 = *(_QWORD *)(v322 - 8);
  v324 = (*(_QWORD *)(v323 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v321);
  v325 = (char *)&v98 - v324;
  v326 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v327 = (char *)&v98 - v326;
  v328 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v329 = (char *)&v98 - v328;
  v330 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v331 = (char *)&v98 - v330;
  v332 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v333 = (char *)&v98 - v332;
  v341 = type metadata accessor for Parse();
  v340 = *(_QWORD *)(v341 - 8);
  v336 = *(_QWORD *)(v340 + 64);
  v335 = (v336 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v341);
  v337 = (char *)&v98 - v335;
  v338 = (v336 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v98 - v335);
  v342 = (uint64_t *)((char *)&v98 - v338);
  v391 = v12;
  v339 = *(void (**)(void))(v13 + 16);
  v339();
  v343 = (*(uint64_t (**)(uint64_t *, uint64_t))(v340 + 88))(v342, v341);
  if (v343 == *MEMORY[0x24BE98E88])
  {
    v63 = v303;
    (*(void (**)(uint64_t *, uint64_t))(v340 + 96))(v342, v341);
    v168 = *(void (**)(char *, uint64_t *, uint64_t))(v298 + 32);
    v168(v63, v342, v297);
    v394 = v63;
    v169 = Parse.DirectInvocation.userData.getter();
    if (v169)
    {
      v167 = v169;
      v165 = v169;
      v376 = v169;
      v64 = Constants.DirectInvocationPayloadKeys.rawValue.getter(0);
      v166 = v374;
      v374[0] = v64;
      v374[1] = v65;
      MEMORY[0x2495721DC](v375);
      outlined destroy of String.UTF8View();
      if (v375[3])
      {
        if ((swift_dynamicCast() & 1) != 0)
        {
          v163 = v369;
          v164 = v370;
        }
        else
        {
          v163 = 0;
          v164 = 0;
        }
        v161 = v163;
        v162 = v164;
      }
      else
      {
        v152 = 0;
        outlined destroy of FlowActivity?((uint64_t)v375);
        v161 = (uint64_t)v152;
        v162 = v152;
      }
      v159 = v162;
      v160 = v161;
      if (v162)
      {
        v157 = v160;
        v158 = v159;
        v155._object = v159;
        v155._countAndFlagsBits = v160;
        v372 = v160;
        v373 = v159;
        swift_bridgeObjectRetain();
        LOBYTE(v66) = Constants.DirectInvocationButtonType.init(rawValue:)(v155);
        v156 = v66;
        if (v66 != 2)
        {
          v154 = v156;
          v153 = 1;
          v371 = v156 & 1;
          Constants.DirectInvocationButtonType.confirmationResponse.getter(v156 & 1, v295);
          v67 = type metadata accessor for ConfirmationResponse();
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v67 - 8) + 56))(v295, 0, v153);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(char *, uint64_t))(v298 + 8))(v303, v297);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    v68 = v327;
    v69 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v323 + 16))(v68, v69, v322);
    (*(void (**)(char *, char *, uint64_t))(v298 + 16))(v301, v303, v297);
    v134 = (*(unsigned __int8 *)(v298 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v298 + 80);
    v141 = 7;
    v142 = swift_allocObject();
    v168((char *)(v142 + v134), (uint64_t *)v301, v297);
    v150 = Logger.logObject.getter();
    v151 = static os_log_type_t.error.getter();
    v137 = &v382;
    v382 = 12;
    v135 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v136 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v138 = v383;
    v139 = 17;
    v144 = swift_allocObject();
    *(_BYTE *)(v144 + 16) = 32;
    v145 = swift_allocObject();
    *(_BYTE *)(v145 + 16) = 8;
    v140 = 32;
    v70 = swift_allocObject();
    v71 = v142;
    v143 = v70;
    *(_QWORD *)(v70 + 16) = partial apply for implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse(input:);
    *(_QWORD *)(v70 + 24) = v71;
    v72 = swift_allocObject();
    v73 = v143;
    v147 = v72;
    *(_QWORD *)(v72 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v72 + 24) = v73;
    v149 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v146 = _allocateUninitializedArray<A>(_:)();
    v148 = v74;
    swift_retain();
    v75 = v144;
    v76 = v148;
    *v148 = partial apply for closure #1 in OSLogArguments.append(_:);
    v76[1] = v75;
    swift_retain();
    v77 = v145;
    v78 = v148;
    v148[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v78[3] = v77;
    swift_retain();
    v79 = v147;
    v80 = v148;
    v148[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v80[5] = v79;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v150, (os_log_type_t)v151))
    {
      v81 = v296;
      v127 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v126 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v128 = createStorage<A>(capacity:type:)(0);
      v129 = createStorage<A>(capacity:type:)(1);
      v130 = &v381;
      v381 = v127;
      v131 = &v380;
      v380 = v128;
      v132 = &v379;
      v379 = v129;
      serialize(_:at:)(2, &v381);
      serialize(_:at:)(1, v130);
      v377 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v378 = v144;
      closure #1 in osLogInternal(_:log:type:)(&v377, (uint64_t)v130, (uint64_t)v131, (uint64_t)v132);
      v133 = v81;
      if (v81)
      {
        __break(1u);
      }
      else
      {
        v377 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v378 = v145;
        closure #1 in osLogInternal(_:log:type:)(&v377, (uint64_t)&v381, (uint64_t)&v380, (uint64_t)&v379);
        v125 = 0;
        v377 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v378 = v147;
        closure #1 in osLogInternal(_:log:type:)(&v377, (uint64_t)&v381, (uint64_t)&v380, (uint64_t)&v379);
        _os_log_impl(&dword_24701B000, v150, (os_log_type_t)v151, "#confirmationResponse couldn't get button press from Direct invocation %s", v127, v138);
        destroyStorage<A>(_:count:)(v128, 0, v126);
        destroyStorage<A>(_:count:)(v129, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v127, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v323 + 8))(v327, v322);
    v82 = type metadata accessor for ConfirmationResponse();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v295, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v298 + 8))(v303, v297);
  }
  else if (v343 == *MEMORY[0x24BE98E10])
  {
    v14 = v333;
    (*(void (**)(uint64_t *, uint64_t))(v340 + 96))(v342, v341);
    v277 = *v342;
    v351 = v277;
    v15 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v323 + 16))(v14, v15, v322);
    swift_unknownObjectRetain();
    v284 = 7;
    v285 = swift_allocObject();
    *(_QWORD *)(v285 + 16) = v277;
    v293 = Logger.logObject.getter();
    v294 = static os_log_type_t.debug.getter();
    v280 = &v349;
    v349 = 12;
    v278 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v279 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v281 = v350;
    v282 = 17;
    v287 = swift_allocObject();
    *(_BYTE *)(v287 + 16) = 32;
    v288 = swift_allocObject();
    *(_BYTE *)(v288 + 16) = 8;
    v283 = 32;
    v16 = swift_allocObject();
    v17 = v285;
    v286 = v16;
    *(_QWORD *)(v16 + 16) = partial apply for implicit closure #1 in Parse.confirmationResponse.getter;
    *(_QWORD *)(v16 + 24) = v17;
    v18 = swift_allocObject();
    v19 = v286;
    v290 = v18;
    *(_QWORD *)(v18 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v18 + 24) = v19;
    v292 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v289 = _allocateUninitializedArray<A>(_:)();
    v291 = v20;
    swift_retain();
    v21 = v287;
    v22 = v291;
    *v291 = partial apply for closure #1 in OSLogArguments.append(_:);
    v22[1] = v21;
    swift_retain();
    v23 = v288;
    v24 = v291;
    v291[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v24[3] = v23;
    swift_retain();
    v25 = v290;
    v26 = v291;
    v291[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v26[5] = v25;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v293, (os_log_type_t)v294))
    {
      v27 = v296;
      v270 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v269 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v271 = createStorage<A>(capacity:type:)(0);
      v272 = createStorage<A>(capacity:type:)(1);
      v273 = &v348;
      v348 = v270;
      v274 = &v347;
      v347 = v271;
      v275 = &v346;
      v346 = v272;
      serialize(_:at:)(2, &v348);
      serialize(_:at:)(1, v273);
      v344 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v345 = v287;
      closure #1 in osLogInternal(_:log:type:)(&v344, (uint64_t)v273, (uint64_t)v274, (uint64_t)v275);
      v276 = v27;
      if (v27)
      {
        __break(1u);
      }
      else
      {
        v344 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v345 = v288;
        closure #1 in osLogInternal(_:log:type:)(&v344, (uint64_t)&v348, (uint64_t)&v347, (uint64_t)&v346);
        v268 = 0;
        v344 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v345 = v290;
        closure #1 in osLogInternal(_:log:type:)(&v344, (uint64_t)&v348, (uint64_t)&v347, (uint64_t)&v346);
        _os_log_impl(&dword_24701B000, v293, (os_log_type_t)v294, "parse is %s", v270, v281);
        destroyStorage<A>(_:count:)(v271, 0, v269);
        destroyStorage<A>(_:count:)(v272, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v270, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v323 + 8))(v333, v322);
    swift_unknownObjectRetain();
    objc_opt_self();
    v267 = (id)swift_dynamicCastObjCClass();
    if (v267)
    {

      v266 = 1;
    }
    else
    {
      swift_unknownObjectRelease();
      v266 = 0;
    }
    if ((v266 & 1) != 0)
    {
      v263 = *MEMORY[0x24BE98400];
      v265 = type metadata accessor for ConfirmationResponse();
      v264 = *(_QWORD *)(v265 - 8);
      (*(void (**)(uint64_t, _QWORD))(v264 + 104))(v295, v263);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v264 + 56))(v295, 0, 1, v265);
      return swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRetain();
      objc_opt_self();
      v262 = (id)swift_dynamicCastObjCClass();
      if (v262)
      {

        v261 = 1;
      }
      else
      {
        swift_unknownObjectRelease();
        v261 = 0;
      }
      if ((v261 & 1) != 0)
      {
        v258 = *MEMORY[0x24BE983F8];
        v260 = type metadata accessor for ConfirmationResponse();
        v259 = *(_QWORD *)(v260 - 8);
        (*(void (**)(uint64_t, _QWORD))(v259 + 104))(v295, v258);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v259 + 56))(v295, 0, 1, v260);
        return swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRetain();
        objc_opt_self();
        v257 = (id)swift_dynamicCastObjCClass();
        if (v257)
        {

          v256 = 1;
        }
        else
        {
          swift_unknownObjectRelease();
          v256 = 0;
        }
        if ((v256 & 1) != 0)
        {
          v253 = *MEMORY[0x24BE983F8];
          v255 = type metadata accessor for ConfirmationResponse();
          v254 = *(_QWORD *)(v255 - 8);
          (*(void (**)(uint64_t, _QWORD))(v254 + 104))(v295, v253);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v254 + 56))(v295, 0, 1, v255);
        }
        else
        {
          v29 = type metadata accessor for ConfirmationResponse();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v295, 1);
        }
        return swift_unknownObjectRelease();
      }
    }
  }
  else if (v343 == *MEMORY[0x24BE98E98])
  {
    v30 = v331;
    (*(void (**)(uint64_t *, uint64_t))(v340 + 96))(v342, v341);
    v234 = *(void (**)(char *, uint64_t *, uint64_t))(v315 + 32);
    v234(v320, v342, v314);
    v392 = v320;
    v31 = Logger.payments.unsafeMutableAddressor();
    v232 = *(void (**)(char *, uint64_t, uint64_t))(v323 + 16);
    v232(v30, v31, v322);
    (*(void (**)(char *, char *, uint64_t))(v315 + 16))(v318, v320, v314);
    v233 = (*(unsigned __int8 *)(v315 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v315 + 80);
    v242 = 7;
    v243 = swift_allocObject();
    v234((char *)(v243 + v233), (uint64_t *)v318, v314);
    v251 = Logger.logObject.getter();
    v252 = static os_log_type_t.debug.getter();
    v237 = &v367;
    v367 = 12;
    v235 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v236 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v238 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v239 = v368;
    v240 = 17;
    v245 = swift_allocObject();
    *(_BYTE *)(v245 + 16) = 32;
    v246 = swift_allocObject();
    *(_BYTE *)(v246 + 16) = 8;
    v241 = 32;
    v32 = swift_allocObject();
    v33 = v243;
    v244 = v32;
    *(_QWORD *)(v32 + 16) = partial apply for implicit closure #2 in Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:);
    *(_QWORD *)(v32 + 24) = v33;
    v34 = swift_allocObject();
    v35 = v244;
    v248 = v34;
    *(_QWORD *)(v34 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v34 + 24) = v35;
    v250 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v247 = _allocateUninitializedArray<A>(_:)();
    v249 = v36;
    swift_retain();
    v37 = v245;
    v38 = v249;
    *v249 = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[1] = v37;
    swift_retain();
    v39 = v246;
    v40 = v249;
    v249[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v40[3] = v39;
    swift_retain();
    v41 = v248;
    v42 = v249;
    v249[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v42[5] = v41;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v251, (os_log_type_t)v252))
    {
      v43 = v296;
      v225 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v224 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v226 = createStorage<A>(capacity:type:)(0);
      v227 = createStorage<A>(capacity:type:)(1);
      v228 = v356;
      v356[0] = v225;
      v229 = &v355;
      v355 = v226;
      v230 = &v354;
      v354 = v227;
      serialize(_:at:)(2, v356);
      serialize(_:at:)(1, v228);
      v352 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v353 = v245;
      closure #1 in osLogInternal(_:log:type:)(&v352, (uint64_t)v228, (uint64_t)v229, (uint64_t)v230);
      v231 = v43;
      if (v43)
      {
        __break(1u);
      }
      else
      {
        v352 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v353 = v246;
        closure #1 in osLogInternal(_:log:type:)(&v352, (uint64_t)v356, (uint64_t)&v355, (uint64_t)&v354);
        v222 = 0;
        v352 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v353 = v248;
        closure #1 in osLogInternal(_:log:type:)(&v352, (uint64_t)v356, (uint64_t)&v355, (uint64_t)&v354);
        v221 = 0;
        _os_log_impl(&dword_24701B000, v251, (os_log_type_t)v252, "parse is %s", v225, v239);
        destroyStorage<A>(_:count:)(v226, 0, v224);
        destroyStorage<A>(_:count:)(v227, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v225, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        v223 = v221;
      }
    }
    else
    {
      v44 = v296;
      swift_release();
      swift_release();
      swift_release();
      v223 = v44;
    }
    v216 = v223;

    v217 = *(void (**)(char *, uint64_t))(v323 + 8);
    v217(v331, v322);
    v45 = USOParse.userParse.getter();
    v218 = MEMORY[0x249571348](v45);
    (*(void (**)(char *, uint64_t))(v307 + 8))(v309, v306);
    swift_bridgeObjectRetain();
    v220 = &v366;
    v366 = v218;
    v219 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
    lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [SFCardSection]();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v311 + 48))(v305, 1, v310) == 1)
    {
      v48 = v329;
      outlined destroy of Siri_Nlu_External_UserDialogAct?(v305);
      swift_bridgeObjectRelease();
      v49 = Logger.payments.unsafeMutableAddressor();
      v232(v48, v49, v322);
      ((void (*)(char *, uint64_t, uint64_t))v339)(v337, v334, v341);
      v179 = (*(unsigned __int8 *)(v340 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v340 + 80);
      v183 = 7;
      v184 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v340 + 32))(v184 + v179, v337, v341);
      v191 = Logger.logObject.getter();
      v192 = static os_log_type_t.error.getter();
      v364[1] = (_BYTE *)12;
      UnsignedInteger<>.init<A>(_:)();
      v180 = v365;
      v181 = 17;
      v186 = swift_allocObject();
      *(_BYTE *)(v186 + 16) = 32;
      v187 = swift_allocObject();
      *(_BYTE *)(v187 + 16) = 8;
      v182 = 32;
      v50 = swift_allocObject();
      v51 = v184;
      v185 = v50;
      *(_QWORD *)(v50 + 16) = partial apply for implicit closure #3 in FlowFactory.findFlow(for:);
      *(_QWORD *)(v50 + 24) = v51;
      v52 = swift_allocObject();
      v53 = v185;
      v189 = v52;
      *(_QWORD *)(v52 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v52 + 24) = v53;
      v188 = _allocateUninitializedArray<A>(_:)();
      v190 = v54;
      swift_retain();
      v55 = v186;
      v56 = v190;
      *v190 = partial apply for closure #1 in OSLogArguments.append(_:);
      v56[1] = v55;
      swift_retain();
      v57 = v187;
      v58 = v190;
      v190[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v58[3] = v57;
      swift_retain();
      v59 = v189;
      v60 = v190;
      v190[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v60[5] = v59;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v191, (os_log_type_t)v192))
      {
        v61 = v216;
        v172 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v171 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v173 = createStorage<A>(capacity:type:)(0);
        v174 = createStorage<A>(capacity:type:)(1);
        v175 = v364;
        v364[0] = v172;
        v176 = &v363;
        v363 = v173;
        v177 = &v362;
        v362 = v174;
        serialize(_:at:)(2, v364);
        serialize(_:at:)(1, v175);
        v360 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v361 = v186;
        closure #1 in osLogInternal(_:log:type:)(&v360, (uint64_t)v175, (uint64_t)v176, (uint64_t)v177);
        v178 = v61;
        if (v61)
        {
          __break(1u);
        }
        else
        {
          v360 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v361 = v187;
          closure #1 in osLogInternal(_:log:type:)(&v360, (uint64_t)v364, (uint64_t)&v363, (uint64_t)&v362);
          v170 = 0;
          v360 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v361 = v189;
          closure #1 in osLogInternal(_:log:type:)(&v360, (uint64_t)v364, (uint64_t)&v363, (uint64_t)&v362);
          _os_log_impl(&dword_24701B000, v191, (os_log_type_t)v192, "#confirmationResponse Couldn't find user dialog act in parse: %s", v172, v180);
          destroyStorage<A>(_:count:)(v173, 0, v171);
          destroyStorage<A>(_:count:)(v174, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v172, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      v217(v329, v322);
      v62 = type metadata accessor for ConfirmationResponse();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v295, 1);
      return (*(uint64_t (**)(char *, uint64_t))(v315 + 8))(v320, v314);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v311 + 32))(v313, v305, v310);
      swift_bridgeObjectRelease();
      if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) != 0)
      {
        v215 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
        if (v215)
        {
          v214 = v215;
          v213 = v215;
          UsoTask.eraseToAny.getter();
          swift_release();
        }
        else
        {
          memset(v358, 0, sizeof(v358));
          v359 = 0;
        }
        if (v359)
        {
          v212 = v357;
          outlined init with copy of Any?((uint64_t)v358, (uint64_t)v357);
          v211 = 0;
          type metadata accessor for UsoTask_pay_common_Payment();
          if ((swift_dynamicCast() & 1) != 0)
          {
            v210 = v356[2];
            v207 = *MEMORY[0x24BE98400];
            v209 = type metadata accessor for ConfirmationResponse();
            v208 = *(_QWORD *)(v209 - 8);
            (*(void (**)(uint64_t, _QWORD))(v208 + 104))(v295, v207);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v208 + 56))(v295, 0, 1, v209);
            swift_release();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v357);
            outlined destroy of FlowActivity?((uint64_t)v358);
            (*(void (**)(char *, uint64_t))(v311 + 8))(v313, v310);
            return (*(uint64_t (**)(char *, uint64_t))(v315 + 8))(v320, v314);
          }
          v206 = 0;
          type metadata accessor for UsoTask_requestMoney_common_Payment();
          if ((swift_dynamicCast() & 1) != 0)
          {
            v205 = v356[1];
            v202 = *MEMORY[0x24BE98400];
            v204 = type metadata accessor for ConfirmationResponse();
            v203 = *(_QWORD *)(v204 - 8);
            (*(void (**)(uint64_t, _QWORD))(v203 + 104))(v295, v202);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v203 + 56))(v295, 0, 1, v204);
            swift_release();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v357);
            outlined destroy of FlowActivity?((uint64_t)v358);
            (*(void (**)(char *, uint64_t))(v311 + 8))(v313, v310);
            return (*(uint64_t (**)(char *, uint64_t))(v315 + 8))(v320, v314);
          }
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v357);
        }
        v46 = type metadata accessor for ConfirmationResponse();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v295, 1);
        outlined destroy of FlowActivity?((uint64_t)v358);
        (*(void (**)(char *, uint64_t))(v311 + 8))(v313, v310);
        return (*(uint64_t (**)(char *, uint64_t))(v315 + 8))(v320, v314);
      }
      else if ((Siri_Nlu_External_UserDialogAct.hasAccepted.getter() & 1) != 0)
      {
        v199 = *MEMORY[0x24BE98400];
        v201 = type metadata accessor for ConfirmationResponse();
        v200 = *(_QWORD *)(v201 - 8);
        (*(void (**)(uint64_t, _QWORD))(v200 + 104))(v295, v199);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v200 + 56))(v295, 0, 1, v201);
        (*(void (**)(char *, uint64_t))(v311 + 8))(v313, v310);
        return (*(uint64_t (**)(char *, uint64_t))(v315 + 8))(v320, v314);
      }
      else if ((Siri_Nlu_External_UserDialogAct.hasRejected.getter() & 1) != 0)
      {
        v196 = *MEMORY[0x24BE983F8];
        v198 = type metadata accessor for ConfirmationResponse();
        v197 = *(_QWORD *)(v198 - 8);
        (*(void (**)(uint64_t, _QWORD))(v197 + 104))(v295, v196);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v197 + 56))(v295, 0, 1, v198);
        (*(void (**)(char *, uint64_t))(v311 + 8))(v313, v310);
        return (*(uint64_t (**)(char *, uint64_t))(v315 + 8))(v320, v314);
      }
      else
      {
        if ((Siri_Nlu_External_UserDialogAct.hasCancelled.getter() & 1) != 0)
        {
          v193 = *MEMORY[0x24BE983F8];
          v195 = type metadata accessor for ConfirmationResponse();
          v194 = *(_QWORD *)(v195 - 8);
          (*(void (**)(uint64_t, _QWORD))(v194 + 104))(v295, v193);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v194 + 56))(v295, 0, 1, v195);
        }
        else
        {
          v47 = type metadata accessor for ConfirmationResponse();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v295, 1);
        }
        (*(void (**)(char *, uint64_t))(v311 + 8))(v313, v310);
        return (*(uint64_t (**)(char *, uint64_t))(v315 + 8))(v320, v314);
      }
    }
  }
  else
  {
    v83 = v325;
    v84 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v323 + 16))(v83, v84, v322);
    ((void (*)(char *, uint64_t, uint64_t))v339)(v337, v334, v341);
    v107 = (*(unsigned __int8 *)(v340 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v340 + 80);
    v114 = 7;
    v115 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v340 + 32))(v115 + v107, v337, v341);
    v123 = Logger.logObject.getter();
    v124 = static os_log_type_t.error.getter();
    v110 = &v389;
    v389 = 12;
    v108 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v109 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v111 = v390;
    v112 = 17;
    v117 = swift_allocObject();
    *(_BYTE *)(v117 + 16) = 32;
    v118 = swift_allocObject();
    *(_BYTE *)(v118 + 16) = 8;
    v113 = 32;
    v85 = swift_allocObject();
    v86 = v115;
    v116 = v85;
    *(_QWORD *)(v85 + 16) = partial apply for implicit closure #3 in FlowFactory.findFlow(for:);
    *(_QWORD *)(v85 + 24) = v86;
    v87 = swift_allocObject();
    v88 = v116;
    v120 = v87;
    *(_QWORD *)(v87 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v87 + 24) = v88;
    v122 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v119 = _allocateUninitializedArray<A>(_:)();
    v121 = v89;
    swift_retain();
    v90 = v117;
    v91 = v121;
    *v121 = partial apply for closure #1 in OSLogArguments.append(_:);
    v91[1] = v90;
    swift_retain();
    v92 = v118;
    v93 = v121;
    v121[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v93[3] = v92;
    swift_retain();
    v94 = v120;
    v95 = v121;
    v121[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v95[5] = v94;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v123, (os_log_type_t)v124))
    {
      v96 = v296;
      v100 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v99 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v101 = createStorage<A>(capacity:type:)(0);
      v102 = createStorage<A>(capacity:type:)(1);
      v103 = &v388;
      v388 = v100;
      v104 = &v387;
      v387 = v101;
      v105 = &v386;
      v386 = v102;
      serialize(_:at:)(2, &v388);
      serialize(_:at:)(1, v103);
      v384 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v385 = v117;
      closure #1 in osLogInternal(_:log:type:)(&v384, (uint64_t)v103, (uint64_t)v104, (uint64_t)v105);
      v106 = v96;
      if (v96)
      {
        __break(1u);
      }
      else
      {
        v384 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v385 = v118;
        closure #1 in osLogInternal(_:log:type:)(&v384, (uint64_t)&v388, (uint64_t)&v387, (uint64_t)&v386);
        v98 = 0;
        v384 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v385 = v120;
        closure #1 in osLogInternal(_:log:type:)(&v384, (uint64_t)&v388, (uint64_t)&v387, (uint64_t)&v386);
        _os_log_impl(&dword_24701B000, v123, (os_log_type_t)v124, "#confirmationResponse Unexpected parse type: %s", v100, v111);
        destroyStorage<A>(_:count:)(v101, 0, v99);
        destroyStorage<A>(_:count:)(v102, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v100, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v323 + 8))(v325, v322);
    v97 = type metadata accessor for ConfirmationResponse();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v295, 1);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v340 + 8))(v342, v341);
  }
}

Swift::String_optional __swiftcall Parse.toAppId()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  Swift::String_optional result;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t *v74;
  uint64_t *v75;
  _BYTE **v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint32_t v84;
  int v85;
  NSObject *v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE **v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  uint32_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  NSObject *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint8_t *v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE **v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint32_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  NSObject *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint8_t *v155;
  uint64_t v156;
  uint64_t v157;
  _BYTE **v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t *v166;
  uint32_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  NSObject *v179;
  int v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char *v189;
  unint64_t v190;
  char *v191;
  unint64_t v192;
  char *v193;
  unint64_t v194;
  char *v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  char *v210;
  unint64_t v211;
  void (*v212)(void);
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t (*v216)(uint64_t, uint64_t, uint64_t);
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _BYTE *v220;
  uint64_t v221;
  uint32_t v222;
  uint64_t v223;
  void *v224;
  uint64_t (*v225)(uint64_t, uint64_t, uint64_t);
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _BYTE *v229;
  uint64_t v230;
  uint32_t v231;
  uint64_t v232;
  uint64_t (*v233)(uint64_t, uint64_t, uint64_t);
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _BYTE *v237[2];
  uint64_t v238;
  uint64_t v239;
  _BYTE *v240;
  uint64_t v241;
  uint32_t v242;
  uint64_t v243;
  uint32_t v244;
  uint64_t v245;
  char *v246;
  char *v247;

  v247 = 0;
  v245 = 0;
  v185 = 0;
  v246 = 0;
  v232 = 0;
  v223 = 0;
  v224 = 0;
  v202 = 0;
  v186 = type metadata accessor for Logger();
  v187 = *(_QWORD *)(v186 - 8);
  v188 = (*(_QWORD *)(v187 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v186);
  v189 = (char *)&v65 - v188;
  v190 = (v0 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v65 - v188);
  v191 = (char *)&v65 - v190;
  v192 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v65 - v190);
  v193 = (char *)&v65 - v192;
  v194 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v65 - v192);
  v195 = (char *)&v65 - v194;
  v196 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v202);
  v197 = (uint64_t)&v65 - v196;
  v198 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v199 = *(_QWORD *)(v198 - 8);
  v200 = (*(_QWORD *)(v199 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v202);
  v201 = (char *)&v65 - v200;
  v247 = (char *)&v65 - v200;
  v203 = type metadata accessor for USOParse();
  v204 = *(_QWORD *)(v203 - 8);
  v205 = (*(_QWORD *)(v204 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v202);
  v206 = (uint64_t)&v65 - v205;
  v246 = (char *)&v65 - v205;
  v214 = type metadata accessor for Parse();
  v213 = *(_QWORD *)(v214 - 8);
  v209 = *(_QWORD *)(v213 + 64);
  v208 = (v209 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v214);
  v210 = (char *)&v65 - v208;
  v211 = (v209 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v65 - v208);
  v215 = (char *)&v65 - v211;
  v245 = v3;
  v212 = *(void (**)(void))(v4 + 16);
  v212();
  if ((*(unsigned int (**)(char *, uint64_t))(v213 + 88))(v215, v214) == *MEMORY[0x24BE98E98])
  {
    v5 = v206;
    (*(void (**)(char *, uint64_t))(v213 + 96))(v215, v214);
    (*(void (**)(uint64_t, char *, uint64_t))(v204 + 32))(v5, v215, v203);
    v246 = (char *)v5;
    USOParse.userDialogAct.getter(v197);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v199 + 48))(v197, 1, v198) == 1)
    {
      outlined destroy of Siri_Nlu_External_UserDialogAct?(v197);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v199 + 32))(v201, v197, v198);
      v183 = Siri_Nlu_External_UserDialogAct.appId.getter();
      v184 = v6;
      if (v6)
      {
        v181 = v183;
        v182 = v184;
        v7 = v195;
        v163 = v184;
        v162 = v183;
        v223 = v183;
        v224 = v184;
        v8 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v187 + 16))(v7, v8, v186);
        swift_bridgeObjectRetain();
        v169 = 32;
        v170 = 7;
        v9 = swift_allocObject();
        v10 = v163;
        v171 = v9;
        *(_QWORD *)(v9 + 16) = v162;
        *(_QWORD *)(v9 + 24) = v10;
        v179 = Logger.logObject.getter();
        v180 = static os_log_type_t.debug.getter();
        v166 = &v221;
        v221 = 12;
        v164 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v165 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v167 = v222;
        v168 = 17;
        v173 = swift_allocObject();
        *(_BYTE *)(v173 + 16) = 32;
        v174 = swift_allocObject();
        *(_BYTE *)(v174 + 16) = 8;
        v11 = swift_allocObject();
        v12 = v171;
        v172 = v11;
        *(_QWORD *)(v11 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
        *(_QWORD *)(v11 + 24) = v12;
        v13 = swift_allocObject();
        v14 = v172;
        v176 = v13;
        *(_QWORD *)(v13 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v13 + 24) = v14;
        v178 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        v175 = _allocateUninitializedArray<A>(_:)();
        v177 = v15;
        swift_retain();
        v16 = v173;
        v17 = v177;
        *v177 = partial apply for closure #1 in OSLogArguments.append(_:);
        v17[1] = v16;
        swift_retain();
        v18 = v174;
        v19 = v177;
        v177[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v19[3] = v18;
        swift_retain();
        v20 = v176;
        v21 = v177;
        v177[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v21[5] = v20;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v179, (os_log_type_t)v180))
        {
          v22 = v185;
          v155 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v154 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v156 = createStorage<A>(capacity:type:)(0);
          v157 = createStorage<A>(capacity:type:)(1);
          v158 = &v220;
          v220 = v155;
          v159 = &v219;
          v219 = v156;
          v160 = &v218;
          v218 = v157;
          serialize(_:at:)(2, &v220);
          serialize(_:at:)(1, v158);
          v216 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v217 = v173;
          closure #1 in osLogInternal(_:log:type:)(&v216, (uint64_t)v158, (uint64_t)v159, (uint64_t)v160);
          v161 = v22;
          if (v22)
          {
            __break(1u);
          }
          else
          {
            v216 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v217 = v174;
            closure #1 in osLogInternal(_:log:type:)(&v216, (uint64_t)&v220, (uint64_t)&v219, (uint64_t)&v218);
            v153 = 0;
            v216 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v217 = v176;
            closure #1 in osLogInternal(_:log:type:)(&v216, (uint64_t)&v220, (uint64_t)&v219, (uint64_t)&v218);
            _os_log_impl(&dword_24701B000, v179, (os_log_type_t)v180, "#Parse toAppId() found app id in user dialog act: %s", v155, v167);
            destroyStorage<A>(_:count:)(v156, 0, v154);
            destroyStorage<A>(_:count:)(v157, 1, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x2495725CC](v155, MEMORY[0x24BEE4260]);
            swift_release();
            swift_release();
            swift_release();
          }
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }

        (*(void (**)(char *, uint64_t))(v187 + 8))(v195, v186);
        (*(void (**)(char *, uint64_t))(v199 + 8))(v201, v198);
        (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v206, v203);
        v151 = v162;
        v152 = v163;
        goto LABEL_42;
      }
      (*(void (**)(char *, uint64_t))(v199 + 8))(v201, v198);
    }
    type metadata accessor for ReferenceResolutionClient();
    v149 = ReferenceResolutionClient.__allocating_init()();
    v150 = ReferenceResolutionClient.resolveAppDisambiguationReference(from:)(v206);
    swift_release();
    if (v150)
    {
      v148 = v150;
      v23 = v193;
      v136 = v150;
      v232 = v150;
      v24 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v187 + 16))(v23, v24, v186);
      swift_retain();
      v146 = Logger.logObject.getter();
      v147 = static os_log_type_t.debug.getter();
      v133 = &v230;
      v230 = 12;
      v131 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v132 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v134 = v231;
      v135 = 17;
      v138 = 7;
      v140 = swift_allocObject();
      *(_BYTE *)(v140 + 16) = 32;
      v141 = swift_allocObject();
      *(_BYTE *)(v141 + 16) = 8;
      v137 = 32;
      v25 = swift_allocObject();
      v26 = v136;
      v139 = v25;
      *(_QWORD *)(v25 + 16) = partial apply for implicit closure #13 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
      *(_QWORD *)(v25 + 24) = v26;
      v27 = swift_allocObject();
      v28 = v139;
      v143 = v27;
      *(_QWORD *)(v27 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v27 + 24) = v28;
      v145 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v142 = _allocateUninitializedArray<A>(_:)();
      v144 = v29;
      swift_retain();
      v30 = v140;
      v31 = v144;
      *v144 = partial apply for closure #1 in OSLogArguments.append(_:);
      v31[1] = v30;
      swift_retain();
      v32 = v141;
      v33 = v144;
      v144[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v33[3] = v32;
      swift_retain();
      v34 = v143;
      v35 = v144;
      v144[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v35[5] = v34;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v146, (os_log_type_t)v147))
      {
        v36 = v185;
        v124 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v123 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v125 = createStorage<A>(capacity:type:)(0);
        v126 = createStorage<A>(capacity:type:)(1);
        v127 = &v229;
        v229 = v124;
        v128 = &v228;
        v228 = v125;
        v129 = &v227;
        v227 = v126;
        serialize(_:at:)(2, &v229);
        serialize(_:at:)(1, v127);
        v225 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v226 = v140;
        closure #1 in osLogInternal(_:log:type:)(&v225, (uint64_t)v127, (uint64_t)v128, (uint64_t)v129);
        v130 = v36;
        if (v36)
        {
          __break(1u);
        }
        else
        {
          v225 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v226 = v141;
          closure #1 in osLogInternal(_:log:type:)(&v225, (uint64_t)&v229, (uint64_t)&v228, (uint64_t)&v227);
          v122 = 0;
          v225 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v226 = v143;
          closure #1 in osLogInternal(_:log:type:)(&v225, (uint64_t)&v229, (uint64_t)&v228, (uint64_t)&v227);
          _os_log_impl(&dword_24701B000, v146, (os_log_type_t)v147, "#Parse toAppId() found app id in ordinal selection: %s", v124, v134);
          destroyStorage<A>(_:count:)(v125, 0, v123);
          destroyStorage<A>(_:count:)(v126, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v124, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v187 + 8))(v193, v186);
      v120 = UsoEntity_common_App.appIdentifier.getter();
      v121 = v37;
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v206, v203);
      v151 = v120;
      v152 = v121;
      goto LABEL_42;
    }
    (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v206, v203);
    v119 = v185;
  }
  else
  {
    v38 = v191;
    v39 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v187 + 16))(v38, v39, v186);
    ((void (*)(char *, uint64_t, uint64_t))v212)(v210, v207, v214);
    v100 = (*(unsigned __int8 *)(v213 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80);
    v108 = 7;
    v106 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v213 + 32))(v106 + v100, v210, v214);
    v117 = Logger.logObject.getter();
    v118 = static os_log_type_t.debug.getter();
    v103 = &v243;
    v243 = 12;
    v101 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v102 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v104 = v244;
    v105 = 17;
    v111 = swift_allocObject();
    *(_BYTE *)(v111 + 16) = 32;
    v112 = swift_allocObject();
    *(_BYTE *)(v112 + 16) = 8;
    v107 = 32;
    v40 = swift_allocObject();
    v41 = v106;
    v109 = v40;
    *(_QWORD *)(v40 + 16) = partial apply for implicit closure #3 in Parse.toAppId();
    *(_QWORD *)(v40 + 24) = v41;
    v42 = swift_allocObject();
    v43 = v109;
    v110 = v42;
    *(_QWORD *)(v42 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v42 + 24) = v43;
    v44 = swift_allocObject();
    v45 = v110;
    v114 = v44;
    *(_QWORD *)(v44 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v44 + 24) = v45;
    v116 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v113 = _allocateUninitializedArray<A>(_:)();
    v115 = v46;
    swift_retain();
    v47 = v111;
    v48 = v115;
    *v115 = partial apply for closure #1 in OSLogArguments.append(_:);
    v48[1] = v47;
    swift_retain();
    v49 = v112;
    v50 = v115;
    v115[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v50[3] = v49;
    swift_retain();
    v51 = v114;
    v52 = v115;
    v115[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v52[5] = v51;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v117, (os_log_type_t)v118))
    {
      v53 = v185;
      v93 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v92 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v94 = createStorage<A>(capacity:type:)(0);
      v95 = createStorage<A>(capacity:type:)(1);
      v96 = v237;
      v237[0] = v93;
      v97 = &v236;
      v236 = v94;
      v98 = &v235;
      v235 = v95;
      serialize(_:at:)(2, v237);
      serialize(_:at:)(1, v96);
      v233 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v234 = v111;
      closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)v96, (uint64_t)v97, (uint64_t)v98);
      v99 = v53;
      if (v53)
      {
        __break(1u);
      }
      else
      {
        v233 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v234 = v112;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)v237, (uint64_t)&v236, (uint64_t)&v235);
        v90 = 0;
        v55 = v90;
        v233 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v234 = v114;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)v237, (uint64_t)&v236, (uint64_t)&v235);
        v89 = v55;
        _os_log_impl(&dword_24701B000, v117, (os_log_type_t)v118, "#Parse toAppId() unexpected parse type %s", v93, v104);
        destroyStorage<A>(_:count:)(v94, 0, v92);
        destroyStorage<A>(_:count:)(v95, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v93, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        v91 = v89;
      }
    }
    else
    {
      v54 = v185;
      swift_release();
      swift_release();
      swift_release();
      v91 = v54;
    }
    v88 = v91;

    (*(void (**)(char *, uint64_t))(v187 + 8))(v191, v186);
    (*(void (**)(char *, uint64_t))(v213 + 8))(v215, v214);
    v119 = v88;
  }
  v56 = v189;
  v80 = v119;
  v57 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v187 + 16))(v56, v57, v186);
  v86 = Logger.logObject.getter();
  v85 = static os_log_type_t.debug.getter();
  v83 = &v241;
  v241 = 2;
  v81 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v82 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v84 = v242;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v87 = (_BYTE *)_allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v86, (os_log_type_t)v85))
  {
    v58 = v80;
    v70 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v69 = 0;
    v71 = createStorage<A>(capacity:type:)(0);
    v72 = createStorage<A>(capacity:type:)(v69);
    v76 = &v240;
    v240 = v70;
    v77 = &v239;
    v239 = v71;
    v74 = &v238;
    v238 = v72;
    v73 = 0;
    serialize(_:at:)(0, &v240);
    serialize(_:at:)(v73, v76);
    v237[1] = v87;
    v75 = &v65;
    MEMORY[0x24BDAC7A8](&v65);
    v59 = v77;
    v60 = &v65 - 6;
    v78 = &v65 - 6;
    v60[2] = (uint64_t)v76;
    v60[3] = (uint64_t)v59;
    v60[4] = v61;
    v79 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v58)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, v86, (os_log_type_t)v85, "#Parse toAppId() could not resolve an app ID, returning nil", v70, v84);
      v67 = 0;
      destroyStorage<A>(_:count:)(v71, 0, v68);
      destroyStorage<A>(_:count:)(v72, v67, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v70, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v66 = 0;

  (*(void (**)(char *, uint64_t))(v187 + 8))(v189, v186);
  v151 = (uint64_t)v66;
  v152 = v66;
LABEL_42:
  v62 = v151;
  v63 = v152;
  result.value._object = v63;
  result.value._countAndFlagsBits = v62;
  return result;
}

uint64_t USOParse.isRequestToSummariseAppleCardInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;

  v55 = 0;
  v51 = 0;
  v49 = 0;
  v32 = 0;
  v41 = 0;
  v36 = type metadata accessor for Siri_Nlu_External_UserParse();
  v35 = *(_QWORD *)(v36 - 8);
  v33 = (*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v36);
  v37 = (char *)&v7 - v33;
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v34 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v42 = (uint64_t)&v7 - v34;
  v55 = v0;
  v2 = USOParse.userParse.getter();
  v40 = MEMORY[0x249571348](v2);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v36);
  swift_bridgeObjectRetain();
  v39 = &v52;
  v52 = v40;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
  lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  v43 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v44 = *(_QWORD *)(v43 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v44 + 48))(v42, 1) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v42);
  }
  else
  {
    v31 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);
    if (v31)
    {
      v30 = v31;
      v29 = v31;
      UsoTask.eraseToAny.getter();
      swift_release();
      goto LABEL_6;
    }
  }
  memset(v53, 0, sizeof(v53));
  v54 = 0;
LABEL_6:
  if (v54)
  {
    type metadata accessor for UsoTask_summarise_common_PaymentAccount();
    if ((swift_dynamicCast() & 1) != 0)
      v28 = v45;
    else
      v28 = 0;
    v27 = v28;
  }
  else
  {
    v8 = 0;
    outlined destroy of FlowActivity?((uint64_t)v53);
    v27 = v8;
  }
  v26 = v27;
  if (!v27)
  {
    v10 = 0;
    return v10 & 1;
  }
  v25 = v26;
  v23 = v26;
  v51 = v26;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v24 = v50;
  v3 = swift_release();
  if (v24 && (v22 = v24, v20 = v24, v21 = MEMORY[0x2495718A0](v3), swift_release(), v21))
  {
    v19 = v21;
    v16 = v21;
    UsoIdentifierNamespace.rawValue.getter(6);
    v15 = v4;
    v17 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
    swift_bridgeObjectRelease();
    swift_release();
    v18 = v17;
  }
  else
  {
    v18 = 0;
  }
  v14 = v18;
  v49 = v18;
  swift_bridgeObjectRetain();
  v47 = v14;
  if (v14)
  {
    v48 = v47;
  }
  else
  {
    v13 = 0;
    type metadata accessor for UsoIdentifier();
    v48 = _allocateUninitializedArray<A>(_:)();
    outlined destroy of [SFCardSection]();
  }
  v5 = v32;
  v46 = v48;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoIdentifier]);
  lazy protocol witness table accessor for type [UsoIdentifier] and conformance [A]();
  result = Sequence.contains(where:)();
  v12 = result;
  if (!v5)
  {
    v9 = v12;
    outlined destroy of [SFCardSection]();
    swift_bridgeObjectRelease();
    swift_release();
    v10 = v9;
    return v10 & 1;
  }
  __break(1u);
  return result;
}

uint64_t USOParse.isRequestToCreateAppleCardAccount.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;

  v55 = 0;
  v51 = 0;
  v49 = 0;
  v32 = 0;
  v41 = 0;
  v36 = type metadata accessor for Siri_Nlu_External_UserParse();
  v35 = *(_QWORD *)(v36 - 8);
  v33 = (*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v36);
  v37 = (char *)&v7 - v33;
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v34 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v42 = (uint64_t)&v7 - v34;
  v55 = v0;
  v2 = USOParse.userParse.getter();
  v40 = MEMORY[0x249571348](v2);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v36);
  swift_bridgeObjectRetain();
  v39 = &v52;
  v52 = v40;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
  lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  v43 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v44 = *(_QWORD *)(v43 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v44 + 48))(v42, 1) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v42);
  }
  else
  {
    v31 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);
    if (v31)
    {
      v30 = v31;
      v29 = v31;
      UsoTask.eraseToAny.getter();
      swift_release();
      goto LABEL_6;
    }
  }
  memset(v53, 0, sizeof(v53));
  v54 = 0;
LABEL_6:
  if (v54)
  {
    type metadata accessor for UsoTask_create_common_PaymentAccount();
    if ((swift_dynamicCast() & 1) != 0)
      v28 = v45;
    else
      v28 = 0;
    v27 = v28;
  }
  else
  {
    v8 = 0;
    outlined destroy of FlowActivity?((uint64_t)v53);
    v27 = v8;
  }
  v26 = v27;
  if (!v27)
  {
    v10 = 0;
    return v10 & 1;
  }
  v25 = v26;
  v23 = v26;
  v51 = v26;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v24 = v50;
  v3 = swift_release();
  if (v24 && (v22 = v24, v20 = v24, v21 = MEMORY[0x2495718A0](v3), swift_release(), v21))
  {
    v19 = v21;
    v16 = v21;
    UsoIdentifierNamespace.rawValue.getter(6);
    v15 = v4;
    v17 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
    swift_bridgeObjectRelease();
    swift_release();
    v18 = v17;
  }
  else
  {
    v18 = 0;
  }
  v14 = v18;
  v49 = v18;
  swift_bridgeObjectRetain();
  v47 = v14;
  if (v14)
  {
    v48 = v47;
  }
  else
  {
    v13 = 0;
    type metadata accessor for UsoIdentifier();
    v48 = _allocateUninitializedArray<A>(_:)();
    outlined destroy of [SFCardSection]();
  }
  v5 = v32;
  v46 = v48;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoIdentifier]);
  lazy protocol witness table accessor for type [UsoIdentifier] and conformance [A]();
  result = Sequence.contains(where:)();
  v12 = result;
  if (!v5)
  {
    v9 = v12;
    outlined destroy of [SFCardSection]();
    swift_bridgeObjectRelease();
    swift_release();
    v10 = v9;
    return v10 & 1;
  }
  __break(1u);
  return result;
}

BOOL USOParse.isOrdinalDisambiguation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  _BOOL4 v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v19 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v11 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v12 = (uint64_t)&v3 - v11;
  v19 = v0;
  USOParse.userDialogAct.getter((uint64_t)&v3 - v11);
  v13 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(v12, 1) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v12);
  }
  else
  {
    v10 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    if (v10)
    {
      v9 = v10;
      v8 = v10;
      UsoTask.eraseToAny.getter();
      swift_release();
      goto LABEL_6;
    }
  }
  memset(v17, 0, sizeof(v17));
  v18 = 0;
LABEL_6:
  if (v18)
  {
    type metadata accessor for UsoTask_noVerb_uso_NoEntity();
    if ((swift_dynamicCast() & 1) != 0)
      v7 = v15;
    else
      v7 = 0;
    v6 = v7;
  }
  else
  {
    v3 = 0;
    outlined destroy of FlowActivity?((uint64_t)v17);
    v6 = v3;
  }
  v16 = v6;
  v5 = v6 != 0;
  v4 = v5;
  outlined destroy of ContiguousArray<A1>();
  return v4;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Parse.toContactId()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  Swift::String result;
  _QWORD v69[2];
  char *v70;
  Builtin::Word v71;
  int v72;
  void *object;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE **v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  uint32_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  NSObject *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE **v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  uint32_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  NSObject *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  void (*v153)(char *, uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint8_t *v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE **v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  void (*v169)(char *, uint64_t, uint64_t);
  unint64_t v170;
  void (*v171)(char *, char *, uint64_t);
  unint64_t v172;
  unint64_t v173;
  uint64_t *v174;
  unint64_t v175;
  uint32_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  NSObject *v188;
  int v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  char *v204;
  unint64_t v205;
  char *v206;
  unint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  char *v214;
  unint64_t v215;
  char *v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  char *v220;
  unint64_t v221;
  void (*v222)(void);
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t (*v226)(uint64_t, uint64_t, uint64_t);
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _BYTE *v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t (*v236)(uint64_t, uint64_t, uint64_t);
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _BYTE *v240[2];
  uint32_t v241;
  uint64_t v242;
  uint64_t v243;
  uint32_t v244;
  uint64_t (*v245)(uint64_t, uint64_t, uint64_t);
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _BYTE *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint32_t v253;
  uint64_t v254;
  char *v255;
  char *v256;

  v256 = 0;
  v254 = 0;
  v255 = 0;
  v235 = 0;
  v233 = 0;
  v234 = 0;
  v231 = 0;
  v232 = 0;
  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v191 = (*(_QWORD *)(*(_QWORD *)(v0 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v0);
  v192 = (uint64_t)v69 - v191;
  v209 = 0;
  v193 = type metadata accessor for Siri_Nlu_External_UserParse();
  v194 = *(_QWORD *)(v193 - 8);
  v195 = (*(_QWORD *)(v194 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v209);
  v196 = (char *)v69 - v195;
  v197 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v198 = *(_QWORD *)(v197 - 8);
  v199 = (*(_QWORD *)(v198 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v209);
  v200 = (char *)v69 - v199;
  v256 = (char *)v69 - v199;
  v201 = type metadata accessor for Logger();
  v202 = *(_QWORD *)(v201 - 8);
  v203 = (*(_QWORD *)(v202 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = MEMORY[0x24BDAC7A8](v209);
  v204 = (char *)v69 - v203;
  v205 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v1);
  v206 = (char *)v69 - v205;
  v207 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v208 = (char *)v69 - v207;
  v210 = type metadata accessor for USOParse();
  v211 = *(_QWORD *)(v210 - 8);
  v212 = *(_QWORD *)(v211 + 64);
  v213 = (v212 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v209);
  v214 = (char *)v69 - v213;
  v215 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v216 = (char *)v69 - v215;
  v255 = (char *)v69 - v215;
  v224 = type metadata accessor for Parse();
  v223 = *(_QWORD *)(v224 - 8);
  v219 = *(_QWORD *)(v223 + 64);
  v218 = (v219 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v224);
  v220 = (char *)v69 - v218;
  v221 = (v219 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v69 - v218);
  v225 = (char *)v69 - v221;
  v254 = v7;
  v222 = *(void (**)(void))(v8 + 16);
  v222();
  if ((*(unsigned int (**)(char *, uint64_t))(v223 + 88))(v225, v224) != *MEMORY[0x24BE98E98])
  {
    v42 = v204;
    v43 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v202 + 16))(v42, v43, v201);
    ((void (*)(char *, uint64_t, uint64_t))v222)(v220, v217, v224);
    v89 = (*(unsigned __int8 *)(v223 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v223 + 80);
    v97 = 7;
    v95 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v223 + 32))(v95 + v89, v220, v224);
    v106 = Logger.logObject.getter();
    v107 = static os_log_type_t.debug.getter();
    v92 = &v252;
    v252 = 12;
    v90 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v91 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v93 = v253;
    v94 = 17;
    v100 = swift_allocObject();
    *(_BYTE *)(v100 + 16) = 32;
    v101 = swift_allocObject();
    *(_BYTE *)(v101 + 16) = 8;
    v96 = 32;
    v44 = swift_allocObject();
    v45 = v95;
    v98 = v44;
    *(_QWORD *)(v44 + 16) = partial apply for implicit closure #3 in Parse.toAppId();
    *(_QWORD *)(v44 + 24) = v45;
    v46 = swift_allocObject();
    v47 = v98;
    v99 = v46;
    *(_QWORD *)(v46 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v46 + 24) = v47;
    v48 = swift_allocObject();
    v49 = v99;
    v103 = v48;
    *(_QWORD *)(v48 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v48 + 24) = v49;
    v105 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v102 = _allocateUninitializedArray<A>(_:)();
    v104 = v50;
    swift_retain();
    v51 = v100;
    v52 = v104;
    *v104 = partial apply for closure #1 in OSLogArguments.append(_:);
    v52[1] = v51;
    swift_retain();
    v53 = v101;
    v54 = v104;
    v104[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v54[3] = v53;
    swift_retain();
    v55 = v103;
    v56 = v104;
    v104[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v56[5] = v55;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v106, (os_log_type_t)v107))
    {
      v82 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v81 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v83 = createStorage<A>(capacity:type:)(0);
      v84 = createStorage<A>(capacity:type:)(1);
      v85 = &v249;
      v249 = v82;
      v86 = &v248;
      v248 = v83;
      v87 = &v247;
      v247 = v84;
      serialize(_:at:)(2, &v249);
      serialize(_:at:)(1, v85);
      v57 = v190;
      v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v246 = v100;
      closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)v85, (uint64_t)v86, (uint64_t)v87);
      v88 = v57;
      if (v57)
      {
        __break(1u);
      }
      else
      {
        v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v246 = v101;
        closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v249, (uint64_t)&v248, (uint64_t)&v247);
        v80 = 0;
        v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v246 = v103;
        closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v249, (uint64_t)&v248, (uint64_t)&v247);
        _os_log_impl(&dword_24701B000, v106, (os_log_type_t)v107, "Unexpected parse type: %s", v82, v93);
        destroyStorage<A>(_:count:)(v83, 0, v81);
        destroyStorage<A>(_:count:)(v84, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v82, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v202 + 8))(v204, v201);
    v71 = 0;
    v58 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v74 = &v250;
    v250 = v58;
    v251 = v59;
    v70 = "";
    v72 = 1;
    v60 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v71, 1);
    v69[1] = v60._object;
    DefaultStringInterpolation.appendLiteral(_:)(v60);
    swift_bridgeObjectRelease();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v61 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v70, v71, v72 & 1);
    object = v61._object;
    DefaultStringInterpolation.appendLiteral(_:)(v61);
    swift_bridgeObjectRelease();
    v76 = v250;
    v75 = v251;
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v78 = String.init(stringInterpolation:)();
    v77 = v62;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    v63 = swift_allocError();
    v64 = v77;
    v79 = v63;
    *(_QWORD *)v65 = v78;
    *(_QWORD *)(v65 + 8) = v64;
    *(_QWORD *)(v65 + 16) = 0;
    *(_QWORD *)(v65 + 24) = 0;
    *(_QWORD *)(v65 + 32) = 0;
    *(_QWORD *)(v65 + 40) = 0;
    *(_BYTE *)(v65 + 48) = 7;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v223 + 8))(v225, v224);
    v133 = v79;
    goto LABEL_30;
  }
  v9 = v208;
  (*(void (**)(char *, uint64_t))(v223 + 96))(v225, v224);
  v171 = *(void (**)(char *, char *, uint64_t))(v211 + 32);
  v171(v216, v225, v210);
  v255 = v216;
  v10 = Logger.payments.unsafeMutableAddressor();
  v169 = *(void (**)(char *, uint64_t, uint64_t))(v202 + 16);
  v169(v9, v10, v201);
  (*(void (**)(char *, char *, uint64_t))(v211 + 16))(v214, v216, v210);
  v170 = (*(unsigned __int8 *)(v211 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v211 + 80);
  v179 = 7;
  v180 = swift_allocObject();
  v171((char *)(v180 + v170), v214, v210);
  v188 = Logger.logObject.getter();
  v189 = static os_log_type_t.debug.getter();
  v174 = &v243;
  v243 = 12;
  v172 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v173 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v175 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v176 = v244;
  v177 = 17;
  v182 = swift_allocObject();
  *(_BYTE *)(v182 + 16) = 32;
  v183 = swift_allocObject();
  *(_BYTE *)(v183 + 16) = 8;
  v178 = 32;
  v11 = swift_allocObject();
  v12 = v180;
  v181 = v11;
  *(_QWORD *)(v11 + 16) = partial apply for implicit closure #2 in Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:);
  *(_QWORD *)(v11 + 24) = v12;
  v13 = swift_allocObject();
  v14 = v181;
  v185 = v13;
  *(_QWORD *)(v13 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v13 + 24) = v14;
  v187 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v184 = _allocateUninitializedArray<A>(_:)();
  v186 = v15;
  swift_retain();
  v16 = v182;
  v17 = v186;
  *v186 = partial apply for closure #1 in OSLogArguments.append(_:);
  v17[1] = v16;
  swift_retain();
  v18 = v183;
  v19 = v186;
  v186[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v19[3] = v18;
  swift_retain();
  v20 = v185;
  v21 = v186;
  v186[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v21[5] = v20;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v188, (os_log_type_t)v189))
  {
    v162 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v161 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v163 = createStorage<A>(capacity:type:)(0);
    v164 = createStorage<A>(capacity:type:)(1);
    v165 = &v230;
    v230 = v162;
    v166 = &v229;
    v229 = v163;
    v167 = &v228;
    v228 = v164;
    serialize(_:at:)(2, &v230);
    serialize(_:at:)(1, v165);
    v22 = v190;
    v226 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v227 = v182;
    closure #1 in osLogInternal(_:log:type:)(&v226, (uint64_t)v165, (uint64_t)v166, (uint64_t)v167);
    v168 = v22;
    if (v22)
    {
      __break(1u);
    }
    else
    {
      v226 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v227 = v183;
      closure #1 in osLogInternal(_:log:type:)(&v226, (uint64_t)&v230, (uint64_t)&v229, (uint64_t)&v228);
      v158 = 0;
      v226 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v227 = v185;
      closure #1 in osLogInternal(_:log:type:)(&v226, (uint64_t)&v230, (uint64_t)&v229, (uint64_t)&v228);
      v157 = 0;
      _os_log_impl(&dword_24701B000, v188, (os_log_type_t)v189, "parse is %s", v162, v176);
      destroyStorage<A>(_:count:)(v163, 0, v161);
      destroyStorage<A>(_:count:)(v164, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v162, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v159 = v157;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v159 = v190;
  }
  v152 = v159;

  v153 = *(void (**)(char *, uint64_t))(v202 + 8);
  v153(v208, v201);
  v23 = USOParse.userParse.getter();
  v154 = MEMORY[0x249571348](v23);
  (*(void (**)(char *, uint64_t))(v194 + 8))(v196, v193);
  swift_bridgeObjectRetain();
  v156 = &v242;
  v242 = v154;
  v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
  lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v198 + 48))(v192, 1, v197) == 1)
  {
    v27 = v206;
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v192);
    swift_bridgeObjectRelease();
    v28 = Logger.payments.unsafeMutableAddressor();
    v169(v27, v28, v201);
    ((void (*)(char *, uint64_t, uint64_t))v222)(v220, v217, v224);
    v118 = (*(unsigned __int8 *)(v223 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v223 + 80);
    v122 = 7;
    v123 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v223 + 32))(v123 + v118, v220, v224);
    v130 = Logger.logObject.getter();
    v131 = static os_log_type_t.error.getter();
    v240[1] = (_BYTE *)12;
    UnsignedInteger<>.init<A>(_:)();
    v119 = v241;
    v120 = 17;
    v125 = swift_allocObject();
    *(_BYTE *)(v125 + 16) = 32;
    v126 = swift_allocObject();
    *(_BYTE *)(v126 + 16) = 8;
    v121 = 32;
    v29 = swift_allocObject();
    v30 = v123;
    v124 = v29;
    *(_QWORD *)(v29 + 16) = partial apply for implicit closure #3 in FlowFactory.findFlow(for:);
    *(_QWORD *)(v29 + 24) = v30;
    v31 = swift_allocObject();
    v32 = v124;
    v128 = v31;
    *(_QWORD *)(v31 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v31 + 24) = v32;
    v127 = _allocateUninitializedArray<A>(_:)();
    v129 = v33;
    swift_retain();
    v34 = v125;
    v35 = v129;
    *v129 = partial apply for closure #1 in OSLogArguments.append(_:);
    v35[1] = v34;
    swift_retain();
    v36 = v126;
    v37 = v129;
    v129[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v37[3] = v36;
    swift_retain();
    v38 = v128;
    v39 = v129;
    v129[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v39[5] = v38;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v130, (os_log_type_t)v131))
    {
      v111 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v110 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v112 = createStorage<A>(capacity:type:)(0);
      v113 = createStorage<A>(capacity:type:)(1);
      v114 = v240;
      v240[0] = v111;
      v115 = &v239;
      v239 = v112;
      v116 = &v238;
      v238 = v113;
      serialize(_:at:)(2, v240);
      serialize(_:at:)(1, v114);
      v40 = v152;
      v236 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v237 = v125;
      closure #1 in osLogInternal(_:log:type:)(&v236, (uint64_t)v114, (uint64_t)v115, (uint64_t)v116);
      v117 = v40;
      if (v40)
      {
        __break(1u);
      }
      else
      {
        v236 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v237 = v126;
        closure #1 in osLogInternal(_:log:type:)(&v236, (uint64_t)v240, (uint64_t)&v239, (uint64_t)&v238);
        v109 = 0;
        v236 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v237 = v128;
        closure #1 in osLogInternal(_:log:type:)(&v236, (uint64_t)v240, (uint64_t)&v239, (uint64_t)&v238);
        _os_log_impl(&dword_24701B000, v130, (os_log_type_t)v131, "#toContactId Couldn't find user dialog act in parse: %s", v111, v119);
        destroyStorage<A>(_:count:)(v112, 0, v110);
        destroyStorage<A>(_:count:)(v113, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v111, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    v153(v206, v201);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    v108 = swift_allocError();
    *(_QWORD *)v41 = 5;
    *(_QWORD *)(v41 + 8) = 0;
    *(_QWORD *)(v41 + 16) = 0;
    *(_QWORD *)(v41 + 24) = 0;
    *(_QWORD *)(v41 + 32) = 0;
    *(_QWORD *)(v41 + 40) = 0;
    *(_BYTE *)(v41 + 48) = 17;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v211 + 8))(v216, v210);
    v133 = v108;
    goto LABEL_30;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v198 + 32))(v200, v192, v197);
  swift_bridgeObjectRelease();
  v150 = Siri_Nlu_External_UserDialogAct.contactId.getter();
  v151 = v24;
  if (!v24)
  {
    type metadata accessor for ReferenceResolutionClient();
    v142 = ReferenceResolutionClient.__allocating_init()();
    v143 = ReferenceResolutionClient.resolvePersonDisambiguationReference(from:)((uint64_t)v216);
    swift_release();
    if (v143)
    {
      v141 = v143;
      v138 = v143;
      v235 = v143;
      v139 = UsoEntity_common_Person.contactId.getter();
      v140 = v25;
      if (v25)
      {
        v136 = v139;
        v137 = v140;
        v135 = v140;
        v134 = v139;
        v233 = v139;
        v234 = v140;
        swift_release();
        (*(void (**)(char *, uint64_t))(v198 + 8))(v200, v197);
        (*(void (**)(char *, uint64_t))(v211 + 8))(v216, v210);
        v146 = v134;
        v147 = v135;
        goto LABEL_29;
      }
      swift_release();
    }
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    v132 = swift_allocError();
    *(_QWORD *)v26 = 6;
    *(_QWORD *)(v26 + 8) = 0;
    *(_QWORD *)(v26 + 16) = 0;
    *(_QWORD *)(v26 + 24) = 0;
    *(_QWORD *)(v26 + 32) = 0;
    *(_QWORD *)(v26 + 40) = 0;
    *(_BYTE *)(v26 + 48) = 17;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v198 + 8))(v200, v197);
    (*(void (**)(char *, uint64_t))(v211 + 8))(v216, v210);
    v133 = v132;
LABEL_30:
    v67 = v160;
    v66 = v69[0];
    goto LABEL_31;
  }
  v148 = v150;
  v149 = v151;
  v145 = v151;
  v144 = v150;
  v231 = v150;
  v232 = v151;
  (*(void (**)(char *, uint64_t))(v198 + 8))(v200, v197);
  (*(void (**)(char *, uint64_t))(v211 + 8))(v216, v210);
  v146 = v144;
  v147 = v145;
LABEL_29:
  v66 = v146;
  v67 = v147;
LABEL_31:
  result._object = v67;
  result._countAndFlagsBits = v66;
  return result;
}

uint64_t Parse.isCancel.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  int v17;
  void (*v18)(char *, uint64_t);
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;

  v55 = 0;
  v53 = 0;
  v56 = 0;
  v54 = 0;
  v42 = 0;
  v26 = type metadata accessor for Parse.DirectInvocation();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = (*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v10 - v28;
  v56 = (char *)&v10 - v28;
  v30 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v42);
  v31 = (uint64_t)&v10 - v30;
  v32 = type metadata accessor for Siri_Nlu_External_UserParse();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = (*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v42);
  v35 = (char *)&v10 - v34;
  v36 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = (*(_QWORD *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0 = MEMORY[0x24BDAC7A8](v42);
  v39 = (char *)&v10 - v38;
  v40 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v0);
  v41 = (char *)&v10 - v40;
  v55 = (char *)&v10 - v40;
  v43 = type metadata accessor for USOParse();
  v44 = *(_QWORD *)(v43 - 8);
  v45 = (*(_QWORD *)(v44 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v42);
  v46 = (char *)&v10 - v45;
  v54 = (char *)&v10 - v45;
  v49 = type metadata accessor for Parse();
  v48 = *(_QWORD *)(v49 - 8);
  v47 = (*(_QWORD *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v49);
  v50 = (char *)&v10 - v47;
  v53 = v2;
  (*(void (**)(void))(v3 + 16))();
  v51 = (*(uint64_t (**)(char *, uint64_t))(v48 + 88))(v50, v49);
  if (v51 == *MEMORY[0x24BE98E88])
  {
    v6 = v29;
    (*(void (**)(char *, uint64_t))(v48 + 96))(v50, v49);
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v6, v50, v26);
    v56 = v6;
    v12 = Parse.DirectInvocation.identifier.getter();
    v16 = v7;
    v11 = (id)static SiriKitDirectInvocationPayloads.cancel.getter();
    v15 = objc_msgSend(v11, sel_identifier);
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v8;

    v17 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
    v20 = v17;
  }
  else if (v51 == *MEMORY[0x24BE98E98])
  {
    v4 = v46;
    (*(void (**)(char *, uint64_t))(v48 + 96))(v50, v49);
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v4, v50, v43);
    v54 = v4;
    v5 = USOParse.userParse.getter();
    v23 = MEMORY[0x249571348](v5);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
    swift_bridgeObjectRetain();
    v25 = &v52;
    v52 = v23;
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
    lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [SFCardSection]();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v31, 1, v36) == 1)
    {
      outlined destroy of Siri_Nlu_External_UserDialogAct?(v31);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v43);
      v20 = 0;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v41, v31, v36);
      swift_bridgeObjectRelease();
      v22 = Siri_Nlu_External_UserDialogAct.hasRejected.getter();
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v39, v41, v36);
      if ((v22 & 1) != 0)
        v21 = 1;
      else
        v21 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
      v19 = v21;
      v18 = *(void (**)(char *, uint64_t))(v37 + 8);
      v18(v39, v36);
      v18(v41, v36);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v43);
      v20 = v19;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v49);
    v20 = 0;
  }
  return v20 & 1;
}

uint64_t USOParse.preferredUserDialogAct.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  uint64_t v44;
  char *v45;
  char *v46;

  v16 = a1;
  v46 = 0;
  v45 = 0;
  v44 = 0;
  v39 = 0;
  v22 = 0;
  v34 = type metadata accessor for Siri_Nlu_External_UserParse();
  v33 = *(_QWORD *)(v34 - 8);
  v17 = (*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v34);
  v18 = (char *)&v12 - v17;
  v19 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v12 - v17);
  v20 = (char *)&v12 - v19;
  v21 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v12 - v19);
  v35 = (char *)&v12 - v21;
  v23 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v22);
  v24 = (uint64_t)&v12 - v23;
  v25 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v38 = (uint64_t)&v12 - v25;
  v26 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v27 = *(_QWORD *)(v26 - 8);
  v29 = *(_QWORD *)(v27 + 64);
  v28 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v12 - v28;
  v46 = (char *)&v12 - v28;
  v31 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v32 = (char *)&v12 - v31;
  v45 = (char *)&v12 - v31;
  v44 = v1;
  v7 = USOParse.userParse.getter();
  v37 = MEMORY[0x249571348](v7);
  v36 = *(void (**)(char *, uint64_t))(v33 + 8);
  v36(v35, v34);
  v43[2] = v37;
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
  v41 = lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
  Sequence.first(where:)();
  v42 = 0;
  outlined destroy of [SFCardSection]();
  v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (v15(v38, 1, v26) == 1)
  {
    v9 = v42;
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v38);
    v10 = USOParse.userParse.getter();
    v14 = MEMORY[0x249571348](v10);
    v36(v20, v34);
    v43[1] = v14;
    result = Sequence.first(where:)();
    if (v9)
    {
      __break(1u);
    }
    else
    {
      outlined destroy of [SFCardSection]();
      if (v15(v24, 1, v26) == 1)
      {
        outlined destroy of Siri_Nlu_External_UserDialogAct?(v24);
        v11 = USOParse.userParse.getter();
        v13 = MEMORY[0x249571348](v11);
        v36(v18, v34);
        swift_bridgeObjectRetain();
        v12 = v43;
        v43[0] = v13;
        lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
        Collection.first.getter();
        outlined destroy of [SFCardSection]();
        return swift_bridgeObjectRelease();
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(v30, v24, v26);
        (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v16, v30, v26);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v16, 0, 1, v26);
        return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v30, v26);
      }
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(v32, v38, v26);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v16, v32, v26);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v16, 0, 1, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v32, v26);
  }
  return result;
}

uint64_t implicit closure #1 in Parse.confirmationResponse.getter()
{
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIRINLUUserDialogAct);
  return String.init<A>(describing:)();
}

uint64_t implicit closure #2 in Parse.confirmationResponse.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;

  v3 = a1;
  v5 = type metadata accessor for USOParse();
  v4 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v6 = (char *)&v3 - v4;
  (*(void (**)(char *))(v1 + 16))((char *)&v3 - v4);
  return String.init<A>(describing:)();
}

uint64_t sub_247103B58()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Parse() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

id Parse.DirectInvocation.toSiriKitIntent(previousIntent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t *v46;
  _BYTE **v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint32_t v54;
  int v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t *v69;
  uint64_t *v70;
  _BYTE **v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint32_t v78;
  int v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  id v85;
  id v86;
  _UNKNOWN **v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t *v95;
  uint64_t *v96;
  _BYTE **v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  uint32_t v104;
  int v105;
  NSObject *v106;
  uint64_t v107;
  _UNKNOWN **v108;
  _UNKNOWN **v109;
  _UNKNOWN **v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  unint64_t v118;
  char *v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  uint32_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _BYTE *v136;
  uint64_t v137;
  uint32_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  uint32_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v113 = a1;
  v112 = a2;
  v108 = &protocol witness table for INSearchForAccountsIntent;
  v109 = &protocol witness table for INRequestPaymentIntent;
  v110 = &protocol witness table for INSendPaymentIntent;
  v152 = 0;
  v153 = 0;
  v151 = 0;
  v111 = 0;
  v114 = type metadata accessor for Logger();
  v115 = *(_QWORD *)(v114 - 8);
  v116 = (*(_QWORD *)(v115 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v113);
  v117 = (char *)&v35 - v116;
  v118 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v3);
  v119 = (char *)&v35 - v118;
  v120 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v121 = (char *)&v35 - v120;
  v152 = v7;
  v153 = v8;
  v151 = v2;
  v123 = Parse.DirectInvocation.identifier.getter();
  v124 = v9;
  swift_bridgeObjectRetain();
  PaymentsDirectInvocations.Identifiers.rawValue.getter(8);
  v122 = v10;
  v125 = v11;
  swift_bridgeObjectRetain();
  v149 = v123;
  v150 = v124;
  v126 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v126 & 1) != 0)
  {
    v12 = v121;
    swift_bridgeObjectRelease();
    v13 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v12, v13, v114);
    v106 = Logger.logObject.getter();
    v105 = static os_log_type_t.debug.getter();
    v103 = &v131;
    v131 = 2;
    v101 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v102 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v104 = v132;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v107 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v106, (os_log_type_t)v105))
    {
      v14 = v111;
      v91 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v89 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v90 = 0;
      v92 = createStorage<A>(capacity:type:)(0);
      v93 = createStorage<A>(capacity:type:)(v90);
      v97 = &v130;
      v130 = v91;
      v98 = &v129;
      v129 = v92;
      v95 = &v128;
      v128 = v93;
      v94 = 0;
      serialize(_:at:)(0, &v130);
      serialize(_:at:)(v94, v97);
      v127 = v107;
      v96 = &v35;
      MEMORY[0x24BDAC7A8](&v35);
      v15 = v98;
      v16 = &v35 - 6;
      v99 = &v35 - 6;
      v16[2] = (uint64_t)v97;
      v16[3] = (uint64_t)v15;
      v16[4] = v17;
      v100 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v14)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_24701B000, v106, (os_log_type_t)v105, "#PaymentDirectInvocations sendPayment, returning INSendPaymentIntent", v91, v104);
        v88 = 0;
        destroyStorage<A>(_:count:)(v92, 0, v89);
        destroyStorage<A>(_:count:)(v93, v88, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v91, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v115 + 8))(v121, v114);
    type metadata accessor for INSendPaymentIntent();
    v85 = SAUIAppPunchOut.__allocating_init()();
    swift_bridgeObjectRelease();
    v86 = v85;
    v87 = v110;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    PaymentsDirectInvocations.Identifiers.rawValue.getter(9);
    v82 = v18;
    v83 = v19;
    swift_bridgeObjectRetain();
    v147 = v123;
    v148 = v124;
    v84 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v84 & 1) != 0)
    {
      v20 = v119;
      swift_bridgeObjectRelease();
      v21 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v20, v21, v114);
      v80 = Logger.logObject.getter();
      v79 = static os_log_type_t.debug.getter();
      v77 = &v137;
      v137 = 2;
      v75 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v76 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v78 = v138;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v81 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v80, (os_log_type_t)v79))
      {
        v22 = v111;
        v65 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v64 = 0;
        v66 = createStorage<A>(capacity:type:)(0);
        v67 = createStorage<A>(capacity:type:)(v64);
        v71 = &v136;
        v136 = v65;
        v72 = &v135;
        v135 = v66;
        v69 = &v134;
        v134 = v67;
        v68 = 0;
        serialize(_:at:)(0, &v136);
        serialize(_:at:)(v68, v71);
        v133 = v81;
        v70 = &v35;
        MEMORY[0x24BDAC7A8](&v35);
        v23 = v72;
        v24 = &v35 - 6;
        v73 = &v35 - 6;
        v24[2] = (uint64_t)v71;
        v24[3] = (uint64_t)v23;
        v24[4] = v25;
        v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v22)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_24701B000, v80, (os_log_type_t)v79, "#PaymentDirectInvocations requestPayment, returning INRequestPaymentIntent", v65, v78);
          v62 = 0;
          destroyStorage<A>(_:count:)(v66, 0, v63);
          destroyStorage<A>(_:count:)(v67, v62, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v65, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v115 + 8))(v119, v114);
      type metadata accessor for INRequestPaymentIntent();
      v61 = SAUIAppPunchOut.__allocating_init()();
      swift_bridgeObjectRelease();
      v86 = v61;
      v87 = v109;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      PaymentsDirectInvocations.Identifiers.rawValue.getter(10);
      v58 = v26;
      v59 = v27;
      swift_bridgeObjectRetain();
      v145 = v123;
      v146 = v124;
      v60 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v60 & 1) != 0)
      {
        v28 = v117;
        swift_bridgeObjectRelease();
        v29 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v28, v29, v114);
        v56 = Logger.logObject.getter();
        v55 = static os_log_type_t.debug.getter();
        v53 = &v143;
        v143 = 2;
        v51 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v52 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v54 = v144;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        v57 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v56, (os_log_type_t)v55))
        {
          v30 = v111;
          v41 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v40 = 0;
          v42 = createStorage<A>(capacity:type:)(0);
          v43 = createStorage<A>(capacity:type:)(v40);
          v47 = &v142;
          v142 = v41;
          v48 = &v141;
          v141 = v42;
          v45 = &v140;
          v140 = v43;
          v44 = 0;
          serialize(_:at:)(0, &v142);
          serialize(_:at:)(v44, v47);
          v139 = v57;
          v46 = &v35;
          MEMORY[0x24BDAC7A8](&v35);
          v31 = v48;
          v32 = &v35 - 6;
          v49 = &v35 - 6;
          v32[2] = (uint64_t)v47;
          v32[3] = (uint64_t)v31;
          v32[4] = v33;
          v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v30)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_24701B000, v56, (os_log_type_t)v55, "#PaymentsDirectInvocations searchForAccounts, returning INSearchForAccountsIntent", v41, v54);
            v38 = 0;
            destroyStorage<A>(_:count:)(v42, 0, v39);
            destroyStorage<A>(_:count:)(v43, v38, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x2495725CC](v41, MEMORY[0x24BEE4260]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        (*(void (**)(char *, uint64_t))(v115 + 8))(v117, v114);
        type metadata accessor for INSearchForAccountsIntent();
        v37 = SAUIAppPunchOut.__allocating_init()();
        swift_bridgeObjectRelease();
        v86 = v37;
        v87 = v108;
      }
      else
      {
        v36 = 0;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v86 = v36;
        v87 = (_UNKNOWN **)v36;
      }
    }
  }
  return v86;
}

uint64_t USOParse.userDialogAct.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = a1;
  v13 = 0;
  v6 = type metadata accessor for Siri_Nlu_External_UserParse();
  v5 = *(_QWORD *)(v6 - 8);
  v4 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v7 = (char *)&v4 - v4;
  v13 = v1;
  v2 = USOParse.userParse.getter();
  v11 = MEMORY[0x249571348](v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v6);
  swift_bridgeObjectRetain();
  v10 = &v12;
  v12 = v11;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
  lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  return swift_bridgeObjectRelease();
}

uint64_t implicit closure #3 in Parse.toAppId()()
{
  return type metadata accessor for Parse();
}

Swift::Bool __swiftcall Parse.isFirstPartyApp()()
{
  uint64_t v0;
  Swift::String v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  _BYTE **v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint32_t v26;
  int v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t countAndFlagsBits;
  void *v31;
  void *object;
  _BOOL4 v33;
  int v34;
  Swift::String_optional v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  Swift::String_optional v41;
  Swift::String_optional v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint32_t v48;
  uint64_t v49;

  v49 = 0;
  v36 = 0;
  v42 = (Swift::String_optional)0;
  v37 = type metadata accessor for Logger();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = (*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)&v9 - v39;
  v49 = v0;
  v41 = Parse.toAppId()();
  if (v41.value._object)
  {
    v35 = v41;
    object = v41.value._object;
    countAndFlagsBits = v41.value._countAndFlagsBits;
    v42 = v41;
    v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.", 0xAuLL, 1);
    v31 = v1._object;
    v33 = String.hasPrefix(_:)(v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = v33;
  }
  else
  {
    v2 = v40;
    v3 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v2, v3, v37);
    v28 = Logger.logObject.getter();
    v27 = static os_log_type_t.debug.getter();
    v25 = &v47;
    v47 = 2;
    v23 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v24 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v26 = v48;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v29 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v28, (os_log_type_t)v27))
    {
      v4 = v36;
      v13 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v12 = 0;
      v14 = createStorage<A>(capacity:type:)(0);
      v15 = createStorage<A>(capacity:type:)(v12);
      v19 = &v46;
      v46 = v13;
      v20 = &v45;
      v45 = v14;
      v17 = &v44;
      v44 = v15;
      v16 = 0;
      serialize(_:at:)(0, &v46);
      serialize(_:at:)(v16, v19);
      v43 = v29;
      v18 = &v9;
      MEMORY[0x24BDAC7A8](&v9);
      v5 = v20;
      v6 = &v9 - 6;
      v21 = &v9 - 6;
      v6[2] = (uint64_t)v19;
      v6[3] = (uint64_t)v5;
      v6[4] = v7;
      v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v4)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_24701B000, v28, (os_log_type_t)v27, "#Parse isFirstPartyApp() no app ID in parse, so this is first party app by default", v13, v26);
        v10 = 0;
        destroyStorage<A>(_:count:)(v14, 0, v11);
        destroyStorage<A>(_:count:)(v15, v10, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v13, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v37);
    v34 = 1;
  }
  return v34 & 1;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Parse.DirectInvocation.getSelectionIndex()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int result;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  _QWORD *v20;
  _BYTE **v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint32_t v28;
  int v29;
  NSObject *v30;
  uint64_t v31;
  Swift::Int v32;
  Swift::Int v33;
  Swift::Int v34;
  Swift::Int v35;
  int v36;
  Swift::Int v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD v48[3];
  Swift::Int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint32_t v55;
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;

  v58 = 0;
  v49 = 0;
  v43 = type metadata accessor for Logger();
  v44 = *(_QWORD *)(v43 - 8);
  v45 = (*(_QWORD *)(v44 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v43);
  v46 = (char *)v11 - v45;
  v58 = v0;
  v47 = Parse.DirectInvocation.userData.getter();
  if (v47)
  {
    v41 = v47;
    v40 = v47;
    PaymentsDirectInvocations.Keys.rawValue.getter(2);
    v39 = v48;
    v48[0] = v1;
    v48[1] = v2;
    MEMORY[0x2495721DC](v56);
    outlined destroy of String.UTF8View();
    swift_bridgeObjectRelease();
  }
  else
  {
    memset(v56, 0, sizeof(v56));
    v57 = 0;
  }
  if (v57)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v37 = v48[2];
      v38 = 0;
    }
    else
    {
      v37 = 0;
      v38 = 1;
    }
    v35 = v37;
    v36 = v38;
  }
  else
  {
    v32 = 0;
    outlined destroy of FlowActivity?((uint64_t)v56);
    v35 = v32;
    v36 = 1;
  }
  v34 = v35;
  if ((v36 & 1) != 0)
  {
    v4 = v46;
    v5 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v4, v5, v43);
    v30 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    v27 = &v54;
    v54 = 2;
    v25 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v26 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v28 = v55;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v31 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v30, (os_log_type_t)v29))
    {
      v15 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v14 = 0;
      v16 = createStorage<A>(capacity:type:)(0);
      v17 = createStorage<A>(capacity:type:)(v14);
      v21 = &v53;
      v53 = v15;
      v22 = &v52;
      v52 = v16;
      v19 = &v51;
      v51 = v17;
      v18 = 0;
      serialize(_:at:)(0, &v53);
      serialize(_:at:)(v18, v21);
      v50 = v31;
      v20 = v11;
      MEMORY[0x24BDAC7A8](v11);
      v6 = v22;
      v7 = &v11[-6];
      v23 = &v11[-6];
      v7[2] = v21;
      v7[3] = v6;
      v7[4] = v8;
      v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      v9 = v42;
      Sequence.forEach(_:)();
      if (v9)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_24701B000, v30, (os_log_type_t)v29, "Could not find contactId in userData", v15, v28);
        v12 = 0;
        destroyStorage<A>(_:count:)(v16, 0, v13);
        destroyStorage<A>(_:count:)(v17, v12, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v15, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v43);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    v11[3] = swift_allocError();
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 17;
    swift_willThrow();
    return v11[2];
  }
  else
  {
    v33 = v34;
    result = v34;
    v49 = v34;
  }
  return result;
}

uint64_t closure #1 in USOParse.preferredUserDialogAct.getter()
{
  return Siri_Nlu_External_UserDialogAct.hasAccepted.getter() & 1;
}

uint64_t closure #2 in USOParse.preferredUserDialogAct.getter()
{
  return Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1;
}

uint64_t closure #1 in USOParse.isRequestToSummariseAppleCardInfo.getter()
{
  char v1;

  UsoIdentifier.value.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("apple_card", 0xAuLL, 1);
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t sub_2471056F4()
{
  return swift_deallocObject();
}

uint64_t sub_24710571C()
{
  return swift_deallocObject();
}

uint64_t sub_247105744()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247105780()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471057BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for USOParse() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for USOParse() - 8) + 80);
  return implicit closure #2 in Parse.confirmationResponse.getter(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_24710585C()
{
  return swift_deallocObject();
}

uint64_t sub_247105884()
{
  return swift_deallocObject();
}

uint64_t sub_2471058AC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471058E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247105924()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Parse() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247105994()
{
  return swift_deallocObject();
}

uint64_t sub_2471059BC()
{
  return swift_deallocObject();
}

uint64_t sub_2471059E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247105A20()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247105A5C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Parse.DirectInvocation() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247105ACC()
{
  return swift_deallocObject();
}

uint64_t sub_247105AF4()
{
  return swift_deallocObject();
}

uint64_t sub_247105B1C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247105B58()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247105B94()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for USOParse() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247105C04()
{
  return swift_deallocObject();
}

uint64_t sub_247105C2C()
{
  return swift_deallocObject();
}

uint64_t sub_247105C54()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247105C90()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247105CCC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Parse() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247105D3C()
{
  return swift_deallocObject();
}

uint64_t sub_247105D64()
{
  return swift_deallocObject();
}

uint64_t sub_247105D8C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247105DC8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  return a2;
}

uint64_t sub_247105E7C()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in Parse.confirmationResponse.getter()
{
  return implicit closure #1 in Parse.confirmationResponse.getter();
}

uint64_t sub_247105EC0()
{
  return swift_deallocObject();
}

uint64_t sub_247105EE8()
{
  return swift_deallocObject();
}

uint64_t sub_247105F10()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247105F4C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247105F88()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Parse() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in Parse.toAppId()()
{
  type metadata accessor for Parse();
  return implicit closure #3 in Parse.toAppId()();
}

uint64_t sub_247106028()
{
  return swift_deallocObject();
}

uint64_t sub_247106050()
{
  return swift_deallocObject();
}

uint64_t sub_247106078()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471060B4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471060F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24710612C()
{
  return swift_deallocObject();
}

uint64_t sub_247106154()
{
  return swift_deallocObject();
}

uint64_t sub_24710617C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471061B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471061F4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247106230()
{
  return swift_deallocObject();
}

uint64_t sub_247106258()
{
  return swift_deallocObject();
}

uint64_t sub_247106280()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471062BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471062F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Parse() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247106368()
{
  return swift_deallocObject();
}

uint64_t sub_247106390()
{
  return swift_deallocObject();
}

uint64_t sub_2471063B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471063F4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247106430()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24710646C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for USOParse() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_2471064DC()
{
  return swift_deallocObject();
}

uint64_t sub_247106504()
{
  return swift_deallocObject();
}

uint64_t sub_24710652C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247106568()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471065A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Parse() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247106614()
{
  return swift_deallocObject();
}

uint64_t sub_24710663C()
{
  return swift_deallocObject();
}

uint64_t sub_247106664()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471066A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t App.sirikitApp.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD v5[4];
  _QWORD v6[6];
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = 0;
  v38 = 0;
  v36 = 0;
  v35 = 0;
  v34 = 0;
  v30 = 0;
  v39 = v0;
  v31 = App.appIdentifier.getter();
  v32 = v1;
  if (!v1)
    return 0;
  v28 = v31;
  v29 = v32;
  v25 = v32;
  v26 = v31;
  v37 = v31;
  v38 = v32;
  v27 = (id)static SAAppInfoFactory.createAppInfo(app:)();
  if (!v27)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v24 = v27;
  v22 = v27;
  v36 = v27;
  v21 = type metadata accessor for SirikitLocalizedAppName();
  v35 = Array.init()();
  v23 = objc_msgSend(v27, sel_appNameMap);
  if (v23)
  {
    v20 = v23;
    v17 = v23;
    v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v19 = v18;
  }
  else
  {
    v19 = 0;
  }
  v16 = v19;
  if (v19)
  {
    v15 = v16;
    v9 = v16;
    v34 = v16;
    v33 = v16;
    v10 = v6;
    MEMORY[0x24BDAC7A8](v6);
    v11 = v5;
    v5[2] = closure #1 in App.sirikitApp.getter;
    v5[3] = 0;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    v2 = lazy protocol witness table accessor for type [String : String] and conformance [A : B]();
    v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@guaranteed String, @guaranteed String) -> (@owned SirikitLocalizedAppName), (uint64_t)v11, v12, v21, MEMORY[0x24BEE4078], v2, MEMORY[0x24BEE40A8], v13);
    v35 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v6[0] = 0;
  type metadata accessor for SirikitApp.Builder();
  v6[1] = SirikitApp.Builder.__allocating_init()();
  v6[3] = dispatch thunk of SirikitApp.Builder.withAppId(print:speak:)();
  swift_release();
  v6[5] = &v35;
  v6[2] = v35;
  swift_bridgeObjectRetain();
  v6[4] = dispatch thunk of SirikitApp.Builder.withLocalizedAppNames(_:)();
  swift_bridgeObjectRelease();
  v3 = swift_release();
  v7 = MEMORY[0x249571E04](v3);
  swift_release();
  outlined destroy of [SFCardSection]();

  swift_bridgeObjectRelease();
  return v7;
}

uint64_t static AppUtil.walletApp.getter()
{
  type metadata accessor for App();
  static AppUtil.PASSBOOK_APP_BUNDLE_ID.getter();
  AppUtil.PASSBOOK_EXTENSION_BUNDLE_ID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  AppUtil.PASSBOOK_UI_EXTENSION_BUNDLE_ID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return App.__allocating_init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)();
}

id static AppUtil.buildPunchout(for:locale:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;

  type metadata accessor for SAUIAppPunchOut();
  v9 = SAUIAppPunchOut.__allocating_init()();
  v10 = App.appIdentifier.getter();
  if (v0)
  {
    v7 = MEMORY[0x24957220C](v10);
    swift_bridgeObjectRelease();
    v8 = (void *)v7;
  }
  else
  {
    v8 = 0;
  }
  objc_msgSend(v9, sel_setBundleId_);

  type metadata accessor for AppInformationResolver();
  swift_retain();
  AppInformationResolver.__allocating_init(app:)();
  v5 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  v6 = v1;
  swift_release();
  swift_bridgeObjectRetain();
  if (v6)
  {
    v3 = MEMORY[0x24957220C](v5);
    swift_bridgeObjectRelease();
    v4 = (void *)v3;
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(v9, sel_setAppDisplayName_);

  swift_bridgeObjectRelease();
  return v9;
}

BOOL App.isFirstParty.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::Bool v5;
  uint64_t v6;
  uint64_t v7;

  App.appIdentifier.getter();
  v7 = v0;
  swift_retain();
  if (!v7)
  {
    App.systemExtensionBundleId.getter();
    v6 = v1;
    swift_retain();
    if (!v6)
    {
      App.pluginIdentifier.getter();
      if (!v2)
      {
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        outlined destroy of String.UTF8View();
      }
      outlined destroy of String.UTF8View();
    }
    swift_release();
    outlined destroy of String.UTF8View();
  }
  swift_release();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.", 0xAuLL, 1);
  v5 = String.hasPrefix(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

Swift::Bool __swiftcall App.supportsIntent(intentName:)(Swift::String intentName)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;

  v15 = 0;
  v16 = 0;
  v18 = intentName;
  v17 = v1;
  v10 = App.appIdentifier.getter();
  v11 = v2;
  if (v2)
  {
    v15 = v10;
    v16 = v2;
    v4 = AppUtil.intentSupportResolver.unsafeMutableAddressor();
    swift_beginAccess();
    outlined init with copy of GlobalsProviding((uint64_t)v4, (uint64_t)v12);
    swift_endAccess();
    v5 = v13;
    v6 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t))(v6 + 8))(v10, v11, intentName._countAndFlagsBits, intentName._object, v5);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
    swift_bridgeObjectRelease();
    v8 = v7;
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[2];
  void (*v16)(char *, _QWORD);
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  void (*v30)(char *, char *);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t AssociatedTypeWitness;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  char *v59;
  Swift::Int v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v30 = a1;
  v31 = a2;
  v53 = a3;
  v44 = a4;
  v32 = a5;
  v52 = a6;
  v34 = a8;
  v35 = "Fatal error";
  v36 = "Index out of bounds";
  v37 = "Swift/Collection.swift";
  v38 = "Range requires lowerBound <= upperBound";
  v39 = "Swift/Range.swift";
  v40 = "Index out of range";
  v67 = a3;
  v66 = a4;
  v65 = a5;
  v41 = *(_QWORD *)(a5 - 8);
  v42 = (*(_QWORD *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1);
  v43 = (char *)v15 - v42;
  v45 = 0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v47 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v48 = (*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v45);
  v49 = (char *)v15 - v48;
  v50 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v51 = (char *)v15 - v50;
  v54 = swift_getAssociatedTypeWitness();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = (*(_QWORD *)(v55 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v53);
  v57 = (char *)v15 - v56;
  v58 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v59 = (char *)v15 - v58;
  v60 = dispatch thunk of Collection.count.getter();
  if (v60)
  {
    v64 = Array.init()();
    v29 = type metadata accessor for ContiguousArray();
    ContiguousArray.reserveCapacity(_:)(v60);
    result = dispatch thunk of Collection.startIndex.getter();
    if (v60 >= 0)
    {
      v27 = 0;
      for (i = v33; ; i = v18)
      {
        v25 = i;
        v26 = v27;
        if (v27 == v60)
          goto LABEL_17;
        if (v26 < 0 || v26 >= v60)
          goto LABEL_16;
        v62 = v26;
        if (v60 < 0)
          goto LABEL_15;
        if (v26 >= v60)
          break;
        v24 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          return result;
        }
        v63 = 0;
        v23 = v24;
LABEL_18:
        v22 = v23;
        if ((v63 & 1) != 0)
        {
          (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v57, v59, v54);
          _expectEnd<A>(of:is:)();
          (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v54);
          v19 = v64;
          swift_retain();
          swift_release();
          v20 = v19;
          v21 = v25;
          return v20;
        }
        v17 = &v61;
        v16 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
        (*(void (**)(char *))(v47 + 16))(v49);
        v16(v17, 0);
        v14 = v25;
        v30(v49, v43);
        v18 = v14;
        if (v14)
        {
          (*(void (**)(char *, uint64_t))(v47 + 8))(v49, AssociatedTypeWitness);
          (*(void (**)(char *, uint64_t))(v55 + 8))(v59, v54);
          outlined destroy of ContiguousArray<A1>();
          (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v34, v43, v32);
          return v15[1];
        }
        (*(void (**)(char *, uint64_t))(v47 + 8))(v49, AssociatedTypeWitness);
        ContiguousArray.append(_:)();
        dispatch thunk of Collection.formIndex(after:)();
        result = v18;
        v27 = v22;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_15:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_16:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
LABEL_17:
      v62 = 0;
      v63 = 1;
      v23 = v26;
      goto LABEL_18;
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  v20 = static Array._allocateUninitialized(_:)();
  v21 = v33;
  return v20;
}

__int128 *AppUtil.usoContactsBundleId.unsafeMutableAddressor()
{
  if (one-time initialization token for usoContactsBundleId != -1)
    swift_once();
  return &static AppUtil.usoContactsBundleId;
}

__int128 *AppUtil.usoNamespace.unsafeMutableAddressor()
{
  if (one-time initialization token for usoNamespace != -1)
    swift_once();
  return &static AppUtil.usoNamespace;
}

NSJSONWritingOptions App.toAppDescription(deviceState:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v5;

  v5 = App.getAppName(deviceState:)(a1);
  if (!v1)
    return 0;
  App.appIdentifier.getter();
  if (!v2)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return NSJSONWritingOptions.init(rawValue:)(v5);
}

uint64_t one-time initialization function for PASSBOOK_EXTENSION_BUNDLE_ID()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.PassKit.PassKitIntentsExtension", 0x29uLL, 1);
  result = v1._countAndFlagsBits;
  static AppUtil.PASSBOOK_EXTENSION_BUNDLE_ID = (__int128)v1;
  return result;
}

__int128 *AppUtil.PASSBOOK_EXTENSION_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for PASSBOOK_EXTENSION_BUNDLE_ID != -1)
    swift_once();
  return &static AppUtil.PASSBOOK_EXTENSION_BUNDLE_ID;
}

uint64_t static AppUtil.PASSBOOK_EXTENSION_BUNDLE_ID.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)AppUtil.PASSBOOK_EXTENSION_BUNDLE_ID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for PASSBOOK_UI_EXTENSION_BUNDLE_ID()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.PassKit.PassKitIntentsUIExtension", 0x2BuLL, 1);
  result = v1._countAndFlagsBits;
  static AppUtil.PASSBOOK_UI_EXTENSION_BUNDLE_ID = (__int128)v1;
  return result;
}

__int128 *AppUtil.PASSBOOK_UI_EXTENSION_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for PASSBOOK_UI_EXTENSION_BUNDLE_ID != -1)
    swift_once();
  return &static AppUtil.PASSBOOK_UI_EXTENSION_BUNDLE_ID;
}

uint64_t one-time initialization function for MESSAGES_APP_BUNDLE_ID()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.MobileSMS", 0x13uLL, 1);
  result = v1._countAndFlagsBits;
  static AppUtil.MESSAGES_APP_BUNDLE_ID = (__int128)v1;
  return result;
}

__int128 *AppUtil.MESSAGES_APP_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for MESSAGES_APP_BUNDLE_ID != -1)
    swift_once();
  return &static AppUtil.MESSAGES_APP_BUNDLE_ID;
}

uint64_t one-time initialization function for PASSBOOK_IOS_APP_BUNDLE_ID()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.Passbook", 0x12uLL, 1);
  result = v1._countAndFlagsBits;
  static AppUtil.PASSBOOK_IOS_APP_BUNDLE_ID = (__int128)v1;
  return result;
}

__int128 *AppUtil.PASSBOOK_IOS_APP_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for PASSBOOK_IOS_APP_BUNDLE_ID != -1)
    swift_once();
  return &static AppUtil.PASSBOOK_IOS_APP_BUNDLE_ID;
}

uint64_t one-time initialization function for PASSBOOK_WATCH_APP_BUNDLE_ID()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.NanoPassbook", 0x16uLL, 1);
  result = v1._countAndFlagsBits;
  static AppUtil.PASSBOOK_WATCH_APP_BUNDLE_ID = (__int128)v1;
  return result;
}

__int128 *AppUtil.PASSBOOK_WATCH_APP_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for PASSBOOK_WATCH_APP_BUNDLE_ID != -1)
    swift_once();
  return &static AppUtil.PASSBOOK_WATCH_APP_BUNDLE_ID;
}

uint64_t one-time initialization function for CONTACTS_IOS_APP_BUNDLE_ID()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.MobileAddressBook", 0x1BuLL, 1);
  result = v1._countAndFlagsBits;
  static AppUtil.CONTACTS_IOS_APP_BUNDLE_ID = (__int128)v1;
  return result;
}

__int128 *AppUtil.CONTACTS_IOS_APP_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for CONTACTS_IOS_APP_BUNDLE_ID != -1)
    swift_once();
  return &static AppUtil.CONTACTS_IOS_APP_BUNDLE_ID;
}

uint64_t one-time initialization function for CONTACTS_WATCH_APP_BUNDLE_ID()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.NanoContacts", 0x16uLL, 1);
  result = v1._countAndFlagsBits;
  static AppUtil.CONTACTS_WATCH_APP_BUNDLE_ID = (__int128)v1;
  return result;
}

__int128 *AppUtil.CONTACTS_WATCH_APP_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for CONTACTS_WATCH_APP_BUNDLE_ID != -1)
    swift_once();
  return &static AppUtil.CONTACTS_WATCH_APP_BUNDLE_ID;
}

uint64_t one-time initialization function for internalWatchAppSuffix()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".SIRI_INTERNAL_WATCHAPP", 0x17uLL, 1);
  result = v1._countAndFlagsBits;
  static AppUtil.internalWatchAppSuffix = (__int128)v1;
  return result;
}

__int128 *AppUtil.internalWatchAppSuffix.unsafeMutableAddressor()
{
  if (one-time initialization token for internalWatchAppSuffix != -1)
    swift_once();
  return &static AppUtil.internalWatchAppSuffix;
}

uint64_t one-time initialization function for launchIdPrefix()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("x-apple-siri-app://", 0x13uLL, 1);
  result = v1._countAndFlagsBits;
  static AppUtil.launchIdPrefix = (__int128)v1;
  return result;
}

__int128 *AppUtil.launchIdPrefix.unsafeMutableAddressor()
{
  if (one-time initialization token for launchIdPrefix != -1)
    swift_once();
  return &static AppUtil.launchIdPrefix;
}

NSJSONWritingOptions one-time initialization function for intentSupportResolver(Swift::UInt a1)
{
  NSJSONWritingOptions result;

  result = NSJSONWritingOptions.init(rawValue:)(a1);
  qword_257672708 = (uint64_t)&type metadata for LSApplicationIntentSupportResolver;
  qword_257672710 = (uint64_t)&protocol witness table for LSApplicationIntentSupportResolver;
  return result;
}

void *AppUtil.intentSupportResolver.unsafeMutableAddressor()
{
  if (one-time initialization token for intentSupportResolver != -1)
    swift_once();
  return &static AppUtil.intentSupportResolver;
}

uint64_t one-time initialization function for usoAppBundleId()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Applications", 0xCuLL, 1);
  result = v1._countAndFlagsBits;
  static AppUtil.usoAppBundleId = (__int128)v1;
  return result;
}

__int128 *AppUtil.usoAppBundleId.unsafeMutableAddressor()
{
  if (one-time initialization token for usoAppBundleId != -1)
    swift_once();
  return &static AppUtil.usoAppBundleId;
}

uint64_t one-time initialization function for usoContactsBundleId()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Contacts", 8uLL, 1);
  result = v1._countAndFlagsBits;
  static AppUtil.usoContactsBundleId = (__int128)v1;
  return result;
}

uint64_t one-time initialization function for usoNamespace()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("item_id", 7uLL, 1);
  result = v1._countAndFlagsBits;
  static AppUtil.usoNamespace = (__int128)v1;
  return result;
}

uint64_t static AppUtil.CONTACTS_APP_BUNDLE_ID.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)AppUtil.CONTACTS_IOS_APP_BUNDLE_ID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t static AppUtil.PASSBOOK_APP_BUNDLE_ID.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)AppUtil.PASSBOOK_IOS_APP_BUNDLE_ID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

Swift::Bool __swiftcall LSApplicationIntentSupportResolver.doesAppSupportIntent(appBundleId:intentName:)(Swift::String appBundleId, Swift::String intentName)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *object;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  char *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[3];
  uint64_t v74;
  uint64_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  _BYTE **v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint32_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  NSObject *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint8_t *v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE **v111;
  uint64_t *v112;
  uint64_t *v113;
  void *v114;
  uint32_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  NSObject *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  id v132;
  int v133;
  int v134;
  id v135;
  void *v136;
  id v137;
  void (*v138)(char *, uint64_t);
  void *v139;
  id v140;
  id v141;
  void *v142;
  void *v143;
  void *v144;
  uint64_t v145;
  uint8_t *v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE **v149;
  uint64_t *v150;
  uint64_t *v151;
  void *v152;
  _QWORD *v153;
  unint64_t v154;
  char *v155;
  _QWORD *v156;
  unint64_t v157;
  uint64_t v158;
  char *v159;
  _QWORD *v160;
  char *v161;
  _QWORD *v162;
  uint64_t v163;
  void (*v164)(char *, uint64_t, uint64_t);
  unint64_t v165;
  unint64_t v166;
  uint64_t *v167;
  unint64_t v168;
  uint32_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  NSObject *v181;
  int v182;
  Swift::String v183;
  Swift::String v184;
  void *v185;
  uint64_t (*FunctionReplacement)(uint64_t, void *, uint64_t, void *);
  uint64_t (*v187)(uint64_t, uint64_t, uint64_t);
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _BYTE *v191;
  Swift::String v192;
  id v193;
  uint64_t (*v194)(uint64_t, uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _BYTE *v198[2];
  uint32_t v199;
  uint64_t (*v200)(uint64_t, uint64_t, uint64_t);
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _BYTE *v204[2];
  uint32_t v205;
  id v206;
  id v207;
  uint64_t v208;
  uint32_t v209;
  uint64_t countAndFlagsBits;
  uint64_t v211;
  Swift::String v212;

  v183 = appBundleId;
  v184 = intentName;
  v212 = (Swift::String)0;
  countAndFlagsBits = 0;
  v211 = 0;
  v207 = 0;
  v185 = 0;
  v206 = 0;
  v193 = 0;
  FunctionReplacement = (uint64_t (*)(uint64_t, void *, uint64_t, void *))swift_getFunctionReplacement();
  if (FunctionReplacement)
    return FunctionReplacement(v183._countAndFlagsBits, v183._object, v184._countAndFlagsBits, v184._object);
  v163 = type metadata accessor for Logger();
  v162 = *(_QWORD **)(v163 - 8);
  v158 = v162[8];
  v153 = v73;
  v154 = (v158 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v73);
  v155 = (char *)v73 - v154;
  v156 = v73;
  v157 = (v158 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v73);
  v159 = (char *)v73 - v157;
  v160 = v73;
  MEMORY[0x24BDAC7A8](v73);
  v4 = (char *)v73 - v3;
  v161 = (char *)v73 - v3;
  v212 = v183;
  countAndFlagsBits = v184._countAndFlagsBits;
  v211 = v5;
  v6 = Logger.payments.unsafeMutableAddressor();
  v164 = (void (*)(char *, uint64_t, uint64_t))v162[2];
  v164(v4, v6, v163);
  swift_bridgeObjectRetain();
  v171 = 32;
  v172 = 7;
  v7 = swift_allocObject();
  object = v183._object;
  v173 = v7;
  *(_QWORD *)(v7 + 16) = v183._countAndFlagsBits;
  *(_QWORD *)(v7 + 24) = object;
  v181 = Logger.logObject.getter();
  v182 = static os_log_type_t.debug.getter();
  v167 = &v208;
  v208 = 12;
  v165 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v166 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v168 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v169 = v209;
  v170 = 17;
  v175 = swift_allocObject();
  *(_BYTE *)(v175 + 16) = 32;
  v176 = swift_allocObject();
  *(_BYTE *)(v176 + 16) = 8;
  v9 = swift_allocObject();
  v10 = v173;
  v174 = v9;
  *(_QWORD *)(v9 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(_QWORD *)(v9 + 24) = v10;
  v11 = swift_allocObject();
  v12 = v174;
  v178 = v11;
  *(_QWORD *)(v11 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v11 + 24) = v12;
  v180 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v177 = _allocateUninitializedArray<A>(_:)();
  v179 = v13;
  swift_retain();
  v14 = v175;
  v15 = v179;
  *v179 = partial apply for closure #1 in OSLogArguments.append(_:);
  v15[1] = v14;
  swift_retain();
  v16 = v176;
  v17 = v179;
  v179[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v17[3] = v16;
  swift_retain();
  v18 = v178;
  v19 = v179;
  v179[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v19[5] = v18;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v181, (os_log_type_t)v182))
  {
    v20 = v185;
    v146 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v145 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v147 = createStorage<A>(capacity:type:)(0);
    v148 = createStorage<A>(capacity:type:)(1);
    v149 = &v191;
    v191 = v146;
    v150 = &v190;
    v190 = v147;
    v151 = &v189;
    v189 = v148;
    serialize(_:at:)(2, &v191);
    serialize(_:at:)(1, v149);
    v187 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v188 = v175;
    closure #1 in osLogInternal(_:log:type:)(&v187, (uint64_t)v149, (uint64_t)v150, (uint64_t)v151);
    v152 = v20;
    if (v20)
    {
      __break(1u);
    }
    else
    {
      v187 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v188 = v176;
      closure #1 in osLogInternal(_:log:type:)(&v187, (uint64_t)&v191, (uint64_t)&v190, (uint64_t)&v189);
      v143 = 0;
      v22 = v143;
      v187 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v188 = v178;
      closure #1 in osLogInternal(_:log:type:)(&v187, (uint64_t)&v191, (uint64_t)&v190, (uint64_t)&v189);
      v142 = v22;
      _os_log_impl(&dword_24701B000, v181, (os_log_type_t)v182, "LSApplicationProxyIntentSupportResolver# Looking up %s", v146, v169);
      destroyStorage<A>(_:count:)(v147, 0, v145);
      destroyStorage<A>(_:count:)(v148, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v146, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v144 = v142;
    }
  }
  else
  {
    v21 = v185;
    swift_release();
    swift_release();
    swift_release();
    v144 = v21;
  }
  v23 = v144;

  v138 = (void (*)(char *, uint64_t))v162[1];
  v138(v161, v163);
  type metadata accessor for LSApplicationRecord();
  swift_bridgeObjectRetain();
  v24 = LSApplicationRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(v183._countAndFlagsBits, (uint64_t)v183._object, 0);
  v139 = v23;
  v140 = v24;
  v141 = v23;
  if (v23)
  {
    v42 = v155;
    v85 = v141;
    v84 = 0;
    v43 = v141;
    v206 = v85;
    v44 = Logger.payments.unsafeMutableAddressor();
    v164(v42, v44, v163);
    swift_bridgeObjectRetain();
    v92 = 32;
    v93 = 7;
    v45 = swift_allocObject();
    v46 = v183._object;
    v47 = v45;
    v48 = v85;
    v87 = v47;
    *(_QWORD *)(v47 + 16) = v183._countAndFlagsBits;
    *(_QWORD *)(v47 + 24) = v46;
    v49 = v48;
    v94 = swift_allocObject();
    *(_QWORD *)(v94 + 16) = v85;
    v104 = Logger.logObject.getter();
    v105 = static os_log_type_t.error.getter();
    v204[1] = (_BYTE *)22;
    UnsignedInteger<>.init<A>(_:)();
    v86 = v205;
    v90 = 17;
    v96 = swift_allocObject();
    v89 = 32;
    *(_BYTE *)(v96 + 16) = 32;
    v97 = swift_allocObject();
    v91 = 8;
    *(_BYTE *)(v97 + 16) = 8;
    v50 = swift_allocObject();
    v51 = v87;
    v88 = v50;
    *(_QWORD *)(v50 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
    *(_QWORD *)(v50 + 24) = v51;
    v52 = swift_allocObject();
    v53 = v88;
    v98 = v52;
    *(_QWORD *)(v52 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v52 + 24) = v53;
    v99 = swift_allocObject();
    *(_BYTE *)(v99 + 16) = v89;
    v100 = swift_allocObject();
    *(_BYTE *)(v100 + 16) = v91;
    v54 = swift_allocObject();
    v55 = v94;
    v95 = v54;
    *(_QWORD *)(v54 + 16) = partial apply for implicit closure #3 in LSApplicationIntentSupportResolver.doesAppSupportIntent(appBundleId:intentName:);
    *(_QWORD *)(v54 + 24) = v55;
    v56 = swift_allocObject();
    v57 = v95;
    v102 = v56;
    *(_QWORD *)(v56 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v56 + 24) = v57;
    v101 = _allocateUninitializedArray<A>(_:)();
    v103 = v58;
    swift_retain();
    v59 = v96;
    v60 = v103;
    *v103 = partial apply for closure #1 in OSLogArguments.append(_:);
    v60[1] = v59;
    swift_retain();
    v61 = v97;
    v62 = v103;
    v103[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v62[3] = v61;
    swift_retain();
    v63 = v98;
    v64 = v103;
    v103[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v64[5] = v63;
    swift_retain();
    v65 = v99;
    v66 = v103;
    v103[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v66[7] = v65;
    swift_retain();
    v67 = v100;
    v68 = v103;
    v103[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v68[9] = v67;
    swift_retain();
    v69 = v102;
    v70 = v103;
    v103[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v70[11] = v69;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v104, (os_log_type_t)v105))
    {
      v71 = v84;
      v76 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v75 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v77 = createStorage<A>(capacity:type:)(0);
      v78 = createStorage<A>(capacity:type:)(2);
      v80 = v204;
      v204[0] = v76;
      v81 = &v203;
      v203 = v77;
      v82 = &v202;
      v202 = v78;
      v79 = 2;
      serialize(_:at:)(2, v204);
      serialize(_:at:)(v79, v80);
      v200 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v201 = v96;
      closure #1 in osLogInternal(_:log:type:)(&v200, (uint64_t)v80, (uint64_t)v81, (uint64_t)v82);
      v83 = v71;
      if (v71)
      {
        __break(1u);
      }
      else
      {
        v200 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v201 = v97;
        closure #1 in osLogInternal(_:log:type:)(&v200, (uint64_t)v204, (uint64_t)&v203, (uint64_t)&v202);
        v74 = 0;
        v72 = v74;
        v200 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v201 = v98;
        closure #1 in osLogInternal(_:log:type:)(&v200, (uint64_t)v204, (uint64_t)&v203, (uint64_t)&v202);
        v73[2] = v72;
        v200 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v201 = v99;
        closure #1 in osLogInternal(_:log:type:)(&v200, (uint64_t)v204, (uint64_t)&v203, (uint64_t)&v202);
        v73[1] = 0;
        v200 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v201 = v100;
        closure #1 in osLogInternal(_:log:type:)(&v200, (uint64_t)v204, (uint64_t)&v203, (uint64_t)&v202);
        v73[0] = 0;
        v200 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v201 = v102;
        closure #1 in osLogInternal(_:log:type:)(&v200, (uint64_t)v204, (uint64_t)&v203, (uint64_t)&v202);
        _os_log_impl(&dword_24701B000, v104, (os_log_type_t)v105, "LSApplicationProxyIntentSupportResolver# Unable to get LSApplicationRecord for %s: %s", v76, v86);
        destroyStorage<A>(_:count:)(v77, 0, v75);
        destroyStorage<A>(_:count:)(v78, 2, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v76, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    v138(v155, v163);
    v134 = 0;
  }
  else
  {
    v136 = v140;
    v25 = v140;
    v207 = v136;
    type metadata accessor for INAppInfo();
    v137 = @nonobjc INAppInfo.__allocating_init(applicationRecord:)(v136);
    if (v137)
    {
      v135 = v137;
      v132 = v137;
      v193 = v137;
      v131 = objc_msgSend(v137, sel_supportedIntents);
      v128 = MEMORY[0x24BEE0D00];
      v129 = MEMORY[0x24BEE0D10];
      v130 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
      v192 = v184;
      v133 = Set.contains(_:)();
      swift_bridgeObjectRelease();

      v134 = v133;
    }
    else
    {
      v26 = v159;
      v27 = Logger.payments.unsafeMutableAddressor();
      v164(v26, v27, v163);
      swift_bridgeObjectRetain();
      v117 = 32;
      v118 = 7;
      v28 = swift_allocObject();
      v29 = v183._object;
      v119 = v28;
      *(_QWORD *)(v28 + 16) = v183._countAndFlagsBits;
      *(_QWORD *)(v28 + 24) = v29;
      v126 = Logger.logObject.getter();
      v127 = static os_log_type_t.error.getter();
      v198[1] = (_BYTE *)12;
      UnsignedInteger<>.init<A>(_:)();
      v115 = v199;
      v116 = 17;
      v121 = swift_allocObject();
      *(_BYTE *)(v121 + 16) = 32;
      v122 = swift_allocObject();
      *(_BYTE *)(v122 + 16) = 8;
      v30 = swift_allocObject();
      v31 = v119;
      v120 = v30;
      *(_QWORD *)(v30 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
      *(_QWORD *)(v30 + 24) = v31;
      v32 = swift_allocObject();
      v33 = v120;
      v124 = v32;
      *(_QWORD *)(v32 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v32 + 24) = v33;
      v123 = _allocateUninitializedArray<A>(_:)();
      v125 = v34;
      swift_retain();
      v35 = v121;
      v36 = v125;
      *v125 = partial apply for closure #1 in OSLogArguments.append(_:);
      v36[1] = v35;
      swift_retain();
      v37 = v122;
      v38 = v125;
      v125[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v38[3] = v37;
      swift_retain();
      v39 = v124;
      v40 = v125;
      v125[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v40[5] = v39;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v126, (os_log_type_t)v127))
      {
        v41 = v139;
        v108 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v107 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v109 = createStorage<A>(capacity:type:)(0);
        v110 = createStorage<A>(capacity:type:)(1);
        v111 = v198;
        v198[0] = v108;
        v112 = &v197;
        v197 = v109;
        v113 = &v196;
        v196 = v110;
        serialize(_:at:)(2, v198);
        serialize(_:at:)(1, v111);
        v194 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v195 = v121;
        closure #1 in osLogInternal(_:log:type:)(&v194, (uint64_t)v111, (uint64_t)v112, (uint64_t)v113);
        v114 = v41;
        if (v41)
        {
          __break(1u);
        }
        else
        {
          v194 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v195 = v122;
          closure #1 in osLogInternal(_:log:type:)(&v194, (uint64_t)v198, (uint64_t)&v197, (uint64_t)&v196);
          v106 = 0;
          v194 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v195 = v124;
          closure #1 in osLogInternal(_:log:type:)(&v194, (uint64_t)v198, (uint64_t)&v197, (uint64_t)&v196);
          _os_log_impl(&dword_24701B000, v126, (os_log_type_t)v127, "LSApplicationProxyIntentSupportResolver# Unable to get INAppInfo for %s", v108, v115);
          destroyStorage<A>(_:count:)(v109, 0, v107);
          destroyStorage<A>(_:count:)(v110, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v108, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      v138(v159, v163);
      v134 = 0;
    }
  }
  return v134 & 1;
}

id LSApplicationRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  id v3;
  uint64_t v5;
  uint64_t v8;
  id v10;

  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v10 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, a3 & 1);
  if (v8)
    return (id)v5;
  else
    return v10;
}

uint64_t implicit closure #3 in LSApplicationIntentSupportResolver.doesAppSupportIntent(appBundleId:intentName:)(void *a1)
{
  id v1;

  v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return String.init<A>(describing:)();
}

id @nonobjc INAppInfo.__allocating_init(applicationRecord:)(void *a1)
{
  id v3;

  v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_appInfoWithApplicationRecord_, a1);

  return v3;
}

BOOL protocol witness for AppIntentSupportResolving.doesAppSupportIntent(appBundleId:intentName:) in conformance LSApplicationIntentSupportResolver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return LSApplicationIntentSupportResolver.doesAppSupportIntent(appBundleId:intentName:)(*(Swift::String *)&a1, *(Swift::String *)&a3);
}

BOOL App.isPaymentSendingApp.getter()
{
  Swift::String v0;
  Swift::Bool v2;

  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("INSendPaymentIntent", 0x13uLL, 1);
  v2 = App.supportsIntent(intentName:)(v0);
  swift_bridgeObjectRelease();
  return v2;
}

BOOL App.isPaymentRequestingApp.getter()
{
  Swift::String v0;
  Swift::Bool v2;

  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("INRequestPaymentIntent", 0x16uLL, 1);
  v2 = App.supportsIntent(intentName:)(v0);
  swift_bridgeObjectRelease();
  return v2;
}

BOOL App.isAccountSearchingApp.getter()
{
  Swift::String v0;
  Swift::Bool v2;

  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("INSearchForAccountsIntent", 0x19uLL, 1);
  v2 = App.supportsIntent(intentName:)(v0);
  swift_bridgeObjectRelease();
  return v2;
}

BOOL App.isPaymentApp.getter()
{
  BOOL v1;
  BOOL v2;

  v2 = App.isPaymentSendingApp.getter();
  swift_retain();
  v1 = v2 || App.isPaymentRequestingApp.getter();
  swift_release();
  return v1;
}

uint64_t App.toUsoEntityBuilder(locale:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  _QWORD v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v23 = a1;
  v33 = 0;
  v32 = 0;
  v31 = 0;
  v29 = 0;
  v30 = 0;
  v27 = 0;
  v28 = 0;
  v21 = 0;
  v17 = type metadata accessor for UsoIdentifier();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v20 = (char *)v8 - v19;
  v33 = v2;
  v32 = v1;
  type metadata accessor for UsoEntityBuilder_common_App();
  v22 = UsoEntityBuilder_common_App.__allocating_init()();
  v31 = v22;
  type metadata accessor for AppInformationResolver();
  swift_retain();
  v24 = AppInformationResolver.__allocating_init(app:)();
  v25 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  v26 = v3;
  swift_release();
  if (v26)
  {
    v15 = v25;
    v16 = v26;
    v14 = v26;
    v27 = v25;
    v28 = v26;
    MEMORY[0x249571750]();
    swift_bridgeObjectRelease();
  }
  v12 = App.appIdentifier.getter();
  v13 = v4;
  if (v4)
  {
    v10 = v12;
    v11 = v13;
    v8[6] = v13;
    v8[7] = v12;
    v29 = v12;
    v30 = v13;
    v9 = MEMORY[0x249571744]();
    if (v9)
    {
      v8[5] = v9;
      v8[4] = v9;
      swift_bridgeObjectRetain();
      v5 = AppUtil.usoAppBundleId.unsafeMutableAddressor();
      v8[0] = *(_QWORD *)v5;
      v8[1] = *((_QWORD *)v5 + 1);
      swift_bridgeObjectRetain();
      v6 = AppUtil.usoNamespace.unsafeMutableAddressor();
      v8[2] = *(_QWORD *)v6;
      v8[3] = *((_QWORD *)v6 + 1);
      swift_bridgeObjectRetain();
      UsoIdentifier.init(value:appBundleId:namespace:)();
      dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      swift_release();
    }
    swift_bridgeObjectRelease();
  }
  return v22;
}

uint64_t App.getAppName(deviceState:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = a1;
  v17 = 0;
  v16 = 0;
  v5 = 0;
  v12 = type metadata accessor for Locale();
  v10 = *(_QWORD *)(v12 - 8);
  v6 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v11 = (char *)&v5 - v6;
  v17 = v2;
  v16 = v1;
  type metadata accessor for AppInformationResolver();
  swift_retain();
  v13 = AppInformationResolver.__allocating_init(app:)();
  v9 = v7[3];
  v8 = v7[4];
  __swift_project_boxed_opaque_existential_1(v7, v9);
  dispatch thunk of DeviceState.siriLocale.getter();
  v14 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  v15 = v3;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v11, v12);
  swift_release();
  return v14;
}

uint64_t closure #1 in App.sirikitApp.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = a1;
  v8[1] = a2;
  v12 = a3;
  v13 = a4;
  v24 = 0;
  v25 = 0;
  v22 = 0;
  v23 = 0;
  v8[0] = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                                 - 8)
                     + 64)
         + 15) & 0xFFFFFFFFFFFFFFF0;
  v18 = (uint64_t)v8 - v8[0];
  v24 = MEMORY[0x24BDAC7A8](v9);
  v25 = v4;
  v22 = v5;
  v23 = v6;
  v10 = 0;
  type metadata accessor for SirikitLocalizedAppName.Builder();
  v11 = SirikitLocalizedAppName.Builder.__allocating_init()();
  String.toSpeakableString.getter();
  v16 = type metadata accessor for SpeakableString();
  v17 = *(void (**)(uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v14 = 0;
  v15 = 1;
  v17(v18);
  v19 = dispatch thunk of SirikitLocalizedAppName.Builder.withLocale(_:)();
  outlined destroy of SpeakableString?(v18);
  swift_release();
  String.toSpeakableString.getter();
  ((void (*)(uint64_t, _QWORD, _QWORD, uint64_t))v17)(v18, v14, v15, v16);
  v20 = dispatch thunk of SirikitLocalizedAppName.Builder.withAppName(_:)();
  outlined destroy of SpeakableString?(v18);
  swift_release();
  v21 = dispatch thunk of SirikitLocalizedAppName.Builder.build()();
  swift_release();
  return v21;
}

uint64_t thunk for @callee_guaranteed (@guaranteed String, @guaranteed String) -> (@owned SirikitLocalizedAppName)@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = a2(*a1, a1[1], a1[2], a1[3]);
  *a3 = result;
  return result;
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed String, @guaranteed String) -> (@owned SirikitLocalizedAppName)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return thunk for @callee_guaranteed (@guaranteed String, @guaranteed String) -> (@owned SirikitLocalizedAppName)(a1, *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v2 + 16), a2);
}

uint64_t sub_24710A318()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t AppResolutionStateProviding.isForcedDisambiguation.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a1;
  v5 = a2;
  v12 = 0;
  v13 = a1;
  v10 = type metadata accessor for AppSelectionResponse();
  v8 = *(_QWORD *)(v10 - 8);
  v7 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v4 - v7;
  v12 = v2;
  AppResolutionStateProviding.previousSelectionResponse.getter();
  v11 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v9, v10);
  if (v11 == *MEMORY[0x24BE90C78] || v11 == *MEMORY[0x24BE90C80])
  {
    HIDWORD(v4) = 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v9, v10);
    HIDWORD(v4) = 0;
  }
  return BYTE4(v4) & 1;
}

uint64_t Array<A>.cardinality.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v8;
  uint64_t v9;

  swift_bridgeObjectRetain();
  type metadata accessor for Array();
  MEMORY[0x249572C98](MEMORY[0x24BEE12E0]);
  v8 = Collection.isEmpty.getter();
  outlined destroy of [SFCardSection]();
  if ((v8 & 1) != 0)
    return 0;
  if (MEMORY[0x2495723C8](a1, a2) == 1)
  {
    swift_bridgeObjectRetain();
    Collection.first.getter();
    outlined destroy of [SFCardSection]();
    if (v9)
      return v9;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return v4;
  }
  else
  {
    swift_bridgeObjectRetain();
    type metadata accessor for App();
    v3 = _arrayForceCast<A, B>(_:)();
    swift_bridgeObjectRelease();
    return v3;
  }
}

id @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  id v3;
  uint64_t v5;
  id v6;
  id v7;
  id v9;
  uint64_t v10;

  v7 = (id)MEMORY[0x24957220C]();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutoreleasingUnsafeMutablePointer<NSError?>);
  lazy protocol witness table accessor for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>();
  _convertInOutToPointerArgument<A>(_:)();
  v9 = objc_msgSend(v6, sel_initWithBundleIdentifier_allowPlaceholder_error_, v7, a3 & 1, v10);
  v3 = 0;

  if (v9)
  {

    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_bridgeObjectRelease();
    return (id)v5;
  }
}

uint64_t sub_24710A7F4()
{
  return swift_deallocObject();
}

uint64_t sub_24710A81C()
{
  return swift_deallocObject();
}

uint64_t sub_24710A844()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24710A880()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t type metadata accessor for LSApplicationRecord()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for LSApplicationRecord;
  if (!lazy cache variable for type metadata for LSApplicationRecord)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for LSApplicationRecord);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_24710A920()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24710A95C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in LSApplicationIntentSupportResolver.doesAppSupportIntent(appBundleId:intentName:)()
{
  uint64_t v0;

  return implicit closure #3 in LSApplicationIntentSupportResolver.doesAppSupportIntent(appBundleId:intentName:)(*(void **)(v0 + 16));
}

uint64_t sub_24710A9A0()
{
  return swift_deallocObject();
}

uint64_t sub_24710A9C8()
{
  return swift_deallocObject();
}

uint64_t sub_24710A9F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24710AA2C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24710AA68()
{
  return swift_deallocObject();
}

uint64_t sub_24710AA90()
{
  return swift_deallocObject();
}

uint64_t sub_24710AAB8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24710AAF4()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t type metadata accessor for INAppInfo()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for INAppInfo;
  if (!lazy cache variable for type metadata for INAppInfo)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INAppInfo);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_24710AB94()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24710ABD0()
{
  return swift_deallocObject();
}

uint64_t sub_24710ABF8()
{
  return swift_deallocObject();
}

uint64_t sub_24710AC20()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24710AC5C()
{
  swift_release();
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for AppUtil()
{
  return &type metadata for AppUtil;
}

ValueMetadata *type metadata accessor for LSApplicationIntentSupportResolver()
{
  return &type metadata for LSApplicationIntentSupportResolver;
}

uint64_t type metadata instantiation function for Cardinality()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Cardinality()
{
  unint64_t v0;
  uint64_t v2;

  v2 = swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for Cardinality(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v11;
  int v12;

  v11 = *(_QWORD *)(a3 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  if ((v12 & 0x20000) != 0)
  {
    v6 = *a2;
    swift_retain();
    *a1 = v6;
    return *a1 + ((v12 + 16) & ~(unint64_t)v12);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v4 = *a2;
        swift_bridgeObjectRetain();
        *a1 = v4;
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(v11 + 64));
      }
    }
    else
    {
      (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))(a1, a2);
      swift_storeEnumTagMultiPayload();
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for Cardinality(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
  if ((_DWORD)result == 1)
    return swift_bridgeObjectRelease();
  return result;
}

_QWORD *initializeWithCopy for Cardinality(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int EnumCaseMultiPayload;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v4 = *a2;
      swift_bridgeObjectRetain();
      *a1 = v4;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t *assignWithCopy for Cardinality(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    outlined destroy of Cardinality<A>((uint64_t)a1, v5);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v4 = *a2;
        swift_bridgeObjectRetain();
        *a1 = v4;
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      }
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *))(*(_QWORD *)(v5 - 8) + 16))(a1, a2);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t outlined destroy of Cardinality<A>(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
      swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1);
  }
  return a1;
}

void *initializeWithTake for Cardinality(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for Cardinality(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v4;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a3 + 16);
    outlined destroy of Cardinality<A>((uint64_t)a1, v4);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *))(*(_QWORD *)(v4 - 8) + 32))(a1, a2);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Cardinality(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for Cardinality(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t getEnumTag for Cardinality()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t destructiveInjectEnumTag for Cardinality()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for Cardinality(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a4, a4, (uint64_t)&nominal type descriptor for Cardinality);
}

unint64_t lazy protocol witness table accessor for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>;
  if (!lazy protocol witness table cache variable for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AutoreleasingUnsafeMutablePointer<NSError?>);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE01C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>);
    return v1;
  }
  return v3;
}

uint64_t PaymentsDialogConcept.Builder.__allocating_init()()
{
  swift_allocObject();
  return PaymentsDialogConcept.Builder.init()();
}

uint64_t PaymentsDialogConcept.Builder.amount.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  swift_retain();
  swift_endAccess();
  return v2;
}

uint64_t PaymentsDialogConcept.Builder.amount.setter(uint64_t a1)
{
  uint64_t v1;

  swift_retain();
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

uint64_t PaymentsDialogConcept.Builder.fee.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 32);
  swift_retain();
  swift_endAccess();
  return v2;
}

uint64_t PaymentsDialogConcept.Builder.fee.setter(uint64_t a1)
{
  uint64_t v1;

  swift_retain();
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

uint64_t (*PaymentsDialogConcept.Builder.fee.modify())()
{
  swift_beginAccess();
  return PaymentsAppResolutionFlowStrategy.appResolutionService.modify;
}

uint64_t PaymentsDialogConcept.Builder.memo.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;

  v3 = (const void *)(v1 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo);
  swift_beginAccess();
  outlined init with copy of SpeakableString?(v3, a1);
  return swift_endAccess();
}

uint64_t PaymentsDialogConcept.Builder.memo.setter(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  unint64_t v4;
  char *v5;
  void *v6;
  char *v7;
  uint64_t v8;
  char v9;

  v8 = a1;
  v4 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (const void *)MEMORY[0x24BDAC7A8](v8);
  v5 = (char *)&v4 - v4;
  outlined init with copy of SpeakableString?(v2, (char *)&v4 - v4);
  v6 = (void *)(v1 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo);
  v7 = &v9;
  swift_beginAccess();
  outlined assign with take of SpeakableString?(v5, v6);
  swift_endAccess();
  return outlined destroy of SpeakableString?(v8);
}

uint64_t (*PaymentsDialogConcept.Builder.memo.modify())()
{
  swift_beginAccess();
  return PaymentsAppResolutionFlowStrategy.appResolutionService.modify;
}

uint64_t PaymentsDialogConcept.Builder.payeeName.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payeeName);
  swift_beginAccess();
  v3 = *v2;
  swift_retain();
  swift_endAccess();
  return v3;
}

uint64_t PaymentsDialogConcept.Builder.payeeName.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_retain();
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payeeName);
  swift_beginAccess();
  *v3 = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

uint64_t (*PaymentsDialogConcept.Builder.payeeName.modify())()
{
  swift_beginAccess();
  return PaymentsAppResolutionFlowStrategy.appResolutionService.modify;
}

uint64_t PaymentsDialogConcept.Builder.payerName.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payerName);
  swift_beginAccess();
  v3 = *v2;
  swift_retain();
  swift_endAccess();
  return v3;
}

uint64_t PaymentsDialogConcept.Builder.payerName.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_retain();
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payerName);
  swift_beginAccess();
  *v3 = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

uint64_t (*PaymentsDialogConcept.Builder.payerName.modify())()
{
  swift_beginAccess();
  return PaymentsAppResolutionFlowStrategy.appResolutionService.modify;
}

uint64_t PaymentsDialogConcept.Builder.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  *((_QWORD *)v0 + 2) = 0;
  *((_QWORD *)v0 + 3) = 0;
  *((_QWORD *)v0 + 4) = 0;
  v3 = OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo;
  v1 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(&v0[v3], 1);
  result = v4;
  *(_QWORD *)(v4 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payeeName) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payerName) = 0;
  return result;
}

uint64_t PaymentsDialogConcept.Builder.withAmount(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;

  swift_retain();
  swift_retain();
  swift_retain();
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  return v4;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_retain();
  swift_retain();
  if (a1)
  {
    v3 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
    swift_release();
    v4 = v3;
  }
  else
  {
    v4 = 0;
  }
  swift_retain();
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v4;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  return v1;
}

uint64_t PaymentsDialogConcept.Builder.withApp(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;

  swift_retain();
  swift_retain();
  swift_retain();
  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  return v4;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_retain();
  swift_retain();
  if (a1)
  {
    v3 = MEMORY[0x249571E04]();
    swift_release();
    v4 = v3;
  }
  else
  {
    v4 = 0;
  }
  swift_retain();
  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = v4;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  return v1;
}

uint64_t PaymentsDialogConcept.Builder.withFee(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;

  swift_retain();
  swift_retain();
  swift_retain();
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  return v4;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_retain();
  swift_retain();
  if (a1)
  {
    v3 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
    swift_release();
    v4 = v3;
  }
  else
  {
    v4 = 0;
  }
  swift_retain();
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = v4;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  return v1;
}

uint64_t PaymentsDialogConcept.Builder.withMemo(_:)(const void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  char *v10;
  void *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v9 = a1;
  v17 = 0;
  v16 = 0;
  v7 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v10 = (char *)&v6 - v7;
  v8 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v2);
  v13 = (char *)&v6 - v8;
  v17 = v4;
  v16 = v1;
  swift_retain();
  outlined init with copy of SpeakableString?(v9, v13);
  outlined init with copy of SpeakableString?(v13, v10);
  v11 = (void *)(v1 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo);
  v12 = &v15;
  swift_beginAccess();
  outlined assign with take of SpeakableString?(v10, v11);
  swift_endAccess();
  outlined destroy of SpeakableString?((uint64_t)v13);
  swift_release();
  swift_retain();
  return v14;
}

uint64_t PaymentsDialogConcept.Builder.withMemo(print:speak:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v16 = a1;
  v17 = a2;
  v18 = a3;
  v19 = a4;
  v29 = 0;
  v30 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v14 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v13 - v14;
  v15 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v23 = (char *)&v13 - v15;
  v29 = v7;
  v30 = v8;
  v27 = v9;
  v28 = v10;
  v26 = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  SpeakableString.init(print:speak:)();
  v11 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v23, 0, 1);
  outlined init with copy of SpeakableString?(v23, v20);
  v21 = (void *)(v4 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo);
  v22 = &v25;
  swift_beginAccess();
  outlined assign with take of SpeakableString?(v20, v21);
  swift_endAccess();
  outlined destroy of SpeakableString?((uint64_t)v23);
  swift_release();
  swift_retain();
  return v24;
}

uint64_t PaymentsDialogConcept.Builder.withPayeeName(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v5;

  swift_retain();
  swift_retain();
  swift_retain();
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payeeName);
  swift_beginAccess();
  *v3 = a1;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  return v5;
}

uint64_t PaymentsDialogConcept.Builder.withPayerName(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v5;

  swift_retain();
  swift_retain();
  swift_retain();
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payerName);
  swift_beginAccess();
  *v3 = a1;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  return v5;
}

uint64_t PaymentsDialogConcept.Builder.build()()
{
  _QWORD *v1;

  type metadata accessor for PaymentsDialogConcept();
  swift_retain();
  return PaymentsDialogConcept.__allocating_init(builder:)(v1);
}

uint64_t type metadata accessor for PaymentsDialogConcept()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for PaymentsDialogConcept;
  if (!type metadata singleton initialization cache for PaymentsDialogConcept)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t PaymentsDialogConcept.__allocating_init(builder:)(_QWORD *a1)
{
  swift_allocObject();
  return PaymentsDialogConcept.init(builder:)(a1);
}

uint64_t PaymentsDialogConcept.Builder.deinit()
{
  uint64_t v0;
  uint64_t v2;

  outlined destroy of ContiguousArray<A1>();
  outlined destroy of ContiguousArray<A1>();
  outlined destroy of ContiguousArray<A1>();
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo);
  outlined destroy of ContiguousArray<A1>();
  outlined destroy of ContiguousArray<A1>();
  return v2;
}

uint64_t PaymentsDialogConcept.Builder.__deallocating_deinit()
{
  PaymentsDialogConcept.Builder.deinit();
  return swift_deallocClassInstance();
}

uint64_t static PaymentsDialogConcept.catTypeName.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payments.DialogConcept", 0x16uLL, 1)._countAndFlagsBits;
}

uint64_t static PaymentsDialogConcept.isDialogType.getter()
{
  return 0;
}

uint64_t PaymentsDialogConcept.init(builder:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD v5[2];
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;

  v22 = a1;
  v31 = 0;
  v30 = 0;
  v5[0] = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                                 - 8)
                     + 64)
         + 15) & 0xFFFFFFFFFFFFFFF0;
  v13 = (char *)v5 - v5[0];
  v31 = MEMORY[0x24BDAC7A8](v22);
  v30 = v1;
  v1[2] = 0;
  v5[1] = &v29;
  v17 = 32;
  v18 = 0;
  swift_beginAccess();
  v6 = v22[2];
  swift_retain();
  swift_endAccess();
  v1[3] = v6;
  v7 = &v28;
  swift_beginAccess();
  v8 = v22[3];
  swift_retain();
  swift_endAccess();
  v1[4] = v8;
  v9 = &v27;
  swift_beginAccess();
  v10 = v22[4];
  swift_retain();
  swift_endAccess();
  v2 = v22;
  v1[5] = v10;
  v11 = (char *)v2 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo;
  v12 = &v26;
  swift_beginAccess();
  outlined init with copy of SpeakableString?(v11, v13);
  swift_endAccess();
  outlined init with take of SpeakableString?(v13, (char *)v1 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_memo);
  v14 = (_QWORD *)((char *)v22 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payeeName);
  v15 = &v25;
  swift_beginAccess();
  v16 = *v14;
  swift_retain();
  swift_endAccess();
  v3 = v22;
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_payeeName) = v16;
  v19 = (_QWORD *)((char *)v3 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payerName);
  v20 = &v24;
  swift_beginAccess();
  v21 = *v19;
  swift_retain();
  swift_endAccess();
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_payerName) = v21;
  swift_release();
  return v23;
}

void *outlined init with take of SpeakableString?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for SpeakableString();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

Swift::Bool __swiftcall PaymentsDialogConcept.allRequiredInputsHaveValues()()
{
  return 1;
}

uint64_t PaymentsDialogConcept.getProperty(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD v27[2];
  uint64_t v28;
  Swift::String v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  char *v56;
  uint64_t countAndFlagsBits;
  uint64_t v58;
  uint64_t v59;
  void *object;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v53 = a3;
  v58 = a1;
  v59 = a2;
  v75 = 0;
  v76 = 0;
  v74 = 0;
  v55 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v59);
  v56 = (char *)v27 - v55;
  v75 = v5;
  v76 = v4;
  v74 = v3;
  swift_bridgeObjectRetain();
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amount", 6uLL, 1);
  countAndFlagsBits = v6._countAndFlagsBits;
  object = v6._object;
  swift_bridgeObjectRetain();
  v72 = v58;
  v73 = v59;
  v61 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v61 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v52 = v54[3];
    result = swift_retain();
    if (v52)
    {
      v51 = v52;
      v50 = v52;
      result = type metadata accessor for DialogCurrency();
      v8 = v53;
      v9 = v50;
      v53[3] = result;
      *v8 = v9;
    }
    else
    {
      v10 = v53;
      *v53 = 0;
      v10[1] = 0;
      v10[2] = 0;
      v10[3] = 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v48 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
    swift_bridgeObjectRetain();
    v70 = v58;
    v71 = v59;
    v49 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v49 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v47 = v54[4];
      result = swift_retain();
      if (v47)
      {
        v46 = v47;
        v45 = v47;
        result = type metadata accessor for SirikitApp();
        v11 = v53;
        v12 = v45;
        v53[3] = result;
        *v11 = v12;
      }
      else
      {
        v13 = v53;
        *v53 = 0;
        v13[1] = 0;
        v13[2] = 0;
        v13[3] = 0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v43 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("fee", 3uLL, 1);
      swift_bridgeObjectRetain();
      v68 = v58;
      v69 = v59;
      v44 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v44 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v42 = v54[5];
        result = swift_retain();
        if (v42)
        {
          v41 = v42;
          v40 = v42;
          result = type metadata accessor for DialogCurrency();
          v14 = v53;
          v15 = v40;
          v53[3] = result;
          *v14 = v15;
        }
        else
        {
          v16 = v53;
          *v53 = 0;
          v16[1] = 0;
          v16[2] = 0;
          v16[3] = 0;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v38 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("memo", 4uLL, 1);
        swift_bridgeObjectRetain();
        v66 = v58;
        v67 = v59;
        v39 = static String.== infix(_:_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v39 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          outlined init with copy of SpeakableString?((char *)v54 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_memo, v56);
          v36 = type metadata accessor for SpeakableString();
          v37 = *(_QWORD *)(v36 - 8);
          if ((*(unsigned int (**)(char *, uint64_t))(v37 + 48))(v56, 1) == 1)
          {
            result = outlined destroy of SpeakableString?((uint64_t)v56);
            v19 = v53;
            *v53 = 0;
            v19[1] = 0;
            v19[2] = 0;
            v19[3] = 0;
          }
          else
          {
            v17 = v53;
            v53[3] = v36;
            boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
            return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v37 + 32))(boxed_opaque_existential_1, v56, v36);
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v34 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payeeName", 9uLL, 1);
          swift_bridgeObjectRetain();
          v64 = v58;
          v65 = v59;
          v35 = static String.== infix(_:_:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v35 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            v33 = *(_QWORD *)((char *)v54 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_payeeName);
            result = swift_retain();
            if (v33)
            {
              v32 = v33;
              v31 = v33;
              result = type metadata accessor for DialogPerson();
              v20 = v53;
              v21 = v31;
              v53[3] = result;
              *v20 = v21;
            }
            else
            {
              v22 = v53;
              *v53 = 0;
              v22[1] = 0;
              v22[2] = 0;
              v22[3] = 0;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payerName", 9uLL, 1);
            swift_bridgeObjectRetain();
            v62 = v58;
            v63 = v59;
            v30 = static String.== infix(_:_:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v30 & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v28 = *(_QWORD *)((char *)v54 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_payerName);
              result = swift_retain();
              if (v28)
              {
                v27[1] = v28;
                v27[0] = v28;
                result = type metadata accessor for DialogPerson();
                v23 = v53;
                v24 = v27[0];
                v53[3] = result;
                *v23 = v24;
              }
              else
              {
                v25 = v53;
                *v53 = 0;
                v25[1] = 0;
                v25[2] = 0;
                v25[3] = 0;
              }
            }
            else
            {
              result = swift_bridgeObjectRelease();
              v26 = v53;
              *v53 = 0;
              v26[1] = 0;
              v26[2] = 0;
              v26[3] = 0;
            }
          }
        }
      }
    }
  }
  return result;
}

SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional __swiftcall PaymentsDialogConcept.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "amount";
  *(_QWORD *)(v2 + 8) = 6;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "app";
  *(_QWORD *)(v2 + 32) = 3;
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 48) = "fee";
  *(_QWORD *)(v2 + 56) = 3;
  *(_BYTE *)(v2 + 64) = 2;
  *(_QWORD *)(v2 + 72) = "memo";
  *(_QWORD *)(v2 + 80) = 4;
  *(_BYTE *)(v2 + 88) = 2;
  *(_QWORD *)(v2 + 96) = "payeeName";
  *(_QWORD *)(v2 + 104) = 9;
  *(_BYTE *)(v2 + 112) = 2;
  *(_QWORD *)(v2 + 120) = "payerName";
  *(_QWORD *)(v2 + 128) = 9;
  *(_BYTE *)(v2 + 136) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = SiriPaymentsIntents_PaymentsDialogConcept_CodingKeys_amount;
LABEL_14:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = SiriPaymentsIntents_PaymentsDialogConcept_CodingKeys_app;
      goto LABEL_14;
    case 2:
      v7.value = SiriPaymentsIntents_PaymentsDialogConcept_CodingKeys_fee;
      goto LABEL_14;
    case 3:
      v7.value = SiriPaymentsIntents_PaymentsDialogConcept_CodingKeys_memo;
      goto LABEL_14;
    case 4:
      v7.value = SiriPaymentsIntents_PaymentsDialogConcept_CodingKeys_payeeName;
      goto LABEL_14;
    case 5:
      v7.value = SiriPaymentsIntents_PaymentsDialogConcept_CodingKeys_payerName;
      goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional)6;
}

SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional __swiftcall PaymentsDialogConcept.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional v4;

  swift_bridgeObjectRetain();
  v4.value = PaymentsDialogConcept.CodingKeys.init(rawValue:)(stringValue).value;
  swift_bridgeObjectRelease();
  if (v4.value == SiriPaymentsIntents_PaymentsDialogConcept_CodingKeys_unknownDefault)
    return (SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional)6;
  else
    return v4;
}

SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional __swiftcall PaymentsDialogConcept.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional)6;
}

uint64_t PaymentsDialogConcept.CodingKeys.intValue.getter()
{
  return 0;
}

void PaymentsDialogConcept.CodingKeys.rawValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_24710D378()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amount", 6uLL, 1)._countAndFlagsBits;
}

void PaymentsDialogConcept.CodingKeys.stringValue.getter(char a1)
{
  PaymentsDialogConcept.CodingKeys.rawValue.getter(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PaymentsDialogConcept.CodingKeys()
{
  lazy protocol witness table accessor for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsDialogConcept.CodingKeys, &type metadata for PaymentsDialogConcept.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsDialogConcept.CodingKeys, &type metadata for PaymentsDialogConcept.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsDialogConcept.CodingKeys, &type metadata for PaymentsDialogConcept.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsDialogConcept.CodingKeys, &type metadata for PaymentsDialogConcept.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsDialogConcept.CodingKeys, &type metadata for PaymentsDialogConcept.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PaymentsDialogConcept.CodingKeys()
{
  lazy protocol witness table accessor for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PaymentsDialogConcept.CodingKeys()
{
  lazy protocol witness table accessor for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance PaymentsDialogConcept.CodingKeys()
{
  lazy protocol witness table accessor for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys();
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PaymentsDialogConcept.CodingKeys@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional *a2@<X8>)
{
  SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional result;

  result.value = PaymentsDialogConcept.CodingKeys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PaymentsDialogConcept.CodingKeys(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  PaymentsDialogConcept.CodingKeys.rawValue.getter(*v1);
  *a1 = v2;
  a1[1] = v3;
}

void protocol witness for CodingKey.stringValue.getter in conformance PaymentsDialogConcept.CodingKeys()
{
  char *v0;

  PaymentsDialogConcept.CodingKeys.stringValue.getter(*v0);
}

SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance PaymentsDialogConcept.CodingKeys@<W0>(uint64_t a1@<X0>, SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional *a2@<X8>)
{
  SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional result;

  result.value = PaymentsDialogConcept.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance PaymentsDialogConcept.CodingKeys()
{
  return PaymentsDialogConcept.CodingKeys.intValue.getter();
}

SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional protocol witness for CodingKey.init(intValue:) in conformance PaymentsDialogConcept.CodingKeys@<W0>(Swift::Int a1@<X0>, SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional *a2@<X8>)
{
  SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional result;

  result.value = PaymentsDialogConcept.CodingKeys.init(intValue:)(a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PaymentsDialogConcept.CodingKeys()
{
  lazy protocol witness table accessor for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PaymentsDialogConcept.CodingKeys()
{
  lazy protocol witness table accessor for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PaymentsDialogConcept.deinit()
{
  uint64_t v0;
  uint64_t v2;

  outlined destroy of SFRichText?((id *)(v0 + 16));
  outlined destroy of ContiguousArray<A1>();
  outlined destroy of ContiguousArray<A1>();
  outlined destroy of ContiguousArray<A1>();
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_memo);
  outlined destroy of ContiguousArray<A1>();
  outlined destroy of ContiguousArray<A1>();
  return v2;
}

uint64_t PaymentsDialogConcept.__deallocating_deinit()
{
  PaymentsDialogConcept.deinit();
  return swift_deallocClassInstance();
}

uint64_t PaymentsDialogConcept.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  _BYTE v64[2];
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;

  v44 = a1;
  v71 = 0;
  v70 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v42 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v43 = (char *)v13 - v42;
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PaymentsDialogConcept.CodingKeys>);
  v45 = *(_QWORD *)(v53 - 8);
  v46 = (*(_QWORD *)(v45 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = (_QWORD *)MEMORY[0x24BDAC7A8](v44);
  v49 = (char *)v13 - v46;
  v71 = v3;
  v70 = v1;
  v47 = v3[3];
  v48 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v47);
  lazy protocol witness table accessor for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v51 = v50[3];
  swift_retain();
  v56 = &v69;
  v69 = v51;
  v52 = &v68;
  v68 = 0;
  v54 = type metadata accessor for DialogCurrency();
  v4 = lazy protocol witness table accessor for type DialogCurrency and conformance DialogAbstractMeasurement();
  v5 = v55;
  v57 = v4;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v58 = v5;
  v59 = v5;
  if (v5)
  {
    v17 = v59;
    outlined destroy of ContiguousArray<A1>();
    result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v49, v53);
    v18 = v17;
  }
  else
  {
    outlined destroy of ContiguousArray<A1>();
    v36 = v50[4];
    swift_retain();
    v39 = &v67;
    v67 = v36;
    v37 = &v66;
    v66 = 1;
    v38 = type metadata accessor for SirikitApp();
    lazy protocol witness table accessor for type SirikitApp and conformance SirikitApp();
    v6 = v58;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v40 = v6;
    v41 = v6;
    if (v6)
    {
      v16 = v41;
      outlined destroy of ContiguousArray<A1>();
      result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v49, v53);
      v18 = v16;
    }
    else
    {
      outlined destroy of ContiguousArray<A1>();
      v7 = v40;
      v33 = v50[5];
      swift_retain();
      v65 = v33;
      v64[1] = 2;
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
      v34 = v7;
      v35 = v7;
      if (v7)
      {
        v15 = v35;
        outlined destroy of ContiguousArray<A1>();
        result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v49, v53);
        v18 = v15;
      }
      else
      {
        outlined destroy of ContiguousArray<A1>();
        outlined init with copy of SpeakableString?((char *)v50 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_memo, v43);
        v29 = v64;
        v64[0] = 3;
        v30 = type metadata accessor for SpeakableString();
        lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString();
        v8 = v34;
        KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
        v31 = v8;
        v32 = v8;
        if (v8)
        {
          v14 = v32;
          outlined destroy of SpeakableString?((uint64_t)v43);
          result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v49, v53);
          v18 = v14;
        }
        else
        {
          outlined destroy of SpeakableString?((uint64_t)v43);
          v22 = *(_QWORD *)((char *)v50 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_payeeName);
          swift_retain();
          v25 = &v63;
          v63 = v22;
          v23 = &v62;
          v62 = 4;
          v24 = type metadata accessor for DialogPerson();
          v9 = lazy protocol witness table accessor for type DialogPerson and conformance DialogPerson();
          v10 = v31;
          v26 = v9;
          KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
          v27 = v10;
          v28 = v10;
          if (v10)
          {
            v13[1] = v28;
            outlined destroy of ContiguousArray<A1>();
            return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v49, v53);
          }
          else
          {
            outlined destroy of ContiguousArray<A1>();
            v11 = v27;
            v19 = *(_QWORD *)((char *)v50 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_payerName);
            swift_retain();
            v61 = v19;
            v60 = 5;
            KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
            v20 = v11;
            v21 = v11;
            if (v11)
              v13[0] = v21;
            outlined destroy of ContiguousArray<A1>();
            return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v49, v53);
          }
        }
      }
    }
  }
  return result;
}

uint64_t PaymentsDialogConcept.__allocating_init(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_allocObject();
  v5 = PaymentsDialogConcept.init(from:)(a1);
  if (v3)
    return v2;
  else
    return v5;
}

uint64_t PaymentsDialogConcept.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[6];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  _BYTE v60[2];
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char v68;

  v46 = a1;
  v67 = 0;
  v66 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v44 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v45 = (char *)v15 - v44;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PaymentsDialogConcept.CodingKeys>);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = (*(_QWORD *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = (_QWORD *)MEMORY[0x24BDAC7A8](v46);
  v50 = (char *)v15 - v49;
  v67 = v3;
  v66 = v1;
  v68 = 1;
  *(_QWORD *)(v1 + 16) = 0;
  v52 = v3[3];
  v53 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v52);
  lazy protocol witness table accessor for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys();
  v4 = v51;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v54 = v4;
  v55 = v4;
  if (v4)
  {
    v20 = v55;
  }
  else
  {
    v39 = type metadata accessor for DialogCurrency();
    v38 = &v64;
    v64 = 0;
    v5 = lazy protocol witness table accessor for type DialogCurrency and conformance DialogAbstractMeasurement();
    v6 = v54;
    v40 = v5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v41 = v6;
    v42 = v6;
    if (v6)
    {
      v19 = v42;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v47);
      v20 = v19;
    }
    else
    {
      v68 = 3;
      *(_QWORD *)(v43 + 24) = v65;
      v35 = type metadata accessor for SirikitApp();
      v34 = &v62;
      v62 = 1;
      lazy protocol witness table accessor for type SirikitApp and conformance SirikitApp();
      v7 = v41;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      v36 = v7;
      v37 = v7;
      if (v7)
      {
        v18 = v37;
        (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v47);
        v20 = v18;
      }
      else
      {
        v68 = 7;
        *(_QWORD *)(v43 + 32) = v63;
        v60[1] = 2;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
        v32 = 0;
        v33 = 0;
        v68 = 15;
        *(_QWORD *)(v43 + 40) = v61;
        v29 = type metadata accessor for SpeakableString();
        v28 = v60;
        v60[0] = 3;
        lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString();
        v8 = v32;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
        v30 = v8;
        v31 = v8;
        if (v8)
        {
          v17 = v31;
          (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v47);
          v20 = v17;
        }
        else
        {
          v68 = 31;
          outlined init with take of SpeakableString?(v45, (void *)(v43 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_memo));
          v24 = type metadata accessor for DialogPerson();
          v23 = &v58;
          v58 = 4;
          v9 = lazy protocol witness table accessor for type DialogPerson and conformance DialogPerson();
          v10 = v30;
          v25 = v9;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          v26 = v10;
          v27 = v10;
          if (!v10)
          {
            v68 = 63;
            *(_QWORD *)(v43 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_payeeName) = v59;
            v56 = 5;
            KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
            v21 = 0;
            v22 = 0;
            v11 = v47;
            v12 = v50;
            v13 = v48;
            v68 = 127;
            *(_QWORD *)(v43 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_payerName) = v57;
            (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v11);
            __swift_destroy_boxed_opaque_existential_0(v46);
            return v43;
          }
          v16 = v27;
          (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v47);
          v20 = v16;
        }
      }
    }
  }
  v15[4] = v20;
  if ((v68 & 0x7F) == 0x7F)
  {
    swift_release();
  }
  else
  {
    outlined destroy of SFRichText?((id *)(v43 + 16));
    if ((v68 & 2) != 0)
      outlined destroy of ContiguousArray<A1>();
    if ((v68 & 4) != 0)
      outlined destroy of ContiguousArray<A1>();
    if ((v68 & 8) != 0)
      outlined destroy of ContiguousArray<A1>();
    if ((v68 & 0x10) != 0)
      outlined destroy of SpeakableString?(v43 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_memo);
    if ((v68 & 0x20) != 0)
      outlined destroy of ContiguousArray<A1>();
    v15[3] = v43;
    v15[2] = v43;
    type metadata accessor for PaymentsDialogConcept();
    swift_deallocPartialClassInstance();
  }
  __swift_destroy_boxed_opaque_existential_0(v46);
  return v15[1];
}

uint64_t protocol witness for CATType.toDictionary.getter in conformance PaymentsDialogConcept()
{
  return CATType.toDictionary.getter();
}

uint64_t protocol witness for static CATType.catTypeName.getter in conformance PaymentsDialogConcept()
{
  return static PaymentsDialogConcept.catTypeName.getter();
}

uint64_t protocol witness for static CATType.isDialogType.getter in conformance PaymentsDialogConcept()
{
  return static PaymentsDialogConcept.isDialogType.getter() & 1;
}

void *protocol witness for CATType.mockGlobals.getter in conformance PaymentsDialogConcept()
{
  return TCCHandleStrategy.previousIntent.getter();
}

void protocol witness for CATType.mockGlobals.setter in conformance PaymentsDialogConcept(void *a1)
{
  TCCHandleStrategy.previousIntent.setter(a1);
}

void (*protocol witness for CATType.mockGlobals.modify in conformance PaymentsDialogConcept(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = TCCHandleStrategy.previousIntent.modify();
  return protocol witness for CATType.mockGlobals.modify in conformance PaymentsDialogConcept;
}

void protocol witness for CATType.mockGlobals.modify in conformance PaymentsDialogConcept(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for CATType.getProperty(_:) in conformance PaymentsDialogConcept@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return PaymentsDialogConcept.getProperty(_:)(a1, a2, a3);
}

uint64_t ObjC metadata update function for PaymentsDialogConcept()
{
  return type metadata accessor for PaymentsDialogConcept();
}

uint64_t type metadata completion function for PaymentsDialogConcept()
{
  unint64_t v0;
  uint64_t updated;

  updated = type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F)
  {
    updated = swift_updateClassMetadata2();
    if (!updated)
      return 0;
  }
  return updated;
}

uint64_t type metadata accessor for SpeakableString?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for SpeakableString?;
  if (!lazy cache variable for type metadata for SpeakableString?)
  {
    type metadata accessor for SpeakableString();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for SpeakableString?);
      return v1;
    }
  }
  return v4;
}

uint64_t ObjC metadata update function for PaymentsDialogConcept.Builder()
{
  return type metadata accessor for PaymentsDialogConcept.Builder();
}

uint64_t type metadata accessor for PaymentsDialogConcept.Builder()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for PaymentsDialogConcept.Builder;
  if (!type metadata singleton initialization cache for PaymentsDialogConcept.Builder)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for PaymentsDialogConcept.Builder()
{
  unint64_t v0;
  uint64_t updated;

  updated = type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F)
  {
    updated = swift_updateClassMetadata2();
    if (!updated)
      return 0;
  }
  return updated;
}

uint64_t getEnumTagSinglePayload for PaymentsDialogConcept.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFA)
      goto LABEL_15;
    v7 = ((a2 + 5) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 250;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 6;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for PaymentsDialogConcept.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFA)
  {
    v5 = ((a3 + 5) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFA)
  {
    v4 = ((a2 - 251) >> 8) + 1;
    *result = a2 + 5;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 5;
  }
  return result;
}

ValueMetadata *type metadata accessor for PaymentsDialogConcept.CodingKeys()
{
  return &type metadata for PaymentsDialogConcept.CodingKeys;
}

unint64_t base witness table accessor for Equatable in PaymentsDialogConcept.CodingKeys()
{
  return lazy protocol witness table accessor for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PaymentsDialogConcept@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = PaymentsDialogConcept.__allocating_init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PaymentsDialogConcept(uint64_t a1)
{
  return PaymentsDialogConcept.encode(to:)(a1);
}

unint64_t base witness table accessor for Decodable in PaymentsDialogConcept()
{
  return lazy protocol witness table accessor for type PaymentsDialogConcept and conformance PaymentsDialogConcept();
}

unint64_t lazy protocol witness table accessor for type PaymentsDialogConcept and conformance PaymentsDialogConcept()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type PaymentsDialogConcept and conformance PaymentsDialogConcept;
  if (!lazy protocol witness table cache variable for type PaymentsDialogConcept and conformance PaymentsDialogConcept)
  {
    v0 = type metadata accessor for PaymentsDialogConcept();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsDialogConcept, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDialogConcept and conformance PaymentsDialogConcept);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type PaymentsDialogConcept and conformance PaymentsDialogConcept;
  if (!lazy protocol witness table cache variable for type PaymentsDialogConcept and conformance PaymentsDialogConcept)
  {
    v0 = type metadata accessor for PaymentsDialogConcept();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsDialogConcept, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDialogConcept and conformance PaymentsDialogConcept);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Encodable in PaymentsDialogConcept()
{
  return lazy protocol witness table accessor for type PaymentsDialogConcept and conformance PaymentsDialogConcept();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in PaymentsDialogConcept.CodingKeys()
{
  return lazy protocol witness table accessor for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in PaymentsDialogConcept.CodingKeys()
{
  return lazy protocol witness table accessor for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys();
}

unint64_t lazy protocol witness table accessor for type DialogCurrency and conformance DialogAbstractMeasurement()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type DialogCurrency and conformance DialogAbstractMeasurement;
  if (!lazy protocol witness table cache variable for type DialogCurrency and conformance DialogAbstractMeasurement)
  {
    v0 = type metadata accessor for DialogCurrency();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BE923C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type DialogCurrency and conformance DialogAbstractMeasurement);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type DialogCurrency and conformance DialogAbstractMeasurement;
  if (!lazy protocol witness table cache variable for type DialogCurrency and conformance DialogAbstractMeasurement)
  {
    v0 = type metadata accessor for DialogCurrency();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BE923C0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type DialogCurrency and conformance DialogAbstractMeasurement);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type SirikitApp and conformance SirikitApp()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SirikitApp and conformance SirikitApp;
  if (!lazy protocol witness table cache variable for type SirikitApp and conformance SirikitApp)
  {
    v0 = type metadata accessor for SirikitApp();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BE92910], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SirikitApp and conformance SirikitApp);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SirikitApp and conformance SirikitApp;
  if (!lazy protocol witness table cache variable for type SirikitApp and conformance SirikitApp)
  {
    v0 = type metadata accessor for SirikitApp();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BE92908], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SirikitApp and conformance SirikitApp);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString;
  if (!lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString)
  {
    v0 = type metadata accessor for SpeakableString();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BE929E8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString;
  if (!lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString)
  {
    v0 = type metadata accessor for SpeakableString();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BE929D8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type DialogPerson and conformance DialogPerson()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type DialogPerson and conformance DialogPerson;
  if (!lazy protocol witness table cache variable for type DialogPerson and conformance DialogPerson)
  {
    v0 = type metadata accessor for DialogPerson();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BE925A8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type DialogPerson and conformance DialogPerson);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type DialogPerson and conformance DialogPerson;
  if (!lazy protocol witness table cache variable for type DialogPerson and conformance DialogPerson)
  {
    v0 = type metadata accessor for DialogPerson();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BE925A0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type DialogPerson and conformance DialogPerson);
    return v1;
  }
  return v3;
}

uint64_t RequestPaymentSlots.rawValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payer", 5uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("currencyAmount", 0xEuLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("note", 4uLL, 1)._countAndFlagsBits;
}

uint64_t SendPaymentSlots.rawValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payee", 5uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("currencyAmount", 0xEuLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("note", 4uLL, 1)._countAndFlagsBits;
}

SiriPaymentsIntents::RequestPaymentSlots_optional __swiftcall RequestPaymentSlots.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  SiriPaymentsIntents::RequestPaymentSlots_optional v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "payer";
  *(_QWORD *)(v2 + 8) = 5;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "currencyAmount";
  *(_QWORD *)(v2 + 32) = 14;
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 48) = "note";
  *(_QWORD *)(v2 + 56) = 4;
  *(_BYTE *)(v2 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = SiriPaymentsIntents_RequestPaymentSlots_payer;
LABEL_8:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = SiriPaymentsIntents_RequestPaymentSlots_currencyAmount;
      goto LABEL_8;
    case 2:
      v7.value = SiriPaymentsIntents_RequestPaymentSlots_note;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::RequestPaymentSlots_optional)3;
}

SiriPaymentsIntents::SendPaymentSlots_optional __swiftcall SendPaymentSlots.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  SiriPaymentsIntents::SendPaymentSlots_optional v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "payee";
  *(_QWORD *)(v2 + 8) = 5;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "currencyAmount";
  *(_QWORD *)(v2 + 32) = 14;
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 48) = "note";
  *(_QWORD *)(v2 + 56) = 4;
  *(_BYTE *)(v2 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = SiriPaymentsIntents_SendPaymentSlots_payee;
LABEL_8:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = SiriPaymentsIntents_SendPaymentSlots_currencyAmount;
      goto LABEL_8;
    case 2:
      v7.value = SiriPaymentsIntents_SendPaymentSlots_note;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::SendPaymentSlots_optional)3;
}

SiriPaymentsIntents::SearchForAccountsSlots_optional __swiftcall SearchForAccountsSlots.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  SiriPaymentsIntents::SearchForAccountsSlots_optional v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "accountNickname";
  *(_QWORD *)(v2 + 8) = 15;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "accountType";
  *(_QWORD *)(v2 + 32) = 11;
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 48) = "organizationName";
  *(_QWORD *)(v2 + 56) = 16;
  *(_BYTE *)(v2 + 64) = 2;
  *(_QWORD *)(v2 + 72) = "requestedBalanceType";
  *(_QWORD *)(v2 + 80) = 20;
  *(_BYTE *)(v2 + 88) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = SiriPaymentsIntents_SearchForAccountsSlots_accountNickname;
LABEL_10:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = SiriPaymentsIntents_SearchForAccountsSlots_accountType;
      goto LABEL_10;
    case 2:
      v7.value = SiriPaymentsIntents_SearchForAccountsSlots_organizationName;
      goto LABEL_10;
    case 3:
      v7.value = SiriPaymentsIntents_SearchForAccountsSlots_requestedBalanceType;
      goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::SearchForAccountsSlots_optional)4;
}

void SearchForAccountsSlots.rawValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_24710FC70()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNickname", 0xFuLL, 1)._countAndFlagsBits;
}

id Slot<>.slotDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v10;
  void *v11;
  id v12;
  id v13;

  (*(void (**)(void))(a2 + 8))();
  v10 = SAUIAppPunchOut.__allocating_init()();
  v12 = objc_msgSend(v10, sel__intentInstanceDescription);

  dispatch thunk of RawRepresentable.rawValue.getter();
  v11 = (void *)MEMORY[0x24957220C]();
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v12, sel_slotByName_, v11);

  if (!v13)
  {
    (*(void (**)(void))(a2 + 8))();
    v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_typeName);
    if (v8)
    {
      v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v5 = v3;

      v6 = v4;
      v7 = v5;
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    if (v7)
    {
      PaymentsError.errorDescription.getter();
      outlined consume of PaymentsError(v6, v7, 0, 0, 0, 0, 0xBu);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x247110030);
  }
  return v13;
}

uint64_t Slot<>.propertyName.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v9 = (void *)(*(uint64_t (**)(void))(a2 + 24))();
  v10 = objc_msgSend(v9, sel_facadePropertyName);
  if (v10)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v2;

    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }

  if (v8)
    return v7;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return v4;
}

uint64_t SendPaymentSlots.canonicalName.getter(char a1)
{
  Swift::String v1;
  Swift::String v2;

  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.nl.", 0x12uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  SendPaymentSlots.rawValue.getter(a1);
  String.firstLetterCapitalized()();
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  return String.init(stringInterpolation:)();
}

uint64_t static SendPaymentSlots.allCases.getter()
{
  uint64_t result;
  _BYTE *v1;

  result = _allocateUninitializedArray<A>(_:)();
  *v1 = 0;
  v1[1] = 1;
  v1[2] = 2;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SendPaymentSlots()
{
  lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SendPaymentSlots and conformance SendPaymentSlots;
  if (!lazy protocol witness table cache variable for type SendPaymentSlots and conformance SendPaymentSlots)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SendPaymentSlots, &type metadata for SendPaymentSlots);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentSlots and conformance SendPaymentSlots);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SendPaymentSlots and conformance SendPaymentSlots;
  if (!lazy protocol witness table cache variable for type SendPaymentSlots and conformance SendPaymentSlots)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SendPaymentSlots, &type metadata for SendPaymentSlots);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentSlots and conformance SendPaymentSlots);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SendPaymentSlots and conformance SendPaymentSlots;
  if (!lazy protocol witness table cache variable for type SendPaymentSlots and conformance SendPaymentSlots)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SendPaymentSlots, &type metadata for SendPaymentSlots);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentSlots and conformance SendPaymentSlots);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SendPaymentSlots()
{
  lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SendPaymentSlots()
{
  lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance SendPaymentSlots()
{
  lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::SendPaymentSlots_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SendPaymentSlots@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::SendPaymentSlots_optional *a2@<X8>)
{
  SiriPaymentsIntents::SendPaymentSlots_optional result;

  result.value = SendPaymentSlots.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SendPaymentSlots@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v3;

  result = SendPaymentSlots.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t protocol witness for static Slot.intentType.getter in conformance SendPaymentSlots()
{
  return implicit closure #1 in PayeeDisambiguationStrategy.init()();
}

SiriPaymentsIntents::SendPaymentSlots_optional protocol witness for Slot.init(rawValue:) in conformance SendPaymentSlots@<W0>(uint64_t a1@<X0>, SiriPaymentsIntents::SendPaymentSlots_optional *a2@<X8>)
{
  SiriPaymentsIntents::SendPaymentSlots_optional result;

  result.value = SendPaymentSlots.init(rawValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

id protocol witness for Slot.slotDescription.getter in conformance SendPaymentSlots(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
  lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
  return Slot<>.slotDescription.getter(a1, a2);
}

uint64_t protocol witness for Slot.propertyName.getter in conformance SendPaymentSlots(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
  lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
  return Slot<>.propertyName.getter(a1, a2);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance SendPaymentSlots@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static SendPaymentSlots.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t RequestPaymentSlots.canonicalName.getter(char a1)
{
  Swift::String v1;
  Swift::String v2;

  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.nl.", 0x12uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  RequestPaymentSlots.rawValue.getter(a1);
  String.firstLetterCapitalized()();
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  return String.init(stringInterpolation:)();
}

uint64_t static RequestPaymentSlots.allCases.getter()
{
  uint64_t result;
  _BYTE *v1;

  result = _allocateUninitializedArray<A>(_:)();
  *v1 = 0;
  v1[1] = 1;
  v1[2] = 2;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RequestPaymentSlots()
{
  lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RequestPaymentSlots and conformance RequestPaymentSlots;
  if (!lazy protocol witness table cache variable for type RequestPaymentSlots and conformance RequestPaymentSlots)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for RequestPaymentSlots, &type metadata for RequestPaymentSlots);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentSlots and conformance RequestPaymentSlots);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RequestPaymentSlots and conformance RequestPaymentSlots;
  if (!lazy protocol witness table cache variable for type RequestPaymentSlots and conformance RequestPaymentSlots)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for RequestPaymentSlots, &type metadata for RequestPaymentSlots);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentSlots and conformance RequestPaymentSlots);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RequestPaymentSlots and conformance RequestPaymentSlots;
  if (!lazy protocol witness table cache variable for type RequestPaymentSlots and conformance RequestPaymentSlots)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for RequestPaymentSlots, &type metadata for RequestPaymentSlots);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentSlots and conformance RequestPaymentSlots);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RequestPaymentSlots()
{
  lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RequestPaymentSlots()
{
  lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance RequestPaymentSlots()
{
  lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::RequestPaymentSlots_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RequestPaymentSlots@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::RequestPaymentSlots_optional *a2@<X8>)
{
  SiriPaymentsIntents::RequestPaymentSlots_optional result;

  result.value = RequestPaymentSlots.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RequestPaymentSlots@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v3;

  result = RequestPaymentSlots.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t protocol witness for static Slot.intentType.getter in conformance RequestPaymentSlots()
{
  return implicit closure #1 in PayerDisambiguationStrategy.init()();
}

SiriPaymentsIntents::RequestPaymentSlots_optional protocol witness for Slot.init(rawValue:) in conformance RequestPaymentSlots@<W0>(uint64_t a1@<X0>, SiriPaymentsIntents::RequestPaymentSlots_optional *a2@<X8>)
{
  SiriPaymentsIntents::RequestPaymentSlots_optional result;

  result.value = RequestPaymentSlots.init(rawValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

id protocol witness for Slot.slotDescription.getter in conformance RequestPaymentSlots(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
  lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
  return Slot<>.slotDescription.getter(a1, a2);
}

uint64_t protocol witness for Slot.propertyName.getter in conformance RequestPaymentSlots(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
  lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
  return Slot<>.propertyName.getter(a1, a2);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance RequestPaymentSlots@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static RequestPaymentSlots.allCases.getter();
  *a1 = result;
  return result;
}

unint64_t static SearchForAccountsSlots.intentType.getter()
{
  return type metadata accessor for INSearchForAccountsIntent();
}

uint64_t SearchForAccountsSlots.canonicalName.getter(char a1)
{
  Swift::String v1;
  Swift::String v2;

  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.nl.", 0x12uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  SearchForAccountsSlots.rawValue.getter(a1);
  String.firstLetterCapitalized()();
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  return String.init(stringInterpolation:)();
}

uint64_t static SearchForAccountsSlots.allCases.getter()
{
  uint64_t result;
  _BYTE *v1;

  result = _allocateUninitializedArray<A>(_:)();
  *v1 = 0;
  v1[1] = 1;
  v1[2] = 2;
  v1[3] = 3;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SearchForAccountsSlots()
{
  lazy protocol witness table accessor for type SearchForAccountsSlots and conformance SearchForAccountsSlots();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type SearchForAccountsSlots and conformance SearchForAccountsSlots()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SearchForAccountsSlots and conformance SearchForAccountsSlots;
  if (!lazy protocol witness table cache variable for type SearchForAccountsSlots and conformance SearchForAccountsSlots)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SearchForAccountsSlots, &type metadata for SearchForAccountsSlots);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsSlots and conformance SearchForAccountsSlots);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SearchForAccountsSlots and conformance SearchForAccountsSlots;
  if (!lazy protocol witness table cache variable for type SearchForAccountsSlots and conformance SearchForAccountsSlots)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SearchForAccountsSlots, &type metadata for SearchForAccountsSlots);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsSlots and conformance SearchForAccountsSlots);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SearchForAccountsSlots and conformance SearchForAccountsSlots;
  if (!lazy protocol witness table cache variable for type SearchForAccountsSlots and conformance SearchForAccountsSlots)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SearchForAccountsSlots, &type metadata for SearchForAccountsSlots);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsSlots and conformance SearchForAccountsSlots);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SearchForAccountsSlots()
{
  lazy protocol witness table accessor for type SearchForAccountsSlots and conformance SearchForAccountsSlots();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SearchForAccountsSlots()
{
  lazy protocol witness table accessor for type SearchForAccountsSlots and conformance SearchForAccountsSlots();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance SearchForAccountsSlots()
{
  lazy protocol witness table accessor for type SearchForAccountsSlots and conformance SearchForAccountsSlots();
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::SearchForAccountsSlots_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchForAccountsSlots@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::SearchForAccountsSlots_optional *a2@<X8>)
{
  SiriPaymentsIntents::SearchForAccountsSlots_optional result;

  result.value = SearchForAccountsSlots.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SearchForAccountsSlots(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  SearchForAccountsSlots.rawValue.getter(*v1);
  *a1 = v2;
  a1[1] = v3;
}

unint64_t protocol witness for static Slot.intentType.getter in conformance SearchForAccountsSlots()
{
  return static SearchForAccountsSlots.intentType.getter();
}

SiriPaymentsIntents::SearchForAccountsSlots_optional protocol witness for Slot.init(rawValue:) in conformance SearchForAccountsSlots@<W0>(uint64_t a1@<X0>, SiriPaymentsIntents::SearchForAccountsSlots_optional *a2@<X8>)
{
  SiriPaymentsIntents::SearchForAccountsSlots_optional result;

  result.value = SearchForAccountsSlots.init(rawValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

id protocol witness for Slot.slotDescription.getter in conformance SearchForAccountsSlots(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type SearchForAccountsSlots and conformance SearchForAccountsSlots();
  lazy protocol witness table accessor for type SearchForAccountsSlots and conformance SearchForAccountsSlots();
  return Slot<>.slotDescription.getter(a1, a2);
}

uint64_t protocol witness for Slot.propertyName.getter in conformance SearchForAccountsSlots(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type SearchForAccountsSlots and conformance SearchForAccountsSlots();
  lazy protocol witness table accessor for type SearchForAccountsSlots and conformance SearchForAccountsSlots();
  return Slot<>.propertyName.getter(a1, a2);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance SearchForAccountsSlots@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static SearchForAccountsSlots.allCases.getter();
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for SendPaymentSlots()
{
  return &type metadata for SendPaymentSlots;
}

ValueMetadata *type metadata accessor for RequestPaymentSlots()
{
  return &type metadata for RequestPaymentSlots;
}

uint64_t getEnumTagSinglePayload for SearchForAccountsSlots(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFC)
      goto LABEL_15;
    v7 = ((a2 + 3) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 4;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for SearchForAccountsSlots(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFC)
  {
    v5 = ((a3 + 3) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFC)
  {
    v4 = ((a2 - 253) >> 8) + 1;
    *result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchForAccountsSlots()
{
  return &type metadata for SearchForAccountsSlots;
}

unint64_t base witness table accessor for Equatable in SearchForAccountsSlots()
{
  return lazy protocol witness table accessor for type SearchForAccountsSlots and conformance SearchForAccountsSlots();
}

unint64_t base witness table accessor for Equatable in RequestPaymentSlots()
{
  return lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
}

unint64_t base witness table accessor for Equatable in SendPaymentSlots()
{
  return lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SearchForAccountsSlots()
{
  return lazy protocol witness table accessor for type [SearchForAccountsSlots] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [SearchForAccountsSlots] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [SearchForAccountsSlots] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SearchForAccountsSlots] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SearchForAccountsSlots]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [SearchForAccountsSlots] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [SearchForAccountsSlots] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SearchForAccountsSlots] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SearchForAccountsSlots]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [SearchForAccountsSlots] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in RequestPaymentSlots()
{
  return lazy protocol witness table accessor for type [RequestPaymentSlots] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [RequestPaymentSlots] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [RequestPaymentSlots] and conformance [A];
  if (!lazy protocol witness table cache variable for type [RequestPaymentSlots] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RequestPaymentSlots]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [RequestPaymentSlots] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [RequestPaymentSlots] and conformance [A];
  if (!lazy protocol witness table cache variable for type [RequestPaymentSlots] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RequestPaymentSlots]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [RequestPaymentSlots] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SendPaymentSlots()
{
  return lazy protocol witness table accessor for type [SendPaymentSlots] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [SendPaymentSlots] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [SendPaymentSlots] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SendPaymentSlots] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SendPaymentSlots]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [SendPaymentSlots] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [SendPaymentSlots] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SendPaymentSlots] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SendPaymentSlots]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [SendPaymentSlots] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t Optional<A>.isNilOrEmpty.getter(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  char v6;

  swift_bridgeObjectRetain();
  if (a2)
  {
    v3 = String.isEmpty.getter();
    swift_bridgeObjectRelease();
    v4 = v3 & 1;
  }
  else
  {
    v4 = 2;
  }
  if (v4 == 2)
    v6 = 1;
  else
    v6 = v4 & 1;
  return v6 & 1;
}

uint64_t Optional<A>.emptyToNil.getter(uint64_t a1, uint64_t a2)
{
  if ((Optional<A>.isNilOrEmpty.getter(a1, a2) & 1) != 0)
    return 0;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t Optional<A>.isNilOrEmpty.getter(uint64_t a1)
{
  char v2;
  char v3;
  char v5;

  swift_bridgeObjectRetain();
  if (a1)
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPaymentAccount]);
    lazy protocol witness table accessor for type [INPaymentAccount] and conformance [A]();
    v2 = Collection.isEmpty.getter();
    outlined destroy of [SFCardSection]();
    swift_bridgeObjectRelease();
    v3 = v2 & 1;
  }
  else
  {
    v3 = 2;
  }
  if (v3 == 2)
    v5 = 1;
  else
    v5 = v3 & 1;
  return v5 & 1;
}

uint64_t Optional<A>.emptyToNil.getter(uint64_t a1)
{
  if ((Optional<A>.isNilOrEmpty.getter(a1) & 1) != 0)
    return 0;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t SendPaymentUnsupportedValueStrategy.__allocating_init()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[5];
  _QWORD v29[5];
  _BYTE v30[40];
  uint64_t v31;
  _BYTE v32[40];
  char v33;
  char v34;
  char v35;
  uint64_t v36[5];
  _QWORD v37[6];

  v31 = 0;
  v17 = 0;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v16 = (char *)&v6 - v7;
  v12 = type metadata accessor for Globals();
  v8 = v36;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v36);
  v9 = &v35;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v10 = &v34;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v11 = &v33;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  v25 = v37;
  v37[3] = v12;
  v37[4] = &protocol witness table for Globals;
  v37[0] = v0;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse>);
  v15 = v32;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v32);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v14 = CATWrapper.__allocating_init(options:globals:)();
  v13 = type metadata accessor for INSendPaymentIntent();
  v1 = type metadata accessor for INSendPaymentIntentResponse();
  v2 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v1);
  v24 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v15, v14, v2);
  v31 = v24;
  v23 = v30;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v30);
  type metadata accessor for SendPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v18 = CATWrapper.__allocating_init(options:globals:)();
  NSJSONWritingOptions.init(rawValue:)(v18);
  v19 = v29;
  v29[3] = &type metadata for CommonLabelsProvider;
  v29[4] = &protocol witness table for CommonLabelsProvider;
  v3 = type metadata accessor for SiriKitContactResolver();
  v20 = v28;
  v28[3] = v3;
  v28[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v28);
  SiriKitContactResolver.init()();
  swift_retain();
  v21 = &v27;
  v27 = v24;
  v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  v26 = SearchForAccountsContinueInAppStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v23, v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v21, v22, v4);
  swift_retain();
  v37[5] = v26;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  swift_release();
  return v26;
}

uint64_t SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 624) = v2;
  *(_QWORD *)(v3 + 616) = a2;
  *(_QWORD *)(v3 + 608) = a1;
  *(_QWORD *)(v3 + 488) = v3;
  *(_QWORD *)(v3 + 496) = 0;
  *(_QWORD *)(v3 + 504) = 0;
  *(_BYTE *)(v3 + 880) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 472) = 0;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 560) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);
  *(_QWORD *)(v3 + 632) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 640) = v5;
  *(_QWORD *)(v3 + 648) = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v3 + 656) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v3 + 664) = swift_task_alloc();
  *(_QWORD *)(v3 + 672) = swift_task_alloc();
  *(_QWORD *)(v3 + 680) = swift_task_alloc();
  type metadata accessor for Locale();
  *(_QWORD *)(v3 + 688) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(_QWORD *)(v3 + 696) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  *(_QWORD *)(v3 + 704) = swift_task_alloc();
  v6 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v3 + 712) = v6;
  *(_QWORD *)(v3 + 720) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 728) = swift_task_alloc();
  *(_QWORD *)(v3 + 736) = swift_task_alloc();
  v7 = type metadata accessor for ParameterIdentifier();
  *(_QWORD *)(v3 + 744) = v7;
  *(_QWORD *)(v3 + 752) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 760) = swift_task_alloc();
  v8 = type metadata accessor for Logger();
  *(_QWORD *)(v3 + 768) = v8;
  *(_QWORD *)(v3 + 776) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 784) = swift_task_alloc();
  *(_QWORD *)(v3 + 792) = swift_task_alloc();
  *(_QWORD *)(v3 + 496) = a2;
  *(_QWORD *)(v3 + 504) = v2;
  return swift_task_switch();
}

uint64_t SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  SiriPaymentsIntents::SendPaymentSlots_optional v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *buf;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32_t size;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  NSObject *oslog;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  Swift::String rawValue;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint32_t v59;
  os_log_type_t v60;
  NSObject *v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;

  v1 = *(_QWORD *)(v0 + 792);
  v56 = *(_QWORD *)(v0 + 776);
  v57 = *(_QWORD *)(v0 + 768);
  *(_QWORD *)(v0 + 488) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16);
  v58(v1, v2, v57);
  v61 = Logger.logObject.getter();
  v60 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 512) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v59 = *(_DWORD *)(v0 + 884);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v62 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v61, v60))
  {
    v51 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v52 = createStorage<A>(capacity:type:)(0);
    v53 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v55 + 576) = v51;
    *(_QWORD *)(v55 + 584) = v52;
    *(_QWORD *)(v55 + 592) = v53;
    serialize(_:at:)(0, (_BYTE **)(v55 + 576));
    serialize(_:at:)(0, (_BYTE **)(v55 + 576));
    *(_QWORD *)(v55 + 600) = v62;
    v54 = (_QWORD *)swift_task_alloc();
    v54[2] = v55 + 576;
    v54[3] = v55 + 584;
    v54[4] = v55 + 592;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v61, v60, "SendPaymentUnsupportedValueStrategy makeUnsupportedValueOutput", v51, v59);
    destroyStorage<A>(_:count:)(v52, 0, v50);
    destroyStorage<A>(_:count:)(v53, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v51, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v42 = *(_QWORD *)(v55 + 792);
  v41 = *(_QWORD *)(v55 + 776);
  v43 = *(_QWORD *)(v55 + 768);
  v46 = *(_QWORD *)(v55 + 760);
  v45 = *(_QWORD *)(v55 + 752);
  v47 = *(_QWORD *)(v55 + 744);

  v44 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
  v44(v42, v43);
  ParameterResolutionRecord.parameter.getter();
  rawValue._countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  v48 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
  v48(v46, v47);
  v4.value = SendPaymentSlots.init(rawValue:)(rawValue).value;
  *(SiriPaymentsIntents::SendPaymentSlots_optional *)(v55 + 881) = v4;
  if (v4.value == SiriPaymentsIntents_SendPaymentSlots_unknownDefault)
  {
    v7 = *(_QWORD *)(v55 + 784);
    v22 = *(_QWORD *)(v55 + 768);
    v26 = *(_QWORD *)(v55 + 656);
    v25 = *(_QWORD *)(v55 + 640);
    v27 = *(_QWORD *)(v55 + 632);
    v23 = *(_QWORD *)(v55 + 616);
    v8 = Logger.payments.unsafeMutableAddressor();
    v58(v7, v8, v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v26, v23, v27);
    v24 = (*(unsigned __int8 *)(v25 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    v29 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v25 + 32))(v29 + v24, v26, v27);
    oslog = Logger.logObject.getter();
    v36 = static os_log_type_t.error.getter();
    *(_QWORD *)(v55 + 520) = 12;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v55 + 888);
    v31 = swift_allocObject();
    *(_BYTE *)(v31 + 16) = 32;
    v32 = swift_allocObject();
    *(_BYTE *)(v32 + 16) = 8;
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 16) = partial apply for implicit closure #1 in SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    *(_QWORD *)(v30 + 24) = v29;
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v33 + 24) = v30;
    _allocateUninitializedArray<A>(_:)();
    v34 = v9;
    swift_retain();
    *v34 = partial apply for closure #1 in OSLogArguments.append(_:);
    v34[1] = v31;
    swift_retain();
    v34[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v34[3] = v32;
    swift_retain();
    v34[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v34[5] = v33;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v36))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v20 = createStorage<A>(capacity:type:)(0);
      v21 = createStorage<A>(capacity:type:)(1);
      v63 = buf;
      v64 = v20;
      v65 = v21;
      serialize(_:at:)(2, &v63);
      serialize(_:at:)(1, &v63);
      v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v67 = v31;
      closure #1 in osLogInternal(_:log:type:)(&v66, (uint64_t)&v63, (uint64_t)&v64, (uint64_t)&v65);
      v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v67 = v32;
      closure #1 in osLogInternal(_:log:type:)(&v66, (uint64_t)&v63, (uint64_t)&v64, (uint64_t)&v65);
      v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v67 = v33;
      closure #1 in osLogInternal(_:log:type:)(&v66, (uint64_t)&v63, (uint64_t)&v64, (uint64_t)&v65);
      _os_log_impl(&dword_24701B000, oslog, v36, "#SendPaymentUnsupportedValueStrategy unknown parameter: %s", buf, size);
      destroyStorage<A>(_:count:)(v20, 0, v18);
      destroyStorage<A>(_:count:)(v21, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v12 = *(_QWORD *)(v55 + 784);
    v13 = *(_QWORD *)(v55 + 768);
    v14 = *(_QWORD *)(v55 + 760);
    v15 = *(_QWORD *)(v55 + 744);

    v44(v12, v13);
    ParameterResolutionRecord.parameter.getter();
    v17 = ParameterIdentifier.name.getter();
    v16 = v10;
    v48(v14, v15);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v11 = v17;
    *(_QWORD *)(v11 + 8) = v16;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 40) = 0;
    *(_BYTE *)(v11 + 48) = 14;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v55 + 488) + 8))();
  }
  else
  {
    v37 = *(_QWORD *)(v55 + 624);
    *(SiriPaymentsIntents::SendPaymentSlots_optional *)(v55 + 880) = v4;
    swift_retain();
    outlined init with copy of GlobalsProviding(v37 + 144, v55 + 16);
    swift_release();
    v38 = *(_QWORD *)(v55 + 40);
    v39 = *(_QWORD *)(v55 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v55 + 16), v38);
    v40 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 + 56) + **(int **)(v39 + 56));
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v55 + 800) = v5;
    *v5 = *(_QWORD *)(v55 + 488);
    v5[1] = SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    return v40(*(_QWORD *)(v55 + 704), *(_QWORD *)(v55 + 616), v38, v39);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 488) = *v1;
  *(_QWORD *)(v2 + 808) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = v0[90];
  v2 = v0[89];
  v3 = v0[88];
  v0[61] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    outlined destroy of TemplatingResult?(*(_QWORD *)(v46 + 704));
    __swift_destroy_boxed_opaque_existential_0(v46 + 16);
    ParameterResolutionRecord.app.getter();
    v35 = App.sirikitApp.getter();
    *(_QWORD *)(v46 + 816) = v35;
    *(_QWORD *)(v46 + 528) = v35;
    swift_release();
    v36 = (id)ParameterResolutionRecord.intent.getter();
    *(_QWORD *)(v46 + 824) = v36;
    *(_QWORD *)(v46 + 536) = v36;
    v37 = objc_msgSend(v36, sel_note);
    if (v37)
    {
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v32 = v6;

      v33 = v31;
      v34 = v32;
    }
    else
    {
      v33 = 0;
      v34 = 0;
    }
    *(_QWORD *)(v46 + 832) = v34;
    *(_QWORD *)(v46 + 472) = v33;
    *(_QWORD *)(v46 + 480) = v34;
    type metadata accessor for PaymentsDialogConcept.Builder();
    v29 = PaymentsDialogConcept.Builder.__allocating_init()();
    *(_QWORD *)(v46 + 840) = v29;
    *(_QWORD *)(v46 + 544) = v29;
    v30 = objc_msgSend(v36, sel_payee);
    if (v30)
    {
      v24 = *(_QWORD *)(v46 + 624);
      *(_QWORD *)(v46 + 568) = v30;
      type metadata accessor for DialogPerson();
      v7 = v30;
      swift_retain();
      outlined init with copy of GlobalsProviding(v24 + 104, v46 + 176);
      swift_release();
      v26 = *(_QWORD *)(v46 + 200);
      v25 = *(_QWORD *)(v46 + 208);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v46 + 176), v26);
      (*(void (**)(uint64_t))(v25 + 16))(v26);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v46 + 216), *(_QWORD *)(v46 + 240));
      dispatch thunk of DeviceState.siriLocale.getter();
      v28 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
      __swift_destroy_boxed_opaque_existential_0(v46 + 216);
      __swift_destroy_boxed_opaque_existential_0(v46 + 176);
      swift_retain();
      v27 = (uint64_t *)(v29 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payeeName);
      swift_beginAccess();
      *v27 = v28;
      swift_release();
      swift_endAccess();
      swift_release();

    }
    v23 = objc_msgSend(v36, sel_currencyAmount);
    if (v23)
    {
      *(_QWORD *)(v46 + 560) = v23;
      type metadata accessor for DialogCurrency.Builder();
      DialogCurrency.Builder.__allocating_init()();
      v22 = objc_msgSend(v23, sel_amount);
      if (v22)
      {
        objc_msgSend(v22, sel_doubleValue);

      }
      dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
      swift_release();
      v21 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
      swift_release();
      swift_retain();
      swift_beginAccess();
      *(_QWORD *)(v29 + 16) = v21;
      swift_release();
      swift_endAccess();
      swift_release();

    }
    swift_bridgeObjectRetain();
    if (v34)
    {
      v20 = *(_QWORD *)(v46 + 680);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v8 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v20, 0, 1);
    }
    else
    {
      v12 = *(_QWORD *)(v46 + 680);
      v11 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v12, 1);
    }
    v17 = *(_BYTE *)(v46 + 881);
    v15 = *(const void **)(v46 + 680);
    v13 = *(void **)(v46 + 672);
    v18 = *(_QWORD *)(v46 + 664);
    v16 = *(_QWORD *)(v46 + 624);
    outlined init with copy of SpeakableString?(v15, v13);
    v14 = (void *)(v29 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo);
    swift_beginAccess();
    outlined assign with take of SpeakableString?(v13, v14);
    swift_endAccess();
    outlined destroy of SpeakableString?((uint64_t)v15);
    swift_retain();
    swift_retain();
    swift_beginAccess();
    *(_QWORD *)(v29 + 24) = v35;
    swift_release();
    swift_endAccess();
    swift_release();
    v19 = PaymentsDialogConcept.Builder.build()();
    *(_QWORD *)(v46 + 848) = v19;
    *(_QWORD *)(v46 + 552) = v19;
    swift_retain();
    *(_QWORD *)(v46 + 856) = *(_QWORD *)(v16 + 16);
    swift_retain();
    swift_release();
    SendPaymentSlots.rawValue.getter(v17);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v9 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v18, 0, 1);
    swift_retain();
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v46 + 864) = v10;
    *v10 = *(_QWORD *)(v46 + 488);
    v10[1] = SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    return SendPaymentCATs.unsupportedSlotValue(slot:paymentsConcept:)(*(_QWORD *)(v46 + 728), *(_QWORD *)(v46 + 664), v19);
  }
  else
  {
    v44 = *(_QWORD *)(v46 + 736);
    v43 = *(_QWORD *)(v46 + 720);
    v45 = *(_QWORD *)(v46 + 712);
    v42 = *(_QWORD *)(v46 + 696);
    v40 = *(_QWORD *)(v46 + 624);
    v41 = *(uint64_t **)(v46 + 608);
    (*(void (**)(void))(v43 + 32))();
    __swift_destroy_boxed_opaque_existential_0(v46 + 16);
    swift_retain();
    outlined init with copy of GlobalsProviding(v40 + 104, v46 + 256);
    swift_release();
    v39 = *(_QWORD *)(v46 + 280);
    v38 = *(_QWORD *)(v46 + 288);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v46 + 256), v39);
    (*(void (**)(uint64_t))(v38 + 16))(v39);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v42, 1);
    *(_QWORD *)(v46 + 336) = 0;
    *(_QWORD *)(v46 + 344) = 0;
    *(_QWORD *)(v46 + 352) = 0;
    *(_QWORD *)(v46 + 360) = 0;
    *(_QWORD *)(v46 + 368) = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v41[3] = type metadata accessor for AceOutput();
    v41[4] = MEMORY[0x24BE99088];
    __swift_allocate_boxed_opaque_existential_1(v41);
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?(v46 + 336);
    outlined destroy of NLContextUpdate?(v42);
    __swift_destroy_boxed_opaque_existential_0(v46 + 296);
    __swift_destroy_boxed_opaque_existential_0(v46 + 256);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v45);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v46 + 488) + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v5 = *v1 + 16;
  *(_QWORD *)(v2 + 488) = *v1;
  *(_QWORD *)(v2 + 872) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 648);
    swift_release();
    outlined destroy of SpeakableString?(v4);
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v11 = (id)v0[103];
  v9 = v0[91];
  v8 = v0[90];
  v10 = v0[89];
  v7 = v0[87];
  v5 = v0[78];
  v6 = (uint64_t *)v0[76];
  v0[61] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, (uint64_t)(v0 + 7));
  swift_release();
  v4 = v0[10];
  v3 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v7, 1);
  v0[17] = 0;
  v0[18] = 0;
  v0[19] = 0;
  v0[20] = 0;
  v0[21] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v6[3] = type metadata accessor for AceOutput();
  v6[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v6);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 17));
  outlined destroy of NLContextUpdate?(v7);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[61] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 488) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 488) + 8))();
}

{
  _QWORD *v0;
  uint64_t v2;
  id v3;

  v3 = (id)v0[103];
  v2 = v0[83];
  v0[61] = v0;
  swift_release();
  outlined destroy of SpeakableString?(v2);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[61] + 8))();
}

uint64_t implicit closure #1 in SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v0;
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for ParameterIdentifier();
  v3 = *(_QWORD *)(v5 - 8);
  v2 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v4 = (char *)&v2 - v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);
  ParameterResolutionRecord.parameter.getter();
  v6 = ParameterIdentifier.name.getter();
  v7 = v0;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v4, v5);
  return v6;
}

uint64_t SendPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 152) = a1;
  *(_QWORD *)(v2 + 112) = v2;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_BYTE *)(v2 + 240) = 0;
  v3 = type metadata accessor for ParameterIdentifier();
  *(_QWORD *)(v2 + 160) = v3;
  *(_QWORD *)(v2 + 168) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 176) = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);
  *(_QWORD *)(v2 + 184) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 192) = v5;
  *(_QWORD *)(v2 + 200) = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v2 + 208) = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  *(_QWORD *)(v2 + 216) = v6;
  *(_QWORD *)(v2 + 224) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v2 + 232) = swift_task_alloc();
  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = v1;
  return swift_task_switch();
}

uint64_t SendPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  SiriPaymentsIntents::SendPaymentSlots_optional v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  Swift::String rawValue;
  SiriPaymentsIntents::SendPaymentSlots value;
  uint64_t v49;
  uint8_t *buf;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  int v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(unint64_t, uint64_t, uint64_t);
  uint32_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;

  v54 = *(_QWORD *)(v0 + 232);
  v57 = *(_QWORD *)(v0 + 224);
  v58 = *(_QWORD *)(v0 + 216);
  v63 = *(_QWORD *)(v0 + 208);
  v59 = *(_QWORD *)(v0 + 192);
  v64 = *(_QWORD *)(v0 + 184);
  v60 = *(_QWORD *)(v0 + 152);
  *(_QWORD *)(v0 + 112) = v0;
  v55 = (id)ParameterResolutionRecord.intent.getter();
  type metadata accessor for INSendPaymentIntent();
  v56 = (id)SiriKitPaymentsIntent.clone()();

  *(_QWORD *)(v0 + 136) = v56;
  v1 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v54, v1, v58);
  v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16);
  v61(v63, v60, v64);
  v62 = *(_DWORD *)(v59 + 80);
  v67 = swift_allocObject();
  v65 = *(void (**)(unint64_t, uint64_t, uint64_t))(v59 + 32);
  v65(v67 + ((v62 + 16) & ~(unint64_t)v62), v63, v64);
  v61(v63, v60, v64);
  v69 = swift_allocObject();
  v65(v69 + ((v62 + 16) & ~(unint64_t)v62), v63, v64);
  v78 = Logger.logObject.getter();
  v79 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 144) = 22;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v66 = *(_DWORD *)(v0 + 244);
  v71 = swift_allocObject();
  *(_BYTE *)(v71 + 16) = 32;
  v72 = swift_allocObject();
  *(_BYTE *)(v72 + 16) = 8;
  v68 = swift_allocObject();
  *(_QWORD *)(v68 + 16) = partial apply for implicit closure #1 in SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  *(_QWORD *)(v68 + 24) = v67;
  v73 = swift_allocObject();
  *(_QWORD *)(v73 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v73 + 24) = v68;
  v74 = swift_allocObject();
  *(_BYTE *)(v74 + 16) = 32;
  v75 = swift_allocObject();
  *(_BYTE *)(v75 + 16) = 8;
  v70 = swift_allocObject();
  *(_QWORD *)(v70 + 16) = partial apply for implicit closure #2 in SendPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:);
  *(_QWORD *)(v70 + 24) = v69;
  v76 = swift_allocObject();
  *(_QWORD *)(v76 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v76 + 24) = v70;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v77 = v2;
  swift_retain();
  *v77 = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[1] = v71;
  swift_retain();
  v77[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[3] = v72;
  swift_retain();
  v77[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[5] = v73;
  swift_retain();
  v77[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[7] = v74;
  swift_retain();
  v77[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[9] = v75;
  swift_retain();
  v77[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[11] = v76;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v78, v79))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v51 = createStorage<A>(capacity:type:)(0);
    v52 = createStorage<A>(capacity:type:)(2);
    v80 = buf;
    v81 = v51;
    v82 = v52;
    serialize(_:at:)(2, &v80);
    serialize(_:at:)(2, &v80);
    v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v84 = v71;
    closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
    v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v84 = v72;
    closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
    v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v84 = v73;
    closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
    v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v84 = v74;
    closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
    v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v84 = v75;
    closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
    v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v84 = v76;
    closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
    _os_log_impl(&dword_24701B000, v78, v79, "#SendPaymentUnsupportedValueStrategy updating intent for slot '%s' with index '%s'", buf, v66);
    destroyStorage<A>(_:count:)(v51, 0, v49);
    destroyStorage<A>(_:count:)(v52, 2, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v41 = *(_QWORD *)(v53 + 232);
  v40 = *(_QWORD *)(v53 + 224);
  v42 = *(_QWORD *)(v53 + 216);
  v44 = *(_QWORD *)(v53 + 176);
  v43 = *(_QWORD *)(v53 + 168);
  v45 = *(_QWORD *)(v53 + 160);

  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v42);
  ParameterResolutionRecord.parameter.getter();
  rawValue._countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  v46 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
  v46(v44, v45);
  v4.value = SendPaymentSlots.init(rawValue:)(rawValue).value;
  value = v4.value;
  if (v4.value == SiriPaymentsIntents_SendPaymentSlots_unknownDefault)
  {
    v18 = *(_QWORD *)(v53 + 176);
    v12 = *(_QWORD *)(v53 + 160);
    ParameterResolutionRecord.parameter.getter();
    v13 = ParameterIdentifier.name.getter();
    v14 = v9;
    v46(v18, v12);
    v17 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v10;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v11 = v13;
    *(_QWORD *)(v11 + 8) = v14;
    *(_QWORD *)(v11 + 16) = v16;
    *(_QWORD *)(v11 + 24) = v15;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 40) = 0;
    *(_BYTE *)(v11 + 48) = 2;
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(*(_QWORD *)(v53 + 112) + 8))();
  }
  else
  {
    *(SiriPaymentsIntents::SendPaymentSlots_optional *)(v53 + 240) = v4;
    if (v4.value)
    {
      if (v4.value == SiriPaymentsIntents_SendPaymentSlots_currencyAmount)
      {
        *(_QWORD *)(v53 + 48) = 0;
        *(_QWORD *)(v53 + 56) = 0;
        *(_QWORD *)(v53 + 64) = 0;
        *(_QWORD *)(v53 + 72) = 0;
        if (*(_QWORD *)(v53 + 72))
        {
          v29 = *(_QWORD *)(v53 + 72);
          v27 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v53 + 48), v29);
          v28 = *(_QWORD *)(v29 - 8);
          v30 = swift_task_alloc();
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(v28 + 16))(v30, v27, v29);
          v31 = _bridgeAnythingToObjectiveC<A>(_:)();
          (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
          swift_task_dealloc();
          __swift_destroy_boxed_opaque_existential_0(v53 + 48);
          v32 = v31;
        }
        else
        {
          v32 = 0;
        }
        *(_BYTE *)(v53 + 242) = value;
        lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
        lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
        v6 = Slot<>.propertyName.getter((uint64_t)&type metadata for SendPaymentSlots, (uint64_t)&protocol witness table for SendPaymentSlots);
        v26 = (id)MEMORY[0x24957220C](v6);
        swift_bridgeObjectRelease();
        objc_msgSend(v56, sel_setValue_forKey_, v32, v26);

        swift_unknownObjectRelease();
      }
      else
      {
        *(_QWORD *)(v53 + 16) = 0;
        *(_QWORD *)(v53 + 24) = 0;
        *(_QWORD *)(v53 + 32) = 0;
        *(_QWORD *)(v53 + 40) = 0;
        if (*(_QWORD *)(v53 + 40))
        {
          v22 = *(_QWORD *)(v53 + 40);
          v20 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v53 + 16), v22);
          v21 = *(_QWORD *)(v22 - 8);
          v23 = swift_task_alloc();
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(v21 + 16))(v23, v20, v22);
          v24 = _bridgeAnythingToObjectiveC<A>(_:)();
          (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
          swift_task_dealloc();
          __swift_destroy_boxed_opaque_existential_0(v53 + 16);
          v25 = v24;
        }
        else
        {
          v25 = 0;
        }
        *(_BYTE *)(v53 + 241) = value;
        lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
        lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
        v7 = Slot<>.propertyName.getter((uint64_t)&type metadata for SendPaymentSlots, (uint64_t)&protocol witness table for SendPaymentSlots);
        v19 = (id)MEMORY[0x24957220C](v7);
        swift_bridgeObjectRelease();
        objc_msgSend(v56, sel_setValue_forKey_, v25, v19);

        swift_unknownObjectRelease();
      }
    }
    else
    {
      *(_QWORD *)(v53 + 80) = 0;
      *(_QWORD *)(v53 + 88) = 0;
      *(_QWORD *)(v53 + 96) = 0;
      *(_QWORD *)(v53 + 104) = 0;
      if (*(_QWORD *)(v53 + 104))
      {
        v36 = *(_QWORD *)(v53 + 104);
        v34 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v53 + 80), v36);
        v35 = *(_QWORD *)(v36 - 8);
        v37 = swift_task_alloc();
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(v35 + 16))(v37, v34, v36);
        v38 = _bridgeAnythingToObjectiveC<A>(_:)();
        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v36);
        swift_task_dealloc();
        __swift_destroy_boxed_opaque_existential_0(v53 + 80);
        v39 = v38;
      }
      else
      {
        v39 = 0;
      }
      *(_BYTE *)(v53 + 243) = 0;
      lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
      lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
      v5 = Slot<>.propertyName.getter((uint64_t)&type metadata for SendPaymentSlots, (uint64_t)&protocol witness table for SendPaymentSlots);
      v33 = (id)MEMORY[0x24957220C](v5);
      swift_bridgeObjectRelease();
      objc_msgSend(v56, sel_setValue_forKey_, v39, v33);

      swift_unknownObjectRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(id))(*(_QWORD *)(v53 + 112) + 8))(v56);
  }
}

uint64_t implicit closure #2 in SendPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  int v0;
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;

  v5 = type metadata accessor for ParameterIdentifier();
  v3 = *(_QWORD *)(v5 - 8);
  v2 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v4 = (char *)&v2 - v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);
  ParameterResolutionRecord.parameter.getter();
  v6 = ParameterIdentifier.multicardinalIndex.getter();
  v7 = v0;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v4, v5);
  v8 = v6;
  v9 = v7 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  return Optional.debugDescription.getter();
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance SendPaymentUnsupportedValueStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(a1, a2);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance SendPaymentUnsupportedValueStrategy(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for ConfirmationViewBuilding.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:) in conformance ConfirmationViewBuilder;
  return SendPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(a1);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance SendPaymentUnsupportedValueStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for SendPaymentUnsupportedValueStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)();
}

uint64_t sub_2471152A0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);
  return implicit closure #1 in SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)();
}

uint64_t sub_247115348()
{
  return swift_deallocObject();
}

uint64_t sub_247115370()
{
  return swift_deallocObject();
}

uint64_t sub_247115398()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471153D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247115410()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247115484()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SendPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);
  return implicit closure #2 in SendPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)();
}

uint64_t sub_24711552C()
{
  return swift_deallocObject();
}

uint64_t sub_247115554()
{
  return swift_deallocObject();
}

uint64_t sub_24711557C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471155B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471155F4()
{
  return swift_deallocObject();
}

uint64_t sub_24711561C()
{
  return swift_deallocObject();
}

uint64_t sub_247115644()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247115680()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for SendPaymentUnsupportedValueStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SendPaymentUnsupportedValueStrategy;
  if (!type metadata singleton initialization cache for SendPaymentUnsupportedValueStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

Swift::String __swiftcall String.firstLetterCapitalized()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;
  uint64_t v3;
  void *v4;

  swift_bridgeObjectRetain();
  lazy protocol witness table accessor for type String and conformance String();
  Collection.prefix(_:)();
  Substring.uppercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  default argument 0 of Collection.dropFirst(_:)();
  Collection.dropFirst(_:)();
  lazy protocol witness table accessor for type String and conformance String();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  static RangeReplaceableCollection.+ infix<A>(_:_:)();
  outlined destroy of Substring();
  outlined destroy of String.UTF8View();
  v0 = v3;
  v1 = v4;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t default argument 0 of Collection.dropFirst(_:)()
{
  return 1;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    v0 = MEMORY[0x249572C98](MEMORY[0x24BEE1E30], MEMORY[0x24BEE1E08]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
    return v0;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Substring()
{
  swift_bridgeObjectRelease();
}

uint64_t PaymentsAppResolver.__allocating_init(appLister:)(uint64_t a1)
{
  swift_allocObject();
  return PaymentsAppResolver.init(appLister:)(a1);
}

uint64_t PaymentsAppResolver.init(appLister:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v4;
  _BYTE v5[40];
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v6 = 0;
  v7 = *(_QWORD *)(*v1 + class metadata base offset for PaymentsAppResolver);
  v6 = a1;
  swift_retain();
  v8 = v1;
  outlined init with copy of GlobalsProviding(a1, (uint64_t)v5);
  outlined init with take of CommonLabelsProviding(v5, (char *)v1 + *(_QWORD *)(*v1 + class metadata base offset for PaymentsAppResolver + 16));
  swift_release();
  v4 = AppResolutionService.init()();
  swift_retain();
  v8 = (_QWORD *)v4;
  __swift_destroy_boxed_opaque_existential_0(a1);
  swift_release();
  return v4;
}

Swift::Bool __swiftcall PaymentsAppResolver.isAppOnDevice(_:)(Swift::String a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *object;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[5];
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _BYTE **v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  _BOOL4 v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint32_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  NSObject *v68;
  int v69;
  _BYTE v70[12];
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  Swift::String v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint32_t v89;
  BOOL v90;
  id v91[2];
  _QWORD *v92;
  uint64_t countAndFlagsBits;
  uint64_t v94;

  v79 = a1;
  countAndFlagsBits = 0;
  v94 = 0;
  v92 = 0;
  v90 = 0;
  v73 = *v1;
  v74 = 0;
  v75 = type metadata accessor for Logger();
  v76 = *(_QWORD *)(v75 - 8);
  v77 = (*(_QWORD *)(v76 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v78 = (char *)v33 - v77;
  countAndFlagsBits = v79._countAndFlagsBits;
  v94 = v2;
  v92 = v1;
  v91[1] = *(id *)(v3 + class metadata base offset for PaymentsAppResolver);
  type metadata accessor for LSApplicationRecord();
  swift_bridgeObjectRetain();
  v4 = LSApplicationRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(v79._countAndFlagsBits, (uint64_t)v79._object, 0);
  v80 = 0;
  v81 = v4;
  v82 = 0;
  v71 = v4;
  v72 = 0;
  *(_DWORD *)&v70[8] = 0;
  v91[0] = v4;
  *(_QWORD *)v70 = v4 != 0;
  v5 = v78;
  v45 = v4 != 0;
  outlined destroy of SFRichText?(v91);
  v44 = 1;
  v90 = v45;
  v6 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v5, v6, v75);
  swift_bridgeObjectRetain();
  v55 = 32;
  v56 = 7;
  v7 = swift_allocObject();
  object = v79._object;
  v50 = v7;
  *(_QWORD *)(v7 + 16) = v79._countAndFlagsBits;
  *(_QWORD *)(v7 + 24) = object;
  v53 = 17;
  v57 = swift_allocObject();
  *(_BYTE *)(v57 + 16) = v45 & v44;
  v68 = Logger.logObject.getter();
  v69 = static os_log_type_t.debug.getter();
  v48 = &v88;
  v88 = 22;
  v46 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v49 = v89;
  v59 = swift_allocObject();
  v52 = 32;
  *(_BYTE *)(v59 + 16) = 32;
  v60 = swift_allocObject();
  v54 = 8;
  *(_BYTE *)(v60 + 16) = 8;
  v9 = swift_allocObject();
  v10 = v50;
  v51 = v9;
  *(_QWORD *)(v9 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(_QWORD *)(v9 + 24) = v10;
  v11 = swift_allocObject();
  v12 = v51;
  v61 = v11;
  *(_QWORD *)(v11 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v11 + 24) = v12;
  v62 = swift_allocObject();
  *(_BYTE *)(v62 + 16) = v52;
  v63 = swift_allocObject();
  *(_BYTE *)(v63 + 16) = v54;
  v13 = swift_allocObject();
  v14 = v57;
  v58 = v13;
  *(_QWORD *)(v13 + 16) = partial apply for implicit closure #2 in PaymentsAppResolver.isAppOnDevice(_:);
  *(_QWORD *)(v13 + 24) = v14;
  v15 = swift_allocObject();
  v16 = v58;
  v65 = v15;
  *(_QWORD *)(v15 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v15 + 24) = v16;
  v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v64 = _allocateUninitializedArray<A>(_:)();
  v66 = v17;
  swift_retain();
  v18 = v59;
  v19 = v66;
  *v66 = partial apply for closure #1 in OSLogArguments.append(_:);
  v19[1] = v18;
  swift_retain();
  v20 = v60;
  v21 = v66;
  v66[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v21[3] = v20;
  swift_retain();
  v22 = v61;
  v23 = v66;
  v66[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v23[5] = v22;
  swift_retain();
  v24 = v62;
  v25 = v66;
  v66[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v25[7] = v24;
  swift_retain();
  v26 = v63;
  v27 = v66;
  v66[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[9] = v26;
  swift_retain();
  v28 = v65;
  v29 = v66;
  v66[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[11] = v28;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v68, (os_log_type_t)v69))
  {
    v30 = *(_QWORD *)&v70[4];
    v36 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v37 = createStorage<A>(capacity:type:)(0);
    v38 = createStorage<A>(capacity:type:)(2);
    v40 = &v87;
    v87 = v36;
    v41 = &v86;
    v86 = v37;
    v42 = &v85;
    v85 = v38;
    v39 = 2;
    serialize(_:at:)(2, &v87);
    serialize(_:at:)(v39, v40);
    v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v84 = v59;
    closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)v40, (uint64_t)v41, (uint64_t)v42);
    v43 = v30;
    if (v30)
    {
      __break(1u);
    }
    else
    {
      v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v84 = v60;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v87, (uint64_t)&v86, (uint64_t)&v85);
      v34 = 0;
      v31 = v34;
      v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v84 = v61;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v87, (uint64_t)&v86, (uint64_t)&v85);
      v33[4] = v31;
      v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v84 = v62;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v87, (uint64_t)&v86, (uint64_t)&v85);
      v33[3] = 0;
      v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v84 = v63;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v87, (uint64_t)&v86, (uint64_t)&v85);
      v33[2] = 0;
      v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v84 = v65;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v87, (uint64_t)&v86, (uint64_t)&v85);
      _os_log_impl(&dword_24701B000, v68, (os_log_type_t)v69, "#PaymentsAppResolver isAppOnDevice for %s, %s", v36, v49);
      destroyStorage<A>(_:count:)(v37, 0, v35);
      destroyStorage<A>(_:count:)(v38, 2, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v36, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v76 + 8))(v78, v75);
  return v45;
}

uint64_t sub_2471165A8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t implicit closure #2 in PaymentsAppResolver.isAppOnDevice(_:)(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("found LSApplicationRecord", 0x19uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("could not find LSApplicationRecord", 0x22uLL, 1)._countAndFlagsBits;
}

uint64_t sub_24711665C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in PaymentsAppResolver.isAppOnDevice(_:)()
{
  uint64_t v0;

  return implicit closure #2 in PaymentsAppResolver.isAppOnDevice(_:)(*(_BYTE *)(v0 + 16) & 1);
}

uint64_t PaymentsAppResolver.listApps(siriAuthorizationRestriction:)(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v2[14] = v1;
  v2[13] = a1;
  v2[9] = v2;
  v2[10] = 0;
  v2[11] = 0;
  v5 = *v1;
  v2[15] = *v1;
  v3 = type metadata accessor for Logger();
  v2[16] = v3;
  v2[17] = *(_QWORD *)(v3 - 8);
  v2[18] = swift_task_alloc();
  v2[10] = a1;
  v2[11] = v1;
  v2[19] = *(_QWORD *)(v5 + class metadata base offset for PaymentsAppResolver);
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 72) = *v1;
  *(_QWORD *)(v3 + 176) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t PaymentsAppResolver.listApps(siriAuthorizationRestriction:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint8_t *buf;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;

  v26 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 144);
  v24 = *(_QWORD *)(v0 + 136);
  v25 = *(_QWORD *)(v0 + 128);
  v27 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 72) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v1, v2, v25);
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = v26;
  *(_QWORD *)(v29 + 24) = *(_QWORD *)(v27 + class metadata base offset for PaymentsAppResolver + 8);
  v36 = Logger.logObject.getter();
  v37 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 96) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v28 = *(_DWORD *)(v0 + 184);
  v32 = swift_allocObject();
  *(_BYTE *)(v32 + 16) = 32;
  v33 = swift_allocObject();
  *(_BYTE *)(v33 + 16) = 8;
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = partial apply for implicit closure #7 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
  *(_QWORD *)(v30 + 24) = v29;
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v31 + 24) = v30;
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v34 + 24) = v31;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v35 = v3;
  swift_retain();
  *v35 = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[1] = v32;
  swift_retain();
  v35[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[3] = v33;
  swift_retain();
  v35[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[5] = v34;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v36, v37))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v21 = createStorage<A>(capacity:type:)(0);
    v22 = createStorage<A>(capacity:type:)(1);
    v38 = buf;
    v39 = v21;
    v40 = v22;
    serialize(_:at:)(2, &v38);
    serialize(_:at:)(1, &v38);
    v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v42 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v42 = v33;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v42 = v34;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    _os_log_impl(&dword_24701B000, v36, v37, "#PaymentsAppResolver listApps for intent %s", buf, v28);
    destroyStorage<A>(_:count:)(v21, 0, v19);
    destroyStorage<A>(_:count:)(v22, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v11 = v23[18];
  v10 = v23[17];
  v12 = v23[16];
  v13 = (_QWORD *)v23[14];

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  outlined init with copy of GlobalsProviding((uint64_t)v13 + *(_QWORD *)(*v13 + class metadata base offset for PaymentsAppResolver + 16), (uint64_t)(v23 + 2));
  v15 = v23[5];
  v16 = v23[6];
  __swift_project_boxed_opaque_existential_1(v23 + 2, v15);
  v23[7] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v23[8] = v4;
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation(_:)();
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  v18 = String.init(stringInterpolation:)();
  v14 = v7;
  v23[20] = v7;
  v17 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 + 8) + **(int **)(v16 + 8));
  v8 = (_QWORD *)swift_task_alloc();
  v23[21] = v8;
  *v8 = v23[9];
  v8[1] = PaymentsAppResolver.listApps(siriAuthorizationRestriction:);
  return v17(v18, v14, v23[13], v15, v16);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 72) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v2 + 72) + 8))(*(_QWORD *)(v2 + 176));
}

uint64_t PaymentsAppResolver.__allocating_init()()
{
  swift_allocObject();
  return PaymentsAppResolver.init()();
}

uint64_t PaymentsAppResolver.init()()
{
  uint64_t result;
  uint64_t v1;

  if (!"SiriPaymentsIntents.PaymentsAppResolver")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriPaymentsIntents.PaymentsAppResolver", 39, (unint64_t)"init()", 6, 2, (unint64_t)"SiriPaymentsIntents/PaymentsAppResolver.swift", 45, 2, v1, 0xDuLL, 7uLL);
  __break(1u);
  return result;
}

uint64_t PaymentsAppResolver.__ivar_destroyer()
{
  _QWORD *v0;

  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v0 + *(_QWORD *)(*v0
                                                                            + class metadata base offset for PaymentsAppResolver
                                                                            + 16));
}

_QWORD *PaymentsAppResolver.deinit()
{
  _QWORD *v1;

  v1 = (_QWORD *)AppResolutionService.deinit();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v1 + *(_QWORD *)(*v1
                                                                     + class metadata base offset for PaymentsAppResolver
                                                                     + 16));
  return v1;
}

uint64_t PaymentsAppResolver.__deallocating_deinit()
{
  PaymentsAppResolver.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_2471171F0()
{
  return swift_deallocObject();
}

uint64_t sub_247117218()
{
  return swift_deallocObject();
}

uint64_t sub_247117240()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24711727C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471172B8()
{
  return swift_deallocObject();
}

uint64_t sub_2471172E0()
{
  return swift_deallocObject();
}

uint64_t sub_247117308()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247117344()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247117380()
{
  return swift_deallocObject();
}

uint64_t sub_2471173B8()
{
  return swift_deallocObject();
}

uint64_t sub_2471173E0()
{
  return swift_deallocObject();
}

uint64_t sub_247117408()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247117444()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247117480()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata completion function for PaymentsAppResolver()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t type metadata accessor for PaymentsAppResolver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PaymentsAppResolver);
}

uint64_t SearchForAccountsNeedsValueStrategy.actionForInput(_:resolveRecord:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[4];
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  _BYTE *v23;
  _BYTE **v24;
  uint64_t *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint32_t v43;
  uint64_t v44;
  int v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint32_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v28 = a3;
  v35 = a1;
  v34 = a2;
  v56 = 0;
  v55 = 0;
  v54 = 0;
  v29 = 0;
  v44 = 0;
  v30 = type metadata accessor for Parse();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v33 = &v13[-v32];
  v39 = type metadata accessor for Logger();
  v38 = *(_QWORD *)(v39 - 8);
  v36 = (*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v35);
  v4 = &v13[-v36];
  v37 = &v13[-v36];
  v56 = v3;
  v55 = v5;
  v54 = v6;
  v7 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v38 + 16))(v4, v7, v39);
  v46 = Logger.logObject.getter();
  v45 = static os_log_type_t.debug.getter();
  v42 = &v52;
  v52 = 2;
  v40 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v41 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v43 = v53;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v47 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v46, (os_log_type_t)v45))
  {
    v8 = v29;
    v18 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v17 = 0;
    v19 = createStorage<A>(capacity:type:)(0);
    v20 = createStorage<A>(capacity:type:)(v17);
    v24 = &v51;
    v51 = v18;
    v25 = &v50;
    v50 = v19;
    v22 = &v49;
    v49 = v20;
    v21 = 0;
    serialize(_:at:)(0, &v51);
    serialize(_:at:)(v21, v24);
    v48 = v47;
    v23 = v13;
    MEMORY[0x24BDAC7A8](v13);
    v9 = v25;
    v10 = &v13[-48];
    v26 = &v13[-48];
    v10[2] = v24;
    v10[3] = v9;
    v10[4] = v11;
    v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v8)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, v46, (os_log_type_t)v45, "#SearchForAccountsNeedsValueStrategy actionForInput.", v18, v43);
      v15 = 0;
      destroyStorage<A>(_:count:)(v19, 0, v16);
      destroyStorage<A>(_:count:)(v20, v15, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v18, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(_BYTE *, uint64_t))(v38 + 8))(v37, v39);
  Input.parse.getter();
  v14 = Parse.isCancel.getter();
  (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v33, v30);
  if ((v14 & 1) != 0)
    return static ActionForInput.cancel()();
  else
    return static ActionForInput.handle()();
}

uint64_t SearchForAccountsNeedsValueStrategy.makePromptForValue(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 + 248) = v2;
  *(_QWORD *)(v3 + 240) = a2;
  *(_QWORD *)(v3 + 232) = a1;
  *(_QWORD *)(v3 + 168) = v3;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_BYTE *)(v3 + 376) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(_QWORD *)(v3 + 256) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v3 + 264) = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v3 + 272) = v4;
  *(_QWORD *)(v3 + 280) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 288) = swift_task_alloc();
  v5 = type metadata accessor for ParameterIdentifier();
  *(_QWORD *)(v3 + 296) = v5;
  *(_QWORD *)(v3 + 304) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 312) = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  *(_QWORD *)(v3 + 320) = v6;
  *(_QWORD *)(v3 + 328) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 336) = swift_task_alloc();
  *(_QWORD *)(v3 + 176) = a2;
  *(_QWORD *)(v3 + 184) = v2;
  return swift_task_switch();
}

uint64_t SearchForAccountsNeedsValueStrategy.makePromptForValue(resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  SiriPaymentsIntents::SearchForAccountsSlots_optional v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  SiriPaymentsIntents::SearchForAccountsSlots value;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint32_t v33;
  os_log_type_t v34;
  NSObject *v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 336);
  v31 = *(_QWORD *)(v0 + 328);
  v32 = *(_QWORD *)(v0 + 320);
  *(_QWORD *)(v0 + 168) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v1, v2, v32);
  v35 = Logger.logObject.getter();
  v34 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 192) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v33 = *(_DWORD *)(v0 + 380);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v36 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v35, v34))
  {
    v26 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v27 = createStorage<A>(capacity:type:)(0);
    v28 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v30 + 200) = v26;
    *(_QWORD *)(v30 + 208) = v27;
    *(_QWORD *)(v30 + 216) = v28;
    serialize(_:at:)(0, (_BYTE **)(v30 + 200));
    serialize(_:at:)(0, (_BYTE **)(v30 + 200));
    *(_QWORD *)(v30 + 224) = v36;
    v29 = (_QWORD *)swift_task_alloc();
    v29[2] = v30 + 200;
    v29[3] = v30 + 208;
    v29[4] = v30 + 216;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v35, v34, "#SearchForAccountsNeedsValueStrategy makePromptForValue.", v26, v33);
    destroyStorage<A>(_:count:)(v27, 0, v25);
    destroyStorage<A>(_:count:)(v28, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v26, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v30 + 336);
  v17 = *(_QWORD *)(v30 + 328);
  v19 = *(_QWORD *)(v30 + 320);
  v21 = *(_QWORD *)(v30 + 312);
  v20 = *(_QWORD *)(v30 + 304);
  v22 = *(_QWORD *)(v30 + 296);

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSearchForAccountsIntent>);
  ParameterResolutionRecord.parameter.getter();
  v23._countAndFlagsBits = ParameterIdentifier.name.getter();
  v23._object = v3;
  *(_QWORD *)(v30 + 344) = v3;
  *(_QWORD *)(v30 + 136) = v23._countAndFlagsBits;
  *(_QWORD *)(v30 + 144) = v3;
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
  swift_bridgeObjectRetain();
  v4.value = SearchForAccountsSlots.init(rawValue:)(v23).value;
  value = v4.value;
  *(SiriPaymentsIntents::SearchForAccountsSlots_optional *)(v30 + 377) = v4;
  if (v4.value == SiriPaymentsIntents_SearchForAccountsSlots_unknownDefault)
  {
    swift_bridgeObjectRetain();
    *(_QWORD *)(v30 + 152) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v30 + 160) = v8;
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    type metadata accessor for INSearchForAccountsIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v14 = String.init(stringInterpolation:)();
    v13 = v11;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(Swift::String *)v12 = v23;
    *(_QWORD *)(v12 + 16) = v14;
    *(_QWORD *)(v12 + 24) = v13;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 40) = 0;
    *(_BYTE *)(v12 + 48) = 2;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v30 + 168) + 8))();
  }
  else
  {
    v16 = *(_QWORD *)(v30 + 264);
    v15 = *(_QWORD *)(v30 + 248);
    *(SiriPaymentsIntents::SearchForAccountsSlots_optional *)(v30 + 376) = v4;
    swift_retain();
    *(_QWORD *)(v30 + 352) = *(_QWORD *)(v15 + 16);
    swift_retain();
    swift_release();
    SearchForAccountsSlots.rawValue.getter(value);
    SpeakableString.init(print:speak:)();
    v5 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v16, 0, 1);
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v30 + 360) = v6;
    *v6 = *(_QWORD *)(v30 + 168);
    v6[1] = SearchForAccountsNeedsValueStrategy.makePromptForValue(resolveRecord:);
    return SearchForAccountsCATs.promptForSlotValue(slot:)(*(_QWORD *)(v30 + 288), *(_QWORD *)(v30 + 264));
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 168) = *v1;
  v2 += 168;
  v4 = v2 - 152;
  *(_QWORD *)(v2 + 200) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 248));
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(unsigned __int8 *)(v0 + 377);
  v10 = *(_QWORD *)(v0 + 288);
  v8 = *(_QWORD *)(v0 + 280);
  v9 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 248);
  v7 = *(uint64_t **)(v0 + 232);
  *(_QWORD *)(v0 + 168) = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, v0 + 16);
  swift_release();
  v4 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  static PaymentsContextProvider.needsValueContextUpdate(value:)(v6, v11);
  v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v11, 0, 1);
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v7[3] = type metadata accessor for AceOutput();
  v7[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v7);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?(v0 + 96);
  outlined destroy of NLContextUpdate?(v11);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 168) + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 264);
  *(_QWORD *)(v0 + 168) = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 168) + 8))();
}

uint64_t SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v4 + 368) = v3;
  *(_QWORD *)(v4 + 360) = a3;
  *(_QWORD *)(v4 + 352) = a2;
  *(_QWORD *)(v4 + 344) = a1;
  *(_QWORD *)(v4 + 192) = v4;
  *(_QWORD *)(v4 + 200) = 0;
  *(_QWORD *)(v4 + 208) = 0;
  *(_QWORD *)(v4 + 216) = 0;
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = 0;
  *(_BYTE *)(v4 + 528) = 0;
  *(_QWORD *)(v4 + 296) = 0;
  v5 = type metadata accessor for Parse();
  *(_QWORD *)(v4 + 376) = v5;
  *(_QWORD *)(v4 + 384) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 392) = swift_task_alloc();
  v6 = type metadata accessor for Input();
  *(_QWORD *)(v4 + 400) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 408) = v7;
  *(_QWORD *)(v4 + 416) = *(_QWORD *)(v7 + 64);
  *(_QWORD *)(v4 + 424) = swift_task_alloc();
  v8 = type metadata accessor for ParameterIdentifier();
  *(_QWORD *)(v4 + 432) = v8;
  *(_QWORD *)(v4 + 440) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 448) = swift_task_alloc();
  v9 = type metadata accessor for Logger();
  *(_QWORD *)(v4 + 456) = v9;
  *(_QWORD *)(v4 + 464) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 472) = swift_task_alloc();
  *(_QWORD *)(v4 + 480) = swift_task_alloc();
  *(_QWORD *)(v4 + 488) = swift_task_alloc();
  *(_QWORD *)(v4 + 496) = swift_task_alloc();
  *(_QWORD *)(v4 + 504) = swift_task_alloc();
  *(_QWORD *)(v4 + 512) = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  *(_QWORD *)(v4 + 520) = swift_task_alloc();
  *(_QWORD *)(v4 + 200) = a2;
  *(_QWORD *)(v4 + 208) = a3;
  *(_QWORD *)(v4 + 216) = v3;
  return swift_task_switch();
}

uint64_t SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  SiriPaymentsIntents::SearchForAccountsSlots_optional v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint32_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint32_t v53;
  os_log_type_t v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint32_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  NSObject *v75;
  os_log_type_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint32_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  NSObject *v108;
  os_log_type_t v109;
  uint64_t v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint32_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  NSObject *log;
  os_log_type_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  Swift::String rawValue;
  SiriPaymentsIntents::SearchForAccountsSlots value;
  uint64_t v133;
  uint8_t *buf;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v144;
  NSObject *oslog;
  uint64_t v146;
  uint8_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t (*v150)(uint64_t, uint64_t, uint64_t);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  uint8_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t (*v160)(uint64_t, uint64_t, uint64_t);
  uint64_t v161;
  uint8_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t (*v165)(uint64_t, uint64_t, uint64_t);
  uint64_t v166;
  uint8_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t (*v170)(uint64_t, uint64_t, uint64_t);
  uint64_t v171;

  v139 = *(_QWORD *)(v0 + 520);
  v1 = *(_QWORD *)(v0 + 512);
  v140 = *(_QWORD *)(v0 + 464);
  v141 = *(_QWORD *)(v0 + 456);
  *(_QWORD *)(v0 + 192) = v0;
  v2 = SignpostName.parseResponseValueNeedsValue.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v139);
  v3 = Logger.payments.unsafeMutableAddressor();
  v142 = *(void (**)(uint64_t, uint64_t, uint64_t))(v140 + 16);
  v142(v1, v3, v141);
  oslog = Logger.logObject.getter();
  v144 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 224) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 532);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v146 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v144))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v133 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v135 = createStorage<A>(capacity:type:)(0);
    v136 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v138 + 312) = buf;
    *(_QWORD *)(v138 + 320) = v135;
    *(_QWORD *)(v138 + 328) = v136;
    serialize(_:at:)(0, (_BYTE **)(v138 + 312));
    serialize(_:at:)(0, (_BYTE **)(v138 + 312));
    *(_QWORD *)(v138 + 336) = v146;
    v137 = (_QWORD *)swift_task_alloc();
    v137[2] = v138 + 312;
    v137[3] = v138 + 320;
    v137[4] = v138 + 328;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, oslog, v144, "#SearchForAccountsNeedsValueStrategy parseValueResponse.", buf, size);
    destroyStorage<A>(_:count:)(v135, 0, v133);
    destroyStorage<A>(_:count:)(v136, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v125 = *(_QWORD *)(v138 + 512);
  v124 = *(_QWORD *)(v138 + 464);
  v126 = *(_QWORD *)(v138 + 456);
  v129 = *(_QWORD *)(v138 + 448);
  v128 = *(_QWORD *)(v138 + 440);
  v130 = *(_QWORD *)(v138 + 432);

  v127 = *(void (**)(uint64_t, uint64_t))(v124 + 8);
  v127(v125, v126);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSearchForAccountsIntent>);
  ParameterResolutionRecord.parameter.getter();
  rawValue._countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v4;
  *(_QWORD *)(v138 + 176) = rawValue._countAndFlagsBits;
  *(_QWORD *)(v138 + 184) = v4;
  (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v129, v130);
  swift_bridgeObjectRetain();
  v5.value = SearchForAccountsSlots.init(rawValue:)(rawValue).value;
  value = v5.value;
  if (v5.value == SiriPaymentsIntents_SearchForAccountsSlots_unknownDefault)
  {
    v20 = *(_QWORD *)(v138 + 472);
    v33 = *(_QWORD *)(v138 + 456);
    v21 = Logger.payments.unsafeMutableAddressor();
    v142(v20, v21, v33);
    swift_bridgeObjectRetain();
    v35 = swift_allocObject();
    *(Swift::String *)(v35 + 16) = rawValue;
    v41 = Logger.logObject.getter();
    v42 = static os_log_type_t.error.getter();
    *(_QWORD *)(v138 + 232) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v34 = *(_DWORD *)(v138 + 536);
    v37 = swift_allocObject();
    *(_BYTE *)(v37 + 16) = 32;
    v38 = swift_allocObject();
    *(_BYTE *)(v38 + 16) = 8;
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    *(_QWORD *)(v36 + 24) = v35;
    v39 = swift_allocObject();
    *(_QWORD *)(v39 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v39 + 24) = v36;
    _allocateUninitializedArray<A>(_:)();
    v40 = v22;
    swift_retain();
    *v40 = partial apply for closure #1 in OSLogArguments.append(_:);
    v40[1] = v37;
    swift_retain();
    v40[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v40[3] = v38;
    swift_retain();
    v40[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v40[5] = v39;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v41, v42))
    {
      v30 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v31 = createStorage<A>(capacity:type:)(0);
      v32 = createStorage<A>(capacity:type:)(1);
      v147 = v30;
      v148 = v31;
      v149 = v32;
      serialize(_:at:)(2, &v147);
      serialize(_:at:)(1, &v147);
      v150 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v151 = v37;
      closure #1 in osLogInternal(_:log:type:)(&v150, (uint64_t)&v147, (uint64_t)&v148, (uint64_t)&v149);
      v150 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v151 = v38;
      closure #1 in osLogInternal(_:log:type:)(&v150, (uint64_t)&v147, (uint64_t)&v148, (uint64_t)&v149);
      v150 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v151 = v39;
      closure #1 in osLogInternal(_:log:type:)(&v150, (uint64_t)&v147, (uint64_t)&v148, (uint64_t)&v149);
      _os_log_impl(&dword_24701B000, v41, v42, "#SearchForAccountsNeedsValueStrategy failed to map to known SearchForAccountsSlot, for record parameter: %s. Returning original intent and nil answeredValue", v30, v34);
      destroyStorage<A>(_:count:)(v31, 0, v29);
      destroyStorage<A>(_:count:)(v32, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v30, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v28 = *(_QWORD *)(v138 + 520);
    v25 = *(_QWORD *)(v138 + 472);
    v26 = *(_QWORD *)(v138 + 456);
    v27 = *(_QWORD *)(v138 + 344);

    v127(v25, v26);
    ParameterResolutionRecord.intent.getter();
    type metadata accessor for INSearchForAccountsIntent();
    IntentPromptAnswer.init(answeredValue:updatedIntent:)();
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INSearchForAccountsIntent>);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v27, 0, 1);
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v28);
  }
  else
  {
    v6 = *(_QWORD *)(v138 + 504);
    v114 = *(_QWORD *)(v138 + 456);
    *(SiriPaymentsIntents::SearchForAccountsSlots_optional *)(v138 + 528) = v5;
    v7 = Logger.payments.unsafeMutableAddressor();
    v142(v6, v7, v114);
    v116 = swift_allocObject();
    *(_BYTE *)(v116 + 16) = value;
    log = Logger.logObject.getter();
    v123 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v138 + 240) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v115 = *(_DWORD *)(v138 + 540);
    v118 = swift_allocObject();
    *(_BYTE *)(v118 + 16) = 32;
    v119 = swift_allocObject();
    *(_BYTE *)(v119 + 16) = 8;
    v117 = swift_allocObject();
    *(_QWORD *)(v117 + 16) = partial apply for implicit closure #2 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
    *(_QWORD *)(v117 + 24) = v116;
    v120 = swift_allocObject();
    *(_QWORD *)(v120 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v120 + 24) = v117;
    _allocateUninitializedArray<A>(_:)();
    v121 = v8;
    swift_retain();
    *v121 = partial apply for closure #1 in OSLogArguments.append(_:);
    v121[1] = v118;
    swift_retain();
    v121[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v121[3] = v119;
    swift_retain();
    v121[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v121[5] = v120;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v123))
    {
      v111 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v110 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v112 = createStorage<A>(capacity:type:)(0);
      v113 = createStorage<A>(capacity:type:)(1);
      v167 = v111;
      v168 = v112;
      v169 = v113;
      serialize(_:at:)(2, &v167);
      serialize(_:at:)(1, &v167);
      v170 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v171 = v118;
      closure #1 in osLogInternal(_:log:type:)(&v170, (uint64_t)&v167, (uint64_t)&v168, (uint64_t)&v169);
      v170 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v171 = v119;
      closure #1 in osLogInternal(_:log:type:)(&v170, (uint64_t)&v167, (uint64_t)&v168, (uint64_t)&v169);
      v170 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v171 = v120;
      closure #1 in osLogInternal(_:log:type:)(&v170, (uint64_t)&v167, (uint64_t)&v168, (uint64_t)&v169);
      _os_log_impl(&dword_24701B000, log, v123, "#SearchForAccountsNeedsValueStrategy extracted slot from resolveRecord: %s", v111, v115);
      destroyStorage<A>(_:count:)(v112, 0, v110);
      destroyStorage<A>(_:count:)(v113, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v111, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v94 = *(_QWORD *)(v138 + 504);
    v9 = *(_QWORD *)(v138 + 496);
    v95 = *(_QWORD *)(v138 + 456);
    v99 = *(_QWORD *)(v138 + 424);
    v98 = *(_QWORD *)(v138 + 408);
    v100 = *(_QWORD *)(v138 + 400);
    v96 = *(_QWORD *)(v138 + 352);

    v127(v94, v95);
    v10 = Logger.payments.unsafeMutableAddressor();
    v142(v9, v10, v95);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 16))(v99, v96, v100);
    v97 = (*(unsigned __int8 *)(v98 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
    v102 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v98 + 32))(v102 + v97, v99, v100);
    v108 = Logger.logObject.getter();
    v109 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v138 + 248) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v101 = *(_DWORD *)(v138 + 544);
    v104 = swift_allocObject();
    *(_BYTE *)(v104 + 16) = 32;
    v105 = swift_allocObject();
    *(_BYTE *)(v105 + 16) = 8;
    v103 = swift_allocObject();
    *(_QWORD *)(v103 + 16) = partial apply for implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseConfirmationResponse(input:);
    *(_QWORD *)(v103 + 24) = v102;
    v106 = swift_allocObject();
    *(_QWORD *)(v106 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v106 + 24) = v103;
    _allocateUninitializedArray<A>(_:)();
    v107 = v11;
    swift_retain();
    *v107 = partial apply for closure #1 in OSLogArguments.append(_:);
    v107[1] = v104;
    swift_retain();
    v107[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v107[3] = v105;
    swift_retain();
    v107[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v107[5] = v106;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v108, v109))
    {
      v91 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v90 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v92 = createStorage<A>(capacity:type:)(0);
      v93 = createStorage<A>(capacity:type:)(1);
      v162 = v91;
      v163 = v92;
      v164 = v93;
      serialize(_:at:)(2, &v162);
      serialize(_:at:)(1, &v162);
      v165 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v166 = v104;
      closure #1 in osLogInternal(_:log:type:)(&v165, (uint64_t)&v162, (uint64_t)&v163, (uint64_t)&v164);
      v165 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v166 = v105;
      closure #1 in osLogInternal(_:log:type:)(&v165, (uint64_t)&v162, (uint64_t)&v163, (uint64_t)&v164);
      v165 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v166 = v106;
      closure #1 in osLogInternal(_:log:type:)(&v165, (uint64_t)&v162, (uint64_t)&v163, (uint64_t)&v164);
      _os_log_impl(&dword_24701B000, v108, v109, "#SearchForAccountsNeedsValueStrategy new input: %s", v91, v101);
      destroyStorage<A>(_:count:)(v92, 0, v90);
      destroyStorage<A>(_:count:)(v93, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v91, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v80 = *(_QWORD *)(v138 + 496);
    v81 = *(_QWORD *)(v138 + 456);
    v87 = *(_QWORD *)(v138 + 392);
    v86 = *(_QWORD *)(v138 + 384);
    v88 = *(_QWORD *)(v138 + 376);
    v84 = *(_QWORD *)(v138 + 368);

    v127(v80, v81);
    Input.parse.getter();
    v85 = (id)ParameterResolutionRecord.intent.getter();
    swift_retain();
    outlined init with copy of GlobalsProviding(v84 + 104, v138 + 16);
    swift_release();
    v83 = *(_QWORD *)(v138 + 40);
    v82 = *(_QWORD *)(v138 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v138 + 16), v83);
    (*(void (**)(uint64_t))(v82 + 24))(v83);
    swift_retain();
    outlined init with copy of GlobalsProviding(v84 + 64, v138 + 96);
    swift_release();
    v89 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(v85, (uint64_t)&protocol witness table for INSearchForAccountsIntent, v138 + 56, v138 + 96);
    __swift_destroy_boxed_opaque_existential_0(v138 + 96);
    __swift_destroy_boxed_opaque_existential_0(v138 + 56);
    __swift_destroy_boxed_opaque_existential_0(v138 + 16);

    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v87, v88);
    if (v89)
    {
      objc_opt_self();
      v79 = swift_dynamicCastObjCClass();
      if (v79)
      {
        v78 = (void *)v79;
      }
      else
      {

        v78 = 0;
      }
      v77 = v78;
    }
    else
    {
      v77 = 0;
    }
    if (v77)
    {
      v12 = *(_QWORD *)(v138 + 488);
      v67 = *(_QWORD *)(v138 + 456);
      *(_QWORD *)(v138 + 296) = v77;
      v13 = Logger.payments.unsafeMutableAddressor();
      v142(v12, v13, v67);
      v14 = v77;
      v69 = swift_allocObject();
      *(_QWORD *)(v69 + 16) = v77;
      v75 = Logger.logObject.getter();
      v76 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v138 + 304) = 12;
      UnsignedInteger<>.init<A>(_:)();
      v68 = *(_DWORD *)(v138 + 552);
      v71 = swift_allocObject();
      *(_BYTE *)(v71 + 16) = 64;
      v72 = swift_allocObject();
      *(_BYTE *)(v72 + 16) = 8;
      v70 = swift_allocObject();
      *(_QWORD *)(v70 + 16) = partial apply for implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
      *(_QWORD *)(v70 + 24) = v69;
      v73 = swift_allocObject();
      *(_QWORD *)(v73 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v73 + 24) = v70;
      _allocateUninitializedArray<A>(_:)();
      v74 = v15;
      swift_retain();
      *v74 = partial apply for closure #1 in OSLogArguments.append(_:);
      v74[1] = v71;
      swift_retain();
      v74[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v74[3] = v72;
      swift_retain();
      v74[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v74[5] = v73;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v75, v76))
      {
        v64 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v65 = createStorage<A>(capacity:type:)(1);
        v66 = createStorage<A>(capacity:type:)(0);
        v157 = v64;
        v158 = v65;
        v159 = v66;
        serialize(_:at:)(2, &v157);
        serialize(_:at:)(1, &v157);
        v160 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v161 = v71;
        closure #1 in osLogInternal(_:log:type:)(&v160, (uint64_t)&v157, (uint64_t)&v158, (uint64_t)&v159);
        v160 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v161 = v72;
        closure #1 in osLogInternal(_:log:type:)(&v160, (uint64_t)&v157, (uint64_t)&v158, (uint64_t)&v159);
        v160 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v161 = v73;
        closure #1 in osLogInternal(_:log:type:)(&v160, (uint64_t)&v157, (uint64_t)&v158, (uint64_t)&v159);
        _os_log_impl(&dword_24701B000, v75, v76, "#SearchForAccountsNeedsValueStrategy converted to SiriKit intent: %@", v64, v68);
        destroyStorage<A>(_:count:)(v65, 1, v63);
        destroyStorage<A>(_:count:)(v66, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v64, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      v62 = *(_QWORD *)(v138 + 520);
      v57 = *(_QWORD *)(v138 + 488);
      v58 = *(_QWORD *)(v138 + 456);
      v61 = *(_QWORD *)(v138 + 344);

      v127(v57, v58);
      v59 = (id)ParameterResolutionRecord.intent.getter();
      *(_QWORD *)(v138 + 160) = &type metadata for SearchForAccountsSlots;
      *(_QWORD *)(v138 + 168) = &protocol witness table for SearchForAccountsSlots;
      *(_BYTE *)(v138 + 136) = value;
      v60 = type metadata accessor for INSearchForAccountsIntent();
      SiriKitPaymentsIntent.value(forSlot:)((_QWORD *)(v138 + 136), v60, &v156);
      __swift_destroy_boxed_opaque_existential_0(v138 + 136);

      IntentPromptAnswer.init(answeredValue:updatedIntent:)();
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INSearchForAccountsIntent>);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v61, 0, 1);
      swift_bridgeObjectRelease();
      $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
      outlined destroy of Signpost.OpenSignpost(v62);
    }
    else
    {
      v17 = *(_QWORD *)(v138 + 480);
      v52 = *(_QWORD *)(v138 + 456);
      v18 = Logger.payments.unsafeMutableAddressor();
      v142(v17, v18, v52);
      v55 = Logger.logObject.getter();
      v54 = static os_log_type_t.error.getter();
      *(_QWORD *)(v138 + 256) = 2;
      UnsignedInteger<>.init<A>(_:)();
      v53 = *(_DWORD *)(v138 + 548);
      v56 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v55, v54))
      {
        v48 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v49 = createStorage<A>(capacity:type:)(0);
        v50 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v138 + 264) = v48;
        *(_QWORD *)(v138 + 272) = v49;
        *(_QWORD *)(v138 + 280) = v50;
        serialize(_:at:)(0, (_BYTE **)(v138 + 264));
        serialize(_:at:)(0, (_BYTE **)(v138 + 264));
        *(_QWORD *)(v138 + 288) = v56;
        v51 = (_QWORD *)swift_task_alloc();
        v51[2] = v138 + 264;
        v51[3] = v138 + 272;
        v51[4] = v138 + 280;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_24701B000, v55, v54, "#SearchForAccountsNeedsValueStrategy failed to convert new input to INSearchForAccountsIntent, returning original intent and nil answeredValue.", v48, v53);
        destroyStorage<A>(_:count:)(v49, 0, v47);
        destroyStorage<A>(_:count:)(v50, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v48, MEMORY[0x24BEE4260]);
      }
      swift_bridgeObjectRelease();
      v46 = *(_QWORD *)(v138 + 520);
      v43 = *(_QWORD *)(v138 + 480);
      v44 = *(_QWORD *)(v138 + 456);
      v45 = *(_QWORD *)(v138 + 344);

      v127(v43, v44);
      v152 = 0;
      v153 = 0;
      v154 = 0;
      v155 = 0;
      ParameterResolutionRecord.intent.getter();
      type metadata accessor for INSearchForAccountsIntent();
      IntentPromptAnswer.init(answeredValue:updatedIntent:)();
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INSearchForAccountsIntent>);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v45, 0, 1);
      swift_bridgeObjectRelease();
      $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
      outlined destroy of Signpost.OpenSignpost(v46);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v138 + 192) + 8))();
}

uint64_t implicit closure #2 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  return String.init<A>(describing:)();
}

void *implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(void *a1)
{
  id v1;

  v1 = a1;
  return a1;
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance SearchForAccountsNeedsValueStrategy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SearchForAccountsNeedsValueStrategy.actionForInput(_:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.parseValueResponse(input:resolveRecord:) in conformance SearchForAccountsNeedsValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makePromptForValue(resolveRecord:) in conformance SearchForAccountsNeedsValueStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SearchForAccountsNeedsValueStrategy.makePromptForValue(resolveRecord:)(a1, a2);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:) in conformance SearchForAccountsNeedsValueStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for SearchForAccountsNeedsValueStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:)();
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:) in conformance SearchForAccountsNeedsValueStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for SearchForAccountsNeedsValueStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:)();
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance SearchForAccountsNeedsValueStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for SearchForAccountsNeedsValueStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)();
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance SearchForAccountsNeedsValueStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for SearchForAccountsNeedsValueStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)();
}

uint64_t sub_24711AE9C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24711AFDC()
{
  return swift_deallocObject();
}

uint64_t sub_24711B004()
{
  return swift_deallocObject();
}

uint64_t sub_24711B02C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24711B068()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24711B0A4()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  return implicit closure #2 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)();
}

uint64_t sub_24711B0D4()
{
  return swift_deallocObject();
}

uint64_t sub_24711B0FC()
{
  return swift_deallocObject();
}

uint64_t sub_24711B124()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24711B160()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24711B19C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Input() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_24711B20C()
{
  return swift_deallocObject();
}

uint64_t sub_24711B234()
{
  return swift_deallocObject();
}

uint64_t sub_24711B25C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24711B298()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24711B2D4()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  uint64_t v0;

  return implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(*(void **)(v0 + 16));
}

uint64_t sub_24711B318()
{
  return swift_deallocObject();
}

uint64_t sub_24711B340()
{
  return swift_deallocObject();
}

uint64_t sub_24711B368()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24711B3A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for SearchForAccountsNeedsValueStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SearchForAccountsNeedsValueStrategy;
  if (!type metadata singleton initialization cache for SearchForAccountsNeedsValueStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

unint64_t base witness table accessor for ParameterResolutionHandlingAsync in SearchForAccountsNeedsValueStrategy()
{
  return lazy protocol witness table accessor for type SearchForAccountsNeedsValueStrategy and conformance SearchForAccountsNeedsValueStrategy();
}

uint64_t static PaymentsDirectInvocations.from(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD v37[2];
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE **v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint32_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  NSObject *v62;
  int v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  int v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  int v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t (*v126)(uint64_t, uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  uint32_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  v109 = a1;
  v147 = 0;
  v110 = 0;
  v111 = 0;
  v112 = type metadata accessor for Parse.DirectInvocation();
  v113 = *(_QWORD *)(v112 - 8);
  v114 = *(_QWORD *)(v113 + 64);
  v115 = (v114 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v116 = (char *)v37 - v115;
  v117 = type metadata accessor for Logger();
  v118 = *(_QWORD *)(v117 - 8);
  v119 = (*(_QWORD *)(v118 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v117);
  v120 = (char *)v37 - v119;
  v147 = a1;
  v122 = Parse.DirectInvocation.identifier.getter();
  v123 = v2;
  swift_bridgeObjectRetain();
  PaymentsDirectInvocations.Identifiers.rawValue.getter(0);
  v121 = v3;
  v124 = v4;
  swift_bridgeObjectRetain();
  v145 = v122;
  v146 = v123;
  v125 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v125 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v102 = Parse.DirectInvocation.userData.getter();
    v103 = static PaymentsDirectInvocations.parsePersonDisambiguationSelection(userData:)(v102);
    v104 = v5;
    v105 = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v106 = v103;
    v107 = v104;
    v108 = v105;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    PaymentsDirectInvocations.Identifiers.rawValue.getter(1);
    v99 = v7;
    v100 = v8;
    swift_bridgeObjectRetain();
    v143 = v122;
    v144 = v123;
    v101 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v101 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v95 = Parse.DirectInvocation.userData.getter();
      v96 = static PaymentsDirectInvocations.parseAppPickerSelection(userData:)(v95);
      v97 = v9;
      v98 = v10;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v106 = v96;
      v107 = v97;
      v108 = v98;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      PaymentsDirectInvocations.Identifiers.rawValue.getter(3);
      v92 = v11;
      v93 = v12;
      swift_bridgeObjectRetain();
      v141 = v122;
      v142 = v123;
      v94 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v94 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v88 = Parse.DirectInvocation.userData.getter();
        v89 = static PaymentsDirectInvocations.parseContactPickerSelection(userData:)(v88);
        v90 = v13;
        v91 = v14;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v106 = v89;
        v107 = v90;
        v108 = v91;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        PaymentsDirectInvocations.Identifiers.rawValue.getter(2);
        v85 = v15;
        v86 = v16;
        swift_bridgeObjectRetain();
        v139 = v122;
        v140 = v123;
        v87 = static String.== infix(_:_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v87 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v81 = Parse.DirectInvocation.userData.getter();
          v82 = static PaymentsDirectInvocations.parseContactPickerSelection(userData:)(v81);
          v83 = v17;
          v84 = v18;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v106 = v82;
          v107 = v83;
          v108 = v84;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v76 = (id)static SiriKitDirectInvocationPayloads.confirm.getter();
          v79 = objc_msgSend(v76, sel_identifier);
          v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v78 = v19;

          swift_bridgeObjectRetain();
          v137 = v122;
          v138 = v123;
          v80 = static String.== infix(_:_:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          if ((v80 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v106 = v111;
            v107 = v111;
            v108 = 3;
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v71 = (id)static SiriKitDirectInvocationPayloads.reject.getter();
            v74 = objc_msgSend(v71, sel_identifier);
            v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v73 = v20;

            swift_bridgeObjectRetain();
            v135 = v122;
            v136 = v123;
            v75 = static String.== infix(_:_:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            if ((v75 & 1) != 0)
            {
              v70 = 1;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v106 = v70;
              v107 = v111;
              v108 = 3;
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              v65 = (id)static SiriKitDirectInvocationPayloads.cancel.getter();
              v68 = objc_msgSend(v65, sel_identifier);
              v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v67 = v21;

              swift_bridgeObjectRetain();
              v133 = v122;
              v134 = v123;
              v69 = static String.== infix(_:_:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              if ((v69 & 1) != 0)
              {
                v64 = 2;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v106 = v64;
                v107 = v111;
                v108 = 3;
              }
              else
              {
                v22 = v120;
                swift_bridgeObjectRelease();
                v23 = Logger.payments.unsafeMutableAddressor();
                (*(void (**)(char *, uint64_t, uint64_t))(v118 + 16))(v22, v23, v117);
                (*(void (**)(char *, uint64_t, uint64_t))(v113 + 16))(v116, v109, v112);
                v46 = (*(unsigned __int8 *)(v113 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80);
                v53 = 7;
                v54 = swift_allocObject();
                (*(void (**)(unint64_t, char *, uint64_t))(v113 + 32))(v54 + v46, v116, v112);
                v62 = Logger.logObject.getter();
                v63 = static os_log_type_t.error.getter();
                v49 = &v131;
                v131 = 12;
                v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
                v48 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
                lazy protocol witness table accessor for type Int and conformance Int();
                UnsignedInteger<>.init<A>(_:)();
                v50 = v132;
                v51 = 17;
                v56 = swift_allocObject();
                *(_BYTE *)(v56 + 16) = 32;
                v57 = swift_allocObject();
                *(_BYTE *)(v57 + 16) = 8;
                v52 = 32;
                v24 = swift_allocObject();
                v25 = v54;
                v55 = v24;
                *(_QWORD *)(v24 + 16) = partial apply for implicit closure #1 in static PaymentsDirectInvocations.from(_:);
                *(_QWORD *)(v24 + 24) = v25;
                v26 = swift_allocObject();
                v27 = v55;
                v59 = v26;
                *(_QWORD *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
                *(_QWORD *)(v26 + 24) = v27;
                v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
                v58 = _allocateUninitializedArray<A>(_:)();
                v60 = v28;
                swift_retain();
                v29 = v56;
                v30 = v60;
                *v60 = partial apply for closure #1 in OSLogArguments.append(_:);
                v30[1] = v29;
                swift_retain();
                v31 = v57;
                v32 = v60;
                v60[2] = partial apply for closure #1 in OSLogArguments.append(_:);
                v32[3] = v31;
                swift_retain();
                v33 = v59;
                v34 = v60;
                v60[4] = partial apply for closure #1 in OSLogArguments.append(_:);
                v34[5] = v33;
                _finalizeUninitializedArray<A>(_:)();
                swift_bridgeObjectRelease();
                if (os_log_type_enabled(v62, (os_log_type_t)v63))
                {
                  v35 = v110;
                  v39 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
                  v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
                  v40 = createStorage<A>(capacity:type:)(0);
                  v41 = createStorage<A>(capacity:type:)(1);
                  v42 = &v130;
                  v130 = v39;
                  v43 = &v129;
                  v129 = v40;
                  v44 = &v128;
                  v128 = v41;
                  serialize(_:at:)(2, &v130);
                  serialize(_:at:)(1, v42);
                  v126 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v127 = v56;
                  closure #1 in osLogInternal(_:log:type:)(&v126, (uint64_t)v42, (uint64_t)v43, (uint64_t)v44);
                  v45 = v35;
                  if (v35)
                  {
                    __break(1u);
                  }
                  else
                  {
                    v126 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                    v127 = v57;
                    closure #1 in osLogInternal(_:log:type:)(&v126, (uint64_t)&v130, (uint64_t)&v129, (uint64_t)&v128);
                    v37[0] = 0;
                    v126 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                    v127 = v59;
                    closure #1 in osLogInternal(_:log:type:)(&v126, (uint64_t)&v130, (uint64_t)&v129, (uint64_t)&v128);
                    _os_log_impl(&dword_24701B000, v62, (os_log_type_t)v63, "%s", v39, v50);
                    destroyStorage<A>(_:count:)(v40, 0, v38);
                    destroyStorage<A>(_:count:)(v41, 1, MEMORY[0x24BEE4AD8] + 8);
                    MEMORY[0x2495725CC](v39, MEMORY[0x24BEE4260]);
                    swift_release();
                    swift_release();
                    swift_release();
                  }
                }
                else
                {
                  swift_release();
                  swift_release();
                  swift_release();
                }

                (*(void (**)(char *, uint64_t))(v118 + 8))(v120, v117);
                swift_bridgeObjectRelease();
                v106 = v111;
                v107 = v111;
                v108 = 0xFFFF;
              }
            }
          }
        }
      }
    }
  }
  return v106;
}

id static PaymentsDirectInvocations.selectionInvocation(appIdentifier:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  Class isa;
  id v8;

  type metadata accessor for SKIDirectInvocationPayload();
  PaymentsDirectInvocations.Identifiers.rawValue.getter(1);
  v8 = SKIDirectInvocationPayload.__allocating_init(identifier:)();
  swift_bridgeObjectRetain();
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyHashable, Any));
    _allocateUninitializedArray<A>(_:)();
    v5 = v2;
    PaymentsDirectInvocations.Keys.rawValue.getter(3);
    v4 = MEMORY[0x24BEE0D00];
    _convertToAnyHashable<A>(_:)();
    swift_bridgeObjectRetain();
    v5[8] = v4;
    v5[5] = a1;
    v5[6] = a2;
    _finalizeUninitializedArray<A>(_:)();
    outlined destroy of String.UTF8View();
    Dictionary.init(dictionaryLiteral:)();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_setUserData_, isa);

    swift_bridgeObjectRelease();
  }
  return v8;
}

id SKIDirectInvocationPayload.toRSKE(deviceState:)(_QWORD *a1)
{
  id v3;
  id v4;
  id v5;

  v3 = (id)objc_opt_self();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v4 = (id)DeviceState.asInvocationContext.getter();
  v5 = objc_msgSend(v3, sel_runSiriKitExecutorCommandWithContext_payload_);

  return v5;
}

void PaymentsDirectInvocations.Identifiers.rawValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_24711C698()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.payments.DisambiguatePerson", 0x2AuLL, 1)._countAndFlagsBits;
}

id static PaymentsDirectInvocations.selectionInvocation(contactIdentifier:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  Class isa;
  id v8;

  type metadata accessor for SKIDirectInvocationPayload();
  PaymentsDirectInvocations.Identifiers.rawValue.getter(3);
  v8 = SKIDirectInvocationPayload.__allocating_init(identifier:)();
  swift_bridgeObjectRetain();
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyHashable, Any));
    _allocateUninitializedArray<A>(_:)();
    v5 = v2;
    PaymentsDirectInvocations.Keys.rawValue.getter(2);
    v4 = MEMORY[0x24BEE0D00];
    _convertToAnyHashable<A>(_:)();
    swift_bridgeObjectRetain();
    v5[8] = v4;
    v5[5] = a1;
    v5[6] = a2;
    _finalizeUninitializedArray<A>(_:)();
    outlined destroy of String.UTF8View();
    Dictionary.init(dictionaryLiteral:)();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_setUserData_, isa);

    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t static PaymentsDirectInvocations.Identifiers.allCases.getter()
{
  uint64_t result;
  _BYTE *v1;

  result = _allocateUninitializedArray<A>(_:)();
  *v1 = 0;
  v1[1] = 1;
  v1[2] = 2;
  v1[3] = 3;
  v1[4] = 4;
  v1[5] = 5;
  v1[6] = 6;
  v1[7] = 7;
  v1[8] = 8;
  v1[9] = 9;
  v1[10] = 10;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

void PaymentsDirectInvocations.Keys.rawValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_24711CB38()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appData", 7uLL, 1)._countAndFlagsBits;
}

SiriPaymentsIntents::PaymentsDirectInvocations::Identifiers_optional __swiftcall PaymentsDirectInvocations.Identifiers.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  SiriPaymentsIntents::PaymentsDirectInvocations::Identifiers_optional v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "com.apple.siri.payments.DisambiguatePerson";
  *(_QWORD *)(v2 + 8) = 42;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "com.apple.siri.payments.AppPicker";
  *(_QWORD *)(v2 + 32) = 33;
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 48) = "com.apple.siri.payments.ContactPicker";
  *(_QWORD *)(v2 + 56) = 37;
  *(_BYTE *)(v2 + 64) = 2;
  *(_QWORD *)(v2 + 72) = "com.apple.siri.payments.ContactIdentifier";
  *(_QWORD *)(v2 + 80) = 41;
  *(_BYTE *)(v2 + 88) = 2;
  *(_QWORD *)(v2 + 96) = "com.apple.siri.payments.PromptForPayee";
  *(_QWORD *)(v2 + 104) = 38;
  *(_BYTE *)(v2 + 112) = 2;
  *(_QWORD *)(v2 + 120) = "com.apple.siri.payments.PromptForPayer";
  *(_QWORD *)(v2 + 128) = 38;
  *(_BYTE *)(v2 + 136) = 2;
  *(_QWORD *)(v2 + 144) = "com.apple.siri.payments.PromptForCurrencyAmount";
  *(_QWORD *)(v2 + 152) = 47;
  *(_BYTE *)(v2 + 160) = 2;
  *(_QWORD *)(v2 + 168) = "com.apple.siri.payments.PromptForNote";
  *(_QWORD *)(v2 + 176) = 37;
  *(_BYTE *)(v2 + 184) = 2;
  *(_QWORD *)(v2 + 192) = "com.apple.siri.payments.SendPayment";
  *(_QWORD *)(v2 + 200) = 35;
  *(_BYTE *)(v2 + 208) = 2;
  *(_QWORD *)(v2 + 216) = "com.apple.siri.payments.RequestPayment";
  *(_QWORD *)(v2 + 224) = 38;
  *(_BYTE *)(v2 + 232) = 2;
  *(_QWORD *)(v2 + 240) = "com.apple.siri.payments.SearchForAccounts";
  *(_QWORD *)(v2 + 248) = 41;
  *(_BYTE *)(v2 + 256) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_disambiguatePerson;
LABEL_24:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_appPicker;
      goto LABEL_24;
    case 2:
      v7.value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_contactPicker;
      goto LABEL_24;
    case 3:
      v7.value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_selectContact;
      goto LABEL_24;
    case 4:
      v7.value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_promptForPayee;
      goto LABEL_24;
    case 5:
      v7.value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_promptForPayer;
      goto LABEL_24;
    case 6:
      v7.value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_promptForCurrencyAmount;
      goto LABEL_24;
    case 7:
      v7.value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_promptForNote;
      goto LABEL_24;
    case 8:
      v7.value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_sendPayment;
      goto LABEL_24;
    case 9:
      v7.value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_requestPayment;
      goto LABEL_24;
    case 10:
      v7.value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_searchForAccounts;
      goto LABEL_24;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::PaymentsDirectInvocations::Identifiers_optional)11;
}

SiriPaymentsIntents::PaymentsDirectInvocations::Keys_optional __swiftcall PaymentsDirectInvocations.Keys.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  SiriPaymentsIntents::PaymentsDirectInvocations::Keys_optional v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "appData";
  *(_QWORD *)(v2 + 8) = 7;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "personData";
  *(_QWORD *)(v2 + 32) = 10;
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 48) = "contactId";
  *(_QWORD *)(v2 + 56) = 9;
  *(_BYTE *)(v2 + 64) = 2;
  *(_QWORD *)(v2 + 72) = "appId";
  *(_QWORD *)(v2 + 80) = 5;
  *(_BYTE *)(v2 + 88) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = SiriPaymentsIntents_PaymentsDirectInvocations_Keys_appData;
LABEL_10:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = SiriPaymentsIntents_PaymentsDirectInvocations_Keys_personData;
      goto LABEL_10;
    case 2:
      v7.value = SiriPaymentsIntents_PaymentsDirectInvocations_Keys_contactId;
      goto LABEL_10;
    case 3:
      v7.value = SiriPaymentsIntents_PaymentsDirectInvocations_Keys_appId;
      goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::PaymentsDirectInvocations::Keys_optional)4;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PaymentsDirectInvocations.Identifiers()
{
  lazy protocol witness table accessor for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PaymentsDirectInvocations.Identifiers()
{
  lazy protocol witness table accessor for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PaymentsDirectInvocations.Identifiers()
{
  lazy protocol witness table accessor for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance PaymentsDirectInvocations.Identifiers()
{
  lazy protocol witness table accessor for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers();
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::PaymentsDirectInvocations::Identifiers_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PaymentsDirectInvocations.Identifiers@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::PaymentsDirectInvocations::Identifiers_optional *a2@<X8>)
{
  SiriPaymentsIntents::PaymentsDirectInvocations::Identifiers_optional result;

  result.value = PaymentsDirectInvocations.Identifiers.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PaymentsDirectInvocations.Identifiers(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  PaymentsDirectInvocations.Identifiers.rawValue.getter(*v1);
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PaymentsDirectInvocations.Identifiers@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static PaymentsDirectInvocations.Identifiers.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PaymentsDirectInvocations.Keys()
{
  lazy protocol witness table accessor for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PaymentsDirectInvocations.Keys()
{
  lazy protocol witness table accessor for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PaymentsDirectInvocations.Keys()
{
  lazy protocol witness table accessor for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance PaymentsDirectInvocations.Keys()
{
  lazy protocol witness table accessor for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys();
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::PaymentsDirectInvocations::Keys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PaymentsDirectInvocations.Keys@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::PaymentsDirectInvocations::Keys_optional *a2@<X8>)
{
  SiriPaymentsIntents::PaymentsDirectInvocations::Keys_optional result;

  result.value = PaymentsDirectInvocations.Keys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PaymentsDirectInvocations.Keys(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  PaymentsDirectInvocations.Keys.rawValue.getter(*v1);
  *a1 = v2;
  a1[1] = v3;
}

uint64_t static PaymentsDirectInvocations.parsePersonDisambiguationSelection(userData:)(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE **v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint32_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  NSObject *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint32_t v69;
  uint64_t v70;

  v58 = a1;
  v70 = 0;
  v47 = 0;
  v62 = 0;
  v52 = 0;
  v48 = type metadata accessor for Logger();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v51 = (char *)v17 - v50;
  v61 = type metadata accessor for ContactResolutionResponseHandler.DirectInvocationValue();
  v59 = *(_QWORD *)(v61 - 8);
  v53 = (*(_QWORD *)(v59 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v52);
  v60 = (_QWORD *)((char *)v17 - v53);
  v54 = type metadata accessor for ContactResolutionResponseHandler();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = (*(_QWORD *)(v55 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = MEMORY[0x24BDAC7A8](v58);
  v57 = (char *)v17 - v56;
  v70 = v1;
  swift_bridgeObjectRetain();
  ContactResolutionResponseHandler.init(userData:)();
  ContactResolutionResponseHandler.directInvocationValue.getter();
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v59 + 88))(v60, v61) == *MEMORY[0x24BE94438])
  {
    (*(void (**)(uint64_t *, uint64_t))(v59 + 96))(v60, v61);
    v43 = *v60;
    v62 = v43;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v54);
    v44 = v43;
    v45 = v52;
    v46 = 0;
  }
  else
  {
    v2 = v51;
    (*(void (**)(uint64_t *, uint64_t))(v59 + 8))(v60, v61);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v54);
    v3 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v2, v3, v48);
    swift_bridgeObjectRetain();
    v32 = 7;
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = v58;
    v41 = Logger.logObject.getter();
    v42 = static os_log_type_t.error.getter();
    v28 = &v68;
    v68 = 12;
    v26 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v27 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v29 = v69;
    v30 = 17;
    v35 = swift_allocObject();
    *(_BYTE *)(v35 + 16) = 32;
    v36 = swift_allocObject();
    *(_BYTE *)(v36 + 16) = 8;
    v31 = 32;
    v4 = swift_allocObject();
    v5 = v33;
    v34 = v4;
    *(_QWORD *)(v4 + 16) = partial apply for implicit closure #1 in static PaymentsDirectInvocations.parsePersonDisambiguationSelection(userData:);
    *(_QWORD *)(v4 + 24) = v5;
    v6 = swift_allocObject();
    v7 = v34;
    v38 = v6;
    *(_QWORD *)(v6 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v6 + 24) = v7;
    v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v37 = _allocateUninitializedArray<A>(_:)();
    v39 = v8;
    swift_retain();
    v9 = v35;
    v10 = v39;
    *v39 = partial apply for closure #1 in OSLogArguments.append(_:);
    v10[1] = v9;
    swift_retain();
    v11 = v36;
    v12 = v39;
    v39[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v12[3] = v11;
    swift_retain();
    v13 = v38;
    v14 = v39;
    v39[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v14[5] = v13;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v41, (os_log_type_t)v42))
    {
      v15 = v47;
      v19 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v20 = createStorage<A>(capacity:type:)(0);
      v21 = createStorage<A>(capacity:type:)(1);
      v22 = &v67;
      v67 = v19;
      v23 = &v66;
      v66 = v20;
      v24 = &v65;
      v65 = v21;
      serialize(_:at:)(2, &v67);
      serialize(_:at:)(1, v22);
      v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v64 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v63, (uint64_t)v22, (uint64_t)v23, (uint64_t)v24);
      v25 = v15;
      if (v15)
      {
        __break(1u);
      }
      else
      {
        v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v64 = v36;
        closure #1 in osLogInternal(_:log:type:)(&v63, (uint64_t)&v67, (uint64_t)&v66, (uint64_t)&v65);
        v17[1] = 0;
        v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v64 = v38;
        closure #1 in osLogInternal(_:log:type:)(&v63, (uint64_t)&v67, (uint64_t)&v66, (uint64_t)&v65);
        _os_log_impl(&dword_24701B000, v41, (os_log_type_t)v42, "#PaymentsDirectInvocation Invalid user data for personDisambiguation: %s", v19, v29);
        destroyStorage<A>(_:count:)(v20, 0, v18);
        destroyStorage<A>(_:count:)(v21, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v19, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v17[0] = 0;

    (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v48);
    v44 = v17[0];
    v45 = v52;
    v46 = 0xFFFF;
  }
  return v44;
}

uint64_t static PaymentsDirectInvocations.parseAppPickerSelection(userData:)(uint64_t a1)
{
  Swift::String v2;
  Swift::String v3;
  Swift::String v5;
  _QWORD v6[3];
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;

  v9 = a1;
  swift_bridgeObjectRetain();
  if (a1)
  {
    PaymentsDirectInvocations.Keys.rawValue.getter(3);
    MEMORY[0x2495721DC](v6);
    outlined destroy of String.UTF8View();
    swift_bridgeObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
    v7 = 0;
  }
  if (v7)
  {
    if ((swift_dynamicCast() & 1) != 0)
      v3 = v5;
    else
      v3 = (Swift::String)0;
    v2 = v3;
  }
  else
  {
    outlined destroy of FlowActivity?((uint64_t)v6);
    v2 = (Swift::String)0;
  }
  if (v2._object)
  {
    v8 = v2;
  }
  else
  {
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of String.UTF8View();
  }
  return v8._countAndFlagsBits;
}

uint64_t static PaymentsDirectInvocations.parseContactPickerSelection(userData:)(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE **v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint32_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  NSObject *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint32_t v71;
  uint64_t v72;

  v59 = a1;
  v72 = 0;
  v48 = 0;
  v63 = 0;
  v64 = 0;
  v53 = 0;
  v49 = type metadata accessor for Logger();
  v50 = *(_QWORD *)(v49 - 8);
  v51 = (*(_QWORD *)(v50 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v52 = (char *)v17 - v51;
  v62 = type metadata accessor for ContactResolutionResponseHandler.DirectInvocationValue();
  v60 = *(_QWORD *)(v62 - 8);
  v54 = (*(_QWORD *)(v60 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v53);
  v61 = (_QWORD *)((char *)v17 - v54);
  v55 = type metadata accessor for ContactResolutionResponseHandler();
  v56 = *(_QWORD *)(v55 - 8);
  v57 = (*(_QWORD *)(v56 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = MEMORY[0x24BDAC7A8](v59);
  v58 = (char *)v17 - v57;
  v72 = v1;
  swift_bridgeObjectRetain();
  ContactResolutionResponseHandler.init(userData:)();
  ContactResolutionResponseHandler.directInvocationValue.getter();
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v60 + 88))(v61, v62) == *MEMORY[0x24BE94440])
  {
    (*(void (**)(uint64_t *, uint64_t))(v60 + 96))(v61, v62);
    v43 = *v61;
    v44 = v61[1];
    v63 = v43;
    v64 = v44;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v55);
    v45 = v43;
    v46 = v44;
    v47 = 2;
  }
  else
  {
    v2 = v52;
    (*(void (**)(uint64_t *, uint64_t))(v60 + 8))(v61, v62);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v55);
    v3 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v2, v3, v49);
    swift_bridgeObjectRetain();
    v32 = 7;
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = v59;
    v41 = Logger.logObject.getter();
    v42 = static os_log_type_t.error.getter();
    v28 = &v70;
    v70 = 12;
    v26 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v27 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v29 = v71;
    v30 = 17;
    v35 = swift_allocObject();
    *(_BYTE *)(v35 + 16) = 32;
    v36 = swift_allocObject();
    *(_BYTE *)(v36 + 16) = 8;
    v31 = 32;
    v4 = swift_allocObject();
    v5 = v33;
    v34 = v4;
    *(_QWORD *)(v4 + 16) = partial apply for implicit closure #1 in static PaymentsDirectInvocations.parsePersonDisambiguationSelection(userData:);
    *(_QWORD *)(v4 + 24) = v5;
    v6 = swift_allocObject();
    v7 = v34;
    v38 = v6;
    *(_QWORD *)(v6 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v6 + 24) = v7;
    v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v37 = _allocateUninitializedArray<A>(_:)();
    v39 = v8;
    swift_retain();
    v9 = v35;
    v10 = v39;
    *v39 = partial apply for closure #1 in OSLogArguments.append(_:);
    v10[1] = v9;
    swift_retain();
    v11 = v36;
    v12 = v39;
    v39[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v12[3] = v11;
    swift_retain();
    v13 = v38;
    v14 = v39;
    v39[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v14[5] = v13;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v41, (os_log_type_t)v42))
    {
      v15 = v48;
      v19 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v20 = createStorage<A>(capacity:type:)(0);
      v21 = createStorage<A>(capacity:type:)(1);
      v22 = &v69;
      v69 = v19;
      v23 = &v68;
      v68 = v20;
      v24 = &v67;
      v67 = v21;
      serialize(_:at:)(2, &v69);
      serialize(_:at:)(1, v22);
      v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v66 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v65, (uint64_t)v22, (uint64_t)v23, (uint64_t)v24);
      v25 = v15;
      if (v15)
      {
        __break(1u);
      }
      else
      {
        v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v66 = v36;
        closure #1 in osLogInternal(_:log:type:)(&v65, (uint64_t)&v69, (uint64_t)&v68, (uint64_t)&v67);
        v17[1] = 0;
        v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v66 = v38;
        closure #1 in osLogInternal(_:log:type:)(&v65, (uint64_t)&v69, (uint64_t)&v68, (uint64_t)&v67);
        _os_log_impl(&dword_24701B000, v41, (os_log_type_t)v42, "#PaymentsDirectInvocation Invalid user data for contactPicker: %s", v19, v29);
        destroyStorage<A>(_:count:)(v20, 0, v18);
        destroyStorage<A>(_:count:)(v21, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v19, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v17[0] = 0;

    (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v49);
    v45 = v17[0];
    v46 = v17[0];
    v47 = 0xFFFF;
  }
  return v45;
}

uint64_t implicit closure #1 in static PaymentsDirectInvocations.from(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = Parse.DirectInvocation.identifier.getter();
  v4 = v0;
  PaymentsError.errorDescription.getter();
  v5 = v1;
  outlined consume of PaymentsError(v3, v4, 0, 0, 0, 0, 0);
  return v5;
}

uint64_t sub_24711E67C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Parse.DirectInvocation() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in static PaymentsDirectInvocations.from(_:)()
{
  type metadata accessor for Parse.DirectInvocation();
  return implicit closure #1 in static PaymentsDirectInvocations.from(_:)();
}

void PaymentsDirectInvocations.identifier.getter(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X8 }
}

uint64_t sub_24711E774(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, id a10, uint64_t a11, uint64_t a12, id a13, id a14, uint64_t a15, uint64_t a16, id a17, id a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;

  v33 = *(_QWORD *)(v32 - 40);
  v34 = *(_QWORD *)(v32 - 48);
  *(_QWORD *)(v32 - 64) = v34;
  *(_QWORD *)(v32 - 56) = v33;
  if (v34 | v33)
  {
    if (*(_QWORD *)(v32 - 64) ^ 1 | *(_QWORD *)(v32 - 56))
    {
      v39 = (void *)static SiriKitDirectInvocationPayloads.cancel.getter();
      v40 = objc_msgSend(v39, sel_identifier);
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v42 = v37;

      *(_QWORD *)(v32 - 80) = v41;
      *(_QWORD *)(v32 - 72) = v42;
    }
    else
    {
      v43 = (void *)static SiriKitDirectInvocationPayloads.reject.getter();
      v44 = objc_msgSend(v43, sel_identifier);
      v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v46 = v36;

      *(_QWORD *)(v32 - 80) = v45;
      *(_QWORD *)(v32 - 72) = v46;
    }
  }
  else
  {
    v47 = (void *)static SiriKitDirectInvocationPayloads.confirm.getter();
    v48 = objc_msgSend(v47, sel_identifier);
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v50 = v35;

    *(_QWORD *)(v32 - 80) = v49;
    *(_QWORD *)(v32 - 72) = v50;
  }
  return *(_QWORD *)(v32 - 80);
}

uint64_t PaymentsDirectInvocations.userData.getter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;

  switch(a3)
  {
    case 0:
      return static PaymentsDirectInvocations.personDisambiguationUserData(_:)(a1);
    case 1:
      swift_bridgeObjectRetain();
      v5 = static PaymentsDirectInvocations.appPickerUserData(_:)(a1, a2);
      swift_bridgeObjectRelease();
      return v5;
    case 2:
      swift_bridgeObjectRetain();
      v4 = static PaymentsDirectInvocations.contactPickerUserData(_:)(a1, a2);
      swift_bridgeObjectRelease();
      return v4;
    default:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
      _allocateUninitializedArray<A>(_:)();
      return Dictionary.init(dictionaryLiteral:)();
  }
}

uint64_t static PaymentsDirectInvocations.personDisambiguationUserData(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  v5 = v1;
  PaymentsDirectInvocations.Keys.rawValue.getter(1);
  *v5 = v2;
  v5[1] = v3;
  v5[5] = MEMORY[0x24BEE1768];
  v5[2] = a1;
  _finalizeUninitializedArray<A>(_:)();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t static PaymentsDirectInvocations.appPickerUserData(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  v8 = v2;
  PaymentsDirectInvocations.Keys.rawValue.getter(3);
  *v8 = v3;
  v8[1] = v4;
  swift_bridgeObjectRetain();
  v8[5] = MEMORY[0x24BEE0D00];
  v8[2] = a1;
  v8[3] = a2;
  _finalizeUninitializedArray<A>(_:)();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t static PaymentsDirectInvocations.contactPickerUserData(_:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v22 = a1;
  v23 = a2;
  v27 = 0;
  v28 = 0;
  v20 = type metadata accessor for ContactResolutionCommonKeys();
  v18 = *(_QWORD *)(v20 - 8);
  v17 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (char *)&v17 - v17;
  v19 = (char *)&v17 - v17;
  v27 = MEMORY[0x24BDAC7A8](v22);
  v28 = v3;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  v21 = _allocateUninitializedArray<A>(_:)();
  v24 = v4;
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v2, *MEMORY[0x24BE94410], v20);
  v5 = ContactResolutionCommonKeys.rawValue.getter();
  v6 = v18;
  v7 = v24;
  v8 = v5;
  v9 = v19;
  v11 = v10;
  v12 = v20;
  *v24 = v8;
  v7[1] = v11;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v12);
  swift_bridgeObjectRetain();
  v13 = v22;
  v14 = v23;
  v15 = v24;
  v26 = MEMORY[0x24BEE0D00];
  v24[5] = MEMORY[0x24BEE0D00];
  v15[2] = v13;
  v15[3] = v14;
  _finalizeUninitializedArray<A>(_:)();
  return Dictionary.init(dictionaryLiteral:)();
}

id PaymentsDirectInvocations.toDirectInvocationPayload()(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  id v6;
  char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE **v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Class isa;
  uint64_t v45;
  uint64_t v46;
  id v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint32_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  NSObject *v63;
  int v64;
  uint64_t (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint32_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  char v75;

  v38 = a1;
  v36 = a2;
  v37 = a3;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v72 = 0;
  v32 = 0;
  v33 = 0;
  v46 = type metadata accessor for Logger();
  v45 = *(_QWORD *)(v46 - 8);
  v34 = (*(_QWORD *)(v45 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v35 = (char *)&v23 - v34;
  v73 = v3;
  v74 = v4;
  v75 = v5;
  type metadata accessor for SKIDirectInvocationPayload();
  PaymentsDirectInvocations.identifier.getter(v38, v36, v37);
  v6 = SKIDirectInvocationPayload.__allocating_init(identifier:)();
  v7 = v35;
  v47 = v6;
  v72 = v6;
  v43 = PaymentsDirectInvocations.userData.getter(v38, v36, v37);
  v40 = MEMORY[0x24BEE4AD8] + 8;
  v39 = MEMORY[0x24BEE23D0];
  v41 = MEMORY[0x24BEE23D8];
  v42 = _dictionaryUpCast<A, B, C, D>(_:)();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  objc_msgSend(v47, sel_setUserData_, isa);

  v8 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v7, v8, v46);
  v9 = v47;
  v54 = 7;
  v55 = swift_allocObject();
  *(_QWORD *)(v55 + 16) = v47;
  v63 = Logger.logObject.getter();
  v64 = static os_log_type_t.debug.getter();
  v50 = &v70;
  v70 = 12;
  v48 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v49 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v51 = v71;
  v52 = 17;
  v57 = swift_allocObject();
  *(_BYTE *)(v57 + 16) = 64;
  v58 = swift_allocObject();
  *(_BYTE *)(v58 + 16) = 8;
  v53 = 32;
  v10 = swift_allocObject();
  v11 = v55;
  v56 = v10;
  *(_QWORD *)(v10 + 16) = partial apply for implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
  *(_QWORD *)(v10 + 24) = v11;
  v12 = swift_allocObject();
  v13 = v56;
  v60 = v12;
  *(_QWORD *)(v12 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v12 + 24) = v13;
  v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v59 = _allocateUninitializedArray<A>(_:)();
  v61 = v14;
  swift_retain();
  v15 = v57;
  v16 = v61;
  *v61 = partial apply for closure #1 in OSLogArguments.append(_:);
  v16[1] = v15;
  swift_retain();
  v17 = v58;
  v18 = v61;
  v61[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v18[3] = v17;
  swift_retain();
  v19 = v60;
  v20 = v61;
  v61[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v20[5] = v19;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v63, (os_log_type_t)v64))
  {
    v21 = v32;
    v25 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v26 = createStorage<A>(capacity:type:)(1);
    v27 = createStorage<A>(capacity:type:)(0);
    v28 = &v69;
    v69 = v25;
    v29 = &v68;
    v68 = v26;
    v30 = &v67;
    v67 = v27;
    serialize(_:at:)(2, &v69);
    serialize(_:at:)(1, v28);
    v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v66 = v57;
    closure #1 in osLogInternal(_:log:type:)(&v65, (uint64_t)v28, (uint64_t)v29, (uint64_t)v30);
    v31 = v21;
    if (v21)
    {
      __break(1u);
    }
    else
    {
      v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v66 = v58;
      closure #1 in osLogInternal(_:log:type:)(&v65, (uint64_t)&v69, (uint64_t)&v68, (uint64_t)&v67);
      v23 = 0;
      v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v66 = v60;
      closure #1 in osLogInternal(_:log:type:)(&v65, (uint64_t)&v69, (uint64_t)&v68, (uint64_t)&v67);
      _os_log_impl(&dword_24701B000, v63, (os_log_type_t)v64, "#PaymentsDirectInvocation DirectInvocationPayload: %@", v25, v51);
      destroyStorage<A>(_:count:)(v26, 1, v24);
      destroyStorage<A>(_:count:)(v27, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v25, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v45 + 8))(v35, v46);
  return v47;
}

uint64_t implicit closure #1 in static PaymentsDirectInvocations.parsePersonDisambiguationSelection(userData:)()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]?);
  return String.init<A>(describing:)();
}

void static PaymentsDirectInvocations.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  outlined copy of PaymentsDirectInvocations(a1, a2, a3);
  outlined copy of PaymentsDirectInvocations(a4, a5, a6);
  __asm { BR              X8 }
}

uint64_t sub_24711F598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v4;

  v1 = *(_QWORD *)(v0 - 104);
  v2 = *(_QWORD *)(v0 - 112);
  *(_QWORD *)(v0 - 128) = v2;
  *(_QWORD *)(v0 - 120) = v1;
  if (!(v2 | v1))
  {
    if (*(_DWORD *)(v0 - 80) == 3 && *(_QWORD *)(v0 - 96) == 0 && *(_QWORD *)(v0 - 88) == 0)
      goto LABEL_15;
    goto LABEL_16;
  }
  if (!(*(_QWORD *)(v0 - 128) ^ 1 | *(_QWORD *)(v0 - 120)))
  {
    if (*(_DWORD *)(v0 - 80) == 3 && *(_QWORD *)(v0 - 96) == 1 && !*(_QWORD *)(v0 - 88))
      goto LABEL_15;
LABEL_16:
    outlined consume of PaymentsDirectInvocations(*(_QWORD *)(v0 - 112), *(_QWORD *)(v0 - 104), *(_DWORD *)(v0 - 76));
    outlined consume of PaymentsDirectInvocations(*(_QWORD *)(v0 - 96), *(_QWORD *)(v0 - 88), *(_DWORD *)(v0 - 80));
    v4 = 0;
    return v4 & 1;
  }
  if (*(_DWORD *)(v0 - 80) != 3 || *(_QWORD *)(v0 - 96) != 2 || *(_QWORD *)(v0 - 88))
    goto LABEL_16;
LABEL_15:
  outlined consume of PaymentsDirectInvocations(*(_QWORD *)(v0 - 112), *(_QWORD *)(v0 - 104), *(_DWORD *)(v0 - 76));
  outlined consume of PaymentsDirectInvocations(*(_QWORD *)(v0 - 96), *(_QWORD *)(v0 - 88), *(_DWORD *)(v0 - 80));
  v4 = 1;
  return v4 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PaymentsDirectInvocations(uint64_t a1, uint64_t a2)
{
  char v2;

  static PaymentsDirectInvocations.__derived_enum_equals(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
  return v2 & 1;
}

uint64_t sub_24711FAA0()
{
  return swift_deallocObject();
}

uint64_t sub_24711FAC8()
{
  return swift_deallocObject();
}

uint64_t sub_24711FAF0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24711FB2C()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers;
  if (!lazy protocol witness table cache variable for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsDirectInvocations.Identifiers, &type metadata for PaymentsDirectInvocations.Identifiers);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers;
  if (!lazy protocol witness table cache variable for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsDirectInvocations.Identifiers, &type metadata for PaymentsDirectInvocations.Identifiers);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys;
  if (!lazy protocol witness table cache variable for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsDirectInvocations.Keys, &type metadata for PaymentsDirectInvocations.Keys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys;
  if (!lazy protocol witness table cache variable for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsDirectInvocations.Keys, &type metadata for PaymentsDirectInvocations.Keys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys);
    return v0;
  }
  return v2;
}

uint64_t sub_24711FC40()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in static PaymentsDirectInvocations.parsePersonDisambiguationSelection(userData:)()
{
  return implicit closure #1 in static PaymentsDirectInvocations.parsePersonDisambiguationSelection(userData:)();
}

uint64_t sub_24711FC84()
{
  return swift_deallocObject();
}

uint64_t sub_24711FCAC()
{
  return swift_deallocObject();
}

uint64_t sub_24711FCD4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24711FD10()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24711FD4C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24711FD88()
{
  return swift_deallocObject();
}

uint64_t sub_24711FDB0()
{
  return swift_deallocObject();
}

uint64_t sub_24711FDD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24711FE14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24711FE50()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_24711FE8C()
{
  return swift_deallocObject();
}

uint64_t sub_24711FEB4()
{
  return swift_deallocObject();
}

uint64_t sub_24711FEDC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24711FF18()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t initializeBufferWithCopyOfBuffer for PaymentsDirectInvocations(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of PaymentsDirectInvocations(*(_QWORD *)a2, v4, v5);
  result = a1;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return result;
}

uint64_t outlined copy of PaymentsDirectInvocations(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1 || a3 == 2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for PaymentsDirectInvocations(uint64_t a1)
{
  return outlined consume of PaymentsDirectInvocations(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t assignWithCopy for PaymentsDirectInvocations(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  outlined copy of PaymentsDirectInvocations(*(_QWORD *)a2, v7, v8);
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  outlined consume of PaymentsDirectInvocations(v2, v3, v4);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  return result;
}

uint64_t assignWithTake for PaymentsDirectInvocations(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of PaymentsDirectInvocations(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaymentsDirectInvocations(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  int v4;

  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    {
      v4 = *(_DWORD *)a1 + 252;
    }
    else
    {
      v2 = *(unsigned __int8 *)(a1 + 16) ^ 0xFF;
      if (v2 >= 0xFC)
        v2 = -1;
      v4 = v2;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PaymentsDirectInvocations(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 17);
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_BYTE *)(result + 16) = 0;
    if (a3 >= 0xFD)
      *v3 = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *v3 = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for PaymentsDirectInvocations(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) < 3u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return *(_QWORD *)a1 + 3;
}

uint64_t destructiveInjectEnumTag for PaymentsDirectInvocations(uint64_t result, unsigned int a2)
{
  if (a2 < 3)
  {
    *(_BYTE *)(result + 16) = a2;
  }
  else
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for PaymentsDirectInvocations()
{
  return &type metadata for PaymentsDirectInvocations;
}

uint64_t getEnumTagSinglePayload for PaymentsDirectInvocations.Identifiers(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xF5)
      goto LABEL_15;
    v7 = ((a2 + 10) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 245;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 11;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for PaymentsDirectInvocations.Identifiers(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xF5)
  {
    v5 = ((a3 + 10) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xF5)
  {
    v4 = ((a2 - 246) >> 8) + 1;
    *result = a2 + 10;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 10;
  }
  return result;
}

ValueMetadata *type metadata accessor for PaymentsDirectInvocations.Identifiers()
{
  return &type metadata for PaymentsDirectInvocations.Identifiers;
}

ValueMetadata *type metadata accessor for PaymentsDirectInvocations.Keys()
{
  return &type metadata for PaymentsDirectInvocations.Keys;
}

unint64_t base witness table accessor for Equatable in PaymentsDirectInvocations.Keys()
{
  return lazy protocol witness table accessor for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PaymentsDirectInvocations.Identifiers()
{
  return lazy protocol witness table accessor for type [PaymentsDirectInvocations.Identifiers] and conformance [A]();
}

unint64_t base witness table accessor for Equatable in PaymentsDirectInvocations.Identifiers()
{
  return lazy protocol witness table accessor for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers();
}

uint64_t static PaymentsContextProvider.confirmationContextUpdate(isSend:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  char *v30;

  v26 = a2;
  v22 = a1;
  v30 = 0;
  v29 = 0;
  v21 = 0;
  v28 = type metadata accessor for NLContextUpdate();
  v25 = *(_QWORD *)(v28 - 8);
  v16 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v27 = (char *)&v15 - v16;
  v30 = (char *)&v15 - v16;
  v20 = 1;
  v29 = MEMORY[0x24BDAC7A8](v22) & 1;
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  v19 = MEMORY[0x24BEE0D00];
  v18 = _allocateUninitializedArray<A>(_:)();
  v17 = v2;
  v3 = Constants.NLPaymentConfirmationValue.canonicalName.getter(0);
  v4 = v17;
  v5 = v3;
  LOBYTE(v3) = v20;
  *v17 = v5;
  v4[1] = v6;
  v7 = Constants.NLPaymentConfirmationValue.canonicalName.getter(v3);
  v8 = v17;
  v17[2] = v7;
  v8[3] = v9;
  v10 = Constants.NLPaymentConfirmationValue.canonicalName.getter(2);
  v11 = v17;
  v17[4] = v10;
  v11[5] = v12;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  static PaymentsContextProvider.targetDomain.getter();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  v24 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v23 = _allocateUninitializedArray<A>(_:)();
  static PaymentsContextProvider.makeSDAForConfirm(isSend:)(v22 & 1, v13);
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.nluSystemDialogActs.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v26, v27, v28);
}

uint64_t static PaymentsContextProvider.appConfirmationContextUpdate(app:locale:intentType:isRequestAccount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  Swift::String *v21;
  Swift::String v22;
  char *v23;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  Swift::String *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;

  v42 = a6;
  v37 = a1;
  v38 = a2;
  v34 = a3;
  v35 = a4;
  v36 = a5;
  v50 = 0;
  v49 = 0;
  v48 = 0;
  v46 = 0;
  v47 = 0;
  v45 = 0;
  v32 = 0;
  v44 = type metadata accessor for NLContextUpdate();
  v41 = *(_QWORD *)(v44 - 8);
  v25 = (*(_QWORD *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v43 = (char *)&v25 - v25;
  v50 = (char *)&v25 - v25;
  v49 = MEMORY[0x24BDAC7A8](v37);
  v48 = v6;
  v46 = v7;
  v47 = v8;
  v28 = 1;
  v45 = v9 & 1;
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  static PaymentsContextProvider.targetDomain.getter();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  v31 = MEMORY[0x24BEE0D00];
  v27 = _allocateUninitializedArray<A>(_:)();
  v26 = v10;
  v11 = Constants.NLPaymentConfirmationValue.canonicalName.getter(0);
  v12 = v26;
  v13 = v11;
  LOBYTE(v11) = v28;
  *v26 = v13;
  v12[1] = v14;
  v15 = Constants.NLPaymentConfirmationValue.canonicalName.getter(v11);
  v16 = v26;
  v26[2] = v15;
  v16[3] = v17;
  v18 = Constants.NLPaymentConfirmationValue.canonicalName.getter(2);
  v19 = v26;
  v26[4] = v18;
  v19[5] = v20;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  v33 = 1;
  v30 = _allocateUninitializedArray<A>(_:)();
  v29 = v21;
  v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appName", 7uLL, v28 & 1);
  *v29 = v22;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  v40 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v39 = _allocateUninitializedArray<A>(_:)();
  static PaymentsContextProvider.makeSDAForAppConfirmation(_:locale:intentType:isRequestAccount:)(v37, v38, v34, v35, v36 & 1, v23);
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.nluSystemDialogActs.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v42, v43, v44);
}

uint64_t static PaymentsContextProvider.appDisambiguationContextUpdate(apps:locale:intentType:isRequestAccount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  Swift::String *v15;
  Swift::String v16;
  char *v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  Swift::String *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;

  v21 = a6;
  v33 = a1;
  v35 = a2;
  v38 = a3;
  v39 = a4;
  v41 = a5;
  v59 = 0;
  v58 = 0;
  v57 = 0;
  v55 = 0;
  v56 = 0;
  v54 = 0;
  v52 = 0;
  v42 = 0;
  v36 = type metadata accessor for Locale();
  v34 = *(_QWORD *)(v36 - 8);
  v22 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v37 = (char *)v19 - v22;
  v23 = type metadata accessor for NLContextUpdate();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v33);
  v28 = (char *)v19 - v25;
  v59 = (char *)v19 - v25;
  v58 = v6;
  v57 = v7;
  v55 = v8;
  v56 = v9;
  v40 = 1;
  v54 = v10 & 1;
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  static PaymentsContextProvider.targetDomain.getter();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  v29 = 1;
  v32 = MEMORY[0x24BEE0D00];
  v27 = _allocateUninitializedArray<A>(_:)();
  v26 = v11;
  v12 = Constants.NLPaymentConfirmationValue.canonicalName.getter(2);
  v13 = v26;
  *v26 = v12;
  v13[1] = v14;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  v31 = _allocateUninitializedArray<A>(_:)();
  v30 = v15;
  v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appName", 7uLL, v40 & 1);
  *v30 = v16;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  v53 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v37, v35, v36);
  v43 = &v47;
  v48 = v37;
  v49 = v38;
  v50 = v39;
  v51 = v41 & v40;
  v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
  v45 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  lazy protocol witness table accessor for type [App] and conformance [A]();
  v46 = Sequence.compactMap<A>(_:)();
  v20 = v46;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v37, v36);
  v52 = v20;
  v19[1] = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v19[0] = _allocateUninitializedArray<A>(_:)();
  static PaymentsContextProvider.makeSDAForAppDisambiguation(choices:)(v20, v17);
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.nluSystemDialogActs.setter();
  static RREntity.makeDisambiguationGroup(with:locale:)(v33, v35);
  NLContextUpdate.rrEntities.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v24 + 16))(v21, v28, v23);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v28, v23);
}

uint64_t static PaymentsContextProvider.handleRequestPayment(paymentRecord:needsSDA:)@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v3;
  char *v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  char *v12;
  void *v13;
  int v14;
  char v15;
  uint64_t v16;
  char *v17;

  v7 = a3;
  v13 = a1;
  v14 = a2;
  v17 = 0;
  v16 = 0;
  v15 = 0;
  v8 = type metadata accessor for NLContextUpdate();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = (char *)v6 - v10;
  v17 = (char *)v6 - v10;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v11 = 1;
  v15 = v3 & 1;
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  static PaymentsContextProvider.targetDomain.getter();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  static RREntity.makeEntities(for:)(v13);
  NLContextUpdate.rrEntities.setter();
  if ((v14 & 1) != 0)
  {
    v6[2] = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
    v6[1] = _allocateUninitializedArray<A>(_:)();
    static PaymentsContextProvider.makeSDAForRequestPayment()(v4);
    _finalizeUninitializedArray<A>(_:)();
    NLContextUpdate.nluSystemDialogActs.setter();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v7, v12, v8);
}

uint64_t static PaymentsContextProvider.personDisambiguationContextUpdate(persons:isSend:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char *v43;

  v38 = a3;
  v33 = a1;
  v34 = a2;
  v43 = 0;
  v42 = 0;
  v41 = 0;
  v32 = 0;
  v40 = type metadata accessor for NLContextUpdate();
  v37 = *(_QWORD *)(v40 - 8);
  v23 = (*(_QWORD *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v39 = (char *)&v22 - v23;
  v43 = (char *)&v22 - v23;
  v42 = MEMORY[0x24BDAC7A8](v33);
  v26 = 1;
  v41 = v3 & 1;
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  v27 = 2;
  v31 = MEMORY[0x24BEE0D00];
  v25 = _allocateUninitializedArray<A>(_:)();
  v24 = v4;
  v28 = 0;
  v5 = Constants.NLPaymentConfirmationValue.canonicalName.getter(0);
  v6 = v24;
  v7 = v5;
  LOBYTE(v5) = v26;
  *v24 = v7;
  v6[1] = v8;
  v9 = Constants.NLPaymentConfirmationValue.canonicalName.getter(v5);
  v10 = v24;
  v24[2] = v9;
  v10[3] = v11;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.nl.Payments", 0x1AuLL, v26 & 1);
  NLContextUpdate.weightedPromptTargetDomain.setter();
  v30 = _allocateUninitializedArray<A>(_:)();
  v29 = v12;
  v13 = SendPaymentSlots.canonicalName.getter(v28);
  v14 = v29;
  v15 = v13;
  LOBYTE(v13) = v28;
  *v29 = v15;
  v14[1] = v16;
  v17 = RequestPaymentSlots.canonicalName.getter(v13);
  v18 = v29;
  v29[2] = v17;
  v18[3] = v19;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  static RREntity.makeDisambiguationGroup(with:)(v33);
  NLContextUpdate.rrEntities.setter();
  v36 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v35 = _allocateUninitializedArray<A>(_:)();
  static PaymentsContextProvider.makeSDAForDisambiguatePerson(persons:isSend:)(v33, v34 & 1, v20);
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.nluSystemDialogActs.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v37 + 32))(v38, v39, v40);
}

uint64_t static PaymentsContextProvider.tccAcceptanceContextUpdate(app:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t countAndFlagsBits;
  uint64_t v22;
  void *object;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  char *v39;

  v32 = a2;
  v20 = a1;
  v39 = 0;
  v38 = 0;
  v37 = 0;
  v28 = 0;
  v36 = type metadata accessor for NLContextUpdate();
  v34 = *(_QWORD *)(v36 - 8);
  v13 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v35 = (char *)&v12 - v13;
  v39 = (char *)&v12 - v13;
  v38 = MEMORY[0x24BDAC7A8](v20);
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  static PaymentsContextProvider.targetDomain.getter();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  type metadata accessor for SAAceConfirmationContext();
  v33 = SAUIAppPunchOut.__allocating_init()();
  v37 = v33;
  v15 = (id)*MEMORY[0x24BE81A58];
  v2 = v15;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v4;
  v16 = (id)MEMORY[0x24957220C](v3);
  swift_bridgeObjectRelease();

  objc_msgSend(v33, sel_setReason_, v16);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAAceSerializable);
  v29 = 1;
  v19 = _allocateUninitializedArray<A>(_:)();
  v17 = v5;
  v6 = v33;
  *v17 = v33;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.conversationStateAttachments.setter();
  type metadata accessor for MachineUtteranceBuilder();
  v24 = MachineUtteranceBuilder.__allocating_init()();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appName", 7uLL, 1);
  countAndFlagsBits = v7._countAndFlagsBits;
  object = v7._object;
  App.appIdentifier.getter();
  v22 = v8;
  v25 = dispatch thunk of MachineUtteranceBuilder.addMappingIfPresent(node:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v26 = dispatch thunk of MachineUtteranceBuilder.build()();
  v27 = v9;
  swift_release();
  NLContextUpdate.nlInput.setter();
  v31 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v30 = _allocateUninitializedArray<A>(_:)();
  static PaymentsContextProvider.makeSDAForTCCAcceptance()(v10);
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.nluSystemDialogActs.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 16))(v32, v35, v36);

  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v35, v36);
}

uint64_t static PaymentsContextProvider.needsValueContextUpdate(value:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;

  v12 = a2;
  v13 = a1;
  v27 = 0;
  v26 = 0;
  v21 = 0;
  v14 = type metadata accessor for NLContextUpdate();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = (char *)v11 - v16;
  v27 = (char *)v11 - v16;
  v26 = MEMORY[0x24BDAC7A8](v13);
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  v23 = MEMORY[0x24BEE0D00];
  v18 = _allocateUninitializedArray<A>(_:)();
  v17 = v2;
  v20 = 1;
  v3 = Constants.NLPaymentConfirmationValue.canonicalName.getter(1);
  v4 = v17;
  *v17 = v3;
  v4[1] = v5;
  v6 = Constants.NLPaymentConfirmationValue.canonicalName.getter(2);
  v7 = v17;
  v17[2] = v6;
  v7[3] = v8;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.nl.Payments", 0x1AuLL, v20 & 1);
  NLContextUpdate.weightedPromptTargetDomain.setter();
  v25 = static SearchForAccountsSlots.allCases.getter();
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchForAccountsSlots]);
  lazy protocol witness table accessor for type [SearchForAccountsSlots] and conformance [A]();
  v24 = Sequence.compactMap<A>(_:)();
  v11[1] = v24;
  outlined destroy of [SFCardSection]();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  v11[3] = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v11[2] = _allocateUninitializedArray<A>(_:)();
  static PaymentsContextProvider.makeSDAForSearchForAccountNeedsValue(_:)(v13, v9);
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.nluSystemDialogActs.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v12, v19, v14);
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[4];
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;

  v12 = a2;
  v13 = a1;
  v27 = 0;
  v26 = 0;
  v21 = 0;
  v14 = type metadata accessor for NLContextUpdate();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = (char *)v11 - v16;
  v27 = (char *)v11 - v16;
  v26 = MEMORY[0x24BDAC7A8](v13);
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  v23 = MEMORY[0x24BEE0D00];
  v18 = _allocateUninitializedArray<A>(_:)();
  v17 = v2;
  v20 = 1;
  v3 = Constants.NLPaymentConfirmationValue.canonicalName.getter(1);
  v4 = v17;
  *v17 = v3;
  v4[1] = v5;
  v6 = Constants.NLPaymentConfirmationValue.canonicalName.getter(2);
  v7 = v17;
  v17[2] = v6;
  v7[3] = v8;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.nl.Payments", 0x1AuLL, v20 & 1);
  NLContextUpdate.weightedPromptTargetDomain.setter();
  v25 = static RequestPaymentSlots.allCases.getter();
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RequestPaymentSlots]);
  lazy protocol witness table accessor for type [RequestPaymentSlots] and conformance [A]();
  v24 = Sequence.compactMap<A>(_:)();
  v11[1] = v24;
  outlined destroy of [SFCardSection]();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  v11[3] = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v11[2] = _allocateUninitializedArray<A>(_:)();
  static PaymentsContextProvider.makeSDAForRequestPaymentNeedsValue(_:)(v13, v9);
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.nluSystemDialogActs.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v12, v19, v14);
}

uint64_t static PaymentsContextProvider.domainName.getter()
{
  return Constants.NLConstants.rawValue.getter(0);
}

uint64_t static PaymentsContextProvider.targetDomain.getter()
{
  return Constants.NLConstants.canonicalName.getter(0);
}

uint64_t static PaymentsContextProvider.makeSDAForConfirm(isSend:)@<X0>(unsigned int a1@<W0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v22[3];
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE **v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint32_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  NSObject *v49;
  int v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint32_t v83;
  char v84;
  char *v85;
  char *v86;
  char *v87;

  v52 = a2;
  v72 = a1;
  v87 = 0;
  v86 = 0;
  v85 = 0;
  v84 = 0;
  v53 = 0;
  v65 = 0;
  v54 = type metadata accessor for Logger();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = (*(_QWORD *)(v55 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v57 = (char *)v22 - v56;
  v58 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v59 = *(_QWORD *)(v58 - 8);
  v60 = *(_QWORD *)(v59 + 64);
  v61 = (v60 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v65);
  v62 = (char *)v22 - v61;
  v63 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v64 = (uint64_t)v22 - v63;
  v87 = (char *)v22 - v63;
  v66 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  v67 = *(_QWORD *)(v66 - 8);
  v68 = (*(_QWORD *)(v67 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v65);
  v69 = (uint64_t)v22 - v68;
  v70 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v71 = (uint64_t)v22 - v70;
  v86 = (char *)v22 - v70;
  v73 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  v74 = *(_QWORD *)(v73 - 8);
  v75 = (*(_QWORD *)(v74 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v72);
  v76 = (uint64_t)v22 - v75;
  v85 = (char *)v22 - v75;
  v84 = v6 & 1;
  if ((v6 & 1) != 0)
  {
    type metadata accessor for UsoTaskBuilder_pay_common_Payment();
    v51 = UsoTaskBuilder_pay_common_Payment.__allocating_init()();
  }
  else
  {
    type metadata accessor for UsoTaskBuilder_requestMoney_common_Payment();
    v51 = UsoTaskBuilder_requestMoney_common_Payment.__allocating_init()();
  }
  v7 = v57;
  v31 = v51;
  static Siri_Nlu_External_UserWantedToProceed.from(_:)(v51, v76);
  swift_release();
  static Siri_Nlu_External_SystemOffered.from(_:)(v76, v71);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v69, v71, v66);
  Siri_Nlu_External_SystemDialogAct.init(systemOffered:)(v69, v64);
  v8 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v7, v8, v54);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 16);
  v32(v62, v64, v58);
  v33 = (*(unsigned __int8 *)(v59 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
  v40 = 7;
  v41 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v59 + 32))(v41 + v33, v62, v58);
  v49 = Logger.logObject.getter();
  v50 = static os_log_type_t.debug.getter();
  v36 = &v82;
  v82 = 12;
  v34 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v35 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v37 = v83;
  v38 = 17;
  v43 = swift_allocObject();
  *(_BYTE *)(v43 + 16) = 32;
  v44 = swift_allocObject();
  *(_BYTE *)(v44 + 16) = 8;
  v39 = 32;
  v9 = swift_allocObject();
  v10 = v41;
  v42 = v9;
  *(_QWORD *)(v9 + 16) = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  *(_QWORD *)(v9 + 24) = v10;
  v11 = swift_allocObject();
  v12 = v42;
  v46 = v11;
  *(_QWORD *)(v11 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v11 + 24) = v12;
  v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v45 = _allocateUninitializedArray<A>(_:)();
  v47 = v13;
  swift_retain();
  v14 = v43;
  v15 = v47;
  *v47 = partial apply for closure #1 in OSLogArguments.append(_:);
  v15[1] = v14;
  swift_retain();
  v16 = v44;
  v17 = v47;
  v47[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v17[3] = v16;
  swift_retain();
  v18 = v46;
  v19 = v47;
  v47[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v19[5] = v18;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v49, (os_log_type_t)v50))
  {
    v20 = v53;
    v24 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v25 = createStorage<A>(capacity:type:)(0);
    v26 = createStorage<A>(capacity:type:)(1);
    v27 = &v81;
    v81 = v24;
    v28 = &v80;
    v80 = v25;
    v29 = &v79;
    v79 = v26;
    serialize(_:at:)(2, &v81);
    serialize(_:at:)(1, v27);
    v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v78 = v43;
    closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)v27, (uint64_t)v28, (uint64_t)v29);
    v30 = v20;
    if (v20)
    {
      __break(1u);
    }
    else
    {
      v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v78 = v44;
      closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)&v81, (uint64_t)&v80, (uint64_t)&v79);
      v22[1] = 0;
      v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v78 = v46;
      closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)&v81, (uint64_t)&v80, (uint64_t)&v79);
      _os_log_impl(&dword_24701B000, v49, (os_log_type_t)v50, "#PaymentsContextProvider returning SystemOffered for confirm intent %s", v24, v37);
      destroyStorage<A>(_:count:)(v25, 0, v23);
      destroyStorage<A>(_:count:)(v26, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v24, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v54);
  v32(v52, v64, v58);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v64, v58);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v71, v66);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 8))(v76, v73);
}

uint64_t static PaymentsContextProvider.handleSendPayment(paymentRecord:needsSDA:)@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v3;
  char *v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  char *v12;
  void *v13;
  int v14;
  char v15;
  uint64_t v16;
  char *v17;

  v7 = a3;
  v13 = a1;
  v14 = a2;
  v17 = 0;
  v16 = 0;
  v15 = 0;
  v8 = type metadata accessor for NLContextUpdate();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = (char *)v6 - v10;
  v17 = (char *)v6 - v10;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v11 = 1;
  v15 = v3 & 1;
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  static PaymentsContextProvider.targetDomain.getter();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  static RREntity.makeEntities(for:)(v13);
  NLContextUpdate.rrEntities.setter();
  if ((v14 & 1) != 0)
  {
    v6[2] = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
    v6[1] = _allocateUninitializedArray<A>(_:)();
    static PaymentsContextProvider.makeSDAForSendPayment()(v4);
    _finalizeUninitializedArray<A>(_:)();
    NLContextUpdate.nluSystemDialogActs.setter();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v7, v12, v8);
}

uint64_t static PaymentsContextProvider.makeSDAForSendPayment()@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE **v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint32_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  NSObject *v62;
  int v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint32_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;

  v27 = a1;
  v73 = 0;
  v72 = 0;
  v71 = 0;
  v28 = 0;
  v33 = 0;
  v39 = type metadata accessor for Logger();
  v38 = *(_QWORD *)(v39 - 8);
  v29 = (*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v35 = (char *)v18 - v29;
  v30 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemPrompted() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v33);
  v37 = (uint64_t)v18 - v30;
  v46 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v43 = *(_QWORD *)(v46 - 8);
  v42 = *(_QWORD *)(v43 + 64);
  v31 = (v42 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = MEMORY[0x24BDAC7A8](v33);
  v45 = (char *)v18 - v31;
  v32 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v40 = (uint64_t)v18 - v32;
  v73 = (char *)v18 - v32;
  type metadata accessor for UsoTaskBuilder_pay_common_Payment();
  v36 = UsoTaskBuilder_pay_common_Payment.__allocating_init()();
  v72 = v36;
  type metadata accessor for UsoEntityBuilder_common_Payment();
  v34 = UsoEntityBuilder_common_Payment.__allocating_init()();
  v71 = v34;
  dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
  v3 = v35;
  static Siri_Nlu_External_SystemPrompted.from(_:)(v36, v37);
  Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(v37, v40);
  v4 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v3, v4, v39);
  v41 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  v41(v45, v40, v46);
  v44 = (*(unsigned __int8 *)(v43 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  v53 = 7;
  v54 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v43 + 32))(v54 + v44, v45, v46);
  v62 = Logger.logObject.getter();
  v63 = static os_log_type_t.debug.getter();
  v49 = &v69;
  v69 = 12;
  v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v48 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v50 = v70;
  v51 = 17;
  v56 = swift_allocObject();
  *(_BYTE *)(v56 + 16) = 32;
  v57 = swift_allocObject();
  *(_BYTE *)(v57 + 16) = 8;
  v52 = 32;
  v5 = swift_allocObject();
  v6 = v54;
  v55 = v5;
  *(_QWORD *)(v5 + 16) = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  *(_QWORD *)(v5 + 24) = v6;
  v7 = swift_allocObject();
  v8 = v55;
  v59 = v7;
  *(_QWORD *)(v7 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v7 + 24) = v8;
  v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v58 = _allocateUninitializedArray<A>(_:)();
  v60 = v9;
  swift_retain();
  v10 = v56;
  v11 = v60;
  *v60 = partial apply for closure #1 in OSLogArguments.append(_:);
  v11[1] = v10;
  swift_retain();
  v12 = v57;
  v13 = v60;
  v60[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v13[3] = v12;
  swift_retain();
  v14 = v59;
  v15 = v60;
  v60[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v15[5] = v14;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v62, (os_log_type_t)v63))
  {
    v16 = v28;
    v20 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v21 = createStorage<A>(capacity:type:)(0);
    v22 = createStorage<A>(capacity:type:)(1);
    v23 = &v68;
    v68 = v20;
    v24 = &v67;
    v67 = v21;
    v25 = &v66;
    v66 = v22;
    serialize(_:at:)(2, &v68);
    serialize(_:at:)(1, v23);
    v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v65 = v56;
    closure #1 in osLogInternal(_:log:type:)(&v64, (uint64_t)v23, (uint64_t)v24, (uint64_t)v25);
    v26 = v16;
    if (v16)
    {
      __break(1u);
    }
    else
    {
      v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v65 = v57;
      closure #1 in osLogInternal(_:log:type:)(&v64, (uint64_t)&v68, (uint64_t)&v67, (uint64_t)&v66);
      v18[1] = 0;
      v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v65 = v59;
      closure #1 in osLogInternal(_:log:type:)(&v64, (uint64_t)&v68, (uint64_t)&v67, (uint64_t)&v66);
      _os_log_impl(&dword_24701B000, v62, (os_log_type_t)v63, "#PaymentsContextProvider returning SystemPrompted for handle SendPayment intent %s", v20, v50);
      destroyStorage<A>(_:count:)(v21, 0, v19);
      destroyStorage<A>(_:count:)(v22, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v20, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v39);
  v41(v27, v40, v46);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v40, v46);
  swift_release();
  return swift_release();
}

uint64_t static PaymentsContextProvider.makeSDAForRequestPayment()@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE **v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint32_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  NSObject *v62;
  int v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint32_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;

  v27 = a1;
  v73 = 0;
  v72 = 0;
  v71 = 0;
  v28 = 0;
  v33 = 0;
  v39 = type metadata accessor for Logger();
  v38 = *(_QWORD *)(v39 - 8);
  v29 = (*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v35 = (char *)v18 - v29;
  v30 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemPrompted() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v33);
  v37 = (uint64_t)v18 - v30;
  v46 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v43 = *(_QWORD *)(v46 - 8);
  v42 = *(_QWORD *)(v43 + 64);
  v31 = (v42 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = MEMORY[0x24BDAC7A8](v33);
  v45 = (char *)v18 - v31;
  v32 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v40 = (uint64_t)v18 - v32;
  v73 = (char *)v18 - v32;
  type metadata accessor for UsoTaskBuilder_requestMoney_common_Payment();
  v36 = UsoTaskBuilder_requestMoney_common_Payment.__allocating_init()();
  v72 = v36;
  type metadata accessor for UsoEntityBuilder_common_Payment();
  v34 = UsoEntityBuilder_common_Payment.__allocating_init()();
  v71 = v34;
  dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
  v3 = v35;
  static Siri_Nlu_External_SystemPrompted.from(_:)(v36, v37);
  Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(v37, v40);
  v4 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v3, v4, v39);
  v41 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  v41(v45, v40, v46);
  v44 = (*(unsigned __int8 *)(v43 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  v53 = 7;
  v54 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v43 + 32))(v54 + v44, v45, v46);
  v62 = Logger.logObject.getter();
  v63 = static os_log_type_t.debug.getter();
  v49 = &v69;
  v69 = 12;
  v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v48 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v50 = v70;
  v51 = 17;
  v56 = swift_allocObject();
  *(_BYTE *)(v56 + 16) = 32;
  v57 = swift_allocObject();
  *(_BYTE *)(v57 + 16) = 8;
  v52 = 32;
  v5 = swift_allocObject();
  v6 = v54;
  v55 = v5;
  *(_QWORD *)(v5 + 16) = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  *(_QWORD *)(v5 + 24) = v6;
  v7 = swift_allocObject();
  v8 = v55;
  v59 = v7;
  *(_QWORD *)(v7 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v7 + 24) = v8;
  v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v58 = _allocateUninitializedArray<A>(_:)();
  v60 = v9;
  swift_retain();
  v10 = v56;
  v11 = v60;
  *v60 = partial apply for closure #1 in OSLogArguments.append(_:);
  v11[1] = v10;
  swift_retain();
  v12 = v57;
  v13 = v60;
  v60[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v13[3] = v12;
  swift_retain();
  v14 = v59;
  v15 = v60;
  v60[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v15[5] = v14;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v62, (os_log_type_t)v63))
  {
    v16 = v28;
    v20 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v21 = createStorage<A>(capacity:type:)(0);
    v22 = createStorage<A>(capacity:type:)(1);
    v23 = &v68;
    v68 = v20;
    v24 = &v67;
    v67 = v21;
    v25 = &v66;
    v66 = v22;
    serialize(_:at:)(2, &v68);
    serialize(_:at:)(1, v23);
    v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v65 = v56;
    closure #1 in osLogInternal(_:log:type:)(&v64, (uint64_t)v23, (uint64_t)v24, (uint64_t)v25);
    v26 = v16;
    if (v16)
    {
      __break(1u);
    }
    else
    {
      v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v65 = v57;
      closure #1 in osLogInternal(_:log:type:)(&v64, (uint64_t)&v68, (uint64_t)&v67, (uint64_t)&v66);
      v18[1] = 0;
      v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v65 = v59;
      closure #1 in osLogInternal(_:log:type:)(&v64, (uint64_t)&v68, (uint64_t)&v67, (uint64_t)&v66);
      _os_log_impl(&dword_24701B000, v62, (os_log_type_t)v63, "#PaymentsContextProvider returning SystemPrompted for handle RequestPayment intent %s", v20, v50);
      destroyStorage<A>(_:count:)(v21, 0, v19);
      destroyStorage<A>(_:count:)(v22, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v20, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v39);
  v41(v27, v40, v46);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v40, v46);
  swift_release();
  return swift_release();
}

uint64_t static PaymentsContextProvider.handleSearchForAccounts(account:needsSDA:)@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v3;
  char *v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  char *v12;
  void *v13;
  int v14;
  char v15;
  uint64_t v16;
  char *v17;

  v7 = a3;
  v13 = a1;
  v14 = a2;
  v17 = 0;
  v16 = 0;
  v15 = 0;
  v8 = type metadata accessor for NLContextUpdate();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = (char *)v6 - v10;
  v17 = (char *)v6 - v10;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v11 = 1;
  v15 = v3 & 1;
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  static PaymentsContextProvider.targetDomain.getter();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  static RREntity.makeEntities(for:)(v13);
  NLContextUpdate.rrEntities.setter();
  if ((v14 & 1) != 0)
  {
    v6[2] = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
    v6[1] = _allocateUninitializedArray<A>(_:)();
    static PaymentsContextProvider.makeSDAForSearchForAccount()(v4);
    _finalizeUninitializedArray<A>(_:)();
    NLContextUpdate.nluSystemDialogActs.setter();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v7, v12, v8);
}

uint64_t static PaymentsContextProvider.makeSDAForSearchForAccount()@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v19[3];
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint32_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  NSObject *v62;
  int v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint32_t v70;
  uint64_t v71;
  char *v72;

  v28 = a1;
  v72 = 0;
  v71 = 0;
  v29 = 0;
  v32 = 0;
  v39 = type metadata accessor for Logger();
  v38 = *(_QWORD *)(v39 - 8);
  v30 = (*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v35 = (char *)v19 - v30;
  v31 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemPrompted() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v32);
  v37 = (uint64_t)v19 - v31;
  v46 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v43 = *(_QWORD *)(v46 - 8);
  v42 = *(_QWORD *)(v43 + 64);
  v33 = (v42 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = MEMORY[0x24BDAC7A8](v32);
  v45 = (char *)v19 - v33;
  v34 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v40 = (uint64_t)v19 - v34;
  v72 = (char *)v19 - v34;
  type metadata accessor for UsoTaskBuilder_summarise_common_PaymentAccount();
  v3 = UsoTaskBuilder_summarise_common_PaymentAccount.__allocating_init()();
  v4 = v35;
  v36 = v3;
  v71 = v3;
  static Siri_Nlu_External_SystemPrompted.from(_:)(v3, v37);
  Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(v37, v40);
  v5 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v4, v5, v39);
  v41 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  v41(v45, v40, v46);
  v44 = (*(unsigned __int8 *)(v43 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  v53 = 7;
  v54 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v43 + 32))(v54 + v44, v45, v46);
  v62 = Logger.logObject.getter();
  v63 = static os_log_type_t.debug.getter();
  v49 = &v69;
  v69 = 12;
  v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v48 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v50 = v70;
  v51 = 17;
  v56 = swift_allocObject();
  *(_BYTE *)(v56 + 16) = 32;
  v57 = swift_allocObject();
  *(_BYTE *)(v57 + 16) = 8;
  v52 = 32;
  v6 = swift_allocObject();
  v7 = v54;
  v55 = v6;
  *(_QWORD *)(v6 + 16) = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  *(_QWORD *)(v6 + 24) = v7;
  v8 = swift_allocObject();
  v9 = v55;
  v59 = v8;
  *(_QWORD *)(v8 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v8 + 24) = v9;
  v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v58 = _allocateUninitializedArray<A>(_:)();
  v60 = v10;
  swift_retain();
  v11 = v56;
  v12 = v60;
  *v60 = partial apply for closure #1 in OSLogArguments.append(_:);
  v12[1] = v11;
  swift_retain();
  v13 = v57;
  v14 = v60;
  v60[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v14[3] = v13;
  swift_retain();
  v15 = v59;
  v16 = v60;
  v60[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v16[5] = v15;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v62, (os_log_type_t)v63))
  {
    v17 = v29;
    v21 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v22 = createStorage<A>(capacity:type:)(0);
    v23 = createStorage<A>(capacity:type:)(1);
    v24 = &v68;
    v68 = v21;
    v25 = &v67;
    v67 = v22;
    v26 = &v66;
    v66 = v23;
    serialize(_:at:)(2, &v68);
    serialize(_:at:)(1, v24);
    v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v65 = v56;
    closure #1 in osLogInternal(_:log:type:)(&v64, (uint64_t)v24, (uint64_t)v25, (uint64_t)v26);
    v27 = v17;
    if (v17)
    {
      __break(1u);
    }
    else
    {
      v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v65 = v57;
      closure #1 in osLogInternal(_:log:type:)(&v64, (uint64_t)&v68, (uint64_t)&v67, (uint64_t)&v66);
      v19[1] = 0;
      v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v65 = v59;
      closure #1 in osLogInternal(_:log:type:)(&v64, (uint64_t)&v68, (uint64_t)&v67, (uint64_t)&v66);
      _os_log_impl(&dword_24701B000, v62, (os_log_type_t)v63, "#PaymentsContextProvider returning SystemPrompted for handle Search for Accounts intent %s", v21, v50);
      destroyStorage<A>(_:count:)(v22, 0, v20);
      destroyStorage<A>(_:count:)(v23, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v21, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v39);
  v41(v28, v40, v46);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v40, v46);
  return swift_release();
}

uint64_t closure #1 in static PaymentsContextProvider.needsValueContextUpdate(value:)@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = SearchForAccountsSlots.canonicalName.getter(*a1);
  *a2 = result;
  a2[1] = v3;
  return result;
}

{
  uint64_t result;
  uint64_t v3;

  result = RequestPaymentSlots.canonicalName.getter(*a1);
  *a2 = result;
  a2[1] = v3;
  return result;
}

void static PaymentsContextProvider.makeSDAForSearchForAccountNeedsValue(_:)(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  _QWORD v4[36];
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;

  v4[34] = a2;
  v20 = a1;
  v27 = 0;
  v26 = 0;
  v25 = 0;
  v24 = 0;
  v4[35] = 0;
  v23 = 0;
  v18 = 0;
  v5 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (char *)v4 - v7;
  v9 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemPrompted() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v18);
  v10 = (char *)v4 - v9;
  v11 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = *(_QWORD *)(v12 + 64);
  v13 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v18);
  v15 = (char *)v4 - v13;
  v16 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v17 = (char *)v4 - v16;
  v27 = (char *)v4 - v16;
  v26 = v3;
  type metadata accessor for UsoTaskBuilder_summarise_common_PaymentAccount();
  v19 = UsoTaskBuilder_summarise_common_PaymentAccount.__allocating_init()();
  v25 = v19;
  type metadata accessor for UsoEntityBuilder_common_PaymentAccount();
  v21 = UsoEntityBuilder_common_PaymentAccount.__allocating_init()();
  v24 = v21;
  v22 = v20;
  __asm { BR              X8 }
}

uint64_t sub_247123EF8()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(_QWORD *)(v0 - 296) = v1._object;
  MEMORY[0x249571A98](v1._countAndFlagsBits);
  swift_bridgeObjectRelease();
  dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
  v2 = *(_QWORD *)(v0 - 248);
  static Siri_Nlu_External_SystemPrompted.from(_:)(*(_QWORD *)(v0 - 160), *(_QWORD *)(v0 - 232));
  Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(*(_QWORD *)(v0 - 232), *(_QWORD *)(v0 - 176));
  v3 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 - 264) + 16))(v2, v3, *(_QWORD *)(v0 - 272));
  v4 = *(_QWORD *)(v0 - 176);
  v5 = *(_QWORD *)(v0 - 224);
  v6 = *(_QWORD *)(v0 - 192);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 216) + 16);
  *(_QWORD *)(v0 - 480) = v7;
  v7(v6, v4, v5);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(v0 - 216) + 80);
  *(_QWORD *)(v0 - 472) = (v8 + 16) & ~v8;
  *(_QWORD *)(v0 - 416) = 7;
  v9 = swift_allocObject();
  v10 = *(_QWORD *)(v0 - 472);
  v11 = *(_QWORD *)(v0 - 216);
  v12 = *(_QWORD *)(v0 - 192);
  v13 = *(_QWORD *)(v0 - 224);
  *(_QWORD *)(v0 - 408) = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v9 + v10, v12, v13);
  *(_QWORD *)(v0 - 344) = Logger.logObject.getter();
  *(_DWORD *)(v0 - 332) = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 - 448) = v0 - 80;
  *(_QWORD *)(v0 - 80) = 12;
  *(_QWORD *)(v0 - 464) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 - 456) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  *(_DWORD *)(v0 - 436) = *(_DWORD *)(v0 - 68);
  *(_QWORD *)(v0 - 432) = 17;
  v14 = swift_allocObject();
  *(_QWORD *)(v0 - 392) = v14;
  *(_BYTE *)(v14 + 16) = 32;
  v15 = swift_allocObject();
  *(_QWORD *)(v0 - 384) = v15;
  *(_BYTE *)(v15 + 16) = 8;
  *(_QWORD *)(v0 - 424) = 32;
  v16 = swift_allocObject();
  v17 = *(_QWORD *)(v0 - 408);
  *(_QWORD *)(v0 - 400) = v16;
  *(_QWORD *)(v16 + 16) = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  *(_QWORD *)(v16 + 24) = v17;
  v18 = swift_allocObject();
  v19 = *(_QWORD *)(v0 - 400);
  *(_QWORD *)(v0 - 368) = v18;
  *(_QWORD *)(v18 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v18 + 24) = v19;
  *(_QWORD *)(v0 - 352) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  *(_QWORD *)(v0 - 376) = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)(v0 - 360) = v20;
  swift_retain();
  v21 = *(_QWORD *)(v0 - 392);
  v22 = *(_QWORD **)(v0 - 360);
  *v22 = partial apply for closure #1 in OSLogArguments.append(_:);
  v22[1] = v21;
  swift_retain();
  v23 = *(_QWORD *)(v0 - 384);
  v24 = *(_QWORD *)(v0 - 360);
  *(_QWORD *)(v24 + 16) = partial apply for closure #1 in OSLogArguments.append(_:);
  *(_QWORD *)(v24 + 24) = v23;
  swift_retain();
  v25 = *(_QWORD *)(v0 - 368);
  v26 = *(_QWORD *)(v0 - 360);
  *(_QWORD *)(v26 + 32) = partial apply for closure #1 in OSLogArguments.append(_:);
  *(_QWORD *)(v26 + 40) = v25;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(*(os_log_t *)(v0 - 344), (os_log_type_t)*(_DWORD *)(v0 - 332)))
  {
    v27 = *(_QWORD *)(v0 - 280);
    *(_QWORD *)(v0 - 536) = static UnsafeMutablePointer.allocate(capacity:)();
    *(_QWORD *)(v0 - 544) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    *(_QWORD *)(v0 - 528) = createStorage<A>(capacity:type:)(0);
    v28 = createStorage<A>(capacity:type:)(1);
    v29 = *(_QWORD *)(v0 - 536);
    v30 = *(_QWORD *)(v0 - 528);
    *(_QWORD *)(v0 - 520) = v28;
    *(_QWORD *)(v0 - 512) = v0 - 88;
    *(_QWORD *)(v0 - 88) = v29;
    *(_QWORD *)(v0 - 504) = v0 - 96;
    *(_QWORD *)(v0 - 96) = v30;
    *(_QWORD *)(v0 - 496) = v0 - 104;
    *(_QWORD *)(v0 - 104) = v28;
    serialize(_:at:)(2, (_BYTE **)(v0 - 88));
    serialize(_:at:)(1, *(_BYTE ***)(v0 - 512));
    v31 = *(_QWORD *)(v0 - 392);
    v32 = *(_QWORD *)(v0 - 512);
    v33 = *(_QWORD *)(v0 - 504);
    v34 = *(_QWORD *)(v0 - 496);
    *(_QWORD *)(v0 - 120) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v0 - 112) = v31;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 - 120), v32, v33, v34);
    *(_QWORD *)(v0 - 488) = v27;
    if (v27)
      goto LABEL_9;
    v35 = *(_QWORD *)(v0 - 488);
    v36 = *(_QWORD *)(v0 - 384);
    *(_QWORD *)(v0 - 120) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v0 - 112) = v36;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 - 120), v0 - 88, v0 - 96, v0 - 104);
    *(_QWORD *)(v0 - 560) = v35;
    if (v35
      || (v37 = *(_QWORD *)(v0 - 560),
          v38 = *(_QWORD *)(v0 - 368),
          *(_QWORD *)(v0 - 120) = partial apply for closure #1 in OSLogArguments.append(_:),
          *(_QWORD *)(v0 - 112) = v38,
          closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 - 120), v0 - 88, v0 - 96, v0 - 104), v37))
    {
LABEL_9:
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, *(os_log_t *)(v0 - 344), (os_log_type_t)*(_DWORD *)(v0 - 332), "#PaymentsContextProvider returning SystemPrompted for handle Search for Accounts intent %s", *(uint8_t **)(v0 - 536), *(_DWORD *)(v0 - 436));
      destroyStorage<A>(_:count:)(*(_QWORD *)(v0 - 528), 0, *(_QWORD *)(v0 - 544));
      destroyStorage<A>(_:count:)(*(_QWORD *)(v0 - 520), 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](*(_QWORD *)(v0 - 536), MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 264) + 8))(*(_QWORD *)(v0 - 248), *(_QWORD *)(v0 - 272));
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 - 480))(*(_QWORD *)(v0 - 288), *(_QWORD *)(v0 - 176), *(_QWORD *)(v0 - 224));
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 216) + 8))(*(_QWORD *)(v0 - 176), *(_QWORD *)(v0 - 224));
  swift_release();
  return swift_release();
}

uint64_t static PaymentsContextProvider.needsValueContextUpdate(value:isVerbless:)@<X0>(unsigned int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char *v39;

  v22 = a3;
  v24 = a1;
  v23 = a2;
  v39 = 0;
  v38 = 0;
  v37 = 0;
  v32 = 0;
  v25 = type metadata accessor for NLContextUpdate();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v30 = (char *)&v15 - v27;
  v39 = (char *)&v15 - v27;
  v38 = MEMORY[0x24BDAC7A8](v24);
  v31 = 1;
  v37 = v3 & 1;
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  v34 = MEMORY[0x24BEE0D00];
  v29 = _allocateUninitializedArray<A>(_:)();
  v28 = v4;
  v5 = Constants.NLPaymentConfirmationValue.canonicalName.getter(v31);
  v6 = v28;
  *v28 = v5;
  v6[1] = v7;
  v8 = Constants.NLPaymentConfirmationValue.canonicalName.getter(2);
  v9 = v28;
  v28[2] = v8;
  v9[3] = v10;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.nl.Payments", 0x1AuLL, v31 & 1);
  NLContextUpdate.weightedPromptTargetDomain.setter();
  v36 = static SendPaymentSlots.allCases.getter();
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SendPaymentSlots]);
  lazy protocol witness table accessor for type [SendPaymentSlots] and conformance [A]();
  v35 = Sequence.compactMap<A>(_:)();
  v21 = v35;
  outlined destroy of [SFCardSection]();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  if ((v23 & 1) != 0)
  {
    v19 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
    v18 = _allocateUninitializedArray<A>(_:)();
    static PaymentsContextProvider.makeSDAForVerblessSendPaymentNeedsValue(_:)(v24, v11);
    v12 = v18;
  }
  else
  {
    v17 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
    v16 = _allocateUninitializedArray<A>(_:)();
    static PaymentsContextProvider.makeSDAForSendPaymentNeedsValue(_:)(v24, v13);
    v12 = v16;
  }
  _finalizeUninitializedArray<A>(_:)();
  v20 = v12;
  NLContextUpdate.nluSystemDialogActs.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v22, v30, v25);
}

uint64_t closure #1 in static PaymentsContextProvider.needsValueContextUpdate(value:isVerbless:)@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = SendPaymentSlots.canonicalName.getter(*a1);
  *a2 = result;
  a2[1] = v3;
  return result;
}

uint64_t static PaymentsContextProvider.makeSDAForVerblessSendPaymentNeedsValue(_:)@<X0>(int a1@<W0>, char *a2@<X8>)
{
  uint64_t v2;
  char v3;
  Swift::String v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE **v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint32_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  NSObject *v46;
  int v47;
  void *object;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint32_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char *v82;

  v51 = a2;
  v68 = a1;
  v82 = 0;
  v81 = 0;
  v80 = 0;
  v79 = 0;
  v52 = 0;
  v71 = 0;
  v70 = 0;
  v66 = 0;
  v53 = type metadata accessor for Logger();
  v54 = *(_QWORD *)(v53 - 8);
  v55 = (*(_QWORD *)(v54 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v56 = (char *)v20 - v55;
  v57 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemPrompted() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v66);
  v58 = (uint64_t)v20 - v57;
  v59 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v60 = *(_QWORD *)(v59 - 8);
  v62 = *(_QWORD *)(v60 + 64);
  v61 = (v62 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v66);
  v63 = (char *)v20 - v61;
  v64 = (v62 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v65 = (uint64_t)v20 - v64;
  v82 = (char *)v20 - v64;
  v81 = v3;
  type metadata accessor for UsoTaskBuilder_noVerb_common_Payment();
  v67 = UsoTaskBuilder_noVerb_common_Payment.__allocating_init()();
  v80 = v67;
  type metadata accessor for UsoEntityBuilder_common_Payment();
  v69 = UsoEntityBuilder_common_Payment.__allocating_init()();
  v79 = v69;
  if ((_BYTE)v68)
  {
    if (v68 == 1)
    {
      type metadata accessor for UsoEntityBuilder_common_CurrencyAmount();
      v49 = UsoEntityBuilder_common_CurrencyAmount.__allocating_init()();
      v71 = v49;
      swift_retain();
      MEMORY[0x249571864](v49, MEMORY[0x24BEA2D70]);
      swift_release();
      swift_release();
    }
    else
    {
      v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      object = v4._object;
      MEMORY[0x249571840](v4._countAndFlagsBits);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    type metadata accessor for UsoEntityBuilder_common_PaymentAccount();
    v50 = UsoEntityBuilder_common_PaymentAccount.__allocating_init()();
    v70 = v50;
    swift_retain();
    MEMORY[0x24957184C](v50, MEMORY[0x24BEA2DD8]);
    swift_release();
    swift_release();
  }
  dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
  v5 = v56;
  static Siri_Nlu_External_SystemPrompted.from(_:)(v67, v58);
  Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(v58, v65);
  v6 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v5, v6, v53);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
  v29(v63, v65, v59);
  v30 = (*(unsigned __int8 *)(v60 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
  v37 = 7;
  v38 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v60 + 32))(v38 + v30, v63, v59);
  v46 = Logger.logObject.getter();
  v47 = static os_log_type_t.debug.getter();
  v33 = &v77;
  v77 = 12;
  v31 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v32 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v34 = v78;
  v35 = 17;
  v40 = swift_allocObject();
  *(_BYTE *)(v40 + 16) = 32;
  v41 = swift_allocObject();
  *(_BYTE *)(v41 + 16) = 8;
  v36 = 32;
  v7 = swift_allocObject();
  v8 = v38;
  v39 = v7;
  *(_QWORD *)(v7 + 16) = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  *(_QWORD *)(v7 + 24) = v8;
  v9 = swift_allocObject();
  v10 = v39;
  v43 = v9;
  *(_QWORD *)(v9 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v9 + 24) = v10;
  v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v42 = _allocateUninitializedArray<A>(_:)();
  v44 = v11;
  swift_retain();
  v12 = v40;
  v13 = v44;
  *v44 = partial apply for closure #1 in OSLogArguments.append(_:);
  v13[1] = v12;
  swift_retain();
  v14 = v41;
  v15 = v44;
  v44[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v15[3] = v14;
  swift_retain();
  v16 = v43;
  v17 = v44;
  v44[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v17[5] = v16;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v46, (os_log_type_t)v47))
  {
    v18 = v52;
    v22 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v23 = createStorage<A>(capacity:type:)(0);
    v24 = createStorage<A>(capacity:type:)(1);
    v25 = &v76;
    v76 = v22;
    v26 = &v75;
    v75 = v23;
    v27 = &v74;
    v74 = v24;
    serialize(_:at:)(2, &v76);
    serialize(_:at:)(1, v25);
    v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v73 = v40;
    closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)v25, (uint64_t)v26, (uint64_t)v27);
    v28 = v18;
    if (v18)
    {
      __break(1u);
    }
    else
    {
      v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v73 = v41;
      closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v76, (uint64_t)&v75, (uint64_t)&v74);
      v20[0] = 0;
      v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v73 = v43;
      closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v76, (uint64_t)&v75, (uint64_t)&v74);
      _os_log_impl(&dword_24701B000, v46, (os_log_type_t)v47, "#PaymentsContextProvider returning SystemPrompted for handle verbless Send Payment intent %s", v22, v34);
      destroyStorage<A>(_:count:)(v23, 0, v21);
      destroyStorage<A>(_:count:)(v24, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v22, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v54 + 8))(v56, v53);
  v29(v51, v65, v59);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v65, v59);
  swift_release();
  return swift_release();
}

uint64_t static PaymentsContextProvider.makeSDAForSendPaymentNeedsValue(_:)@<X0>(int a1@<W0>, char *a2@<X8>)
{
  uint64_t v2;
  char v3;
  Swift::String v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE **v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint32_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  NSObject *v46;
  int v47;
  void *object;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint32_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char *v82;

  v51 = a2;
  v68 = a1;
  v82 = 0;
  v81 = 0;
  v80 = 0;
  v79 = 0;
  v52 = 0;
  v71 = 0;
  v70 = 0;
  v66 = 0;
  v53 = type metadata accessor for Logger();
  v54 = *(_QWORD *)(v53 - 8);
  v55 = (*(_QWORD *)(v54 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v56 = (char *)v20 - v55;
  v57 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemPrompted() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v66);
  v58 = (uint64_t)v20 - v57;
  v59 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v60 = *(_QWORD *)(v59 - 8);
  v62 = *(_QWORD *)(v60 + 64);
  v61 = (v62 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v66);
  v63 = (char *)v20 - v61;
  v64 = (v62 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v65 = (uint64_t)v20 - v64;
  v82 = (char *)v20 - v64;
  v81 = v3;
  type metadata accessor for UsoTaskBuilder_pay_common_Payment();
  v67 = UsoTaskBuilder_pay_common_Payment.__allocating_init()();
  v80 = v67;
  type metadata accessor for UsoEntityBuilder_common_Payment();
  v69 = UsoEntityBuilder_common_Payment.__allocating_init()();
  v79 = v69;
  if ((_BYTE)v68)
  {
    if (v68 == 1)
    {
      type metadata accessor for UsoEntityBuilder_common_CurrencyAmount();
      v49 = UsoEntityBuilder_common_CurrencyAmount.__allocating_init()();
      v71 = v49;
      swift_retain();
      MEMORY[0x249571864](v49, MEMORY[0x24BEA2D70]);
      swift_release();
      swift_release();
    }
    else
    {
      v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      object = v4._object;
      MEMORY[0x249571840](v4._countAndFlagsBits);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    type metadata accessor for UsoEntityBuilder_common_PaymentAccount();
    v50 = UsoEntityBuilder_common_PaymentAccount.__allocating_init()();
    v70 = v50;
    swift_retain();
    MEMORY[0x24957184C](v50, MEMORY[0x24BEA2DD8]);
    swift_release();
    swift_release();
  }
  dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
  v5 = v56;
  static Siri_Nlu_External_SystemPrompted.from(_:)(v67, v58);
  Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(v58, v65);
  v6 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v5, v6, v53);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
  v29(v63, v65, v59);
  v30 = (*(unsigned __int8 *)(v60 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
  v37 = 7;
  v38 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v60 + 32))(v38 + v30, v63, v59);
  v46 = Logger.logObject.getter();
  v47 = static os_log_type_t.debug.getter();
  v33 = &v77;
  v77 = 12;
  v31 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v32 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v34 = v78;
  v35 = 17;
  v40 = swift_allocObject();
  *(_BYTE *)(v40 + 16) = 32;
  v41 = swift_allocObject();
  *(_BYTE *)(v41 + 16) = 8;
  v36 = 32;
  v7 = swift_allocObject();
  v8 = v38;
  v39 = v7;
  *(_QWORD *)(v7 + 16) = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  *(_QWORD *)(v7 + 24) = v8;
  v9 = swift_allocObject();
  v10 = v39;
  v43 = v9;
  *(_QWORD *)(v9 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v9 + 24) = v10;
  v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v42 = _allocateUninitializedArray<A>(_:)();
  v44 = v11;
  swift_retain();
  v12 = v40;
  v13 = v44;
  *v44 = partial apply for closure #1 in OSLogArguments.append(_:);
  v13[1] = v12;
  swift_retain();
  v14 = v41;
  v15 = v44;
  v44[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v15[3] = v14;
  swift_retain();
  v16 = v43;
  v17 = v44;
  v44[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v17[5] = v16;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v46, (os_log_type_t)v47))
  {
    v18 = v52;
    v22 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v23 = createStorage<A>(capacity:type:)(0);
    v24 = createStorage<A>(capacity:type:)(1);
    v25 = &v76;
    v76 = v22;
    v26 = &v75;
    v75 = v23;
    v27 = &v74;
    v74 = v24;
    serialize(_:at:)(2, &v76);
    serialize(_:at:)(1, v25);
    v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v73 = v40;
    closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)v25, (uint64_t)v26, (uint64_t)v27);
    v28 = v18;
    if (v18)
    {
      __break(1u);
    }
    else
    {
      v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v73 = v41;
      closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v76, (uint64_t)&v75, (uint64_t)&v74);
      v20[0] = 0;
      v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v73 = v43;
      closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v76, (uint64_t)&v75, (uint64_t)&v74);
      _os_log_impl(&dword_24701B000, v46, (os_log_type_t)v47, "#PaymentsContextProvider returning SystemPrompted for handle Send Payment intent %s", v22, v34);
      destroyStorage<A>(_:count:)(v23, 0, v21);
      destroyStorage<A>(_:count:)(v24, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v22, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v54 + 8))(v56, v53);
  v29(v51, v65, v59);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v65, v59);
  swift_release();
  return swift_release();
}

uint64_t static PaymentsContextProvider.makeSDAForRequestPaymentNeedsValue(_:)@<X0>(int a1@<W0>, char *a2@<X8>)
{
  uint64_t v2;
  char v3;
  Swift::String v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE **v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint32_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  NSObject *v46;
  int v47;
  void *object;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint32_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char *v82;

  v51 = a2;
  v68 = a1;
  v82 = 0;
  v81 = 0;
  v80 = 0;
  v79 = 0;
  v52 = 0;
  v71 = 0;
  v70 = 0;
  v66 = 0;
  v53 = type metadata accessor for Logger();
  v54 = *(_QWORD *)(v53 - 8);
  v55 = (*(_QWORD *)(v54 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v56 = (char *)v20 - v55;
  v57 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemPrompted() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v66);
  v58 = (uint64_t)v20 - v57;
  v59 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v60 = *(_QWORD *)(v59 - 8);
  v62 = *(_QWORD *)(v60 + 64);
  v61 = (v62 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v66);
  v63 = (char *)v20 - v61;
  v64 = (v62 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v65 = (uint64_t)v20 - v64;
  v82 = (char *)v20 - v64;
  v81 = v3;
  type metadata accessor for UsoTaskBuilder_requestMoney_common_Payment();
  v67 = UsoTaskBuilder_requestMoney_common_Payment.__allocating_init()();
  v80 = v67;
  type metadata accessor for UsoEntityBuilder_common_Payment();
  v69 = UsoEntityBuilder_common_Payment.__allocating_init()();
  v79 = v69;
  if ((_BYTE)v68)
  {
    if (v68 == 1)
    {
      type metadata accessor for UsoEntityBuilder_common_CurrencyAmount();
      v49 = UsoEntityBuilder_common_CurrencyAmount.__allocating_init()();
      v71 = v49;
      swift_retain();
      MEMORY[0x249571864](v49, MEMORY[0x24BEA2D70]);
      swift_release();
      swift_release();
    }
    else
    {
      v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      object = v4._object;
      MEMORY[0x249571840](v4._countAndFlagsBits);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    type metadata accessor for UsoEntityBuilder_common_PaymentAccount();
    v50 = UsoEntityBuilder_common_PaymentAccount.__allocating_init()();
    v70 = v50;
    swift_retain();
    MEMORY[0x249571858](v50, MEMORY[0x24BEA2DD8]);
    swift_release();
    swift_release();
  }
  dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
  v5 = v56;
  static Siri_Nlu_External_SystemPrompted.from(_:)(v67, v58);
  Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(v58, v65);
  v6 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v5, v6, v53);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
  v29(v63, v65, v59);
  v30 = (*(unsigned __int8 *)(v60 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
  v37 = 7;
  v38 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v60 + 32))(v38 + v30, v63, v59);
  v46 = Logger.logObject.getter();
  v47 = static os_log_type_t.debug.getter();
  v33 = &v77;
  v77 = 12;
  v31 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v32 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v34 = v78;
  v35 = 17;
  v40 = swift_allocObject();
  *(_BYTE *)(v40 + 16) = 32;
  v41 = swift_allocObject();
  *(_BYTE *)(v41 + 16) = 8;
  v36 = 32;
  v7 = swift_allocObject();
  v8 = v38;
  v39 = v7;
  *(_QWORD *)(v7 + 16) = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  *(_QWORD *)(v7 + 24) = v8;
  v9 = swift_allocObject();
  v10 = v39;
  v43 = v9;
  *(_QWORD *)(v9 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v9 + 24) = v10;
  v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v42 = _allocateUninitializedArray<A>(_:)();
  v44 = v11;
  swift_retain();
  v12 = v40;
  v13 = v44;
  *v44 = partial apply for closure #1 in OSLogArguments.append(_:);
  v13[1] = v12;
  swift_retain();
  v14 = v41;
  v15 = v44;
  v44[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v15[3] = v14;
  swift_retain();
  v16 = v43;
  v17 = v44;
  v44[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v17[5] = v16;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v46, (os_log_type_t)v47))
  {
    v18 = v52;
    v22 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v23 = createStorage<A>(capacity:type:)(0);
    v24 = createStorage<A>(capacity:type:)(1);
    v25 = &v76;
    v76 = v22;
    v26 = &v75;
    v75 = v23;
    v27 = &v74;
    v74 = v24;
    serialize(_:at:)(2, &v76);
    serialize(_:at:)(1, v25);
    v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v73 = v40;
    closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)v25, (uint64_t)v26, (uint64_t)v27);
    v28 = v18;
    if (v18)
    {
      __break(1u);
    }
    else
    {
      v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v73 = v41;
      closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v76, (uint64_t)&v75, (uint64_t)&v74);
      v20[0] = 0;
      v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v73 = v43;
      closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v76, (uint64_t)&v75, (uint64_t)&v74);
      _os_log_impl(&dword_24701B000, v46, (os_log_type_t)v47, "#PaymentsContextProvider returning SystemPrompted for handle Request Payment intent %s", v22, v34);
      destroyStorage<A>(_:count:)(v23, 0, v21);
      destroyStorage<A>(_:count:)(v24, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v22, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v54 + 8))(v56, v53);
  v29(v51, v65, v59);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v65, v59);
  swift_release();
  return swift_release();
}

uint64_t static PaymentsContextProvider.makeSDAForDisambiguatePerson(persons:isSend:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t result;
  _QWORD v23[5];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE **v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint32_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  NSObject *v59;
  int v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint32_t v69;
  char v70;
  uint64_t v71;

  v36 = a3;
  v43 = a1;
  v38 = a2;
  v71 = 0;
  v70 = 0;
  v37 = 0;
  v66 = 0;
  v42 = type metadata accessor for Logger();
  v41 = *(_QWORD *)(v42 - 8);
  v39 = (*(_QWORD *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = (char *)v23 - v39;
  v40 = (char *)v23 - v39;
  v71 = MEMORY[0x24BDAC7A8](v43);
  v70 = v4 & 1;
  v5 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v3, v5, v42);
  swift_bridgeObjectRetain();
  v50 = 7;
  v51 = swift_allocObject();
  *(_QWORD *)(v51 + 16) = v43;
  v59 = Logger.logObject.getter();
  v60 = static os_log_type_t.debug.getter();
  v46 = &v68;
  v68 = 12;
  v44 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v45 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v47 = v69;
  v48 = 17;
  v53 = swift_allocObject();
  *(_BYTE *)(v53 + 16) = 32;
  v54 = swift_allocObject();
  *(_BYTE *)(v54 + 16) = 8;
  v49 = 32;
  v6 = swift_allocObject();
  v7 = v51;
  v52 = v6;
  *(_QWORD *)(v6 + 16) = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForDisambiguatePerson(persons:isSend:);
  *(_QWORD *)(v6 + 24) = v7;
  v8 = swift_allocObject();
  v9 = v52;
  v56 = v8;
  *(_QWORD *)(v8 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v8 + 24) = v9;
  v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v55 = _allocateUninitializedArray<A>(_:)();
  v57 = v10;
  swift_retain();
  v11 = v53;
  v12 = v57;
  *v57 = partial apply for closure #1 in OSLogArguments.append(_:);
  v12[1] = v11;
  swift_retain();
  v13 = v54;
  v14 = v57;
  v57[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v14[3] = v13;
  swift_retain();
  v15 = v56;
  v16 = v57;
  v57[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v16[5] = v15;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v59, (os_log_type_t)v60))
  {
    v17 = v37;
    v29 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v30 = createStorage<A>(capacity:type:)(0);
    v31 = createStorage<A>(capacity:type:)(1);
    v32 = &v65;
    v65 = v29;
    v33 = &v64;
    v64 = v30;
    v34 = &v63;
    v63 = v31;
    serialize(_:at:)(2, &v65);
    serialize(_:at:)(1, v32);
    v61 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v62 = v53;
    closure #1 in osLogInternal(_:log:type:)(&v61, (uint64_t)v32, (uint64_t)v33, (uint64_t)v34);
    v35 = v17;
    if (v17)
    {
      __break(1u);
    }
    else
    {
      v61 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v62 = v54;
      closure #1 in osLogInternal(_:log:type:)(&v61, (uint64_t)&v65, (uint64_t)&v64, (uint64_t)&v63);
      v26 = 0;
      v19 = v26;
      v61 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v62 = v56;
      closure #1 in osLogInternal(_:log:type:)(&v61, (uint64_t)&v65, (uint64_t)&v64, (uint64_t)&v63);
      v25 = v19;
      _os_log_impl(&dword_24701B000, v59, (os_log_type_t)v60, "#PaymentsContextProvider creating SDAs for contact disambiguation %s", v29, v47);
      destroyStorage<A>(_:count:)(v30, 0, v28);
      destroyStorage<A>(_:count:)(v31, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v29, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v27 = v25;
    }
  }
  else
  {
    v18 = v37;
    swift_release();
    swift_release();
    swift_release();
    v27 = v18;
  }
  v20 = v27;

  (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v42);
  v67 = v43;
  v23[1] = v23;
  MEMORY[0x24BDAC7A8](v23);
  v23[2] = &v23[-4];
  LOBYTE(v23[-2]) = v21 & 1;
  v23[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  v23[4] = type metadata accessor for UsoTaskBuilder();
  lazy protocol witness table accessor for type [INPerson] and conformance [A]();
  result = Sequence.compactMap<A>(_:)();
  v24 = result;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    v23[0] = v24;
    v66 = v24;
    static PaymentsContextProvider.makeDisambiguationAct(for:)(v24, v36);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static PaymentsContextProvider.makeSDAForTCCAcceptance()@<X0>(char *a1@<X8>)
{
  return static PaymentsContextProvider.makeSDAForSearchForAccount()(a1);
}

uint64_t static PaymentsContextProvider.makeSDAForAppConfirmation(_:locale:intentType:isRequestAccount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, char *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE **v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint32_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  NSObject *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint32_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;

  v71 = a6;
  v90 = a1;
  v93 = a2;
  v99 = a3;
  v91 = a4;
  v92 = a5;
  v122 = 0;
  v121 = 0;
  v120 = 0;
  v119 = 0;
  v118 = 0;
  v116 = 0;
  v117 = 0;
  v115 = 0;
  v114 = 0;
  v113 = 0;
  v112 = 0;
  v72 = 0;
  v104 = 0;
  v103 = 0;
  v102 = 0;
  v101 = 0;
  v100 = 0;
  v94 = 0;
  v73 = type metadata accessor for Logger();
  v74 = *(_QWORD *)(v73 - 8);
  v75 = (*(_QWORD *)(v74 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v76 = (char *)v30 - v75;
  v77 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v78 = *(_QWORD *)(v77 - 8);
  v79 = *(_QWORD *)(v78 + 64);
  v80 = (v79 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v94);
  v81 = (char *)v30 - v80;
  v82 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v83 = (uint64_t)v30 - v82;
  v122 = (char *)v30 - v82;
  v84 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  v85 = *(_QWORD *)(v84 - 8);
  v86 = (*(_QWORD *)(v85 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v94);
  v87 = (uint64_t)v30 - v86;
  v88 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v89 = (uint64_t)v30 - v88;
  v121 = (char *)v30 - v88;
  v95 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  v96 = *(_QWORD *)(v95 - 8);
  v97 = (*(_QWORD *)(v96 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v94);
  v98 = (uint64_t)v30 - v97;
  v120 = (char *)v30 - v97;
  v119 = v10;
  v118 = v11;
  v116 = v12;
  v117 = v13;
  v115 = v14 & 1;
  type metadata accessor for INRequestPaymentIntent();
  if (swift_dynamicCastMetatype())
  {
    v67 = 0;
    type metadata accessor for UsoTaskBuilder_requestMoney_common_Payment();
    v70 = UsoTaskBuilder_requestMoney_common_Payment.__allocating_init()();
    v101 = v70;
    type metadata accessor for UsoEntityBuilder_common_Payment();
    v69 = UsoEntityBuilder_common_Payment.__allocating_init()();
    v100 = v69;
    v68 = App.toUsoEntityBuilder(locale:)(v93);
    dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoAssociatedApp(value:)();
    swift_release();
    dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
    swift_retain();
    v114 = v70;
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for INSendPaymentIntent();
    if (swift_dynamicCastMetatype())
    {
      v63 = 0;
      type metadata accessor for UsoTaskBuilder_pay_common_Payment();
      v66 = UsoTaskBuilder_pay_common_Payment.__allocating_init()();
      v103 = v66;
      type metadata accessor for UsoEntityBuilder_common_Payment();
      v65 = UsoEntityBuilder_common_Payment.__allocating_init()();
      v102 = v65;
      v64 = App.toUsoEntityBuilder(locale:)(v93);
      dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoAssociatedApp(value:)();
      swift_release();
      dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
      swift_retain();
      v114 = v66;
      swift_release();
      swift_release();
    }
    else
    {
      type metadata accessor for UsoEntityBuilder_common_PaymentAccount();
      v61 = UsoEntityBuilder_common_PaymentAccount.__allocating_init()();
      v113 = v61;
      v62 = App.toUsoEntityBuilder(locale:)(v93);
      dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoAssociatedApp(value:)();
      swift_release();
      if ((v92 & 1) != 0)
      {
        type metadata accessor for UsoTaskBuilder_request_common_PaymentAccount();
        v60 = UsoTaskBuilder_request_common_PaymentAccount.__allocating_init()();
        v104 = v60;
        dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
        swift_retain();
        v114 = v60;
      }
      else
      {
        type metadata accessor for UsoTaskBuilder_summarise_common_PaymentAccount();
        v59 = UsoTaskBuilder_summarise_common_PaymentAccount.__allocating_init()();
        v112 = v59;
        dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
        swift_retain();
        v114 = v59;
      }
      swift_release();
      swift_release();
    }
  }
  v15 = v76;
  v39 = v114;
  swift_retain();
  static Siri_Nlu_External_UserWantedToProceed.from(_:)(v39, v98);
  swift_release();
  static Siri_Nlu_External_SystemOffered.from(_:)(v98, v89);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 16))(v87, v89, v84);
  Siri_Nlu_External_SystemDialogAct.init(systemOffered:)(v87, v83);
  v16 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v15, v16, v73);
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
  v40(v81, v83, v77);
  v41 = (*(unsigned __int8 *)(v78 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
  v48 = 7;
  v49 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v78 + 32))(v49 + v41, v81, v77);
  v57 = Logger.logObject.getter();
  v58 = static os_log_type_t.debug.getter();
  v44 = &v110;
  v110 = 12;
  v42 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v43 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v45 = v111;
  v46 = 17;
  v51 = swift_allocObject();
  *(_BYTE *)(v51 + 16) = 32;
  v52 = swift_allocObject();
  *(_BYTE *)(v52 + 16) = 8;
  v47 = 32;
  v17 = swift_allocObject();
  v18 = v49;
  v50 = v17;
  *(_QWORD *)(v17 + 16) = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  *(_QWORD *)(v17 + 24) = v18;
  v19 = swift_allocObject();
  v20 = v50;
  v54 = v19;
  *(_QWORD *)(v19 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v19 + 24) = v20;
  v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v53 = _allocateUninitializedArray<A>(_:)();
  v55 = v21;
  swift_retain();
  v22 = v51;
  v23 = v55;
  *v55 = partial apply for closure #1 in OSLogArguments.append(_:);
  v23[1] = v22;
  swift_retain();
  v24 = v52;
  v25 = v55;
  v55[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v25[3] = v24;
  swift_retain();
  v26 = v54;
  v27 = v55;
  v55[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[5] = v26;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v57, (os_log_type_t)v58))
  {
    v28 = v72;
    v32 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v33 = createStorage<A>(capacity:type:)(0);
    v34 = createStorage<A>(capacity:type:)(1);
    v35 = &v109;
    v109 = v32;
    v36 = &v108;
    v108 = v33;
    v37 = &v107;
    v107 = v34;
    serialize(_:at:)(2, &v109);
    serialize(_:at:)(1, v35);
    v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v106 = v51;
    closure #1 in osLogInternal(_:log:type:)(&v105, (uint64_t)v35, (uint64_t)v36, (uint64_t)v37);
    v38 = v28;
    if (v28)
    {
      __break(1u);
    }
    else
    {
      v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v106 = v52;
      closure #1 in osLogInternal(_:log:type:)(&v105, (uint64_t)&v109, (uint64_t)&v108, (uint64_t)&v107);
      v30[0] = 0;
      v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v106 = v54;
      closure #1 in osLogInternal(_:log:type:)(&v105, (uint64_t)&v109, (uint64_t)&v108, (uint64_t)&v107);
      _os_log_impl(&dword_24701B000, v57, (os_log_type_t)v58, "#PaymentsContextProvider returning SystemOffered for confirm intent %s", v32, v45);
      destroyStorage<A>(_:count:)(v33, 0, v31);
      destroyStorage<A>(_:count:)(v34, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v32, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v74 + 8))(v76, v73);
  v40(v71, v83, v77);
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v83, v77);
  (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v89, v84);
  (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v98, v95);
  return swift_release();
}

uint64_t closure #1 in static PaymentsContextProvider.appDisambiguationContextUpdate(apps:locale:intentType:isRequestAccount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;

  v29 = a6;
  v18 = a1;
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a5;
  v42 = 0;
  v41 = 0;
  v40 = 0;
  v39 = 0;
  v37 = 0;
  v38 = 0;
  v36 = 0;
  v16 = 0;
  v32 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v30 = *(_QWORD *)(v32 - 8);
  v15 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v31 = (char *)&v14 - v15;
  v42 = (char *)&v14 - v15;
  v17 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Siri_Nlu_External_UsoGraph() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v26 = (uint64_t)&v14 - v17;
  v35 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v33 = *(_QWORD *)(v35 - 8);
  v19 = (*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v18);
  v27 = (char *)&v14 - v19;
  v20 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (uint64_t *)MEMORY[0x24BDAC7A8](v6);
  v34 = (char *)&v14 - v20;
  v41 = (char *)&v14 - v20;
  v21 = *v8;
  v40 = v21;
  v39 = v9;
  v37 = v10;
  v38 = v11;
  v28 = 1;
  v36 = v12 & 1;
  Siri_Nlu_External_UserStatedTask.init()();
  static PaymentsContextProvider.createUsoGraph(for:locale:intentType:isRequestAccount:)(v22, v25 & 1, v26);
  Siri_Nlu_External_UserStatedTask.task.setter();
  Siri_Nlu_External_UserDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v27, v34, v35);
  Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v29, v31, v32);
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v30 + 56))(v29, 0, v28, v32);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v32);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v34, v35);
}

uint64_t partial apply for closure #1 in static PaymentsContextProvider.appDisambiguationContextUpdate(apps:locale:intentType:isRequestAccount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in static PaymentsContextProvider.appDisambiguationContextUpdate(apps:locale:intentType:isRequestAccount:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_BYTE *)(v2 + 40) & 1, a2);
}

uint64_t static PaymentsContextProvider.createUsoGraph(for:locale:intentType:isRequestAccount:)@<X0>(uint64_t a1@<X1>, char a2@<W4>, uint64_t a3@<X8>)
{
  type metadata accessor for INRequestPaymentIntent();
  if (swift_dynamicCastMetatype())
  {
    type metadata accessor for UsoTaskBuilder_requestMoney_common_Payment();
    UsoTaskBuilder_requestMoney_common_Payment.__allocating_init()();
    type metadata accessor for UsoEntityBuilder_common_Payment();
    UsoEntityBuilder_common_Payment.__allocating_init()();
    App.toUsoEntityBuilder(locale:)(a1);
    dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoAssociatedApp(value:)();
    swift_release();
    dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
    UsoTaskBuilder.asUsoGraph()(a3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for INSendPaymentIntent();
    if (swift_dynamicCastMetatype())
    {
      type metadata accessor for UsoTaskBuilder_pay_common_Payment();
      UsoTaskBuilder_pay_common_Payment.__allocating_init()();
      type metadata accessor for UsoEntityBuilder_common_Payment();
      UsoEntityBuilder_common_Payment.__allocating_init()();
      App.toUsoEntityBuilder(locale:)(a1);
      dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoAssociatedApp(value:)();
      swift_release();
      dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
      UsoTaskBuilder.asUsoGraph()(a3);
      swift_release();
      return swift_release();
    }
    else
    {
      type metadata accessor for UsoEntityBuilder_common_PaymentAccount();
      UsoEntityBuilder_common_PaymentAccount.__allocating_init()();
      App.toUsoEntityBuilder(locale:)(a1);
      dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoAssociatedApp(value:)();
      swift_release();
      if ((a2 & 1) != 0)
      {
        type metadata accessor for UsoTaskBuilder_request_common_PaymentAccount();
        UsoTaskBuilder_request_common_PaymentAccount.__allocating_init()();
      }
      else
      {
        type metadata accessor for UsoTaskBuilder_summarise_common_PaymentAccount();
        UsoTaskBuilder_summarise_common_PaymentAccount.__allocating_init()();
      }
      dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
      UsoTaskBuilder.asUsoGraph()(a3);
      swift_release();
      return swift_release();
    }
  }
}

uint64_t static PaymentsContextProvider.makeSDAForAppDisambiguation(choices:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE **v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint32_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  NSObject *v69;
  int v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint32_t v77;
  uint64_t v78;
  char *v79;
  char *v80;

  v31 = a2;
  v39 = a1;
  v80 = 0;
  v79 = 0;
  v78 = 0;
  v32 = 0;
  v34 = 0;
  v46 = type metadata accessor for Logger();
  v45 = *(_QWORD *)(v46 - 8);
  v33 = (*(_QWORD *)(v45 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v40 = (char *)v22 - v33;
  v53 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v50 = *(_QWORD *)(v53 - 8);
  v49 = *(_QWORD *)(v50 + 64);
  v35 = (v49 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v34);
  v52 = (char *)v22 - v35;
  v36 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v47 = (uint64_t)v22 - v36;
  v80 = (char *)v22 - v36;
  v43 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
  v41 = *(_QWORD *)(v43 - 8);
  v37 = (*(_QWORD *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v39);
  v44 = (uint64_t)v22 - v37;
  v38 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v42 = (char *)v22 - v38;
  v79 = (char *)v22 - v38;
  v78 = v6;
  Siri_Nlu_External_SystemGaveOptions.init()();
  swift_bridgeObjectRetain();
  MEMORY[0x249571480](v39);
  v7 = v40;
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 16))(v44, v42, v43);
  Siri_Nlu_External_SystemDialogAct.init(gaveOptions:)(v44, v47);
  v8 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v7, v8, v46);
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
  v48(v52, v47, v53);
  v51 = (*(unsigned __int8 *)(v50 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
  v60 = 7;
  v61 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v50 + 32))(v61 + v51, v52, v53);
  v69 = Logger.logObject.getter();
  v70 = static os_log_type_t.debug.getter();
  v56 = &v76;
  v76 = 12;
  v54 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v55 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v57 = v77;
  v58 = 17;
  v63 = swift_allocObject();
  *(_BYTE *)(v63 + 16) = 32;
  v64 = swift_allocObject();
  *(_BYTE *)(v64 + 16) = 8;
  v59 = 32;
  v9 = swift_allocObject();
  v10 = v61;
  v62 = v9;
  *(_QWORD *)(v9 + 16) = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  *(_QWORD *)(v9 + 24) = v10;
  v11 = swift_allocObject();
  v12 = v62;
  v66 = v11;
  *(_QWORD *)(v11 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v11 + 24) = v12;
  v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v65 = _allocateUninitializedArray<A>(_:)();
  v67 = v13;
  swift_retain();
  v14 = v63;
  v15 = v67;
  *v67 = partial apply for closure #1 in OSLogArguments.append(_:);
  v15[1] = v14;
  swift_retain();
  v16 = v64;
  v17 = v67;
  v67[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v17[3] = v16;
  swift_retain();
  v18 = v66;
  v19 = v67;
  v67[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v19[5] = v18;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v69, (os_log_type_t)v70))
  {
    v20 = v32;
    v24 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v25 = createStorage<A>(capacity:type:)(0);
    v26 = createStorage<A>(capacity:type:)(1);
    v27 = &v75;
    v75 = v24;
    v28 = &v74;
    v74 = v25;
    v29 = &v73;
    v73 = v26;
    serialize(_:at:)(2, &v75);
    serialize(_:at:)(1, v27);
    v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v72 = v63;
    closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)v27, (uint64_t)v28, (uint64_t)v29);
    v30 = v20;
    if (v20)
    {
      __break(1u);
    }
    else
    {
      v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v72 = v64;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v75, (uint64_t)&v74, (uint64_t)&v73);
      v22[0] = 0;
      v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v72 = v66;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v75, (uint64_t)&v74, (uint64_t)&v73);
      _os_log_impl(&dword_24701B000, v69, (os_log_type_t)v70, "#PaymentsContextProvider returning SystemGaveOptions for confirm intent %s", v24, v57);
      destroyStorage<A>(_:count:)(v25, 0, v23);
      destroyStorage<A>(_:count:)(v26, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v24, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v45 + 8))(v40, v46);
  v48(v31, v47, v53);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v47, v53);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v42, v43);
}

unint64_t type metadata accessor for SAAceConfirmationContext()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SAAceConfirmationContext;
  if (!lazy cache variable for type metadata for SAAceConfirmationContext)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAAceConfirmationContext);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t implicit closure #1 in static PaymentsContextProvider.makeSDAForAppConfirmation(_:locale:intentType:isRequestAccount:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;

  v3 = a1;
  v5 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v4 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v6 = (char *)&v3 - v4;
  (*(void (**)(char *))(v1 + 16))((char *)&v3 - v4);
  return String.init<A>(describing:)();
}

uint64_t sub_247128A2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8) + 80);
  return implicit closure #1 in static PaymentsContextProvider.makeSDAForAppConfirmation(_:locale:intentType:isRequestAccount:)(v0 + ((v1 + 16) & ~v1));
}

uint64_t static PaymentsContextProvider.makeSDAForConfirmSearchForAccount(isRequest:)@<X0>(unsigned int a1@<W0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v22[3];
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE **v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint32_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  NSObject *v49;
  int v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint32_t v83;
  char v84;
  char *v85;
  char *v86;
  char *v87;

  v52 = a2;
  v72 = a1;
  v87 = 0;
  v86 = 0;
  v85 = 0;
  v84 = 0;
  v53 = 0;
  v65 = 0;
  v54 = type metadata accessor for Logger();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = (*(_QWORD *)(v55 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v57 = (char *)v22 - v56;
  v58 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v59 = *(_QWORD *)(v58 - 8);
  v60 = *(_QWORD *)(v59 + 64);
  v61 = (v60 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v65);
  v62 = (char *)v22 - v61;
  v63 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v64 = (uint64_t)v22 - v63;
  v87 = (char *)v22 - v63;
  v66 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  v67 = *(_QWORD *)(v66 - 8);
  v68 = (*(_QWORD *)(v67 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v65);
  v69 = (uint64_t)v22 - v68;
  v70 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v71 = (uint64_t)v22 - v70;
  v86 = (char *)v22 - v70;
  v73 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  v74 = *(_QWORD *)(v73 - 8);
  v75 = (*(_QWORD *)(v74 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v72);
  v76 = (uint64_t)v22 - v75;
  v85 = (char *)v22 - v75;
  v84 = v6 & 1;
  if ((v6 & 1) != 0)
  {
    type metadata accessor for UsoTaskBuilder_request_common_PaymentAccount();
    v51 = UsoTaskBuilder_request_common_PaymentAccount.__allocating_init()();
  }
  else
  {
    type metadata accessor for UsoTaskBuilder_summarise_common_PaymentAccount();
    v51 = UsoTaskBuilder_summarise_common_PaymentAccount.__allocating_init()();
  }
  v7 = v57;
  v31 = v51;
  static Siri_Nlu_External_UserWantedToProceed.from(_:)(v51, v76);
  swift_release();
  static Siri_Nlu_External_SystemOffered.from(_:)(v76, v71);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v69, v71, v66);
  Siri_Nlu_External_SystemDialogAct.init(systemOffered:)(v69, v64);
  v8 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v7, v8, v54);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 16);
  v32(v62, v64, v58);
  v33 = (*(unsigned __int8 *)(v59 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
  v40 = 7;
  v41 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v59 + 32))(v41 + v33, v62, v58);
  v49 = Logger.logObject.getter();
  v50 = static os_log_type_t.debug.getter();
  v36 = &v82;
  v82 = 12;
  v34 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v35 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v37 = v83;
  v38 = 17;
  v43 = swift_allocObject();
  *(_BYTE *)(v43 + 16) = 32;
  v44 = swift_allocObject();
  *(_BYTE *)(v44 + 16) = 8;
  v39 = 32;
  v9 = swift_allocObject();
  v10 = v41;
  v42 = v9;
  *(_QWORD *)(v9 + 16) = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  *(_QWORD *)(v9 + 24) = v10;
  v11 = swift_allocObject();
  v12 = v42;
  v46 = v11;
  *(_QWORD *)(v11 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v11 + 24) = v12;
  v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v45 = _allocateUninitializedArray<A>(_:)();
  v47 = v13;
  swift_retain();
  v14 = v43;
  v15 = v47;
  *v47 = partial apply for closure #1 in OSLogArguments.append(_:);
  v15[1] = v14;
  swift_retain();
  v16 = v44;
  v17 = v47;
  v47[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v17[3] = v16;
  swift_retain();
  v18 = v46;
  v19 = v47;
  v47[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v19[5] = v18;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v49, (os_log_type_t)v50))
  {
    v20 = v53;
    v24 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v25 = createStorage<A>(capacity:type:)(0);
    v26 = createStorage<A>(capacity:type:)(1);
    v27 = &v81;
    v81 = v24;
    v28 = &v80;
    v80 = v25;
    v29 = &v79;
    v79 = v26;
    serialize(_:at:)(2, &v81);
    serialize(_:at:)(1, v27);
    v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v78 = v43;
    closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)v27, (uint64_t)v28, (uint64_t)v29);
    v30 = v20;
    if (v20)
    {
      __break(1u);
    }
    else
    {
      v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v78 = v44;
      closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)&v81, (uint64_t)&v80, (uint64_t)&v79);
      v22[1] = 0;
      v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v78 = v46;
      closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)&v81, (uint64_t)&v80, (uint64_t)&v79);
      _os_log_impl(&dword_24701B000, v49, (os_log_type_t)v50, "#PaymentsContextProvider returning SystemOffered for confirm Search for Accounts intent %s", v24, v37);
      destroyStorage<A>(_:count:)(v25, 0, v23);
      destroyStorage<A>(_:count:)(v26, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v24, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v54);
  v32(v52, v64, v58);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v64, v58);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v71, v66);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 8))(v76, v73);
}

uint64_t implicit closure #1 in static PaymentsContextProvider.makeSDAForDisambiguatePerson(persons:isSend:)(uint64_t a1)
{
  unint64_t v1;

  v1 = type metadata accessor for INPerson();
  return MEMORY[0x2495723A4](a1, v1);
}

uint64_t closure #1 in static PaymentsContextProvider.makeSDAForDisambiguatePerson(persons:isSend:)@<X0>(id *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  id v27;

  v27 = 0;
  v26 = 0;
  v25 = 0;
  v24 = 0;
  v23 = 0;
  v27 = *a1;
  v26 = a2 & 1;
  type metadata accessor for UsoEntityBuilder_common_Payment();
  v25 = UsoEntityBuilder_common_Payment.__allocating_init()();
  type metadata accessor for UsoEntityBuilder_common_PaymentAccount();
  v17 = UsoEntityBuilder_common_PaymentAccount.__allocating_init()();
  v24 = v17;
  type metadata accessor for UsoEntityBuilder_common_Person();
  v18 = UsoEntityBuilder_common_Person.__allocating_init()();
  v23 = v18;
  v3 = INPerson.uniqueContactIdentifier.getter();
  MEMORY[0x2495717E0](v3);
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(v27, sel_personHandle);
  if (v22)
  {
    v11 = v22;
    v4 = v22;
    outlined destroy of SFRichText?(&v22);
    v12 = objc_msgSend(v11, sel_value);
    if (v12)
    {
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v8 = v5;

      v9 = v7;
      v10 = v8;
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }

    v13 = v9;
    v14 = v10;
  }
  else
  {
    outlined destroy of SFRichText?(&v22);
    v13 = 0;
    v14 = 0;
  }
  if (v14)
  {
    type metadata accessor for UsoEntityBuilder_common_ContactAddress();
    v19 = UsoEntityBuilder_common_ContactAddress.__allocating_init()();
    MEMORY[0x249571A20](v13, v14);
    swift_retain();
    MEMORY[0x2495717C8](v19, MEMORY[0x24BEA2D40]);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_retain();
  MEMORY[0x249571AB0](v18, MEMORY[0x24BEA14E8]);
  swift_release();
  swift_retain();
  if ((a2 & 1) != 0)
  {
    MEMORY[0x24957184C](v17, MEMORY[0x24BEA2DD8]);
    swift_release();
    type metadata accessor for UsoTaskBuilder_pay_common_Payment();
    v20 = UsoTaskBuilder_pay_common_Payment.__allocating_init()();
    dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
    swift_retain();
    *a3 = v20;
  }
  else
  {
    MEMORY[0x249571858](v17, MEMORY[0x24BEA2DD8]);
    swift_release();
    type metadata accessor for UsoTaskBuilder_requestMoney_common_Payment();
    v21 = UsoTaskBuilder_requestMoney_common_Payment.__allocating_init()();
    dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
    swift_retain();
    *a3 = v21;
  }
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t *static PaymentsContextProvider.makeDisambiguationAct(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v14 = a2;
  v41 = a1;
  v53 = 0;
  v52 = 0;
  v51 = 0;
  v50 = 0;
  v49 = 0;
  v48 = 0;
  v42 = v47;
  v47[0] = 0;
  v47[1] = 0;
  v44 = 0;
  v33 = 0;
  v15 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v18 = (char *)&v9 - v17;
  v53 = (char *)&v9 - v17;
  v19 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v33);
  v22 = (char *)&v9 - v21;
  v23 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v24 = (char *)&v9 - v23;
  v52 = (char *)&v9 - v23;
  v32 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v25 = *(_QWORD *)(v32 - 8);
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v33);
  v27 = (char *)&v9 - v26;
  v28 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v29 = (char *)&v9 - v28;
  v51 = (char *)&v9 - v28;
  v30 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Siri_Nlu_External_UsoGraph() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v33);
  v31 = (uint64_t)&v9 - v30;
  v34 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v35 = *(_QWORD *)(v34 - 8);
  v37 = *(_QWORD *)(v35 + 64);
  v36 = (v37 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v33);
  v38 = (char *)&v9 - v36;
  v39 = (v37 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v40 = (char *)&v9 - v39;
  v50 = (char *)&v9 - v39;
  v49 = v7;
  v48 = _allocateUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  v46 = v41;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoTaskBuilder]);
  lazy protocol witness table accessor for type [UsoTaskBuilder] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[UsoTaskBuilder]>);
    IndexingIterator.next()();
    v13 = v45;
    if (!v45)
      break;
    v12 = v13;
    v11 = v13;
    v44 = v13;
    Siri_Nlu_External_UserStatedTask.init()();
    UsoTaskBuilder.asUsoGraph()(v31);
    Siri_Nlu_External_UserStatedTask.task.setter();
    Siri_Nlu_External_UserDialogAct.init()();
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v38, v40, v34);
    Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v27, v29, v32);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
    Array.append(_:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v29, v32);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v40, v34);
    swift_release();
  }
  outlined destroy of [SFCardSection]();
  Siri_Nlu_External_SystemGaveOptions.init()();
  v10 = &v48;
  v9 = v48;
  swift_bridgeObjectRetain();
  MEMORY[0x249571480](v9);
  Siri_Nlu_External_SystemDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v22, v24, v19);
  Siri_Nlu_External_SystemDialogAct.gaveOptions.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v14, v18, v15);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v24, v19);
  result = v10;
  outlined destroy of [SFCardSection]();
  return result;
}

uint64_t sub_247129CF0()
{
  return swift_deallocObject();
}

uint64_t sub_247129D18()
{
  return swift_deallocObject();
}

uint64_t sub_247129D40()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247129D7C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247129DB8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247129E28()
{
  return swift_deallocObject();
}

uint64_t sub_247129E50()
{
  return swift_deallocObject();
}

uint64_t sub_247129E78()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247129EB4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247129EF0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247129F60()
{
  return swift_deallocObject();
}

uint64_t sub_247129F88()
{
  return swift_deallocObject();
}

uint64_t sub_247129FB0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247129FEC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24712A028()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_24712A098()
{
  return swift_deallocObject();
}

uint64_t sub_24712A0C0()
{
  return swift_deallocObject();
}

uint64_t sub_24712A0E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24712A124()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24712A160()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_24712A1D0()
{
  return swift_deallocObject();
}

uint64_t sub_24712A1F8()
{
  return swift_deallocObject();
}

uint64_t sub_24712A220()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24712A25C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24712A308()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_24712A378()
{
  return swift_deallocObject();
}

uint64_t sub_24712A3A0()
{
  return swift_deallocObject();
}

uint64_t sub_24712A3C8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24712A404()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24712A440()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_24712A4B0()
{
  return swift_deallocObject();
}

uint64_t sub_24712A4D8()
{
  return swift_deallocObject();
}

uint64_t sub_24712A500()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24712A53C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24712A5E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_24712A658()
{
  return swift_deallocObject();
}

uint64_t sub_24712A680()
{
  return swift_deallocObject();
}

uint64_t sub_24712A6A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24712A6E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24712A720()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForDisambiguatePerson(persons:isSend:)()
{
  uint64_t v0;

  return implicit closure #1 in static PaymentsContextProvider.makeSDAForDisambiguatePerson(persons:isSend:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_24712A764()
{
  return swift_deallocObject();
}

uint64_t sub_24712A78C()
{
  return swift_deallocObject();
}

uint64_t sub_24712A7B4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24712A7F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static PaymentsContextProvider.makeSDAForDisambiguatePerson(persons:isSend:)@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in static PaymentsContextProvider.makeSDAForDisambiguatePerson(persons:isSend:)(a1, *(_BYTE *)(v2 + 16) & 1, a2);
}

uint64_t sub_24712A854()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_24712A8C4()
{
  return swift_deallocObject();
}

uint64_t sub_24712A8EC()
{
  return swift_deallocObject();
}

uint64_t sub_24712A914()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24712A950()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24712A98C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_24712A9FC()
{
  return swift_deallocObject();
}

uint64_t sub_24712AA24()
{
  return swift_deallocObject();
}

uint64_t sub_24712AA4C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24712AA88()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24712AAC4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_24712AB34()
{
  return swift_deallocObject();
}

uint64_t sub_24712AB5C()
{
  return swift_deallocObject();
}

uint64_t sub_24712AB84()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24712ABC0()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [UsoTaskBuilder] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [UsoTaskBuilder] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UsoTaskBuilder] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UsoTaskBuilder]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [UsoTaskBuilder] and conformance [A]);
    return v1;
  }
  return v3;
}

ValueMetadata *type metadata accessor for PaymentsContextProvider()
{
  return &type metadata for PaymentsContextProvider;
}

uint64_t PaymentsLabelCATs.accountType(accountTypeLabel:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String *v6;
  Swift::String v7;
  const void *v8;
  char *v9;
  Swift::String *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  Swift::String *v14;
  _QWORD v15[5];
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String *v20;
  const void *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = a1;
  v15[3] = a2;
  v15[4] = a3;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v16 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)v15 - v16;
  v29 = MEMORY[0x24BDAC7A8](v21);
  v27 = v4;
  v28 = v5;
  v26 = v3;
  v22 = 1;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#AccountType", 0x19uLL, 1);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v19 = _allocateUninitializedArray<A>(_:)();
  v20 = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountTypeLabel", 0x10uLL, v22 & 1);
  v8 = v21;
  v9 = v23;
  *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    v14 = v20;
    v20[1]._countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[0] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsLabelCATs.accountType(accountTypeLabel:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t PaymentsLabelCATs.accountType(accountTypeLabel:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *p_countAndFlagsBits;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = (void *)v0[8];
  v11 = (const void *)v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#AccountType", 0x19uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_countAndFlagsBits = &v2->_countAndFlagsBits;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountTypeLabel", 0x10uLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  v13 = type metadata accessor for SpeakableString();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v14 + 48))(v12, 1) == 1)
  {
    outlined destroy of SpeakableString?(v9[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    v8 = v9[8];
    p_countAndFlagsBits[5] = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v8, v13);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[10] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v9[11] = v4;
  *v4 = v9[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  return v7(v9[5], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t PaymentsLabelCATs.accountType(accountTypeLabel:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  Swift::String *v3;
  Swift::String v4;
  const void *v5;
  char *v6;
  Swift::String *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  Swift::String *v11;
  _QWORD v12[4];
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String *v17;
  const void *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12[3] = a2;
  v18 = a1;
  v24 = 0;
  v23 = 0;
  v13 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = (char *)v12 - v13;
  v24 = MEMORY[0x24BDAC7A8](v18);
  v23 = v2;
  v19 = 1;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#AccountType", 0x19uLL, 1);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v16 = _allocateUninitializedArray<A>(_:)();
  v17 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountTypeLabel", 0x10uLL, v19 & 1);
  v5 = v18;
  v6 = v20;
  *v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  v21 = type metadata accessor for SpeakableString();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    v11 = v17;
    v17[1]._countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[1] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsLabelCATs.amountDisambiguation(amountType:paymentAmount:completion:)(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String *v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String *v11;
  uint64_t v12;
  Swift::String v13;
  const void *v14;
  char *v15;
  uint64_t *p_countAndFlagsBits;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v18;
  Swift::String *v20;
  Swift::String *v21;
  _QWORD v22[2];
  Swift::String *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  Swift::String v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  Swift::String *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v39 = a1;
  v29 = a2;
  v30 = a3;
  v31 = a4;
  v44 = 0;
  v43 = 0;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v32 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v33 = (char *)v22 - v32;
  v44 = MEMORY[0x24BDAC7A8](v39);
  v43 = v5;
  v41 = v6;
  v42 = v7;
  v40 = v4;
  v36 = 1;
  v34 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#AmountDisambiguation", 0x22uLL, 1);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v37 = _allocateUninitializedArray<A>(_:)();
  v38 = v8;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amountType", 0xAuLL, v36 & 1);
  *v38 = v9;
  swift_retain();
  if (v39)
  {
    v28 = v39;
    v27 = v39;
    v10 = type metadata accessor for DialogCurrency();
    v11 = v38;
    v12 = v27;
    v38[2]._object = (void *)v10;
    v11[1]._countAndFlagsBits = v12;
  }
  else
  {
    v21 = v38;
    v38[1]._countAndFlagsBits = 0;
    v21[1]._object = 0;
    v21[2]._countAndFlagsBits = 0;
    v21[2]._object = 0;
  }
  v23 = v38 + 4;
  v24 = 1;
  v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentAmount", 0xDuLL, 1);
  v14 = v29;
  v15 = v33;
  v38[3] = v13;
  outlined init with copy of SpeakableString?(v14, v15);
  v25 = type metadata accessor for SpeakableString();
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v26 + 48))(v33, v24) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v33);
    v20 = v38;
    v38[4]._countAndFlagsBits = 0;
    v20[4]._object = 0;
    v20[5]._countAndFlagsBits = 0;
    v20[5]._object = 0;
  }
  else
  {
    p_countAndFlagsBits = &v23->_countAndFlagsBits;
    v38[5]._object = (void *)v25;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v26 + 32))(boxed_opaque_existential_1, v33, v25);
  }
  v18 = v37;
  _finalizeUninitializedArray<A>(_:)();
  v22[0] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v22[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsLabelCATs.amountDisambiguation(amountType:paymentAmount:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[9] = v3;
  v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return swift_task_switch();
}

uint64_t PaymentsLabelCATs.amountDisambiguation(amountType:paymentAmount:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  const void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  Swift::String *v15;
  uint64_t v16;

  v16 = v0[7];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#AmountDisambiguation", 0x22uLL, 1);
  v0[11] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v15 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amountType", 0xAuLL, 1);
  swift_retain();
  if (v16)
  {
    v13 = v14[7];
    v15[2]._object = (void *)type metadata accessor for DialogCurrency();
    v15[1]._countAndFlagsBits = v13;
  }
  else
  {
    v15[1]._countAndFlagsBits = 0;
    v15[1]._object = 0;
    v15[2]._countAndFlagsBits = 0;
    v15[2]._object = 0;
  }
  v10 = (void *)v14[10];
  v9 = (const void *)v14[8];
  v15[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentAmount", 0xDuLL, 1);
  outlined init with copy of SpeakableString?(v9, v10);
  v11 = type metadata accessor for SpeakableString();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v12 + 48))(v10, 1) == 1)
  {
    outlined destroy of SpeakableString?(v14[10]);
    v15[4]._countAndFlagsBits = 0;
    v15[4]._object = 0;
    v15[5]._countAndFlagsBits = 0;
    v15[5]._object = 0;
  }
  else
  {
    v8 = v14[10];
    v15[5]._object = (void *)v11;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v15[4]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v8, v11);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v14[12] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v14[13] = v4;
  *v4 = v14[2];
  v4[1] = RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:);
  return v7(v14[6], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t PaymentsLabelCATs.amountDisambiguation(amountType:paymentAmount:)@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  Swift::String *v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String *v8;
  uint64_t v9;
  Swift::String v10;
  const void *v11;
  char *v12;
  uint64_t *p_countAndFlagsBits;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  Swift::String *v17;
  Swift::String *v18;
  _QWORD v19[3];
  Swift::String *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  unint64_t v28;
  char *v29;
  Swift::String v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  Swift::String *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v26 = a3;
  v35 = a1;
  v27 = a2;
  v38 = 0;
  v37 = 0;
  v36 = 0;
  v28 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v29 = (char *)v19 - v28;
  v38 = MEMORY[0x24BDAC7A8](v35);
  v37 = v4;
  v36 = v3;
  v32 = 1;
  v30 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#AmountDisambiguation", 0x22uLL, 1);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v33 = _allocateUninitializedArray<A>(_:)();
  v34 = v5;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amountType", 0xAuLL, v32 & 1);
  *v34 = v6;
  swift_retain();
  if (v35)
  {
    v25 = v35;
    v24 = v35;
    v7 = type metadata accessor for DialogCurrency();
    v8 = v34;
    v9 = v24;
    v34[2]._object = (void *)v7;
    v8[1]._countAndFlagsBits = v9;
  }
  else
  {
    v18 = v34;
    v34[1]._countAndFlagsBits = 0;
    v18[1]._object = 0;
    v18[2]._countAndFlagsBits = 0;
    v18[2]._object = 0;
  }
  v20 = v34 + 4;
  v21 = 1;
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentAmount", 0xDuLL, 1);
  v11 = v27;
  v12 = v29;
  v34[3] = v10;
  outlined init with copy of SpeakableString?(v11, v12);
  v22 = type metadata accessor for SpeakableString();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v23 + 48))(v29, v21) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v29);
    v17 = v34;
    v34[4]._countAndFlagsBits = 0;
    v17[4]._object = 0;
    v17[5]._countAndFlagsBits = 0;
    v17[5]._object = 0;
  }
  else
  {
    p_countAndFlagsBits = &v20->_countAndFlagsBits;
    v34[5]._object = (void *)v22;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v23 + 32))(boxed_opaque_existential_1, v29, v22);
  }
  v15 = v33;
  _finalizeUninitializedArray<A>(_:)();
  v19[1] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v19[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsLabelCATs.amountType(amountType:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String *v6;
  Swift::String v7;
  const void *v8;
  char *v9;
  Swift::String *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  Swift::String *v14;
  _QWORD v15[5];
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String *v20;
  const void *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = a1;
  v15[3] = a2;
  v15[4] = a3;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v16 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)v15 - v16;
  v29 = MEMORY[0x24BDAC7A8](v21);
  v27 = v4;
  v28 = v5;
  v26 = v3;
  v22 = 1;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#AmountType", 0x18uLL, 1);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v19 = _allocateUninitializedArray<A>(_:)();
  v20 = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amountType", 0xAuLL, v22 & 1);
  v8 = v21;
  v9 = v23;
  *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    v14 = v20;
    v20[1]._countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[0] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsLabelCATs.amountType(amountType:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t PaymentsLabelCATs.amountType(amountType:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *p_countAndFlagsBits;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = (void *)v0[8];
  v11 = (const void *)v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#AmountType", 0x18uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_countAndFlagsBits = &v2->_countAndFlagsBits;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amountType", 0xAuLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  v13 = type metadata accessor for SpeakableString();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v14 + 48))(v12, 1) == 1)
  {
    outlined destroy of SpeakableString?(v9[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    v8 = v9[8];
    p_countAndFlagsBits[5] = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v8, v13);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[10] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v9[11] = v4;
  *v4 = v9[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  return v7(v9[5], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t PaymentsLabelCATs.amountType(amountType:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  Swift::String *v3;
  Swift::String v4;
  const void *v5;
  char *v6;
  Swift::String *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  Swift::String *v11;
  _QWORD v12[4];
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String *v17;
  const void *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12[3] = a2;
  v18 = a1;
  v24 = 0;
  v23 = 0;
  v13 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = (char *)v12 - v13;
  v24 = MEMORY[0x24BDAC7A8](v18);
  v23 = v2;
  v19 = 1;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#AmountType", 0x18uLL, 1);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v16 = _allocateUninitializedArray<A>(_:)();
  v17 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amountType", 0xAuLL, v19 & 1);
  v5 = v18;
  v6 = v20;
  *v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  v21 = type metadata accessor for SpeakableString();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    v11 = v17;
    v17[1]._countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[1] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsLabelCATs.financialAccountDisambiguation(accountType:accountNumber:completion:)(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String *v11;
  Swift::String v12;
  const void *v13;
  char *v14;
  Swift::String *v15;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v17;
  const void *v18;
  char *v19;
  uint64_t *p_countAndFlagsBits;
  uint64_t *v21;
  uint64_t v22;
  Swift::String *v24;
  Swift::String *v25;
  _QWORD v26[3];
  Swift::String *v27;
  unsigned int v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String *v38;
  const void *v39;
  unsigned int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, _QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v39 = a1;
  v29 = a2;
  v30 = a3;
  v31 = a4;
  v49 = 0;
  v48 = 0;
  v46 = 0;
  v47 = 0;
  v45 = 0;
  v32 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v39);
  v33 = (char *)v26 - v32;
  v34 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v41 = (char *)v26 - v34;
  v49 = v7;
  v48 = v8;
  v46 = v9;
  v47 = v10;
  v45 = v4;
  v40 = 1;
  v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#FinancialAccountDisambiguation", 0x2CuLL, 1);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v37 = _allocateUninitializedArray<A>(_:)();
  v38 = v11;
  v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, v40 & 1);
  v13 = v39;
  v14 = v41;
  *v38 = v12;
  outlined init with copy of SpeakableString?(v13, v14);
  v42 = type metadata accessor for SpeakableString();
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(unsigned int (**)(char *, _QWORD))(v43 + 48);
  if (v44(v41, v40) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v41);
    v25 = v38;
    v38[1]._countAndFlagsBits = 0;
    v25[1]._object = 0;
    v25[2]._countAndFlagsBits = 0;
    v25[2]._object = 0;
  }
  else
  {
    v15 = v38;
    v38[2]._object = (void *)v42;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v15[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v43 + 32))(boxed_opaque_existential_1, v41, v42);
  }
  v27 = v38 + 4;
  v28 = 1;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
  v18 = v29;
  v19 = v33;
  v38[3] = v17;
  outlined init with copy of SpeakableString?(v18, v19);
  if (((unsigned int (*)(char *, _QWORD, uint64_t))v44)(v33, v28, v42) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v33);
    v24 = v38;
    v38[4]._countAndFlagsBits = 0;
    v24[4]._object = 0;
    v24[5]._countAndFlagsBits = 0;
    v24[5]._object = 0;
  }
  else
  {
    p_countAndFlagsBits = &v27->_countAndFlagsBits;
    v38[5]._object = (void *)v42;
    v21 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v43 + 32))(v21, v33, v42);
  }
  v22 = v37;
  _finalizeUninitializedArray<A>(_:)();
  v26[1] = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v26[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsLabelCATs.financialAccountDisambiguation(accountType:accountNumber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[9] = v3;
  v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return swift_task_switch();
}

uint64_t PaymentsLabelCATs.financialAccountDisambiguation(accountType:accountNumber:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t (*v8)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v9;
  const void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  Swift::String *v14;
  const void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(void *, uint64_t);

  v16 = (void *)v0[11];
  v15 = (const void *)v0[7];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#FinancialAccountDisambiguation", 0x2CuLL, 1);
  v0[12] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v14 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, 1);
  outlined init with copy of SpeakableString?(v15, v16);
  v17 = type metadata accessor for SpeakableString();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(void *, uint64_t))(v18 + 48);
  if (v19(v16, 1) == 1)
  {
    outlined destroy of SpeakableString?(v13[11]);
    v14[1]._countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    v12 = v13[11];
    v14[2]._object = (void *)v17;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v14[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v18 + 32))(boxed_opaque_existential_1, v12, v17);
  }
  v11 = (void *)v13[10];
  v10 = (const void *)v13[8];
  v14[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
  outlined init with copy of SpeakableString?(v10, v11);
  if (((unsigned int (*)(void *, uint64_t, uint64_t))v19)(v11, 1, v17) == 1)
  {
    outlined destroy of SpeakableString?(v13[10]);
    v14[4]._countAndFlagsBits = 0;
    v14[4]._object = 0;
    v14[5]._countAndFlagsBits = 0;
    v14[5]._object = 0;
  }
  else
  {
    v9 = v13[10];
    v14[5]._object = (void *)v17;
    v4 = __swift_allocate_boxed_opaque_existential_1(&v14[4]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v18 + 32))(v4, v9, v17);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v13[13] = v7;
  v8 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v5 = (_QWORD *)swift_task_alloc();
  v13[14] = v5;
  *v5 = v13[2];
  v5[1] = PaymentsLabelCATs.financialAccountDisambiguation(accountType:accountNumber:);
  return v8(v13[6], v1._countAndFlagsBits, v1._object, v7);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

_QWORD *PaymentsLabelCATs.financialAccountDisambiguation(accountType:accountNumber:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v4 = (_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 120) = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v4 + 8))(v4);
}

uint64_t PaymentsLabelCATs.financialAccountDisambiguation(accountType:accountNumber:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String *v8;
  Swift::String v9;
  const void *v10;
  char *v11;
  Swift::String *v12;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v14;
  const void *v15;
  char *v16;
  uint64_t *p_countAndFlagsBits;
  uint64_t *v18;
  uint64_t v19;
  Swift::String *v21;
  Swift::String *v22;
  _QWORD v23[2];
  Swift::String *v24;
  unsigned int v25;
  uint64_t v26;
  const void *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String *v34;
  const void *v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, _QWORD);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v26 = a3;
  v35 = a1;
  v27 = a2;
  v43 = 0;
  v42 = 0;
  v41 = 0;
  v28 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v35);
  v29 = (char *)v23 - v28;
  v30 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v37 = (char *)v23 - v30;
  v43 = v6;
  v42 = v7;
  v41 = v3;
  v36 = 1;
  v31 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#FinancialAccountDisambiguation", 0x2CuLL, 1);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v33 = _allocateUninitializedArray<A>(_:)();
  v34 = v8;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, v36 & 1);
  v10 = v35;
  v11 = v37;
  *v34 = v9;
  outlined init with copy of SpeakableString?(v10, v11);
  v38 = type metadata accessor for SpeakableString();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(unsigned int (**)(char *, _QWORD))(v39 + 48);
  if (v40(v37, v36) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v37);
    v22 = v34;
    v34[1]._countAndFlagsBits = 0;
    v22[1]._object = 0;
    v22[2]._countAndFlagsBits = 0;
    v22[2]._object = 0;
  }
  else
  {
    v12 = v34;
    v34[2]._object = (void *)v38;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v39 + 32))(boxed_opaque_existential_1, v37, v38);
  }
  v24 = v34 + 4;
  v25 = 1;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
  v15 = v27;
  v16 = v29;
  v34[3] = v14;
  outlined init with copy of SpeakableString?(v15, v16);
  if (((unsigned int (*)(char *, _QWORD, uint64_t))v40)(v29, v25, v38) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v29);
    v21 = v34;
    v34[4]._countAndFlagsBits = 0;
    v21[4]._object = 0;
    v21[5]._countAndFlagsBits = 0;
    v21[5]._object = 0;
  }
  else
  {
    p_countAndFlagsBits = &v24->_countAndFlagsBits;
    v34[5]._object = (void *)v38;
    v18 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v39 + 32))(v18, v29, v38);
  }
  v19 = v33;
  _finalizeUninitializedArray<A>(_:)();
  v23[0] = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v23[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsLabelCATs.payToday(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#PayToday", 0x16uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsLabelCATs.payToday()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t PaymentsLabelCATs.payToday()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#PayToday", 0x16uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#PayToday", 0x16uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for PaymentsLabelCATs()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for PaymentsLabelCATs;
  if (!type metadata singleton initialization cache for PaymentsLabelCATs)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for PaymentsLabelCATs()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t ObjC metadata update function for PaymentsLabelCATs()
{
  return type metadata accessor for PaymentsLabelCATs();
}

uint64_t *SignpostName.makeIntentFromParse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeIntentFromParse != -1)
    swift_once();
  return &static SignpostName.makeIntentFromParse;
}

uint64_t static Signpost.begin(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  unint64_t v11;
  unint64_t v12;
  int v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char *v26;

  v15 = a4;
  v16 = a1;
  v17 = a2;
  v18 = a3;
  v26 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v22 = type metadata accessor for OSSignpostID();
  v20 = *(_QWORD *)(v22 - 8);
  v11 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v16);
  v19 = (uint64_t)&v11 - v11;
  v12 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v21 = (char *)&v11 - v12;
  v26 = (char *)&v11 - v12;
  v23 = v6;
  v24 = v7;
  v25 = v8;
  static Signpost.generateSignpostID()();
  v13 = static os_signpost_type_t.begin.getter();
  v14 = (id)*Signpost.paymentsLog.unsafeMutableAddressor();
  v9 = v14;
  os_signpost(_:dso:log:name:signpostID:)();

  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(v19, v21, v22);
  Signpost.OpenSignpost.init(signpostID:name:)(v19, v16, v17, v18, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v21, v22);
}

uint64_t *SignpostName.resolveApp.unsafeMutableAddressor()
{
  if (one-time initialization token for resolveApp != -1)
    swift_once();
  return &static SignpostName.resolveApp;
}

uint64_t *SignpostName.makeSendPaymentFlowProducers.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSendPaymentFlowProducers != -1)
    swift_once();
  return &static SignpostName.makeSendPaymentFlowProducers;
}

uint64_t *SignpostName.makeRequestPaymentFlowProducers.unsafeMutableAddressor()
{
  if (one-time initialization token for makeRequestPaymentFlowProducers != -1)
    swift_once();
  return &static SignpostName.makeRequestPaymentFlowProducers;
}

uint64_t *SignpostName.makeRequestPaymentIntentHandledResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeRequestPaymentIntentHandledResponse != -1)
    swift_once();
  return &static SignpostName.makeRequestPaymentIntentHandledResponse;
}

uint64_t *SignpostName.makeRequestPaymentContinueInAppResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeRequestPaymentContinueInAppResponse != -1)
    swift_once();
  return &static SignpostName.makeRequestPaymentContinueInAppResponse;
}

uint64_t *SignpostName.makeRequestPaymentFailureHandlingIntentResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeRequestPaymentFailureHandlingIntentResponse != -1)
    swift_once();
  return &static SignpostName.makeRequestPaymentFailureHandlingIntentResponse;
}

uint64_t *SignpostName.makeDisambiguationItemContainer.unsafeMutableAddressor()
{
  if (one-time initialization token for makeDisambiguationItemContainer != -1)
    swift_once();
  return &static SignpostName.makeDisambiguationItemContainer;
}

uint64_t *SignpostName.parseDisambiguationResult.unsafeMutableAddressor()
{
  if (one-time initialization token for parseDisambiguationResult != -1)
    swift_once();
  return &static SignpostName.parseDisambiguationResult;
}

uint64_t *SignpostName.makePromptForDisambiguation.unsafeMutableAddressor()
{
  if (one-time initialization token for makePromptForDisambiguation != -1)
    swift_once();
  return &static SignpostName.makePromptForDisambiguation;
}

uint64_t *SignpostName.transformContactQueryToINPersons.unsafeMutableAddressor()
{
  if (one-time initialization token for transformContactQueryToINPersons != -1)
    swift_once();
  return &static SignpostName.transformContactQueryToINPersons;
}

uint64_t *SignpostName.parseResponseValueNeedsValue.unsafeMutableAddressor()
{
  if (one-time initialization token for parseResponseValueNeedsValue != -1)
    swift_once();
  return &static SignpostName.parseResponseValueNeedsValue;
}

uint64_t one-time initialization function for paymentsLog()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  LogConst.subsystem.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  LogConst.Category.siriPayments.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  result = OS_os_log.init(subsystem:category:)();
  static Signpost.paymentsLog = result;
  return result;
}

uint64_t *Signpost.paymentsLog.unsafeMutableAddressor()
{
  if (one-time initialization token for paymentsLog != -1)
    swift_once();
  return &static Signpost.paymentsLog;
}

void *static Signpost.paymentsLog.getter()
{
  id v0;
  void *v2;

  v2 = (void *)*Signpost.paymentsLog.unsafeMutableAddressor();
  v0 = v2;
  return v2;
}

uint64_t static Signpost.generateSignpostID()()
{
  id v0;

  v0 = (id)*Signpost.paymentsLog.unsafeMutableAddressor();
  return OSSignpostID.init(log:)();
}

uint64_t Signpost.OpenSignpost.init(signpostID:name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a5, a1);
  result = type metadata accessor for Signpost.OpenSignpost();
  v7 = a5 + *(int *)(result + 20);
  *(_QWORD *)v7 = a2;
  *(_QWORD *)(v7 + 8) = a3;
  *(_BYTE *)(v7 + 16) = a4;
  return result;
}

uint64_t static Signpost.begin(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char *v48;

  v33 = a8;
  v34 = a1;
  v35 = a2;
  v36 = a3;
  v29 = a4;
  v27 = a5;
  v28 = a6;
  v24 = a7;
  v48 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v41 = 0;
  v40 = type metadata accessor for OSSignpostID();
  v38 = *(_QWORD *)(v40 - 8);
  v22 = (*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v34);
  v37 = (uint64_t)&v21 - v22;
  v23 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v39 = (char *)&v21 - v23;
  v48 = (char *)&v21 - v23;
  v45 = v10;
  v46 = v11;
  v47 = v12;
  v42 = v13;
  v43 = v14;
  v44 = v15;
  v41 = v16;
  static Signpost.generateSignpostID()();
  v30 = static os_signpost_type_t.begin.getter();
  v32 = (id)*Signpost.paymentsLog.unsafeMutableAddressor();
  v17 = v32;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  v26 = _allocateUninitializedArray<A>(_:)();
  outlined init with copy of GlobalsProviding(v24, v18);
  v19 = v26;
  _finalizeUninitializedArray<A>(_:)();
  v31 = v19;
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v37, v39, v40);
  Signpost.OpenSignpost.init(signpostID:name:)(v37, v34, v35, v36, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v39, v40);
}

void static Signpost.event(_:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  char v4;
  id v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v8 = a1;
  v9 = a2;
  v10 = a3;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v13 = type metadata accessor for OSSignpostID();
  v11 = *(_QWORD *)(v13 - 8);
  v6 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = (char *)&v6 - v6;
  v15 = MEMORY[0x24BDAC7A8](v8);
  v16 = v3;
  v17 = v4;
  v7 = static os_signpost_type_t.event.getter();
  v14 = (id)*Signpost.paymentsLog.unsafeMutableAddressor();
  v5 = v14;
  default argument 4 of os_signpost(_:dso:log:name:signpostID:)();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v12, v13);

}

uint64_t default argument 4 of os_signpost(_:dso:log:name:signpostID:)()
{
  return static OSSignpostID.exclusive.getter();
}

Swift::Void __swiftcall Signpost.OpenSignpost.end()()
{
  uint64_t v0;
  id v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;

  v15 = 0;
  v5 = 0;
  v13 = type metadata accessor for OSSignpostID();
  v11 = *(_QWORD *)(v13 - 8);
  v4 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v12 = (char *)&v3 - v4;
  v15 = v0;
  v10 = static os_signpost_type_t.end.getter();
  v14 = (id)*Signpost.paymentsLog.unsafeMutableAddressor();
  v1 = v14;
  v2 = (uint64_t *)(v6 + *(int *)(type metadata accessor for Signpost.OpenSignpost() + 20));
  v7 = *v2;
  v8 = v2[1];
  v9 = *((unsigned __int8 *)v2 + 16);
  (*(void (**)(char *))(v11 + 16))(v12);
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v12, v13);

}

void one-time initialization function for checkAuthorizationStatus()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.checkAuthorizationStatus = v0;
  qword_2576727A8 = v1;
  byte_2576727B0 = v2;
}

uint64_t *SignpostName.checkAuthorizationStatus.unsafeMutableAddressor()
{
  if (one-time initialization token for checkAuthorizationStatus != -1)
    swift_once();
  return &static SignpostName.checkAuthorizationStatus;
}

void one-time initialization function for findFlowForX()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.findFlowForX = v0;
  qword_2576727C0 = v1;
  byte_2576727C8 = v2;
}

uint64_t *SignpostName.findFlowForX.unsafeMutableAddressor()
{
  if (one-time initialization token for findFlowForX != -1)
    swift_once();
  return &static SignpostName.findFlowForX;
}

uint64_t static SignpostName.findFlowForX.getter()
{
  return *SignpostName.findFlowForX.unsafeMutableAddressor();
}

void one-time initialization function for emitIntentSignal()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.emitIntentSignal = v0;
  qword_2576727D8 = v1;
  byte_2576727E0 = v2;
}

uint64_t *SignpostName.emitIntentSignal.unsafeMutableAddressor()
{
  if (one-time initialization token for emitIntentSignal != -1)
    swift_once();
  return &static SignpostName.emitIntentSignal;
}

uint64_t static SignpostName.emitIntentSignal.getter()
{
  return *SignpostName.emitIntentSignal.unsafeMutableAddressor();
}

void one-time initialization function for makeIntentFromParse()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeIntentFromParse = v0;
  qword_2576727F0 = v1;
  byte_2576727F8 = v2;
}

void one-time initialization function for makeSendPaymentFlowProducers()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeSendPaymentFlowProducers = v0;
  qword_257672808 = v1;
  byte_257672810 = v2;
}

void one-time initialization function for makeRequestPaymentFlowProducers()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeRequestPaymentFlowProducers = v0;
  qword_257672820 = v1;
  byte_257672828 = v2;
}

void one-time initialization function for makeSearchForAccountsFlowProducers()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeSearchForAccountsFlowProducers = v0;
  qword_257672838 = v1;
  byte_257672840 = v2;
}

uint64_t *SignpostName.makeSearchForAccountsFlowProducers.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSearchForAccountsFlowProducers != -1)
    swift_once();
  return &static SignpostName.makeSearchForAccountsFlowProducers;
}

void one-time initialization function for makeSendPaymentIntentHandledResponse()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeSendPaymentIntentHandledResponse = v0;
  qword_257672850 = v1;
  byte_257672858 = v2;
}

uint64_t *SignpostName.makeSendPaymentIntentHandledResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSendPaymentIntentHandledResponse != -1)
    swift_once();
  return &static SignpostName.makeSendPaymentIntentHandledResponse;
}

void one-time initialization function for makeSendPaymentIntentPromptForValue()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeSendPaymentIntentPromptForValue = v0;
  qword_257672868 = v1;
  byte_257672870 = v2;
}

uint64_t *SignpostName.makeSendPaymentIntentPromptForValue.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSendPaymentIntentPromptForValue != -1)
    swift_once();
  return &static SignpostName.makeSendPaymentIntentPromptForValue;
}

void one-time initialization function for makeSendPaymentPromptForConfirm()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeSendPaymentPromptForConfirm = v0;
  qword_257672880 = v1;
  byte_257672888 = v2;
}

uint64_t *SignpostName.makeSendPaymentPromptForConfirm.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSendPaymentPromptForConfirm != -1)
    swift_once();
  return &static SignpostName.makeSendPaymentPromptForConfirm;
}

void one-time initialization function for makeSendPaymentErrorResponse()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeSendPaymentErrorResponse = v0;
  qword_257672898 = v1;
  byte_2576728A0 = v2;
}

uint64_t *SignpostName.makeSendPaymentErrorResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSendPaymentErrorResponse != -1)
    swift_once();
  return &static SignpostName.makeSendPaymentErrorResponse;
}

void one-time initialization function for makeSendPaymentContinueInAppResponse()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeSendPaymentContinueInAppResponse = v0;
  qword_2576728B0 = v1;
  byte_2576728B8 = v2;
}

uint64_t *SignpostName.makeSendPaymentContinueInAppResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSendPaymentContinueInAppResponse != -1)
    swift_once();
  return &static SignpostName.makeSendPaymentContinueInAppResponse;
}

void one-time initialization function for makeSendPaymentFailureHandlingIntentResponse()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeSendPaymentFailureHandlingIntentResponse = v0;
  qword_2576728C8 = v1;
  byte_2576728D0 = v2;
}

uint64_t *SignpostName.makeSendPaymentFailureHandlingIntentResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSendPaymentFailureHandlingIntentResponse != -1)
    swift_once();
  return &static SignpostName.makeSendPaymentFailureHandlingIntentResponse;
}

void one-time initialization function for makeRequestPaymentIntentHandledResponse()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeRequestPaymentIntentHandledResponse = v0;
  qword_2576728E0 = v1;
  byte_2576728E8 = v2;
}

void one-time initialization function for makeRequestPaymentIntentPromptForValue()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeRequestPaymentIntentPromptForValue = v0;
  qword_2576728F8 = v1;
  byte_257672900 = v2;
}

uint64_t *SignpostName.makeRequestPaymentIntentPromptForValue.unsafeMutableAddressor()
{
  if (one-time initialization token for makeRequestPaymentIntentPromptForValue != -1)
    swift_once();
  return &static SignpostName.makeRequestPaymentIntentPromptForValue;
}

void one-time initialization function for makeRequestPaymentPromptForConfirm()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeRequestPaymentPromptForConfirm = v0;
  qword_257672910 = v1;
  byte_257672918 = v2;
}

uint64_t *SignpostName.makeRequestPaymentPromptForConfirm.unsafeMutableAddressor()
{
  if (one-time initialization token for makeRequestPaymentPromptForConfirm != -1)
    swift_once();
  return &static SignpostName.makeRequestPaymentPromptForConfirm;
}

void one-time initialization function for makeRequestPaymentErrorResponse()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeRequestPaymentErrorResponse = v0;
  qword_257672928 = v1;
  byte_257672930 = v2;
}

uint64_t *SignpostName.makeRequestPaymentErrorResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeRequestPaymentErrorResponse != -1)
    swift_once();
  return &static SignpostName.makeRequestPaymentErrorResponse;
}

void one-time initialization function for makeRequestPaymentContinueInAppResponse()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeRequestPaymentContinueInAppResponse = v0;
  qword_257672940 = v1;
  byte_257672948 = v2;
}

void one-time initialization function for makeRequestPaymentFailureHandlingIntentResponse()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeRequestPaymentFailureHandlingIntentResponse = v0;
  qword_257672958 = v1;
  byte_257672960 = v2;
}

void one-time initialization function for makeConfirmationRejectedResponse()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeConfirmationRejectedResponse = v0;
  qword_257672970 = v1;
  byte_257672978 = v2;
}

uint64_t *SignpostName.makeConfirmationRejectedResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeConfirmationRejectedResponse != -1)
    swift_once();
  return &static SignpostName.makeConfirmationRejectedResponse;
}

void one-time initialization function for makeSearchForAccountsPromptForConfirm()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeSearchForAccountsPromptForConfirm = v0;
  qword_257672988 = v1;
  byte_257672990 = v2;
}

uint64_t *SignpostName.makeSearchForAccountsPromptForConfirm.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSearchForAccountsPromptForConfirm != -1)
    swift_once();
  return &static SignpostName.makeSearchForAccountsPromptForConfirm;
}

void one-time initialization function for makeSearchForAccountsErrorResponse()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeSearchForAccountsErrorResponse = v0;
  qword_2576729A0 = v1;
  byte_2576729A8 = v2;
}

uint64_t *SignpostName.makeSearchForAccountsErrorResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSearchForAccountsErrorResponse != -1)
    swift_once();
  return &static SignpostName.makeSearchForAccountsErrorResponse;
}

void one-time initialization function for parseResponseValueNeedsValue()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.parseResponseValueNeedsValue = v0;
  qword_2576729B8 = v1;
  byte_2576729C0 = v2;
}

void one-time initialization function for sendPaymentConfirmIntent()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.sendPaymentConfirmIntent = v0;
  qword_2576729D0 = v1;
  byte_2576729D8 = v2;
}

uint64_t *SignpostName.sendPaymentConfirmIntent.unsafeMutableAddressor()
{
  if (one-time initialization token for sendPaymentConfirmIntent != -1)
    swift_once();
  return &static SignpostName.sendPaymentConfirmIntent;
}

void one-time initialization function for sendPaymentHandleIntent()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.sendPaymentHandleIntent = v0;
  qword_2576729E8 = v1;
  byte_2576729F0 = v2;
}

uint64_t *SignpostName.sendPaymentHandleIntent.unsafeMutableAddressor()
{
  if (one-time initialization token for sendPaymentHandleIntent != -1)
    swift_once();
  return &static SignpostName.sendPaymentHandleIntent;
}

void one-time initialization function for resolvePayee()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.resolvePayee = v0;
  qword_257672A00 = v1;
  byte_257672A08 = v2;
}

uint64_t *SignpostName.resolvePayee.unsafeMutableAddressor()
{
  if (one-time initialization token for resolvePayee != -1)
    swift_once();
  return &static SignpostName.resolvePayee;
}

void one-time initialization function for resolveCurrencyAmount()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.resolveCurrencyAmount = v0;
  qword_257672A18 = v1;
  byte_257672A20 = v2;
}

uint64_t *SignpostName.resolveCurrencyAmount.unsafeMutableAddressor()
{
  if (one-time initialization token for resolveCurrencyAmount != -1)
    swift_once();
  return &static SignpostName.resolveCurrencyAmount;
}

void one-time initialization function for resolveNote()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.resolveNote = v0;
  qword_257672A30 = v1;
  byte_257672A38 = v2;
}

uint64_t *SignpostName.resolveNote.unsafeMutableAddressor()
{
  if (one-time initialization token for resolveNote != -1)
    swift_once();
  return &static SignpostName.resolveNote;
}

void one-time initialization function for searchForAccountHandleIntent()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.searchForAccountHandleIntent = v0;
  qword_257672A48 = v1;
  byte_257672A50 = v2;
}

uint64_t *SignpostName.searchForAccountHandleIntent.unsafeMutableAddressor()
{
  if (one-time initialization token for searchForAccountHandleIntent != -1)
    swift_once();
  return &static SignpostName.searchForAccountHandleIntent;
}

void one-time initialization function for confirmationViewBuilder()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.confirmationViewBuilder = v0;
  qword_257672A60 = v1;
  byte_257672A68 = v2;
}

uint64_t *SignpostName.confirmationViewBuilder.unsafeMutableAddressor()
{
  if (one-time initialization token for confirmationViewBuilder != -1)
    swift_once();
  return &static SignpostName.confirmationViewBuilder;
}

void one-time initialization function for idiomSensitiveViewBuilder()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.idiomSensitiveViewBuilder = v0;
  qword_257672A78 = v1;
  byte_257672A80 = v2;
}

uint64_t *SignpostName.idiomSensitiveViewBuilder.unsafeMutableAddressor()
{
  if (one-time initialization token for idiomSensitiveViewBuilder != -1)
    swift_once();
  return &static SignpostName.idiomSensitiveViewBuilder;
}

void one-time initialization function for buildPunchoutForApp()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.buildPunchoutForApp = v0;
  qword_257672A90 = v1;
  byte_257672A98 = v2;
}

uint64_t *SignpostName.buildPunchoutForApp.unsafeMutableAddressor()
{
  if (one-time initialization token for buildPunchoutForApp != -1)
    swift_once();
  return &static SignpostName.buildPunchoutForApp;
}

void one-time initialization function for makeDisambiguationItemContainer()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makeDisambiguationItemContainer = v0;
  qword_257672AA8 = v1;
  byte_257672AB0 = v2;
}

void one-time initialization function for parseDisambiguationResult()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.parseDisambiguationResult = v0;
  qword_257672AC0 = v1;
  byte_257672AC8 = v2;
}

void one-time initialization function for makePromptForDisambiguation()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.makePromptForDisambiguation = v0;
  qword_257672AD8 = v1;
  byte_257672AE0 = v2;
}

void one-time initialization function for toSiriKitIntent()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.toSiriKitIntent = v0;
  qword_257672AF0 = v1;
  byte_257672AF8 = v2;
}

uint64_t *SignpostName.toSiriKitIntent.unsafeMutableAddressor()
{
  if (one-time initialization token for toSiriKitIntent != -1)
    swift_once();
  return &static SignpostName.toSiriKitIntent;
}

void one-time initialization function for transformContactQueryToINPersons()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.transformContactQueryToINPersons = v0;
  qword_257672B08 = v1;
  byte_257672B10 = v2;
}

void one-time initialization function for resolveApp()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.resolveApp = v0;
  qword_257672B20 = v1;
  byte_257672B28 = v2;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t type metadata accessor for Signpost.OpenSignpost()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for Signpost.OpenSignpost;
  if (!type metadata singleton initialization cache for Signpost.OpenSignpost)
    return swift_getSingletonMetadata();
  return v1;
}

void one-time initialization function for searchForAccountsAppResolution()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  SignpostName.init(name:)();
  static SignpostName.searchForAccountsAppResolution = v0;
  qword_257672B38 = v1;
  byte_257672B40 = v2;
}

uint64_t *SignpostName.searchForAccountsAppResolution.unsafeMutableAddressor()
{
  if (one-time initialization token for searchForAccountsAppResolution != -1)
    swift_once();
  return &static SignpostName.searchForAccountsAppResolution;
}

ValueMetadata *type metadata accessor for Signpost()
{
  return &type metadata for Signpost;
}

unint64_t initializeBufferWithCopyOfBuffer for Signpost.OpenSignpost(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v7;
  int v12;

  v12 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v12 & 0x20000) != 0)
  {
    v7 = *a2;
    swift_retain();
    *a1 = v7;
    return *a1 + ((v12 + 16) & ~(unint64_t)v12);
  }
  else
  {
    v3 = type metadata accessor for OSSignpostID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v4 = (char *)a1 + *(int *)(a3 + 20);
    v5 = (char *)a2 + *(int *)(a3 + 20);
    *(_OWORD *)v4 = *(_OWORD *)v5;
    v4[16] = v5[16];
    return (unint64_t)a1;
  }
}

uint64_t destroy for Signpost.OpenSignpost(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for OSSignpostID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
}

__n128 initializeWithCopy for Signpost.OpenSignpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 *v4;
  __n128 result;
  __n128 *v6;

  v3 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v4 = (__n128 *)(a2 + *(int *)(a3 + 20));
  result = *v4;
  v6 = (__n128 *)(a1 + *(int *)(a3 + 20));
  *v6 = *v4;
  v6[1].n128_u8[0] = v4[1].n128_u8[0];
  return result;
}

uint64_t assignWithCopy for Signpost.OpenSignpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v3 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  result = a1;
  v5 = a2 + *(int *)(a3 + 20);
  v6 = a1 + *(int *)(a3 + 20);
  *(_QWORD *)v6 = *(_QWORD *)v5;
  *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
  *(_BYTE *)(v6 + 16) = *(_BYTE *)(v5 + 16);
  return result;
}

__n128 initializeWithTake for Signpost.OpenSignpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 *v4;
  __n128 result;
  __n128 *v6;

  v3 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  v4 = (__n128 *)(a2 + *(int *)(a3 + 20));
  result = *v4;
  v6 = (__n128 *)(a1 + *(int *)(a3 + 20));
  *v6 = *v4;
  v6[1].n128_u8[0] = v4[1].n128_u8[0];
  return result;
}

uint64_t assignWithTake for Signpost.OpenSignpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v3 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  result = a1;
  v5 = a2 + *(int *)(a3 + 20);
  v6 = a1 + *(int *)(a3 + 20);
  *(_QWORD *)v6 = *(_QWORD *)v5;
  *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
  *(_BYTE *)(v6 + 16) = *(_BYTE *)(v5 + 16);
  return result;
}

uint64_t getEnumTagSinglePayload for Signpost.OpenSignpost()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24712F570(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for OSSignpostID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 48))(a1, a2);
}

uint64_t storeEnumTagSinglePayload for Signpost.OpenSignpost()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24712F5CC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for OSSignpostID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 56))(a1, a2);
}

uint64_t type metadata completion function for Signpost.OpenSignpost()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for OSSignpostID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for SignpostName(uint64_t a1, int a2)
{
  int v3;

  if (a2)
  {
    if (*(_BYTE *)(a1 + 17))
      v3 = *(_DWORD *)a1;
    else
      v3 = -1;
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for SignpostName(uint64_t result, int a2, int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 17);
  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 16) = 0;
    if (a3)
      *v3 = 1;
  }
  else if (a3)
  {
    *v3 = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignpostName()
{
  return &type metadata for SignpostName;
}

uint64_t SendPaymentNeedsValueStrategy.actionForInput(_:resolveRecord:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  _BYTE **v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint32_t v37;
  uint64_t v38;
  int v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint32_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v26 = a3;
  v29 = a1;
  v28 = a2;
  v50 = 0;
  v49 = 0;
  v48 = 0;
  v27 = 0;
  v38 = 0;
  v33 = type metadata accessor for Logger();
  v32 = *(_QWORD *)(v33 - 8);
  v30 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = (char *)&v12 - v30;
  v31 = (char *)&v12 - v30;
  v50 = MEMORY[0x24BDAC7A8](v29);
  v49 = v4;
  v48 = v5;
  v6 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v3, v6, v33);
  v40 = Logger.logObject.getter();
  v39 = static os_log_type_t.debug.getter();
  v36 = &v46;
  v46 = 2;
  v34 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v35 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v37 = v47;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v41 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v40, (os_log_type_t)v39))
  {
    v7 = v27;
    v16 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v15 = 0;
    v17 = createStorage<A>(capacity:type:)(0);
    v18 = createStorage<A>(capacity:type:)(v15);
    v22 = &v45;
    v45 = v16;
    v23 = &v44;
    v44 = v17;
    v20 = &v43;
    v43 = v18;
    v19 = 0;
    serialize(_:at:)(0, &v45);
    serialize(_:at:)(v19, v22);
    v42 = v41;
    v21 = &v12;
    MEMORY[0x24BDAC7A8](&v12);
    v8 = v23;
    v9 = &v12 - 6;
    v24 = &v12 - 6;
    v9[2] = (uint64_t)v22;
    v9[3] = (uint64_t)v8;
    v9[4] = v10;
    v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v7)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, v40, (os_log_type_t)v39, "#SendPaymentNeedsValueStrategy actionForInput.", v16, v37);
      v13 = 0;
      destroyStorage<A>(_:count:)(v17, 0, v14);
      destroyStorage<A>(_:count:)(v18, v13, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v16, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v33);
  swift_retain();
  BaseStrategy.actionForInput(_:)(v29, v26);
  return swift_release();
}

uint64_t SendPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 224) = v2;
  *(_QWORD *)(v3 + 216) = a2;
  *(_QWORD *)(v3 + 208) = a1;
  *(_QWORD *)(v3 + 136) = v3;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_BYTE *)(v3 + 384) = 0;
  *(_BYTE *)(v3 + 392) = 0;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);
  *(_QWORD *)(v3 + 232) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 240) = v5;
  *(_QWORD *)(v3 + 248) = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v3 + 256) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(_QWORD *)(v3 + 264) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v3 + 272) = swift_task_alloc();
  v6 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v3 + 280) = v6;
  *(_QWORD *)(v3 + 288) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 296) = swift_task_alloc();
  v7 = type metadata accessor for ParameterIdentifier();
  *(_QWORD *)(v3 + 304) = v7;
  *(_QWORD *)(v3 + 312) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 320) = swift_task_alloc();
  v8 = type metadata accessor for Logger();
  *(_QWORD *)(v3 + 328) = v8;
  *(_QWORD *)(v3 + 336) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 344) = swift_task_alloc();
  *(_QWORD *)(v3 + 352) = swift_task_alloc();
  *(_QWORD *)(v3 + 144) = a2;
  *(_QWORD *)(v3 + 152) = v2;
  return swift_task_switch();
}

uint64_t SendPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  SiriPaymentsIntents::SendPaymentSlots_optional v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *buf;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint32_t size;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  NSObject *oslog;
  os_log_type_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  Swift::String rawValue;
  SiriPaymentsIntents::SendPaymentSlots value;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  uint32_t v62;
  os_log_type_t v63;
  NSObject *v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;

  v1 = *(_QWORD *)(v0 + 352);
  v59 = *(_QWORD *)(v0 + 336);
  v60 = *(_QWORD *)(v0 + 328);
  *(_QWORD *)(v0 + 136) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16);
  v61(v1, v2, v60);
  v64 = Logger.logObject.getter();
  v63 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 160) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v62 = *(_DWORD *)(v0 + 388);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v65 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v64, v63))
  {
    v54 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v55 = createStorage<A>(capacity:type:)(0);
    v56 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v58 + 176) = v54;
    *(_QWORD *)(v58 + 184) = v55;
    *(_QWORD *)(v58 + 192) = v56;
    serialize(_:at:)(0, (_BYTE **)(v58 + 176));
    serialize(_:at:)(0, (_BYTE **)(v58 + 176));
    *(_QWORD *)(v58 + 200) = v65;
    v57 = (_QWORD *)swift_task_alloc();
    v57[2] = v58 + 176;
    v57[3] = v58 + 184;
    v57[4] = v58 + 192;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v64, v63, "#SendPaymentNeedsValueStrategy makePromptForValue", v54, v62);
    destroyStorage<A>(_:count:)(v55, 0, v53);
    destroyStorage<A>(_:count:)(v56, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v54, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v44 = *(_QWORD *)(v58 + 352);
  v43 = *(_QWORD *)(v58 + 336);
  v45 = *(_QWORD *)(v58 + 328);
  v48 = *(_QWORD *)(v58 + 320);
  v47 = *(_QWORD *)(v58 + 312);
  v49 = *(_QWORD *)(v58 + 304);

  v46 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
  v46(v44, v45);
  ParameterResolutionRecord.parameter.getter();
  rawValue._countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  v50 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
  v50(v48, v49);
  v4.value = SendPaymentSlots.init(rawValue:)(rawValue).value;
  value = v4.value;
  *(SiriPaymentsIntents::SendPaymentSlots_optional *)(v58 + 386) = v4;
  if (v4.value == SiriPaymentsIntents_SendPaymentSlots_unknownDefault)
  {
    v9 = *(_QWORD *)(v58 + 344);
    v24 = *(_QWORD *)(v58 + 328);
    v28 = *(_QWORD *)(v58 + 256);
    v27 = *(_QWORD *)(v58 + 240);
    v29 = *(_QWORD *)(v58 + 232);
    v25 = *(_QWORD *)(v58 + 216);
    v10 = Logger.payments.unsafeMutableAddressor();
    v61(v9, v10, v24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v28, v25, v29);
    v26 = (*(unsigned __int8 *)(v27 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    v31 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v27 + 32))(v31 + v26, v28, v29);
    oslog = Logger.logObject.getter();
    v38 = static os_log_type_t.error.getter();
    *(_QWORD *)(v58 + 168) = 12;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v58 + 396);
    v33 = swift_allocObject();
    *(_BYTE *)(v33 + 16) = 32;
    v34 = swift_allocObject();
    *(_BYTE *)(v34 + 16) = 8;
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 16) = partial apply for implicit closure #1 in SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    *(_QWORD *)(v32 + 24) = v31;
    v35 = swift_allocObject();
    *(_QWORD *)(v35 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v35 + 24) = v32;
    _allocateUninitializedArray<A>(_:)();
    v36 = v11;
    swift_retain();
    *v36 = partial apply for closure #1 in OSLogArguments.append(_:);
    v36[1] = v33;
    swift_retain();
    v36[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v36[3] = v34;
    swift_retain();
    v36[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v36[5] = v35;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v38))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v22 = createStorage<A>(capacity:type:)(0);
      v23 = createStorage<A>(capacity:type:)(1);
      v66 = buf;
      v67 = v22;
      v68 = v23;
      serialize(_:at:)(2, &v66);
      serialize(_:at:)(1, &v66);
      v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v70 = v33;
      closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
      v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v70 = v34;
      closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
      v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v70 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
      _os_log_impl(&dword_24701B000, oslog, v38, "#SendPaymentNeedsValueStrategy unknown parameter: %s", buf, size);
      destroyStorage<A>(_:count:)(v22, 0, v20);
      destroyStorage<A>(_:count:)(v23, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v14 = *(_QWORD *)(v58 + 344);
    v15 = *(_QWORD *)(v58 + 328);
    v16 = *(_QWORD *)(v58 + 320);
    v17 = *(_QWORD *)(v58 + 304);

    v46(v14, v15);
    ParameterResolutionRecord.parameter.getter();
    v19 = ParameterIdentifier.name.getter();
    v18 = v12;
    v50(v16, v17);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v13 = v19;
    *(_QWORD *)(v13 + 8) = v18;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = 0;
    *(_BYTE *)(v13 + 48) = 14;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v58 + 136) + 8))();
  }
  else
  {
    v42 = *(_QWORD *)(v58 + 272);
    v41 = *(_QWORD *)(v58 + 224);
    *(SiriPaymentsIntents::SendPaymentSlots_optional *)(v58 + 384) = v4;
    v39 = (id)ParameterResolutionRecord.intent.getter();
    v40 = objc_msgSend(v39, sel_verb);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = String.isEmpty.getter();
    *(_BYTE *)(v58 + 387) = v5 & 1;
    *(_BYTE *)(v58 + 392) = v5 & 1;
    swift_bridgeObjectRelease();

    swift_retain();
    *(_QWORD *)(v58 + 360) = *(_QWORD *)(v41 + 16);
    swift_retain();
    swift_release();
    *(_BYTE *)(v58 + 385) = value;
    lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
    lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
    Slot<>.propertyName.getter((uint64_t)&type metadata for SendPaymentSlots, (uint64_t)&protocol witness table for SendPaymentSlots);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v6 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v42, 0, 1);
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v58 + 368) = v7;
    *v7 = *(_QWORD *)(v58 + 136);
    v7[1] = SendPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:);
    return SendPaymentCATs.promptForSlotValue(slot:)(*(_QWORD *)(v58 + 296), *(_QWORD *)(v58 + 272));
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 136) = *v1;
  v2 += 136;
  v4 = v2 - 120;
  *(_QWORD *)(v2 + 240) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 256));
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *(_BYTE *)(v0 + 387);
  v6 = *(unsigned __int8 *)(v0 + 386);
  v11 = *(_QWORD *)(v0 + 296);
  v9 = *(_QWORD *)(v0 + 288);
  v10 = *(_QWORD *)(v0 + 280);
  v12 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 224);
  v8 = *(uint64_t **)(v0 + 208);
  *(_QWORD *)(v0 + 136) = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, v0 + 16);
  swift_release();
  v4 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  static PaymentsContextProvider.needsValueContextUpdate(value:isVerbless:)(v6, v7 & 1, v12);
  v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v12, 0, 1);
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v8[3] = type metadata accessor for AceOutput();
  v8[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v8);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?(v0 + 96);
  outlined destroy of NLContextUpdate?(v12);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 136) + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 272);
  *(_QWORD *)(v0 + 136) = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 136) + 8))();
}

uint64_t SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v4 + 568) = v3;
  *(_QWORD *)(v4 + 560) = a3;
  *(_QWORD *)(v4 + 552) = a2;
  *(_QWORD *)(v4 + 544) = a1;
  *(_QWORD *)(v4 + 264) = v4;
  *(_QWORD *)(v4 + 272) = 0;
  *(_QWORD *)(v4 + 280) = 0;
  *(_QWORD *)(v4 + 288) = 0;
  *(_BYTE *)(v4 + 840) = 0;
  *(_QWORD *)(v4 + 368) = 0;
  *(_QWORD *)(v4 + 392) = 0;
  *(_QWORD *)(v4 + 448) = 0;
  v5 = type metadata accessor for Parse.DirectInvocation();
  *(_QWORD *)(v4 + 576) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 584) = v6;
  *(_QWORD *)(v4 + 592) = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v4 + 600) = swift_task_alloc();
  *(_QWORD *)(v4 + 608) = swift_task_alloc();
  v7 = type metadata accessor for Parse();
  *(_QWORD *)(v4 + 616) = v7;
  *(_QWORD *)(v4 + 624) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 632) = swift_task_alloc();
  *(_QWORD *)(v4 + 640) = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);
  *(_QWORD *)(v4 + 648) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 656) = v9;
  *(_QWORD *)(v4 + 664) = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v4 + 672) = swift_task_alloc();
  v10 = type metadata accessor for Input();
  *(_QWORD *)(v4 + 680) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v4 + 688) = v11;
  *(_QWORD *)(v4 + 696) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v4 + 704) = swift_task_alloc();
  v12 = type metadata accessor for ParameterIdentifier();
  *(_QWORD *)(v4 + 712) = v12;
  *(_QWORD *)(v4 + 720) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v4 + 728) = swift_task_alloc();
  v13 = type metadata accessor for Logger();
  *(_QWORD *)(v4 + 736) = v13;
  *(_QWORD *)(v4 + 744) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v4 + 752) = swift_task_alloc();
  *(_QWORD *)(v4 + 760) = swift_task_alloc();
  *(_QWORD *)(v4 + 768) = swift_task_alloc();
  *(_QWORD *)(v4 + 776) = swift_task_alloc();
  *(_QWORD *)(v4 + 784) = swift_task_alloc();
  *(_QWORD *)(v4 + 792) = swift_task_alloc();
  *(_QWORD *)(v4 + 800) = swift_task_alloc();
  *(_QWORD *)(v4 + 808) = swift_task_alloc();
  *(_QWORD *)(v4 + 816) = swift_task_alloc();
  *(_QWORD *)(v4 + 824) = swift_task_alloc();
  *(_QWORD *)(v4 + 832) = swift_task_alloc();
  *(_QWORD *)(v4 + 272) = a2;
  *(_QWORD *)(v4 + 280) = a3;
  *(_QWORD *)(v4 + 288) = v3;
  return swift_task_switch();
}

uint64_t SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  SiriPaymentsIntents::SendPaymentSlots_optional v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  id v24;
  uint64_t countAndFlagsBits;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint32_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint32_t v85;
  os_log_type_t v86;
  NSObject *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint32_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  NSObject *v111;
  os_log_type_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint8_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint32_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  NSObject *v142;
  os_log_type_t v143;
  void *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(uint64_t, uint64_t);
  id v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint8_t *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  id v171;
  id v172;
  uint64_t v173;
  uint32_t v174;
  os_log_type_t v175;
  NSObject *v176;
  uint64_t v177;
  uint64_t v178;
  uint8_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint32_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  NSObject *v189;
  os_log_type_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint8_t *v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint32_t v203;
  os_log_type_t v204;
  NSObject *v205;
  uint64_t v206;
  void *v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  uint64_t v214;
  uint8_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void (*v225)(uint64_t, uint64_t, uint64_t);
  uint32_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  NSObject *v233;
  os_log_type_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint8_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void (*v247)(uint64_t, uint64_t, uint64_t);
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void (*v252)(unint64_t, uint64_t, uint64_t);
  uint32_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  NSObject *v260;
  os_log_type_t v261;
  uint64_t v262;
  uint8_t *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint32_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  NSObject *log;
  os_log_type_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void (*v284)(uint64_t, uint64_t);
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void (*v288)(uint64_t, uint64_t);
  Swift::String rawValue;
  SiriPaymentsIntents::SendPaymentSlots value;
  uint64_t v291;
  uint8_t *buf;
  uint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  void (*v299)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v301;
  NSObject *oslog;
  uint64_t v303;
  uint8_t *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t (*v307)(uint64_t, uint64_t, uint64_t);
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  __int128 v313;
  uint8_t *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t (*v317)(uint64_t, uint64_t, uint64_t);
  uint64_t v318;
  uint8_t *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t (*v322)(uint64_t, uint64_t, uint64_t);
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  __int128 v330;
  uint8_t *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t (*v334)(uint64_t, uint64_t, uint64_t);
  uint64_t v335;
  uint8_t *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t (*v339)(uint64_t, uint64_t, uint64_t);
  uint64_t v340;
  uint8_t *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t (*v344)(uint64_t, uint64_t, uint64_t);
  uint64_t v345;
  uint8_t *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t (*v349)(uint64_t, uint64_t, uint64_t);
  uint64_t v350;

  v1 = *(_QWORD *)(v0 + 832);
  v297 = *(_QWORD *)(v0 + 744);
  v298 = *(_QWORD *)(v0 + 736);
  *(_QWORD *)(v0 + 264) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  v299 = *(void (**)(uint64_t, uint64_t, uint64_t))(v297 + 16);
  v299(v1, v2, v298);
  oslog = Logger.logObject.getter();
  v301 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 296) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 844);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v303 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v301))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v291 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v293 = createStorage<A>(capacity:type:)(0);
    v294 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v296 + 512) = buf;
    *(_QWORD *)(v296 + 520) = v293;
    *(_QWORD *)(v296 + 528) = v294;
    serialize(_:at:)(0, (_BYTE **)(v296 + 512));
    serialize(_:at:)(0, (_BYTE **)(v296 + 512));
    *(_QWORD *)(v296 + 536) = v303;
    v295 = (_QWORD *)swift_task_alloc();
    v295[2] = v296 + 512;
    v295[3] = v296 + 520;
    v295[4] = v296 + 528;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, oslog, v301, "#SendPaymentNeedsValueStrategy parseValueResponse.", buf, size);
    destroyStorage<A>(_:count:)(v293, 0, v291);
    destroyStorage<A>(_:count:)(v294, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v282 = *(_QWORD *)(v296 + 832);
  v281 = *(_QWORD *)(v296 + 744);
  v283 = *(_QWORD *)(v296 + 736);
  v286 = *(_QWORD *)(v296 + 728);
  v285 = *(_QWORD *)(v296 + 720);
  v287 = *(_QWORD *)(v296 + 712);

  v284 = *(void (**)(uint64_t, uint64_t))(v281 + 8);
  v284(v282, v283);
  ParameterResolutionRecord.parameter.getter();
  rawValue._countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  v288 = *(void (**)(uint64_t, uint64_t))(v285 + 8);
  v288(v286, v287);
  v4.value = SendPaymentSlots.init(rawValue:)(rawValue).value;
  value = v4.value;
  if (v4.value == SiriPaymentsIntents_SendPaymentSlots_unknownDefault)
  {
    v43 = *(_QWORD *)(v296 + 752);
    v59 = *(_QWORD *)(v296 + 736);
    v63 = *(_QWORD *)(v296 + 672);
    v62 = *(_QWORD *)(v296 + 656);
    v64 = *(_QWORD *)(v296 + 648);
    v60 = *(_QWORD *)(v296 + 560);
    v44 = Logger.payments.unsafeMutableAddressor();
    v299(v43, v44, v59);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v63, v60, v64);
    v61 = (*(unsigned __int8 *)(v62 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
    v66 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v62 + 32))(v66 + v61, v63, v64);
    v72 = Logger.logObject.getter();
    v73 = static os_log_type_t.error.getter();
    *(_QWORD *)(v296 + 304) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v65 = *(_DWORD *)(v296 + 848);
    v68 = swift_allocObject();
    *(_BYTE *)(v68 + 16) = 32;
    v69 = swift_allocObject();
    *(_BYTE *)(v69 + 16) = 8;
    v67 = swift_allocObject();
    *(_QWORD *)(v67 + 16) = partial apply for implicit closure #1 in SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    *(_QWORD *)(v67 + 24) = v66;
    v70 = swift_allocObject();
    *(_QWORD *)(v70 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v70 + 24) = v67;
    _allocateUninitializedArray<A>(_:)();
    v71 = v45;
    swift_retain();
    *v71 = partial apply for closure #1 in OSLogArguments.append(_:);
    v71[1] = v68;
    swift_retain();
    v71[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v71[3] = v69;
    swift_retain();
    v71[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v71[5] = v70;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v72, v73))
    {
      v56 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v57 = createStorage<A>(capacity:type:)(0);
      v58 = createStorage<A>(capacity:type:)(1);
      v304 = v56;
      v305 = v57;
      v306 = v58;
      serialize(_:at:)(2, &v304);
      serialize(_:at:)(1, &v304);
      v307 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v308 = v68;
      closure #1 in osLogInternal(_:log:type:)(&v307, (uint64_t)&v304, (uint64_t)&v305, (uint64_t)&v306);
      v307 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v308 = v69;
      closure #1 in osLogInternal(_:log:type:)(&v307, (uint64_t)&v304, (uint64_t)&v305, (uint64_t)&v306);
      v307 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v308 = v70;
      closure #1 in osLogInternal(_:log:type:)(&v307, (uint64_t)&v304, (uint64_t)&v305, (uint64_t)&v306);
      _os_log_impl(&dword_24701B000, v72, v73, "#SendPaymentNeedsValueStrategy unknown parameter: %s", v56, v65);
      destroyStorage<A>(_:count:)(v57, 0, v55);
      destroyStorage<A>(_:count:)(v58, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v56, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v53 = *(_QWORD *)(v296 + 752);
    v49 = *(_QWORD *)(v296 + 736);
    v54 = *(_QWORD *)(v296 + 728);
    v50 = *(_QWORD *)(v296 + 712);

    v284(v53, v49);
    ParameterResolutionRecord.parameter.getter();
    v52 = ParameterIdentifier.name.getter();
    v51 = v46;
    v288(v54, v50);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v47 = v52;
    *(_QWORD *)(v47 + 8) = v51;
    *(_QWORD *)(v47 + 16) = 0;
    *(_QWORD *)(v47 + 24) = 0;
    *(_QWORD *)(v47 + 32) = 0;
    *(_QWORD *)(v47 + 40) = 0;
    *(_BYTE *)(v47 + 48) = 14;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v296 + 264) + 8))();
  }
  else
  {
    v5 = *(_QWORD *)(v296 + 824);
    v266 = *(_QWORD *)(v296 + 736);
    v270 = *(_QWORD *)(v296 + 704);
    v269 = *(_QWORD *)(v296 + 688);
    v271 = *(_QWORD *)(v296 + 680);
    v267 = *(_QWORD *)(v296 + 552);
    *(SiriPaymentsIntents::SendPaymentSlots_optional *)(v296 + 840) = v4;
    v6 = Logger.payments.unsafeMutableAddressor();
    v299(v5, v6, v266);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v269 + 16))(v270, v267, v271);
    v268 = (*(unsigned __int8 *)(v269 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v269 + 80);
    v273 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v269 + 32))(v273 + v268, v270, v271);
    log = Logger.logObject.getter();
    v280 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v296 + 312) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v272 = *(_DWORD *)(v296 + 852);
    v275 = swift_allocObject();
    *(_BYTE *)(v275 + 16) = 32;
    v276 = swift_allocObject();
    *(_BYTE *)(v276 + 16) = 8;
    v274 = swift_allocObject();
    *(_QWORD *)(v274 + 16) = partial apply for implicit closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
    *(_QWORD *)(v274 + 24) = v273;
    v277 = swift_allocObject();
    *(_QWORD *)(v277 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v277 + 24) = v274;
    _allocateUninitializedArray<A>(_:)();
    v278 = v7;
    swift_retain();
    *v278 = partial apply for closure #1 in OSLogArguments.append(_:);
    v278[1] = v275;
    swift_retain();
    v278[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v278[3] = v276;
    swift_retain();
    v278[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v278[5] = v277;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v280))
    {
      v263 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v262 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v264 = createStorage<A>(capacity:type:)(0);
      v265 = createStorage<A>(capacity:type:)(1);
      v346 = v263;
      v347 = v264;
      v348 = v265;
      serialize(_:at:)(2, &v346);
      serialize(_:at:)(1, &v346);
      v349 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v350 = v275;
      closure #1 in osLogInternal(_:log:type:)(&v349, (uint64_t)&v346, (uint64_t)&v347, (uint64_t)&v348);
      v349 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v350 = v276;
      closure #1 in osLogInternal(_:log:type:)(&v349, (uint64_t)&v346, (uint64_t)&v347, (uint64_t)&v348);
      v349 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v350 = v277;
      closure #1 in osLogInternal(_:log:type:)(&v349, (uint64_t)&v346, (uint64_t)&v347, (uint64_t)&v348);
      _os_log_impl(&dword_24701B000, log, v280, "#SendPaymentNeedsValueStrategy Parse: %s", v263, v272);
      destroyStorage<A>(_:count:)(v264, 0, v262);
      destroyStorage<A>(_:count:)(v265, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v263, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v244 = *(_QWORD *)(v296 + 824);
    v8 = *(_QWORD *)(v296 + 816);
    v245 = *(_QWORD *)(v296 + 736);
    v250 = *(_QWORD *)(v296 + 672);
    v249 = *(_QWORD *)(v296 + 656);
    v251 = *(_QWORD *)(v296 + 648);
    v246 = *(_QWORD *)(v296 + 560);

    v284(v244, v245);
    v9 = Logger.payments.unsafeMutableAddressor();
    v299(v8, v9, v245);
    v247 = *(void (**)(uint64_t, uint64_t, uint64_t))(v249 + 16);
    v247(v250, v246, v251);
    v248 = *(_DWORD *)(v249 + 80);
    v254 = swift_allocObject();
    v252 = *(void (**)(unint64_t, uint64_t, uint64_t))(v249 + 32);
    v252(v254 + ((v248 + 16) & ~(unint64_t)v248), v250, v251);
    v260 = Logger.logObject.getter();
    v261 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v296 + 320) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v253 = *(_DWORD *)(v296 + 856);
    v256 = swift_allocObject();
    *(_BYTE *)(v256 + 16) = 32;
    v257 = swift_allocObject();
    *(_BYTE *)(v257 + 16) = 8;
    v255 = swift_allocObject();
    *(_QWORD *)(v255 + 16) = partial apply for implicit closure #1 in SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    *(_QWORD *)(v255 + 24) = v254;
    v258 = swift_allocObject();
    *(_QWORD *)(v258 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v258 + 24) = v255;
    _allocateUninitializedArray<A>(_:)();
    v259 = v10;
    swift_retain();
    *v259 = partial apply for closure #1 in OSLogArguments.append(_:);
    v259[1] = v256;
    swift_retain();
    v259[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v259[3] = v257;
    swift_retain();
    v259[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v259[5] = v258;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v260, v261))
    {
      v241 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v240 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v242 = createStorage<A>(capacity:type:)(0);
      v243 = createStorage<A>(capacity:type:)(1);
      v341 = v241;
      v342 = v242;
      v343 = v243;
      serialize(_:at:)(2, &v341);
      serialize(_:at:)(1, &v341);
      v344 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v345 = v256;
      closure #1 in osLogInternal(_:log:type:)(&v344, (uint64_t)&v341, (uint64_t)&v342, (uint64_t)&v343);
      v344 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v345 = v257;
      closure #1 in osLogInternal(_:log:type:)(&v344, (uint64_t)&v341, (uint64_t)&v342, (uint64_t)&v343);
      v344 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v345 = v258;
      closure #1 in osLogInternal(_:log:type:)(&v344, (uint64_t)&v341, (uint64_t)&v342, (uint64_t)&v343);
      _os_log_impl(&dword_24701B000, v260, v261, "#SendPaymentNeedsValueStrategy parseResponseValue for slot: %s", v241, v253);
      destroyStorage<A>(_:count:)(v242, 0, v240);
      destroyStorage<A>(_:count:)(v243, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v241, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v235 = *(_QWORD *)(v296 + 816);
    v236 = *(_QWORD *)(v296 + 736);
    v238 = *(_QWORD *)(v296 + 640);
    v237 = *(_QWORD *)(v296 + 624);
    v239 = *(_QWORD *)(v296 + 616);

    v284(v235, v236);
    Input.parse.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v237 + 88))(v238, v239) == *MEMORY[0x24BE98E88])
    {
      v11 = *(_QWORD *)(v296 + 808);
      v219 = *(_QWORD *)(v296 + 736);
      v218 = *(_QWORD *)(v296 + 640);
      v220 = *(_QWORD *)(v296 + 608);
      v223 = *(_QWORD *)(v296 + 600);
      v221 = *(_QWORD *)(v296 + 584);
      v224 = *(_QWORD *)(v296 + 576);
      (*(void (**)(void))(*(_QWORD *)(v296 + 624) + 96))();
      v225 = *(void (**)(uint64_t, uint64_t, uint64_t))(v221 + 32);
      v225(v220, v218, v224);
      *(_QWORD *)(v296 + 392) = v220;
      v12 = Logger.payments.unsafeMutableAddressor();
      v299(v11, v12, v219);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v221 + 16))(v223, v220, v224);
      v222 = (*(unsigned __int8 *)(v221 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v221 + 80);
      v227 = swift_allocObject();
      v225(v227 + v222, v223, v224);
      v233 = Logger.logObject.getter();
      v234 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v296 + 400) = 12;
      UnsignedInteger<>.init<A>(_:)();
      v226 = *(_DWORD *)(v296 + 872);
      v229 = swift_allocObject();
      *(_BYTE *)(v229 + 16) = 32;
      v230 = swift_allocObject();
      *(_BYTE *)(v230 + 16) = 8;
      v228 = swift_allocObject();
      *(_QWORD *)(v228 + 16) = partial apply for implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse(input:);
      *(_QWORD *)(v228 + 24) = v227;
      v231 = swift_allocObject();
      *(_QWORD *)(v231 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v231 + 24) = v228;
      _allocateUninitializedArray<A>(_:)();
      v232 = v13;
      swift_retain();
      *v232 = partial apply for closure #1 in OSLogArguments.append(_:);
      v232[1] = v229;
      swift_retain();
      v232[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v232[3] = v230;
      swift_retain();
      v232[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v232[5] = v231;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v233, v234))
      {
        v215 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v214 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v216 = createStorage<A>(capacity:type:)(0);
        v217 = createStorage<A>(capacity:type:)(1);
        v336 = v215;
        v337 = v216;
        v338 = v217;
        serialize(_:at:)(2, &v336);
        serialize(_:at:)(1, &v336);
        v339 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v340 = v229;
        closure #1 in osLogInternal(_:log:type:)(&v339, (uint64_t)&v336, (uint64_t)&v337, (uint64_t)&v338);
        v339 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v340 = v230;
        closure #1 in osLogInternal(_:log:type:)(&v339, (uint64_t)&v336, (uint64_t)&v337, (uint64_t)&v338);
        v339 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v340 = v231;
        closure #1 in osLogInternal(_:log:type:)(&v339, (uint64_t)&v336, (uint64_t)&v337, (uint64_t)&v338);
        _os_log_impl(&dword_24701B000, v233, v234, "#SendPaymentNeedsValueStrategy parseResponseValue, directInvocation: %s", v215, v226);
        destroyStorage<A>(_:count:)(v216, 0, v214);
        destroyStorage<A>(_:count:)(v217, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v215, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      v209 = *(_QWORD *)(v296 + 808);
      v210 = *(_QWORD *)(v296 + 736);

      v284(v209, v210);
      v211 = Parse.DirectInvocation.identifier.getter();
      v212 = v14;
      swift_bridgeObjectRetain();
      PaymentsDirectInvocations.Identifiers.rawValue.getter(3);
      swift_bridgeObjectRetain();
      v324 = v211;
      v325 = v212;
      v213 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v213 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        if (Parse.DirectInvocation.userData.getter())
        {
          PaymentsDirectInvocations.Keys.rawValue.getter(1);
          *(_QWORD *)(v296 + 248) = v15;
          *(_QWORD *)(v296 + 256) = v16;
          MEMORY[0x2495721DC]();
          outlined destroy of String.UTF8View();
          swift_bridgeObjectRelease();
        }
        else
        {
          *(_QWORD *)(v296 + 216) = 0;
          *(_QWORD *)(v296 + 224) = 0;
          *(_QWORD *)(v296 + 232) = 0;
          *(_QWORD *)(v296 + 240) = 0;
        }
        if (*(_QWORD *)(v296 + 240))
        {
          type metadata accessor for INPerson();
          if ((swift_dynamicCast() & 1) != 0)
            v208 = *(void **)(v296 + 504);
          else
            v208 = 0;
          v207 = v208;
        }
        else
        {
          outlined destroy of FlowActivity?(v296 + 216);
          v207 = 0;
        }
        v20 = *(_QWORD *)(v296 + 792);
        v182 = *(_QWORD *)(v296 + 736);
        *(_QWORD *)(v296 + 448) = v207;
        v21 = Logger.payments.unsafeMutableAddressor();
        v299(v20, v21, v182);
        v22 = v207;
        v184 = swift_allocObject();
        *(_QWORD *)(v184 + 16) = v207;
        default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
        swift_bridgeObjectRelease();
        v189 = Logger.logObject.getter();
        v190 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v296 + 456) = 12;
        UnsignedInteger<>.init<A>(_:)();
        v183 = *(_DWORD *)(v296 + 880);
        v185 = swift_allocObject();
        *(_BYTE *)(v185 + 16) = 64;
        v186 = swift_allocObject();
        *(_BYTE *)(v186 + 16) = 8;
        v187 = swift_allocObject();
        *(_QWORD *)(v187 + 16) = partial apply for implicit closure #5 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
        *(_QWORD *)(v187 + 24) = v184;
        _allocateUninitializedArray<A>(_:)();
        v188 = v23;
        swift_retain();
        *v188 = partial apply for closure #1 in OSLogArguments.append(_:);
        v188[1] = v185;
        swift_retain();
        v188[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v188[3] = v186;
        swift_retain();
        v188[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v188[5] = v187;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v189, v190))
        {
          v179 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v178 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v180 = createStorage<A>(capacity:type:)(1);
          v181 = createStorage<A>(capacity:type:)(0);
          v331 = v179;
          v332 = v180;
          v333 = v181;
          serialize(_:at:)(2, &v331);
          serialize(_:at:)(1, &v331);
          v334 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v335 = v185;
          closure #1 in osLogInternal(_:log:type:)(&v334, (uint64_t)&v331, (uint64_t)&v332, (uint64_t)&v333);
          v334 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v335 = v186;
          closure #1 in osLogInternal(_:log:type:)(&v334, (uint64_t)&v331, (uint64_t)&v332, (uint64_t)&v333);
          v334 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v335 = v187;
          closure #1 in osLogInternal(_:log:type:)(&v334, (uint64_t)&v331, (uint64_t)&v332, (uint64_t)&v333);
          _os_log_impl(&dword_24701B000, v189, v190, "#SendPaymentNeedsValueStrategy Received payee value %@ from DirectInvocation", v179, v183);
          destroyStorage<A>(_:count:)(v180, 1, v178);
          destroyStorage<A>(_:count:)(v181, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v179, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        v169 = *(_QWORD *)(v296 + 792);
        v170 = *(_QWORD *)(v296 + 784);
        v173 = *(_QWORD *)(v296 + 736);

        v284(v169, v173);
        v172 = (id)ParameterResolutionRecord.intent.getter();
        v24 = v207;
        countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payee", 5uLL, 1)._countAndFlagsBits;
        v171 = (id)MEMORY[0x24957220C](countAndFlagsBits);
        swift_bridgeObjectRelease();
        objc_msgSend(v172, sel_setValue_forKeyPath_, v207, v171);

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        v26 = Logger.payments.unsafeMutableAddressor();
        v299(v170, v26, v173);
        v176 = Logger.logObject.getter();
        v175 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v296 + 464) = 2;
        UnsignedInteger<>.init<A>(_:)();
        v174 = *(_DWORD *)(v296 + 884);
        v177 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v176, v175))
        {
          v165 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v164 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v166 = createStorage<A>(capacity:type:)(0);
          v167 = createStorage<A>(capacity:type:)(0);
          *(_QWORD *)(v296 + 472) = v165;
          *(_QWORD *)(v296 + 480) = v166;
          *(_QWORD *)(v296 + 488) = v167;
          serialize(_:at:)(0, (_BYTE **)(v296 + 472));
          serialize(_:at:)(0, (_BYTE **)(v296 + 472));
          *(_QWORD *)(v296 + 496) = v177;
          v168 = (_QWORD *)swift_task_alloc();
          v168[2] = v296 + 472;
          v168[3] = v296 + 480;
          v168[4] = v296 + 488;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_24701B000, v176, v175, "#SendPaymentNeedsValueStrategy Returning successful IntentPromptAnswer", v165, v174);
          destroyStorage<A>(_:count:)(v166, 0, v164);
          destroyStorage<A>(_:count:)(v167, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v165, MEMORY[0x24BEE4260]);
        }
        swift_bridgeObjectRelease();
        v156 = *(_QWORD *)(v296 + 784);
        v157 = *(_QWORD *)(v296 + 736);
        v162 = *(_QWORD *)(v296 + 608);
        v161 = *(_QWORD *)(v296 + 584);
        v163 = *(_QWORD *)(v296 + 576);
        v160 = *(_QWORD *)(v296 + 544);

        v284(v156, v157);
        v158 = (id)ParameterResolutionRecord.intent.getter();
        *(_QWORD *)(v296 + 200) = &type metadata for SendPaymentSlots;
        *(_QWORD *)(v296 + 208) = &protocol witness table for SendPaymentSlots;
        *(_BYTE *)(v296 + 176) = value;
        v159 = type metadata accessor for INSendPaymentIntent();
        SiriKitPaymentsIntent.value(forSlot:)((_QWORD *)(v296 + 176), v159, &v330);
        __swift_destroy_boxed_opaque_existential_0(v296 + 176);

        ParameterResolutionRecord.intent.getter();
        IntentPromptAnswer.init(answeredValue:updatedIntent:)();
        v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INSendPaymentIntent>);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v160, 0, 1);
        (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v162, v163);
      }
      else
      {
        v17 = *(_QWORD *)(v296 + 800);
        v202 = *(_QWORD *)(v296 + 736);
        swift_bridgeObjectRelease();
        v18 = Logger.payments.unsafeMutableAddressor();
        v299(v17, v18, v202);
        v205 = Logger.logObject.getter();
        v204 = static os_log_type_t.error.getter();
        *(_QWORD *)(v296 + 408) = 2;
        UnsignedInteger<>.init<A>(_:)();
        v203 = *(_DWORD *)(v296 + 876);
        v206 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v205, v204))
        {
          v198 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v197 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v199 = createStorage<A>(capacity:type:)(0);
          v200 = createStorage<A>(capacity:type:)(0);
          *(_QWORD *)(v296 + 416) = v198;
          *(_QWORD *)(v296 + 424) = v199;
          *(_QWORD *)(v296 + 432) = v200;
          serialize(_:at:)(0, (_BYTE **)(v296 + 416));
          serialize(_:at:)(0, (_BYTE **)(v296 + 416));
          *(_QWORD *)(v296 + 440) = v206;
          v201 = (_QWORD *)swift_task_alloc();
          v201[2] = v296 + 416;
          v201[3] = v296 + 424;
          v201[4] = v296 + 432;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_24701B000, v205, v204, "#SendPaymentNeedsValueStrategy parseResponseValue failed to interpret user response as expected Direct Invocation. Reprompt with previous state", v198, v203);
          destroyStorage<A>(_:count:)(v199, 0, v197);
          destroyStorage<A>(_:count:)(v200, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v198, MEMORY[0x24BEE4260]);
        }
        swift_bridgeObjectRelease();
        v191 = *(_QWORD *)(v296 + 800);
        v192 = *(_QWORD *)(v296 + 736);
        v195 = *(_QWORD *)(v296 + 608);
        v194 = *(_QWORD *)(v296 + 584);
        v196 = *(_QWORD *)(v296 + 576);
        v193 = *(_QWORD *)(v296 + 544);

        v284(v191, v192);
        v326 = 0;
        v327 = 0;
        v328 = 0;
        v329 = 0;
        ParameterResolutionRecord.intent.getter();
        type metadata accessor for INSendPaymentIntent();
        IntentPromptAnswer.init(answeredValue:updatedIntent:)();
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INSendPaymentIntent>);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v193, 0, 1);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v194 + 8))(v195, v196);
      }
    }
    else
    {
      v152 = *(_QWORD *)(v296 + 632);
      v151 = *(_QWORD *)(v296 + 624);
      v153 = *(_QWORD *)(v296 + 616);
      v149 = *(_QWORD *)(v296 + 568);
      Input.parse.getter();
      v150 = (id)ParameterResolutionRecord.intent.getter();
      swift_retain();
      outlined init with copy of GlobalsProviding(v149 + 104, v296 + 16);
      swift_release();
      v148 = *(_QWORD *)(v296 + 40);
      v147 = *(_QWORD *)(v296 + 48);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v296 + 16), v148);
      (*(void (**)(uint64_t))(v147 + 24))(v148);
      swift_retain();
      outlined init with copy of GlobalsProviding(v149 + 64, v296 + 96);
      swift_release();
      v155 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(v150, (uint64_t)&protocol witness table for INSendPaymentIntent, v296 + 56, v296 + 96);
      __swift_destroy_boxed_opaque_existential_0(v296 + 96);
      __swift_destroy_boxed_opaque_existential_0(v296 + 56);
      __swift_destroy_boxed_opaque_existential_0(v296 + 16);

      v154 = *(void (**)(uint64_t, uint64_t))(v151 + 8);
      v154(v152, v153);
      if (v155)
      {
        objc_opt_self();
        v146 = swift_dynamicCastObjCClass();
        if (v146)
        {
          v145 = (void *)v146;
        }
        else
        {

          v145 = 0;
        }
        v144 = v145;
      }
      else
      {
        v144 = 0;
      }
      if (v144)
      {
        v28 = *(_QWORD *)(v296 + 776);
        v134 = *(_QWORD *)(v296 + 736);
        *(_QWORD *)(v296 + 368) = v144;
        v29 = Logger.payments.unsafeMutableAddressor();
        v299(v28, v29, v134);
        v30 = v144;
        v136 = swift_allocObject();
        *(_QWORD *)(v136 + 16) = v144;
        v142 = Logger.logObject.getter();
        v143 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v296 + 376) = 12;
        UnsignedInteger<>.init<A>(_:)();
        v135 = *(_DWORD *)(v296 + 864);
        v138 = swift_allocObject();
        *(_BYTE *)(v138 + 16) = 64;
        v139 = swift_allocObject();
        *(_BYTE *)(v139 + 16) = 8;
        v137 = swift_allocObject();
        *(_QWORD *)(v137 + 16) = partial apply for implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
        *(_QWORD *)(v137 + 24) = v136;
        v140 = swift_allocObject();
        *(_QWORD *)(v140 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v140 + 24) = v137;
        _allocateUninitializedArray<A>(_:)();
        v141 = v31;
        swift_retain();
        *v141 = partial apply for closure #1 in OSLogArguments.append(_:);
        v141[1] = v138;
        swift_retain();
        v141[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v141[3] = v139;
        swift_retain();
        v141[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v141[5] = v140;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v142, v143))
        {
          v131 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v130 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v132 = createStorage<A>(capacity:type:)(1);
          v133 = createStorage<A>(capacity:type:)(0);
          v319 = v131;
          v320 = v132;
          v321 = v133;
          serialize(_:at:)(2, &v319);
          serialize(_:at:)(1, &v319);
          v322 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v323 = v138;
          closure #1 in osLogInternal(_:log:type:)(&v322, (uint64_t)&v319, (uint64_t)&v320, (uint64_t)&v321);
          v322 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v323 = v139;
          closure #1 in osLogInternal(_:log:type:)(&v322, (uint64_t)&v319, (uint64_t)&v320, (uint64_t)&v321);
          v322 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v323 = v140;
          closure #1 in osLogInternal(_:log:type:)(&v322, (uint64_t)&v319, (uint64_t)&v320, (uint64_t)&v321);
          _os_log_impl(&dword_24701B000, v142, v143, "#SendPaymentNeedsValueStrategy Converted PaymentsIntent to SiriKit intent: %@", v131, v135);
          destroyStorage<A>(_:count:)(v132, 1, v130);
          destroyStorage<A>(_:count:)(v133, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v131, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        v128 = *(_QWORD *)(v296 + 776);
        v129 = *(_QWORD *)(v296 + 736);

        v284(v128, v129);
        if (value)
        {
          if (value == SiriPaymentsIntents_SendPaymentSlots_currencyAmount)
          {
            v124 = (id)ParameterResolutionRecord.intent.getter();
            v123 = objc_msgSend(v144, sel_currencyAmount);
            v33 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("currencyAmount", 0xEuLL, 1)._countAndFlagsBits;
            v122 = (id)MEMORY[0x24957220C](v33);
            swift_bridgeObjectRelease();
            objc_msgSend(v124, sel_setValue_forKeyPath_, v123, v122);

            swift_unknownObjectRelease();
          }
          else
          {
            v120 = (id)ParameterResolutionRecord.intent.getter();
            v121 = objc_msgSend(v144, sel_note);
            if (v121)
            {
              v116 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v117 = v34;

              v118 = v116;
              v119 = v117;
            }
            else
            {
              v118 = 0;
              v119 = 0;
            }
            if (v119)
            {
              v114 = MEMORY[0x24957220C](v118);
              swift_bridgeObjectRelease();
              v115 = v114;
            }
            else
            {
              v115 = 0;
            }
            v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("note", 4uLL, 1)._countAndFlagsBits;
            v113 = (id)MEMORY[0x24957220C](v35);
            swift_bridgeObjectRelease();
            objc_msgSend(v120, sel_setValue_forKeyPath_, v115, v113);

            swift_unknownObjectRelease();
          }
        }
        else
        {
          v127 = (id)ParameterResolutionRecord.intent.getter();
          v126 = objc_msgSend(v144, sel_payee);
          v32 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payee", 5uLL, 1)._countAndFlagsBits;
          v125 = (id)MEMORY[0x24957220C](v32);
          swift_bridgeObjectRelease();
          objc_msgSend(v127, sel_setValue_forKeyPath_, v126, v125);

          swift_unknownObjectRelease();
        }
        v36 = *(_QWORD *)(v296 + 768);
        v100 = *(_QWORD *)(v296 + 736);
        v102 = *(_QWORD *)(v296 + 672);
        v103 = *(_QWORD *)(v296 + 648);
        v101 = *(_QWORD *)(v296 + 560);
        v37 = Logger.payments.unsafeMutableAddressor();
        v299(v36, v37, v100);
        v247(v102, v101, v103);
        v105 = swift_allocObject();
        v252(v105 + ((v248 + 16) & ~(unint64_t)v248), v102, v103);
        v111 = Logger.logObject.getter();
        v112 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v296 + 384) = 12;
        UnsignedInteger<>.init<A>(_:)();
        v104 = *(_DWORD *)(v296 + 868);
        v107 = swift_allocObject();
        *(_BYTE *)(v107 + 16) = 32;
        v108 = swift_allocObject();
        *(_BYTE *)(v108 + 16) = 8;
        v106 = swift_allocObject();
        *(_QWORD *)(v106 + 16) = partial apply for implicit closure #7 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
        *(_QWORD *)(v106 + 24) = v105;
        v109 = swift_allocObject();
        *(_QWORD *)(v109 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v109 + 24) = v106;
        _allocateUninitializedArray<A>(_:)();
        v110 = v38;
        swift_retain();
        *v110 = partial apply for closure #1 in OSLogArguments.append(_:);
        v110[1] = v107;
        swift_retain();
        v110[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v110[3] = v108;
        swift_retain();
        v110[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v110[5] = v109;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v111, v112))
        {
          v97 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v96 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v98 = createStorage<A>(capacity:type:)(0);
          v99 = createStorage<A>(capacity:type:)(1);
          v314 = v97;
          v315 = v98;
          v316 = v99;
          serialize(_:at:)(2, &v314);
          serialize(_:at:)(1, &v314);
          v317 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v318 = v107;
          closure #1 in osLogInternal(_:log:type:)(&v317, (uint64_t)&v314, (uint64_t)&v315, (uint64_t)&v316);
          v317 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v318 = v108;
          closure #1 in osLogInternal(_:log:type:)(&v317, (uint64_t)&v314, (uint64_t)&v315, (uint64_t)&v316);
          v317 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v318 = v109;
          closure #1 in osLogInternal(_:log:type:)(&v317, (uint64_t)&v314, (uint64_t)&v315, (uint64_t)&v316);
          _os_log_impl(&dword_24701B000, v111, v112, "#SendPaymentNeedsValueStrategy Returning intent: %s", v97, v104);
          destroyStorage<A>(_:count:)(v98, 0, v96);
          destroyStorage<A>(_:count:)(v99, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v97, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        v89 = *(_QWORD *)(v296 + 768);
        v90 = *(_QWORD *)(v296 + 736);
        v94 = *(_QWORD *)(v296 + 640);
        v95 = *(_QWORD *)(v296 + 616);
        v93 = *(_QWORD *)(v296 + 544);

        v284(v89, v90);
        v91 = (id)ParameterResolutionRecord.intent.getter();
        *(_QWORD *)(v296 + 160) = &type metadata for SendPaymentSlots;
        *(_QWORD *)(v296 + 168) = &protocol witness table for SendPaymentSlots;
        *(_BYTE *)(v296 + 136) = value;
        v92 = type metadata accessor for INSendPaymentIntent();
        SiriKitPaymentsIntent.value(forSlot:)((_QWORD *)(v296 + 136), v92, &v313);
        __swift_destroy_boxed_opaque_existential_0(v296 + 136);

        IntentPromptAnswer.init(answeredValue:updatedIntent:)();
        v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INSendPaymentIntent>);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v93, 0, 1);
        v154(v94, v95);
      }
      else
      {
        v40 = *(_QWORD *)(v296 + 760);
        v84 = *(_QWORD *)(v296 + 736);
        v41 = Logger.payments.unsafeMutableAddressor();
        v299(v40, v41, v84);
        v87 = Logger.logObject.getter();
        v86 = static os_log_type_t.error.getter();
        *(_QWORD *)(v296 + 328) = 2;
        UnsignedInteger<>.init<A>(_:)();
        v85 = *(_DWORD *)(v296 + 860);
        v88 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v87, v86))
        {
          v80 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v79 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v81 = createStorage<A>(capacity:type:)(0);
          v82 = createStorage<A>(capacity:type:)(0);
          *(_QWORD *)(v296 + 336) = v80;
          *(_QWORD *)(v296 + 344) = v81;
          *(_QWORD *)(v296 + 352) = v82;
          serialize(_:at:)(0, (_BYTE **)(v296 + 336));
          serialize(_:at:)(0, (_BYTE **)(v296 + 336));
          *(_QWORD *)(v296 + 360) = v88;
          v83 = (_QWORD *)swift_task_alloc();
          v83[2] = v296 + 336;
          v83[3] = v296 + 344;
          v83[4] = v296 + 352;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_24701B000, v87, v86, "#SendPaymentNeedsValueStrategy parseResponseValue failed to interpret user response as expected Send response. Reprompt with previous state", v80, v85);
          destroyStorage<A>(_:count:)(v81, 0, v79);
          destroyStorage<A>(_:count:)(v82, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v80, MEMORY[0x24BEE4260]);
        }
        swift_bridgeObjectRelease();
        v74 = *(_QWORD *)(v296 + 760);
        v75 = *(_QWORD *)(v296 + 736);
        v77 = *(_QWORD *)(v296 + 640);
        v78 = *(_QWORD *)(v296 + 616);
        v76 = *(_QWORD *)(v296 + 544);

        v284(v74, v75);
        v309 = 0;
        v310 = 0;
        v311 = 0;
        v312 = 0;
        ParameterResolutionRecord.intent.getter();
        type metadata accessor for INSendPaymentIntent();
        IntentPromptAnswer.init(answeredValue:updatedIntent:)();
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INSendPaymentIntent>);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v76, 0, 1);
        v154(v77, v78);
      }
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v296 + 264) + 8))();
  }
}

void *implicit closure #5 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(void *a1)
{
  id v1;

  v1 = a1;
  if (a1)
    return a1;
  else
    return 0;
}

uint64_t default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t implicit closure #7 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);
  ParameterResolutionRecord.intent.getter();
  type metadata accessor for INSendPaymentIntent();
  lazy protocol witness table accessor for type INSendPaymentIntent and conformance NSObject();
  return String.init<A>(describing:)();
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance SendPaymentNeedsValueStrategy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SendPaymentNeedsValueStrategy.actionForInput(_:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.parseValueResponse(input:resolveRecord:) in conformance SendPaymentNeedsValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makePromptForValue(resolveRecord:) in conformance SendPaymentNeedsValueStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:)(a1, a2);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:) in conformance SendPaymentNeedsValueStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for SendPaymentNeedsValueStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:)();
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:) in conformance SendPaymentNeedsValueStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for SendPaymentNeedsValueStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:)();
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance SendPaymentNeedsValueStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for SendPaymentNeedsValueStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)();
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance SendPaymentNeedsValueStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for SendPaymentNeedsValueStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)();
}

uint64_t sub_247135B7C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247135BF0()
{
  return swift_deallocObject();
}

uint64_t sub_247135C18()
{
  return swift_deallocObject();
}

uint64_t sub_247135C40()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247135C7C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247135CB8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247135D2C()
{
  return swift_deallocObject();
}

uint64_t sub_247135D54()
{
  return swift_deallocObject();
}

uint64_t sub_247135D7C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247135DB8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247135DF4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Input() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247135E64()
{
  return swift_deallocObject();
}

uint64_t sub_247135E8C()
{
  return swift_deallocObject();
}

uint64_t sub_247135EB4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247135EF0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247135F2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247135FA0()
{
  return swift_deallocObject();
}

uint64_t sub_247135FC8()
{
  return swift_deallocObject();
}

uint64_t sub_247135FF0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24713602C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247136068()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2471360A4()
{
  return swift_deallocObject();
}

uint64_t sub_2471360CC()
{
  return swift_deallocObject();
}

uint64_t sub_2471360F4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247136130()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24713616C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);
  return implicit closure #7 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)();
}

uint64_t sub_247136214()
{
  return swift_deallocObject();
}

uint64_t sub_24713623C()
{
  return swift_deallocObject();
}

uint64_t sub_247136264()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471362A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471362DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Parse.DirectInvocation() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_24713634C()
{
  return swift_deallocObject();
}

uint64_t sub_247136374()
{
  return swift_deallocObject();
}

uint64_t sub_24713639C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471363D8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247136414()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for implicit closure #5 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  uint64_t v0;

  return implicit closure #5 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(*(void **)(v0 + 16));
}

uint64_t sub_247136458()
{
  return swift_deallocObject();
}

uint64_t sub_247136480()
{
  return swift_deallocObject();
}

uint64_t sub_2471364A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for SendPaymentNeedsValueStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SendPaymentNeedsValueStrategy;
  if (!type metadata singleton initialization cache for SendPaymentNeedsValueStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

unint64_t base witness table accessor for ParameterResolutionHandlingAsync in SendPaymentNeedsValueStrategy()
{
  return lazy protocol witness table accessor for type SendPaymentNeedsValueStrategy and conformance SendPaymentNeedsValueStrategy();
}

uint64_t SendPaymentHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[5] = 0;
  v4 = type metadata accessor for Logger();
  v3[11] = v4;
  v3[12] = *(_QWORD *)(v4 - 8);
  v3[13] = swift_task_alloc();
  v3[3] = a1;
  v3[4] = a2;
  v3[5] = v2;
  return swift_task_switch();
}

uint64_t SendPaymentHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint32_t v16;
  os_log_type_t v17;
  NSObject *v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 16) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v1, v2, v15);
  v18 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 48) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v16 = *(_DWORD *)(v0 + 112);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v19 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v18, v17))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v10 = createStorage<A>(capacity:type:)(0);
    v11 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v13 + 56) = buf;
    *(_QWORD *)(v13 + 64) = v10;
    *(_QWORD *)(v13 + 72) = v11;
    serialize(_:at:)(0, (_BYTE **)(v13 + 56));
    serialize(_:at:)(0, (_BYTE **)(v13 + 56));
    *(_QWORD *)(v13 + 80) = v19;
    v12 = (_QWORD *)swift_task_alloc();
    v12[2] = v13 + 56;
    v12[3] = v13 + 64;
    v12[4] = v13 + 72;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v18, v17, "#SendPaymentHandleIntentStrategy makeIntentExecutionBehavior", buf, v16);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v13 + 104);
  v4 = *(_QWORD *)(v13 + 96);
  v5 = *(_QWORD *)(v13 + 88);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
  type metadata accessor for SiriKitIntentExecutionBehavior();
  v7 = static SiriKitIntentExecutionBehavior.standard()();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 16) + 8))(v7);
}

uint64_t SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[53] = v2;
  v3[52] = a2;
  v3[51] = a1;
  v3[39] = v3;
  v3[40] = 0;
  v3[41] = 0;
  v3[43] = 0;
  v3[49] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v3[54] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[55] = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  v3[56] = v4;
  v3[57] = *(_QWORD *)(v4 - 8);
  v3[58] = swift_task_alloc();
  v3[59] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSendPaymentIntent, INSendPaymentIntentResponse>);
  v3[60] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[61] = v6;
  v3[62] = *(_QWORD *)(v6 + 64);
  v3[63] = swift_task_alloc();
  v7 = type metadata accessor for Logger();
  v3[64] = v7;
  v3[65] = *(_QWORD *)(v7 - 8);
  v3[66] = swift_task_alloc();
  v3[67] = swift_task_alloc();
  v3[68] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[69] = swift_task_alloc();
  v3[40] = a2;
  v3[41] = v2;
  return swift_task_switch();
}

uint64_t SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  _QWORD *v5;
  void (*v6)(uint64_t, uint64_t);
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint8_t *buf;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint32_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;

  v26 = *(_QWORD *)(v0 + 552);
  v1 = *(_QWORD *)(v0 + 544);
  v27 = *(_QWORD *)(v0 + 520);
  v28 = *(_QWORD *)(v0 + 512);
  v32 = *(_QWORD *)(v0 + 504);
  v30 = *(_QWORD *)(v0 + 488);
  v33 = *(_QWORD *)(v0 + 480);
  v29 = *(_QWORD *)(v0 + 416);
  *(_QWORD *)(v0 + 312) = v0;
  v2 = SignpostName.sendPaymentHandleIntent.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v26);
  v3 = Logger.payments.unsafeMutableAddressor();
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
  *(_QWORD *)(v0 + 560) = v4;
  v4(v1, v3, v28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v32, v29, v33);
  v31 = (*(unsigned __int8 *)(v30 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  v35 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v30 + 32))(v35 + v31, v32, v33);
  v41 = Logger.logObject.getter();
  v42 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 336) = 12;
  *(_QWORD *)(v0 + 568) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 576) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 584) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v34 = *(_DWORD *)(v0 + 656);
  v37 = swift_allocObject();
  *(_BYTE *)(v37 + 16) = 32;
  v38 = swift_allocObject();
  *(_BYTE *)(v38 + 16) = 8;
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = partial apply for implicit closure #1 in SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  *(_QWORD *)(v36 + 24) = v35;
  v39 = swift_allocObject();
  *(_QWORD *)(v39 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v39 + 24) = v36;
  *(_QWORD *)(v0 + 592) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v40 = v5;
  swift_retain();
  *v40 = partial apply for closure #1 in OSLogArguments.append(_:);
  v40[1] = v37;
  swift_retain();
  v40[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v40[3] = v38;
  swift_retain();
  v40[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v40[5] = v39;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v41, v42))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v23 = createStorage<A>(capacity:type:)(0);
    v24 = createStorage<A>(capacity:type:)(1);
    v43 = buf;
    v44 = v23;
    v45 = v24;
    serialize(_:at:)(2, &v43);
    serialize(_:at:)(1, &v43);
    v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v47 = v37;
    closure #1 in osLogInternal(_:log:type:)(&v46, (uint64_t)&v43, (uint64_t)&v44, (uint64_t)&v45);
    v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v47 = v38;
    closure #1 in osLogInternal(_:log:type:)(&v46, (uint64_t)&v43, (uint64_t)&v44, (uint64_t)&v45);
    v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v47 = v39;
    closure #1 in osLogInternal(_:log:type:)(&v46, (uint64_t)&v43, (uint64_t)&v44, (uint64_t)&v45);
    _os_log_impl(&dword_24701B000, v41, v42, "#SendPaymentHandleIntentStrategy makeIntentHandledResponse response: %s", buf, v34);
    destroyStorage<A>(_:count:)(v23, 0, v21);
    destroyStorage<A>(_:count:)(v24, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v17 = v25[68];
  v16 = v25[65];
  v18 = v25[64];

  v6 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v25[75] = v6;
  v6(v17, v18);
  v19 = (id)IntentResolutionRecord.intentResponse.getter();
  v20 = objc_msgSend(v19, sel_code);
  v25[43] = v20;

  if (v20 == (id)3)
  {
    v14 = v25[53];
    swift_retain();
    v25[76] = *(_QWORD *)(v14 + 16);
    swift_retain();
    swift_release();
    IntentResolutionRecord.app.getter();
    v15 = App.sirikitApp.getter();
    v25[77] = v15;
    swift_release();
    v7 = (_QWORD *)swift_task_alloc();
    v25[78] = v7;
    *v7 = v25[39];
    v7[1] = SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    return SendPaymentCATs.intentHandledResponse(app:)(v25[59], v15);
  }
  else
  {
    v10 = v25[53];
    swift_retain();
    outlined init with copy of GlobalsProviding(v10 + 144, (uint64_t)(v25 + 2));
    swift_release();
    v11 = v25[5];
    v12 = v25[6];
    __swift_project_boxed_opaque_existential_1(v25 + 2, v11);
    v13 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 + 48) + **(int **)(v12 + 48));
    v9 = (_QWORD *)swift_task_alloc();
    v25[80] = v9;
    *v9 = v25[39];
    v9[1] = SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    return v13(v25[54], v25[52], v11, v12);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 312) = *v1;
  *(_QWORD *)(v2 + 632) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v31;
  NSObject *oslog;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *buf;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint32_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  void *v63;
  id v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;

  *(_QWORD *)(v0 + 312) = v0;
  v63 = (void *)IntentResolutionRecord.intentResponse.getter();
  v64 = objc_msgSend(v63, sel_paymentRecord);
  if (!v64)
  {
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 560);
    v8 = *(_QWORD *)(v62 + 528);
    v28 = *(_QWORD *)(v62 + 512);

    v9 = Logger.payments.unsafeMutableAddressor();
    v29(v8, v9, v28);
    oslog = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    *(_QWORD *)(v62 + 352) = 2;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v62 + 660);
    v33 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v31))
    {
      v10 = *(_QWORD *)(v62 + 632);
      v24 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v25 = createStorage<A>(capacity:type:)(0);
      v26 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v62 + 360) = v24;
      *(_QWORD *)(v62 + 368) = v25;
      *(_QWORD *)(v62 + 376) = v26;
      serialize(_:at:)(0, (_BYTE **)(v62 + 360));
      serialize(_:at:)(0, (_BYTE **)(v62 + 360));
      *(_QWORD *)(v62 + 384) = v33;
      v27 = (_QWORD *)swift_task_alloc();
      v27[2] = v62 + 360;
      v27[3] = v62 + 368;
      v27[4] = v62 + 376;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v10)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24701B000, oslog, v31, "#SendPaymentHandleIntentStrategy found no paymentRecord in intent response, throwing exception", v24, size);
      destroyStorage<A>(_:count:)(v25, 0, v23);
      destroyStorage<A>(_:count:)(v26, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v24, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v15 = *(void (**)(uint64_t, uint64_t))(v62 + 600);
    v22 = *(_QWORD *)(v62 + 552);
    v13 = *(_QWORD *)(v62 + 528);
    v14 = *(_QWORD *)(v62 + 512);
    v20 = *(_QWORD *)(v62 + 472);
    v19 = *(_QWORD *)(v62 + 456);
    v21 = *(_QWORD *)(v62 + 448);

    v15(v13, v14);
    type metadata accessor for INSendPaymentIntent();
    v18 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v16 = v11;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v12 = v17;
    *(_QWORD *)(v12 + 8) = v16;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 40) = 0;
    *(_BYTE *)(v12 + 48) = 12;
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v22);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v62 + 312) + 8))();
  }
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 560);
  v1 = *(_QWORD *)(v62 + 536);
  v51 = *(_QWORD *)(v62 + 512);
  *(_QWORD *)(v62 + 392) = v64;

  v2 = Logger.payments.unsafeMutableAddressor();
  v52(v1, v2, v51);
  v3 = v64;
  v54 = swift_allocObject();
  *(_QWORD *)(v54 + 16) = v64;
  v60 = Logger.logObject.getter();
  v61 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v62 + 400) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v53 = *(_DWORD *)(v62 + 664);
  v56 = swift_allocObject();
  *(_BYTE *)(v56 + 16) = 64;
  v57 = swift_allocObject();
  *(_BYTE *)(v57 + 16) = 8;
  v55 = swift_allocObject();
  *(_QWORD *)(v55 + 16) = partial apply for implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
  *(_QWORD *)(v55 + 24) = v54;
  v58 = swift_allocObject();
  *(_QWORD *)(v58 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v58 + 24) = v55;
  _allocateUninitializedArray<A>(_:)();
  v59 = v4;
  swift_retain();
  *v59 = partial apply for closure #1 in OSLogArguments.append(_:);
  v59[1] = v56;
  swift_retain();
  v59[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v59[3] = v57;
  swift_retain();
  v59[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v59[5] = v58;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v60, v61))
  {
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(v62 + 632);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
  v49 = createStorage<A>(capacity:type:)(1);
  v50 = createStorage<A>(capacity:type:)(0);
  v65 = buf;
  v66 = v49;
  v67 = v50;
  serialize(_:at:)(2, &v65);
  serialize(_:at:)(1, &v65);
  v68 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v69 = v56;
  result = closure #1 in osLogInternal(_:log:type:)(&v68, (uint64_t)&v65, (uint64_t)&v66, (uint64_t)&v67);
  if (!v5)
  {
    v68 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v69 = v57;
    closure #1 in osLogInternal(_:log:type:)(&v68, (uint64_t)&v65, (uint64_t)&v66, (uint64_t)&v67);
    v68 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v69 = v58;
    closure #1 in osLogInternal(_:log:type:)(&v68, (uint64_t)&v65, (uint64_t)&v66, (uint64_t)&v67);
    _os_log_impl(&dword_24701B000, v60, v61, "#SendPaymentConfirmIntentStrategy intent contained paymentRecord: %@", buf, v53);
    destroyStorage<A>(_:count:)(v49, 1, v47);
    destroyStorage<A>(_:count:)(v50, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
LABEL_7:
    v36 = *(void (**)(uint64_t, uint64_t))(v62 + 600);
    v46 = *(_QWORD *)(v62 + 552);
    v34 = *(_QWORD *)(v62 + 536);
    v35 = *(_QWORD *)(v62 + 512);
    v44 = *(_QWORD *)(v62 + 472);
    v43 = *(_QWORD *)(v62 + 456);
    v45 = *(_QWORD *)(v62 + 448);
    v42 = *(_QWORD *)(v62 + 440);
    v39 = *(_QWORD *)(v62 + 424);
    v41 = *(uint64_t **)(v62 + 408);

    v36(v34, v35);
    swift_retain();
    outlined init with copy of GlobalsProviding(v39 + 104, v62 + 176);
    swift_release();
    v38 = *(_QWORD *)(v62 + 200);
    v37 = *(_QWORD *)(v62 + 208);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v62 + 176), v38);
    (*(void (**)(uint64_t))(v37 + 16))(v38);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    type metadata accessor for SAAceView();
    _allocateUninitializedArray<A>(_:)();
    swift_retain();
    v40 = BaseStrategy.ttsEnabled.getter();
    swift_release();
    static PaymentsContextProvider.handleSendPayment(paymentRecord:needsSDA:)(v64, v40 & 1, v42);
    v7 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v42, 0, 1);
    *(_QWORD *)(v62 + 256) = 0;
    *(_QWORD *)(v62 + 264) = 0;
    *(_QWORD *)(v62 + 272) = 0;
    *(_QWORD *)(v62 + 280) = 0;
    *(_QWORD *)(v62 + 288) = 0;
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v41[3] = type metadata accessor for AceOutput();
    v41[4] = MEMORY[0x24BE99088];
    __swift_allocate_boxed_opaque_existential_1(v41);
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?(v62 + 256);
    outlined destroy of NLContextUpdate?(v42);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0(v62 + 216);
    __swift_destroy_boxed_opaque_existential_0(v62 + 176);

    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v45);
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v46);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v62 + 312) + 8))();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 312) = *v1;
  *(_QWORD *)(v2 + 648) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v1 = v0[57];
  v2 = v0[56];
  v3 = v0[54];
  v0[39] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v13 = v23[69];
    outlined destroy of TemplatingResult?(v23[54]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 2));
    v23[37] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v23[38] = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    type metadata accessor for INSendPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v12 = String.init(stringInterpolation:)();
    v11 = v9;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v10 = v12;
    *(_QWORD *)(v10 + 8) = v11;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 16;
    swift_willThrow();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v13);
  }
  else
  {
    v22 = v23[69];
    v20 = v23[58];
    v19 = v23[57];
    v21 = v23[56];
    v18 = v23[55];
    v16 = v23[53];
    v17 = (uint64_t *)v23[51];
    (*(void (**)(void))(v19 + 32))();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 2));
    swift_retain();
    outlined init with copy of GlobalsProviding(v16 + 104, (uint64_t)(v23 + 7));
    swift_release();
    v15 = v23[10];
    v14 = v23[11];
    __swift_project_boxed_opaque_existential_1(v23 + 7, v15);
    (*(void (**)(uint64_t))(v14 + 16))(v15);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v18, 1);
    v23[17] = 0;
    v23[18] = 0;
    v23[19] = 0;
    v23[20] = 0;
    v23[21] = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v17[3] = type metadata accessor for AceOutput();
    v17[4] = MEMORY[0x24BE99088];
    __swift_allocate_boxed_opaque_existential_1(v17);
    static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v23 + 17));
    outlined destroy of NLContextUpdate?(v18);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 12));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 7));
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v22);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v23[39] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 552);
  *(_QWORD *)(v0 + 312) = v0;
  swift_release();
  swift_release();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 312) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 552);
  *(_QWORD *)(v0 + 312) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 312) + 8))();
}

uint64_t implicit closure #1 in SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSendPaymentIntent, INSendPaymentIntentResponse>);
  IntentResolutionRecord.intentResponse.getter();
  type metadata accessor for INSendPaymentIntentResponse();
  lazy protocol witness table accessor for type INSendPaymentIntentResponse and conformance NSObject();
  return String.init<A>(describing:)();
}

uint64_t SendPaymentHandleIntentStrategy.makeContinueInAppResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[32] = v2;
  v3[31] = a2;
  v3[30] = a1;
  v3[22] = v3;
  v3[23] = 0;
  v3[24] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[33] = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  v3[34] = v4;
  v3[35] = *(_QWORD *)(v4 - 8);
  v3[36] = swift_task_alloc();
  v5 = type metadata accessor for Logger();
  v3[37] = v5;
  v3[38] = *(_QWORD *)(v5 - 8);
  v3[39] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[40] = swift_task_alloc();
  v3[23] = a2;
  v3[24] = v2;
  return swift_task_switch();
}

uint64_t SendPaymentHandleIntentStrategy.makeContinueInAppResponse(rchRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint8_t *buf;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint32_t v23;
  os_log_type_t v24;
  NSObject *v25;
  uint64_t v26;

  v20 = *(_QWORD *)(v0 + 320);
  v1 = *(_QWORD *)(v0 + 312);
  v21 = *(_QWORD *)(v0 + 304);
  v22 = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 176) = v0;
  v2 = SignpostName.makeSendPaymentContinueInAppResponse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v20);
  v3 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v1, v3, v22);
  v25 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 200) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v23 = *(_DWORD *)(v0 + 352);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v26 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v25, v24))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v16 = createStorage<A>(capacity:type:)(0);
    v17 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v19 + 208) = buf;
    *(_QWORD *)(v19 + 216) = v16;
    *(_QWORD *)(v19 + 224) = v17;
    serialize(_:at:)(0, (_BYTE **)(v19 + 208));
    serialize(_:at:)(0, (_BYTE **)(v19 + 208));
    *(_QWORD *)(v19 + 232) = v26;
    v18 = (_QWORD *)swift_task_alloc();
    v18[2] = v19 + 208;
    v18[3] = v19 + 216;
    v18[4] = v19 + 224;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v25, v24, "#SendPaymentHandleIntentStrategy makeContinueInAppResponse", buf, v23);
    destroyStorage<A>(_:count:)(v16, 0, v14);
    destroyStorage<A>(_:count:)(v17, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v19 + 312);
  v6 = *(_QWORD *)(v19 + 304);
  v8 = *(_QWORD *)(v19 + 296);
  v9 = *(_QWORD *)(v19 + 256);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_retain();
  outlined init with copy of GlobalsProviding(v9 + 144, v19 + 16);
  swift_release();
  v11 = *(_QWORD *)(v19 + 40);
  v12 = *(_QWORD *)(v19 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v19 + 16), v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSendPaymentIntent, INSendPaymentIntentResponse>);
  v10 = IntentResolutionRecord.app.getter();
  *(_QWORD *)(v19 + 328) = v10;
  v13 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 + 40) + **(int **)(v12 + 40));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v19 + 336) = v4;
  *v4 = *(_QWORD *)(v19 + 176);
  v4[1] = RequestPaymentHandleIntentStrategy.makeContinueInAppResponse(rchRecord:);
  return v13(*(_QWORD *)(v19 + 288), 1, v10, v11, v12);
}

uint64_t SendPaymentHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[32] = v2;
  v3[31] = a2;
  v3[30] = a1;
  v3[26] = v3;
  v3[27] = 0;
  v3[28] = 0;
  v3[22] = 0;
  v3[23] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[33] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v3[34] = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  v3[35] = v4;
  v3[36] = *(_QWORD *)(v4 - 8);
  v3[37] = swift_task_alloc();
  v5 = type metadata accessor for Logger();
  v3[38] = v5;
  v3[39] = *(_QWORD *)(v5 - 8);
  v3[40] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[41] = swift_task_alloc();
  v3[27] = a2;
  v3[28] = v2;
  return swift_task_switch();
}

uint64_t SendPaymentHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v14;
  uint8_t *buf;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint32_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;

  v19 = *(_QWORD *)(v0 + 328);
  v20 = *(_QWORD *)(v0 + 320);
  v23 = *(_QWORD *)(v0 + 312);
  v24 = *(_QWORD *)(v0 + 304);
  *(_QWORD *)(v0 + 208) = v0;
  v1 = SignpostName.makeSendPaymentFailureHandlingIntentResponse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v1, v1[1], *((unsigned __int8 *)v1 + 16), v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSendPaymentIntent, INSendPaymentIntentResponse>);
  v21 = (id)IntentResolutionRecord.intentResponse.getter();
  v22 = objc_msgSend(v21, sel_code);

  v25 = static PaymentIntentCATResponseCode.from(_:)((unint64_t)v22);
  v26 = v2;
  *(_QWORD *)(v0 + 336) = v2;
  *(_QWORD *)(v0 + 176) = v25;
  *(_QWORD *)(v0 + 184) = v2;
  v3 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v20, v3, v24);
  swift_bridgeObjectRetain();
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v25;
  *(_QWORD *)(v28 + 24) = v26;
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 232) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v27 = *(_DWORD *)(v0 + 360);
  v30 = swift_allocObject();
  *(_BYTE *)(v30 + 16) = 32;
  v31 = swift_allocObject();
  *(_BYTE *)(v31 + 16) = 8;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(_QWORD *)(v29 + 24) = v28;
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v32 + 24) = v29;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v33 = v4;
  swift_retain();
  *v33 = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[1] = v30;
  swift_retain();
  v33[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[3] = v31;
  swift_retain();
  v33[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[5] = v32;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v34, v35))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v16 = createStorage<A>(capacity:type:)(0);
    v17 = createStorage<A>(capacity:type:)(1);
    v36 = buf;
    v37 = v16;
    v38 = v17;
    serialize(_:at:)(2, &v36);
    serialize(_:at:)(1, &v36);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v31;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    _os_log_impl(&dword_24701B000, v34, v35, "#SendPaymentHandleIntentStrategy makeFailureHandlingIntentResponse with code %s", buf, v27);
    destroyStorage<A>(_:count:)(v16, 0, v14);
    destroyStorage<A>(_:count:)(v17, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v8 = v18[40];
  v7 = v18[39];
  v9 = v18[38];
  v10 = v18[32];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_retain();
  outlined init with copy of GlobalsProviding(v10 + 144, (uint64_t)(v18 + 2));
  swift_release();
  v11 = v18[5];
  v12 = v18[6];
  __swift_project_boxed_opaque_existential_1(v18 + 2, v11);
  v13 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 + 48) + **(int **)(v12 + 48));
  v5 = (_QWORD *)swift_task_alloc();
  v18[43] = v5;
  *v5 = v18[26];
  v5[1] = SendPaymentHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:);
  return v13(v18[34], v18[31], v11, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 208) = *v1;
  *(_QWORD *)(v2 + 352) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v1 = v0[36];
  v2 = v0[35];
  v3 = v0[34];
  v0[26] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v13 = v23[41];
    outlined destroy of TemplatingResult?(v23[34]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 2));
    v23[24] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v23[25] = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    type metadata accessor for INSendPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v12 = String.init(stringInterpolation:)();
    v11 = v9;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v10 = v12;
    *(_QWORD *)(v10 + 8) = v11;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 16;
    swift_willThrow();
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v13);
  }
  else
  {
    v20 = v23[41];
    v21 = v23[37];
    v18 = v23[36];
    v19 = v23[35];
    v22 = v23[33];
    v16 = v23[32];
    v17 = (uint64_t *)v23[30];
    (*(void (**)(void))(v18 + 32))();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 2));
    swift_retain();
    outlined init with copy of GlobalsProviding(v16 + 104, (uint64_t)(v23 + 7));
    swift_release();
    v15 = v23[10];
    v14 = v23[11];
    __swift_project_boxed_opaque_existential_1(v23 + 7, v15);
    (*(void (**)(uint64_t))(v14 + 16))(v15);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v22, 1);
    v23[17] = 0;
    v23[18] = 0;
    v23[19] = 0;
    v23[20] = 0;
    v23[21] = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v17[3] = type metadata accessor for AceOutput();
    v17[4] = MEMORY[0x24BE99088];
    __swift_allocate_boxed_opaque_existential_1(v17);
    static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v23 + 17));
    outlined destroy of NLContextUpdate?(v22);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 12));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 7));
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v19);
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v20);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v23[26] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 328);
  *(_QWORD *)(v0 + 208) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 208) + 8))();
}

uint64_t SendPaymentHandleIntentStrategy.makePreHandleIntentOutput(rchRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[26] = v2;
  v3[25] = a1;
  v3[17] = v3;
  v3[18] = 0;
  v3[19] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[27] = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  v3[28] = v4;
  v3[29] = *(_QWORD *)(v4 - 8);
  v3[30] = swift_task_alloc();
  v5 = type metadata accessor for Logger();
  v3[31] = v5;
  v3[32] = *(_QWORD *)(v5 - 8);
  v3[33] = swift_task_alloc();
  v3[18] = a2;
  v3[19] = v2;
  return swift_task_switch();
}

uint64_t SendPaymentHandleIntentStrategy.makePreHandleIntentOutput(rchRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint32_t v17;
  os_log_type_t v18;
  NSObject *v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 264);
  v15 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 136) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v2, v16);
  v19 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 160) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v17 = *(_DWORD *)(v0 + 296);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v20 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v19, v18))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v11 = createStorage<A>(capacity:type:)(0);
    v12 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v14 + 168) = buf;
    *(_QWORD *)(v14 + 176) = v11;
    *(_QWORD *)(v14 + 184) = v12;
    serialize(_:at:)(0, (_BYTE **)(v14 + 168));
    serialize(_:at:)(0, (_BYTE **)(v14 + 168));
    *(_QWORD *)(v14 + 192) = v20;
    v13 = (_QWORD *)swift_task_alloc();
    v13[2] = v14 + 168;
    v13[3] = v14 + 176;
    v13[4] = v14 + 184;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v19, v18, "#SendPaymentHandleIntentStrategy makePreHandleIntentOutput", buf, v17);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v14 + 264);
  v5 = *(_QWORD *)(v14 + 256);
  v7 = *(_QWORD *)(v14 + 248);
  v8 = *(_QWORD *)(v14 + 208);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  swift_retain();
  *(_QWORD *)(v14 + 272) = *(_QWORD *)(v8 + 16);
  swift_retain();
  swift_release();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v14 + 280) = v3;
  *v3 = *(_QWORD *)(v14 + 136);
  v3[1] = SendPaymentHandleIntentStrategy.makePreHandleIntentOutput(rchRecord:);
  return SendPaymentCATs.preHandleIntentResponse()(*(_QWORD *)(v14 + 240));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 136) = *v1;
  *(_QWORD *)(v2 + 288) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = v0[30];
  v7 = v0[29];
  v8 = v0[28];
  v10 = v0[27];
  v5 = v0[26];
  v6 = (uint64_t *)v0[25];
  v0[17] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, (uint64_t)(v0 + 2));
  swift_release();
  v4 = v0[5];
  v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v10, 1);
  v0[12] = 0;
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  v0[16] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v6[3] = type metadata accessor for AceOutput();
  v6[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v6);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 12));
  outlined destroy of NLContextUpdate?(v10);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[17] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 136) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 136) + 8))();
}

uint64_t sub_24713A6A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSendPaymentIntent, INSendPaymentIntentResponse>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSendPaymentIntent, INSendPaymentIntentResponse>);
  return implicit closure #1 in SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)();
}

uint64_t sub_24713A74C()
{
  return swift_deallocObject();
}

uint64_t sub_24713A774()
{
  return swift_deallocObject();
}

uint64_t sub_24713A79C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24713A7D8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24713A814()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_24713A850()
{
  return swift_deallocObject();
}

uint64_t sub_24713A878()
{
  return swift_deallocObject();
}

uint64_t sub_24713A8A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24713A8DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24713A918()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24713A954()
{
  return swift_deallocObject();
}

uint64_t sub_24713A97C()
{
  return swift_deallocObject();
}

uint64_t sub_24713A9A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24713A9E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for SendPaymentHandleIntentStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SendPaymentHandleIntentStrategy;
  if (!type metadata singleton initialization cache for SendPaymentHandleIntentStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

unint64_t lazy protocol witness table accessor for type INSendPaymentIntentResponse and conformance NSObject()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type INSendPaymentIntentResponse and conformance NSObject;
  if (!lazy protocol witness table cache variable for type INSendPaymentIntentResponse and conformance NSObject)
  {
    v0 = type metadata accessor for INSendPaymentIntentResponse();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BDD0240], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type INSendPaymentIntentResponse and conformance NSObject);
    return v1;
  }
  return v3;
}

uint64_t SiriKitPaymentsIntent.simpleClassName.getter()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v3;

  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v0);
  swift_bridgeObjectRelease();
  swift_getObjectType();
  DefaultStringInterpolation.appendInterpolation(_:)();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("IN", 2uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  lazy protocol witness table accessor for type String and conformance String();
  default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v3 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  return v3;
}

uint64_t SiriKitPaymentsIntent.clone()()
{
  void *v0;
  id v1;
  uint64_t v3;

  v1 = v0;
  objc_msgSend(v0, sel_copy);

  _bridgeAnyObjectToAny(_:)();
  swift_dynamicCast();
  swift_unknownObjectRelease();
  return v3;
}

_OWORD *SiriKitPaymentsIntent.value(forSlot:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  _BYTE v13[32];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;

  v19 = a2;
  v18 = a1;
  v17 = v3;
  v4 = v3;
  v10 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  v5 = (*(uint64_t (**)(uint64_t))(v9 + 32))(v10);
  v11 = (id)MEMORY[0x24957220C](v5);
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v3, sel_valueForKey_, v11);

  if (v12)
  {
    _bridgeAnyObjectToAny(_:)();
    outlined init with take of Any((uint64_t)v13, (uint64_t)&v14);
    swift_unknownObjectRelease();
  }
  else
  {
    v14 = 0uLL;
    v15 = 0;
    v16 = 0;
  }
  return outlined init with take of Any?(&v14, a3);
}

uint64_t INSearchForAccountsIntentResponse.paymentRecord.getter()
{
  return 0;
}

uint64_t protocol witness for SiriKitPaymentsIntentResponse.paymentRecord.getter in conformance INSearchForAccountsIntentResponse()
{
  return INSearchForAccountsIntentResponse.paymentRecord.getter();
}

Swift::Void __swiftcall PersonProvidingIntent.updatePerson(with:parameterName:)(Swift::OpaquePointer with, Swift::String parameterName)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  Swift::String v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  Swift::String v53;
  char *v54;
  uint64_t v55;
  id v56;
  _QWORD *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  id v76;
  _QWORD *v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE **v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  uint32_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  NSObject *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint8_t *v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE **v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint32_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  NSObject *v146;
  int v147;
  void *v148;
  id v149;
  Class v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint8_t *v156;
  uint64_t v157;
  uint64_t v158;
  _BYTE **v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t *v166;
  uint32_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  NSObject *v179;
  int v180;
  void *v181;
  id v182;
  Class isa;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint8_t *v190;
  uint64_t v191;
  uint64_t v192;
  _BYTE **v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t *v200;
  uint32_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  NSObject *v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *object;
  uint64_t countAndFlagsBits;
  void *rawValue;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  char *v224;
  unint64_t v225;
  char *v226;
  unint64_t v227;
  char *v228;
  unint64_t v229;
  char *v230;
  id v231;
  uint64_t (*v232)(uint64_t, uint64_t, uint64_t);
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _BYTE *v236;
  uint64_t v237;
  uint32_t v238;
  uint64_t (*v239)(uint64_t, uint64_t, uint64_t);
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _BYTE *v243;
  uint64_t v244;
  uint32_t v245;
  uint64_t (*v246)(uint64_t, uint64_t, uint64_t);
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _BYTE *v250;
  uint64_t (*v251)(uint64_t, uint64_t, uint64_t);
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _BYTE *v255;
  uint64_t v256;
  uint32_t v257;
  uint64_t v258;
  uint32_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;

  rawValue = with._rawValue;
  countAndFlagsBits = parameterName._countAndFlagsBits;
  object = parameterName._object;
  v215 = v2;
  v216 = v3;
  v263 = 0;
  v261 = 0;
  v262 = 0;
  v260 = 0;
  v217 = 0;
  v264 = v2;
  v221 = type metadata accessor for Logger();
  v222 = *(_QWORD *)(v221 - 8);
  v223 = (*(_QWORD *)(v222 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](rawValue);
  v224 = (char *)&v92 - v223;
  v225 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v226 = (char *)&v92 - v225;
  v227 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v228 = (char *)&v92 - v227;
  v229 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v230 = (char *)&v92 - v229;
  v263 = v11;
  v261 = v12;
  v262 = v13;
  v260 = v4;
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v14 = v230;
    v15 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v222 + 16))(v14, v15, v221);
    swift_bridgeObjectRetain();
    v204 = 7;
    v197 = swift_allocObject();
    *(_QWORD *)(v197 + 16) = rawValue;
    swift_retain();
    v203 = 32;
    v16 = swift_allocObject();
    v17 = v197;
    v205 = v16;
    *(_QWORD *)(v16 + 16) = partial apply for implicit closure #1 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
    *(_QWORD *)(v16 + 24) = v17;
    swift_release();
    v213 = Logger.logObject.getter();
    v214 = static os_log_type_t.debug.getter();
    v200 = &v237;
    v237 = 12;
    v198 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v199 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v201 = v238;
    v202 = 17;
    v207 = swift_allocObject();
    *(_BYTE *)(v207 + 16) = 32;
    v208 = swift_allocObject();
    *(_BYTE *)(v208 + 16) = 8;
    v18 = swift_allocObject();
    v19 = v205;
    v206 = v18;
    *(_QWORD *)(v18 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_2;
    *(_QWORD *)(v18 + 24) = v19;
    v20 = swift_allocObject();
    v21 = v206;
    v210 = v20;
    *(_QWORD *)(v20 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v20 + 24) = v21;
    v212 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v209 = _allocateUninitializedArray<A>(_:)();
    v211 = v22;
    swift_retain();
    v23 = v207;
    v24 = v211;
    *v211 = partial apply for closure #1 in OSLogArguments.append(_:);
    v24[1] = v23;
    swift_retain();
    v25 = v208;
    v26 = v211;
    v211[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v26[3] = v25;
    swift_retain();
    v27 = v210;
    v28 = v211;
    v211[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v28[5] = v27;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v213, (os_log_type_t)v214))
    {
      v29 = v217;
      v190 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v189 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v191 = createStorage<A>(capacity:type:)(0);
      v192 = createStorage<A>(capacity:type:)(1);
      v193 = &v236;
      v236 = v190;
      v194 = &v235;
      v235 = v191;
      v195 = &v234;
      v234 = v192;
      serialize(_:at:)(2, &v236);
      serialize(_:at:)(1, v193);
      v232 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v233 = v207;
      closure #1 in osLogInternal(_:log:type:)(&v232, (uint64_t)v193, (uint64_t)v194, (uint64_t)v195);
      v196 = v29;
      if (v29)
      {
        __break(1u);
      }
      else
      {
        v232 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v233 = v208;
        closure #1 in osLogInternal(_:log:type:)(&v232, (uint64_t)&v236, (uint64_t)&v235, (uint64_t)&v234);
        v187 = 0;
        v31 = v187;
        v232 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v233 = v210;
        closure #1 in osLogInternal(_:log:type:)(&v232, (uint64_t)&v236, (uint64_t)&v235, (uint64_t)&v234);
        v186 = v31;
        _os_log_impl(&dword_24701B000, v213, (os_log_type_t)v214, "#PersonProvidingIntent Updating INSendPaymentIntent with participants: %s", v190, v201);
        destroyStorage<A>(_:count:)(v191, 0, v189);
        destroyStorage<A>(_:count:)(v192, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v190, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        v188 = v186;
      }
    }
    else
    {
      v30 = v217;
      swift_release();
      swift_release();
      swift_release();
      v188 = v30;
    }
    v184 = v188;

    (*(void (**)(char *, uint64_t))(v222 + 8))(v230, v221);
    v32 = v231;
    swift_bridgeObjectRetain();
    type metadata accessor for INPerson();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v33 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payee", 5uLL, 1);
    v181 = v33._object;
    v182 = (id)MEMORY[0x24957220C](v33._countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v231, sel_setValue_forKeyPath_, isa, v182);

    swift_unknownObjectRelease();
    v185 = v184;
  }
  else
  {
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
    {
      v34 = v228;
      v35 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v222 + 16))(v34, v35, v221);
      swift_bridgeObjectRetain();
      v170 = 7;
      v163 = swift_allocObject();
      *(_QWORD *)(v163 + 16) = rawValue;
      swift_retain();
      v169 = 32;
      v36 = swift_allocObject();
      v37 = v163;
      v171 = v36;
      *(_QWORD *)(v36 + 16) = partial apply for implicit closure #1 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
      *(_QWORD *)(v36 + 24) = v37;
      swift_release();
      v179 = Logger.logObject.getter();
      v180 = static os_log_type_t.debug.getter();
      v166 = &v244;
      v244 = 12;
      v164 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v165 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v167 = v245;
      v168 = 17;
      v173 = swift_allocObject();
      *(_BYTE *)(v173 + 16) = 32;
      v174 = swift_allocObject();
      *(_BYTE *)(v174 + 16) = 8;
      v38 = swift_allocObject();
      v39 = v171;
      v172 = v38;
      *(_QWORD *)(v38 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_2;
      *(_QWORD *)(v38 + 24) = v39;
      v40 = swift_allocObject();
      v41 = v172;
      v176 = v40;
      *(_QWORD *)(v40 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v40 + 24) = v41;
      v178 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v175 = _allocateUninitializedArray<A>(_:)();
      v177 = v42;
      swift_retain();
      v43 = v173;
      v44 = v177;
      *v177 = partial apply for closure #1 in OSLogArguments.append(_:);
      v44[1] = v43;
      swift_retain();
      v45 = v174;
      v46 = v177;
      v177[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v46[3] = v45;
      swift_retain();
      v47 = v176;
      v48 = v177;
      v177[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v48[5] = v47;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v179, (os_log_type_t)v180))
      {
        v49 = v217;
        v156 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v155 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v157 = createStorage<A>(capacity:type:)(0);
        v158 = createStorage<A>(capacity:type:)(1);
        v159 = &v243;
        v243 = v156;
        v160 = &v242;
        v242 = v157;
        v161 = &v241;
        v241 = v158;
        serialize(_:at:)(2, &v243);
        serialize(_:at:)(1, v159);
        v239 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v240 = v173;
        closure #1 in osLogInternal(_:log:type:)(&v239, (uint64_t)v159, (uint64_t)v160, (uint64_t)v161);
        v162 = v49;
        if (v49)
        {
          __break(1u);
        }
        else
        {
          v239 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v240 = v174;
          closure #1 in osLogInternal(_:log:type:)(&v239, (uint64_t)&v243, (uint64_t)&v242, (uint64_t)&v241);
          v153 = 0;
          v51 = v153;
          v239 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v240 = v176;
          closure #1 in osLogInternal(_:log:type:)(&v239, (uint64_t)&v243, (uint64_t)&v242, (uint64_t)&v241);
          v152 = v51;
          _os_log_impl(&dword_24701B000, v179, (os_log_type_t)v180, "#PersonProvidingIntent Updating INRequestPaymentIntent with participants: %s", v156, v167);
          destroyStorage<A>(_:count:)(v157, 0, v155);
          destroyStorage<A>(_:count:)(v158, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v156, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          v154 = v152;
        }
      }
      else
      {
        v50 = v217;
        swift_release();
        swift_release();
        swift_release();
        v154 = v50;
      }
      v151 = v154;

      (*(void (**)(char *, uint64_t))(v222 + 8))(v228, v221);
      v52 = v231;
      swift_bridgeObjectRetain();
      type metadata accessor for INPerson();
      v150 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v53 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payer", 5uLL, 1);
      v148 = v53._object;
      v149 = (id)MEMORY[0x24957220C](v53._countAndFlagsBits);
      swift_bridgeObjectRelease();
      objc_msgSend(v231, sel_setValue_forKeyPath_, v150, v149);

      swift_unknownObjectRelease();
      v185 = v151;
    }
    else
    {
      v54 = v226;
      v55 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v222 + 16))(v54, v55, v221);
      v56 = v231;
      v137 = 7;
      v57 = (_QWORD *)swift_allocObject();
      v58 = v216;
      v59 = v231;
      v138 = v57;
      v57[2] = v215;
      v57[3] = v58;
      v57[4] = v59;
      v146 = Logger.logObject.getter();
      v147 = static os_log_type_t.error.getter();
      v133 = &v258;
      v258 = 12;
      v131 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v132 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v134 = v259;
      v135 = 17;
      v140 = swift_allocObject();
      *(_BYTE *)(v140 + 16) = 32;
      v141 = swift_allocObject();
      *(_BYTE *)(v141 + 16) = 8;
      v136 = 32;
      v60 = swift_allocObject();
      v61 = v138;
      v139 = v60;
      *(_QWORD *)(v60 + 16) = partial apply for implicit closure #3 in PersonProvidingIntent.updatePerson(with:parameterName:);
      *(_QWORD *)(v60 + 24) = v61;
      v62 = swift_allocObject();
      v63 = v139;
      v143 = v62;
      *(_QWORD *)(v62 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v62 + 24) = v63;
      v145 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v142 = _allocateUninitializedArray<A>(_:)();
      v144 = v64;
      swift_retain();
      v65 = v140;
      v66 = v144;
      *v144 = partial apply for closure #1 in OSLogArguments.append(_:);
      v66[1] = v65;
      swift_retain();
      v67 = v141;
      v68 = v144;
      v144[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v68[3] = v67;
      swift_retain();
      v69 = v143;
      v70 = v144;
      v144[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v70[5] = v69;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v146, (os_log_type_t)v147))
      {
        v71 = v217;
        v124 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v123 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v125 = createStorage<A>(capacity:type:)(0);
        v126 = createStorage<A>(capacity:type:)(1);
        v127 = &v250;
        v250 = v124;
        v128 = &v249;
        v249 = v125;
        v129 = &v248;
        v248 = v126;
        serialize(_:at:)(2, &v250);
        serialize(_:at:)(1, v127);
        v246 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v247 = v140;
        closure #1 in osLogInternal(_:log:type:)(&v246, (uint64_t)v127, (uint64_t)v128, (uint64_t)v129);
        v130 = v71;
        if (v71)
        {
          __break(1u);
        }
        else
        {
          v246 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v247 = v141;
          closure #1 in osLogInternal(_:log:type:)(&v246, (uint64_t)&v250, (uint64_t)&v249, (uint64_t)&v248);
          v121 = 0;
          v73 = v121;
          v246 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v247 = v143;
          closure #1 in osLogInternal(_:log:type:)(&v246, (uint64_t)&v250, (uint64_t)&v249, (uint64_t)&v248);
          v120 = v73;
          _os_log_impl(&dword_24701B000, v146, (os_log_type_t)v147, "#PersonProvidingIntent Found unsupported intent type: %s, logging error but not throwing.", v124, v134);
          destroyStorage<A>(_:count:)(v125, 0, v123);
          destroyStorage<A>(_:count:)(v126, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v124, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          v122 = v120;
        }
      }
      else
      {
        v72 = v217;
        swift_release();
        swift_release();
        swift_release();
        v122 = v72;
      }
      v119 = v122;

      (*(void (**)(char *, uint64_t))(v222 + 8))(v226, v221);
      v185 = v119;
    }
  }
  v74 = v224;
  v101 = v185;
  v75 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v222 + 16))(v74, v75, v221);
  v76 = v231;
  v108 = 7;
  v77 = (_QWORD *)swift_allocObject();
  v78 = v216;
  v79 = v231;
  v109 = v77;
  v77[2] = v215;
  v77[3] = v78;
  v77[4] = v79;
  v117 = Logger.logObject.getter();
  v118 = static os_log_type_t.debug.getter();
  v104 = &v256;
  v256 = 12;
  v102 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v103 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v105 = v257;
  v106 = 17;
  v111 = swift_allocObject();
  *(_BYTE *)(v111 + 16) = 32;
  v112 = swift_allocObject();
  *(_BYTE *)(v112 + 16) = 8;
  v107 = 32;
  v80 = swift_allocObject();
  v81 = v109;
  v110 = v80;
  *(_QWORD *)(v80 + 16) = partial apply for implicit closure #4 in PersonProvidingIntent.updatePerson(with:parameterName:);
  *(_QWORD *)(v80 + 24) = v81;
  v82 = swift_allocObject();
  v83 = v110;
  v114 = v82;
  *(_QWORD *)(v82 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v82 + 24) = v83;
  v116 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v113 = _allocateUninitializedArray<A>(_:)();
  v115 = v84;
  swift_retain();
  v85 = v111;
  v86 = v115;
  *v115 = partial apply for closure #1 in OSLogArguments.append(_:);
  v86[1] = v85;
  swift_retain();
  v87 = v112;
  v88 = v115;
  v115[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v88[3] = v87;
  swift_retain();
  v89 = v114;
  v90 = v115;
  v115[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v90[5] = v89;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v117, (os_log_type_t)v118))
  {
    v91 = v101;
    v94 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v93 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v95 = createStorage<A>(capacity:type:)(0);
    v96 = createStorage<A>(capacity:type:)(1);
    v97 = &v255;
    v255 = v94;
    v98 = &v254;
    v254 = v95;
    v99 = &v253;
    v253 = v96;
    serialize(_:at:)(2, &v255);
    serialize(_:at:)(1, v97);
    v251 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v252 = v111;
    closure #1 in osLogInternal(_:log:type:)(&v251, (uint64_t)v97, (uint64_t)v98, (uint64_t)v99);
    v100 = v91;
    if (v91)
    {
      __break(1u);
    }
    else
    {
      v251 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v252 = v112;
      closure #1 in osLogInternal(_:log:type:)(&v251, (uint64_t)&v255, (uint64_t)&v254, (uint64_t)&v253);
      v92 = 0;
      v251 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v252 = v114;
      closure #1 in osLogInternal(_:log:type:)(&v251, (uint64_t)&v255, (uint64_t)&v254, (uint64_t)&v253);
      _os_log_impl(&dword_24701B000, v117, (os_log_type_t)v118, "#PersonProvidingIntent Updated intent: %s", v94, v105);
      destroyStorage<A>(_:count:)(v95, 0, v93);
      destroyStorage<A>(_:count:)(v96, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v94, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v222 + 8))(v224, v221);
}

uint64_t implicit closure #3 in PersonProvidingIntent.updatePerson(with:parameterName:)(void *a1)
{
  id v1;
  id v4;
  uint64_t v5;

  v1 = a1;
  v4 = objc_msgSend(a1, sel_typeName);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return 0;
}

uint64_t sub_24713C4E4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in PersonProvidingIntent.updatePerson(with:parameterName:)()
{
  uint64_t v0;

  return implicit closure #3 in PersonProvidingIntent.updatePerson(with:parameterName:)(*(void **)(v0 + 32));
}

uint64_t INSendPaymentIntent.catFamily.getter()
{
  uint64_t v0;
  _QWORD v2[3];
  uint64_t v3;

  v3 = 0;
  v2[2] = 0;
  v2[0] = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v2[1] = (char *)v2 - v2[0];
  v3 = v0;
  type metadata accessor for SendPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  return CATWrapper.__allocating_init(options:globals:)();
}

id INSendPaymentIntent.person.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_payee);
}

uint64_t INSendPaymentIntent.personKeyPath.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payee", 5uLL, 1)._countAndFlagsBits;
}

void INSendPaymentIntent.personSlot.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for SendPaymentSlots;
  *(_QWORD *)(a1 + 32) = &protocol witness table for SendPaymentSlots;
  *(_BYTE *)a1 = 0;
}

id protocol witness for PersonProvidingIntent.person.getter in conformance INSendPaymentIntent()
{
  return INSendPaymentIntent.person.getter();
}

uint64_t protocol witness for PersonProvidingIntent.personKeyPath.getter in conformance INSendPaymentIntent()
{
  return INSendPaymentIntent.personKeyPath.getter();
}

void protocol witness for PersonProvidingIntent.personSlot.getter in conformance INSendPaymentIntent(uint64_t a1@<X8>)
{
  INSendPaymentIntent.personSlot.getter(a1);
}

uint64_t protocol witness for PersonProvidingIntent.catFamily.getter in conformance INSendPaymentIntent()
{
  return INSendPaymentIntent.catFamily.getter();
}

uint64_t protocol witness for ReferenceResolving.updateIntent(with:contactResolver:) in conformance INSendPaymentIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ReferenceResolving.updateIntent(with:contactResolver:)(a1, a2, a3, a4, a5);
}

uint64_t ReferenceResolving.updateIntent(with:contactResolver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  id v17;
  Class v18;
  uint64_t v19;
  Class isa;
  Class v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  id v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;

  v40 = a1;
  v41 = a2;
  v42 = a3;
  v35 = a4;
  v36 = a5;
  v62 = 0;
  v60 = 0;
  v61 = 0;
  v59 = 0;
  v58 = 0;
  v55 = 0;
  v63 = a4;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<[ContactQuery], [INPerson]>);
  v43 = *(_QWORD *)(v45 - 8);
  v37 = (*(_QWORD *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v45);
  v44 = (char *)&v16 - v37;
  v49 = type metadata accessor for ContactQuery();
  v47 = *(_QWORD *)(v49 - 8);
  v39 = (*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v40);
  v48 = (char *)&v16 - v39;
  v62 = (char *)&v16 - v39;
  v60 = v5;
  v61 = v6;
  v59 = v7;
  v58 = v8;
  ContactQuery.init()();
  swift_bridgeObjectRetain();
  ContactQuery.id.setter();
  static Transformer<>.transformer(contactResolver:)(v42);
  v51 = (void (*)(uint64_t *__return_ptr, uint64_t *))Transformer.transform.getter();
  v46 = v9;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
  v50 = _allocateUninitializedArray<A>(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v47 + 16))(v10, v48, v49);
  v11 = v50;
  _finalizeUninitializedArray<A>(_:)();
  v52 = v11;
  v57 = v11;
  v51(&v56, &v57);
  v53 = 0;
  v32 = v56;
  swift_release();
  swift_bridgeObjectRelease();
  v30 = 0;
  v31 = type metadata accessor for INPerson();
  Array.subscript.getter();
  v33 = v54;
  swift_bridgeObjectRelease();
  v34 = objc_msgSend(v33, sel_siriMatches);
  if (v34)
  {
    v29 = v34;
    v25 = v34;
    v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v27 = v26;
  }
  else
  {
    v27 = 0;
  }
  v24 = v27;

  v28 = v24;
  v23 = v24;
  v55 = v24;
  v12 = v38;
  swift_bridgeObjectRetain();
  if (v23)
  {
    v22 = v23;
    v19 = v23;
    type metadata accessor for INPerson();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v21 = isa;
  }
  else
  {
    v21 = 0;
  }
  v18 = v21;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 + 8) + 24))(v35);
  v16 = v14;
  v17 = (id)MEMORY[0x24957220C](v13);
  swift_bridgeObjectRelease();
  objc_msgSend(v38, sel_setValue_forKeyPath_, v18, v17);

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v48, v49);
}

uint64_t INRequestPaymentIntent.catFamily.getter()
{
  uint64_t v0;
  _QWORD v2[3];
  uint64_t v3;

  v3 = 0;
  v2[2] = 0;
  v2[0] = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v2[1] = (char *)v2 - v2[0];
  v3 = v0;
  type metadata accessor for RequestPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  return CATWrapper.__allocating_init(options:globals:)();
}

id INRequestPaymentIntent.person.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_payer);
}

uint64_t INRequestPaymentIntent.personKeyPath.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payer", 5uLL, 1)._countAndFlagsBits;
}

void INRequestPaymentIntent.personSlot.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for RequestPaymentSlots;
  *(_QWORD *)(a1 + 32) = &protocol witness table for RequestPaymentSlots;
  *(_BYTE *)a1 = 0;
}

id protocol witness for PersonProvidingIntent.person.getter in conformance INRequestPaymentIntent()
{
  return INRequestPaymentIntent.person.getter();
}

uint64_t protocol witness for PersonProvidingIntent.personKeyPath.getter in conformance INRequestPaymentIntent()
{
  return INRequestPaymentIntent.personKeyPath.getter();
}

void protocol witness for PersonProvidingIntent.personSlot.getter in conformance INRequestPaymentIntent(uint64_t a1@<X8>)
{
  INRequestPaymentIntent.personSlot.getter(a1);
}

uint64_t protocol witness for PersonProvidingIntent.catFamily.getter in conformance INRequestPaymentIntent()
{
  return INRequestPaymentIntent.catFamily.getter();
}

uint64_t ReferenceResolving.runReferenceResolution(_:_:hasReferenceNode:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  __int128 *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  _BYTE **v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint32_t v37;
  int v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint32_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;

  v57 = a1;
  v56 = a2;
  v55 = a3;
  v46 = a4;
  v47 = a5;
  v76 = 0;
  v75 = 0;
  v74 = 0;
  v73 = 0;
  v72 = 0;
  v48 = 0;
  v77 = a4;
  v53 = 0;
  v49 = type metadata accessor for Logger();
  v50 = *(_QWORD *)(v49 - 8);
  v51 = (*(_QWORD *)(v50 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v49);
  v52 = (char *)&v20 - v51;
  v54 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v53);
  v63 = (uint64_t)&v20 - v54;
  v65 = type metadata accessor for RREntity();
  v62 = *(_QWORD *)(v65 - 8);
  v58 = (*(_QWORD *)(v62 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = (_QWORD *)MEMORY[0x24BDAC7A8](v57);
  v59 = (uint64_t)&v20 - v58;
  v76 = (char *)&v20 - v58;
  v75 = v6;
  v74 = v7;
  v64 = 1;
  v73 = v8 & 1;
  v72 = v5;
  v61 = v6[3];
  v60 = v6[4];
  __swift_project_boxed_opaque_existential_1(v6, v61);
  (*(void (**)(uint64_t))(v60 + 16))(v61);
  if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v62 + 48))(v63, v64, v65) == 1)
    return outlined destroy of RREntity?(v63);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32))(v59, v63, v65);
  if ((static RRUtil.shouldUseRREntity(_:rrEntity:)(v55 & 1, v59) & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v59, v65);
  v41 = RREntity.appBundleId.getter();
  v44 = v10;
  v11 = AppUtil.usoContactsBundleId.unsafeMutableAddressor();
  v42 = *(_QWORD *)v11;
  v43 = *((_QWORD *)v11 + 1);
  swift_bridgeObjectRetain();
  v45 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v45 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v59, v65);
  v12 = v52;
  v13 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v12, v13, v49);
  v39 = Logger.logObject.getter();
  v38 = static os_log_type_t.debug.getter();
  v36 = &v70;
  v70 = 2;
  v34 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v35 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v37 = v71;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v40 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v39, (os_log_type_t)v38))
  {
    v14 = v48;
    v24 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v23 = 0;
    v25 = createStorage<A>(capacity:type:)(0);
    v26 = createStorage<A>(capacity:type:)(v23);
    v30 = &v69;
    v69 = v24;
    v31 = &v68;
    v68 = v25;
    v28 = &v67;
    v67 = v26;
    v27 = 0;
    serialize(_:at:)(0, &v69);
    serialize(_:at:)(v27, v30);
    v66 = v40;
    v29 = &v20;
    MEMORY[0x24BDAC7A8](&v20);
    v15 = v31;
    v16 = &v20 - 6;
    v32 = &v20 - 6;
    v16[2] = (uint64_t)v30;
    v16[3] = (uint64_t)v15;
    v16[4] = v17;
    v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v14)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, v39, (os_log_type_t)v38, "#ReferenceResolution Found common_Person entity, resolving to intent", v24, v37);
      v21 = 0;
      destroyStorage<A>(_:count:)(v25, 0, v22);
      destroyStorage<A>(_:count:)(v26, v21, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v24, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v49);
  v18 = RREntity.id.getter();
  v20 = v19;
  (*(void (**)(uint64_t))(v47 + 16))(v18);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v59, v65);
}

uint64_t static RRUtil.shouldUseRREntity(_:rrEntity:)(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  char v15;

  v13 = a1;
  v8 = a2;
  v15 = 0;
  v14 = 0;
  v9 = type metadata accessor for RREntity();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v5 - v11;
  v15 = v13 & 1;
  v14 = v2;
  (*(void (**)(void))(v3 + 16))();
  if ((v13 & 1) != 0)
    v7 = 1;
  else
    v7 = RREntity.isConversational.getter();
  v6 = v7;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v6 & 1;
}

uint64_t sub_24713D4BC()
{
  return swift_deallocObject();
}

uint64_t sub_24713D4E4()
{
  return swift_deallocObject();
}

uint64_t sub_24713D50C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24713D548()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24713D584()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in PersonProvidingIntent.updatePerson(with:parameterName:)()
{
  uint64_t v0;

  return implicit closure #7 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(*(void **)(v0 + 32), *(_QWORD *)(v0 + 16));
}

uint64_t sub_24713D5E4()
{
  return swift_deallocObject();
}

uint64_t sub_24713D60C()
{
  return swift_deallocObject();
}

uint64_t sub_24713D634()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24713D670()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24713D6AC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24713D6E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24713D724()
{
  return swift_deallocObject();
}

uint64_t sub_24713D74C()
{
  return swift_deallocObject();
}

uint64_t sub_24713D774()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24713D7B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24713D7EC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24713D828()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24713D864()
{
  return swift_deallocObject();
}

uint64_t sub_24713D88C()
{
  return swift_deallocObject();
}

uint64_t sub_24713D8B4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24713D8F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined destroy of RREntity?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for RREntity();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

ValueMetadata *type metadata accessor for RRUtil()
{
  return &type metadata for RRUtil;
}

uint64_t static RREntity.makeEntities(for:)(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  char *v20;

  v17 = a1;
  v20 = 0;
  v19 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  v11 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v16 = (uint64_t)&v7 - v11;
  v12 = type metadata accessor for RREntity();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (void *)MEMORY[0x24BDAC7A8](v17);
  v15 = (char *)&v7 - v14;
  v20 = (char *)&v7 - v14;
  v19 = v2;
  v3 = v2;
  RREntity.init(from:)(v17, v16);
  v18 = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v16, 1, v12) == 1)
  {
    outlined destroy of RREntity?(v16);
    return _allocateUninitializedArray<A>(_:)();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v15, v16, v12);
    v8 = _allocateUninitializedArray<A>(_:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v4, v15, v12);
    v5 = v8;
    _finalizeUninitializedArray<A>(_:)();
    v9 = v5;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return v9;
  }
}

{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  char *v20;

  v17 = a1;
  v20 = 0;
  v19 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  v11 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v16 = (uint64_t)&v7 - v11;
  v12 = type metadata accessor for RREntity();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (void *)MEMORY[0x24BDAC7A8](v17);
  v15 = (char *)&v7 - v14;
  v20 = (char *)&v7 - v14;
  v19 = v2;
  v3 = v2;
  RREntity.init(from:)(v17, v16);
  v18 = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v16, 1, v12) == 1)
  {
    outlined destroy of RREntity?(v16);
    return _allocateUninitializedArray<A>(_:)();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v15, v16, v12);
    v8 = _allocateUninitializedArray<A>(_:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v4, v15, v12);
    v5 = v8;
    _finalizeUninitializedArray<A>(_:)();
    v9 = v5;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return v9;
  }
}

uint64_t static RREntity.makeDisambiguationGroup(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE **v38;
  uint64_t *v39;
  uint64_t *v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint32_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  NSObject *v57;
  int v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  id v64;
  uint64_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  void *v95;
  void *i;
  id v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  char v104;
  uint64_t v105;
  uint32_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD v112[3];
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;

  v92 = a1;
  v117 = 0;
  v116 = 0;
  v114 = 0;
  v115 = 0;
  v113 = 0;
  v94 = v112;
  memset(v112, 0, sizeof(v112));
  v95 = 0;
  v98 = 0;
  v97 = 0;
  v90 = 0;
  v70 = type metadata accessor for Logger();
  v71 = *(_QWORD *)(v70 - 8);
  v72 = (*(_QWORD *)(v71 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v73 = (char *)&v29 - v72;
  v1 = type metadata accessor for GroupIdentifier();
  v74 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v75 = (uint64_t)&v29 - v74;
  v76 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v90);
  v77 = (uint64_t)&v29 - v76;
  v89 = type metadata accessor for RREntity();
  v78 = *(_QWORD *)(v89 - 8);
  v79 = (*(_QWORD *)(v78 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v90);
  v80 = (char *)&v29 - v79;
  v81 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v82 = (char *)&v29 - v81;
  v117 = (char *)&v29 - v81;
  v87 = type metadata accessor for UUID();
  v84 = *(_QWORD *)(v87 - 8);
  v83 = (*(_QWORD *)(v84 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v92);
  v85 = (char *)&v29 - v83;
  v116 = v4;
  UUID.init()();
  v86 = UUID.uuidString.getter();
  v88 = v5;
  v114 = v86;
  v115 = v5;
  (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v87);
  v91 = swift_allocObject();
  v113 = v91 + 16;
  v6 = _allocateUninitializedArray<A>(_:)();
  v7 = v92;
  *(_QWORD *)(v91 + 16) = v6;
  v110 = v7;
  v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  lazy protocol witness table accessor for type [INPerson] and conformance [A]();
  Sequence.enumerated()();
  v109 = v111;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[INPerson]>);
  EnumeratedSequence.makeIterator()();
  for (i = v95; ; i = v59)
  {
    v67 = i;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[INPerson]>.Iterator);
    EnumeratedSequence.Iterator.next()();
    v68 = v107;
    v69 = v108;
    if (!v108)
      break;
    v65 = v68;
    v66 = v69;
    v8 = v67;
    v62 = v69;
    v61 = v68;
    v98 = v68;
    v97 = v69;
    v9 = v69;
    swift_bridgeObjectRetain();
    GroupIdentifier.init(id:seq:)();
    v10 = default argument 2 of RREntity.init(from:groupId:appBundleId:)();
    RREntity.init(from:groupId:appBundleId:)(v62, v75, v10, v11, v77);
    v63 = v8;
    v64 = v8;
    if (v8)
    {
      v30 = 0;

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v77, 1, 1, v89);
      v60 = v30;
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v78 + 56))(v77, 0, 1, v89);
      v60 = v63;
    }
    v59 = v60;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v77, 1, v89) == 1)
    {
      outlined destroy of RREntity?(v77);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v78 + 32))(v82, v77, v89);
      (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v80, v82, v89);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RREntity]);
      Array.append(_:)();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v82, v89);
    }

  }
  v12 = v73;
  outlined destroy of [SFCardSection]();
  v13 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v12, v13, v70);
  swift_retain();
  swift_retain();
  v47 = 32;
  v48 = 7;
  v14 = swift_allocObject();
  v15 = v91;
  v49 = v14;
  *(_QWORD *)(v14 + 16) = partial apply for implicit closure #4 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
  *(_QWORD *)(v14 + 24) = v15;
  swift_release();
  v57 = Logger.logObject.getter();
  v58 = static os_log_type_t.debug.getter();
  v44 = &v105;
  v105 = 12;
  v42 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v43 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v45 = v106;
  v46 = 17;
  v51 = swift_allocObject();
  *(_BYTE *)(v51 + 16) = 32;
  v52 = swift_allocObject();
  *(_BYTE *)(v52 + 16) = 8;
  v16 = swift_allocObject();
  v17 = v49;
  v50 = v16;
  *(_QWORD *)(v16 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_3;
  *(_QWORD *)(v16 + 24) = v17;
  v18 = swift_allocObject();
  v19 = v50;
  v54 = v18;
  *(_QWORD *)(v18 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v18 + 24) = v19;
  v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v53 = _allocateUninitializedArray<A>(_:)();
  v55 = v20;
  swift_retain();
  v21 = v51;
  v22 = v55;
  *v55 = partial apply for closure #1 in OSLogArguments.append(_:);
  v22[1] = v21;
  swift_retain();
  v23 = v52;
  v24 = v55;
  v55[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v24[3] = v23;
  swift_retain();
  v25 = v54;
  v26 = v55;
  v55[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[5] = v25;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v57, (os_log_type_t)v58))
  {
    v27 = v67;
    v35 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v36 = createStorage<A>(capacity:type:)(0);
    v37 = createStorage<A>(capacity:type:)(1);
    v38 = &v103;
    v103 = v35;
    v39 = &v102;
    v102 = v36;
    v40 = &v101;
    v101 = v37;
    serialize(_:at:)(2, &v103);
    serialize(_:at:)(1, v38);
    v99 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v100 = v51;
    closure #1 in osLogInternal(_:log:type:)(&v99, (uint64_t)v38, (uint64_t)v39, (uint64_t)v40);
    v41 = v27;
    if (v27)
    {
      __break(1u);
    }
    else
    {
      v99 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v100 = v52;
      closure #1 in osLogInternal(_:log:type:)(&v99, (uint64_t)&v103, (uint64_t)&v102, (uint64_t)&v101);
      v33 = 0;
      v99 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v100 = v54;
      closure #1 in osLogInternal(_:log:type:)(&v99, (uint64_t)&v103, (uint64_t)&v102, (uint64_t)&v101);
      _os_log_impl(&dword_24701B000, v57, (os_log_type_t)v58, "#RREntity.makeDisambiguationGroup returning entities: %s", v35, v45);
      destroyStorage<A>(_:count:)(v36, 0, v34);
      destroyStorage<A>(_:count:)(v37, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v35, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v70);
  v31 = &v104;
  swift_beginAccess();
  v32 = *(_QWORD *)(v91 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t static RREntity.makeDisambiguationGroup(with:locale:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t **v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint32_t v39;
  int v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint32_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[3];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;

  v83 = a1;
  v74 = a2;
  v110 = 0;
  v109 = 0;
  v108 = 0;
  v107 = 0;
  v105 = 0;
  v106 = 0;
  v104 = 0;
  v85 = v103;
  memset(v103, 0, sizeof(v103));
  v97 = 0;
  v96 = 0;
  v95 = 0;
  v86 = 0;
  v88 = 0;
  v69 = 0;
  v58 = type metadata accessor for Logger();
  v59 = *(_QWORD *)(v58 - 8);
  v60 = (*(_QWORD *)(v59 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v58);
  v61 = (char *)&v18 - v60;
  v62 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v69);
  v63 = (char *)&v18 - v62;
  v82 = type metadata accessor for RREntity();
  v64 = *(_QWORD *)(v82 - 8);
  v65 = (*(_QWORD *)(v64 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v69);
  v66 = (char *)&v18 - v65;
  v67 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v68 = (char *)&v18 - v67;
  v110 = (char *)&v18 - v67;
  v70 = type metadata accessor for GroupIdentifier();
  v71 = *(_QWORD *)(v70 - 8);
  v72 = (*(_QWORD *)(v71 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v69);
  v73 = (char *)&v18 - v72;
  v109 = (char *)&v18 - v72;
  v79 = type metadata accessor for UUID();
  v76 = *(_QWORD *)(v79 - 8);
  v75 = (*(_QWORD *)(v76 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v83);
  v77 = (char *)&v18 - v75;
  v108 = v4;
  v107 = v5;
  UUID.init()();
  v78 = UUID.uuidString.getter();
  v80 = v6;
  v105 = v78;
  v106 = v6;
  v81 = *(void (**)(char *, uint64_t))(v76 + 8);
  v81(v77, v79);
  v104 = Array.init()();
  v101 = v83;
  v84 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
  lazy protocol witness table accessor for type [App] and conformance [A]();
  Sequence.enumerated()();
  v100 = v102;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[App]>);
  EnumeratedSequence.makeIterator()();
  v87 = v86;
  while (1)
  {
    v55 = v87;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[App]>.Iterator);
    EnumeratedSequence.Iterator.next()();
    v56 = v98;
    v57 = v99;
    if (!v99)
      break;
    v53 = v56;
    v54 = v57;
    v49 = v57;
    v50 = v56;
    v97 = v56;
    v96 = v57;
    v51 = App.toUsoEntityBuilder(locale:)(v74);
    v95 = v51;
    v52 = MEMORY[0x2495716FC]();
    if (v52)
    {
      v48 = v52;
      v47 = v52;
      v88 = v52;
      swift_bridgeObjectRetain();
      GroupIdentifier.init(id:seq:)();
      UUID.init()();
      v43 = UUID.uuidString.getter();
      v44 = v7;
      v81(v77, v79);
      v8 = AppUtil.usoAppBundleId.unsafeMutableAddressor();
      v45 = *(_QWORD *)v8;
      v46 = *((_QWORD *)v8 + 1);
      swift_bridgeObjectRetain();
      swift_retain();
      (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v63, v73, v70);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v63, 0, 1, v70);
      v16 = 0xF000000000000000;
      v17 = v63;
      RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();
      (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v66, v68, v82);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RREntity]);
      Array.append(_:)();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v68, v82);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v70);
      swift_release();
      swift_release();
      swift_release();
      v87 = v55;
    }
    else
    {
      v9 = v61;
      v10 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v9, v10, v58);
      v41 = Logger.logObject.getter();
      v40 = static os_log_type_t.error.getter();
      v38 = &v93;
      v93 = 2;
      v36 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v37 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v39 = v94;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v42 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v41, (os_log_type_t)v40))
      {
        v11 = v55;
        v25 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v24 = 0;
        v26 = createStorage<A>(capacity:type:)(0);
        v27 = createStorage<A>(capacity:type:)(v24);
        v31 = (uint64_t *)&v92;
        v92 = v25;
        v32 = &v91;
        v91 = v26;
        v29 = &v90;
        v90 = v27;
        v28 = 0;
        serialize(_:at:)(0, &v92);
        serialize(_:at:)(v28, (_BYTE **)v31);
        v89 = v42;
        v30 = &v18;
        MEMORY[0x24BDAC7A8](&v18);
        v12 = v32;
        v13 = &v18 - 6;
        v33 = &v18 - 6;
        v13[2] = v31;
        v13[3] = v12;
        v13[4] = v14;
        v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        v35 = v11;
        if (v11)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_24701B000, v41, (os_log_type_t)v40, "#RREntity.makeDisambiguationGroup apps failed to convert UsoEntityBuilder to UsoEntity", v25, v39);
          v21 = 0;
          destroyStorage<A>(_:count:)(v26, 0, v23);
          destroyStorage<A>(_:count:)(v27, v21, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v25, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
          v22 = v35;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v22 = v55;
      }
      v20 = v22;

      (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v58);
      swift_release();
      swift_release();
      v87 = v20;
    }
  }
  outlined destroy of [SFCardSection]();
  v18 = &v104;
  v19 = v104;
  swift_bridgeObjectRetain();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t RREntity.isConversational.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  v4[1] = 0;
  v9 = type metadata accessor for RRMetadata();
  v8 = *(_QWORD *)(v9 - 8);
  v4[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v10 = (char *)v4 - v4[0];
  v14 = v0;
  v1 = RREntity.metadata.getter();
  v11 = &v13;
  v13 = v1;
  v5 = *MEMORY[0x24BEA5910];
  v2 = type metadata accessor for RRDataSourceMetadataValue();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)(v2 - 8) + 104))(v10, v5);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BEA5510], v9);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RRMetadata]);
  v7 = lazy protocol witness table accessor for type [RRMetadata] and conformance [A]();
  lazy protocol witness table accessor for type RRMetadata and conformance RRMetadata();
  v12 = Sequence<>.contains(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v9);
  outlined destroy of [SFCardSection]();
  return v12 & 1;
}

void RREntity.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[8];
  char *v29;
  Builtin::Word v30;
  int v31;
  void *object;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  char *v73;

  v44 = a2;
  v63 = a1;
  v73 = 0;
  v72 = 0;
  v71 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  v45 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v46 = (char *)v28 - v45;
  v61 = 0;
  v57 = type metadata accessor for UUID();
  v54 = *(_QWORD *)(v57 - 8);
  v47 = (*(_QWORD *)(v54 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v61);
  v55 = (char *)v28 - v47;
  v48 = type metadata accessor for RREntity();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v63);
  v51 = (char *)v28 - v50;
  v52 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v3);
  v53 = (char *)v28 - v52;
  v73 = (char *)v28 - v52;
  v72 = v5;
  UUID.init()();
  v56 = UUID.uuidString.getter();
  v58 = v6;
  (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v57);
  v7 = AppUtil.usoAppBundleId.unsafeMutableAddressor();
  v59 = *(_QWORD *)v7;
  v60 = *((_QWORD *)v7 + 1);
  swift_bridgeObjectRetain();
  type metadata accessor for UsoEntity();
  v8 = v62;
  v9 = static UsoEntity.from(_:)(v63);
  v64 = v8;
  v65 = v9;
  v66 = v8;
  if (v8)
  {
    v40 = v66;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v40;
    v71 = v40;
    v30 = 0;
    v28[6] = 1;
    v12 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v28[3] = &v69;
    v69 = v12;
    v70 = v13;
    v29 = "";
    v31 = 1;
    v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v30, 1);
    v28[1] = v14._object;
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    type metadata accessor for INPaymentAccount();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v29, v30, v31 & 1);
    v28[2] = v15._object;
    DefaultStringInterpolation.appendLiteral(_:)(v15);
    swift_bridgeObjectRelease();
    v28[5] = v69;
    v28[4] = v70;
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v36 = String.init(stringInterpolation:)();
    v37 = v16;
    v17 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v33 = &v67;
    v67 = v17;
    v68 = v18;
    v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v29, v30, v31 & 1);
    v28[7] = v19._object;
    DefaultStringInterpolation.appendLiteral(_:)(v19);
    swift_bridgeObjectRelease();
    type metadata accessor for UsoEntity_common_PaymentAccount();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v29, v30, v31 & 1);
    object = v20._object;
    DefaultStringInterpolation.appendLiteral(_:)(v20);
    swift_bridgeObjectRelease();
    v35 = v67;
    v34 = v68;
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v39 = String.init(stringInterpolation:)();
    v38 = v21;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    v22 = swift_allocError();
    v23 = v37;
    v24 = v38;
    v25 = v22;
    v26 = v39;
    v41 = v25;
    *(_QWORD *)v27 = v36;
    *(_QWORD *)(v27 + 8) = v23;
    *(_QWORD *)(v27 + 16) = v26;
    *(_QWORD *)(v27 + 24) = v24;
    *(_QWORD *)(v27 + 32) = 0;
    *(_QWORD *)(v27 + 40) = 0;
    *(_BYTE *)(v27 + 48) = 5;
    swift_willThrow();

  }
  else
  {
    v42 = v65;
    v43 = 0;
    v10 = type metadata accessor for GroupIdentifier();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v46, 1);
    RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v53, v51, v48);
    (*(void (**)(uint64_t, char *, uint64_t))(v49 + 16))(v44, v53, v48);

    (*(void (**)(char *, uint64_t))(v49 + 8))(v53, v48);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[8];
  char *v29;
  Builtin::Word v30;
  int v31;
  void *object;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  char *v73;

  v44 = a2;
  v63 = a1;
  v73 = 0;
  v72 = 0;
  v71 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  v45 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v46 = (char *)v28 - v45;
  v61 = 0;
  v57 = type metadata accessor for UUID();
  v54 = *(_QWORD *)(v57 - 8);
  v47 = (*(_QWORD *)(v54 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v61);
  v55 = (char *)v28 - v47;
  v48 = type metadata accessor for RREntity();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v63);
  v51 = (char *)v28 - v50;
  v52 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v3);
  v53 = (char *)v28 - v52;
  v73 = (char *)v28 - v52;
  v72 = v5;
  UUID.init()();
  v56 = UUID.uuidString.getter();
  v58 = v6;
  (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v57);
  v7 = AppUtil.usoAppBundleId.unsafeMutableAddressor();
  v59 = *(_QWORD *)v7;
  v60 = *((_QWORD *)v7 + 1);
  swift_bridgeObjectRetain();
  type metadata accessor for UsoEntity();
  v8 = v62;
  v9 = static UsoEntity.from(_:)(v63);
  v64 = v8;
  v65 = v9;
  v66 = v8;
  if (v8)
  {
    v40 = v66;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v40;
    v71 = v40;
    v30 = 0;
    v28[6] = 1;
    v12 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v28[3] = &v69;
    v69 = v12;
    v70 = v13;
    v29 = "";
    v31 = 1;
    v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v30, 1);
    v28[1] = v14._object;
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    type metadata accessor for INPaymentRecord();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v29, v30, v31 & 1);
    v28[2] = v15._object;
    DefaultStringInterpolation.appendLiteral(_:)(v15);
    swift_bridgeObjectRelease();
    v28[5] = v69;
    v28[4] = v70;
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v36 = String.init(stringInterpolation:)();
    v37 = v16;
    v17 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v33 = &v67;
    v67 = v17;
    v68 = v18;
    v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v29, v30, v31 & 1);
    v28[7] = v19._object;
    DefaultStringInterpolation.appendLiteral(_:)(v19);
    swift_bridgeObjectRelease();
    type metadata accessor for UsoEntity_common_Payment();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v29, v30, v31 & 1);
    object = v20._object;
    DefaultStringInterpolation.appendLiteral(_:)(v20);
    swift_bridgeObjectRelease();
    v35 = v67;
    v34 = v68;
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v39 = String.init(stringInterpolation:)();
    v38 = v21;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    v22 = swift_allocError();
    v23 = v37;
    v24 = v38;
    v25 = v22;
    v26 = v39;
    v41 = v25;
    *(_QWORD *)v27 = v36;
    *(_QWORD *)(v27 + 8) = v23;
    *(_QWORD *)(v27 + 16) = v26;
    *(_QWORD *)(v27 + 24) = v24;
    *(_QWORD *)(v27 + 32) = 0;
    *(_QWORD *)(v27 + 40) = 0;
    *(_BYTE *)(v27 + 48) = 5;
    swift_willThrow();

  }
  else
  {
    v42 = v65;
    v43 = 0;
    v10 = type metadata accessor for GroupIdentifier();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v46, 1);
    RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v53, v51, v48);
    (*(void (**)(uint64_t, char *, uint64_t))(v49 + 16))(v44, v53, v48);

    (*(void (**)(char *, uint64_t))(v49 + 8))(v53, v48);
  }
}

uint64_t sub_2471401C4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t default argument 2 of RREntity.init(from:groupId:appBundleId:)()
{
  uint64_t v1;

  v1 = *(_QWORD *)AppUtil.usoContactsBundleId.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

void RREntity.init(from:groupId:appBundleId:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[8];
  char *v36;
  int v37;
  void *object;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  Builtin::Word v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  void (*v74)(uint64_t *__return_ptr, id *);
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  char *v88;

  v53 = a5;
  v72 = a1;
  v58 = a2;
  v57 = a3;
  v65 = a4;
  v88 = 0;
  v87 = 0;
  v86 = 0;
  v84 = 0;
  v85 = 0;
  v81 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  v54 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v55 = (char *)v35 - v54;
  v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<INPerson, UsoEntity>);
  v68 = *(_QWORD *)(v70 - 8);
  v56 = (*(_QWORD *)(v68 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v70);
  v69 = (char *)v35 - v56;
  v59 = type metadata accessor for RREntity();
  v60 = *(_QWORD *)(v59 - 8);
  v61 = (*(_QWORD *)(v60 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v59);
  v62 = (char *)v35 - v61;
  v63 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v35 - v61);
  v64 = (char *)v35 - v63;
  v88 = (char *)v35 - v63;
  v87 = a1;
  v86 = v8;
  v84 = v9;
  v85 = v10;
  v11 = INPerson.uniqueContactIdentifier.getter();
  v12 = v69;
  v66 = v11;
  v67 = v13;
  swift_bridgeObjectRetain();
  v14 = Transformer<>.transformer.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v12, v14, v70);
  v74 = (void (*)(uint64_t *__return_ptr, id *))Transformer.transform.getter();
  v71 = v15;
  (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
  v16 = v73;
  v83 = v72;
  v74(&v82, &v83);
  v75 = v16;
  v76 = v16;
  if (v16)
  {
    v46 = v76;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = v46;
    v81 = v46;
    v47 = 0;
    v35[6] = 1;
    v18 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v35[3] = &v79;
    v79 = v18;
    v80 = v19;
    v36 = "";
    v37 = 1;
    v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v47, 1);
    v35[1] = v20._object;
    DefaultStringInterpolation.appendLiteral(_:)(v20);
    swift_bridgeObjectRelease();
    type metadata accessor for INPerson();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v21 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v36, v47, v37 & 1);
    v35[2] = v21._object;
    DefaultStringInterpolation.appendLiteral(_:)(v21);
    swift_bridgeObjectRelease();
    v35[5] = v79;
    v35[4] = v80;
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v42 = String.init(stringInterpolation:)();
    v43 = v22;
    v23 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v39 = &v77;
    v77 = v23;
    v78 = v24;
    v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v36, v47, v37 & 1);
    v35[7] = v25._object;
    DefaultStringInterpolation.appendLiteral(_:)(v25);
    swift_bridgeObjectRelease();
    type metadata accessor for UsoEntity();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v26 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v36, v47, v37 & 1);
    object = v26._object;
    DefaultStringInterpolation.appendLiteral(_:)(v26);
    swift_bridgeObjectRelease();
    v41 = v77;
    v40 = v78;
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v45 = String.init(stringInterpolation:)();
    v44 = v27;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    v28 = swift_allocError();
    v29 = v43;
    v30 = v44;
    v31 = v28;
    v32 = v45;
    v48 = v31;
    *(_QWORD *)v33 = v42;
    *(_QWORD *)(v33 + 8) = v29;
    *(_QWORD *)(v33 + 16) = v32;
    *(_QWORD *)(v33 + 24) = v30;
    *(_QWORD *)(v33 + 32) = 0;
    *(_QWORD *)(v33 + 40) = 0;
    *(_BYTE *)(v33 + 48) = 5;
    swift_willThrow();

    swift_bridgeObjectRelease();
    v34 = type metadata accessor for GroupIdentifier();
    (*(void (**)(uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v58);

  }
  else
  {
    v49 = v82;
    swift_release();
    v50 = 0;
    v52 = type metadata accessor for GroupIdentifier();
    v51 = *(_QWORD *)(v52 - 8);
    (*(void (**)(char *, uint64_t))(v51 + 16))(v55, v58);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v55, 0, 1, v52);
    RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v64, v62, v59);
    (*(void (**)(uint64_t, char *, uint64_t))(v60 + 16))(v53, v64, v59);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v58, v52);

    (*(void (**)(char *, uint64_t))(v60 + 8))(v64, v59);
  }
}

uint64_t sub_247140910()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_3()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RREntity]);
  v1 = lazy protocol witness table accessor for type [RREntity] and conformance [A]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type [RREntity] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [RREntity] and conformance [A];
  if (!lazy protocol witness table cache variable for type [RREntity] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RREntity]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12F8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [RREntity] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t sub_247140A08()
{
  return swift_deallocObject();
}

uint64_t sub_247140A30()
{
  return swift_deallocObject();
}

uint64_t sub_247140A58()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247140A94()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [RRMetadata] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [RRMetadata] and conformance [A];
  if (!lazy protocol witness table cache variable for type [RRMetadata] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RRMetadata]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [RRMetadata] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type RRMetadata and conformance RRMetadata()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RRMetadata and conformance RRMetadata;
  if (!lazy protocol witness table cache variable for type RRMetadata and conformance RRMetadata)
  {
    v0 = type metadata accessor for RRMetadata();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEA5560], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RRMetadata and conformance RRMetadata);
    return v1;
  }
  return v3;
}

unint64_t type metadata accessor for INPaymentRecord()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for INPaymentRecord;
  if (!lazy cache variable for type metadata for INPaymentRecord)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INPaymentRecord);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t SearchForAccountsCATs.confirmSlotValue(slot:slotValue:completion:)(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String *v11;
  Swift::String v12;
  const void *v13;
  char *v14;
  Swift::String *v15;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v17;
  const void *v18;
  char *v19;
  uint64_t *p_countAndFlagsBits;
  uint64_t *v21;
  uint64_t v22;
  Swift::String *v24;
  Swift::String *v25;
  _QWORD v26[3];
  Swift::String *v27;
  unsigned int v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String *v38;
  const void *v39;
  unsigned int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, _QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v39 = a1;
  v29 = a2;
  v30 = a3;
  v31 = a4;
  v49 = 0;
  v48 = 0;
  v46 = 0;
  v47 = 0;
  v45 = 0;
  v32 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v39);
  v33 = (char *)v26 - v32;
  v34 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v41 = (char *)v26 - v34;
  v49 = v7;
  v48 = v8;
  v46 = v9;
  v47 = v10;
  v45 = v4;
  v40 = 1;
  v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#ConfirmSlotValue", 0x22uLL, 1);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v37 = _allocateUninitializedArray<A>(_:)();
  v38 = v11;
  v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v40 & 1);
  v13 = v39;
  v14 = v41;
  *v38 = v12;
  outlined init with copy of SpeakableString?(v13, v14);
  v42 = type metadata accessor for SpeakableString();
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(unsigned int (**)(char *, _QWORD))(v43 + 48);
  if (v44(v41, v40) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v41);
    v25 = v38;
    v38[1]._countAndFlagsBits = 0;
    v25[1]._object = 0;
    v25[2]._countAndFlagsBits = 0;
    v25[2]._object = 0;
  }
  else
  {
    v15 = v38;
    v38[2]._object = (void *)v42;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v15[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v43 + 32))(boxed_opaque_existential_1, v41, v42);
  }
  v27 = v38 + 4;
  v28 = 1;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slotValue", 9uLL, 1);
  v18 = v29;
  v19 = v33;
  v38[3] = v17;
  outlined init with copy of SpeakableString?(v18, v19);
  if (((unsigned int (*)(char *, _QWORD, uint64_t))v44)(v33, v28, v42) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v33);
    v24 = v38;
    v38[4]._countAndFlagsBits = 0;
    v24[4]._object = 0;
    v24[5]._countAndFlagsBits = 0;
    v24[5]._object = 0;
  }
  else
  {
    p_countAndFlagsBits = &v27->_countAndFlagsBits;
    v38[5]._object = (void *)v42;
    v21 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v43 + 32))(v21, v33, v42);
  }
  v22 = v37;
  _finalizeUninitializedArray<A>(_:)();
  v26[1] = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v26[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.confirmSlotValue(slot:slotValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[9] = v3;
  v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return swift_task_switch();
}

uint64_t SearchForAccountsCATs.confirmSlotValue(slot:slotValue:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t (*v8)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v9;
  const void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  Swift::String *v14;
  const void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(void *, uint64_t);

  v16 = (void *)v0[11];
  v15 = (const void *)v0[7];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#ConfirmSlotValue", 0x22uLL, 1);
  v0[12] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v14 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v15, v16);
  v17 = type metadata accessor for SpeakableString();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(void *, uint64_t))(v18 + 48);
  if (v19(v16, 1) == 1)
  {
    outlined destroy of SpeakableString?(v13[11]);
    v14[1]._countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    v12 = v13[11];
    v14[2]._object = (void *)v17;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v14[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v18 + 32))(boxed_opaque_existential_1, v12, v17);
  }
  v11 = (void *)v13[10];
  v10 = (const void *)v13[8];
  v14[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slotValue", 9uLL, 1);
  outlined init with copy of SpeakableString?(v10, v11);
  if (((unsigned int (*)(void *, uint64_t, uint64_t))v19)(v11, 1, v17) == 1)
  {
    outlined destroy of SpeakableString?(v13[10]);
    v14[4]._countAndFlagsBits = 0;
    v14[4]._object = 0;
    v14[5]._countAndFlagsBits = 0;
    v14[5]._object = 0;
  }
  else
  {
    v9 = v13[10];
    v14[5]._object = (void *)v17;
    v4 = __swift_allocate_boxed_opaque_existential_1(&v14[4]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v18 + 32))(v4, v9, v17);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v13[13] = v7;
  v8 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v5 = (_QWORD *)swift_task_alloc();
  v13[14] = v5;
  *v5 = v13[2];
  v5[1] = PaymentsLabelCATs.financialAccountDisambiguation(accountType:accountNumber:);
  return v8(v13[6], v1._countAndFlagsBits, v1._object, v7);
}

uint64_t SearchForAccountsCATs.confirmSlotValue(slot:slotValue:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String *v8;
  Swift::String v9;
  const void *v10;
  char *v11;
  Swift::String *v12;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v14;
  const void *v15;
  char *v16;
  uint64_t *p_countAndFlagsBits;
  uint64_t *v18;
  uint64_t v19;
  Swift::String *v21;
  Swift::String *v22;
  _QWORD v23[2];
  Swift::String *v24;
  unsigned int v25;
  uint64_t v26;
  const void *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String *v34;
  const void *v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, _QWORD);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v26 = a3;
  v35 = a1;
  v27 = a2;
  v43 = 0;
  v42 = 0;
  v41 = 0;
  v28 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v35);
  v29 = (char *)v23 - v28;
  v30 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v37 = (char *)v23 - v30;
  v43 = v6;
  v42 = v7;
  v41 = v3;
  v36 = 1;
  v31 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#ConfirmSlotValue", 0x22uLL, 1);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v33 = _allocateUninitializedArray<A>(_:)();
  v34 = v8;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v36 & 1);
  v10 = v35;
  v11 = v37;
  *v34 = v9;
  outlined init with copy of SpeakableString?(v10, v11);
  v38 = type metadata accessor for SpeakableString();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(unsigned int (**)(char *, _QWORD))(v39 + 48);
  if (v40(v37, v36) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v37);
    v22 = v34;
    v34[1]._countAndFlagsBits = 0;
    v22[1]._object = 0;
    v22[2]._countAndFlagsBits = 0;
    v22[2]._object = 0;
  }
  else
  {
    v12 = v34;
    v34[2]._object = (void *)v38;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v39 + 32))(boxed_opaque_existential_1, v37, v38);
  }
  v24 = v34 + 4;
  v25 = 1;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slotValue", 9uLL, 1);
  v15 = v27;
  v16 = v29;
  v34[3] = v14;
  outlined init with copy of SpeakableString?(v15, v16);
  if (((unsigned int (*)(char *, _QWORD, uint64_t))v40)(v29, v25, v38) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v29);
    v21 = v34;
    v34[4]._countAndFlagsBits = 0;
    v21[4]._object = 0;
    v21[5]._countAndFlagsBits = 0;
    v21[5]._object = 0;
  }
  else
  {
    p_countAndFlagsBits = &v24->_countAndFlagsBits;
    v34[5]._object = (void *)v38;
    v18 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v39 + 32))(v18, v29, v38);
  }
  v19 = v33;
  _finalizeUninitializedArray<A>(_:)();
  v23[0] = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v23[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.disambiguateSlotValue(slot:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String *v6;
  Swift::String v7;
  const void *v8;
  char *v9;
  Swift::String *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  Swift::String *v14;
  _QWORD v15[5];
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String *v20;
  const void *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = a1;
  v15[3] = a2;
  v15[4] = a3;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v16 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)v15 - v16;
  v29 = MEMORY[0x24BDAC7A8](v21);
  v27 = v4;
  v28 = v5;
  v26 = v3;
  v22 = 1;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#DisambiguateSlotValue", 0x27uLL, 1);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v19 = _allocateUninitializedArray<A>(_:)();
  v20 = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v22 & 1);
  v8 = v21;
  v9 = v23;
  *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    v14 = v20;
    v20[1]._countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[0] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.disambiguateSlotValue(slot:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t SearchForAccountsCATs.disambiguateSlotValue(slot:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *p_countAndFlagsBits;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = (void *)v0[8];
  v11 = (const void *)v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#DisambiguateSlotValue", 0x27uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_countAndFlagsBits = &v2->_countAndFlagsBits;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  v13 = type metadata accessor for SpeakableString();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v14 + 48))(v12, 1) == 1)
  {
    outlined destroy of SpeakableString?(v9[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    v8 = v9[8];
    p_countAndFlagsBits[5] = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v8, v13);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[10] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v9[11] = v4;
  *v4 = v9[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  return v7(v9[5], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t SearchForAccountsCATs.disambiguateSlotValue(slot:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  Swift::String *v3;
  Swift::String v4;
  const void *v5;
  char *v6;
  Swift::String *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  Swift::String *v11;
  _QWORD v12[4];
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String *v17;
  const void *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12[3] = a2;
  v18 = a1;
  v24 = 0;
  v23 = 0;
  v13 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = (char *)v12 - v13;
  v24 = MEMORY[0x24BDAC7A8](v18);
  v23 = v2;
  v19 = 1;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#DisambiguateSlotValue", 0x27uLL, 1);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v16 = _allocateUninitializedArray<A>(_:)();
  v17 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v19 & 1);
  v5 = v18;
  v6 = v20;
  *v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  v21 = type metadata accessor for SpeakableString();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    v11 = v17;
    v17[1]._countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[1] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.errorWithCode(errorCode:app:completion:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String *v8;
  Swift::String v9;
  const void *v10;
  char *v11;
  Swift::String *v12;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v14;
  uint64_t v15;
  Swift::String *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String *v20;
  Swift::String *v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String *v32;
  const void *v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v33 = a1;
  v25 = a2;
  v26 = a3;
  v27 = a4;
  v42 = 0;
  v41 = 0;
  v39 = 0;
  v40 = 0;
  v38 = 0;
  v28 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v35 = (char *)v22 - v28;
  v42 = MEMORY[0x24BDAC7A8](v33);
  v41 = v5;
  v39 = v6;
  v40 = v7;
  v38 = v4;
  v34 = 1;
  v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#ErrorWithCode", 0x1FuLL, 1);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v31 = _allocateUninitializedArray<A>(_:)();
  v32 = v8;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorCode", 9uLL, v34 & 1);
  v10 = v33;
  v11 = v35;
  *v32 = v9;
  outlined init with copy of SpeakableString?(v10, v11);
  v36 = type metadata accessor for SpeakableString();
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v37 + 48))(v35, v34) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v35);
    v21 = v32;
    v32[1]._countAndFlagsBits = 0;
    v21[1]._object = 0;
    v21[2]._countAndFlagsBits = 0;
    v21[2]._object = 0;
  }
  else
  {
    v12 = v32;
    v32[2]._object = (void *)v36;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 32))(boxed_opaque_existential_1, v35, v36);
  }
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  v32[3] = v14;
  swift_retain();
  if (v25)
  {
    v24 = v25;
    v23 = v25;
    v15 = type metadata accessor for SirikitApp();
    v16 = v32;
    v17 = v23;
    v32[5]._object = (void *)v15;
    v16[4]._countAndFlagsBits = v17;
  }
  else
  {
    v20 = v32;
    v32[4]._countAndFlagsBits = 0;
    v20[4]._object = 0;
    v20[5]._countAndFlagsBits = 0;
    v20[5]._object = 0;
  }
  v18 = v31;
  _finalizeUninitializedArray<A>(_:)();
  v22[0] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v22[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.errorWithCode(errorCode:app:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[9] = v3;
  v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return swift_task_switch();
}

uint64_t SearchForAccountsCATs.errorWithCode(errorCode:app:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  Swift::String *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v14 = (void *)v0[10];
  v13 = (const void *)v0[7];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#ErrorWithCode", 0x1FuLL, 1);
  v0[11] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v12 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorCode", 9uLL, 1);
  outlined init with copy of SpeakableString?(v13, v14);
  v15 = type metadata accessor for SpeakableString();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v16 + 48))(v14, 1) == 1)
  {
    outlined destroy of SpeakableString?(v11[10]);
    v12[1]._countAndFlagsBits = 0;
    v12[1]._object = 0;
    v12[2]._countAndFlagsBits = 0;
    v12[2]._object = 0;
  }
  else
  {
    v10 = v11[10];
    v12[2]._object = (void *)v15;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v10, v15);
  }
  v9 = v11[8];
  v12[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (v9)
  {
    v8 = v11[8];
    v12[5]._object = (void *)type metadata accessor for SirikitApp();
    v12[4]._countAndFlagsBits = v8;
  }
  else
  {
    v12[4]._countAndFlagsBits = 0;
    v12[4]._object = 0;
    v12[5]._countAndFlagsBits = 0;
    v12[5]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v11[12] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v11[13] = v4;
  *v4 = v11[2];
  v4[1] = RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:);
  return v7(v11[6], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t SearchForAccountsCATs.errorWithCode(errorCode:app:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  Swift::String *v5;
  Swift::String v6;
  const void *v7;
  char *v8;
  Swift::String *v9;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v11;
  uint64_t v12;
  Swift::String *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String *v17;
  Swift::String *v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String *v28;
  const void *v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v22 = a3;
  v29 = a1;
  v23 = a2;
  v36 = 0;
  v35 = 0;
  v34 = 0;
  v24 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v31 = (char *)v19 - v24;
  v36 = MEMORY[0x24BDAC7A8](v29);
  v35 = v4;
  v34 = v3;
  v30 = 1;
  v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#ErrorWithCode", 0x1FuLL, 1);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v27 = _allocateUninitializedArray<A>(_:)();
  v28 = v5;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorCode", 9uLL, v30 & 1);
  v7 = v29;
  v8 = v31;
  *v28 = v6;
  outlined init with copy of SpeakableString?(v7, v8);
  v32 = type metadata accessor for SpeakableString();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v33 + 48))(v31, v30) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v31);
    v18 = v28;
    v28[1]._countAndFlagsBits = 0;
    v18[1]._object = 0;
    v18[2]._countAndFlagsBits = 0;
    v18[2]._object = 0;
  }
  else
  {
    v9 = v28;
    v28[2]._object = (void *)v32;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v9[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 32))(boxed_opaque_existential_1, v31, v32);
  }
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  v28[3] = v11;
  swift_retain();
  if (v23)
  {
    v21 = v23;
    v20 = v23;
    v12 = type metadata accessor for SirikitApp();
    v13 = v28;
    v14 = v20;
    v28[5]._object = (void *)v12;
    v13[4]._countAndFlagsBits = v14;
  }
  else
  {
    v17 = v28;
    v28[4]._countAndFlagsBits = 0;
    v17[4]._object = 0;
    v17[5]._countAndFlagsBits = 0;
    v17[5]._object = 0;
  }
  v15 = v27;
  _finalizeUninitializedArray<A>(_:)();
  v19[1] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v19[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.errorWithCodeForApplePay(errorCode:app:completion:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String *v8;
  Swift::String v9;
  const void *v10;
  char *v11;
  Swift::String *v12;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v14;
  uint64_t v15;
  Swift::String *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String *v20;
  Swift::String *v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String *v32;
  const void *v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v33 = a1;
  v25 = a2;
  v26 = a3;
  v27 = a4;
  v42 = 0;
  v41 = 0;
  v39 = 0;
  v40 = 0;
  v38 = 0;
  v28 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v35 = (char *)v22 - v28;
  v42 = MEMORY[0x24BDAC7A8](v33);
  v41 = v5;
  v39 = v6;
  v40 = v7;
  v38 = v4;
  v34 = 1;
  v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#ErrorWithCodeForApplePay", 0x2AuLL, 1);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v31 = _allocateUninitializedArray<A>(_:)();
  v32 = v8;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorCode", 9uLL, v34 & 1);
  v10 = v33;
  v11 = v35;
  *v32 = v9;
  outlined init with copy of SpeakableString?(v10, v11);
  v36 = type metadata accessor for SpeakableString();
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v37 + 48))(v35, v34) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v35);
    v21 = v32;
    v32[1]._countAndFlagsBits = 0;
    v21[1]._object = 0;
    v21[2]._countAndFlagsBits = 0;
    v21[2]._object = 0;
  }
  else
  {
    v12 = v32;
    v32[2]._object = (void *)v36;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 32))(boxed_opaque_existential_1, v35, v36);
  }
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  v32[3] = v14;
  swift_retain();
  if (v25)
  {
    v24 = v25;
    v23 = v25;
    v15 = type metadata accessor for SirikitApp();
    v16 = v32;
    v17 = v23;
    v32[5]._object = (void *)v15;
    v16[4]._countAndFlagsBits = v17;
  }
  else
  {
    v20 = v32;
    v32[4]._countAndFlagsBits = 0;
    v20[4]._object = 0;
    v20[5]._countAndFlagsBits = 0;
    v20[5]._object = 0;
  }
  v18 = v31;
  _finalizeUninitializedArray<A>(_:)();
  v22[0] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v22[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.errorWithCodeForApplePay(errorCode:app:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[9] = v3;
  v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return swift_task_switch();
}

uint64_t SearchForAccountsCATs.errorWithCodeForApplePay(errorCode:app:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  Swift::String *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v14 = (void *)v0[10];
  v13 = (const void *)v0[7];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#ErrorWithCodeForApplePay", 0x2AuLL, 1);
  v0[11] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v12 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorCode", 9uLL, 1);
  outlined init with copy of SpeakableString?(v13, v14);
  v15 = type metadata accessor for SpeakableString();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v16 + 48))(v14, 1) == 1)
  {
    outlined destroy of SpeakableString?(v11[10]);
    v12[1]._countAndFlagsBits = 0;
    v12[1]._object = 0;
    v12[2]._countAndFlagsBits = 0;
    v12[2]._object = 0;
  }
  else
  {
    v10 = v11[10];
    v12[2]._object = (void *)v15;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v10, v15);
  }
  v9 = v11[8];
  v12[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (v9)
  {
    v8 = v11[8];
    v12[5]._object = (void *)type metadata accessor for SirikitApp();
    v12[4]._countAndFlagsBits = v8;
  }
  else
  {
    v12[4]._countAndFlagsBits = 0;
    v12[4]._object = 0;
    v12[5]._countAndFlagsBits = 0;
    v12[5]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v11[12] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v11[13] = v4;
  *v4 = v11[2];
  v4[1] = RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:);
  return v7(v11[6], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t SearchForAccountsCATs.errorWithCodeForApplePay(errorCode:app:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  Swift::String *v5;
  Swift::String v6;
  const void *v7;
  char *v8;
  Swift::String *v9;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v11;
  uint64_t v12;
  Swift::String *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String *v17;
  Swift::String *v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String *v28;
  const void *v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v22 = a3;
  v29 = a1;
  v23 = a2;
  v36 = 0;
  v35 = 0;
  v34 = 0;
  v24 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v31 = (char *)v19 - v24;
  v36 = MEMORY[0x24BDAC7A8](v29);
  v35 = v4;
  v34 = v3;
  v30 = 1;
  v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#ErrorWithCodeForApplePay", 0x2AuLL, 1);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v27 = _allocateUninitializedArray<A>(_:)();
  v28 = v5;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorCode", 9uLL, v30 & 1);
  v7 = v29;
  v8 = v31;
  *v28 = v6;
  outlined init with copy of SpeakableString?(v7, v8);
  v32 = type metadata accessor for SpeakableString();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v33 + 48))(v31, v30) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v31);
    v18 = v28;
    v28[1]._countAndFlagsBits = 0;
    v18[1]._object = 0;
    v18[2]._countAndFlagsBits = 0;
    v18[2]._object = 0;
  }
  else
  {
    v9 = v28;
    v28[2]._object = (void *)v32;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v9[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 32))(boxed_opaque_existential_1, v31, v32);
  }
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  v28[3] = v11;
  swift_retain();
  if (v23)
  {
    v21 = v23;
    v20 = v23;
    v12 = type metadata accessor for SirikitApp();
    v13 = v28;
    v14 = v20;
    v28[5]._object = (void *)v12;
    v13[4]._countAndFlagsBits = v14;
  }
  else
  {
    v17 = v28;
    v28[4]._countAndFlagsBits = 0;
    v17[4]._object = 0;
    v17[5]._countAndFlagsBits = 0;
    v17[5]._object = 0;
  }
  v15 = v27;
  _finalizeUninitializedArray<A>(_:)();
  v19[1] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v19[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.intentHandledResponse(app:bankAccounts:completion:)(uint64_t a1, uint64_t a2, char a3)
{
  Swift::String *v3;
  Swift::String *v7;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#IntentHandledResponse", 0x27uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v7 = v3;
  *v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v7[2]._object = (void *)type metadata accessor for SirikitApp();
    v7[1]._countAndFlagsBits = a1;
  }
  else
  {
    v7[1]._countAndFlagsBits = 0;
    v7[1]._object = 0;
    v7[2]._countAndFlagsBits = 0;
    v7[2]._object = 0;
  }
  v7[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("bankAccounts", 0xCuLL, 1);
  if ((a3 & 1) != 0)
  {
    v7[4]._countAndFlagsBits = 0;
    v7[4]._object = 0;
    v7[5]._countAndFlagsBits = 0;
    v7[5]._object = 0;
  }
  else
  {
    v7[5]._object = (void *)MEMORY[0x24BEE13C8];
    v7[4]._countAndFlagsBits = a2;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.intentHandledResponse(app:bankAccounts:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 80) = v4;
  *(_BYTE *)(v5 + 25) = a4;
  *(_QWORD *)(v5 + 72) = a3;
  *(_QWORD *)(v5 + 64) = a2;
  *(_QWORD *)(v5 + 56) = a1;
  *(_QWORD *)(v5 + 32) = v5;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_BYTE *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 40) = a2;
  *(_QWORD *)(v5 + 16) = a3;
  *(_BYTE *)(v5 + 24) = a4 & 1;
  *(_QWORD *)(v5 + 48) = v4;
  return swift_task_switch();
}

uint64_t SearchForAccountsCATs.intentHandledResponse(app:bankAccounts:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  char v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String *v11;
  uint64_t v12;

  v12 = v0[8];
  v0[4] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#IntentHandledResponse", 0x27uLL, 1);
  v0[11] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v11 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (v12)
  {
    v9 = *(_QWORD *)(v10 + 64);
    v11[2]._object = (void *)type metadata accessor for SirikitApp();
    v11[1]._countAndFlagsBits = v9;
  }
  else
  {
    v11[1]._countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  v8 = *(_BYTE *)(v10 + 25);
  v11[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("bankAccounts", 0xCuLL, 1);
  if ((v8 & 1) != 0)
  {
    v11[4]._countAndFlagsBits = 0;
    v11[4]._object = 0;
    v11[5]._countAndFlagsBits = 0;
    v11[5]._object = 0;
  }
  else
  {
    v3 = *(_QWORD *)(v10 + 72);
    v11[5]._object = (void *)MEMORY[0x24BEE13C8];
    v11[4]._countAndFlagsBits = v3;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  *(_QWORD *)(v10 + 96) = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 104) = v4;
  *v4 = *(_QWORD *)(v10 + 32);
  v4[1] = SearchForAccountsCATs.intentHandledResponse(app:bankAccounts:);
  return v7(*(_QWORD *)(v10 + 56), v1._countAndFlagsBits, v1._object, v6);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 32) + 8))();
}

_QWORD *SearchForAccountsCATs.intentHandledResponse(app:bankAccounts:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 32) = *v1;
  v4 = (_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v4 + 8))(v4);
}

uint64_t SearchForAccountsCATs.intentHandledResponse(app:bankAccounts:)(uint64_t a1, uint64_t a2, char a3)
{
  Swift::String *v3;
  Swift::String *v7;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#IntentHandledResponse", 0x27uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v7 = v3;
  *v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v7[2]._object = (void *)type metadata accessor for SirikitApp();
    v7[1]._countAndFlagsBits = a1;
  }
  else
  {
    v7[1]._countAndFlagsBits = 0;
    v7[1]._object = 0;
    v7[2]._countAndFlagsBits = 0;
    v7[2]._object = 0;
  }
  v7[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("bankAccounts", 0xCuLL, 1);
  if ((a3 & 1) != 0)
  {
    v7[4]._countAndFlagsBits = 0;
    v7[4]._object = 0;
    v7[5]._countAndFlagsBits = 0;
    v7[5]._object = 0;
  }
  else
  {
    v7[5]._object = (void *)MEMORY[0x24BEE13C8];
    v7[4]._countAndFlagsBits = a2;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.labelForEnum(accountType:balanceType:completion:)(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String *v11;
  Swift::String v12;
  const void *v13;
  char *v14;
  Swift::String *v15;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v17;
  const void *v18;
  char *v19;
  uint64_t *p_countAndFlagsBits;
  uint64_t *v21;
  uint64_t v22;
  Swift::String *v24;
  Swift::String *v25;
  _QWORD v26[3];
  Swift::String *v27;
  unsigned int v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String *v38;
  const void *v39;
  unsigned int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, _QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v39 = a1;
  v29 = a2;
  v30 = a3;
  v31 = a4;
  v49 = 0;
  v48 = 0;
  v46 = 0;
  v47 = 0;
  v45 = 0;
  v32 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v39);
  v33 = (char *)v26 - v32;
  v34 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v41 = (char *)v26 - v34;
  v49 = v7;
  v48 = v8;
  v46 = v9;
  v47 = v10;
  v45 = v4;
  v40 = 1;
  v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#LabelForEnum", 0x1EuLL, 1);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v37 = _allocateUninitializedArray<A>(_:)();
  v38 = v11;
  v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, v40 & 1);
  v13 = v39;
  v14 = v41;
  *v38 = v12;
  outlined init with copy of SpeakableString?(v13, v14);
  v42 = type metadata accessor for SpeakableString();
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(unsigned int (**)(char *, _QWORD))(v43 + 48);
  if (v44(v41, v40) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v41);
    v25 = v38;
    v38[1]._countAndFlagsBits = 0;
    v25[1]._object = 0;
    v25[2]._countAndFlagsBits = 0;
    v25[2]._object = 0;
  }
  else
  {
    v15 = v38;
    v38[2]._object = (void *)v42;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v15[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v43 + 32))(boxed_opaque_existential_1, v41, v42);
  }
  v27 = v38 + 4;
  v28 = 1;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("balanceType", 0xBuLL, 1);
  v18 = v29;
  v19 = v33;
  v38[3] = v17;
  outlined init with copy of SpeakableString?(v18, v19);
  if (((unsigned int (*)(char *, _QWORD, uint64_t))v44)(v33, v28, v42) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v33);
    v24 = v38;
    v38[4]._countAndFlagsBits = 0;
    v24[4]._object = 0;
    v24[5]._countAndFlagsBits = 0;
    v24[5]._object = 0;
  }
  else
  {
    p_countAndFlagsBits = &v27->_countAndFlagsBits;
    v38[5]._object = (void *)v42;
    v21 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v43 + 32))(v21, v33, v42);
  }
  v22 = v37;
  _finalizeUninitializedArray<A>(_:)();
  v26[1] = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v26[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.labelForEnum(accountType:balanceType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[9] = v3;
  v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return swift_task_switch();
}

uint64_t SearchForAccountsCATs.labelForEnum(accountType:balanceType:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t (*v8)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v9;
  const void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  Swift::String *v14;
  const void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(void *, uint64_t);

  v16 = (void *)v0[11];
  v15 = (const void *)v0[7];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#LabelForEnum", 0x1EuLL, 1);
  v0[12] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v14 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, 1);
  outlined init with copy of SpeakableString?(v15, v16);
  v17 = type metadata accessor for SpeakableString();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(void *, uint64_t))(v18 + 48);
  if (v19(v16, 1) == 1)
  {
    outlined destroy of SpeakableString?(v13[11]);
    v14[1]._countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    v12 = v13[11];
    v14[2]._object = (void *)v17;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v14[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v18 + 32))(boxed_opaque_existential_1, v12, v17);
  }
  v11 = (void *)v13[10];
  v10 = (const void *)v13[8];
  v14[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("balanceType", 0xBuLL, 1);
  outlined init with copy of SpeakableString?(v10, v11);
  if (((unsigned int (*)(void *, uint64_t, uint64_t))v19)(v11, 1, v17) == 1)
  {
    outlined destroy of SpeakableString?(v13[10]);
    v14[4]._countAndFlagsBits = 0;
    v14[4]._object = 0;
    v14[5]._countAndFlagsBits = 0;
    v14[5]._object = 0;
  }
  else
  {
    v9 = v13[10];
    v14[5]._object = (void *)v17;
    v4 = __swift_allocate_boxed_opaque_existential_1(&v14[4]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v18 + 32))(v4, v9, v17);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v13[13] = v7;
  v8 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v5 = (_QWORD *)swift_task_alloc();
  v13[14] = v5;
  *v5 = v13[2];
  v5[1] = PaymentsLabelCATs.financialAccountDisambiguation(accountType:accountNumber:);
  return v8(v13[6], v1._countAndFlagsBits, v1._object, v7);
}

uint64_t SearchForAccountsCATs.labelForEnum(accountType:balanceType:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String *v8;
  Swift::String v9;
  const void *v10;
  char *v11;
  Swift::String *v12;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v14;
  const void *v15;
  char *v16;
  uint64_t *p_countAndFlagsBits;
  uint64_t *v18;
  uint64_t v19;
  Swift::String *v21;
  Swift::String *v22;
  _QWORD v23[2];
  Swift::String *v24;
  unsigned int v25;
  uint64_t v26;
  const void *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String *v34;
  const void *v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, _QWORD);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v26 = a3;
  v35 = a1;
  v27 = a2;
  v43 = 0;
  v42 = 0;
  v41 = 0;
  v28 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v35);
  v29 = (char *)v23 - v28;
  v30 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v37 = (char *)v23 - v30;
  v43 = v6;
  v42 = v7;
  v41 = v3;
  v36 = 1;
  v31 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#LabelForEnum", 0x1EuLL, 1);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v33 = _allocateUninitializedArray<A>(_:)();
  v34 = v8;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, v36 & 1);
  v10 = v35;
  v11 = v37;
  *v34 = v9;
  outlined init with copy of SpeakableString?(v10, v11);
  v38 = type metadata accessor for SpeakableString();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(unsigned int (**)(char *, _QWORD))(v39 + 48);
  if (v40(v37, v36) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v37);
    v22 = v34;
    v34[1]._countAndFlagsBits = 0;
    v22[1]._object = 0;
    v22[2]._countAndFlagsBits = 0;
    v22[2]._object = 0;
  }
  else
  {
    v12 = v34;
    v34[2]._object = (void *)v38;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v39 + 32))(boxed_opaque_existential_1, v37, v38);
  }
  v24 = v34 + 4;
  v25 = 1;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("balanceType", 0xBuLL, 1);
  v15 = v27;
  v16 = v29;
  v34[3] = v14;
  outlined init with copy of SpeakableString?(v15, v16);
  if (((unsigned int (*)(char *, _QWORD, uint64_t))v40)(v29, v25, v38) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v29);
    v21 = v34;
    v34[4]._countAndFlagsBits = 0;
    v21[4]._object = 0;
    v21[5]._countAndFlagsBits = 0;
    v21[5]._object = 0;
  }
  else
  {
    p_countAndFlagsBits = &v24->_countAndFlagsBits;
    v34[5]._object = (void *)v38;
    v18 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v39 + 32))(v18, v29, v38);
  }
  v19 = v33;
  _finalizeUninitializedArray<A>(_:)();
  v23[0] = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v23[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.labelForResponseSlot(slot:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String *v6;
  Swift::String v7;
  const void *v8;
  char *v9;
  Swift::String *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  Swift::String *v14;
  _QWORD v15[5];
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String *v20;
  const void *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = a1;
  v15[3] = a2;
  v15[4] = a3;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v16 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)v15 - v16;
  v29 = MEMORY[0x24BDAC7A8](v21);
  v27 = v4;
  v28 = v5;
  v26 = v3;
  v22 = 1;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#LabelForResponseSlot", 0x26uLL, 1);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v19 = _allocateUninitializedArray<A>(_:)();
  v20 = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v22 & 1);
  v8 = v21;
  v9 = v23;
  *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    v14 = v20;
    v20[1]._countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[0] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.labelForResponseSlot(slot:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t SearchForAccountsCATs.labelForResponseSlot(slot:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *p_countAndFlagsBits;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = (void *)v0[8];
  v11 = (const void *)v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#LabelForResponseSlot", 0x26uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_countAndFlagsBits = &v2->_countAndFlagsBits;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  v13 = type metadata accessor for SpeakableString();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v14 + 48))(v12, 1) == 1)
  {
    outlined destroy of SpeakableString?(v9[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    v8 = v9[8];
    p_countAndFlagsBits[5] = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v8, v13);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[10] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v9[11] = v4;
  *v4 = v9[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  return v7(v9[5], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t SearchForAccountsCATs.labelForResponseSlot(slot:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  Swift::String *v3;
  Swift::String v4;
  const void *v5;
  char *v6;
  Swift::String *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  Swift::String *v11;
  _QWORD v12[4];
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String *v17;
  const void *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12[3] = a2;
  v18 = a1;
  v24 = 0;
  v23 = 0;
  v13 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = (char *)v12 - v13;
  v24 = MEMORY[0x24BDAC7A8](v18);
  v23 = v2;
  v19 = 1;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#LabelForResponseSlot", 0x26uLL, 1);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v16 = _allocateUninitializedArray<A>(_:)();
  v17 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v19 & 1);
  v5 = v18;
  v6 = v20;
  *v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  v21 = type metadata accessor for SpeakableString();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    v11 = v17;
    v17[1]._countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[1] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.labelOtherBalanceType(enumValue:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String *v6;
  Swift::String v7;
  const void *v8;
  char *v9;
  Swift::String *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  Swift::String *v14;
  _QWORD v15[5];
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String *v20;
  const void *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = a1;
  v15[3] = a2;
  v15[4] = a3;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v16 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)v15 - v16;
  v29 = MEMORY[0x24BDAC7A8](v21);
  v27 = v4;
  v28 = v5;
  v26 = v3;
  v22 = 1;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#LabelOtherBalanceType", 0x27uLL, 1);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v19 = _allocateUninitializedArray<A>(_:)();
  v20 = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("enumValue", 9uLL, v22 & 1);
  v8 = v21;
  v9 = v23;
  *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    v14 = v20;
    v20[1]._countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[0] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.labelOtherBalanceType(enumValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t SearchForAccountsCATs.labelOtherBalanceType(enumValue:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *p_countAndFlagsBits;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = (void *)v0[8];
  v11 = (const void *)v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#LabelOtherBalanceType", 0x27uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_countAndFlagsBits = &v2->_countAndFlagsBits;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("enumValue", 9uLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  v13 = type metadata accessor for SpeakableString();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v14 + 48))(v12, 1) == 1)
  {
    outlined destroy of SpeakableString?(v9[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    v8 = v9[8];
    p_countAndFlagsBits[5] = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v8, v13);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[10] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v9[11] = v4;
  *v4 = v9[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  return v7(v9[5], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t SearchForAccountsCATs.labelOtherBalanceType(enumValue:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  Swift::String *v3;
  Swift::String v4;
  const void *v5;
  char *v6;
  Swift::String *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  Swift::String *v11;
  _QWORD v12[4];
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String *v17;
  const void *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12[3] = a2;
  v18 = a1;
  v24 = 0;
  v23 = 0;
  v13 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = (char *)v12 - v13;
  v24 = MEMORY[0x24BDAC7A8](v18);
  v23 = v2;
  v19 = 1;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#LabelOtherBalanceType", 0x27uLL, 1);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v16 = _allocateUninitializedArray<A>(_:)();
  v17 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("enumValue", 9uLL, v19 & 1);
  v5 = v18;
  v6 = v20;
  *v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  v21 = type metadata accessor for SpeakableString();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    v11 = v17;
    v17[1]._countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[1] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.noResultsResponse(app:completion:)(uint64_t a1)
{
  Swift::String *v1;
  Swift::String *v3;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#NoResultsResponse", 0x23uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v3 = v1;
  *v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.noResultsResponse(app:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t SearchForAccountsCATs.noResultsResponse(app:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  Swift::String *v9;
  uint64_t v10;

  v10 = v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#NoResultsResponse", 0x23uLL, 1);
  v0[8] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v9 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (v10)
  {
    v7 = v8[6];
    v9[2]._object = (void *)type metadata accessor for SirikitApp();
    v9[1]._countAndFlagsBits = v7;
  }
  else
  {
    v9[1]._countAndFlagsBits = 0;
    v9[1]._object = 0;
    v9[2]._countAndFlagsBits = 0;
    v9[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v8[9] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v3 = (_QWORD *)swift_task_alloc();
  v8[10] = v3;
  *v3 = v8[2];
  v3[1] = RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:);
  return v6(v8[5], v1._countAndFlagsBits, v1._object, v5);
}

uint64_t SearchForAccountsCATs.noResultsResponse(app:)(uint64_t a1)
{
  Swift::String *v1;
  Swift::String *v3;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#NoResultsResponse", 0x23uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v3 = v1;
  *v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.promptCancelled(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.promptCancelled()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t SearchForAccountsCATs.promptCancelled()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.promptForSlotValue(slot:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String *v6;
  Swift::String v7;
  const void *v8;
  char *v9;
  Swift::String *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  Swift::String *v14;
  _QWORD v15[5];
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String *v20;
  const void *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = a1;
  v15[3] = a2;
  v15[4] = a3;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v16 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)v15 - v16;
  v29 = MEMORY[0x24BDAC7A8](v21);
  v27 = v4;
  v28 = v5;
  v26 = v3;
  v22 = 1;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptForSlotValue", 0x24uLL, 1);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v19 = _allocateUninitializedArray<A>(_:)();
  v20 = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v22 & 1);
  v8 = v21;
  v9 = v23;
  *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    v14 = v20;
    v20[1]._countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[0] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.promptForSlotValue(slot:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t SearchForAccountsCATs.promptForSlotValue(slot:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *p_countAndFlagsBits;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = (void *)v0[8];
  v11 = (const void *)v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptForSlotValue", 0x24uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_countAndFlagsBits = &v2->_countAndFlagsBits;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  v13 = type metadata accessor for SpeakableString();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v14 + 48))(v12, 1) == 1)
  {
    outlined destroy of SpeakableString?(v9[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    v8 = v9[8];
    p_countAndFlagsBits[5] = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v8, v13);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[10] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v9[11] = v4;
  *v4 = v9[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  return v7(v9[5], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t SearchForAccountsCATs.promptForSlotValue(slot:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  Swift::String *v3;
  Swift::String v4;
  const void *v5;
  char *v6;
  Swift::String *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  Swift::String *v11;
  _QWORD v12[4];
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String *v17;
  const void *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12[3] = a2;
  v18 = a1;
  v24 = 0;
  v23 = 0;
  v13 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = (char *)v12 - v13;
  v24 = MEMORY[0x24BDAC7A8](v18);
  v23 = v2;
  v19 = 1;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptForSlotValue", 0x24uLL, 1);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v16 = _allocateUninitializedArray<A>(_:)();
  v17 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v19 & 1);
  v5 = v18;
  v6 = v20;
  *v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  v21 = type metadata accessor for SpeakableString();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    v11 = v17;
    v17[1]._countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[1] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.slotDisplayValue(slot:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String *v6;
  Swift::String v7;
  const void *v8;
  char *v9;
  Swift::String *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  Swift::String *v14;
  _QWORD v15[5];
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String *v20;
  const void *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = a1;
  v15[3] = a2;
  v15[4] = a3;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v16 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)v15 - v16;
  v29 = MEMORY[0x24BDAC7A8](v21);
  v27 = v4;
  v28 = v5;
  v26 = v3;
  v22 = 1;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#SlotDisplayValue", 0x22uLL, 1);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v19 = _allocateUninitializedArray<A>(_:)();
  v20 = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v22 & 1);
  v8 = v21;
  v9 = v23;
  *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    v14 = v20;
    v20[1]._countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[0] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.slotDisplayValue(slot:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t SearchForAccountsCATs.slotDisplayValue(slot:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *p_countAndFlagsBits;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = (void *)v0[8];
  v11 = (const void *)v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#SlotDisplayValue", 0x22uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_countAndFlagsBits = &v2->_countAndFlagsBits;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  v13 = type metadata accessor for SpeakableString();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v14 + 48))(v12, 1) == 1)
  {
    outlined destroy of SpeakableString?(v9[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    v8 = v9[8];
    p_countAndFlagsBits[5] = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v8, v13);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[10] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v9[11] = v4;
  *v4 = v9[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  return v7(v9[5], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t SearchForAccountsCATs.slotDisplayValue(slot:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  Swift::String *v3;
  Swift::String v4;
  const void *v5;
  char *v6;
  Swift::String *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  Swift::String *v11;
  _QWORD v12[4];
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String *v17;
  const void *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12[3] = a2;
  v18 = a1;
  v24 = 0;
  v23 = 0;
  v13 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = (char *)v12 - v13;
  v24 = MEMORY[0x24BDAC7A8](v18);
  v23 = v2;
  v19 = 1;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#SlotDisplayValue", 0x22uLL, 1);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v16 = _allocateUninitializedArray<A>(_:)();
  v17 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v19 & 1);
  v5 = v18;
  v6 = v20;
  *v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  v21 = type metadata accessor for SpeakableString();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    v11 = v17;
    v17[1]._countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[1] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.unsupportedSlotValue(app:slot:completion:)(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String *v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String *v11;
  uint64_t v12;
  Swift::String v13;
  const void *v14;
  char *v15;
  uint64_t *p_countAndFlagsBits;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v18;
  Swift::String *v20;
  Swift::String *v21;
  _QWORD v22[2];
  Swift::String *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  Swift::String v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  Swift::String *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v39 = a1;
  v29 = a2;
  v30 = a3;
  v31 = a4;
  v44 = 0;
  v43 = 0;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v32 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v33 = (char *)v22 - v32;
  v44 = MEMORY[0x24BDAC7A8](v39);
  v43 = v5;
  v41 = v6;
  v42 = v7;
  v40 = v4;
  v36 = 1;
  v34 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#UnsupportedSlotValue", 0x26uLL, 1);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v37 = _allocateUninitializedArray<A>(_:)();
  v38 = v8;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, v36 & 1);
  *v38 = v9;
  swift_retain();
  if (v39)
  {
    v28 = v39;
    v27 = v39;
    v10 = type metadata accessor for SirikitApp();
    v11 = v38;
    v12 = v27;
    v38[2]._object = (void *)v10;
    v11[1]._countAndFlagsBits = v12;
  }
  else
  {
    v21 = v38;
    v38[1]._countAndFlagsBits = 0;
    v21[1]._object = 0;
    v21[2]._countAndFlagsBits = 0;
    v21[2]._object = 0;
  }
  v23 = v38 + 4;
  v24 = 1;
  v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  v14 = v29;
  v15 = v33;
  v38[3] = v13;
  outlined init with copy of SpeakableString?(v14, v15);
  v25 = type metadata accessor for SpeakableString();
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v26 + 48))(v33, v24) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v33);
    v20 = v38;
    v38[4]._countAndFlagsBits = 0;
    v20[4]._object = 0;
    v20[5]._countAndFlagsBits = 0;
    v20[5]._object = 0;
  }
  else
  {
    p_countAndFlagsBits = &v23->_countAndFlagsBits;
    v38[5]._object = (void *)v25;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v26 + 32))(boxed_opaque_existential_1, v33, v25);
  }
  v18 = v37;
  _finalizeUninitializedArray<A>(_:)();
  v22[0] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v22[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.unsupportedSlotValue(app:slot:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[9] = v3;
  v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return swift_task_switch();
}

uint64_t SearchForAccountsCATs.unsupportedSlotValue(app:slot:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  const void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  Swift::String *v15;
  uint64_t v16;

  v16 = v0[7];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#UnsupportedSlotValue", 0x26uLL, 1);
  v0[11] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v15 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (v16)
  {
    v13 = v14[7];
    v15[2]._object = (void *)type metadata accessor for SirikitApp();
    v15[1]._countAndFlagsBits = v13;
  }
  else
  {
    v15[1]._countAndFlagsBits = 0;
    v15[1]._object = 0;
    v15[2]._countAndFlagsBits = 0;
    v15[2]._object = 0;
  }
  v10 = (void *)v14[10];
  v9 = (const void *)v14[8];
  v15[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v9, v10);
  v11 = type metadata accessor for SpeakableString();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v12 + 48))(v10, 1) == 1)
  {
    outlined destroy of SpeakableString?(v14[10]);
    v15[4]._countAndFlagsBits = 0;
    v15[4]._object = 0;
    v15[5]._countAndFlagsBits = 0;
    v15[5]._object = 0;
  }
  else
  {
    v8 = v14[10];
    v15[5]._object = (void *)v11;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v15[4]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v8, v11);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v14[12] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v14[13] = v4;
  *v4 = v14[2];
  v4[1] = RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:);
  return v7(v14[6], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t SearchForAccountsCATs.unsupportedSlotValue(app:slot:)@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  Swift::String *v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String *v8;
  uint64_t v9;
  Swift::String v10;
  const void *v11;
  char *v12;
  uint64_t *p_countAndFlagsBits;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  Swift::String *v17;
  Swift::String *v18;
  _QWORD v19[3];
  Swift::String *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  unint64_t v28;
  char *v29;
  Swift::String v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  Swift::String *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v26 = a3;
  v35 = a1;
  v27 = a2;
  v38 = 0;
  v37 = 0;
  v36 = 0;
  v28 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v29 = (char *)v19 - v28;
  v38 = MEMORY[0x24BDAC7A8](v35);
  v37 = v4;
  v36 = v3;
  v32 = 1;
  v30 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#UnsupportedSlotValue", 0x26uLL, 1);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v33 = _allocateUninitializedArray<A>(_:)();
  v34 = v5;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, v32 & 1);
  *v34 = v6;
  swift_retain();
  if (v35)
  {
    v25 = v35;
    v24 = v35;
    v7 = type metadata accessor for SirikitApp();
    v8 = v34;
    v9 = v24;
    v34[2]._object = (void *)v7;
    v8[1]._countAndFlagsBits = v9;
  }
  else
  {
    v18 = v34;
    v34[1]._countAndFlagsBits = 0;
    v18[1]._object = 0;
    v18[2]._countAndFlagsBits = 0;
    v18[2]._object = 0;
  }
  v20 = v34 + 4;
  v21 = 1;
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  v11 = v27;
  v12 = v29;
  v34[3] = v10;
  outlined init with copy of SpeakableString?(v11, v12);
  v22 = type metadata accessor for SpeakableString();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v23 + 48))(v29, v21) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v29);
    v17 = v34;
    v34[4]._countAndFlagsBits = 0;
    v17[4]._object = 0;
    v17[5]._countAndFlagsBits = 0;
    v17[5]._object = 0;
  }
  else
  {
    p_countAndFlagsBits = &v20->_countAndFlagsBits;
    v34[5]._object = (void *)v22;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v23 + 32))(boxed_opaque_existential_1, v29, v22);
  }
  v15 = v33;
  _finalizeUninitializedArray<A>(_:)();
  v19[1] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v19[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for PaymentSlotDisplayValueProviding.slotDisplayValue(slot:) in conformance SearchForAccountsCATs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SearchForAccountsCATs.slotDisplayValue(slot:)(a1, a2);
}

uint64_t protocol witness for PaymentSlotDisplayValueProviding.labelForResponseSlot(slot:) in conformance SearchForAccountsCATs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SearchForAccountsCATs.labelForResponseSlot(slot:)(a1, a2);
}

uint64_t type metadata accessor for SearchForAccountsCATs()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SearchForAccountsCATs;
  if (!type metadata singleton initialization cache for SearchForAccountsCATs)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for SearchForAccountsCATs()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t ObjC metadata update function for SearchForAccountsCATs()
{
  return type metadata accessor for SearchForAccountsCATs();
}

uint64_t INCurrencyAmount.formattedString.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;

  v14 = objc_msgSend(v0, sel_amount);
  if (!v14)
    return 0;
  v13 = objc_msgSend(v0, sel_currencyCode);
  if (v13)
  {
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v1;

    v11 = v9;
    v12 = v10;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  if (!v12)
  {

    return 0;
  }
  type metadata accessor for NSNumberFormatter();
  v7 = SAUIAppPunchOut.__allocating_init()();
  objc_msgSend(v7, sel_setNumberStyle_, 2);
  swift_bridgeObjectRetain();
  v6 = (id)MEMORY[0x24957220C](v11, v12);
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_setCurrencyCode_, v6);

  v8 = objc_msgSend(v7, sel_stringFromNumber_, v14);
  if (v8)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = v4;
  }
  else
  {
    v5 = 0;
  }

  swift_bridgeObjectRelease();
  return v5;
}

uint64_t RequestPaymentConfirmIntentStrategy.actionForInput(_:confirmParameters:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_retain();
  BaseStrategy.actionForInput(_:)(a1, a2);
  return swift_release();
}

uint64_t RequestPaymentConfirmIntentStrategy.parseConfirmationResponse(input:confirmParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[13] = a3;
  v4[12] = a2;
  v4[11] = a1;
  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v4[14] = swift_task_alloc();
  v5 = type metadata accessor for Parse();
  v4[15] = v5;
  v4[16] = *(_QWORD *)(v5 - 8);
  v4[17] = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  v4[18] = v6;
  v4[19] = *(_QWORD *)(v6 - 8);
  v4[20] = swift_task_alloc();
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return swift_task_switch();
}

uint64_t RequestPaymentConfirmIntentStrategy.parseConfirmationResponse(input:confirmParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *buf;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint32_t v19;
  os_log_type_t v20;
  NSObject *v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 152);
  v18 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 16) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v1, v2, v18);
  v21 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 48) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v19 = *(_DWORD *)(v0 + 168);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v22 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v21, v20))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v13 = createStorage<A>(capacity:type:)(0);
    v14 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v16 + 56) = buf;
    *(_QWORD *)(v16 + 64) = v13;
    *(_QWORD *)(v16 + 72) = v14;
    serialize(_:at:)(0, (_BYTE **)(v16 + 56));
    serialize(_:at:)(0, (_BYTE **)(v16 + 56));
    *(_QWORD *)(v16 + 80) = v22;
    v15 = (_QWORD *)swift_task_alloc();
    v15[2] = v16 + 56;
    v15[3] = v16 + 64;
    v15[4] = v16 + 72;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v21, v20, "#RequestPaymentConfirmIntentStrategy parseConfirmationResponse", buf, v19);
    destroyStorage<A>(_:count:)(v13, 0, v11);
    destroyStorage<A>(_:count:)(v14, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v16 + 160);
  v4 = *(_QWORD *)(v16 + 152);
  v5 = *(_QWORD *)(v16 + 144);
  v9 = *(_QWORD *)(v16 + 136);
  v6 = *(_QWORD *)(v16 + 128);
  v7 = *(_QWORD *)(v16 + 120);
  v10 = *(_QWORD *)(v16 + 112);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v5);
  Input.parse.getter();
  Parse.confirmationResponse.getter(v10);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  IntentResolutionRecord.intent.getter();
  type metadata accessor for INRequestPaymentIntent();
  ConfirmIntentAnswer.init(confirmationResponse:intent:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v16 + 16) + 8))();
}

uint64_t RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[114] = v2;
  v3[113] = a2;
  v3[112] = a1;
  v3[74] = v3;
  v3[75] = 0;
  v3[76] = 0;
  v3[78] = 0;
  v3[85] = 0;
  v3[92] = 0;
  v3[98] = 0;
  v3[72] = 0;
  v3[73] = 0;
  v3[99] = 0;
  v3[100] = 0;
  v3[101] = 0;
  v3[102] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[115] = swift_task_alloc();
  v4 = type metadata accessor for NLContextUpdate();
  v3[116] = v4;
  v3[117] = *(_QWORD *)(v4 - 8);
  v3[118] = swift_task_alloc();
  v5 = type metadata accessor for TemplatingResult();
  v3[119] = v5;
  v3[120] = *(_QWORD *)(v5 - 8);
  v3[121] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[122] = swift_task_alloc();
  v3[123] = swift_task_alloc();
  v3[124] = swift_task_alloc();
  v3[125] = swift_task_alloc();
  type metadata accessor for Locale();
  v3[126] = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  v3[127] = v6;
  v3[128] = *(_QWORD *)(v6 - 8);
  v3[129] = swift_task_alloc();
  v3[130] = swift_task_alloc();
  v3[131] = swift_task_alloc();
  v3[132] = swift_task_alloc();
  v3[133] = swift_task_alloc();
  v3[134] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[135] = swift_task_alloc();
  v3[75] = a2;
  v3[76] = v2;
  return swift_task_switch();
}

uint64_t RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  char v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  _QWORD *v30;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String_optional v50;
  INPaymentStatus v51;
  INCurrencyAmount_optional v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint32_t v65;
  os_log_type_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint32_t v81;
  os_log_type_t v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint32_t v97;
  os_log_type_t v98;
  NSObject *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  id v114;
  void *v115;
  char *v116;
  const void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t *v130;
  uint64_t v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint8_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint32_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  NSObject *log;
  os_log_type_t v155;
  id v156;
  void *v157;
  id v158;
  __int128 v159;
  INCurrencyAmount_optional v160;
  uint64_t v161;
  uint64_t v162;
  id isa;
  id v164;
  uint64_t payee;
  id v166;
  INPerson_optional payer;
  id v168;
  id v169;
  uint64_t v170;
  uint8_t *v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint32_t size;
  int v177;
  os_log_t oslog;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void (*v184)(uint64_t, uint64_t);
  id v185;
  id v186;
  uint64_t v187;
  uint8_t *buf;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void (*v196)(uint64_t, uint64_t, uint64_t);
  uint32_t v197;
  os_log_type_t v198;
  NSObject *v199;
  uint64_t v200;
  uint8_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t (*v204)(uint64_t, uint64_t, uint64_t);
  uint64_t v205;
  INPerson_optional v206;
  NSUserActivity_optional v207;
  INPaymentMethod_optional v208;

  v193 = *(_QWORD *)(v0 + 1080);
  v1 = *(_QWORD *)(v0 + 1072);
  v194 = *(_QWORD *)(v0 + 1024);
  v195 = *(_QWORD *)(v0 + 1016);
  *(_QWORD *)(v0 + 592) = v0;
  v2 = SignpostName.makeRequestPaymentPromptForConfirm.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v193);
  v3 = Logger.payments.unsafeMutableAddressor();
  v196 = *(void (**)(uint64_t, uint64_t, uint64_t))(v194 + 16);
  v196(v1, v3, v195);
  v199 = Logger.logObject.getter();
  v198 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 616) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v197 = *(_DWORD *)(v0 + 1248);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v200 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v199, v198))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v187 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v189 = createStorage<A>(capacity:type:)(0);
    v190 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v192 + 864) = buf;
    *(_QWORD *)(v192 + 872) = v189;
    *(_QWORD *)(v192 + 880) = v190;
    serialize(_:at:)(0, (_BYTE **)(v192 + 864));
    serialize(_:at:)(0, (_BYTE **)(v192 + 864));
    *(_QWORD *)(v192 + 888) = v200;
    v191 = (_QWORD *)swift_task_alloc();
    v191[2] = v192 + 864;
    v191[3] = v192 + 872;
    v191[4] = v192 + 880;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v199, v198, "#RequestPaymentConfirmIntentStrategy makePromptForConfirmation", buf, v197);
    destroyStorage<A>(_:count:)(v189, 0, v187);
    destroyStorage<A>(_:count:)(v190, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v182 = *(_QWORD *)(v192 + 1072);
  v181 = *(_QWORD *)(v192 + 1024);
  v183 = *(_QWORD *)(v192 + 1016);

  v184 = *(void (**)(uint64_t, uint64_t))(v181 + 8);
  v184(v182, v183);
  *(_QWORD *)(v192 + 1088) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  v185 = (id)IntentResolutionRecord.intentResponse.getter();
  v4 = v185;
  *(_QWORD *)(v192 + 624) = v185;
  v186 = objc_msgSend(v185, sel_paymentRecord);

  *(_QWORD *)(v192 + 632) = v186;
  if (*(_QWORD *)(v192 + 632))
  {
    outlined destroy of SFRichText?((id *)(v192 + 632));
  }
  else
  {
    outlined destroy of SFRichText?((id *)(v192 + 632));
    IntentResolutionRecord.app.getter();
    LOBYTE(v180) = App.isFirstParty.getter();
    swift_release();
    if ((v180 & 1) != 0)
    {
      v5 = *(_QWORD *)(v192 + 1064);
      v175 = *(_QWORD *)(v192 + 1016);
      v6 = Logger.payments.unsafeMutableAddressor();
      v196(v5, v6, v175);
      oslog = (os_log_t)Logger.logObject.getter();
      LOBYTE(v177) = static os_log_type_t.debug.getter();
      *(_QWORD *)(v192 + 824) = 2;
      UnsignedInteger<>.init<A>(_:)();
      size = *(_DWORD *)(v192 + 1268);
      v179 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(oslog, (os_log_type_t)v177))
      {
        v171 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v170 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v172 = createStorage<A>(capacity:type:)(0);
        v173 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v192 + 832) = v171;
        *(_QWORD *)(v192 + 840) = v172;
        *(_QWORD *)(v192 + 848) = v173;
        serialize(_:at:)(0, (_BYTE **)(v192 + 832));
        serialize(_:at:)(0, (_BYTE **)(v192 + 832));
        *(_QWORD *)(v192 + 856) = v179;
        v174 = (_QWORD *)swift_task_alloc();
        v174[2] = v192 + 832;
        v174[3] = v192 + 840;
        v174[4] = v192 + 848;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_24701B000, oslog, (os_log_type_t)v177, "#RequestPaymentConfirmIntentStrategy makePromptForConfirmation 1P app did not contain payment record, creating our own here", v171, size);
        destroyStorage<A>(_:count:)(v172, 0, v170);
        destroyStorage<A>(_:count:)(v173, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v171, MEMORY[0x24BEE4260]);
      }
      swift_bridgeObjectRelease();
      v161 = *(_QWORD *)(v192 + 1064);
      v162 = *(_QWORD *)(v192 + 1016);

      v184(v161, v162);
      type metadata accessor for INRequestPaymentIntentResponse();
      v207.value.super.isa = 0;
      isa = INRequestPaymentIntentResponse.__allocating_init(code:userActivity:)(INRequestPaymentIntentResponseCodeReady, v207).super.super.isa;
      v7 = isa;
      v8 = *(void **)(v192 + 624);
      *(_QWORD *)(v192 + 624) = isa;

      type metadata accessor for INPaymentRecord();
      v164 = (id)IntentResolutionRecord.intent.getter();
      LOBYTE(payee) = objc_msgSend(v164, sel_payer);

      v166 = (id)IntentResolutionRecord.intent.getter();
      payer.value.super.isa = (Class)objc_msgSend(v166, sel_currencyAmount);

      payer.is_nil = objc_msgSend((id)objc_opt_self(), sel_applePayPaymentMethod);
      v168 = (id)IntentResolutionRecord.intent.getter();
      v169 = objc_msgSend(v168, sel_note);
      if (v169)
      {
        *(_QWORD *)&v159 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        BYTE8(v159) = v9;

        v160 = (INCurrencyAmount_optional)v159;
      }
      else
      {
        memset(&v160, 0, sizeof(v160));
      }

      v206.is_nil = payee;
      v208.is_nil = 0;
      v206.value.super.isa = 0;
      v208.value.super.isa = (Class)1;
      v158 = (id)INPaymentRecord.__allocating_init(payee:payer:currencyAmount:paymentMethod:note:status:feeAmount:)(v206, payer, v160, v208, v50, v51, v52);
      objc_msgSend(isa, sel_setPaymentRecord_);

    }
  }
  v156 = *(id *)(v192 + 624);
  v10 = v156;
  v11 = objc_msgSend(v156, sel_paymentRecord);
  *(_QWORD *)(v192 + 1096) = v11;
  v157 = v11;
  if (!v11)
  {
    v46 = *(_QWORD *)(v192 + 1032);
    v64 = *(_QWORD *)(v192 + 1016);

    v47 = Logger.payments.unsafeMutableAddressor();
    v196(v46, v47, v64);
    v67 = Logger.logObject.getter();
    v66 = static os_log_type_t.error.getter();
    *(_QWORD *)(v192 + 640) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v65 = *(_DWORD *)(v192 + 1252);
    v68 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v67, v66))
    {
      v60 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v61 = createStorage<A>(capacity:type:)(0);
      v62 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v192 + 648) = v60;
      *(_QWORD *)(v192 + 656) = v61;
      *(_QWORD *)(v192 + 664) = v62;
      serialize(_:at:)(0, (_BYTE **)(v192 + 648));
      serialize(_:at:)(0, (_BYTE **)(v192 + 648));
      *(_QWORD *)(v192 + 672) = v68;
      v63 = (_QWORD *)swift_task_alloc();
      v63[2] = v192 + 648;
      v63[3] = v192 + 656;
      v63[4] = v192 + 664;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24701B000, v67, v66, "#RequestPaymentConfirmIntentStrategy created no paymentRecord for intent response, throwing exception", v60, v65);
      destroyStorage<A>(_:count:)(v61, 0, v59);
      destroyStorage<A>(_:count:)(v62, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v60, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v58 = *(_QWORD *)(v192 + 1080);
    v53 = *(_QWORD *)(v192 + 1032);
    v54 = *(_QWORD *)(v192 + 1016);

    v184(v53, v54);
    type metadata accessor for INRequestPaymentIntent();
    v57 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v55 = v48;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v49 = v56;
    *(_QWORD *)(v49 + 8) = v55;
    *(_QWORD *)(v49 + 16) = 0;
    *(_QWORD *)(v49 + 24) = 0;
    *(_QWORD *)(v49 + 32) = 0;
    *(_QWORD *)(v49 + 40) = 0;
    *(_BYTE *)(v49 + 48) = 12;
    swift_willThrow();

    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v58);
    goto LABEL_57;
  }
  v12 = *(_QWORD *)(v192 + 1056);
  v146 = *(_QWORD *)(v192 + 1016);
  *(_QWORD *)(v192 + 680) = v11;

  v13 = Logger.payments.unsafeMutableAddressor();
  v196(v12, v13, v146);
  v14 = v157;
  v148 = swift_allocObject();
  *(_QWORD *)(v148 + 16) = v157;
  log = Logger.logObject.getter();
  v155 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v192 + 688) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v147 = *(_DWORD *)(v192 + 1256);
  v150 = swift_allocObject();
  *(_BYTE *)(v150 + 16) = 64;
  v151 = swift_allocObject();
  *(_BYTE *)(v151 + 16) = 8;
  v149 = swift_allocObject();
  *(_QWORD *)(v149 + 16) = partial apply for implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
  *(_QWORD *)(v149 + 24) = v148;
  v152 = swift_allocObject();
  *(_QWORD *)(v152 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v152 + 24) = v149;
  _allocateUninitializedArray<A>(_:)();
  v153 = v15;
  swift_retain();
  *v153 = partial apply for closure #1 in OSLogArguments.append(_:);
  v153[1] = v150;
  swift_retain();
  v153[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v153[3] = v151;
  swift_retain();
  v153[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v153[5] = v152;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(log, v155))
  {
    v143 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v142 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v144 = createStorage<A>(capacity:type:)(1);
    v145 = createStorage<A>(capacity:type:)(0);
    v201 = v143;
    v202 = v144;
    v203 = v145;
    serialize(_:at:)(2, &v201);
    serialize(_:at:)(1, &v201);
    v204 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v205 = v150;
    closure #1 in osLogInternal(_:log:type:)(&v204, (uint64_t)&v201, (uint64_t)&v202, (uint64_t)&v203);
    v204 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v205 = v151;
    closure #1 in osLogInternal(_:log:type:)(&v204, (uint64_t)&v201, (uint64_t)&v202, (uint64_t)&v203);
    v204 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v205 = v152;
    closure #1 in osLogInternal(_:log:type:)(&v204, (uint64_t)&v201, (uint64_t)&v202, (uint64_t)&v203);
    _os_log_impl(&dword_24701B000, log, v155, "#RequestPaymentConfirmIntentStrategy intent contained paymentRecord: %@", v143, v147);
    destroyStorage<A>(_:count:)(v144, 1, v142);
    destroyStorage<A>(_:count:)(v145, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v143, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v139 = *(_QWORD *)(v192 + 1056);
  v140 = *(_QWORD *)(v192 + 1016);

  v184(v139, v140);
  v16 = objc_msgSend(v157, sel_payer);
  *(_QWORD *)(v192 + 1104) = v16;
  v141 = v16;
  if (!v16)
  {
    v41 = *(_QWORD *)(v192 + 1040);
    v80 = *(_QWORD *)(v192 + 1016);
    v42 = Logger.payments.unsafeMutableAddressor();
    v196(v41, v42, v80);
    v83 = Logger.logObject.getter();
    v82 = static os_log_type_t.error.getter();
    *(_QWORD *)(v192 + 696) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v81 = *(_DWORD *)(v192 + 1260);
    v84 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v83, v82))
    {
      v76 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v75 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v77 = createStorage<A>(capacity:type:)(0);
      v78 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v192 + 704) = v76;
      *(_QWORD *)(v192 + 712) = v77;
      *(_QWORD *)(v192 + 720) = v78;
      serialize(_:at:)(0, (_BYTE **)(v192 + 704));
      serialize(_:at:)(0, (_BYTE **)(v192 + 704));
      *(_QWORD *)(v192 + 728) = v84;
      v79 = (_QWORD *)swift_task_alloc();
      v79[2] = v192 + 704;
      v79[3] = v192 + 712;
      v79[4] = v192 + 720;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24701B000, v83, v82, "#RequestPaymentConfirmIntentStrategy found no payer in paymentRecord, throwing exception", v76, v81);
      destroyStorage<A>(_:count:)(v77, 0, v75);
      destroyStorage<A>(_:count:)(v78, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v76, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v74 = *(_QWORD *)(v192 + 1080);
    v69 = *(_QWORD *)(v192 + 1040);
    v70 = *(_QWORD *)(v192 + 1016);

    v184(v69, v70);
    v43 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payer", 5uLL, 1);
    type metadata accessor for INRequestPaymentIntent();
    v73 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
    v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v71 = v44;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(Swift::String *)v45 = v43;
    *(_QWORD *)(v45 + 16) = v72;
    *(_QWORD *)(v45 + 24) = v71;
    *(_QWORD *)(v45 + 32) = 0;
    *(_QWORD *)(v45 + 40) = 0;
    *(_BYTE *)(v45 + 48) = 8;
    swift_willThrow();

    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v74);
    goto LABEL_57;
  }
  *(_QWORD *)(v192 + 736) = v16;
  v17 = objc_msgSend(v157, sel_currencyAmount);
  *(_QWORD *)(v192 + 1112) = v17;
  v138 = v17;
  if (!v17)
  {
    v36 = *(_QWORD *)(v192 + 1048);
    v96 = *(_QWORD *)(v192 + 1016);
    v37 = Logger.payments.unsafeMutableAddressor();
    v196(v36, v37, v96);
    v99 = Logger.logObject.getter();
    v98 = static os_log_type_t.error.getter();
    *(_QWORD *)(v192 + 744) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v97 = *(_DWORD *)(v192 + 1264);
    v100 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v99, v98))
    {
      v92 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v91 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v93 = createStorage<A>(capacity:type:)(0);
      v94 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v192 + 752) = v92;
      *(_QWORD *)(v192 + 760) = v93;
      *(_QWORD *)(v192 + 768) = v94;
      serialize(_:at:)(0, (_BYTE **)(v192 + 752));
      serialize(_:at:)(0, (_BYTE **)(v192 + 752));
      *(_QWORD *)(v192 + 776) = v100;
      v95 = (_QWORD *)swift_task_alloc();
      v95[2] = v192 + 752;
      v95[3] = v192 + 760;
      v95[4] = v192 + 768;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24701B000, v99, v98, "#RequestPaymentConfirmIntentStrategy found no currencyAmount in paymentRecord, throwing exception", v92, v97);
      destroyStorage<A>(_:count:)(v93, 0, v91);
      destroyStorage<A>(_:count:)(v94, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v92, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v90 = *(_QWORD *)(v192 + 1080);
    v85 = *(_QWORD *)(v192 + 1048);
    v86 = *(_QWORD *)(v192 + 1016);

    v184(v85, v86);
    v38 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("currencyAmount", 0xEuLL, 1);
    type metadata accessor for INRequestPaymentIntent();
    v89 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
    v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v87 = v39;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(Swift::String *)v40 = v38;
    *(_QWORD *)(v40 + 16) = v88;
    *(_QWORD *)(v40 + 24) = v87;
    *(_QWORD *)(v40 + 32) = 0;
    *(_QWORD *)(v40 + 40) = 0;
    *(_BYTE *)(v40 + 48) = 8;
    swift_willThrow();

    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v90);
LABEL_57:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v192 + 592) + 8))();
  }
  *(_QWORD *)(v192 + 784) = v17;
  v137 = objc_msgSend(v157, sel_note);
  if (v137)
  {
    v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v134 = v18;

    v135 = v133;
    v136 = v134;
  }
  else
  {
    v135 = 0;
    v136 = 0;
  }
  *(_QWORD *)(v192 + 1120) = v136;
  v126 = *(_QWORD *)(v192 + 912);
  *(_QWORD *)(v192 + 576) = v135;
  *(_QWORD *)(v192 + 584) = v136;
  v19 = objc_msgSend(v157, sel_feeAmount);
  *(_QWORD *)(v192 + 1128) = v19;
  v125 = v19;
  *(_QWORD *)(v192 + 792) = v19;
  type metadata accessor for PaymentsDialogConcept.Builder();
  v129 = (_QWORD *)PaymentsDialogConcept.Builder.__allocating_init()();
  *(_QWORD *)(v192 + 1136) = v129;
  *(_QWORD *)(v192 + 800) = v129;
  type metadata accessor for DialogPerson();
  v20 = v141;
  swift_retain();
  outlined init with copy of GlobalsProviding(v126 + 104, v192 + 136);
  swift_release();
  v128 = *(_QWORD *)(v192 + 160);
  v127 = *(_QWORD *)(v192 + 168);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v192 + 136), v128);
  (*(void (**)(uint64_t))(v127 + 16))(v128);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v192 + 176), *(_QWORD *)(v192 + 200));
  dispatch thunk of DeviceState.siriLocale.getter();
  v131 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
  __swift_destroy_boxed_opaque_existential_0(v192 + 176);
  __swift_destroy_boxed_opaque_existential_0(v192 + 136);
  swift_retain();
  v130 = (_QWORD *)((char *)v129 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payerName);
  swift_beginAccess();
  *v130 = v131;
  swift_release();
  swift_endAccess();
  swift_release();
  type metadata accessor for DialogCurrency.Builder();
  DialogCurrency.Builder.__allocating_init()();
  v21 = objc_msgSend(v138, sel_amount);
  v132 = v21;
  if (v21)
  {
    objc_msgSend(v21, sel_doubleValue);

  }
  dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
  swift_release();
  v124 = objc_msgSend(v138, sel_currencyCode);
  if (v124)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v122 = v22;

    v123 = v122;
  }
  else
  {
    v123 = 0;
  }
  if (v123)
  {
    v121 = *(_QWORD *)(v192 + 1000);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v23 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v121, 0, 1);
  }
  else
  {
    v101 = *(_QWORD *)(v192 + 1000);
    v35 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v101, 1);
  }
  v119 = *(_QWORD *)(v192 + 1000);
  dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)();
  outlined destroy of SpeakableString?(v119);
  swift_release();
  v120 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
  swift_release();
  swift_retain();
  swift_beginAccess();
  v129[2] = v120;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRetain();
  if (v136)
  {
    v118 = *(_QWORD *)(v192 + 992);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v24 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v118, 0, 1);
  }
  else
  {
    v102 = *(_QWORD *)(v192 + 992);
    v34 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v102, 1);
  }
  v117 = *(const void **)(v192 + 992);
  v115 = *(void **)(v192 + 984);
  outlined init with copy of SpeakableString?(v117, v115);
  v116 = (char *)v129 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo;
  swift_beginAccess();
  outlined assign with take of SpeakableString?(v115, v116);
  swift_endAccess();
  outlined destroy of SpeakableString?((uint64_t)v117);
  DialogCurrency.Builder.__allocating_init()();
  v25 = v125;
  if (v125)
  {
    v114 = objc_msgSend(v125, sel_amount);

    if (v114)
    {
      objc_msgSend(v114, sel_doubleValue);

    }
  }
  dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
  swift_release();
  v26 = v125;
  if (v125
    && ((v113 = objc_msgSend(v125, sel_currencyCode)) == 0
      ? (v112 = 0)
      : (static String._unconditionallyBridgeFromObjectiveC(_:)(), v111 = v27, v113, v112 = v111),
        v125,
        v112))
  {
    v110 = *(_QWORD *)(v192 + 976);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v28 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v110, 0, 1);
  }
  else
  {
    v103 = *(_QWORD *)(v192 + 976);
    v33 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v103, 1);
  }
  v106 = *(_QWORD *)(v192 + 976);
  dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)();
  outlined destroy of SpeakableString?(v106);
  swift_release();
  v107 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
  swift_release();
  swift_retain();
  swift_beginAccess();
  v129[4] = v107;
  swift_release();
  swift_endAccess();
  swift_release();
  IntentResolutionRecord.app.getter();
  v108 = App.sirikitApp.getter();
  swift_release();
  swift_retain();
  swift_beginAccess();
  v129[3] = v108;
  swift_release();
  swift_endAccess();
  swift_release();
  v109 = PaymentsDialogConcept.Builder.build()();
  *(_QWORD *)(v192 + 1144) = v109;
  *(_QWORD *)(v192 + 808) = v109;
  if ((static RFFeatureFlags.ResponseFramework.SMART.getter() & 1) != 0)
  {
    v105 = *(void **)(v192 + 624);
    *(_QWORD *)(v192 + 1152) = v105;
    v29 = v105;
    v30 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v192 + 1160) = v30;
    *v30 = *(_QWORD *)(v192 + 592);
    v30[1] = RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
    return RequestPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:response:)(*(_QWORD *)(v192 + 896), *(_QWORD *)(v192 + 904), v109, (uint64_t)v105);
  }
  else
  {
    v104 = *(_QWORD *)(v192 + 912);
    swift_retain();
    *(_QWORD *)(v192 + 1176) = *(_QWORD *)(v104 + 16);
    swift_retain();
    swift_release();
    swift_retain();
    v32 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v192 + 1184) = v32;
    *v32 = *(_QWORD *)(v192 + 592);
    v32[1] = RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
    return RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:)(*(_QWORD *)(v192 + 968), v109);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 592) = *v1;
  *(_QWORD *)(v2 + 1168) = v0;
  swift_task_dealloc();
  if (!v0)

  return swift_task_switch();
}

{
  uint64_t v0;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;

  v2 = *(id *)(v0 + 1128);
  v3 = *(id *)(v0 + 1112);
  v4 = *(id *)(v0 + 1104);
  v5 = *(id *)(v0 + 1096);
  v6 = *(_QWORD *)(v0 + 1080);
  *(_QWORD *)(v0 + 592) = v0;
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 592) + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 592) = *v1;
  *(_QWORD *)(v2 + 1192) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[10];

  v1 = v0[118];
  v9 = v0[114];
  v0[74] = v0;
  static PaymentsContextProvider.confirmationContextUpdate(isSend:)(0, v1);
  swift_retain();
  outlined init with copy of GlobalsProviding(v9 + 24, (uint64_t)(v0 + 27));
  swift_release();
  swift_retain();
  outlined init with copy of GlobalsProviding(v9 + 104, (uint64_t)(v0 + 32));
  swift_release();
  v7 = v0[35];
  v6 = v0[36];
  __swift_project_boxed_opaque_existential_1(v0 + 32, v7);
  (*(void (**)(uint64_t))(v6 + 16))(v7);
  swift_retain();
  v8 = *(_QWORD *)(v9 + 16);
  swift_retain();
  swift_release();
  v10 = type metadata accessor for RequestPaymentCATs();
  v19[3] = v10;
  v19[4] = &protocol witness table for RequestPaymentCATs;
  v19[0] = v8;
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)(v0 + 27), (uint64_t)&v18, (uint64_t)v19, v0 + 2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  v17 = IntentResolutionRecord.app.getter();
  v0[150] = v17;
  v16 = IntentResolutionRecord.intent.getter();
  v0[151] = v16;
  v13 = (void *)v0[78];
  v0[152] = v13;
  v2 = v13;
  swift_retain();
  v11 = *(_QWORD *)(v9 + 16);
  swift_retain();
  swift_release();
  v0[40] = v10;
  v0[41] = &protocol witness table for RequestPaymentCATs;
  v14 = (uint64_t)(v0 + 37);
  v0[37] = v11;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v12 + 1224) = v3;
  v15 = type metadata accessor for INRequestPaymentIntent();
  v4 = type metadata accessor for INRequestPaymentIntentResponse();
  *v3 = *(_QWORD *)(v12 + 592);
  v3[1] = RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  return ConfirmationViewBuilder.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:)(v17, v16, (uint64_t)v13, v14, v15, v4, (uint64_t)&protocol witness table for INRequestPaymentIntent, (uint64_t)&protocol witness table for INRequestPaymentIntentResponse);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 1232);
  v14 = *(id *)(v0 + 1128);
  v15 = *(id *)(v0 + 1112);
  v16 = *(id *)(v0 + 1104);
  v17 = *(id *)(v0 + 1096);
  v18 = *(_QWORD *)(v0 + 1080);
  v12 = *(_QWORD *)(v0 + 968);
  v11 = *(_QWORD *)(v0 + 960);
  v13 = *(_QWORD *)(v0 + 952);
  v9 = *(_QWORD *)(v0 + 944);
  v8 = *(_QWORD *)(v0 + 936);
  v10 = *(_QWORD *)(v0 + 928);
  v7 = *(_QWORD *)(v0 + 920);
  v5 = *(_QWORD *)(v0 + 912);
  v6 = *(uint64_t **)(v0 + 896);
  *(_QWORD *)(v0 + 592) = v0;
  *(_QWORD *)(v0 + 816) = v1;
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, v0 + 336);
  swift_release();
  v4 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 368);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 336), v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v9, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v7, 0, 1, v10);
  *(_QWORD *)(v0 + 416) = 0;
  *(_QWORD *)(v0 + 424) = 0;
  *(_QWORD *)(v0 + 432) = 0;
  *(_QWORD *)(v0 + 440) = 0;
  *(_QWORD *)(v0 + 448) = 0;
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v6[3] = type metadata accessor for AceOutput();
  v6[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v6);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?(v0 + 416);
  outlined destroy of NLContextUpdate?(v7);
  __swift_destroy_boxed_opaque_existential_0(v0 + 376);
  __swift_destroy_boxed_opaque_existential_0(v0 + 336);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 592) + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;

  v1 = *(void **)(v0 + 1152);
  v3 = *(id *)(v0 + 1128);
  v4 = *(id *)(v0 + 1112);
  v5 = *(id *)(v0 + 1104);
  v6 = *(id *)(v0 + 1096);
  v7 = *(_QWORD *)(v0 + 1080);
  *(_QWORD *)(v0 + 592) = v0;

  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 592) + 8))();
}

{
  uint64_t v0;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;

  v2 = *(id *)(v0 + 1128);
  v3 = *(id *)(v0 + 1112);
  v4 = *(id *)(v0 + 1104);
  v5 = *(id *)(v0 + 1096);
  v6 = *(_QWORD *)(v0 + 1080);
  *(_QWORD *)(v0 + 592) = v0;
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 592) + 8))();
}

{
  uint64_t v0;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  v2 = *(id *)(v0 + 1216);
  v3 = *(id *)(v0 + 1208);
  v10 = *(id *)(v0 + 1128);
  v11 = *(id *)(v0 + 1112);
  v12 = *(id *)(v0 + 1104);
  v13 = *(id *)(v0 + 1096);
  v14 = *(_QWORD *)(v0 + 1080);
  v8 = *(_QWORD *)(v0 + 968);
  v7 = *(_QWORD *)(v0 + 960);
  v9 = *(_QWORD *)(v0 + 952);
  v6 = *(_QWORD *)(v0 + 944);
  v4 = *(_QWORD *)(v0 + 936);
  v5 = *(_QWORD *)(v0 + 928);
  *(_QWORD *)(v0 + 592) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 296);

  swift_release();
  outlined destroy of ConfirmationViewBuilder(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 592) + 8))();
}

uint64_t RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v8 = (_QWORD *)*v2;
  v6 = *v2 + 16;
  v7 = *v2 + 296;
  v8[74] = *v2;
  v8[154] = a1;
  v8[155] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v4 = *(void **)(v6 + 1200);
    v5 = *(void **)(v6 + 1192);
    __swift_destroy_boxed_opaque_existential_0(v7);

    swift_release();
    outlined destroy of ConfirmationViewBuilder(v6);
  }
  return swift_task_switch();
}

INRequestPaymentIntentResponse __swiftcall INRequestPaymentIntentResponse.__allocating_init(code:userActivity:)(INRequestPaymentIntentResponseCode code, NSUserActivity_optional userActivity)
{
  id v2;
  Class isa;

  isa = userActivity.value.super.isa;
  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (INRequestPaymentIntentResponse)@nonobjc INRequestPaymentIntentResponse.init(code:userActivity:)(code, isa);
}

INPaymentRecord_optional __swiftcall INPaymentRecord.__allocating_init(payee:payer:currencyAmount:paymentMethod:note:status:feeAmount:)(INPerson_optional payee, INPerson_optional payer, INCurrencyAmount_optional currencyAmount, INPaymentMethod_optional paymentMethod, Swift::String_optional note, INPaymentStatus status, INCurrencyAmount_optional feeAmount)
{
  id v7;
  objc_class *v8;
  Swift::Bool v9;
  void *v10;
  Class v11;
  void *v12;
  Class v13;
  uint64_t v14;
  Class v15;
  void *v16;
  Class isa;
  INPaymentRecord_optional result;

  isa = payee.value.super.isa;
  v10 = *(void **)&payee.is_nil;
  v11 = payer.value.super.isa;
  v12 = *(void **)&payer.is_nil;
  v13 = currencyAmount.value.super.isa;
  v14 = *(_QWORD *)&currencyAmount.is_nil;
  v15 = paymentMethod.value.super.isa;
  v16 = *(void **)&paymentMethod.is_nil;
  v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v8 = (objc_class *)@nonobjc INPaymentRecord.init(payee:payer:currencyAmount:paymentMethod:note:status:feeAmount:)(isa, v10, v11, v12, (uint64_t)v13, v14, (uint64_t)v15, v16);
  result.value.super.isa = v8;
  result.is_nil = v9;
  return result;
}

uint64_t RequestPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[47] = v4;
  v5[46] = a4;
  v5[45] = a3;
  v5[44] = a2;
  v5[43] = a1;
  v5[37] = v5;
  v5[38] = 0;
  v5[39] = 0;
  v5[40] = 0;
  v5[41] = 0;
  v5[42] = 0;
  type metadata accessor for CATOption();
  v5[48] = swift_task_alloc();
  v5[38] = a2;
  v5[39] = a3;
  v5[40] = a4;
  v5[41] = v4;
  return swift_task_switch();
}

uint64_t RequestPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:response:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = v0[45];
  v0[37] = v0;
  type metadata accessor for RequestPaymentCATsModern();
  default argument 0 of CATWrapper.init(options:globals:)();
  v0[49] = CATWrapperSimple.__allocating_init(options:globals:)();
  swift_retain();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 400) = v1;
  *v1 = *(_QWORD *)(v3 + 296);
  v1[1] = RequestPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:response:);
  return RequestPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:)(v4);
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[13];

  v1 = v0[51];
  v12 = v0[47];
  v0[37] = v0;
  v0[42] = v1;
  swift_retain();
  outlined init with copy of GlobalsProviding(v12 + 24, (uint64_t)(v0 + 17));
  swift_release();
  swift_retain();
  outlined init with copy of GlobalsProviding(v12 + 104, (uint64_t)(v0 + 22));
  swift_release();
  v9 = v0[25];
  v8 = v0[26];
  __swift_project_boxed_opaque_existential_1(v0 + 22, v9);
  (*(void (**)(uint64_t))(v8 + 16))(v9);
  swift_retain();
  v10 = *(_QWORD *)(v12 + 16);
  swift_retain();
  swift_release();
  v13 = type metadata accessor for RequestPaymentCATs();
  v22[3] = v13;
  v22[4] = &protocol witness table for RequestPaymentCATs;
  v22[0] = v10;
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)(v0 + 17), (uint64_t)&v21, (uint64_t)v22, v0 + 2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 22));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  v20 = IntentResolutionRecord.app.getter();
  v0[53] = v20;
  v16 = IntentResolutionRecord.intent.getter();
  v0[54] = v16;
  swift_retain();
  v11 = *(_QWORD *)(v12 + 16);
  swift_retain();
  swift_release();
  v0[30] = v13;
  v0[31] = &protocol witness table for RequestPaymentCATs;
  v17 = (uint64_t)(v0 + 27);
  v0[27] = v11;
  swift_retain();
  v14 = *(_QWORD *)(v12 + 16);
  swift_retain();
  swift_release();
  v0[35] = v13;
  v0[36] = &protocol witness table for RequestPaymentCATs;
  v18 = (uint64_t)(v0 + 32);
  v0[32] = v14;
  v2 = (_QWORD *)swift_task_alloc();
  v15[55] = v2;
  v19 = type metadata accessor for INRequestPaymentIntent();
  v3 = type metadata accessor for INRequestPaymentIntentResponse();
  *v2 = v15[37];
  v2[1] = RequestPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:response:);
  v4 = v15[51];
  v5 = v15[46];
  v6 = v15[43];
  v22[9] = v3;
  v22[10] = &protocol witness table for INRequestPaymentIntent;
  v22[11] = &protocol witness table for INRequestPaymentIntentResponse;
  return ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(v6, v20, v16, v5, v4, v17, v18, v19);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *v1;
  v4 = *v1 + 16;
  v5 = *v1 + 216;
  v6 = *v1 + 256;
  *(_QWORD *)(v7 + 296) = *v1;
  *(_QWORD *)(v7 + 448) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(void **)(v4 + 416);
    __swift_destroy_boxed_opaque_existential_0(v6);
    __swift_destroy_boxed_opaque_existential_0(v5);

    swift_release();
    outlined destroy of ConfirmationViewBuilder(v4);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 408);
  *(_QWORD *)(v0 + 296) = v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 296) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 296) = v0;
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 296) + 8))();
}

{
  _QWORD *v0;
  id v2;
  id v3;

  v2 = (id)v0[54];
  v3 = (id)v0[51];
  v0[37] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));

  swift_release();
  outlined destroy of ConfirmationViewBuilder((uint64_t)(v0 + 2));

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[37] + 8))();
}

uint64_t RequestPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:response:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[37] = *v2;
  v3[51] = a1;
  v3[52] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    swift_release();
  }
  return swift_task_switch();
}

uint64_t RequestPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[33] = v3;
  v4[32] = a3;
  v4[31] = a1;
  v4[26] = v4;
  v4[27] = 0;
  v4[28] = 0;
  v4[29] = 0;
  v4[22] = 0;
  v4[23] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v4[34] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v4[35] = swift_task_alloc();
  v5 = type metadata accessor for TemplatingResult();
  v4[36] = v5;
  v4[37] = *(_QWORD *)(v5 - 8);
  v4[38] = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  v4[39] = v6;
  v4[40] = *(_QWORD *)(v6 - 8);
  v4[41] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v4[42] = swift_task_alloc();
  v4[27] = a2;
  v4[28] = a3;
  v4[29] = v3;
  return swift_task_switch();
}

uint64_t RequestPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v14;
  uint8_t *buf;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint32_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;

  v19 = *(_QWORD *)(v0 + 336);
  v20 = *(_QWORD *)(v0 + 328);
  v23 = *(_QWORD *)(v0 + 320);
  v24 = *(_QWORD *)(v0 + 312);
  *(_QWORD *)(v0 + 208) = v0;
  v1 = SignpostName.makeRequestPaymentErrorResponse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v1, v1[1], *((unsigned __int8 *)v1 + 16), v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  v21 = (id)IntentResolutionRecord.intentResponse.getter();
  v22 = objc_msgSend(v21, sel_code);

  v25 = static PaymentIntentCATResponseCode.from(_:)((unint64_t)v22);
  v26 = v2;
  *(_QWORD *)(v0 + 344) = v2;
  *(_QWORD *)(v0 + 176) = v25;
  *(_QWORD *)(v0 + 184) = v2;
  v3 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v20, v3, v24);
  swift_bridgeObjectRetain();
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v25;
  *(_QWORD *)(v28 + 24) = v26;
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 240) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v27 = *(_DWORD *)(v0 + 368);
  v30 = swift_allocObject();
  *(_BYTE *)(v30 + 16) = 32;
  v31 = swift_allocObject();
  *(_BYTE *)(v31 + 16) = 8;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(_QWORD *)(v29 + 24) = v28;
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v32 + 24) = v29;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v33 = v4;
  swift_retain();
  *v33 = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[1] = v30;
  swift_retain();
  v33[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[3] = v31;
  swift_retain();
  v33[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[5] = v32;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v34, v35))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v16 = createStorage<A>(capacity:type:)(0);
    v17 = createStorage<A>(capacity:type:)(1);
    v36 = buf;
    v37 = v16;
    v38 = v17;
    serialize(_:at:)(2, &v36);
    serialize(_:at:)(1, &v36);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v31;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    _os_log_impl(&dword_24701B000, v34, v35, "#RequestPaymentConfirmIntentStrategy makeErrorResponse, code %s", buf, v27);
    destroyStorage<A>(_:count:)(v16, 0, v14);
    destroyStorage<A>(_:count:)(v17, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v8 = v18[41];
  v7 = v18[40];
  v9 = v18[39];
  v10 = v18[33];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_retain();
  outlined init with copy of GlobalsProviding(v10 + 144, (uint64_t)(v18 + 2));
  swift_release();
  v11 = v18[5];
  v12 = v18[6];
  __swift_project_boxed_opaque_existential_1(v18 + 2, v11);
  v13 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 + 48) + **(int **)(v12 + 48));
  v5 = (_QWORD *)swift_task_alloc();
  v18[44] = v5;
  *v5 = v18[26];
  v5[1] = RequestPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:);
  return v13(v18[35], v18[32], v11, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 208) = *v1;
  *(_QWORD *)(v2 + 360) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v1 = v0[37];
  v2 = v0[36];
  v3 = v0[35];
  v0[26] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v13 = v23[42];
    outlined destroy of TemplatingResult?(v23[35]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 2));
    v23[24] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v23[25] = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    type metadata accessor for INRequestPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v12 = String.init(stringInterpolation:)();
    v11 = v9;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v10 = v12;
    *(_QWORD *)(v10 + 8) = v11;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 16;
    swift_willThrow();
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v13);
  }
  else
  {
    v20 = v23[42];
    v21 = v23[38];
    v18 = v23[37];
    v19 = v23[36];
    v22 = v23[34];
    v16 = v23[33];
    v17 = (uint64_t *)v23[31];
    (*(void (**)(void))(v18 + 32))();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 2));
    swift_retain();
    outlined init with copy of GlobalsProviding(v16 + 104, (uint64_t)(v23 + 7));
    swift_release();
    v15 = v23[10];
    v14 = v23[11];
    __swift_project_boxed_opaque_existential_1(v23 + 7, v15);
    (*(void (**)(uint64_t))(v14 + 16))(v15);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v22, 1);
    v23[17] = 0;
    v23[18] = 0;
    v23[19] = 0;
    v23[20] = 0;
    v23[21] = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v17[3] = type metadata accessor for AceOutput();
    v17[4] = MEMORY[0x24BE99088];
    __swift_allocate_boxed_opaque_existential_1(v17);
    static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v23 + 17));
    outlined destroy of NLContextUpdate?(v22);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 12));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 7));
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v19);
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v20);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v23[26] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 336);
  *(_QWORD *)(v0 + 208) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 208) + 8))();
}

uint64_t RequestPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[26] = v2;
  v3[25] = a1;
  v3[17] = v3;
  v3[18] = 0;
  v3[19] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[27] = swift_task_alloc();
  v4 = type metadata accessor for NLContextUpdate();
  v3[28] = v4;
  v3[29] = *(_QWORD *)(v4 - 8);
  v3[30] = swift_task_alloc();
  v5 = type metadata accessor for TemplatingResult();
  v3[31] = v5;
  v3[32] = *(_QWORD *)(v5 - 8);
  v3[33] = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  v3[34] = v6;
  v3[35] = *(_QWORD *)(v6 - 8);
  v3[36] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[37] = swift_task_alloc();
  v3[18] = a2;
  v3[19] = v2;
  return swift_task_switch();
}

uint64_t RequestPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *buf;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint32_t v19;
  os_log_type_t v20;
  NSObject *v21;
  uint64_t v22;

  v16 = *(_QWORD *)(v0 + 296);
  v1 = *(_QWORD *)(v0 + 288);
  v17 = *(_QWORD *)(v0 + 280);
  v18 = *(_QWORD *)(v0 + 272);
  *(_QWORD *)(v0 + 136) = v0;
  v2 = SignpostName.makeConfirmationRejectedResponse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v16);
  v3 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v1, v3, v18);
  v21 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 160) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v19 = *(_DWORD *)(v0 + 328);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v22 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v21, v20))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v12 = createStorage<A>(capacity:type:)(0);
    v13 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v15 + 168) = buf;
    *(_QWORD *)(v15 + 176) = v12;
    *(_QWORD *)(v15 + 184) = v13;
    serialize(_:at:)(0, (_BYTE **)(v15 + 168));
    serialize(_:at:)(0, (_BYTE **)(v15 + 168));
    *(_QWORD *)(v15 + 192) = v22;
    v14 = (_QWORD *)swift_task_alloc();
    v14[2] = v15 + 168;
    v14[3] = v15 + 176;
    v14[4] = v15 + 184;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v21, v20, "#RequestPaymentConfirmIntentStrategy makeConfirmationRejectedResponse", buf, v19);
    destroyStorage<A>(_:count:)(v12, 0, v10);
    destroyStorage<A>(_:count:)(v13, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v15 + 288);
  v6 = *(_QWORD *)(v15 + 280);
  v8 = *(_QWORD *)(v15 + 272);
  v9 = *(_QWORD *)(v15 + 208);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_retain();
  *(_QWORD *)(v15 + 304) = *(_QWORD *)(v9 + 16);
  swift_retain();
  swift_release();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v15 + 312) = v4;
  *v4 = *(_QWORD *)(v15 + 136);
  v4[1] = RequestPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:);
  return RequestPaymentCATs.promptCancelled()(*(_QWORD *)(v15 + 264));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 136) = *v1;
  *(_QWORD *)(v2 + 320) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = v0[37];
  v11 = v0[33];
  v8 = v0[32];
  v9 = v0[31];
  v12 = v0[30];
  v6 = v0[29];
  v7 = v0[28];
  v13 = v0[27];
  v4 = v0[26];
  v5 = (uint64_t *)v0[25];
  v0[17] = v0;
  static PaymentsContextProvider.confirmationContextUpdate(isSend:)(0, v12);
  swift_retain();
  outlined init with copy of GlobalsProviding(v4 + 104, (uint64_t)(v0 + 2));
  swift_release();
  v3 = v0[5];
  v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v3);
  (*(void (**)(uint64_t))(v2 + 16))(v3);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v13, v12, v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, v7);
  v0[12] = 0;
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  v0[16] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v5[3] = type metadata accessor for AceOutput();
  v5[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v5);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 12));
  outlined destroy of NLContextUpdate?(v13);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v12, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v9);
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[17] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 136) = v0;
  swift_release();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 136) + 8))();
}

uint64_t RequestPaymentConfirmIntentStrategy.makeRepromptOnEmptyParse(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[10] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v4 = type metadata accessor for Logger();
  v3[11] = v4;
  v3[12] = *(_QWORD *)(v4 - 8);
  v3[13] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t RequestPaymentConfirmIntentStrategy.makeRepromptOnEmptyParse(confirmParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint32_t v16;
  os_log_type_t v17;
  NSObject *v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 16) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v1, v2, v15);
  v18 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 40) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v16 = *(_DWORD *)(v0 + 112);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v19 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v18, v17))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v10 = createStorage<A>(capacity:type:)(0);
    v11 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v13 + 48) = buf;
    *(_QWORD *)(v13 + 56) = v10;
    *(_QWORD *)(v13 + 64) = v11;
    serialize(_:at:)(0, (_BYTE **)(v13 + 48));
    serialize(_:at:)(0, (_BYTE **)(v13 + 48));
    *(_QWORD *)(v13 + 72) = v19;
    v12 = (_QWORD *)swift_task_alloc();
    v12[2] = v13 + 48;
    v12[3] = v13 + 56;
    v12[4] = v13 + 64;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v18, v17, "#RequestPaymentConfirmIntentStrategy makeRepromptOnEmptyParse", buf, v16);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v13 + 104);
  v4 = *(_QWORD *)(v13 + 96);
  v5 = *(_QWORD *)(v13 + 88);
  v6 = *(uint64_t **)(v13 + 80);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v5);
  type metadata accessor for SABaseCommand();
  _allocateUninitializedArray<A>(_:)();
  v6[3] = type metadata accessor for AceOutput();
  v6[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v6);
  AceOutput.init(commands:flowActivity:)();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v13 + 16) + 8))();
}

uint64_t RequestPaymentConfirmIntentStrategy.makeRepromptOnLowConfidence(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[10] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v4 = type metadata accessor for Logger();
  v3[11] = v4;
  v3[12] = *(_QWORD *)(v4 - 8);
  v3[13] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t RequestPaymentConfirmIntentStrategy.makeRepromptOnLowConfidence(confirmParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint32_t v16;
  os_log_type_t v17;
  NSObject *v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 16) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v1, v2, v15);
  v18 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 40) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v16 = *(_DWORD *)(v0 + 112);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v19 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v18, v17))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v10 = createStorage<A>(capacity:type:)(0);
    v11 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v13 + 48) = buf;
    *(_QWORD *)(v13 + 56) = v10;
    *(_QWORD *)(v13 + 64) = v11;
    serialize(_:at:)(0, (_BYTE **)(v13 + 48));
    serialize(_:at:)(0, (_BYTE **)(v13 + 48));
    *(_QWORD *)(v13 + 72) = v19;
    v12 = (_QWORD *)swift_task_alloc();
    v12[2] = v13 + 48;
    v12[3] = v13 + 56;
    v12[4] = v13 + 64;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v18, v17, "#RequestPaymentConfirmIntentStrategy makeRepromptOnLowConfidence", buf, v16);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v13 + 104);
  v4 = *(_QWORD *)(v13 + 96);
  v5 = *(_QWORD *)(v13 + 88);
  v6 = *(uint64_t **)(v13 + 80);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v5);
  type metadata accessor for SABaseCommand();
  _allocateUninitializedArray<A>(_:)();
  v6[3] = type metadata accessor for AceOutput();
  v6[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v6);
  AceOutput.init(commands:flowActivity:)();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v13 + 16) + 8))();
}

uint64_t RequestPaymentConfirmIntentStrategy.makeFlowCancelledResponse(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[26] = v2;
  v3[25] = a1;
  v3[17] = v3;
  v3[18] = 0;
  v3[19] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[27] = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  v3[28] = v4;
  v3[29] = *(_QWORD *)(v4 - 8);
  v3[30] = swift_task_alloc();
  v5 = type metadata accessor for Logger();
  v3[31] = v5;
  v3[32] = *(_QWORD *)(v5 - 8);
  v3[33] = swift_task_alloc();
  v3[18] = a2;
  v3[19] = v2;
  return swift_task_switch();
}

uint64_t RequestPaymentConfirmIntentStrategy.makeFlowCancelledResponse(confirmParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint32_t v17;
  os_log_type_t v18;
  NSObject *v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 264);
  v15 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 136) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v2, v16);
  v19 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 160) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v17 = *(_DWORD *)(v0 + 296);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v20 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v19, v18))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v11 = createStorage<A>(capacity:type:)(0);
    v12 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v14 + 168) = buf;
    *(_QWORD *)(v14 + 176) = v11;
    *(_QWORD *)(v14 + 184) = v12;
    serialize(_:at:)(0, (_BYTE **)(v14 + 168));
    serialize(_:at:)(0, (_BYTE **)(v14 + 168));
    *(_QWORD *)(v14 + 192) = v20;
    v13 = (_QWORD *)swift_task_alloc();
    v13[2] = v14 + 168;
    v13[3] = v14 + 176;
    v13[4] = v14 + 184;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v19, v18, "#RequestPaymentConfirmIntentStrategy makeFlowCancelledResponse", buf, v17);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v14 + 264);
  v5 = *(_QWORD *)(v14 + 256);
  v7 = *(_QWORD *)(v14 + 248);
  v8 = *(_QWORD *)(v14 + 208);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  swift_retain();
  *(_QWORD *)(v14 + 272) = *(_QWORD *)(v8 + 16);
  swift_retain();
  swift_release();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v14 + 280) = v3;
  *v3 = *(_QWORD *)(v14 + 136);
  v3[1] = RequestPaymentConfirmIntentStrategy.makeFlowCancelledResponse(confirmParameters:);
  return RequestPaymentCATs.promptCancelled()(*(_QWORD *)(v14 + 240));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 136) = *v1;
  *(_QWORD *)(v2 + 288) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = v0[30];
  v7 = v0[29];
  v8 = v0[28];
  v10 = v0[27];
  v5 = v0[26];
  v6 = (uint64_t *)v0[25];
  v0[17] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, (uint64_t)(v0 + 2));
  swift_release();
  v4 = v0[5];
  v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v10, 1);
  v0[12] = 0;
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  v0[16] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v6[3] = type metadata accessor for AceOutput();
  v6[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v6);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 12));
  outlined destroy of NLContextUpdate?(v10);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[17] + 8))();
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.actionForInput(_:confirmParameters:) in conformance RequestPaymentConfirmIntentStrategy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RequestPaymentConfirmIntentStrategy.actionForInput(_:confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.parseConfirmationResponse(input:confirmParameters:) in conformance RequestPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentConfirmIntentStrategy.parseConfirmationResponse(input:confirmParameters:)(a1, a2, a3);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makePromptForConfirmation(confirmParameters:) in conformance RequestPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeRepromptOnEmptyParse(confirmParameters:) in conformance RequestPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentConfirmIntentStrategy.makeRepromptOnEmptyParse(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeRepromptOnLowConfidence(confirmParameters:) in conformance RequestPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentConfirmIntentStrategy.makeRepromptOnLowConfidence(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeConfirmationRejectedResponse(confirmParameters:) in conformance RequestPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeFlowCancelledResponse(confirmParameters:) in conformance RequestPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentConfirmIntentStrategy.makeFlowCancelledResponse(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeErrorResponse(error:confirmParameters:) in conformance RequestPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:)(a1, a2, a3);
}

id @nonobjc INRequestPaymentIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  void *v2;
  id v5;

  v5 = objc_msgSend(v2, sel_initWithCode_userActivity_, a1);

  return v5;
}

id @nonobjc INPaymentRecord.init(payee:payer:currencyAmount:paymentMethod:note:status:feeAmount:)(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v9;
  uint64_t v10;
  void *v11;
  void *v17;

  if (a6)
  {
    v10 = MEMORY[0x24957220C](a5);
    swift_bridgeObjectRelease();
    v11 = (void *)v10;
  }
  else
  {
    v11 = 0;
  }
  v9 = objc_msgSend(v17, sel_initWithPayee_payer_currencyAmount_paymentMethod_note_status_feeAmount_, a1, a2, a3, a4, a8);

  return v9;
}

uint64_t sub_24714EDB0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_24714EDEC()
{
  return swift_deallocObject();
}

uint64_t sub_24714EE14()
{
  return swift_deallocObject();
}

uint64_t sub_24714EE3C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24714EE78()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24714EEB4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24714EEF0()
{
  return swift_deallocObject();
}

uint64_t sub_24714EF18()
{
  return swift_deallocObject();
}

uint64_t sub_24714EF40()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24714EF7C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for RequestPaymentConfirmIntentStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for RequestPaymentConfirmIntentStrategy;
  if (!type metadata singleton initialization cache for RequestPaymentConfirmIntentStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t PaymentsHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:completion:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t *v25;
  _BYTE **v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint32_t v44;
  uint64_t v45;
  int v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint32_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v35 = a1;
  v34 = a2;
  v31 = a3;
  v32 = a4;
  v61 = 0;
  v60 = 0;
  v57 = 0;
  v58 = 0;
  v56 = 0;
  v30 = 0;
  v33 = *v4;
  v45 = 0;
  v40 = type metadata accessor for Logger();
  v39 = *(_QWORD *)(v40 - 8);
  v36 = (*(_QWORD *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = (char *)&v16 - v36;
  v38 = (char *)&v16 - v36;
  v61 = MEMORY[0x24BDAC7A8](v35);
  v60 = v6;
  v59 = *(_QWORD *)(v7 + 80);
  v57 = v8;
  v58 = v9;
  v56 = v37;
  v55 = *(_QWORD *)(v7 + 88);
  v10 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v5, v10, v40);
  v47 = Logger.logObject.getter();
  v46 = static os_log_type_t.debug.getter();
  v43 = &v53;
  v53 = 2;
  v41 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v42 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v44 = v54;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v48 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v47, (os_log_type_t)v46))
  {
    v11 = v30;
    v20 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v19 = 0;
    v21 = createStorage<A>(capacity:type:)(0);
    v22 = createStorage<A>(capacity:type:)(v19);
    v26 = &v52;
    v52 = v20;
    v27 = &v51;
    v51 = v21;
    v24 = &v50;
    v50 = v22;
    v23 = 0;
    serialize(_:at:)(0, &v52);
    serialize(_:at:)(v23, v26);
    v49 = v48;
    v25 = &v16;
    MEMORY[0x24BDAC7A8](&v16);
    v12 = v27;
    v13 = &v16 - 6;
    v28 = &v16 - 6;
    v13[2] = (uint64_t)v26;
    v13[3] = (uint64_t)v12;
    v13[4] = v14;
    v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v11)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, v47, (os_log_type_t)v46, "#PaymentsHandleIntentStrategy makeIntentExecutionBehavior", v20, v44);
      v17 = 0;
      destroyStorage<A>(_:count:)(v21, 0, v18);
      destroyStorage<A>(_:count:)(v22, v17, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v20, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v40);
  swift_retain();
  type metadata accessor for SiriKitIntentExecutionBehavior();
  v16 = static SiriKitIntentExecutionBehavior.standard()();
  v31(v16);
  swift_release();
  return swift_release();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance PaymentsHandleIntentStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;

  v7 = v3;
  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 24) = v4;
  type metadata accessor for PaymentsHandleIntentStrategy(0, a3[10], a3[11], a3[12]);
  *v4 = *(_QWORD *)(v7 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance PaymentsHandleIntentStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;

  v7 = v3;
  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 24) = v4;
  type metadata accessor for PaymentsHandleIntentStrategy(0, a3[10], a3[11], a3[12]);
  *v4 = *(_QWORD *)(v7 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance PaymentsHandleIntentStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;

  v7 = v3;
  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 24) = v4;
  type metadata accessor for PaymentsHandleIntentStrategy(0, a3[10], a3[11], a3[12]);
  *v4 = *(_QWORD *)(v7 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance PaymentsHandleIntentStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;

  v7 = v3;
  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 24) = v4;
  type metadata accessor for PaymentsHandleIntentStrategy(0, a3[10], a3[11], a3[12]);
  *v4 = *(_QWORD *)(v7 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance PaymentsHandleIntentStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;

  v7 = v3;
  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 24) = v4;
  type metadata accessor for PaymentsHandleIntentStrategy(0, a3[10], a3[11], a3[12]);
  *v4 = *(_QWORD *)(v7 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance PaymentsHandleIntentStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;

  v7 = v3;
  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 24) = v4;
  type metadata accessor for PaymentsHandleIntentStrategy(0, a3[10], a3[11], a3[12]);
  *v4 = *(_QWORD *)(v7 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance PaymentsHandleIntentStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;

  v7 = v3;
  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 24) = v4;
  type metadata accessor for PaymentsHandleIntentStrategy(0, a3[10], a3[11], a3[12]);
  *v4 = *(_QWORD *)(v7 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:)();
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance PaymentsHandleIntentStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;

  v7 = v3;
  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 24) = v4;
  type metadata accessor for PaymentsHandleIntentStrategy(0, a3[10], a3[11], a3[12]);
  *v4 = *(_QWORD *)(v7 + 16);
  v4[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)();
}

uint64_t type metadata accessor for PaymentsHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PaymentsHandleIntentStrategy);
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in PaymentsHandleIntentStrategy<A, B>(uint64_t a1)
{
  return MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsHandleIntentStrategy<A, B>, a1);
}

uint64_t ReferenceResolutionClient.resolveAppDisambiguationReference(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE **v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint32_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  NSObject *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint32_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;

  v57 = a1;
  v74 = 0;
  v73 = 0;
  v72 = 0;
  v70 = 0;
  v50 = 0;
  v55 = 0;
  v51 = type metadata accessor for Logger();
  v52 = *(_QWORD *)(v51 - 8);
  v53 = (*(_QWORD *)(v52 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v51);
  v54 = (char *)&v20 - v53;
  v56 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v55);
  v61 = (uint64_t)&v20 - v56;
  v62 = type metadata accessor for RREntity();
  v60 = *(_QWORD *)(v62 - 8);
  v58 = (*(_QWORD *)(v60 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v57);
  v59 = (char *)&v20 - v58;
  v74 = (char *)&v20 - v58;
  v73 = v2;
  v72 = v1;
  ReferenceResolutionClient.resolvePositionEntity(from:useCase:)(v2, 0, v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v61, 1, v62) == 1)
  {
    v20 = 0;
    outlined destroy of RREntity?(v61);
    return v20;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v59, v61, v62);
    v4 = RREntity.usoEntity.getter();
    v5 = v54;
    v31 = v4;
    type metadata accessor for UsoEntity_common_App();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    v32 = v71;
    v70 = v71;
    v6 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v5, v6, v51);
    swift_retain();
    v39 = 7;
    v40 = swift_allocObject();
    *(_QWORD *)(v40 + 16) = v32;
    v48 = Logger.logObject.getter();
    v49 = static os_log_type_t.debug.getter();
    v35 = &v68;
    v68 = 12;
    v33 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v34 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v36 = v69;
    v37 = 17;
    v42 = swift_allocObject();
    *(_BYTE *)(v42 + 16) = 32;
    v43 = swift_allocObject();
    *(_BYTE *)(v43 + 16) = 8;
    v38 = 32;
    v7 = swift_allocObject();
    v8 = v40;
    v41 = v7;
    *(_QWORD *)(v7 + 16) = partial apply for implicit closure #1 in ReferenceResolutionClient.resolveAppDisambiguationReference(from:);
    *(_QWORD *)(v7 + 24) = v8;
    v9 = swift_allocObject();
    v10 = v41;
    v45 = v9;
    *(_QWORD *)(v9 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v9 + 24) = v10;
    v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v44 = _allocateUninitializedArray<A>(_:)();
    v46 = v11;
    swift_retain();
    v12 = v42;
    v13 = v46;
    *v46 = partial apply for closure #1 in OSLogArguments.append(_:);
    v13[1] = v12;
    swift_retain();
    v14 = v43;
    v15 = v46;
    v46[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v15[3] = v14;
    swift_retain();
    v16 = v45;
    v17 = v46;
    v46[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v17[5] = v16;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v48, (os_log_type_t)v49))
    {
      v18 = v50;
      v24 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v25 = createStorage<A>(capacity:type:)(0);
      v26 = createStorage<A>(capacity:type:)(1);
      v27 = &v67;
      v67 = v24;
      v28 = &v66;
      v66 = v25;
      v29 = &v65;
      v65 = v26;
      serialize(_:at:)(2, &v67);
      serialize(_:at:)(1, v27);
      v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v64 = v42;
      closure #1 in osLogInternal(_:log:type:)(&v63, (uint64_t)v27, (uint64_t)v28, (uint64_t)v29);
      v30 = v18;
      if (v18)
      {
        __break(1u);
      }
      else
      {
        v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v64 = v43;
        closure #1 in osLogInternal(_:log:type:)(&v63, (uint64_t)&v67, (uint64_t)&v66, (uint64_t)&v65);
        v22 = 0;
        v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v64 = v45;
        closure #1 in osLogInternal(_:log:type:)(&v63, (uint64_t)&v67, (uint64_t)&v66, (uint64_t)&v65);
        _os_log_impl(&dword_24701B000, v48, (os_log_type_t)v49, "#ReferenceResolution Converted positional reference entity to UsoEntity_common_App: %s", v24, v36);
        destroyStorage<A>(_:count:)(v25, 0, v23);
        destroyStorage<A>(_:count:)(v26, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v24, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v52 + 8))(v54, v51);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v59, v62);
    return v32;
  }
}

uint64_t ReferenceResolutionClient.resolvePersonDisambiguationReference(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE **v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint32_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  NSObject *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint32_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;

  v58 = a1;
  v76 = 0;
  v75 = 0;
  v74 = 0;
  v72 = 0;
  v51 = 0;
  v56 = 0;
  v52 = type metadata accessor for Logger();
  v53 = *(_QWORD *)(v52 - 8);
  v54 = (*(_QWORD *)(v53 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v52);
  v55 = (char *)&v20 - v54;
  v57 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v56);
  v62 = (uint64_t)&v20 - v57;
  v64 = type metadata accessor for RREntity();
  v61 = *(_QWORD *)(v64 - 8);
  v59 = (*(_QWORD *)(v61 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v58);
  v60 = (char *)&v20 - v59;
  v76 = (char *)&v20 - v59;
  v75 = v2;
  v74 = v1;
  v63 = 1;
  ReferenceResolutionClient.resolvePositionEntity(from:useCase:)(v2, 1, v3);
  if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v61 + 48))(v62, v63, v64) == 1)
  {
    v21 = 0;
    outlined destroy of RREntity?(v62);
    return v21;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v60, v62, v64);
    v4 = RREntity.usoEntity.getter();
    v5 = v55;
    v32 = v4;
    type metadata accessor for UsoEntity_common_Person();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    v33 = v73;
    v72 = v73;
    v6 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v5, v6, v52);
    swift_retain();
    v40 = 7;
    v41 = swift_allocObject();
    *(_QWORD *)(v41 + 16) = v33;
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.debug.getter();
    v36 = &v70;
    v70 = 12;
    v34 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v35 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v37 = v71;
    v38 = 17;
    v43 = swift_allocObject();
    *(_BYTE *)(v43 + 16) = 32;
    v44 = swift_allocObject();
    *(_BYTE *)(v44 + 16) = 8;
    v39 = 32;
    v7 = swift_allocObject();
    v8 = v41;
    v42 = v7;
    *(_QWORD *)(v7 + 16) = partial apply for implicit closure #1 in ReferenceResolutionClient.resolvePersonDisambiguationReference(from:);
    *(_QWORD *)(v7 + 24) = v8;
    v9 = swift_allocObject();
    v10 = v42;
    v46 = v9;
    *(_QWORD *)(v9 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v9 + 24) = v10;
    v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v45 = _allocateUninitializedArray<A>(_:)();
    v47 = v11;
    swift_retain();
    v12 = v43;
    v13 = v47;
    *v47 = partial apply for closure #1 in OSLogArguments.append(_:);
    v13[1] = v12;
    swift_retain();
    v14 = v44;
    v15 = v47;
    v47[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v15[3] = v14;
    swift_retain();
    v16 = v46;
    v17 = v47;
    v47[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v17[5] = v16;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v49, (os_log_type_t)v50))
    {
      v18 = v51;
      v25 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v26 = createStorage<A>(capacity:type:)(0);
      v27 = createStorage<A>(capacity:type:)(1);
      v28 = &v69;
      v69 = v25;
      v29 = &v68;
      v68 = v26;
      v30 = &v67;
      v67 = v27;
      serialize(_:at:)(2, &v69);
      serialize(_:at:)(1, v28);
      v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v66 = v43;
      closure #1 in osLogInternal(_:log:type:)(&v65, (uint64_t)v28, (uint64_t)v29, (uint64_t)v30);
      v31 = v18;
      if (v18)
      {
        __break(1u);
      }
      else
      {
        v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v66 = v44;
        closure #1 in osLogInternal(_:log:type:)(&v65, (uint64_t)&v69, (uint64_t)&v68, (uint64_t)&v67);
        v23 = 0;
        v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v66 = v46;
        closure #1 in osLogInternal(_:log:type:)(&v65, (uint64_t)&v69, (uint64_t)&v68, (uint64_t)&v67);
        _os_log_impl(&dword_24701B000, v49, (os_log_type_t)v50, "#ReferenceResolution Converted positional reference entity to UsoEntity_common_Person: %s", v25, v37);
        destroyStorage<A>(_:count:)(v26, 0, v24);
        destroyStorage<A>(_:count:)(v27, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v25, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v52);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v60, v64);
    return v33;
  }
}

uint64_t static ReferenceResolutionClient.PaymentsReferenceResolutionUseCase.allCases.getter()
{
  uint64_t result;
  _BYTE *v1;

  result = _allocateUninitializedArray<A>(_:)();
  *v1 = 0;
  v1[1] = 1;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t ReferenceResolutionClient.PaymentsReferenceResolutionUseCase.hashValue.getter()
{
  lazy protocol witness table accessor for type ReferenceResolutionClient.PaymentsReferenceResolutionUseCase and conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase()
{
  return ReferenceResolutionClient.PaymentsReferenceResolutionUseCase.hashValue.getter();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static ReferenceResolutionClient.PaymentsReferenceResolutionUseCase.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t ReferenceResolutionClient.resolveCommonPerson()@<X0>(void *a1@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for UsoEntityBuilder_common_Person();
  UsoEntityBuilder_common_Person.__allocating_init()();
  v4 = MEMORY[0x2495716FC]();
  swift_release();
  if (v4)
  {
    ReferenceResolutionClient.resolveEntity(referenceEntity:)(v4, a1);
    return swift_release();
  }
  else
  {
    v2 = type metadata accessor for RREntity();
    return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1);
  }
}

uint64_t ReferenceResolutionClient.resolveEntity(referenceEntity:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD v113[2];
  uint64_t v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE **v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  id v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t *v125;
  uint32_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  NSObject *v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint8_t *v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE **v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t *v153;
  uint32_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  NSObject *v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint8_t *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t *v175;
  _QWORD *v176;
  _BYTE **v177;
  uint64_t *v178;
  _QWORD *v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t *v183;
  uint32_t v184;
  int v185;
  NSObject *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint8_t *v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t *v202;
  _QWORD *v203;
  _BYTE **v204;
  uint64_t *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t *v211;
  uint32_t v212;
  int v213;
  NSObject *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint8_t *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  uint64_t *v225;
  _QWORD *v226;
  _BYTE **v227;
  uint64_t *v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t *v234;
  uint32_t v235;
  int v236;
  NSObject *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint8_t *v245;
  uint64_t v246;
  uint64_t v247;
  _BYTE **v248;
  uint64_t *v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t *v255;
  uint32_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  NSObject *v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  uint8_t *v272;
  uint64_t v273;
  uint64_t v274;
  _BYTE **v275;
  uint64_t *v276;
  uint64_t *v277;
  uint64_t v278;
  unint64_t v279;
  void (*v280)(char *, uint64_t *, uint64_t);
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t *v284;
  uint32_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  NSObject *v297;
  int v298;
  void (*v299)(char *, id *, uint64_t);
  void (*v300)(uint64_t *);
  int v301;
  void *v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  char *v313;
  unint64_t v314;
  char *v315;
  unint64_t v316;
  char *v317;
  unint64_t v318;
  char *v319;
  unint64_t v320;
  char *v321;
  unint64_t v322;
  char *v323;
  unint64_t v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  char *v330;
  unint64_t v331;
  char *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  id *v337;
  unint64_t v338;
  uint64_t *v339;
  unint64_t v340;
  char *v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  char *v347;
  unint64_t v348;
  char *v349;
  unint64_t v350;
  char *v351;
  unint64_t v352;
  uint64_t v353;
  char *v354;
  unint64_t v355;
  char *v356;
  uint64_t v357;
  void (*v358)(char *, uint64_t);
  uint64_t v359;
  uint64_t v360;
  unsigned int v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  _QWORD *v365;
  id *v366;
  uint64_t v367;
  id *v368;
  uint64_t (*v369)(uint64_t, uint64_t, uint64_t);
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  _BYTE *v373;
  uint64_t v374;
  uint32_t v375;
  uint64_t (*v376)(uint64_t, uint64_t, uint64_t);
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  _BYTE *v380;
  uint64_t v381;
  uint64_t v382;
  uint32_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  _BYTE *v388;
  uint64_t v389;
  uint64_t v390;
  uint32_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  _BYTE *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint32_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  _BYTE *v406;
  uint64_t v407;
  uint32_t v408;
  uint64_t (*v409)(uint64_t, uint64_t, uint64_t);
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  _BYTE *v413;
  uint64_t v414;
  uint32_t v415;
  uint64_t (*v416)(uint64_t, uint64_t, uint64_t);
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  _BYTE *v420;
  uint64_t v421;
  uint32_t v422;
  id v423;
  uint64_t v424;
  uint64_t v425;
  char *v426;
  char *v427;
  char *v428;
  char *v429;

  v302 = a2;
  v359 = a1;
  v427 = 0;
  v426 = 0;
  v425 = 0;
  v424 = 0;
  v423 = 0;
  v303 = 0;
  v428 = 0;
  v402 = 0;
  v392 = 0;
  v384 = 0;
  v429 = 0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  v304 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v305 = (uint64_t)v113 - v304;
  v306 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v113 - v304);
  v307 = (uint64_t)v113 - v306;
  v308 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v113 - v306);
  v309 = (uint64_t)v113 - v308;
  v360 = 0;
  v310 = type metadata accessor for Logger();
  v311 = *(_QWORD *)(v310 - 8);
  v312 = (*(_QWORD *)(v311 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v360);
  v313 = (char *)v113 - v312;
  v314 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v315 = (char *)v113 - v314;
  v316 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v317 = (char *)v113 - v316;
  v318 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v319 = (char *)v113 - v318;
  v320 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v321 = (char *)v113 - v320;
  v322 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v323 = (char *)v113 - v322;
  v324 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v325 = (char *)v113 - v324;
  v326 = type metadata accessor for RRCandidate();
  v327 = *(_QWORD *)(v326 - 8);
  v328 = *(_QWORD *)(v327 + 64);
  v329 = (v328 + 15) & 0xFFFFFFFFFFFFFFF0;
  v18 = MEMORY[0x24BDAC7A8](v360);
  v330 = (char *)v113 - v329;
  v331 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v18);
  v332 = (char *)v113 - v331;
  v429 = (char *)v113 - v331;
  v333 = type metadata accessor for RRResult();
  v334 = *(_QWORD *)(v333 - 8);
  v335 = *(_QWORD *)(v334 + 64);
  v336 = (v335 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v333);
  v337 = (id *)((char *)v113 - v336);
  v338 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  v21 = MEMORY[0x24BDAC7A8]((char *)v113 - v336);
  v339 = (_QWORD *)((char *)v113 - v338);
  v340 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v21);
  v341 = (char *)v113 - v340;
  v428 = (char *)v113 - v340;
  v342 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRFilter?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v360);
  v362 = (uint64_t)v113 - v342;
  v364 = type metadata accessor for RRQuery();
  v363 = *(_QWORD *)(v364 - 8);
  v343 = (*(_QWORD *)(v363 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v364);
  v365 = (_QWORD *)((char *)v113 - v343);
  v367 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  v344 = (*(_QWORD *)(*(_QWORD *)(v367 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = MEMORY[0x24BDAC7A8](v367);
  v368 = (id *)((char *)v113 - v344);
  v345 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v23);
  v366 = (id *)((char *)v113 - v345);
  v427 = (char *)v113 - v345;
  v353 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?)
                               - 8)
                   + 64);
  v346 = (v353 + 15) & 0xFFFFFFFFFFFFFFF0;
  v25 = MEMORY[0x24BDAC7A8](v360);
  v347 = (char *)v113 - v346;
  v348 = (v353 + 15) & 0xFFFFFFFFFFFFFFF0;
  v26 = MEMORY[0x24BDAC7A8](v25);
  v349 = (char *)v113 - v348;
  v350 = (v353 + 15) & 0xFFFFFFFFFFFFFFF0;
  v27 = MEMORY[0x24BDAC7A8](v26);
  v351 = (char *)v113 - v350;
  v352 = (v353 + 15) & 0xFFFFFFFFFFFFFFF0;
  v28 = MEMORY[0x24BDAC7A8](v27);
  v354 = (char *)v113 - v352;
  v355 = (v353 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v28);
  v356 = (char *)v113 - v355;
  v426 = (char *)v113 - v355;
  v425 = v29;
  v424 = v2;
  v357 = type metadata accessor for RREntity();
  v358 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v357 - 8) + 56);
  v361 = 1;
  v358(v356, 1);
  swift_retain();
  v30 = v363;
  *v365 = v359;
  (*(void (**)(void))(v30 + 104))();
  v31 = type metadata accessor for RRFilter();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v31 - 8) + 56))(v362, v361);
  dispatch thunk of ReferenceResolutionClient.resolve(reference:filter:)();
  outlined destroy of RRFilter?(v362);
  (*(void (**)(_QWORD *, uint64_t))(v363 + 8))(v365, v364);
  outlined init with copy of Result<RRResult, Error>(v366, v368);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v299 = *(void (**)(char *, id *, uint64_t))(v334 + 32);
    v299(v341, v368, v333);
    v428 = v341;
    v300 = *(void (**)(uint64_t *))(v334 + 16);
    v300(v339);
    v301 = (*(uint64_t (**)(uint64_t *, uint64_t))(v334 + 88))(v339, v333);
    if (v301 == *MEMORY[0x24BEA5AA8])
    {
      v32 = v325;
      (*(void (**)(uint64_t *, uint64_t))(v334 + 96))(v339, v333);
      v280 = *(void (**)(char *, uint64_t *, uint64_t))(v327 + 32);
      v280(v332, v339, v326);
      v429 = v332;
      v33 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v311 + 16))(v32, v33, v310);
      (*(void (**)(char *, char *, uint64_t))(v327 + 16))(v330, v332, v326);
      v279 = (*(unsigned __int8 *)(v327 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v327 + 80);
      v288 = 7;
      v281 = swift_allocObject();
      v280((char *)(v281 + v279), (uint64_t *)v330, v326);
      swift_retain();
      v287 = 32;
      v34 = swift_allocObject();
      v35 = v281;
      v289 = v34;
      *(_QWORD *)(v34 + 16) = partial apply for implicit closure #1 in ReferenceResolutionClient.resolveEntity(referenceEntity:);
      *(_QWORD *)(v34 + 24) = v35;
      swift_release();
      v297 = Logger.logObject.getter();
      v298 = static os_log_type_t.debug.getter();
      v284 = &v374;
      v374 = 12;
      v282 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v283 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v285 = v375;
      v286 = 17;
      v291 = swift_allocObject();
      *(_BYTE *)(v291 + 16) = 32;
      v292 = swift_allocObject();
      *(_BYTE *)(v292 + 16) = 8;
      v36 = swift_allocObject();
      v37 = v289;
      v290 = v36;
      *(_QWORD *)(v36 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
      *(_QWORD *)(v36 + 24) = v37;
      v38 = swift_allocObject();
      v39 = v290;
      v294 = v38;
      *(_QWORD *)(v38 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v38 + 24) = v39;
      v296 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v293 = _allocateUninitializedArray<A>(_:)();
      v295 = v40;
      swift_retain();
      v41 = v291;
      v42 = v295;
      *v295 = partial apply for closure #1 in OSLogArguments.append(_:);
      v42[1] = v41;
      swift_retain();
      v43 = v292;
      v44 = v295;
      v295[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v44[3] = v43;
      swift_retain();
      v45 = v294;
      v46 = v295;
      v295[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v46[5] = v45;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v297, (os_log_type_t)v298))
      {
        v47 = v303;
        v272 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v271 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v273 = createStorage<A>(capacity:type:)(0);
        v274 = createStorage<A>(capacity:type:)(1);
        v275 = &v373;
        v373 = v272;
        v276 = &v372;
        v372 = v273;
        v277 = &v371;
        v371 = v274;
        serialize(_:at:)(2, &v373);
        serialize(_:at:)(1, v275);
        v369 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v370 = v291;
        closure #1 in osLogInternal(_:log:type:)(&v369, (uint64_t)v275, (uint64_t)v276, (uint64_t)v277);
        v278 = v47;
        if (v47)
        {
          __break(1u);
        }
        else
        {
          v369 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v370 = v292;
          closure #1 in osLogInternal(_:log:type:)(&v369, (uint64_t)&v373, (uint64_t)&v372, (uint64_t)&v371);
          v270 = 0;
          v369 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v370 = v294;
          closure #1 in osLogInternal(_:log:type:)(&v369, (uint64_t)&v373, (uint64_t)&v372, (uint64_t)&v371);
          _os_log_impl(&dword_24701B000, v297, (os_log_type_t)v298, "#ReferenceResolution Found a candidate %s", v272, v285);
          destroyStorage<A>(_:count:)(v273, 0, v271);
          destroyStorage<A>(_:count:)(v274, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v272, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v311 + 8))(v325, v310);
      RRCandidate.entity.getter();
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v358)(v354, 0, 1, v357);
      outlined assign with take of RREntity?(v354, v356);
      (*(void (**)(char *, uint64_t))(v327 + 8))(v332, v326);
      goto LABEL_57;
    }
    if (v301 == *MEMORY[0x24BEA5AB8])
    {
      v62 = v321;
      (*(void (**)(uint64_t *, uint64_t))(v334 + 96))(v339, v333);
      v231 = *v339;
      v392 = v231;
      v63 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v311 + 16))(v62, v63, v310);
      v237 = Logger.logObject.getter();
      v236 = static os_log_type_t.debug.getter();
      v234 = &v390;
      v390 = 2;
      v232 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v233 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v235 = v391;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v238 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v237, (os_log_type_t)v236))
      {
        v64 = v303;
        v221 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v219 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v220 = 0;
        v222 = createStorage<A>(capacity:type:)(0);
        v223 = createStorage<A>(capacity:type:)(v220);
        v227 = &v388;
        v388 = v221;
        v228 = &v387;
        v387 = v222;
        v225 = &v386;
        v386 = v223;
        v224 = 0;
        serialize(_:at:)(0, &v388);
        serialize(_:at:)(v224, v227);
        v385 = v238;
        v226 = v113;
        MEMORY[0x24BDAC7A8](v113);
        v65 = v228;
        v66 = &v113[-6];
        v229 = &v113[-6];
        v66[2] = v227;
        v66[3] = v65;
        v66[4] = v67;
        v230 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v64)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_24701B000, v237, (os_log_type_t)v236, "#ReferenceResolution Found ambiguous entities -> returning the first one", v221, v235);
          v218 = 0;
          destroyStorage<A>(_:count:)(v222, 0, v219);
          destroyStorage<A>(_:count:)(v223, v218, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v221, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v311 + 8))(v321, v310);
      swift_bridgeObjectRetain();
      v217 = &v389;
      v389 = v231;
      v216 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RRCandidate]);
      lazy protocol witness table accessor for type [RRCandidate] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [SFCardSection]();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v327 + 48))(v307, 1, v326) == 1)
      {
        outlined destroy of RRCandidate?(v307);
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v358)(v349, 1, 1, v357);
      }
      else
      {
        RRCandidate.entity.getter();
        (*(void (**)(uint64_t, uint64_t))(v327 + 8))(v307, v326);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v358)(v349, 0, 1, v357);
      }
      outlined assign with take of RREntity?(v349, v356);
      swift_bridgeObjectRelease();
      goto LABEL_57;
    }
    if (v301 == *MEMORY[0x24BEA5AB0])
    {
      v48 = v323;
      (*(void (**)(uint64_t *, uint64_t))(v334 + 96))(v339, v333);
      v252 = *v339;
      v384 = v252;
      v49 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v311 + 16))(v48, v49, v310);
      swift_bridgeObjectRetain();
      v259 = 7;
      v260 = swift_allocObject();
      *(_QWORD *)(v260 + 16) = v252;
      v268 = Logger.logObject.getter();
      v269 = static os_log_type_t.debug.getter();
      v255 = &v382;
      v382 = 12;
      v253 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v254 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v256 = v383;
      v257 = 17;
      v262 = swift_allocObject();
      *(_BYTE *)(v262 + 16) = 0;
      v263 = swift_allocObject();
      *(_BYTE *)(v263 + 16) = 8;
      v258 = 32;
      v50 = swift_allocObject();
      v51 = v260;
      v261 = v50;
      *(_QWORD *)(v50 + 16) = partial apply for implicit closure #2 in ReferenceResolutionClient.resolveEntity(referenceEntity:);
      *(_QWORD *)(v50 + 24) = v51;
      v52 = swift_allocObject();
      v53 = v261;
      v265 = v52;
      *(_QWORD *)(v52 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
      *(_QWORD *)(v52 + 24) = v53;
      v267 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v264 = _allocateUninitializedArray<A>(_:)();
      v266 = v54;
      swift_retain();
      v55 = v262;
      v56 = v266;
      *v266 = partial apply for closure #1 in OSLogArguments.append(_:);
      v56[1] = v55;
      swift_retain();
      v57 = v263;
      v58 = v266;
      v266[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v58[3] = v57;
      swift_retain();
      v59 = v265;
      v60 = v266;
      v266[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
      v60[5] = v59;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v268, (os_log_type_t)v269))
      {
        v61 = v303;
        v245 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v243 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v244 = 0;
        v246 = createStorage<A>(capacity:type:)(0);
        v247 = createStorage<A>(capacity:type:)(v244);
        v248 = &v380;
        v380 = v245;
        v249 = &v379;
        v379 = v246;
        v250 = &v378;
        v378 = v247;
        serialize(_:at:)(0, &v380);
        serialize(_:at:)(1, v248);
        v376 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v377 = v262;
        closure #1 in osLogInternal(_:log:type:)(&v376, (uint64_t)v248, (uint64_t)v249, (uint64_t)v250);
        v251 = v61;
        if (v61)
        {
          __break(1u);
        }
        else
        {
          v376 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v377 = v263;
          closure #1 in osLogInternal(_:log:type:)(&v376, (uint64_t)&v380, (uint64_t)&v379, (uint64_t)&v378);
          v242 = 0;
          v376 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
          v377 = v265;
          closure #1 in osLogInternal(_:log:type:)(&v376, (uint64_t)&v380, (uint64_t)&v379, (uint64_t)&v378);
          _os_log_impl(&dword_24701B000, v268, (os_log_type_t)v269, "#ReferenceResolution Found %ld candidates. Using the first one", v245, v256);
          v241 = 0;
          destroyStorage<A>(_:count:)(v246, 0, v243);
          destroyStorage<A>(_:count:)(v247, v241, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v245, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v311 + 8))(v323, v310);
      swift_bridgeObjectRetain();
      v240 = &v381;
      v381 = v252;
      v239 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RRCandidate]);
      lazy protocol witness table accessor for type [RRCandidate] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [SFCardSection]();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v327 + 48))(v309, 1, v326) == 1)
      {
        outlined destroy of RRCandidate?(v309);
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v358)(v351, 1, 1, v357);
      }
      else
      {
        RRCandidate.entity.getter();
        (*(void (**)(uint64_t, uint64_t))(v327 + 8))(v309, v326);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v358)(v351, 0, 1, v357);
      }
      outlined assign with take of RREntity?(v351, v356);
      swift_bridgeObjectRelease();
      goto LABEL_57;
    }
    if (v301 != *MEMORY[0x24BEA5AC0])
    {
      if (v301 == *MEMORY[0x24BEA5AC8])
      {
        v75 = v317;
        v76 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v311 + 16))(v75, v76, v310);
        v186 = Logger.logObject.getter();
        v185 = static os_log_type_t.debug.getter();
        v183 = &v407;
        v407 = 2;
        v181 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v182 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v184 = v408;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        v187 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v186, (os_log_type_t)v185))
        {
          v77 = v303;
          v171 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v169 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v170 = 0;
          v172 = createStorage<A>(capacity:type:)(0);
          v173 = createStorage<A>(capacity:type:)(v170);
          v177 = &v406;
          v406 = v171;
          v178 = &v405;
          v405 = v172;
          v175 = &v404;
          v404 = v173;
          v174 = 0;
          serialize(_:at:)(0, &v406);
          serialize(_:at:)(v174, v177);
          v403 = v187;
          v176 = v113;
          MEMORY[0x24BDAC7A8](v113);
          v78 = v178;
          v79 = &v113[-6];
          v179 = &v113[-6];
          v79[2] = v177;
          v79[3] = v78;
          v79[4] = v80;
          v180 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v77)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_24701B000, v186, (os_log_type_t)v185, "#ReferenceResolution No matches found", v171, v184);
            v168 = 0;
            destroyStorage<A>(_:count:)(v172, 0, v169);
            destroyStorage<A>(_:count:)(v173, v168, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x2495725CC](v171, MEMORY[0x24BEE4260]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        (*(void (**)(char *, uint64_t))(v311 + 8))(v317, v310);
      }
      else
      {
        v81 = v315;
        v82 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v311 + 16))(v81, v82, v310);
        ((void (*)(id *, char *, uint64_t))v300)(v337, v341, v333);
        v149 = (*(unsigned __int8 *)(v334 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v334 + 80);
        v157 = 7;
        v150 = swift_allocObject();
        v299((char *)(v150 + v149), v337, v333);
        swift_retain();
        v156 = 32;
        v83 = swift_allocObject();
        v84 = v150;
        v158 = v83;
        *(_QWORD *)(v83 + 16) = partial apply for implicit closure #3 in ReferenceResolutionClient.resolveEntity(referenceEntity:);
        *(_QWORD *)(v83 + 24) = v84;
        swift_release();
        v166 = Logger.logObject.getter();
        v167 = static os_log_type_t.error.getter();
        v153 = &v414;
        v414 = 12;
        v151 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v152 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v154 = v415;
        v155 = 17;
        v160 = swift_allocObject();
        *(_BYTE *)(v160 + 16) = 32;
        v161 = swift_allocObject();
        *(_BYTE *)(v161 + 16) = 8;
        v85 = swift_allocObject();
        v86 = v158;
        v159 = v85;
        *(_QWORD *)(v85 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_4;
        *(_QWORD *)(v85 + 24) = v86;
        v87 = swift_allocObject();
        v88 = v159;
        v163 = v87;
        *(_QWORD *)(v87 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v87 + 24) = v88;
        v165 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        v162 = _allocateUninitializedArray<A>(_:)();
        v164 = v89;
        swift_retain();
        v90 = v160;
        v91 = v164;
        *v164 = partial apply for closure #1 in OSLogArguments.append(_:);
        v91[1] = v90;
        swift_retain();
        v92 = v161;
        v93 = v164;
        v164[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v93[3] = v92;
        swift_retain();
        v94 = v163;
        v95 = v164;
        v164[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v95[5] = v94;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v166, (os_log_type_t)v167))
        {
          v96 = v303;
          v142 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v141 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v143 = createStorage<A>(capacity:type:)(0);
          v144 = createStorage<A>(capacity:type:)(1);
          v145 = &v413;
          v413 = v142;
          v146 = &v412;
          v412 = v143;
          v147 = &v411;
          v411 = v144;
          serialize(_:at:)(2, &v413);
          serialize(_:at:)(1, v145);
          v409 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v410 = v160;
          closure #1 in osLogInternal(_:log:type:)(&v409, (uint64_t)v145, (uint64_t)v146, (uint64_t)v147);
          v148 = v96;
          if (v96)
          {
            __break(1u);
          }
          else
          {
            v409 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v410 = v161;
            closure #1 in osLogInternal(_:log:type:)(&v409, (uint64_t)&v413, (uint64_t)&v412, (uint64_t)&v411);
            v140 = 0;
            v409 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v410 = v163;
            closure #1 in osLogInternal(_:log:type:)(&v409, (uint64_t)&v413, (uint64_t)&v412, (uint64_t)&v411);
            _os_log_impl(&dword_24701B000, v166, (os_log_type_t)v167, "#ReferenceResolution Received unknown result type %s", v142, v154);
            destroyStorage<A>(_:count:)(v143, 0, v141);
            destroyStorage<A>(_:count:)(v144, 1, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x2495725CC](v142, MEMORY[0x24BEE4260]);
            swift_release();
            swift_release();
            swift_release();
          }
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }

        (*(void (**)(char *, uint64_t))(v311 + 8))(v315, v310);
        (*(void (**)(uint64_t *, uint64_t))(v334 + 8))(v339, v333);
      }
      goto LABEL_57;
    }
    v68 = v319;
    (*(void (**)(uint64_t *, uint64_t))(v334 + 96))(v339, v333);
    v208 = *v339;
    v402 = v208;
    v69 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v311 + 16))(v68, v69, v310);
    v214 = Logger.logObject.getter();
    v213 = static os_log_type_t.debug.getter();
    v211 = &v400;
    v400 = 2;
    v209 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v210 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v212 = v401;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v215 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v214, (os_log_type_t)v213))
    {
      v70 = v303;
      v198 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v196 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v197 = 0;
      v199 = createStorage<A>(capacity:type:)(0);
      v200 = createStorage<A>(capacity:type:)(v197);
      v204 = &v396;
      v396 = v198;
      v205 = &v395;
      v395 = v199;
      v202 = &v394;
      v394 = v200;
      v201 = 0;
      serialize(_:at:)(0, &v396);
      serialize(_:at:)(v201, v204);
      v393 = v215;
      v203 = v113;
      MEMORY[0x24BDAC7A8](v113);
      v71 = v205;
      v72 = &v113[-6];
      v206 = &v113[-6];
      v72[2] = v204;
      v72[3] = v71;
      v72[4] = v73;
      v207 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v70)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_24701B000, v214, (os_log_type_t)v213, "#ReferenceResolution Found ambiguous entities -> returning the first one", v198, v212);
        v195 = 0;
        destroyStorage<A>(_:count:)(v199, 0, v196);
        destroyStorage<A>(_:count:)(v200, v195, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v198, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v311 + 8))(v319, v310);
    swift_bridgeObjectRetain();
    v193 = &v398;
    v398 = v208;
    v192 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[RRCandidate]]);
    lazy protocol witness table accessor for type [[RRCandidate]] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [SFCardSection]();
    v194 = v399;
    if (v399)
    {
      v191 = v194;
      v190 = v194;
      swift_bridgeObjectRetain();
      v189 = &v397;
      v397 = v190;
      v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RRCandidate]);
      lazy protocol witness table accessor for type [RRCandidate] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [SFCardSection]();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v327 + 48))(v305, 1, v326) != 1)
      {
        RRCandidate.entity.getter();
        (*(void (**)(uint64_t, uint64_t))(v327 + 8))(v305, v326);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v358)(v347, 0, 1, v357);
LABEL_43:
        outlined assign with take of RREntity?(v347, v356);
        swift_bridgeObjectRelease();
LABEL_57:
        (*(void (**)(char *, uint64_t))(v334 + 8))(v341, v333);
        goto LABEL_64;
      }
      outlined destroy of RRCandidate?(v305);
    }
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v358)(v347, 1, 1, v357);
    goto LABEL_43;
  }
  v97 = v313;
  v122 = *v368;
  v423 = v122;
  v98 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v311 + 16))(v97, v98, v310);
  v99 = v122;
  v129 = 7;
  v130 = swift_allocObject();
  *(_QWORD *)(v130 + 16) = v122;
  v138 = Logger.logObject.getter();
  v139 = static os_log_type_t.error.getter();
  v125 = &v421;
  v421 = 12;
  v123 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v124 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v126 = v422;
  v127 = 17;
  v132 = swift_allocObject();
  *(_BYTE *)(v132 + 16) = 32;
  v133 = swift_allocObject();
  *(_BYTE *)(v133 + 16) = 8;
  v128 = 32;
  v100 = swift_allocObject();
  v101 = v130;
  v131 = v100;
  *(_QWORD *)(v100 + 16) = partial apply for implicit closure #3 in LSApplicationIntentSupportResolver.doesAppSupportIntent(appBundleId:intentName:);
  *(_QWORD *)(v100 + 24) = v101;
  v102 = swift_allocObject();
  v103 = v131;
  v135 = v102;
  *(_QWORD *)(v102 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v102 + 24) = v103;
  v137 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v134 = _allocateUninitializedArray<A>(_:)();
  v136 = v104;
  swift_retain();
  v105 = v132;
  v106 = v136;
  *v136 = partial apply for closure #1 in OSLogArguments.append(_:);
  v106[1] = v105;
  swift_retain();
  v107 = v133;
  v108 = v136;
  v136[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v108[3] = v107;
  swift_retain();
  v109 = v135;
  v110 = v136;
  v136[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v110[5] = v109;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v138, (os_log_type_t)v139))
  {
    v111 = v303;
    v115 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v114 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v116 = createStorage<A>(capacity:type:)(0);
    v117 = createStorage<A>(capacity:type:)(1);
    v118 = &v420;
    v420 = v115;
    v119 = &v419;
    v419 = v116;
    v120 = &v418;
    v418 = v117;
    serialize(_:at:)(2, &v420);
    serialize(_:at:)(1, v118);
    v416 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v417 = v132;
    closure #1 in osLogInternal(_:log:type:)(&v416, (uint64_t)v118, (uint64_t)v119, (uint64_t)v120);
    v121 = v111;
    if (v111)
    {
      __break(1u);
    }
    else
    {
      v416 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v417 = v133;
      closure #1 in osLogInternal(_:log:type:)(&v416, (uint64_t)&v420, (uint64_t)&v419, (uint64_t)&v418);
      v113[1] = 0;
      v416 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v417 = v135;
      closure #1 in osLogInternal(_:log:type:)(&v416, (uint64_t)&v420, (uint64_t)&v419, (uint64_t)&v418);
      _os_log_impl(&dword_24701B000, v138, (os_log_type_t)v139, "#ReferenceResolution Received a failure: %s -> nil", v115, v126);
      destroyStorage<A>(_:count:)(v116, 0, v114);
      destroyStorage<A>(_:count:)(v117, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v115, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v311 + 8))(v313, v310);
LABEL_64:
  outlined init with copy of RREntity?(v356, v302);
  outlined destroy of Result<RRResult, Error>(v366);
  return outlined destroy of RREntity?((uint64_t)v356);
}

uint64_t implicit closure #1 in ReferenceResolutionClient.resolveEntity(referenceEntity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for RRCandidate();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
}

uint64_t implicit closure #2 in ReferenceResolutionClient.resolveEntity(referenceEntity:)(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for RRCandidate();
  return MEMORY[0x2495723C8](a1, v1);
}

uint64_t implicit closure #3 in ReferenceResolutionClient.resolveEntity(referenceEntity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for RRResult();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
}

uint64_t ReferenceResolutionClient.resolvePositionEntity(from:useCase:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t *v26;
  _BYTE **v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint32_t v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint32_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char *v87;

  v47 = a3;
  v48 = a1;
  v61 = a2;
  v4 = v3;
  v5 = v48;
  v63 = v4;
  v87 = 0;
  v86 = 0;
  v85 = 0;
  v84 = 0;
  v49 = 0;
  v76 = 0;
  v75 = 0;
  v70 = 0;
  v50 = type metadata accessor for Logger();
  v51 = *(_QWORD *)(v50 - 8);
  v52 = (*(_QWORD *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v50);
  v53 = (char *)&v17 - v52;
  v54 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v70);
  v55 = (char *)&v17 - v54;
  v56 = type metadata accessor for RREntity();
  v57 = *(_QWORD *)(v56 - 8);
  v58 = (*(_QWORD *)(v57 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v70);
  v59 = (char *)&v17 - v58;
  v87 = (char *)&v17 - v58;
  v65 = type metadata accessor for Siri_Nlu_External_UserParse();
  v64 = *(_QWORD *)(v65 - 8);
  v60 = (*(_QWORD *)(v64 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v65);
  v66 = (char *)&v17 - v60;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v62 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v72 = (uint64_t)&v17 - v62;
  v86 = v5;
  v71 = 1;
  v85 = v7 & 1;
  v84 = v63;
  v8 = USOParse.userParse.getter();
  v69 = MEMORY[0x249571348](v8);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v66, v65);
  swift_bridgeObjectRetain();
  v68 = &v83;
  v83 = v69;
  v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
  lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  v73 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v74 = *(_QWORD *)(v73 - 8);
  if ((*(unsigned int (**)(uint64_t, _QWORD))(v74 + 48))(v72, v71) == 1)
  {
    v38 = 0;
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v72);
    v46 = v38;
  }
  else
  {
    v45 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v72, v73);
    v46 = v45;
  }
  v44 = v46;
  if (v46)
  {
    v43 = v44;
    v41 = v44;
    v76 = v44;
    v42 = ReferenceResolutionClient.extractPositionEntity(task:useCase:)(v44, v61 & 1);
    if (v42)
    {
      v40 = v42;
      v39 = v42;
      v75 = v42;
      ReferenceResolutionClient.resolveEntity(referenceEntity:)(v42, v55);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v59, v55, v56);
        (*(void (**)(uint64_t, char *, uint64_t))(v57 + 16))(v47, v59, v56);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v47, 0, 1, v56);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v56);
        swift_release();
        return swift_release();
      }
      outlined destroy of RREntity?((uint64_t)v55);
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
  v11 = v53;
  v12 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v11, v12, v50);
  v36 = Logger.logObject.getter();
  v35 = static os_log_type_t.debug.getter();
  v33 = &v81;
  v81 = 2;
  v31 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v32 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v34 = v82;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v37 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v36, (os_log_type_t)v35))
  {
    v13 = v49;
    v21 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v20 = 0;
    v22 = createStorage<A>(capacity:type:)(0);
    v23 = createStorage<A>(capacity:type:)(v20);
    v27 = &v80;
    v80 = v21;
    v28 = &v79;
    v79 = v22;
    v25 = &v78;
    v78 = v23;
    v24 = 0;
    serialize(_:at:)(0, &v80);
    serialize(_:at:)(v24, v27);
    v77 = v37;
    v26 = &v17;
    MEMORY[0x24BDAC7A8](&v17);
    v14 = v28;
    v15 = &v17 - 6;
    v29 = &v17 - 6;
    v15[2] = (uint64_t)v27;
    v15[3] = (uint64_t)v14;
    v15[4] = v16;
    v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v13)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, v36, (os_log_type_t)v35, "#ReferenceResolution Did not resolve RREntity from UsoParse, returning nil", v21, v34);
      v18 = 0;
      destroyStorage<A>(_:count:)(v22, 0, v19);
      destroyStorage<A>(_:count:)(v23, v18, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v21, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v51 + 8))(v53, v50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56))(v47, 1, 1, v56);
}

uint64_t implicit closure #1 in ReferenceResolutionClient.resolvePersonDisambiguationReference(from:)()
{
  uint64_t v1;

  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person?);
  v1 = Optional.debugDescription.getter();
  outlined destroy of ContiguousArray<A1>();
  return v1;
}

uint64_t implicit closure #1 in ReferenceResolutionClient.resolveAppDisambiguationReference(from:)()
{
  uint64_t v1;

  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_App?);
  v1 = Optional.debugDescription.getter();
  outlined destroy of ContiguousArray<A1>();
  return v1;
}

uint64_t sub_247153BF8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in ReferenceResolutionClient.resolveAppDisambiguationReference(from:)()
{
  return implicit closure #1 in ReferenceResolutionClient.resolveAppDisambiguationReference(from:)();
}

uint64_t ReferenceResolutionClient.extractPositionEntity(task:useCase:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t *v39;
  _BYTE **v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint32_t v47;
  int v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE **v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  uint32_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  NSObject *v118;
  int v119;
  _BOOL4 v120;
  _BOOL4 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;
  char *v139;
  uint64_t (*v140)(uint64_t, uint64_t, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE *v144;
  uint64_t v145;
  uint32_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE v160[32];
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _BYTE *v164;
  uint64_t v165;
  uint32_t v166;
  _BYTE v167[24];
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;

  v129 = a1;
  v132 = a2;
  v3 = v2;
  v4 = v129;
  v131 = v3;
  v171 = 0;
  v170 = 0;
  v169 = 0;
  v130 = 0;
  v156 = 0;
  v153 = 0;
  v150 = 0;
  v148 = 0;
  v133 = type metadata accessor for Logger();
  v134 = *(_QWORD *)(v133 - 8);
  v136 = *(_QWORD *)(v134 + 64);
  v135 = (v136 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v133);
  v137 = (char *)&v30 - v135;
  v138 = v135;
  MEMORY[0x24BDAC7A8]((char *)&v30 - v135);
  v139 = (char *)&v30 - v138;
  v171 = v4;
  v170 = v5 & 1;
  v169 = v6;
  UsoTask.eraseToAny.getter();
  if (!v168)
    goto LABEL_45;
  v128 = v160;
  outlined init with copy of Any?((uint64_t)v167, (uint64_t)v160);
  v127 = 0;
  type metadata accessor for UsoTask_noVerb_uso_NoEntity();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v125 = v159;
    v150 = v159;
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    v126 = v149;
    if (v149)
    {
      v124 = v126;
      v122 = v126;
      v148 = v126;
      swift_release();
      swift_retain();
      v123 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
      swift_release();
      v147 = v123;
      v121 = v123 != 0;
      v120 = v121;
      outlined destroy of ContiguousArray<A1>();
      if (v120)
      {
        v7 = v139;
        v8 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v134 + 16))(v7, v8, v133);
        swift_retain();
        v118 = Logger.logObject.getter();
        v119 = static os_log_type_t.debug.getter();
        v106 = &v145;
        v145 = 12;
        v104 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v105 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v107 = v146;
        v108 = 17;
        v110 = 7;
        v112 = swift_allocObject();
        *(_BYTE *)(v112 + 16) = 32;
        v113 = swift_allocObject();
        *(_BYTE *)(v113 + 16) = 8;
        v109 = 32;
        v9 = swift_allocObject();
        v10 = v122;
        v111 = v9;
        *(_QWORD *)(v9 + 16) = partial apply for implicit closure #1 in ReferenceResolutionClient.extractPositionEntity(task:useCase:);
        *(_QWORD *)(v9 + 24) = v10;
        v11 = swift_allocObject();
        v12 = v111;
        v115 = v11;
        *(_QWORD *)(v11 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v11 + 24) = v12;
        v117 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        v114 = _allocateUninitializedArray<A>(_:)();
        v116 = v13;
        swift_retain();
        v14 = v112;
        v15 = v116;
        *v116 = partial apply for closure #1 in OSLogArguments.append(_:);
        v15[1] = v14;
        swift_retain();
        v16 = v113;
        v17 = v116;
        v116[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v17[3] = v16;
        swift_retain();
        v18 = v115;
        v19 = v116;
        v116[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v19[5] = v18;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v118, (os_log_type_t)v119))
        {
          v20 = v130;
          v97 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v96 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v98 = createStorage<A>(capacity:type:)(0);
          v99 = createStorage<A>(capacity:type:)(1);
          v100 = &v144;
          v144 = v97;
          v101 = &v143;
          v143 = v98;
          v102 = &v142;
          v142 = v99;
          serialize(_:at:)(2, &v144);
          serialize(_:at:)(1, v100);
          v140 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v141 = v112;
          closure #1 in osLogInternal(_:log:type:)(&v140, (uint64_t)v100, (uint64_t)v101, (uint64_t)v102);
          v103 = v20;
          if (v20)
          {
            __break(1u);
          }
          else
          {
            v140 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v141 = v113;
            closure #1 in osLogInternal(_:log:type:)(&v140, (uint64_t)&v144, (uint64_t)&v143, (uint64_t)&v142);
            v95 = 0;
            v140 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v141 = v115;
            closure #1 in osLogInternal(_:log:type:)(&v140, (uint64_t)&v144, (uint64_t)&v143, (uint64_t)&v142);
            _os_log_impl(&dword_24701B000, v118, (os_log_type_t)v119, "#ReferenceResolution Found positional reference, returning: %s", v97, v107);
            destroyStorage<A>(_:count:)(v98, 0, v96);
            destroyStorage<A>(_:count:)(v99, 1, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x2495725CC](v97, MEMORY[0x24BEE4260]);
            swift_release();
            swift_release();
            swift_release();
          }
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }

        (*(void (**)(char *, uint64_t))(v134 + 8))(v139, v133);
        swift_retain();
        v93 = CodeGenBase.entity.getter();
        swift_release();
        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v160);
        outlined destroy of FlowActivity?((uint64_t)v167);
        return v93;
      }
    }
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v160);
    outlined destroy of FlowActivity?((uint64_t)v167);
    goto LABEL_46;
  }
  v92 = 0;
  type metadata accessor for UsoTask_pay_common_Payment();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v91 = v158;
    v153 = v158;
    if (static ConfirmationViewBuilder.WalletAppLaunchAction.__derived_enum_equals(_:_:)(v132 & 1, 0))
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      v90 = v151;
      swift_release();
      if (v90)
      {
        v89 = v90;
        v86 = v90;
        v87 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
        swift_release();
        v88 = v87;
      }
      else
      {
        v88 = 0;
      }
      v83 = v88;
      v84 = ReferenceResolutionClient.helper(app:)(v88);
      swift_release();
      v85 = v84;
    }
    else
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      v82 = v152;
      v21 = swift_release();
      if (v82 && (v81 = v82, v79 = v82, v80 = MEMORY[0x2495716C0](v21), swift_release(), v80))
      {
        v78 = v80;
        v75 = v80;
        v76 = MEMORY[0x2495718C4]();
        swift_release();
        v77 = v76;
      }
      else
      {
        v77 = 0;
      }
      v73 = v77;
      v74 = ReferenceResolutionClient.helper(person:)(v77);
      swift_release();
      v85 = v74;
    }
    v72 = v85;
    swift_release();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v160);
    outlined destroy of FlowActivity?((uint64_t)v167);
    return v72;
  }
  v71 = 0;
  type metadata accessor for UsoTask_requestMoney_common_Payment();
  if ((swift_dynamicCast() & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v160);
LABEL_45:
    outlined destroy of FlowActivity?((uint64_t)v167);
LABEL_46:
    v23 = v137;
    v24 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v134 + 16))(v23, v24, v133);
    v49 = Logger.logObject.getter();
    v48 = static os_log_type_t.debug.getter();
    v46 = &v165;
    v165 = 2;
    v44 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v45 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v47 = v166;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v50 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v49, (os_log_type_t)v48))
    {
      v25 = v130;
      v34 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v33 = 0;
      v35 = createStorage<A>(capacity:type:)(0);
      v36 = createStorage<A>(capacity:type:)(v33);
      v40 = &v164;
      v164 = v34;
      v41 = &v163;
      v163 = v35;
      v38 = &v162;
      v162 = v36;
      v37 = 0;
      serialize(_:at:)(0, &v164);
      serialize(_:at:)(v37, v40);
      v161 = v50;
      v39 = &v30;
      MEMORY[0x24BDAC7A8](&v30);
      v26 = v41;
      v27 = &v30 - 6;
      v42 = &v30 - 6;
      v27[2] = (uint64_t)v40;
      v27[3] = (uint64_t)v26;
      v27[4] = v28;
      v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v25)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_24701B000, v49, (os_log_type_t)v48, "#ReferenceResolution Found no positional reference, returning nil", v34, v47);
        v31 = 0;
        destroyStorage<A>(_:count:)(v35, 0, v32);
        destroyStorage<A>(_:count:)(v36, v31, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v34, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v30 = 0;

    (*(void (**)(char *, uint64_t))(v134 + 8))(v137, v133);
    return v30;
  }
  v70 = v157;
  v156 = v157;
  if (static ConfirmationViewBuilder.WalletAppLaunchAction.__derived_enum_equals(_:_:)(v132 & 1, 0))
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    v69 = v154;
    swift_release();
    if (v69)
    {
      v68 = v69;
      v65 = v69;
      v66 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
      swift_release();
      v67 = v66;
    }
    else
    {
      v67 = 0;
    }
    v62 = v67;
    v63 = ReferenceResolutionClient.helper(app:)(v67);
    swift_release();
    v64 = v63;
  }
  else
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    v61 = v155;
    v22 = swift_release();
    if (v61 && (v60 = v61, v58 = v61, v59 = MEMORY[0x2495716CC](v22), swift_release(), v59))
    {
      v57 = v59;
      v54 = v59;
      v55 = MEMORY[0x2495718C4]();
      swift_release();
      v56 = v55;
    }
    else
    {
      v56 = 0;
    }
    v52 = v56;
    v53 = ReferenceResolutionClient.helper(person:)(v56);
    swift_release();
    v64 = v53;
  }
  v51 = v64;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v160);
  outlined destroy of FlowActivity?((uint64_t)v167);
  return v51;
}

uint64_t implicit closure #1 in ReferenceResolutionClient.extractPositionEntity(task:useCase:)()
{
  uint64_t v1;

  swift_retain();
  CodeGenBase.entity.getter();
  swift_release();
  v1 = UsoEntity.debugString.getter();
  swift_release();
  return v1;
}

uint64_t ReferenceResolutionClient.helper(app:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t *v36;
  _BYTE **v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint32_t v44;
  int v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE **v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint32_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  NSObject *v73;
  int v74;
  _BOOL4 v75;
  _BOOL4 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint32_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  uint32_t v102;
  uint64_t v103;
  uint64_t v104;

  v87 = a1;
  v104 = 0;
  v103 = 0;
  v80 = 0;
  v96 = 0;
  v81 = type metadata accessor for Logger();
  v82 = *(_QWORD *)(v81 - 8);
  v83 = (*(_QWORD *)(v82 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v87);
  v84 = (char *)&v26 - v83;
  v85 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v2);
  v86 = (char *)&v26 - v85;
  v104 = v4;
  v103 = v1;
  swift_retain();
  if (v87)
  {
    v79 = v87;
    v77 = v87;
    v96 = v87;
    swift_retain();
    v78 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
    swift_release();
    v95 = v78;
    v76 = v78 != 0;
    v75 = v76;
    outlined destroy of ContiguousArray<A1>();
    if (v75)
    {
      v5 = v86;
      v6 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v5, v6, v81);
      swift_retain();
      v73 = Logger.logObject.getter();
      v74 = static os_log_type_t.debug.getter();
      v61 = &v93;
      v93 = 12;
      v59 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v60 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v62 = v94;
      v63 = 17;
      v65 = 7;
      v67 = swift_allocObject();
      *(_BYTE *)(v67 + 16) = 32;
      v68 = swift_allocObject();
      *(_BYTE *)(v68 + 16) = 8;
      v64 = 32;
      v7 = swift_allocObject();
      v8 = v77;
      v66 = v7;
      *(_QWORD *)(v7 + 16) = partial apply for implicit closure #1 in ReferenceResolutionClient.extractPositionEntity(task:useCase:);
      *(_QWORD *)(v7 + 24) = v8;
      v9 = swift_allocObject();
      v10 = v66;
      v70 = v9;
      *(_QWORD *)(v9 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v9 + 24) = v10;
      v72 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v69 = _allocateUninitializedArray<A>(_:)();
      v71 = v11;
      swift_retain();
      v12 = v67;
      v13 = v71;
      *v71 = partial apply for closure #1 in OSLogArguments.append(_:);
      v13[1] = v12;
      swift_retain();
      v14 = v68;
      v15 = v71;
      v71[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v15[3] = v14;
      swift_retain();
      v16 = v70;
      v17 = v71;
      v71[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v17[5] = v16;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v73, (os_log_type_t)v74))
      {
        v18 = v80;
        v52 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v53 = createStorage<A>(capacity:type:)(0);
        v54 = createStorage<A>(capacity:type:)(1);
        v55 = &v92;
        v92 = v52;
        v56 = &v91;
        v91 = v53;
        v57 = &v90;
        v90 = v54;
        serialize(_:at:)(2, &v92);
        serialize(_:at:)(1, v55);
        v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v89 = v67;
        closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)v55, (uint64_t)v56, (uint64_t)v57);
        v58 = v18;
        if (v18)
        {
          __break(1u);
        }
        else
        {
          v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v89 = v68;
          closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)&v92, (uint64_t)&v91, (uint64_t)&v90);
          v50 = 0;
          v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v89 = v70;
          closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)&v92, (uint64_t)&v91, (uint64_t)&v90);
          _os_log_impl(&dword_24701B000, v73, (os_log_type_t)v74, "#ReferenceResolution Found positional reference, returning: %s", v52, v62);
          destroyStorage<A>(_:count:)(v53, 0, v51);
          destroyStorage<A>(_:count:)(v54, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v52, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v82 + 8))(v86, v81);
      swift_retain();
      v48 = CodeGenBase.entity.getter();
      swift_release();
      swift_release();
      return v48;
    }
    swift_release();
  }
  v19 = v84;
  v20 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v19, v20, v81);
  v46 = Logger.logObject.getter();
  v45 = static os_log_type_t.debug.getter();
  v43 = &v101;
  v101 = 2;
  v41 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v42 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v44 = v102;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v47 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v46, (os_log_type_t)v45))
  {
    v21 = v80;
    v31 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v30 = 0;
    v32 = createStorage<A>(capacity:type:)(0);
    v33 = createStorage<A>(capacity:type:)(v30);
    v37 = &v100;
    v100 = v31;
    v38 = &v99;
    v99 = v32;
    v35 = &v98;
    v98 = v33;
    v34 = 0;
    serialize(_:at:)(0, &v100);
    serialize(_:at:)(v34, v37);
    v97 = v47;
    v36 = &v26;
    MEMORY[0x24BDAC7A8](&v26);
    v22 = v38;
    v23 = &v26 - 6;
    v39 = &v26 - 6;
    v23[2] = (uint64_t)v37;
    v23[3] = (uint64_t)v22;
    v23[4] = v24;
    v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v21)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, v46, (os_log_type_t)v45, "#ReferenceResolution Found no positional reference, returning nil", v31, v44);
      v28 = 0;
      destroyStorage<A>(_:count:)(v32, 0, v29);
      destroyStorage<A>(_:count:)(v33, v28, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v31, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v27 = 0;

  (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v81);
  return v27;
}

uint64_t ReferenceResolutionClient.helper(person:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t *v36;
  _BYTE **v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint32_t v44;
  int v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE **v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint32_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  NSObject *v73;
  int v74;
  _BOOL4 v75;
  _BOOL4 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint32_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  uint32_t v102;
  uint64_t v103;
  uint64_t v104;

  v87 = a1;
  v104 = 0;
  v103 = 0;
  v80 = 0;
  v96 = 0;
  v81 = type metadata accessor for Logger();
  v82 = *(_QWORD *)(v81 - 8);
  v83 = (*(_QWORD *)(v82 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v87);
  v84 = (char *)&v26 - v83;
  v85 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v2);
  v86 = (char *)&v26 - v85;
  v104 = v4;
  v103 = v1;
  swift_retain();
  if (v87)
  {
    v79 = v87;
    v77 = v87;
    v96 = v87;
    swift_retain();
    v78 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
    swift_release();
    v95 = v78;
    v76 = v78 != 0;
    v75 = v76;
    outlined destroy of ContiguousArray<A1>();
    if (v75)
    {
      v5 = v86;
      v6 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v5, v6, v81);
      swift_retain();
      v73 = Logger.logObject.getter();
      v74 = static os_log_type_t.debug.getter();
      v61 = &v93;
      v93 = 12;
      v59 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v60 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v62 = v94;
      v63 = 17;
      v65 = 7;
      v67 = swift_allocObject();
      *(_BYTE *)(v67 + 16) = 32;
      v68 = swift_allocObject();
      *(_BYTE *)(v68 + 16) = 8;
      v64 = 32;
      v7 = swift_allocObject();
      v8 = v77;
      v66 = v7;
      *(_QWORD *)(v7 + 16) = partial apply for implicit closure #1 in ReferenceResolutionClient.extractPositionEntity(task:useCase:);
      *(_QWORD *)(v7 + 24) = v8;
      v9 = swift_allocObject();
      v10 = v66;
      v70 = v9;
      *(_QWORD *)(v9 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v9 + 24) = v10;
      v72 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v69 = _allocateUninitializedArray<A>(_:)();
      v71 = v11;
      swift_retain();
      v12 = v67;
      v13 = v71;
      *v71 = partial apply for closure #1 in OSLogArguments.append(_:);
      v13[1] = v12;
      swift_retain();
      v14 = v68;
      v15 = v71;
      v71[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v15[3] = v14;
      swift_retain();
      v16 = v70;
      v17 = v71;
      v71[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v17[5] = v16;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v73, (os_log_type_t)v74))
      {
        v18 = v80;
        v52 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v53 = createStorage<A>(capacity:type:)(0);
        v54 = createStorage<A>(capacity:type:)(1);
        v55 = &v92;
        v92 = v52;
        v56 = &v91;
        v91 = v53;
        v57 = &v90;
        v90 = v54;
        serialize(_:at:)(2, &v92);
        serialize(_:at:)(1, v55);
        v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v89 = v67;
        closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)v55, (uint64_t)v56, (uint64_t)v57);
        v58 = v18;
        if (v18)
        {
          __break(1u);
        }
        else
        {
          v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v89 = v68;
          closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)&v92, (uint64_t)&v91, (uint64_t)&v90);
          v50 = 0;
          v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v89 = v70;
          closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)&v92, (uint64_t)&v91, (uint64_t)&v90);
          _os_log_impl(&dword_24701B000, v73, (os_log_type_t)v74, "#ReferenceResolution Found positional reference, returning: %s", v52, v62);
          destroyStorage<A>(_:count:)(v53, 0, v51);
          destroyStorage<A>(_:count:)(v54, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v52, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v82 + 8))(v86, v81);
      swift_retain();
      v48 = CodeGenBase.entity.getter();
      swift_release();
      swift_release();
      return v48;
    }
    swift_release();
  }
  v19 = v84;
  v20 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v19, v20, v81);
  v46 = Logger.logObject.getter();
  v45 = static os_log_type_t.debug.getter();
  v43 = &v101;
  v101 = 2;
  v41 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v42 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v44 = v102;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v47 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v46, (os_log_type_t)v45))
  {
    v21 = v80;
    v31 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v30 = 0;
    v32 = createStorage<A>(capacity:type:)(0);
    v33 = createStorage<A>(capacity:type:)(v30);
    v37 = &v100;
    v100 = v31;
    v38 = &v99;
    v99 = v32;
    v35 = &v98;
    v98 = v33;
    v34 = 0;
    serialize(_:at:)(0, &v100);
    serialize(_:at:)(v34, v37);
    v97 = v47;
    v36 = &v26;
    MEMORY[0x24BDAC7A8](&v26);
    v22 = v38;
    v23 = &v26 - 6;
    v39 = &v26 - 6;
    v23[2] = (uint64_t)v37;
    v23[3] = (uint64_t)v22;
    v23[4] = v24;
    v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v21)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, v46, (os_log_type_t)v45, "#ReferenceResolution Found no positional reference, returning nil", v31, v44);
      v28 = 0;
      destroyStorage<A>(_:count:)(v32, 0, v29);
      destroyStorage<A>(_:count:)(v33, v28, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v31, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v27 = 0;

  (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v81);
  return v27;
}

uint64_t protocol witness for ReferenceResolutionProviding.resolveCommonPerson() in conformance ReferenceResolutionClient@<X0>(void *a1@<X8>)
{
  return ReferenceResolutionClient.resolveCommonPerson()(a1);
}

uint64_t protocol witness for ReferenceResolutionProviding.resolvePersonDisambiguationReference(from:) in conformance ReferenceResolutionClient(uint64_t a1)
{
  return ReferenceResolutionClient.resolvePersonDisambiguationReference(from:)(a1);
}

uint64_t protocol witness for ReferenceResolutionProviding.resolveAppDisambiguationReference(from:) in conformance ReferenceResolutionClient(uint64_t a1)
{
  return ReferenceResolutionClient.resolveAppDisambiguationReference(from:)(a1);
}

uint64_t sub_247156018()
{
  return swift_deallocObject();
}

uint64_t sub_247156040()
{
  return swift_deallocObject();
}

uint64_t sub_247156068()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471560A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471560E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in ReferenceResolutionClient.resolvePersonDisambiguationReference(from:)()
{
  return implicit closure #1 in ReferenceResolutionClient.resolvePersonDisambiguationReference(from:)();
}

uint64_t sub_247156124()
{
  return swift_deallocObject();
}

uint64_t sub_24715614C()
{
  return swift_deallocObject();
}

uint64_t sub_247156174()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471561B0()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ReferenceResolutionClient.PaymentsReferenceResolutionUseCase and conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReferenceResolutionClient.PaymentsReferenceResolutionUseCase and conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase;
  if (!lazy protocol witness table cache variable for type ReferenceResolutionClient.PaymentsReferenceResolutionUseCase and conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for ReferenceResolutionClient.PaymentsReferenceResolutionUseCase, &type metadata for ReferenceResolutionClient.PaymentsReferenceResolutionUseCase);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReferenceResolutionClient.PaymentsReferenceResolutionUseCase and conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReferenceResolutionClient.PaymentsReferenceResolutionUseCase and conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase;
  if (!lazy protocol witness table cache variable for type ReferenceResolutionClient.PaymentsReferenceResolutionUseCase and conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for ReferenceResolutionClient.PaymentsReferenceResolutionUseCase, &type metadata for ReferenceResolutionClient.PaymentsReferenceResolutionUseCase);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReferenceResolutionClient.PaymentsReferenceResolutionUseCase and conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase);
    return v0;
  }
  return v2;
}

uint64_t outlined destroy of RRFilter?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for RRFilter();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

_QWORD *outlined init with copy of Result<RRResult, Error>(id *a1, _QWORD *a2)
{
  uint64_t v2;
  id v3;
  id v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = *a1;
    v3 = *a1;
    *a2 = v5;
  }
  else
  {
    v2 = type metadata accessor for RRResult();
    (*(void (**)(_QWORD *, id *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  }
  swift_storeEnumTagMultiPayload();
  return a2;
}

uint64_t sub_247156378()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2471563B4()
{
  return swift_deallocObject();
}

uint64_t sub_2471563DC()
{
  return swift_deallocObject();
}

uint64_t sub_247156404()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247156440()
{
  swift_release();
  return swift_deallocObject();
}

void *outlined init with copy of RREntity?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for RREntity();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

id *outlined destroy of Result<RRResult, Error>(id *a1)
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {

  }
  else
  {
    v1 = type metadata accessor for RRResult();
    (*(void (**)(id *))(*(_QWORD *)(v1 - 8) + 8))(a1);
  }
  return a1;
}

uint64_t sub_2471565B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for RRResult() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in ReferenceResolutionClient.resolveEntity(referenceEntity:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RRResult() - 8) + 80);
  return implicit closure #3 in ReferenceResolutionClient.resolveEntity(referenceEntity:)(v1 + ((v2 + 16) & ~v2), a1);
}

uint64_t sub_247156660()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = type metadata accessor for RRResult();
  v1 = lazy protocol witness table accessor for type RRResult and conformance RRResult();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type RRResult and conformance RRResult()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RRResult and conformance RRResult;
  if (!lazy protocol witness table cache variable for type RRResult and conformance RRResult)
  {
    v0 = type metadata accessor for RRResult();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEA5AE8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RRResult and conformance RRResult);
    return v1;
  }
  return v3;
}

uint64_t sub_247156754()
{
  return swift_deallocObject();
}

uint64_t sub_24715677C()
{
  return swift_deallocObject();
}

uint64_t sub_2471567A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471567E0()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [[RRCandidate]] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [[RRCandidate]] and conformance [A];
  if (!lazy protocol witness table cache variable for type [[RRCandidate]] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[RRCandidate]]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [[RRCandidate]] and conformance [A]);
    return v1;
  }
  return v3;
}

void *outlined assign with take of RREntity?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(const void *, uint64_t, uint64_t);

  v7 = type metadata accessor for RREntity();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a2, 1))
  {
    if (v9(a1, 1, v7))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a2, a1, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
    }
  }
  else if (v9(a1, 1, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a2, v7);
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a2, a1, v7);
  }
  return a2;
}

unint64_t lazy protocol witness table accessor for type [RRCandidate] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [RRCandidate] and conformance [A];
  if (!lazy protocol witness table cache variable for type [RRCandidate] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RRCandidate]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [RRCandidate] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of RRCandidate?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for RRCandidate();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t sub_247156ACC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in ReferenceResolutionClient.resolveEntity(referenceEntity:)()
{
  uint64_t v0;

  return implicit closure #2 in ReferenceResolutionClient.resolveEntity(referenceEntity:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_247156B10()
{
  return swift_deallocObject();
}

uint64_t sub_247156B38()
{
  return swift_deallocObject();
}

uint64_t sub_247156B60()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247156B9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247156BD8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for RRCandidate() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in ReferenceResolutionClient.resolveEntity(referenceEntity:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RRCandidate() - 8) + 80);
  return implicit closure #1 in ReferenceResolutionClient.resolveEntity(referenceEntity:)(v1 + ((v2 + 16) & ~v2), a1);
}

uint64_t sub_247156C88()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type RRCandidate and conformance RRCandidate()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate;
  if (!lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate)
  {
    v0 = type metadata accessor for RRCandidate();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEA5590], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate);
    return v1;
  }
  return v3;
}

uint64_t sub_247156D7C()
{
  return swift_deallocObject();
}

uint64_t sub_247156DA4()
{
  return swift_deallocObject();
}

uint64_t sub_247156DCC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247156E08()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in ReferenceResolutionClient.extractPositionEntity(task:useCase:)()
{
  return implicit closure #1 in ReferenceResolutionClient.extractPositionEntity(task:useCase:)();
}

uint64_t sub_247156E4C()
{
  return swift_deallocObject();
}

uint64_t sub_247156E74()
{
  return swift_deallocObject();
}

uint64_t sub_247156E9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247156ED8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247156F14()
{
  return swift_deallocObject();
}

uint64_t sub_247156F3C()
{
  return swift_deallocObject();
}

uint64_t sub_247156F64()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247156FA0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247156FDC()
{
  return swift_deallocObject();
}

uint64_t sub_247157004()
{
  return swift_deallocObject();
}

uint64_t sub_24715702C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247157068()
{
  swift_release();
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ReferenceResolutionClient.PaymentsReferenceResolutionUseCase()
{
  return &type metadata for ReferenceResolutionClient.PaymentsReferenceResolutionUseCase;
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ReferenceResolutionClient.PaymentsReferenceResolutionUseCase()
{
  return lazy protocol witness table accessor for type [ReferenceResolutionClient.PaymentsReferenceResolutionUseCase] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [ReferenceResolutionClient.PaymentsReferenceResolutionUseCase] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [ReferenceResolutionClient.PaymentsReferenceResolutionUseCase] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ReferenceResolutionClient.PaymentsReferenceResolutionUseCase] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ReferenceResolutionClient.PaymentsReferenceResolutionUseCase]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [ReferenceResolutionClient.PaymentsReferenceResolutionUseCase] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Equatable in ReferenceResolutionClient.PaymentsReferenceResolutionUseCase()
{
  return lazy protocol witness table accessor for type ReferenceResolutionClient.PaymentsReferenceResolutionUseCase and conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase();
}

uint64_t SendPaymentConfirmIntentStrategy.parseConfirmationResponse(input:confirmParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[13] = a3;
  v4[12] = a2;
  v4[11] = a1;
  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v4[14] = swift_task_alloc();
  v5 = type metadata accessor for Parse();
  v4[15] = v5;
  v4[16] = *(_QWORD *)(v5 - 8);
  v4[17] = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  v4[18] = v6;
  v4[19] = *(_QWORD *)(v6 - 8);
  v4[20] = swift_task_alloc();
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return swift_task_switch();
}

uint64_t SendPaymentConfirmIntentStrategy.parseConfirmationResponse(input:confirmParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *buf;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint32_t v19;
  os_log_type_t v20;
  NSObject *v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 152);
  v18 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 16) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v1, v2, v18);
  v21 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 48) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v19 = *(_DWORD *)(v0 + 168);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v22 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v21, v20))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v13 = createStorage<A>(capacity:type:)(0);
    v14 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v16 + 56) = buf;
    *(_QWORD *)(v16 + 64) = v13;
    *(_QWORD *)(v16 + 72) = v14;
    serialize(_:at:)(0, (_BYTE **)(v16 + 56));
    serialize(_:at:)(0, (_BYTE **)(v16 + 56));
    *(_QWORD *)(v16 + 80) = v22;
    v15 = (_QWORD *)swift_task_alloc();
    v15[2] = v16 + 56;
    v15[3] = v16 + 64;
    v15[4] = v16 + 72;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v21, v20, "#SendPaymentConfirmIntentStrategy parseConfirmationResponse", buf, v19);
    destroyStorage<A>(_:count:)(v13, 0, v11);
    destroyStorage<A>(_:count:)(v14, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v16 + 160);
  v4 = *(_QWORD *)(v16 + 152);
  v5 = *(_QWORD *)(v16 + 144);
  v9 = *(_QWORD *)(v16 + 136);
  v6 = *(_QWORD *)(v16 + 128);
  v7 = *(_QWORD *)(v16 + 120);
  v10 = *(_QWORD *)(v16 + 112);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v5);
  Input.parse.getter();
  Parse.confirmationResponse.getter(v10);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSendPaymentIntent, INSendPaymentIntentResponse>);
  IntentResolutionRecord.intent.getter();
  type metadata accessor for INSendPaymentIntent();
  ConfirmIntentAnswer.init(confirmationResponse:intent:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v16 + 16) + 8))();
}

uint64_t SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[111] = v2;
  v3[110] = a2;
  v3[109] = a1;
  v3[77] = v3;
  v3[78] = 0;
  v3[79] = 0;
  v3[86] = 0;
  v3[93] = 0;
  v3[99] = 0;
  v3[75] = 0;
  v3[76] = 0;
  v3[100] = 0;
  v3[101] = 0;
  v3[102] = 0;
  v3[103] = 0;
  v3[104] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[112] = swift_task_alloc();
  v4 = type metadata accessor for NLContextUpdate();
  v3[113] = v4;
  v3[114] = *(_QWORD *)(v4 - 8);
  v3[115] = swift_task_alloc();
  v5 = type metadata accessor for TemplatingResult();
  v3[116] = v5;
  v3[117] = *(_QWORD *)(v5 - 8);
  v3[118] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[119] = swift_task_alloc();
  v3[120] = swift_task_alloc();
  v3[121] = swift_task_alloc();
  v3[122] = swift_task_alloc();
  v3[123] = swift_task_alloc();
  type metadata accessor for Locale();
  v3[124] = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  v3[125] = v6;
  v3[126] = *(_QWORD *)(v6 - 8);
  v3[127] = swift_task_alloc();
  v3[128] = swift_task_alloc();
  v3[129] = swift_task_alloc();
  v3[130] = swift_task_alloc();
  v3[131] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[132] = swift_task_alloc();
  v3[78] = a2;
  v3[79] = v2;
  return swift_task_switch();
}

uint64_t SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint32_t v55;
  os_log_type_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint32_t v71;
  os_log_type_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint32_t v87;
  os_log_type_t v88;
  NSObject *log;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  char *v96;
  const void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  id v108;
  void *v109;
  char *v110;
  const void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t *v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint8_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint32_t size;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  NSObject *oslog;
  os_log_type_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(uint64_t, uint64_t);
  id v154;
  void *v155;
  uint64_t v156;
  uint8_t *buf;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(uint64_t, uint64_t, uint64_t);
  uint32_t v166;
  os_log_type_t v167;
  NSObject *v168;
  uint64_t v169;
  uint8_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t (*v173)(uint64_t, uint64_t, uint64_t);
  uint64_t v174;

  v162 = *(_QWORD *)(v0 + 1056);
  v1 = *(_QWORD *)(v0 + 1048);
  v163 = *(_QWORD *)(v0 + 1008);
  v164 = *(_QWORD *)(v0 + 1000);
  *(_QWORD *)(v0 + 616) = v0;
  v2 = SignpostName.makeSendPaymentPromptForConfirm.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v162);
  v3 = Logger.payments.unsafeMutableAddressor();
  v165 = *(void (**)(uint64_t, uint64_t, uint64_t))(v163 + 16);
  v165(v1, v3, v164);
  v168 = Logger.logObject.getter();
  v167 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 640) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v166 = *(_DWORD *)(v0 + 1216);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v169 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v168, v167))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v156 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v158 = createStorage<A>(capacity:type:)(0);
    v159 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v161 + 840) = buf;
    *(_QWORD *)(v161 + 848) = v158;
    *(_QWORD *)(v161 + 856) = v159;
    serialize(_:at:)(0, (_BYTE **)(v161 + 840));
    serialize(_:at:)(0, (_BYTE **)(v161 + 840));
    *(_QWORD *)(v161 + 864) = v169;
    v160 = (_QWORD *)swift_task_alloc();
    v160[2] = v161 + 840;
    v160[3] = v161 + 848;
    v160[4] = v161 + 856;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v168, v167, "#SendPaymentConfirmIntentStrategy makePromptForConfirmation", buf, v166);
    destroyStorage<A>(_:count:)(v158, 0, v156);
    destroyStorage<A>(_:count:)(v159, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v151 = *(_QWORD *)(v161 + 1048);
  v150 = *(_QWORD *)(v161 + 1008);
  v152 = *(_QWORD *)(v161 + 1000);

  v153 = *(void (**)(uint64_t, uint64_t))(v150 + 8);
  v153(v151, v152);
  *(_QWORD *)(v161 + 1064) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSendPaymentIntent, INSendPaymentIntentResponse>);
  v154 = (id)IntentResolutionRecord.intentResponse.getter();
  v4 = objc_msgSend(v154, sel_paymentRecord);
  *(_QWORD *)(v161 + 1072) = v4;
  v155 = v4;
  if (!v4)
  {
    v39 = *(_QWORD *)(v161 + 1016);
    v54 = *(_QWORD *)(v161 + 1000);

    v40 = Logger.payments.unsafeMutableAddressor();
    v165(v39, v40, v54);
    v57 = Logger.logObject.getter();
    v56 = static os_log_type_t.error.getter();
    *(_QWORD *)(v161 + 648) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v55 = *(_DWORD *)(v161 + 1220);
    v58 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v57, v56))
    {
      v50 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v51 = createStorage<A>(capacity:type:)(0);
      v52 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v161 + 656) = v50;
      *(_QWORD *)(v161 + 664) = v51;
      *(_QWORD *)(v161 + 672) = v52;
      serialize(_:at:)(0, (_BYTE **)(v161 + 656));
      serialize(_:at:)(0, (_BYTE **)(v161 + 656));
      *(_QWORD *)(v161 + 680) = v58;
      v53 = (_QWORD *)swift_task_alloc();
      v53[2] = v161 + 656;
      v53[3] = v161 + 664;
      v53[4] = v161 + 672;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24701B000, v57, v56, "#SendPaymentHandleIntentStrategy found no paymentRecord in intent response, throwing exception", v50, v55);
      destroyStorage<A>(_:count:)(v51, 0, v49);
      destroyStorage<A>(_:count:)(v52, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v50, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v48 = *(_QWORD *)(v161 + 1056);
    v43 = *(_QWORD *)(v161 + 1016);
    v44 = *(_QWORD *)(v161 + 1000);

    v153(v43, v44);
    type metadata accessor for INSendPaymentIntent();
    v47 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v45 = v41;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v42 = v46;
    *(_QWORD *)(v42 + 8) = v45;
    *(_QWORD *)(v42 + 16) = 0;
    *(_QWORD *)(v42 + 24) = 0;
    *(_QWORD *)(v42 + 32) = 0;
    *(_QWORD *)(v42 + 40) = 0;
    *(_BYTE *)(v42 + 48) = 12;
    swift_willThrow();

    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v48);
    goto LABEL_51;
  }
  v5 = *(_QWORD *)(v161 + 1040);
  v140 = *(_QWORD *)(v161 + 1000);
  *(_QWORD *)(v161 + 688) = v4;

  v6 = Logger.payments.unsafeMutableAddressor();
  v165(v5, v6, v140);
  v7 = v155;
  v142 = swift_allocObject();
  *(_QWORD *)(v142 + 16) = v155;
  oslog = Logger.logObject.getter();
  v149 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v161 + 696) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v161 + 1224);
  v144 = swift_allocObject();
  *(_BYTE *)(v144 + 16) = 64;
  v145 = swift_allocObject();
  *(_BYTE *)(v145 + 16) = 8;
  v143 = swift_allocObject();
  *(_QWORD *)(v143 + 16) = partial apply for implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
  *(_QWORD *)(v143 + 24) = v142;
  v146 = swift_allocObject();
  *(_QWORD *)(v146 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v146 + 24) = v143;
  _allocateUninitializedArray<A>(_:)();
  v147 = v8;
  swift_retain();
  *v147 = partial apply for closure #1 in OSLogArguments.append(_:);
  v147[1] = v144;
  swift_retain();
  v147[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v147[3] = v145;
  swift_retain();
  v147[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v147[5] = v146;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v149))
  {
    v137 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v136 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v138 = createStorage<A>(capacity:type:)(1);
    v139 = createStorage<A>(capacity:type:)(0);
    v170 = v137;
    v171 = v138;
    v172 = v139;
    serialize(_:at:)(2, &v170);
    serialize(_:at:)(1, &v170);
    v173 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v174 = v144;
    closure #1 in osLogInternal(_:log:type:)(&v173, (uint64_t)&v170, (uint64_t)&v171, (uint64_t)&v172);
    v173 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v174 = v145;
    closure #1 in osLogInternal(_:log:type:)(&v173, (uint64_t)&v170, (uint64_t)&v171, (uint64_t)&v172);
    v173 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v174 = v146;
    closure #1 in osLogInternal(_:log:type:)(&v173, (uint64_t)&v170, (uint64_t)&v171, (uint64_t)&v172);
    _os_log_impl(&dword_24701B000, oslog, v149, "#SendPaymentConfirmIntentStrategy intent contained paymentRecord: %@", v137, size);
    destroyStorage<A>(_:count:)(v138, 1, v136);
    destroyStorage<A>(_:count:)(v139, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v137, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v133 = *(_QWORD *)(v161 + 1040);
  v134 = *(_QWORD *)(v161 + 1000);

  v153(v133, v134);
  v9 = objc_msgSend(v155, sel_payee);
  *(_QWORD *)(v161 + 1080) = v9;
  v135 = v9;
  if (!v9)
  {
    v34 = *(_QWORD *)(v161 + 1024);
    v70 = *(_QWORD *)(v161 + 1000);
    v35 = Logger.payments.unsafeMutableAddressor();
    v165(v34, v35, v70);
    v73 = Logger.logObject.getter();
    v72 = static os_log_type_t.error.getter();
    *(_QWORD *)(v161 + 704) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v71 = *(_DWORD *)(v161 + 1228);
    v74 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v73, v72))
    {
      v66 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v65 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v67 = createStorage<A>(capacity:type:)(0);
      v68 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v161 + 712) = v66;
      *(_QWORD *)(v161 + 720) = v67;
      *(_QWORD *)(v161 + 728) = v68;
      serialize(_:at:)(0, (_BYTE **)(v161 + 712));
      serialize(_:at:)(0, (_BYTE **)(v161 + 712));
      *(_QWORD *)(v161 + 736) = v74;
      v69 = (_QWORD *)swift_task_alloc();
      v69[2] = v161 + 712;
      v69[3] = v161 + 720;
      v69[4] = v161 + 728;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24701B000, v73, v72, "#SendPaymentConfirmIntentStrategy found no payee in paymentRecord, throwing exception", v66, v71);
      destroyStorage<A>(_:count:)(v67, 0, v65);
      destroyStorage<A>(_:count:)(v68, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v66, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v64 = *(_QWORD *)(v161 + 1056);
    v59 = *(_QWORD *)(v161 + 1024);
    v60 = *(_QWORD *)(v161 + 1000);

    v153(v59, v60);
    v36 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payee", 5uLL, 1);
    type metadata accessor for INSendPaymentIntent();
    v63 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v61 = v37;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(Swift::String *)v38 = v36;
    *(_QWORD *)(v38 + 16) = v62;
    *(_QWORD *)(v38 + 24) = v61;
    *(_QWORD *)(v38 + 32) = 0;
    *(_QWORD *)(v38 + 40) = 0;
    *(_BYTE *)(v38 + 48) = 8;
    swift_willThrow();

    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v64);
    goto LABEL_51;
  }
  *(_QWORD *)(v161 + 744) = v9;
  v10 = objc_msgSend(v155, sel_currencyAmount);
  *(_QWORD *)(v161 + 1088) = v10;
  v132 = v10;
  if (!v10)
  {
    v29 = *(_QWORD *)(v161 + 1032);
    v86 = *(_QWORD *)(v161 + 1000);
    v30 = Logger.payments.unsafeMutableAddressor();
    v165(v29, v30, v86);
    log = Logger.logObject.getter();
    v88 = static os_log_type_t.error.getter();
    *(_QWORD *)(v161 + 752) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v87 = *(_DWORD *)(v161 + 1232);
    v90 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v88))
    {
      v82 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v81 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v83 = createStorage<A>(capacity:type:)(0);
      v84 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v161 + 760) = v82;
      *(_QWORD *)(v161 + 768) = v83;
      *(_QWORD *)(v161 + 776) = v84;
      serialize(_:at:)(0, (_BYTE **)(v161 + 760));
      serialize(_:at:)(0, (_BYTE **)(v161 + 760));
      *(_QWORD *)(v161 + 784) = v90;
      v85 = (_QWORD *)swift_task_alloc();
      v85[2] = v161 + 760;
      v85[3] = v161 + 768;
      v85[4] = v161 + 776;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24701B000, log, v88, "#SendPaymentConfirmIntentStrategy found no currencyAmount in paymentRecord, throwing exception", v82, v87);
      destroyStorage<A>(_:count:)(v83, 0, v81);
      destroyStorage<A>(_:count:)(v84, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v82, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v80 = *(_QWORD *)(v161 + 1056);
    v75 = *(_QWORD *)(v161 + 1032);
    v76 = *(_QWORD *)(v161 + 1000);

    v153(v75, v76);
    v31 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("currencyAmount", 0xEuLL, 1);
    type metadata accessor for INSendPaymentIntent();
    v79 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
    v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v77 = v32;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(Swift::String *)v33 = v31;
    *(_QWORD *)(v33 + 16) = v78;
    *(_QWORD *)(v33 + 24) = v77;
    *(_QWORD *)(v33 + 32) = 0;
    *(_QWORD *)(v33 + 40) = 0;
    *(_BYTE *)(v33 + 48) = 8;
    swift_willThrow();

    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v80);
LABEL_51:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v161 + 616) + 8))();
  }
  *(_QWORD *)(v161 + 792) = v10;
  v131 = objc_msgSend(v155, sel_note);
  if (v131)
  {
    v127 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v128 = v11;

    v129 = v127;
    v130 = v128;
  }
  else
  {
    v129 = 0;
    v130 = 0;
  }
  *(_QWORD *)(v161 + 1096) = v130;
  v120 = *(_QWORD *)(v161 + 888);
  *(_QWORD *)(v161 + 600) = v129;
  *(_QWORD *)(v161 + 608) = v130;
  v12 = objc_msgSend(v155, sel_feeAmount);
  *(_QWORD *)(v161 + 1104) = v12;
  v119 = v12;
  *(_QWORD *)(v161 + 800) = v12;
  type metadata accessor for PaymentsDialogConcept.Builder();
  v123 = (_QWORD *)PaymentsDialogConcept.Builder.__allocating_init()();
  *(_QWORD *)(v161 + 1112) = v123;
  *(_QWORD *)(v161 + 808) = v123;
  type metadata accessor for DialogPerson();
  v13 = v135;
  swift_retain();
  outlined init with copy of GlobalsProviding(v120 + 104, v161 + 136);
  swift_release();
  v122 = *(_QWORD *)(v161 + 160);
  v121 = *(_QWORD *)(v161 + 168);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v161 + 136), v122);
  (*(void (**)(uint64_t))(v121 + 16))(v122);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v161 + 176), *(_QWORD *)(v161 + 200));
  dispatch thunk of DeviceState.siriLocale.getter();
  v125 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
  __swift_destroy_boxed_opaque_existential_0(v161 + 176);
  __swift_destroy_boxed_opaque_existential_0(v161 + 136);
  swift_retain();
  v124 = (_QWORD *)((char *)v123 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payeeName);
  swift_beginAccess();
  *v124 = v125;
  swift_release();
  swift_endAccess();
  swift_release();
  type metadata accessor for DialogCurrency.Builder();
  DialogCurrency.Builder.__allocating_init()();
  v14 = objc_msgSend(v132, sel_amount);
  v126 = v14;
  if (v14)
  {
    objc_msgSend(v14, sel_doubleValue);

  }
  dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
  swift_release();
  v118 = objc_msgSend(v132, sel_currencyCode);
  if (v118)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v116 = v15;

    v117 = v116;
  }
  else
  {
    v117 = 0;
  }
  if (v117)
  {
    v115 = *(_QWORD *)(v161 + 984);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v16 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v115, 0, 1);
  }
  else
  {
    v91 = *(_QWORD *)(v161 + 984);
    v28 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v91, 1);
  }
  v113 = *(_QWORD *)(v161 + 984);
  dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)();
  outlined destroy of SpeakableString?(v113);
  swift_release();
  v114 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
  swift_release();
  swift_retain();
  swift_beginAccess();
  v123[2] = v114;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRetain();
  if (v130)
  {
    v112 = *(_QWORD *)(v161 + 976);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v17 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v112, 0, 1);
  }
  else
  {
    v92 = *(_QWORD *)(v161 + 976);
    v27 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v92, 1);
  }
  v111 = *(const void **)(v161 + 976);
  v109 = *(void **)(v161 + 968);
  outlined init with copy of SpeakableString?(v111, v109);
  v110 = (char *)v123 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo;
  swift_beginAccess();
  outlined assign with take of SpeakableString?(v109, v110);
  swift_endAccess();
  outlined destroy of SpeakableString?((uint64_t)v111);
  v18 = v119;
  if (v119)
  {
    *(_QWORD *)(v161 + 832) = v119;
    DialogCurrency.Builder.__allocating_init()();
    v108 = objc_msgSend(v119, sel_amount);
    if (v108)
    {
      objc_msgSend(v108, sel_doubleValue);

    }
    dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
    swift_release();
    v107 = objc_msgSend(v119, sel_currencyCode);
    if (v107)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      v105 = v19;

      v106 = v105;
    }
    else
    {
      v106 = 0;
    }
    if (v106)
    {
      v104 = *(_QWORD *)(v161 + 960);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v20 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v104, 0, 1);
    }
    else
    {
      v101 = *(_QWORD *)(v161 + 960);
      v21 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v101, 1);
    }
    v102 = *(_QWORD *)(v161 + 960);
    dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)();
    outlined destroy of SpeakableString?(v102);
    swift_release();
    v103 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
    swift_release();
    swift_retain();
    swift_beginAccess();
    v123[4] = v103;
    swift_release();
    swift_endAccess();
    swift_release();

  }
  swift_bridgeObjectRetain();
  if (v130)
  {
    v100 = *(_QWORD *)(v161 + 952);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v22 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v100, 0, 1);
  }
  else
  {
    v93 = *(_QWORD *)(v161 + 952);
    v26 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v93, 1);
  }
  v95 = *(void **)(v161 + 968);
  v97 = *(const void **)(v161 + 952);
  outlined init with copy of SpeakableString?(v97, v95);
  v96 = (char *)v123 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo;
  swift_beginAccess();
  outlined assign with take of SpeakableString?(v95, v96);
  swift_endAccess();
  outlined destroy of SpeakableString?((uint64_t)v97);
  IntentResolutionRecord.app.getter();
  v98 = App.sirikitApp.getter();
  swift_release();
  swift_retain();
  swift_beginAccess();
  v123[3] = v98;
  swift_release();
  swift_endAccess();
  swift_release();
  v99 = PaymentsDialogConcept.Builder.build()();
  *(_QWORD *)(v161 + 1120) = v99;
  *(_QWORD *)(v161 + 816) = v99;
  if ((static RFFeatureFlags.ResponseFramework.SMART.getter() & 1) != 0)
  {
    v23 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v161 + 1128) = v23;
    *v23 = *(_QWORD *)(v161 + 616);
    v23[1] = SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
    return SendPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:)(*(_QWORD *)(v161 + 872), *(_QWORD *)(v161 + 880), v99);
  }
  else
  {
    v94 = *(_QWORD *)(v161 + 888);
    swift_retain();
    *(_QWORD *)(v161 + 1144) = *(_QWORD *)(v94 + 16);
    swift_retain();
    swift_release();
    swift_retain();
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v161 + 1152) = v25;
    *v25 = *(_QWORD *)(v161 + 616);
    v25[1] = SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
    return SendPaymentCATs.intentConfirmationPrompt(paymentsConcept:)(*(_QWORD *)(v161 + 944), v99);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 616) = *v1;
  *(_QWORD *)(v2 + 1136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;

  v2 = (id)v0[138];
  v3 = (id)v0[136];
  v4 = (id)v0[135];
  v5 = (id)v0[134];
  v6 = v0[132];
  v0[77] = v0;
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[77] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 616) = *v1;
  *(_QWORD *)(v2 + 1160) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  char has_malloc_size;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[10];

  v5 = v0[115];
  v9 = v0[111];
  v0[77] = v0;
  has_malloc_size = _swift_stdlib_has_malloc_size();
  static PaymentsContextProvider.confirmationContextUpdate(isSend:)(has_malloc_size & 1, v5);
  swift_retain();
  outlined init with copy of GlobalsProviding(v9 + 24, (uint64_t)(v0 + 27));
  swift_release();
  swift_retain();
  outlined init with copy of GlobalsProviding(v9 + 104, (uint64_t)(v0 + 32));
  swift_release();
  v7 = v0[35];
  v6 = v0[36];
  __swift_project_boxed_opaque_existential_1(v0 + 32, v7);
  (*(void (**)(uint64_t))(v6 + 16))(v7);
  swift_retain();
  v8 = *(_QWORD *)(v9 + 16);
  swift_retain();
  swift_release();
  v10 = type metadata accessor for SendPaymentCATs();
  v19[3] = v10;
  v19[4] = &protocol witness table for SendPaymentCATs;
  v19[0] = v8;
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)(v0 + 27), (uint64_t)&v18, (uint64_t)v19, v0 + 2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  v17 = IntentResolutionRecord.app.getter();
  v0[146] = v17;
  v16 = IntentResolutionRecord.intent.getter();
  v0[147] = v16;
  v13 = IntentResolutionRecord.intentResponse.getter();
  v0[148] = v13;
  swift_retain();
  v11 = *(_QWORD *)(v9 + 16);
  swift_retain();
  swift_release();
  v0[40] = v10;
  v0[41] = &protocol witness table for SendPaymentCATs;
  v14 = (uint64_t)(v0 + 37);
  v0[37] = v11;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v12 + 1192) = v2;
  v15 = type metadata accessor for INSendPaymentIntent();
  v3 = type metadata accessor for INSendPaymentIntentResponse();
  *v2 = *(_QWORD *)(v12 + 616);
  v2[1] = SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  return ConfirmationViewBuilder.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:)(v17, v16, v13, v14, v15, v3, (uint64_t)&protocol witness table for INSendPaymentIntent, (uint64_t)&protocol witness table for INSendPaymentIntentResponse);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;

  v1 = v0[150];
  v14 = (id)v0[138];
  v15 = (id)v0[136];
  v16 = (id)v0[135];
  v17 = (id)v0[134];
  v18 = v0[132];
  v12 = v0[118];
  v11 = v0[117];
  v13 = v0[116];
  v9 = v0[115];
  v8 = v0[114];
  v10 = v0[113];
  v7 = v0[112];
  v5 = v0[111];
  v6 = (uint64_t *)v0[109];
  v0[77] = v0;
  v0[103] = v1;
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, (uint64_t)(v0 + 42));
  swift_release();
  v4 = v0[45];
  v3 = v0[46];
  __swift_project_boxed_opaque_existential_1(v0 + 42, v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v9, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v7, 0, 1, v10);
  v0[52] = 0;
  v0[53] = 0;
  v0[54] = 0;
  v0[55] = 0;
  v0[56] = 0;
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v6[3] = type metadata accessor for AceOutput();
  v6[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v6);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 52));
  outlined destroy of NLContextUpdate?(v7);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 47));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 42));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[77] + 8))();
}

{
  _QWORD *v0;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;

  v2 = (id)v0[138];
  v3 = (id)v0[136];
  v4 = (id)v0[135];
  v5 = (id)v0[134];
  v6 = v0[132];
  v0[77] = v0;
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[77] + 8))();
}

{
  _QWORD *v0;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;

  v2 = (id)v0[138];
  v3 = (id)v0[136];
  v4 = (id)v0[135];
  v5 = (id)v0[134];
  v6 = v0[132];
  v0[77] = v0;
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[77] + 8))();
}

{
  _QWORD *v0;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  v2 = (id)v0[148];
  v3 = (id)v0[147];
  v10 = (id)v0[138];
  v11 = (id)v0[136];
  v12 = (id)v0[135];
  v13 = (id)v0[134];
  v14 = v0[132];
  v8 = v0[118];
  v7 = v0[117];
  v9 = v0[116];
  v6 = v0[115];
  v4 = v0[114];
  v5 = v0[113];
  v0[77] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 37));

  swift_release();
  outlined destroy of ConfirmationViewBuilder((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[77] + 8))();
}

uint64_t SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v8 = (_QWORD *)*v2;
  v6 = *v2 + 16;
  v7 = *v2 + 296;
  v8[77] = *v2;
  v8[150] = a1;
  v8[151] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v4 = *(void **)(v6 + 1168);
    v5 = *(void **)(v6 + 1160);
    __swift_destroy_boxed_opaque_existential_0(v7);

    swift_release();
    outlined destroy of ConfirmationViewBuilder(v6);
  }
  return swift_task_switch();
}

uint64_t SendPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[45] = v3;
  v4[44] = a3;
  v4[43] = a2;
  v4[42] = a1;
  v4[37] = v4;
  v4[38] = 0;
  v4[39] = 0;
  v4[40] = 0;
  v4[41] = 0;
  type metadata accessor for CATOption();
  v4[46] = swift_task_alloc();
  v4[38] = a2;
  v4[39] = a3;
  v4[40] = v3;
  return swift_task_switch();
}

uint64_t SendPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = v0[44];
  v0[37] = v0;
  type metadata accessor for SendPaymentCATsModern();
  default argument 0 of CATWrapper.init(options:globals:)();
  v0[47] = CATWrapperSimple.__allocating_init(options:globals:)();
  swift_retain();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 384) = v1;
  *v1 = *(_QWORD *)(v3 + 296);
  v1[1] = SendPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:);
  return SendPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:)(v4);
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[13];

  v1 = v0[49];
  v11 = v0[45];
  v0[37] = v0;
  v0[41] = v1;
  swift_retain();
  outlined init with copy of GlobalsProviding(v11 + 24, (uint64_t)(v0 + 17));
  swift_release();
  swift_retain();
  outlined init with copy of GlobalsProviding(v11 + 104, (uint64_t)(v0 + 22));
  swift_release();
  v8 = v0[25];
  v7 = v0[26];
  __swift_project_boxed_opaque_existential_1(v0 + 22, v8);
  (*(void (**)(uint64_t))(v7 + 16))(v8);
  swift_retain();
  v9 = *(_QWORD *)(v11 + 16);
  swift_retain();
  swift_release();
  v12 = type metadata accessor for SendPaymentCATs();
  v22[3] = v12;
  v22[4] = &protocol witness table for SendPaymentCATs;
  v22[0] = v9;
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)(v0 + 17), (uint64_t)&v21, (uint64_t)v22, v0 + 2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 22));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSendPaymentIntent, INSendPaymentIntentResponse>);
  v20 = IntentResolutionRecord.app.getter();
  v0[51] = v20;
  v15 = IntentResolutionRecord.intent.getter();
  v0[52] = v15;
  v16 = IntentResolutionRecord.intentResponse.getter();
  v0[53] = v16;
  swift_retain();
  v10 = *(_QWORD *)(v11 + 16);
  swift_retain();
  swift_release();
  v0[30] = v12;
  v0[31] = &protocol witness table for SendPaymentCATs;
  v17 = (uint64_t)(v0 + 27);
  v0[27] = v10;
  swift_retain();
  v13 = *(_QWORD *)(v11 + 16);
  swift_retain();
  swift_release();
  v0[35] = v12;
  v0[36] = &protocol witness table for SendPaymentCATs;
  v18 = (uint64_t)(v0 + 32);
  v0[32] = v13;
  v2 = (_QWORD *)swift_task_alloc();
  v14[54] = v2;
  v19 = type metadata accessor for INSendPaymentIntent();
  v3 = type metadata accessor for INSendPaymentIntentResponse();
  *v2 = v14[37];
  v2[1] = SendPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:);
  v4 = v14[49];
  v5 = v14[42];
  v22[9] = v3;
  v22[10] = &protocol witness table for INSendPaymentIntent;
  v22[11] = &protocol witness table for INSendPaymentIntentResponse;
  return ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(v5, v20, v15, v16, v4, v17, v18, v19);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *v1;
  v5 = *v1 + 16;
  v6 = *v1 + 216;
  v7 = *v1 + 256;
  *(_QWORD *)(v8 + 296) = *v1;
  *(_QWORD *)(v8 + 440) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(void **)(v5 + 408);
    v4 = *(void **)(v5 + 400);
    __swift_destroy_boxed_opaque_existential_0(v7);
    __swift_destroy_boxed_opaque_existential_0(v6);

    swift_release();
    outlined destroy of ConfirmationViewBuilder(v5);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 392);
  *(_QWORD *)(v0 + 296) = v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 296) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 296) = v0;
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 296) + 8))();
}

{
  _QWORD *v0;
  id v2;
  id v3;
  id v4;

  v2 = (id)v0[53];
  v3 = (id)v0[52];
  v4 = (id)v0[49];
  v0[37] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));

  swift_release();
  outlined destroy of ConfirmationViewBuilder((uint64_t)(v0 + 2));

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[37] + 8))();
}

uint64_t SendPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[37] = *v2;
  v3[49] = a1;
  v3[50] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    swift_release();
  }
  return swift_task_switch();
}

uint64_t SendPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[33] = v3;
  v4[32] = a3;
  v4[31] = a1;
  v4[26] = v4;
  v4[27] = 0;
  v4[28] = 0;
  v4[29] = 0;
  v4[22] = 0;
  v4[23] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v4[34] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v4[35] = swift_task_alloc();
  v5 = type metadata accessor for TemplatingResult();
  v4[36] = v5;
  v4[37] = *(_QWORD *)(v5 - 8);
  v4[38] = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  v4[39] = v6;
  v4[40] = *(_QWORD *)(v6 - 8);
  v4[41] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v4[42] = swift_task_alloc();
  v4[27] = a2;
  v4[28] = a3;
  v4[29] = v3;
  return swift_task_switch();
}

uint64_t SendPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v14;
  uint8_t *buf;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint32_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;

  v19 = *(_QWORD *)(v0 + 336);
  v20 = *(_QWORD *)(v0 + 328);
  v23 = *(_QWORD *)(v0 + 320);
  v24 = *(_QWORD *)(v0 + 312);
  *(_QWORD *)(v0 + 208) = v0;
  v1 = SignpostName.makeSendPaymentErrorResponse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v1, v1[1], *((unsigned __int8 *)v1 + 16), v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSendPaymentIntent, INSendPaymentIntentResponse>);
  v21 = (id)IntentResolutionRecord.intentResponse.getter();
  v22 = objc_msgSend(v21, sel_code);

  v25 = static PaymentIntentCATResponseCode.from(_:)((unint64_t)v22);
  v26 = v2;
  *(_QWORD *)(v0 + 344) = v2;
  *(_QWORD *)(v0 + 176) = v25;
  *(_QWORD *)(v0 + 184) = v2;
  v3 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v20, v3, v24);
  swift_bridgeObjectRetain();
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v25;
  *(_QWORD *)(v28 + 24) = v26;
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 240) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v27 = *(_DWORD *)(v0 + 368);
  v30 = swift_allocObject();
  *(_BYTE *)(v30 + 16) = 32;
  v31 = swift_allocObject();
  *(_BYTE *)(v31 + 16) = 8;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(_QWORD *)(v29 + 24) = v28;
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v32 + 24) = v29;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v33 = v4;
  swift_retain();
  *v33 = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[1] = v30;
  swift_retain();
  v33[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[3] = v31;
  swift_retain();
  v33[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[5] = v32;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v34, v35))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v16 = createStorage<A>(capacity:type:)(0);
    v17 = createStorage<A>(capacity:type:)(1);
    v36 = buf;
    v37 = v16;
    v38 = v17;
    serialize(_:at:)(2, &v36);
    serialize(_:at:)(1, &v36);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v31;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    _os_log_impl(&dword_24701B000, v34, v35, "#SendPaymentConfirmIntentStrategy makeErrorResponse, response had %s", buf, v27);
    destroyStorage<A>(_:count:)(v16, 0, v14);
    destroyStorage<A>(_:count:)(v17, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v8 = v18[41];
  v7 = v18[40];
  v9 = v18[39];
  v10 = v18[33];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_retain();
  outlined init with copy of GlobalsProviding(v10 + 144, (uint64_t)(v18 + 2));
  swift_release();
  v11 = v18[5];
  v12 = v18[6];
  __swift_project_boxed_opaque_existential_1(v18 + 2, v11);
  v13 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 + 48) + **(int **)(v12 + 48));
  v5 = (_QWORD *)swift_task_alloc();
  v18[44] = v5;
  *v5 = v18[26];
  v5[1] = SendPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:);
  return v13(v18[35], v18[32], v11, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 208) = *v1;
  *(_QWORD *)(v2 + 360) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v1 = v0[37];
  v2 = v0[36];
  v3 = v0[35];
  v0[26] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v13 = v23[42];
    outlined destroy of TemplatingResult?(v23[35]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 2));
    v23[24] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v23[25] = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    type metadata accessor for INSendPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v12 = String.init(stringInterpolation:)();
    v11 = v9;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v10 = v12;
    *(_QWORD *)(v10 + 8) = v11;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 16;
    swift_willThrow();
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v13);
  }
  else
  {
    v20 = v23[42];
    v21 = v23[38];
    v18 = v23[37];
    v19 = v23[36];
    v22 = v23[34];
    v16 = v23[33];
    v17 = (uint64_t *)v23[31];
    (*(void (**)(void))(v18 + 32))();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 2));
    swift_retain();
    outlined init with copy of GlobalsProviding(v16 + 104, (uint64_t)(v23 + 7));
    swift_release();
    v15 = v23[10];
    v14 = v23[11];
    __swift_project_boxed_opaque_existential_1(v23 + 7, v15);
    (*(void (**)(uint64_t))(v14 + 16))(v15);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v22, 1);
    v23[17] = 0;
    v23[18] = 0;
    v23[19] = 0;
    v23[20] = 0;
    v23[21] = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v17[3] = type metadata accessor for AceOutput();
    v17[4] = MEMORY[0x24BE99088];
    __swift_allocate_boxed_opaque_existential_1(v17);
    static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v23 + 17));
    outlined destroy of NLContextUpdate?(v22);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 12));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 7));
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v19);
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v20);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v23[26] + 8))();
}

uint64_t SendPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[26] = v2;
  v3[25] = a1;
  v3[17] = v3;
  v3[18] = 0;
  v3[19] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[27] = swift_task_alloc();
  v4 = type metadata accessor for NLContextUpdate();
  v3[28] = v4;
  v3[29] = *(_QWORD *)(v4 - 8);
  v3[30] = swift_task_alloc();
  v5 = type metadata accessor for TemplatingResult();
  v3[31] = v5;
  v3[32] = *(_QWORD *)(v5 - 8);
  v3[33] = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  v3[34] = v6;
  v3[35] = *(_QWORD *)(v6 - 8);
  v3[36] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[37] = swift_task_alloc();
  v3[18] = a2;
  v3[19] = v2;
  return swift_task_switch();
}

uint64_t SendPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *buf;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint32_t v19;
  os_log_type_t v20;
  NSObject *v21;
  uint64_t v22;

  v16 = *(_QWORD *)(v0 + 296);
  v1 = *(_QWORD *)(v0 + 288);
  v17 = *(_QWORD *)(v0 + 280);
  v18 = *(_QWORD *)(v0 + 272);
  *(_QWORD *)(v0 + 136) = v0;
  v2 = SignpostName.makeConfirmationRejectedResponse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v16);
  v3 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v1, v3, v18);
  v21 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 160) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v19 = *(_DWORD *)(v0 + 328);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v22 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v21, v20))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v12 = createStorage<A>(capacity:type:)(0);
    v13 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v15 + 168) = buf;
    *(_QWORD *)(v15 + 176) = v12;
    *(_QWORD *)(v15 + 184) = v13;
    serialize(_:at:)(0, (_BYTE **)(v15 + 168));
    serialize(_:at:)(0, (_BYTE **)(v15 + 168));
    *(_QWORD *)(v15 + 192) = v22;
    v14 = (_QWORD *)swift_task_alloc();
    v14[2] = v15 + 168;
    v14[3] = v15 + 176;
    v14[4] = v15 + 184;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v21, v20, "#SendPaymentConfirmIntentStrategy makeConfirmationRejectedResponse", buf, v19);
    destroyStorage<A>(_:count:)(v12, 0, v10);
    destroyStorage<A>(_:count:)(v13, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v15 + 288);
  v6 = *(_QWORD *)(v15 + 280);
  v8 = *(_QWORD *)(v15 + 272);
  v9 = *(_QWORD *)(v15 + 208);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_retain();
  *(_QWORD *)(v15 + 304) = *(_QWORD *)(v9 + 16);
  swift_retain();
  swift_release();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v15 + 312) = v4;
  *v4 = *(_QWORD *)(v15 + 136);
  v4[1] = SendPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:);
  return SendPaymentCATs.promptCancelled()(*(_QWORD *)(v15 + 264));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 136) = *v1;
  *(_QWORD *)(v2 + 320) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  char has_malloc_size;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = v0[37];
  v12 = v0[33];
  v9 = v0[32];
  v10 = v0[31];
  v13 = v0[30];
  v7 = v0[29];
  v8 = v0[28];
  v14 = v0[27];
  v5 = v0[26];
  v6 = (uint64_t *)v0[25];
  v0[17] = v0;
  has_malloc_size = _swift_stdlib_has_malloc_size();
  static PaymentsContextProvider.confirmationContextUpdate(isSend:)(has_malloc_size & 1, v13);
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, (uint64_t)(v0 + 2));
  swift_release();
  v4 = v0[5];
  v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v14, v13, v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v8);
  v0[12] = 0;
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  v0[16] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v6[3] = type metadata accessor for AceOutput();
  v6[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v6);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 12));
  outlined destroy of NLContextUpdate?(v14);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v13, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v10);
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[17] + 8))();
}

uint64_t SendPaymentConfirmIntentStrategy.makeRepromptOnEmptyParse(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[10] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v4 = type metadata accessor for Logger();
  v3[11] = v4;
  v3[12] = *(_QWORD *)(v4 - 8);
  v3[13] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t SendPaymentConfirmIntentStrategy.makeRepromptOnEmptyParse(confirmParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint32_t v16;
  os_log_type_t v17;
  NSObject *v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 16) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v1, v2, v15);
  v18 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 40) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v16 = *(_DWORD *)(v0 + 112);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v19 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v18, v17))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v10 = createStorage<A>(capacity:type:)(0);
    v11 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v13 + 48) = buf;
    *(_QWORD *)(v13 + 56) = v10;
    *(_QWORD *)(v13 + 64) = v11;
    serialize(_:at:)(0, (_BYTE **)(v13 + 48));
    serialize(_:at:)(0, (_BYTE **)(v13 + 48));
    *(_QWORD *)(v13 + 72) = v19;
    v12 = (_QWORD *)swift_task_alloc();
    v12[2] = v13 + 48;
    v12[3] = v13 + 56;
    v12[4] = v13 + 64;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v18, v17, "#SendPaymentConfirmIntentStrategy makeRepromptOnEmptyParse", buf, v16);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v13 + 104);
  v4 = *(_QWORD *)(v13 + 96);
  v5 = *(_QWORD *)(v13 + 88);
  v6 = *(uint64_t **)(v13 + 80);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v5);
  type metadata accessor for SABaseCommand();
  _allocateUninitializedArray<A>(_:)();
  v6[3] = type metadata accessor for AceOutput();
  v6[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v6);
  AceOutput.init(commands:flowActivity:)();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v13 + 16) + 8))();
}

uint64_t SendPaymentConfirmIntentStrategy.makeRepromptOnLowConfidence(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[10] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v4 = type metadata accessor for Logger();
  v3[11] = v4;
  v3[12] = *(_QWORD *)(v4 - 8);
  v3[13] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t SendPaymentConfirmIntentStrategy.makeRepromptOnLowConfidence(confirmParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint32_t v16;
  os_log_type_t v17;
  NSObject *v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 16) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v1, v2, v15);
  v18 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 40) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v16 = *(_DWORD *)(v0 + 112);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v19 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v18, v17))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v10 = createStorage<A>(capacity:type:)(0);
    v11 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v13 + 48) = buf;
    *(_QWORD *)(v13 + 56) = v10;
    *(_QWORD *)(v13 + 64) = v11;
    serialize(_:at:)(0, (_BYTE **)(v13 + 48));
    serialize(_:at:)(0, (_BYTE **)(v13 + 48));
    *(_QWORD *)(v13 + 72) = v19;
    v12 = (_QWORD *)swift_task_alloc();
    v12[2] = v13 + 48;
    v12[3] = v13 + 56;
    v12[4] = v13 + 64;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v18, v17, "#SendPaymentConfirmIntentStrategy makeRepromptOnLowConfidence", buf, v16);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v13 + 104);
  v4 = *(_QWORD *)(v13 + 96);
  v5 = *(_QWORD *)(v13 + 88);
  v6 = *(uint64_t **)(v13 + 80);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v5);
  type metadata accessor for SABaseCommand();
  _allocateUninitializedArray<A>(_:)();
  v6[3] = type metadata accessor for AceOutput();
  v6[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v6);
  AceOutput.init(commands:flowActivity:)();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v13 + 16) + 8))();
}

uint64_t SendPaymentConfirmIntentStrategy.makeFlowCancelledResponse(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[26] = v2;
  v3[25] = a1;
  v3[17] = v3;
  v3[18] = 0;
  v3[19] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[27] = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  v3[28] = v4;
  v3[29] = *(_QWORD *)(v4 - 8);
  v3[30] = swift_task_alloc();
  v5 = type metadata accessor for Logger();
  v3[31] = v5;
  v3[32] = *(_QWORD *)(v5 - 8);
  v3[33] = swift_task_alloc();
  v3[18] = a2;
  v3[19] = v2;
  return swift_task_switch();
}

uint64_t SendPaymentConfirmIntentStrategy.makeFlowCancelledResponse(confirmParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint32_t v17;
  os_log_type_t v18;
  NSObject *v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 264);
  v15 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 136) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v2, v16);
  v19 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 160) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v17 = *(_DWORD *)(v0 + 296);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v20 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v19, v18))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v11 = createStorage<A>(capacity:type:)(0);
    v12 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v14 + 168) = buf;
    *(_QWORD *)(v14 + 176) = v11;
    *(_QWORD *)(v14 + 184) = v12;
    serialize(_:at:)(0, (_BYTE **)(v14 + 168));
    serialize(_:at:)(0, (_BYTE **)(v14 + 168));
    *(_QWORD *)(v14 + 192) = v20;
    v13 = (_QWORD *)swift_task_alloc();
    v13[2] = v14 + 168;
    v13[3] = v14 + 176;
    v13[4] = v14 + 184;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v19, v18, "#SendPaymentConfirmIntentStrategy makeFlowCancelledResponse", buf, v17);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v14 + 264);
  v5 = *(_QWORD *)(v14 + 256);
  v7 = *(_QWORD *)(v14 + 248);
  v8 = *(_QWORD *)(v14 + 208);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  swift_retain();
  *(_QWORD *)(v14 + 272) = *(_QWORD *)(v8 + 16);
  swift_retain();
  swift_release();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v14 + 280) = v3;
  *v3 = *(_QWORD *)(v14 + 136);
  v3[1] = RequestPaymentConfirmIntentStrategy.makeFlowCancelledResponse(confirmParameters:);
  return SendPaymentCATs.promptCancelled()(*(_QWORD *)(v14 + 240));
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.parseConfirmationResponse(input:confirmParameters:) in conformance SendPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentConfirmIntentStrategy.parseConfirmationResponse(input:confirmParameters:)(a1, a2, a3);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makePromptForConfirmation(confirmParameters:) in conformance SendPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeRepromptOnEmptyParse(confirmParameters:) in conformance SendPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentConfirmIntentStrategy.makeRepromptOnEmptyParse(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeRepromptOnLowConfidence(confirmParameters:) in conformance SendPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentConfirmIntentStrategy.makeRepromptOnLowConfidence(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeConfirmationRejectedResponse(confirmParameters:) in conformance SendPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeFlowCancelledResponse(confirmParameters:) in conformance SendPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentConfirmIntentStrategy.makeFlowCancelledResponse(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeErrorResponse(error:confirmParameters:) in conformance SendPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:)(a1, a2, a3);
}

uint64_t sub_24715DFE0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_24715E01C()
{
  return swift_deallocObject();
}

uint64_t sub_24715E044()
{
  return swift_deallocObject();
}

uint64_t sub_24715E06C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24715E0A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24715E0E4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24715E120()
{
  return swift_deallocObject();
}

uint64_t sub_24715E148()
{
  return swift_deallocObject();
}

uint64_t sub_24715E170()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24715E1AC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for SendPaymentConfirmIntentStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SendPaymentConfirmIntentStrategy;
  if (!type metadata singleton initialization cache for SendPaymentConfirmIntentStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t SAClientBoundCommand.data.getter()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  unint64_t v4;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  v22 = 0;
  v18 = 0;
  v19 = v0;
  v16 = objc_msgSend(v0, sel_dictionary);
  if (!v16)
    return Data.init()();
  v18 = v16;
  v20 = 0;
  v13 = (id)objc_opt_self();
  v1 = v16;
  v17 = 0;
  v15 = objc_msgSend(v13, sel_dataWithPropertyList_format_options_error_, v16, 200, 0, &v17);
  v14 = v17;
  v2 = v17;
  v3 = v20;
  v20 = v14;

  swift_unknownObjectRelease();
  if (v15)
  {
    v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v4;
    outlined copy of Data._Representation(v11, v4);
    v21 = v11;
    v22 = v10;

    outlined destroy of Data((uint64_t)&v21);
    return v11;
  }
  else
  {
    v7 = v20;
    v8 = (id)_convertNSErrorToError(_:)();

    swift_willThrow();
    v6 = v8;
    v9 = Data.init()();

    return v9;
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Data(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t SiriPaymentsSnippetModel.PaymentConfirmationModel.init(confirmLabel:cancelLabel:noteLabel:feeLabel:confirmDI:cancelDI:appId:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  a9[9] = a11;
  a9[10] = a12;
  a9[11] = a13;
  a9[12] = a14;
  a9[13] = a15;
  return result;
}

void *SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.init(intent:response:confirmation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a4, a1);
  v12 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
  v8 = *(int *)(v12 + 20);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a4 + v8, a2);
  return memcpy((void *)(a4 + *(int *)(v12 + 24)), a3, 0x70uLL);
}

void *SiriPaymentsSnippetModel.SendPaymentConfirmationModel.init(intent:response:confirmation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a4, a1);
  v12 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
  v8 = *(int *)(v12 + 20);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a4 + v8, a2);
  return memcpy((void *)(a4 + *(int *)(v12 + 24)), a3, 0x70uLL);
}

uint64_t one-time initialization function for bundleName()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SiriPaymentsUIPlugin", 0x14uLL, 1);
  result = v1._countAndFlagsBits;
  static SiriPaymentsSnippetModel.bundleName = (__int128)v1;
  return result;
}

__int128 *SiriPaymentsSnippetModel.bundleName.unsafeMutableAddressor()
{
  if (one-time initialization token for bundleName != -1)
    swift_once();
  return &static SiriPaymentsSnippetModel.bundleName;
}

uint64_t static SiriPaymentsSnippetModel.bundleName.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)SiriPaymentsSnippetModel.bundleName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  unsigned __int8 v5;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("intent", 6uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 0;
LABEL_8:
    swift_bridgeObjectRelease();
    return v5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("response", 8uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 1;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("confirmation", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 2;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98]("eLl\n", &type metadata for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("intent", 6uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("response", 8uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("confirmation", 0xCuLL, 1)._countAndFlagsBits;
}

uint64_t SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  _QWORD v56[14];
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;

  v42 = &v60;
  v39 = a1;
  v60 = 0;
  v59 = 0;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = (*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)v8 - v36;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  v46 = *(_QWORD *)(v50 - 8);
  v38 = (*(_QWORD *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v50);
  v52 = (char *)v8 - v38;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys>);
  v40 = *(_QWORD *)(v49 - 8);
  v41 = (*(_QWORD *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v39);
  v45 = (char *)v8 - v41;
  *v42 = (uint64_t)v2;
  v59 = v1;
  v43 = v2[3];
  v44 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v43);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v52, v47, v50);
  v48 = &v58;
  v58 = 0;
  lazy protocol witness table accessor for type CodableIntent<INRequestPaymentIntent> and conformance CodableIntent<A>();
  v3 = v51;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v53 = v3;
  v54 = v3;
  if (v3)
  {
    v9 = v54;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v52, v50);
    result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v45, v49);
    v10 = v9;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v52, v50);
    v30 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v37, v47 + *(int *)(v30 + 20), v34);
    v31 = &v57;
    v57 = 1;
    lazy protocol witness table accessor for type CodableIntentResponse<INRequestPaymentIntentResponse> and conformance CodableIntentResponse<A>();
    v4 = v53;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v32 = v4;
    v33 = v4;
    if (v4)
    {
      v8[1] = v33;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
      return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v45, v49);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
      v11 = (uint64_t *)(v47 + *(int *)(v30 + 24));
      v14 = *v11;
      v15 = v11[1];
      v13 = v11[2];
      v12 = v11[3];
      v16 = v11[4];
      v17 = v11[5];
      v18 = v11[6];
      v19 = v11[7];
      v20 = v11[8];
      v21 = v11[9];
      v22 = v11[10];
      v23 = v11[11];
      v24 = v11[12];
      v25 = v11[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v20, v21);
      outlined copy of Data._Representation(v22, v23);
      v5 = v12;
      swift_bridgeObjectRetain();
      v27 = v56;
      v56[0] = v14;
      v56[1] = v15;
      v56[2] = v13;
      v56[3] = v5;
      v56[4] = v16;
      v56[5] = v17;
      v56[6] = v18;
      v56[7] = v19;
      v56[8] = v20;
      v56[9] = v21;
      v56[10] = v22;
      v56[11] = v23;
      v56[12] = v24;
      v56[13] = v25;
      v26 = &v55;
      v55 = 2;
      lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel();
      v6 = v32;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v28 = v6;
      v29 = v6;
      if (v6)
        v8[0] = v29;
      outlined destroy of SiriPaymentsSnippetModel.PaymentConfirmationModel((uint64_t)v56);
      return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v45, v49);
    }
  }
  return result;
}

uint64_t SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t result;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  _QWORD *v80;
  char v81;

  v41 = a2;
  v53 = a1;
  v80 = 0;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = (*(_QWORD *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v42);
  v45 = (char *)v26 - v44;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  v47 = *(_QWORD *)(v46 - 8);
  v48 = (*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v46);
  v49 = (char *)v26 - v48;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys>);
  v51 = *(_QWORD *)(v50 - 8);
  v52 = (*(_QWORD *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v50);
  v57 = (char *)v26 - v52;
  v54 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
  v55 = (*(_QWORD *)(*(_QWORD *)(v54 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v53);
  v56 = (uint64_t)v26 - v55;
  v81 = 0;
  v80 = v2;
  v59 = v2[3];
  v60 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v59);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys();
  v3 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v61 = v3;
  v62 = v3;
  if (v3)
  {
    v30 = v62;
  }
  else
  {
    v38 = &v79;
    v79 = 0;
    lazy protocol witness table accessor for type CodableIntent<INRequestPaymentIntent> and conformance CodableIntent<A>();
    v4 = v61;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v39 = v4;
    v40 = v4;
    if (v4)
    {
      v29 = v40;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v57, v50);
      v30 = v29;
    }
    else
    {
      v34 = 1;
      v81 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v56, v49, v46);
      v35 = &v78;
      v78 = v34;
      lazy protocol witness table accessor for type CodableIntentResponse<INRequestPaymentIntentResponse> and conformance CodableIntentResponse<A>();
      v5 = v39;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v36 = v5;
      v37 = v5;
      if (v5)
      {
        v28 = v37;
        (*(void (**)(char *, uint64_t))(v51 + 8))(v57, v50);
        v30 = v28;
      }
      else
      {
        v6 = v56 + *(int *)(v54 + 20);
        v81 = 3;
        (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v6, v45, v42);
        v31 = &v63;
        v63 = 2;
        lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel();
        v7 = v36;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v32 = v7;
        v33 = v7;
        if (!v7)
        {
          v8 = v50;
          v9 = v57;
          v10 = v51;
          v11 = v65;
          v12 = v66;
          v13 = v67;
          v14 = v68;
          v15 = v69;
          v16 = v70;
          v17 = v71;
          v18 = v72;
          v19 = v73;
          v20 = v74;
          v21 = v75;
          v22 = v76;
          v23 = v77;
          v24 = (_QWORD *)(v56 + *(int *)(v54 + 24));
          v81 = 7;
          *v24 = v64;
          v24[1] = v11;
          v24[2] = v12;
          v24[3] = v13;
          v24[4] = v14;
          v24[5] = v15;
          v24[6] = v16;
          v24[7] = v17;
          v24[8] = v18;
          v24[9] = v19;
          v24[10] = v20;
          v24[11] = v21;
          v24[12] = v22;
          v24[13] = v23;
          (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v8);
          outlined init with copy of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(v56, v41);
          __swift_destroy_boxed_opaque_existential_0(v53);
          return outlined destroy of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(v56);
        }
        v27 = v33;
        (*(void (**)(char *, uint64_t))(v51 + 8))(v57, v50);
        v30 = v27;
      }
    }
  }
  v26[1] = v30;
  result = __swift_destroy_boxed_opaque_existential_0(v53);
  if ((v81 & 1) != 0)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v56, v46);
  if ((v81 & 2) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v56 + *(int *)(v54 + 20), v42);
  return result;
}

uint64_t SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t SiriPaymentsSnippetModel.SendPaymentConfirmationModel.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  _QWORD v56[14];
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;

  v42 = &v60;
  v39 = a1;
  v60 = 0;
  v59 = 0;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = (*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)v8 - v36;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  v46 = *(_QWORD *)(v50 - 8);
  v38 = (*(_QWORD *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v50);
  v52 = (char *)v8 - v38;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys>);
  v40 = *(_QWORD *)(v49 - 8);
  v41 = (*(_QWORD *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v39);
  v45 = (char *)v8 - v41;
  *v42 = (uint64_t)v2;
  v59 = v1;
  v43 = v2[3];
  v44 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v43);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v52, v47, v50);
  v48 = &v58;
  v58 = 0;
  lazy protocol witness table accessor for type CodableIntent<INSendPaymentIntent> and conformance CodableIntent<A>();
  v3 = v51;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v53 = v3;
  v54 = v3;
  if (v3)
  {
    v9 = v54;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v52, v50);
    result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v45, v49);
    v10 = v9;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v52, v50);
    v30 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v37, v47 + *(int *)(v30 + 20), v34);
    v31 = &v57;
    v57 = 1;
    lazy protocol witness table accessor for type CodableIntentResponse<INSendPaymentIntentResponse> and conformance CodableIntentResponse<A>();
    v4 = v53;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v32 = v4;
    v33 = v4;
    if (v4)
    {
      v8[1] = v33;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
      return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v45, v49);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
      v11 = (uint64_t *)(v47 + *(int *)(v30 + 24));
      v14 = *v11;
      v15 = v11[1];
      v13 = v11[2];
      v12 = v11[3];
      v16 = v11[4];
      v17 = v11[5];
      v18 = v11[6];
      v19 = v11[7];
      v20 = v11[8];
      v21 = v11[9];
      v22 = v11[10];
      v23 = v11[11];
      v24 = v11[12];
      v25 = v11[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v20, v21);
      outlined copy of Data._Representation(v22, v23);
      v5 = v12;
      swift_bridgeObjectRetain();
      v27 = v56;
      v56[0] = v14;
      v56[1] = v15;
      v56[2] = v13;
      v56[3] = v5;
      v56[4] = v16;
      v56[5] = v17;
      v56[6] = v18;
      v56[7] = v19;
      v56[8] = v20;
      v56[9] = v21;
      v56[10] = v22;
      v56[11] = v23;
      v56[12] = v24;
      v56[13] = v25;
      v26 = &v55;
      v55 = 2;
      lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel();
      v6 = v32;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v28 = v6;
      v29 = v6;
      if (v6)
        v8[0] = v29;
      outlined destroy of SiriPaymentsSnippetModel.PaymentConfirmationModel((uint64_t)v56);
      return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v45, v49);
    }
  }
  return result;
}

uint64_t SiriPaymentsSnippetModel.SendPaymentConfirmationModel.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t result;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  _QWORD *v80;
  char v81;

  v41 = a2;
  v53 = a1;
  v80 = 0;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = (*(_QWORD *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v42);
  v45 = (char *)v26 - v44;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  v47 = *(_QWORD *)(v46 - 8);
  v48 = (*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v46);
  v49 = (char *)v26 - v48;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys>);
  v51 = *(_QWORD *)(v50 - 8);
  v52 = (*(_QWORD *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v50);
  v57 = (char *)v26 - v52;
  v54 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
  v55 = (*(_QWORD *)(*(_QWORD *)(v54 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v53);
  v56 = (uint64_t)v26 - v55;
  v81 = 0;
  v80 = v2;
  v59 = v2[3];
  v60 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v59);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys();
  v3 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v61 = v3;
  v62 = v3;
  if (v3)
  {
    v30 = v62;
  }
  else
  {
    v38 = &v79;
    v79 = 0;
    lazy protocol witness table accessor for type CodableIntent<INSendPaymentIntent> and conformance CodableIntent<A>();
    v4 = v61;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v39 = v4;
    v40 = v4;
    if (v4)
    {
      v29 = v40;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v57, v50);
      v30 = v29;
    }
    else
    {
      v34 = 1;
      v81 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v56, v49, v46);
      v35 = &v78;
      v78 = v34;
      lazy protocol witness table accessor for type CodableIntentResponse<INSendPaymentIntentResponse> and conformance CodableIntentResponse<A>();
      v5 = v39;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v36 = v5;
      v37 = v5;
      if (v5)
      {
        v28 = v37;
        (*(void (**)(char *, uint64_t))(v51 + 8))(v57, v50);
        v30 = v28;
      }
      else
      {
        v6 = v56 + *(int *)(v54 + 20);
        v81 = 3;
        (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v6, v45, v42);
        v31 = &v63;
        v63 = 2;
        lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel();
        v7 = v36;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v32 = v7;
        v33 = v7;
        if (!v7)
        {
          v8 = v50;
          v9 = v57;
          v10 = v51;
          v11 = v65;
          v12 = v66;
          v13 = v67;
          v14 = v68;
          v15 = v69;
          v16 = v70;
          v17 = v71;
          v18 = v72;
          v19 = v73;
          v20 = v74;
          v21 = v75;
          v22 = v76;
          v23 = v77;
          v24 = (_QWORD *)(v56 + *(int *)(v54 + 24));
          v81 = 7;
          *v24 = v64;
          v24[1] = v11;
          v24[2] = v12;
          v24[3] = v13;
          v24[4] = v14;
          v24[5] = v15;
          v24[6] = v16;
          v24[7] = v17;
          v24[8] = v18;
          v24[9] = v19;
          v24[10] = v20;
          v24[11] = v21;
          v24[12] = v22;
          v24[13] = v23;
          (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v8);
          outlined init with copy of SiriPaymentsSnippetModel.SendPaymentConfirmationModel(v56, v41);
          __swift_destroy_boxed_opaque_existential_0(v53);
          return outlined destroy of SiriPaymentsSnippetModel.SendPaymentConfirmationModel(v56);
        }
        v27 = v33;
        (*(void (**)(char *, uint64_t))(v51 + 8))(v57, v50);
        v30 = v27;
      }
    }
  }
  v26[1] = v30;
  result = __swift_destroy_boxed_opaque_existential_0(v53);
  if ((v81 & 1) != 0)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v56, v46);
  if ((v81 & 2) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v56 + *(int *)(v54 + 20), v42);
  return result;
}

void static SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.__derived_enum_equals(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_247160470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_2471604E0
                                                                                       + *((int *)qword_247160578 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_2471604F0()
{
  uint64_t v1;

  return v1 == 0;
}

void SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_2471605E4()
{
  return Hasher.combine<A>(_:)();
}

uint64_t SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  unsigned __int8 v9;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("confirmLabel", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v8 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 0;
LABEL_16:
    swift_bridgeObjectRelease();
    return v9;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("cancelLabel", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v7 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 1;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("noteLabel", 9uLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 2;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("feeLabel", 8uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 3;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("confirmDI", 9uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 4;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("cancelDI", 8uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 5;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appId", 5uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 6;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 7;
}

uint64_t SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.init(intValue:)()
{
  return 7;
}

uint64_t SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys);
    return v0;
  }
  return v2;
}

void SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_247160C28()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("confirmLabel", 0xCuLL, 1)._countAndFlagsBits;
}

uint64_t SiriPaymentsSnippetModel.PaymentConfirmationModel.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  __int128 v56;
  char v57;
  __int128 v58;
  char v59;
  char v60;
  char v61;
  char v62;
  uint64_t v63;
  _QWORD *v64;
  __int128 v65;
  __int128 v66;

  v41 = a1;
  v64 = 0;
  v63 = 0;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys>);
  v42 = *(_QWORD *)(v51 - 8);
  v43 = (*(_QWORD *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v46 = (char *)v11 - v43;
  v64 = (_QWORD *)MEMORY[0x24BDAC7A8](v41);
  v63 = v1;
  v44 = v64[3];
  v45 = v64[4];
  __swift_project_boxed_opaque_existential_1(v64, v44);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v2 = v48;
  v49 = *v47;
  v50 = v47[1];
  swift_bridgeObjectRetain();
  v62 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v52 = v2;
  v53 = v2;
  if (v2)
  {
    v16 = v53;
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v46, v51);
    v17 = v16;
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = v52;
    v37 = v47[2];
    v38 = v47[3];
    swift_bridgeObjectRetain();
    v61 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v39 = v3;
    v40 = v3;
    if (v3)
    {
      v15 = v40;
      swift_bridgeObjectRelease();
      result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v46, v51);
      v17 = v15;
    }
    else
    {
      swift_bridgeObjectRelease();
      v4 = v39;
      v33 = v47[4];
      v34 = v47[5];
      swift_bridgeObjectRetain();
      v60 = 2;
      KeyedEncodingContainer.encode(_:forKey:)();
      v35 = v4;
      v36 = v4;
      if (v4)
      {
        v14 = v36;
        swift_bridgeObjectRelease();
        result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v46, v51);
        v17 = v14;
      }
      else
      {
        swift_bridgeObjectRelease();
        v5 = v35;
        v29 = v47[6];
        v30 = v47[7];
        swift_bridgeObjectRetain();
        v59 = 3;
        KeyedEncodingContainer.encode(_:forKey:)();
        v31 = v5;
        v32 = v5;
        if (v5)
        {
          v13 = v32;
          swift_bridgeObjectRelease();
          result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v46, v51);
          v17 = v13;
        }
        else
        {
          swift_bridgeObjectRelease();
          v66 = *((_OWORD *)v47 + 4);
          outlined retain of Data((uint64_t)&v66);
          v25 = &v58;
          v58 = v66;
          v24 = &v57;
          v57 = 4;
          v6 = lazy protocol witness table accessor for type Data and conformance Data();
          v7 = v31;
          v26 = v6;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          v27 = v7;
          v28 = v7;
          if (v7)
          {
            v12 = v28;
            outlined destroy of Data((uint64_t)&v58);
            result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v46, v51);
            v17 = v12;
          }
          else
          {
            outlined destroy of Data((uint64_t)&v58);
            v65 = *((_OWORD *)v47 + 5);
            outlined retain of Data((uint64_t)&v65);
            v8 = v27;
            v56 = v65;
            v55 = 5;
            KeyedEncodingContainer.encode<A>(_:forKey:)();
            v22 = v8;
            v23 = v8;
            if (v8)
            {
              v11[2] = v23;
              outlined destroy of Data((uint64_t)&v56);
              return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v46, v51);
            }
            else
            {
              outlined destroy of Data((uint64_t)&v56);
              v9 = v22;
              v18 = v47[12];
              v19 = v47[13];
              swift_bridgeObjectRetain();
              v54 = 6;
              KeyedEncodingContainer.encode(_:forKey:)();
              v20 = v9;
              v21 = v9;
              if (v9)
                v11[1] = v21;
              swift_bridgeObjectRelease();
              return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v46, v51);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *SiriPaymentsSnippetModel.PaymentConfirmationModel.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  char v106;
  char v107;
  char v108;
  _QWORD *v109;
  _QWORD v110[2];
  _QWORD v111[2];
  _QWORD v112[2];
  _QWORD v113[2];
  uint64_t v114;
  char v115[8];
  char v116;

  v86 = v110;
  v87 = a2;
  v88 = a1;
  v109 = 0;
  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys>);
  v90 = *(_QWORD *)(v89 - 8);
  v91 = (*(_QWORD *)(v90 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v88);
  v92 = (char *)&v39 - v91;
  v116 = 0;
  v109 = v2;
  v94 = v2[3];
  v95 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v94);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys();
  v3 = v93;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v96 = v3;
  v97 = v3;
  if (v3)
  {
    v43 = v97;
  }
  else
  {
    v108 = 0;
    v4 = KeyedDecodingContainer.decode(_:forKey:)();
    v82 = 0;
    v83 = v4;
    v84 = v5;
    v85 = 0;
    v76 = v5;
    v75 = v4;
    v77 = 1;
    v116 = 1;
    swift_bridgeObjectRetain();
    v110[0] = v75;
    v110[1] = v76;
    v107 = v77;
    v6 = KeyedDecodingContainer.decode(_:forKey:)();
    v78 = 0;
    v79 = v6;
    v80 = v7;
    v81 = 0;
    v70 = v7;
    v69 = v6;
    v116 = 3;
    swift_bridgeObjectRetain();
    v111[0] = v69;
    v111[1] = v70;
    v106 = 2;
    v8 = KeyedDecodingContainer.decode(_:forKey:)();
    v71 = 0;
    v72 = v8;
    v73 = v9;
    v74 = 0;
    v64 = v9;
    v63 = (uint64_t *)v8;
    v116 = 7;
    swift_bridgeObjectRetain();
    v112[0] = v63;
    v112[1] = v64;
    v105 = 3;
    v10 = KeyedDecodingContainer.decode(_:forKey:)();
    v65 = 0;
    v66 = v10;
    v67 = v11;
    v68 = 0;
    v58 = v11;
    v57 = v10;
    v116 = 15;
    swift_bridgeObjectRetain();
    v113[0] = v57;
    v113[1] = v58;
    v59 = &v102;
    v102 = 4;
    v12 = lazy protocol witness table accessor for type Data and conformance Data();
    v13 = v65;
    v60 = v12;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v61 = v13;
    v62 = v13;
    if (v13)
    {
      v42 = v62;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v90 + 8))(v92, v89);
      v43 = v42;
    }
    else
    {
      v53 = v103;
      v54 = v104;
      v116 = 31;
      outlined copy of Data._Representation(v103, v104);
      v14 = v61;
      v114 = v53;
      v86[9] = v54;
      v99 = 5;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v55 = v14;
      v56 = v14;
      if (v14)
      {
        v41 = v56;
        outlined consume of Data._Representation(v53, v54);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v90 + 8))(v92, v89);
        v43 = v41;
      }
      else
      {
        v47 = v100;
        v48 = v101;
        v116 = 63;
        outlined copy of Data._Representation(v100, v101);
        v15 = v86;
        v16 = v48;
        v17 = v55;
        v86[10] = v47;
        v15[11] = v16;
        v98 = 6;
        v18 = KeyedDecodingContainer.decode(_:forKey:)();
        v49 = v17;
        v50 = v18;
        v51 = v19;
        v52 = v17;
        if (!v17)
        {
          v46 = v51;
          v45 = v50;
          v44 = v110;
          v116 = 127;
          swift_bridgeObjectRetain();
          v20 = v92;
          v21 = v86;
          v22 = v90;
          v23 = v89;
          v24 = v46;
          v86[12] = v45;
          v21[13] = v24;
          (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v23);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v53, v54);
          outlined copy of Data._Representation(v47, v48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v47, v48);
          outlined consume of Data._Representation(v53, v54);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_0(v88);
          outlined destroy of SiriPaymentsSnippetModel.PaymentConfirmationModel((uint64_t)v44);
          v25 = v76;
          v26 = v69;
          v27 = v70;
          v28 = v64;
          v29 = v57;
          v30 = v58;
          v31 = v53;
          v32 = v54;
          v33 = v47;
          v34 = v48;
          v35 = v45;
          v36 = v87;
          v37 = v46;
          result = v63;
          *v87 = v75;
          v36[1] = v25;
          v36[2] = v26;
          v36[3] = v27;
          v36[4] = (uint64_t)result;
          v36[5] = v28;
          v36[6] = v29;
          v36[7] = v30;
          v36[8] = v31;
          v36[9] = v32;
          v36[10] = v33;
          v36[11] = v34;
          v36[12] = v35;
          v36[13] = v37;
          return result;
        }
        v40 = v52;
        outlined consume of Data._Representation(v47, v48);
        outlined consume of Data._Representation(v53, v54);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v90 + 8))(v92, v89);
        v43 = v40;
      }
    }
  }
  v39 = v43;
  result = (uint64_t *)__swift_destroy_boxed_opaque_existential_0(v88);
  if ((v116 & 1) != 0)
  {
    result = v110;
    outlined destroy of String.UTF8View();
  }
  if ((v116 & 2) != 0)
  {
    result = v111;
    outlined destroy of String.UTF8View();
  }
  if ((v116 & 4) != 0)
  {
    result = v112;
    outlined destroy of String.UTF8View();
  }
  if ((v116 & 8) != 0)
  {
    result = v113;
    outlined destroy of String.UTF8View();
  }
  if ((v116 & 0x10) != 0)
  {
    result = &v114;
    outlined destroy of Data((uint64_t)&v114);
  }
  if ((v116 & 0x20) != 0)
  {
    result = (uint64_t *)v115;
    outlined destroy of Data((uint64_t)v115);
  }
  return result;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appDescription", 0xEuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("prompt", 6uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("prompt", 6uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appDescription", 0xEuLL, 1)._countAndFlagsBits;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationModel.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v14 = a1;
  v20 = a2;
  v12 = a3;
  v13 = a4;
  v34 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys>);
  v15 = *(_QWORD *)(v22 - 8);
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = (char *)v10 - v16;
  v34 = (_QWORD *)MEMORY[0x24BDAC7A8](v14);
  v31 = v4;
  v32 = v5;
  v33 = v6;
  v17 = v34[3];
  v18 = v34[4];
  __swift_project_boxed_opaque_existential_1(v34, v17);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_bridgeObjectRetain();
  v25 = &v30;
  v30 = v20;
  v21 = &v29;
  v29 = 0;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AppDescription]);
  lazy protocol witness table accessor for type [AppDescription] and conformance <A> [A]();
  v7 = v24;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v26 = v7;
  v27 = v7;
  if (v7)
  {
    v10[2] = v27;
    outlined destroy of [SFCardSection]();
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v22);
  }
  else
  {
    outlined destroy of [SFCardSection]();
    v8 = v26;
    swift_bridgeObjectRetain();
    v28 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[4] = v8;
    v11 = v8;
    if (v8)
      v10[1] = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v22);
  }
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationModel.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD v36[3];
  char v37;

  v22 = a1;
  v35 = 0;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys>);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v26 = (char *)v6 - v25;
  v37 = 0;
  v35 = (_QWORD *)MEMORY[0x24BDAC7A8](v22);
  v28 = v35[3];
  v29 = v35[4];
  __swift_project_boxed_opaque_existential_1(v35, v28);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys();
  v1 = v27;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v30 = v1;
  v31 = v1;
  if (v1)
  {
    v8 = v31;
  }
  else
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AppDescription]);
    v18 = &v33;
    v33 = 0;
    lazy protocol witness table accessor for type [AppDescription] and conformance <A> [A]();
    v2 = v30;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v20 = v2;
    v21 = v2;
    if (!v2)
    {
      v12 = v34;
      v13 = 1;
      v37 = 1;
      swift_bridgeObjectRetain();
      v36[0] = v12;
      v32 = v13;
      v3 = KeyedDecodingContainer.decode(_:forKey:)();
      v14 = 0;
      v15 = v3;
      v16 = v4;
      v17 = 0;
      v11 = v4;
      v10 = v3;
      v9 = v36;
      v37 = 3;
      swift_bridgeObjectRetain();
      v36[1] = v10;
      v36[2] = v11;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0(v22);
      outlined destroy of SiriPaymentsSnippetModel.AppDisambiguationModel();
      return v12;
    }
    v7 = v21;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    v8 = v7;
  }
  v6[2] = v8;
  __swift_destroy_boxed_opaque_existential_0(v22);
  if ((v37 & 1) != 0)
    outlined destroy of [SFCardSection]();
  return v6[1];
}

uint64_t static SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.__derived_enum_equals(_:_:)()
{
  return 1;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_0", 2uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.AppDisambiguationCodingKeys, &type metadata for SiriPaymentsSnippetModel.AppDisambiguationCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.AppDisambiguationCodingKeys, &type metadata for SiriPaymentsSnippetModel.AppDisambiguationCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.AppDisambiguationCodingKeys, &type metadata for SiriPaymentsSnippetModel.AppDisambiguationCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.AppDisambiguationCodingKeys, &type metadata for SiriPaymentsSnippetModel.AppDisambiguationCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.AppDisambiguationCodingKeys, &type metadata for SiriPaymentsSnippetModel.AppDisambiguationCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys);
    return v0;
  }
  return v2;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_0", 2uLL, 1)._countAndFlagsBits;
}

uint64_t SiriPaymentsSnippetModel.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  unsigned __int8 v5;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("requestPaymentConfirmation", 0x1AuLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 0;
LABEL_8:
    swift_bridgeObjectRelease();
    return v5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("sendPaymentConfirmation", 0x17uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 1;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appDisambiguation", 0x11uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 2;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t SiriPaymentsSnippetModel.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.CodingKeys, &type metadata for SiriPaymentsSnippetModel.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t SiriPaymentsSnippetModel.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("requestPaymentConfirmation", 0x1AuLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("sendPaymentConfirmation", 0x17uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appDisambiguation", 0x11uLL, 1)._countAndFlagsBits;
}

uint64_t SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys, &type metadata for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys, &type metadata for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys, &type metadata for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys, &type metadata for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys, &type metadata for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys);
    return v0;
  }
  return v2;
}

uint64_t SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys, &type metadata for SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys, &type metadata for SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys, &type metadata for SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys, &type metadata for SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys, &type metadata for SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys);
    return v0;
  }
  return v2;
}

uint64_t SiriPaymentsSnippetModel.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  int EnumCaseMultiPayload;
  char v58;
  char v59;
  _QWORD v60[3];
  char v61;
  uint64_t v62;
  _QWORD *v63;

  v47 = a1;
  v63 = 0;
  v62 = 0;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriPaymentsSnippetModel.AppDisambiguationCodingKeys>);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = (*(_QWORD *)(v28 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v7 - v29;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys>);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v7 - v33;
  v42 = 0;
  v35 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
  v36 = (*(_QWORD *)(*(_QWORD *)(v35 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v35);
  v37 = (uint64_t)&v7 - v36;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys>);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = (*(_QWORD *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v42);
  v41 = (char *)&v7 - v40;
  v43 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
  v44 = (*(_QWORD *)(*(_QWORD *)(v43 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v42);
  v45 = (uint64_t)&v7 - v44;
  v55 = type metadata accessor for SiriPaymentsSnippetModel();
  v46 = (*(_QWORD *)(*(_QWORD *)(v55 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v55);
  v56 = (uint64_t *)((char *)&v7 - v46);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriPaymentsSnippetModel.CodingKeys>);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v47);
  v51 = (char *)&v7 - v50;
  v63 = v2;
  v62 = v1;
  v52 = v2[3];
  v53 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v52);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of SiriPaymentsSnippetModel(v54, v56);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with take of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel((uint64_t)v56, v45);
    v23 = &v58;
    v58 = 0;
    lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
    v3 = v26;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v24 = v3;
    v25 = v3;
    if (v3)
    {
      v9 = v25;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v38);
      outlined destroy of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(v45);
      result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v51, v48);
      v10 = v9;
      return result;
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v38);
    outlined destroy of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(v45);
    v22 = v24;
    goto LABEL_10;
  }
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with take of SiriPaymentsSnippetModel.SendPaymentConfirmationModel((uint64_t)v56, v37);
    v19 = &v59;
    v59 = 1;
    lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
    v4 = v26;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v20 = v4;
    v21 = v4;
    if (v4)
    {
      v8 = v21;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
      outlined destroy of SiriPaymentsSnippetModel.SendPaymentConfirmationModel(v37);
      result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v51, v48);
      v10 = v8;
      return result;
    }
    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
    outlined destroy of SiriPaymentsSnippetModel.SendPaymentConfirmationModel(v37);
    v22 = v20;
LABEL_10:
    v11 = v22;
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v51, v48);
  }
  v13 = *v56;
  v14 = v56[1];
  v15 = v56[2];
  v12 = &v61;
  v61 = 2;
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v16 = v60;
  v60[0] = v13;
  v60[1] = v14;
  v60[2] = v15;
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel();
  v5 = v26;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v17 = v5;
  v18 = v5;
  if (!v5)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v17;
    goto LABEL_10;
  }
  v7 = v18;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v51, v48);
}

uint64_t SiriPaymentsSnippetModel.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t countAndFlagsBits;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  unint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  _QWORD v112[4];
  unsigned __int8 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;

  v74 = a2;
  v90 = a1;
  v119 = 0;
  v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriPaymentsSnippetModel.AppDisambiguationCodingKeys>);
  v76 = *(_QWORD *)(v75 - 8);
  v77 = (*(_QWORD *)(v76 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v75);
  v78 = (char *)&v26 - v77;
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys>);
  v80 = *(_QWORD *)(v79 - 8);
  v81 = (*(_QWORD *)(v80 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v79);
  v82 = (char *)&v26 - v81;
  v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys>);
  v84 = *(_QWORD *)(v83 - 8);
  v85 = (*(_QWORD *)(v84 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v83);
  v86 = (char *)&v26 - v85;
  v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriPaymentsSnippetModel.CodingKeys>);
  v88 = *(_QWORD *)(v87 - 8);
  v89 = (*(_QWORD *)(v88 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v87);
  v100 = (char *)&v26 - v89;
  v91 = type metadata accessor for SiriPaymentsSnippetModel();
  v92 = (*(_QWORD *)(*(_QWORD *)(v91 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v90);
  v93 = (char *)&v26 - v92;
  v94 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v2);
  v95 = (char *)&v26 - v94;
  v96 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v97 = (char *)&v26 - v96;
  v98 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (_QWORD *)MEMORY[0x24BDAC7A8](v6);
  v99 = (char *)&v26 - v98;
  v119 = v8;
  v102 = v8[3];
  v103 = v8[4];
  __swift_project_boxed_opaque_existential_1(v8, v102);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys();
  v9 = v101;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v104 = v9;
  v105 = v9;
  if (v9)
  {
    v41 = v105;
    goto LABEL_27;
  }
  v10 = KeyedDecodingContainer.allKeys.getter();
  v70 = &v114;
  v114 = v10;
  v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SiriPaymentsSnippetModel.CodingKeys]);
  lazy protocol witness table accessor for type [SiriPaymentsSnippetModel.CodingKeys] and conformance [A]();
  v115 = ArraySlice.init<A>(_:)();
  v116 = v11;
  v117 = v12;
  v118 = v13;
  v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<SiriPaymentsSnippetModel.CodingKeys>);
  v72 = lazy protocol witness table accessor for type ArraySlice<SiriPaymentsSnippetModel.CodingKeys> and conformance ArraySlice<A>();
  Collection<>.popFirst()();
  v73 = v113;
  if (v113 == 3)
    goto LABEL_19;
  v68 = v73;
  v61 = v73;
  v66 = v115;
  v62 = v116;
  v63 = v117;
  v64 = v118;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v65 = v112;
  v112[0] = v66;
  v112[1] = v62;
  v112[2] = v63;
  v112[3] = v64;
  v67 = Collection.isEmpty.getter();
  outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
  swift_unknownObjectRelease();
  if ((v67 & 1) == 0)
  {
LABEL_19:
    v35 = 0;
    v39 = type metadata accessor for DecodingError();
    v33 = 1;
    v40 = swift_allocError();
    v38 = v24;
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v34 = (char *)v38 + *(int *)(v25 + 48);
    *v38 = v91;
    v36 = KeyedDecodingContainer.codingPath.getter();
    countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invalid number of keys found, expected one.", 0x2BuLL, v33 & 1)._countAndFlagsBits;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v39 - 8) + 104))(v38, *MEMORY[0x24BEE26D0]);
    swift_willThrow();
    outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
    (*(void (**)(char *, uint64_t))(v88 + 8))(v100, v87);
    v41 = v40;
    goto LABEL_27;
  }
  if (!(_BYTE)v61)
  {
    v58 = &v106;
    v106 = 0;
    lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys();
    v14 = v104;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v59 = v14;
    v60 = v14;
    if (v14)
    {
      v32 = v60;
      outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v88 + 8))(v100, v87);
      v41 = v32;
      goto LABEL_27;
    }
    v55 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
    lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
    v15 = v59;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v56 = v15;
    v57 = v15;
    if (v15)
    {
      v31 = v57;
      (*(void (**)(char *, uint64_t))(v84 + 8))(v86, v83);
      outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v88 + 8))(v100, v87);
      v41 = v31;
      goto LABEL_27;
    }
    swift_storeEnumTagMultiPayload();
    outlined init with take of SiriPaymentsSnippetModel(v97, v99);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v86, v83);
    v54 = v56;
LABEL_18:
    v42 = v54;
    outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
    (*(void (**)(char *, uint64_t))(v88 + 8))(v100, v87);
    outlined init with copy of SiriPaymentsSnippetModel((uint64_t *)v99, v74);
    __swift_destroy_boxed_opaque_existential_0(v90);
    return outlined destroy of SiriPaymentsSnippetModel((uint64_t)v99);
  }
  if (v61 == 1)
  {
    v51 = &v107;
    v107 = v61;
    lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys();
    v16 = v104;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v52 = v16;
    v53 = v16;
    if (v16)
    {
      v30 = v53;
      outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v88 + 8))(v100, v87);
      v41 = v30;
      goto LABEL_27;
    }
    v48 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
    lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
    v17 = v52;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v49 = v17;
    v50 = v17;
    if (v17)
    {
      v29 = v50;
      (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v79);
      outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v88 + 8))(v100, v87);
      v41 = v29;
      goto LABEL_27;
    }
    swift_storeEnumTagMultiPayload();
    outlined init with take of SiriPaymentsSnippetModel(v95, v99);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v79);
    v54 = v49;
    goto LABEL_18;
  }
  v45 = &v111;
  v111 = v61;
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys();
  v18 = v104;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v46 = v18;
  v47 = v18;
  if (v18)
  {
    v28 = v47;
    outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
    (*(void (**)(char *, uint64_t))(v88 + 8))(v100, v87);
    v41 = v28;
  }
  else
  {
    lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel();
    v19 = v46;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v43 = v19;
    v44 = v19;
    if (!v19)
    {
      v20 = v93;
      v21 = v109;
      v22 = v110;
      *(_QWORD *)v93 = v108;
      *((_QWORD *)v20 + 1) = v21;
      *((_QWORD *)v20 + 2) = v22;
      swift_storeEnumTagMultiPayload();
      outlined init with take of SiriPaymentsSnippetModel(v93, v99);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v78, v75);
      v54 = v43;
      goto LABEL_18;
    }
    v27 = v44;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v78, v75);
    outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
    (*(void (**)(char *, uint64_t))(v88 + 8))(v100, v87);
    v41 = v27;
  }
LABEL_27:
  v26 = v41;
  return __swift_destroy_boxed_opaque_existential_0(v90);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys()
{
  char *v0;

  return SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(uint64_t a1)
{
  return SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.encode(to:)(a1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SiriPaymentsSnippetModel.SendPaymentConfirmationModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel(uint64_t a1)
{
  return SiriPaymentsSnippetModel.SendPaymentConfirmationModel.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys(char *a1)
{
  char v1;

  static SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.__derived_enum_equals(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys(uint64_t a1)
{
  char *v1;

  SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.hash(into:)(a1, *v1);
}

void protocol witness for CodingKey.stringValue.getter in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys()
{
  char *v0;

  SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t *protocol witness for Decodable.init(from:) in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t *result;
  uint64_t __src[14];

  result = SiriPaymentsSnippetModel.PaymentConfirmationModel.init(from:)(a1, __src);
  if (!v2)
    return (uint64_t *)memcpy(a2, __src, 0x70uLL);
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel(uint64_t a1)
{
  const void *v1;
  _BYTE __dst[112];

  memcpy(__dst, v1, sizeof(__dst));
  return SiriPaymentsSnippetModel.PaymentConfirmationModel.encode(to:)(a1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  _BYTE *v0;

  return SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SiriPaymentsSnippetModel.AppDisambiguationModel@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = SiriPaymentsSnippetModel.AppDisambiguationModel.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v4;
    a2[2] = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriPaymentsSnippetModel.AppDisambiguationModel(uint64_t a1)
{
  uint64_t *v1;

  return SiriPaymentsSnippetModel.AppDisambiguationModel.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return static SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.__derived_enum_equals(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.hash(into:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SiriPaymentsSnippetModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriPaymentsSnippetModel.CodingKeys()
{
  char *v0;

  return SiriPaymentsSnippetModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriPaymentsSnippetModel.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = SiriPaymentsSnippetModel.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriPaymentsSnippetModel.CodingKeys()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriPaymentsSnippetModel.CodingKeys()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys()
{
  return SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys.hashValue.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys()
{
  return SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys.hashValue.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys()
{
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for static SnippetPluginModel.bundleName.getter in conformance SiriPaymentsSnippetModel()
{
  return static SiriPaymentsSnippetModel.bundleName.getter();
}

uint64_t protocol witness for SnippetPluginModel.snippetHidden(for:idiom:) in conformance SiriPaymentsSnippetModel()
{
  return SnippetPluginModel.snippetHidden(for:idiom:)() & 1;
}

uint64_t AppDescription.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appName", 7uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appBundleId", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t AppDescription.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for AppDescription.CodingKeys, &type metadata for AppDescription.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for AppDescription.CodingKeys, &type metadata for AppDescription.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for AppDescription.CodingKeys, &type metadata for AppDescription.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for AppDescription.CodingKeys, &type metadata for AppDescription.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for AppDescription.CodingKeys, &type metadata for AppDescription.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t AppDescription.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appBundleId", 0xBuLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appName", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SiriPaymentsSnippetModel@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return SiriPaymentsSnippetModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriPaymentsSnippetModel(uint64_t a1)
{
  return SiriPaymentsSnippetModel.encode(to:)(a1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance AppDescription.CodingKeys()
{
  return AppDescription.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AppDescription.CodingKeys()
{
  _BYTE *v0;

  return AppDescription.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AppDescription.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AppDescription.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AppDescription.CodingKeys()
{
  lazy protocol witness table accessor for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AppDescription.CodingKeys()
{
  lazy protocol witness table accessor for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AppDescription.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  __int128 v30;
  __int128 v31;
  _QWORD *v32;

  v16 = a1;
  v23 = a2;
  v24 = a3;
  v14 = a4;
  v15 = a5;
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AppDescription.CodingKeys>);
  v17 = *(_QWORD *)(v25 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v21 = (char *)v12 - v18;
  v32 = (_QWORD *)MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)&v30 = v5;
  *((_QWORD *)&v30 + 1) = v6;
  *(_QWORD *)&v31 = v7;
  *((_QWORD *)&v31 + 1) = v8;
  v19 = v32[3];
  v20 = v32[4];
  __swift_project_boxed_opaque_existential_1(v32, v19);
  lazy protocol witness table accessor for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9 = v22;
  swift_bridgeObjectRetain();
  v29 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v26 = v9;
  v27 = v9;
  if (v9)
  {
    v12[1] = v27;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v21, v25);
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = v26;
    swift_bridgeObjectRetain();
    v28 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12[3] = v10;
    v13 = v10;
    if (v10)
      v12[0] = v13;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v21, v25);
  }
}

uint64_t AppDescription.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[8];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  _QWORD *v33;
  _QWORD v34[4];
  char v35;

  v21 = a1;
  v33 = 0;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AppDescription.CodingKeys>);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v25 = (char *)v7 - v24;
  v35 = 0;
  v33 = (_QWORD *)MEMORY[0x24BDAC7A8](v21);
  v27 = v33[3];
  v28 = v33[4];
  __swift_project_boxed_opaque_existential_1(v33, v27);
  lazy protocol witness table accessor for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys();
  v1 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v29 = v1;
  v30 = v1;
  if (v1)
  {
    v7[6] = v30;
    v7[3] = v30;
    __swift_destroy_boxed_opaque_existential_0(v21);
    if ((v35 & 1) != 0)
      outlined destroy of String.UTF8View();
    return v7[1];
  }
  else
  {
    v32 = 0;
    v2 = KeyedDecodingContainer.decode(_:forKey:)();
    v17 = 0;
    v18 = v2;
    v19 = v3;
    v20 = 0;
    v11 = v3;
    v10 = v2;
    v12 = 1;
    v35 = 1;
    swift_bridgeObjectRetain();
    v34[0] = v10;
    v34[1] = v11;
    v31 = v12;
    v4 = KeyedDecodingContainer.decode(_:forKey:)();
    v13 = 0;
    v14 = v4;
    v15 = v5;
    v16 = 0;
    v9 = v5;
    v8 = v4;
    v7[7] = v34;
    v35 = 3;
    swift_bridgeObjectRetain();
    v34[2] = v8;
    v34[3] = v9;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0(v21);
    outlined destroy of DIIdentifier();
    return v10;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance AppDescription@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = AppDescription.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v4;
    a2[2] = v5;
    a2[3] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AppDescription(uint64_t a1)
{
  uint64_t *v1;

  return AppDescription.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t static SABaseCommand.from(data:)(uint64_t a1, unint64_t a2)
{
  id v2;
  void *v3;
  id v5;
  id v6;
  id v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  Class v13;
  id v14;
  uint64_t v15;
  void *v18;
  id v19;
  Class isa;
  id v21;
  uint64_t v22;
  id v23[3];
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v23[2] = 0;
  v25 = a1;
  v26 = a2;
  v24 = 0;
  v18 = (void *)objc_opt_self();
  outlined copy of Data._Representation(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(a1, a2);
  type metadata accessor for NSPropertyListMutabilityOptions();
  _allocateUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
  SetAlgebra<>.init(arrayLiteral:)();
  v23[0] = 0;
  v21 = objc_msgSend(v18, sel_propertyListWithData_options_format_error_, isa, v23[1], 0, v23);
  v19 = v23[0];
  v2 = v23[0];
  v3 = v24;
  v24 = v19;

  if (v21)
  {
    _bridgeAnyObjectToAny(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    if ((swift_dynamicCast() & 1) != 0)
      v15 = v22;
    else
      v15 = 0;
    if (v15)
    {
      swift_unknownObjectRelease();
      v12 = (id)objc_opt_self();
      swift_bridgeObjectRetain();
      v13 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v14 = objc_msgSend(v12, sel_aceObjectWithDictionary_, v13);

      if (v14)
      {
        objc_opt_self();
        v11 = swift_dynamicCastObjCClass();
        if (v11)
        {
          v10 = v11;
        }
        else
        {

          v10 = 0;
        }
        v9 = v10;
      }
      else
      {
        v9 = 0;
      }
      swift_bridgeObjectRelease();
      if (v9)
        return v9;
      else
        return 0;
    }
    else
    {
      swift_unknownObjectRelease();
      return 0;
    }
  }
  else
  {
    v6 = v24;
    v7 = (id)_convertNSErrorToError(_:)();

    swift_willThrow();
    v5 = v7;

    return 0;
  }
}

unint64_t initializeBufferWithCopyOfBuffer for SiriPaymentsSnippetModel(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int EnumCaseMultiPayload;
  uint64_t v39;
  int v43;

  v43 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v43 & 0x20000) != 0)
  {
    v39 = *a2;
    swift_retain();
    *a1 = v39;
    return *a1 + ((v43 + 16) & ~(unint64_t)v43);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
        (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v5 - 8) + 16))(a1, a2);
        v12 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
        v11 = (char *)a1 + *(int *)(v12 + 20);
        v10 = (char *)a2 + *(int *)(v12 + 20);
        v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
        (*(void (**)(char *, char *))(*(_QWORD *)(v6 - 8) + 16))(v11, v10);
        v22 = (_QWORD *)((char *)a1 + *(int *)(v12 + 24));
        v21 = (uint64_t *)((char *)a2 + *(int *)(v12 + 24));
        *v22 = *v21;
        v13 = v21[1];
        swift_bridgeObjectRetain();
        v22[1] = v13;
        v22[2] = v21[2];
        v14 = v21[3];
        swift_bridgeObjectRetain();
        v22[3] = v14;
        v22[4] = v21[4];
        v15 = v21[5];
        swift_bridgeObjectRetain();
        v22[5] = v15;
        v22[6] = v21[6];
        v16 = v21[7];
        swift_bridgeObjectRetain();
        v22[7] = v16;
        v17 = v21[8];
        v18 = v21[9];
        outlined copy of Data._Representation(v17, v18);
        v22[8] = v17;
        v22[9] = v18;
        v19 = v21[10];
        v20 = v21[11];
        outlined copy of Data._Representation(v19, v20);
        v22[10] = v19;
        v22[11] = v20;
        v22[12] = v21[12];
        v23 = v21[13];
        swift_bridgeObjectRetain();
        v22[13] = v23;
      }
      else
      {
        v8 = *a2;
        swift_bridgeObjectRetain();
        *a1 = v8;
        a1[1] = a2[1];
        v9 = a2[2];
        swift_bridgeObjectRetain();
        a1[2] = v9;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
      (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
      v26 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
      v25 = (char *)a1 + *(int *)(v26 + 20);
      v24 = (char *)a2 + *(int *)(v26 + 20);
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
      (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 16))(v25, v24);
      v36 = (_QWORD *)((char *)a1 + *(int *)(v26 + 24));
      v35 = (uint64_t *)((char *)a2 + *(int *)(v26 + 24));
      *v36 = *v35;
      v27 = v35[1];
      swift_bridgeObjectRetain();
      v36[1] = v27;
      v36[2] = v35[2];
      v28 = v35[3];
      swift_bridgeObjectRetain();
      v36[3] = v28;
      v36[4] = v35[4];
      v29 = v35[5];
      swift_bridgeObjectRetain();
      v36[5] = v29;
      v36[6] = v35[6];
      v30 = v35[7];
      swift_bridgeObjectRetain();
      v36[7] = v30;
      v31 = v35[8];
      v32 = v35[9];
      outlined copy of Data._Representation(v31, v32);
      v36[8] = v31;
      v36[9] = v32;
      v33 = v35[10];
      v34 = v35[11];
      outlined copy of Data._Representation(v33, v34);
      v36[10] = v33;
      v36[11] = v34;
      v36[12] = v35[12];
      v37 = v35[13];
      swift_bridgeObjectRetain();
      v36[13] = v37;
      swift_storeEnumTagMultiPayload();
    }
    return (unint64_t)a1;
  }
}

uint64_t type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel;
  if (!type metadata singleton initialization cache for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SiriPaymentsSnippetModel.SendPaymentConfirmationModel;
  if (!type metadata singleton initialization cache for SiriPaymentsSnippetModel.SendPaymentConfirmationModel)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t destroy for SiriPaymentsSnippetModel(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1);
      v7 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
      v6 = a1 + *(int *)(v7 + 20);
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v6);
      v8 = a1 + *(int *)(v7 + 24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(_QWORD *)(v8 + 64), *(_QWORD *)(v8 + 72));
      outlined consume of Data._Representation(*(_QWORD *)(v8 + 80), *(_QWORD *)(v8 + 88));
      return swift_bridgeObjectRelease();
    }
    else if ((_DWORD)result == 2)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
    v10 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
    v9 = a1 + *(int *)(v10 + 20);
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v9);
    v11 = a1 + *(int *)(v10 + 24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(v11 + 64), *(_QWORD *)(v11 + 72));
    outlined consume of Data._Representation(*(_QWORD *)(v11 + 80), *(_QWORD *)(v11 + 88));
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for SiriPaymentsSnippetModel(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int EnumCaseMultiPayload;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
      (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v4 - 8) + 16))(a1, a2);
      v11 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
      v10 = (char *)a1 + *(int *)(v11 + 20);
      v9 = (char *)a2 + *(int *)(v11 + 20);
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
      (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 16))(v10, v9);
      v21 = (_QWORD *)((char *)a1 + *(int *)(v11 + 24));
      v20 = (uint64_t *)((char *)a2 + *(int *)(v11 + 24));
      *v21 = *v20;
      v12 = v20[1];
      swift_bridgeObjectRetain();
      v21[1] = v12;
      v21[2] = v20[2];
      v13 = v20[3];
      swift_bridgeObjectRetain();
      v21[3] = v13;
      v21[4] = v20[4];
      v14 = v20[5];
      swift_bridgeObjectRetain();
      v21[5] = v14;
      v21[6] = v20[6];
      v15 = v20[7];
      swift_bridgeObjectRetain();
      v21[7] = v15;
      v16 = v20[8];
      v17 = v20[9];
      outlined copy of Data._Representation(v16, v17);
      v21[8] = v16;
      v21[9] = v17;
      v18 = v20[10];
      v19 = v20[11];
      outlined copy of Data._Representation(v18, v19);
      v21[10] = v18;
      v21[11] = v19;
      v21[12] = v20[12];
      v22 = v20[13];
      swift_bridgeObjectRetain();
      v21[13] = v22;
    }
    else
    {
      v7 = *a2;
      swift_bridgeObjectRetain();
      *a1 = v7;
      a1[1] = a2[1];
      v8 = a2[2];
      swift_bridgeObjectRetain();
      a1[2] = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
    v25 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
    v24 = (char *)a1 + *(int *)(v25 + 20);
    v23 = (char *)a2 + *(int *)(v25 + 20);
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v24, v23);
    v35 = (_QWORD *)((char *)a1 + *(int *)(v25 + 24));
    v34 = (uint64_t *)((char *)a2 + *(int *)(v25 + 24));
    *v35 = *v34;
    v26 = v34[1];
    swift_bridgeObjectRetain();
    v35[1] = v26;
    v35[2] = v34[2];
    v27 = v34[3];
    swift_bridgeObjectRetain();
    v35[3] = v27;
    v35[4] = v34[4];
    v28 = v34[5];
    swift_bridgeObjectRetain();
    v35[5] = v28;
    v35[6] = v34[6];
    v29 = v34[7];
    swift_bridgeObjectRetain();
    v35[7] = v29;
    v30 = v34[8];
    v31 = v34[9];
    outlined copy of Data._Representation(v30, v31);
    v35[8] = v30;
    v35[9] = v31;
    v32 = v34[10];
    v33 = v34[11];
    outlined copy of Data._Representation(v32, v33);
    v35[10] = v32;
    v35[11] = v33;
    v35[12] = v34[12];
    v36 = v34[13];
    swift_bridgeObjectRetain();
    v35[13] = v36;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t *assignWithCopy for SiriPaymentsSnippetModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int EnumCaseMultiPayload;

  if (a1 != a2)
  {
    outlined destroy of SiriPaymentsSnippetModel((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
        (*(void (**)(uint64_t *, uint64_t *))(*(_QWORD *)(v4 - 8) + 16))(a1, a2);
        v11 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
        v10 = (char *)a1 + *(int *)(v11 + 20);
        v9 = (char *)a2 + *(int *)(v11 + 20);
        v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
        (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 16))(v10, v9);
        v21 = (uint64_t *)((char *)a1 + *(int *)(v11 + 24));
        v20 = (uint64_t *)((char *)a2 + *(int *)(v11 + 24));
        *v21 = *v20;
        v12 = v20[1];
        swift_bridgeObjectRetain();
        v21[1] = v12;
        v21[2] = v20[2];
        v13 = v20[3];
        swift_bridgeObjectRetain();
        v21[3] = v13;
        v21[4] = v20[4];
        v14 = v20[5];
        swift_bridgeObjectRetain();
        v21[5] = v14;
        v21[6] = v20[6];
        v15 = v20[7];
        swift_bridgeObjectRetain();
        v21[7] = v15;
        v16 = v20[8];
        v17 = v20[9];
        outlined copy of Data._Representation(v16, v17);
        v21[8] = v16;
        v21[9] = v17;
        v18 = v20[10];
        v19 = v20[11];
        outlined copy of Data._Representation(v18, v19);
        v21[10] = v18;
        v21[11] = v19;
        v21[12] = v20[12];
        v22 = v20[13];
        swift_bridgeObjectRetain();
        v21[13] = v22;
      }
      else
      {
        v7 = *a2;
        swift_bridgeObjectRetain();
        *a1 = v7;
        a1[1] = a2[1];
        v8 = a2[2];
        swift_bridgeObjectRetain();
        a1[2] = v8;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
      (*(void (**)(uint64_t *, uint64_t *))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
      v25 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
      v24 = (char *)a1 + *(int *)(v25 + 20);
      v23 = (char *)a2 + *(int *)(v25 + 20);
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
      (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v24, v23);
      v35 = (uint64_t *)((char *)a1 + *(int *)(v25 + 24));
      v34 = (uint64_t *)((char *)a2 + *(int *)(v25 + 24));
      *v35 = *v34;
      v26 = v34[1];
      swift_bridgeObjectRetain();
      v35[1] = v26;
      v35[2] = v34[2];
      v27 = v34[3];
      swift_bridgeObjectRetain();
      v35[3] = v27;
      v35[4] = v34[4];
      v28 = v34[5];
      swift_bridgeObjectRetain();
      v35[5] = v28;
      v35[6] = v34[6];
      v29 = v34[7];
      swift_bridgeObjectRetain();
      v35[7] = v29;
      v30 = v34[8];
      v31 = v34[9];
      outlined copy of Data._Representation(v30, v31);
      v35[8] = v30;
      v35[9] = v31;
      v32 = v34[10];
      v33 = v34[11];
      outlined copy of Data._Representation(v32, v33);
      v35[10] = v32;
      v35[11] = v33;
      v35[12] = v34[12];
      v36 = v34[13];
      swift_bridgeObjectRetain();
      v35[13] = v36;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata accessor for SiriPaymentsSnippetModel()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SiriPaymentsSnippetModel;
  if (!type metadata singleton initialization cache for SiriPaymentsSnippetModel)
    return swift_getSingletonMetadata();
  return v1;
}

char *initializeWithTake for SiriPaymentsSnippetModel(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int EnumCaseMultiPayload;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
      (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 32))(a1, a2);
      v10 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
      v9 = &a1[*(int *)(v10 + 20)];
      v8 = &a2[*(int *)(v10 + 20)];
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
      (*(void (**)(char *, char *))(*(_QWORD *)(v6 - 8) + 32))(v9, v8);
      memcpy(&a1[*(int *)(v10 + 24)], &a2[*(int *)(v10 + 24)], 0x70uLL);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  else
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
    v13 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
    v12 = &a1[*(int *)(v13 + 20)];
    v11 = &a2[*(int *)(v13 + 20)];
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
    (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 32))(v12, v11);
    memcpy(&a1[*(int *)(v13 + 24)], &a2[*(int *)(v13 + 24)], 0x70uLL);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for SiriPaymentsSnippetModel(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int EnumCaseMultiPayload;

  if (a1 != a2)
  {
    outlined destroy of SiriPaymentsSnippetModel((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
        (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 32))(a1, a2);
        v10 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
        v9 = &a1[*(int *)(v10 + 20)];
        v8 = &a2[*(int *)(v10 + 20)];
        v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
        (*(void (**)(char *, char *))(*(_QWORD *)(v6 - 8) + 32))(v9, v8);
        memcpy(&a1[*(int *)(v10 + 24)], &a2[*(int *)(v10 + 24)], 0x70uLL);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      }
    }
    else
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
      (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
      v13 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
      v12 = &a1[*(int *)(v13 + 20)];
      v11 = &a2[*(int *)(v13 + 20)];
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
      (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 32))(v12, v11);
      memcpy(&a1[*(int *)(v13 + 24)], &a2[*(int *)(v13 + 24)], 0x70uLL);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for SiriPaymentsSnippetModel()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
  if (v0 <= 0x3F)
  {
    v3 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
    if (v1 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v3;
}

unint64_t initializeBufferWithCopyOfBuffer for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v25;

  v25 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v25 & 0x20000) != 0)
  {
    v20 = *a2;
    swift_retain();
    *a1 = v20;
    return *a1 + ((v25 + 16) & ~(unint64_t)v25);
  }
  else
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v8 = (char *)a1 + *(int *)(a3 + 20);
    v7 = (char *)a2 + *(int *)(a3 + 20);
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
    (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 16))(v8, v7);
    v5 = *(int *)(a3 + 24);
    v18 = (_QWORD *)((char *)a1 + v5);
    v17 = (uint64_t *)((char *)a2 + v5);
    *(_QWORD *)((char *)a1 + v5) = *(uint64_t *)((char *)a2 + v5);
    v9 = *(uint64_t *)((char *)a2 + v5 + 8);
    swift_bridgeObjectRetain();
    v18[1] = v9;
    v18[2] = v17[2];
    v10 = v17[3];
    swift_bridgeObjectRetain();
    v18[3] = v10;
    v18[4] = v17[4];
    v11 = v17[5];
    swift_bridgeObjectRetain();
    v18[5] = v11;
    v18[6] = v17[6];
    v12 = v17[7];
    swift_bridgeObjectRetain();
    v18[7] = v12;
    v13 = v17[8];
    v14 = v17[9];
    outlined copy of Data._Representation(v13, v14);
    v18[8] = v13;
    v18[9] = v14;
    v15 = v17[10];
    v16 = v17[11];
    outlined copy of Data._Representation(v15, v16);
    v18[10] = v15;
    v18[11] = v16;
    v18[12] = v17[12];
    v19 = v17[13];
    swift_bridgeObjectRetain();
    v18[13] = v19;
    return (unint64_t)a1;
  }
}

uint64_t destroy for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  v5 = *(int *)(a2 + 20);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1 + v5);
  v8 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v8 + 64), *(_QWORD *)(v8 + 72));
  outlined consume of Data._Representation(*(_QWORD *)(v8 + 80), *(_QWORD *)(v8 + 88));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v19;
  uint64_t v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v6 = *(int *)(a3 + 20);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1 + v6, a2 + v6);
  v17 = (_QWORD *)(a2 + *(int *)(a3 + 24));
  v19 = (_QWORD *)(a1 + *(int *)(a3 + 24));
  *v19 = *v17;
  v9 = v17[1];
  swift_bridgeObjectRetain();
  v19[1] = v9;
  v19[2] = v17[2];
  v10 = v17[3];
  swift_bridgeObjectRetain();
  v19[3] = v10;
  v19[4] = v17[4];
  v11 = v17[5];
  swift_bridgeObjectRetain();
  v19[5] = v11;
  v19[6] = v17[6];
  v12 = v17[7];
  swift_bridgeObjectRetain();
  v19[7] = v12;
  v13 = v17[8];
  v14 = v17[9];
  outlined copy of Data._Representation(v13, v14);
  v19[8] = v13;
  v19[9] = v14;
  v15 = v17[10];
  v16 = v17[11];
  outlined copy of Data._Representation(v15, v16);
  v19[10] = v15;
  v19[11] = v16;
  v19[12] = v17[12];
  v20 = v17[13];
  swift_bridgeObjectRetain();
  result = a1;
  v19[13] = v20;
  return result;
}

uint64_t assignWithCopy for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v10 = *(int *)(a3 + 20);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1 + v10, a2 + v10);
  v21 = (_QWORD *)(a2 + *(int *)(a3 + 24));
  v22 = (_QWORD *)(a1 + *(int *)(a3 + 24));
  *v22 = *v21;
  v13 = v21[1];
  swift_bridgeObjectRetain();
  v22[1] = v13;
  swift_bridgeObjectRelease();
  v22[2] = v21[2];
  v14 = v21[3];
  swift_bridgeObjectRetain();
  v22[3] = v14;
  swift_bridgeObjectRelease();
  v22[4] = v21[4];
  v15 = v21[5];
  swift_bridgeObjectRetain();
  v22[5] = v15;
  swift_bridgeObjectRelease();
  v22[6] = v21[6];
  v16 = v21[7];
  swift_bridgeObjectRetain();
  v22[7] = v16;
  swift_bridgeObjectRelease();
  v17 = v21[8];
  v18 = v21[9];
  outlined copy of Data._Representation(v17, v18);
  v5 = v22[8];
  v6 = v22[9];
  v22[8] = v17;
  v22[9] = v18;
  outlined consume of Data._Representation(v5, v6);
  v19 = v21[10];
  v20 = v21[11];
  outlined copy of Data._Representation(v19, v20);
  v7 = v22[10];
  v8 = v22[11];
  v22[10] = v19;
  v22[11] = v20;
  outlined consume of Data._Representation(v7, v8);
  v22[12] = v21[12];
  v23 = v21[13];
  swift_bridgeObjectRetain();
  v22[13] = v23;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  v6 = *(int *)(a3 + 20);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1 + v6, a2 + v6);
  memcpy((void *)(a1 + *(int *)(a3 + 24)), (const void *)(a2 + *(int *)(a3 + 24)), 0x70uLL);
  return a1;
}

uint64_t assignWithTake for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  _QWORD *v15;
  _QWORD *v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v12 = *(int *)(a3 + 20);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1 + v12, a2 + v12);
  v15 = (_QWORD *)(a2 + *(int *)(a3 + 24));
  v16 = (_QWORD *)(a1 + *(int *)(a3 + 24));
  *v16 = *v15;
  v16[1] = v15[1];
  swift_bridgeObjectRelease();
  v16[2] = v15[2];
  v16[3] = v15[3];
  swift_bridgeObjectRelease();
  v16[4] = v15[4];
  v16[5] = v15[5];
  swift_bridgeObjectRelease();
  v16[6] = v15[6];
  v16[7] = v15[7];
  swift_bridgeObjectRelease();
  v5 = v15[9];
  v6 = v16[8];
  v7 = v16[9];
  v16[8] = v15[8];
  v16[9] = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = v15[11];
  v9 = v16[10];
  v10 = v16[11];
  v16[10] = v15[10];
  v16[11] = v8;
  outlined consume of Data._Representation(v9, v10);
  v16[12] = v15[12];
  v16[13] = v15[13];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_247167BA8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v11;
  uint64_t v12;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  v12 = *(_QWORD *)(v11 - 8);
  if (a2 == *(_DWORD *)(v12 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v12 + 48))(a1, a2, v11);
  }
  else
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
    v6 = *(_QWORD *)(v5 - 8);
    if (a2 == *(_DWORD *)(v6 + 84))
    {
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v6 + 48))(a1 + *(int *)(a3 + 20), a2, v5);
    }
    else if (a2 == 0x7FFFFFFF)
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) < 0x100000000uLL)
        v4 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
      return (v4 + 1);
    }
    else
    {
      __break(1u);
    }
  }
  return v7;
}

uint64_t storeEnumTagSinglePayload for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_247167D04(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  v11 = *(_QWORD *)(v10 - 8);
  if (a3 == *(_DWORD *)(v11 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v11 + 56))(a1, a2, a2, v10);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  v5 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v5 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v5 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CodableIntent<INRequestPaymentIntent>();
  if (v0 <= 0x3F)
  {
    v3 = type metadata accessor for CodableIntentResponse<INRequestPaymentIntentResponse>();
    if (v1 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v3;
}

uint64_t type metadata accessor for CodableIntent<INRequestPaymentIntent>()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CodableIntent<INRequestPaymentIntent>;
  if (!lazy cache variable for type metadata for CodableIntent<INRequestPaymentIntent>)
  {
    type metadata accessor for INRequestPaymentIntent();
    v3 = type metadata accessor for CodableIntent();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for CodableIntentResponse<INRequestPaymentIntentResponse>()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>;
  if (!lazy cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>)
  {
    type metadata accessor for INRequestPaymentIntentResponse();
    v3 = type metadata accessor for CodableIntentResponse();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
      return v1;
    }
  }
  return v4;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys()
{
  return &type metadata for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for SiriPaymentsSnippetModel.SendPaymentConfirmationModel(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v25;

  v25 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v25 & 0x20000) != 0)
  {
    v20 = *a2;
    swift_retain();
    *a1 = v20;
    return *a1 + ((v25 + 16) & ~(unint64_t)v25);
  }
  else
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v8 = (char *)a1 + *(int *)(a3 + 20);
    v7 = (char *)a2 + *(int *)(a3 + 20);
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
    (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 16))(v8, v7);
    v5 = *(int *)(a3 + 24);
    v18 = (_QWORD *)((char *)a1 + v5);
    v17 = (uint64_t *)((char *)a2 + v5);
    *(_QWORD *)((char *)a1 + v5) = *(uint64_t *)((char *)a2 + v5);
    v9 = *(uint64_t *)((char *)a2 + v5 + 8);
    swift_bridgeObjectRetain();
    v18[1] = v9;
    v18[2] = v17[2];
    v10 = v17[3];
    swift_bridgeObjectRetain();
    v18[3] = v10;
    v18[4] = v17[4];
    v11 = v17[5];
    swift_bridgeObjectRetain();
    v18[5] = v11;
    v18[6] = v17[6];
    v12 = v17[7];
    swift_bridgeObjectRetain();
    v18[7] = v12;
    v13 = v17[8];
    v14 = v17[9];
    outlined copy of Data._Representation(v13, v14);
    v18[8] = v13;
    v18[9] = v14;
    v15 = v17[10];
    v16 = v17[11];
    outlined copy of Data._Representation(v15, v16);
    v18[10] = v15;
    v18[11] = v16;
    v18[12] = v17[12];
    v19 = v17[13];
    swift_bridgeObjectRetain();
    v18[13] = v19;
    return (unint64_t)a1;
  }
}

uint64_t destroy for SiriPaymentsSnippetModel.SendPaymentConfirmationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  v5 = *(int *)(a2 + 20);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1 + v5);
  v8 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v8 + 64), *(_QWORD *)(v8 + 72));
  outlined consume of Data._Representation(*(_QWORD *)(v8 + 80), *(_QWORD *)(v8 + 88));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SiriPaymentsSnippetModel.SendPaymentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v19;
  uint64_t v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v6 = *(int *)(a3 + 20);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1 + v6, a2 + v6);
  v17 = (_QWORD *)(a2 + *(int *)(a3 + 24));
  v19 = (_QWORD *)(a1 + *(int *)(a3 + 24));
  *v19 = *v17;
  v9 = v17[1];
  swift_bridgeObjectRetain();
  v19[1] = v9;
  v19[2] = v17[2];
  v10 = v17[3];
  swift_bridgeObjectRetain();
  v19[3] = v10;
  v19[4] = v17[4];
  v11 = v17[5];
  swift_bridgeObjectRetain();
  v19[5] = v11;
  v19[6] = v17[6];
  v12 = v17[7];
  swift_bridgeObjectRetain();
  v19[7] = v12;
  v13 = v17[8];
  v14 = v17[9];
  outlined copy of Data._Representation(v13, v14);
  v19[8] = v13;
  v19[9] = v14;
  v15 = v17[10];
  v16 = v17[11];
  outlined copy of Data._Representation(v15, v16);
  v19[10] = v15;
  v19[11] = v16;
  v19[12] = v17[12];
  v20 = v17[13];
  swift_bridgeObjectRetain();
  result = a1;
  v19[13] = v20;
  return result;
}

uint64_t assignWithCopy for SiriPaymentsSnippetModel.SendPaymentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v10 = *(int *)(a3 + 20);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1 + v10, a2 + v10);
  v21 = (_QWORD *)(a2 + *(int *)(a3 + 24));
  v22 = (_QWORD *)(a1 + *(int *)(a3 + 24));
  *v22 = *v21;
  v13 = v21[1];
  swift_bridgeObjectRetain();
  v22[1] = v13;
  swift_bridgeObjectRelease();
  v22[2] = v21[2];
  v14 = v21[3];
  swift_bridgeObjectRetain();
  v22[3] = v14;
  swift_bridgeObjectRelease();
  v22[4] = v21[4];
  v15 = v21[5];
  swift_bridgeObjectRetain();
  v22[5] = v15;
  swift_bridgeObjectRelease();
  v22[6] = v21[6];
  v16 = v21[7];
  swift_bridgeObjectRetain();
  v22[7] = v16;
  swift_bridgeObjectRelease();
  v17 = v21[8];
  v18 = v21[9];
  outlined copy of Data._Representation(v17, v18);
  v5 = v22[8];
  v6 = v22[9];
  v22[8] = v17;
  v22[9] = v18;
  outlined consume of Data._Representation(v5, v6);
  v19 = v21[10];
  v20 = v21[11];
  outlined copy of Data._Representation(v19, v20);
  v7 = v22[10];
  v8 = v22[11];
  v22[10] = v19;
  v22[11] = v20;
  outlined consume of Data._Representation(v7, v8);
  v22[12] = v21[12];
  v23 = v21[13];
  swift_bridgeObjectRetain();
  v22[13] = v23;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for SiriPaymentsSnippetModel.SendPaymentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  v6 = *(int *)(a3 + 20);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1 + v6, a2 + v6);
  memcpy((void *)(a1 + *(int *)(a3 + 24)), (const void *)(a2 + *(int *)(a3 + 24)), 0x70uLL);
  return a1;
}

uint64_t assignWithTake for SiriPaymentsSnippetModel.SendPaymentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  _QWORD *v15;
  _QWORD *v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v12 = *(int *)(a3 + 20);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1 + v12, a2 + v12);
  v15 = (_QWORD *)(a2 + *(int *)(a3 + 24));
  v16 = (_QWORD *)(a1 + *(int *)(a3 + 24));
  *v16 = *v15;
  v16[1] = v15[1];
  swift_bridgeObjectRelease();
  v16[2] = v15[2];
  v16[3] = v15[3];
  swift_bridgeObjectRelease();
  v16[4] = v15[4];
  v16[5] = v15[5];
  swift_bridgeObjectRelease();
  v16[6] = v15[6];
  v16[7] = v15[7];
  swift_bridgeObjectRelease();
  v5 = v15[9];
  v6 = v16[8];
  v7 = v16[9];
  v16[8] = v15[8];
  v16[9] = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = v15[11];
  v9 = v16[10];
  v10 = v16[11];
  v16[10] = v15[10];
  v16[11] = v8;
  outlined consume of Data._Representation(v9, v10);
  v16[12] = v15[12];
  v16[13] = v15[13];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriPaymentsSnippetModel.SendPaymentConfirmationModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2471689B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v11;
  uint64_t v12;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  v12 = *(_QWORD *)(v11 - 8);
  if (a2 == *(_DWORD *)(v12 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v12 + 48))(a1, a2, v11);
  }
  else
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
    v6 = *(_QWORD *)(v5 - 8);
    if (a2 == *(_DWORD *)(v6 + 84))
    {
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v6 + 48))(a1 + *(int *)(a3 + 20), a2, v5);
    }
    else if (a2 == 0x7FFFFFFF)
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) < 0x100000000uLL)
        v4 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
      return (v4 + 1);
    }
    else
    {
      __break(1u);
    }
  }
  return v7;
}

uint64_t storeEnumTagSinglePayload for SiriPaymentsSnippetModel.SendPaymentConfirmationModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_247168B0C(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  v11 = *(_QWORD *)(v10 - 8);
  if (a3 == *(_DWORD *)(v11 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v11 + 56))(a1, a2, a2, v10);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  v5 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v5 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v5 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for SiriPaymentsSnippetModel.SendPaymentConfirmationModel()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CodableIntent<INSendPaymentIntent>();
  if (v0 <= 0x3F)
  {
    v3 = type metadata accessor for CodableIntentResponse<INSendPaymentIntentResponse>();
    if (v1 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v3;
}

uint64_t type metadata accessor for CodableIntent<INSendPaymentIntent>()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CodableIntent<INSendPaymentIntent>;
  if (!lazy cache variable for type metadata for CodableIntent<INSendPaymentIntent>)
  {
    type metadata accessor for INSendPaymentIntent();
    v3 = type metadata accessor for CodableIntent();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for CodableIntentResponse<INSendPaymentIntentResponse>()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>;
  if (!lazy cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>)
  {
    type metadata accessor for INSendPaymentIntentResponse();
    v3 = type metadata accessor for CodableIntentResponse();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
      return v1;
    }
  }
  return v4;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys()
{
  return &type metadata for SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys;
}

uint64_t destroy for SiriPaymentsSnippetModel.PaymentConfirmationModel(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for SiriPaymentsSnippetModel.PaymentConfirmationModel(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v13;

  *a1 = *a2;
  v3 = a2[1];
  swift_bridgeObjectRetain();
  a1[1] = v3;
  a1[2] = a2[2];
  v4 = a2[3];
  swift_bridgeObjectRetain();
  a1[3] = v4;
  a1[4] = a2[4];
  v5 = a2[5];
  swift_bridgeObjectRetain();
  a1[5] = v5;
  a1[6] = a2[6];
  v6 = a2[7];
  swift_bridgeObjectRetain();
  a1[7] = v6;
  v7 = a2[8];
  v8 = a2[9];
  outlined copy of Data._Representation(v7, v8);
  a1[8] = v7;
  a1[9] = v8;
  v9 = a2[10];
  v10 = a2[11];
  outlined copy of Data._Representation(v9, v10);
  a1[10] = v9;
  a1[11] = v10;
  a1[12] = a2[12];
  v13 = a2[13];
  swift_bridgeObjectRetain();
  result = a1;
  a1[13] = v13;
  return result;
}

_QWORD *assignWithCopy for SiriPaymentsSnippetModel.PaymentConfirmationModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  *a1 = *a2;
  v7 = a2[1];
  swift_bridgeObjectRetain();
  a1[1] = v7;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v8 = a2[3];
  swift_bridgeObjectRetain();
  a1[3] = v8;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  v9 = a2[5];
  swift_bridgeObjectRetain();
  a1[5] = v9;
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  v10 = a2[7];
  swift_bridgeObjectRetain();
  a1[7] = v10;
  swift_bridgeObjectRelease();
  v11 = a2[8];
  v12 = a2[9];
  outlined copy of Data._Representation(v11, v12);
  v2 = a1[8];
  v3 = a1[9];
  a1[8] = v11;
  a1[9] = v12;
  outlined consume of Data._Representation(v2, v3);
  v13 = a2[10];
  v14 = a2[11];
  outlined copy of Data._Representation(v13, v14);
  v4 = a1[10];
  v5 = a1[11];
  a1[10] = v13;
  a1[11] = v14;
  outlined consume of Data._Representation(v4, v5);
  a1[12] = a2[12];
  v16 = a2[13];
  swift_bridgeObjectRetain();
  a1[13] = v16;
  swift_bridgeObjectRelease();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy112_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x70uLL);
}

_QWORD *assignWithTake for SiriPaymentsSnippetModel.PaymentConfirmationModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRelease();
  v2 = a2[9];
  v3 = a1[8];
  v4 = a1[9];
  a1[8] = a2[8];
  a1[9] = v2;
  outlined consume of Data._Representation(v3, v4);
  v5 = a2[11];
  v6 = a1[10];
  v7 = a1[11];
  a1[10] = a2[10];
  a1[11] = v5;
  outlined consume of Data._Representation(v6, v7);
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriPaymentsSnippetModel.PaymentConfirmationModel(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 112))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 8)))
        v3 = *(_QWORD *)(a1 + 8);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriPaymentsSnippetModel.PaymentConfirmationModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = 0;
    *(_QWORD *)(result + 104) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 112) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 112) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 8) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.PaymentConfirmationModel()
{
  return &type metadata for SiriPaymentsSnippetModel.PaymentConfirmationModel;
}

uint64_t getEnumTagSinglePayload for SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xF9)
      goto LABEL_15;
    v7 = ((a2 + 6) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 249;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 7;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xF9)
  {
    v5 = ((a3 + 6) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xF9)
  {
    v4 = ((a2 - 250) >> 8) + 1;
    *result = a2 + 6;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 6;
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys()
{
  return &type metadata for SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys;
}

_QWORD *initializeBufferWithCopyOfBuffer for SiriPaymentsSnippetModel.AppDisambiguationModel(_QWORD *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v6;

  v3 = *a2;
  swift_bridgeObjectRetain();
  *a1 = v3;
  a1[1] = a2[1];
  v6 = a2[2];
  swift_bridgeObjectRetain();
  result = a1;
  a1[2] = v6;
  return result;
}

uint64_t destroy for SiriPaymentsSnippetModel.AppDisambiguationModel()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for SiriPaymentsSnippetModel.AppDisambiguationModel(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a2;
  swift_bridgeObjectRetain();
  *a1 = v3;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  v5 = a2[2];
  swift_bridgeObjectRetain();
  a1[2] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  return result;
}

_QWORD *assignWithTake for SiriPaymentsSnippetModel.AppDisambiguationModel(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriPaymentsSnippetModel.AppDisambiguationModel(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)a1))
        v3 = *(_QWORD *)a1;
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriPaymentsSnippetModel.AppDisambiguationModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 24) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 24) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)result = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.AppDisambiguationModel()
{
  return &type metadata for SiriPaymentsSnippetModel.AppDisambiguationModel;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  return &type metadata for SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.CodingKeys()
{
  return &type metadata for SiriPaymentsSnippetModel.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys()
{
  return &type metadata for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys()
{
  return &type metadata for SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return &type metadata for SiriPaymentsSnippetModel.AppDisambiguationCodingKeys;
}

ValueMetadata *type metadata accessor for AppDescription()
{
  return &type metadata for AppDescription;
}

ValueMetadata *type metadata accessor for AppDescription.CodingKeys()
{
  return &type metadata for AppDescription.CodingKeys;
}

unint64_t base witness table accessor for Decodable in SiriPaymentsSnippetModel.AppDisambiguationModel()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.AppDisambiguationModel, &type metadata for SiriPaymentsSnippetModel.AppDisambiguationModel);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.AppDisambiguationModel, &type metadata for SiriPaymentsSnippetModel.AppDisambiguationModel);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in SiriPaymentsSnippetModel.AppDisambiguationModel()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel();
}

unint64_t base witness table accessor for Decodable in SiriPaymentsSnippetModel.SendPaymentConfirmationModel()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel)
  {
    v0 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel)
  {
    v0 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Encodable in SiriPaymentsSnippetModel.SendPaymentConfirmationModel()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
}

unint64_t base witness table accessor for Decodable in SiriPaymentsSnippetModel.RequestPaymentConfirmationModel()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel)
  {
    v0 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel)
  {
    v0 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Encodable in SiriPaymentsSnippetModel.RequestPaymentConfirmationModel()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in AppDescription.CodingKeys()
{
  return lazy protocol witness table accessor for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in AppDescription.CodingKeys()
{
  return lazy protocol witness table accessor for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys();
}

unint64_t base witness table accessor for Equatable in AppDescription.CodingKeys()
{
  return lazy protocol witness table accessor for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in SiriPaymentsSnippetModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in SiriPaymentsSnippetModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for Equatable in SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys();
}

unint64_t base witness table accessor for Equatable in SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys();
}

unint64_t base witness table accessor for Equatable in SiriPaymentsSnippetModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys();
}

unint64_t base witness table accessor for Equatable in SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys();
}

unint64_t base witness table accessor for Equatable in SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys();
}

unint64_t base witness table accessor for Equatable in SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for Equatable in SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for Equatable in SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for Decodable in SiriPaymentsSnippetModel()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel();
}

unint64_t base witness table accessor for Encodable in SiriPaymentsSnippetModel()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel();
}

unint64_t lazy protocol witness table accessor for type [SiriPaymentsSnippetModel.CodingKeys] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [SiriPaymentsSnippetModel.CodingKeys] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SiriPaymentsSnippetModel.CodingKeys] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SiriPaymentsSnippetModel.CodingKeys]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [SiriPaymentsSnippetModel.CodingKeys] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type ArraySlice<SiriPaymentsSnippetModel.CodingKeys> and conformance ArraySlice<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ArraySlice<SiriPaymentsSnippetModel.CodingKeys> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<SiriPaymentsSnippetModel.CodingKeys> and conformance ArraySlice<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<SiriPaymentsSnippetModel.CodingKeys>);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE2190], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<SiriPaymentsSnippetModel.CodingKeys> and conformance ArraySlice<A>);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>()
{
  swift_unknownObjectRelease();
}

uint64_t outlined init with take of SiriPaymentsSnippetModel.SendPaymentConfirmationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
  v6 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
  v5 = *(int *)(v6 + 20);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a2 + v5, a1 + v5);
  memcpy((void *)(a2 + *(int *)(v6 + 24)), (const void *)(a1 + *(int *)(v6 + 24)), 0x70uLL);
  return a2;
}

uint64_t outlined init with take of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
  v6 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
  v5 = *(int *)(v6 + 20);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a2 + v5, a1 + v5);
  memcpy((void *)(a2 + *(int *)(v6 + 24)), (const void *)(a1 + *(int *)(v6 + 24)), 0x70uLL);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CodableIntent<INRequestPaymentIntent> and conformance CodableIntent<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CodableIntent<INRequestPaymentIntent> and conformance CodableIntent<A>;
  if (!lazy protocol witness table cache variable for type CodableIntent<INRequestPaymentIntent> and conformance CodableIntent<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEAB248], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CodableIntent<INRequestPaymentIntent> and conformance CodableIntent<A>);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CodableIntent<INRequestPaymentIntent> and conformance CodableIntent<A>;
  if (!lazy protocol witness table cache variable for type CodableIntent<INRequestPaymentIntent> and conformance CodableIntent<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEAB240], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CodableIntent<INRequestPaymentIntent> and conformance CodableIntent<A>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type CodableIntentResponse<INRequestPaymentIntentResponse> and conformance CodableIntentResponse<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CodableIntentResponse<INRequestPaymentIntentResponse> and conformance CodableIntentResponse<A>;
  if (!lazy protocol witness table cache variable for type CodableIntentResponse<INRequestPaymentIntentResponse> and conformance CodableIntentResponse<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEAC570], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CodableIntentResponse<INRequestPaymentIntentResponse> and conformance CodableIntentResponse<A>);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CodableIntentResponse<INRequestPaymentIntentResponse> and conformance CodableIntentResponse<A>;
  if (!lazy protocol witness table cache variable for type CodableIntentResponse<INRequestPaymentIntentResponse> and conformance CodableIntentResponse<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEAC568], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CodableIntentResponse<INRequestPaymentIntentResponse> and conformance CodableIntentResponse<A>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.PaymentConfirmationModel, &type metadata for SiriPaymentsSnippetModel.PaymentConfirmationModel);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel.PaymentConfirmationModel, &type metadata for SiriPaymentsSnippetModel.PaymentConfirmationModel);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel);
    return v0;
  }
  return v2;
}

uint64_t outlined destroy of SiriPaymentsSnippetModel.PaymentConfirmationModel(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type CodableIntent<INSendPaymentIntent> and conformance CodableIntent<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CodableIntent<INSendPaymentIntent> and conformance CodableIntent<A>;
  if (!lazy protocol witness table cache variable for type CodableIntent<INSendPaymentIntent> and conformance CodableIntent<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEAB248], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CodableIntent<INSendPaymentIntent> and conformance CodableIntent<A>);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CodableIntent<INSendPaymentIntent> and conformance CodableIntent<A>;
  if (!lazy protocol witness table cache variable for type CodableIntent<INSendPaymentIntent> and conformance CodableIntent<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEAB240], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CodableIntent<INSendPaymentIntent> and conformance CodableIntent<A>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type CodableIntentResponse<INSendPaymentIntentResponse> and conformance CodableIntentResponse<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CodableIntentResponse<INSendPaymentIntentResponse> and conformance CodableIntentResponse<A>;
  if (!lazy protocol witness table cache variable for type CodableIntentResponse<INSendPaymentIntentResponse> and conformance CodableIntentResponse<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEAC570], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CodableIntentResponse<INSendPaymentIntentResponse> and conformance CodableIntentResponse<A>);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CodableIntentResponse<INSendPaymentIntentResponse> and conformance CodableIntentResponse<A>;
  if (!lazy protocol witness table cache variable for type CodableIntentResponse<INSendPaymentIntentResponse> and conformance CodableIntentResponse<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEAC568], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CodableIntentResponse<INSendPaymentIntentResponse> and conformance CodableIntentResponse<A>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    v0 = MEMORY[0x249572C98](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    v0 = MEMORY[0x249572C98](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return v0;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined retain of Data(uint64_t a1)
{
  outlined copy of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

unint64_t lazy protocol witness table accessor for type [AppDescription] and conformance <A> [A]()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [AppDescription] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [AppDescription] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [AppDescription]);
    v4 = lazy protocol witness table accessor for type AppDescription and conformance AppDescription();
    v0 = MEMORY[0x249572C98](MEMORY[0x24BEE12D0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [AppDescription] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [AppDescription] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [AppDescription] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [AppDescription]);
    v4 = lazy protocol witness table accessor for type AppDescription and conformance AppDescription();
    v0 = MEMORY[0x249572C98](MEMORY[0x24BEE12A0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [AppDescription] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type AppDescription and conformance AppDescription()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AppDescription and conformance AppDescription;
  if (!lazy protocol witness table cache variable for type AppDescription and conformance AppDescription)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for AppDescription, &type metadata for AppDescription);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AppDescription and conformance AppDescription);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AppDescription and conformance AppDescription;
  if (!lazy protocol witness table cache variable for type AppDescription and conformance AppDescription)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for AppDescription, &type metadata for AppDescription);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AppDescription and conformance AppDescription);
    return v0;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of SiriPaymentsSnippetModel.AppDisambiguationModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void PaymentsError.errorDescription.getter()
{
  const void *v0;
  uint64_t __dst;

  outlined init with take of PaymentsError(v0, &__dst);
  __asm { BR              X8 }
}

uint64_t sub_24716C030()
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!v2 && !v3 && !v4 && !v5 && !v6 && !v7)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to convert direct invocation", 0x23uLL, 1)._countAndFlagsBits;
  if (v2 == 1 && !v3 && !v4 && !v5 && !v6 && !v7)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Encountered invalid SiriKit intent", 0x22uLL, 1)._countAndFlagsBits;
  if (v2 == 2 && !v3 && !v4 && !v5 && !v6 && !v7)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to cast Any disambiguation items to [INPerson]", 0x35uLL, 1)._countAndFlagsBits;
  if (v2 == 3 && !v3 && !v4 && !v5 && !v6 && !v7)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to cast Any itemToConfirm to [INPerson]", 0x2EuLL, 1)._countAndFlagsBits;
  if (v2 == 4 && !v3 && !v4 && !v5 && !v6 && !v7)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to convert Parse to PaymentsNLIntent.", 0x2CuLL, 1)._countAndFlagsBits;
  if (v2 == 5 && !v3 && !v4 && !v5 && !v6 && !v7)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to get NLUUserDialogAct from parse", 0x29uLL, 1)._countAndFlagsBits;
  if (v2 == 6 && !v3 && !v4 && !v5 && !v6 && !v7)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to get contactID from USO Identifiers", 0x2CuLL, 1)._countAndFlagsBits;
  if (v2 == 7 && !v3 && !v4 && !v5 && !v6 && !v7)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Received unexpected disambiguation item type", 0x2CuLL, 1)._countAndFlagsBits;
  if (v2 == 8 && !v3 && !v4 && !v5 && !v6 && !v7)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to convert disambiguation item to INObject", 0x31uLL, 1)._countAndFlagsBits;
  if (v2 == 9 && !v3 && !v4 && !v5 && !v6 && !v7)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Encountered an unspecified error", 0x20uLL, 1)._countAndFlagsBits;
  if (v2 == 10 && !v3 && !v4 && !v5 && !v6 && !v7)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to obtain an app identifier during app resolution", 0x38uLL, 1)._countAndFlagsBits;
  if (v2 != 11 || v3 || v4 || v5 || v6 || v7)
  {
    __break(1u);
    JUMPOUT(0x24716C5D4);
  }
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("The child override should have been invoked", 0x2BuLL, 1)._countAndFlagsBits;
}

void *outlined init with take of PaymentsError(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x31uLL);
  return __dst;
}

unint64_t base witness table accessor for Error in PaymentsError()
{
  return lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance PaymentsError()
{
  return LocalizedError.errorDescription.getter();
}

uint64_t protocol witness for LocalizedError.failureReason.getter in conformance PaymentsError()
{
  return LocalizedError.failureReason.getter();
}

uint64_t protocol witness for LocalizedError.recoverySuggestion.getter in conformance PaymentsError()
{
  return LocalizedError.recoverySuggestion.getter();
}

uint64_t protocol witness for LocalizedError.helpAnchor.getter in conformance PaymentsError()
{
  return LocalizedError.helpAnchor.getter();
}

uint64_t protocol witness for Error._domain.getter in conformance PaymentsError()
{
  return Error._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance PaymentsError()
{
  return Error._code.getter();
}

uint64_t protocol witness for Error._userInfo.getter in conformance PaymentsError()
{
  return Error._userInfo.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance PaymentsError()
{
  return Error._getEmbeddedNSError()();
}

void destroy for PaymentsError(uint64_t a1)
{
  outlined consume of PaymentsError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t initializeWithCopy for PaymentsError(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  outlined copy of PaymentsError(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  result = a1;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return result;
}

void outlined copy of PaymentsError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  if (a7 <= 0x10uLL)
    __asm { BR              X8 }
}

uint64_t assignWithCopy for PaymentsError(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  v10 = *(_QWORD *)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = *(_QWORD *)(a2 + 40);
  v16 = *(_BYTE *)(a2 + 48);
  outlined copy of PaymentsError(*(_QWORD *)a2, v11, v12, v13, v14, v15, v16);
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = v15;
  *(_BYTE *)(a1 + 48) = v16;
  outlined consume of PaymentsError(v2, v3, v4, v5, v6, v7, v8);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy49_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x31uLL);
}

uint64_t assignWithTake for PaymentsError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = *((_BYTE *)a2 + 48);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  outlined consume of PaymentsError(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaymentsError(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  int v4;

  if (a2)
  {
    if (a2 >= 0xEF && *(_BYTE *)(a1 + 49))
    {
      v4 = *(_DWORD *)a1 + 238;
    }
    else
    {
      v2 = *(unsigned __int8 *)(a1 + 48) ^ 0xFF;
      if (v2 >= 0xEE)
        v2 = -1;
      v4 = v2;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PaymentsError(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 49);
  if (a2 > 0xEE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 239;
    *(_BYTE *)(result + 48) = 0;
    if (a3 >= 0xEF)
      *v3 = 1;
  }
  else
  {
    if (a3 >= 0xEF)
      *v3 = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for PaymentsError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) < 0x11u)
    return *(unsigned __int8 *)(a1 + 48);
  else
    return *(_QWORD *)a1 + 17;
}

uint64_t destructiveInjectEnumTag for PaymentsError(uint64_t result, unsigned int a2)
{
  if (a2 < 0x11)
  {
    *(_BYTE *)(result + 48) = a2;
  }
  else
  {
    *(_QWORD *)result = a2 - 17;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_BYTE *)(result + 48) = 17;
  }
  return result;
}

ValueMetadata *type metadata accessor for PaymentsError()
{
  return &type metadata for PaymentsError;
}

uint64_t PaymentsAppLister.listApps(intentID:siriAuthorizationRestriction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[9] = a4;
  v4[8] = a3;
  v4[6] = v4;
  v4[2] = 0;
  v4[3] = 0;
  v4[7] = 0;
  v4[2] = a1;
  v4[3] = a2;
  v4[7] = a3;
  return swift_task_switch();
}

uint64_t PaymentsAppLister.listApps(intentID:siriAuthorizationRestriction:)()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v0[6] = v0;
  v0[4] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[5] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  String.init(stringInterpolation:)();
  v0[10] = v4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 88) = v5;
  *v5 = *(_QWORD *)(v7 + 48);
  v5[1] = PaymentsAppLister.listApps(intentID:siriAuthorizationRestriction:);
  return static AppFinder.listApps(intentID:siriAuthorizationRestriction:)();
}

uint64_t PaymentsAppLister.listApps(intentID:siriAuthorizationRestriction:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 48) = *v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 48) + 8))(a1);
}

uint64_t protocol witness for PaymentsAppListing.listApps(intentID:siriAuthorizationRestriction:) in conformance PaymentsAppLister<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)(v4 + 16) = v4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  v6 = *(_QWORD *)(a4 + 16);
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>;
  return PaymentsAppLister.listApps(intentID:siriAuthorizationRestriction:)(a1, a2, a3, v6);
}

uint64_t type metadata accessor for PaymentsAppLister(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PaymentsAppLister);
}

uint64_t UsoTask.eraseToAny.getter()
{
  swift_retain();
  static UsoTask_CodegenConverter.convert(task:)();
  return swift_release();
}

unint64_t UsoTask.siriKitIntentType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t *v39;
  _BYTE **v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint32_t v47;
  int v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t *v58;
  uint64_t *v59;
  _BYTE **v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  uint32_t v67;
  int v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t *v81;
  uint64_t *v82;
  _BYTE **v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint32_t v90;
  int v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  _UNKNOWN **v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint8_t *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t *v106;
  uint64_t *v107;
  _BYTE **v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  uint32_t v116;
  int v117;
  NSObject *v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  _UNKNOWN **v122;
  _UNKNOWN **v123;
  _UNKNOWN **v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  unint64_t v130;
  char *v131;
  unint64_t v132;
  char *v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  uint64_t v140;
  uint32_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE *v145;
  uint64_t v146;
  uint32_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _BYTE *v151;
  uint64_t v152;
  uint32_t v153;
  uint64_t v154;
  _BYTE v155[32];
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _BYTE *v159;
  uint64_t v160;
  uint32_t v161;
  _BYTE v162[24];
  uint64_t v163;
  uint64_t v164;

  v122 = &protocol witness table for INSearchForAccountsIntent;
  v123 = &protocol witness table for INSendPaymentIntent;
  v124 = &protocol witness table for INRequestPaymentIntent;
  v164 = 0;
  v125 = 0;
  v126 = type metadata accessor for Logger();
  v127 = *(_QWORD *)(v126 - 8);
  v128 = (*(_QWORD *)(v127 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v126);
  v129 = (char *)&v29 - v128;
  v130 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v29 - v128);
  v131 = (char *)&v29 - v130;
  v132 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v29 - v130);
  v133 = (char *)&v29 - v132;
  v134 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v29 - v132);
  v135 = (char *)&v29 - v134;
  v164 = v0;
  UsoTask.eraseToAny.getter();
  if (v163)
  {
    v121 = v155;
    outlined init with copy of Any?((uint64_t)v162, (uint64_t)v155);
    v120 = 0;
    type metadata accessor for UsoTask_requestMoney_common_Payment();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v4 = v135;
      v112 = v154;
      v5 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v4, v5, v126);
      v118 = Logger.logObject.getter();
      v117 = static os_log_type_t.debug.getter();
      v115 = &v140;
      v140 = 2;
      v113 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v114 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v116 = v141;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v119 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v118, (os_log_type_t)v117))
      {
        v6 = v125;
        v102 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v100 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v101 = 0;
        v103 = createStorage<A>(capacity:type:)(0);
        v104 = createStorage<A>(capacity:type:)(v101);
        v108 = &v139;
        v139 = v102;
        v109 = &v138;
        v138 = v103;
        v106 = &v137;
        v137 = v104;
        v105 = 0;
        serialize(_:at:)(0, &v139);
        serialize(_:at:)(v105, v108);
        v136 = v119;
        v107 = &v29;
        MEMORY[0x24BDAC7A8](&v29);
        v7 = v109;
        v8 = &v29 - 6;
        v110 = &v29 - 6;
        v8[2] = (uint64_t)v108;
        v8[3] = (uint64_t)v7;
        v8[4] = v9;
        v111 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v6)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_24701B000, v118, (os_log_type_t)v117, "#UsoTask siriKitIntentType returning Request intent", v102, v116);
          v99 = 0;
          destroyStorage<A>(_:count:)(v103, 0, v100);
          destroyStorage<A>(_:count:)(v104, v99, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v102, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v127 + 8))(v135, v126);
      v96 = type metadata accessor for INRequestPaymentIntent();
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v155);
      outlined destroy of FlowActivity?((uint64_t)v162);
      v97 = v96;
      v98 = v124;
      return v97;
    }
    v95 = 0;
    type metadata accessor for UsoTask_pay_common_Payment();
    if ((swift_dynamicCast() & 1) != 0
      || (v94 = 0, type metadata accessor for UsoTask_noVerb_common_Payment(), (swift_dynamicCast() & 1) != 0))
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v155);
      outlined destroy of FlowActivity?((uint64_t)v162);
      v10 = v133;
      v11 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v10, v11, v126);
      v92 = Logger.logObject.getter();
      v91 = static os_log_type_t.debug.getter();
      v89 = &v146;
      v146 = 2;
      v87 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v88 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v90 = v147;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v93 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v92, (os_log_type_t)v91))
      {
        v12 = v125;
        v77 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v75 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v76 = 0;
        v78 = createStorage<A>(capacity:type:)(0);
        v79 = createStorage<A>(capacity:type:)(v76);
        v83 = &v145;
        v145 = v77;
        v84 = &v144;
        v144 = v78;
        v81 = &v143;
        v143 = v79;
        v80 = 0;
        serialize(_:at:)(0, &v145);
        serialize(_:at:)(v80, v83);
        v142 = v93;
        v82 = &v29;
        MEMORY[0x24BDAC7A8](&v29);
        v13 = v84;
        v14 = &v29 - 6;
        v85 = &v29 - 6;
        v14[2] = (uint64_t)v83;
        v14[3] = (uint64_t)v13;
        v14[4] = v15;
        v86 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v12)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_24701B000, v92, (os_log_type_t)v91, "#UsoTask siriKitIntentType returning Send intent", v77, v90);
          v74 = 0;
          destroyStorage<A>(_:count:)(v78, 0, v75);
          destroyStorage<A>(_:count:)(v79, v74, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v77, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v127 + 8))(v133, v126);
      v97 = type metadata accessor for INSendPaymentIntent();
      v98 = v123;
      return v97;
    }
    v73 = 0;
    type metadata accessor for UsoTask_noVerb_common_PaymentAccount();
    if ((swift_dynamicCast() & 1) != 0
      || (v72 = 0, type metadata accessor for UsoTask_request_common_PaymentAccount(), (swift_dynamicCast() & 1) != 0)
      || (v71 = 0, type metadata accessor for UsoTask_summarise_common_PaymentAccount(),
                     (swift_dynamicCast() & 1) != 0))
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v155);
      outlined destroy of FlowActivity?((uint64_t)v162);
      v16 = v131;
      v17 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v16, v17, v126);
      v69 = Logger.logObject.getter();
      v68 = static os_log_type_t.debug.getter();
      v66 = &v152;
      v152 = 2;
      v64 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v65 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v67 = v153;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v70 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v69, (os_log_type_t)v68))
      {
        v18 = v125;
        v54 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v53 = 0;
        v55 = createStorage<A>(capacity:type:)(0);
        v56 = createStorage<A>(capacity:type:)(v53);
        v60 = &v151;
        v151 = v54;
        v61 = &v150;
        v150 = v55;
        v58 = &v149;
        v149 = v56;
        v57 = 0;
        serialize(_:at:)(0, &v151);
        serialize(_:at:)(v57, v60);
        v148 = v70;
        v59 = &v29;
        MEMORY[0x24BDAC7A8](&v29);
        v19 = v61;
        v20 = &v29 - 6;
        v62 = &v29 - 6;
        v20[2] = (uint64_t)v60;
        v20[3] = (uint64_t)v19;
        v20[4] = v21;
        v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v18)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_24701B000, v69, (os_log_type_t)v68, "#UsoTask siriKitIntentType returning SearchForAccounts intent", v54, v67);
          v51 = 0;
          destroyStorage<A>(_:count:)(v55, 0, v52);
          destroyStorage<A>(_:count:)(v56, v51, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v54, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v127 + 8))(v131, v126);
      v97 = type metadata accessor for INSearchForAccountsIntent();
      v98 = v122;
      return v97;
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v155);
  }
  v22 = v129;
  v23 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v22, v23, v126);
  v49 = Logger.logObject.getter();
  v48 = static os_log_type_t.debug.getter();
  v46 = &v160;
  v160 = 2;
  v44 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v45 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v47 = v161;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v50 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v49, (os_log_type_t)v48))
  {
    v24 = v125;
    v34 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v33 = 0;
    v35 = createStorage<A>(capacity:type:)(0);
    v36 = createStorage<A>(capacity:type:)(v33);
    v40 = &v159;
    v159 = v34;
    v41 = &v158;
    v158 = v35;
    v38 = &v157;
    v157 = v36;
    v37 = 0;
    serialize(_:at:)(0, &v159);
    serialize(_:at:)(v37, v40);
    v156 = v50;
    v39 = &v29;
    MEMORY[0x24BDAC7A8](&v29);
    v25 = v41;
    v26 = &v29 - 6;
    v42 = &v29 - 6;
    v26[2] = (uint64_t)v40;
    v26[3] = (uint64_t)v25;
    v26[4] = v27;
    v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v24)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, v49, (os_log_type_t)v48, "#UsoTask siriKitIntentType no known supported task type found, returning nil", v34, v47);
      v31 = 0;
      destroyStorage<A>(_:count:)(v35, 0, v32);
      destroyStorage<A>(_:count:)(v36, v31, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v34, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v30 = 0;

  (*(void (**)(char *, uint64_t))(v127 + 8))(v129, v126);
  outlined destroy of FlowActivity?((uint64_t)v162);
  v97 = v30;
  v98 = (_UNKNOWN **)v30;
  return v97;
}

__int128 *String.APPLE_CARD_APPLY_LAUNCH_URL.unsafeMutableAddressor()
{
  if (one-time initialization token for APPLE_CARD_APPLY_LAUNCH_URL != -1)
    swift_once();
  return &static String.APPLE_CARD_APPLY_LAUNCH_URL;
}

__int128 *String.APPLE_CARD_INFO_LAUNCH_URL.unsafeMutableAddressor()
{
  if (one-time initialization token for APPLE_CARD_INFO_LAUNCH_URL != -1)
    swift_once();
  return &static String.APPLE_CARD_INFO_LAUNCH_URL;
}

uint64_t Constants.DirectInvocationPayloadKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("itemIdentifier", 0xEuLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("buttonPressed", 0xDuLL, 1)._countAndFlagsBits;
}

uint64_t Constants.DirectInvocationButtonType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("reject", 6uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("confirm", 7uLL, 1)._countAndFlagsBits;
}

__int128 *Constants.intentAppIDAssociatedKey.unsafeMutableAddressor()
{
  if (one-time initialization token for intentAppIDAssociatedKey != -1)
    swift_once();
  return &static Constants.intentAppIDAssociatedKey;
}

void UsoIdentifierNamespace.rawValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_24716FB68()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("item_id", 7uLL, 1)._countAndFlagsBits;
}

__int128 *String.NOT_YET_IMPLEMENTED.unsafeMutableAddressor()
{
  if (one-time initialization token for NOT_YET_IMPLEMENTED != -1)
    swift_once();
  return &static String.NOT_YET_IMPLEMENTED;
}

__int128 *String.APPLE_CARD_WEB_PAGE_LINK.unsafeMutableAddressor()
{
  if (one-time initialization token for APPLE_CARD_WEB_PAGE_LINK != -1)
    swift_once();
  return &static String.APPLE_CARD_WEB_PAGE_LINK;
}

uint64_t Constants.IntentTypeCATCode.rawValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("send", 4uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("search", 6uLL, 1)._countAndFlagsBits;
}

uint64_t Constants.DirectInvocationPayloadIdentifiers.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.DirectInvocation.Payments.ItemSelection", 0x36uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.DirectInvocation.Payments.buttonPress", 0x34uLL, 1)._countAndFlagsBits;
}

uint64_t static Constants.PaymentAccountBalanceType.fromINBalanceType(_:)(unint64_t a1, char a2)
{
  if ((a2 & 1) == 0 && a1 <= 3)
    __asm { BR              X8 }
  return 3;
}

void Constants.PaymentAccountBalanceType.rawValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_24716FFB8()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("miles", 5uLL, 1)._countAndFlagsBits;
}

uint64_t static Constants.PaymentAccountType.fromINAccountType(_:)(unint64_t a1)
{
  if (a1 <= 7)
    __asm { BR              X8 }
  return 0;
}

void Constants.PaymentAccountType.rawValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_247170190()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("unknown", 7uLL, 1)._countAndFlagsBits;
}

void Constants.PaymentAccountType.asCATIDForLoc.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_247170370()
{
  return 0;
}

void Constants.PaymentAccountBalanceType.asCATIDForLoc.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_24717053C()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("BALANCE_TYPE_MILES", 0x12uLL, 1)._countAndFlagsBits;
}

__int128 *String.EMPTY.unsafeMutableAddressor()
{
  if (one-time initialization token for EMPTY != -1)
    swift_once();
  return &static String.EMPTY;
}

SiriPaymentsIntents::Constants::DirectInvocationButtonType_optional __swiftcall Constants.DirectInvocationButtonType.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  char v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "confirm";
  *(_QWORD *)(v2 + 8) = 7;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "reject";
  *(_QWORD *)(v2 + 32) = 6;
  *(_BYTE *)(v2 + 40) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    v7 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return (SiriPaymentsIntents::Constants::DirectInvocationButtonType_optional)(v7 & 1);
  }
  if (v6 == 1)
  {
    v7 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::Constants::DirectInvocationButtonType_optional)2;
}

uint64_t Constants.DirectInvocationButtonType.confirmationResponse.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if ((a1 & 1) != 0)
  {
    v5 = *MEMORY[0x24BE983F8];
    v4 = type metadata accessor for ConfirmationResponse();
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 8) + 104))(a2, v5);
  }
  else
  {
    v6 = *MEMORY[0x24BE98400];
    v2 = type metadata accessor for ConfirmationResponse();
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 104))(a2, v6);
  }
}

uint64_t Constants.NLConstants.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConfirmation", 0x14uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payments", 8uLL, 1)._countAndFlagsBits;
}

uint64_t Constants.NLConstants.canonicalName.getter(char a1)
{
  Swift::String v1;
  Swift::String v2;

  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.nl.", 0x12uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  Constants.NLConstants.rawValue.getter(a1 & 1);
  String.firstLetterCapitalized()();
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  return String.init(stringInterpolation:)();
}

uint64_t Constants.NLPaymentConfirmationValue.canonicalName.getter(char a1)
{
  void *v1;
  Swift::String v4;
  uint64_t countAndFlagsBits;

  Constants.NLPaymentConfirmationValue.associatedSemantic.getter();
  Constants.NLPaymentConfirmationValue.rawValue.getter(a1);
  String.uppercased()();
  swift_bridgeObjectRelease();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_", 1uLL, 1);
  lazy protocol witness table accessor for type String and conformance String();
  default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v4._countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v4._object = v1;
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  countAndFlagsBits = Constants.NLConstants.boundValue(_:)(v4)._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t one-time initialization function for EMPTY()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  result = v1._countAndFlagsBits;
  static String.EMPTY = (__int128)v1;
  return result;
}

uint64_t one-time initialization function for NOT_YET_IMPLEMENTED()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Not yet implemented", 0x13uLL, 1);
  result = v1._countAndFlagsBits;
  static String.NOT_YET_IMPLEMENTED = (__int128)v1;
  return result;
}

uint64_t static String.NOT_YET_IMPLEMENTED.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)String.NOT_YET_IMPLEMENTED.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for WATCH_APP_BUNDLE_ID()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.NanoPassbook", 0x16uLL, 1);
  result = v1._countAndFlagsBits;
  static String.WATCH_APP_BUNDLE_ID = (__int128)v1;
  return result;
}

__int128 *String.WATCH_APP_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for WATCH_APP_BUNDLE_ID != -1)
    swift_once();
  return &static String.WATCH_APP_BUNDLE_ID;
}

uint64_t one-time initialization function for APP_BUNDLE_ID()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.Passbook", 0x12uLL, 1);
  result = v1._countAndFlagsBits;
  static String.APP_BUNDLE_ID = (__int128)v1;
  return result;
}

__int128 *String.APP_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for APP_BUNDLE_ID != -1)
    swift_once();
  return &static String.APP_BUNDLE_ID;
}

uint64_t one-time initialization function for APP_NAME_EN()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("passbook", 8uLL, 1);
  result = v1._countAndFlagsBits;
  static String.APP_NAME_EN = (__int128)v1;
  return result;
}

__int128 *String.APP_NAME_EN.unsafeMutableAddressor()
{
  if (one-time initialization token for APP_NAME_EN != -1)
    swift_once();
  return &static String.APP_NAME_EN;
}

uint64_t one-time initialization function for PASSKIT_EXTENSION_BUNDLE_ID()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.PassKit.PassKitIntentsExtension", 0x29uLL, 1);
  result = v1._countAndFlagsBits;
  static String.PASSKIT_EXTENSION_BUNDLE_ID = (__int128)v1;
  return result;
}

__int128 *String.PASSKIT_EXTENSION_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for PASSKIT_EXTENSION_BUNDLE_ID != -1)
    swift_once();
  return &static String.PASSKIT_EXTENSION_BUNDLE_ID;
}

uint64_t one-time initialization function for PASSKIT_UI_EXTENSION_BUNDLE_ID()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.PassKit.PassKitIntentsUIExtension", 0x2BuLL, 1);
  result = v1._countAndFlagsBits;
  static String.PASSKIT_UI_EXTENSION_BUNDLE_ID = (__int128)v1;
  return result;
}

__int128 *String.PASSKIT_UI_EXTENSION_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for PASSKIT_UI_EXTENSION_BUNDLE_ID != -1)
    swift_once();
  return &static String.PASSKIT_UI_EXTENSION_BUNDLE_ID;
}

uint64_t one-time initialization function for APPLE_CARD_INFO_LAUNCH_URL()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("wallet://discovery/card/40cc8cf6-f7d2-407b-9426-0986d1f39178?referrer=cid%3Dapy-410-100001", 0x5AuLL, 1);
  result = v1._countAndFlagsBits;
  static String.APPLE_CARD_INFO_LAUNCH_URL = (__int128)v1;
  return result;
}

uint64_t one-time initialization function for APPLE_CARD_APPLY_LAUNCH_URL()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("wallet://setup/feature/ccs?referrer=cid%3Dapy-410-100002", 0x38uLL, 1);
  result = v1._countAndFlagsBits;
  static String.APPLE_CARD_APPLY_LAUNCH_URL = (__int128)v1;
  return result;
}

uint64_t one-time initialization function for APPLE_CARD_WEB_PAGE_LINK()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("https://www.apple.com/apple-card/", 0x21uLL, 1);
  result = v1._countAndFlagsBits;
  static String.APPLE_CARD_WEB_PAGE_LINK = (__int128)v1;
  return result;
}

uint64_t one-time initialization function for intentAppIDAssociatedKey()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("intentAppIDAssociatedKey", 0x18uLL, 1);
  result = v1._countAndFlagsBits;
  static Constants.intentAppIDAssociatedKey = (__int128)v1;
  return result;
}

uint64_t static Constants.defaultPaymentsApp.getter()
{
  type metadata accessor for App();
  String.APP_BUNDLE_ID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  String.PASSKIT_EXTENSION_BUNDLE_ID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  String.PASSKIT_UI_EXTENSION_BUNDLE_ID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return App.__allocating_init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)();
}

Swift::String __swiftcall Constants.NLConstants.boundValue(_:)(Swift::String a1)
{
  char v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String result;
  char v8;

  v8 = v1;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  Constants.NLConstants.canonicalName.getter(v8 & 1);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".Value.", 7uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  String.uppercased()();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  v5 = String.init(stringInterpolation:)();
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

SiriPaymentsIntents::Constants::NLConstants_optional __swiftcall Constants.NLConstants.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  char v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "payments";
  *(_QWORD *)(v2 + 8) = 8;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "paymentsConfirmation";
  *(_QWORD *)(v2 + 32) = 20;
  *(_BYTE *)(v2 + 40) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    v7 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return (SiriPaymentsIntents::Constants::NLConstants_optional)(v7 & 1);
  }
  if (v6 == 1)
  {
    v7 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::Constants::NLConstants_optional)2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Constants.NLConstants()
{
  lazy protocol witness table accessor for type Constants.NLConstants and conformance Constants.NLConstants();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Constants.NLConstants()
{
  lazy protocol witness table accessor for type Constants.NLConstants and conformance Constants.NLConstants();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Constants.NLConstants()
{
  lazy protocol witness table accessor for type Constants.NLConstants and conformance Constants.NLConstants();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Constants.NLConstants()
{
  lazy protocol witness table accessor for type Constants.NLConstants and conformance Constants.NLConstants();
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::Constants::NLConstants_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Constants.NLConstants@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::Constants::NLConstants_optional *a2@<X8>)
{
  SiriPaymentsIntents::Constants::NLConstants_optional result;

  result.value = Constants.NLConstants.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Constants.NLConstants@<X0>(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t result;
  uint64_t v3;

  result = Constants.NLConstants.rawValue.getter(*v1 & 1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t Constants.NLPaymentConfirmationValue.associatedSemantic.getter()
{
  return 1;
}

uint64_t Constants.NLPaymentConfirmationValue.rawValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("yes", 3uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("no", 2uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("cancel", 6uLL, 1)._countAndFlagsBits;
}

unint64_t lazy protocol witness table accessor for type Constants.NLConstants and conformance Constants.NLConstants()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.NLConstants and conformance Constants.NLConstants;
  if (!lazy protocol witness table cache variable for type Constants.NLConstants and conformance Constants.NLConstants)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.NLConstants, &type metadata for Constants.NLConstants);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.NLConstants and conformance Constants.NLConstants);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.NLConstants and conformance Constants.NLConstants;
  if (!lazy protocol witness table cache variable for type Constants.NLConstants and conformance Constants.NLConstants)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.NLConstants, &type metadata for Constants.NLConstants);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.NLConstants and conformance Constants.NLConstants);
    return v0;
  }
  return v2;
}

SiriPaymentsIntents::Constants::NLPaymentConfirmationValue_optional __swiftcall Constants.NLPaymentConfirmationValue.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  SiriPaymentsIntents::Constants::NLPaymentConfirmationValue_optional v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "yes";
  *(_QWORD *)(v2 + 8) = 3;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "no";
  *(_QWORD *)(v2 + 32) = 2;
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 48) = "cancel";
  *(_QWORD *)(v2 + 56) = 6;
  *(_BYTE *)(v2 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = SiriPaymentsIntents_Constants_NLPaymentConfirmationValue_yes;
LABEL_8:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = SiriPaymentsIntents_Constants_NLPaymentConfirmationValue_no;
      goto LABEL_8;
    case 2:
      v7.value = SiriPaymentsIntents_Constants_NLPaymentConfirmationValue_cancel;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::Constants::NLPaymentConfirmationValue_optional)3;
}

uint64_t static Constants.NLPaymentConfirmationValue.allCases.getter()
{
  uint64_t result;
  _BYTE *v1;

  result = _allocateUninitializedArray<A>(_:)();
  *v1 = 0;
  v1[1] = 1;
  v1[2] = 2;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Constants.NLPaymentConfirmationValue()
{
  lazy protocol witness table accessor for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue;
  if (!lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.NLPaymentConfirmationValue, &type metadata for Constants.NLPaymentConfirmationValue);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue;
  if (!lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.NLPaymentConfirmationValue, &type metadata for Constants.NLPaymentConfirmationValue);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue;
  if (!lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.NLPaymentConfirmationValue, &type metadata for Constants.NLPaymentConfirmationValue);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue;
  if (!lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.NLPaymentConfirmationValue, &type metadata for Constants.NLPaymentConfirmationValue);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue;
  if (!lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.NLPaymentConfirmationValue, &type metadata for Constants.NLPaymentConfirmationValue);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue;
  if (!lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.NLPaymentConfirmationValue, &type metadata for Constants.NLPaymentConfirmationValue);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Constants.NLPaymentConfirmationValue()
{
  lazy protocol witness table accessor for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Constants.NLPaymentConfirmationValue()
{
  lazy protocol witness table accessor for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Constants.NLPaymentConfirmationValue()
{
  lazy protocol witness table accessor for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue();
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::Constants::NLPaymentConfirmationValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Constants.NLPaymentConfirmationValue@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::Constants::NLPaymentConfirmationValue_optional *a2@<X8>)
{
  SiriPaymentsIntents::Constants::NLPaymentConfirmationValue_optional result;

  result.value = Constants.NLPaymentConfirmationValue.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Constants.NLPaymentConfirmationValue@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v3;

  result = Constants.NLPaymentConfirmationValue.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance Constants.NLPaymentConfirmationValue@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Constants.NLPaymentConfirmationValue.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance Constants.NLPaymentConfirmationValue()
{
  lazy protocol witness table accessor for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue();
  lazy protocol witness table accessor for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue();
  lazy protocol witness table accessor for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue();
  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)();
}

SiriPaymentsIntents::Constants::PaymentAccountType_optional __swiftcall Constants.PaymentAccountType.init(from:)(Swift::String_optional from)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE **v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  int v39;
  Swift::String *v40;
  Swift::String *v41;
  Swift::String *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint32_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  NSObject *v66;
  int v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t countAndFlagsBits;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  void *object;
  uint64_t (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint32_t v88;
  _QWORD v89[2];
  Swift::String v90;
  Swift::String v91;
  Swift::String v92;
  Swift::String v93;
  uint64_t v94;
  uint64_t v95;
  char v96;

  countAndFlagsBits = from.value._countAndFlagsBits;
  object = from.value._object;
  v94 = 0;
  v95 = 0;
  v93._countAndFlagsBits = 0;
  v93._object = 0;
  v70 = 0;
  v71 = 0;
  v72 = type metadata accessor for Logger();
  v73 = *(_QWORD *)(v72 - 8);
  v74 = (*(_QWORD *)(v73 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v75 = (char *)&v26 - v74;
  v77 = type metadata accessor for CharacterSet();
  v78 = *(_QWORD *)(v77 - 8);
  v79 = (*(_QWORD *)(v78 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = MEMORY[0x24BDAC7A8](object);
  v80 = (char *)&v26 - v79;
  v94 = v2;
  v95 = v1;
  swift_bridgeObjectRetain();
  if (!object)
    goto LABEL_12;
  v68 = countAndFlagsBits;
  v69 = object;
  v37._object = object;
  v37._countAndFlagsBits = countAndFlagsBits;
  swift_bridgeObjectRetain();
  v93 = v37;
  v42 = &v92;
  v92 = v37;
  v57 = 7;
  v39 = 1;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("account", 7uLL, 1);
  v41 = &v91;
  v91 = v3;
  v38 = 0;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v39 & 1);
  v40 = &v90;
  v90 = v4;
  v46 = lazy protocol witness table accessor for type String and conformance String();
  v45 = MEMORY[0x24BEE0D00];
  default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v44 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v43 = v5;
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  v47 = v89;
  v89[0] = v44;
  v89[1] = v43;
  static CharacterSet.whitespacesAndNewlines.getter();
  v6 = StringProtocol.trimmingCharacters(in:)();
  v7 = v75;
  v48 = v6;
  v49 = v8;
  (*(void (**)(char *, uint64_t))(v78 + 8))(v80, v77);
  outlined destroy of String.UTF8View();
  v50 = String.lowercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v93 = v50;
  swift_bridgeObjectRelease();
  v9 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v7, v9, v72);
  v56 = 32;
  v10 = swift_allocObject();
  v11 = v50._object;
  v58 = v10;
  *(_QWORD *)(v10 + 16) = v50._countAndFlagsBits;
  *(_QWORD *)(v10 + 24) = v11;
  v66 = Logger.logObject.getter();
  v67 = static os_log_type_t.debug.getter();
  v53 = &v87;
  v87 = 12;
  v51 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v52 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v54 = v88;
  v55 = 17;
  v60 = swift_allocObject();
  *(_BYTE *)(v60 + 16) = 32;
  v61 = swift_allocObject();
  *(_BYTE *)(v61 + 16) = 8;
  v12 = swift_allocObject();
  v13 = v58;
  v59 = v12;
  *(_QWORD *)(v12 + 16) = partial apply for specialized implicit closure #8 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  *(_QWORD *)(v12 + 24) = v13;
  v14 = swift_allocObject();
  v15 = v59;
  v63 = v14;
  *(_QWORD *)(v14 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v14 + 24) = v15;
  v65 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v62 = _allocateUninitializedArray<A>(_:)();
  v64 = v16;
  swift_retain();
  v17 = v60;
  v18 = v64;
  *v64 = partial apply for closure #1 in OSLogArguments.append(_:);
  v18[1] = v17;
  swift_retain();
  v19 = v61;
  v20 = v64;
  v64[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v20[3] = v19;
  swift_retain();
  v21 = v63;
  v22 = v64;
  v64[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v22[5] = v21;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v66, (os_log_type_t)v67))
  {
    v23 = v70;
    v30 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v31 = createStorage<A>(capacity:type:)(0);
    v32 = createStorage<A>(capacity:type:)(1);
    v33 = &v86;
    v86 = v30;
    v34 = &v85;
    v85 = v31;
    v35 = &v84;
    v84 = v32;
    serialize(_:at:)(2, &v86);
    serialize(_:at:)(1, v33);
    v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v83 = v60;
    closure #1 in osLogInternal(_:log:type:)(&v82, (uint64_t)v33, (uint64_t)v34, (uint64_t)v35);
    v36 = v23;
    if (v23)
    {
      __break(1u);
    }
    else
    {
      v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v83 = v61;
      closure #1 in osLogInternal(_:log:type:)(&v82, (uint64_t)&v86, (uint64_t)&v85, (uint64_t)&v84);
      v28 = 0;
      v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v83 = v63;
      closure #1 in osLogInternal(_:log:type:)(&v82, (uint64_t)&v86, (uint64_t)&v85, (uint64_t)&v84);
      _os_log_impl(&dword_24701B000, v66, (os_log_type_t)v67, "#PaymentAccountType initializing against cleaned candidate %s", v30, v54);
      destroyStorage<A>(_:count:)(v31, 0, v29);
      destroyStorage<A>(_:count:)(v32, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v30, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v73 + 8))(v75, v72);
  LOBYTE(v24) = Constants.PaymentAccountType.init(rawValue:)(v50);
  v27 = v24;
  if (v24 == 9)
  {
    outlined destroy of String.UTF8View();
LABEL_12:
    swift_bridgeObjectRelease();
    return (SiriPaymentsIntents::Constants::PaymentAccountType_optional)9;
  }
  v96 = v27;
  outlined destroy of String.UTF8View();
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::Constants::PaymentAccountType_optional)v27;
}

uint64_t sub_247172580()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

SiriPaymentsIntents::Constants::PaymentAccountType_optional __swiftcall Constants.PaymentAccountType.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  SiriPaymentsIntents::Constants::PaymentAccountType_optional v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "unknown";
  *(_QWORD *)(v2 + 8) = 7;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "checking";
  *(_QWORD *)(v2 + 32) = 8;
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 48) = "credit";
  *(_QWORD *)(v2 + 56) = 6;
  *(_BYTE *)(v2 + 64) = 2;
  *(_QWORD *)(v2 + 72) = "debit";
  *(_QWORD *)(v2 + 80) = 5;
  *(_BYTE *)(v2 + 88) = 2;
  *(_QWORD *)(v2 + 96) = "investment";
  *(_QWORD *)(v2 + 104) = 10;
  *(_BYTE *)(v2 + 112) = 2;
  *(_QWORD *)(v2 + 120) = "mortgage";
  *(_QWORD *)(v2 + 128) = 8;
  *(_BYTE *)(v2 + 136) = 2;
  *(_QWORD *)(v2 + 144) = "prepaid";
  *(_QWORD *)(v2 + 152) = 7;
  *(_BYTE *)(v2 + 160) = 2;
  *(_QWORD *)(v2 + 168) = "saving";
  *(_QWORD *)(v2 + 176) = 6;
  *(_BYTE *)(v2 + 184) = 2;
  *(_QWORD *)(v2 + 192) = "savings";
  *(_QWORD *)(v2 + 200) = 7;
  *(_BYTE *)(v2 + 208) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = SiriPaymentsIntents_Constants_PaymentAccountType_unknown;
LABEL_20:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = SiriPaymentsIntents_Constants_PaymentAccountType_checking;
      goto LABEL_20;
    case 2:
      v7.value = SiriPaymentsIntents_Constants_PaymentAccountType_credit;
      goto LABEL_20;
    case 3:
      v7.value = SiriPaymentsIntents_Constants_PaymentAccountType_debit;
      goto LABEL_20;
    case 4:
      v7.value = SiriPaymentsIntents_Constants_PaymentAccountType_investment;
      goto LABEL_20;
    case 5:
      v7.value = SiriPaymentsIntents_Constants_PaymentAccountType_mortgage;
      goto LABEL_20;
    case 6:
      v7.value = SiriPaymentsIntents_Constants_PaymentAccountType_prepaid;
      goto LABEL_20;
    case 7:
      v7.value = SiriPaymentsIntents_Constants_PaymentAccountType_saving;
      goto LABEL_20;
    case 8:
      v7.value = SiriPaymentsIntents_Constants_PaymentAccountType_savings;
      goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::Constants::PaymentAccountType_optional)9;
}

void Constants.PaymentAccountType.asINAccountType.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_2471728FC()
{
  return 0;
}

uint64_t static Constants.PaymentAccountType.allCases.getter()
{
  uint64_t result;
  _BYTE *v1;

  result = _allocateUninitializedArray<A>(_:)();
  *v1 = 0;
  v1[1] = 1;
  v1[2] = 2;
  v1[3] = 3;
  v1[4] = 4;
  v1[5] = 5;
  v1[6] = 6;
  v1[7] = 7;
  v1[8] = 8;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

SiriPaymentsIntents::Constants::DirectInvocationPayloadKeys_optional __swiftcall Constants.DirectInvocationPayloadKeys.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  char v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "buttonPressed";
  *(_QWORD *)(v2 + 8) = 13;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "itemIdentifier";
  *(_QWORD *)(v2 + 32) = 14;
  *(_BYTE *)(v2 + 40) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    v7 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return (SiriPaymentsIntents::Constants::DirectInvocationPayloadKeys_optional)(v7 & 1);
  }
  if (v6 == 1)
  {
    v7 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::Constants::DirectInvocationPayloadKeys_optional)2;
}

uint64_t static Constants.DirectInvocationPayloadKeys.allCases.getter()
{
  uint64_t result;
  _BYTE *v1;

  result = _allocateUninitializedArray<A>(_:)();
  *v1 = 0;
  v1[1] = 1;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

SiriPaymentsIntents::Constants::DirectInvocationPayloadIdentifiers_optional __swiftcall Constants.DirectInvocationPayloadIdentifiers.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  char v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "com.apple.siri.DirectInvocation.Payments.buttonPress";
  *(_QWORD *)(v2 + 8) = 52;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "com.apple.siri.DirectInvocation.Payments.ItemSelection";
  *(_QWORD *)(v2 + 32) = 54;
  *(_BYTE *)(v2 + 40) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    v7 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return (SiriPaymentsIntents::Constants::DirectInvocationPayloadIdentifiers_optional)(v7 & 1);
  }
  if (v6 == 1)
  {
    v7 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::Constants::DirectInvocationPayloadIdentifiers_optional)2;
}

uint64_t static Constants.DirectInvocationPayloadIdentifiers.allCases.getter()
{
  uint64_t result;
  _BYTE *v1;

  result = _allocateUninitializedArray<A>(_:)();
  *v1 = 0;
  v1[1] = 1;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t static Constants.DirectInvocationButtonType.allCases.getter()
{
  uint64_t result;
  _BYTE *v1;

  result = _allocateUninitializedArray<A>(_:)();
  *v1 = 0;
  v1[1] = 1;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Constants.PaymentAccountType()
{
  lazy protocol witness table accessor for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Constants.PaymentAccountType()
{
  lazy protocol witness table accessor for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Constants.PaymentAccountType()
{
  lazy protocol witness table accessor for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Constants.PaymentAccountType()
{
  lazy protocol witness table accessor for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType();
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::Constants::PaymentAccountType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Constants.PaymentAccountType@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::Constants::PaymentAccountType_optional *a2@<X8>)
{
  SiriPaymentsIntents::Constants::PaymentAccountType_optional result;

  result.value = Constants.PaymentAccountType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Constants.PaymentAccountType(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  Constants.PaymentAccountType.rawValue.getter(*v1);
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance Constants.PaymentAccountType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Constants.PaymentAccountType.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Constants.DirectInvocationPayloadKeys()
{
  lazy protocol witness table accessor for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Constants.DirectInvocationPayloadKeys()
{
  lazy protocol witness table accessor for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Constants.DirectInvocationPayloadKeys()
{
  lazy protocol witness table accessor for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Constants.DirectInvocationPayloadKeys()
{
  lazy protocol witness table accessor for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys();
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::Constants::DirectInvocationPayloadKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Constants.DirectInvocationPayloadKeys@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::Constants::DirectInvocationPayloadKeys_optional *a2@<X8>)
{
  SiriPaymentsIntents::Constants::DirectInvocationPayloadKeys_optional result;

  result.value = Constants.DirectInvocationPayloadKeys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Constants.DirectInvocationPayloadKeys@<X0>(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t result;
  uint64_t v3;

  result = Constants.DirectInvocationPayloadKeys.rawValue.getter(*v1 & 1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance Constants.DirectInvocationPayloadKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Constants.DirectInvocationPayloadKeys.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Constants.DirectInvocationPayloadIdentifiers()
{
  lazy protocol witness table accessor for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Constants.DirectInvocationPayloadIdentifiers()
{
  lazy protocol witness table accessor for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Constants.DirectInvocationPayloadIdentifiers()
{
  lazy protocol witness table accessor for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Constants.DirectInvocationPayloadIdentifiers()
{
  lazy protocol witness table accessor for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers();
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::Constants::DirectInvocationPayloadIdentifiers_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Constants.DirectInvocationPayloadIdentifiers@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::Constants::DirectInvocationPayloadIdentifiers_optional *a2@<X8>)
{
  SiriPaymentsIntents::Constants::DirectInvocationPayloadIdentifiers_optional result;

  result.value = Constants.DirectInvocationPayloadIdentifiers.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Constants.DirectInvocationPayloadIdentifiers@<X0>(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t result;
  uint64_t v3;

  result = Constants.DirectInvocationPayloadIdentifiers.rawValue.getter(*v1 & 1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance Constants.DirectInvocationPayloadIdentifiers@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Constants.DirectInvocationPayloadIdentifiers.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Constants.DirectInvocationButtonType()
{
  lazy protocol witness table accessor for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Constants.DirectInvocationButtonType()
{
  lazy protocol witness table accessor for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Constants.DirectInvocationButtonType()
{
  lazy protocol witness table accessor for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Constants.DirectInvocationButtonType()
{
  lazy protocol witness table accessor for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType();
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::Constants::DirectInvocationButtonType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Constants.DirectInvocationButtonType@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::Constants::DirectInvocationButtonType_optional *a2@<X8>)
{
  SiriPaymentsIntents::Constants::DirectInvocationButtonType_optional result;

  result.value = Constants.DirectInvocationButtonType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Constants.DirectInvocationButtonType@<X0>(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t result;
  uint64_t v3;

  result = Constants.DirectInvocationButtonType.rawValue.getter(*v1 & 1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance Constants.DirectInvocationButtonType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Constants.DirectInvocationButtonType.allCases.getter();
  *a1 = result;
  return result;
}

void Constants.PaymentAccountBalanceType.asINBalanceType.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_24717346C()
{
  return 3;
}

SiriPaymentsIntents::Constants::PaymentAccountBalanceType_optional __swiftcall Constants.PaymentAccountBalanceType.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  SiriPaymentsIntents::Constants::PaymentAccountBalanceType_optional v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "miles";
  *(_QWORD *)(v2 + 8) = 5;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "money";
  *(_QWORD *)(v2 + 32) = 5;
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 48) = "points";
  *(_QWORD *)(v2 + 56) = 6;
  *(_BYTE *)(v2 + 64) = 2;
  *(_QWORD *)(v2 + 72) = "unknown";
  *(_QWORD *)(v2 + 80) = 7;
  *(_BYTE *)(v2 + 88) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = SiriPaymentsIntents_Constants_PaymentAccountBalanceType_miles;
LABEL_10:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = SiriPaymentsIntents_Constants_PaymentAccountBalanceType_money;
      goto LABEL_10;
    case 2:
      v7.value = SiriPaymentsIntents_Constants_PaymentAccountBalanceType_points;
      goto LABEL_10;
    case 3:
      v7.value = SiriPaymentsIntents_Constants_PaymentAccountBalanceType_unknown;
      goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::Constants::PaymentAccountBalanceType_optional)4;
}

uint64_t static Constants.PaymentAccountBalanceType.allCases.getter()
{
  uint64_t result;
  _BYTE *v1;

  result = _allocateUninitializedArray<A>(_:)();
  *v1 = 0;
  v1[1] = 1;
  v1[2] = 2;
  v1[3] = 3;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Constants.PaymentAccountBalanceType()
{
  lazy protocol witness table accessor for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Constants.PaymentAccountBalanceType()
{
  lazy protocol witness table accessor for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Constants.PaymentAccountBalanceType()
{
  lazy protocol witness table accessor for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Constants.PaymentAccountBalanceType()
{
  lazy protocol witness table accessor for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType();
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::Constants::PaymentAccountBalanceType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Constants.PaymentAccountBalanceType@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::Constants::PaymentAccountBalanceType_optional *a2@<X8>)
{
  SiriPaymentsIntents::Constants::PaymentAccountBalanceType_optional result;

  result.value = Constants.PaymentAccountBalanceType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Constants.PaymentAccountBalanceType(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  Constants.PaymentAccountBalanceType.rawValue.getter(*v1);
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance Constants.PaymentAccountBalanceType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Constants.PaymentAccountBalanceType.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t static Constants.IntentTypeCATCode.from(_:)()
{
  type metadata accessor for INRequestPaymentIntent();
  if (swift_dynamicCastMetatype())
  {
    return 0;
  }
  else
  {
    type metadata accessor for INSendPaymentIntent();
    if (swift_dynamicCastMetatype())
    {
      return 1;
    }
    else
    {
      type metadata accessor for INSearchForAccountsIntent();
      if (swift_dynamicCastMetatype())
        return 2;
      else
        return 3;
    }
  }
}

SiriPaymentsIntents::Constants::IntentTypeCATCode_optional __swiftcall Constants.IntentTypeCATCode.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  SiriPaymentsIntents::Constants::IntentTypeCATCode_optional v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "request";
  *(_QWORD *)(v2 + 8) = 7;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "send";
  *(_QWORD *)(v2 + 32) = 4;
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 48) = "search";
  *(_QWORD *)(v2 + 56) = 6;
  *(_BYTE *)(v2 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = SiriPaymentsIntents_Constants_IntentTypeCATCode_request;
LABEL_8:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = SiriPaymentsIntents_Constants_IntentTypeCATCode_send;
      goto LABEL_8;
    case 2:
      v7.value = SiriPaymentsIntents_Constants_IntentTypeCATCode_search;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::Constants::IntentTypeCATCode_optional)3;
}

uint64_t static Constants.IntentTypeCATCode.allCases.getter()
{
  uint64_t result;
  _BYTE *v1;

  result = _allocateUninitializedArray<A>(_:)();
  *v1 = 0;
  v1[1] = 1;
  v1[2] = 2;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

SiriPaymentsIntents::UsoIdentifierNamespace_optional __swiftcall UsoIdentifierNamespace.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  SiriPaymentsIntents::UsoIdentifierNamespace_optional v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "item_id";
  *(_QWORD *)(v2 + 8) = 7;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "personRelationship";
  *(_QWORD *)(v2 + 32) = 18;
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 48) = "phoneType";
  *(_QWORD *)(v2 + 56) = 9;
  *(_BYTE *)(v2 + 64) = 2;
  *(_QWORD *)(v2 + 72) = "emailType";
  *(_QWORD *)(v2 + 80) = 9;
  *(_BYTE *)(v2 + 88) = 2;
  *(_QWORD *)(v2 + 96) = "contactAttributes";
  *(_QWORD *)(v2 + 104) = 17;
  *(_BYTE *)(v2 + 112) = 2;
  *(_QWORD *)(v2 + 120) = "contactType";
  *(_QWORD *)(v2 + 128) = 11;
  *(_BYTE *)(v2 + 136) = 2;
  *(_QWORD *)(v2 + 144) = "name";
  *(_QWORD *)(v2 + 152) = 4;
  *(_BYTE *)(v2 + 160) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = SiriPaymentsIntents_UsoIdentifierNamespace_itemId;
LABEL_16:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = SiriPaymentsIntents_UsoIdentifierNamespace_personRelationship;
      goto LABEL_16;
    case 2:
      v7.value = SiriPaymentsIntents_UsoIdentifierNamespace_phoneType;
      goto LABEL_16;
    case 3:
      v7.value = SiriPaymentsIntents_UsoIdentifierNamespace_emailType;
      goto LABEL_16;
    case 4:
      v7.value = SiriPaymentsIntents_UsoIdentifierNamespace_contactAttributes;
      goto LABEL_16;
    case 5:
      v7.value = SiriPaymentsIntents_UsoIdentifierNamespace_contactType;
      goto LABEL_16;
    case 6:
      v7.value = SiriPaymentsIntents_UsoIdentifierNamespace_name;
      goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::UsoIdentifierNamespace_optional)7;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Constants.IntentTypeCATCode()
{
  lazy protocol witness table accessor for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Constants.IntentTypeCATCode()
{
  lazy protocol witness table accessor for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Constants.IntentTypeCATCode()
{
  lazy protocol witness table accessor for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Constants.IntentTypeCATCode()
{
  lazy protocol witness table accessor for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode();
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::Constants::IntentTypeCATCode_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Constants.IntentTypeCATCode@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::Constants::IntentTypeCATCode_optional *a2@<X8>)
{
  SiriPaymentsIntents::Constants::IntentTypeCATCode_optional result;

  result.value = Constants.IntentTypeCATCode.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Constants.IntentTypeCATCode@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v3;

  result = Constants.IntentTypeCATCode.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance Constants.IntentTypeCATCode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Constants.IntentTypeCATCode.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UsoIdentifierNamespace()
{
  lazy protocol witness table accessor for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance UsoIdentifierNamespace()
{
  lazy protocol witness table accessor for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UsoIdentifierNamespace()
{
  lazy protocol witness table accessor for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance UsoIdentifierNamespace()
{
  lazy protocol witness table accessor for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace();
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::UsoIdentifierNamespace_optional protocol witness for RawRepresentable.init(rawValue:) in conformance UsoIdentifierNamespace@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::UsoIdentifierNamespace_optional *a2@<X8>)
{
  SiriPaymentsIntents::UsoIdentifierNamespace_optional result;

  result.value = UsoIdentifierNamespace.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance UsoIdentifierNamespace(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  UsoIdentifierNamespace.rawValue.getter(*v1);
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_247174090()
{
  return swift_deallocObject();
}

uint64_t sub_2471740B8()
{
  return swift_deallocObject();
}

uint64_t sub_2471740E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24717411C()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys;
  if (!lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.DirectInvocationPayloadKeys, &type metadata for Constants.DirectInvocationPayloadKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys;
  if (!lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.DirectInvocationPayloadKeys, &type metadata for Constants.DirectInvocationPayloadKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers;
  if (!lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.DirectInvocationPayloadIdentifiers, &type metadata for Constants.DirectInvocationPayloadIdentifiers);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers;
  if (!lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.DirectInvocationPayloadIdentifiers, &type metadata for Constants.DirectInvocationPayloadIdentifiers);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType;
  if (!lazy protocol witness table cache variable for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.DirectInvocationButtonType, &type metadata for Constants.DirectInvocationButtonType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType;
  if (!lazy protocol witness table cache variable for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.DirectInvocationButtonType, &type metadata for Constants.DirectInvocationButtonType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType;
  if (!lazy protocol witness table cache variable for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.PaymentAccountBalanceType, &type metadata for Constants.PaymentAccountBalanceType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType;
  if (!lazy protocol witness table cache variable for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.PaymentAccountBalanceType, &type metadata for Constants.PaymentAccountBalanceType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace;
  if (!lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for UsoIdentifierNamespace, &type metadata for UsoIdentifierNamespace);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace;
  if (!lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for UsoIdentifierNamespace, &type metadata for UsoIdentifierNamespace);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace);
    return v0;
  }
  return v2;
}

ValueMetadata *type metadata accessor for Constants()
{
  return &type metadata for Constants;
}

ValueMetadata *type metadata accessor for Constants.NLConstants()
{
  return &type metadata for Constants.NLConstants;
}

ValueMetadata *type metadata accessor for Constants.NLPaymentConfirmationValue()
{
  return &type metadata for Constants.NLPaymentConfirmationValue;
}

uint64_t getEnumTagSinglePayload for Constants.PaymentAccountType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xF7)
      goto LABEL_15;
    v7 = ((a2 + 8) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 247;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 9;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for Constants.PaymentAccountType(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xF7)
  {
    v5 = ((a3 + 8) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xF7)
  {
    v4 = ((a2 - 248) >> 8) + 1;
    *result = a2 + 8;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Constants.PaymentAccountType()
{
  return &type metadata for Constants.PaymentAccountType;
}

ValueMetadata *type metadata accessor for Constants.DirectInvocationPayloadKeys()
{
  return &type metadata for Constants.DirectInvocationPayloadKeys;
}

ValueMetadata *type metadata accessor for Constants.DirectInvocationPayloadIdentifiers()
{
  return &type metadata for Constants.DirectInvocationPayloadIdentifiers;
}

ValueMetadata *type metadata accessor for Constants.DirectInvocationButtonType()
{
  return &type metadata for Constants.DirectInvocationButtonType;
}

ValueMetadata *type metadata accessor for Constants.PaymentAccountBalanceType()
{
  return &type metadata for Constants.PaymentAccountBalanceType;
}

ValueMetadata *type metadata accessor for Constants.IntentTypeCATCode()
{
  return &type metadata for Constants.IntentTypeCATCode;
}

ValueMetadata *type metadata accessor for UsoIdentifierNamespace()
{
  return &type metadata for UsoIdentifierNamespace;
}

unint64_t base witness table accessor for Equatable in UsoIdentifierNamespace()
{
  return lazy protocol witness table accessor for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Constants.IntentTypeCATCode()
{
  return lazy protocol witness table accessor for type [Constants.IntentTypeCATCode] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [Constants.IntentTypeCATCode] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Constants.IntentTypeCATCode] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Constants.IntentTypeCATCode] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Constants.IntentTypeCATCode]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Constants.IntentTypeCATCode] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Equatable in Constants.IntentTypeCATCode()
{
  return lazy protocol witness table accessor for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Constants.PaymentAccountBalanceType()
{
  return lazy protocol witness table accessor for type [Constants.PaymentAccountBalanceType] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [Constants.PaymentAccountBalanceType] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Constants.PaymentAccountBalanceType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Constants.PaymentAccountBalanceType] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Constants.PaymentAccountBalanceType]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Constants.PaymentAccountBalanceType] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Equatable in Constants.PaymentAccountBalanceType()
{
  return lazy protocol witness table accessor for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Constants.DirectInvocationButtonType()
{
  return lazy protocol witness table accessor for type [Constants.DirectInvocationButtonType] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [Constants.DirectInvocationButtonType] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Constants.DirectInvocationButtonType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Constants.DirectInvocationButtonType] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Constants.DirectInvocationButtonType]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Constants.DirectInvocationButtonType] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Equatable in Constants.DirectInvocationButtonType()
{
  return lazy protocol witness table accessor for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Constants.DirectInvocationPayloadIdentifiers()
{
  return lazy protocol witness table accessor for type [Constants.DirectInvocationPayloadIdentifiers] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [Constants.DirectInvocationPayloadIdentifiers] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Constants.DirectInvocationPayloadIdentifiers] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Constants.DirectInvocationPayloadIdentifiers] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Constants.DirectInvocationPayloadIdentifiers]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Constants.DirectInvocationPayloadIdentifiers] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Equatable in Constants.DirectInvocationPayloadIdentifiers()
{
  return lazy protocol witness table accessor for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Constants.DirectInvocationPayloadKeys()
{
  return lazy protocol witness table accessor for type [Constants.DirectInvocationPayloadKeys] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [Constants.DirectInvocationPayloadKeys] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Constants.DirectInvocationPayloadKeys] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Constants.DirectInvocationPayloadKeys] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Constants.DirectInvocationPayloadKeys]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Constants.DirectInvocationPayloadKeys] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Equatable in Constants.DirectInvocationPayloadKeys()
{
  return lazy protocol witness table accessor for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Constants.PaymentAccountType()
{
  return lazy protocol witness table accessor for type [Constants.PaymentAccountType] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [Constants.PaymentAccountType] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Constants.PaymentAccountType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Constants.PaymentAccountType] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Constants.PaymentAccountType]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Constants.PaymentAccountType] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Equatable in Constants.PaymentAccountType()
{
  return lazy protocol witness table accessor for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType();
}

unint64_t base witness table accessor for Hashable in Constants.NLPaymentConfirmationValue()
{
  return lazy protocol witness table accessor for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue();
}

unint64_t base witness table accessor for Equatable in Constants.NLPaymentConfirmationValue()
{
  return lazy protocol witness table accessor for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue();
}

unint64_t base witness table accessor for Equatable in Constants.NLConstants()
{
  return lazy protocol witness table accessor for type Constants.NLConstants and conformance Constants.NLConstants();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Constants.NLPaymentConfirmationValue()
{
  return lazy protocol witness table accessor for type [Constants.NLPaymentConfirmationValue] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [Constants.NLPaymentConfirmationValue] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Constants.NLPaymentConfirmationValue] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Constants.NLPaymentConfirmationValue] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Constants.NLPaymentConfirmationValue]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Constants.NLPaymentConfirmationValue] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for TerminalNodeValueType in Constants.NLPaymentConfirmationValue()
{
  return lazy protocol witness table accessor for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue();
}

uint64_t SearchForAccountsHandleIntentStrategy.__allocating_init()()
{
  uint64_t v0;
  Swift::UInt v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _UNKNOWN **v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];
  uint64_t v32;
  uint64_t v33[5];
  _QWORD v34[5];
  _BYTE v35[40];
  uint64_t v36;
  _BYTE v37[40];
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42[5];
  uint64_t v43;
  uint64_t v44;
  _UNKNOWN **v45;
  uint64_t v46;

  v38 = 0;
  v36 = 0;
  v16 = 0;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v13 = (char *)&v6 - v7;
  v12 = type metadata accessor for Globals();
  v8 = v42;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v42);
  v9 = &v41;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v10 = &v40;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v11 = &v39;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  v28 = &v43;
  v44 = v12;
  v45 = &protocol witness table for Globals;
  v43 = v0;
  type metadata accessor for SearchForAccountsCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v27 = CATWrapper.__allocating_init(options:globals:)();
  v38 = v27;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  v14 = v37;
  outlined init with copy of GlobalsProviding((uint64_t)v28, (uint64_t)v37);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v15 = CATWrapper.__allocating_init(options:globals:)();
  swift_retain();
  v26 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v14, v15, v27);
  v36 = v26;
  v25 = v35;
  outlined init with copy of GlobalsProviding((uint64_t)v28, (uint64_t)v35);
  v1 = swift_retain();
  NSJSONWritingOptions.init(rawValue:)(v1);
  v20 = v34;
  v34[3] = &type metadata for CommonLabelsProvider;
  v34[4] = &protocol witness table for CommonLabelsProvider;
  v2 = type metadata accessor for SiriKitContactResolver();
  v21 = v33;
  v33[3] = v2;
  v33[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v33);
  SiriKitContactResolver.init()();
  swift_retain();
  v22 = &v32;
  v32 = v26;
  swift_retain();
  v18 = v44;
  v17 = v45;
  __swift_project_boxed_opaque_existential_1(v28, v44);
  v3 = (void (*)(uint64_t))v17[2];
  v19 = &v30;
  v3(v18);
  v23 = v31;
  v31[3] = &type metadata for SearchForAccountsViewBuilder;
  v31[4] = &protocol witness table for SearchForAccountsViewBuilder;
  v31[0] = swift_allocObject();
  SearchForAccountsViewBuilder.init(catFamily:deviceState:)(v27, (uint64_t)v19, (_QWORD *)(v31[0] + 16));
  v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  v29 = SearchForAccountsHandleIntentStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:viewBuilder:)((uint64_t)v25, v27, (uint64_t)v20, (uint64_t)v21, (uint64_t)v22, (uint64_t)v23, v24, v4);
  swift_retain();
  v46 = v29;
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v28);
  swift_release();
  return v29;
}

uint64_t SearchForAccountsHandleIntentStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:viewBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  swift_allocObject();
  return SearchForAccountsHandleIntentStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:viewBuilder:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t SearchForAccountsHandleIntentStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:viewBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[40];
  _BYTE v33[40];
  _BYTE v34[40];
  char v35[8];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v30 = a1;
  v29 = a2;
  v28 = a3;
  v27 = a4;
  v25 = a5;
  v23 = a6;
  v26 = a7;
  v21 = a8;
  v42 = 0;
  v41 = 0;
  v40 = 0;
  v39 = 0;
  v38 = 0;
  v37 = 0;
  v36 = 0;
  v43 = a7;
  v24 = *(_QWORD *)(a7 - 8);
  v16 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = (uint64_t)&v15 - v16;
  v41 = MEMORY[0x24BDAC7A8](a1);
  v40 = v9;
  v39 = v10;
  v38 = v11;
  v37 = v12;
  v36 = v13;
  swift_retain();
  v42 = v8;
  v17 = v35;
  outlined init with copy of GlobalsProviding(v23, (uint64_t)v35);
  outlined init with take of CommonLabelsProviding(v17, (void *)(v8 + 184));
  swift_release();
  v22 = v34;
  outlined init with copy of GlobalsProviding(v30, (uint64_t)v34);
  swift_retain();
  v18 = v33;
  outlined init with copy of GlobalsProviding(v28, (uint64_t)v33);
  v19 = v32;
  outlined init with copy of GlobalsProviding(v27, (uint64_t)v32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v20, v25, v26);
  v31 = BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v22, v29, (uint64_t)v18, (uint64_t)v19, v20, v26, v21);
  swift_retain();
  v42 = v31;
  __swift_destroy_boxed_opaque_existential_0(v23);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
  __swift_destroy_boxed_opaque_existential_0(v27);
  __swift_destroy_boxed_opaque_existential_0(v28);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v30);
  swift_release();
  return v31;
}

uint64_t SearchForAccountsHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[8] = a2;
  v3[7] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[5] = 0;
  v4 = type metadata accessor for Logger();
  v3[9] = v4;
  v3[10] = *(_QWORD *)(v4 - 8);
  v3[11] = swift_task_alloc();
  v3[3] = a1;
  v3[4] = a2;
  v3[5] = v2;
  return swift_task_switch();
}

uint64_t SearchForAccountsHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *buf;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint32_t size;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 80);
  v16 = *(_QWORD *)(v0 + 72);
  v17 = *(id *)(v0 + 64);
  v19 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 16) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v2, v16);
  swift_retain();
  v3 = v17;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v17;
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 48) = 22;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 96);
  v23 = swift_allocObject();
  *(_BYTE *)(v23 + 16) = 32;
  v24 = swift_allocObject();
  *(_BYTE *)(v24 + 16) = 8;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = partial apply for implicit closure #8 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
  *(_QWORD *)(v20 + 24) = v19;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v25 + 24) = v20;
  v26 = swift_allocObject();
  *(_BYTE *)(v26 + 16) = 32;
  v27 = swift_allocObject();
  *(_BYTE *)(v27 + 16) = 8;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = partial apply for implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:);
  *(_QWORD *)(v22 + 24) = v21;
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v28 + 24) = v22;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v29 = v4;
  swift_retain();
  *v29 = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[1] = v23;
  swift_retain();
  v29[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[3] = v24;
  swift_retain();
  v29[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[5] = v25;
  swift_retain();
  v29[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[7] = v26;
  swift_retain();
  v29[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[9] = v27;
  swift_retain();
  v29[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[11] = v28;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v30, v31))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v12 = createStorage<A>(capacity:type:)(0);
    v13 = createStorage<A>(capacity:type:)(2);
    v32 = buf;
    v33 = v12;
    v34 = v13;
    serialize(_:at:)(2, &v32);
    serialize(_:at:)(2, &v32);
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v36 = v23;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v36 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v36 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v36 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v36 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v36 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    _os_log_impl(&dword_24701B000, v30, v31, "#SearchForAccountsHandleIntentStrategy makeIntentExecutionBehavior app: %s, intent: %s", buf, size);
    destroyStorage<A>(_:count:)(v12, 0, v10);
    destroyStorage<A>(_:count:)(v13, 2, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v8 = v14[11];
  v6 = v14[10];
  v7 = v14[9];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v7);
  type metadata accessor for SiriKitIntentExecutionBehavior();
  v9 = static SiriKitIntentExecutionBehavior.standard()();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v14[2] + 8))(v9);
}

uint64_t SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[75] = v2;
  v3[74] = a2;
  v3[73] = a1;
  v3[59] = v3;
  v3[60] = 0;
  v3[61] = 0;
  v3[63] = 0;
  v3[69] = 0;
  v3[71] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v3[76] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[77] = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  v3[78] = v4;
  v3[79] = *(_QWORD *)(v4 - 8);
  v3[80] = swift_task_alloc();
  v3[81] = swift_task_alloc();
  v3[82] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  v3[83] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[84] = v6;
  v3[85] = *(_QWORD *)(v6 + 64);
  v3[86] = swift_task_alloc();
  v7 = type metadata accessor for Logger();
  v3[87] = v7;
  v3[88] = *(_QWORD *)(v7 - 8);
  v3[89] = swift_task_alloc();
  v3[90] = swift_task_alloc();
  v3[91] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[92] = swift_task_alloc();
  v3[60] = a2;
  v3[61] = v2;
  return swift_task_switch();
}

uint64_t SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint32_t v28;
  os_log_type_t v29;
  NSObject *log;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint32_t size;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  NSObject *oslog;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  id v61;
  id v62;
  uint64_t v63;
  uint8_t *buf;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint32_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;

  v68 = *(_QWORD *)(v0 + 736);
  v1 = *(_QWORD *)(v0 + 728);
  v69 = *(_QWORD *)(v0 + 704);
  v70 = *(_QWORD *)(v0 + 696);
  v75 = *(_QWORD *)(v0 + 688);
  v73 = *(_QWORD *)(v0 + 672);
  v76 = *(_QWORD *)(v0 + 664);
  v72 = *(_QWORD *)(v0 + 592);
  *(_QWORD *)(v0 + 472) = v0;
  v2 = SignpostName.searchForAccountHandleIntent.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v68);
  v3 = Logger.payments.unsafeMutableAddressor();
  v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16);
  v71(v1, v3, v70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v75, v72, v76);
  v74 = (*(unsigned __int8 *)(v73 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
  v78 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v73 + 32))(v78 + v74, v75, v76);
  v84 = Logger.logObject.getter();
  v85 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 496) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v77 = *(_DWORD *)(v0 + 880);
  v80 = swift_allocObject();
  *(_BYTE *)(v80 + 16) = 32;
  v81 = swift_allocObject();
  *(_BYTE *)(v81 + 16) = 8;
  v79 = swift_allocObject();
  *(_QWORD *)(v79 + 16) = partial apply for implicit closure #1 in SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  *(_QWORD *)(v79 + 24) = v78;
  v82 = swift_allocObject();
  *(_QWORD *)(v82 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v82 + 24) = v79;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v83 = v4;
  swift_retain();
  *v83 = partial apply for closure #1 in OSLogArguments.append(_:);
  v83[1] = v80;
  swift_retain();
  v83[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v83[3] = v81;
  swift_retain();
  v83[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v83[5] = v82;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v84, v85))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v65 = createStorage<A>(capacity:type:)(0);
    v66 = createStorage<A>(capacity:type:)(1);
    v91 = buf;
    v92 = v65;
    v93 = v66;
    serialize(_:at:)(2, &v91);
    serialize(_:at:)(1, &v91);
    v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v95 = v80;
    closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v91, (uint64_t)&v92, (uint64_t)&v93);
    v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v95 = v81;
    closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v91, (uint64_t)&v92, (uint64_t)&v93);
    v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v95 = v82;
    closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v91, (uint64_t)&v92, (uint64_t)&v93);
    _os_log_impl(&dword_24701B000, v84, v85, "#SearchForAccountsHandleIntentStrategy makeIntentHandledResponse response: %s", buf, v77);
    destroyStorage<A>(_:count:)(v65, 0, v63);
    destroyStorage<A>(_:count:)(v66, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v58 = *(_QWORD *)(v67 + 728);
  v57 = *(_QWORD *)(v67 + 704);
  v59 = *(_QWORD *)(v67 + 696);

  v60 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
  v60(v58, v59);
  v61 = (id)IntentResolutionRecord.intentResponse.getter();
  v62 = objc_msgSend(v61, sel_code);
  *(_QWORD *)(v67 + 504) = v62;

  if (v62 == (id)3)
  {
    v55 = (id)IntentResolutionRecord.intentResponse.getter();
    v56 = objc_msgSend(v55, sel_accounts);
    if (v56)
    {
      type metadata accessor for INPaymentAccount();
      v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v54 = v53;
    }
    else
    {
      v54 = 0;
    }

    v52 = Optional<A>.emptyToNil.getter(v54);
    *(_QWORD *)(v67 + 744) = v52;
    if (v52)
    {
      v5 = *(_QWORD *)(v67 + 720);
      v41 = *(_QWORD *)(v67 + 696);
      *(_QWORD *)(v67 + 552) = v52;
      swift_bridgeObjectRelease();
      v6 = Logger.payments.unsafeMutableAddressor();
      v71(v5, v6, v41);
      swift_bridgeObjectRetain();
      v42 = swift_allocObject();
      *(_QWORD *)(v42 + 16) = v52;
      swift_retain();
      v44 = swift_allocObject();
      *(_QWORD *)(v44 + 16) = partial apply for implicit closure #1 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
      *(_QWORD *)(v44 + 24) = v42;
      swift_release();
      oslog = Logger.logObject.getter();
      v51 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v67 + 560) = 12;
      UnsignedInteger<>.init<A>(_:)();
      size = *(_DWORD *)(v67 + 888);
      v46 = swift_allocObject();
      *(_BYTE *)(v46 + 16) = 32;
      v47 = swift_allocObject();
      *(_BYTE *)(v47 + 16) = 8;
      v45 = swift_allocObject();
      *(_QWORD *)(v45 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_1;
      *(_QWORD *)(v45 + 24) = v44;
      v48 = swift_allocObject();
      *(_QWORD *)(v48 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v48 + 24) = v45;
      _allocateUninitializedArray<A>(_:)();
      v49 = v7;
      swift_retain();
      *v49 = partial apply for closure #1 in OSLogArguments.append(_:);
      v49[1] = v46;
      swift_retain();
      v49[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v49[3] = v47;
      swift_retain();
      v49[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v49[5] = v48;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(oslog, v51))
      {
        v38 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v39 = createStorage<A>(capacity:type:)(0);
        v40 = createStorage<A>(capacity:type:)(1);
        v86 = v38;
        v87 = v39;
        v88 = v40;
        serialize(_:at:)(2, &v86);
        serialize(_:at:)(1, &v86);
        v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v90 = v46;
        closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)&v86, (uint64_t)&v87, (uint64_t)&v88);
        v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v90 = v47;
        closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)&v86, (uint64_t)&v87, (uint64_t)&v88);
        v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v90 = v48;
        closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)&v86, (uint64_t)&v87, (uint64_t)&v88);
        _os_log_impl(&dword_24701B000, oslog, v51, "#SearchForAccountsHandleIntentStrategy intent contained accounts: %s", v38, size);
        destroyStorage<A>(_:count:)(v39, 0, v37);
        destroyStorage<A>(_:count:)(v40, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v38, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      v32 = *(_QWORD *)(v67 + 720);
      v33 = *(_QWORD *)(v67 + 696);
      v34 = *(_QWORD *)(v67 + 600);

      v60(v32, v33);
      swift_retain();
      *(_QWORD *)(v67 + 752) = *(_QWORD *)(v34 + 16);
      swift_retain();
      swift_release();
      IntentResolutionRecord.app.getter();
      v35 = App.sirikitApp.getter();
      *(_QWORD *)(v67 + 760) = v35;
      swift_release();
      *(_QWORD *)(v67 + 768) = type metadata accessor for INPaymentAccount();
      *(double *)&v36 = (double)MEMORY[0x2495723C8](v52);
      v8 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v67 + 776) = v8;
      *v8 = *(_QWORD *)(v67 + 472);
      v8[1] = SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
      return SearchForAccountsCATs.intentHandledResponse(app:bankAccounts:)(*(_QWORD *)(v67 + 656), v35, v36, 0);
    }
    else
    {
      v10 = *(_QWORD *)(v67 + 712);
      v27 = *(_QWORD *)(v67 + 696);
      swift_bridgeObjectRelease();
      v11 = Logger.payments.unsafeMutableAddressor();
      v71(v10, v11, v27);
      log = Logger.logObject.getter();
      v29 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v67 + 512) = 2;
      UnsignedInteger<>.init<A>(_:)();
      v28 = *(_DWORD *)(v67 + 884);
      v31 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(log, v29))
      {
        v23 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v24 = createStorage<A>(capacity:type:)(0);
        v25 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v67 + 520) = v23;
        *(_QWORD *)(v67 + 528) = v24;
        *(_QWORD *)(v67 + 536) = v25;
        serialize(_:at:)(0, (_BYTE **)(v67 + 520));
        serialize(_:at:)(0, (_BYTE **)(v67 + 520));
        *(_QWORD *)(v67 + 544) = v31;
        v26 = (_QWORD *)swift_task_alloc();
        v26[2] = v67 + 520;
        v26[3] = v67 + 528;
        v26[4] = v67 + 536;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_24701B000, log, v29, "#SearchForAccountsHandleIntentStrategy could not find accounts in the intent", v23, v28);
        destroyStorage<A>(_:count:)(v24, 0, v22);
        destroyStorage<A>(_:count:)(v25, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v23, MEMORY[0x24BEE4260]);
      }
      swift_bridgeObjectRelease();
      v18 = *(_QWORD *)(v67 + 712);
      v19 = *(_QWORD *)(v67 + 696);
      v20 = *(_QWORD *)(v67 + 600);

      v60(v18, v19);
      swift_retain();
      *(_QWORD *)(v67 + 832) = *(_QWORD *)(v20 + 16);
      swift_retain();
      swift_release();
      IntentResolutionRecord.app.getter();
      v21 = App.sirikitApp.getter();
      *(_QWORD *)(v67 + 840) = v21;
      swift_release();
      v12 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v67 + 848) = v12;
      *v12 = *(_QWORD *)(v67 + 472);
      v12[1] = SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
      return SearchForAccountsCATs.noResultsResponse(app:)(*(_QWORD *)(v67 + 648), v21);
    }
  }
  else
  {
    v14 = *(_QWORD *)(v67 + 600);
    swift_retain();
    outlined init with copy of GlobalsProviding(v14 + 144, v67 + 16);
    swift_release();
    v15 = *(_QWORD *)(v67 + 40);
    v16 = *(_QWORD *)(v67 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v67 + 16), v15);
    v17 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 + 48) + **(int **)(v16 + 48));
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v67 + 864) = v13;
    *v13 = *(_QWORD *)(v67 + 472);
    v13[1] = SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    return v17(*(_QWORD *)(v67 + 608), *(_QWORD *)(v67 + 592), v15, v16);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 472) = *v1;
  *(_QWORD *)(v2 + 784) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v10 = v0[93];
  v1 = v0[75];
  v0[59] = v0;
  outlined init with copy of GlobalsProviding(v1 + 184, (uint64_t)(v0 + 37));
  v7 = v0[40];
  v8 = v0[41];
  __swift_project_boxed_opaque_existential_1(v0 + 37, v7);
  v5 = IntentResolutionRecord.app.getter();
  v0[99] = v5;
  v6 = IntentResolutionRecord.intent.getter();
  v0[100] = v6;
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8) + **(int **)(v8 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 808) = v2;
  *v2 = *(_QWORD *)(v4 + 472);
  v2[1] = SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  return v9(v10, v5, v6, v7, v8);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  id v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0[102];
  v14 = v0[92];
  v12 = v0[82];
  v11 = v0[79];
  v13 = v0[78];
  v10 = v0[77];
  v6 = v0[75];
  v9 = (uint64_t *)v0[73];
  v0[59] = v0;
  v0[71] = v1;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 37));
  swift_retain();
  outlined init with copy of GlobalsProviding(v6 + 104, (uint64_t)(v0 + 42));
  swift_release();
  v5 = v0[45];
  v4 = v0[46];
  __swift_project_boxed_opaque_existential_1(v0 + 42, v5);
  (*(void (**)(uint64_t))(v4 + 16))(v5);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  Array.subscript.getter();
  v8 = (id)v0[72];
  swift_retain();
  v7 = BaseStrategy.ttsEnabled.getter();
  swift_release();
  static PaymentsContextProvider.handleSearchForAccounts(account:needsSDA:)(v8, v7 & 1, v10);

  v2 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v10, 0, 1);
  v0[52] = 0;
  v0[53] = 0;
  v0[54] = 0;
  v0[55] = 0;
  v0[56] = 0;
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v9[3] = type metadata accessor for AceOutput();
  v9[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v9);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 52));
  outlined destroy of NLContextUpdate?(v10);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 47));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 42));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[59] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 472) = *v1;
  *(_QWORD *)(v2 + 856) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = v0[92];
  v9 = v0[81];
  v8 = v0[79];
  v10 = v0[78];
  v7 = v0[77];
  v5 = v0[75];
  v6 = (uint64_t *)v0[73];
  v0[59] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, (uint64_t)(v0 + 22));
  swift_release();
  v4 = v0[25];
  v3 = v0[26];
  __swift_project_boxed_opaque_existential_1(v0 + 22, v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v7, 1);
  v0[32] = 0;
  v0[33] = 0;
  v0[34] = 0;
  v0[35] = 0;
  v0[36] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v6[3] = type metadata accessor for AceOutput();
  v6[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v6);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 32));
  outlined destroy of NLContextUpdate?(v7);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 22));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[59] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 472) = *v1;
  *(_QWORD *)(v2 + 872) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v1 = v0[79];
  v2 = v0[78];
  v3 = v0[76];
  v0[59] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v13 = v23[92];
    outlined destroy of TemplatingResult?(v23[76]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 2));
    v23[57] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v23[58] = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    type metadata accessor for INSearchForAccountsIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v12 = String.init(stringInterpolation:)();
    v11 = v9;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v10 = v12;
    *(_QWORD *)(v10 + 8) = v11;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 16;
    swift_willThrow();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v13);
  }
  else
  {
    v22 = v23[92];
    v20 = v23[80];
    v19 = v23[79];
    v21 = v23[78];
    v18 = v23[77];
    v16 = v23[75];
    v17 = (uint64_t *)v23[73];
    (*(void (**)(void))(v19 + 32))();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 2));
    swift_retain();
    outlined init with copy of GlobalsProviding(v16 + 104, (uint64_t)(v23 + 7));
    swift_release();
    v15 = v23[10];
    v14 = v23[11];
    __swift_project_boxed_opaque_existential_1(v23 + 7, v15);
    (*(void (**)(uint64_t))(v14 + 16))(v15);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v18, 1);
    v23[17] = 0;
    v23[18] = 0;
    v23[19] = 0;
    v23[20] = 0;
    v23[21] = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v17[3] = type metadata accessor for AceOutput();
    v17[4] = MEMORY[0x24BE99088];
    __swift_allocate_boxed_opaque_existential_1(v17);
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v23 + 17));
    outlined destroy of NLContextUpdate?(v18);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 12));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 7));
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v22);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v23[59] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 736);
  *(_QWORD *)(v0 + 472) = v0;
  swift_release();
  swift_release();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 472) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 736);
  *(_QWORD *)(v0 + 472) = v0;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 472) + 8))();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (void *)v0[100];
  v6 = v0[92];
  v4 = v0[82];
  v3 = v0[79];
  v5 = v0[78];
  v0[59] = v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 37));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[59] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 736);
  *(_QWORD *)(v0 + 472) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 472) + 8))();
}

uint64_t SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;

  v3 = (_QWORD *)*v2;
  v5 = *v2 + 16;
  v3[59] = *v2;
  v3[102] = a1;
  v3[103] = v1;
  swift_task_dealloc();
  if (!v1)
  {

    swift_release();
  }
  return swift_task_switch();
}

uint64_t implicit closure #1 in SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  IntentResolutionRecord.intentResponse.getter();
  type metadata accessor for INSearchForAccountsIntentResponse();
  lazy protocol witness table accessor for type INSearchForAccountsIntentResponse and conformance NSObject();
  return String.init<A>(describing:)();
}

uint64_t SearchForAccountsHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[8] = v2;
  v3[7] = a2;
  v3[6] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  v3[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[10] = v5;
  v3[11] = *(_QWORD *)(v5 + 64);
  v3[12] = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  v3[13] = v6;
  v3[14] = *(_QWORD *)(v6 - 8);
  v3[15] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t SearchForAccountsHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint32_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 104);
  v19 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 80);
  v20 = *(_QWORD *)(v0 + 72);
  v16 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 16) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v1, v2, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v19, v16, v20);
  v18 = (*(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v22 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 32))(v22 + v18, v19, v20);
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 40) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v21 = *(_DWORD *)(v0 + 136);
  v24 = swift_allocObject();
  *(_BYTE *)(v24 + 16) = 64;
  v25 = swift_allocObject();
  *(_BYTE *)(v25 + 16) = 8;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = partial apply for implicit closure #1 in SearchForAccountsHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:);
  *(_QWORD *)(v23 + 24) = v22;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v26 + 24) = v23;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v27 = v3;
  swift_retain();
  *v27 = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[1] = v24;
  swift_retain();
  v27[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[3] = v25;
  swift_retain();
  v27[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[5] = v26;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v28, v29))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v11 = createStorage<A>(capacity:type:)(1);
    v12 = createStorage<A>(capacity:type:)(0);
    v30 = buf;
    v31 = v11;
    v32 = v12;
    serialize(_:at:)(2, &v30);
    serialize(_:at:)(1, &v30);
    v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v34 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v34 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v34 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    _os_log_impl(&dword_24701B000, v28, v29, "#SearchForAccountsHandleIntentStrategy makeFailureHandlingIntentResponse response: %@", buf, v21);
    destroyStorage<A>(_:count:)(v11, 1, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v7 = v13[15];
  v6 = v13[14];
  v8 = v13[13];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  v4 = (_QWORD *)swift_task_alloc();
  v13[16] = v4;
  *v4 = v13[2];
  v4[1] = SearchForAccountsHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:);
  return SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(v13[6], v13[7]);
}

_QWORD *SearchForAccountsHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t implicit closure #1 in SearchForAccountsHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  return IntentResolutionRecord.intentResponse.getter();
}

uint64_t SearchForAccountsHandleIntentStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)()
{
  swift_allocObject();
  return SearchForAccountsHandleIntentStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)();
}

uint64_t SearchForAccountsHandleIntentStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)()
{
  uint64_t result;
  uint64_t v1;

  if (!"SiriPaymentsIntents.SearchForAccountsHandleIntentStrategy")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriPaymentsIntents.SearchForAccountsHandleIntentStrategy", 57, (unint64_t)"init(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)", 75, 2, (unint64_t)"SiriPaymentsIntents/SearchForAccountsHandleIntentStrategy.swift", 63, 2, v1, 0x10uLL, 7uLL);
  __break(1u);
  return result;
}

uint64_t SearchForAccountsHandleIntentStrategy.__ivar_destroyer()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0(v0 + 184);
}

uint64_t SearchForAccountsHandleIntentStrategy.deinit()
{
  uint64_t v1;

  v1 = BaseStrategy.deinit();
  __swift_destroy_boxed_opaque_existential_0(v1 + 184);
  return v1;
}

uint64_t SearchForAccountsHandleIntentStrategy.__deallocating_deinit()
{
  SearchForAccountsHandleIntentStrategy.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_2471793F0()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  return swift_deallocObject();
}

uint64_t sub_247179434()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(uint64_t (*a1)(uint64_t *, uint64_t), uint64_t a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;

  if (a3 < 0x80uLL)
  {
    if (a3 > 0xFF)
      goto LABEL_12;
    v5 = (a3 + 1);
  }
  else
  {
    v7 = (a3 & 0x3F) << 8;
    if (a3 >> 6 < 0x20uLL)
    {
      v5 = (v7 | (a3 >> 6)) + 33217;
    }
    else
    {
      v6 = (v7 | (a3 >> 6) & 0x3F) << 8;
      if (a3 >> 12 < 0x10uLL)
        v5 = (v6 | (a3 >> 12)) + 8487393;
      else
        v5 = ((a3 >> 18) | ((v6 | (a3 >> 12) & 0x3F) << 8)) - 2122219023;
    }
  }
  v4 = 4 - ((uint64_t)__clz(v5) >> 3);
  v8 = (v5 - 0x101010101010101) & ((1 << ((8 * v4) & 0x3F)) - 1);
  if (v4 >= 0)
    return a1(&v8, v4);
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_12:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, unint64_t a10, unint64_t a11)
{
  unsigned int v11;
  uint64_t result;
  char v13[8];
  uint64_t v14;
  uint64_t (*v15)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>);
  char *v16;
  uint64_t v17[2];
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  v20 = a9;
  v21 = a1;
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a6;
  v26 = a7;
  v27 = a8;
  v28 = a10;
  v29 = a11;
  v30 = "Fatal error";
  v31 = "Unexpectedly found nil while unwrapping an Optional value";
  v32 = "Swift/StaticString.swift";
  v33 = "Not enough bits to represent the passed value";
  v34 = "Swift/Integers.swift";
  v35 = "UnsafeBufferPointer with negative count";
  v36 = "Swift/UnsafeBufferPointer.swift";
  v37 = 0;
  v39 = a6;
  v40 = a7;
  v41 = a8;
  v42 = a1;
  v43 = a2;
  v44 = a10;
  v45 = a11;
  if ((a5 & 1) != 0)
  {
    if (v23 <= 0xFFFFFFFF)
    {
      v19 = v23;
      if ((v23 < 0xD800 || v19 > 0xDFFF) && v19 <= 0x10FFFF)
      {
        v18 = v17;
        MEMORY[0x24BDAC7A8](v17);
        v15 = partial apply for closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:);
        v16 = &v38;
        specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)((uint64_t (*)(uint64_t *, uint64_t))partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:), (uint64_t)v13, v11);
        return (uint64_t)v18;
      }
      v13[0] = 2;
      v14 = 148;
      LODWORD(v15) = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    v13[0] = 2;
    v14 = 3455;
    LODWORD(v15) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v23)
    v46 = v23;
  else
    v46 = 0;
  v17[0] = v46;
  if (!v46)
  {
    v13[0] = 2;
    v14 = 136;
    LODWORD(v15) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v24 >= 0)
    return closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(v17[0], v24, v25, v26, v27, v21, v22, v28, v20, v29);
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10)
{
  unsigned int v10;
  uint64_t result;
  char v12[8];
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v20 = a9;
  v21 = a1;
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a6;
  v26 = a7;
  v27 = a8;
  v28 = a10;
  v29 = "Fatal error";
  v30 = "Unexpectedly found nil while unwrapping an Optional value";
  v31 = "Swift/StaticString.swift";
  v32 = "Not enough bits to represent the passed value";
  v33 = "Swift/Integers.swift";
  v34 = "UnsafeBufferPointer with negative count";
  v35 = "Swift/UnsafeBufferPointer.swift";
  v36 = 0;
  v38 = a6;
  v39 = a7;
  v40 = a1;
  v41 = a2;
  v42 = a8;
  v43 = a10;
  if ((a5 & 1) != 0)
  {
    if (v23 <= 0xFFFFFFFF)
    {
      v19 = v23;
      if ((v23 < 0xD800 || v19 > 0xDFFF) && v19 <= 0x10FFFF)
      {
        v18 = &v16;
        MEMORY[0x24BDAC7A8](&v16);
        v14 = partial apply for closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:);
        v15 = &v37;
        specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)((uint64_t (*)(uint64_t *, uint64_t))partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:), (uint64_t)v12, v10);
        return (uint64_t)v18;
      }
      v12[0] = 2;
      v13 = 148;
      LODWORD(v14) = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    v12[0] = 2;
    v13 = 3455;
    LODWORD(v14) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v23)
    v44 = v23;
  else
    v44 = 0;
  v17 = v44;
  if (!v44)
  {
    v12[0] = 2;
    v13 = 136;
    LODWORD(v14) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v24 >= 0)
    return closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(v17, v24, v25, v26, v21, v22, v27, v28);
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  uint64_t result;

  if (!a3)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (a4 >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (a4 <= 0x7FFFFFFF)
    {
      if (!a5)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      if (a6 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (a6 <= 0x7FFFFFFF)
        {
          if (!a1)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          if (a2 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (a2 <= 0x7FFFFFFF)
            {
              if (a7 <= 0xFFFFFFFF)
              {
                if (a8 <= 0xFFFFFFFF)
                  return _swift_stdlib_reportUnimplementedInitializerInFile();
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
            }
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_24717A484()
{
  return swift_deallocObject();
}

uint64_t sub_24717A4AC()
{
  return swift_deallocObject();
}

uint64_t sub_24717A4D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24717A510()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24717A54C()
{
  return swift_deallocObject();
}

uint64_t sub_24717A574()
{
  return swift_deallocObject();
}

uint64_t sub_24717A59C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24717A5D8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24717A614()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  return implicit closure #1 in SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)();
}

uint64_t sub_24717A6BC()
{
  return swift_deallocObject();
}

uint64_t sub_24717A6E4()
{
  return swift_deallocObject();
}

uint64_t sub_24717A70C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24717A748()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24717A784()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24717A7C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24717A7FC()
{
  return swift_deallocObject();
}

uint64_t sub_24717A824()
{
  return swift_deallocObject();
}

uint64_t sub_24717A84C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24717A888()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24717A8C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SearchForAccountsHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  return implicit closure #1 in SearchForAccountsHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)();
}

uint64_t sub_24717A96C()
{
  return swift_deallocObject();
}

uint64_t sub_24717A994()
{
  return swift_deallocObject();
}

uint64_t sub_24717A9BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24717A9F8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for SearchForAccountsHandleIntentStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SearchForAccountsHandleIntentStrategy;
  if (!type metadata singleton initialization cache for SearchForAccountsHandleIntentStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for SearchForAccountsHandleIntentStrategy()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t partial apply for closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_BYTE *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), a3, *(_QWORD *)(v3 + 64));
}

uint64_t partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 624) = v2;
  *(_QWORD *)(v3 + 616) = a2;
  *(_QWORD *)(v3 + 608) = a1;
  *(_QWORD *)(v3 + 488) = v3;
  *(_QWORD *)(v3 + 496) = 0;
  *(_QWORD *)(v3 + 504) = 0;
  *(_BYTE *)(v3 + 880) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 472) = 0;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 560) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);
  *(_QWORD *)(v3 + 632) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 640) = v5;
  *(_QWORD *)(v3 + 648) = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v3 + 656) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v3 + 664) = swift_task_alloc();
  *(_QWORD *)(v3 + 672) = swift_task_alloc();
  *(_QWORD *)(v3 + 680) = swift_task_alloc();
  type metadata accessor for Locale();
  *(_QWORD *)(v3 + 688) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(_QWORD *)(v3 + 696) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  *(_QWORD *)(v3 + 704) = swift_task_alloc();
  v6 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v3 + 712) = v6;
  *(_QWORD *)(v3 + 720) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 728) = swift_task_alloc();
  *(_QWORD *)(v3 + 736) = swift_task_alloc();
  v7 = type metadata accessor for ParameterIdentifier();
  *(_QWORD *)(v3 + 744) = v7;
  *(_QWORD *)(v3 + 752) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 760) = swift_task_alloc();
  v8 = type metadata accessor for Logger();
  *(_QWORD *)(v3 + 768) = v8;
  *(_QWORD *)(v3 + 776) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 784) = swift_task_alloc();
  *(_QWORD *)(v3 + 792) = swift_task_alloc();
  *(_QWORD *)(v3 + 496) = a2;
  *(_QWORD *)(v3 + 504) = v2;
  return swift_task_switch();
}

uint64_t RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  SiriPaymentsIntents::RequestPaymentSlots_optional v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *buf;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32_t size;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  NSObject *oslog;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  Swift::String rawValue;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint32_t v59;
  os_log_type_t v60;
  NSObject *v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;

  v1 = *(_QWORD *)(v0 + 792);
  v56 = *(_QWORD *)(v0 + 776);
  v57 = *(_QWORD *)(v0 + 768);
  *(_QWORD *)(v0 + 488) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16);
  v58(v1, v2, v57);
  v61 = Logger.logObject.getter();
  v60 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 512) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v59 = *(_DWORD *)(v0 + 884);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v62 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v61, v60))
  {
    v51 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v52 = createStorage<A>(capacity:type:)(0);
    v53 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v55 + 576) = v51;
    *(_QWORD *)(v55 + 584) = v52;
    *(_QWORD *)(v55 + 592) = v53;
    serialize(_:at:)(0, (_BYTE **)(v55 + 576));
    serialize(_:at:)(0, (_BYTE **)(v55 + 576));
    *(_QWORD *)(v55 + 600) = v62;
    v54 = (_QWORD *)swift_task_alloc();
    v54[2] = v55 + 576;
    v54[3] = v55 + 584;
    v54[4] = v55 + 592;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v61, v60, "RequestPaymentUnsupportedValueStrategy makeUnsupportedValueOutput", v51, v59);
    destroyStorage<A>(_:count:)(v52, 0, v50);
    destroyStorage<A>(_:count:)(v53, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v51, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v42 = *(_QWORD *)(v55 + 792);
  v41 = *(_QWORD *)(v55 + 776);
  v43 = *(_QWORD *)(v55 + 768);
  v46 = *(_QWORD *)(v55 + 760);
  v45 = *(_QWORD *)(v55 + 752);
  v47 = *(_QWORD *)(v55 + 744);

  v44 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
  v44(v42, v43);
  ParameterResolutionRecord.parameter.getter();
  rawValue._countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  v48 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
  v48(v46, v47);
  v4.value = RequestPaymentSlots.init(rawValue:)(rawValue).value;
  *(SiriPaymentsIntents::RequestPaymentSlots_optional *)(v55 + 881) = v4;
  if (v4.value == SiriPaymentsIntents_RequestPaymentSlots_unknownDefault)
  {
    v7 = *(_QWORD *)(v55 + 784);
    v22 = *(_QWORD *)(v55 + 768);
    v26 = *(_QWORD *)(v55 + 656);
    v25 = *(_QWORD *)(v55 + 640);
    v27 = *(_QWORD *)(v55 + 632);
    v23 = *(_QWORD *)(v55 + 616);
    v8 = Logger.payments.unsafeMutableAddressor();
    v58(v7, v8, v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v26, v23, v27);
    v24 = (*(unsigned __int8 *)(v25 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    v29 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v25 + 32))(v29 + v24, v26, v27);
    oslog = Logger.logObject.getter();
    v36 = static os_log_type_t.error.getter();
    *(_QWORD *)(v55 + 520) = 12;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v55 + 888);
    v31 = swift_allocObject();
    *(_BYTE *)(v31 + 16) = 32;
    v32 = swift_allocObject();
    *(_BYTE *)(v32 + 16) = 8;
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 16) = partial apply for implicit closure #1 in RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    *(_QWORD *)(v30 + 24) = v29;
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v33 + 24) = v30;
    _allocateUninitializedArray<A>(_:)();
    v34 = v9;
    swift_retain();
    *v34 = partial apply for closure #1 in OSLogArguments.append(_:);
    v34[1] = v31;
    swift_retain();
    v34[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v34[3] = v32;
    swift_retain();
    v34[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v34[5] = v33;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v36))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v20 = createStorage<A>(capacity:type:)(0);
      v21 = createStorage<A>(capacity:type:)(1);
      v63 = buf;
      v64 = v20;
      v65 = v21;
      serialize(_:at:)(2, &v63);
      serialize(_:at:)(1, &v63);
      v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v67 = v31;
      closure #1 in osLogInternal(_:log:type:)(&v66, (uint64_t)&v63, (uint64_t)&v64, (uint64_t)&v65);
      v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v67 = v32;
      closure #1 in osLogInternal(_:log:type:)(&v66, (uint64_t)&v63, (uint64_t)&v64, (uint64_t)&v65);
      v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v67 = v33;
      closure #1 in osLogInternal(_:log:type:)(&v66, (uint64_t)&v63, (uint64_t)&v64, (uint64_t)&v65);
      _os_log_impl(&dword_24701B000, oslog, v36, "#RequestPaymentUnsupportedValueStrategy unknown parameter: %s", buf, size);
      destroyStorage<A>(_:count:)(v20, 0, v18);
      destroyStorage<A>(_:count:)(v21, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v12 = *(_QWORD *)(v55 + 784);
    v13 = *(_QWORD *)(v55 + 768);
    v14 = *(_QWORD *)(v55 + 760);
    v15 = *(_QWORD *)(v55 + 744);

    v44(v12, v13);
    ParameterResolutionRecord.parameter.getter();
    v17 = ParameterIdentifier.name.getter();
    v16 = v10;
    v48(v14, v15);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v11 = v17;
    *(_QWORD *)(v11 + 8) = v16;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 40) = 0;
    *(_BYTE *)(v11 + 48) = 14;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v55 + 488) + 8))();
  }
  else
  {
    v37 = *(_QWORD *)(v55 + 624);
    *(SiriPaymentsIntents::RequestPaymentSlots_optional *)(v55 + 880) = v4;
    swift_retain();
    outlined init with copy of GlobalsProviding(v37 + 144, v55 + 16);
    swift_release();
    v38 = *(_QWORD *)(v55 + 40);
    v39 = *(_QWORD *)(v55 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v55 + 16), v38);
    v40 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 + 56) + **(int **)(v39 + 56));
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v55 + 800) = v5;
    *v5 = *(_QWORD *)(v55 + 488);
    v5[1] = RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    return v40(*(_QWORD *)(v55 + 704), *(_QWORD *)(v55 + 616), v38, v39);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 488) = *v1;
  *(_QWORD *)(v2 + 808) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = v0[90];
  v2 = v0[89];
  v3 = v0[88];
  v0[61] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    outlined destroy of TemplatingResult?(*(_QWORD *)(v46 + 704));
    __swift_destroy_boxed_opaque_existential_0(v46 + 16);
    ParameterResolutionRecord.app.getter();
    v35 = App.sirikitApp.getter();
    *(_QWORD *)(v46 + 816) = v35;
    *(_QWORD *)(v46 + 528) = v35;
    swift_release();
    v36 = (id)ParameterResolutionRecord.intent.getter();
    *(_QWORD *)(v46 + 824) = v36;
    *(_QWORD *)(v46 + 536) = v36;
    v37 = objc_msgSend(v36, sel_note);
    if (v37)
    {
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v32 = v6;

      v33 = v31;
      v34 = v32;
    }
    else
    {
      v33 = 0;
      v34 = 0;
    }
    *(_QWORD *)(v46 + 832) = v34;
    *(_QWORD *)(v46 + 472) = v33;
    *(_QWORD *)(v46 + 480) = v34;
    type metadata accessor for PaymentsDialogConcept.Builder();
    v29 = PaymentsDialogConcept.Builder.__allocating_init()();
    *(_QWORD *)(v46 + 840) = v29;
    *(_QWORD *)(v46 + 544) = v29;
    v30 = objc_msgSend(v36, sel_payer);
    if (v30)
    {
      v24 = *(_QWORD *)(v46 + 624);
      *(_QWORD *)(v46 + 568) = v30;
      type metadata accessor for DialogPerson();
      v7 = v30;
      swift_retain();
      outlined init with copy of GlobalsProviding(v24 + 104, v46 + 176);
      swift_release();
      v26 = *(_QWORD *)(v46 + 200);
      v25 = *(_QWORD *)(v46 + 208);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v46 + 176), v26);
      (*(void (**)(uint64_t))(v25 + 16))(v26);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v46 + 216), *(_QWORD *)(v46 + 240));
      dispatch thunk of DeviceState.siriLocale.getter();
      v28 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
      __swift_destroy_boxed_opaque_existential_0(v46 + 216);
      __swift_destroy_boxed_opaque_existential_0(v46 + 176);
      swift_retain();
      v27 = (uint64_t *)(v29 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payerName);
      swift_beginAccess();
      *v27 = v28;
      swift_release();
      swift_endAccess();
      swift_release();

    }
    v23 = objc_msgSend(v36, sel_currencyAmount);
    if (v23)
    {
      *(_QWORD *)(v46 + 560) = v23;
      type metadata accessor for DialogCurrency.Builder();
      DialogCurrency.Builder.__allocating_init()();
      v22 = objc_msgSend(v23, sel_amount);
      if (v22)
      {
        objc_msgSend(v22, sel_doubleValue);

      }
      dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
      swift_release();
      v21 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
      swift_release();
      swift_retain();
      swift_beginAccess();
      *(_QWORD *)(v29 + 16) = v21;
      swift_release();
      swift_endAccess();
      swift_release();

    }
    swift_bridgeObjectRetain();
    if (v34)
    {
      v20 = *(_QWORD *)(v46 + 680);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v8 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v20, 0, 1);
    }
    else
    {
      v12 = *(_QWORD *)(v46 + 680);
      v11 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v12, 1);
    }
    v17 = *(_BYTE *)(v46 + 881);
    v15 = *(const void **)(v46 + 680);
    v13 = *(void **)(v46 + 672);
    v18 = *(_QWORD *)(v46 + 664);
    v16 = *(_QWORD *)(v46 + 624);
    outlined init with copy of SpeakableString?(v15, v13);
    v14 = (void *)(v29 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo);
    swift_beginAccess();
    outlined assign with take of SpeakableString?(v13, v14);
    swift_endAccess();
    outlined destroy of SpeakableString?((uint64_t)v15);
    swift_retain();
    swift_retain();
    swift_beginAccess();
    *(_QWORD *)(v29 + 24) = v35;
    swift_release();
    swift_endAccess();
    swift_release();
    v19 = PaymentsDialogConcept.Builder.build()();
    *(_QWORD *)(v46 + 848) = v19;
    *(_QWORD *)(v46 + 552) = v19;
    swift_retain();
    *(_QWORD *)(v46 + 856) = *(_QWORD *)(v16 + 16);
    swift_retain();
    swift_release();
    RequestPaymentSlots.rawValue.getter(v17);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v9 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v18, 0, 1);
    swift_retain();
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v46 + 864) = v10;
    *v10 = *(_QWORD *)(v46 + 488);
    v10[1] = SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    return RequestPaymentCATs.unsupportedSlotValue(slot:paymentsConcept:)(*(_QWORD *)(v46 + 728), *(_QWORD *)(v46 + 664), v19);
  }
  else
  {
    v44 = *(_QWORD *)(v46 + 736);
    v43 = *(_QWORD *)(v46 + 720);
    v45 = *(_QWORD *)(v46 + 712);
    v42 = *(_QWORD *)(v46 + 696);
    v40 = *(_QWORD *)(v46 + 624);
    v41 = *(uint64_t **)(v46 + 608);
    (*(void (**)(void))(v43 + 32))();
    __swift_destroy_boxed_opaque_existential_0(v46 + 16);
    swift_retain();
    outlined init with copy of GlobalsProviding(v40 + 104, v46 + 256);
    swift_release();
    v39 = *(_QWORD *)(v46 + 280);
    v38 = *(_QWORD *)(v46 + 288);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v46 + 256), v39);
    (*(void (**)(uint64_t))(v38 + 16))(v39);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v42, 1);
    *(_QWORD *)(v46 + 336) = 0;
    *(_QWORD *)(v46 + 344) = 0;
    *(_QWORD *)(v46 + 352) = 0;
    *(_QWORD *)(v46 + 360) = 0;
    *(_QWORD *)(v46 + 368) = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v41[3] = type metadata accessor for AceOutput();
    v41[4] = MEMORY[0x24BE99088];
    __swift_allocate_boxed_opaque_existential_1(v41);
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?(v46 + 336);
    outlined destroy of NLContextUpdate?(v42);
    __swift_destroy_boxed_opaque_existential_0(v46 + 296);
    __swift_destroy_boxed_opaque_existential_0(v46 + 256);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v45);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v46 + 488) + 8))();
  }
}

uint64_t implicit closure #1 in RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v0;
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for ParameterIdentifier();
  v3 = *(_QWORD *)(v5 - 8);
  v2 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v4 = (char *)&v2 - v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);
  ParameterResolutionRecord.parameter.getter();
  v6 = ParameterIdentifier.name.getter();
  v7 = v0;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v4, v5);
  return v6;
}

uint64_t RequestPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 152) = a1;
  *(_QWORD *)(v2 + 112) = v2;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_BYTE *)(v2 + 240) = 0;
  v3 = type metadata accessor for ParameterIdentifier();
  *(_QWORD *)(v2 + 160) = v3;
  *(_QWORD *)(v2 + 168) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 176) = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);
  *(_QWORD *)(v2 + 184) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 192) = v5;
  *(_QWORD *)(v2 + 200) = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v2 + 208) = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  *(_QWORD *)(v2 + 216) = v6;
  *(_QWORD *)(v2 + 224) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v2 + 232) = swift_task_alloc();
  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = v1;
  return swift_task_switch();
}

uint64_t RequestPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  SiriPaymentsIntents::RequestPaymentSlots_optional v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  Swift::String rawValue;
  SiriPaymentsIntents::RequestPaymentSlots value;
  uint64_t v49;
  uint8_t *buf;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  int v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(unint64_t, uint64_t, uint64_t);
  uint32_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;

  v54 = *(_QWORD *)(v0 + 232);
  v57 = *(_QWORD *)(v0 + 224);
  v58 = *(_QWORD *)(v0 + 216);
  v63 = *(_QWORD *)(v0 + 208);
  v59 = *(_QWORD *)(v0 + 192);
  v64 = *(_QWORD *)(v0 + 184);
  v60 = *(_QWORD *)(v0 + 152);
  *(_QWORD *)(v0 + 112) = v0;
  v55 = (id)ParameterResolutionRecord.intent.getter();
  type metadata accessor for INRequestPaymentIntent();
  v56 = (id)SiriKitPaymentsIntent.clone()();

  *(_QWORD *)(v0 + 136) = v56;
  v1 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v54, v1, v58);
  v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16);
  v61(v63, v60, v64);
  v62 = *(_DWORD *)(v59 + 80);
  v67 = swift_allocObject();
  v65 = *(void (**)(unint64_t, uint64_t, uint64_t))(v59 + 32);
  v65(v67 + ((v62 + 16) & ~(unint64_t)v62), v63, v64);
  v61(v63, v60, v64);
  v69 = swift_allocObject();
  v65(v69 + ((v62 + 16) & ~(unint64_t)v62), v63, v64);
  v78 = Logger.logObject.getter();
  v79 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 144) = 22;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v66 = *(_DWORD *)(v0 + 244);
  v71 = swift_allocObject();
  *(_BYTE *)(v71 + 16) = 32;
  v72 = swift_allocObject();
  *(_BYTE *)(v72 + 16) = 8;
  v68 = swift_allocObject();
  *(_QWORD *)(v68 + 16) = partial apply for implicit closure #1 in RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  *(_QWORD *)(v68 + 24) = v67;
  v73 = swift_allocObject();
  *(_QWORD *)(v73 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v73 + 24) = v68;
  v74 = swift_allocObject();
  *(_BYTE *)(v74 + 16) = 32;
  v75 = swift_allocObject();
  *(_BYTE *)(v75 + 16) = 8;
  v70 = swift_allocObject();
  *(_QWORD *)(v70 + 16) = partial apply for implicit closure #2 in RequestPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:);
  *(_QWORD *)(v70 + 24) = v69;
  v76 = swift_allocObject();
  *(_QWORD *)(v76 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v76 + 24) = v70;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v77 = v2;
  swift_retain();
  *v77 = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[1] = v71;
  swift_retain();
  v77[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[3] = v72;
  swift_retain();
  v77[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[5] = v73;
  swift_retain();
  v77[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[7] = v74;
  swift_retain();
  v77[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[9] = v75;
  swift_retain();
  v77[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[11] = v76;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v78, v79))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v51 = createStorage<A>(capacity:type:)(0);
    v52 = createStorage<A>(capacity:type:)(2);
    v80 = buf;
    v81 = v51;
    v82 = v52;
    serialize(_:at:)(2, &v80);
    serialize(_:at:)(2, &v80);
    v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v84 = v71;
    closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
    v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v84 = v72;
    closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
    v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v84 = v73;
    closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
    v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v84 = v74;
    closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
    v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v84 = v75;
    closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
    v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v84 = v76;
    closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
    _os_log_impl(&dword_24701B000, v78, v79, "#RequestPaymentUnsupportedValueStrategy updating intent for slot '%s' with index '%s'", buf, v66);
    destroyStorage<A>(_:count:)(v51, 0, v49);
    destroyStorage<A>(_:count:)(v52, 2, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v41 = *(_QWORD *)(v53 + 232);
  v40 = *(_QWORD *)(v53 + 224);
  v42 = *(_QWORD *)(v53 + 216);
  v44 = *(_QWORD *)(v53 + 176);
  v43 = *(_QWORD *)(v53 + 168);
  v45 = *(_QWORD *)(v53 + 160);

  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v42);
  ParameterResolutionRecord.parameter.getter();
  rawValue._countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  v46 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
  v46(v44, v45);
  v4.value = RequestPaymentSlots.init(rawValue:)(rawValue).value;
  value = v4.value;
  if (v4.value == SiriPaymentsIntents_RequestPaymentSlots_unknownDefault)
  {
    v18 = *(_QWORD *)(v53 + 176);
    v12 = *(_QWORD *)(v53 + 160);
    ParameterResolutionRecord.parameter.getter();
    v13 = ParameterIdentifier.name.getter();
    v14 = v9;
    v46(v18, v12);
    v17 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v10;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v11 = v13;
    *(_QWORD *)(v11 + 8) = v14;
    *(_QWORD *)(v11 + 16) = v16;
    *(_QWORD *)(v11 + 24) = v15;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 40) = 0;
    *(_BYTE *)(v11 + 48) = 2;
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(*(_QWORD *)(v53 + 112) + 8))();
  }
  else
  {
    *(SiriPaymentsIntents::RequestPaymentSlots_optional *)(v53 + 240) = v4;
    if (v4.value)
    {
      if (v4.value == SiriPaymentsIntents_RequestPaymentSlots_currencyAmount)
      {
        *(_QWORD *)(v53 + 48) = 0;
        *(_QWORD *)(v53 + 56) = 0;
        *(_QWORD *)(v53 + 64) = 0;
        *(_QWORD *)(v53 + 72) = 0;
        if (*(_QWORD *)(v53 + 72))
        {
          v29 = *(_QWORD *)(v53 + 72);
          v27 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v53 + 48), v29);
          v28 = *(_QWORD *)(v29 - 8);
          v30 = swift_task_alloc();
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(v28 + 16))(v30, v27, v29);
          v31 = _bridgeAnythingToObjectiveC<A>(_:)();
          (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
          swift_task_dealloc();
          __swift_destroy_boxed_opaque_existential_0(v53 + 48);
          v32 = v31;
        }
        else
        {
          v32 = 0;
        }
        *(_BYTE *)(v53 + 242) = value;
        lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
        lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
        v6 = Slot<>.propertyName.getter((uint64_t)&type metadata for RequestPaymentSlots, (uint64_t)&protocol witness table for RequestPaymentSlots);
        v26 = (id)MEMORY[0x24957220C](v6);
        swift_bridgeObjectRelease();
        objc_msgSend(v56, sel_setValue_forKey_, v32, v26);

        swift_unknownObjectRelease();
      }
      else
      {
        *(_QWORD *)(v53 + 16) = 0;
        *(_QWORD *)(v53 + 24) = 0;
        *(_QWORD *)(v53 + 32) = 0;
        *(_QWORD *)(v53 + 40) = 0;
        if (*(_QWORD *)(v53 + 40))
        {
          v22 = *(_QWORD *)(v53 + 40);
          v20 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v53 + 16), v22);
          v21 = *(_QWORD *)(v22 - 8);
          v23 = swift_task_alloc();
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(v21 + 16))(v23, v20, v22);
          v24 = _bridgeAnythingToObjectiveC<A>(_:)();
          (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
          swift_task_dealloc();
          __swift_destroy_boxed_opaque_existential_0(v53 + 16);
          v25 = v24;
        }
        else
        {
          v25 = 0;
        }
        *(_BYTE *)(v53 + 241) = value;
        lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
        lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
        v7 = Slot<>.propertyName.getter((uint64_t)&type metadata for RequestPaymentSlots, (uint64_t)&protocol witness table for RequestPaymentSlots);
        v19 = (id)MEMORY[0x24957220C](v7);
        swift_bridgeObjectRelease();
        objc_msgSend(v56, sel_setValue_forKey_, v25, v19);

        swift_unknownObjectRelease();
      }
    }
    else
    {
      *(_QWORD *)(v53 + 80) = 0;
      *(_QWORD *)(v53 + 88) = 0;
      *(_QWORD *)(v53 + 96) = 0;
      *(_QWORD *)(v53 + 104) = 0;
      if (*(_QWORD *)(v53 + 104))
      {
        v36 = *(_QWORD *)(v53 + 104);
        v34 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v53 + 80), v36);
        v35 = *(_QWORD *)(v36 - 8);
        v37 = swift_task_alloc();
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(v35 + 16))(v37, v34, v36);
        v38 = _bridgeAnythingToObjectiveC<A>(_:)();
        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v36);
        swift_task_dealloc();
        __swift_destroy_boxed_opaque_existential_0(v53 + 80);
        v39 = v38;
      }
      else
      {
        v39 = 0;
      }
      *(_BYTE *)(v53 + 243) = 0;
      lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
      lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
      v5 = Slot<>.propertyName.getter((uint64_t)&type metadata for RequestPaymentSlots, (uint64_t)&protocol witness table for RequestPaymentSlots);
      v33 = (id)MEMORY[0x24957220C](v5);
      swift_bridgeObjectRelease();
      objc_msgSend(v56, sel_setValue_forKey_, v39, v33);

      swift_unknownObjectRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(id))(*(_QWORD *)(v53 + 112) + 8))(v56);
  }
}

uint64_t implicit closure #2 in RequestPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  int v0;
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;

  v5 = type metadata accessor for ParameterIdentifier();
  v3 = *(_QWORD *)(v5 - 8);
  v2 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v4 = (char *)&v2 - v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);
  ParameterResolutionRecord.parameter.getter();
  v6 = ParameterIdentifier.multicardinalIndex.getter();
  v7 = v0;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v4, v5);
  v8 = v6;
  v9 = v7 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  return Optional.debugDescription.getter();
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance RequestPaymentUnsupportedValueStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(a1, a2);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance RequestPaymentUnsupportedValueStrategy(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for ConfirmationViewBuilding.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:) in conformance ConfirmationViewBuilder;
  return RequestPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(a1);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance RequestPaymentUnsupportedValueStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for RequestPaymentUnsupportedValueStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)();
}

uint64_t sub_24717DAE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);
  return implicit closure #1 in RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)();
}

uint64_t sub_24717DB88()
{
  return swift_deallocObject();
}

uint64_t sub_24717DBB0()
{
  return swift_deallocObject();
}

uint64_t sub_24717DBD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24717DC14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24717DC50()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_24717DCC4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in RequestPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);
  return implicit closure #2 in RequestPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)();
}

uint64_t sub_24717DD6C()
{
  return swift_deallocObject();
}

uint64_t sub_24717DD94()
{
  return swift_deallocObject();
}

uint64_t sub_24717DDBC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24717DDF8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24717DE34()
{
  return swift_deallocObject();
}

uint64_t sub_24717DE5C()
{
  return swift_deallocObject();
}

uint64_t sub_24717DE84()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24717DEC0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for RequestPaymentUnsupportedValueStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for RequestPaymentUnsupportedValueStrategy;
  if (!type metadata singleton initialization cache for RequestPaymentUnsupportedValueStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t SearchForAccountsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 + 264) = v2;
  *(_QWORD *)(v3 + 256) = a2;
  *(_QWORD *)(v3 + 248) = a1;
  *(_QWORD *)(v3 + 168) = v3;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_BYTE *)(v3 + 416) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(_QWORD *)(v3 + 272) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v3 + 280) = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v3 + 288) = v4;
  *(_QWORD *)(v3 + 296) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 304) = swift_task_alloc();
  v5 = type metadata accessor for ParameterIdentifier();
  *(_QWORD *)(v3 + 312) = v5;
  *(_QWORD *)(v3 + 320) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 328) = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  *(_QWORD *)(v3 + 336) = v6;
  *(_QWORD *)(v3 + 344) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 352) = swift_task_alloc();
  *(_QWORD *)(v3 + 360) = swift_task_alloc();
  *(_QWORD *)(v3 + 368) = swift_task_alloc();
  *(_QWORD *)(v3 + 176) = a2;
  *(_QWORD *)(v3 + 184) = v2;
  return swift_task_switch();
}

uint64_t SearchForAccountsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  SiriPaymentsIntents::SearchForAccountsSlots_optional v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  NSObject *log;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint32_t size;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  NSObject *oslog;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  Swift::String rawValue;
  SiriPaymentsIntents::SearchForAccountsSlots value;
  uint64_t v65;
  uint8_t *buf;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  uint32_t v74;
  os_log_type_t v75;
  NSObject *v76;
  uint64_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;

  v1 = *(_QWORD *)(v0 + 368);
  v71 = *(_QWORD *)(v0 + 344);
  v72 = *(_QWORD *)(v0 + 336);
  *(_QWORD *)(v0 + 168) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16);
  v73(v1, v2, v72);
  v76 = Logger.logObject.getter();
  v75 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 192) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v74 = *(_DWORD *)(v0 + 420);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v77 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v76, v75))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v65 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v67 = createStorage<A>(capacity:type:)(0);
    v68 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v70 + 216) = buf;
    *(_QWORD *)(v70 + 224) = v67;
    *(_QWORD *)(v70 + 232) = v68;
    serialize(_:at:)(0, (_BYTE **)(v70 + 216));
    serialize(_:at:)(0, (_BYTE **)(v70 + 216));
    *(_QWORD *)(v70 + 240) = v77;
    v69 = (_QWORD *)swift_task_alloc();
    v69[2] = v70 + 216;
    v69[3] = v70 + 224;
    v69[4] = v70 + 232;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v76, v75, "#SearchForAccountsUnsupportedValueStrategy makeUnsupportedValueOutput", buf, v74);
    destroyStorage<A>(_:count:)(v67, 0, v65);
    destroyStorage<A>(_:count:)(v68, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v57 = *(_QWORD *)(v70 + 368);
  v56 = *(_QWORD *)(v70 + 344);
  v58 = *(_QWORD *)(v70 + 336);
  v61 = *(_QWORD *)(v70 + 328);
  v60 = *(_QWORD *)(v70 + 320);
  v62 = *(_QWORD *)(v70 + 312);

  v59 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
  v59(v57, v58);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSearchForAccountsIntent>);
  ParameterResolutionRecord.parameter.getter();
  rawValue._countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  *(_QWORD *)(v70 + 376) = v3;
  *(_QWORD *)(v70 + 136) = rawValue._countAndFlagsBits;
  *(_QWORD *)(v70 + 144) = v3;
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v61, v62);
  swift_bridgeObjectRetain();
  v4.value = SearchForAccountsSlots.init(rawValue:)(rawValue).value;
  value = v4.value;
  if (v4.value == SiriPaymentsIntents_SearchForAccountsSlots_unknownDefault)
  {
    v11 = *(_QWORD *)(v70 + 352);
    v27 = *(_QWORD *)(v70 + 336);
    v12 = Logger.payments.unsafeMutableAddressor();
    v73(v11, v12, v27);
    swift_bridgeObjectRetain();
    v29 = swift_allocObject();
    *(Swift::String *)(v29 + 16) = rawValue;
    log = Logger.logObject.getter();
    v36 = static os_log_type_t.error.getter();
    *(_QWORD *)(v70 + 200) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v28 = *(_DWORD *)(v70 + 424);
    v31 = swift_allocObject();
    *(_BYTE *)(v31 + 16) = 32;
    v32 = swift_allocObject();
    *(_BYTE *)(v32 + 16) = 8;
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
    *(_QWORD *)(v30 + 24) = v29;
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v33 + 24) = v30;
    _allocateUninitializedArray<A>(_:)();
    v34 = v13;
    swift_retain();
    *v34 = partial apply for closure #1 in OSLogArguments.append(_:);
    v34[1] = v31;
    swift_retain();
    v34[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v34[3] = v32;
    swift_retain();
    v34[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v34[5] = v33;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v36))
    {
      v24 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v25 = createStorage<A>(capacity:type:)(0);
      v26 = createStorage<A>(capacity:type:)(1);
      v78 = v24;
      v79 = v25;
      v80 = v26;
      serialize(_:at:)(2, &v78);
      serialize(_:at:)(1, &v78);
      v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v82 = v31;
      closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v78, (uint64_t)&v79, (uint64_t)&v80);
      v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v82 = v32;
      closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v78, (uint64_t)&v79, (uint64_t)&v80);
      v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v82 = v33;
      closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v78, (uint64_t)&v79, (uint64_t)&v80);
      _os_log_impl(&dword_24701B000, log, v36, "#SearchForAccountsUnsupportedValueStrategy makeUnsupportedValueOutput parameter name %s was not a known slot", v24, v28);
      destroyStorage<A>(_:count:)(v25, 0, v23);
      destroyStorage<A>(_:count:)(v26, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v24, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v19 = *(_QWORD *)(v70 + 352);
    v20 = *(_QWORD *)(v70 + 336);

    v59(v19, v20);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v70 + 152) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v70 + 160) = v14;
    v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v15);
    swift_bridgeObjectRelease();
    type metadata accessor for INSearchForAccountsIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v22 = String.init(stringInterpolation:)();
    v21 = v17;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(Swift::String *)v18 = rawValue;
    *(_QWORD *)(v18 + 16) = v22;
    *(_QWORD *)(v18 + 24) = v21;
    *(_QWORD *)(v18 + 32) = 0;
    *(_QWORD *)(v18 + 40) = 0;
    *(_BYTE *)(v18 + 48) = 2;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v70 + 168) + 8))();
  }
  else
  {
    v5 = *(_QWORD *)(v70 + 360);
    v46 = *(_QWORD *)(v70 + 336);
    *(SiriPaymentsIntents::SearchForAccountsSlots_optional *)(v70 + 416) = v4;
    v6 = Logger.payments.unsafeMutableAddressor();
    v73(v5, v6, v46);
    v48 = swift_allocObject();
    *(_BYTE *)(v48 + 16) = value;
    oslog = Logger.logObject.getter();
    v55 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v70 + 208) = 12;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v70 + 428);
    v50 = swift_allocObject();
    *(_BYTE *)(v50 + 16) = 32;
    v51 = swift_allocObject();
    *(_BYTE *)(v51 + 16) = 8;
    v49 = swift_allocObject();
    *(_QWORD *)(v49 + 16) = partial apply for implicit closure #2 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
    *(_QWORD *)(v49 + 24) = v48;
    v52 = swift_allocObject();
    *(_QWORD *)(v52 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v52 + 24) = v49;
    _allocateUninitializedArray<A>(_:)();
    v53 = v7;
    swift_retain();
    *v53 = partial apply for closure #1 in OSLogArguments.append(_:);
    v53[1] = v50;
    swift_retain();
    v53[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v53[3] = v51;
    swift_retain();
    v53[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v53[5] = v52;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v55))
    {
      v43 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v44 = createStorage<A>(capacity:type:)(0);
      v45 = createStorage<A>(capacity:type:)(1);
      v83 = v43;
      v84 = v44;
      v85 = v45;
      serialize(_:at:)(2, &v83);
      serialize(_:at:)(1, &v83);
      v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v87 = v50;
      closure #1 in osLogInternal(_:log:type:)(&v86, (uint64_t)&v83, (uint64_t)&v84, (uint64_t)&v85);
      v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v87 = v51;
      closure #1 in osLogInternal(_:log:type:)(&v86, (uint64_t)&v83, (uint64_t)&v84, (uint64_t)&v85);
      v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v87 = v52;
      closure #1 in osLogInternal(_:log:type:)(&v86, (uint64_t)&v83, (uint64_t)&v84, (uint64_t)&v85);
      _os_log_impl(&dword_24701B000, oslog, v55, "#SearchForAccountsUnsupportedValueStrategy Slot: %s", v43, size);
      destroyStorage<A>(_:count:)(v44, 0, v42);
      destroyStorage<A>(_:count:)(v45, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v43, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v37 = *(_QWORD *)(v70 + 360);
    v38 = *(_QWORD *)(v70 + 336);
    v40 = *(_QWORD *)(v70 + 280);
    v39 = *(_QWORD *)(v70 + 264);

    v59(v37, v38);
    swift_retain();
    *(_QWORD *)(v70 + 384) = *(_QWORD *)(v39 + 16);
    swift_retain();
    swift_release();
    ParameterResolutionRecord.app.getter();
    v41 = App.sirikitApp.getter();
    *(_QWORD *)(v70 + 392) = v41;
    swift_release();
    SearchForAccountsSlots.rawValue.getter(value);
    SpeakableString.init(print:speak:)();
    v8 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v40, 0, 1);
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v70 + 400) = v9;
    *v9 = *(_QWORD *)(v70 + 168);
    v9[1] = SearchForAccountsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    return SearchForAccountsCATs.unsupportedSlotValue(app:slot:)(*(_QWORD *)(v70 + 304), v41, *(_QWORD *)(v70 + 280));
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 168) = *v1;
  v2 += 168;
  v4 = v2 - 152;
  *(_QWORD *)(v2 + 240) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 264));
    swift_release();
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = v0[38];
  v7 = v0[37];
  v8 = v0[36];
  v10 = v0[34];
  v5 = v0[33];
  v6 = (uint64_t *)v0[31];
  v0[21] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, (uint64_t)(v0 + 2));
  swift_release();
  v4 = v0[5];
  v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v10, 1);
  v0[12] = 0;
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  v0[16] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v6[3] = type metadata accessor for AceOutput();
  v6[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v6);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 12));
  outlined destroy of NLContextUpdate?(v10);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v8);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[21] + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 280);
  *(_QWORD *)(v0 + 168) = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 168) + 8))();
}

uint64_t SearchForAccountsUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[10] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v3 = type metadata accessor for Logger();
  v2[11] = v3;
  v2[12] = *(_QWORD *)(v3 - 8);
  v2[13] = swift_task_alloc();
  v2[3] = a1;
  v2[4] = v1;
  return swift_task_switch();
}

uint64_t SearchForAccountsUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint32_t v16;
  os_log_type_t v17;
  NSObject *v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 16) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v1, v2, v15);
  v18 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 40) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v16 = *(_DWORD *)(v0 + 112);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v19 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v18, v17))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v10 = createStorage<A>(capacity:type:)(0);
    v11 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v13 + 48) = buf;
    *(_QWORD *)(v13 + 56) = v10;
    *(_QWORD *)(v13 + 64) = v11;
    serialize(_:at:)(0, (_BYTE **)(v13 + 48));
    serialize(_:at:)(0, (_BYTE **)(v13 + 48));
    *(_QWORD *)(v13 + 72) = v19;
    v12 = (_QWORD *)swift_task_alloc();
    v12[2] = v13 + 48;
    v12[3] = v13 + 56;
    v12[4] = v13 + 64;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v18, v17, "#SearchForAccountsUnsupportedValueStrategy makeUpdatedIntentForUnsupportedValue", buf, v16);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v13 + 104);
  v4 = *(_QWORD *)(v13 + 96);
  v5 = *(_QWORD *)(v13 + 88);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSearchForAccountsIntent>);
  v7 = ParameterResolutionRecord.intent.getter();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 16) + 8))(v7);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance SearchForAccountsUnsupportedValueStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SearchForAccountsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(a1, a2);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance SearchForAccountsUnsupportedValueStrategy(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for ConfirmationViewBuilding.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:) in conformance ConfirmationViewBuilder;
  return SearchForAccountsUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(a1);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance SearchForAccountsUnsupportedValueStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for SearchForAccountsUnsupportedValueStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)();
}

uint64_t sub_24717FC34()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24717FC70()
{
  return swift_deallocObject();
}

uint64_t sub_24717FC98()
{
  return swift_deallocObject();
}

uint64_t sub_24717FCC0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24717FCFC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24717FD38()
{
  return swift_deallocObject();
}

uint64_t sub_24717FD60()
{
  return swift_deallocObject();
}

uint64_t sub_24717FD88()
{
  return swift_deallocObject();
}

uint64_t sub_24717FDB0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24717FDEC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for SearchForAccountsUnsupportedValueStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SearchForAccountsUnsupportedValueStrategy;
  if (!type metadata singleton initialization cache for SearchForAccountsUnsupportedValueStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t RequestPaymentNeedsValueStrategy.actionForInput(_:resolveRecord:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  _BYTE **v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint32_t v37;
  uint64_t v38;
  int v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint32_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v26 = a3;
  v29 = a1;
  v28 = a2;
  v50 = 0;
  v49 = 0;
  v48 = 0;
  v27 = 0;
  v38 = 0;
  v33 = type metadata accessor for Logger();
  v32 = *(_QWORD *)(v33 - 8);
  v30 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = (char *)&v12 - v30;
  v31 = (char *)&v12 - v30;
  v50 = MEMORY[0x24BDAC7A8](v29);
  v49 = v4;
  v48 = v5;
  v6 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v3, v6, v33);
  v40 = Logger.logObject.getter();
  v39 = static os_log_type_t.debug.getter();
  v36 = &v46;
  v46 = 2;
  v34 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v35 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v37 = v47;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v41 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v40, (os_log_type_t)v39))
  {
    v7 = v27;
    v16 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v15 = 0;
    v17 = createStorage<A>(capacity:type:)(0);
    v18 = createStorage<A>(capacity:type:)(v15);
    v22 = &v45;
    v45 = v16;
    v23 = &v44;
    v44 = v17;
    v20 = &v43;
    v43 = v18;
    v19 = 0;
    serialize(_:at:)(0, &v45);
    serialize(_:at:)(v19, v22);
    v42 = v41;
    v21 = &v12;
    MEMORY[0x24BDAC7A8](&v12);
    v8 = v23;
    v9 = &v12 - 6;
    v24 = &v12 - 6;
    v9[2] = (uint64_t)v22;
    v9[3] = (uint64_t)v8;
    v9[4] = v10;
    v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v7)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, v40, (os_log_type_t)v39, "#RequestPaymentNeedsValueStrategy actionForInput.", v16, v37);
      v13 = 0;
      destroyStorage<A>(_:count:)(v17, 0, v14);
      destroyStorage<A>(_:count:)(v18, v13, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v16, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v33);
  swift_retain();
  BaseStrategy.actionForInput(_:)(v29, v26);
  return swift_release();
}

uint64_t RequestPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 224) = v2;
  *(_QWORD *)(v3 + 216) = a2;
  *(_QWORD *)(v3 + 208) = a1;
  *(_QWORD *)(v3 + 136) = v3;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_BYTE *)(v3 + 384) = 0;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);
  *(_QWORD *)(v3 + 232) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 240) = v5;
  *(_QWORD *)(v3 + 248) = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v3 + 256) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(_QWORD *)(v3 + 264) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v3 + 272) = swift_task_alloc();
  v6 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v3 + 280) = v6;
  *(_QWORD *)(v3 + 288) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 296) = swift_task_alloc();
  v7 = type metadata accessor for ParameterIdentifier();
  *(_QWORD *)(v3 + 304) = v7;
  *(_QWORD *)(v3 + 312) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 320) = swift_task_alloc();
  v8 = type metadata accessor for Logger();
  *(_QWORD *)(v3 + 328) = v8;
  *(_QWORD *)(v3 + 336) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 344) = swift_task_alloc();
  *(_QWORD *)(v3 + 352) = swift_task_alloc();
  *(_QWORD *)(v3 + 144) = a2;
  *(_QWORD *)(v3 + 152) = v2;
  return swift_task_switch();
}

uint64_t RequestPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  SiriPaymentsIntents::RequestPaymentSlots_optional v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *buf;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint32_t size;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  NSObject *oslog;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  Swift::String rawValue;
  SiriPaymentsIntents::RequestPaymentSlots value;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint32_t v59;
  os_log_type_t v60;
  NSObject *v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;

  v1 = *(_QWORD *)(v0 + 352);
  v56 = *(_QWORD *)(v0 + 336);
  v57 = *(_QWORD *)(v0 + 328);
  *(_QWORD *)(v0 + 136) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16);
  v58(v1, v2, v57);
  v61 = Logger.logObject.getter();
  v60 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 160) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v59 = *(_DWORD *)(v0 + 388);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v62 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v61, v60))
  {
    v51 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v52 = createStorage<A>(capacity:type:)(0);
    v53 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v55 + 176) = v51;
    *(_QWORD *)(v55 + 184) = v52;
    *(_QWORD *)(v55 + 192) = v53;
    serialize(_:at:)(0, (_BYTE **)(v55 + 176));
    serialize(_:at:)(0, (_BYTE **)(v55 + 176));
    *(_QWORD *)(v55 + 200) = v62;
    v54 = (_QWORD *)swift_task_alloc();
    v54[2] = v55 + 176;
    v54[3] = v55 + 184;
    v54[4] = v55 + 192;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v61, v60, "#RequestPaymentNeedsValueStrategy makePromptForValue", v51, v59);
    destroyStorage<A>(_:count:)(v52, 0, v50);
    destroyStorage<A>(_:count:)(v53, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v51, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v41 = *(_QWORD *)(v55 + 352);
  v40 = *(_QWORD *)(v55 + 336);
  v42 = *(_QWORD *)(v55 + 328);
  v45 = *(_QWORD *)(v55 + 320);
  v44 = *(_QWORD *)(v55 + 312);
  v46 = *(_QWORD *)(v55 + 304);

  v43 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
  v43(v41, v42);
  ParameterResolutionRecord.parameter.getter();
  rawValue._countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  v47 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
  v47(v45, v46);
  v4.value = RequestPaymentSlots.init(rawValue:)(rawValue).value;
  value = v4.value;
  *(SiriPaymentsIntents::RequestPaymentSlots_optional *)(v55 + 386) = v4;
  if (v4.value == SiriPaymentsIntents_RequestPaymentSlots_unknownDefault)
  {
    v8 = *(_QWORD *)(v55 + 344);
    v23 = *(_QWORD *)(v55 + 328);
    v27 = *(_QWORD *)(v55 + 256);
    v26 = *(_QWORD *)(v55 + 240);
    v28 = *(_QWORD *)(v55 + 232);
    v24 = *(_QWORD *)(v55 + 216);
    v9 = Logger.payments.unsafeMutableAddressor();
    v58(v8, v9, v23);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v27, v24, v28);
    v25 = (*(unsigned __int8 *)(v26 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    v30 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 32))(v30 + v25, v27, v28);
    oslog = Logger.logObject.getter();
    v37 = static os_log_type_t.error.getter();
    *(_QWORD *)(v55 + 168) = 12;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v55 + 392);
    v32 = swift_allocObject();
    *(_BYTE *)(v32 + 16) = 32;
    v33 = swift_allocObject();
    *(_BYTE *)(v33 + 16) = 8;
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = partial apply for implicit closure #1 in RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    *(_QWORD *)(v31 + 24) = v30;
    v34 = swift_allocObject();
    *(_QWORD *)(v34 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v34 + 24) = v31;
    _allocateUninitializedArray<A>(_:)();
    v35 = v10;
    swift_retain();
    *v35 = partial apply for closure #1 in OSLogArguments.append(_:);
    v35[1] = v32;
    swift_retain();
    v35[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v35[3] = v33;
    swift_retain();
    v35[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v35[5] = v34;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v37))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v21 = createStorage<A>(capacity:type:)(0);
      v22 = createStorage<A>(capacity:type:)(1);
      v63 = buf;
      v64 = v21;
      v65 = v22;
      serialize(_:at:)(2, &v63);
      serialize(_:at:)(1, &v63);
      v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v67 = v32;
      closure #1 in osLogInternal(_:log:type:)(&v66, (uint64_t)&v63, (uint64_t)&v64, (uint64_t)&v65);
      v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v67 = v33;
      closure #1 in osLogInternal(_:log:type:)(&v66, (uint64_t)&v63, (uint64_t)&v64, (uint64_t)&v65);
      v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v67 = v34;
      closure #1 in osLogInternal(_:log:type:)(&v66, (uint64_t)&v63, (uint64_t)&v64, (uint64_t)&v65);
      _os_log_impl(&dword_24701B000, oslog, v37, "#RequestPaymentNeedsValueFlowStrategy unknown parameter: %s", buf, size);
      destroyStorage<A>(_:count:)(v21, 0, v19);
      destroyStorage<A>(_:count:)(v22, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v13 = *(_QWORD *)(v55 + 344);
    v14 = *(_QWORD *)(v55 + 328);
    v15 = *(_QWORD *)(v55 + 320);
    v16 = *(_QWORD *)(v55 + 304);

    v43(v13, v14);
    ParameterResolutionRecord.parameter.getter();
    v18 = ParameterIdentifier.name.getter();
    v17 = v11;
    v47(v15, v16);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v12 = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 40) = 0;
    *(_BYTE *)(v12 + 48) = 14;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v55 + 136) + 8))();
  }
  else
  {
    v39 = *(_QWORD *)(v55 + 272);
    v38 = *(_QWORD *)(v55 + 224);
    *(SiriPaymentsIntents::RequestPaymentSlots_optional *)(v55 + 384) = v4;
    swift_retain();
    *(_QWORD *)(v55 + 360) = *(_QWORD *)(v38 + 16);
    swift_retain();
    swift_release();
    *(_BYTE *)(v55 + 385) = value;
    lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
    lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
    Slot<>.propertyName.getter((uint64_t)&type metadata for RequestPaymentSlots, (uint64_t)&protocol witness table for RequestPaymentSlots);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v5 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v39, 0, 1);
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v55 + 368) = v6;
    *v6 = *(_QWORD *)(v55 + 136);
    v6[1] = RequestPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:);
    return RequestPaymentCATs.promptForSlotValue(slot:)(*(_QWORD *)(v55 + 296), *(_QWORD *)(v55 + 272));
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 136) = *v1;
  v2 += 136;
  v4 = v2 - 120;
  *(_QWORD *)(v2 + 240) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 256));
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(unsigned __int8 *)(v0 + 386);
  v10 = *(_QWORD *)(v0 + 296);
  v8 = *(_QWORD *)(v0 + 288);
  v9 = *(_QWORD *)(v0 + 280);
  v11 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 224);
  v7 = *(uint64_t **)(v0 + 208);
  *(_QWORD *)(v0 + 136) = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, v0 + 16);
  swift_release();
  v4 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  static PaymentsContextProvider.needsValueContextUpdate(value:)(v6, v11);
  v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v11, 0, 1);
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v7[3] = type metadata accessor for AceOutput();
  v7[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v7);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?(v0 + 96);
  outlined destroy of NLContextUpdate?(v11);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 136) + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 272);
  *(_QWORD *)(v0 + 136) = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 136) + 8))();
}

uint64_t RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v4 + 568) = v3;
  *(_QWORD *)(v4 + 560) = a3;
  *(_QWORD *)(v4 + 552) = a2;
  *(_QWORD *)(v4 + 544) = a1;
  *(_QWORD *)(v4 + 264) = v4;
  *(_QWORD *)(v4 + 272) = 0;
  *(_QWORD *)(v4 + 280) = 0;
  *(_QWORD *)(v4 + 288) = 0;
  *(_BYTE *)(v4 + 840) = 0;
  *(_QWORD *)(v4 + 368) = 0;
  *(_QWORD *)(v4 + 392) = 0;
  *(_QWORD *)(v4 + 448) = 0;
  v5 = type metadata accessor for Parse.DirectInvocation();
  *(_QWORD *)(v4 + 576) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 584) = v6;
  *(_QWORD *)(v4 + 592) = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v4 + 600) = swift_task_alloc();
  *(_QWORD *)(v4 + 608) = swift_task_alloc();
  v7 = type metadata accessor for Parse();
  *(_QWORD *)(v4 + 616) = v7;
  *(_QWORD *)(v4 + 624) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 632) = swift_task_alloc();
  *(_QWORD *)(v4 + 640) = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);
  *(_QWORD *)(v4 + 648) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 656) = v9;
  *(_QWORD *)(v4 + 664) = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v4 + 672) = swift_task_alloc();
  v10 = type metadata accessor for Input();
  *(_QWORD *)(v4 + 680) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v4 + 688) = v11;
  *(_QWORD *)(v4 + 696) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v4 + 704) = swift_task_alloc();
  v12 = type metadata accessor for ParameterIdentifier();
  *(_QWORD *)(v4 + 712) = v12;
  *(_QWORD *)(v4 + 720) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v4 + 728) = swift_task_alloc();
  v13 = type metadata accessor for Logger();
  *(_QWORD *)(v4 + 736) = v13;
  *(_QWORD *)(v4 + 744) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v4 + 752) = swift_task_alloc();
  *(_QWORD *)(v4 + 760) = swift_task_alloc();
  *(_QWORD *)(v4 + 768) = swift_task_alloc();
  *(_QWORD *)(v4 + 776) = swift_task_alloc();
  *(_QWORD *)(v4 + 784) = swift_task_alloc();
  *(_QWORD *)(v4 + 792) = swift_task_alloc();
  *(_QWORD *)(v4 + 800) = swift_task_alloc();
  *(_QWORD *)(v4 + 808) = swift_task_alloc();
  *(_QWORD *)(v4 + 816) = swift_task_alloc();
  *(_QWORD *)(v4 + 824) = swift_task_alloc();
  *(_QWORD *)(v4 + 832) = swift_task_alloc();
  *(_QWORD *)(v4 + 272) = a2;
  *(_QWORD *)(v4 + 280) = a3;
  *(_QWORD *)(v4 + 288) = v3;
  return swift_task_switch();
}

uint64_t RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  SiriPaymentsIntents::RequestPaymentSlots_optional v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  id v24;
  uint64_t countAndFlagsBits;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint32_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint32_t v85;
  os_log_type_t v86;
  NSObject *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint32_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  NSObject *v111;
  os_log_type_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint8_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint32_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  NSObject *v142;
  os_log_type_t v143;
  void *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(uint64_t, uint64_t);
  id v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint8_t *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  id v171;
  id v172;
  uint64_t v173;
  uint32_t v174;
  os_log_type_t v175;
  NSObject *v176;
  uint64_t v177;
  uint64_t v178;
  uint8_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint32_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  NSObject *v189;
  os_log_type_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint8_t *v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint32_t v203;
  os_log_type_t v204;
  NSObject *v205;
  uint64_t v206;
  void *v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  uint64_t v214;
  uint8_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void (*v225)(uint64_t, uint64_t, uint64_t);
  uint32_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  NSObject *v233;
  os_log_type_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint8_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void (*v247)(uint64_t, uint64_t, uint64_t);
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void (*v252)(unint64_t, uint64_t, uint64_t);
  uint32_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  NSObject *v260;
  os_log_type_t v261;
  uint64_t v262;
  uint8_t *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint32_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  NSObject *log;
  os_log_type_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void (*v284)(uint64_t, uint64_t);
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void (*v288)(uint64_t, uint64_t);
  Swift::String rawValue;
  SiriPaymentsIntents::RequestPaymentSlots value;
  uint64_t v291;
  uint8_t *buf;
  uint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  void (*v299)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v301;
  NSObject *oslog;
  uint64_t v303;
  uint8_t *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t (*v307)(uint64_t, uint64_t, uint64_t);
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  __int128 v313;
  uint8_t *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t (*v317)(uint64_t, uint64_t, uint64_t);
  uint64_t v318;
  uint8_t *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t (*v322)(uint64_t, uint64_t, uint64_t);
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  __int128 v330;
  uint8_t *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t (*v334)(uint64_t, uint64_t, uint64_t);
  uint64_t v335;
  uint8_t *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t (*v339)(uint64_t, uint64_t, uint64_t);
  uint64_t v340;
  uint8_t *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t (*v344)(uint64_t, uint64_t, uint64_t);
  uint64_t v345;
  uint8_t *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t (*v349)(uint64_t, uint64_t, uint64_t);
  uint64_t v350;

  v1 = *(_QWORD *)(v0 + 832);
  v297 = *(_QWORD *)(v0 + 744);
  v298 = *(_QWORD *)(v0 + 736);
  *(_QWORD *)(v0 + 264) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  v299 = *(void (**)(uint64_t, uint64_t, uint64_t))(v297 + 16);
  v299(v1, v2, v298);
  oslog = Logger.logObject.getter();
  v301 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 296) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 844);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v303 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v301))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v291 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v293 = createStorage<A>(capacity:type:)(0);
    v294 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v296 + 512) = buf;
    *(_QWORD *)(v296 + 520) = v293;
    *(_QWORD *)(v296 + 528) = v294;
    serialize(_:at:)(0, (_BYTE **)(v296 + 512));
    serialize(_:at:)(0, (_BYTE **)(v296 + 512));
    *(_QWORD *)(v296 + 536) = v303;
    v295 = (_QWORD *)swift_task_alloc();
    v295[2] = v296 + 512;
    v295[3] = v296 + 520;
    v295[4] = v296 + 528;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, oslog, v301, "#RequestPaymentNeedsValueStrategy parseValueResponse.", buf, size);
    destroyStorage<A>(_:count:)(v293, 0, v291);
    destroyStorage<A>(_:count:)(v294, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v282 = *(_QWORD *)(v296 + 832);
  v281 = *(_QWORD *)(v296 + 744);
  v283 = *(_QWORD *)(v296 + 736);
  v286 = *(_QWORD *)(v296 + 728);
  v285 = *(_QWORD *)(v296 + 720);
  v287 = *(_QWORD *)(v296 + 712);

  v284 = *(void (**)(uint64_t, uint64_t))(v281 + 8);
  v284(v282, v283);
  ParameterResolutionRecord.parameter.getter();
  rawValue._countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  v288 = *(void (**)(uint64_t, uint64_t))(v285 + 8);
  v288(v286, v287);
  v4.value = RequestPaymentSlots.init(rawValue:)(rawValue).value;
  value = v4.value;
  if (v4.value == SiriPaymentsIntents_RequestPaymentSlots_unknownDefault)
  {
    v43 = *(_QWORD *)(v296 + 752);
    v59 = *(_QWORD *)(v296 + 736);
    v63 = *(_QWORD *)(v296 + 672);
    v62 = *(_QWORD *)(v296 + 656);
    v64 = *(_QWORD *)(v296 + 648);
    v60 = *(_QWORD *)(v296 + 560);
    v44 = Logger.payments.unsafeMutableAddressor();
    v299(v43, v44, v59);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v63, v60, v64);
    v61 = (*(unsigned __int8 *)(v62 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
    v66 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v62 + 32))(v66 + v61, v63, v64);
    v72 = Logger.logObject.getter();
    v73 = static os_log_type_t.error.getter();
    *(_QWORD *)(v296 + 304) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v65 = *(_DWORD *)(v296 + 848);
    v68 = swift_allocObject();
    *(_BYTE *)(v68 + 16) = 32;
    v69 = swift_allocObject();
    *(_BYTE *)(v69 + 16) = 8;
    v67 = swift_allocObject();
    *(_QWORD *)(v67 + 16) = partial apply for implicit closure #1 in RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    *(_QWORD *)(v67 + 24) = v66;
    v70 = swift_allocObject();
    *(_QWORD *)(v70 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v70 + 24) = v67;
    _allocateUninitializedArray<A>(_:)();
    v71 = v45;
    swift_retain();
    *v71 = partial apply for closure #1 in OSLogArguments.append(_:);
    v71[1] = v68;
    swift_retain();
    v71[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v71[3] = v69;
    swift_retain();
    v71[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v71[5] = v70;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v72, v73))
    {
      v56 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v57 = createStorage<A>(capacity:type:)(0);
      v58 = createStorage<A>(capacity:type:)(1);
      v304 = v56;
      v305 = v57;
      v306 = v58;
      serialize(_:at:)(2, &v304);
      serialize(_:at:)(1, &v304);
      v307 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v308 = v68;
      closure #1 in osLogInternal(_:log:type:)(&v307, (uint64_t)&v304, (uint64_t)&v305, (uint64_t)&v306);
      v307 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v308 = v69;
      closure #1 in osLogInternal(_:log:type:)(&v307, (uint64_t)&v304, (uint64_t)&v305, (uint64_t)&v306);
      v307 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v308 = v70;
      closure #1 in osLogInternal(_:log:type:)(&v307, (uint64_t)&v304, (uint64_t)&v305, (uint64_t)&v306);
      _os_log_impl(&dword_24701B000, v72, v73, "#RequestPaymentNeedsValueStrategy unknown parameter: %s", v56, v65);
      destroyStorage<A>(_:count:)(v57, 0, v55);
      destroyStorage<A>(_:count:)(v58, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v56, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v53 = *(_QWORD *)(v296 + 752);
    v49 = *(_QWORD *)(v296 + 736);
    v54 = *(_QWORD *)(v296 + 728);
    v50 = *(_QWORD *)(v296 + 712);

    v284(v53, v49);
    ParameterResolutionRecord.parameter.getter();
    v52 = ParameterIdentifier.name.getter();
    v51 = v46;
    v288(v54, v50);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v47 = v52;
    *(_QWORD *)(v47 + 8) = v51;
    *(_QWORD *)(v47 + 16) = 0;
    *(_QWORD *)(v47 + 24) = 0;
    *(_QWORD *)(v47 + 32) = 0;
    *(_QWORD *)(v47 + 40) = 0;
    *(_BYTE *)(v47 + 48) = 14;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v296 + 264) + 8))();
  }
  else
  {
    v5 = *(_QWORD *)(v296 + 824);
    v266 = *(_QWORD *)(v296 + 736);
    v270 = *(_QWORD *)(v296 + 704);
    v269 = *(_QWORD *)(v296 + 688);
    v271 = *(_QWORD *)(v296 + 680);
    v267 = *(_QWORD *)(v296 + 552);
    *(SiriPaymentsIntents::RequestPaymentSlots_optional *)(v296 + 840) = v4;
    v6 = Logger.payments.unsafeMutableAddressor();
    v299(v5, v6, v266);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v269 + 16))(v270, v267, v271);
    v268 = (*(unsigned __int8 *)(v269 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v269 + 80);
    v273 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v269 + 32))(v273 + v268, v270, v271);
    log = Logger.logObject.getter();
    v280 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v296 + 312) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v272 = *(_DWORD *)(v296 + 852);
    v275 = swift_allocObject();
    *(_BYTE *)(v275 + 16) = 32;
    v276 = swift_allocObject();
    *(_BYTE *)(v276 + 16) = 8;
    v274 = swift_allocObject();
    *(_QWORD *)(v274 + 16) = partial apply for implicit closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
    *(_QWORD *)(v274 + 24) = v273;
    v277 = swift_allocObject();
    *(_QWORD *)(v277 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v277 + 24) = v274;
    _allocateUninitializedArray<A>(_:)();
    v278 = v7;
    swift_retain();
    *v278 = partial apply for closure #1 in OSLogArguments.append(_:);
    v278[1] = v275;
    swift_retain();
    v278[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v278[3] = v276;
    swift_retain();
    v278[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v278[5] = v277;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v280))
    {
      v263 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v262 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v264 = createStorage<A>(capacity:type:)(0);
      v265 = createStorage<A>(capacity:type:)(1);
      v346 = v263;
      v347 = v264;
      v348 = v265;
      serialize(_:at:)(2, &v346);
      serialize(_:at:)(1, &v346);
      v349 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v350 = v275;
      closure #1 in osLogInternal(_:log:type:)(&v349, (uint64_t)&v346, (uint64_t)&v347, (uint64_t)&v348);
      v349 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v350 = v276;
      closure #1 in osLogInternal(_:log:type:)(&v349, (uint64_t)&v346, (uint64_t)&v347, (uint64_t)&v348);
      v349 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v350 = v277;
      closure #1 in osLogInternal(_:log:type:)(&v349, (uint64_t)&v346, (uint64_t)&v347, (uint64_t)&v348);
      _os_log_impl(&dword_24701B000, log, v280, "#RequestPaymentNeedsValueStrategy Parse: %s", v263, v272);
      destroyStorage<A>(_:count:)(v264, 0, v262);
      destroyStorage<A>(_:count:)(v265, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v263, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v244 = *(_QWORD *)(v296 + 824);
    v8 = *(_QWORD *)(v296 + 816);
    v245 = *(_QWORD *)(v296 + 736);
    v250 = *(_QWORD *)(v296 + 672);
    v249 = *(_QWORD *)(v296 + 656);
    v251 = *(_QWORD *)(v296 + 648);
    v246 = *(_QWORD *)(v296 + 560);

    v284(v244, v245);
    v9 = Logger.payments.unsafeMutableAddressor();
    v299(v8, v9, v245);
    v247 = *(void (**)(uint64_t, uint64_t, uint64_t))(v249 + 16);
    v247(v250, v246, v251);
    v248 = *(_DWORD *)(v249 + 80);
    v254 = swift_allocObject();
    v252 = *(void (**)(unint64_t, uint64_t, uint64_t))(v249 + 32);
    v252(v254 + ((v248 + 16) & ~(unint64_t)v248), v250, v251);
    v260 = Logger.logObject.getter();
    v261 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v296 + 320) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v253 = *(_DWORD *)(v296 + 856);
    v256 = swift_allocObject();
    *(_BYTE *)(v256 + 16) = 32;
    v257 = swift_allocObject();
    *(_BYTE *)(v257 + 16) = 8;
    v255 = swift_allocObject();
    *(_QWORD *)(v255 + 16) = partial apply for implicit closure #1 in RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    *(_QWORD *)(v255 + 24) = v254;
    v258 = swift_allocObject();
    *(_QWORD *)(v258 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v258 + 24) = v255;
    _allocateUninitializedArray<A>(_:)();
    v259 = v10;
    swift_retain();
    *v259 = partial apply for closure #1 in OSLogArguments.append(_:);
    v259[1] = v256;
    swift_retain();
    v259[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v259[3] = v257;
    swift_retain();
    v259[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v259[5] = v258;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v260, v261))
    {
      v241 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v240 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v242 = createStorage<A>(capacity:type:)(0);
      v243 = createStorage<A>(capacity:type:)(1);
      v341 = v241;
      v342 = v242;
      v343 = v243;
      serialize(_:at:)(2, &v341);
      serialize(_:at:)(1, &v341);
      v344 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v345 = v256;
      closure #1 in osLogInternal(_:log:type:)(&v344, (uint64_t)&v341, (uint64_t)&v342, (uint64_t)&v343);
      v344 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v345 = v257;
      closure #1 in osLogInternal(_:log:type:)(&v344, (uint64_t)&v341, (uint64_t)&v342, (uint64_t)&v343);
      v344 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v345 = v258;
      closure #1 in osLogInternal(_:log:type:)(&v344, (uint64_t)&v341, (uint64_t)&v342, (uint64_t)&v343);
      _os_log_impl(&dword_24701B000, v260, v261, "#RequestPaymentNeedsValueStrategy parseResponseValue for slot: %s", v241, v253);
      destroyStorage<A>(_:count:)(v242, 0, v240);
      destroyStorage<A>(_:count:)(v243, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v241, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v235 = *(_QWORD *)(v296 + 816);
    v236 = *(_QWORD *)(v296 + 736);
    v238 = *(_QWORD *)(v296 + 640);
    v237 = *(_QWORD *)(v296 + 624);
    v239 = *(_QWORD *)(v296 + 616);

    v284(v235, v236);
    Input.parse.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v237 + 88))(v238, v239) == *MEMORY[0x24BE98E88])
    {
      v11 = *(_QWORD *)(v296 + 808);
      v219 = *(_QWORD *)(v296 + 736);
      v218 = *(_QWORD *)(v296 + 640);
      v220 = *(_QWORD *)(v296 + 608);
      v223 = *(_QWORD *)(v296 + 600);
      v221 = *(_QWORD *)(v296 + 584);
      v224 = *(_QWORD *)(v296 + 576);
      (*(void (**)(void))(*(_QWORD *)(v296 + 624) + 96))();
      v225 = *(void (**)(uint64_t, uint64_t, uint64_t))(v221 + 32);
      v225(v220, v218, v224);
      *(_QWORD *)(v296 + 392) = v220;
      v12 = Logger.payments.unsafeMutableAddressor();
      v299(v11, v12, v219);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v221 + 16))(v223, v220, v224);
      v222 = (*(unsigned __int8 *)(v221 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v221 + 80);
      v227 = swift_allocObject();
      v225(v227 + v222, v223, v224);
      v233 = Logger.logObject.getter();
      v234 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v296 + 400) = 12;
      UnsignedInteger<>.init<A>(_:)();
      v226 = *(_DWORD *)(v296 + 872);
      v229 = swift_allocObject();
      *(_BYTE *)(v229 + 16) = 32;
      v230 = swift_allocObject();
      *(_BYTE *)(v230 + 16) = 8;
      v228 = swift_allocObject();
      *(_QWORD *)(v228 + 16) = partial apply for implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse(input:);
      *(_QWORD *)(v228 + 24) = v227;
      v231 = swift_allocObject();
      *(_QWORD *)(v231 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v231 + 24) = v228;
      _allocateUninitializedArray<A>(_:)();
      v232 = v13;
      swift_retain();
      *v232 = partial apply for closure #1 in OSLogArguments.append(_:);
      v232[1] = v229;
      swift_retain();
      v232[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v232[3] = v230;
      swift_retain();
      v232[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v232[5] = v231;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v233, v234))
      {
        v215 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v214 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v216 = createStorage<A>(capacity:type:)(0);
        v217 = createStorage<A>(capacity:type:)(1);
        v336 = v215;
        v337 = v216;
        v338 = v217;
        serialize(_:at:)(2, &v336);
        serialize(_:at:)(1, &v336);
        v339 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v340 = v229;
        closure #1 in osLogInternal(_:log:type:)(&v339, (uint64_t)&v336, (uint64_t)&v337, (uint64_t)&v338);
        v339 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v340 = v230;
        closure #1 in osLogInternal(_:log:type:)(&v339, (uint64_t)&v336, (uint64_t)&v337, (uint64_t)&v338);
        v339 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v340 = v231;
        closure #1 in osLogInternal(_:log:type:)(&v339, (uint64_t)&v336, (uint64_t)&v337, (uint64_t)&v338);
        _os_log_impl(&dword_24701B000, v233, v234, "#RequestPaymentNeedsValueStrategy parseResponseValue, directInvocation: %s", v215, v226);
        destroyStorage<A>(_:count:)(v216, 0, v214);
        destroyStorage<A>(_:count:)(v217, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v215, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      v209 = *(_QWORD *)(v296 + 808);
      v210 = *(_QWORD *)(v296 + 736);

      v284(v209, v210);
      v211 = Parse.DirectInvocation.identifier.getter();
      v212 = v14;
      swift_bridgeObjectRetain();
      PaymentsDirectInvocations.Identifiers.rawValue.getter(3);
      swift_bridgeObjectRetain();
      v324 = v211;
      v325 = v212;
      v213 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v213 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        if (Parse.DirectInvocation.userData.getter())
        {
          PaymentsDirectInvocations.Keys.rawValue.getter(1);
          *(_QWORD *)(v296 + 248) = v15;
          *(_QWORD *)(v296 + 256) = v16;
          MEMORY[0x2495721DC]();
          outlined destroy of String.UTF8View();
          swift_bridgeObjectRelease();
        }
        else
        {
          *(_QWORD *)(v296 + 216) = 0;
          *(_QWORD *)(v296 + 224) = 0;
          *(_QWORD *)(v296 + 232) = 0;
          *(_QWORD *)(v296 + 240) = 0;
        }
        if (*(_QWORD *)(v296 + 240))
        {
          type metadata accessor for INPerson();
          if ((swift_dynamicCast() & 1) != 0)
            v208 = *(void **)(v296 + 504);
          else
            v208 = 0;
          v207 = v208;
        }
        else
        {
          outlined destroy of FlowActivity?(v296 + 216);
          v207 = 0;
        }
        v20 = *(_QWORD *)(v296 + 792);
        v182 = *(_QWORD *)(v296 + 736);
        *(_QWORD *)(v296 + 448) = v207;
        v21 = Logger.payments.unsafeMutableAddressor();
        v299(v20, v21, v182);
        v22 = v207;
        v184 = swift_allocObject();
        *(_QWORD *)(v184 + 16) = v207;
        default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
        swift_bridgeObjectRelease();
        v189 = Logger.logObject.getter();
        v190 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v296 + 456) = 12;
        UnsignedInteger<>.init<A>(_:)();
        v183 = *(_DWORD *)(v296 + 880);
        v185 = swift_allocObject();
        *(_BYTE *)(v185 + 16) = 64;
        v186 = swift_allocObject();
        *(_BYTE *)(v186 + 16) = 8;
        v187 = swift_allocObject();
        *(_QWORD *)(v187 + 16) = partial apply for implicit closure #5 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
        *(_QWORD *)(v187 + 24) = v184;
        _allocateUninitializedArray<A>(_:)();
        v188 = v23;
        swift_retain();
        *v188 = partial apply for closure #1 in OSLogArguments.append(_:);
        v188[1] = v185;
        swift_retain();
        v188[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v188[3] = v186;
        swift_retain();
        v188[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v188[5] = v187;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v189, v190))
        {
          v179 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v178 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v180 = createStorage<A>(capacity:type:)(1);
          v181 = createStorage<A>(capacity:type:)(0);
          v331 = v179;
          v332 = v180;
          v333 = v181;
          serialize(_:at:)(2, &v331);
          serialize(_:at:)(1, &v331);
          v334 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v335 = v185;
          closure #1 in osLogInternal(_:log:type:)(&v334, (uint64_t)&v331, (uint64_t)&v332, (uint64_t)&v333);
          v334 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v335 = v186;
          closure #1 in osLogInternal(_:log:type:)(&v334, (uint64_t)&v331, (uint64_t)&v332, (uint64_t)&v333);
          v334 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v335 = v187;
          closure #1 in osLogInternal(_:log:type:)(&v334, (uint64_t)&v331, (uint64_t)&v332, (uint64_t)&v333);
          _os_log_impl(&dword_24701B000, v189, v190, "#RequestPaymentNeedsValueStrategy Received payer value %@ from DirectInvocation", v179, v183);
          destroyStorage<A>(_:count:)(v180, 1, v178);
          destroyStorage<A>(_:count:)(v181, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v179, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        v169 = *(_QWORD *)(v296 + 792);
        v170 = *(_QWORD *)(v296 + 784);
        v173 = *(_QWORD *)(v296 + 736);

        v284(v169, v173);
        v172 = (id)ParameterResolutionRecord.intent.getter();
        v24 = v207;
        countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payer", 5uLL, 1)._countAndFlagsBits;
        v171 = (id)MEMORY[0x24957220C](countAndFlagsBits);
        swift_bridgeObjectRelease();
        objc_msgSend(v172, sel_setValue_forKeyPath_, v207, v171);

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        v26 = Logger.payments.unsafeMutableAddressor();
        v299(v170, v26, v173);
        v176 = Logger.logObject.getter();
        v175 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v296 + 464) = 2;
        UnsignedInteger<>.init<A>(_:)();
        v174 = *(_DWORD *)(v296 + 884);
        v177 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v176, v175))
        {
          v165 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v164 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v166 = createStorage<A>(capacity:type:)(0);
          v167 = createStorage<A>(capacity:type:)(0);
          *(_QWORD *)(v296 + 472) = v165;
          *(_QWORD *)(v296 + 480) = v166;
          *(_QWORD *)(v296 + 488) = v167;
          serialize(_:at:)(0, (_BYTE **)(v296 + 472));
          serialize(_:at:)(0, (_BYTE **)(v296 + 472));
          *(_QWORD *)(v296 + 496) = v177;
          v168 = (_QWORD *)swift_task_alloc();
          v168[2] = v296 + 472;
          v168[3] = v296 + 480;
          v168[4] = v296 + 488;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_24701B000, v176, v175, "#RequestPaymentNeedsValueStrategy Returning successful IntentPromptAnswer", v165, v174);
          destroyStorage<A>(_:count:)(v166, 0, v164);
          destroyStorage<A>(_:count:)(v167, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v165, MEMORY[0x24BEE4260]);
        }
        swift_bridgeObjectRelease();
        v156 = *(_QWORD *)(v296 + 784);
        v157 = *(_QWORD *)(v296 + 736);
        v162 = *(_QWORD *)(v296 + 608);
        v161 = *(_QWORD *)(v296 + 584);
        v163 = *(_QWORD *)(v296 + 576);
        v160 = *(_QWORD *)(v296 + 544);

        v284(v156, v157);
        v158 = (id)ParameterResolutionRecord.intent.getter();
        *(_QWORD *)(v296 + 200) = &type metadata for RequestPaymentSlots;
        *(_QWORD *)(v296 + 208) = &protocol witness table for RequestPaymentSlots;
        *(_BYTE *)(v296 + 176) = value;
        v159 = type metadata accessor for INRequestPaymentIntent();
        SiriKitPaymentsIntent.value(forSlot:)((_QWORD *)(v296 + 176), v159, &v330);
        __swift_destroy_boxed_opaque_existential_0(v296 + 176);

        ParameterResolutionRecord.intent.getter();
        IntentPromptAnswer.init(answeredValue:updatedIntent:)();
        v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INRequestPaymentIntent>);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v160, 0, 1);
        (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v162, v163);
      }
      else
      {
        v17 = *(_QWORD *)(v296 + 800);
        v202 = *(_QWORD *)(v296 + 736);
        swift_bridgeObjectRelease();
        v18 = Logger.payments.unsafeMutableAddressor();
        v299(v17, v18, v202);
        v205 = Logger.logObject.getter();
        v204 = static os_log_type_t.error.getter();
        *(_QWORD *)(v296 + 408) = 2;
        UnsignedInteger<>.init<A>(_:)();
        v203 = *(_DWORD *)(v296 + 876);
        v206 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v205, v204))
        {
          v198 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v197 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v199 = createStorage<A>(capacity:type:)(0);
          v200 = createStorage<A>(capacity:type:)(0);
          *(_QWORD *)(v296 + 416) = v198;
          *(_QWORD *)(v296 + 424) = v199;
          *(_QWORD *)(v296 + 432) = v200;
          serialize(_:at:)(0, (_BYTE **)(v296 + 416));
          serialize(_:at:)(0, (_BYTE **)(v296 + 416));
          *(_QWORD *)(v296 + 440) = v206;
          v201 = (_QWORD *)swift_task_alloc();
          v201[2] = v296 + 416;
          v201[3] = v296 + 424;
          v201[4] = v296 + 432;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_24701B000, v205, v204, "#RequestPaymentNeedsValueStrategy parseResponseValue failed to interpret user response as expected Direct Invocation. Reprompt with previous state", v198, v203);
          destroyStorage<A>(_:count:)(v199, 0, v197);
          destroyStorage<A>(_:count:)(v200, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v198, MEMORY[0x24BEE4260]);
        }
        swift_bridgeObjectRelease();
        v191 = *(_QWORD *)(v296 + 800);
        v192 = *(_QWORD *)(v296 + 736);
        v195 = *(_QWORD *)(v296 + 608);
        v194 = *(_QWORD *)(v296 + 584);
        v196 = *(_QWORD *)(v296 + 576);
        v193 = *(_QWORD *)(v296 + 544);

        v284(v191, v192);
        v326 = 0;
        v327 = 0;
        v328 = 0;
        v329 = 0;
        ParameterResolutionRecord.intent.getter();
        type metadata accessor for INRequestPaymentIntent();
        IntentPromptAnswer.init(answeredValue:updatedIntent:)();
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INRequestPaymentIntent>);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v193, 0, 1);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v194 + 8))(v195, v196);
      }
    }
    else
    {
      v152 = *(_QWORD *)(v296 + 632);
      v151 = *(_QWORD *)(v296 + 624);
      v153 = *(_QWORD *)(v296 + 616);
      v149 = *(_QWORD *)(v296 + 568);
      Input.parse.getter();
      v150 = (id)ParameterResolutionRecord.intent.getter();
      swift_retain();
      outlined init with copy of GlobalsProviding(v149 + 104, v296 + 16);
      swift_release();
      v148 = *(_QWORD *)(v296 + 40);
      v147 = *(_QWORD *)(v296 + 48);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v296 + 16), v148);
      (*(void (**)(uint64_t))(v147 + 24))(v148);
      swift_retain();
      outlined init with copy of GlobalsProviding(v149 + 64, v296 + 96);
      swift_release();
      v155 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(v150, (uint64_t)&protocol witness table for INRequestPaymentIntent, v296 + 56, v296 + 96);
      __swift_destroy_boxed_opaque_existential_0(v296 + 96);
      __swift_destroy_boxed_opaque_existential_0(v296 + 56);
      __swift_destroy_boxed_opaque_existential_0(v296 + 16);

      v154 = *(void (**)(uint64_t, uint64_t))(v151 + 8);
      v154(v152, v153);
      if (v155)
      {
        objc_opt_self();
        v146 = swift_dynamicCastObjCClass();
        if (v146)
        {
          v145 = (void *)v146;
        }
        else
        {

          v145 = 0;
        }
        v144 = v145;
      }
      else
      {
        v144 = 0;
      }
      if (v144)
      {
        v28 = *(_QWORD *)(v296 + 776);
        v134 = *(_QWORD *)(v296 + 736);
        *(_QWORD *)(v296 + 368) = v144;
        v29 = Logger.payments.unsafeMutableAddressor();
        v299(v28, v29, v134);
        v30 = v144;
        v136 = swift_allocObject();
        *(_QWORD *)(v136 + 16) = v144;
        v142 = Logger.logObject.getter();
        v143 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v296 + 376) = 12;
        UnsignedInteger<>.init<A>(_:)();
        v135 = *(_DWORD *)(v296 + 864);
        v138 = swift_allocObject();
        *(_BYTE *)(v138 + 16) = 64;
        v139 = swift_allocObject();
        *(_BYTE *)(v139 + 16) = 8;
        v137 = swift_allocObject();
        *(_QWORD *)(v137 + 16) = partial apply for implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
        *(_QWORD *)(v137 + 24) = v136;
        v140 = swift_allocObject();
        *(_QWORD *)(v140 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v140 + 24) = v137;
        _allocateUninitializedArray<A>(_:)();
        v141 = v31;
        swift_retain();
        *v141 = partial apply for closure #1 in OSLogArguments.append(_:);
        v141[1] = v138;
        swift_retain();
        v141[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v141[3] = v139;
        swift_retain();
        v141[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v141[5] = v140;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v142, v143))
        {
          v131 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v130 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v132 = createStorage<A>(capacity:type:)(1);
          v133 = createStorage<A>(capacity:type:)(0);
          v319 = v131;
          v320 = v132;
          v321 = v133;
          serialize(_:at:)(2, &v319);
          serialize(_:at:)(1, &v319);
          v322 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v323 = v138;
          closure #1 in osLogInternal(_:log:type:)(&v322, (uint64_t)&v319, (uint64_t)&v320, (uint64_t)&v321);
          v322 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v323 = v139;
          closure #1 in osLogInternal(_:log:type:)(&v322, (uint64_t)&v319, (uint64_t)&v320, (uint64_t)&v321);
          v322 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v323 = v140;
          closure #1 in osLogInternal(_:log:type:)(&v322, (uint64_t)&v319, (uint64_t)&v320, (uint64_t)&v321);
          _os_log_impl(&dword_24701B000, v142, v143, "#RequestPaymentNeedsValueStrategy Converted PaymentsIntent to SiriKit intent: %@", v131, v135);
          destroyStorage<A>(_:count:)(v132, 1, v130);
          destroyStorage<A>(_:count:)(v133, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v131, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        v128 = *(_QWORD *)(v296 + 776);
        v129 = *(_QWORD *)(v296 + 736);

        v284(v128, v129);
        if (value)
        {
          if (value == SiriPaymentsIntents_RequestPaymentSlots_currencyAmount)
          {
            v124 = (id)ParameterResolutionRecord.intent.getter();
            v123 = objc_msgSend(v144, sel_currencyAmount);
            v33 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("currencyAmount", 0xEuLL, 1)._countAndFlagsBits;
            v122 = (id)MEMORY[0x24957220C](v33);
            swift_bridgeObjectRelease();
            objc_msgSend(v124, sel_setValue_forKeyPath_, v123, v122);

            swift_unknownObjectRelease();
          }
          else
          {
            v120 = (id)ParameterResolutionRecord.intent.getter();
            v121 = objc_msgSend(v144, sel_note);
            if (v121)
            {
              v116 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v117 = v34;

              v118 = v116;
              v119 = v117;
            }
            else
            {
              v118 = 0;
              v119 = 0;
            }
            if (v119)
            {
              v114 = MEMORY[0x24957220C](v118);
              swift_bridgeObjectRelease();
              v115 = v114;
            }
            else
            {
              v115 = 0;
            }
            v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("note", 4uLL, 1)._countAndFlagsBits;
            v113 = (id)MEMORY[0x24957220C](v35);
            swift_bridgeObjectRelease();
            objc_msgSend(v120, sel_setValue_forKeyPath_, v115, v113);

            swift_unknownObjectRelease();
          }
        }
        else
        {
          v127 = (id)ParameterResolutionRecord.intent.getter();
          v126 = objc_msgSend(v144, sel_payer);
          v32 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payer", 5uLL, 1)._countAndFlagsBits;
          v125 = (id)MEMORY[0x24957220C](v32);
          swift_bridgeObjectRelease();
          objc_msgSend(v127, sel_setValue_forKeyPath_, v126, v125);

          swift_unknownObjectRelease();
        }
        v36 = *(_QWORD *)(v296 + 768);
        v100 = *(_QWORD *)(v296 + 736);
        v102 = *(_QWORD *)(v296 + 672);
        v103 = *(_QWORD *)(v296 + 648);
        v101 = *(_QWORD *)(v296 + 560);
        v37 = Logger.payments.unsafeMutableAddressor();
        v299(v36, v37, v100);
        v247(v102, v101, v103);
        v105 = swift_allocObject();
        v252(v105 + ((v248 + 16) & ~(unint64_t)v248), v102, v103);
        v111 = Logger.logObject.getter();
        v112 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v296 + 384) = 12;
        UnsignedInteger<>.init<A>(_:)();
        v104 = *(_DWORD *)(v296 + 868);
        v107 = swift_allocObject();
        *(_BYTE *)(v107 + 16) = 32;
        v108 = swift_allocObject();
        *(_BYTE *)(v108 + 16) = 8;
        v106 = swift_allocObject();
        *(_QWORD *)(v106 + 16) = partial apply for implicit closure #7 in RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
        *(_QWORD *)(v106 + 24) = v105;
        v109 = swift_allocObject();
        *(_QWORD *)(v109 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v109 + 24) = v106;
        _allocateUninitializedArray<A>(_:)();
        v110 = v38;
        swift_retain();
        *v110 = partial apply for closure #1 in OSLogArguments.append(_:);
        v110[1] = v107;
        swift_retain();
        v110[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v110[3] = v108;
        swift_retain();
        v110[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v110[5] = v109;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v111, v112))
        {
          v97 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v96 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v98 = createStorage<A>(capacity:type:)(0);
          v99 = createStorage<A>(capacity:type:)(1);
          v314 = v97;
          v315 = v98;
          v316 = v99;
          serialize(_:at:)(2, &v314);
          serialize(_:at:)(1, &v314);
          v317 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v318 = v107;
          closure #1 in osLogInternal(_:log:type:)(&v317, (uint64_t)&v314, (uint64_t)&v315, (uint64_t)&v316);
          v317 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v318 = v108;
          closure #1 in osLogInternal(_:log:type:)(&v317, (uint64_t)&v314, (uint64_t)&v315, (uint64_t)&v316);
          v317 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v318 = v109;
          closure #1 in osLogInternal(_:log:type:)(&v317, (uint64_t)&v314, (uint64_t)&v315, (uint64_t)&v316);
          _os_log_impl(&dword_24701B000, v111, v112, "#RequestPaymentNeedsValueStrategy Returning intent: %s", v97, v104);
          destroyStorage<A>(_:count:)(v98, 0, v96);
          destroyStorage<A>(_:count:)(v99, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v97, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        v89 = *(_QWORD *)(v296 + 768);
        v90 = *(_QWORD *)(v296 + 736);
        v94 = *(_QWORD *)(v296 + 640);
        v95 = *(_QWORD *)(v296 + 616);
        v93 = *(_QWORD *)(v296 + 544);

        v284(v89, v90);
        v91 = (id)ParameterResolutionRecord.intent.getter();
        *(_QWORD *)(v296 + 160) = &type metadata for RequestPaymentSlots;
        *(_QWORD *)(v296 + 168) = &protocol witness table for RequestPaymentSlots;
        *(_BYTE *)(v296 + 136) = value;
        v92 = type metadata accessor for INRequestPaymentIntent();
        SiriKitPaymentsIntent.value(forSlot:)((_QWORD *)(v296 + 136), v92, &v313);
        __swift_destroy_boxed_opaque_existential_0(v296 + 136);

        IntentPromptAnswer.init(answeredValue:updatedIntent:)();
        v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INRequestPaymentIntent>);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v93, 0, 1);
        v154(v94, v95);
      }
      else
      {
        v40 = *(_QWORD *)(v296 + 760);
        v84 = *(_QWORD *)(v296 + 736);
        v41 = Logger.payments.unsafeMutableAddressor();
        v299(v40, v41, v84);
        v87 = Logger.logObject.getter();
        v86 = static os_log_type_t.error.getter();
        *(_QWORD *)(v296 + 328) = 2;
        UnsignedInteger<>.init<A>(_:)();
        v85 = *(_DWORD *)(v296 + 860);
        v88 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v87, v86))
        {
          v80 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v79 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v81 = createStorage<A>(capacity:type:)(0);
          v82 = createStorage<A>(capacity:type:)(0);
          *(_QWORD *)(v296 + 336) = v80;
          *(_QWORD *)(v296 + 344) = v81;
          *(_QWORD *)(v296 + 352) = v82;
          serialize(_:at:)(0, (_BYTE **)(v296 + 336));
          serialize(_:at:)(0, (_BYTE **)(v296 + 336));
          *(_QWORD *)(v296 + 360) = v88;
          v83 = (_QWORD *)swift_task_alloc();
          v83[2] = v296 + 336;
          v83[3] = v296 + 344;
          v83[4] = v296 + 352;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_24701B000, v87, v86, "#RequestPaymentNeedsValueStrategy parseResponseValue failed to interpret user response as expected Send response. Reprompt with previous state", v80, v85);
          destroyStorage<A>(_:count:)(v81, 0, v79);
          destroyStorage<A>(_:count:)(v82, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v80, MEMORY[0x24BEE4260]);
        }
        swift_bridgeObjectRelease();
        v74 = *(_QWORD *)(v296 + 760);
        v75 = *(_QWORD *)(v296 + 736);
        v77 = *(_QWORD *)(v296 + 640);
        v78 = *(_QWORD *)(v296 + 616);
        v76 = *(_QWORD *)(v296 + 544);

        v284(v74, v75);
        v309 = 0;
        v310 = 0;
        v311 = 0;
        v312 = 0;
        ParameterResolutionRecord.intent.getter();
        type metadata accessor for INRequestPaymentIntent();
        IntentPromptAnswer.init(answeredValue:updatedIntent:)();
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INRequestPaymentIntent>);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v76, 0, 1);
        v154(v77, v78);
      }
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v296 + 264) + 8))();
  }
}

uint64_t implicit closure #7 in RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);
  ParameterResolutionRecord.intent.getter();
  type metadata accessor for INRequestPaymentIntent();
  lazy protocol witness table accessor for type INRequestPaymentIntent and conformance NSObject();
  return String.init<A>(describing:)();
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance RequestPaymentNeedsValueStrategy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return RequestPaymentNeedsValueStrategy.actionForInput(_:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.parseValueResponse(input:resolveRecord:) in conformance RequestPaymentNeedsValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makePromptForValue(resolveRecord:) in conformance RequestPaymentNeedsValueStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:)(a1, a2);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:) in conformance RequestPaymentNeedsValueStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for RequestPaymentNeedsValueStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:)();
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:) in conformance RequestPaymentNeedsValueStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for RequestPaymentNeedsValueStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:)();
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance RequestPaymentNeedsValueStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for RequestPaymentNeedsValueStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)();
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance RequestPaymentNeedsValueStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for RequestPaymentNeedsValueStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)();
}

uint64_t sub_247185F6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247185FE0()
{
  return swift_deallocObject();
}

uint64_t sub_247186008()
{
  return swift_deallocObject();
}

uint64_t sub_247186030()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24718606C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471860A8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_24718611C()
{
  return swift_deallocObject();
}

uint64_t sub_247186144()
{
  return swift_deallocObject();
}

uint64_t sub_24718616C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471861A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471861E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Input() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247186254()
{
  return swift_deallocObject();
}

uint64_t sub_24718627C()
{
  return swift_deallocObject();
}

uint64_t sub_2471862A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471862E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24718631C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247186390()
{
  return swift_deallocObject();
}

uint64_t sub_2471863B8()
{
  return swift_deallocObject();
}

uint64_t sub_2471863E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24718641C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247186458()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_247186494()
{
  return swift_deallocObject();
}

uint64_t sub_2471864BC()
{
  return swift_deallocObject();
}

uint64_t sub_2471864E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247186520()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24718655C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);
  return implicit closure #7 in RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)();
}

uint64_t sub_247186604()
{
  return swift_deallocObject();
}

uint64_t sub_24718662C()
{
  return swift_deallocObject();
}

uint64_t sub_247186654()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247186690()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471866CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Parse.DirectInvocation() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_24718673C()
{
  return swift_deallocObject();
}

uint64_t sub_247186764()
{
  return swift_deallocObject();
}

uint64_t sub_24718678C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471867C8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247186804()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_247186840()
{
  return swift_deallocObject();
}

uint64_t sub_247186868()
{
  return swift_deallocObject();
}

uint64_t sub_247186890()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for RequestPaymentNeedsValueStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for RequestPaymentNeedsValueStrategy;
  if (!type metadata singleton initialization cache for RequestPaymentNeedsValueStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

unint64_t base witness table accessor for ParameterResolutionHandlingAsync in RequestPaymentNeedsValueStrategy()
{
  return lazy protocol witness table accessor for type RequestPaymentNeedsValueStrategy and conformance RequestPaymentNeedsValueStrategy();
}

uint64_t static PaymentIntentCATResponseCode.from(_:)(unint64_t a1)
{
  if (a1 <= 0xD)
    __asm { BR              X8 }
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UNSPECIFIED", 0xBuLL, 1)._countAndFlagsBits;
}

{
  if (a1 <= 0xC)
    __asm { BR              X8 }
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UNSPECIFIED", 0xBuLL, 1)._countAndFlagsBits;
}

{
  if (a1 <= 9)
    __asm { BR              X8 }
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UNSPECIFIED", 0xBuLL, 1)._countAndFlagsBits;
}

uint64_t static PaymentIntentCATResponseCode.from(_:)(uint64_t a1)
{
  switch(a1)
  {
    case 1:
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PAYMENTS_AMOUNT_BELOW_MINIMUM", 0x1DuLL, 1)._countAndFlagsBits;
    case 2:
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PAYMENTS_AMOUNT_ABOVE_MAXIMUM", 0x1DuLL, 1)._countAndFlagsBits;
    case 3:
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PAYMENTS_CURRENCY_UNSUPPORTED", 0x1DuLL, 1)._countAndFlagsBits;
    default:
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UNSPECIFIED", 0xBuLL, 1)._countAndFlagsBits;
  }
}

{
  switch(a1)
  {
    case 1:
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CREDENTIALS_UNVERIFIED", 0x16uLL, 1)._countAndFlagsBits;
    case 2:
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NO_BANK_ACCOUNT", 0xFuLL, 1)._countAndFlagsBits;
    case 3:
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NO_ACCOUNT", 0xAuLL, 1)._countAndFlagsBits;
    default:
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UNSPECIFIED", 0xBuLL, 1)._countAndFlagsBits;
  }
}

{
  if ((unint64_t)(a1 - 1) <= 3)
    __asm { BR              X8 }
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UNSPECIFIED", 0xBuLL, 1)._countAndFlagsBits;
}

ValueMetadata *type metadata accessor for PaymentIntentCATResponseCode()
{
  return &type metadata for PaymentIntentCATResponseCode;
}

uint64_t CommonLabelsProvider.cancel()()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = CommonLabelsProvider.cancel();
  return static LabelTemplates.cancel()();
}

_QWORD *CommonLabelsProvider.cancel()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = *v3;
  v7 = (_QWORD *)(v4 + 16);
  v5 = swift_task_dealloc();
  if (v2)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v5);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*v7 + 8))(v7, a1, a2);
}

uint64_t CommonLabelsProvider.no()()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = CommonLabelsProvider.cancel();
  return static LabelTemplates.no()();
}

uint64_t CommonLabelsProvider.yes()()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = CommonLabelsProvider.cancel();
  return static LabelTemplates.yes()();
}

uint64_t CommonLabelsProvider.openApp(_:locale:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[8] = a2;
  v2[7] = a1;
  v2[4] = v2;
  v2[5] = 0;
  v2[6] = 0;
  v2[2] = 0;
  v2[3] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  v2[5] = a1;
  v2[6] = a2;
  return swift_task_switch();
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;

  v4 = (_QWORD *)*v3;
  v4[4] = *v3;
  v4 += 4;
  v6 = v4 - 2;
  v4[9] = v2;
  v4[10] = a1;
  v4[11] = a2;
  swift_task_dealloc();
  if (!v2)
    outlined destroy of AppDisplayInfo?(v6[7]);
  return swift_task_switch();
}

uint64_t CommonLabelsProvider.openApp(_:locale:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  const void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v7 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 32) = v0;
  v8 = type metadata accessor for AppDisplayInfo();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v9(v7, 1);
  type metadata accessor for AppInformationResolver();
  swift_retain();
  AppInformationResolver.__allocating_init(app:)();
  v10 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  v11 = v1;
  swift_release();
  if (v11)
  {
    v5 = *(void **)(v6 + 88);
    v4 = *(const void **)(v6 + 80);
    *(_QWORD *)(v6 + 16) = v10;
    *(_QWORD *)(v6 + 24) = v11;
    App.isFirstParty.getter();
    AppDisplayInfo.init(displayName:isFirstParty:)();
    ((void (*)(const void *, _QWORD, uint64_t, uint64_t))v9)(v4, 0, 1, v8);
    outlined assign with take of AppDisplayInfo?(v4, v5);
  }
  outlined init with copy of AppDisplayInfo?(*(const void **)(v6 + 88), *(void **)(v6 + 72));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 96) = v2;
  *v2 = *(_QWORD *)(v6 + 32);
  v2[1] = CommonLabelsProvider.openApp(_:locale:);
  return static LabelTemplates.openApp(appDisplayInfo:)();
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[11];
  v0[4] = v0;
  outlined destroy of AppDisplayInfo?(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[4] + 8))(v0[14], v0[15]);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = v0[11];
  v1 = v0[9];
  v0[4] = v0;
  outlined destroy of AppDisplayInfo?(v1);
  outlined destroy of AppDisplayInfo?(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[4] + 8))();
}

void *outlined assign with take of AppDisplayInfo?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(const void *, uint64_t, uint64_t);

  v7 = type metadata accessor for AppDisplayInfo();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a2, 1))
  {
    if (v9(a1, 1, v7))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a2, a1, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
    }
  }
  else if (v9(a1, 1, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a2, v7);
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a2, a1, v7);
  }
  return a2;
}

uint64_t protocol witness for CommonLabelsProviding.cancel() in conformance CommonLabelsProvider()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = CommonLabelsProvider.cancel();
  return CommonLabelsProvider.cancel()();
}

uint64_t protocol witness for CommonLabelsProviding.no() in conformance CommonLabelsProvider()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = CommonLabelsProvider.cancel();
  return CommonLabelsProvider.no()();
}

uint64_t protocol witness for CommonLabelsProviding.yes() in conformance CommonLabelsProvider()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = CommonLabelsProvider.cancel();
  return CommonLabelsProvider.yes()();
}

uint64_t protocol witness for CommonLabelsProviding.openApp(_:locale:) in conformance CommonLabelsProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = CommonLabelsProvider.cancel();
  return CommonLabelsProvider.openApp(_:locale:)(a1, a2);
}

ValueMetadata *type metadata accessor for CommonLabelsProvider()
{
  return &type metadata for CommonLabelsProvider;
}

uint64_t PaymentsFlow.flowState.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;

  v3 = (const void *)(v1 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
  swift_beginAccess();
  outlined init with copy of PaymentsFlowState(v3, a1);
  return swift_endAccess();
}

void *outlined init with copy of PaymentsFlowState(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;

  v6 = type metadata accessor for PaymentsFlowState();
  if (swift_getEnumCaseMultiPayload() <= 2)
  {
    v2 = type metadata accessor for Input();
    (*(void (**)(void *, const void *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  return a2;
}

uint64_t type metadata accessor for PaymentsFlowState()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for PaymentsFlowState;
  if (!type metadata singleton initialization cache for PaymentsFlowState)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t PaymentsFlow.flowState.setter(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  unint64_t v4;
  char *v5;
  void *v6;
  char *v7;
  uint64_t v8;
  char v9;

  v8 = a1;
  v4 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for PaymentsFlowState() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (const void *)MEMORY[0x24BDAC7A8](v8);
  v5 = (char *)&v4 - v4;
  outlined init with copy of PaymentsFlowState(v2, (char *)&v4 - v4);
  v6 = (void *)(v1 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
  v7 = &v9;
  swift_beginAccess();
  outlined assign with take of PaymentsFlowState(v5, v6);
  swift_endAccess();
  return outlined destroy of PaymentsFlowState(v8);
}

void *outlined assign with take of PaymentsFlowState(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;

  if (a2 != a1)
  {
    outlined destroy of PaymentsFlowState((uint64_t)a2);
    v4 = type metadata accessor for PaymentsFlowState();
    if (swift_getEnumCaseMultiPayload() <= 2)
    {
      v2 = type metadata accessor for Input();
      (*(void (**)(void *, const void *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a2;
}

uint64_t outlined destroy of PaymentsFlowState(uint64_t a1)
{
  uint64_t v1;

  type metadata accessor for PaymentsFlowState();
  if (swift_getEnumCaseMultiPayload() <= 2)
  {
    v1 = type metadata accessor for Input();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  }
  return a1;
}

uint64_t (*PaymentsFlow.flowState.modify())()
{
  swift_beginAccess();
  return PaymentsAppResolutionFlowStrategy.appResolutionService.modify;
}

uint64_t PaymentsFlow.__allocating_init(flowFactory:)(uint64_t a1)
{
  swift_allocObject();
  return PaymentsFlow.init(flowFactory:)(a1);
}

uint64_t PaymentsFlow.init(flowFactory:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[40];
  uint64_t v24;
  uint64_t v25;

  v21 = a1;
  v25 = 0;
  v24 = 0;
  v9 = 0;
  v19 = type metadata accessor for PaymentsFlowState();
  v8 = (*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v20 = (char *)&v8 - v8;
  v13 = type metadata accessor for UnlockDevicePolicy();
  v11 = *(_QWORD *)(v13 - 8);
  v10 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v8 - v10;
  v25 = v2;
  v24 = v1;
  v17 = OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_restrictionGuards;
  v16 = type metadata accessor for CommonFlowGuard();
  v15 = _allocateUninitializedArray<A>(_:)();
  v14 = v3;
  static UnlockDevicePolicy.requiringDeviceUnlock.getter();
  static CommonFlowGuard.ensuringDeviceIsAuthenticated(using:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v12, v13);
  static CommonFlowGuard.disallowInSharingMode.getter();
  v4 = v15;
  _finalizeUninitializedArray<A>(_:)();
  v5 = v4;
  v6 = v21;
  *(_QWORD *)(v1 + v17) = v5;
  v18 = v23;
  outlined init with copy of GlobalsProviding(v6, (uint64_t)v23);
  outlined init with take of CommonLabelsProviding(v18, (void *)(v1 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowFactory));
  swift_storeEnumTagMultiPayload();
  outlined init with take of PaymentsFlowState(v20, (void *)(v1 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState));
  __swift_destroy_boxed_opaque_existential_0(v21);
  return v22;
}

void *outlined init with take of PaymentsFlowState(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;

  v6 = type metadata accessor for PaymentsFlowState();
  if (swift_getEnumCaseMultiPayload() <= 2)
  {
    v2 = type metadata accessor for Input();
    (*(void (**)(void *, const void *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  return a2;
}

uint64_t PaymentsFlow.on(input:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t *v46;
  _BYTE **v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint32_t v51;
  int v52;
  NSObject *v53;
  uint64_t v54;
  void *v55;
  char *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t *v65;
  uint64_t *v66;
  _BYTE **v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint32_t v71;
  int v72;
  NSObject *v73;
  _BYTE *v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  const void *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE **v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  unint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  char *v107;
  _QWORD *v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t, uint64_t);
  uint64_t v111;
  void (*v112)(char *, uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t *v120;
  unint64_t v121;
  uint32_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  NSObject *v134;
  int v135;
  uint64_t (*v136)(uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _BYTE *v140[2];
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  char v144;
  uint64_t v145;
  uint32_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _BYTE *v150[2];
  uint32_t v151;
  char v152;
  uint64_t v153;
  uint32_t v154;
  uint64_t v155;
  uint64_t v156;

  v111 = a1;
  v156 = 0;
  v155 = 0;
  v90 = 0;
  v98 = 0;
  v91 = type metadata accessor for PaymentsFlowState();
  v92 = (*(_QWORD *)(*(_QWORD *)(v91 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = MEMORY[0x24BDAC7A8](0);
  v93 = (char *)&v38 - v92;
  v94 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v1);
  v95 = (char *)&v38 - v94;
  v96 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v97 = (char *)&v38 - v96;
  v117 = type metadata accessor for Input();
  v114 = *(_QWORD *)(v117 - 8);
  v113 = *(_QWORD *)(v114 + 64);
  v99 = (v113 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v98);
  v116 = (char *)&v38 - v99;
  v109 = type metadata accessor for Logger();
  v108 = *(_QWORD **)(v109 - 8);
  v104 = v108[8];
  v101 = (v104 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v111);
  v102 = (char *)&v38 - v101;
  v103 = (v104 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v105 = (char *)&v38 - v103;
  v106 = (v104 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v38 - v106;
  v107 = (char *)&v38 - v106;
  v156 = v7;
  v155 = v9;
  v10 = Logger.payments.unsafeMutableAddressor();
  v110 = (void (*)(char *, uint64_t, uint64_t))v108[2];
  v110(v8, v10, v109);
  v112 = *(void (**)(char *, uint64_t, uint64_t))(v114 + 16);
  v112(v116, v111, v117);
  v115 = (*(unsigned __int8 *)(v114 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80);
  v125 = 7;
  v126 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v114 + 32))(v126 + v115, v116, v117);
  v134 = Logger.logObject.getter();
  v135 = static os_log_type_t.debug.getter();
  v120 = &v153;
  v153 = 12;
  v118 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v119 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v121 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v122 = v154;
  v123 = 17;
  v128 = swift_allocObject();
  *(_BYTE *)(v128 + 16) = 32;
  v129 = swift_allocObject();
  *(_BYTE *)(v129 + 16) = 8;
  v124 = 32;
  v11 = swift_allocObject();
  v12 = v126;
  v127 = v11;
  *(_QWORD *)(v11 + 16) = partial apply for implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseConfirmationResponse(input:);
  *(_QWORD *)(v11 + 24) = v12;
  v13 = swift_allocObject();
  v14 = v127;
  v131 = v13;
  *(_QWORD *)(v13 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v13 + 24) = v14;
  v133 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v130 = _allocateUninitializedArray<A>(_:)();
  v132 = v15;
  swift_retain();
  v16 = v128;
  v17 = v132;
  *v132 = partial apply for closure #1 in OSLogArguments.append(_:);
  v17[1] = v16;
  swift_retain();
  v18 = v129;
  v19 = v132;
  v132[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v19[3] = v18;
  swift_retain();
  v20 = v131;
  v21 = v132;
  v132[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v21[5] = v20;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v134, (os_log_type_t)v135))
  {
    v22 = v90;
    v83 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v82 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v84 = createStorage<A>(capacity:type:)(0);
    v85 = createStorage<A>(capacity:type:)(1);
    v86 = v140;
    v140[0] = v83;
    v87 = &v139;
    v139 = v84;
    v88 = &v138;
    v138 = v85;
    serialize(_:at:)(2, v140);
    serialize(_:at:)(1, v86);
    v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v137 = v128;
    closure #1 in osLogInternal(_:log:type:)(&v136, (uint64_t)v86, (uint64_t)v87, (uint64_t)v88);
    v89 = v22;
    if (v22)
    {
      __break(1u);
    }
    else
    {
      v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v137 = v129;
      closure #1 in osLogInternal(_:log:type:)(&v136, (uint64_t)v140, (uint64_t)&v139, (uint64_t)&v138);
      v80 = 0;
      v24 = v80;
      v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v137 = v131;
      closure #1 in osLogInternal(_:log:type:)(&v136, (uint64_t)v140, (uint64_t)&v139, (uint64_t)&v138);
      v79 = v24;
      _os_log_impl(&dword_24701B000, v134, (os_log_type_t)v135, "#PaymentsFlow on(input:): %s", v83, v122);
      destroyStorage<A>(_:count:)(v84, 0, v82);
      destroyStorage<A>(_:count:)(v85, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v83, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v81 = v79;
    }
  }
  else
  {
    v23 = v90;
    swift_release();
    swift_release();
    swift_release();
    v81 = v23;
  }
  v75 = v81;

  v76 = (void (*)(char *, uint64_t))v108[1];
  v76(v107, v109);
  v77 = (const void *)(v100 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
  v78 = &v152;
  swift_beginAccess();
  outlined init with copy of PaymentsFlowState(v77, v97);
  swift_endAccess();
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v25 = v105;
    outlined destroy of PaymentsFlowState((uint64_t)v97);
    v26 = Logger.payments.unsafeMutableAddressor();
    v110(v25, v26, v109);
    v73 = Logger.logObject.getter();
    v72 = static os_log_type_t.debug.getter();
    v145 = 2;
    UnsignedInteger<>.init<A>(_:)();
    v71 = v146;
    v74 = (_BYTE *)_allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v73, (os_log_type_t)v72))
    {
      v27 = v75;
      v61 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v60 = 0;
      v62 = createStorage<A>(capacity:type:)(0);
      v63 = createStorage<A>(capacity:type:)(v60);
      v67 = &v143;
      v143 = v61;
      v68 = &v142;
      v142 = v62;
      v65 = &v141;
      v141 = v63;
      v64 = 0;
      serialize(_:at:)(0, &v143);
      serialize(_:at:)(v64, v67);
      v140[1] = v74;
      v66 = &v38;
      MEMORY[0x24BDAC7A8](&v38);
      v28 = v68;
      v29 = &v38 - 6;
      v69 = &v38 - 6;
      v29[2] = (uint64_t)v67;
      v29[3] = (uint64_t)v28;
      v29[4] = v30;
      v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v27)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_24701B000, v73, (os_log_type_t)v72, "#PaymentsFlow moving flow states from .initialized to .runningGuardFlow", v61, v71);
        v58 = 0;
        destroyStorage<A>(_:count:)(v62, 0, v59);
        destroyStorage<A>(_:count:)(v63, v58, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v61, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    v76(v105, v109);
    v112(v95, v111, v117);
    swift_storeEnumTagMultiPayload();
    outlined init with copy of PaymentsFlowState(v95, v93);
    v55 = (void *)(v100 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
    v56 = &v144;
    swift_beginAccess();
    outlined assign with take of PaymentsFlowState(v93, v55);
    swift_endAccess();
    outlined destroy of PaymentsFlowState((uint64_t)v95);
    v57 = 1;
  }
  else
  {
    v31 = v102;
    outlined destroy of PaymentsFlowState((uint64_t)v97);
    v32 = Logger.payments.unsafeMutableAddressor();
    v110(v31, v32, v109);
    v53 = Logger.logObject.getter();
    v52 = static os_log_type_t.error.getter();
    v150[1] = (_BYTE *)2;
    UnsignedInteger<>.init<A>(_:)();
    v51 = v151;
    v54 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v53, (os_log_type_t)v52))
    {
      v33 = v75;
      v41 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v40 = 0;
      v42 = createStorage<A>(capacity:type:)(0);
      v43 = createStorage<A>(capacity:type:)(v40);
      v47 = v150;
      v150[0] = v41;
      v48 = &v149;
      v149 = v42;
      v45 = &v148;
      v148 = v43;
      v44 = 0;
      serialize(_:at:)(0, v150);
      serialize(_:at:)(v44, v47);
      v147 = v54;
      v46 = &v38;
      MEMORY[0x24BDAC7A8](&v38);
      v34 = v48;
      v35 = &v38 - 6;
      v49 = &v38 - 6;
      v35[2] = (uint64_t)v47;
      v35[3] = (uint64_t)v34;
      v35[4] = v36;
      v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v33)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_24701B000, v53, (os_log_type_t)v52, "#PaymentsFlow on(input:) was invoked while in an unexpected flow state, returning false", v41, v51);
        v38 = 0;
        destroyStorage<A>(_:count:)(v42, 0, v39);
        destroyStorage<A>(_:count:)(v43, v38, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v41, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    v76(v102, v109);
    v57 = 0;
  }
  return v57 & 1;
}

uint64_t sub_24718979C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Input() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t PaymentsFlow.execute(completion:)()
{
  type metadata accessor for PaymentsFlow();
  lazy protocol witness table accessor for type PaymentsFlow and conformance PaymentsFlow();
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t PaymentsFlow.execute()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[79] = v1;
  v2[78] = a1;
  v2[28] = v2;
  v2[29] = 0;
  v2[36] = 0;
  v2[40] = 0;
  v2[42] = 0;
  v2[48] = 0;
  v2[49] = 0;
  v2[61] = 0;
  v2[62] = 0;
  v3 = type metadata accessor for Parse();
  v2[80] = v3;
  v2[81] = *(_QWORD *)(v3 - 8);
  v2[82] = swift_task_alloc();
  v2[83] = swift_task_alloc();
  v4 = type metadata accessor for Input();
  v2[84] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[85] = v5;
  v2[86] = *(_QWORD *)(v5 + 64);
  v2[87] = swift_task_alloc();
  v2[88] = swift_task_alloc();
  v2[89] = swift_task_alloc();
  v2[90] = swift_task_alloc();
  v2[91] = type metadata accessor for PaymentsFlowState();
  v2[92] = swift_task_alloc();
  v2[93] = swift_task_alloc();
  v2[94] = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  v2[95] = v6;
  v2[96] = *(_QWORD *)(v6 - 8);
  v2[97] = swift_task_alloc();
  v2[98] = swift_task_alloc();
  v2[99] = swift_task_alloc();
  v2[100] = swift_task_alloc();
  v2[101] = swift_task_alloc();
  v2[102] = swift_task_alloc();
  v2[103] = swift_task_alloc();
  v2[104] = swift_task_alloc();
  v2[105] = swift_task_alloc();
  v2[106] = swift_task_alloc();
  v2[107] = swift_task_alloc();
  v2[29] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[28] = *v2;
  v3 += 28;
  v5 = v3 - 26;
  v3[87] = a1;
  v3[88] = v1;
  swift_task_dealloc();
  if (!v1)
    (*(void (**)(_QWORD, _QWORD))(v5[79] + 8))(v5[81], v5[78]);
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[28] = *v2;
  v3 += 28;
  v5 = v3 - 26;
  v3[91] = a1;
  v3[92] = v1;
  swift_task_dealloc();
  if (!v1)
    (*(void (**)(_QWORD, _QWORD))(v5[79] + 8))(v5[80], v5[78]);
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[28] = *v2;
  v3[122] = a1;
  v3[123] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

void PaymentsFlow.execute()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  const void *v9;
  void *v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint32_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 856);
  v17 = *(_QWORD *)(v0 + 768);
  v18 = *(_QWORD *)(v0 + 760);
  *(_QWORD *)(v0 + 224) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  *(_QWORD *)(v0 + 864) = v19;
  v19(v1, v2, v18);
  v22 = Logger.logObject.getter();
  v21 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 240) = 2;
  *(_QWORD *)(v0 + 872) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 880) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 888) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v20 = *(_DWORD *)(v0 + 992);
  *(_QWORD *)(v0 + 896) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v23 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v22, v21))
  {
    v12 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v13 = createStorage<A>(capacity:type:)(0);
    v14 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v16 + 592) = v12;
    *(_QWORD *)(v16 + 600) = v13;
    *(_QWORD *)(v16 + 608) = v14;
    serialize(_:at:)(0, (_BYTE **)(v16 + 592));
    serialize(_:at:)(0, (_BYTE **)(v16 + 592));
    *(_QWORD *)(v16 + 616) = v23;
    v15 = (_QWORD *)swift_task_alloc();
    v15[2] = v16 + 592;
    v15[3] = v16 + 600;
    v15[4] = v16 + 608;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v22, v21, "#PaymentsFlow running execute()", v12, v20);
    destroyStorage<A>(_:count:)(v13, 0, v11);
    destroyStorage<A>(_:count:)(v14, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v12, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v16 + 856);
  v4 = *(_QWORD *)(v16 + 768);
  v6 = *(_QWORD *)(v16 + 760);
  v10 = *(void **)(v16 + 752);
  v8 = *(_QWORD *)(v16 + 632);

  v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v16 + 904) = v7;
  v7(v5, v6);
  v9 = (const void *)(v8 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
  swift_beginAccess();
  outlined init with copy of PaymentsFlowState(v9, v10);
  swift_endAccess();
  v3 = (char *)&loc_247189EF4 + dword_24718AD34[swift_getEnumCaseMultiPayload()];
  __asm { BR              X8 }
}

uint64_t PaymentsFlow.execute()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint32_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  NSObject *log;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v46;
  NSObject *oslog;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  void *v52;
  void *v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint8_t *buf;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint32_t v66;
  os_log_type_t v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;

  v0[28] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  v71 = v0[116];
  v72 = v0[115];
  if (!v72)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v70 + 680) + 8))(*(_QWORD *)(v70 + 704), *(_QWORD *)(v70 + 672));
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 864);
    v6 = *(_QWORD *)(v70 + 792);
    v21 = *(_QWORD *)(v70 + 760);
    v24 = *(_QWORD *)(v70 + 632);
    v7 = Logger.payments.unsafeMutableAddressor();
    v22(v6, v7, v21);
    swift_retain();
    log = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    *(_QWORD *)(v70 + 304) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v23 = *(_DWORD *)(v70 + 1004);
    v26 = swift_allocObject();
    *(_BYTE *)(v26 + 16) = 32;
    v27 = swift_allocObject();
    *(_BYTE *)(v27 + 16) = 8;
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = partial apply for implicit closure #2 in PaymentsFlow.execute();
    *(_QWORD *)(v25 + 24) = v24;
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v28 + 24) = v25;
    _allocateUninitializedArray<A>(_:)();
    v29 = v8;
    swift_retain();
    *v29 = partial apply for closure #1 in OSLogArguments.append(_:);
    v29[1] = v26;
    swift_retain();
    v29[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v29[3] = v27;
    swift_retain();
    v29[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v29[5] = v28;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v31))
    {
      v18 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v19 = createStorage<A>(capacity:type:)(0);
      v20 = createStorage<A>(capacity:type:)(1);
      v73 = v18;
      v74 = v19;
      v75 = v20;
      serialize(_:at:)(2, &v73);
      serialize(_:at:)(1, &v73);
      v76 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v77 = v26;
      result = closure #1 in osLogInternal(_:log:type:)(&v76, (uint64_t)&v73, (uint64_t)&v74, (uint64_t)&v75);
      if (v71)
        return result;
      v76 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v77 = v27;
      closure #1 in osLogInternal(_:log:type:)(&v76, (uint64_t)&v73, (uint64_t)&v74, (uint64_t)&v75);
      v76 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v77 = v28;
      closure #1 in osLogInternal(_:log:type:)(&v76, (uint64_t)&v73, (uint64_t)&v74, (uint64_t)&v75);
      _os_log_impl(&dword_24701B000, log, v31, "#PaymentsFlow flowState machine unexpectedly failed to determine next state for current: %s", v18, v23);
      destroyStorage<A>(_:count:)(v19, 0, v17);
      destroyStorage<A>(_:count:)(v20, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v18, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v12 = *(void (**)(uint64_t, uint64_t))(v70 + 904);
    v10 = *(_QWORD *)(v70 + 792);
    v11 = *(_QWORD *)(v70 + 760);
    v13 = *(_QWORD *)(v70 + 632);

    v12(v10, v11);
    outlined init with copy of GlobalsProviding(v13 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowFactory, v70 + 56);
    v16 = *(_QWORD *)(v70 + 80);
    v14 = *(_QWORD *)(v70 + 88);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v70 + 56), v16);
    v15 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v14 + 56) + **(int **)(v14 + 56));
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v70 + 968) = v9;
    *v9 = *(_QWORD *)(v70 + 224);
    v9[1] = PaymentsFlow.execute();
    return v15(v16, v14);
  }
  *(_QWORD *)(v70 + 392) = v72;
  if ((dispatch thunk of AnyFlow.on(input:)() & 1) == 0)
  {
    v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 864);
    v4 = *(_QWORD *)(v70 + 824);
    v43 = *(_QWORD *)(v70 + 760);
    v5 = Logger.payments.unsafeMutableAddressor();
    v44(v4, v5, v43);
    oslog = Logger.logObject.getter();
    v46 = static os_log_type_t.error.getter();
    *(_QWORD *)(v70 + 400) = 2;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v70 + 1020);
    v48 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v46))
    {
      v39 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v40 = createStorage<A>(capacity:type:)(0);
      v41 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v70 + 408) = v39;
      *(_QWORD *)(v70 + 416) = v40;
      *(_QWORD *)(v70 + 424) = v41;
      serialize(_:at:)(0, (_BYTE **)(v70 + 408));
      serialize(_:at:)(0, (_BYTE **)(v70 + 408));
      *(_QWORD *)(v70 + 432) = v48;
      v42 = (_QWORD *)swift_task_alloc();
      v42[2] = v70 + 408;
      v42[3] = v70 + 416;
      v42[4] = v70 + 424;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v71)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24701B000, oslog, v46, "#PaymentsFlow RCHFlow.on() returned false", v39, size);
      destroyStorage<A>(_:count:)(v40, 0, v38);
      destroyStorage<A>(_:count:)(v41, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v39, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v34 = *(void (**)(uint64_t, uint64_t))(v70 + 904);
    v32 = *(_QWORD *)(v70 + 824);
    v33 = *(_QWORD *)(v70 + 760);
    v36 = *(_QWORD *)(v70 + 704);
    v35 = *(_QWORD *)(v70 + 680);
    v37 = *(_QWORD *)(v70 + 672);

    v34(v32, v33);
    static ExecuteResponse.complete()();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v37);
    goto LABEL_21;
  }
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 864);
  v1 = *(_QWORD *)(v70 + 832);
  v64 = *(_QWORD *)(v70 + 760);
  v2 = Logger.payments.unsafeMutableAddressor();
  v65(v1, v2, v64);
  v68 = Logger.logObject.getter();
  v67 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v70 + 440) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v66 = *(_DWORD *)(v70 + 1024);
  v69 = _allocateUninitializedArray<A>(_:)();
  if (!os_log_type_enabled(v68, v67))
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
  v61 = createStorage<A>(capacity:type:)(0);
  v62 = createStorage<A>(capacity:type:)(0);
  *(_QWORD *)(v70 + 456) = buf;
  *(_QWORD *)(v70 + 464) = v61;
  *(_QWORD *)(v70 + 472) = v62;
  serialize(_:at:)(0, (_BYTE **)(v70 + 456));
  serialize(_:at:)(0, (_BYTE **)(v70 + 456));
  *(_QWORD *)(v70 + 480) = v69;
  v63 = (_QWORD *)swift_task_alloc();
  v63[2] = v70 + 456;
  v63[3] = v70 + 464;
  v63[4] = v70 + 472;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
  lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  result = Sequence.forEach(_:)();
  if (!v71)
  {
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v68, v67, "#PaymentsFlow obtained anyFlow from FlowFactory, pushing it to the next state", buf, v66);
    destroyStorage<A>(_:count:)(v61, 0, v59);
    destroyStorage<A>(_:count:)(v62, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
LABEL_8:
    v51 = *(void (**)(uint64_t, uint64_t))(v70 + 904);
    v49 = *(_QWORD *)(v70 + 832);
    v50 = *(_QWORD *)(v70 + 760);
    v54 = *(const void **)(v70 + 744);
    v52 = *(void **)(v70 + 736);
    v57 = *(_QWORD *)(v70 + 704);
    v56 = *(_QWORD *)(v70 + 680);
    v58 = *(_QWORD *)(v70 + 672);
    v55 = *(_QWORD *)(v70 + 632);

    v51(v49, v50);
    (*(void (**)(const void *, uint64_t, uint64_t))(v56 + 16))(v54, v57, v58);
    swift_storeEnumTagMultiPayload();
    outlined init with copy of PaymentsFlowState(v54, v52);
    v53 = (void *)(v55 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
    swift_beginAccess();
    outlined assign with take of PaymentsFlowState(v52, v53);
    swift_endAccess();
    outlined destroy of PaymentsFlowState((uint64_t)v54);
    *(_QWORD *)(v70 + 448) = v72;
    swift_allocObject();
    swift_retain();
    swift_weakInit();
    swift_release();
    swift_retain();
    swift_release();
    type metadata accessor for AnyFlow();
    static ExecuteResponse.ongoing<A>(next:childCompletion:)();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v57, v58);
LABEL_21:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v70 + 224) + 8))();
  }
  return result;
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint32_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  NSObject *log;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(unint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  NSObject *oslog;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint8_t *buf;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  uint32_t v74;
  os_log_type_t v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;

  v0[28] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  v79 = v0[120];
  v80 = v0[119];
  if (!v80)
  {
    v51 = *(void (**)(unint64_t, uint64_t, uint64_t))(v78 + 936);
    v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 864);
    v4 = *(_QWORD *)(v78 + 808);
    v44 = *(_QWORD *)(v78 + 760);
    v49 = *(_QWORD *)(v78 + 712);
    v46 = *(_QWORD *)(v78 + 696);
    v47 = *(_QWORD *)(v78 + 680);
    v50 = *(_QWORD *)(v78 + 672);
    v5 = Logger.payments.unsafeMutableAddressor();
    v45(v4, v5, v44);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v49, v46, v50);
    v48 = (*(unsigned __int8 *)(v47 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
    v53 = swift_allocObject();
    v51(v53 + v48, v49, v50);
    oslog = Logger.logObject.getter();
    v60 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v78 + 296) = 12;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v78 + 1000);
    v55 = swift_allocObject();
    *(_BYTE *)(v55 + 16) = 32;
    v56 = swift_allocObject();
    *(_BYTE *)(v56 + 16) = 8;
    v54 = swift_allocObject();
    *(_QWORD *)(v54 + 16) = partial apply for implicit closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
    *(_QWORD *)(v54 + 24) = v53;
    v57 = swift_allocObject();
    *(_QWORD *)(v57 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v57 + 24) = v54;
    _allocateUninitializedArray<A>(_:)();
    v58 = v6;
    swift_retain();
    *v58 = partial apply for closure #1 in OSLogArguments.append(_:);
    v58[1] = v55;
    swift_retain();
    v58[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v58[3] = v56;
    swift_retain();
    v58[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v58[5] = v57;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v60))
    {
      v41 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v42 = createStorage<A>(capacity:type:)(0);
      v43 = createStorage<A>(capacity:type:)(1);
      v86 = v41;
      v87 = v42;
      v88 = v43;
      serialize(_:at:)(2, &v86);
      serialize(_:at:)(1, &v86);
      v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v90 = v55;
      result = closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)&v86, (uint64_t)&v87, (uint64_t)&v88);
      if (v79)
        return result;
      v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v90 = v56;
      closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)&v86, (uint64_t)&v87, (uint64_t)&v88);
      v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v90 = v57;
      closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)&v86, (uint64_t)&v87, (uint64_t)&v88);
      _os_log_impl(&dword_24701B000, oslog, v60, "#PaymentsFlow could not determine the proper flow for parse: %s", v41, size);
      destroyStorage<A>(_:count:)(v42, 0, v40);
      destroyStorage<A>(_:count:)(v43, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v41, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v39 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      v39 = v79;
    }
    v24 = *(void (**)(uint64_t, uint64_t))(v78 + 904);
    v22 = *(_QWORD *)(v78 + 808);
    v23 = *(_QWORD *)(v78 + 760);
    v26 = *(_QWORD *)(v78 + 696);
    v25 = *(_QWORD *)(v78 + 680);
    v27 = *(_QWORD *)(v78 + 672);

    v24(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 864);
    v7 = *(_QWORD *)(v78 + 792);
    v28 = *(_QWORD *)(v78 + 760);
    v31 = *(_QWORD *)(v78 + 632);
    v8 = Logger.payments.unsafeMutableAddressor();
    v29(v7, v8, v28);
    swift_retain();
    log = Logger.logObject.getter();
    v38 = static os_log_type_t.error.getter();
    *(_QWORD *)(v78 + 304) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v30 = *(_DWORD *)(v78 + 1004);
    v33 = swift_allocObject();
    *(_BYTE *)(v33 + 16) = 32;
    v34 = swift_allocObject();
    *(_BYTE *)(v34 + 16) = 8;
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 16) = partial apply for implicit closure #2 in PaymentsFlow.execute();
    *(_QWORD *)(v32 + 24) = v31;
    v35 = swift_allocObject();
    *(_QWORD *)(v35 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v35 + 24) = v32;
    _allocateUninitializedArray<A>(_:)();
    v36 = v9;
    swift_retain();
    *v36 = partial apply for closure #1 in OSLogArguments.append(_:);
    v36[1] = v33;
    swift_retain();
    v36[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v36[3] = v34;
    swift_retain();
    v36[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v36[5] = v35;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v38))
    {
      v19 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v20 = createStorage<A>(capacity:type:)(0);
      v21 = createStorage<A>(capacity:type:)(1);
      v81 = v19;
      v82 = v20;
      v83 = v21;
      serialize(_:at:)(2, &v81);
      serialize(_:at:)(1, &v81);
      v84 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v85 = v33;
      result = closure #1 in osLogInternal(_:log:type:)(&v84, (uint64_t)&v81, (uint64_t)&v82, (uint64_t)&v83);
      if (v39)
        return result;
      v84 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v85 = v34;
      closure #1 in osLogInternal(_:log:type:)(&v84, (uint64_t)&v81, (uint64_t)&v82, (uint64_t)&v83);
      v84 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v85 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v84, (uint64_t)&v81, (uint64_t)&v82, (uint64_t)&v83);
      _os_log_impl(&dword_24701B000, log, v38, "#PaymentsFlow flowState machine unexpectedly failed to determine next state for current: %s", v19, v30);
      destroyStorage<A>(_:count:)(v20, 0, v18);
      destroyStorage<A>(_:count:)(v21, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v19, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v13 = *(void (**)(uint64_t, uint64_t))(v78 + 904);
    v11 = *(_QWORD *)(v78 + 792);
    v12 = *(_QWORD *)(v78 + 760);
    v14 = *(_QWORD *)(v78 + 632);

    v13(v11, v12);
    outlined init with copy of GlobalsProviding(v14 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowFactory, v78 + 56);
    v17 = *(_QWORD *)(v78 + 80);
    v15 = *(_QWORD *)(v78 + 88);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v78 + 56), v17);
    v16 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v15 + 56) + **(int **)(v15 + 56));
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v78 + 968) = v10;
    *v10 = *(_QWORD *)(v78 + 224);
    v10[1] = PaymentsFlow.execute();
    return v16(v17, v15);
  }
  v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 864);
  v1 = *(_QWORD *)(v78 + 816);
  v72 = *(_QWORD *)(v78 + 760);
  *(_QWORD *)(v78 + 336) = v80;
  v2 = Logger.payments.unsafeMutableAddressor();
  v73(v1, v2, v72);
  v76 = Logger.logObject.getter();
  v75 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v78 + 344) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v74 = *(_DWORD *)(v78 + 1016);
  v77 = _allocateUninitializedArray<A>(_:)();
  if (!os_log_type_enabled(v76, v75))
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
  v69 = createStorage<A>(capacity:type:)(0);
  v70 = createStorage<A>(capacity:type:)(0);
  *(_QWORD *)(v78 + 352) = buf;
  *(_QWORD *)(v78 + 360) = v69;
  *(_QWORD *)(v78 + 368) = v70;
  serialize(_:at:)(0, (_BYTE **)(v78 + 352));
  serialize(_:at:)(0, (_BYTE **)(v78 + 352));
  *(_QWORD *)(v78 + 376) = v77;
  v71 = (_QWORD *)swift_task_alloc();
  v71[2] = v78 + 352;
  v71[3] = v78 + 360;
  v71[4] = v78 + 368;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
  lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  result = Sequence.forEach(_:)();
  if (!v79)
  {
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v76, v75, "#PaymentsFlow obtained anyFlow from FlowFactory, pushing it to the next state", buf, v74);
    destroyStorage<A>(_:count:)(v69, 0, v67);
    destroyStorage<A>(_:count:)(v70, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
LABEL_7:
    v63 = *(void (**)(uint64_t, uint64_t))(v78 + 904);
    v61 = *(_QWORD *)(v78 + 816);
    v62 = *(_QWORD *)(v78 + 760);
    v65 = *(_QWORD *)(v78 + 696);
    v64 = *(_QWORD *)(v78 + 680);
    v66 = *(_QWORD *)(v78 + 672);

    v63(v61, v62);
    static ExecuteResponse.complete(next:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v65, v66);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v78 + 224) + 8))();
  }
  return result;
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint32_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  NSObject *oslog;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint8_t *buf;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;

  v1 = v0[122];
  v0[28] = v0;
  v46 = v1;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  v47 = v0[123];
  if (!v46)
  {
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 864);
    v6 = *(_QWORD *)(v45 + 776);
    v16 = *(_QWORD *)(v45 + 760);
    v19 = *(_QWORD *)(v45 + 632);
    v7 = Logger.payments.unsafeMutableAddressor();
    v17(v6, v7, v16);
    swift_retain();
    oslog = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    *(_QWORD *)(v45 + 312) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v18 = *(_DWORD *)(v45 + 1008);
    v21 = swift_allocObject();
    *(_BYTE *)(v21 + 16) = 32;
    v22 = swift_allocObject();
    *(_BYTE *)(v22 + 16) = 8;
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = partial apply for implicit closure #2 in PaymentsFlow.execute();
    *(_QWORD *)(v20 + 24) = v19;
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v23 + 24) = v20;
    _allocateUninitializedArray<A>(_:)();
    v24 = v8;
    swift_retain();
    *v24 = partial apply for closure #1 in OSLogArguments.append(_:);
    v24[1] = v21;
    swift_retain();
    v24[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v24[3] = v22;
    swift_retain();
    v24[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v24[5] = v23;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v26))
    {
      v13 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v14 = createStorage<A>(capacity:type:)(0);
      v15 = createStorage<A>(capacity:type:)(1);
      v48 = v13;
      v49 = v14;
      v50 = v15;
      serialize(_:at:)(2, &v48);
      serialize(_:at:)(1, &v48);
      v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v52 = v21;
      result = closure #1 in osLogInternal(_:log:type:)(&v51, (uint64_t)&v48, (uint64_t)&v49, (uint64_t)&v50);
      if (v47)
        return result;
      v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v52 = v22;
      closure #1 in osLogInternal(_:log:type:)(&v51, (uint64_t)&v48, (uint64_t)&v49, (uint64_t)&v50);
      v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v52 = v23;
      closure #1 in osLogInternal(_:log:type:)(&v51, (uint64_t)&v48, (uint64_t)&v49, (uint64_t)&v50);
      _os_log_impl(&dword_24701B000, oslog, v26, "#PaymentsFlow Failed to make unsupported flow after encountering unexpected state %s, completing current flow", v13, v18);
      destroyStorage<A>(_:count:)(v14, 0, v12);
      destroyStorage<A>(_:count:)(v15, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v13, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v11 = *(void (**)(uint64_t, uint64_t))(v45 + 904);
    v9 = *(_QWORD *)(v45 + 776);
    v10 = *(_QWORD *)(v45 + 760);

    v11(v9, v10);
    static ExecuteResponse.complete()();
    goto LABEL_14;
  }
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 864);
  v2 = *(_QWORD *)(v45 + 784);
  v34 = *(_QWORD *)(v45 + 760);
  v37 = *(_QWORD *)(v45 + 632);
  *(_QWORD *)(v45 + 320) = v46;
  v3 = Logger.payments.unsafeMutableAddressor();
  v35(v2, v3, v34);
  swift_retain();
  v43 = Logger.logObject.getter();
  v44 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v45 + 328) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v45 + 1012);
  v39 = swift_allocObject();
  *(_BYTE *)(v39 + 16) = 32;
  v40 = swift_allocObject();
  *(_BYTE *)(v40 + 16) = 8;
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = partial apply for implicit closure #2 in PaymentsFlow.execute();
  *(_QWORD *)(v38 + 24) = v37;
  v41 = swift_allocObject();
  *(_QWORD *)(v41 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v41 + 24) = v38;
  _allocateUninitializedArray<A>(_:)();
  v42 = v4;
  swift_retain();
  *v42 = partial apply for closure #1 in OSLogArguments.append(_:);
  v42[1] = v39;
  swift_retain();
  v42[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v42[3] = v40;
  swift_retain();
  v42[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v42[5] = v41;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v43, v44))
  {
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_7;
  }
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
  v32 = createStorage<A>(capacity:type:)(0);
  v33 = createStorage<A>(capacity:type:)(1);
  v53 = buf;
  v54 = v32;
  v55 = v33;
  serialize(_:at:)(2, &v53);
  serialize(_:at:)(1, &v53);
  v56 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v57 = v39;
  result = closure #1 in osLogInternal(_:log:type:)(&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
  if (!v47)
  {
    v56 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v57 = v40;
    closure #1 in osLogInternal(_:log:type:)(&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    v56 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v57 = v41;
    closure #1 in osLogInternal(_:log:type:)(&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    _os_log_impl(&dword_24701B000, v43, v44, "#PaymentsFlow Returning unsupported flow after encountering unexpected state %s", buf, size);
    destroyStorage<A>(_:count:)(v32, 0, v30);
    destroyStorage<A>(_:count:)(v33, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
LABEL_7:
    v29 = *(void (**)(uint64_t, uint64_t))(v45 + 904);
    v27 = *(_QWORD *)(v45 + 784);
    v28 = *(_QWORD *)(v45 + 760);

    v29(v27, v28);
    static ExecuteResponse.complete(next:)();
    swift_release();
LABEL_14:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v45 + 224) + 8))();
  }
  return result;
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint32_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  NSObject *log;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v51;
  NSObject *oslog;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  void *v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint8_t *buf;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint32_t v71;
  os_log_type_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;

  v76 = (void *)v0[116];
  v1 = v0[83];
  v2 = v0[81];
  v3 = v0[80];
  v0[28] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));

  if (v4)
    v5 = 1;
  else
    v5 = 0;
  if ((v5 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v75 + 680) + 8))(*(_QWORD *)(v75 + 704), *(_QWORD *)(v75 + 672));
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 864);
    v10 = *(_QWORD *)(v75 + 792);
    v26 = *(_QWORD *)(v75 + 760);
    v29 = *(_QWORD *)(v75 + 632);
    v11 = Logger.payments.unsafeMutableAddressor();
    v27(v10, v11, v26);
    swift_retain();
    log = Logger.logObject.getter();
    v36 = static os_log_type_t.error.getter();
    *(_QWORD *)(v75 + 304) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v28 = *(_DWORD *)(v75 + 1004);
    v31 = swift_allocObject();
    *(_BYTE *)(v31 + 16) = 32;
    v32 = swift_allocObject();
    *(_BYTE *)(v32 + 16) = 8;
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 16) = partial apply for implicit closure #2 in PaymentsFlow.execute();
    *(_QWORD *)(v30 + 24) = v29;
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v33 + 24) = v30;
    _allocateUninitializedArray<A>(_:)();
    v34 = v12;
    swift_retain();
    *v34 = partial apply for closure #1 in OSLogArguments.append(_:);
    v34[1] = v31;
    swift_retain();
    v34[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v34[3] = v32;
    swift_retain();
    v34[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v34[5] = v33;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v36))
    {
      v23 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v24 = createStorage<A>(capacity:type:)(0);
      v25 = createStorage<A>(capacity:type:)(1);
      v77 = v23;
      v78 = v24;
      v79 = v25;
      serialize(_:at:)(2, &v77);
      serialize(_:at:)(1, &v77);
      v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v81 = v31;
      closure #1 in osLogInternal(_:log:type:)(&v80, (uint64_t)&v77, (uint64_t)&v78, (uint64_t)&v79);
      v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v81 = v32;
      closure #1 in osLogInternal(_:log:type:)(&v80, (uint64_t)&v77, (uint64_t)&v78, (uint64_t)&v79);
      v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v81 = v33;
      closure #1 in osLogInternal(_:log:type:)(&v80, (uint64_t)&v77, (uint64_t)&v78, (uint64_t)&v79);
      _os_log_impl(&dword_24701B000, log, v36, "#PaymentsFlow flowState machine unexpectedly failed to determine next state for current: %s", v23, v28);
      destroyStorage<A>(_:count:)(v24, 0, v22);
      destroyStorage<A>(_:count:)(v25, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v23, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v17 = *(void (**)(uint64_t, uint64_t))(v75 + 904);
    v15 = *(_QWORD *)(v75 + 792);
    v16 = *(_QWORD *)(v75 + 760);
    v18 = *(_QWORD *)(v75 + 632);

    v17(v15, v16);
    outlined init with copy of GlobalsProviding(v18 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowFactory, v75 + 56);
    v21 = *(_QWORD *)(v75 + 80);
    v19 = *(_QWORD *)(v75 + 88);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v75 + 56), v21);
    v20 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v19 + 56) + **(int **)(v19 + 56));
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v75 + 968) = v13;
    *v13 = *(_QWORD *)(v75 + 224);
    v13[1] = PaymentsFlow.execute();
    return v20(v21, v19);
  }
  else
  {
    *(_QWORD *)(v75 + 392) = 0;
    if ((dispatch thunk of AnyFlow.on(input:)() & 1) != 0)
    {
      v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 864);
      v6 = *(_QWORD *)(v75 + 832);
      v69 = *(_QWORD *)(v75 + 760);
      v7 = Logger.payments.unsafeMutableAddressor();
      v70(v6, v7, v69);
      v73 = Logger.logObject.getter();
      v72 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v75 + 440) = 2;
      UnsignedInteger<>.init<A>(_:)();
      v71 = *(_DWORD *)(v75 + 1024);
      v74 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v73, v72))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v66 = createStorage<A>(capacity:type:)(0);
        v67 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v75 + 456) = buf;
        *(_QWORD *)(v75 + 464) = v66;
        *(_QWORD *)(v75 + 472) = v67;
        serialize(_:at:)(0, (_BYTE **)(v75 + 456));
        serialize(_:at:)(0, (_BYTE **)(v75 + 456));
        *(_QWORD *)(v75 + 480) = v74;
        v68 = (_QWORD *)swift_task_alloc();
        v68[2] = v75 + 456;
        v68[3] = v75 + 464;
        v68[4] = v75 + 472;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_24701B000, v73, v72, "#PaymentsFlow obtained anyFlow from FlowFactory, pushing it to the next state", buf, v71);
        destroyStorage<A>(_:count:)(v66, 0, v64);
        destroyStorage<A>(_:count:)(v67, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
      }
      swift_bridgeObjectRelease();
      v56 = *(void (**)(uint64_t, uint64_t))(v75 + 904);
      v54 = *(_QWORD *)(v75 + 832);
      v55 = *(_QWORD *)(v75 + 760);
      v59 = *(const void **)(v75 + 744);
      v57 = *(void **)(v75 + 736);
      v62 = *(_QWORD *)(v75 + 704);
      v61 = *(_QWORD *)(v75 + 680);
      v63 = *(_QWORD *)(v75 + 672);
      v60 = *(_QWORD *)(v75 + 632);

      v56(v54, v55);
      (*(void (**)(const void *, uint64_t, uint64_t))(v61 + 16))(v59, v62, v63);
      swift_storeEnumTagMultiPayload();
      outlined init with copy of PaymentsFlowState(v59, v57);
      v58 = (void *)(v60 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
      swift_beginAccess();
      outlined assign with take of PaymentsFlowState(v57, v58);
      swift_endAccess();
      outlined destroy of PaymentsFlowState((uint64_t)v59);
      *(_QWORD *)(v75 + 448) = 0;
      swift_allocObject();
      swift_retain();
      swift_weakInit();
      swift_release();
      swift_retain();
      swift_release();
      type metadata accessor for AnyFlow();
      static ExecuteResponse.ongoing<A>(next:childCompletion:)();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v62, v63);
    }
    else
    {
      v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 864);
      v8 = *(_QWORD *)(v75 + 824);
      v48 = *(_QWORD *)(v75 + 760);
      v9 = Logger.payments.unsafeMutableAddressor();
      v49(v8, v9, v48);
      oslog = Logger.logObject.getter();
      v51 = static os_log_type_t.error.getter();
      *(_QWORD *)(v75 + 400) = 2;
      UnsignedInteger<>.init<A>(_:)();
      size = *(_DWORD *)(v75 + 1020);
      v53 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(oslog, v51))
      {
        v44 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v45 = createStorage<A>(capacity:type:)(0);
        v46 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v75 + 408) = v44;
        *(_QWORD *)(v75 + 416) = v45;
        *(_QWORD *)(v75 + 424) = v46;
        serialize(_:at:)(0, (_BYTE **)(v75 + 408));
        serialize(_:at:)(0, (_BYTE **)(v75 + 408));
        *(_QWORD *)(v75 + 432) = v53;
        v47 = (_QWORD *)swift_task_alloc();
        v47[2] = v75 + 408;
        v47[3] = v75 + 416;
        v47[4] = v75 + 424;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_24701B000, oslog, v51, "#PaymentsFlow RCHFlow.on() returned false", v44, size);
        destroyStorage<A>(_:count:)(v45, 0, v43);
        destroyStorage<A>(_:count:)(v46, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v44, MEMORY[0x24BEE4260]);
      }
      swift_bridgeObjectRelease();
      v39 = *(void (**)(uint64_t, uint64_t))(v75 + 904);
      v37 = *(_QWORD *)(v75 + 824);
      v38 = *(_QWORD *)(v75 + 760);
      v41 = *(_QWORD *)(v75 + 704);
      v40 = *(_QWORD *)(v75 + 680);
      v42 = *(_QWORD *)(v75 + 672);

      v39(v37, v38);
      static ExecuteResponse.complete()();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v42);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v75 + 224) + 8))();
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint32_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  NSObject *log;
  os_log_type_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(unint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  NSObject *oslog;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint8_t *buf;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t);
  uint32_t v78;
  os_log_type_t v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;

  v83 = (void *)v0[120];
  v1 = v0[82];
  v2 = v0[81];
  v3 = v0[80];
  v0[28] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));

  if (v4)
    v5 = 1;
  else
    v5 = 0;
  if ((v5 & 1) != 0)
  {
    v55 = *(void (**)(unint64_t, uint64_t, uint64_t))(v82 + 936);
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 864);
    v9 = *(_QWORD *)(v82 + 808);
    v48 = *(_QWORD *)(v82 + 760);
    v53 = *(_QWORD *)(v82 + 712);
    v50 = *(_QWORD *)(v82 + 696);
    v51 = *(_QWORD *)(v82 + 680);
    v54 = *(_QWORD *)(v82 + 672);
    v10 = Logger.payments.unsafeMutableAddressor();
    v49(v9, v10, v48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v53, v50, v54);
    v52 = (*(unsigned __int8 *)(v51 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
    v57 = swift_allocObject();
    v55(v57 + v52, v53, v54);
    oslog = Logger.logObject.getter();
    v64 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v82 + 296) = 12;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v82 + 1000);
    v59 = swift_allocObject();
    *(_BYTE *)(v59 + 16) = 32;
    v60 = swift_allocObject();
    *(_BYTE *)(v60 + 16) = 8;
    v58 = swift_allocObject();
    *(_QWORD *)(v58 + 16) = partial apply for implicit closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
    *(_QWORD *)(v58 + 24) = v57;
    v61 = swift_allocObject();
    *(_QWORD *)(v61 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v61 + 24) = v58;
    _allocateUninitializedArray<A>(_:)();
    v62 = v11;
    swift_retain();
    *v62 = partial apply for closure #1 in OSLogArguments.append(_:);
    v62[1] = v59;
    swift_retain();
    v62[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v62[3] = v60;
    swift_retain();
    v62[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v62[5] = v61;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v64))
    {
      v45 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v46 = createStorage<A>(capacity:type:)(0);
      v47 = createStorage<A>(capacity:type:)(1);
      v89 = v45;
      v90 = v46;
      v91 = v47;
      serialize(_:at:)(2, &v89);
      serialize(_:at:)(1, &v89);
      v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v93 = v59;
      closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)&v89, (uint64_t)&v90, (uint64_t)&v91);
      v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v93 = v60;
      closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)&v89, (uint64_t)&v90, (uint64_t)&v91);
      v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v93 = v61;
      closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)&v89, (uint64_t)&v90, (uint64_t)&v91);
      _os_log_impl(&dword_24701B000, oslog, v64, "#PaymentsFlow could not determine the proper flow for parse: %s", v45, size);
      destroyStorage<A>(_:count:)(v46, 0, v44);
      destroyStorage<A>(_:count:)(v47, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v45, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v29 = *(void (**)(uint64_t, uint64_t))(v82 + 904);
    v27 = *(_QWORD *)(v82 + 808);
    v28 = *(_QWORD *)(v82 + 760);
    v31 = *(_QWORD *)(v82 + 696);
    v30 = *(_QWORD *)(v82 + 680);
    v32 = *(_QWORD *)(v82 + 672);

    v29(v27, v28);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v32);
    v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 864);
    v12 = *(_QWORD *)(v82 + 792);
    v33 = *(_QWORD *)(v82 + 760);
    v36 = *(_QWORD *)(v82 + 632);
    v13 = Logger.payments.unsafeMutableAddressor();
    v34(v12, v13, v33);
    swift_retain();
    log = Logger.logObject.getter();
    v43 = static os_log_type_t.error.getter();
    *(_QWORD *)(v82 + 304) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v35 = *(_DWORD *)(v82 + 1004);
    v38 = swift_allocObject();
    *(_BYTE *)(v38 + 16) = 32;
    v39 = swift_allocObject();
    *(_BYTE *)(v39 + 16) = 8;
    v37 = swift_allocObject();
    *(_QWORD *)(v37 + 16) = partial apply for implicit closure #2 in PaymentsFlow.execute();
    *(_QWORD *)(v37 + 24) = v36;
    v40 = swift_allocObject();
    *(_QWORD *)(v40 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v40 + 24) = v37;
    _allocateUninitializedArray<A>(_:)();
    v41 = v14;
    swift_retain();
    *v41 = partial apply for closure #1 in OSLogArguments.append(_:);
    v41[1] = v38;
    swift_retain();
    v41[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v41[3] = v39;
    swift_retain();
    v41[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v41[5] = v40;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v43))
    {
      v24 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v25 = createStorage<A>(capacity:type:)(0);
      v26 = createStorage<A>(capacity:type:)(1);
      v84 = v24;
      v85 = v25;
      v86 = v26;
      serialize(_:at:)(2, &v84);
      serialize(_:at:)(1, &v84);
      v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v88 = v38;
      closure #1 in osLogInternal(_:log:type:)(&v87, (uint64_t)&v84, (uint64_t)&v85, (uint64_t)&v86);
      v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v88 = v39;
      closure #1 in osLogInternal(_:log:type:)(&v87, (uint64_t)&v84, (uint64_t)&v85, (uint64_t)&v86);
      v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v88 = v40;
      closure #1 in osLogInternal(_:log:type:)(&v87, (uint64_t)&v84, (uint64_t)&v85, (uint64_t)&v86);
      _os_log_impl(&dword_24701B000, log, v43, "#PaymentsFlow flowState machine unexpectedly failed to determine next state for current: %s", v24, v35);
      destroyStorage<A>(_:count:)(v25, 0, v23);
      destroyStorage<A>(_:count:)(v26, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v24, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v18 = *(void (**)(uint64_t, uint64_t))(v82 + 904);
    v16 = *(_QWORD *)(v82 + 792);
    v17 = *(_QWORD *)(v82 + 760);
    v19 = *(_QWORD *)(v82 + 632);

    v18(v16, v17);
    outlined init with copy of GlobalsProviding(v19 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowFactory, v82 + 56);
    v22 = *(_QWORD *)(v82 + 80);
    v20 = *(_QWORD *)(v82 + 88);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v82 + 56), v22);
    v21 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v20 + 56) + **(int **)(v20 + 56));
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v82 + 968) = v15;
    *v15 = *(_QWORD *)(v82 + 224);
    v15[1] = PaymentsFlow.execute();
    return v21(v22, v20);
  }
  else
  {
    v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 864);
    v6 = *(_QWORD *)(v82 + 816);
    v76 = *(_QWORD *)(v82 + 760);
    *(_QWORD *)(v82 + 336) = 0;
    v7 = Logger.payments.unsafeMutableAddressor();
    v77(v6, v7, v76);
    v80 = Logger.logObject.getter();
    v79 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v82 + 344) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v78 = *(_DWORD *)(v82 + 1016);
    v81 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v80, v79))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v73 = createStorage<A>(capacity:type:)(0);
      v74 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v82 + 352) = buf;
      *(_QWORD *)(v82 + 360) = v73;
      *(_QWORD *)(v82 + 368) = v74;
      serialize(_:at:)(0, (_BYTE **)(v82 + 352));
      serialize(_:at:)(0, (_BYTE **)(v82 + 352));
      *(_QWORD *)(v82 + 376) = v81;
      v75 = (_QWORD *)swift_task_alloc();
      v75[2] = v82 + 352;
      v75[3] = v82 + 360;
      v75[4] = v82 + 368;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24701B000, v80, v79, "#PaymentsFlow obtained anyFlow from FlowFactory, pushing it to the next state", buf, v78);
      destroyStorage<A>(_:count:)(v73, 0, v71);
      destroyStorage<A>(_:count:)(v74, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v67 = *(void (**)(uint64_t, uint64_t))(v82 + 904);
    v65 = *(_QWORD *)(v82 + 816);
    v66 = *(_QWORD *)(v82 + 760);
    v69 = *(_QWORD *)(v82 + 696);
    v68 = *(_QWORD *)(v82 + 680);
    v70 = *(_QWORD *)(v82 + 672);

    v67(v65, v66);
    static ExecuteResponse.complete(next:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v70);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v82 + 224) + 8))();
  }
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint32_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  NSObject *oslog;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint8_t *buf;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  void *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;

  v47 = *(void **)(v0 + 984);
  *(_QWORD *)(v0 + 224) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);

  if (v1)
    v2 = 1;
  else
    v2 = 0;
  if ((v2 & 1) != 0)
  {
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 864);
    v6 = *(_QWORD *)(v46 + 776);
    v17 = *(_QWORD *)(v46 + 760);
    v20 = *(_QWORD *)(v46 + 632);
    v7 = Logger.payments.unsafeMutableAddressor();
    v18(v6, v7, v17);
    swift_retain();
    oslog = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    *(_QWORD *)(v46 + 312) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v19 = *(_DWORD *)(v46 + 1008);
    v22 = swift_allocObject();
    *(_BYTE *)(v22 + 16) = 32;
    v23 = swift_allocObject();
    *(_BYTE *)(v23 + 16) = 8;
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = partial apply for implicit closure #2 in PaymentsFlow.execute();
    *(_QWORD *)(v21 + 24) = v20;
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v24 + 24) = v21;
    _allocateUninitializedArray<A>(_:)();
    v25 = v8;
    swift_retain();
    *v25 = partial apply for closure #1 in OSLogArguments.append(_:);
    v25[1] = v22;
    swift_retain();
    v25[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v25[3] = v23;
    swift_retain();
    v25[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v25[5] = v24;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v27))
    {
      v14 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v15 = createStorage<A>(capacity:type:)(0);
      v16 = createStorage<A>(capacity:type:)(1);
      v48 = v14;
      v49 = v15;
      v50 = v16;
      serialize(_:at:)(2, &v48);
      serialize(_:at:)(1, &v48);
      v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v52 = v22;
      closure #1 in osLogInternal(_:log:type:)(&v51, (uint64_t)&v48, (uint64_t)&v49, (uint64_t)&v50);
      v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v52 = v23;
      closure #1 in osLogInternal(_:log:type:)(&v51, (uint64_t)&v48, (uint64_t)&v49, (uint64_t)&v50);
      v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v52 = v24;
      closure #1 in osLogInternal(_:log:type:)(&v51, (uint64_t)&v48, (uint64_t)&v49, (uint64_t)&v50);
      _os_log_impl(&dword_24701B000, oslog, v27, "#PaymentsFlow Failed to make unsupported flow after encountering unexpected state %s, completing current flow", v14, v19);
      destroyStorage<A>(_:count:)(v15, 0, v13);
      destroyStorage<A>(_:count:)(v16, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v14, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v12 = *(void (**)(uint64_t, uint64_t))(v46 + 904);
    v10 = *(_QWORD *)(v46 + 776);
    v11 = *(_QWORD *)(v46 + 760);

    v12(v10, v11);
    static ExecuteResponse.complete()();
  }
  else
  {
    v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 864);
    v3 = *(_QWORD *)(v46 + 784);
    v35 = *(_QWORD *)(v46 + 760);
    v38 = *(_QWORD *)(v46 + 632);
    *(_QWORD *)(v46 + 320) = 0;
    v4 = Logger.payments.unsafeMutableAddressor();
    v36(v3, v4, v35);
    swift_retain();
    v44 = Logger.logObject.getter();
    v45 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v46 + 328) = 12;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v46 + 1012);
    v40 = swift_allocObject();
    *(_BYTE *)(v40 + 16) = 32;
    v41 = swift_allocObject();
    *(_BYTE *)(v41 + 16) = 8;
    v39 = swift_allocObject();
    *(_QWORD *)(v39 + 16) = partial apply for implicit closure #2 in PaymentsFlow.execute();
    *(_QWORD *)(v39 + 24) = v38;
    v42 = swift_allocObject();
    *(_QWORD *)(v42 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v42 + 24) = v39;
    _allocateUninitializedArray<A>(_:)();
    v43 = v5;
    swift_retain();
    *v43 = partial apply for closure #1 in OSLogArguments.append(_:);
    v43[1] = v40;
    swift_retain();
    v43[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v43[3] = v41;
    swift_retain();
    v43[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v43[5] = v42;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v44, v45))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v33 = createStorage<A>(capacity:type:)(0);
      v34 = createStorage<A>(capacity:type:)(1);
      v53 = buf;
      v54 = v33;
      v55 = v34;
      serialize(_:at:)(2, &v53);
      serialize(_:at:)(1, &v53);
      v56 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v57 = v40;
      closure #1 in osLogInternal(_:log:type:)(&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
      v56 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v57 = v41;
      closure #1 in osLogInternal(_:log:type:)(&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
      v56 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v57 = v42;
      closure #1 in osLogInternal(_:log:type:)(&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
      _os_log_impl(&dword_24701B000, v44, v45, "#PaymentsFlow Returning unsupported flow after encountering unexpected state %s", buf, size);
      destroyStorage<A>(_:count:)(v33, 0, v31);
      destroyStorage<A>(_:count:)(v34, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v30 = *(void (**)(uint64_t, uint64_t))(v46 + 904);
    v28 = *(_QWORD *)(v46 + 784);
    v29 = *(_QWORD *)(v46 + 760);

    v30(v28, v29);
    static ExecuteResponse.complete(next:)();
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v46 + 224) + 8))();
}

uint64_t closure #1 in PaymentsFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t *v49;
  _BYTE **v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  void *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE **v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  uint32_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  NSObject *v80;
  int v81;
  void *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t *v91;
  uint64_t *v92;
  _BYTE **v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  uint32_t v100;
  int v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  uint32_t v108;
  int v109;
  NSObject *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  unint64_t v128;
  char *v129;
  unint64_t v130;
  char *v131;
  int v132;
  uint64_t v133;
  char *v134;
  uint64_t Strong;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  char v140;
  uint64_t v141;
  uint32_t v142;
  uint64_t (*v143)(uint64_t, uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE *v147;
  char v148;
  uint64_t v149;
  uint32_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  uint32_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  char v161;

  v123 = a1;
  v122 = a2;
  v120 = a3;
  v161 = 0;
  v160 = 0;
  v159 = 0;
  v121 = 0;
  v113 = 0;
  v151 = 0;
  v114 = 0;
  v115 = type metadata accessor for PaymentsFlowState();
  v116 = (*(_QWORD *)(*(_QWORD *)(v115 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](0);
  v117 = (char *)&v41 - v116;
  v118 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v119 = (char *)&v41 - v118;
  v124 = type metadata accessor for Logger();
  v125 = *(_QWORD *)(v124 - 8);
  v126 = (*(_QWORD *)(v125 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v123);
  v127 = (char *)&v41 - v126;
  v128 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v129 = (char *)&v41 - v128;
  v130 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = (unsigned __int8 *)MEMORY[0x24BDAC7A8](v7);
  v131 = (char *)&v41 - v130;
  v132 = *v9;
  v161 = v132 & 1;
  v133 = v10 + 16;
  v160 = v10 + 16;
  v159 = v11;
  v134 = &v158;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  swift_endAccess();
  if (Strong)
  {
    v112 = Strong;
    v104 = Strong;
    v151 = Strong;
    v14 = static GuardFlowResult.== infix(_:_:)();
    if ((v14 & 1) != 0)
    {
      v15 = v129;
      v16 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v125 + 16))(v15, v16, v124);
      v102 = Logger.logObject.getter();
      v101 = static os_log_type_t.debug.getter();
      v99 = &v141;
      v141 = 2;
      v97 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v98 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v100 = v142;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v103 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v102, (os_log_type_t)v101))
      {
        v17 = v113;
        v87 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v85 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v86 = 0;
        v88 = createStorage<A>(capacity:type:)(0);
        v89 = createStorage<A>(capacity:type:)(v86);
        v93 = &v139;
        v139 = v87;
        v94 = &v138;
        v138 = v88;
        v91 = &v137;
        v137 = v89;
        v90 = 0;
        serialize(_:at:)(0, &v139);
        serialize(_:at:)(v90, v93);
        v136 = v103;
        v92 = &v41;
        MEMORY[0x24BDAC7A8](&v41);
        v18 = v94;
        v19 = &v41 - 6;
        v95 = &v41 - 6;
        v19[2] = (uint64_t)v93;
        v19[3] = (uint64_t)v18;
        v19[4] = v20;
        v96 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v17)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_24701B000, v102, (os_log_type_t)v101, "#PaymentsFlow guards complete, moving flow states from guard flows to .runningPaymentsFlow", v87, v100);
          v84 = 0;
          destroyStorage<A>(_:count:)(v88, 0, v85);
          destroyStorage<A>(_:count:)(v89, v84, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v87, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v125 + 8))(v129, v124);
      v21 = type metadata accessor for Input();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v119, v120);
      swift_storeEnumTagMultiPayload();
      outlined init with copy of PaymentsFlowState(v119, v117);
      v82 = (void *)(v104 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
      v83 = &v140;
      swift_beginAccess();
      outlined assign with take of PaymentsFlowState(v117, v82);
      swift_endAccess();
      outlined destroy of PaymentsFlowState((uint64_t)v119);
      return swift_release();
    }
    else
    {
      v23 = v127;
      v24 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v125 + 16))(v23, v24, v124);
      v69 = 17;
      v71 = 7;
      v72 = swift_allocObject();
      *(_BYTE *)(v72 + 16) = v132 & 1;
      v80 = Logger.logObject.getter();
      v81 = static os_log_type_t.error.getter();
      v67 = &v149;
      v149 = 12;
      v65 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v66 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v68 = v150;
      v74 = swift_allocObject();
      *(_BYTE *)(v74 + 16) = 32;
      v75 = swift_allocObject();
      *(_BYTE *)(v75 + 16) = 8;
      v70 = 32;
      v25 = swift_allocObject();
      v26 = v72;
      v73 = v25;
      *(_QWORD *)(v25 + 16) = partial apply for implicit closure #1 in closure #1 in PaymentsFlow.execute();
      *(_QWORD *)(v25 + 24) = v26;
      v27 = swift_allocObject();
      v28 = v73;
      v77 = v27;
      *(_QWORD *)(v27 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v27 + 24) = v28;
      v79 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v76 = _allocateUninitializedArray<A>(_:)();
      v78 = v29;
      swift_retain();
      v30 = v74;
      v31 = v78;
      *v78 = partial apply for closure #1 in OSLogArguments.append(_:);
      v31[1] = v30;
      swift_retain();
      v32 = v75;
      v33 = v78;
      v78[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v33[3] = v32;
      swift_retain();
      v34 = v77;
      v35 = v78;
      v78[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v35[5] = v34;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v80, (os_log_type_t)v81))
      {
        v36 = v113;
        v58 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v59 = createStorage<A>(capacity:type:)(0);
        v60 = createStorage<A>(capacity:type:)(1);
        v61 = &v147;
        v147 = v58;
        v62 = &v146;
        v146 = v59;
        v63 = &v145;
        v145 = v60;
        serialize(_:at:)(2, &v147);
        serialize(_:at:)(1, v61);
        v143 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v144 = v74;
        closure #1 in osLogInternal(_:log:type:)(&v143, (uint64_t)v61, (uint64_t)v62, (uint64_t)v63);
        v64 = v36;
        if (v36)
        {
          __break(1u);
        }
        else
        {
          v143 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v144 = v75;
          closure #1 in osLogInternal(_:log:type:)(&v143, (uint64_t)&v147, (uint64_t)&v146, (uint64_t)&v145);
          v56 = 0;
          v143 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v144 = v77;
          closure #1 in osLogInternal(_:log:type:)(&v143, (uint64_t)&v147, (uint64_t)&v146, (uint64_t)&v145);
          _os_log_impl(&dword_24701B000, v80, (os_log_type_t)v81, "#PaymentsFlow GuardFlow yielded an invalid/failing exit value: %s, setting flow state to .finished", v58, v68);
          destroyStorage<A>(_:count:)(v59, 0, v57);
          destroyStorage<A>(_:count:)(v60, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v58, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v125 + 8))(v127, v124);
      swift_storeEnumTagMultiPayload();
      outlined init with copy of PaymentsFlowState(v119, v117);
      v54 = (void *)(v104 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
      v55 = &v148;
      swift_beginAccess();
      outlined assign with take of PaymentsFlowState(v117, v54);
      swift_endAccess();
      outlined destroy of PaymentsFlowState((uint64_t)v119);
      return swift_release();
    }
  }
  else
  {
    v12 = v131;
    v13 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v125 + 16))(v12, v13, v124);
    v110 = Logger.logObject.getter();
    v109 = static os_log_type_t.error.getter();
    v107 = &v156;
    v156 = 2;
    v105 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v106 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v108 = v157;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v111 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v110, (os_log_type_t)v109))
    {
      v37 = v113;
      v44 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v43 = 0;
      v45 = createStorage<A>(capacity:type:)(0);
      v46 = createStorage<A>(capacity:type:)(v43);
      v50 = &v155;
      v155 = v44;
      v51 = &v154;
      v154 = v45;
      v48 = &v153;
      v153 = v46;
      v47 = 0;
      serialize(_:at:)(0, &v155);
      serialize(_:at:)(v47, v50);
      v152 = v111;
      v49 = &v41;
      MEMORY[0x24BDAC7A8](&v41);
      v38 = v51;
      v39 = &v41 - 6;
      v52 = &v41 - 6;
      v39[2] = (uint64_t)v50;
      v39[3] = (uint64_t)v38;
      v39[4] = v40;
      v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v37)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_24701B000, v110, (os_log_type_t)v109, "#PaymentsFlow got deallocated before child completion of guard flow could run", v44, v108);
        v41 = 0;
        destroyStorage<A>(_:count:)(v45, 0, v42);
        destroyStorage<A>(_:count:)(v46, v41, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v44, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v131, v124);
  }
}

uint64_t implicit closure #1 in closure #1 in PaymentsFlow.execute()()
{
  lazy protocol witness table accessor for type GuardFlowResult and conformance GuardFlowResult();
  return String.init<A>(describing:)();
}

uint64_t closure #2 in PaymentsFlow.execute()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  _BYTE **v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint32_t v33;
  int v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t Strong;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint32_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;

  v47 = a1;
  v46 = a2;
  v65 = 0;
  v64 = 0;
  v45 = 0;
  v38 = 0;
  v56 = 0;
  v39 = 0;
  v40 = type metadata accessor for PaymentsFlowState();
  v41 = (*(_QWORD *)(*(_QWORD *)(v40 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](0);
  v42 = (char *)&v13 - v41;
  v43 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v44 = (char *)&v13 - v43;
  v48 = type metadata accessor for Logger();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v47);
  v51 = (char *)&v13 - v50;
  v65 = v4;
  v52 = v5 + 16;
  v64 = v5 + 16;
  v53 = &v63;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  swift_endAccess();
  if (Strong)
  {
    v37 = Strong;
    v29 = Strong;
    v56 = Strong;
    swift_storeEnumTagMultiPayload();
    outlined init with copy of PaymentsFlowState(v44, v42);
    v27 = (void *)(v29 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
    v28 = &v55;
    swift_beginAccess();
    outlined assign with take of PaymentsFlowState(v42, v27);
    swift_endAccess();
    outlined destroy of PaymentsFlowState((uint64_t)v44);
    return swift_release();
  }
  else
  {
    v6 = v51;
    v7 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v6, v7, v48);
    v35 = Logger.logObject.getter();
    v34 = static os_log_type_t.error.getter();
    v32 = &v61;
    v61 = 2;
    v30 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v31 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v33 = v62;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v36 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v35, (os_log_type_t)v34))
    {
      v9 = v38;
      v17 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v16 = 0;
      v18 = createStorage<A>(capacity:type:)(0);
      v19 = createStorage<A>(capacity:type:)(v16);
      v23 = &v60;
      v60 = v17;
      v24 = &v59;
      v59 = v18;
      v21 = &v58;
      v58 = v19;
      v20 = 0;
      serialize(_:at:)(0, &v60);
      serialize(_:at:)(v20, v23);
      v57 = v36;
      v22 = &v13;
      MEMORY[0x24BDAC7A8](&v13);
      v10 = v24;
      v11 = &v13 - 6;
      v25 = &v13 - 6;
      v11[2] = (uint64_t)v23;
      v11[3] = (uint64_t)v10;
      v11[4] = v12;
      v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v9)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_24701B000, v35, (os_log_type_t)v34, "#PaymentsFlow got deallocated before child completion of guard flow could run", v17, v33);
        v14 = 0;
        destroyStorage<A>(_:count:)(v18, 0, v15);
        destroyStorage<A>(_:count:)(v19, v14, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v17, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v51, v48);
  }
}

uint64_t implicit closure #2 in PaymentsFlow.execute()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  const void *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char v9;

  v3 = a1;
  v8 = type metadata accessor for PaymentsFlowState();
  v4 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = (char *)&v2 - v4;
  v5 = (const void *)(MEMORY[0x24BDAC7A8](v3) + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
  v6 = &v9;
  swift_beginAccess();
  outlined init with copy of PaymentsFlowState(v5, v7);
  swift_endAccess();
  return String.init<A>(describing:)();
}

uint64_t PaymentsFlow.deinit()
{
  uint64_t v0;
  uint64_t v2;

  outlined destroy of PaymentsFlowState(v0 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
  __swift_destroy_boxed_opaque_existential_0(v0 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowFactory);
  outlined destroy of [SFCardSection]();
  return v2;
}

uint64_t PaymentsFlow.__deallocating_deinit()
{
  PaymentsFlow.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance PaymentsFlow()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))() & 1;
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance PaymentsFlow()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy;
  return Flow.onAsync(input:)();
}

uint64_t protocol witness for Flow.execute(completion:) in conformance PaymentsFlow()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

uint64_t protocol witness for Flow.execute() in conformance PaymentsFlow(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v5 = (uint64_t (*)(uint64_t))(*(_QWORD *)(**(_QWORD **)v1 + 152) + **(int **)(**(_QWORD **)v1 + 152));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in FlowFactory.unsupportedActionFlow();
  return v5(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance PaymentsFlow()
{
  type metadata accessor for PaymentsFlow();
  return Flow<>.exitValue.getter();
}

uint64_t protocol witness for Flow.flexibleExecutionSupport.getter in conformance PaymentsFlow()
{
  return Flow.flexibleExecutionSupport.getter();
}

uint64_t sub_247191C94()
{
  return swift_deallocObject();
}

uint64_t sub_247191CBC()
{
  return swift_deallocObject();
}

uint64_t sub_247191CE4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247191D20()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for PaymentsFlow()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for PaymentsFlow;
  if (!type metadata singleton initialization cache for PaymentsFlow)
    return swift_getSingletonMetadata();
  return v1;
}

unint64_t lazy protocol witness table accessor for type PaymentsFlow and conformance PaymentsFlow()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type PaymentsFlow and conformance PaymentsFlow;
  if (!lazy protocol witness table cache variable for type PaymentsFlow and conformance PaymentsFlow)
  {
    v0 = type metadata accessor for PaymentsFlow();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsFlow, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsFlow and conformance PaymentsFlow);
    return v1;
  }
  return v3;
}

uint64_t sub_247191E30()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Input() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247191EA0()
{
  return swift_deallocObject();
}

uint64_t sub_247191EC8()
{
  return swift_deallocObject();
}

uint64_t sub_247191EF0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247191F2C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in PaymentsFlow.execute()()
{
  uint64_t v0;

  return implicit closure #2 in PaymentsFlow.execute()(v0);
}

uint64_t sub_247191F70()
{
  return swift_deallocObject();
}

uint64_t sub_247191F98()
{
  return swift_deallocObject();
}

uint64_t sub_247191FC0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247191FFC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247192038()
{
  return swift_deallocObject();
}

uint64_t sub_247192060()
{
  return swift_deallocObject();
}

uint64_t sub_247192088()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471920C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247192100()
{
  return swift_deallocObject();
}

uint64_t sub_247192128()
{
  return swift_deallocObject();
}

uint64_t sub_247192150()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24719218C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471921C8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PaymentsFlow.execute()(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in PaymentsFlow.execute()(a1, v1);
}

uint64_t sub_24719220C()
{
  uint64_t v0;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v4 = type metadata accessor for Input();
  v2 = *(_QWORD *)(v4 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v4);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaymentsFlow.execute()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Input() - 8) + 80);
  return closure #1 in PaymentsFlow.execute()(a1, *(_QWORD *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

unint64_t initializeBufferWithCopyOfBuffer for PaymentsFlowState(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v9;
  int v10;

  v9 = *(_QWORD *)(a3 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  if ((v10 & 0x20000) != 0)
  {
    v5 = *a2;
    swift_retain();
    *a1 = v5;
    return *a1 + ((v10 + 16) & ~(unint64_t)v10);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() <= 2)
    {
      v3 = type metadata accessor for Input();
      (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v9 + 64));
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for PaymentsFlowState(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  result = swift_getEnumCaseMultiPayload();
  if (result <= 2)
  {
    v2 = type metadata accessor for Input();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  }
  return result;
}

void *initializeWithCopy for PaymentsFlowState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() <= 2)
  {
    v3 = type metadata accessor for Input();
    (*(void (**)(void *, const void *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithCopy for PaymentsFlowState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;

  if (a1 != a2)
  {
    outlined destroy of PaymentsFlowState((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() <= 2)
    {
      v3 = type metadata accessor for Input();
      (*(void (**)(void *, const void *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void *initializeWithTake for PaymentsFlowState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() <= 2)
  {
    v3 = type metadata accessor for Input();
    (*(void (**)(void *, const void *))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for PaymentsFlowState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;

  if (a1 != a2)
  {
    outlined destroy of PaymentsFlowState((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() <= 2)
    {
      v3 = type metadata accessor for Input();
      (*(void (**)(void *, const void *))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for PaymentsFlowState()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for Input();
  if (v0 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return v2;
}

uint64_t ObjC metadata update function for PaymentsFlow()
{
  return type metadata accessor for PaymentsFlow();
}

uint64_t type metadata completion function for PaymentsFlow()
{
  unint64_t v0;
  uint64_t updated;

  updated = type metadata accessor for PaymentsFlowState();
  if (v0 <= 0x3F)
  {
    updated = swift_updateClassMetadata2();
    if (!updated)
      return 0;
  }
  return updated;
}

uint64_t sub_247192BA8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in PaymentsFlow.execute()()
{
  return implicit closure #1 in closure #1 in PaymentsFlow.execute()();
}

uint64_t sub_247192BDC()
{
  return swift_deallocObject();
}

uint64_t sub_247192C04()
{
  return swift_deallocObject();
}

uint64_t sub_247192C2C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247192C68()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type GuardFlowResult and conformance GuardFlowResult()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GuardFlowResult and conformance GuardFlowResult;
  if (!lazy protocol witness table cache variable for type GuardFlowResult and conformance GuardFlowResult)
  {
    v0 = MEMORY[0x249572C98](MEMORY[0x24BE96958], MEMORY[0x24BE96950]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GuardFlowResult and conformance GuardFlowResult);
    return v0;
  }
  return v2;
}

uint64_t UsoEntity_common_App.appIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *object;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = 0;
  v47 = 0;
  v28 = 0;
  v39 = 0;
  v40 = 0;
  v37 = 0;
  v38 = 0;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  v30 = (*(_QWORD *)(*(_QWORD *)(v29 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v29);
  v31 = (uint64_t)&v5 - v30;
  v32 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v5 - v30);
  v33 = (uint64_t)&v5 - v32;
  v48 = v0;
  object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("name", 4uLL, 1)._object;
  v35 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  swift_bridgeObjectRelease();
  v36 = 0;
  if (!v35)
  {
    v15 = v36;
    v16 = v36;
    return v15;
  }
  v27 = v35;
  v2 = v28;
  v23 = v35;
  v47 = v35;
  v44 = v35;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoIdentifier]);
  v25 = lazy protocol witness table accessor for type [UsoIdentifier] and conformance [A]();
  result = Sequence.first(where:)();
  v26 = v2;
  if (v2)
  {
    __break(1u);
    __break(1u);
  }
  else
  {
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))closure #2 in UsoEntity_common_App.appIdentifier.getter, 0, v29, MEMORY[0x24BEE4078], MEMORY[0x24BEE0D00], v21, (uint64_t)&v45);
    v22 = 0;
    outlined destroy of UsoIdentifier?(v33);
    v19 = v45;
    v20 = v46;
    if (v46)
    {
      v17 = v19;
      v18 = v20;
      v14 = v20;
      v13 = v19;
      v37 = v19;
      v38 = v20;
      swift_bridgeObjectRelease();
      v15 = v13;
      v16 = v14;
      return v15;
    }
    v4 = v22;
    v41 = v23;
    result = Sequence.first(where:)();
    v12 = v4;
    if (!v4)
    {
      _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))closure #2 in UsoEntity_common_App.appIdentifier.getter, 0, v29, MEMORY[0x24BEE4078], MEMORY[0x24BEE0D00], v21, (uint64_t)&v42);
      outlined destroy of UsoIdentifier?(v31);
      v10 = v42;
      v11 = v43;
      if (v43)
      {
        v8 = v10;
        v9 = v11;
        v7 = v11;
        v6 = v10;
        v39 = v10;
        v40 = v11;
        swift_bridgeObjectRelease();
        v15 = v6;
        v16 = v7;
      }
      else
      {
        swift_bridgeObjectRelease();
        v15 = v36;
        v16 = v36;
      }
      return v15;
    }
  }
  __break(1u);
  __break(1u);
  return result;
}

uint64_t UsoEntity_common_PaymentAccount.balanceTypeAsINType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  Swift::String v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t *v50;
  _BYTE **v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint32_t v58;
  int v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t *v69;
  uint64_t *v70;
  _BYTE **v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint32_t v78;
  int v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t *v89;
  uint64_t *v90;
  _BYTE **v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint32_t v98;
  int v99;
  NSObject *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  uint8_t *v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE **v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t *v116;
  uint32_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  NSObject *v129;
  int v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *object;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  unint64_t v151;
  char *v152;
  unint64_t v153;
  char *v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t (*v165)(uint64_t, uint64_t, uint64_t);
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _BYTE *v169;
  uint64_t v170;
  uint32_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _BYTE *v176;
  uint64_t v177;
  uint32_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _BYTE *v182;
  uint64_t v183;
  uint32_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _BYTE *v190;
  uint64_t v191;
  uint32_t v192;
  uint64_t v193;
  char *v194;

  v194 = 0;
  v193 = 0;
  v146 = 0;
  v186 = 0;
  v172 = 0;
  v157 = 0;
  v147 = type metadata accessor for Logger();
  v148 = *(_QWORD *)(v147 - 8);
  v149 = (*(_QWORD *)(v148 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v147);
  v150 = (char *)&v42 - v149;
  v151 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v42 - v149);
  v152 = (char *)&v42 - v151;
  v153 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v42 - v151);
  v154 = (char *)&v42 - v153;
  v155 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v42 - v153);
  v156 = (char *)&v42 - v155;
  v158 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v157);
  v159 = (uint64_t)&v42 - v158;
  v160 = type metadata accessor for UsoIdentifier();
  v161 = *(_QWORD *)(v160 - 8);
  v162 = (*(_QWORD *)(v161 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v160);
  v163 = (char *)&v42 - v162;
  v194 = (char *)&v42 - v162;
  v193 = v0;
  v164 = MEMORY[0x2495718D0](v4);
  if (v164 && (v145 = v164, v143 = v164, v144 = MEMORY[0x249571894](), swift_release(), v144))
  {
    v142 = v144;
    v139 = v144;
    object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("name", 4uLL, 1)._object;
    v140 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
    swift_bridgeObjectRelease();
    swift_release();
    v141 = v140;
  }
  else
  {
    v141 = 0;
  }
  v137 = v141;
  if (!v141)
  {
    v36 = v150;
    v37 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v148 + 16))(v36, v37, v147);
    v60 = Logger.logObject.getter();
    v59 = static os_log_type_t.debug.getter();
    v57 = &v191;
    v191 = 2;
    v55 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v56 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v58 = v192;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v61 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v60, (os_log_type_t)v59))
    {
      v38 = v146;
      v45 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v44 = 0;
      v46 = createStorage<A>(capacity:type:)(0);
      v47 = createStorage<A>(capacity:type:)(v44);
      v51 = &v190;
      v190 = v45;
      v52 = &v189;
      v189 = v46;
      v49 = &v188;
      v188 = v47;
      v48 = 0;
      serialize(_:at:)(0, &v190);
      serialize(_:at:)(v48, v51);
      v187 = v61;
      v50 = &v42;
      MEMORY[0x24BDAC7A8](&v42);
      v39 = v52;
      v40 = &v42 - 6;
      v53 = &v42 - 6;
      v40[2] = (uint64_t)v51;
      v40[3] = (uint64_t)v39;
      v40[4] = v41;
      v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v38)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_24701B000, v60, (os_log_type_t)v59, "#UsoEntity_common_PaymentAccount no USO identifiers found trying to determine balance type, returning unknown", v45, v58);
        v42 = 0;
        destroyStorage<A>(_:count:)(v46, 0, v43);
        destroyStorage<A>(_:count:)(v47, v42, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v45, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v148 + 8))(v150, v147);
    return v157;
  }
  v136 = v137;
  v5 = v146;
  v133 = v137;
  v186 = v137;
  v185 = v137;
  v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoIdentifier]);
  lazy protocol witness table accessor for type [UsoIdentifier] and conformance [A]();
  result = Sequence.first(where:)();
  v135 = v5;
  if (!v5)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v161 + 48))(v159, 1, v160) == 1)
    {
      v30 = v152;
      outlined destroy of UsoIdentifier?(v159);
      v31 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v148 + 16))(v30, v31, v147);
      v80 = Logger.logObject.getter();
      v79 = static os_log_type_t.debug.getter();
      v77 = &v183;
      v183 = 2;
      v75 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v76 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v78 = v184;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v81 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v80, (os_log_type_t)v79))
      {
        v32 = v135;
        v65 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v64 = 0;
        v66 = createStorage<A>(capacity:type:)(0);
        v67 = createStorage<A>(capacity:type:)(v64);
        v71 = &v182;
        v182 = v65;
        v72 = &v181;
        v181 = v66;
        v69 = &v180;
        v180 = v67;
        v68 = 0;
        serialize(_:at:)(0, &v182);
        serialize(_:at:)(v68, v71);
        v179 = v81;
        v70 = &v42;
        MEMORY[0x24BDAC7A8](&v42);
        v33 = v72;
        v34 = &v42 - 6;
        v73 = &v42 - 6;
        v34[2] = (uint64_t)v71;
        v34[3] = (uint64_t)v33;
        v34[4] = v35;
        v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v32)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_24701B000, v80, (os_log_type_t)v79, "#UsoEntity_common_PaymentAccount no identifiers for balance type had the expected namespace, returning unknown", v65, v78);
          v62 = 0;
          destroyStorage<A>(_:count:)(v66, 0, v63);
          destroyStorage<A>(_:count:)(v67, v62, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v65, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v148 + 8))(v152, v147);
      swift_bridgeObjectRelease();
      return v157;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v161 + 32))(v163, v159, v160);
      v7._countAndFlagsBits = UsoIdentifier.value.getter();
      LOBYTE(v8) = Constants.PaymentAccountBalanceType.init(rawValue:)(v7);
      v132 = v8;
      if (v8 == 4)
      {
        v24 = v154;
        v25 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v148 + 16))(v24, v25, v147);
        v100 = Logger.logObject.getter();
        v99 = static os_log_type_t.debug.getter();
        v97 = &v177;
        v177 = 2;
        v95 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v96 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v98 = v178;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        v101 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v100, (os_log_type_t)v99))
        {
          v26 = v135;
          v85 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v83 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v84 = 0;
          v86 = createStorage<A>(capacity:type:)(0);
          v87 = createStorage<A>(capacity:type:)(v84);
          v91 = &v176;
          v176 = v85;
          v92 = &v175;
          v175 = v86;
          v89 = &v174;
          v174 = v87;
          v88 = 0;
          serialize(_:at:)(0, &v176);
          serialize(_:at:)(v88, v91);
          v173 = v101;
          v90 = &v42;
          MEMORY[0x24BDAC7A8](&v42);
          v27 = v92;
          v28 = &v42 - 6;
          v93 = &v42 - 6;
          v28[2] = (uint64_t)v91;
          v28[3] = (uint64_t)v27;
          v28[4] = v29;
          v94 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v26)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_24701B000, v100, (os_log_type_t)v99, "#UsoEntity_common_PaymentAccount balanceType couldn't parse, returning unknown", v85, v98);
            v82 = 0;
            destroyStorage<A>(_:count:)(v86, 0, v83);
            destroyStorage<A>(_:count:)(v87, v82, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x2495725CC](v85, MEMORY[0x24BEE4260]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        (*(void (**)(char *, uint64_t))(v148 + 8))(v154, v147);
        (*(void (**)(char *, uint64_t))(v161 + 8))(v163, v160);
        swift_bridgeObjectRelease();
        return v157;
      }
      else
      {
        v131 = v132;
        v9 = v156;
        v113 = v132;
        v172 = v132;
        v10 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v148 + 16))(v9, v10, v147);
        v118 = 17;
        v120 = 7;
        v121 = swift_allocObject();
        *(_BYTE *)(v121 + 16) = v113;
        v129 = Logger.logObject.getter();
        v130 = static os_log_type_t.debug.getter();
        v116 = &v170;
        v170 = 12;
        v114 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v115 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v117 = v171;
        v123 = swift_allocObject();
        *(_BYTE *)(v123 + 16) = 32;
        v124 = swift_allocObject();
        *(_BYTE *)(v124 + 16) = 8;
        v119 = 32;
        v11 = swift_allocObject();
        v12 = v121;
        v122 = v11;
        *(_QWORD *)(v11 + 16) = partial apply for implicit closure #1 in UsoEntity_common_PaymentAccount.balanceTypeAsINType.getter;
        *(_QWORD *)(v11 + 24) = v12;
        v13 = swift_allocObject();
        v14 = v122;
        v126 = v13;
        *(_QWORD *)(v13 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v13 + 24) = v14;
        v128 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        v125 = _allocateUninitializedArray<A>(_:)();
        v127 = v15;
        swift_retain();
        v16 = v123;
        v17 = v127;
        *v127 = partial apply for closure #1 in OSLogArguments.append(_:);
        v17[1] = v16;
        swift_retain();
        v18 = v124;
        v19 = v127;
        v127[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v19[3] = v18;
        swift_retain();
        v20 = v126;
        v21 = v127;
        v127[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v21[5] = v20;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v129, (os_log_type_t)v130))
        {
          v22 = v135;
          v106 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v105 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v107 = createStorage<A>(capacity:type:)(0);
          v108 = createStorage<A>(capacity:type:)(1);
          v109 = &v169;
          v169 = v106;
          v110 = &v168;
          v168 = v107;
          v111 = &v167;
          v167 = v108;
          serialize(_:at:)(2, &v169);
          serialize(_:at:)(1, v109);
          v165 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v166 = v123;
          closure #1 in osLogInternal(_:log:type:)(&v165, (uint64_t)v109, (uint64_t)v110, (uint64_t)v111);
          v112 = v22;
          if (v22)
          {
            __break(1u);
          }
          else
          {
            v165 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v166 = v124;
            closure #1 in osLogInternal(_:log:type:)(&v165, (uint64_t)&v169, (uint64_t)&v168, (uint64_t)&v167);
            v104 = 0;
            v165 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v166 = v126;
            closure #1 in osLogInternal(_:log:type:)(&v165, (uint64_t)&v169, (uint64_t)&v168, (uint64_t)&v167);
            _os_log_impl(&dword_24701B000, v129, (os_log_type_t)v130, "#UsoEntity_common_PaymentAccount found balance type %s", v106, v117);
            destroyStorage<A>(_:count:)(v107, 0, v105);
            destroyStorage<A>(_:count:)(v108, 1, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x2495725CC](v106, MEMORY[0x24BEE4260]);
            swift_release();
            swift_release();
            swift_release();
          }
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }

        (*(void (**)(char *, uint64_t))(v148 + 8))(v156, v147);
        Constants.PaymentAccountBalanceType.asINBalanceType.getter(v113);
        v102 = v23;
        (*(void (**)(char *, uint64_t))(v161 + 8))(v163, v160);
        swift_bridgeObjectRelease();
        return v102;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t UsoEntity_common_PaymentAccount.accountAsINType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  Swift::String_optional v7;
  int v8;
  uint64_t v9;
  char v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t *v51;
  _BYTE **v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint32_t v59;
  int v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t *v71;
  _BYTE **v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint32_t v79;
  int v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t *v91;
  _BYTE **v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint32_t v99;
  int v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  uint8_t *v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE **v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t *v116;
  uint32_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  NSObject *v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *object;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  unint64_t v151;
  char *v152;
  unint64_t v153;
  char *v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t (*v165)(uint64_t, uint64_t, uint64_t);
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _BYTE *v169;
  uint64_t v170;
  uint32_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _BYTE *v177;
  uint64_t v178;
  uint32_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _BYTE *v183;
  uint64_t v184;
  uint32_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _BYTE *v191;
  uint64_t v192;
  uint32_t v193;
  uint64_t v194;
  char *v195;

  v195 = 0;
  v194 = 0;
  v146 = 0;
  v187 = 0;
  v173 = 0;
  v172 = 0;
  v157 = 0;
  v147 = type metadata accessor for Logger();
  v148 = *(_QWORD *)(v147 - 8);
  v149 = (*(_QWORD *)(v148 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v147);
  v150 = (char *)&v43 - v149;
  v151 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v43 - v149);
  v152 = (char *)&v43 - v151;
  v153 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v43 - v151);
  v154 = (char *)&v43 - v153;
  v155 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v43 - v153);
  v156 = (char *)&v43 - v155;
  v158 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v157);
  v159 = (uint64_t)&v43 - v158;
  v160 = type metadata accessor for UsoIdentifier();
  v161 = *(_QWORD *)(v160 - 8);
  v162 = (*(_QWORD *)(v161 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v160);
  v163 = (char *)&v43 - v162;
  v195 = (char *)&v43 - v162;
  v194 = v0;
  v164 = MEMORY[0x2495718A0](v4);
  if (v164)
  {
    v145 = v164;
    v142 = v164;
    object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("name", 4uLL, 1)._object;
    v143 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
    swift_bridgeObjectRelease();
    swift_release();
    v144 = v143;
  }
  else
  {
    v144 = 0;
  }
  v140 = v144;
  if (!v144)
  {
    v37 = v150;
    v38 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v148 + 16))(v37, v38, v147);
    v61 = Logger.logObject.getter();
    v60 = static os_log_type_t.debug.getter();
    v58 = &v192;
    v192 = 2;
    v56 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v57 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v59 = v193;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v62 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v61, (os_log_type_t)v60))
    {
      v39 = v146;
      v46 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v45 = 0;
      v47 = createStorage<A>(capacity:type:)(0);
      v48 = createStorage<A>(capacity:type:)(v45);
      v52 = &v191;
      v191 = v46;
      v53 = &v190;
      v190 = v47;
      v50 = &v189;
      v189 = v48;
      v49 = 0;
      serialize(_:at:)(0, &v191);
      serialize(_:at:)(v49, v52);
      v188 = v62;
      v51 = &v43;
      MEMORY[0x24BDAC7A8](&v43);
      v40 = v53;
      v41 = &v43 - 6;
      v54 = &v43 - 6;
      v41[2] = (uint64_t)v52;
      v41[3] = (uint64_t)v40;
      v41[4] = v42;
      v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v39)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_24701B000, v61, (os_log_type_t)v60, "#UsoEntity_common_PaymentAccount no USO identifiers found trying to determine account type,returning unknown", v46, v59);
        v43 = 0;
        destroyStorage<A>(_:count:)(v47, 0, v44);
        destroyStorage<A>(_:count:)(v48, v43, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v46, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v148 + 8))(v150, v147);
    return v157;
  }
  v139 = v140;
  v5 = v146;
  v136 = v140;
  v187 = v140;
  v186 = v140;
  v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoIdentifier]);
  lazy protocol witness table accessor for type [UsoIdentifier] and conformance [A]();
  result = Sequence.first(where:)();
  v138 = v5;
  if (!v5)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v161 + 48))(v159, 1, v160) == 1)
    {
      v31 = v152;
      outlined destroy of UsoIdentifier?(v159);
      v32 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v148 + 16))(v31, v32, v147);
      v81 = Logger.logObject.getter();
      v80 = static os_log_type_t.debug.getter();
      v78 = &v184;
      v184 = 2;
      v76 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v77 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v79 = v185;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v82 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v81, (os_log_type_t)v80))
      {
        v33 = v138;
        v66 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v65 = 0;
        v67 = createStorage<A>(capacity:type:)(0);
        v68 = createStorage<A>(capacity:type:)(v65);
        v72 = &v183;
        v183 = v66;
        v73 = &v182;
        v182 = v67;
        v70 = &v181;
        v181 = v68;
        v69 = 0;
        serialize(_:at:)(0, &v183);
        serialize(_:at:)(v69, v72);
        v180 = v82;
        v71 = &v43;
        MEMORY[0x24BDAC7A8](&v43);
        v34 = v73;
        v35 = &v43 - 6;
        v74 = &v43 - 6;
        v35[2] = (uint64_t)v72;
        v35[3] = (uint64_t)v34;
        v35[4] = v36;
        v75 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v33)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_24701B000, v81, (os_log_type_t)v80, "#UsoEntity_common_PaymentAccount no identifiers had the expected namespace, returning unknown", v66, v79);
          v63 = 0;
          destroyStorage<A>(_:count:)(v67, 0, v64);
          destroyStorage<A>(_:count:)(v68, v63, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v66, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v148 + 8))(v152, v147);
      swift_bridgeObjectRelease();
      return v157;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v161 + 32))(v163, v159, v160);
      v7.value._countAndFlagsBits = UsoIdentifier.value.getter();
      LOBYTE(v8) = Constants.PaymentAccountType.init(from:)(v7);
      v135 = v8;
      if (v8 == 9
        || (v134 = v135,
            v132 = v135,
            v173 = v135,
            Constants.PaymentAccountType.asINAccountType.getter(v135),
            v133 = v9,
            (v10 & 1) != 0))
      {
        v25 = v154;
        v26 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v148 + 16))(v25, v26, v147);
        v101 = Logger.logObject.getter();
        v100 = static os_log_type_t.debug.getter();
        v98 = &v178;
        v178 = 2;
        v96 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v97 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v99 = v179;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        v102 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v101, (os_log_type_t)v100))
        {
          v27 = v138;
          v86 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v84 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v85 = 0;
          v87 = createStorage<A>(capacity:type:)(0);
          v88 = createStorage<A>(capacity:type:)(v85);
          v92 = &v177;
          v177 = v86;
          v93 = &v176;
          v176 = v87;
          v90 = &v175;
          v175 = v88;
          v89 = 0;
          serialize(_:at:)(0, &v177);
          serialize(_:at:)(v89, v92);
          v174 = v102;
          v91 = &v43;
          MEMORY[0x24BDAC7A8](&v43);
          v28 = v93;
          v29 = &v43 - 6;
          v94 = &v43 - 6;
          v29[2] = (uint64_t)v92;
          v29[3] = (uint64_t)v28;
          v29[4] = v30;
          v95 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v27)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_24701B000, v101, (os_log_type_t)v100, "#UsoEntity_common_PaymentAccount accountType couldn't parse, returning unknown", v86, v99);
            v83 = 0;
            destroyStorage<A>(_:count:)(v87, 0, v84);
            destroyStorage<A>(_:count:)(v88, v83, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x2495725CC](v86, MEMORY[0x24BEE4260]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        (*(void (**)(char *, uint64_t))(v148 + 8))(v154, v147);
        (*(void (**)(char *, uint64_t))(v161 + 8))(v163, v160);
        swift_bridgeObjectRelease();
        return v157;
      }
      else
      {
        v131 = v133;
        v11 = v156;
        v113 = v133;
        v172 = v133;
        v12 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v148 + 16))(v11, v12, v147);
        v118 = 17;
        v120 = 7;
        v121 = swift_allocObject();
        *(_BYTE *)(v121 + 16) = v132;
        v129 = Logger.logObject.getter();
        v130 = static os_log_type_t.debug.getter();
        v116 = &v170;
        v170 = 12;
        v114 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v115 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v117 = v171;
        v123 = swift_allocObject();
        *(_BYTE *)(v123 + 16) = 32;
        v124 = swift_allocObject();
        *(_BYTE *)(v124 + 16) = 8;
        v119 = 32;
        v13 = swift_allocObject();
        v14 = v121;
        v122 = v13;
        *(_QWORD *)(v13 + 16) = partial apply for implicit closure #1 in UsoEntity_common_PaymentAccount.accountAsINType.getter;
        *(_QWORD *)(v13 + 24) = v14;
        v15 = swift_allocObject();
        v16 = v122;
        v126 = v15;
        *(_QWORD *)(v15 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v15 + 24) = v16;
        v128 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        v125 = _allocateUninitializedArray<A>(_:)();
        v127 = v17;
        swift_retain();
        v18 = v123;
        v19 = v127;
        *v127 = partial apply for closure #1 in OSLogArguments.append(_:);
        v19[1] = v18;
        swift_retain();
        v20 = v124;
        v21 = v127;
        v127[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v21[3] = v20;
        swift_retain();
        v22 = v126;
        v23 = v127;
        v127[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v23[5] = v22;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v129, (os_log_type_t)v130))
        {
          v24 = v138;
          v106 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v105 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v107 = createStorage<A>(capacity:type:)(0);
          v108 = createStorage<A>(capacity:type:)(1);
          v109 = &v169;
          v169 = v106;
          v110 = &v168;
          v168 = v107;
          v111 = &v167;
          v167 = v108;
          serialize(_:at:)(2, &v169);
          serialize(_:at:)(1, v109);
          v165 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v166 = v123;
          closure #1 in osLogInternal(_:log:type:)(&v165, (uint64_t)v109, (uint64_t)v110, (uint64_t)v111);
          v112 = v24;
          if (v24)
          {
            __break(1u);
          }
          else
          {
            v165 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v166 = v124;
            closure #1 in osLogInternal(_:log:type:)(&v165, (uint64_t)&v169, (uint64_t)&v168, (uint64_t)&v167);
            v104 = 0;
            v165 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v166 = v126;
            closure #1 in osLogInternal(_:log:type:)(&v165, (uint64_t)&v169, (uint64_t)&v168, (uint64_t)&v167);
            _os_log_impl(&dword_24701B000, v129, (os_log_type_t)v130, "#UsoEntity_common_PaymentAccount found accountType %s", v106, v117);
            destroyStorage<A>(_:count:)(v107, 0, v105);
            destroyStorage<A>(_:count:)(v108, 1, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x2495725CC](v106, MEMORY[0x24BEE4260]);
            swift_release();
            swift_release();
            swift_release();
          }
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }

        (*(void (**)(char *, uint64_t))(v148 + 8))(v156, v147);
        (*(void (**)(char *, uint64_t))(v161 + 8))(v163, v160);
        swift_bridgeObjectRelease();
        return v113;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t UsoEntity_common_CurrencyAmount.currencyIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE **v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint32_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  NSObject *v68;
  int v69;
  uint64_t v70;
  Swift::String v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE **v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint32_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  NSObject *v103;
  int v104;
  uint64_t v105;
  uint64_t *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *object;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t (*v141)(uint64_t, uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE *v145;
  uint64_t v146;
  uint32_t v147;
  uint64_t (*v148)(uint64_t, uint64_t, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE *v152;
  uint64_t v153;
  uint32_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;

  v162 = 0;
  v161 = 0;
  v116 = 0;
  v157 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  v117 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v118 = (uint64_t)&v38 - v117;
  v129 = 0;
  v119 = type metadata accessor for UsoIdentifier();
  v120 = *(_QWORD *)(v119 - 8);
  v121 = (*(_QWORD *)(v120 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v129);
  v122 = (char *)&v38 - v121;
  v162 = (char *)&v38 - v121;
  v123 = type metadata accessor for Locale();
  v124 = *(_QWORD *)(v123 - 8);
  v125 = (*(_QWORD *)(v124 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v123);
  v126 = (char *)&v38 - v125;
  v127 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v38 - v125);
  v128 = (char *)&v38 - v127;
  v130 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.Currency?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v129);
  v131 = (uint64_t)&v38 - v130;
  v132 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v133 = (uint64_t)&v38 - v132;
  v134 = type metadata accessor for Logger();
  v135 = *(_QWORD *)(v134 - 8);
  v136 = (*(_QWORD *)(v135 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v134);
  v137 = (char *)&v38 - v136;
  v138 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v38 - v136);
  v139 = (char *)&v38 - v138;
  v161 = v0;
  v140 = MEMORY[0x249571894]();
  if (v140)
  {
    v115 = v140;
    v112 = v140;
    object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("name", 4uLL, 1)._object;
    v113 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
    swift_bridgeObjectRelease();
    swift_release();
    v114 = v113;
  }
  else
  {
    v114 = 0;
  }
  v159 = v114;
  if (v114)
  {
    v160 = v159;
  }
  else
  {
    v160 = _allocateUninitializedArray<A>(_:)();
    outlined destroy of [SFCardSection]();
  }
  v6 = v116;
  v158 = v160;
  v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoIdentifier]);
  lazy protocol witness table accessor for type [UsoIdentifier] and conformance [A]();
  result = _ArrayProtocol.filter(_:)();
  v109 = v6;
  v110 = result;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    v105 = v110;
    v157 = v110;
    swift_bridgeObjectRetain();
    v106 = &v156;
    v156 = v105;
    lazy protocol witness table accessor for type [UsoIdentifier] and conformance [A]();
    v107 = Collection.isEmpty.getter();
    outlined destroy of [SFCardSection]();
    if ((v107 & 1) != 0)
    {
      v8 = v139;
      v9 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v135 + 16))(v8, v9, v134);
      v103 = Logger.logObject.getter();
      v104 = static os_log_type_t.debug.getter();
      v91 = &v146;
      v146 = 12;
      v89 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v90 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v92 = v147;
      v93 = 17;
      v95 = 7;
      v97 = swift_allocObject();
      *(_BYTE *)(v97 + 16) = 32;
      v98 = swift_allocObject();
      *(_BYTE *)(v98 + 16) = 8;
      v94 = 32;
      v10 = swift_allocObject();
      v96 = v10;
      *(_QWORD *)(v10 + 16) = implicit closure #2 in UsoEntity_common_CurrencyAmount.currencyIdentifier.getter;
      *(_QWORD *)(v10 + 24) = 0;
      v11 = swift_allocObject();
      v12 = v96;
      v100 = v11;
      *(_QWORD *)(v11 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v11 + 24) = v12;
      v102 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v99 = _allocateUninitializedArray<A>(_:)();
      v101 = v13;
      swift_retain();
      v14 = v97;
      v15 = v101;
      *v101 = partial apply for closure #1 in OSLogArguments.append(_:);
      v15[1] = v14;
      swift_retain();
      v16 = v98;
      v17 = v101;
      v101[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v17[3] = v16;
      swift_retain();
      v18 = v100;
      v19 = v101;
      v101[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v19[5] = v18;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v103, (os_log_type_t)v104))
      {
        v20 = v109;
        v82 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v81 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v83 = createStorage<A>(capacity:type:)(0);
        v84 = createStorage<A>(capacity:type:)(1);
        v85 = &v145;
        v145 = v82;
        v86 = &v144;
        v144 = v83;
        v87 = &v143;
        v143 = v84;
        serialize(_:at:)(2, &v145);
        serialize(_:at:)(1, v85);
        v141 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v142 = v97;
        closure #1 in osLogInternal(_:log:type:)(&v141, (uint64_t)v85, (uint64_t)v86, (uint64_t)v87);
        v88 = v20;
        if (v20)
        {
          __break(1u);
        }
        else
        {
          v141 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v142 = v98;
          closure #1 in osLogInternal(_:log:type:)(&v141, (uint64_t)&v145, (uint64_t)&v144, (uint64_t)&v143);
          v80 = 0;
          v141 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v142 = v100;
          closure #1 in osLogInternal(_:log:type:)(&v141, (uint64_t)&v145, (uint64_t)&v144, (uint64_t)&v143);
          _os_log_impl(&dword_24701B000, v103, (os_log_type_t)v104, "#UsoEntity_common_CurrencyAmount currencyIdentifier could not find any USO identifiers for currencyUnit, will use Locale.current's unit %s", v82, v92);
          destroyStorage<A>(_:count:)(v83, 0, v81);
          destroyStorage<A>(_:count:)(v84, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v82, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v135 + 8))(v139, v134);
      static Locale.current.getter();
      Locale.currency.getter();
      (*(void (**)(char *, uint64_t))(v124 + 8))(v128, v123);
      v78 = type metadata accessor for Locale.Currency();
      v79 = *(_QWORD *)(v78 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v79 + 48))(v133, 1) == 1)
      {
        v73 = 0;
        outlined destroy of Locale.Currency?(v133);
        *(_QWORD *)&v77 = v73;
        *((_QWORD *)&v77 + 1) = v73;
      }
      else
      {
        *(_QWORD *)&v76 = MEMORY[0x249570730]();
        *((_QWORD *)&v76 + 1) = v21;
        (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v133, v78);
        v77 = v76;
      }
      v74 = v77;
      swift_bridgeObjectRelease();
      return v74;
    }
    v22 = v109;
    v155 = v105;
    lazy protocol witness table accessor for type [UsoIdentifier] and conformance [A]();
    result = Sequence.first(where:)();
    v72 = v22;
    if (!v22)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48))(v118, 1, v119) == 1)
      {
        v24 = v137;
        outlined destroy of UsoIdentifier?(v118);
        v25 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v135 + 16))(v24, v25, v134);
        v68 = Logger.logObject.getter();
        v69 = static os_log_type_t.debug.getter();
        v56 = &v153;
        v153 = 12;
        v54 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v55 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v57 = v154;
        v58 = 17;
        v60 = 7;
        v62 = swift_allocObject();
        *(_BYTE *)(v62 + 16) = 32;
        v63 = swift_allocObject();
        *(_BYTE *)(v63 + 16) = 8;
        v59 = 32;
        v26 = swift_allocObject();
        v61 = v26;
        *(_QWORD *)(v26 + 16) = implicit closure #2 in UsoEntity_common_CurrencyAmount.currencyIdentifier.getter;
        *(_QWORD *)(v26 + 24) = 0;
        v27 = swift_allocObject();
        v28 = v61;
        v65 = v27;
        *(_QWORD *)(v27 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v27 + 24) = v28;
        v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        v64 = _allocateUninitializedArray<A>(_:)();
        v66 = v29;
        swift_retain();
        v30 = v62;
        v31 = v66;
        *v66 = partial apply for closure #1 in OSLogArguments.append(_:);
        v31[1] = v30;
        swift_retain();
        v32 = v63;
        v33 = v66;
        v66[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v33[3] = v32;
        swift_retain();
        v34 = v65;
        v35 = v66;
        v66[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v35[5] = v34;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v68, (os_log_type_t)v69))
        {
          v36 = v72;
          v47 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v48 = createStorage<A>(capacity:type:)(0);
          v49 = createStorage<A>(capacity:type:)(1);
          v50 = &v152;
          v152 = v47;
          v51 = &v151;
          v151 = v48;
          v52 = &v150;
          v150 = v49;
          serialize(_:at:)(2, &v152);
          serialize(_:at:)(1, v50);
          v148 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v149 = v62;
          closure #1 in osLogInternal(_:log:type:)(&v148, (uint64_t)v50, (uint64_t)v51, (uint64_t)v52);
          v53 = v36;
          if (v36)
          {
            __break(1u);
          }
          else
          {
            v148 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v149 = v63;
            closure #1 in osLogInternal(_:log:type:)(&v148, (uint64_t)&v152, (uint64_t)&v151, (uint64_t)&v150);
            v45 = 0;
            v148 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v149 = v65;
            closure #1 in osLogInternal(_:log:type:)(&v148, (uint64_t)&v152, (uint64_t)&v151, (uint64_t)&v150);
            _os_log_impl(&dword_24701B000, v68, (os_log_type_t)v69, "#UsoEntity_common_CurrencyAmount currencyIdentifier isAmbiguousCurrency is true, will use Locale.current's unit %s", v47, v57);
            destroyStorage<A>(_:count:)(v48, 0, v46);
            destroyStorage<A>(_:count:)(v49, 1, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x2495725CC](v47, MEMORY[0x24BEE4260]);
            swift_release();
            swift_release();
            swift_release();
          }
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }

        (*(void (**)(char *, uint64_t))(v135 + 8))(v137, v134);
        static Locale.current.getter();
        Locale.currency.getter();
        (*(void (**)(char *, uint64_t))(v124 + 8))(v126, v123);
        v43 = type metadata accessor for Locale.Currency();
        v44 = *(_QWORD *)(v43 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t))(v44 + 48))(v131, 1) == 1)
        {
          v39 = 0;
          outlined destroy of Locale.Currency?(v131);
          *(_QWORD *)&v42 = v39;
          *((_QWORD *)&v42 + 1) = v39;
        }
        else
        {
          *(_QWORD *)&v41 = MEMORY[0x249570730]();
          *((_QWORD *)&v41 + 1) = v37;
          (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v131, v43);
          v42 = v41;
        }
        v40 = v42;
        swift_bridgeObjectRelease();
        return v40;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v120 + 32))(v122, v118, v119);
        UsoIdentifier.value.getter();
        v70 = v23;
        v71 = String.uppercased()();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v120 + 8))(v122, v119);
        swift_bridgeObjectRelease();
        return v71._countAndFlagsBits;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t UsoEntity_common_Person.contactId.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = 0;
  v15 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  v12 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v14 = (uint64_t)&v4 - v12;
  v18 = v0;
  swift_retain();
  v13 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  swift_release();
  v17 = v13;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoIdentifier]);
  lazy protocol witness table accessor for type [UsoIdentifier] and conformance [A]();
  Sequence.first(where:)();
  outlined destroy of [SFCardSection]();
  v10 = type metadata accessor for UsoIdentifier();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v11 + 48))(v14, 1) == 1)
  {
    v5 = 0;
    outlined destroy of UsoIdentifier?(v14);
    v8 = v5;
    v9 = v5;
  }
  else
  {
    v6 = UsoIdentifier.value.getter();
    v7 = v2;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
    v8 = v6;
    v9 = v7;
  }
  return v8;
}

uint64_t static UsoEntity.from(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD v37[7];
  char *v38;
  int v39;
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Builtin::Word v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  id v95;
  void *v96;
  unint64_t v97;
  id *v98;
  char *v99;
  Builtin::Word v100;
  int v101;
  void *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  id v109;
  id v110;
  uint64_t v111;
  id v112;
  id v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  void *object;
  char *v131;
  Builtin::Word v132;
  int v133;
  void *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  id v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;

  v141 = a1;
  v170 = 0;
  v169 = 0;
  v168 = 0;
  v167 = 0;
  v159 = 0;
  v157 = 0;
  v158 = 0;
  v155 = 0;
  v156 = 0;
  v154 = 0;
  v153 = 0;
  v151 = 0;
  v152 = 0;
  v150 = 0;
  v149 = 0;
  v148 = 0;
  v143 = 0;
  v144 = 0;
  v132 = 0;
  v126 = type metadata accessor for SpeakableString();
  v127 = *(_QWORD *)(v126 - 8);
  v128 = (*(_QWORD *)(v127 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v129 = (char *)v37 - v128;
  v170 = v2;
  v169 = v1;
  type metadata accessor for UsoEntityBuilder_common_PaymentAccount();
  v138 = UsoEntityBuilder_common_PaymentAccount.__allocating_init()();
  v168 = v138;
  type metadata accessor for UsoEntityBuilder_common_PaymentAccountType();
  v140 = UsoEntityBuilder_common_PaymentAccountType.__allocating_init()();
  v167 = v140;
  v3 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v135 = &v165;
  v165 = v3;
  v166 = v4;
  v131 = "";
  v133 = 1;
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v132, 1);
  object = v5._object;
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  objc_msgSend(v141, sel_accountType);
  INBalanceType.rawValue.getter();
  v164 = v6;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v131, v132, v133 & 1);
  v134 = v7._object;
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  v137 = v165;
  v136 = v166;
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  v8 = String.init(stringInterpolation:)();
  v139 = v9;
  MEMORY[0x249571AEC](v8);
  swift_bridgeObjectRelease();
  swift_retain();
  MEMORY[0x249571A74](v140, MEMORY[0x24BEA3198]);
  swift_release();
  v142 = objc_msgSend(v141, sel_accountNumber);
  if (v142)
  {
    v125 = v142;
    v120 = v142;
    v121 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v122 = v10;

    v123 = v121;
    v124 = v122;
  }
  else
  {
    v123 = 0;
    v124 = 0;
  }
  v118 = v124;
  v119 = v123;
  if (v124)
  {
    v116 = v119;
    v117 = v118;
    v115 = v118;
    v143 = v119;
    v144 = v118;
    MEMORY[0x249571A80]();
    swift_bridgeObjectRelease();
  }
  v114 = objc_msgSend(v141, sel_balance);
  if (v114)
  {
    v113 = v114;
    v110 = v114;
    v154 = v114;
    type metadata accessor for UsoEntityBuilder_common_CurrencyAmount();
    v111 = UsoEntityBuilder_common_CurrencyAmount.__allocating_init()();
    v153 = v111;
    v112 = objc_msgSend(v110, sel_amount);
    if (v112)
    {
      v109 = v112;
      v108 = v112;
      v149 = v112;
      v100 = 0;
      type metadata accessor for UsoEntityBuilder_common_Number();
      v107 = UsoEntityBuilder_common_Number.__allocating_init()();
      v148 = v107;
      v11 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v103 = &v146;
      v146 = v11;
      v147 = v12;
      v99 = "";
      v101 = 1;
      v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v100, 1);
      v96 = v13._object;
      DefaultStringInterpolation.appendLiteral(_:)(v13);
      swift_bridgeObjectRelease();
      v98 = &v145;
      v145 = v108;
      v97 = type metadata accessor for NSDecimalNumber();
      lazy protocol witness table accessor for type NSDecimalNumber and conformance NSObject();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v99, v100, v101 & 1);
      v102 = v14._object;
      DefaultStringInterpolation.appendLiteral(_:)(v14);
      swift_bridgeObjectRelease();
      v105 = v146;
      v104 = v147;
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      v15 = String.init(stringInterpolation:)();
      v106 = v16;
      MEMORY[0x249571798](v15);
      swift_bridgeObjectRelease();
      swift_retain();
      MEMORY[0x249571A50](v107, MEMORY[0x24BEA1490]);
      swift_release();
      swift_release();

    }
    v95 = objc_msgSend(v110, sel_currencyCode);
    if (v95)
    {
      v94 = v95;
      v89 = v95;
      v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v91 = v17;

      v92 = v90;
      v93 = v91;
    }
    else
    {
      v92 = 0;
      v93 = 0;
    }
    v87 = v93;
    v88 = v92;
    if (v93)
    {
      v85 = v88;
      v86 = v87;
      v84 = v87;
      v82 = v88;
      v151 = v88;
      v152 = v87;
      type metadata accessor for UsoEntityBuilder_common_Currency();
      v83 = UsoEntityBuilder_common_Currency.__allocating_init()();
      v150 = v83;
      MEMORY[0x2495718F4](v82, v84);
      swift_retain();
      MEMORY[0x249571A44](v83, MEMORY[0x24BEA1CF0]);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    swift_retain();
    MEMORY[0x249571A8C](v111, MEMORY[0x24BEA2D70]);
    swift_release();
    swift_release();

  }
  v81 = objc_msgSend(v141, sel_nickname);
  if (v81)
  {
    v80 = v81;
    v75 = v81;
    INSpeakableString.toSpeakableString.getter();

    v76 = SpeakableString.print.getter();
    v77 = v18;
    (*(void (**)(char *, uint64_t))(v127 + 8))(v129, v126);
    v78 = v76;
    v79 = v77;
  }
  else
  {
    v78 = 0;
    v79 = 0;
  }
  v73 = v79;
  v74 = v78;
  if (v79)
  {
    v71 = v74;
    v72 = v73;
    v70 = v73;
    v155 = v74;
    v156 = v73;
    MEMORY[0x249571A98]();
    swift_bridgeObjectRelease();
  }
  v69 = objc_msgSend(v141, sel_organizationName);
  if (v69)
  {
    v68 = v69;
    v63 = v69;
    INSpeakableString.toSpeakableString.getter();

    v64 = SpeakableString.print.getter();
    v65 = v19;
    (*(void (**)(char *, uint64_t))(v127 + 8))(v129, v126);
    v66 = v64;
    v67 = v65;
  }
  else
  {
    v66 = 0;
    v67 = 0;
  }
  v61 = v67;
  v62 = v66;
  if (v67)
  {
    v59 = v62;
    v60 = v61;
    v58 = v61;
    v157 = v62;
    v158 = v61;
    MEMORY[0x249571AA4]();
    swift_bridgeObjectRelease();
  }
  v57 = MEMORY[0x2495716FC](v138);
  if (v57)
  {
    v56 = v57;
    v55 = v57;
    v159 = v57;
    swift_release();
    swift_release();
    return v55;
  }
  else
  {
    v46 = 0;
    v52 = type metadata accessor for TransformationError();
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    v39 = 1;
    v54 = swift_allocError();
    v51 = v21;
    v37[5] = 1;
    v22 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v37[2] = &v162;
    v162 = v22;
    v163 = v23;
    v38 = "";
    v24 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v46, v39 & 1);
    v37[0] = v24._object;
    DefaultStringInterpolation.appendLiteral(_:)(v24);
    swift_bridgeObjectRelease();
    type metadata accessor for INPaymentAccount();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v38, v46, v39 & 1);
    v37[1] = v25._object;
    DefaultStringInterpolation.appendLiteral(_:)(v25);
    swift_bridgeObjectRelease();
    v37[4] = v162;
    v37[3] = v163;
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v47 = String.init(stringInterpolation:)();
    v48 = v26;
    v27 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v41 = &v160;
    v160 = v27;
    v161 = v28;
    v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v38, v46, v39 & 1);
    v37[6] = v29._object;
    DefaultStringInterpolation.appendLiteral(_:)(v29);
    swift_bridgeObjectRelease();
    type metadata accessor for UsoEntity();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v30 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v38, v46, v39 & 1);
    v40 = v30._object;
    DefaultStringInterpolation.appendLiteral(_:)(v30);
    swift_bridgeObjectRelease();
    v43 = v160;
    v42 = v161;
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v44 = String.init(stringInterpolation:)();
    v45 = v31;
    v171 = v47;
    v172 = v48;
    v173 = v44;
    v174 = v31;
    v175 = 0;
    v176 = 0;
    v177 = 5;
    PaymentsError.errorDescription.getter();
    v49 = v32;
    v50 = v33;
    outlined consume of PaymentsError(v47, v48, v44, v45, v46, v46, 5u);
    v34 = v50;
    v35 = v51;
    v36 = v52;
    *v51 = v49;
    v35[1] = v34;
    (*(void (**)(void))(*(_QWORD *)(v36 - 8) + 104))();
    swift_willThrow();
    swift_release();
    swift_release();
    return v53;
  }
}

{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  BOOL v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;

  v89 = 0;
  v81 = 0;
  v79 = 0;
  v80 = 0;
  v78 = 0;
  v77 = 0;
  v75 = 0;
  v76 = 0;
  v74 = 0;
  v73 = 0;
  v72 = 0;
  v68 = 0;
  v67 = 0;
  v66 = 0;
  v90 = a1;
  type metadata accessor for UsoEntityBuilder_common_Payment();
  v61 = UsoEntityBuilder_common_Payment.__allocating_init()();
  v88 = v61;
  v86 = objc_msgSend(a1, sel_payee);
  v1 = a1;
  if (v86)
  {
    v87 = v86;
  }
  else
  {
    v87 = objc_msgSend(a1, sel_payer);
    outlined destroy of SFRichText?(&v86);
  }

  v60 = v87;
  if (v87)
  {
    v68 = v87;
    type metadata accessor for UsoEntityBuilder_common_PaymentAccount();
    v58 = UsoEntityBuilder_common_PaymentAccount.__allocating_init()();
    v67 = v58;
    type metadata accessor for UsoEntityBuilder_common_Person();
    v59 = UsoEntityBuilder_common_Person.__allocating_init()();
    v66 = v59;
    v65 = objc_msgSend(v60, sel_personHandle);
    if (v65)
    {
      v56 = v65;
      v2 = v65;
      outlined destroy of SFRichText?(&v65);
      v57 = objc_msgSend(v56, sel_value);
      if (v57)
      {
        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v53 = v3;

        v54 = v52;
        v55 = v53;
      }
      else
      {
        v54 = 0;
        v55 = 0;
      }

      v50 = v54;
      v51 = v55;
    }
    else
    {
      outlined destroy of SFRichText?(&v65);
      v50 = 0;
      v51 = 0;
    }
    if (v51)
    {
      type metadata accessor for UsoEntityBuilder_common_ContactAddress();
      v63 = UsoEntityBuilder_common_ContactAddress.__allocating_init()();
      MEMORY[0x249571A20](v50, v51);
      swift_retain();
      MEMORY[0x2495717C8](v63, MEMORY[0x24BEA2D40]);
      swift_release();
      v49 = objc_msgSend(v60, sel_displayName);
      v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x2495717E0](v4);
      swift_bridgeObjectRelease();

      swift_retain();
      MEMORY[0x249571AB0](v59, MEMORY[0x24BEA14E8]);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    v64 = objc_msgSend(a1, sel_payee);
    v48 = v64 != 0;
    outlined destroy of SFRichText?(&v64);
    swift_retain();
    if (v48)
      MEMORY[0x24957184C](v58, MEMORY[0x24BEA2DD8]);
    else
      MEMORY[0x249571858](v58, MEMORY[0x24BEA2DD8]);
    swift_release();
    swift_release();
    swift_release();

  }
  v47 = objc_msgSend(a1, sel_currencyAmount);
  if (v47)
  {
    v78 = v47;
    type metadata accessor for UsoEntityBuilder_common_CurrencyAmount();
    v45 = UsoEntityBuilder_common_CurrencyAmount.__allocating_init()();
    v77 = v45;
    v46 = objc_msgSend(v47, sel_amount);
    if (v46)
    {
      v73 = v46;
      type metadata accessor for UsoEntityBuilder_common_Number();
      v44 = UsoEntityBuilder_common_Number.__allocating_init()();
      v72 = v44;
      v70 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v71 = v5;
      v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v6);
      swift_bridgeObjectRelease();
      v69 = v46;
      type metadata accessor for NSDecimalNumber();
      lazy protocol witness table accessor for type NSDecimalNumber and conformance NSObject();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      v8 = String.init(stringInterpolation:)();
      MEMORY[0x249571798](v8);
      swift_bridgeObjectRelease();
      swift_retain();
      MEMORY[0x249571A50](v44, MEMORY[0x24BEA1490]);
      swift_release();
      swift_release();

    }
    v43 = objc_msgSend(v47, sel_currencyCode);
    if (v43)
    {
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v40 = v9;

      v41 = v39;
      v42 = v40;
    }
    else
    {
      v41 = 0;
      v42 = 0;
    }
    if (v42)
    {
      v75 = v41;
      v76 = v42;
      type metadata accessor for UsoEntityBuilder_common_Currency();
      v38 = UsoEntityBuilder_common_Currency.__allocating_init()();
      v74 = v38;
      MEMORY[0x2495718F4](v41, v42);
      swift_retain();
      MEMORY[0x249571A44](v38, MEMORY[0x24BEA1CF0]);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    swift_retain();
    MEMORY[0x249571864](v45, MEMORY[0x24BEA2D70]);
    swift_release();
    swift_release();

  }
  v37 = objc_msgSend(a1, sel_note);
  if (v37)
  {
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v10;

    v35 = v33;
    v36 = v34;
  }
  else
  {
    v35 = 0;
    v36 = 0;
  }
  if (v36)
  {
    v79 = v35;
    v80 = v36;
    MEMORY[0x249571840]();
    swift_bridgeObjectRelease();
  }
  v32 = MEMORY[0x2495716FC](v61);
  if (v32)
  {
    v81 = v32;
    swift_release();
    return v32;
  }
  else
  {
    v30 = type metadata accessor for TransformationError();
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    swift_allocError();
    v29 = v12;
    v84 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v85 = v13;
    v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    type metadata accessor for INPaymentRecord();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v25 = String.init(stringInterpolation:)();
    v26 = v16;
    v82 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v83 = v17;
    v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v18);
    swift_bridgeObjectRelease();
    type metadata accessor for UsoEntity();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v23 = String.init(stringInterpolation:)();
    v24 = v20;
    v91 = v25;
    v92 = v26;
    v93 = v23;
    v94 = v20;
    v95 = 0;
    v96 = 0;
    v97 = 5;
    PaymentsError.errorDescription.getter();
    v27 = v21;
    v28 = v22;
    outlined consume of PaymentsError(v25, v26, v23, v24, 0, 0, 5u);
    *v29 = v27;
    v29[1] = v28;
    (*(void (**)(void))(*(_QWORD *)(v30 - 8) + 104))();
    swift_willThrow();
    swift_release();
    return v31;
  }
}

uint64_t UsoEntity.eraseToAny.getter()
{
  swift_retain();
  static UsoEntity_CodeGenConverter.convert(entity:)();
  return swift_release();
}

uint64_t closure #1 in UsoEntity_common_Person.contactId.getter(uint64_t a1)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[12];
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD v38[2];
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v35 = a1;
  v42 = 0;
  v23 = 0;
  v36 = type metadata accessor for UsoIdentifier();
  v33 = *(_QWORD *)(v36 - 8);
  v24 = (*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v34 = &v8[-v24];
  v28 = type metadata accessor for IdentifierAppBundle();
  v26 = *(_QWORD *)(v28 - 8);
  v25 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v28);
  v27 = &v8[-v25];
  v42 = a1;
  UsoIdentifier.appBundleSemantic.getter();
  v29 = IdentifierAppBundle.rawValue.getter();
  v32 = v2;
  (*(void (**)(_BYTE *, uint64_t))(v26 + 8))(v27, v28);
  v3 = AppUtil.usoContactsBundleId.unsafeMutableAddressor();
  v30 = *(_QWORD *)v3;
  v31 = *((_QWORD *)v3 + 1);
  swift_bridgeObjectRetain();
  v37 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v33 + 16))(v34, v35, v36);
  if ((v37 & 1) == 0)
  {
    v11 = 0;
    goto LABEL_12;
  }
  v20 = UsoIdentifier.namespace.getter();
  v21 = v4;
  swift_bridgeObjectRetain();
  UsoIdentifierNamespace.rawValue.getter(0);
  v19 = v5;
  v22 = v6;
  swift_bridgeObjectRetain();
  v39[0] = v20;
  v39[1] = v21;
  v40 = v19;
  v41 = v22;
  if (!v21)
  {
    if (!v41)
    {
      outlined destroy of String.UTF8View();
      v18 = 1;
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  outlined init with copy of String(v39, v38);
  if (!v41)
  {
    outlined destroy of String.UTF8View();
LABEL_9:
    outlined destroy of DIIdentifier();
    v18 = 0;
    goto LABEL_8;
  }
  v12 = v38[0];
  v15 = v38[1];
  swift_bridgeObjectRetain();
  v13 = v40;
  v16 = v39;
  v14 = v41;
  swift_bridgeObjectRetain();
  v17 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();
  v18 = v17;
LABEL_8:
  v10 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v10;
LABEL_12:
  v9 = v11;
  (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v34, v36);
  return v9 & 1;
}

uint64_t closure #1 in UsoEntity_common_App.appIdentifier.getter(uint64_t a1)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  __int128 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v22 = a1;
  v35 = 0;
  v23 = type metadata accessor for UsoIdentifier();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v7 - v25;
  v35 = a1;
  v27 = UsoIdentifier.namespace.getter();
  v28 = v2;
  swift_bridgeObjectRetain();
  v3 = AppUtil.usoNamespace.unsafeMutableAddressor();
  v29 = *(_QWORD *)v3;
  v30 = *((_QWORD *)v3 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32[0] = v27;
  v32[1] = v28;
  v33 = v29;
  v34 = v30;
  if (v28)
  {
    outlined init with copy of String(v32, v31);
    if (v34)
    {
      v15 = v31[0];
      v18 = v31[1];
      swift_bridgeObjectRetain();
      v19 = v32;
      v16 = v33;
      v17 = v34;
      swift_bridgeObjectRetain();
      v20 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of String.UTF8View();
      v21 = v20;
      goto LABEL_7;
    }
    outlined destroy of String.UTF8View();
    goto LABEL_9;
  }
  if (v34)
  {
LABEL_9:
    outlined destroy of DIIdentifier();
    v21 = 0;
    goto LABEL_7;
  }
  outlined destroy of String.UTF8View();
  v21 = 1;
LABEL_7:
  v14 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v22, v23);
  if ((v14 & 1) != 0)
  {
    v8 = UsoIdentifier.appBundleId.getter();
    v11 = v4;
    v5 = AppUtil.usoAppBundleId.unsafeMutableAddressor();
    v9 = *(_QWORD *)v5;
    v10 = *((_QWORD *)v5 + 1);
    swift_bridgeObjectRetain();
    v12 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  HIDWORD(v7) = v13;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  return BYTE4(v7) & 1;
}

uint64_t closure #2 in UsoEntity_common_App.appIdentifier.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = UsoIdentifier.value.getter();
  *a1 = result;
  a1[1] = v2;
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  void (*v19)(char *, char *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v18 = a7;
  v19 = a1;
  v20 = a2;
  v21 = a3;
  v22 = a4;
  v23 = a5;
  v25 = a6;
  v37 = a4;
  v36 = a5;
  v26 = *(_QWORD *)(a4 - 8);
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v28 = (char *)v17 - v27;
  v33 = *(_QWORD *)(v9 + 16);
  v35 = v33;
  v32 = *(_QWORD *)(v33 - 8);
  v29 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v30 = (char *)v17 - v29;
  v31 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = (const void *)MEMORY[0x24BDAC7A8](v10);
  v34 = (char *)v17 - v31;
  _sxSgs5ErrorRd__Ri_d_0_r_0_lWOc(v12, (char *)v17 - v31, v13, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v34, 1, v33) == 1)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v18, 1);
    v17[1] = v24;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v30, v34, v33);
    v16 = v24;
    v19(v30, v28);
    v17[0] = v16;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v30, v33);
    if (v16)
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v25, v28, v22);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v18, 0, 1);
      return v17[0];
    }
  }
  return result;
}

uint64_t closure #3 in UsoEntity_common_App.appIdentifier.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  _BYTE v10[12];
  int v11;
  Swift::String *v12;
  _QWORD *v13;
  int v14;
  int v15;
  void (*v16)(_BYTE *, uint64_t);
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  int v21;
  int v22;
  void (*v23)(_BYTE *, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t countAndFlagsBits;
  uint64_t v40;
  uint64_t v41;
  void *object;
  _QWORD v43[2];
  Swift::String v44;
  _QWORD v45[2];
  _QWORD v46[2];
  uint64_t v47;
  void *v48;
  uint64_t v49;

  v32 = a1;
  v49 = 0;
  v33 = type metadata accessor for UsoIdentifier();
  v34 = *(_QWORD **)(v33 - 8);
  v35 = (v34[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v33);
  v36 = &v10[-v35];
  v37 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](&v10[-v35]);
  v38 = &v10[-v37];
  v49 = a1;
  v40 = UsoIdentifier.namespace.getter();
  v41 = v3;
  swift_bridgeObjectRetain();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appName", 7uLL, 1);
  countAndFlagsBits = v4._countAndFlagsBits;
  object = v4._object;
  swift_bridgeObjectRetain();
  v46[0] = v40;
  v46[1] = v41;
  v47 = countAndFlagsBits;
  v48 = object;
  if (v41)
  {
    outlined init with copy of String(v46, v43);
    if (v48)
    {
      v25 = v43[0];
      v28 = v43[1];
      swift_bridgeObjectRetain();
      v29 = v46;
      v26 = v47;
      v27 = v48;
      swift_bridgeObjectRetain();
      v30 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of String.UTF8View();
      v31 = v30;
      goto LABEL_7;
    }
    outlined destroy of String.UTF8View();
    goto LABEL_9;
  }
  if (v48)
  {
LABEL_9:
    outlined destroy of DIIdentifier();
    v31 = 0;
    goto LABEL_7;
  }
  outlined destroy of String.UTF8View();
  v31 = 1;
LABEL_7:
  v24 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = (void (*)(_BYTE *, uint64_t, uint64_t))v34[2];
  v23(v38, v32, v33);
  if ((v24 & 1) != 0)
  {
    v18 = UsoIdentifier.appBundleId.getter();
    v20 = v5;
    v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.sirinl", 0x15uLL, 1)._object;
    v21 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v21;
  }
  else
  {
    v22 = 0;
  }
  v17 = v22;
  v16 = (void (*)(_BYTE *, uint64_t))v34[1];
  v16(v38, v33);
  v23(v36, v32, v33);
  if ((v17 & 1) != 0)
  {
    v6 = UsoIdentifier.value.getter();
    v13 = v45;
    v45[0] = v6;
    v45[1] = v7;
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".", 1uLL, 1);
    v12 = &v44;
    v44 = v8;
    lazy protocol witness table accessor for type String and conformance String();
    v14 = StringProtocol.contains<A>(_:)();
    outlined destroy of String.UTF8View();
    outlined destroy of String.UTF8View();
    v15 = v14;
  }
  else
  {
    v15 = 0;
  }
  v11 = v15;
  v16(v36, v33);
  return v11 & 1;
}

uint64_t closure #1 in UsoEntity_common_PaymentAccount.accountAsINType.getter(uint64_t a1)
{
  uint64_t v1;
  Swift::String v2;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  Swift::String v10;
  uint64_t v11;

  v11 = a1;
  v6 = UsoIdentifier.namespace.getter();
  v7 = v1;
  swift_bridgeObjectRetain();
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsAccountType", 0x13uLL, 1);
  swift_bridgeObjectRetain();
  v9[0] = v6;
  v9[1] = v7;
  v10 = v2;
  if (!v7)
  {
    if (!v10._object)
    {
      outlined destroy of String.UTF8View();
      v5 = 1;
      goto LABEL_7;
    }
    goto LABEL_8;
  }
  outlined init with copy of String(v9, &v8);
  if (!v10._object)
  {
    outlined destroy of String.UTF8View();
LABEL_8:
    outlined destroy of DIIdentifier();
    v5 = 0;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();
  v5 = v4;
LABEL_7:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

void implicit closure #1 in UsoEntity_common_PaymentAccount.accountAsINType.getter(char a1)
{
  Constants.PaymentAccountType.rawValue.getter(a1);
}

void implicit closure #1 in UsoEntity_common_PaymentAccount.balanceTypeAsINType.getter(char a1)
{
  Constants.PaymentAccountBalanceType.rawValue.getter(a1);
}

uint64_t implicit closure #2 in UsoEntity_common_CurrencyAmount.currencyIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[2];
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v14 = 0;
  v13 = type metadata accessor for Locale();
  v11 = *(_QWORD *)(v13 - 8);
  v9 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v12 = (char *)v3 - v9;
  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.Currency?);
  v10 = (*(_QWORD *)(*(_QWORD *)(v0 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v0);
  v15 = (uint64_t)v3 - v10;
  static Locale.current.getter();
  Locale.currency.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v12, v13);
  v16 = type metadata accessor for Locale.Currency();
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v17 + 48))(v15, 1) == 1)
  {
    v6 = 0;
    outlined destroy of Locale.Currency?(v15);
    v7 = v6;
    v8 = v6;
  }
  else
  {
    v4 = MEMORY[0x249570730]();
    v5 = v1;
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    v7 = v4;
    v8 = v5;
  }
  v3[1] = v18;
  v18[0] = v7;
  v18[1] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  return String.init<A>(describing:)();
}

BOOL closure #2 in UsoEntity_common_CurrencyAmount.currencyIdentifier.getter()
{
  Swift::String v0;
  _BOOL4 v2;

  UsoIdentifier.value.getter();
  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ambiguous", 9uLL, 1);
  v2 = String.hasPrefix(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return !v2;
}

uint64_t sub_2471998D0()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #1 in UsoEntity_common_PaymentAccount.balanceTypeAsINType.getter()
{
  uint64_t v0;

  implicit closure #1 in UsoEntity_common_PaymentAccount.balanceTypeAsINType.getter(*(_BYTE *)(v0 + 16));
}

uint64_t sub_247199900()
{
  return swift_deallocObject();
}

uint64_t sub_247199928()
{
  return swift_deallocObject();
}

uint64_t sub_247199950()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24719998C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2471999C8()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #1 in UsoEntity_common_PaymentAccount.accountAsINType.getter()
{
  uint64_t v0;

  implicit closure #1 in UsoEntity_common_PaymentAccount.accountAsINType.getter(*(_BYTE *)(v0 + 16));
}

uint64_t sub_2471999F8()
{
  return swift_deallocObject();
}

uint64_t sub_247199A20()
{
  return swift_deallocObject();
}

uint64_t sub_247199A48()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247199A84()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247199BA0()
{
  return swift_deallocObject();
}

uint64_t sub_247199BC8()
{
  return swift_deallocObject();
}

uint64_t sub_247199BF0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247199C2C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined destroy of Locale.Currency?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Locale.Currency();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t sub_247199CD8()
{
  return swift_deallocObject();
}

uint64_t sub_247199D00()
{
  return swift_deallocObject();
}

uint64_t sub_247199D28()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247199D64()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type NSDecimalNumber and conformance NSObject()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSDecimalNumber and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSDecimalNumber and conformance NSObject)
  {
    v0 = type metadata accessor for NSDecimalNumber();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BDD0240], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimalNumber and conformance NSObject);
    return v1;
  }
  return v3;
}

void *_sxSgs5ErrorRd__Ri_d_0_r_0_lWOc(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a3 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v9 + 48))(a1, 1))
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a2, a1, a3);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, a3);
  }
  return a2;
}

uint64_t Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_allocObject();
  return Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(a1, a2, a3, a4);
}

uint64_t Globals.contactResolver.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GlobalsProviding(v1 + 16, a1);
}

uint64_t Globals.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GlobalsProviding(v1 + 56, a1);
}

uint64_t Globals.aceServiceInvoker.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GlobalsProviding(v1 + 96, a1);
}

uint64_t Globals.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GlobalsProviding(v1 + 136, a1);
}

uint64_t Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v10;
  _BYTE v11[40];
  _BYTE v12[40];
  _BYTE v13[40];
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v15 = 0;
  v19 = a1;
  v18 = a2;
  v17 = a3;
  v16 = a4;
  outlined init with copy of GlobalsProviding(a1, (uint64_t)v14);
  outlined init with take of CommonLabelsProviding(v14, (void *)(v4 + 16));
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v13);
  outlined init with take of CommonLabelsProviding(v13, (void *)(v4 + 56));
  outlined init with copy of GlobalsProviding(a3, (uint64_t)v12);
  outlined init with take of CommonLabelsProviding(v12, (void *)(v4 + 96));
  outlined init with copy of GlobalsProviding(a4, (uint64_t)v11);
  outlined init with take of CommonLabelsProviding(v11, (void *)(v4 + 136));
  __swift_destroy_boxed_opaque_existential_0(a4);
  __swift_destroy_boxed_opaque_existential_0(a3);
  __swift_destroy_boxed_opaque_existential_0(a2);
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v10;
}

uint64_t Globals.deinit()
{
  uint64_t v0;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  __swift_destroy_boxed_opaque_existential_0(v0 + 96);
  __swift_destroy_boxed_opaque_existential_0(v0 + 136);
  return v2;
}

uint64_t Globals.__deallocating_deinit()
{
  Globals.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for GlobalsProviding.contactResolver.getter in conformance Globals@<X0>(uint64_t a1@<X8>)
{
  return Globals.contactResolver.getter(a1);
}

uint64_t protocol witness for GlobalsProviding.deviceState.getter in conformance Globals@<X0>(uint64_t a1@<X8>)
{
  return Globals.deviceState.getter(a1);
}

uint64_t protocol witness for GlobalsProviding.aceServiceInvoker.getter in conformance Globals@<X0>(uint64_t a1@<X8>)
{
  return Globals.aceServiceInvoker.getter(a1);
}

uint64_t protocol witness for GlobalsProviding.outputPublisher.getter in conformance Globals@<X0>(uint64_t a1@<X8>)
{
  return Globals.outputPublisher.getter(a1);
}

uint64_t type metadata accessor for Globals()
{
  return objc_opt_self();
}

uint64_t SiriKitContactResolver.defaultConfig.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for defaultConfig != -1)
    swift_once();
  v0 = type metadata accessor for ContactResolverConfig();
  return __swift_project_value_buffer(v0, (uint64_t)static SiriKitContactResolver.defaultConfig);
}

uint64_t one-time initialization function for defaultConfig()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int has_malloc_size;
  int v27;
  uint64_t v28;

  v13 = 0;
  v4 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for ContactResolverDomain() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v16 = (char *)&v4 - v4;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Locale() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v25 = (char *)&v4 - v5;
  v15 = type metadata accessor for RecommenderType();
  v14 = *(_QWORD *)(v15 - 8);
  v6 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v4 - v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandleTypePreference?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v4 - v7;
  v12 = type metadata accessor for SearchSuggestedContacts();
  v11 = *(_QWORD *)(v12 - 8);
  v8 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v4 - v8;
  v10 = type metadata accessor for ContactResolverConfig();
  v9 = static SiriKitContactResolver.defaultConfig;
  __swift_allocate_value_buffer(v10, static SiriKitContactResolver.defaultConfig);
  v20 = __swift_project_value_buffer(v10, (uint64_t)v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v17, *MEMORY[0x24BE939D8], v12);
  static ContactHandleTypePreference.preferPhone.getter();
  v0 = type metadata accessor for ContactHandleTypePreference();
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 56))(v18, 0, 1);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v19, *MEMORY[0x24BE937B0], v15);
  v21 = default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  v22 = v1;
  v23 = default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  v24 = v2;
  default argument 2 of ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:)();
  has_malloc_size = _swift_stdlib_has_malloc_size();
  v27 = _swift_stdlib_has_malloc_size();
  v28 = default argument 5 of ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:)();
  default argument 6 of ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:)();
  return ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:)();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = type metadata accessor for ContactResolverConfig();
  __swift_allocate_value_buffer(v3, static ContactResolverConfig.defaultConfig);
  v1 = __swift_project_value_buffer(v3, (uint64_t)static ContactResolverConfig.defaultConfig);
  v2 = SiriKitContactResolver.defaultConfig.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v1, v2);
  return swift_endAccess();
}

uint64_t default argument 2 of ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:)()
{
  return static Locale.current.getter();
}

uint64_t default argument 5 of ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:)()
{
  return specialized static Array._allocateUninitialized(_:)(0);
}

uint64_t default argument 6 of ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:)()
{
  return static ContactResolverDomain.all.getter();
}

uint64_t protocol witness for ContactResolving.resolve(queries:config:) in conformance SiriKitContactResolver()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v3 = SiriKitContactResolver.resolve(queries:config:)();
  if (v0)
    return v2;
  else
    return v3;
}

uint64_t protocol witness for ContactResolving.findMatches(queries:config:) in conformance SiriKitContactResolver()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v3 = SiriKitContactResolver.findMatches(queries:config:)();
  if (v0)
    return v2;
  else
    return v3;
}

uint64_t ContactResolverConfig.defaultConfig.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for defaultConfig != -1)
    swift_once();
  v0 = type metadata accessor for ContactResolverConfig();
  return __swift_project_value_buffer(v0, (uint64_t)static ContactResolverConfig.defaultConfig);
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else if (result > 0)
  {
    v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v1 + 16) = v4;
    return v1;
  }
  else
  {
    v2 = MEMORY[0x24BEE4AF8];
    swift_retain();
    return v2;
  }
  return result;
}

id static AceViewProviding.makeSash(app:isDisambiguation:)(uint64_t a1, char a2)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v16;

  type metadata accessor for SAUISash();
  v16 = SAUIAppPunchOut.__allocating_init()();
  if ((a2 & 1) != 0)
  {
    if (App.isFirstParty.getter())
      v14 = static AppUtil.CONTACTS_APP_BUNDLE_ID.getter();
    else
      v14 = App.appIdentifier.getter();
    if (v2)
    {
      v12 = MEMORY[0x24957220C](v14);
      swift_bridgeObjectRelease();
      v13 = (void *)v12;
    }
    else
    {
      v13 = 0;
    }
    objc_msgSend(v16, sel_setApplicationBundleIdentifier_);

  }
  else
  {
    if (App.isFirstParty.getter())
    {
      v3 = AppUtil.MESSAGES_APP_BUNDLE_ID.unsafeMutableAddressor();
      v8 = *(_QWORD *)v3;
      v9 = *((_QWORD *)v3 + 1);
      swift_bridgeObjectRetain();
      v10 = v8;
      v11 = v9;
    }
    else
    {
      v10 = App.appIdentifier.getter();
      v11 = v4;
    }
    if (v11)
    {
      v7 = MEMORY[0x24957220C](v10);
      swift_bridgeObjectRelease();
      objc_msgSend(v16, sel_setApplicationBundleIdentifier_, v7);
    }
    else
    {
      objc_msgSend(v16, sel_setApplicationBundleIdentifier_, 0);
    }

  }
  return v16;
}

unint64_t type metadata accessor for SAUISash()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SAUISash;
  if (!lazy cache variable for type metadata for SAUISash)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAUISash);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t static AceViewProviding.makeAceViewsForDisambiguation(app:disambiguationList:deviceState:disambiguationSnippetProvider:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t *v55;
  _BYTE **v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint32_t v81;
  uint64_t v82;
  int v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  id v91;
  char v92;
  uint64_t v93;
  uint32_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v73 = a1;
  v72 = a2;
  v69 = a3;
  v70 = a4;
  v71 = a5;
  v99 = 0;
  v98 = 0;
  v97 = 0;
  v95 = 0;
  v96 = 0;
  v92 = 0;
  v91 = 0;
  v90 = 0;
  v60 = 0;
  v82 = 0;
  v61 = type metadata accessor for ImageSize();
  v62 = *(_QWORD *)(v61 - 8);
  v63 = (*(_QWORD *)(v62 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v64 = (char *)&v23 - v63;
  v65 = type metadata accessor for UnlockDevicePolicy();
  v66 = *(_QWORD *)(v65 - 8);
  v67 = (*(_QWORD *)(v66 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v82);
  v68 = (char *)&v23 - v67;
  v77 = type metadata accessor for Logger();
  v76 = *(_QWORD *)(v77 - 8);
  v74 = (*(_QWORD *)(v76 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v73);
  v6 = (char *)&v23 - v74;
  v75 = (char *)&v23 - v74;
  v99 = v5;
  v98 = v7;
  v97 = v8;
  v95 = v9;
  v96 = v10;
  v11 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v6, v11, v77);
  v84 = Logger.logObject.getter();
  v83 = static os_log_type_t.debug.getter();
  v80 = &v93;
  v93 = 2;
  v78 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v79 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v81 = v94;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v85 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v84, (os_log_type_t)v83))
  {
    v12 = v60;
    v50 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v49 = 0;
    v51 = createStorage<A>(capacity:type:)(0);
    v52 = createStorage<A>(capacity:type:)(v49);
    v56 = &v89;
    v89 = v50;
    v57 = &v88;
    v88 = v51;
    v54 = &v87;
    v87 = v52;
    v53 = 0;
    serialize(_:at:)(0, &v89);
    serialize(_:at:)(v53, v56);
    v86 = v85;
    v55 = &v23;
    MEMORY[0x24BDAC7A8](&v23);
    v13 = v57;
    v14 = &v23 - 6;
    v58 = &v23 - 6;
    v14[2] = (uint64_t)v56;
    v14[3] = (uint64_t)v13;
    v14[4] = v15;
    v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v12)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, v84, (os_log_type_t)v83, "#AceViewProviding building disambiguation snippet", v50, v81);
      v47 = 0;
      destroyStorage<A>(_:count:)(v51, 0, v48);
      destroyStorage<A>(_:count:)(v52, v47, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v50, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v76 + 8))(v75, v77);
  v41 = v69[3];
  v42 = v69[4];
  __swift_project_boxed_opaque_existential_1(v69, v41);
  static UnlockDevicePolicy.default.getter();
  v43 = dispatch thunk of DeviceState.isAuthenticated(for:)();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v68, v65);
  v44 = v43 ^ 1;
  v92 = (v43 ^ 1) & 1;
  v46 = v69[3];
  v45 = v69[4];
  __swift_project_boxed_opaque_existential_1(v69, v46);
  if ((dispatch thunk of DeviceState.isWatch.getter() & 1) != 0)
  {
    v39 = type metadata accessor for SAAceView();
    v38 = _allocateUninitializedArray<A>(_:)();
    v37 = v16;
    v35 = SiriKitDisambiguationList.disambiguationItems.getter();
    v34 = v69[3];
    v33 = v69[4];
    __swift_project_boxed_opaque_existential_1(v69, v34);
    v17 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
    v36 = (*(uint64_t (**)(uint64_t, _QWORD))(v71 + 16))(v35, v17 & 1);
    swift_bridgeObjectRelease();
    v18 = v38;
    *v37 = v36;
    _finalizeUninitializedArray<A>(_:)();
    return v18;
  }
  else
  {
    v31 = SiriKitDisambiguationList.disambiguationItems.getter();
    (*(void (**)(char *, _QWORD, uint64_t))(v62 + 104))(v64, *MEMORY[0x24BE990A0], v61);
    v32 = (id)(*(uint64_t (**)(uint64_t, _QWORD, char *))(v71 + 8))(v31, v44 & 1, v64);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v64, v61);
    swift_bridgeObjectRelease();
    v91 = v32;
    swift_retain();
    if (v73)
    {
      v30 = v73;
      v29 = v73;
      v90 = v73;
      v28 = static AceViewProviding.makeSash(app:isDisambiguation:)(v73, 1);
      objc_msgSend(v32, sel_setSash_);

      swift_release();
    }
    v25 = type metadata accessor for SAAceView();
    v26 = _allocateUninitializedArray<A>(_:)();
    v24 = v19;
    v20 = v32;
    v21 = v26;
    *v24 = v32;
    _finalizeUninitializedArray<A>(_:)();
    v27 = v21;

    return v27;
  }
}

id static AceViewProviding.makePersonPicker(parameterName:)()
{
  id v0;
  uint64_t countAndFlagsBits;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v8;
  id v9;
  id v10;
  id v11;

  type metadata accessor for SAABPersonPicker();
  v11 = SAUIAppPunchOut.__allocating_init()();
  v0 = v11;
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsContactId", 0x11uLL, 1)._countAndFlagsBits;
  v8 = (id)MEMORY[0x24957220C](countAndFlagsBits);
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setIdNodeName_, v8);

  objc_msgSend(v11, sel_setShowImmediately_, 1);
  v2 = v11;
  objc_msgSend(v11, sel_setCanBeRefreshed_, 0);

  v3 = v11;
  objc_msgSend(v11, sel_setCanUseServerTTS_, 0);

  v4 = v11;
  v9 = (id)*MEMORY[0x24BE81A98];
  v5 = (id)*MEMORY[0x24BE81A98];
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = (id)MEMORY[0x24957220C](v6);
  swift_bridgeObjectRelease();

  objc_msgSend(v11, sel_setItemType_, v10);
  return v11;
}

id static AceViewProviding.makePlaceHolderCardSection(commands:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  id v14;
  id v15;
  uint64_t v16;

  v12 = a1;
  v16 = 0;
  v15 = 0;
  v11 = 0;
  v7 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v7 - 8);
  v5 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (char *)&v5 - v5;
  v16 = v1;
  type metadata accessor for SFCardSection();
  v14 = SAUIAppPunchOut.__allocating_init()();
  v15 = v14;
  UUID.init()();
  v2 = UUID.uuidString.getter();
  v9 = v3;
  v10 = (id)MEMORY[0x24957220C](v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v7);
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_setCardSectionId_, v10);

  swift_bridgeObjectRetain();
  type metadata accessor for SFAbstractCommand();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_setCommands_, isa);

  return v14;
}

id static AceViewProviding.makeTitleCardSection(title:keyPaths:commands:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *object;
  id v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  Class isa;
  uint64_t v29;
  uint64_t v30;
  Class v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v17 = a1;
  v18 = a2;
  v27 = a3;
  v30 = a4;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v34 = 0;
  v33 = 0;
  v29 = 0;
  v23 = type metadata accessor for UUID();
  v22 = *(_QWORD *)(v23 - 8);
  v16 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v24 = (char *)&v16 - v16;
  v36 = v4;
  v37 = v5;
  v35 = v6;
  v34 = v7;
  type metadata accessor for SFTitleCardSection();
  v32 = SAUIAppPunchOut.__allocating_init()();
  v33 = v32;
  swift_bridgeObjectRetain();
  v19 = (id)MEMORY[0x24957220C](v17, v18);
  swift_bridgeObjectRelease();
  objc_msgSend(v32, sel_setTitle_, v19);

  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CardSectionTypeTitle", 0x14uLL, 1);
  object = v8._object;
  v21 = (id)MEMORY[0x24957220C](v8._countAndFlagsBits);
  swift_bridgeObjectRelease();
  objc_msgSend(v32, sel_setType_, v21);

  v9 = v32;
  objc_msgSend(v32, sel_setSeparatorStyle_, 5);

  v10 = v32;
  UUID.init()();
  v11 = UUID.uuidString.getter();
  v25 = v12;
  v26 = (id)MEMORY[0x24957220C](v11);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v23);
  swift_bridgeObjectRelease();
  objc_msgSend(v32, sel_setCardSectionId_, v26);

  v13 = v32;
  swift_bridgeObjectRetain();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v32, sel_setParameterKeyPaths_, isa);

  v14 = v32;
  swift_bridgeObjectRetain();
  type metadata accessor for SFAbstractCommand();
  v31 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v32, sel_setCommands_, v31);

  return v32;
}

uint64_t static AceViewProviding.makePersonLabel(person:recipientIndex:deviceState:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  id *v12;
  void *v13;
  void *v14;
  id v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  id *v26;
  _BYTE **v27;
  uint64_t *v28;
  id *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint32_t v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  Swift::String v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  id v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  id v53;
  id *v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint32_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;

  v57 = a1;
  v60 = a2;
  v59 = a3;
  v76 = 0;
  v75 = 0;
  v74 = 0;
  v58 = 0;
  v65 = 0;
  v66 = 0;
  v61 = type metadata accessor for Logger();
  v62 = *(_QWORD *)(v61 - 8);
  v63 = (*(_QWORD *)(v62 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v61);
  v64 = (char *)&v16 - v63;
  v76 = a1;
  v75 = v4;
  v74 = v5;
  if ((INPerson.hasHandleValue.getter() & 1) != 0)
  {
    v73 = objc_msgSend(v57, sel_personHandle);
    if (v73)
    {
      v54 = &v73;
      v55 = v73;
      v6 = v73;
      outlined destroy of SFRichText?(v54);
      v56 = objc_msgSend(v55, sel_value);
      if (v56)
      {
        v53 = v56;
        v48 = v56;
        v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v50 = v7;

        v51 = v49;
        v52 = v50;
      }
      else
      {
        v51 = 0;
        v52 = 0;
      }
      v45 = v52;
      v44 = v51;

      v46 = v44;
      v47 = v45;
    }
    else
    {
      v38 = 0;
      outlined destroy of SFRichText?(&v73);
      v46 = (uint64_t)v38;
      v47 = v38;
    }
    v42 = v47;
    v43 = v46;
    if (v47)
    {
      v40 = v43;
      v41 = v42;
      v65 = v43;
      v66 = v42;
      v39._countAndFlagsBits = v43;
      v39._object = v42;
    }
    else
    {
      v8 = v64;
      v9 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v8, v9, v61);
      v36 = Logger.logObject.getter();
      v35 = static os_log_type_t.error.getter();
      v33 = &v71;
      v71 = 2;
      v31 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v32 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v34 = v72;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v37 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v36, (os_log_type_t)v35))
      {
        v10 = v58;
        v21 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v20 = 0;
        v22 = createStorage<A>(capacity:type:)(0);
        v23 = createStorage<A>(capacity:type:)(v20);
        v27 = &v70;
        v70 = v21;
        v28 = &v69;
        v69 = v22;
        v25 = &v68;
        v68 = v23;
        v24 = 0;
        serialize(_:at:)(0, &v70);
        serialize(_:at:)(v24, v27);
        v67 = v37;
        v26 = &v16;
        MEMORY[0x24BDAC7A8](&v16);
        v11 = v28;
        v12 = &v16 - 6;
        v29 = &v16 - 6;
        v12[2] = v27;
        v12[3] = v11;
        v12[4] = v13;
        v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v10)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_24701B000, v36, (os_log_type_t)v35, "#AceViewProviding handle value is nil when recipient is specified by handle value", v21, v34);
          v18 = 0;
          destroyStorage<A>(_:count:)(v22, 0, v19);
          destroyStorage<A>(_:count:)(v23, v18, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v21, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v62 + 8))(v64, v61);
      v39 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    }
  }
  else
  {
    v16 = objc_msgSend(v57, sel_displayName);
    v17._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17._object = v14;

    v39 = v17;
  }
  return v39._countAndFlagsBits;
}

unint64_t type metadata accessor for SAABPersonPicker()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SAABPersonPicker;
  if (!lazy cache variable for type metadata for SAABPersonPicker)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAABPersonPicker);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SFTitleCardSection()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SFTitleCardSection;
  if (!lazy cache variable for type metadata for SFTitleCardSection)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SFTitleCardSection);
    return ObjCClassMetadata;
  }
  return v2;
}

ValueMetadata *type metadata accessor for AceViewProviding()
{
  return &type metadata for AceViewProviding;
}

uint64_t protocol witness for PaymentConfirmationLabelProviding.confirmButtonLabel() in conformance SendPaymentCATs(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentCATs.confirmButtonLabel()(a1);
}

uint64_t protocol witness for PaymentSlotDisplayValueProviding.slotDisplayValue(slot:) in conformance SendPaymentCATs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentCATs.slotDisplayValue(slot:)(a1, a2);
}

uint64_t protocol witness for PaymentSlotDisplayValueProviding.labelForResponseSlot(slot:) in conformance SendPaymentCATs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentCATs.labelForResponseSlot(slot:)(a1, a2);
}

uint64_t SendPaymentCATs.confirmButtonLabel(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#ConfirmButtonLabel", 0x1EuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.confirmButtonLabel()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t SendPaymentCATs.confirmButtonLabel()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#ConfirmButtonLabel", 0x1EuLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#ConfirmButtonLabel", 0x1EuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.confirmSlotValue(slot:paymentsConcept:completion:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String *v8;
  Swift::String v9;
  const void *v10;
  char *v11;
  Swift::String *v12;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v14;
  uint64_t v15;
  Swift::String *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String *v20;
  Swift::String *v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String *v32;
  const void *v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v33 = a1;
  v25 = a2;
  v26 = a3;
  v27 = a4;
  v42 = 0;
  v41 = 0;
  v39 = 0;
  v40 = 0;
  v38 = 0;
  v28 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v35 = (char *)v22 - v28;
  v42 = MEMORY[0x24BDAC7A8](v33);
  v41 = v5;
  v39 = v6;
  v40 = v7;
  v38 = v4;
  v34 = 1;
  v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#ConfirmSlotValue", 0x1CuLL, 1);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v31 = _allocateUninitializedArray<A>(_:)();
  v32 = v8;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v34 & 1);
  v10 = v33;
  v11 = v35;
  *v32 = v9;
  outlined init with copy of SpeakableString?(v10, v11);
  v36 = type metadata accessor for SpeakableString();
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v37 + 48))(v35, v34) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v35);
    v21 = v32;
    v32[1]._countAndFlagsBits = 0;
    v21[1]._object = 0;
    v21[2]._countAndFlagsBits = 0;
    v21[2]._object = 0;
  }
  else
  {
    v12 = v32;
    v32[2]._object = (void *)v36;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 32))(boxed_opaque_existential_1, v35, v36);
  }
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  v32[3] = v14;
  swift_retain();
  if (v25)
  {
    v24 = v25;
    v23 = v25;
    v15 = type metadata accessor for PaymentsDialogConcept();
    v16 = v32;
    v17 = v23;
    v32[5]._object = (void *)v15;
    v16[4]._countAndFlagsBits = v17;
  }
  else
  {
    v20 = v32;
    v32[4]._countAndFlagsBits = 0;
    v20[4]._object = 0;
    v20[5]._countAndFlagsBits = 0;
    v20[5]._object = 0;
  }
  v18 = v31;
  _finalizeUninitializedArray<A>(_:)();
  v22[0] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v22[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.confirmSlotValue(slot:paymentsConcept:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[9] = v3;
  v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return swift_task_switch();
}

uint64_t SendPaymentCATs.confirmSlotValue(slot:paymentsConcept:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  Swift::String *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v14 = (void *)v0[10];
  v13 = (const void *)v0[7];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#ConfirmSlotValue", 0x1CuLL, 1);
  v0[11] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v12 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v13, v14);
  v15 = type metadata accessor for SpeakableString();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v16 + 48))(v14, 1) == 1)
  {
    outlined destroy of SpeakableString?(v11[10]);
    v12[1]._countAndFlagsBits = 0;
    v12[1]._object = 0;
    v12[2]._countAndFlagsBits = 0;
    v12[2]._object = 0;
  }
  else
  {
    v10 = v11[10];
    v12[2]._object = (void *)v15;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v10, v15);
  }
  v9 = v11[8];
  v12[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (v9)
  {
    v8 = v11[8];
    v12[5]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v12[4]._countAndFlagsBits = v8;
  }
  else
  {
    v12[4]._countAndFlagsBits = 0;
    v12[4]._object = 0;
    v12[5]._countAndFlagsBits = 0;
    v12[5]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v11[12] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v11[13] = v4;
  *v4 = v11[2];
  v4[1] = RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:);
  return v7(v11[6], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t SendPaymentCATs.confirmSlotValue(slot:paymentsConcept:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  Swift::String *v5;
  Swift::String v6;
  const void *v7;
  char *v8;
  Swift::String *v9;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v11;
  uint64_t v12;
  Swift::String *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String *v17;
  Swift::String *v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String *v28;
  const void *v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v22 = a3;
  v29 = a1;
  v23 = a2;
  v36 = 0;
  v35 = 0;
  v34 = 0;
  v24 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v31 = (char *)v19 - v24;
  v36 = MEMORY[0x24BDAC7A8](v29);
  v35 = v4;
  v34 = v3;
  v30 = 1;
  v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#ConfirmSlotValue", 0x1CuLL, 1);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v27 = _allocateUninitializedArray<A>(_:)();
  v28 = v5;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v30 & 1);
  v7 = v29;
  v8 = v31;
  *v28 = v6;
  outlined init with copy of SpeakableString?(v7, v8);
  v32 = type metadata accessor for SpeakableString();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v33 + 48))(v31, v30) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v31);
    v18 = v28;
    v28[1]._countAndFlagsBits = 0;
    v18[1]._object = 0;
    v18[2]._countAndFlagsBits = 0;
    v18[2]._object = 0;
  }
  else
  {
    v9 = v28;
    v28[2]._object = (void *)v32;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v9[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 32))(boxed_opaque_existential_1, v31, v32);
  }
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  v28[3] = v11;
  swift_retain();
  if (v23)
  {
    v21 = v23;
    v20 = v23;
    v12 = type metadata accessor for PaymentsDialogConcept();
    v13 = v28;
    v14 = v20;
    v28[5]._object = (void *)v12;
    v13[4]._countAndFlagsBits = v14;
  }
  else
  {
    v17 = v28;
    v28[4]._countAndFlagsBits = 0;
    v17[4]._object = 0;
    v17[5]._countAndFlagsBits = 0;
    v17[5]._object = 0;
  }
  v15 = v27;
  _finalizeUninitializedArray<A>(_:)();
  v19[1] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v19[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.confirmSnippetHeader(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#ConfirmSnippetHeader", 0x20uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.confirmSnippetHeader()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t SendPaymentCATs.confirmSnippetHeader()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#ConfirmSnippetHeader", 0x20uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#ConfirmSnippetHeader", 0x20uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.disambiguateSlotValue(slot:payee:completion:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String *v8;
  Swift::String v9;
  const void *v10;
  char *v11;
  Swift::String *v12;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v14;
  uint64_t v15;
  Swift::String *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String *v20;
  Swift::String *v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String *v32;
  const void *v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v33 = a1;
  v25 = a2;
  v26 = a3;
  v27 = a4;
  v42 = 0;
  v41 = 0;
  v39 = 0;
  v40 = 0;
  v38 = 0;
  v28 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v35 = (char *)v22 - v28;
  v42 = MEMORY[0x24BDAC7A8](v33);
  v41 = v5;
  v39 = v6;
  v40 = v7;
  v38 = v4;
  v34 = 1;
  v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#DisambiguateSlotValue", 0x21uLL, 1);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v31 = _allocateUninitializedArray<A>(_:)();
  v32 = v8;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v34 & 1);
  v10 = v33;
  v11 = v35;
  *v32 = v9;
  outlined init with copy of SpeakableString?(v10, v11);
  v36 = type metadata accessor for SpeakableString();
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v37 + 48))(v35, v34) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v35);
    v21 = v32;
    v32[1]._countAndFlagsBits = 0;
    v21[1]._object = 0;
    v21[2]._countAndFlagsBits = 0;
    v21[2]._object = 0;
  }
  else
  {
    v12 = v32;
    v32[2]._object = (void *)v36;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 32))(boxed_opaque_existential_1, v35, v36);
  }
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payee", 5uLL, 1);
  v32[3] = v14;
  swift_retain();
  if (v25)
  {
    v24 = v25;
    v23 = v25;
    v15 = type metadata accessor for DialogPerson();
    v16 = v32;
    v17 = v23;
    v32[5]._object = (void *)v15;
    v16[4]._countAndFlagsBits = v17;
  }
  else
  {
    v20 = v32;
    v32[4]._countAndFlagsBits = 0;
    v20[4]._object = 0;
    v20[5]._countAndFlagsBits = 0;
    v20[5]._object = 0;
  }
  v18 = v31;
  _finalizeUninitializedArray<A>(_:)();
  v22[0] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v22[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.disambiguateSlotValue(slot:payee:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[9] = v3;
  v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return swift_task_switch();
}

uint64_t SendPaymentCATs.disambiguateSlotValue(slot:payee:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  Swift::String *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v14 = (void *)v0[10];
  v13 = (const void *)v0[7];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#DisambiguateSlotValue", 0x21uLL, 1);
  v0[11] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v12 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v13, v14);
  v15 = type metadata accessor for SpeakableString();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v16 + 48))(v14, 1) == 1)
  {
    outlined destroy of SpeakableString?(v11[10]);
    v12[1]._countAndFlagsBits = 0;
    v12[1]._object = 0;
    v12[2]._countAndFlagsBits = 0;
    v12[2]._object = 0;
  }
  else
  {
    v10 = v11[10];
    v12[2]._object = (void *)v15;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v10, v15);
  }
  v9 = v11[8];
  v12[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payee", 5uLL, 1);
  swift_retain();
  if (v9)
  {
    v8 = v11[8];
    v12[5]._object = (void *)type metadata accessor for DialogPerson();
    v12[4]._countAndFlagsBits = v8;
  }
  else
  {
    v12[4]._countAndFlagsBits = 0;
    v12[4]._object = 0;
    v12[5]._countAndFlagsBits = 0;
    v12[5]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v11[12] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v11[13] = v4;
  *v4 = v11[2];
  v4[1] = RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:);
  return v7(v11[6], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t SendPaymentCATs.disambiguateSlotValue(slot:payee:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  Swift::String *v5;
  Swift::String v6;
  const void *v7;
  char *v8;
  Swift::String *v9;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v11;
  uint64_t v12;
  Swift::String *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String *v17;
  Swift::String *v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String *v28;
  const void *v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v22 = a3;
  v29 = a1;
  v23 = a2;
  v36 = 0;
  v35 = 0;
  v34 = 0;
  v24 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v31 = (char *)v19 - v24;
  v36 = MEMORY[0x24BDAC7A8](v29);
  v35 = v4;
  v34 = v3;
  v30 = 1;
  v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#DisambiguateSlotValue", 0x21uLL, 1);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v27 = _allocateUninitializedArray<A>(_:)();
  v28 = v5;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v30 & 1);
  v7 = v29;
  v8 = v31;
  *v28 = v6;
  outlined init with copy of SpeakableString?(v7, v8);
  v32 = type metadata accessor for SpeakableString();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v33 + 48))(v31, v30) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v31);
    v18 = v28;
    v28[1]._countAndFlagsBits = 0;
    v18[1]._object = 0;
    v18[2]._countAndFlagsBits = 0;
    v18[2]._object = 0;
  }
  else
  {
    v9 = v28;
    v28[2]._object = (void *)v32;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v9[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 32))(boxed_opaque_existential_1, v31, v32);
  }
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payee", 5uLL, 1);
  v28[3] = v11;
  swift_retain();
  if (v23)
  {
    v21 = v23;
    v20 = v23;
    v12 = type metadata accessor for DialogPerson();
    v13 = v28;
    v14 = v20;
    v28[5]._object = (void *)v12;
    v13[4]._countAndFlagsBits = v14;
  }
  else
  {
    v17 = v28;
    v28[4]._countAndFlagsBits = 0;
    v17[4]._object = 0;
    v17[5]._countAndFlagsBits = 0;
    v17[5]._object = 0;
  }
  v15 = v27;
  _finalizeUninitializedArray<A>(_:)();
  v19[1] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v19[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.handledSnippetHeader(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#HandledSnippetHeader", 0x20uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.handledSnippetHeader()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t SendPaymentCATs.handledSnippetHeader()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#HandledSnippetHeader", 0x20uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#HandledSnippetHeader", 0x20uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.intentConfirmationPrompt(paymentsConcept:completion:)(uint64_t a1)
{
  Swift::String *v1;
  Swift::String *v3;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#IntentConfirmationPrompt", 0x24uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v3 = v1;
  *v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v3[1]._countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.intentConfirmationPrompt(paymentsConcept:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t SendPaymentCATs.intentConfirmationPrompt(paymentsConcept:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  Swift::String *v9;
  uint64_t v10;

  v10 = v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#IntentConfirmationPrompt", 0x24uLL, 1);
  v0[8] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v9 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (v10)
  {
    v7 = v8[6];
    v9[2]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v9[1]._countAndFlagsBits = v7;
  }
  else
  {
    v9[1]._countAndFlagsBits = 0;
    v9[1]._object = 0;
    v9[2]._countAndFlagsBits = 0;
    v9[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v8[9] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v3 = (_QWORD *)swift_task_alloc();
  v8[10] = v3;
  *v3 = v8[2];
  v3[1] = RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:);
  return v6(v8[5], v1._countAndFlagsBits, v1._object, v5);
}

uint64_t SendPaymentCATs.intentConfirmationPrompt(paymentsConcept:)(uint64_t a1)
{
  Swift::String *v1;
  Swift::String *v3;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#IntentConfirmationPrompt", 0x24uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v3 = v1;
  *v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v3[1]._countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.intentHandledResponse(app:completion:)(uint64_t a1)
{
  Swift::String *v1;
  Swift::String *v3;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#IntentHandledResponse", 0x21uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v3 = v1;
  *v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.intentHandledResponse(app:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t SendPaymentCATs.intentHandledResponse(app:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  Swift::String *v9;
  uint64_t v10;

  v10 = v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#IntentHandledResponse", 0x21uLL, 1);
  v0[8] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v9 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (v10)
  {
    v7 = v8[6];
    v9[2]._object = (void *)type metadata accessor for SirikitApp();
    v9[1]._countAndFlagsBits = v7;
  }
  else
  {
    v9[1]._countAndFlagsBits = 0;
    v9[1]._object = 0;
    v9[2]._countAndFlagsBits = 0;
    v9[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v8[9] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v3 = (_QWORD *)swift_task_alloc();
  v8[10] = v3;
  *v3 = v8[2];
  v3[1] = RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:);
  return v6(v8[5], v1._countAndFlagsBits, v1._object, v5);
}

uint64_t SendPaymentCATs.intentHandledResponse(app:)(uint64_t a1)
{
  Swift::String *v1;
  Swift::String *v3;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#IntentHandledResponse", 0x21uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v3 = v1;
  *v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.labelForResponseSlot(slot:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String *v6;
  Swift::String v7;
  const void *v8;
  char *v9;
  Swift::String *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  Swift::String *v14;
  _QWORD v15[5];
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String *v20;
  const void *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = a1;
  v15[3] = a2;
  v15[4] = a3;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v16 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)v15 - v16;
  v29 = MEMORY[0x24BDAC7A8](v21);
  v27 = v4;
  v28 = v5;
  v26 = v3;
  v22 = 1;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#LabelForResponseSlot", 0x20uLL, 1);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v19 = _allocateUninitializedArray<A>(_:)();
  v20 = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v22 & 1);
  v8 = v21;
  v9 = v23;
  *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    v14 = v20;
    v20[1]._countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[0] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.labelForResponseSlot(slot:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t SendPaymentCATs.labelForResponseSlot(slot:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *p_countAndFlagsBits;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = (void *)v0[8];
  v11 = (const void *)v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#LabelForResponseSlot", 0x20uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_countAndFlagsBits = &v2->_countAndFlagsBits;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  v13 = type metadata accessor for SpeakableString();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v14 + 48))(v12, 1) == 1)
  {
    outlined destroy of SpeakableString?(v9[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    v8 = v9[8];
    p_countAndFlagsBits[5] = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v8, v13);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[10] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v9[11] = v4;
  *v4 = v9[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  return v7(v9[5], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t SendPaymentCATs.labelForResponseSlot(slot:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  Swift::String *v3;
  Swift::String v4;
  const void *v5;
  char *v6;
  Swift::String *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  Swift::String *v11;
  _QWORD v12[4];
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String *v17;
  const void *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12[3] = a2;
  v18 = a1;
  v24 = 0;
  v23 = 0;
  v13 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = (char *)v12 - v13;
  v24 = MEMORY[0x24BDAC7A8](v18);
  v23 = v2;
  v19 = 1;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#LabelForResponseSlot", 0x20uLL, 1);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v16 = _allocateUninitializedArray<A>(_:)();
  v17 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v19 & 1);
  v5 = v18;
  v6 = v20;
  *v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  v21 = type metadata accessor for SpeakableString();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    v11 = v17;
    v17[1]._countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[1] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.noResultsResponse(app:completion:)(uint64_t a1)
{
  Swift::String *v1;
  Swift::String *v3;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#NoResultsResponse", 0x1DuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v3 = v1;
  *v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.noResultsResponse(app:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t SendPaymentCATs.noResultsResponse(app:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  Swift::String *v9;
  uint64_t v10;

  v10 = v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#NoResultsResponse", 0x1DuLL, 1);
  v0[8] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v9 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (v10)
  {
    v7 = v8[6];
    v9[2]._object = (void *)type metadata accessor for SirikitApp();
    v9[1]._countAndFlagsBits = v7;
  }
  else
  {
    v9[1]._countAndFlagsBits = 0;
    v9[1]._object = 0;
    v9[2]._countAndFlagsBits = 0;
    v9[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v8[9] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v3 = (_QWORD *)swift_task_alloc();
  v8[10] = v3;
  *v3 = v8[2];
  v3[1] = RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:);
  return v6(v8[5], v1._countAndFlagsBits, v1._object, v5);
}

uint64_t SendPaymentCATs.noResultsResponse(app:)(uint64_t a1)
{
  Swift::String *v1;
  Swift::String *v3;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#NoResultsResponse", 0x1DuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v3 = v1;
  *v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.preHandleIntentResponse(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#PreHandleIntentResponse", 0x23uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.preHandleIntentResponse()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t SendPaymentCATs.preHandleIntentResponse()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#PreHandleIntentResponse", 0x23uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#PreHandleIntentResponse", 0x23uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.promptCancelled(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#PromptCancelled", 0x1BuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.promptCancelled()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t SendPaymentCATs.promptCancelled()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#PromptCancelled", 0x1BuLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#PromptCancelled", 0x1BuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.promptForSlotValue(slot:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String *v6;
  Swift::String v7;
  const void *v8;
  char *v9;
  Swift::String *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  Swift::String *v14;
  _QWORD v15[5];
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String *v20;
  const void *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = a1;
  v15[3] = a2;
  v15[4] = a3;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v16 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)v15 - v16;
  v29 = MEMORY[0x24BDAC7A8](v21);
  v27 = v4;
  v28 = v5;
  v26 = v3;
  v22 = 1;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#PromptForSlotValue", 0x1EuLL, 1);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v19 = _allocateUninitializedArray<A>(_:)();
  v20 = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v22 & 1);
  v8 = v21;
  v9 = v23;
  *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    v14 = v20;
    v20[1]._countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[0] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.promptForSlotValue(slot:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t SendPaymentCATs.promptForSlotValue(slot:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *p_countAndFlagsBits;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = (void *)v0[8];
  v11 = (const void *)v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#PromptForSlotValue", 0x1EuLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_countAndFlagsBits = &v2->_countAndFlagsBits;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  v13 = type metadata accessor for SpeakableString();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v14 + 48))(v12, 1) == 1)
  {
    outlined destroy of SpeakableString?(v9[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    v8 = v9[8];
    p_countAndFlagsBits[5] = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v8, v13);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[10] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v9[11] = v4;
  *v4 = v9[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  return v7(v9[5], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t SendPaymentCATs.promptForSlotValue(slot:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  Swift::String *v3;
  Swift::String v4;
  const void *v5;
  char *v6;
  Swift::String *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  Swift::String *v11;
  _QWORD v12[4];
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String *v17;
  const void *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12[3] = a2;
  v18 = a1;
  v24 = 0;
  v23 = 0;
  v13 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = (char *)v12 - v13;
  v24 = MEMORY[0x24BDAC7A8](v18);
  v23 = v2;
  v19 = 1;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#PromptForSlotValue", 0x1EuLL, 1);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v16 = _allocateUninitializedArray<A>(_:)();
  v17 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v19 & 1);
  v5 = v18;
  v6 = v20;
  *v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  v21 = type metadata accessor for SpeakableString();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    v11 = v17;
    v17[1]._countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[1] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.slotDisplayValue(slot:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String *v6;
  Swift::String v7;
  const void *v8;
  char *v9;
  Swift::String *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  Swift::String *v14;
  _QWORD v15[5];
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String *v20;
  const void *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = a1;
  v15[3] = a2;
  v15[4] = a3;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v16 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)v15 - v16;
  v29 = MEMORY[0x24BDAC7A8](v21);
  v27 = v4;
  v28 = v5;
  v26 = v3;
  v22 = 1;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#SlotDisplayValue", 0x1CuLL, 1);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v19 = _allocateUninitializedArray<A>(_:)();
  v20 = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v22 & 1);
  v8 = v21;
  v9 = v23;
  *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    v14 = v20;
    v20[1]._countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[0] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.slotDisplayValue(slot:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t SendPaymentCATs.slotDisplayValue(slot:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *p_countAndFlagsBits;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = (void *)v0[8];
  v11 = (const void *)v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#SlotDisplayValue", 0x1CuLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_countAndFlagsBits = &v2->_countAndFlagsBits;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  v13 = type metadata accessor for SpeakableString();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v14 + 48))(v12, 1) == 1)
  {
    outlined destroy of SpeakableString?(v9[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    v8 = v9[8];
    p_countAndFlagsBits[5] = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v8, v13);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[10] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v9[11] = v4;
  *v4 = v9[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  return v7(v9[5], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t SendPaymentCATs.slotDisplayValue(slot:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  Swift::String *v3;
  Swift::String v4;
  const void *v5;
  char *v6;
  Swift::String *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  Swift::String *v11;
  _QWORD v12[4];
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String *v17;
  const void *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12[3] = a2;
  v18 = a1;
  v24 = 0;
  v23 = 0;
  v13 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = (char *)v12 - v13;
  v24 = MEMORY[0x24BDAC7A8](v18);
  v23 = v2;
  v19 = 1;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#SlotDisplayValue", 0x1CuLL, 1);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v16 = _allocateUninitializedArray<A>(_:)();
  v17 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v19 & 1);
  v5 = v18;
  v6 = v20;
  *v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  v21 = type metadata accessor for SpeakableString();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    v11 = v17;
    v17[1]._countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[1] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.unsupportedSlotValue(slot:paymentsConcept:completion:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String *v8;
  Swift::String v9;
  const void *v10;
  char *v11;
  Swift::String *v12;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v14;
  uint64_t v15;
  Swift::String *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String *v20;
  Swift::String *v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String *v32;
  const void *v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v33 = a1;
  v25 = a2;
  v26 = a3;
  v27 = a4;
  v42 = 0;
  v41 = 0;
  v39 = 0;
  v40 = 0;
  v38 = 0;
  v28 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v35 = (char *)v22 - v28;
  v42 = MEMORY[0x24BDAC7A8](v33);
  v41 = v5;
  v39 = v6;
  v40 = v7;
  v38 = v4;
  v34 = 1;
  v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#UnsupportedSlotValue", 0x20uLL, 1);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v31 = _allocateUninitializedArray<A>(_:)();
  v32 = v8;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v34 & 1);
  v10 = v33;
  v11 = v35;
  *v32 = v9;
  outlined init with copy of SpeakableString?(v10, v11);
  v36 = type metadata accessor for SpeakableString();
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v37 + 48))(v35, v34) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v35);
    v21 = v32;
    v32[1]._countAndFlagsBits = 0;
    v21[1]._object = 0;
    v21[2]._countAndFlagsBits = 0;
    v21[2]._object = 0;
  }
  else
  {
    v12 = v32;
    v32[2]._object = (void *)v36;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 32))(boxed_opaque_existential_1, v35, v36);
  }
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  v32[3] = v14;
  swift_retain();
  if (v25)
  {
    v24 = v25;
    v23 = v25;
    v15 = type metadata accessor for PaymentsDialogConcept();
    v16 = v32;
    v17 = v23;
    v32[5]._object = (void *)v15;
    v16[4]._countAndFlagsBits = v17;
  }
  else
  {
    v20 = v32;
    v32[4]._countAndFlagsBits = 0;
    v20[4]._object = 0;
    v20[5]._countAndFlagsBits = 0;
    v20[5]._object = 0;
  }
  v18 = v31;
  _finalizeUninitializedArray<A>(_:)();
  v22[0] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v22[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SendPaymentCATs.unsupportedSlotValue(slot:paymentsConcept:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[9] = v3;
  v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return swift_task_switch();
}

uint64_t SendPaymentCATs.unsupportedSlotValue(slot:paymentsConcept:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  Swift::String *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v14 = (void *)v0[10];
  v13 = (const void *)v0[7];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#UnsupportedSlotValue", 0x20uLL, 1);
  v0[11] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v12 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v13, v14);
  v15 = type metadata accessor for SpeakableString();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v16 + 48))(v14, 1) == 1)
  {
    outlined destroy of SpeakableString?(v11[10]);
    v12[1]._countAndFlagsBits = 0;
    v12[1]._object = 0;
    v12[2]._countAndFlagsBits = 0;
    v12[2]._object = 0;
  }
  else
  {
    v10 = v11[10];
    v12[2]._object = (void *)v15;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v10, v15);
  }
  v9 = v11[8];
  v12[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (v9)
  {
    v8 = v11[8];
    v12[5]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v12[4]._countAndFlagsBits = v8;
  }
  else
  {
    v12[4]._countAndFlagsBits = 0;
    v12[4]._object = 0;
    v12[5]._countAndFlagsBits = 0;
    v12[5]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v11[12] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v11[13] = v4;
  *v4 = v11[2];
  v4[1] = RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:);
  return v7(v11[6], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t SendPaymentCATs.unsupportedSlotValue(slot:paymentsConcept:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  Swift::String *v5;
  Swift::String v6;
  const void *v7;
  char *v8;
  Swift::String *v9;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v11;
  uint64_t v12;
  Swift::String *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String *v17;
  Swift::String *v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String *v28;
  const void *v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v22 = a3;
  v29 = a1;
  v23 = a2;
  v36 = 0;
  v35 = 0;
  v34 = 0;
  v24 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v31 = (char *)v19 - v24;
  v36 = MEMORY[0x24BDAC7A8](v29);
  v35 = v4;
  v34 = v3;
  v30 = 1;
  v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#UnsupportedSlotValue", 0x20uLL, 1);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v27 = _allocateUninitializedArray<A>(_:)();
  v28 = v5;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v30 & 1);
  v7 = v29;
  v8 = v31;
  *v28 = v6;
  outlined init with copy of SpeakableString?(v7, v8);
  v32 = type metadata accessor for SpeakableString();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v33 + 48))(v31, v30) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v31);
    v18 = v28;
    v28[1]._countAndFlagsBits = 0;
    v18[1]._object = 0;
    v18[2]._countAndFlagsBits = 0;
    v18[2]._object = 0;
  }
  else
  {
    v9 = v28;
    v28[2]._object = (void *)v32;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v9[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 32))(boxed_opaque_existential_1, v31, v32);
  }
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  v28[3] = v11;
  swift_retain();
  if (v23)
  {
    v21 = v23;
    v20 = v23;
    v12 = type metadata accessor for PaymentsDialogConcept();
    v13 = v28;
    v14 = v20;
    v28[5]._object = (void *)v12;
    v13[4]._countAndFlagsBits = v14;
  }
  else
  {
    v17 = v28;
    v28[4]._countAndFlagsBits = 0;
    v17[4]._object = 0;
    v17[5]._countAndFlagsBits = 0;
    v17[5]._object = 0;
  }
  v15 = v27;
  _finalizeUninitializedArray<A>(_:)();
  v19[1] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v19[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for SendPaymentCATs()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SendPaymentCATs;
  if (!type metadata singleton initialization cache for SendPaymentCATs)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for SendPaymentCATs()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t ObjC metadata update function for SendPaymentCATs()
{
  return type metadata accessor for SendPaymentCATs();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t JSONDecoder.__allocating_init()()
{
  return MEMORY[0x24BDCB250]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t JSONEncoder.__allocating_init()()
{
  return MEMORY[0x24BDCB3E8]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t static CharacterSet.whitespacesAndNewlines.getter()
{
  return MEMORY[0x24BDCB6C0]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x24BDCB750]();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return MEMORY[0x24BDCBE60]();
}

uint64_t LocalizedError.failureReason.getter()
{
  return MEMORY[0x24BDCBE68]();
}

uint64_t LocalizedError.errorDescription.getter()
{
  return MEMORY[0x24BDCBE78]();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return MEMORY[0x24BDCBE80]();
}

uint64_t PersonNameComponents.givenName.getter()
{
  return MEMORY[0x24BDCCB20]();
}

uint64_t PersonNameComponents.familyName.getter()
{
  return MEMORY[0x24BDCCB30]();
}

uint64_t PersonNameComponents.middleName.getter()
{
  return MEMORY[0x24BDCCB40]();
}

uint64_t PersonNameComponents.namePrefix.getter()
{
  return MEMORY[0x24BDCCB60]();
}

uint64_t PersonNameComponents.nameSuffix.getter()
{
  return MEMORY[0x24BDCCB70]();
}

NSPersonNameComponents __swiftcall PersonNameComponents._bridgeToObjectiveC()()
{
  objc_class *v0;
  void *v1;
  NSPersonNameComponents result;

  v0 = (objc_class *)MEMORY[0x24BDCCBB0]();
  result._private = v1;
  result.super.isa = v0;
  return result;
}

uint64_t static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCCBD0]();
}

uint64_t PersonNameComponents.nickname.getter()
{
  return MEMORY[0x24BDCCBD8]();
}

Swift::String __swiftcall PersonNameComponents.formatted()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BDCCBF0]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t type metadata accessor for PersonNameComponents()
{
  return MEMORY[0x24BDCCC10]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x24BDCD2F8]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  MEMORY[0x24BDCD8D0](retstr);
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x24BDCDA68]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x24BDCDAC0]();
}

void __swiftcall pow(_:_:)(NSDecimal *__return_ptr retstr, NSDecimal *a2, Swift::Int a3)
{
  MEMORY[0x24BDCDB38](retstr, a2, a3);
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x24BDCDCA0]();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = MEMORY[0x24BDCDCA8](options);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t Data.init()()
{
  return MEMORY[0x24BDCDDD0]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t Locale.identifier.getter()
{
  return MEMORY[0x24BDCEB20]();
}

uint64_t static Locale.current.getter()
{
  return MEMORY[0x24BDCED58]();
}

uint64_t Locale.Currency.identifier.getter()
{
  return MEMORY[0x24BDCED68]();
}

uint64_t type metadata accessor for Locale.Currency()
{
  return MEMORY[0x24BDCED80]();
}

uint64_t Locale.currency.getter()
{
  return MEMORY[0x24BDCEE58]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t SnippetPluginModel.snippetHidden(for:idiom:)()
{
  return MEMORY[0x24BEAA5D8]();
}

uint64_t CodableIntent.init(wrappedValue:)()
{
  return MEMORY[0x24BEAB228]();
}

uint64_t type metadata accessor for CodableIntent()
{
  return MEMORY[0x24BEAB230]();
}

uint64_t static RFFeatureFlags.ResponseFramework.SMART.getter()
{
  return MEMORY[0x24BEAB4E0]();
}

uint64_t CodableIntentResponse.init(wrappedValue:)()
{
  return MEMORY[0x24BEAC550]();
}

uint64_t type metadata accessor for CodableIntentResponse()
{
  return MEMORY[0x24BEAC558]();
}

uint64_t NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:)()
{
  return MEMORY[0x24BE95F50]();
}

uint64_t NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:)()
{
  return MEMORY[0x24BE95F60]();
}

uint64_t static CommonGuardFlowUtils.makeGuardFlow(withGuards:)()
{
  return MEMORY[0x24BE95F80]();
}

uint64_t HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:)()
{
  return MEMORY[0x24BE95FD0]();
}

uint64_t HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:)()
{
  return MEMORY[0x24BE95FE0]();
}

uint64_t HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)()
{
  return MEMORY[0x24BE95FF0]();
}

uint64_t HandleIntentFlowStrategyAsync.authenticationPolicy.getter()
{
  return MEMORY[0x24BE96000]();
}

uint64_t HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)()
{
  return MEMORY[0x24BE96008]();
}

uint64_t HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)()
{
  return MEMORY[0x24BE96018]();
}

uint64_t HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)()
{
  return MEMORY[0x24BE96028]();
}

uint64_t HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)()
{
  return MEMORY[0x24BE96038]();
}

uint64_t SimpleOutputFlowAsync.__allocating_init(outputPublisher:outputGenerator:)()
{
  return MEMORY[0x24BE960B0]();
}

uint64_t type metadata accessor for SimpleOutputFlowAsync()
{
  return MEMORY[0x24BE960C8]();
}

uint64_t ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)()
{
  return MEMORY[0x24BE96200]();
}

uint64_t ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)()
{
  return MEMORY[0x24BE96210]();
}

uint64_t ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)()
{
  return MEMORY[0x24BE96220]();
}

uint64_t ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)()
{
  return MEMORY[0x24BE96230]();
}

uint64_t UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)()
{
  return MEMORY[0x24BE96290]();
}

uint64_t NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:)()
{
  return MEMORY[0x24BE962B8]();
}

uint64_t NeedsConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse(app:intent:parameter:)()
{
  return MEMORY[0x24BE962C8]();
}

uint64_t NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:)()
{
  return MEMORY[0x24BE962E0]();
}

uint64_t NeedsConfirmationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)()
{
  return MEMORY[0x24BE962F0]();
}

uint64_t NeedsConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:resolveRecord:)()
{
  return MEMORY[0x24BE96300]();
}

uint64_t NeedsConfirmationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)()
{
  return MEMORY[0x24BE96310]();
}

uint64_t NeedsDisambiguationFlowStrategyAsync.paginationStyle(resolveRecord:)()
{
  return MEMORY[0x24BE96490]();
}

uint64_t NeedsDisambiguationFlowStrategyAsync.authenticationPolicy.getter()
{
  return MEMORY[0x24BE96498]();
}

uint64_t NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:)()
{
  return MEMORY[0x24BE964A0]();
}

uint64_t NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)()
{
  return MEMORY[0x24BE964B0]();
}

uint64_t NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:)()
{
  return MEMORY[0x24BE964C0]();
}

uint64_t NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:)()
{
  return MEMORY[0x24BE964D0]();
}

uint64_t NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)()
{
  return MEMORY[0x24BE964D8]();
}

uint64_t RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:)()
{
  return MEMORY[0x24BE96550]();
}

uint64_t RequestTCCAcceptanceFlowStrategyAsync.makePromptForDeviceUnlock(app:intent:)()
{
  return MEMORY[0x24BE96560]();
}

uint64_t RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnLowConfidence(app:intent:)()
{
  return MEMORY[0x24BE96570]();
}

uint64_t RequestTCCAcceptanceFlowStrategyAsync.makeHandoffForAuthenticationResponse(app:intent:)()
{
  return MEMORY[0x24BE96580]();
}

uint64_t AppResolutionOnDeviceFlowStrategyAsync.makeAppResolutionSuccessfulResponse(app:)()
{
  return MEMORY[0x24BE96590]();
}

uint64_t AppResolutionOnDeviceFlowStrategyAsync.makeAppResolutionUnsuccessfulResponse(reason:)()
{
  return MEMORY[0x24BE965A0]();
}

uint64_t AppResolutionOnDeviceFlowStrategyAsync.makeErrorResponse(error:)()
{
  return MEMORY[0x24BE965B0]();
}

uint64_t ClientHandledRequestTCCAcceptanceFlowStrategyAsync.handoffTCCFlow(deviceState:)()
{
  return MEMORY[0x24BE96840]();
}

uint64_t ClientHandledRequestTCCAcceptanceFlowStrategyAsync.makeErrorResponse(error:app:intent:)()
{
  return MEMORY[0x24BE96848]();
}

uint64_t dispatch thunk of AnyFlow.on(input:)()
{
  return MEMORY[0x24BE968C8]();
}

uint64_t type metadata accessor for AnyFlow()
{
  return MEMORY[0x24BE968E0]();
}

uint64_t type metadata accessor for GuardFlow()
{
  return MEMORY[0x24BE96928]();
}

uint64_t static GuardFlowResult.== infix(_:_:)()
{
  return MEMORY[0x24BE96940]();
}

uint64_t static CommonFlowGuard.disallowInSharingMode.getter()
{
  return MEMORY[0x24BE96A68]();
}

uint64_t static CommonFlowGuard.ensuringDeviceIsAuthenticated(using:)()
{
  return MEMORY[0x24BE96A70]();
}

uint64_t type metadata accessor for CommonFlowGuard()
{
  return MEMORY[0x24BE96A90]();
}

uint64_t static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)()
{
  return MEMORY[0x24BE96B88]();
}

uint64_t static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)()
{
  return MEMORY[0x24BE96BA8]();
}

uint64_t static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B, C>(strategy:)()
{
  return MEMORY[0x24BE96BC8]();
}

uint64_t static RCHChildFlowFactoryHelper.makeConfirmIntentFlowProducer<A>(strategy:)()
{
  return MEMORY[0x24BE96BD0]();
}

uint64_t static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithDialogProducer<A>(strategy:)()
{
  return MEMORY[0x24BE96BD8]();
}

uint64_t static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)()
{
  return MEMORY[0x24BE96BE8]();
}

{
  return MEMORY[0x24BE96BF0]();
}

uint64_t static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)()
{
  return MEMORY[0x24BE96C00]();
}

uint64_t static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)()
{
  return MEMORY[0x24BE96C10]();
}

uint64_t static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)()
{
  return MEMORY[0x24BE96C30]();
}

uint64_t static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)()
{
  return MEMORY[0x24BE96C40]();
}

uint64_t RCHChildFlowProducersAsync.needsValueFlowProducer.setter()
{
  return MEMORY[0x24BE96C68]();
}

uint64_t RCHChildFlowProducersAsync.handleIntentFlowProducer.setter()
{
  return MEMORY[0x24BE96C70]();
}

uint64_t RCHChildFlowProducersAsync.appResolutionFlowProducer.setter()
{
  return MEMORY[0x24BE96C78]();
}

uint64_t RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter()
{
  return MEMORY[0x24BE96C80]();
}

uint64_t RCHChildFlowProducersAsync.continueInAppFlowProducer.setter()
{
  return MEMORY[0x24BE96C88]();
}

uint64_t RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter()
{
  return MEMORY[0x24BE96C90]();
}

uint64_t RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter()
{
  return MEMORY[0x24BE96C98]();
}

uint64_t RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter()
{
  return MEMORY[0x24BE96CA0]();
}

uint64_t RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter()
{
  return MEMORY[0x24BE96CA8]();
}

uint64_t RCHChildFlowProducersAsync.init()()
{
  return MEMORY[0x24BE96CB8]();
}

uint64_t RCHChildFlowFactory.__allocating_init(producers:)()
{
  return MEMORY[0x24BE96CC8]();
}

uint64_t Flow.eraseToAnyFlow()()
{
  return MEMORY[0x24BE96E78]();
}

uint64_t Flow.deferToExecuteAsync(_:)()
{
  return MEMORY[0x24BE96E98]();
}

uint64_t Flow.flexibleExecutionSupport.getter()
{
  return MEMORY[0x24BE96EA0]();
}

uint64_t Flow.onAsync(input:)()
{
  return MEMORY[0x24BE96EC0]();
}

uint64_t Flow<>.exitValue.getter()
{
  return MEMORY[0x24BE96ED0]();
}

uint64_t SiriKitDisambiguationItem.__allocating_init(components:image:directInvocation:allowLineWrapForDisplayText:)()
{
  return MEMORY[0x24BE97178]();
}

uint64_t type metadata accessor for SiriKitDisambiguationItem()
{
  return MEMORY[0x24BE971C0]();
}

uint64_t SiriKitDisambiguationList.disambiguationItems.getter()
{
  return MEMORY[0x24BE971D8]();
}

uint64_t SiriKitDisambiguationList.__allocating_init(rawItems:disambiguationItems:shouldReadItemsInVox:requestUnlockForEmptyOrDuplicateItems:)()
{
  return MEMORY[0x24BE971F0]();
}

uint64_t type metadata accessor for SiriKitDisambiguationList()
{
  return MEMORY[0x24BE97208]();
}

uint64_t static SiriKitIntentExecutionBehavior.standard()()
{
  return MEMORY[0x24BE97248]();
}

uint64_t type metadata accessor for SiriKitIntentExecutionBehavior()
{
  return MEMORY[0x24BE97250]();
}

uint64_t static SiriKitDirectInvocationPayloads.cancel.getter()
{
  return MEMORY[0x24BE97278]();
}

uint64_t static SiriKitDirectInvocationPayloads.reject.getter()
{
  return MEMORY[0x24BE97280]();
}

uint64_t static SiriKitDirectInvocationPayloads.confirm.getter()
{
  return MEMORY[0x24BE97288]();
}

uint64_t dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)()
{
  return MEMORY[0x24BE97290]();
}

uint64_t dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withPrintBlue(_:)()
{
  return MEMORY[0x24BE972A0]();
}

uint64_t dispatch thunk of SiriKitDisambiguationItemComponent.Builder.hideOnLockScreen()()
{
  return MEMORY[0x24BE972A8]();
}

uint64_t dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()()
{
  return MEMORY[0x24BE972C8]();
}

uint64_t dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withPrint(_:)()
{
  return MEMORY[0x24BE972D0]();
}

uint64_t dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withSpeak(_:)()
{
  return MEMORY[0x24BE972D8]();
}

uint64_t type metadata accessor for SiriKitDisambiguationItemComponent()
{
  return MEMORY[0x24BE972E0]();
}

uint64_t static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetPhone(disambiguationItems:deviceIsLocked:imageSize:)()
{
  return MEMORY[0x24BE972F0]();
}

uint64_t static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForWatch(disambiguationItems:textToSpeechIsEnabled:)()
{
  return MEMORY[0x24BE97308]();
}

uint64_t type metadata accessor for SiriKitDisambiguationSnippetFactory()
{
  return MEMORY[0x24BE97310]();
}

uint64_t static AceService.currentAsync.getter()
{
  return MEMORY[0x24BE973E0]();
}

uint64_t dispatch thunk of DeviceState.siriLocale.getter()
{
  return MEMORY[0x24BE97550]();
}

uint64_t dispatch thunk of DeviceState.isAuthenticated(for:)()
{
  return MEMORY[0x24BE97588]();
}

uint64_t dispatch thunk of DeviceState.isTextToSpeechEnabled.getter()
{
  return MEMORY[0x24BE975A8]();
}

uint64_t dispatch thunk of DeviceState.isPad.getter()
{
  return MEMORY[0x24BE975D8]();
}

uint64_t dispatch thunk of DeviceState.isPod.getter()
{
  return MEMORY[0x24BE975E0]();
}

uint64_t dispatch thunk of DeviceState.isPhone.getter()
{
  return MEMORY[0x24BE975E8]();
}

uint64_t dispatch thunk of DeviceState.isWatch.getter()
{
  return MEMORY[0x24BE975F0]();
}

uint64_t dispatch thunk of DeviceState.isCarPlay.getter()
{
  return MEMORY[0x24BE97600]();
}

uint64_t DeviceState.asInvocationContext.getter()
{
  return MEMORY[0x24BE97670]();
}

uint64_t static DialogPhase.confirmation.getter()
{
  return MEMORY[0x24BE976B8]();
}

uint64_t static DialogPhase.clarification.getter()
{
  return MEMORY[0x24BE976C0]();
}

uint64_t type metadata accessor for DialogPhase()
{
  return MEMORY[0x24BE97700]();
}

uint64_t static EmptyOutput.instance.getter()
{
  return MEMORY[0x24BE97740]();
}

uint64_t type metadata accessor for EmptyOutput()
{
  return MEMORY[0x24BE97748]();
}

uint64_t type metadata accessor for BargeInError()
{
  return MEMORY[0x24BE978A0]();
}

uint64_t type metadata accessor for ResponseType()
{
  return MEMORY[0x24BE97968]();
}

uint64_t static TCCTemplates.promptToEnableApp(appDisplayInfo:deviceState:)()
{
  return MEMORY[0x24BE97988]();
}

uint64_t static TCCTemplates.confirmationRejected(deviceState:)()
{
  return MEMORY[0x24BE97998]();
}

uint64_t static TCCTemplates.confirmationCancelled(deviceState:)()
{
  return MEMORY[0x24BE979A8]();
}

uint64_t static CasinoFactory.makePlaceholderCardSection()()
{
  return MEMORY[0x24BE979E0]();
}

uint64_t static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)()
{
  return MEMORY[0x24BE979E8]();
}

uint64_t static ActionForInput.cancel()()
{
  return MEMORY[0x24BE97AA8]();
}

uint64_t static ActionForInput.handle()()
{
  return MEMORY[0x24BE97AB0]();
}

uint64_t static ActionForInput.ignore()()
{
  return MEMORY[0x24BE97AB8]();
}

uint64_t CommandFailure.errorCode.getter()
{
  return MEMORY[0x24BE97AE0]();
}

uint64_t type metadata accessor for CommandFailure()
{
  return MEMORY[0x24BE97AE8]();
}

uint64_t static LabelTemplates.no()()
{
  return MEMORY[0x24BE97BB8]();
}

uint64_t static LabelTemplates.yes()()
{
  return MEMORY[0x24BE97BC8]();
}

uint64_t static LabelTemplates.cancel()()
{
  return MEMORY[0x24BE97BD8]();
}

uint64_t static LabelTemplates.openApp(appDisplayInfo:)()
{
  return MEMORY[0x24BE97C00]();
}

uint64_t RCHFlowFactory.makeAppResolvingRCHFlow()()
{
  return MEMORY[0x24BE97C10]();
}

uint64_t RCHFlowFactory.init(strategy:childFlowFactory:)()
{
  return MEMORY[0x24BE97C20]();
}

uint64_t TemplatingText.text.getter()
{
  return MEMORY[0x24BE97C70]();
}

uint64_t type metadata accessor for TemplatingText()
{
  return MEMORY[0x24BE97C78]();
}

uint64_t static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return MEMORY[0x24BE97CA0]();
}

uint64_t static AceOutputHelper.makeCancellationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:canUseServerTTS:flowActivity:)()
{
  return MEMORY[0x24BE97CA8]();
}

uint64_t static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return MEMORY[0x24BE97CB0]();
}

uint64_t static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return MEMORY[0x24BE97CB8]();
}

uint64_t static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return MEMORY[0x24BE97CE8]();
}

uint64_t static ExecuteResponse.ongoing<A>(next:childCompletion:)()
{
  return MEMORY[0x24BE97D08]();
}

uint64_t static ExecuteResponse.complete(next:)()
{
  return MEMORY[0x24BE97D48]();
}

uint64_t static ExecuteResponse.complete()()
{
  return MEMORY[0x24BE97D58]();
}

uint64_t NLContextUpdate.rrEntities.setter()
{
  return MEMORY[0x24BE97DA0]();
}

uint64_t NLContextUpdate.currentDomainName.setter()
{
  return MEMORY[0x24BE97DB8]();
}

uint64_t NLContextUpdate.nluSystemDialogActs.setter()
{
  return MEMORY[0x24BE97DC8]();
}

uint64_t NLContextUpdate.weightedPromptStrict.setter()
{
  return MEMORY[0x24BE97DE0]();
}

uint64_t NLContextUpdate.weightedPromptTargetDomain.setter()
{
  return MEMORY[0x24BE97E08]();
}

uint64_t NLContextUpdate.conversationStateAttachments.setter()
{
  return MEMORY[0x24BE97E18]();
}

uint64_t NLContextUpdate.weightedPromptResponseOptions.setter()
{
  return MEMORY[0x24BE97E20]();
}

uint64_t NLContextUpdate.weightedPromptResponseTargets.setter()
{
  return MEMORY[0x24BE97E30]();
}

uint64_t NLContextUpdate.nlInput.setter()
{
  return MEMORY[0x24BE97E48]();
}

uint64_t NLContextUpdate.init()()
{
  return MEMORY[0x24BE97E50]();
}

uint64_t type metadata accessor for NLContextUpdate()
{
  return MEMORY[0x24BE97E58]();
}

uint64_t ResponseFactory.__allocating_init()()
{
  return MEMORY[0x24BE97F20]();
}

uint64_t type metadata accessor for ResponseFactory()
{
  return MEMORY[0x24BE97F30]();
}

uint64_t static SAAppInfoFactory.createAppInfo(app:)()
{
  return MEMORY[0x24BE97F80]();
}

uint64_t TemplatingResult.sections.getter()
{
  return MEMORY[0x24BE97FD8]();
}

uint64_t type metadata accessor for TemplatingResult()
{
  return MEMORY[0x24BE97FE0]();
}

uint64_t static ProtectedAppCheck.client(for:)()
{
  return MEMORY[0x24BE980C0]();
}

uint64_t type metadata accessor for ProtectedAppCheck()
{
  return MEMORY[0x24BE980C8]();
}

uint64_t TemplatingSection.content.getter()
{
  return MEMORY[0x24BE98180]();
}

uint64_t IntentPromptAnswer.init(answeredValue:updatedIntent:)()
{
  return MEMORY[0x24BE981B8]();
}

uint64_t type metadata accessor for IntentPromptAnswer()
{
  return MEMORY[0x24BE981C0]();
}

uint64_t type metadata accessor for ProtectedAppStatus.AppState()
{
  return MEMORY[0x24BE98200]();
}

uint64_t ProtectedAppStatus.state.getter()
{
  return MEMORY[0x24BE98220]();
}

uint64_t type metadata accessor for ProtectedAppStatus()
{
  return MEMORY[0x24BE98228]();
}

uint64_t static UnlockDevicePolicy.requiringDeviceUnlock.getter()
{
  return MEMORY[0x24BE98308]();
}

uint64_t static UnlockDevicePolicy.default.getter()
{
  return MEMORY[0x24BE98310]();
}

uint64_t type metadata accessor for UnlockDevicePolicy()
{
  return MEMORY[0x24BE98320]();
}

uint64_t static AppResolutionAction.noAppFound()()
{
  return MEMORY[0x24BE98338]();
}

uint64_t static AppResolutionAction.disambiguate(apps:)()
{
  return MEMORY[0x24BE98340]();
}

uint64_t static AppResolutionAction.appNotSupported(app:)()
{
  return MEMORY[0x24BE98348]();
}

uint64_t static AppResolutionAction.screenTimeEnabled(app:)()
{
  return MEMORY[0x24BE98350]();
}

uint64_t static AppResolutionAction.select(app:)()
{
  return MEMORY[0x24BE98360]();
}

uint64_t static AppResolutionAction.confirm(app:)()
{
  return MEMORY[0x24BE98368]();
}

uint64_t type metadata accessor for AppResolutionAction()
{
  return MEMORY[0x24BE98370]();
}

uint64_t ConfirmIntentAnswer.init(confirmationResponse:intent:)()
{
  return MEMORY[0x24BE98388]();
}

uint64_t ParameterIdentifier.multicardinalIndex.getter()
{
  return MEMORY[0x24BE983C8]();
}

uint64_t ParameterIdentifier.name.getter()
{
  return MEMORY[0x24BE983D0]();
}

uint64_t type metadata accessor for ParameterIdentifier()
{
  return MEMORY[0x24BE983D8]();
}

uint64_t type metadata accessor for ConfirmationResponse()
{
  return MEMORY[0x24BE98408]();
}

uint64_t static DisambiguationResult.chosenItem(_:)()
{
  return MEMORY[0x24BE984A0]();
}

uint64_t RCHFlowStrategyAsync.makeParameterMetadata(intent:)()
{
  return MEMORY[0x24BE98500]();
}

uint64_t static AppResolutionResponse.makeConfirmationView(confirmDialog:cancelDialog:)()
{
  return MEMORY[0x24BE98548]();
}

uint64_t static AppResolutionResponse.makeDisambiguationList(apps:inLocale:)()
{
  return MEMORY[0x24BE98550]();
}

uint64_t static AppResolutionResponse.makeDisambiguationViews(apps:utteranceViews:disambiguationList:deviceState:compact:)()
{
  return MEMORY[0x24BE98558]();
}

uint64_t dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)()
{
  return MEMORY[0x24BE98660]();
}

uint64_t AppInformationResolver.__allocating_init(app:)()
{
  return MEMORY[0x24BE98668]();
}

uint64_t type metadata accessor for AppInformationResolver()
{
  return MEMORY[0x24BE98678]();
}

uint64_t IntentResolutionRecord.intentResponse.getter()
{
  return MEMORY[0x24BE98698]();
}

uint64_t IntentResolutionRecord.app.getter()
{
  return MEMORY[0x24BE986A0]();
}

uint64_t IntentResolutionRecord.intent.getter()
{
  return MEMORY[0x24BE986B0]();
}

uint64_t type metadata accessor for IntentResolutionRecord()
{
  return MEMORY[0x24BE986B8]();
}

uint64_t static OutputPublisherFactory.makeOutputPublisherAsync()()
{
  return MEMORY[0x24BE986D0]();
}

uint64_t PaginatedItemContainer.items.getter()
{
  return MEMORY[0x24BE986E8]();
}

uint64_t static AppConfirmationResponse.cancel()()
{
  return MEMORY[0x24BE98718]();
}

uint64_t static AppConfirmationResponse.ignore()()
{
  return MEMORY[0x24BE98720]();
}

uint64_t static AppConfirmationResponse.select()()
{
  return MEMORY[0x24BE98730]();
}

uint64_t type metadata accessor for AppConfirmationResponse()
{
  return MEMORY[0x24BE98738]();
}

uint64_t dispatch thunk of MachineUtteranceBuilder.addMappingIfPresent(node:value:)()
{
  return MEMORY[0x24BE98748]();
}

uint64_t dispatch thunk of MachineUtteranceBuilder.build()()
{
  return MEMORY[0x24BE98750]();
}

uint64_t MachineUtteranceBuilder.__allocating_init()()
{
  return MEMORY[0x24BE98758]();
}

uint64_t type metadata accessor for MachineUtteranceBuilder()
{
  return MEMORY[0x24BE98768]();
}

uint64_t NeedsConfirmationAnswer.init(answeredValue:updatedIntent:)()
{
  return MEMORY[0x24BE98770]();
}

uint64_t dispatch thunk of ProtectedAppCheckClient.status(for:)()
{
  return MEMORY[0x24BE98798]();
}

uint64_t OutputGenerationManifest.init(dialogPhase:_:)()
{
  return MEMORY[0x24BE98808]();
}

uint64_t OutputGenerationManifest.responseType.setter()
{
  return MEMORY[0x24BE98830]();
}

uint64_t OutputGenerationManifest.responseViewId.setter()
{
  return MEMORY[0x24BE98848]();
}

uint64_t OutputGenerationManifest.canUseServerTTS.setter()
{
  return MEMORY[0x24BE98858]();
}

uint64_t OutputGenerationManifest.nlContextUpdate.setter()
{
  return MEMORY[0x24BE98868]();
}

uint64_t OutputGenerationManifest.listenAfterSpeaking.setter()
{
  return MEMORY[0x24BE98898]();
}

uint64_t type metadata accessor for OutputGenerationManifest()
{
  return MEMORY[0x24BE988E0]();
}

uint64_t static AppDisambiguationResponse.error(_:)()
{
  return MEMORY[0x24BE98908]();
}

uint64_t static AppDisambiguationResponse.cancel()()
{
  return MEMORY[0x24BE98910]();
}

uint64_t static AppDisambiguationResponse.select(app:)()
{
  return MEMORY[0x24BE98920]();
}

uint64_t type metadata accessor for AppDisambiguationResponse()
{
  return MEMORY[0x24BE98928]();
}

uint64_t ParameterResolutionRecord.app.getter()
{
  return MEMORY[0x24BE98948]();
}

uint64_t ParameterResolutionRecord.intent.getter()
{
  return MEMORY[0x24BE98950]();
}

uint64_t ParameterResolutionRecord.result.getter()
{
  return MEMORY[0x24BE98958]();
}

uint64_t ParameterResolutionRecord.parameter.getter()
{
  return MEMORY[0x24BE98960]();
}

uint64_t type metadata accessor for ParameterResolutionRecord()
{
  return MEMORY[0x24BE98968]();
}

uint64_t AppConfirmationStrategyAsync.makeConfirmationErrorResponse(error:app:)()
{
  return MEMORY[0x24BE98A38]();
}

uint64_t AppConfirmationStrategyAsync.makeConfirmationRejectedResponse(app:)()
{
  return MEMORY[0x24BE98A48]();
}

uint64_t AppConfirmationStrategyAsync.makeConfirmationCancelledResponse(app:)()
{
  return MEMORY[0x24BE98A58]();
}

uint64_t AppConfirmationStrategyAsync.makeRepromptOnEmptyParse(app:)()
{
  return MEMORY[0x24BE98A68]();
}

uint64_t AppConfirmationStrategyAsync.makeRepromptOnLowConfidence(app:)()
{
  return MEMORY[0x24BE98A78]();
}

uint64_t AppDisambiguationStrategyAsync.makeDisambiguationErrorResponse(error:apps:)()
{
  return MEMORY[0x24BE98B58]();
}

uint64_t AppDisambiguationStrategyAsync.makeDisambiguationCancelResponse(apps:)()
{
  return MEMORY[0x24BE98B68]();
}

uint64_t AppDisambiguationStrategyAsync.makeRepromptOnEmptyParse(apps:)()
{
  return MEMORY[0x24BE98B78]();
}

uint64_t AppDisambiguationStrategyAsync.makeRepromptOnLowConfidence(apps:)()
{
  return MEMORY[0x24BE98B88]();
}

uint64_t BasicDisambiguationItemContainer.__allocating_init(_:_:)()
{
  return MEMORY[0x24BE98C88]();
}

uint64_t ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)()
{
  return MEMORY[0x24BE98CA8]();
}

uint64_t ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)()
{
  return MEMORY[0x24BE98CB8]();
}

uint64_t IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)()
{
  return MEMORY[0x24BE98CF0]();
}

uint64_t type metadata accessor for Image()
{
  return MEMORY[0x24BE98DA8]();
}

uint64_t Input.parse.getter()
{
  return MEMORY[0x24BE98DC0]();
}

uint64_t type metadata accessor for Input()
{
  return MEMORY[0x24BE98DD0]();
}

uint64_t Parse.DirectInvocation.identifier.getter()
{
  return MEMORY[0x24BE98E30]();
}

uint64_t Parse.DirectInvocation.userData.getter()
{
  return MEMORY[0x24BE98E38]();
}

uint64_t type metadata accessor for Parse.DirectInvocation()
{
  return MEMORY[0x24BE98E40]();
}

uint64_t type metadata accessor for Parse()
{
  return MEMORY[0x24BE98EA8]();
}

uint64_t static Device.current.getter()
{
  return MEMORY[0x24BE98EE0]();
}

uint64_t USOParse.debugDescription.getter()
{
  return MEMORY[0x24BE99030]();
}

uint64_t USOParse.userParse.getter()
{
  return MEMORY[0x24BE99040]();
}

uint64_t type metadata accessor for USOParse()
{
  return MEMORY[0x24BE99050]();
}

uint64_t AceOutput.init(commands:flowActivity:)()
{
  return MEMORY[0x24BE99078]();
}

uint64_t type metadata accessor for AceOutput()
{
  return MEMORY[0x24BE99090]();
}

uint64_t type metadata accessor for ImageSize()
{
  return MEMORY[0x24BE990A8]();
}

uint64_t isFeatureEnabled(_:)()
{
  return MEMORY[0x24BE30BE0]();
}

uint64_t dispatch thunk of FeatureFlagsKey.domain.getter()
{
  return MEMORY[0x24BE30BF0]();
}

uint64_t dispatch thunk of FeatureFlagsKey.feature.getter()
{
  return MEMORY[0x24BE30BF8]();
}

uint64_t Siri_Nlu_External_UsoGraph.identifiers.getter()
{
  return MEMORY[0x24BE9C290]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UsoGraph()
{
  return MEMORY[0x24BE9C2B8]();
}

uint64_t Siri_Nlu_External_UserParse.userDialogActs.getter()
{
  return MEMORY[0x24BE9C3E8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserParse()
{
  return MEMORY[0x24BE9C450]();
}

uint64_t Siri_Nlu_External_SystemOffered.offeredAct.setter()
{
  return MEMORY[0x24BE9C6D0]();
}

uint64_t Siri_Nlu_External_SystemOffered.init()()
{
  return MEMORY[0x24BE9C6D8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemOffered()
{
  return MEMORY[0x24BE9C6E0]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter()
{
  return MEMORY[0x24BE9C710]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasAccepted.getter()
{
  return MEMORY[0x24BE9C720]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasRejected.getter()
{
  return MEMORY[0x24BE9C728]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasCancelled.getter()
{
  return MEMORY[0x24BE9C740]();
}

uint64_t Siri_Nlu_External_UserDialogAct.userStatedTask.getter()
{
  return MEMORY[0x24BE9C768]();
}

uint64_t Siri_Nlu_External_UserDialogAct.userStatedTask.setter()
{
  return MEMORY[0x24BE9C770]();
}

uint64_t Siri_Nlu_External_UserDialogAct.wantedToProceed.setter()
{
  return MEMORY[0x24BE9C7A0]();
}

uint64_t Siri_Nlu_External_UserDialogAct.init()()
{
  return MEMORY[0x24BE9C820]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserDialogAct()
{
  return MEMORY[0x24BE9C828]();
}

uint64_t Siri_Nlu_External_SystemPrompted.target.setter()
{
  return MEMORY[0x24BE9CAD8]();
}

uint64_t Siri_Nlu_External_SystemPrompted.init()()
{
  return MEMORY[0x24BE9CAE8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemPrompted()
{
  return MEMORY[0x24BE9CAF0]();
}

uint64_t Siri_Nlu_External_UserStatedTask.task.getter()
{
  return MEMORY[0x24BE9CB10]();
}

uint64_t Siri_Nlu_External_UserStatedTask.task.setter()
{
  return MEMORY[0x24BE9CB18]();
}

uint64_t Siri_Nlu_External_UserStatedTask.init()()
{
  return MEMORY[0x24BE9CB20]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserStatedTask()
{
  return MEMORY[0x24BE9CB28]();
}

uint64_t Siri_Nlu_External_SystemDialogAct.gaveOptions.setter()
{
  return MEMORY[0x24BE9CCD0]();
}

uint64_t Siri_Nlu_External_SystemDialogAct.offered.setter()
{
  return MEMORY[0x24BE9CD40]();
}

uint64_t Siri_Nlu_External_SystemDialogAct.prompted.setter()
{
  return MEMORY[0x24BE9CD58]();
}

uint64_t Siri_Nlu_External_SystemDialogAct.init()()
{
  return MEMORY[0x24BE9CD68]();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemDialogAct()
{
  return MEMORY[0x24BE9CD70]();
}

uint64_t Siri_Nlu_External_SystemGaveOptions.choices.setter()
{
  return MEMORY[0x24BE9CF00]();
}

uint64_t Siri_Nlu_External_SystemGaveOptions.init()()
{
  return MEMORY[0x24BE9CF08]();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemGaveOptions()
{
  return MEMORY[0x24BE9CF10]();
}

uint64_t Siri_Nlu_External_UserWantedToProceed.reference.setter()
{
  return MEMORY[0x24BE9D0E0]();
}

uint64_t Siri_Nlu_External_UserWantedToProceed.init()()
{
  return MEMORY[0x24BE9D0E8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserWantedToProceed()
{
  return MEMORY[0x24BE9D0F0]();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter()
{
  return MEMORY[0x24BE9D0F8]();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.value.getter()
{
  return MEMORY[0x24BE9D100]();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.namespace.getter()
{
  return MEMORY[0x24BE9D108]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier()
{
  return MEMORY[0x24BE9D110]();
}

uint64_t static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)()
{
  return MEMORY[0x24BE9E008]();
}

uint64_t static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)()
{
  return MEMORY[0x24BE9E028]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter()
{
  return MEMORY[0x24BE9EB40]();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)()
{
  return MEMORY[0x24BE9ED38]();
}

uint64_t dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)()
{
  return MEMORY[0x24BE9F730]();
}

uint64_t dispatch thunk of CodeGenBase.usoIdentifiers.getter()
{
  return MEMORY[0x24BE9F750]();
}

uint64_t CodeGenBase.entity.getter()
{
  return MEMORY[0x24BE9F768]();
}

uint64_t UsoIdentifier.appBundleId.getter()
{
  return MEMORY[0x24BE9F8E8]();
}

uint64_t UsoIdentifier.appBundleSemantic.getter()
{
  return MEMORY[0x24BE9F950]();
}

uint64_t UsoIdentifier.init(value:appBundleId:namespace:)()
{
  return MEMORY[0x24BE9F988]();
}

uint64_t UsoIdentifier.value.getter()
{
  return MEMORY[0x24BE9F990]();
}

uint64_t UsoIdentifier.namespace.getter()
{
  return MEMORY[0x24BE9F998]();
}

uint64_t type metadata accessor for UsoIdentifier()
{
  return MEMORY[0x24BE9F9A0]();
}

uint64_t type metadata accessor for UsoTaskBuilder()
{
  return MEMORY[0x24BE9FA18]();
}

uint64_t static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)()
{
  return MEMORY[0x24BE9FE58]();
}

uint64_t type metadata accessor for UsoEntityBuilder()
{
  return MEMORY[0x24BE9FED8]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter()
{
  return MEMORY[0x24BE9FF30]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter()
{
  return MEMORY[0x24BE9FF38]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)()
{
  return MEMORY[0x24BE9FF60]();
}

uint64_t UsoBuilderOptions.init(longhandDefinedValues:)()
{
  return MEMORY[0x24BE9FF70]();
}

uint64_t type metadata accessor for UsoBuilderOptions()
{
  return MEMORY[0x24BE9FF78]();
}

uint64_t IdentifierAppBundle.rawValue.getter()
{
  return MEMORY[0x24BEA0048]();
}

uint64_t type metadata accessor for IdentifierAppBundle()
{
  return MEMORY[0x24BEA0058]();
}

uint64_t type metadata accessor for UsoEntity_common_App()
{
  return MEMORY[0x24BEA00E8]();
}

uint64_t UsoEntity_common_Agent.toContactQuery()()
{
  return MEMORY[0x24BE930B0]();
}

uint64_t dispatch thunk of UsoEntity_common_Number.definedValue.getter()
{
  return MEMORY[0x24BEA03A8]();
}

uint64_t type metadata accessor for UsoEntity_common_Number.DefinedValues()
{
  return MEMORY[0x24BEA0428]();
}

uint64_t type metadata accessor for UsoEntity_common_Number()
{
  return MEMORY[0x24BEA0450]();
}

uint64_t UsoEntity_common_Person.toContactQuery()()
{
  return MEMORY[0x24BE930C0]();
}

uint64_t type metadata accessor for UsoEntity_common_Person()
{
  return MEMORY[0x24BEA04E8]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_Target.target.getter()
{
  return MEMORY[0x24BEA0510]();
}

uint64_t dispatch thunk of UsoEntity_common_Decimal.definedValue.getter()
{
  return MEMORY[0x24BEA0550]();
}

uint64_t type metadata accessor for UsoEntity_common_Decimal.DefinedValues()
{
  return MEMORY[0x24BEA0568]();
}

uint64_t dispatch thunk of UsoEntity_common_Decimal.canonicalString.getter()
{
  return MEMORY[0x24BEA0588]();
}

uint64_t type metadata accessor for UsoEntity_common_Decimal()
{
  return MEMORY[0x24BEA0590]();
}

uint64_t dispatch thunk of UsoEntity_common_Integer.integerValue.getter()
{
  return MEMORY[0x24BEA0598]();
}

uint64_t type metadata accessor for UsoEntity_common_Integer()
{
  return MEMORY[0x24BEA05A0]();
}

uint64_t dispatch thunk of UsoEntity_common_Payment.memo.getter()
{
  return MEMORY[0x24BEA0620]();
}

uint64_t dispatch thunk of UsoEntity_common_Payment.payee.getter()
{
  return MEMORY[0x24BEA0628]();
}

uint64_t dispatch thunk of UsoEntity_common_Payment.payer.getter()
{
  return MEMORY[0x24BEA0630]();
}

uint64_t dispatch thunk of UsoEntity_common_Payment.amount.getter()
{
  return MEMORY[0x24BEA0638]();
}

uint64_t type metadata accessor for UsoEntity_common_Payment()
{
  return MEMORY[0x24BEA0640]();
}

uint64_t static UsoTask_CodegenConverter.convert(task:)()
{
  return MEMORY[0x24BEA0690]();
}

uint64_t static UsoBuilderConversionUtils.convertEntityBuilderToEntity(entityBuilder:)()
{
  return MEMORY[0x24BEA06B0]();
}

uint64_t dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoAssociatedApp(value:)()
{
  return MEMORY[0x24BEA0960]();
}

uint64_t static UsoEntity_CodeGenConverter.convert(entity:)()
{
  return MEMORY[0x24BEA0980]();
}

uint64_t static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)()
{
  return MEMORY[0x24BEA0990]();
}

uint64_t type metadata accessor for UsoTask_pay_common_Payment()
{
  return MEMORY[0x24BEA0AD0]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_Reference.reference.getter()
{
  return MEMORY[0x24BEA0B28]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.name.getter()
{
  return MEMORY[0x24BEA0B30]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.setName(value:)()
{
  return MEMORY[0x24BEA0B38]();
}

uint64_t UsoEntityBuilder_common_App.__allocating_init()()
{
  return MEMORY[0x24BEA0B48]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_App()
{
  return MEMORY[0x24BEA0B58]();
}

uint64_t type metadata accessor for UsoTask_noVerb_uso_NoEntity()
{
  return MEMORY[0x24BEA0CF8]();
}

uint64_t dispatch thunk of UsoEntity_common_Organization.name.getter()
{
  return MEMORY[0x24BEA12B0]();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_Payment()
{
  return MEMORY[0x24BEA1398]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Number.setName(value:)()
{
  return MEMORY[0x24BEA1488]();
}

uint64_t UsoEntityBuilder_common_Number.__allocating_init()()
{
  return MEMORY[0x24BEA1498]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Number()
{
  return MEMORY[0x24BEA14A8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setStructuredName(value:)()
{
  return MEMORY[0x24BEA14B0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setSpecifyingContactAddress(value:)()
{
  return MEMORY[0x24BEA14D0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.name.getter()
{
  return MEMORY[0x24BEA14D8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setName(value:)()
{
  return MEMORY[0x24BEA14E0]();
}

uint64_t UsoEntityBuilder_common_Person.__allocating_init()()
{
  return MEMORY[0x24BEA14F8]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Person()
{
  return MEMORY[0x24BEA1510]();
}

uint64_t dispatch thunk of UsoEntity_common_MixedFraction.wholeValue.getter()
{
  return MEMORY[0x24BEA1740]();
}

uint64_t dispatch thunk of UsoEntity_common_MixedFraction.numeratorValue.getter()
{
  return MEMORY[0x24BEA1748]();
}

uint64_t dispatch thunk of UsoEntity_common_MixedFraction.denominatorValue.getter()
{
  return MEMORY[0x24BEA1750]();
}

uint64_t type metadata accessor for UsoEntity_common_MixedFraction()
{
  return MEMORY[0x24BEA1758]();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)()
{
  return MEMORY[0x24BEA1918]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.setMemo(value:)()
{
  return MEMORY[0x24BEA19C0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.setPayee(value:)()
{
  return MEMORY[0x24BEA19C8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.setPayer(value:)()
{
  return MEMORY[0x24BEA19D0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.setAmount(value:)()
{
  return MEMORY[0x24BEA19D8]();
}

uint64_t UsoEntityBuilder_common_Payment.__allocating_init()()
{
  return MEMORY[0x24BEA19E0]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Payment()
{
  return MEMORY[0x24BEA19E8]();
}

uint64_t dispatch thunk of UsoEntity_common_CurrencyAmount.amount.getter()
{
  return MEMORY[0x24BEA1B78]();
}

uint64_t dispatch thunk of UsoEntity_common_CurrencyAmount.currency.getter()
{
  return MEMORY[0x24BEA1B80]();
}

uint64_t dispatch thunk of UsoEntity_common_PaymentAccount.accountType.getter()
{
  return MEMORY[0x24BEA1BD8]();
}

uint64_t dispatch thunk of UsoEntity_common_PaymentAccount.bank.getter()
{
  return MEMORY[0x24BEA1BE0]();
}

uint64_t dispatch thunk of UsoEntity_common_PaymentAccount.name.getter()
{
  return MEMORY[0x24BEA1BE8]();
}

uint64_t dispatch thunk of UsoEntity_common_PaymentAccount.holder.getter()
{
  return MEMORY[0x24BEA1BF0]();
}

uint64_t dispatch thunk of UsoEntity_common_PaymentAccount.balance.getter()
{
  return MEMORY[0x24BEA1BF8]();
}

uint64_t type metadata accessor for UsoEntity_common_PaymentAccount()
{
  return MEMORY[0x24BEA1C00]();
}

uint64_t static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)()
{
  return MEMORY[0x24BEA1CD8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Currency.setName(value:)()
{
  return MEMORY[0x24BEA1CE8]();
}

uint64_t UsoEntityBuilder_common_Currency.__allocating_init()()
{
  return MEMORY[0x24BEA1CF8]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Currency()
{
  return MEMORY[0x24BEA1D00]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter()
{
  return MEMORY[0x24BEA2050]();
}

uint64_t dispatch thunk of UsoEntity_common_MultipliedNumber.multiplier.getter()
{
  return MEMORY[0x24BEA21B8]();
}

uint64_t dispatch thunk of UsoEntity_common_MultipliedNumber.value.getter()
{
  return MEMORY[0x24BEA21C0]();
}

uint64_t type metadata accessor for UsoEntity_common_MultipliedNumber()
{
  return MEMORY[0x24BEA21C8]();
}

uint64_t UsoTaskBuilder_pay_common_Payment.__allocating_init()()
{
  return MEMORY[0x24BEA2230]();
}

uint64_t type metadata accessor for UsoTaskBuilder_pay_common_Payment()
{
  return MEMORY[0x24BEA2238]();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_Reference.setReference(value:)()
{
  return MEMORY[0x24BEA22F8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonName.setNamePrefix(value:)()
{
  return MEMORY[0x24BEA2390]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonName.setNamePostfix(value:)()
{
  return MEMORY[0x24BEA2398]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonName.setNickName(value:)()
{
  return MEMORY[0x24BEA23A0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonName.setGivenName(value:)()
{
  return MEMORY[0x24BEA23A8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonName.setFamilyName(value:)()
{
  return MEMORY[0x24BEA23B0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonName.setMiddleName(value:)()
{
  return MEMORY[0x24BEA23B8]();
}

uint64_t UsoEntityBuilder_common_PersonName.__allocating_init()()
{
  return MEMORY[0x24BEA23C8]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PersonName()
{
  return MEMORY[0x24BEA23D8]();
}

uint64_t dispatch thunk of UsoEntity_common_PaymentAccountType.name.getter()
{
  return MEMORY[0x24BEA2668]();
}

uint64_t type metadata accessor for UsoTask_requestMoney_common_Payment()
{
  return MEMORY[0x24BEA2750]();
}

uint64_t UsoTaskBuilder_noVerb_common_Payment.__allocating_init()()
{
  return MEMORY[0x24BEA2978]();
}

uint64_t type metadata accessor for UsoTaskBuilder_noVerb_common_Payment()
{
  return MEMORY[0x24BEA2980]();
}

uint64_t type metadata accessor for UsoTask_create_common_PaymentAccount()
{
  return MEMORY[0x24BEA29F8]();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_PaymentAccount()
{
  return MEMORY[0x24BEA2A00]();
}

uint64_t type metadata accessor for UsoTask_request_common_PaymentAccount()
{
  return MEMORY[0x24BEA2CC0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ContactAddress.setValue(value:)()
{
  return MEMORY[0x24BEA2D38]();
}

uint64_t UsoEntityBuilder_common_ContactAddress.__allocating_init()()
{
  return MEMORY[0x24BEA2D48]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_ContactAddress()
{
  return MEMORY[0x24BEA2D58]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.setCurrency(value:)()
{
  return MEMORY[0x24BEA2D60]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.setAmount(value:)()
{
  return MEMORY[0x24BEA2D68]();
}

uint64_t UsoEntityBuilder_common_CurrencyAmount.__allocating_init()()
{
  return MEMORY[0x24BEA2D78]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_CurrencyAmount()
{
  return MEMORY[0x24BEA2D80]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setAccountType(value:)()
{
  return MEMORY[0x24BEA2DA8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setAccountNumber(value:)()
{
  return MEMORY[0x24BEA2DB0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setBalance(value:)()
{
  return MEMORY[0x24BEA2DB8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setNickname(value:)()
{
  return MEMORY[0x24BEA2DC0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setOrganization(value:)()
{
  return MEMORY[0x24BEA2DC8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setHolder(value:)()
{
  return MEMORY[0x24BEA2DD0]();
}

uint64_t UsoEntityBuilder_common_PaymentAccount.__allocating_init()()
{
  return MEMORY[0x24BEA2DE0]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PaymentAccount()
{
  return MEMORY[0x24BEA2DE8]();
}

uint64_t type metadata accessor for UsoTask_summarise_common_PaymentAccount()
{
  return MEMORY[0x24BEA2FC0]();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_ReferenceSelect.setReference(value:)()
{
  return MEMORY[0x24BEA2FD0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccountType.setName(value:)()
{
  return MEMORY[0x24BEA3190]();
}

uint64_t UsoEntityBuilder_common_PaymentAccountType.__allocating_init()()
{
  return MEMORY[0x24BEA31A0]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PaymentAccountType()
{
  return MEMORY[0x24BEA31A8]();
}

uint64_t UsoTaskBuilder_requestMoney_common_Payment.__allocating_init()()
{
  return MEMORY[0x24BEA3228]();
}

uint64_t type metadata accessor for UsoTaskBuilder_requestMoney_common_Payment()
{
  return MEMORY[0x24BEA3230]();
}

uint64_t UsoTaskBuilder_request_common_PaymentAccount.__allocating_init()()
{
  return MEMORY[0x24BEA32F0]();
}

uint64_t type metadata accessor for UsoTaskBuilder_request_common_PaymentAccount()
{
  return MEMORY[0x24BEA32F8]();
}

uint64_t UsoTaskBuilder_summarise_common_PaymentAccount.__allocating_init()()
{
  return MEMORY[0x24BEA3358]();
}

uint64_t type metadata accessor for UsoTaskBuilder_summarise_common_PaymentAccount()
{
  return MEMORY[0x24BEA3360]();
}

uint64_t UsoEntity.debugString.getter()
{
  return MEMORY[0x24BEA5508]();
}

uint64_t type metadata accessor for UsoEntity()
{
  return MEMORY[0x24BEA3820]();
}

uint64_t SiriKitContactResolver.findMatches(queries:config:)()
{
  return MEMORY[0x24BE93248]();
}

uint64_t SiriKitContactResolver.resolve(queries:config:)()
{
  return MEMORY[0x24BE93258]();
}

uint64_t SiriKitContactResolver.init()()
{
  return MEMORY[0x24BE93268]();
}

uint64_t type metadata accessor for SiriKitContactResolver()
{
  return MEMORY[0x24BE93270]();
}

uint64_t ContactQuery.familyName.setter()
{
  return MEMORY[0x24BE93400]();
}

uint64_t ContactQuery.middleName.setter()
{
  return MEMORY[0x24BE93410]();
}

uint64_t ContactQuery.namePrefix.setter()
{
  return MEMORY[0x24BE93420]();
}

uint64_t ContactQuery.nameSuffix.setter()
{
  return MEMORY[0x24BE93430]();
}

uint64_t ContactQuery.description.getter()
{
  return MEMORY[0x24BE93438]();
}

uint64_t ContactQuery.relationship.setter()
{
  return MEMORY[0x24BE93440]();
}

uint64_t ContactQuery.id.setter()
{
  return MEMORY[0x24BE93468]();
}

uint64_t ContactQuery.isMe.setter()
{
  return MEMORY[0x24BE93478]();
}

uint64_t ContactQuery.handle.setter()
{
  return MEMORY[0x24BE93480]();
}

uint64_t ContactQuery.fullName.setter()
{
  return MEMORY[0x24BE93490]();
}

uint64_t ContactQuery.nickname.setter()
{
  return MEMORY[0x24BE934A0]();
}

uint64_t ContactQuery.givenName.setter()
{
  return MEMORY[0x24BE934B0]();
}

uint64_t ContactQuery.init()()
{
  return MEMORY[0x24BE934B8]();
}

uint64_t type metadata accessor for ContactQuery()
{
  return MEMORY[0x24BE934C0]();
}

uint64_t type metadata accessor for ContactHandle.HandleType()
{
  return MEMORY[0x24BE93590]();
}

uint64_t type metadata accessor for RecommenderType()
{
  return MEMORY[0x24BE937B8]();
}

uint64_t ContactHandleQuery.init(type:label:value:)()
{
  return MEMORY[0x24BE93868]();
}

uint64_t type metadata accessor for ContactHandleQuery()
{
  return MEMORY[0x24BE93870]();
}

uint64_t ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:)()
{
  return MEMORY[0x24BE938D8]();
}

uint64_t type metadata accessor for ContactResolverConfig()
{
  return MEMORY[0x24BE938F0]();
}

uint64_t static ContactResolverDomain.all.getter()
{
  return MEMORY[0x24BE93900]();
}

uint64_t type metadata accessor for ContactResolverDomain()
{
  return MEMORY[0x24BE93908]();
}

uint64_t type metadata accessor for SearchSuggestedContacts()
{
  return MEMORY[0x24BE939E0]();
}

uint64_t ContactRelationshipQuery.init(label:fromContact:)()
{
  return MEMORY[0x24BE939E8]();
}

uint64_t type metadata accessor for ContactRelationshipQuery()
{
  return MEMORY[0x24BE939F0]();
}

uint64_t static ContactHandleTypePreference.preferPhone.getter()
{
  return MEMORY[0x24BE93A80]();
}

uint64_t type metadata accessor for ContactHandleTypePreference()
{
  return MEMORY[0x24BE93A90]();
}

uint64_t SiriEnvironment.currentDevice.getter()
{
  return MEMORY[0x24BEA87E8]();
}

uint64_t static SiriEnvironment.default.getter()
{
  return MEMORY[0x24BEA8808]();
}

uint64_t type metadata accessor for SiriEnvironment()
{
  return MEMORY[0x24BEA8810]();
}

uint64_t Transformer.init(transform:)()
{
  return MEMORY[0x24BEA8A80]();
}

uint64_t Transformer.transform.getter()
{
  return MEMORY[0x24BEA8A88]();
}

uint64_t type metadata accessor for TransformationError()
{
  return MEMORY[0x24BEA8DC8]();
}

uint64_t dispatch thunk of DialogAbstractMeasurement.Builder.build()()
{
  return MEMORY[0x24BE92398]();
}

uint64_t dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)()
{
  return MEMORY[0x24BE923A8]();
}

uint64_t dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)()
{
  return MEMORY[0x24BE923B0]();
}

uint64_t DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)()
{
  return MEMORY[0x24BE92420]();
}

uint64_t DialogPerson.__allocating_init(person:locale:useConversationalName:)()
{
  return MEMORY[0x24BE92488]();
}

uint64_t type metadata accessor for DialogPerson()
{
  return MEMORY[0x24BE92588]();
}

uint64_t DialogCurrency.Builder.__allocating_init()()
{
  return MEMORY[0x24BE926B8]();
}

uint64_t type metadata accessor for DialogCurrency.Builder()
{
  return MEMORY[0x24BE926C8]();
}

uint64_t type metadata accessor for DialogCurrency()
{
  return MEMORY[0x24BE926D8]();
}

uint64_t CATGlobals.__allocating_init()()
{
  return MEMORY[0x24BE92840]();
}

uint64_t type metadata accessor for CATGlobals()
{
  return MEMORY[0x24BE92848]();
}

uint64_t CATWrapper.init(templateDir:options:globals:)()
{
  return MEMORY[0x24BE92860]();
}

uint64_t dispatch thunk of CATWrapper.execute(catId:parameters:completion:)()
{
  return MEMORY[0x24BE92878]();
}

uint64_t dispatch thunk of CATWrapper.execute(catId:parameters:)()
{
  return MEMORY[0x24BE92880]();
}

uint64_t CATWrapper.__allocating_init(options:globals:)()
{
  return MEMORY[0x24BE92888]();
}

uint64_t CATWrapper.deinit()
{
  return MEMORY[0x24BE92898]();
}

uint64_t dispatch thunk of SirikitApp.Builder.withLocalizedAppNames(_:)()
{
  return MEMORY[0x24BE928B0]();
}

uint64_t dispatch thunk of SirikitApp.Builder.withAppId(print:speak:)()
{
  return MEMORY[0x24BE928B8]();
}

uint64_t dispatch thunk of SirikitApp.Builder.build()()
{
  return MEMORY[0x24BE928C8]();
}

uint64_t SirikitApp.Builder.__allocating_init()()
{
  return MEMORY[0x24BE928D0]();
}

uint64_t type metadata accessor for SirikitApp.Builder()
{
  return MEMORY[0x24BE928E0]();
}

uint64_t type metadata accessor for SirikitApp()
{
  return MEMORY[0x24BE928F8]();
}

uint64_t SpeakableString.init(serializedValue:)()
{
  return MEMORY[0x24BE92998]();
}

uint64_t SpeakableString.init(print:speak:)()
{
  return MEMORY[0x24BE929A8]();
}

uint64_t SpeakableString.print.getter()
{
  return MEMORY[0x24BE929B0]();
}

uint64_t type metadata accessor for SpeakableString()
{
  return MEMORY[0x24BE929C8]();
}

uint64_t CATWrapperSimple.init(templateDir:options:globals:)()
{
  return MEMORY[0x24BE929F0]();
}

uint64_t CATWrapperSimple.init(useResponseMode:options:)()
{
  return MEMORY[0x24BE92A00]();
}

uint64_t CATWrapperSimple.__allocating_init(options:globals:)()
{
  return MEMORY[0x24BE92A10]();
}

uint64_t CATWrapperSimple.deinit()
{
  return MEMORY[0x24BE92A28]();
}

uint64_t dispatch thunk of SirikitLocalizedAppName.Builder.withAppName(_:)()
{
  return MEMORY[0x24BE92B30]();
}

uint64_t dispatch thunk of SirikitLocalizedAppName.Builder.withLocale(_:)()
{
  return MEMORY[0x24BE92B38]();
}

uint64_t dispatch thunk of SirikitLocalizedAppName.Builder.build()()
{
  return MEMORY[0x24BE92B40]();
}

uint64_t SirikitLocalizedAppName.Builder.__allocating_init()()
{
  return MEMORY[0x24BE92B48]();
}

uint64_t type metadata accessor for SirikitLocalizedAppName.Builder()
{
  return MEMORY[0x24BE92B58]();
}

uint64_t type metadata accessor for SirikitLocalizedAppName()
{
  return MEMORY[0x24BE92B60]();
}

uint64_t CATType.toDictionary.getter()
{
  return MEMORY[0x24BE92B78]();
}

uint64_t static CATOption.defaultMode.getter()
{
  return MEMORY[0x24BE92BF8]();
}

uint64_t type metadata accessor for CATOption()
{
  return MEMORY[0x24BE92C20]();
}

uint64_t App.__allocating_init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)()
{
  return MEMORY[0x24BE90B78]();
}

uint64_t App.__allocating_init(appIdentifier:)()
{
  return MEMORY[0x24BE90B88]();
}

uint64_t App.appIdentifier.getter()
{
  return MEMORY[0x24BE90B90]();
}

uint64_t App.pluginIdentifier.getter()
{
  return MEMORY[0x24BE90B98]();
}

uint64_t App.systemExtensionBundleId.getter()
{
  return MEMORY[0x24BE90BA0]();
}

uint64_t App.systemUIExtensionBundleId.getter()
{
  return MEMORY[0x24BE90BA8]();
}

uint64_t type metadata accessor for App()
{
  return MEMORY[0x24BE90BB8]();
}

uint64_t AppDisplayInfo.init(displayName:isFirstParty:)()
{
  return MEMORY[0x24BE90BD8]();
}

uint64_t type metadata accessor for AppDisplayInfo()
{
  return MEMORY[0x24BE90BE8]();
}

uint64_t type metadata accessor for AppSelectionResponse()
{
  return MEMORY[0x24BE90C88]();
}

uint64_t static AppFinder.listApps(intentID:siriAuthorizationRestriction:)()
{
  return MEMORY[0x24BE90C90]();
}

uint64_t AppResolutionStateProvider.init(appSelectionState:)()
{
  return MEMORY[0x24BE90CD8]();
}

uint64_t type metadata accessor for AppResolutionStateProvider()
{
  return MEMORY[0x24BE90CE8]();
}

uint64_t AppResolutionStateProviding.previousSelectionResponse.getter()
{
  return MEMORY[0x24BE90D18]();
}

uint64_t type metadata accessor for AppResolutionResult.AppResolutionResultError()
{
  return MEMORY[0x24BE90D38]();
}

uint64_t type metadata accessor for AppResolutionResult()
{
  return MEMORY[0x24BE90D70]();
}

uint64_t dispatch thunk of AppResolutionService.resolveApp(intent:appResolutionState:_:)()
{
  return MEMORY[0x24BE90D88]();
}

uint64_t AppResolutionService.init()()
{
  return MEMORY[0x24BE90D98]();
}

uint64_t AppResolutionService.deinit()
{
  return MEMORY[0x24BE90DB0]();
}

uint64_t ContactResolutionCommonKeys.rawValue.getter()
{
  return MEMORY[0x24BE94408]();
}

uint64_t type metadata accessor for ContactResolutionCommonKeys()
{
  return MEMORY[0x24BE94418]();
}

uint64_t type metadata accessor for ContactResolutionResponseHandler.DirectInvocationValue()
{
  return MEMORY[0x24BE94448]();
}

uint64_t ContactResolutionResponseHandler.directInvocationValue.getter()
{
  return MEMORY[0x24BE94450]();
}

uint64_t ContactResolutionResponseHandler.init(userData:)()
{
  return MEMORY[0x24BE94458]();
}

uint64_t type metadata accessor for ContactResolutionResponseHandler()
{
  return MEMORY[0x24BE94460]();
}

uint64_t ContactResolutionSnippetGenerator.generateDetailedDisambiguationContactNames(contacts:directInvocationID:outputGenerationManifest:)()
{
  return MEMORY[0x24BE94508]();
}

uint64_t ContactResolutionSnippetGenerator.__allocating_init(appBundleId:globals:deviceState:)()
{
  return MEMORY[0x24BE94518]();
}

uint64_t ContactResolutionSnippetGenerator.__allocating_init(appBundleId:globals:)()
{
  return MEMORY[0x24BE94528]();
}

uint64_t type metadata accessor for ContactResolutionSnippetGenerator()
{
  return MEMORY[0x24BE94540]();
}

uint64_t Google_Protobuf_StringValue.value.getter()
{
  return MEMORY[0x24BE5BA20]();
}

uint64_t type metadata accessor for Google_Protobuf_StringValue()
{
  return MEMORY[0x24BE5BA38]();
}

uint64_t dispatch thunk of ReferenceResolutionClient.resolve(reference:filter:)()
{
  return MEMORY[0x24BEA5480]();
}

uint64_t ReferenceResolutionClient.__allocating_init()()
{
  return MEMORY[0x24BEA54A8]();
}

uint64_t type metadata accessor for ReferenceResolutionClient()
{
  return MEMORY[0x24BEA54B0]();
}

uint64_t os_signpost(_:dso:log:name:signpostID:_:_:)()
{
  return MEMORY[0x24BEE76F8]();
}

uint64_t os_signpost(_:dso:log:name:signpostID:)()
{
  return MEMORY[0x24BEE7700]();
}

uint64_t OSSignpostID.init(log:)()
{
  return MEMORY[0x24BEE7718]();
}

uint64_t static OSSignpostID.exclusive.getter()
{
  return MEMORY[0x24BEE7748]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x24BEE7758]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t type metadata accessor for RRMetadata()
{
  return MEMORY[0x24BEA5540]();
}

uint64_t RRCandidate.entity.getter()
{
  return MEMORY[0x24BEA5578]();
}

uint64_t type metadata accessor for RRCandidate()
{
  return MEMORY[0x24BEA5580]();
}

uint64_t GroupIdentifier.init(id:seq:)()
{
  return MEMORY[0x24BEA5668]();
}

uint64_t type metadata accessor for GroupIdentifier()
{
  return MEMORY[0x24BEA5680]();
}

uint64_t type metadata accessor for RRDataSourceMetadataValue()
{
  return MEMORY[0x24BEA5930]();
}

uint64_t type metadata accessor for RRQuery()
{
  return MEMORY[0x24BEA59D8]();
}

uint64_t RREntity.appBundleId.getter()
{
  return MEMORY[0x24BEA59F0]();
}

uint64_t RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)()
{
  return MEMORY[0x24BEA5A38]();
}

uint64_t RREntity.id.getter()
{
  return MEMORY[0x24BEA5A40]();
}

uint64_t RREntity.metadata.getter()
{
  return MEMORY[0x24BEA5A60]();
}

uint64_t RREntity.usoEntity.getter()
{
  return MEMORY[0x24BEA5A68]();
}

uint64_t type metadata accessor for RREntity()
{
  return MEMORY[0x24BEA5A70]();
}

uint64_t type metadata accessor for RRFilter()
{
  return MEMORY[0x24BEA5A98]();
}

uint64_t type metadata accessor for RRResult()
{
  return MEMORY[0x24BEA5AD0]();
}

uint64_t Array.init()()
{
  return MEMORY[0x24BEE01B8]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x24BDCF808]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x24BEE02B0]();
}

uint64_t Dictionary.subscript.getter()
{
  return MEMORY[0x24BEE04A8]();
}

Swift::Int __swiftcall Hashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE0630](seed);
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x24BEE09F0]();
}

{
  return MEMORY[0x24BEE09F8]();
}

{
  return MEMORY[0x24BEE0A00]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEE0A08]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall String.uppercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEE0A20]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.toSpeakableString.getter()
{
  return MEMORY[0x24BE92C48]();
}

uint64_t String.init(stringInterpolation:)()
{
  return MEMORY[0x24BEE0AE0]();
}

uint64_t static String.< infix(_:_:)()
{
  return MEMORY[0x24BEE0AE8]();
}

Swift::String __swiftcall String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(Builtin::RawPointer _builtinStringLiteral, Builtin::Word utf8CodeUnitCount, Builtin::Int1 isASCII)
{
  uint64_t v3;
  void *v4;
  Swift::String result;

  v3 = MEMORY[0x24BEE0AF8](_builtinStringLiteral, utf8CodeUnitCount, isASCII);
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

uint64_t static String.== infix(_:_:)()
{
  return MEMORY[0x24BEE0B08]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x24BEE0B68]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

uint64_t String.isEmpty.getter()
{
  return MEMORY[0x24BEE0BF8]();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x24BEE0CC8](a1._countAndFlagsBits, a1._object);
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return MEMORY[0x24BEE0DF8]();
}

uint64_t Sequence.allSatisfy(_:)()
{
  return MEMORY[0x24BEE0E38]();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return MEMORY[0x24BEE0E40]();
}

uint64_t Sequence.enumerated()()
{
  return MEMORY[0x24BEE0E48]();
}

uint64_t Sequence.first(where:)()
{
  return MEMORY[0x24BEE0E98]();
}

uint64_t Sequence.sorted(by:)()
{
  return MEMORY[0x24BEE0EC0]();
}

uint64_t Sequence.forEach(_:)()
{
  return MEMORY[0x24BEE0EE0]();
}

uint64_t Sequence.contains(where:)()
{
  return MEMORY[0x24BEE0EE8]();
}

uint64_t Sequence<>.contains(_:)()
{
  return MEMORY[0x24BEE0F30]();
}

uint64_t UnsignedInteger<>.init<A>(_:)()
{
  return MEMORY[0x24BEE0F48]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x24BEE0FD8]();
}

uint64_t RawRepresentable<>.hashValue.getter()
{
  return MEMORY[0x24BEE1068]();
}

uint64_t RawRepresentable<>._rawHashValue(seed:)()
{
  return MEMORY[0x24BEE1070]();
}

uint64_t RawRepresentable<>.hash(into:)()
{
  return MEMORY[0x24BEE1078]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x24BDCFBA8]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t Array.debugDescription.getter()
{
  return MEMORY[0x24BEE1168]();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x24BEE11C8]();
}

uint64_t Array.append<A>(contentsOf:)()
{
  return MEMORY[0x24BEE11F0]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x24BEE11F8]();
}

uint64_t specialized Array.append(_:)()
{
  return MEMORY[0x24BEE5F00]();
}

uint64_t Array.remove(at:)()
{
  return MEMORY[0x24BEE1208]();
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t Array.subscript.modify()
{
  return MEMORY[0x24BEE1300]();
}

uint64_t Array.subscript.getter()
{
  return MEMORY[0x24BEE1308]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t Float.init(truncating:)()
{
  return MEMORY[0x24BDCFC78]();
}

uint64_t Float._roundSlowPath(_:)()
{
  return MEMORY[0x24BEE1498]();
}

uint64_t static Float.greatestFiniteMagnitude.getter()
{
  return MEMORY[0x24BEE14B0]();
}

uint64_t Float.sign.getter()
{
  return MEMORY[0x24BEE14C0]();
}

uint64_t Float.init<A>(_:)()
{
  return MEMORY[0x24BEE1580]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFCE8]();
}

uint64_t Set.init(arrayLiteral:)()
{
  return MEMORY[0x24BEE15B8]();
}

uint64_t Set.contains(_:)()
{
  return MEMORY[0x24BEE1690]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFD28]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t Collection<>.popFirst()()
{
  return MEMORY[0x24BEE1930]();
}

uint64_t Collection.firstIndex(where:)()
{
  return MEMORY[0x24BEE1938]();
}

uint64_t Collection.first.getter()
{
  return MEMORY[0x24BEE1980]();
}

uint64_t Collection.prefix(_:)()
{
  return MEMORY[0x24BEE19A8]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x24BEE19B8]();
}

uint64_t Collection.dropFirst(_:)()
{
  return MEMORY[0x24BEE19D0]();
}

uint64_t Collection<>.makeIterator()()
{
  return MEMORY[0x24BEE1A10]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t static RangeReplaceableCollection.+ infix<A>(_:_:)()
{
  return MEMORY[0x24BEE1AB0]();
}

uint64_t static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)()
{
  return MEMORY[0x24BE99120]();
}

uint64_t static SACardSnippet.makeFromCardSectionsWithIntentData(cardSections:intent:intentResponse:shouldGenerateAceId:)()
{
  return MEMORY[0x24BE99128]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t INSpeakableString.toSpeakableString.getter()
{
  return MEMORY[0x24BE92C50]();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return MEMORY[0x24BEE7940]();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return MEMORY[0x24BEE7948]();
}

uint64_t static os_signpost_type_t.event.getter()
{
  return MEMORY[0x24BEE7958]();
}

Swift::String_optional __swiftcall AceObject.serializeToBase64()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = MEMORY[0x24BE99138]();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

void __swiftcall NSDecimal.init(floatLiteral:)(NSDecimal *__return_ptr retstr, Swift::Double floatLiteral)
{
  MEMORY[0x24BDD02D8](retstr, floatLiteral);
}

void __swiftcall NSDecimal._bridgeToObjectiveC()(NSDecimalNumber *__return_ptr retstr)
{
  MEMORY[0x24BDD02E8](retstr);
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return MEMORY[0x24BEE79A0]();
}

Swift::Void __swiftcall UnsafeMutablePointer.deallocate()()
{
  MEMORY[0x24BEE1BE0]();
}

uint64_t UnsafeMutablePointer.deinitialize(count:)()
{
  return MEMORY[0x24BEE1C00]();
}

uint64_t static UnsafeMutablePointer.allocate(capacity:)()
{
  return MEMORY[0x24BEE1C20]();
}

uint64_t Optional.debugDescription.getter()
{
  return MEMORY[0x24BEE1C58]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

Swift::String __swiftcall Substring.uppercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEE1D60]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return MEMORY[0x24BDD0548]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x24BDD0568]();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return MEMORY[0x24BDD0638]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t ArraySlice.init<A>(_:)()
{
  return MEMORY[0x24BEE2168]();
}

uint64_t SetAlgebra<>.init(arrayLiteral:)()
{
  return MEMORY[0x24BEE2278]();
}

uint64_t SetAlgebra.isDisjoint(with:)()
{
  return MEMORY[0x24BEE2280]();
}

uint64_t SetAlgebra.isSuperset(of:)()
{
  return MEMORY[0x24BEE2288]();
}

uint64_t SetAlgebra.subtracting(_:)()
{
  return MEMORY[0x24BEE2290]();
}

uint64_t SetAlgebra.isEmpty.getter()
{
  return MEMORY[0x24BEE2298]();
}

uint64_t SetAlgebra.isSubset(of:)()
{
  return MEMORY[0x24BEE22A0]();
}

uint64_t SetAlgebra.subtract(_:)()
{
  return MEMORY[0x24BEE22A8]();
}

uint64_t SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22B0]();
}

uint64_t _expectEnd<A>(of:is:)()
{
  return MEMORY[0x24BEE2378]();
}

uint64_t _hashValue<A>(for:)()
{
  return MEMORY[0x24BEE2380]();
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t KeyValuePairs.init(dictionaryLiteral:)()
{
  return MEMORY[0x24BEE2768]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t _ArrayProtocol.filter(_:)()
{
  return MEMORY[0x24BEE28C0]();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2950](a1);
}

uint64_t ContiguousArray.append(_:)()
{
  return MEMORY[0x24BEE29C0]();
}

uint64_t ContiguousArray.init()()
{
  return MEMORY[0x24BEE2A00]();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t _arrayForceCast<A, B>(_:)()
{
  return MEMORY[0x24BEE2BD8]();
}

uint64_t IndexingIterator.next()()
{
  return MEMORY[0x24BEE2BF8]();
}

uint64_t dispatch thunk of static FixedWidthInteger.bitWidth.getter()
{
  return MEMORY[0x24BEE2D18]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

{
  return MEMORY[0x24BEE2F48]();
}

uint64_t _dictionaryUpCast<A, B, C, D>(_:)()
{
  return MEMORY[0x24BEE2F60]();
}

uint64_t EnumeratedSequence.makeIterator()()
{
  return MEMORY[0x24BEE2F90]();
}

uint64_t EnumeratedSequence.Iterator.next()()
{
  return MEMORY[0x24BEE2F98]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t _arrayConditionalCast<A, B>(_:)()
{
  return MEMORY[0x24BEE3280]();
}

uint64_t _convertToAnyHashable<A>(_:)()
{
  return MEMORY[0x24BEE3288]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x24BEE3290](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t withCheckedContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x24BEE7040]();
}

uint64_t type metadata accessor for FloatingPointRoundingRule()
{
  return MEMORY[0x24BEE38F0]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x24BEE3938]();
}

{
  return MEMORY[0x24BEE3940]();
}

Swift::Void __swiftcall DefaultStringInterpolation.appendLiteral(_:)(Swift::String a1)
{
  MEMORY[0x24BEE3948](a1._countAndFlagsBits, a1._object);
}

uint64_t DefaultStringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return MEMORY[0x24BEE3950]();
}

uint64_t _allocateUninitializedArray<A>(_:)()
{
  return MEMORY[0x24BEE3A18]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t == infix<A>(_:_:)()
{
  return MEMORY[0x24BEE3BB8]();
}

uint64_t _convertInOutToPointerArgument<A>(_:)()
{
  return MEMORY[0x24BEE3D30]();
}

uint64_t zip<A, B>(_:_:)()
{
  return MEMORY[0x24BEE3E18]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t Hasher.combine<A>(_:)()
{
  return MEMORY[0x24BEE42F0]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t OptionSet<>.insert(_:)()
{
  return MEMORY[0x24BEE4A20]();
}

uint64_t OptionSet<>.remove(_:)()
{
  return MEMORY[0x24BEE4A28]();
}

uint64_t OptionSet<>.update(with:)()
{
  return MEMORY[0x24BEE4A30]();
}

uint64_t OptionSet<>.contains(_:)()
{
  return MEMORY[0x24BEE4A38]();
}

uint64_t OptionSet.intersection(_:)()
{
  return MEMORY[0x24BEE4A40]();
}

uint64_t OptionSet.symmetricDifference(_:)()
{
  return MEMORY[0x24BEE4A48]();
}

uint64_t OptionSet.union(_:)()
{
  return MEMORY[0x24BEE4A50]();
}

uint64_t OptionSet<>.formIntersection(_:)()
{
  return MEMORY[0x24BEE4A58]();
}

uint64_t OptionSet<>.formSymmetricDifference(_:)()
{
  return MEMORY[0x24BEE4A60]();
}

uint64_t OptionSet<>.formUnion(_:)()
{
  return MEMORY[0x24BEE4A68]();
}

uint64_t OptionSet<>.init()()
{
  return MEMORY[0x24BEE4A70]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x24BEE4A98]();
}

uint64_t INIntentSlotValueTransformToContactValue()
{
  return MEMORY[0x24BDD9940]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_reportUnimplementedInitializerInFile()
{
  return MEMORY[0x24BEE4B40]();
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x24BEDD080](object, key);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x24BEDD3C0](object, key, value, policy);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x24BEE4C50]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_dynamicCastUnknownClass()
{
  return MEMORY[0x24BEE4C88]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getFunctionReplacement()
{
  return MEMORY[0x24BEE4D48]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x24BEE4ED0]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

