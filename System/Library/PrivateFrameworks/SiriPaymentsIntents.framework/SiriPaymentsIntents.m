uint64_t one-time initialization function for payments()
{
  uint64_t v1;

  v1 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v1, static Logger.payments);
  __swift_project_value_buffer(v1, (uint64_t)static Logger.payments);
  LogConst.subsystem.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  LogConst.Category.siriPayments.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

uint64_t __swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v5;

  v5 = a2;
  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v2 = swift_slowAlloc();
    *a2 = v2;
    return v2;
  }
  return (uint64_t)v5;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
    return *(_QWORD *)a2;
  return v3;
}

__int128 *LogConst.subsystem.unsafeMutableAddressor()
{
  if (one-time initialization token for subsystem != -1)
    swift_once();
  return &static LogConst.subsystem;
}

__int128 *LogConst.Category.siriPayments.unsafeMutableAddressor()
{
  if (one-time initialization token for siriPayments != -1)
    swift_once();
  return &static LogConst.Category.siriPayments;
}

uint64_t Logger.payments.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for payments != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)static Logger.payments);
}

uint64_t static Logger.payments.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = Logger.payments.unsafeMutableAddressor();
  v1 = type metadata accessor for Logger();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t static Logger.logForCrash(_:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE **v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint32_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  NSObject *v51;
  int v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint32_t v59;
  uint64_t v60;
  uint64_t v61;

  v34 = a1;
  v35 = a2;
  v60 = 0;
  v61 = 0;
  v29 = 0;
  v33 = type metadata accessor for Logger();
  v32 = *(_QWORD *)(v33 - 8);
  v30 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (char *)v20 - v30;
  v31 = (char *)v20 - v30;
  v60 = MEMORY[0x24BDAC7A8](v34);
  v61 = v3;
  v4 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v2, v4, v33);
  swift_bridgeObjectRetain();
  v41 = 32;
  v42 = 7;
  v5 = swift_allocObject();
  v6 = v35;
  v43 = v5;
  *(_QWORD *)(v5 + 16) = v34;
  *(_QWORD *)(v5 + 24) = v6;
  v51 = Logger.logObject.getter();
  v52 = static os_log_type_t.error.getter();
  v38 = &v58;
  v58 = 12;
  v36 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v37 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v39 = v59;
  v40 = 17;
  v45 = swift_allocObject();
  *(_BYTE *)(v45 + 16) = 32;
  v46 = swift_allocObject();
  *(_BYTE *)(v46 + 16) = 8;
  v7 = swift_allocObject();
  v8 = v43;
  v44 = v7;
  *(_QWORD *)(v7 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(_QWORD *)(v7 + 24) = v8;
  v9 = swift_allocObject();
  v10 = v44;
  v48 = v9;
  *(_QWORD *)(v9 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v9 + 24) = v10;
  v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v47 = _allocateUninitializedArray<A>(_:)();
  v49 = v11;
  swift_retain();
  v12 = v45;
  v13 = v49;
  *v49 = partial apply for closure #1 in OSLogArguments.append(_:);
  v13[1] = v12;
  swift_retain();
  v14 = v46;
  v15 = v49;
  v49[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v15[3] = v14;
  swift_retain();
  v16 = v48;
  v17 = v49;
  v49[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v17[5] = v16;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v51, (os_log_type_t)v52))
  {
    v18 = v29;
    v22 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v23 = createStorage<A>(capacity:type:)(0);
    v24 = createStorage<A>(capacity:type:)(1);
    v25 = &v57;
    v57 = v22;
    v26 = &v56;
    v56 = v23;
    v27 = &v55;
    v55 = v24;
    serialize(_:at:)(2, &v57);
    serialize(_:at:)(1, v25);
    v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v54 = v45;
    closure #1 in osLogInternal(_:log:type:)(&v53, (uint64_t)v25, (uint64_t)v26, (uint64_t)v27);
    v28 = v18;
    if (v18)
    {
      __break(1u);
    }
    else
    {
      v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v54 = v46;
      closure #1 in osLogInternal(_:log:type:)(&v53, (uint64_t)&v57, (uint64_t)&v56, (uint64_t)&v55);
      v20[1] = 0;
      v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v54 = v48;
      closure #1 in osLogInternal(_:log:type:)(&v53, (uint64_t)&v57, (uint64_t)&v56, (uint64_t)&v55);
      _os_log_impl(&dword_24701B000, v51, (os_log_type_t)v52, "Fatal error: %s", v22, v39);
      destroyStorage<A>(_:count:)(v23, 0, v21);
      destroyStorage<A>(_:count:)(v24, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v22, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v33);
  swift_bridgeObjectRetain();
  return v34;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #1 in static Logger.logForCrash(_:)()
{
  swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for subsystem()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.payments", 0x17uLL, 1);
  result = v1._countAndFlagsBits;
  static LogConst.subsystem = (__int128)v1;
  return result;
}

uint64_t one-time initialization function for siriPayments()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SiriPayments", 0xCuLL, 1);
  result = v1._countAndFlagsBits;
  static LogConst.Category.siriPayments = (__int128)v1;
  return result;
}

uint64_t sub_24701E434()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in static Logger.logForCrash(_:)()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  implicit closure #1 in static Logger.logForCrash(_:)();
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _finalizeUninitializedArray<A>(_:)()
{
  type metadata accessor for Array();
  Array._endMutation()();
}

id protocol witness for SiriKitPaymentsIntentResponse.paymentRecord.getter in conformance INRequestPaymentIntentResponse()
{
  return @nonobjc INRequestPaymentIntentResponse.paymentRecord.getter();
}

id @nonobjc INRequestPaymentIntentResponse.paymentRecord.getter()
{
  void *v0;
  id v1;
  id v3;

  v1 = v0;
  v3 = objc_msgSend(v0, sel_paymentRecord);

  return v3;
}

uint64_t variable initialization expression of PaymentsFlow.restrictionGuards()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = 0;
  v6 = type metadata accessor for UnlockDevicePolicy();
  v4 = *(_QWORD *)(v6 - 8);
  v3 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v5 = (char *)&v2 - v3;
  v9 = type metadata accessor for CommonFlowGuard();
  v8 = _allocateUninitializedArray<A>(_:)();
  v7 = v0;
  static UnlockDevicePolicy.requiringDeviceUnlock.getter();
  static CommonFlowGuard.ensuringDeviceIsAuthenticated(using:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v5, v6);
  static CommonFlowGuard.disallowInSharingMode.getter();
  result = v8;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t protocol witness for static DisambiguationSnippetProviding.makeDisambiguationSnippetPhone(disambiguationItems:deviceIsLocked:imageSize:) in conformance SiriKitDisambiguationSnippetFactory()
{
  return static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetPhone(disambiguationItems:deviceIsLocked:imageSize:)();
}

uint64_t protocol witness for static DisambiguationSnippetProviding.makeDisambiguationSnippetForWatch(disambiguationItems:textToSpeechIsEnabled:) in conformance SiriKitDisambiguationSnippetFactory()
{
  return static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForWatch(disambiguationItems:textToSpeechIsEnabled:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance INSiriAuthorizationStatus()
{
  lazy protocol witness table accessor for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance INSiriAuthorizationStatus()
{
  lazy protocol witness table accessor for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance INSiriAuthorizationStatus()
{
  lazy protocol witness table accessor for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for SetAlgebra.init() in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance NSJSONWritingOptions()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance NSJSONWritingOptions()
{
  return SetAlgebra.isSubset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance NSJSONWritingOptions()
{
  return SetAlgebra.isDisjoint(with:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance NSJSONWritingOptions()
{
  return SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance NSJSONWritingOptions()
{
  return SetAlgebra.isEmpty.getter() & 1;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance NSJSONWritingOptions()
{
  return SetAlgebra.init<A>(_:)();
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance NSJSONWritingOptions()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t protocol witness for SetAlgebra.init() in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formSymmetricDifference(_:)();
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance INBalanceType(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  INSiriAuthorizationStatus.init(rawValue:)();
  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = v2 & 1;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance INBalanceType(_QWORD *a1@<X8>)
{
  uint64_t v1;

  INBalanceType.rawValue.getter();
  *a1 = v1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance INBalanceType()
{
  lazy protocol witness table accessor for type INBalanceType and conformance INBalanceType();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance INPersonHandleType()
{
  lazy protocol witness table accessor for type INPersonHandleType and conformance INPersonHandleType();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.init() in conformance NSPropertyListMutabilityOptions()
{
  lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance NSPropertyListMutabilityOptions()
{
  lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance NSPropertyListMutabilityOptions()
{
  lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance NSPropertyListMutabilityOptions()
{
  lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance NSPropertyListMutabilityOptions()
{
  lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance NSPropertyListMutabilityOptions()
{
  lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance NSPropertyListMutabilityOptions()
{
  lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance NSPropertyListMutabilityOptions()
{
  lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance NSPropertyListMutabilityOptions()
{
  lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance NSPropertyListMutabilityOptions()
{
  lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance NSPropertyListMutabilityOptions()
{
  lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance INSiriAuthorizationStatus()
{
  lazy protocol witness table accessor for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  return SetAlgebra<>.init(arrayLiteral:)();
}

NSJSONWritingOptions protocol witness for OptionSet.init(rawValue:) in conformance NSJSONWritingOptions@<X0>(Swift::UInt *a1@<X0>, NSJSONWritingOptions *a2@<X8>)
{
  NSJSONWritingOptions result;

  result = NSJSONWritingOptions.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  return SetAlgebra<>.init(arrayLiteral:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSPropertyListMutabilityOptions()
{
  lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSPropertyListMutabilityOptions()
{
  lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
  return SetAlgebra<>.init(arrayLiteral:)();
}

NSJSONWritingOptions protocol witness for RawRepresentable.init(rawValue:) in conformance NSJSONWritingOptions@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X8>)
{
  NSJSONWritingOptions result;

  result = NSJSONWritingOptions.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

NSJSONWritingOptions protocol witness for RawRepresentable.rawValue.getter in conformance NSJSONWritingOptions@<X0>(NSJSONWritingOptions *a1@<X8>)
{
  Swift::UInt *v1;
  NSJSONWritingOptions result;

  result = NSJSONWritingOptions.init(rawValue:)(*v1);
  *a1 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    v0 = MEMORY[0x249572C98](MEMORY[0x24BEE4540], MEMORY[0x24BEE44F0]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    v0 = MEMORY[0x249572C98](MEMORY[0x24BEE4518], MEMORY[0x24BEE44F0]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    v0 = MEMORY[0x249572C98](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    v0 = MEMORY[0x249572C98](MEMORY[0x24BEE17C8], MEMORY[0x24BEE1768]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return v0;
  }
  return v2;
}

uint64_t createStorage<A>(capacity:type:)(uint64_t a1)
{
  if (a1)
    return static UnsafeMutablePointer.allocate(capacity:)();
  else
    return 0;
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t destroyStorage<A>(_:count:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = result;
  if (result)
  {
    UnsafeMutablePointer.deinitialize(count:)();
    return MEMORY[0x2495725CC](v3, a3);
  }
  return result;
}

Swift::Void __swiftcall Array._endMutation()()
{
  _QWORD *v0;

  *v0 = *v0;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

_QWORD *closure #1 in OSLogArguments.append(_:)(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v8;

  v4 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, a3);
  v8 = *a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  result = a1;
  *a1 = v8 + 8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[4];
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  v14 = specialized _StringGuts._deconstructUTF8<A>(scratch:)((uint64_t)&v17, 0, 0, 1, a1, a2);
  v15 = v3;
  v16 = v4;
  v11 = v17;
  if (v14)
  {
    v12[3] = swift_getObjectType();
    v12[0] = v14;
    v6 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, v6);
      *a3 = v6 + 32;
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  }
  else
  {
    v13[3] = MEMORY[0x24BEE2520];
    v13[0] = a1;
    v13[1] = a2;
    v7 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v13, v7);
      *a3 = v7 + 32;
    }
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
  }
  return v11;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t result, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  char v14;
  int64_t v15;
  int64_t v16;
  _QWORD *v17;
  _QWORD v21[4];
  char v22;
  char v23;
  uint64_t v24;

  v17 = (_QWORD *)result;
  v24 = a6;
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (a2)
      {
        if (!a3)
          __break(1u);
        v16 = a3 - (_QWORD)a2;
      }
      else
      {
        v16 = 0;
      }
      v15 = (a6 & 0xF00000000000000uLL) >> 56;
      if (v15 < v16)
      {
        if (a2)
        {
          v21[0] = a5;
          v21[1] = a6 & (-(uint64_t)bswap64(0xFFuLL) - 1);
          specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(v21, v15, a2);
          UnsafeMutableRawBufferPointer.subscript.setter();
          *v17 = a2;
          v11 = 0;
          v12 = v15;
          v13 = 1;
          v14 = 0;
LABEL_26:
          v21[2] = v11;
          v21[3] = v12;
          v22 = v13 & 1;
          v23 = v14 & 1;
          return (uint64_t)v11;
        }
        goto LABEL_28;
      }
    }
LABEL_13:
    v6 = _StringGuts._allocateForDeconstruct()(a5, a6);
    *v17 = v7;
    v11 = v6;
    v12 = v8;
    v13 = 0;
    v14 = 1;
    goto LABEL_26;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0xFFFFFFFFFFFFFFE0)
    {
      v10 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
      goto LABEL_21;
    }
    __break(1u);
  }
  result = _StringObject.sharedUTF8.getter();
  if (!result)
    goto LABEL_29;
  v10 = result;
LABEL_21:
  *v17 = v10;
  if (a6 < 0)
  {
    v9 = 0;
LABEL_25:
    v11 = (_QWORD *)v9;
    v12 = a5 & 0xFFFFFFFFFFFFLL;
    v13 = 0;
    v14 = 0;
    goto LABEL_26;
  }
  if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0)
  {
    swift_unknownObjectRetain();
    v9 = a6 & 0xFFFFFFFFFFFFFFFLL;
    goto LABEL_25;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(const void *a1, size_t a2, void *__dst)
{
  memcpy(__dst, a1, a2);
  return __dst;
}

_QWORD *_StringGuts._allocateForDeconstruct()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v6 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v4 = v6[2];
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, 0);
  Array._endMutation()();
  swift_retain();
  v5 = specialized Array.count.getter((uint64_t)v6);
  swift_bridgeObjectRelease();
  result = (_QWORD *)v5;
  if (!__OFSUB__(v5, 1))
    return v6;
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  char v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v8[3];

  v8[2] = a2;
  if ((a2 & 0x1000000000000000) != 0)
  {
    v7 = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v7 = (a2 & 0xF00000000000000uLL) >> 56;
  }
  else
  {
    v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
    return (_QWORD *)specialized ContiguousArray.init()();
  v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v7, 0);
  swift_retain();
  swift_release();
  result = (_QWORD *)_StringGuts.copyUTF8(into:)();
  v6 = result;
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = v8;
    v8[0] = 0;
    v8[1] = 0xE000000000000000;
    outlined destroy of String.UTF8View();
    if (v6 == (_QWORD *)v7)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v4;
  if ((result & 1) == 0)
  {
    v2 = specialized Array.count.getter(*v3);
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 + 1, 1, *v3);
    *v3 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;

  if (*(_QWORD *)(*(_QWORD *)v1 + 24) >> 1 < result + 1)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*(_QWORD *)(*(_QWORD *)v1 + 24) >> 1 != 0, result + 1, 1, *v2);
    *v2 = result;
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + 1;
  v4 = *v2;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v4 + 16) = v5;
  swift_release();
  v6 = *v2;
  swift_retain();
  *(_BYTE *)(v6 + 32 + a1) = a2;
  return swift_release();
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return specialized Array._getCount()(a1);
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  size_t v4;
  _QWORD *v6;
  uint64_t v7;

  if (a2 < a1)
    v7 = a1;
  else
    v7 = a2;
  if (v7)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v6 = (_QWORD *)swift_allocObject();
    if ((_swift_stdlib_has_malloc_size() & 1) != 0)
    {
      v4 = (size_t)v6 + _swift_stdlib_malloc_size(v6);
      swift_retain();
      v6[2] = a1;
      v6[3] = 2 * (v4 - (_QWORD)(v6 + 4));
    }
    else
    {
      swift_retain();
      v6[2] = a1;
      v6[3] = 2 * v7;
    }
    swift_release();
    return v6;
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
    swift_retain();
    return (_QWORD *)v3;
  }
}

uint64_t specialized ContiguousArray.init()()
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  swift_retain();
  return v1;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t result;
  char *v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v16;

  swift_retain();
  result = swift_retain();
  v16 = *(_QWORD *)(a4 + 24) >> 1;
  if ((a3 & 1) != 0)
  {
    if (v16 < a2)
    {
      if ((unsigned __int128)(v16 * (__int128)2) >> 64 != (2 * v16) >> 63)
      {
        __break(1u);
        return result;
      }
      if (2 * v16 < a2)
        v11 = a2;
      else
        v11 = 2 * v16;
    }
    else
    {
      v11 = *(_QWORD *)(a4 + 24) >> 1;
    }
  }
  else
  {
    v11 = a2;
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v11 < v10)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v11;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v8 = (_QWORD *)swift_allocObject();
    if ((_swift_stdlib_has_malloc_size() & 1) != 0)
    {
      v6 = (size_t)v8 + _swift_stdlib_malloc_size(v8);
      swift_retain();
      v8[2] = v10;
      v8[3] = 2 * (v6 - (_QWORD)(v8 + 4));
    }
    else
    {
      swift_retain();
      v8[2] = v10;
      v8[3] = 2 * v9;
    }
    swift_release();
    v7 = (char *)v8;
  }
  else
  {
    v5 = (char *)MEMORY[0x24BEE4AF8];
    swift_retain();
    v7 = v5;
  }
  if ((a1 & 1) != 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v10, v7 + 32);
    *(_QWORD *)(a4 + 16) = 0;
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_retain();
    swift_release();
    specialized UnsafeMutablePointer.initialize(from:count:)((const void *)(a4 + 32), v10, v7 + 32);
    swift_unknownObjectRelease();
  }
  return (uint64_t)v7;
}

uint64_t specialized Array._getCount()(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(const void *a1, size_t a2, void *__dst)
{
  return memcpy(__dst, a1, a2);
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, size_t a2, char *a3)
{
  if (a3 < result || a3 >= &result[a2] || a3 != result)
    return (char *)memmove(a3, result, a2);
  return result;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t sub_247020488()
{
  return swift_deallocObject();
}

_BYTE **partial apply for closure #1 in OSLogArguments.append(_:)(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_2470204B8()
{
  return swift_deallocObject();
}

uint64_t sub_2470204E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(void (**)(void))(v0 + 16));
}

uint64_t sub_247020528()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *partial apply for closure #1 in OSLogArguments.append(_:)(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  if (*a1 < 0)
  {
    v2 = MEMORY[0x249572C80]((char *)a1 + (int)*a1, -(*a1 >> 32), 0);
    *a1 = v2;
    return v2;
  }
  return v4;
}

ValueMetadata *type metadata accessor for Logger()
{
  return &type metadata for Logger;
}

ValueMetadata *type metadata accessor for LogConst()
{
  return &type metadata for LogConst;
}

ValueMetadata *type metadata accessor for LogConst.Category()
{
  return &type metadata for LogConst.Category;
}

uint64_t type metadata accessor for INAccountType()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for INAccountType;
  if (!lazy cache variable for type metadata for INAccountType)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for INAccountType);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for INSiriAuthorizationStatus()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for INSiriAuthorizationStatus;
  if (!lazy cache variable for type metadata for INSiriAuthorizationStatus)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for INSiriAuthorizationStatus);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for NSPropertyListMutabilityOptions()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for NSPropertyListMutabilityOptions;
  if (!lazy cache variable for type metadata for NSPropertyListMutabilityOptions)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for NSPropertyListMutabilityOptions);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for INPersonHandleType()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for INPersonHandleType;
  if (!lazy cache variable for type metadata for INPersonHandleType)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for INPersonHandleType);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for INBalanceType()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for INBalanceType;
  if (!lazy cache variable for type metadata for INBalanceType)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for INBalanceType);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for NSJSONReadingOptions()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for NSJSONReadingOptions;
  if (!lazy cache variable for type metadata for NSJSONReadingOptions)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for NSJSONReadingOptions);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for NSJSONWritingOptions()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for NSJSONWritingOptions;
  if (!lazy cache variable for type metadata for NSJSONWritingOptions)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for NSJSONWritingOptions);
      return v1;
    }
  }
  return v4;
}

unint64_t base witness table accessor for RawRepresentable in NSJSONWritingOptions()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

unint64_t lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions)
  {
    v0 = type metadata accessor for NSJSONWritingOptions();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for NSJSONWritingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions)
  {
    v0 = type metadata accessor for NSJSONWritingOptions();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for NSJSONWritingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions)
  {
    v0 = type metadata accessor for NSJSONWritingOptions();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for NSJSONWritingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions)
  {
    v0 = type metadata accessor for NSJSONWritingOptions();
    v1 = MEMORY[0x249572C98]("ũk\n", v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions)
  {
    v0 = type metadata accessor for NSJSONWritingOptions();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for NSJSONWritingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for SetAlgebra in NSJSONWritingOptions()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

unint64_t base witness table accessor for RawRepresentable in NSJSONReadingOptions()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions)
  {
    v0 = type metadata accessor for NSJSONReadingOptions();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for NSJSONReadingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions)
  {
    v0 = type metadata accessor for NSJSONReadingOptions();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for NSJSONReadingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions)
  {
    v0 = type metadata accessor for NSJSONReadingOptions();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for NSJSONReadingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions)
  {
    v0 = type metadata accessor for NSJSONReadingOptions();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for NSJSONReadingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions)
  {
    v0 = type metadata accessor for NSJSONReadingOptions();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for NSJSONReadingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for SetAlgebra in NSJSONReadingOptions()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t base witness table accessor for RawRepresentable in NSPropertyListMutabilityOptions()
{
  return lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
}

unint64_t lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions;
  if (!lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions)
  {
    v0 = type metadata accessor for NSPropertyListMutabilityOptions();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for NSPropertyListMutabilityOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions;
  if (!lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions)
  {
    v0 = type metadata accessor for NSPropertyListMutabilityOptions();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for NSPropertyListMutabilityOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions;
  if (!lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions)
  {
    v0 = type metadata accessor for NSPropertyListMutabilityOptions();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for NSPropertyListMutabilityOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions;
  if (!lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions)
  {
    v0 = type metadata accessor for NSPropertyListMutabilityOptions();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for NSPropertyListMutabilityOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions;
  if (!lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions)
  {
    v0 = type metadata accessor for NSPropertyListMutabilityOptions();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for NSPropertyListMutabilityOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for SetAlgebra in NSPropertyListMutabilityOptions()
{
  return lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
}

unint64_t base witness table accessor for Equatable in INSiriAuthorizationStatus()
{
  return lazy protocol witness table accessor for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus();
}

unint64_t lazy protocol witness table accessor for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus;
  if (!lazy protocol witness table cache variable for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus)
  {
    v0 = type metadata accessor for INSiriAuthorizationStatus();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for INSiriAuthorizationStatus, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus;
  if (!lazy protocol witness table cache variable for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus)
  {
    v0 = type metadata accessor for INSiriAuthorizationStatus();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for INSiriAuthorizationStatus, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus;
  if (!lazy protocol witness table cache variable for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus)
  {
    v0 = type metadata accessor for INSiriAuthorizationStatus();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for INSiriAuthorizationStatus, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Equatable in NSPropertyListMutabilityOptions()
{
  return lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in NSPropertyListMutabilityOptions()
{
  return lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
}

unint64_t base witness table accessor for Equatable in NSJSONReadingOptions()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in NSJSONReadingOptions()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t base witness table accessor for Equatable in NSJSONWritingOptions()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in NSJSONWritingOptions()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

unint64_t lazy protocol witness table accessor for type UInt and conformance UInt()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    v0 = MEMORY[0x249572C98](MEMORY[0x24BEE1EC8], MEMORY[0x24BEE1E88]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type INBalanceType and conformance INBalanceType()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type INBalanceType and conformance INBalanceType;
  if (!lazy protocol witness table cache variable for type INBalanceType and conformance INBalanceType)
  {
    v0 = type metadata accessor for INBalanceType();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for INBalanceType, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type INBalanceType and conformance INBalanceType);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type INBalanceType and conformance INBalanceType;
  if (!lazy protocol witness table cache variable for type INBalanceType and conformance INBalanceType)
  {
    v0 = type metadata accessor for INBalanceType();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for INBalanceType, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type INBalanceType and conformance INBalanceType);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type INPersonHandleType and conformance INPersonHandleType()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type INPersonHandleType and conformance INPersonHandleType;
  if (!lazy protocol witness table cache variable for type INPersonHandleType and conformance INPersonHandleType)
  {
    v0 = type metadata accessor for INPersonHandleType();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for INPersonHandleType, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type INPersonHandleType and conformance INPersonHandleType);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type INPersonHandleType and conformance INPersonHandleType;
  if (!lazy protocol witness table cache variable for type INPersonHandleType and conformance INPersonHandleType)
  {
    v0 = type metadata accessor for INPersonHandleType();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for INPersonHandleType, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type INPersonHandleType and conformance INPersonHandleType);
    return v1;
  }
  return v3;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if ((*(_DWORD *)(*(_QWORD *)(v2 - 8) + 80) & 0x20000) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t _swift_stdlib_has_malloc_size()
{
  return 1;
}

size_t _swift_stdlib_malloc_size(const void *a1)
{
  return malloc_size(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of String.UTF8View()
{
  swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsContinueInAppStrategy.__allocating_init()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[5];
  _QWORD v29[5];
  _BYTE v30[40];
  uint64_t v31;
  _BYTE v32[40];
  char v33;
  char v34;
  char v35;
  uint64_t v36[5];
  _QWORD v37[6];

  v31 = 0;
  v17 = 0;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v16 = (char *)&v6 - v7;
  v12 = type metadata accessor for Globals();
  v8 = v36;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v36);
  v9 = &v35;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v10 = &v34;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v11 = &v33;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  v25 = v37;
  v37[3] = v12;
  v37[4] = &protocol witness table for Globals;
  v37[0] = v0;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  v15 = v32;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v32);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v14 = CATWrapper.__allocating_init(options:globals:)();
  v13 = type metadata accessor for INSearchForAccountsIntent();
  v1 = type metadata accessor for INSearchForAccountsIntentResponse();
  v2 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v1);
  v24 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v15, v14, v2);
  v31 = v24;
  v23 = v30;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v30);
  type metadata accessor for SearchForAccountsCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v18 = CATWrapper.__allocating_init(options:globals:)();
  NSJSONWritingOptions.init(rawValue:)(v18);
  v19 = v29;
  v29[3] = &type metadata for CommonLabelsProvider;
  v29[4] = &protocol witness table for CommonLabelsProvider;
  v3 = type metadata accessor for SiriKitContactResolver();
  v20 = v28;
  v28[3] = v3;
  v28[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v28);
  SiriKitContactResolver.init()();
  swift_retain();
  v21 = &v27;
  v27 = v24;
  v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  v26 = SearchForAccountsContinueInAppStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v23, v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v21, v22, v4);
  swift_retain();
  v37[5] = v26;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  swift_release();
  return v26;
}

uint64_t default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = type metadata accessor for SiriKitContactResolver();
  a1[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(a1);
  return SiriKitContactResolver.init()();
}

uint64_t default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)()
{
  return static Device.current.getter();
}

uint64_t default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)()
{
  return static AceService.currentAsync.getter();
}

uint64_t default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)()
{
  return static OutputPublisherFactory.makeOutputPublisherAsync()();
}

uint64_t outlined init with copy of GlobalsProviding(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t default argument 0 of CATWrapper.init(options:globals:)()
{
  return static CATOption.defaultMode.getter();
}

uint64_t default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a1;
  v7 = a2;
  v6 = 0;
  v4 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v5 = (char *)&v3 - v4;
  type metadata accessor for SearchForAccountsCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  return CATWrapper.__allocating_init(options:globals:)();
}

unint64_t type metadata accessor for INSearchForAccountsIntent()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for INSearchForAccountsIntent;
  if (!lazy cache variable for type metadata for INSearchForAccountsIntent)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INSearchForAccountsIntent);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for INSearchForAccountsIntentResponse()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for INSearchForAccountsIntentResponse;
  if (!lazy cache variable for type metadata for INSearchForAccountsIntentResponse)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INSearchForAccountsIntentResponse);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;

  v3 = result;
  if ((*(_DWORD *)(*(_QWORD *)(result[3] - 8) + 80) & 0x20000) != 0)
  {
    v1 = swift_allocBox();
    result = v2;
    *v3 = v1;
  }
  return result;
}

uint64_t SearchForAccountsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[27] = v2;
  v3[26] = a2;
  v3[25] = a1;
  v3[17] = v3;
  v3[18] = 0;
  v3[19] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[28] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[29] = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  v3[30] = v4;
  v3[31] = *(_QWORD *)(v4 - 8);
  v3[32] = swift_task_alloc();
  v5 = type metadata accessor for Logger();
  v3[33] = v5;
  v3[34] = *(_QWORD *)(v5 - 8);
  v3[35] = swift_task_alloc();
  v3[18] = a2;
  v3[19] = v2;
  return swift_task_switch();
}

uint64_t SearchForAccountsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *buf;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint32_t v21;
  os_log_type_t v22;
  NSObject *v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 280);
  v19 = *(_QWORD *)(v0 + 272);
  v20 = *(_QWORD *)(v0 + 264);
  *(_QWORD *)(v0 + 136) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v1, v2, v20);
  v23 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 160) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v21 = *(_DWORD *)(v0 + 320);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v24 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v23, v22))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v15 = createStorage<A>(capacity:type:)(0);
    v16 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v18 + 168) = buf;
    *(_QWORD *)(v18 + 176) = v15;
    *(_QWORD *)(v18 + 184) = v16;
    serialize(_:at:)(0, (_BYTE **)(v18 + 168));
    serialize(_:at:)(0, (_BYTE **)(v18 + 168));
    *(_QWORD *)(v18 + 192) = v24;
    v17 = (_QWORD *)swift_task_alloc();
    v17[2] = v18 + 168;
    v17[3] = v18 + 176;
    v17[4] = v18 + 184;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v23, v22, "#SearchForAccountsContinueInAppStrategy makeContinueInAppResponse", buf, v21);
    destroyStorage<A>(_:count:)(v15, 0, v13);
    destroyStorage<A>(_:count:)(v16, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v18 + 280);
  v6 = *(_QWORD *)(v18 + 272);
  v8 = *(_QWORD *)(v18 + 264);
  v11 = *(_QWORD *)(v18 + 232);
  v9 = *(_QWORD *)(v18 + 216);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_retain();
  *(_QWORD *)(v18 + 288) = *(_QWORD *)(v9 + 16);
  swift_retain();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  v10 = (id)IntentResolutionRecord.intentResponse.getter();
  objc_msgSend(v10, sel_code);

  INRequestPaymentIntentResponseCode.speakable.getter();
  v3 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v11, 0, 1);
  IntentResolutionRecord.app.getter();
  v12 = App.sirikitApp.getter();
  *(_QWORD *)(v18 + 296) = v12;
  swift_release();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v18 + 304) = v4;
  *v4 = *(_QWORD *)(v18 + 136);
  v4[1] = SearchForAccountsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:);
  return SearchForAccountsCATs.errorWithCode(errorCode:app:)(*(_QWORD *)(v18 + 256), *(_QWORD *)(v18 + 232), v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(v2 + 136) = *v1;
  v2 += 136;
  v5 = v2 - 120;
  *(_QWORD *)(v2 + 176) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 216);
    swift_release();
    outlined destroy of SpeakableString?(v4);
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = v0[32];
  v7 = v0[31];
  v8 = v0[30];
  v10 = v0[28];
  v5 = v0[27];
  v6 = (uint64_t *)v0[25];
  v0[17] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, (uint64_t)(v0 + 2));
  swift_release();
  v4 = v0[5];
  v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v10, 1);
  v0[12] = 0;
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  v0[16] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v6[3] = type metadata accessor for AceOutput();
  v6[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v6);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 12));
  outlined destroy of NLContextUpdate?(v10);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[17] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 232);
  *(_QWORD *)(v0 + 136) = v0;
  swift_release();
  outlined destroy of SpeakableString?(v2);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 136) + 8))();
}

uint64_t default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return specialized static Array._allocateUninitialized(_:)(0);
}

uint64_t default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return 0;
}

uint64_t default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return specialized static Array._allocateUninitialized(_:)(0);
}

uint64_t SearchForAccountsContinueInAppStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_allocObject();
  return SearchForAccountsContinueInAppStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(a1, a2, a3, a4, a5, a6, a7);
}

unint64_t lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>;
  if (!lazy protocol witness table cache variable for type PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsErrorTemplateProvider<A, B>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>);
    return v1;
  }
  return v3;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  if (*a1 < 0)
  {
    v2 = MEMORY[0x249572C8C](255, (char *)a1 + (int)*a1, -(*a1 >> 32), 0);
    *a1 = v2;
    return v2;
  }
  return v4;
}

uint64_t SearchForAccountsContinueInAppStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[40];
  _BYTE v28[40];
  _BYTE v29[40];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v25 = a1;
  v24 = a2;
  v23 = a3;
  v22 = a4;
  v19 = a5;
  v21 = a6;
  v17 = a7;
  v35 = 0;
  v34 = 0;
  v33 = 0;
  v32 = 0;
  v31 = 0;
  v30 = 0;
  v36 = a6;
  v20 = *(_QWORD *)(a6 - 8);
  v13 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = (uint64_t)&v13 - v13;
  v34 = MEMORY[0x24BDAC7A8](a1);
  v33 = v8;
  v32 = v9;
  v31 = v10;
  v30 = v11;
  v35 = v7;
  v18 = v29;
  outlined init with copy of GlobalsProviding(v34, (uint64_t)v29);
  swift_retain();
  v14 = v28;
  outlined init with copy of GlobalsProviding(v23, (uint64_t)v28);
  v15 = v27;
  outlined init with copy of GlobalsProviding(v22, (uint64_t)v27);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v16, v19, v21);
  v26 = BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v18, v24, (uint64_t)v14, (uint64_t)v15, v16, v21, v17);
  swift_retain();
  v35 = v26;
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  __swift_destroy_boxed_opaque_existential_0(v22);
  __swift_destroy_boxed_opaque_existential_0(v23);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v25);
  swift_release();
  return v26;
}

uint64_t SearchForAccountsContinueInAppStrategy.deinit()
{
  return BaseStrategy.deinit();
}

uint64_t SearchForAccountsContinueInAppStrategy.__deallocating_deinit()
{
  SearchForAccountsContinueInAppStrategy.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SearchForAccountsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:)(a1, a2);
}

_QWORD *protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t outlined destroy of SpeakableString?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for SpeakableString();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(*(_QWORD *)(a2 - 8) + 80);
  if ((v2 & 0x20000) != 0)
    return (_QWORD *)(*result + ((v2 + 16) & ~(unint64_t)v2));
  return result;
}

uint64_t outlined destroy of FlowActivity?(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t outlined destroy of NLContextUpdate?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for NLContextUpdate();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

unint64_t lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A];
  if (!lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t type metadata accessor for SearchForAccountsContinueInAppStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SearchForAccountsContinueInAppStrategy;
  if (!type metadata singleton initialization cache for SearchForAccountsContinueInAppStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for SearchForAccountsContinueInAppStrategy()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

unint64_t base witness table accessor for ContinueInAppFlowStrategy in SearchForAccountsContinueInAppStrategy()
{
  return lazy protocol witness table accessor for type SearchForAccountsContinueInAppStrategy and conformance SearchForAccountsContinueInAppStrategy();
}

unint64_t lazy protocol witness table accessor for type SearchForAccountsContinueInAppStrategy and conformance SearchForAccountsContinueInAppStrategy()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SearchForAccountsContinueInAppStrategy and conformance SearchForAccountsContinueInAppStrategy;
  if (!lazy protocol witness table cache variable for type SearchForAccountsContinueInAppStrategy and conformance SearchForAccountsContinueInAppStrategy)
  {
    v0 = type metadata accessor for SearchForAccountsContinueInAppStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for SearchForAccountsContinueInAppStrategy, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsContinueInAppStrategy and conformance SearchForAccountsContinueInAppStrategy);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SearchForAccountsContinueInAppStrategy and conformance SearchForAccountsContinueInAppStrategy;
  if (!lazy protocol witness table cache variable for type SearchForAccountsContinueInAppStrategy and conformance SearchForAccountsContinueInAppStrategy)
  {
    v0 = type metadata accessor for SearchForAccountsContinueInAppStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for SearchForAccountsContinueInAppStrategy, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsContinueInAppStrategy and conformance SearchForAccountsContinueInAppStrategy);
    return v1;
  }
  return v3;
}

uint64_t ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v9[40];
  _BYTE v10[40];
  _BYTE v11[40];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD __b[15];

  memset(__b, 0, sizeof(__b));
  v14 = a1;
  v13 = a2;
  v12 = a3;
  outlined init with copy of GlobalsProviding(a1, (uint64_t)v11);
  outlined init with take of CommonLabelsProviding(v11, __b);
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v10);
  outlined init with take of CommonLabelsProviding(v10, &__b[5]);
  outlined init with copy of GlobalsProviding(a3, (uint64_t)v9);
  outlined init with take of CommonLabelsProviding(v9, &__b[10]);
  outlined init with copy of ConfirmationViewBuilder(__b, a4);
  __swift_destroy_boxed_opaque_existential_0(a3);
  __swift_destroy_boxed_opaque_existential_0(a2);
  __swift_destroy_boxed_opaque_existential_0(a1);
  return outlined destroy of ConfirmationViewBuilder((uint64_t)__b);
}

void *outlined init with take of CommonLabelsProviding(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

_QWORD *outlined init with copy of ConfirmationViewBuilder(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[3];
  a2[3] = v2;
  a2[4] = a1[4];
  (**(void (***)(void))(v2 - 8))();
  v3 = a1[8];
  a2[8] = v3;
  a2[9] = a1[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a2 + 5), (uint64_t)(a1 + 5));
  v4 = a1[13];
  a2[13] = v4;
  a2[14] = a1[14];
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a2 + 10), (uint64_t)(a1 + 10));
  return a2;
}

uint64_t outlined destroy of ConfirmationViewBuilder(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  __swift_destroy_boxed_opaque_existential_0(a1 + 40);
  __swift_destroy_boxed_opaque_existential_0(a1 + 80);
  return a1;
}

BOOL static ConfirmationViewBuilder.WalletAppLaunchAction.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t ConfirmationViewBuilder.WalletAppLaunchAction.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t ConfirmationViewBuilder.WalletAppLaunchAction.hashValue.getter()
{
  lazy protocol witness table accessor for type ConfirmationViewBuilder.WalletAppLaunchAction and conformance ConfirmationViewBuilder.WalletAppLaunchAction();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type ConfirmationViewBuilder.WalletAppLaunchAction and conformance ConfirmationViewBuilder.WalletAppLaunchAction()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ConfirmationViewBuilder.WalletAppLaunchAction and conformance ConfirmationViewBuilder.WalletAppLaunchAction;
  if (!lazy protocol witness table cache variable for type ConfirmationViewBuilder.WalletAppLaunchAction and conformance ConfirmationViewBuilder.WalletAppLaunchAction)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for ConfirmationViewBuilder.WalletAppLaunchAction, &type metadata for ConfirmationViewBuilder.WalletAppLaunchAction);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationViewBuilder.WalletAppLaunchAction and conformance ConfirmationViewBuilder.WalletAppLaunchAction);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ConfirmationViewBuilder.WalletAppLaunchAction and conformance ConfirmationViewBuilder.WalletAppLaunchAction;
  if (!lazy protocol witness table cache variable for type ConfirmationViewBuilder.WalletAppLaunchAction and conformance ConfirmationViewBuilder.WalletAppLaunchAction)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for ConfirmationViewBuilder.WalletAppLaunchAction, &type metadata for ConfirmationViewBuilder.WalletAppLaunchAction);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationViewBuilder.WalletAppLaunchAction and conformance ConfirmationViewBuilder.WalletAppLaunchAction);
    return v0;
  }
  return v2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ConfirmationViewBuilder.WalletAppLaunchAction(_BYTE *a1, _BYTE *a2)
{
  return static ConfirmationViewBuilder.WalletAppLaunchAction.__derived_enum_equals(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ConfirmationViewBuilder.WalletAppLaunchAction()
{
  return ConfirmationViewBuilder.WalletAppLaunchAction.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConfirmationViewBuilder.WalletAppLaunchAction()
{
  return ConfirmationViewBuilder.WalletAppLaunchAction.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConfirmationViewBuilder.WalletAppLaunchAction(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

id static ConfirmationViewBuilder.makeWalletAppLaunchButton(launchAction:buttonText:deviceState:)(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  unsigned int v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char *v33;

  v28 = a1;
  v20 = a2;
  v21 = a3;
  v22 = a4;
  v33 = 0;
  v32 = 0;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v23 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v28);
  v24 = (char *)&v14 - v23;
  v25 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v27 = (char *)&v14 - v25;
  v33 = (char *)&v14 - v25;
  v26 = 1;
  v32 = v6 & 1;
  v30 = v7;
  v31 = v8;
  v29 = v9;
  v10 = type metadata accessor for URL();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)(v10 - 8) + 56))(v27, v26);
  if ((v28 & 1) != 0)
  {
    v12 = String.APPLE_CARD_INFO_LAUNCH_URL.unsafeMutableAddressor();
    v16 = *(_QWORD *)v12;
    v17 = *((_QWORD *)v12 + 1);
  }
  else
  {
    v11 = String.APPLE_CARD_APPLY_LAUNCH_URL.unsafeMutableAddressor();
    v18 = *(_QWORD *)v11;
    v19 = *((_QWORD *)v11 + 1);
  }
  swift_bridgeObjectRetain();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  outlined assign with take of URL?(v24, v27);
  v14 = static AppUtil.walletApp.getter();
  outlined init with copy of URL?(v27, v24);
  v15 = static ConfirmationViewBuilder.makeAppLaunchButton(for:buttonText:punchoutURL:deviceState:)(v14, v20, v21, v24, v22);
  outlined destroy of URL?((uint64_t)v24);
  swift_release();
  outlined destroy of URL?((uint64_t)v27);
  return v15;
}

void *outlined assign with take of URL?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(const void *, uint64_t, uint64_t);

  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a2, 1))
  {
    if (v9(a1, 1, v7))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a2, a1, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
    }
  }
  else if (v9(a1, 1, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a2, v7);
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a2, a1, v7);
  }
  return a2;
}

void *outlined init with copy of URL?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

id static ConfirmationViewBuilder.makeAppLaunchButton(for:buttonText:punchoutURL:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _BOOL8 v12;
  void *v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  uint64_t v18;
  id v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  const void *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v46 = a1;
  v41 = a2;
  v38 = a3;
  v39 = a4;
  v40 = a5;
  v53 = 0;
  v51 = 0;
  v52 = 0;
  v50 = 0;
  v49 = 0;
  v48 = 0;
  v47 = 0;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v36 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v37 = (char *)&v18 - v36;
  v42 = type metadata accessor for Locale();
  v43 = *(_QWORD *)(v42 - 8);
  v44 = (*(_QWORD *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v46);
  v45 = (char *)&v18 - v44;
  v53 = v6;
  v51 = v7;
  v52 = v8;
  v50 = v9;
  v49 = v10;
  swift_retain();
  if (v46)
  {
    v35 = v46;
    v34 = v46;
    v47 = v46;
    v32 = v40[3];
    v31 = v40[4];
    __swift_project_boxed_opaque_existential_1(v40, v32);
    dispatch thunk of DeviceState.siriLocale.getter();
    v33 = static AppUtil.buildPunchout(for:locale:)();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
    v48 = v33;
    swift_release();
  }
  else
  {
    type metadata accessor for SAUIAppPunchOut();
    v48 = SAUIAppPunchOut.__allocating_init()();
  }
  v28 = v48;
  v11 = v48;
  outlined init with copy of URL?(v39, v37);
  v29 = type metadata accessor for URL();
  v30 = *(_QWORD *)(v29 - 8);
  v12 = (*(unsigned int (**)(char *, uint64_t))(v30 + 48))(v37, 1) == 1;
  if (v12)
  {
    v27 = 0;
  }
  else
  {
    URL._bridgeToObjectiveC()((NSURL *)v12);
    v26 = v13;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v37, v29);
    v27 = v26;
  }
  v19 = v27;
  objc_msgSend(v28, sel_setPunchOutUri_);

  type metadata accessor for SAUIButton();
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  v23 = _allocateUninitializedArray<A>(_:)();
  v20 = v14;
  v21 = v48;
  v15 = v48;
  v16 = v23;
  *v20 = v21;
  _finalizeUninitializedArray<A>(_:)();
  v24 = v16;
  swift_bridgeObjectRetain();
  v25 = SAUIButton.init(commands:text:)(v24, v41, v38);

  return v25;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

unint64_t type metadata accessor for SAUIAppPunchOut()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SAUIAppPunchOut;
  if (!lazy cache variable for type metadata for SAUIAppPunchOut)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAUIAppPunchOut);
    return ObjCClassMetadata;
  }
  return v2;
}

id static ConfirmationViewBuilder.makeWebPunchoutButton(for:buttonText:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v11 = a1;
  v10[1] = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v12 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = (char *)v10 - v12;
  v21 = MEMORY[0x24BDAC7A8](v11);
  v22 = v5;
  v19 = v6;
  v20 = v7;
  v18 = v8;
  URL.init(string:)();
  v17 = static ConfirmationViewBuilder.makeAppLaunchButton(for:buttonText:punchoutURL:deviceState:)(0, v13, v14, v16, v15);
  outlined destroy of URL?((uint64_t)v16);
  return v17;
}

id SAUIAppPunchOut.__allocating_init()()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc SAUIAppPunchOut.init()();
}

unint64_t type metadata accessor for SAUIButton()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SAUIButton;
  if (!lazy cache variable for type metadata for SAUIButton)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAUIButton);
    return ObjCClassMetadata;
  }
  return v2;
}

id static ConfirmationViewBuilder.makeWatchAppLaunchButton(for:buttonText:intent:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  _QWORD *v8;
  id v9;
  id v11;
  _QWORD *v12;
  Class isa;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;

  type metadata accessor for SASTButtonItem();
  v17 = SAUIAppPunchOut.__allocating_init()();
  v18 = App.appIdentifier.getter();
  v19 = v4;
  if (v4)
  {
    type metadata accessor for SASTCommandTemplateAction();
    swift_getObjectType();
    v5 = a4;
    swift_bridgeObjectRetain();
    v20 = SASTCommandTemplateAction.init(intent:appId:)(a4, v18, v19);
    v6 = v20;
    objc_msgSend(v17, sel_setAction_, v20);
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
  }
  type metadata accessor for SAUIDecoratedText();
  v22 = SAUIAppPunchOut.__allocating_init()();
  swift_bridgeObjectRetain();
  v11 = (id)MEMORY[0x24957220C](a2, a3);
  swift_bridgeObjectRelease();
  objc_msgSend(v22, sel_setText_, v11);

  v7 = v22;
  objc_msgSend(v17, sel_setDecoratedLabel_, v22);

  type metadata accessor for SASTItemGroup();
  v21 = SAUIAppPunchOut.__allocating_init()();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
  _allocateUninitializedArray<A>(_:)();
  v12 = v8;
  v9 = v17;
  *v12 = v17;
  _finalizeUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v21, sel_setTemplateItems_, isa);

  return v21;
}

unint64_t type metadata accessor for SASTButtonItem()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SASTButtonItem;
  if (!lazy cache variable for type metadata for SASTButtonItem)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SASTButtonItem);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SAUIDecoratedText()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SAUIDecoratedText;
  if (!lazy cache variable for type metadata for SAUIDecoratedText)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAUIDecoratedText);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SASTItemGroup()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SASTItemGroup;
  if (!lazy cache variable for type metadata for SASTItemGroup)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SASTItemGroup);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SASTCommandTemplateAction()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SASTCommandTemplateAction;
  if (!lazy cache variable for type metadata for SASTCommandTemplateAction)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SASTCommandTemplateAction);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t ConfirmationViewBuilder.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;

  v9[21] = v8;
  v9[20] = a8;
  v9[19] = a7;
  v9[18] = a6;
  v9[17] = a5;
  v9[16] = a4;
  v9[15] = a3;
  v9[14] = a2;
  v9[13] = a1;
  v9[7] = v9;
  v9[8] = 0;
  v9[9] = 0;
  v9[10] = 0;
  v9[11] = 0;
  v9[12] = 0;
  v9[8] = a1;
  v9[9] = a2;
  v9[10] = a3;
  v9[11] = a4;
  v9[12] = v8;
  return swift_task_switch();
}

uint64_t ConfirmationViewBuilder.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  char v5;

  v1 = v0[21];
  v0[7] = v0;
  outlined init with copy of GlobalsProviding(v1 + 40, (uint64_t)(v0 + 2));
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  v5 = dispatch thunk of DeviceState.isWatch.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  v2 = (_QWORD *)swift_task_alloc();
  if ((v5 & 1) != 0)
  {
    v4[22] = v2;
    *v2 = v4[7];
    v2[1] = ConfirmationViewBuilder.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:);
    return ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)(v4[13], v4[14], v4[15], v4[16], v4[17], v4[18], v4[19], v4[20]);
  }
  else
  {
    v4[23] = v2;
    *v2 = v4[7];
    v2[1] = ConfirmationViewBuilder.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:);
    return ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:)(v4[13], v4[14], v4[15], v4[16], v4[17], v4[18], v4[19], v4[20]);
  }
}

_QWORD *ConfirmationViewBuilder.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 56) = *v2;
  v7 = (_QWORD *)(v3 + 56);
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v4);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 56) = *v2;
  v7 = (_QWORD *)(v3 + 56);
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v4);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

uint64_t ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v9[117] = v8;
  v9[116] = a8;
  v9[115] = a7;
  v9[114] = a6;
  v9[113] = a5;
  v9[112] = a4;
  v9[111] = a3;
  v9[110] = a2;
  v9[109] = a1;
  v9[58] = v9;
  v9[59] = 0;
  v9[60] = 0;
  v9[61] = 0;
  v9[62] = 0;
  v9[63] = 0;
  v9[65] = 0;
  v9[66] = 0;
  v9[67] = 0;
  v9[68] = 0;
  v9[69] = 0;
  v9[75] = 0;
  v9[76] = 0;
  v9[77] = 0;
  v9[79] = 0;
  v9[44] = 0;
  v9[45] = 0;
  v9[83] = 0;
  v9[84] = 0;
  v9[46] = 0;
  v9[47] = 0;
  v9[86] = 0;
  v9[87] = 0;
  v9[48] = 0;
  v9[49] = 0;
  v9[89] = 0;
  v9[90] = 0;
  v9[91] = 0;
  v9[92] = 0;
  v9[93] = 0;
  v9[50] = 0;
  v9[51] = 0;
  v9[96] = 0;
  v9[97] = 0;
  v9[52] = 0;
  v9[53] = 0;
  v9[99] = 0;
  v9[100] = 0;
  v9[54] = 0;
  v9[55] = 0;
  v9[102] = 0;
  v9[103] = 0;
  v9[56] = 0;
  v9[57] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v9[118] = swift_task_alloc();
  v9[119] = swift_task_alloc();
  v9[120] = swift_task_alloc();
  v9[121] = swift_task_alloc();
  v9[122] = swift_task_alloc();
  v9[123] = swift_task_alloc();
  v9[124] = swift_task_alloc();
  v9[125] = swift_task_alloc();
  v10 = type metadata accessor for TemplatingResult();
  v9[126] = v10;
  v9[127] = *(_QWORD *)(v10 - 8);
  v9[128] = swift_task_alloc();
  v9[129] = swift_task_alloc();
  v9[130] = swift_task_alloc();
  v9[131] = swift_task_alloc();
  v9[132] = swift_task_alloc();
  v9[133] = swift_task_alloc();
  v9[134] = swift_task_alloc();
  v9[135] = swift_task_alloc();
  v11 = type metadata accessor for Logger();
  v9[136] = v11;
  v9[137] = *(_QWORD *)(v11 - 8);
  v9[138] = swift_task_alloc();
  v9[139] = swift_task_alloc();
  v9[140] = swift_task_alloc();
  v9[141] = swift_task_alloc();
  v9[142] = swift_task_alloc();
  v9[143] = swift_task_alloc();
  v9[144] = swift_task_alloc();
  v9[145] = swift_task_alloc();
  v9[146] = swift_task_alloc();
  v9[147] = swift_task_alloc();
  v9[148] = swift_task_alloc();
  v9[59] = a1;
  v9[60] = a2;
  v9[61] = a3;
  v9[62] = a4;
  v9[63] = v8;
  return swift_task_switch();
}

uint64_t ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t);
  _QWORD *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD, uint64_t);
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint32_t v40;
  os_log_type_t v41;
  NSObject *log;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v64;
  void *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  Class v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  id v83;
  Class isa;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  uint8_t *buf;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v101;
  NSObject *oslog;
  uint64_t v103;

  v1 = *(_QWORD *)(v0 + 1184);
  v97 = *(_QWORD *)(v0 + 1096);
  v98 = *(_QWORD *)(v0 + 1088);
  *(_QWORD *)(v0 + 464) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  v99 = *(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 16);
  *(_QWORD *)(v0 + 1192) = v99;
  v99(v1, v2, v98);
  oslog = Logger.logObject.getter();
  v101 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 512) = 2;
  *(_QWORD *)(v0 + 1200) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 1208) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 1216) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 1728);
  *(_QWORD *)(v0 + 1224) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v103 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v101))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v91 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v93 = createStorage<A>(capacity:type:)(0);
    v94 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v96 + 840) = buf;
    *(_QWORD *)(v96 + 848) = v93;
    *(_QWORD *)(v96 + 856) = v94;
    serialize(_:at:)(0, (_BYTE **)(v96 + 840));
    serialize(_:at:)(0, (_BYTE **)(v96 + 840));
    *(_QWORD *)(v96 + 864) = v103;
    v95 = (_QWORD *)swift_task_alloc();
    v95[2] = v96 + 840;
    v95[3] = v96 + 848;
    v95[4] = v96 + 856;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, oslog, v101, "#ConfirmationViewBuilder makePaymentConfirmationWatchViews", buf, size);
    destroyStorage<A>(_:count:)(v93, 0, v91);
    destroyStorage<A>(_:count:)(v94, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v88 = *(_QWORD *)(v96 + 1184);
  v87 = *(_QWORD *)(v96 + 1096);
  v89 = *(_QWORD *)(v96 + 1088);

  v90 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
  *(_QWORD *)(v96 + 1232) = v90;
  v90(v88, v89);
  if (App.isFirstParty.getter())
  {
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v96 + 1240) = v3;
    *v3 = *(_QWORD *)(v96 + 464);
    v3[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    return ConfirmationViewBuilder.makeWatchFirstPartyView<A, B>(app:intent:response:confirmLabelProvider:)(*(_QWORD *)(v96 + 872), *(_QWORD *)(v96 + 880), *(_QWORD *)(v96 + 888), *(_QWORD *)(v96 + 896), *(_QWORD *)(v96 + 904), *(_QWORD *)(v96 + 912), *(_QWORD *)(v96 + 920));
  }
  type metadata accessor for SASTItemGroup();
  v83 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v96 + 1248) = v83;
  *(_QWORD *)(v96 + 520) = v83;
  *(_QWORD *)(v96 + 1256) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
  _allocateUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v83, sel_setTemplateItems_, isa);

  v85 = App.appIdentifier.getter();
  v86 = v5;
  if (v5)
  {
    v81 = *(id *)(v96 + 880);
    *(_QWORD *)(v96 + 448) = v85;
    *(_QWORD *)(v96 + 456) = v5;
    type metadata accessor for SASTApplicationBannerItem();
    v6 = v81;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v96 + 832) = SASTApplicationBannerItem.init(intent:appId:)(v81, v85, v86);
    v82 = objc_msgSend(v83, sel_templateItems);
    if (v82)
    {
      v79 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v80 = v79;
    }
    else
    {
      v80 = 0;
    }
    if (!v80)
      return _assertionFailure(_:_:file:line:flags:)();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SASTTemplateItem]);
    Array.append(_:)();
    v78 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v83, sel_setTemplateItems_);

    swift_bridgeObjectRelease();
  }
  type metadata accessor for SASTColumnDataListItem();
  v73 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v96 + 1264) = v73;
  *(_QWORD *)(v96 + 528) = v73;
  v74 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v96 + 1272) = v74;
  *(_QWORD *)(v96 + 536) = v74;
  v75 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v96 + 1280) = v75;
  *(_QWORD *)(v96 + 544) = v75;
  v76 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v96 + 1288) = v76;
  *(_QWORD *)(v96 + 552) = v76;
  objc_opt_self();
  v7 = (void *)swift_dynamicCastObjCClass();
  v77 = v7;
  *(_QWORD *)(v96 + 1296) = v7;
  if (v7)
  {
    v8 = v7;
    *(_QWORD *)(v96 + 728) = v77;
    *(_QWORD *)(v96 + 1304) = type metadata accessor for SAUIDecoratedText();
    v71 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v96 + 1312) = v71;
    *(_QWORD *)(v96 + 736) = v71;
    v9 = objc_msgSend(v77, sel_payer);
    v72 = v9;
    if (v9)
    {
      v66 = objc_msgSend(v9, sel_displayName);
      v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v68 = v10;

      v69 = v67;
      v70 = v68;
    }
    else
    {
      v69 = 0;
      v70 = 0;
    }
    if (v70)
    {
      v64 = MEMORY[0x24957220C](v69);
      swift_bridgeObjectRelease();
      v65 = (void *)v64;
    }
    else
    {
      v65 = 0;
    }
    v60 = *(_QWORD *)(v96 + 1000);
    v59 = *(_QWORD *)(v96 + 936);
    objc_msgSend(v71, sel_setText_);

    v11 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v96 + 1320) = v11;
    *(_QWORD *)(v96 + 744) = v11;
    outlined init with copy of GlobalsProviding(v59 + 80, v96 + 176);
    v61 = *(_QWORD *)(v96 + 200);
    v62 = *(_QWORD *)(v96 + 208);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v96 + 176), v61);
    RequestPaymentSlots.rawValue.getter(0);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v12 = type metadata accessor for SpeakableString();
    *(_QWORD *)(v96 + 1328) = v12;
    v13 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
    *(_QWORD *)(v96 + 1336) = v13;
    v13(v60, 0, 1);
    v63 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 + 16) + **(int **)(v62 + 16));
    v14 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v96 + 1344) = v14;
    *v14 = *(_QWORD *)(v96 + 464);
    v14[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    return v63(*(_QWORD *)(v96 + 1080), *(_QWORD *)(v96 + 1000), v61, v62);
  }
  else
  {
    objc_opt_self();
    v15 = (void *)swift_dynamicCastObjCClass();
    v58 = v15;
    *(_QWORD *)(v96 + 1488) = v15;
    if (v15)
    {
      v16 = v15;
      *(_QWORD *)(v96 + 600) = v58;
      *(_QWORD *)(v96 + 1496) = type metadata accessor for SAUIDecoratedText();
      v56 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v96 + 1504) = v56;
      *(_QWORD *)(v96 + 608) = v56;
      v17 = objc_msgSend(v58, sel_payee);
      v57 = v17;
      if (v17)
      {
        v51 = objc_msgSend(v17, sel_displayName);
        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v53 = v18;

        v54 = v52;
        v55 = v53;
      }
      else
      {
        v54 = 0;
        v55 = 0;
      }
      if (v55)
      {
        v49 = MEMORY[0x24957220C](v54);
        swift_bridgeObjectRelease();
        v50 = (void *)v49;
      }
      else
      {
        v50 = 0;
      }
      v45 = *(_QWORD *)(v96 + 968);
      v44 = *(_QWORD *)(v96 + 936);
      objc_msgSend(v56, sel_setText_);

      v19 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v96 + 1512) = v19;
      *(_QWORD *)(v96 + 616) = v19;
      outlined init with copy of GlobalsProviding(v44 + 80, v96 + 16);
      v46 = *(_QWORD *)(v96 + 40);
      v47 = *(_QWORD *)(v96 + 48);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v96 + 16), v46);
      SendPaymentSlots.rawValue.getter(0);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v20 = type metadata accessor for SpeakableString();
      *(_QWORD *)(v96 + 1520) = v20;
      v21 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
      *(_QWORD *)(v96 + 1528) = v21;
      v21(v45, 0, 1);
      v48 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 + 16) + **(int **)(v47 + 16));
      v22 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v96 + 1536) = v22;
      *v22 = *(_QWORD *)(v96 + 464);
      v22[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
      return v48(*(_QWORD *)(v96 + 1048), *(_QWORD *)(v96 + 968), v46, v47);
    }
    else
    {
      v23 = *(_QWORD *)(v96 + 1112);
      v39 = *(_QWORD *)(v96 + 1088);
      v24 = Logger.payments.unsafeMutableAddressor();
      v99(v23, v24, v39);
      log = Logger.logObject.getter();
      v41 = static os_log_type_t.error.getter();
      *(_QWORD *)(v96 + 560) = 2;
      UnsignedInteger<>.init<A>(_:)();
      v40 = *(_DWORD *)(v96 + 1732);
      v43 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(log, v41))
      {
        v35 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v36 = createStorage<A>(capacity:type:)(0);
        v37 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v96 + 568) = v35;
        *(_QWORD *)(v96 + 576) = v36;
        *(_QWORD *)(v96 + 584) = v37;
        serialize(_:at:)(0, (_BYTE **)(v96 + 568));
        serialize(_:at:)(0, (_BYTE **)(v96 + 568));
        *(_QWORD *)(v96 + 592) = v43;
        v38 = (_QWORD *)swift_task_alloc();
        v38[2] = v96 + 568;
        v38[3] = v96 + 576;
        v38[4] = v96 + 584;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_24701B000, log, v41, "#ConfirmationViewBuilder makePaymentConfirmationView (Watch) encountered unexpected intent type", v35, v40);
        destroyStorage<A>(_:count:)(v36, 0, v34);
        destroyStorage<A>(_:count:)(v37, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v35, MEMORY[0x24BEE4260]);
      }
      swift_bridgeObjectRelease();
      v30 = *(_QWORD *)(v96 + 1112);
      v31 = *(_QWORD *)(v96 + 1088);

      v90(v30, v31);
      *(_QWORD *)(v96 + 336) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v96 + 344) = v25;
      v26 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v26);
      swift_bridgeObjectRelease();
      swift_getObjectType();
      DefaultStringInterpolation.appendInterpolation(_:)();
      v27 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v27);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      v33 = String.init(stringInterpolation:)();
      v32 = v28;
      lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
      swift_allocError();
      *(_QWORD *)v29 = v33;
      *(_QWORD *)(v29 + 8) = v32;
      *(_QWORD *)(v29 + 16) = 0;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0;
      *(_QWORD *)(v29 + 40) = 0;
      *(_BYTE *)(v29 + 48) = 4;
      swift_willThrow();

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)())(*(_QWORD *)(v96 + 464) + 8))();
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 464) = *v1;
  *(_QWORD *)(v2 + 1352) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 984));
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  _QWORD *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  _QWORD *v37;
  id v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  void *v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint32_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t, uint64_t);
  uint32_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  NSObject *v105;
  os_log_type_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t);
  id v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  uint64_t v131;
  void (*v132)(uint64_t, uint64_t, uint64_t);
  uint32_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  os_log_t log;
  os_log_type_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(uint64_t, uint64_t);
  id v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint8_t *buf;
  uint64_t v156;
  uint64_t v157;
  id v158;
  id v159;
  uint64_t v160;
  void (*v161)(uint64_t, uint64_t, uint64_t);
  id v162;
  uint32_t size;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  NSObject *oslog;
  os_log_type_t v171;
  Class isa;
  Class v173;
  _QWORD *v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  id v187;
  id v188;
  id v189;
  id v190;
  uint8_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t (*v194)(uint64_t, uint64_t, uint64_t);
  uint64_t v195;
  uint8_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t (*v199)(uint64_t, uint64_t, uint64_t);
  uint64_t v200;
  uint8_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t (*v204)(uint64_t, uint64_t, uint64_t);
  uint64_t v205;
  uint8_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t (*v209)(uint64_t, uint64_t, uint64_t);
  uint64_t v210;

  v187 = (id)v0[165];
  v189 = (id)v0[164];
  v186 = v0[135];
  v184 = v0[127];
  v185 = v0[126];
  v0[58] = v0;
  v1 = TemplatingResult.resultSectionsAsString.getter();
  v188 = (id)MEMORY[0x24957220C](v1);
  v2 = *(void (**)(uint64_t, uint64_t))(v184 + 8);
  v0[170] = v2;
  v2(v186, v185);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 22));
  objc_msgSend(v187, sel_setText_, v188);

  v190 = objc_msgSend(v189, sel_text);
  if (v190)
  {
    v179 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v180 = v3;

    v181 = v179;
    v182 = v180;
  }
  else
  {
    v181 = 0;
    v182 = 0;
  }
  v178 = Optional<A>.isNilOrEmpty.getter(v181, v182);
  swift_bridgeObjectRelease();
  if ((v178 & 1) != 0)
  {
    v177 = _allocateUninitializedArray<A>(_:)();
  }
  else
  {
    v175 = *(id *)(v183 + 1312);
    v176 = _allocateUninitializedArray<A>(_:)();
    v174 = v4;
    v5 = v175;
    *v174 = v175;
    _finalizeUninitializedArray<A>(_:)();
    v177 = v176;
  }
  if (v177)
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v173 = isa;
  }
  else
  {
    v173 = 0;
  }
  v159 = *(id *)(v183 + 1320);
  v162 = *(id *)(v183 + 1312);
  v158 = *(id *)(v183 + 1264);
  v161 = *(void (**)(uint64_t, uint64_t, uint64_t))(v183 + 1192);
  v6 = *(_QWORD *)(v183 + 1176);
  v160 = *(_QWORD *)(v183 + 1088);
  objc_msgSend(v158, sel_setDecoratedRows_);

  v7 = v159;
  objc_msgSend(v158, sel_setTitle_, v159);

  v8 = Logger.payments.unsafeMutableAddressor();
  v161(v6, v8, v160);
  v9 = v162;
  v164 = swift_allocObject();
  *(_QWORD *)(v164 + 16) = v162;
  oslog = Logger.logObject.getter();
  v171 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v183 + 752) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v183 + 1756);
  v166 = swift_allocObject();
  *(_BYTE *)(v166 + 16) = 32;
  v167 = swift_allocObject();
  *(_BYTE *)(v167 + 16) = 8;
  v165 = swift_allocObject();
  *(_QWORD *)(v165 + 16) = partial apply for implicit closure #5 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  *(_QWORD *)(v165 + 24) = v164;
  v168 = swift_allocObject();
  *(_QWORD *)(v168 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v168 + 24) = v165;
  _allocateUninitializedArray<A>(_:)();
  v169 = v10;
  swift_retain();
  *v169 = partial apply for closure #1 in OSLogArguments.append(_:);
  v169[1] = v166;
  swift_retain();
  v169[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v169[3] = v167;
  swift_retain();
  v169[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v169[5] = v168;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v171))
  {
    v11 = *(_QWORD *)(v183 + 1352);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v154 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v156 = createStorage<A>(capacity:type:)(0);
    v157 = createStorage<A>(capacity:type:)(1);
    v206 = buf;
    v207 = v156;
    v208 = v157;
    serialize(_:at:)(2, &v206);
    serialize(_:at:)(1, &v206);
    v209 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v210 = v166;
    result = closure #1 in osLogInternal(_:log:type:)(&v209, (uint64_t)&v206, (uint64_t)&v207, (uint64_t)&v208);
    if (v11)
      return result;
    v209 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v210 = v167;
    closure #1 in osLogInternal(_:log:type:)(&v209, (uint64_t)&v206, (uint64_t)&v207, (uint64_t)&v208);
    v209 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v210 = v168;
    closure #1 in osLogInternal(_:log:type:)(&v209, (uint64_t)&v206, (uint64_t)&v207, (uint64_t)&v208);
    _os_log_impl(&dword_24701B000, oslog, v171, "Placing payer into request person label %s", buf, size);
    destroyStorage<A>(_:count:)(v156, 0, v154);
    destroyStorage<A>(_:count:)(v157, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    v153 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v153 = *(_QWORD *)(v183 + 1352);
  }
  v151 = *(id *)(v183 + 1296);
  v150 = *(void (**)(uint64_t, uint64_t))(v183 + 1232);
  v148 = *(_QWORD *)(v183 + 1176);
  v149 = *(_QWORD *)(v183 + 1088);

  v150(v148, v149);
  v152 = objc_msgSend(v151, sel_currencyAmount);
  if (v152)
  {
    v142 = INCurrencyAmount.formattedString.getter();
    v143 = v13;

    v144 = Optional<A>.emptyToNil.getter(v142, v143);
    v145 = v14;
    swift_bridgeObjectRelease();
    v146 = v144;
    v147 = v145;
  }
  else
  {
    v146 = 0;
    v147 = 0;
  }
  *(_QWORD *)(v183 + 1368) = v147;
  if (!v147)
  {
    v18 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(v183 + 928) + 8))(*(_QWORD *)(v183 + 912));
    v130 = v18;
    if (v18 && (v113 = objc_msgSend(v18, sel_feeAmount), v130, v113))
    {
      v107 = INCurrencyAmount.formattedString.getter();
      v108 = v21;

      v109 = Optional<A>.emptyToNil.getter(v107, v108);
      v110 = v22;
      swift_bridgeObjectRelease();
      v111 = v109;
      v112 = v110;
    }
    else
    {
      v111 = 0;
      v112 = 0;
    }
    *(_QWORD *)(v183 + 1408) = v112;
    if (v112)
    {
      v97 = *(void (**)(uint64_t, uint64_t, uint64_t))(v183 + 1192);
      v23 = *(_QWORD *)(v183 + 1160);
      v96 = *(_QWORD *)(v183 + 1088);
      *(_QWORD *)(v183 + 416) = v111;
      *(_QWORD *)(v183 + 424) = v112;
      v24 = Logger.payments.unsafeMutableAddressor();
      v97(v23, v24, v96);
      swift_bridgeObjectRetain();
      v99 = swift_allocObject();
      *(_QWORD *)(v99 + 16) = v111;
      *(_QWORD *)(v99 + 24) = v112;
      v105 = Logger.logObject.getter();
      v106 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v183 + 784) = 12;
      UnsignedInteger<>.init<A>(_:)();
      v98 = *(_DWORD *)(v183 + 1764);
      v101 = swift_allocObject();
      *(_BYTE *)(v101 + 16) = 32;
      v102 = swift_allocObject();
      *(_BYTE *)(v102 + 16) = 8;
      v100 = swift_allocObject();
      *(_QWORD *)(v100 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
      *(_QWORD *)(v100 + 24) = v99;
      v103 = swift_allocObject();
      *(_QWORD *)(v103 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v103 + 24) = v100;
      _allocateUninitializedArray<A>(_:)();
      v104 = v25;
      swift_retain();
      *v104 = partial apply for closure #1 in OSLogArguments.append(_:);
      v104[1] = v101;
      swift_retain();
      v104[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v104[3] = v102;
      swift_retain();
      v104[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v104[5] = v103;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v105, v106))
      {
        v92 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v91 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v93 = createStorage<A>(capacity:type:)(0);
        v94 = createStorage<A>(capacity:type:)(1);
        v196 = v92;
        v197 = v93;
        v198 = v94;
        serialize(_:at:)(2, &v196);
        serialize(_:at:)(1, &v196);
        v199 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v200 = v101;
        result = closure #1 in osLogInternal(_:log:type:)(&v199, (uint64_t)&v196, (uint64_t)&v197, (uint64_t)&v198);
        if (v153)
          return result;
        v199 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v200 = v102;
        closure #1 in osLogInternal(_:log:type:)(&v199, (uint64_t)&v196, (uint64_t)&v197, (uint64_t)&v198);
        v199 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v200 = v103;
        closure #1 in osLogInternal(_:log:type:)(&v199, (uint64_t)&v196, (uint64_t)&v197, (uint64_t)&v198);
        _os_log_impl(&dword_24701B000, v105, v106, "Placing fee into request fee label %s", v92, v98);
        destroyStorage<A>(_:count:)(v93, 0, v91);
        destroyStorage<A>(_:count:)(v94, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v92, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      v87 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v183 + 1336);
      v86 = *(_QWORD *)(v183 + 1328);
      v81 = *(void (**)(uint64_t, uint64_t))(v183 + 1232);
      v79 = *(_QWORD *)(v183 + 1160);
      v80 = *(_QWORD *)(v183 + 1088);
      v85 = *(_QWORD *)(v183 + 984);
      v84 = *(_QWORD *)(v183 + 936);

      v81(v79, v80);
      v82 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v183 + 1416) = v82;
      *(_QWORD *)(v183 + 792) = v82;
      swift_bridgeObjectRetain();
      v83 = (id)MEMORY[0x24957220C](v111, v112);
      swift_bridgeObjectRelease();
      objc_msgSend(v82, sel_setText_, v83);

      v26 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v183 + 1424) = v26;
      *(_QWORD *)(v183 + 800) = v26;
      outlined init with copy of GlobalsProviding(v84 + 80, v183 + 256);
      v88 = *(_QWORD *)(v183 + 280);
      v89 = *(_QWORD *)(v183 + 288);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v183 + 256), v88);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("feeAmount", 9uLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v87(v85, 0, 1, v86);
      v90 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v89 + 16) + **(int **)(v89 + 16));
      v27 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v183 + 1432) = v27;
      *v27 = *(_QWORD *)(v183 + 464);
      v27[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
      return v90(*(_QWORD *)(v183 + 1064), *(_QWORD *)(v183 + 984), v88, v89);
    }
    v95 = objc_msgSend(*(id *)(v183 + 1296), sel_note);
    if (v95)
    {
      v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v76 = v28;

      v77 = v75;
      v78 = v76;
    }
    else
    {
      v77 = 0;
      v78 = 0;
    }
    v73 = Optional<A>.emptyToNil.getter(v77, v78);
    v74 = v29;
    *(_QWORD *)(v183 + 1448) = v29;
    if (!v29)
    {
      swift_bridgeObjectRelease();
      v56 = *(id *)(v183 + 1312);
      v57 = *(id *)(v183 + 1296);

      v61 = *(id *)(v183 + 1288);
      v60 = *(id *)(v183 + 1280);
      v59 = *(id *)(v183 + 1272);
      v58 = *(void **)(v183 + 1264);
      v33 = v58;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v58, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      v34 = v59;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v59, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      v35 = v60;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v60, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      v36 = v61;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v61, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      v37 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v183 + 1680) = v37;
      *v37 = *(_QWORD *)(v183 + 464);
      v37[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
      return ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(*(_QWORD *)(v183 + 872), *(_QWORD *)(v183 + 880), *(_QWORD *)(v183 + 896));
    }
    v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v183 + 1192);
    v30 = *(_QWORD *)(v183 + 1152);
    v62 = *(_QWORD *)(v183 + 1088);
    *(_QWORD *)(v183 + 400) = v73;
    *(_QWORD *)(v183 + 408) = v29;
    swift_bridgeObjectRelease();
    v31 = Logger.payments.unsafeMutableAddressor();
    v63(v30, v31, v62);
    swift_bridgeObjectRetain();
    v65 = swift_allocObject();
    *(_QWORD *)(v65 + 16) = v73;
    *(_QWORD *)(v65 + 24) = v74;
    v71 = Logger.logObject.getter();
    v72 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v183 + 760) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v64 = *(_DWORD *)(v183 + 1760);
    v67 = swift_allocObject();
    *(_BYTE *)(v67 + 16) = 32;
    v68 = swift_allocObject();
    *(_BYTE *)(v68 + 16) = 8;
    v66 = swift_allocObject();
    *(_QWORD *)(v66 + 16) = partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    *(_QWORD *)(v66 + 24) = v65;
    v69 = swift_allocObject();
    *(_QWORD *)(v69 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v69 + 24) = v66;
    _allocateUninitializedArray<A>(_:)();
    v70 = v32;
    swift_retain();
    *v70 = partial apply for closure #1 in OSLogArguments.append(_:);
    v70[1] = v67;
    swift_retain();
    v70[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v70[3] = v68;
    swift_retain();
    v70[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v70[5] = v69;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v71, v72))
    {
      v53 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v54 = createStorage<A>(capacity:type:)(0);
      v55 = createStorage<A>(capacity:type:)(1);
      v191 = v53;
      v192 = v54;
      v193 = v55;
      serialize(_:at:)(2, &v191);
      serialize(_:at:)(1, &v191);
      v194 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v195 = v67;
      result = closure #1 in osLogInternal(_:log:type:)(&v194, (uint64_t)&v191, (uint64_t)&v192, (uint64_t)&v193);
      if (v153)
        return result;
      v194 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v195 = v68;
      closure #1 in osLogInternal(_:log:type:)(&v194, (uint64_t)&v191, (uint64_t)&v192, (uint64_t)&v193);
      v194 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v195 = v69;
      closure #1 in osLogInternal(_:log:type:)(&v194, (uint64_t)&v191, (uint64_t)&v192, (uint64_t)&v193);
      _os_log_impl(&dword_24701B000, v71, v72, "Placing note into request note label %s", v53, v64);
      destroyStorage<A>(_:count:)(v54, 0, v52);
      destroyStorage<A>(_:count:)(v55, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v53, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v48 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v183 + 1336);
    v47 = *(_QWORD *)(v183 + 1328);
    v42 = *(void (**)(uint64_t, uint64_t))(v183 + 1232);
    v40 = *(_QWORD *)(v183 + 1152);
    v41 = *(_QWORD *)(v183 + 1088);
    v46 = *(_QWORD *)(v183 + 976);
    v45 = *(_QWORD *)(v183 + 936);

    v42(v40, v41);
    v43 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v183 + 1456) = v43;
    *(_QWORD *)(v183 + 768) = v43;
    swift_bridgeObjectRetain();
    v44 = (id)MEMORY[0x24957220C](v73, v74);
    swift_bridgeObjectRelease();
    objc_msgSend(v43, sel_setText_, v44);

    v38 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v183 + 1464) = v38;
    *(_QWORD *)(v183 + 776) = v38;
    outlined init with copy of GlobalsProviding(v45 + 80, v183 + 216);
    v49 = *(_QWORD *)(v183 + 240);
    v50 = *(_QWORD *)(v183 + 248);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v183 + 216), v49);
    RequestPaymentSlots.rawValue.getter(2);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v48(v46, 0, 1, v47);
    v51 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 + 16) + **(int **)(v50 + 16));
    v39 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v183 + 1472) = v39;
    *v39 = *(_QWORD *)(v183 + 464);
    v39[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    return v51(*(_QWORD *)(v183 + 1056), *(_QWORD *)(v183 + 976), v49, v50);
  }
  v132 = *(void (**)(uint64_t, uint64_t, uint64_t))(v183 + 1192);
  v15 = *(_QWORD *)(v183 + 1168);
  v131 = *(_QWORD *)(v183 + 1088);
  *(_QWORD *)(v183 + 432) = v146;
  *(_QWORD *)(v183 + 440) = v147;
  v16 = Logger.payments.unsafeMutableAddressor();
  v132(v15, v16, v131);
  swift_bridgeObjectRetain();
  v134 = swift_allocObject();
  *(_QWORD *)(v134 + 16) = v146;
  *(_QWORD *)(v134 + 24) = v147;
  log = (os_log_t)Logger.logObject.getter();
  v141 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v183 + 808) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v133 = *(_DWORD *)(v183 + 1768);
  v136 = swift_allocObject();
  *(_BYTE *)(v136 + 16) = 32;
  v137 = swift_allocObject();
  *(_BYTE *)(v137 + 16) = 8;
  v135 = swift_allocObject();
  *(_QWORD *)(v135 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(_QWORD *)(v135 + 24) = v134;
  v138 = swift_allocObject();
  *(_QWORD *)(v138 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v138 + 24) = v135;
  _allocateUninitializedArray<A>(_:)();
  v139 = v17;
  swift_retain();
  *v139 = partial apply for closure #1 in OSLogArguments.append(_:);
  v139[1] = v136;
  swift_retain();
  v139[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v139[3] = v137;
  swift_retain();
  v139[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v139[5] = v138;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(log, v141))
  {
    swift_release();
    swift_release();
    swift_release();
LABEL_25:
    v122 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v183 + 1336);
    v121 = *(_QWORD *)(v183 + 1328);
    v116 = *(void (**)(uint64_t, uint64_t))(v183 + 1232);
    v114 = *(_QWORD *)(v183 + 1168);
    v115 = *(_QWORD *)(v183 + 1088);
    v120 = *(_QWORD *)(v183 + 992);
    v119 = *(_QWORD *)(v183 + 936);

    v116(v114, v115);
    v117 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v183 + 1376) = v117;
    *(_QWORD *)(v183 + 816) = v117;
    swift_bridgeObjectRetain();
    v118 = (id)MEMORY[0x24957220C](v146, v147);
    swift_bridgeObjectRelease();
    objc_msgSend(v117, sel_setText_, v118);

    v19 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v183 + 1384) = v19;
    *(_QWORD *)(v183 + 824) = v19;
    outlined init with copy of GlobalsProviding(v119 + 80, v183 + 296);
    v123 = *(_QWORD *)(v183 + 320);
    v124 = *(_QWORD *)(v183 + 328);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v183 + 296), v123);
    RequestPaymentSlots.rawValue.getter(1);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v122(v120, 0, 1, v121);
    v125 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v124 + 16) + **(int **)(v124 + 16));
    v20 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v183 + 1392) = v20;
    *v20 = *(_QWORD *)(v183 + 464);
    v20[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    return v125(*(_QWORD *)(v183 + 1072), *(_QWORD *)(v183 + 992), v123, v124);
  }
  v127 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v126 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
  v128 = createStorage<A>(capacity:type:)(0);
  v129 = createStorage<A>(capacity:type:)(1);
  v201 = v127;
  v202 = v128;
  v203 = v129;
  serialize(_:at:)(2, &v201);
  serialize(_:at:)(1, &v201);
  v204 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v205 = v136;
  result = closure #1 in osLogInternal(_:log:type:)(&v204, (uint64_t)&v201, (uint64_t)&v202, (uint64_t)&v203);
  if (!v153)
  {
    v204 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v205 = v137;
    closure #1 in osLogInternal(_:log:type:)(&v204, (uint64_t)&v201, (uint64_t)&v202, (uint64_t)&v203);
    v204 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v205 = v138;
    closure #1 in osLogInternal(_:log:type:)(&v204, (uint64_t)&v201, (uint64_t)&v202, (uint64_t)&v203);
    _os_log_impl(&dword_24701B000, log, v141, "Placing amount into request amount label %s", v127, v133);
    destroyStorage<A>(_:count:)(v128, 0, v126);
    destroyStorage<A>(_:count:)(v129, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v127, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_25;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 464) = *v1;
  *(_QWORD *)(v2 + 1400) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 976));
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  _QWORD *v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint32_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  NSObject *log;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v77;
  uint8_t *buf;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  os_log_t oslog;
  os_log_type_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t);
  uint64_t v102;
  id v103;
  _QWORD *v104;
  Class isa;
  id v106;
  id v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  uint8_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(uint64_t, uint64_t, uint64_t);
  uint64_t v121;

  v107 = (id)v0[173];
  v108 = (id)v0[172];
  v101 = (void (*)(uint64_t, uint64_t))v0[170];
  v106 = (id)v0[159];
  v102 = v0[134];
  v100 = v0[126];
  v0[58] = v0;
  v1 = TemplatingResult.resultSectionsAsString.getter();
  v103 = (id)MEMORY[0x24957220C](v1);
  v101(v102, v100);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 37));
  objc_msgSend(v107, sel_setText_, v103);

  _allocateUninitializedArray<A>(_:)();
  v104 = v2;
  v3 = v108;
  *v104 = v108;
  _finalizeUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v106, sel_setDecoratedRows_, isa);

  v4 = v107;
  objc_msgSend(v106, sel_setTitle_, v107);

  swift_bridgeObjectRelease();
  v110 = *(_QWORD *)(v109 + 1400);
  v5 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(v109 + 928) + 8))(*(_QWORD *)(v109 + 912));
  v111 = v5;
  if (v5 && (v99 = objc_msgSend(v5, sel_feeAmount), v111, v99))
  {
    v93 = INCurrencyAmount.formattedString.getter();
    v94 = v6;

    v95 = Optional<A>.emptyToNil.getter(v93, v94);
    v96 = v7;
    swift_bridgeObjectRelease();
    v97 = v95;
    v98 = v96;
  }
  else
  {
    v97 = 0;
    v98 = 0;
  }
  *(_QWORD *)(v109 + 1408) = v98;
  if (!v98)
  {
    v81 = objc_msgSend(*(id *)(v109 + 1296), sel_note);
    if (v81)
    {
      v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v62 = v14;

      v63 = v61;
      v64 = v62;
    }
    else
    {
      v63 = 0;
      v64 = 0;
    }
    v59 = Optional<A>.emptyToNil.getter(v63, v64);
    v60 = v15;
    *(_QWORD *)(v109 + 1448) = v15;
    if (!v15)
    {
      swift_bridgeObjectRelease();
      v42 = *(id *)(v109 + 1312);
      v43 = *(id *)(v109 + 1296);

      v47 = *(id *)(v109 + 1288);
      v46 = *(id *)(v109 + 1280);
      v45 = *(id *)(v109 + 1272);
      v44 = *(void **)(v109 + 1264);
      v19 = v44;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v44, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      v20 = v45;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v45, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      v21 = v46;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v46, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      v22 = v47;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v47, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      v23 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v109 + 1680) = v23;
      *v23 = *(_QWORD *)(v109 + 464);
      v23[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
      return ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(*(_QWORD *)(v109 + 872), *(_QWORD *)(v109 + 880), *(_QWORD *)(v109 + 896));
    }
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 1192);
    v16 = *(_QWORD *)(v109 + 1152);
    v48 = *(_QWORD *)(v109 + 1088);
    *(_QWORD *)(v109 + 400) = v59;
    *(_QWORD *)(v109 + 408) = v15;
    swift_bridgeObjectRelease();
    v17 = Logger.payments.unsafeMutableAddressor();
    v49(v16, v17, v48);
    swift_bridgeObjectRetain();
    v51 = swift_allocObject();
    *(_QWORD *)(v51 + 16) = v59;
    *(_QWORD *)(v51 + 24) = v60;
    log = Logger.logObject.getter();
    v58 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v109 + 760) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v50 = *(_DWORD *)(v109 + 1760);
    v53 = swift_allocObject();
    *(_BYTE *)(v53 + 16) = 32;
    v54 = swift_allocObject();
    *(_BYTE *)(v54 + 16) = 8;
    v52 = swift_allocObject();
    *(_QWORD *)(v52 + 16) = partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    *(_QWORD *)(v52 + 24) = v51;
    v55 = swift_allocObject();
    *(_QWORD *)(v55 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v55 + 24) = v52;
    _allocateUninitializedArray<A>(_:)();
    v56 = v18;
    swift_retain();
    *v56 = partial apply for closure #1 in OSLogArguments.append(_:);
    v56[1] = v53;
    swift_retain();
    v56[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v56[3] = v54;
    swift_retain();
    v56[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v56[5] = v55;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v58))
    {
      v39 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v40 = createStorage<A>(capacity:type:)(0);
      v41 = createStorage<A>(capacity:type:)(1);
      v112 = v39;
      v113 = v40;
      v114 = v41;
      serialize(_:at:)(2, &v112);
      serialize(_:at:)(1, &v112);
      v115 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v116 = v53;
      result = closure #1 in osLogInternal(_:log:type:)(&v115, (uint64_t)&v112, (uint64_t)&v113, (uint64_t)&v114);
      if (v110)
        return result;
      v115 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v116 = v54;
      closure #1 in osLogInternal(_:log:type:)(&v115, (uint64_t)&v112, (uint64_t)&v113, (uint64_t)&v114);
      v115 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v116 = v55;
      closure #1 in osLogInternal(_:log:type:)(&v115, (uint64_t)&v112, (uint64_t)&v113, (uint64_t)&v114);
      _os_log_impl(&dword_24701B000, log, v58, "Placing note into request note label %s", v39, v50);
      destroyStorage<A>(_:count:)(v40, 0, v38);
      destroyStorage<A>(_:count:)(v41, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v39, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v34 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v109 + 1336);
    v33 = *(_QWORD *)(v109 + 1328);
    v28 = *(void (**)(uint64_t, uint64_t))(v109 + 1232);
    v26 = *(_QWORD *)(v109 + 1152);
    v27 = *(_QWORD *)(v109 + 1088);
    v32 = *(_QWORD *)(v109 + 976);
    v31 = *(_QWORD *)(v109 + 936);

    v28(v26, v27);
    v29 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v109 + 1456) = v29;
    *(_QWORD *)(v109 + 768) = v29;
    swift_bridgeObjectRetain();
    v30 = (id)MEMORY[0x24957220C](v59, v60);
    swift_bridgeObjectRelease();
    objc_msgSend(v29, sel_setText_, v30);

    v24 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v109 + 1464) = v24;
    *(_QWORD *)(v109 + 776) = v24;
    outlined init with copy of GlobalsProviding(v31 + 80, v109 + 216);
    v35 = *(_QWORD *)(v109 + 240);
    v36 = *(_QWORD *)(v109 + 248);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v109 + 216), v35);
    RequestPaymentSlots.rawValue.getter(2);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v34(v32, 0, 1, v33);
    v37 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 + 16) + **(int **)(v36 + 16));
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v109 + 1472) = v25;
    *v25 = *(_QWORD *)(v109 + 464);
    v25[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    return v37(*(_QWORD *)(v109 + 1056), *(_QWORD *)(v109 + 976), v35, v36);
  }
  v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 1192);
  v8 = *(_QWORD *)(v109 + 1160);
  v82 = *(_QWORD *)(v109 + 1088);
  *(_QWORD *)(v109 + 416) = v97;
  *(_QWORD *)(v109 + 424) = v98;
  v9 = Logger.payments.unsafeMutableAddressor();
  v83(v8, v9, v82);
  swift_bridgeObjectRetain();
  v85 = swift_allocObject();
  *(_QWORD *)(v85 + 16) = v97;
  *(_QWORD *)(v85 + 24) = v98;
  oslog = (os_log_t)Logger.logObject.getter();
  v92 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v109 + 784) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v109 + 1764);
  v87 = swift_allocObject();
  *(_BYTE *)(v87 + 16) = 32;
  v88 = swift_allocObject();
  *(_BYTE *)(v88 + 16) = 8;
  v86 = swift_allocObject();
  *(_QWORD *)(v86 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(_QWORD *)(v86 + 24) = v85;
  v89 = swift_allocObject();
  *(_QWORD *)(v89 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v89 + 24) = v86;
  _allocateUninitializedArray<A>(_:)();
  v90 = v10;
  swift_retain();
  *v90 = partial apply for closure #1 in OSLogArguments.append(_:);
  v90[1] = v87;
  swift_retain();
  v90[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v90[3] = v88;
  swift_retain();
  v90[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v90[5] = v89;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(oslog, v92))
  {
    swift_release();
    swift_release();
    swift_release();
LABEL_14:
    v73 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v109 + 1336);
    v72 = *(_QWORD *)(v109 + 1328);
    v67 = *(void (**)(uint64_t, uint64_t))(v109 + 1232);
    v65 = *(_QWORD *)(v109 + 1160);
    v66 = *(_QWORD *)(v109 + 1088);
    v71 = *(_QWORD *)(v109 + 984);
    v70 = *(_QWORD *)(v109 + 936);

    v67(v65, v66);
    v68 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v109 + 1416) = v68;
    *(_QWORD *)(v109 + 792) = v68;
    swift_bridgeObjectRetain();
    v69 = (id)MEMORY[0x24957220C](v97, v98);
    swift_bridgeObjectRelease();
    objc_msgSend(v68, sel_setText_, v69);

    v12 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v109 + 1424) = v12;
    *(_QWORD *)(v109 + 800) = v12;
    outlined init with copy of GlobalsProviding(v70 + 80, v109 + 256);
    v74 = *(_QWORD *)(v109 + 280);
    v75 = *(_QWORD *)(v109 + 288);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v109 + 256), v74);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("feeAmount", 9uLL, 1);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v73(v71, 0, 1, v72);
    v76 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v75 + 16) + **(int **)(v75 + 16));
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v109 + 1432) = v13;
    *v13 = *(_QWORD *)(v109 + 464);
    v13[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    return v76(*(_QWORD *)(v109 + 1064), *(_QWORD *)(v109 + 984), v74, v75);
  }
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v77 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
  v79 = createStorage<A>(capacity:type:)(0);
  v80 = createStorage<A>(capacity:type:)(1);
  v117 = buf;
  v118 = v79;
  v119 = v80;
  serialize(_:at:)(2, &v117);
  serialize(_:at:)(1, &v117);
  v120 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v121 = v87;
  result = closure #1 in osLogInternal(_:log:type:)(&v120, (uint64_t)&v117, (uint64_t)&v118, (uint64_t)&v119);
  if (!v110)
  {
    v120 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v121 = v88;
    closure #1 in osLogInternal(_:log:type:)(&v120, (uint64_t)&v117, (uint64_t)&v118, (uint64_t)&v119);
    v120 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v121 = v89;
    closure #1 in osLogInternal(_:log:type:)(&v120, (uint64_t)&v117, (uint64_t)&v118, (uint64_t)&v119);
    _os_log_impl(&dword_24701B000, oslog, v92, "Placing fee into request fee label %s", buf, size);
    destroyStorage<A>(_:count:)(v79, 0, v77);
    destroyStorage<A>(_:count:)(v80, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_14;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 464) = *v1;
  *(_QWORD *)(v2 + 1440) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 968));
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  _QWORD *v14;
  uint64_t result;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  uint8_t *buf;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  os_log_t oslog;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  id v60;
  _QWORD *v61;
  Class isa;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;

  v64 = (id)v0[178];
  v65 = (id)v0[177];
  v58 = (void (*)(uint64_t, uint64_t))v0[170];
  v63 = (id)v0[160];
  v59 = v0[133];
  v57 = v0[126];
  v0[58] = v0;
  v1 = TemplatingResult.resultSectionsAsString.getter();
  v60 = (id)MEMORY[0x24957220C](v1);
  v58(v59, v57);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  objc_msgSend(v64, sel_setText_, v60);

  _allocateUninitializedArray<A>(_:)();
  v61 = v2;
  v3 = v65;
  *v61 = v65;
  _finalizeUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v63, sel_setDecoratedRows_, isa);

  v4 = v64;
  objc_msgSend(v63, sel_setTitle_, v64);

  swift_bridgeObjectRelease();
  v67 = *(_QWORD *)(v66 + 1440);
  v68 = objc_msgSend(*(id *)(v66 + 1296), sel_note);
  if (v68)
  {
    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v54 = v5;

    v55 = v53;
    v56 = v54;
  }
  else
  {
    v55 = 0;
    v56 = 0;
  }
  v51 = Optional<A>.emptyToNil.getter(v55, v56);
  v52 = v6;
  *(_QWORD *)(v66 + 1448) = v6;
  if (!v6)
  {
    swift_bridgeObjectRelease();
    v34 = *(id *)(v66 + 1312);
    v35 = *(id *)(v66 + 1296);

    v39 = *(id *)(v66 + 1288);
    v38 = *(id *)(v66 + 1280);
    v37 = *(id *)(v66 + 1272);
    v36 = *(void **)(v66 + 1264);
    v10 = v36;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v36, (uint64_t)&protocol witness table for SASTColumnDataListItem);
    swift_unknownObjectRelease();
    v11 = v37;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v37, (uint64_t)&protocol witness table for SASTColumnDataListItem);
    swift_unknownObjectRelease();
    v12 = v38;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v38, (uint64_t)&protocol witness table for SASTColumnDataListItem);
    swift_unknownObjectRelease();
    v13 = v39;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v39, (uint64_t)&protocol witness table for SASTColumnDataListItem);
    swift_unknownObjectRelease();
    v14 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v66 + 1680) = v14;
    *v14 = *(_QWORD *)(v66 + 464);
    v14[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    return ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(*(_QWORD *)(v66 + 872), *(_QWORD *)(v66 + 880), *(_QWORD *)(v66 + 896));
  }
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 1192);
  v7 = *(_QWORD *)(v66 + 1152);
  v40 = *(_QWORD *)(v66 + 1088);
  *(_QWORD *)(v66 + 400) = v51;
  *(_QWORD *)(v66 + 408) = v6;
  swift_bridgeObjectRelease();
  v8 = Logger.payments.unsafeMutableAddressor();
  v41(v7, v8, v40);
  swift_bridgeObjectRetain();
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = v51;
  *(_QWORD *)(v43 + 24) = v52;
  oslog = (os_log_t)Logger.logObject.getter();
  v50 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v66 + 760) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v66 + 1760);
  v45 = swift_allocObject();
  *(_BYTE *)(v45 + 16) = 32;
  v46 = swift_allocObject();
  *(_BYTE *)(v46 + 16) = 8;
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  *(_QWORD *)(v44 + 24) = v43;
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v47 + 24) = v44;
  _allocateUninitializedArray<A>(_:)();
  v48 = v9;
  swift_retain();
  *v48 = partial apply for closure #1 in OSLogArguments.append(_:);
  v48[1] = v45;
  swift_retain();
  v48[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v48[3] = v46;
  swift_retain();
  v48[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v48[5] = v47;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(oslog, v50))
  {
    swift_release();
    swift_release();
    swift_release();
LABEL_11:
    v26 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v66 + 1336);
    v25 = *(_QWORD *)(v66 + 1328);
    v20 = *(void (**)(uint64_t, uint64_t))(v66 + 1232);
    v18 = *(_QWORD *)(v66 + 1152);
    v19 = *(_QWORD *)(v66 + 1088);
    v24 = *(_QWORD *)(v66 + 976);
    v23 = *(_QWORD *)(v66 + 936);

    v20(v18, v19);
    v21 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v66 + 1456) = v21;
    *(_QWORD *)(v66 + 768) = v21;
    swift_bridgeObjectRetain();
    v22 = (id)MEMORY[0x24957220C](v51, v52);
    swift_bridgeObjectRelease();
    objc_msgSend(v21, sel_setText_, v22);

    v16 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v66 + 1464) = v16;
    *(_QWORD *)(v66 + 776) = v16;
    outlined init with copy of GlobalsProviding(v23 + 80, v66 + 216);
    v27 = *(_QWORD *)(v66 + 240);
    v28 = *(_QWORD *)(v66 + 248);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v66 + 216), v27);
    RequestPaymentSlots.rawValue.getter(2);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v26(v24, 0, 1, v25);
    v29 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 + 16) + **(int **)(v28 + 16));
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v66 + 1472) = v17;
    *v17 = *(_QWORD *)(v66 + 464);
    v17[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    return v29(*(_QWORD *)(v66 + 1056), *(_QWORD *)(v66 + 976), v27, v28);
  }
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
  v32 = createStorage<A>(capacity:type:)(0);
  v33 = createStorage<A>(capacity:type:)(1);
  v69 = buf;
  v70 = v32;
  v71 = v33;
  serialize(_:at:)(2, &v69);
  serialize(_:at:)(1, &v69);
  v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v73 = v45;
  result = closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v69, (uint64_t)&v70, (uint64_t)&v71);
  if (!v67)
  {
    v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v73 = v46;
    closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v69, (uint64_t)&v70, (uint64_t)&v71);
    v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v73 = v47;
    closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v69, (uint64_t)&v70, (uint64_t)&v71);
    _os_log_impl(&dword_24701B000, oslog, v50, "Placing note into request note label %s", buf, size);
    destroyStorage<A>(_:count:)(v32, 0, v30);
    destroyStorage<A>(_:count:)(v33, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_11;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 464) = *v1;
  *(_QWORD *)(v2 + 1480) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 960));
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  id v14;
  _QWORD *v15;
  Class isa;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  _QWORD *v26;

  v18 = *(id *)(v0 + 1464);
  v19 = *(id *)(v0 + 1456);
  v12 = *(void (**)(uint64_t, uint64_t))(v0 + 1360);
  v17 = *(id *)(v0 + 1288);
  v13 = *(_QWORD *)(v0 + 1056);
  v11 = *(_QWORD *)(v0 + 1008);
  *(_QWORD *)(v0 + 464) = v0;
  v1 = TemplatingResult.resultSectionsAsString.getter();
  v14 = (id)MEMORY[0x24957220C](v1);
  v12(v13, v11);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(v0 + 216);
  objc_msgSend(v18, sel_setText_, v14);

  _allocateUninitializedArray<A>(_:)();
  v15 = v2;
  v3 = v19;
  *v15 = v19;
  _finalizeUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_setDecoratedRows_, isa);

  v4 = v18;
  objc_msgSend(v17, sel_setTitle_, v18);

  swift_bridgeObjectRelease();
  v20 = *(id *)(v0 + 1312);
  v21 = *(id *)(v0 + 1296);

  v25 = *(id *)(v0 + 1288);
  v24 = *(id *)(v0 + 1280);
  v23 = *(id *)(v0 + 1272);
  v22 = *(void **)(v0 + 1264);
  v5 = v22;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v22, (uint64_t)&protocol witness table for SASTColumnDataListItem);
  swift_unknownObjectRelease();
  v6 = v23;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v23, (uint64_t)&protocol witness table for SASTColumnDataListItem);
  swift_unknownObjectRelease();
  v7 = v24;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v24, (uint64_t)&protocol witness table for SASTColumnDataListItem);
  swift_unknownObjectRelease();
  v8 = v25;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v25, (uint64_t)&protocol witness table for SASTColumnDataListItem);
  swift_unknownObjectRelease();
  v9 = (_QWORD *)swift_task_alloc();
  v26[210] = v9;
  *v9 = v26[58];
  v9[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  return ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(v26[109], v26[110], v26[112]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 464) = *v1;
  *(_QWORD *)(v2 + 1544) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 952));
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  _QWORD *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  id v39;
  id v40;
  id v41;
  id v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  id v52;
  id v53;
  _QWORD *v54;
  id v55;
  Class v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  void *v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t);
  uint32_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  id v94;
  id v95;
  _QWORD *v96;
  id v97;
  Class v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, uint64_t);
  uint32_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  NSObject *v120;
  os_log_type_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(uint64_t, uint64_t);
  id v132;
  id v133;
  _QWORD *v134;
  id v135;
  Class v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t (*v143)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v144;
  uint8_t *v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  void (*v150)(uint64_t, uint64_t, uint64_t);
  uint32_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  os_log_t log;
  os_log_type_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(uint64_t, uint64_t);
  id v169;
  id v170;
  uint64_t v171;
  uint64_t v172;
  uint8_t *buf;
  uint64_t v174;
  uint64_t v175;
  id v176;
  id v177;
  uint64_t v178;
  void (*v179)(uint64_t, uint64_t, uint64_t);
  id v180;
  uint32_t size;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  NSObject *oslog;
  os_log_type_t v189;
  Class isa;
  Class v191;
  _QWORD *v192;
  id v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  id v205;
  id v206;
  id v207;
  id v208;
  uint8_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t (*v212)(uint64_t, uint64_t, uint64_t);
  uint64_t v213;
  uint8_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t (*v217)(uint64_t, uint64_t, uint64_t);
  uint64_t v218;
  uint8_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t (*v222)(uint64_t, uint64_t, uint64_t);
  uint64_t v223;
  uint8_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t (*v227)(uint64_t, uint64_t, uint64_t);
  uint64_t v228;

  v205 = (id)v0[189];
  v207 = (id)v0[188];
  v204 = v0[131];
  v202 = v0[127];
  v203 = v0[126];
  v0[58] = v0;
  v1 = TemplatingResult.resultSectionsAsString.getter();
  v206 = (id)MEMORY[0x24957220C](v1);
  v2 = *(void (**)(uint64_t, uint64_t))(v202 + 8);
  v0[194] = v2;
  v2(v204, v203);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  objc_msgSend(v205, sel_setText_, v206);

  v208 = objc_msgSend(v207, sel_text);
  if (v208)
  {
    v197 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v198 = v3;

    v199 = v197;
    v200 = v198;
  }
  else
  {
    v199 = 0;
    v200 = 0;
  }
  v196 = Optional<A>.isNilOrEmpty.getter(v199, v200);
  swift_bridgeObjectRelease();
  if ((v196 & 1) != 0)
  {
    v195 = _allocateUninitializedArray<A>(_:)();
  }
  else
  {
    v193 = *(id *)(v201 + 1504);
    v194 = _allocateUninitializedArray<A>(_:)();
    v192 = v4;
    v5 = v193;
    *v192 = v193;
    _finalizeUninitializedArray<A>(_:)();
    v195 = v194;
  }
  if (v195)
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v191 = isa;
  }
  else
  {
    v191 = 0;
  }
  v177 = *(id *)(v201 + 1512);
  v180 = *(id *)(v201 + 1504);
  v176 = *(id *)(v201 + 1264);
  v179 = *(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 1192);
  v6 = *(_QWORD *)(v201 + 1144);
  v178 = *(_QWORD *)(v201 + 1088);
  objc_msgSend(v176, sel_setDecoratedRows_);

  v7 = v177;
  objc_msgSend(v176, sel_setTitle_, v177);

  v8 = Logger.payments.unsafeMutableAddressor();
  v179(v6, v8, v178);
  v9 = v180;
  v182 = swift_allocObject();
  *(_QWORD *)(v182 + 16) = v180;
  oslog = Logger.logObject.getter();
  v189 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v201 + 624) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v201 + 1736);
  v184 = swift_allocObject();
  *(_BYTE *)(v184 + 16) = 32;
  v185 = swift_allocObject();
  *(_BYTE *)(v185 + 16) = 8;
  v183 = swift_allocObject();
  *(_QWORD *)(v183 + 16) = partial apply for implicit closure #5 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  *(_QWORD *)(v183 + 24) = v182;
  v186 = swift_allocObject();
  *(_QWORD *)(v186 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v186 + 24) = v183;
  _allocateUninitializedArray<A>(_:)();
  v187 = v10;
  swift_retain();
  *v187 = partial apply for closure #1 in OSLogArguments.append(_:);
  v187[1] = v184;
  swift_retain();
  v187[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v187[3] = v185;
  swift_retain();
  v187[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v187[5] = v186;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v189))
  {
    v11 = *(_QWORD *)(v201 + 1544);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v172 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v174 = createStorage<A>(capacity:type:)(0);
    v175 = createStorage<A>(capacity:type:)(1);
    v224 = buf;
    v225 = v174;
    v226 = v175;
    serialize(_:at:)(2, &v224);
    serialize(_:at:)(1, &v224);
    v227 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v228 = v184;
    result = closure #1 in osLogInternal(_:log:type:)(&v227, (uint64_t)&v224, (uint64_t)&v225, (uint64_t)&v226);
    if (v11)
      return result;
    v227 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v228 = v185;
    closure #1 in osLogInternal(_:log:type:)(&v227, (uint64_t)&v224, (uint64_t)&v225, (uint64_t)&v226);
    v227 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v228 = v186;
    closure #1 in osLogInternal(_:log:type:)(&v227, (uint64_t)&v224, (uint64_t)&v225, (uint64_t)&v226);
    _os_log_impl(&dword_24701B000, oslog, v189, "Placing payee into send person label %s", buf, size);
    destroyStorage<A>(_:count:)(v174, 0, v172);
    destroyStorage<A>(_:count:)(v175, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    v171 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v171 = *(_QWORD *)(v201 + 1544);
  }
  v169 = *(id *)(v201 + 1488);
  v168 = *(void (**)(uint64_t, uint64_t))(v201 + 1232);
  v166 = *(_QWORD *)(v201 + 1144);
  v167 = *(_QWORD *)(v201 + 1088);

  v168(v166, v167);
  v170 = objc_msgSend(v169, sel_currencyAmount);
  if (v170)
  {
    v160 = INCurrencyAmount.formattedString.getter();
    v161 = v13;

    v162 = Optional<A>.emptyToNil.getter(v160, v161);
    v163 = v14;
    swift_bridgeObjectRelease();
    v164 = v162;
    v165 = v163;
  }
  else
  {
    v164 = 0;
    v165 = 0;
  }
  *(_QWORD *)(v201 + 1560) = v165;
  if (!v165)
  {
    v18 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(v201 + 928) + 8))(*(_QWORD *)(v201 + 912));
    v148 = v18;
    if (v18 && (v128 = objc_msgSend(v18, sel_feeAmount), v148, v128))
    {
      v122 = INCurrencyAmount.formattedString.getter();
      v123 = v24;

      v124 = Optional<A>.emptyToNil.getter(v122, v123);
      v125 = v25;
      swift_bridgeObjectRelease();
      v126 = v124;
      v127 = v125;
    }
    else
    {
      v126 = 0;
      v127 = 0;
    }
    *(_QWORD *)(v201 + 1600) = v127;
    if (v127)
    {
      v112 = *(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 1192);
      v26 = *(_QWORD *)(v201 + 1128);
      v111 = *(_QWORD *)(v201 + 1088);
      *(_QWORD *)(v201 + 368) = v126;
      *(_QWORD *)(v201 + 376) = v127;
      v27 = Logger.payments.unsafeMutableAddressor();
      v112(v26, v27, v111);
      swift_bridgeObjectRetain();
      v114 = swift_allocObject();
      *(_QWORD *)(v114 + 16) = v126;
      *(_QWORD *)(v114 + 24) = v127;
      v120 = Logger.logObject.getter();
      v121 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v201 + 680) = 12;
      UnsignedInteger<>.init<A>(_:)();
      v113 = *(_DWORD *)(v201 + 1748);
      v116 = swift_allocObject();
      *(_BYTE *)(v116 + 16) = 32;
      v117 = swift_allocObject();
      *(_BYTE *)(v117 + 16) = 8;
      v115 = swift_allocObject();
      *(_QWORD *)(v115 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
      *(_QWORD *)(v115 + 24) = v114;
      v118 = swift_allocObject();
      *(_QWORD *)(v118 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v118 + 24) = v115;
      _allocateUninitializedArray<A>(_:)();
      v119 = v28;
      swift_retain();
      *v119 = partial apply for closure #1 in OSLogArguments.append(_:);
      v119[1] = v116;
      swift_retain();
      v119[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v119[3] = v117;
      swift_retain();
      v119[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v119[5] = v118;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v120, v121))
      {
        v107 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v106 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v108 = createStorage<A>(capacity:type:)(0);
        v109 = createStorage<A>(capacity:type:)(1);
        v214 = v107;
        v215 = v108;
        v216 = v109;
        serialize(_:at:)(2, &v214);
        serialize(_:at:)(1, &v214);
        v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v218 = v116;
        result = closure #1 in osLogInternal(_:log:type:)(&v217, (uint64_t)&v214, (uint64_t)&v215, (uint64_t)&v216);
        if (v171)
          return result;
        v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v218 = v117;
        closure #1 in osLogInternal(_:log:type:)(&v217, (uint64_t)&v214, (uint64_t)&v215, (uint64_t)&v216);
        v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v218 = v118;
        closure #1 in osLogInternal(_:log:type:)(&v217, (uint64_t)&v214, (uint64_t)&v215, (uint64_t)&v216);
        _os_log_impl(&dword_24701B000, v120, v121, "Placing fee into send fee label %s", v107, v113);
        destroyStorage<A>(_:count:)(v108, 0, v106);
        destroyStorage<A>(_:count:)(v109, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v107, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      v102 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v201 + 1528);
      v101 = *(_QWORD *)(v201 + 1520);
      v93 = *(void (**)(uint64_t, uint64_t))(v201 + 1232);
      v91 = *(_QWORD *)(v201 + 1128);
      v92 = *(_QWORD *)(v201 + 1088);
      v100 = *(_QWORD *)(v201 + 952);
      v99 = *(_QWORD *)(v201 + 936);

      v93(v91, v92);
      v97 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v201 + 1608) = v97;
      *(_QWORD *)(v201 + 688) = v97;
      swift_bridgeObjectRetain();
      v94 = (id)MEMORY[0x24957220C](v126, v127);
      swift_bridgeObjectRelease();
      objc_msgSend(v97, sel_setText_, v94);

      type metadata accessor for SATextDecorationRegion();
      _allocateUninitializedArray<A>(_:)();
      v96 = v29;
      v30 = default argument 1 of static SATextDecorationRegion.from(_:property:)();
      v95 = static SATextDecorationRegion.from(_:property:)(v126, v127, v30, v31);
      swift_bridgeObjectRelease();
      *v96 = v95;
      _finalizeUninitializedArray<A>(_:)();
      v98 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v97, sel_setRegions_, v98);

      v32 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v201 + 1616) = v32;
      *(_QWORD *)(v201 + 696) = v32;
      outlined init with copy of GlobalsProviding(v99 + 80, v201 + 96);
      v103 = *(_QWORD *)(v201 + 120);
      v104 = *(_QWORD *)(v201 + 128);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v201 + 96), v103);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("feeAmount", 9uLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v102(v100, 0, 1, v101);
      v105 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v104 + 16) + **(int **)(v104 + 16));
      v33 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v201 + 1624) = v33;
      *v33 = *(_QWORD *)(v201 + 464);
      v33[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
      return v105(*(_QWORD *)(v201 + 1032), *(_QWORD *)(v201 + 952), v103, v104);
    }
    v110 = objc_msgSend(*(id *)(v201 + 1488), sel_note);
    if (v110)
    {
      v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v88 = v34;

      v89 = v87;
      v90 = v88;
    }
    else
    {
      v89 = 0;
      v90 = 0;
    }
    v85 = Optional<A>.emptyToNil.getter(v89, v90);
    v86 = v35;
    *(_QWORD *)(v201 + 1640) = v35;
    if (!v35)
    {
      swift_bridgeObjectRelease();
      v68 = *(id *)(v201 + 1504);
      v69 = *(id *)(v201 + 1488);

      v73 = *(id *)(v201 + 1288);
      v72 = *(id *)(v201 + 1280);
      v71 = *(id *)(v201 + 1272);
      v70 = *(void **)(v201 + 1264);
      v39 = v70;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v70, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      v40 = v71;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v71, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      v41 = v72;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v72, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      v42 = v73;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v73, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      v43 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v201 + 1680) = v43;
      *v43 = *(_QWORD *)(v201 + 464);
      v43[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
      return ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(*(_QWORD *)(v201 + 872), *(_QWORD *)(v201 + 880), *(_QWORD *)(v201 + 896));
    }
    v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 1192);
    v36 = *(_QWORD *)(v201 + 1120);
    v74 = *(_QWORD *)(v201 + 1088);
    *(_QWORD *)(v201 + 352) = v85;
    *(_QWORD *)(v201 + 360) = v35;
    swift_bridgeObjectRelease();
    v37 = Logger.payments.unsafeMutableAddressor();
    v75(v36, v37, v74);
    swift_bridgeObjectRetain();
    v77 = swift_allocObject();
    *(_QWORD *)(v77 + 16) = v85;
    *(_QWORD *)(v77 + 24) = v86;
    v83 = Logger.logObject.getter();
    v84 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v201 + 656) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v76 = *(_DWORD *)(v201 + 1744);
    v79 = swift_allocObject();
    *(_BYTE *)(v79 + 16) = 32;
    v80 = swift_allocObject();
    *(_BYTE *)(v80 + 16) = 8;
    v78 = swift_allocObject();
    *(_QWORD *)(v78 + 16) = partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    *(_QWORD *)(v78 + 24) = v77;
    v81 = swift_allocObject();
    *(_QWORD *)(v81 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v81 + 24) = v78;
    _allocateUninitializedArray<A>(_:)();
    v82 = v38;
    swift_retain();
    *v82 = partial apply for closure #1 in OSLogArguments.append(_:);
    v82[1] = v79;
    swift_retain();
    v82[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v82[3] = v80;
    swift_retain();
    v82[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v82[5] = v81;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v83, v84))
    {
      v65 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v66 = createStorage<A>(capacity:type:)(0);
      v67 = createStorage<A>(capacity:type:)(1);
      v209 = v65;
      v210 = v66;
      v211 = v67;
      serialize(_:at:)(2, &v209);
      serialize(_:at:)(1, &v209);
      v212 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v213 = v79;
      result = closure #1 in osLogInternal(_:log:type:)(&v212, (uint64_t)&v209, (uint64_t)&v210, (uint64_t)&v211);
      if (v171)
        return result;
      v212 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v213 = v80;
      closure #1 in osLogInternal(_:log:type:)(&v212, (uint64_t)&v209, (uint64_t)&v210, (uint64_t)&v211);
      v212 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v213 = v81;
      closure #1 in osLogInternal(_:log:type:)(&v212, (uint64_t)&v209, (uint64_t)&v210, (uint64_t)&v211);
      _os_log_impl(&dword_24701B000, v83, v84, "Placing note into send note label %s", v65, v76);
      destroyStorage<A>(_:count:)(v66, 0, v64);
      destroyStorage<A>(_:count:)(v67, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v65, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v60 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v201 + 1528);
    v59 = *(_QWORD *)(v201 + 1520);
    v51 = *(void (**)(uint64_t, uint64_t))(v201 + 1232);
    v49 = *(_QWORD *)(v201 + 1120);
    v50 = *(_QWORD *)(v201 + 1088);
    v58 = *(_QWORD *)(v201 + 944);
    v57 = *(_QWORD *)(v201 + 936);

    v51(v49, v50);
    v55 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v201 + 1648) = v55;
    *(_QWORD *)(v201 + 664) = v55;
    swift_bridgeObjectRetain();
    v52 = (id)MEMORY[0x24957220C](v85, v86);
    swift_bridgeObjectRelease();
    objc_msgSend(v55, sel_setText_, v52);

    type metadata accessor for SATextDecorationRegion();
    _allocateUninitializedArray<A>(_:)();
    v54 = v44;
    v45 = default argument 1 of static SATextDecorationRegion.from(_:property:)();
    v53 = static SATextDecorationRegion.from(_:property:)(v85, v86, v45, v46);
    swift_bridgeObjectRelease();
    *v54 = v53;
    _finalizeUninitializedArray<A>(_:)();
    v56 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v55, sel_setRegions_, v56);

    v47 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v201 + 1656) = v47;
    *(_QWORD *)(v201 + 672) = v47;
    outlined init with copy of GlobalsProviding(v57 + 80, v201 + 56);
    v61 = *(_QWORD *)(v201 + 80);
    v62 = *(_QWORD *)(v201 + 88);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v201 + 56), v61);
    SendPaymentSlots.rawValue.getter(2);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v60(v58, 0, 1, v59);
    v63 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 + 16) + **(int **)(v62 + 16));
    v48 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v201 + 1664) = v48;
    *v48 = *(_QWORD *)(v201 + 464);
    v48[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    return v63(*(_QWORD *)(v201 + 1024), *(_QWORD *)(v201 + 944), v61, v62);
  }
  v150 = *(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 1192);
  v15 = *(_QWORD *)(v201 + 1136);
  v149 = *(_QWORD *)(v201 + 1088);
  *(_QWORD *)(v201 + 384) = v164;
  *(_QWORD *)(v201 + 392) = v165;
  v16 = Logger.payments.unsafeMutableAddressor();
  v150(v15, v16, v149);
  swift_bridgeObjectRetain();
  v152 = swift_allocObject();
  *(_QWORD *)(v152 + 16) = v164;
  *(_QWORD *)(v152 + 24) = v165;
  log = (os_log_t)Logger.logObject.getter();
  v159 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v201 + 704) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v151 = *(_DWORD *)(v201 + 1752);
  v154 = swift_allocObject();
  *(_BYTE *)(v154 + 16) = 32;
  v155 = swift_allocObject();
  *(_BYTE *)(v155 + 16) = 8;
  v153 = swift_allocObject();
  *(_QWORD *)(v153 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(_QWORD *)(v153 + 24) = v152;
  v156 = swift_allocObject();
  *(_QWORD *)(v156 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v156 + 24) = v153;
  _allocateUninitializedArray<A>(_:)();
  v157 = v17;
  swift_retain();
  *v157 = partial apply for closure #1 in OSLogArguments.append(_:);
  v157[1] = v154;
  swift_retain();
  v157[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v157[3] = v155;
  swift_retain();
  v157[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v157[5] = v156;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(log, v159))
  {
    swift_release();
    swift_release();
    swift_release();
LABEL_25:
    v140 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v201 + 1528);
    v139 = *(_QWORD *)(v201 + 1520);
    v131 = *(void (**)(uint64_t, uint64_t))(v201 + 1232);
    v129 = *(_QWORD *)(v201 + 1136);
    v130 = *(_QWORD *)(v201 + 1088);
    v138 = *(_QWORD *)(v201 + 960);
    v137 = *(_QWORD *)(v201 + 936);

    v131(v129, v130);
    v135 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v201 + 1568) = v135;
    *(_QWORD *)(v201 + 712) = v135;
    swift_bridgeObjectRetain();
    v132 = (id)MEMORY[0x24957220C](v164, v165);
    swift_bridgeObjectRelease();
    objc_msgSend(v135, sel_setText_, v132);

    type metadata accessor for SATextDecorationRegion();
    _allocateUninitializedArray<A>(_:)();
    v134 = v19;
    v20 = default argument 1 of static SATextDecorationRegion.from(_:property:)();
    v133 = static SATextDecorationRegion.from(_:property:)(v164, v165, v20, v21);
    swift_bridgeObjectRelease();
    *v134 = v133;
    _finalizeUninitializedArray<A>(_:)();
    v136 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v135, sel_setRegions_, v136);

    v22 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v201 + 1576) = v22;
    *(_QWORD *)(v201 + 720) = v22;
    outlined init with copy of GlobalsProviding(v137 + 80, v201 + 136);
    v141 = *(_QWORD *)(v201 + 160);
    v142 = *(_QWORD *)(v201 + 168);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v201 + 136), v141);
    SendPaymentSlots.rawValue.getter(1);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v140(v138, 0, 1, v139);
    v143 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v142 + 16) + **(int **)(v142 + 16));
    v23 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v201 + 1584) = v23;
    *v23 = *(_QWORD *)(v201 + 464);
    v23[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    return v143(*(_QWORD *)(v201 + 1040), *(_QWORD *)(v201 + 960), v141, v142);
  }
  v145 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v144 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
  v146 = createStorage<A>(capacity:type:)(0);
  v147 = createStorage<A>(capacity:type:)(1);
  v219 = v145;
  v220 = v146;
  v221 = v147;
  serialize(_:at:)(2, &v219);
  serialize(_:at:)(1, &v219);
  v222 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v223 = v154;
  result = closure #1 in osLogInternal(_:log:type:)(&v222, (uint64_t)&v219, (uint64_t)&v220, (uint64_t)&v221);
  if (!v171)
  {
    v222 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v223 = v155;
    closure #1 in osLogInternal(_:log:type:)(&v222, (uint64_t)&v219, (uint64_t)&v220, (uint64_t)&v221);
    v222 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v223 = v156;
    closure #1 in osLogInternal(_:log:type:)(&v222, (uint64_t)&v219, (uint64_t)&v220, (uint64_t)&v221);
    _os_log_impl(&dword_24701B000, log, v159, "Placing amount into send amount label %s", v145, v151);
    destroyStorage<A>(_:count:)(v146, 0, v144);
    destroyStorage<A>(_:count:)(v147, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v145, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_25;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 464) = *v1;
  *(_QWORD *)(v2 + 1592) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 944));
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  id v35;
  id v36;
  _QWORD *v37;
  id v38;
  Class v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint32_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  NSObject *log;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  id v77;
  id v78;
  _QWORD *v79;
  id v80;
  Class v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v89;
  uint8_t *buf;
  uint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  os_log_t oslog;
  os_log_type_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t);
  uint64_t v114;
  id v115;
  _QWORD *v116;
  Class isa;
  id v118;
  id v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  uint8_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t (*v127)(uint64_t, uint64_t, uint64_t);
  uint64_t v128;
  uint8_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(uint64_t, uint64_t, uint64_t);
  uint64_t v133;

  v119 = (id)v0[197];
  v120 = (id)v0[196];
  v113 = (void (*)(uint64_t, uint64_t))v0[194];
  v118 = (id)v0[159];
  v114 = v0[130];
  v112 = v0[126];
  v0[58] = v0;
  v1 = TemplatingResult.resultSectionsAsString.getter();
  v115 = (id)MEMORY[0x24957220C](v1);
  v113(v114, v112);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 17));
  objc_msgSend(v119, sel_setText_, v115);

  _allocateUninitializedArray<A>(_:)();
  v116 = v2;
  v3 = v120;
  *v116 = v120;
  _finalizeUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v118, sel_setDecoratedRows_, isa);

  v4 = v119;
  objc_msgSend(v118, sel_setTitle_, v119);

  swift_bridgeObjectRelease();
  v122 = *(_QWORD *)(v121 + 1592);
  v5 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(v121 + 928) + 8))(*(_QWORD *)(v121 + 912));
  v123 = v5;
  if (v5 && (v111 = objc_msgSend(v5, sel_feeAmount), v123, v111))
  {
    v105 = INCurrencyAmount.formattedString.getter();
    v106 = v6;

    v107 = Optional<A>.emptyToNil.getter(v105, v106);
    v108 = v7;
    swift_bridgeObjectRelease();
    v109 = v107;
    v110 = v108;
  }
  else
  {
    v109 = 0;
    v110 = 0;
  }
  *(_QWORD *)(v121 + 1600) = v110;
  if (!v110)
  {
    v93 = objc_msgSend(*(id *)(v121 + 1488), sel_note);
    if (v93)
    {
      v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v71 = v17;

      v72 = v70;
      v73 = v71;
    }
    else
    {
      v72 = 0;
      v73 = 0;
    }
    v68 = Optional<A>.emptyToNil.getter(v72, v73);
    v69 = v18;
    *(_QWORD *)(v121 + 1640) = v18;
    if (!v18)
    {
      swift_bridgeObjectRelease();
      v51 = *(id *)(v121 + 1504);
      v52 = *(id *)(v121 + 1488);

      v56 = *(id *)(v121 + 1288);
      v55 = *(id *)(v121 + 1280);
      v54 = *(id *)(v121 + 1272);
      v53 = *(void **)(v121 + 1264);
      v22 = v53;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v53, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      v23 = v54;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v54, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      v24 = v55;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v55, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      v25 = v56;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v56, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      v26 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v121 + 1680) = v26;
      *v26 = *(_QWORD *)(v121 + 464);
      v26[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
      return ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(*(_QWORD *)(v121 + 872), *(_QWORD *)(v121 + 880), *(_QWORD *)(v121 + 896));
    }
    v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v121 + 1192);
    v19 = *(_QWORD *)(v121 + 1120);
    v57 = *(_QWORD *)(v121 + 1088);
    *(_QWORD *)(v121 + 352) = v68;
    *(_QWORD *)(v121 + 360) = v18;
    swift_bridgeObjectRelease();
    v20 = Logger.payments.unsafeMutableAddressor();
    v58(v19, v20, v57);
    swift_bridgeObjectRetain();
    v60 = swift_allocObject();
    *(_QWORD *)(v60 + 16) = v68;
    *(_QWORD *)(v60 + 24) = v69;
    log = Logger.logObject.getter();
    v67 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v121 + 656) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v59 = *(_DWORD *)(v121 + 1744);
    v62 = swift_allocObject();
    *(_BYTE *)(v62 + 16) = 32;
    v63 = swift_allocObject();
    *(_BYTE *)(v63 + 16) = 8;
    v61 = swift_allocObject();
    *(_QWORD *)(v61 + 16) = partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    *(_QWORD *)(v61 + 24) = v60;
    v64 = swift_allocObject();
    *(_QWORD *)(v64 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v64 + 24) = v61;
    _allocateUninitializedArray<A>(_:)();
    v65 = v21;
    swift_retain();
    *v65 = partial apply for closure #1 in OSLogArguments.append(_:);
    v65[1] = v62;
    swift_retain();
    v65[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v65[3] = v63;
    swift_retain();
    v65[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v65[5] = v64;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v67))
    {
      v48 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v49 = createStorage<A>(capacity:type:)(0);
      v50 = createStorage<A>(capacity:type:)(1);
      v124 = v48;
      v125 = v49;
      v126 = v50;
      serialize(_:at:)(2, &v124);
      serialize(_:at:)(1, &v124);
      v127 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v128 = v62;
      result = closure #1 in osLogInternal(_:log:type:)(&v127, (uint64_t)&v124, (uint64_t)&v125, (uint64_t)&v126);
      if (v122)
        return result;
      v127 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v128 = v63;
      closure #1 in osLogInternal(_:log:type:)(&v127, (uint64_t)&v124, (uint64_t)&v125, (uint64_t)&v126);
      v127 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v128 = v64;
      closure #1 in osLogInternal(_:log:type:)(&v127, (uint64_t)&v124, (uint64_t)&v125, (uint64_t)&v126);
      _os_log_impl(&dword_24701B000, log, v67, "Placing note into send note label %s", v48, v59);
      destroyStorage<A>(_:count:)(v49, 0, v47);
      destroyStorage<A>(_:count:)(v50, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v48, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v43 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v121 + 1528);
    v42 = *(_QWORD *)(v121 + 1520);
    v34 = *(void (**)(uint64_t, uint64_t))(v121 + 1232);
    v32 = *(_QWORD *)(v121 + 1120);
    v33 = *(_QWORD *)(v121 + 1088);
    v41 = *(_QWORD *)(v121 + 944);
    v40 = *(_QWORD *)(v121 + 936);

    v34(v32, v33);
    v38 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v121 + 1648) = v38;
    *(_QWORD *)(v121 + 664) = v38;
    swift_bridgeObjectRetain();
    v35 = (id)MEMORY[0x24957220C](v68, v69);
    swift_bridgeObjectRelease();
    objc_msgSend(v38, sel_setText_, v35);

    type metadata accessor for SATextDecorationRegion();
    _allocateUninitializedArray<A>(_:)();
    v37 = v27;
    v28 = default argument 1 of static SATextDecorationRegion.from(_:property:)();
    v36 = static SATextDecorationRegion.from(_:property:)(v68, v69, v28, v29);
    swift_bridgeObjectRelease();
    *v37 = v36;
    _finalizeUninitializedArray<A>(_:)();
    v39 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v38, sel_setRegions_, v39);

    v30 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v121 + 1656) = v30;
    *(_QWORD *)(v121 + 672) = v30;
    outlined init with copy of GlobalsProviding(v40 + 80, v121 + 56);
    v44 = *(_QWORD *)(v121 + 80);
    v45 = *(_QWORD *)(v121 + 88);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v121 + 56), v44);
    SendPaymentSlots.rawValue.getter(2);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v43(v41, 0, 1, v42);
    v46 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 + 16) + **(int **)(v45 + 16));
    v31 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v121 + 1664) = v31;
    *v31 = *(_QWORD *)(v121 + 464);
    v31[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    return v46(*(_QWORD *)(v121 + 1024), *(_QWORD *)(v121 + 944), v44, v45);
  }
  v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(v121 + 1192);
  v8 = *(_QWORD *)(v121 + 1128);
  v94 = *(_QWORD *)(v121 + 1088);
  *(_QWORD *)(v121 + 368) = v109;
  *(_QWORD *)(v121 + 376) = v110;
  v9 = Logger.payments.unsafeMutableAddressor();
  v95(v8, v9, v94);
  swift_bridgeObjectRetain();
  v97 = swift_allocObject();
  *(_QWORD *)(v97 + 16) = v109;
  *(_QWORD *)(v97 + 24) = v110;
  oslog = (os_log_t)Logger.logObject.getter();
  v104 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v121 + 680) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v121 + 1748);
  v99 = swift_allocObject();
  *(_BYTE *)(v99 + 16) = 32;
  v100 = swift_allocObject();
  *(_BYTE *)(v100 + 16) = 8;
  v98 = swift_allocObject();
  *(_QWORD *)(v98 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(_QWORD *)(v98 + 24) = v97;
  v101 = swift_allocObject();
  *(_QWORD *)(v101 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v101 + 24) = v98;
  _allocateUninitializedArray<A>(_:)();
  v102 = v10;
  swift_retain();
  *v102 = partial apply for closure #1 in OSLogArguments.append(_:);
  v102[1] = v99;
  swift_retain();
  v102[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v102[3] = v100;
  swift_retain();
  v102[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v102[5] = v101;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(oslog, v104))
  {
    swift_release();
    swift_release();
    swift_release();
LABEL_14:
    v85 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v121 + 1528);
    v84 = *(_QWORD *)(v121 + 1520);
    v76 = *(void (**)(uint64_t, uint64_t))(v121 + 1232);
    v74 = *(_QWORD *)(v121 + 1128);
    v75 = *(_QWORD *)(v121 + 1088);
    v83 = *(_QWORD *)(v121 + 952);
    v82 = *(_QWORD *)(v121 + 936);

    v76(v74, v75);
    v80 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v121 + 1608) = v80;
    *(_QWORD *)(v121 + 688) = v80;
    swift_bridgeObjectRetain();
    v77 = (id)MEMORY[0x24957220C](v109, v110);
    swift_bridgeObjectRelease();
    objc_msgSend(v80, sel_setText_, v77);

    type metadata accessor for SATextDecorationRegion();
    _allocateUninitializedArray<A>(_:)();
    v79 = v12;
    v13 = default argument 1 of static SATextDecorationRegion.from(_:property:)();
    v78 = static SATextDecorationRegion.from(_:property:)(v109, v110, v13, v14);
    swift_bridgeObjectRelease();
    *v79 = v78;
    _finalizeUninitializedArray<A>(_:)();
    v81 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v80, sel_setRegions_, v81);

    v15 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v121 + 1616) = v15;
    *(_QWORD *)(v121 + 696) = v15;
    outlined init with copy of GlobalsProviding(v82 + 80, v121 + 96);
    v86 = *(_QWORD *)(v121 + 120);
    v87 = *(_QWORD *)(v121 + 128);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v121 + 96), v86);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("feeAmount", 9uLL, 1);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v85(v83, 0, 1, v84);
    v88 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v87 + 16) + **(int **)(v87 + 16));
    v16 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v121 + 1624) = v16;
    *v16 = *(_QWORD *)(v121 + 464);
    v16[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    return v88(*(_QWORD *)(v121 + 1032), *(_QWORD *)(v121 + 952), v86, v87);
  }
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v89 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
  v91 = createStorage<A>(capacity:type:)(0);
  v92 = createStorage<A>(capacity:type:)(1);
  v129 = buf;
  v130 = v91;
  v131 = v92;
  serialize(_:at:)(2, &v129);
  serialize(_:at:)(1, &v129);
  v132 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v133 = v99;
  result = closure #1 in osLogInternal(_:log:type:)(&v132, (uint64_t)&v129, (uint64_t)&v130, (uint64_t)&v131);
  if (!v122)
  {
    v132 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v133 = v100;
    closure #1 in osLogInternal(_:log:type:)(&v132, (uint64_t)&v129, (uint64_t)&v130, (uint64_t)&v131);
    v132 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v133 = v101;
    closure #1 in osLogInternal(_:log:type:)(&v132, (uint64_t)&v129, (uint64_t)&v130, (uint64_t)&v131);
    _os_log_impl(&dword_24701B000, oslog, v104, "Placing fee into send fee label %s", buf, size);
    destroyStorage<A>(_:count:)(v91, 0, v89);
    destroyStorage<A>(_:count:)(v92, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_14;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 464) = *v1;
  *(_QWORD *)(v2 + 1632) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 936));
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  _QWORD *v14;
  uint64_t result;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  id v24;
  id v25;
  _QWORD *v26;
  id v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v36;
  uint8_t *buf;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  os_log_t oslog;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  id v66;
  _QWORD *v67;
  Class isa;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;

  v70 = (id)v0[202];
  v71 = (id)v0[201];
  v64 = (void (*)(uint64_t, uint64_t))v0[194];
  v69 = (id)v0[160];
  v65 = v0[129];
  v63 = v0[126];
  v0[58] = v0;
  v1 = TemplatingResult.resultSectionsAsString.getter();
  v66 = (id)MEMORY[0x24957220C](v1);
  v64(v65, v63);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  objc_msgSend(v70, sel_setText_, v66);

  _allocateUninitializedArray<A>(_:)();
  v67 = v2;
  v3 = v71;
  *v67 = v71;
  _finalizeUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v69, sel_setDecoratedRows_, isa);

  v4 = v70;
  objc_msgSend(v69, sel_setTitle_, v70);

  swift_bridgeObjectRelease();
  v73 = *(_QWORD *)(v72 + 1632);
  v74 = objc_msgSend(*(id *)(v72 + 1488), sel_note);
  if (v74)
  {
    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v60 = v5;

    v61 = v59;
    v62 = v60;
  }
  else
  {
    v61 = 0;
    v62 = 0;
  }
  v57 = Optional<A>.emptyToNil.getter(v61, v62);
  v58 = v6;
  *(_QWORD *)(v72 + 1640) = v6;
  if (!v6)
  {
    swift_bridgeObjectRelease();
    v40 = *(id *)(v72 + 1504);
    v41 = *(id *)(v72 + 1488);

    v45 = *(id *)(v72 + 1288);
    v44 = *(id *)(v72 + 1280);
    v43 = *(id *)(v72 + 1272);
    v42 = *(void **)(v72 + 1264);
    v10 = v42;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v42, (uint64_t)&protocol witness table for SASTColumnDataListItem);
    swift_unknownObjectRelease();
    v11 = v43;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v43, (uint64_t)&protocol witness table for SASTColumnDataListItem);
    swift_unknownObjectRelease();
    v12 = v44;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v44, (uint64_t)&protocol witness table for SASTColumnDataListItem);
    swift_unknownObjectRelease();
    v13 = v45;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v45, (uint64_t)&protocol witness table for SASTColumnDataListItem);
    swift_unknownObjectRelease();
    v14 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v72 + 1680) = v14;
    *v14 = *(_QWORD *)(v72 + 464);
    v14[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    return ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(*(_QWORD *)(v72 + 872), *(_QWORD *)(v72 + 880), *(_QWORD *)(v72 + 896));
  }
  v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 1192);
  v7 = *(_QWORD *)(v72 + 1120);
  v46 = *(_QWORD *)(v72 + 1088);
  *(_QWORD *)(v72 + 352) = v57;
  *(_QWORD *)(v72 + 360) = v6;
  swift_bridgeObjectRelease();
  v8 = Logger.payments.unsafeMutableAddressor();
  v47(v7, v8, v46);
  swift_bridgeObjectRetain();
  v49 = swift_allocObject();
  *(_QWORD *)(v49 + 16) = v57;
  *(_QWORD *)(v49 + 24) = v58;
  oslog = (os_log_t)Logger.logObject.getter();
  v56 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v72 + 656) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v72 + 1744);
  v51 = swift_allocObject();
  *(_BYTE *)(v51 + 16) = 32;
  v52 = swift_allocObject();
  *(_BYTE *)(v52 + 16) = 8;
  v50 = swift_allocObject();
  *(_QWORD *)(v50 + 16) = partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  *(_QWORD *)(v50 + 24) = v49;
  v53 = swift_allocObject();
  *(_QWORD *)(v53 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v53 + 24) = v50;
  _allocateUninitializedArray<A>(_:)();
  v54 = v9;
  swift_retain();
  *v54 = partial apply for closure #1 in OSLogArguments.append(_:);
  v54[1] = v51;
  swift_retain();
  v54[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v54[3] = v52;
  swift_retain();
  v54[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v54[5] = v53;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(oslog, v56))
  {
    swift_release();
    swift_release();
    swift_release();
LABEL_11:
    v32 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v72 + 1528);
    v31 = *(_QWORD *)(v72 + 1520);
    v23 = *(void (**)(uint64_t, uint64_t))(v72 + 1232);
    v21 = *(_QWORD *)(v72 + 1120);
    v22 = *(_QWORD *)(v72 + 1088);
    v30 = *(_QWORD *)(v72 + 944);
    v29 = *(_QWORD *)(v72 + 936);

    v23(v21, v22);
    v27 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v72 + 1648) = v27;
    *(_QWORD *)(v72 + 664) = v27;
    swift_bridgeObjectRetain();
    v24 = (id)MEMORY[0x24957220C](v57, v58);
    swift_bridgeObjectRelease();
    objc_msgSend(v27, sel_setText_, v24);

    type metadata accessor for SATextDecorationRegion();
    _allocateUninitializedArray<A>(_:)();
    v26 = v16;
    v17 = default argument 1 of static SATextDecorationRegion.from(_:property:)();
    v25 = static SATextDecorationRegion.from(_:property:)(v57, v58, v17, v18);
    swift_bridgeObjectRelease();
    *v26 = v25;
    _finalizeUninitializedArray<A>(_:)();
    v28 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v27, sel_setRegions_, v28);

    v19 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v72 + 1656) = v19;
    *(_QWORD *)(v72 + 672) = v19;
    outlined init with copy of GlobalsProviding(v29 + 80, v72 + 56);
    v33 = *(_QWORD *)(v72 + 80);
    v34 = *(_QWORD *)(v72 + 88);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v72 + 56), v33);
    SendPaymentSlots.rawValue.getter(2);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v32(v30, 0, 1, v31);
    v35 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 + 16) + **(int **)(v34 + 16));
    v20 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v72 + 1664) = v20;
    *v20 = *(_QWORD *)(v72 + 464);
    v20[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    return v35(*(_QWORD *)(v72 + 1024), *(_QWORD *)(v72 + 944), v33, v34);
  }
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
  v38 = createStorage<A>(capacity:type:)(0);
  v39 = createStorage<A>(capacity:type:)(1);
  v75 = buf;
  v76 = v38;
  v77 = v39;
  serialize(_:at:)(2, &v75);
  serialize(_:at:)(1, &v75);
  v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v79 = v51;
  result = closure #1 in osLogInternal(_:log:type:)(&v78, (uint64_t)&v75, (uint64_t)&v76, (uint64_t)&v77);
  if (!v73)
  {
    v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v79 = v52;
    closure #1 in osLogInternal(_:log:type:)(&v78, (uint64_t)&v75, (uint64_t)&v76, (uint64_t)&v77);
    v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v79 = v53;
    closure #1 in osLogInternal(_:log:type:)(&v78, (uint64_t)&v75, (uint64_t)&v76, (uint64_t)&v77);
    _os_log_impl(&dword_24701B000, oslog, v56, "Placing note into send note label %s", buf, size);
    destroyStorage<A>(_:count:)(v38, 0, v36);
    destroyStorage<A>(_:count:)(v39, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_11;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 464) = *v1;
  *(_QWORD *)(v2 + 1672) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 928));
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  id v14;
  _QWORD *v15;
  Class isa;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  _QWORD *v26;

  v18 = *(id *)(v0 + 1656);
  v19 = *(id *)(v0 + 1648);
  v12 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
  v17 = *(id *)(v0 + 1288);
  v13 = *(_QWORD *)(v0 + 1024);
  v11 = *(_QWORD *)(v0 + 1008);
  *(_QWORD *)(v0 + 464) = v0;
  v1 = TemplatingResult.resultSectionsAsString.getter();
  v14 = (id)MEMORY[0x24957220C](v1);
  v12(v13, v11);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  objc_msgSend(v18, sel_setText_, v14);

  _allocateUninitializedArray<A>(_:)();
  v15 = v2;
  v3 = v19;
  *v15 = v19;
  _finalizeUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_setDecoratedRows_, isa);

  v4 = v18;
  objc_msgSend(v17, sel_setTitle_, v18);

  swift_bridgeObjectRelease();
  v20 = *(id *)(v0 + 1504);
  v21 = *(id *)(v0 + 1488);

  v25 = *(id *)(v0 + 1288);
  v24 = *(id *)(v0 + 1280);
  v23 = *(id *)(v0 + 1272);
  v22 = *(void **)(v0 + 1264);
  v5 = v22;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v22, (uint64_t)&protocol witness table for SASTColumnDataListItem);
  swift_unknownObjectRelease();
  v6 = v23;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v23, (uint64_t)&protocol witness table for SASTColumnDataListItem);
  swift_unknownObjectRelease();
  v7 = v24;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v24, (uint64_t)&protocol witness table for SASTColumnDataListItem);
  swift_unknownObjectRelease();
  v8 = v25;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v25, (uint64_t)&protocol witness table for SASTColumnDataListItem);
  swift_unknownObjectRelease();
  v9 = (_QWORD *)swift_task_alloc();
  v26[210] = v9;
  *v9 = v26[58];
  v9[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  return ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(v26[109], v26[110], v26[112]);
}

{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  uint8_t *buf;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  id v21;
  uint32_t size;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  NSObject *oslog;
  os_log_type_t v30;
  Class isa;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;

  v1 = (void *)v0[211];
  v0[58] = v0;
  v0[79] = v1;
  v38 = objc_msgSend(v1, sel_templateItems);
  if (v38)
  {
    v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v36 = v35;
  }
  else
  {
    v36 = 0;
  }
  if (!v36)
    return _assertionFailure(_:_:file:line:flags:)();
  v2 = *(void **)(v37 + 1248);
  *(_QWORD *)(v37 + 640) = v36;
  v34 = objc_msgSend(v2, sel_templateItems);
  if (v34)
  {
    v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v33 = v32;
  }
  else
  {
    v33 = 0;
  }
  if (!v33)
    return _assertionFailure(_:_:file:line:flags:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SASTTemplateItem]);
  lazy protocol witness table accessor for type [SASTTemplateItem] and conformance [A]();
  Array.append<A>(contentsOf:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v21 = *(id *)(v37 + 1248);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 1192);
  v4 = *(_QWORD *)(v37 + 1104);
  v19 = *(_QWORD *)(v37 + 1088);
  objc_msgSend(v21, sel_setTemplateItems_);

  v5 = Logger.payments.unsafeMutableAddressor();
  v20(v4, v5, v19);
  v6 = v21;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v21;
  oslog = Logger.logObject.getter();
  v30 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v37 + 648) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v37 + 1740);
  v25 = swift_allocObject();
  *(_BYTE *)(v25 + 16) = 32;
  v26 = swift_allocObject();
  *(_BYTE *)(v26 + 16) = 8;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for implicit closure #9 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  *(_QWORD *)(v24 + 24) = v23;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v27 + 24) = v24;
  _allocateUninitializedArray<A>(_:)();
  v28 = v7;
  swift_retain();
  *v28 = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[1] = v25;
  swift_retain();
  v28[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[3] = v26;
  swift_retain();
  v28[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[5] = v27;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(oslog, v30))
  {
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(v37 + 1696);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
  v17 = createStorage<A>(capacity:type:)(0);
  v18 = createStorage<A>(capacity:type:)(1);
  v39 = buf;
  v40 = v17;
  v41 = v18;
  serialize(_:at:)(2, &v39);
  serialize(_:at:)(1, &v39);
  v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v43 = v25;
  result = closure #1 in osLogInternal(_:log:type:)(&v42, (uint64_t)&v39, (uint64_t)&v40, (uint64_t)&v41);
  if (!v8)
  {
    v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v43 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v42, (uint64_t)&v39, (uint64_t)&v40, (uint64_t)&v41);
    v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v43 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v42, (uint64_t)&v39, (uint64_t)&v40, (uint64_t)&v41);
    _os_log_impl(&dword_24701B000, oslog, v30, "#ConfirmationViewBuilder created SASTItemGroup %s", buf, size);
    destroyStorage<A>(_:count:)(v17, 0, v15);
    destroyStorage<A>(_:count:)(v18, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
LABEL_16:
    v14 = *(id *)(v37 + 1248);
    v13 = *(void (**)(uint64_t, uint64_t))(v37 + 1232);
    v11 = *(_QWORD *)(v37 + 1104);
    v12 = *(_QWORD *)(v37 + 1088);

    v13(v11, v12);
    v9 = v14;
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v37 + 1704) = v10;
    *v10 = *(_QWORD *)(v37 + 464);
    v10[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    return ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:)(*(_QWORD *)(v37 + 896));
  }
  return result;
}

{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  id v3;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v5 = (id)v0[214];
  v8 = (id)v0[211];
  v9 = (id)v0[161];
  v10 = (id)v0[160];
  v11 = (id)v0[159];
  v12 = (id)v0[158];
  v1 = (void *)v0[156];
  v13 = v1;
  v0[58] = v0;
  objc_msgSend(v1, sel_setConfirmationOptions_);

  type metadata accessor for SAAceView();
  v7 = _allocateUninitializedArray<A>(_:)();
  v6 = v2;
  v3 = v13;
  *v6 = v13;
  _finalizeUninitializedArray<A>(_:)();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[58] + 8))(v7);
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = (id)v0[165];
  v4 = (id)v0[164];
  v5 = (id)v0[162];
  v6 = (id)v0[161];
  v7 = (id)v0[160];
  v8 = (id)v0[159];
  v9 = (id)v0[158];
  v10 = (id)v0[156];
  v1 = v0[125];
  v0[58] = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 22));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[58] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = (id)v0[173];
  v4 = (id)v0[172];
  v5 = (id)v0[165];
  v6 = (id)v0[164];
  v7 = (id)v0[162];
  v8 = (id)v0[161];
  v9 = (id)v0[160];
  v10 = (id)v0[159];
  v11 = (id)v0[158];
  v12 = (id)v0[156];
  v1 = v0[124];
  v0[58] = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 37));

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[58] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = (id)v0[178];
  v4 = (id)v0[177];
  v5 = (id)v0[165];
  v6 = (id)v0[164];
  v7 = (id)v0[162];
  v8 = (id)v0[161];
  v9 = (id)v0[160];
  v10 = (id)v0[159];
  v11 = (id)v0[158];
  v12 = (id)v0[156];
  v1 = v0[123];
  v0[58] = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[58] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = (id)v0[183];
  v4 = (id)v0[182];
  v5 = (id)v0[165];
  v6 = (id)v0[164];
  v7 = (id)v0[162];
  v8 = (id)v0[161];
  v9 = (id)v0[160];
  v10 = (id)v0[159];
  v11 = (id)v0[158];
  v12 = (id)v0[156];
  v1 = v0[122];
  v0[58] = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[58] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = (id)v0[189];
  v4 = (id)v0[188];
  v5 = (id)v0[186];
  v6 = (id)v0[161];
  v7 = (id)v0[160];
  v8 = (id)v0[159];
  v9 = (id)v0[158];
  v10 = (id)v0[156];
  v1 = v0[121];
  v0[58] = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[58] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = (id)v0[197];
  v4 = (id)v0[196];
  v5 = (id)v0[189];
  v6 = (id)v0[188];
  v7 = (id)v0[186];
  v8 = (id)v0[161];
  v9 = (id)v0[160];
  v10 = (id)v0[159];
  v11 = (id)v0[158];
  v12 = (id)v0[156];
  v1 = v0[120];
  v0[58] = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 17));

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[58] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = (id)v0[202];
  v4 = (id)v0[201];
  v5 = (id)v0[189];
  v6 = (id)v0[188];
  v7 = (id)v0[186];
  v8 = (id)v0[161];
  v9 = (id)v0[160];
  v10 = (id)v0[159];
  v11 = (id)v0[158];
  v12 = (id)v0[156];
  v1 = v0[119];
  v0[58] = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[58] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = (id)v0[207];
  v4 = (id)v0[206];
  v5 = (id)v0[189];
  v6 = (id)v0[188];
  v7 = (id)v0[186];
  v8 = (id)v0[161];
  v9 = (id)v0[160];
  v10 = (id)v0[159];
  v11 = (id)v0[158];
  v12 = (id)v0[156];
  v1 = v0[118];
  v0[58] = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[58] + 8))();
}

{
  _QWORD *v0;
  void *v1;
  id v3;
  id v4;
  id v5;
  id v6;

  v1 = (void *)v0[161];
  v3 = (id)v0[160];
  v4 = (id)v0[159];
  v5 = (id)v0[158];
  v6 = (id)v0[156];
  v0[58] = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[58] + 8))();
}

{
  _QWORD *v0;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v2 = (id)v0[211];
  v3 = (id)v0[161];
  v4 = (id)v0[160];
  v5 = (id)v0[159];
  v6 = (id)v0[158];
  v7 = (id)v0[156];
  v0[58] = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[58] + 8))();
}

_QWORD *ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v6;

  v6 = (_QWORD *)(*v2 + 464);
  *v6 = *v2;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  if (v1)
  {
    v4 = swift_task_dealloc();
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v6 + 8))(v6, v4);
  }
  else
  {
    swift_task_dealloc();
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v6 + 8))(v6, a1);
  }
}

uint64_t ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[58] = *v2;
  v3[211] = a1;
  v3[212] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[58] = *v2;
  v3[214] = a1;
  v3[215] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v9[105] = v8;
  v9[104] = a8;
  v9[103] = a6;
  v9[102] = a4;
  v9[101] = a3;
  v9[100] = a2;
  v9[99] = a1;
  v9[60] = v9;
  v9[61] = 0;
  v9[62] = 0;
  v9[63] = 0;
  v9[64] = 0;
  v9[65] = 0;
  v9[67] = 0;
  v9[68] = 0;
  v9[69] = 0;
  v9[70] = 0;
  v9[71] = 0;
  v9[72] = 0;
  v9[80] = 0;
  v9[84] = 0;
  v9[24] = 0;
  v9[25] = 0;
  v9[30] = 0;
  v9[31] = 0;
  v9[89] = 0;
  v9[91] = 0;
  v9[44] = 0;
  v9[45] = 0;
  v9[50] = 0;
  v9[51] = 0;
  v9[93] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v9[106] = swift_task_alloc();
  v9[107] = swift_task_alloc();
  v10 = type metadata accessor for TemplatingResult();
  v9[108] = v10;
  v9[109] = *(_QWORD *)(v10 - 8);
  v9[110] = swift_task_alloc();
  v9[111] = swift_task_alloc();
  v11 = type metadata accessor for Logger();
  v9[112] = v11;
  v9[113] = *(_QWORD *)(v11 - 8);
  v9[114] = swift_task_alloc();
  v9[115] = swift_task_alloc();
  v9[61] = a1;
  v9[62] = a2;
  v9[63] = a3;
  v9[64] = a4;
  v9[65] = v8;
  return swift_task_switch();
}

uint64_t ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  id v9;
  id v10;
  id v11;
  uint64_t *v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  Swift::String v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t *v38;
  uint64_t v39;
  Swift::String v40;
  uint64_t v41;
  Swift::String v42;
  uint64_t v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  uint64_t *v48;
  uint64_t v49;
  Swift::String v50;
  uint64_t v51;
  Swift::String v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  Swift::String v58;
  uint64_t v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  Swift::String v66;
  uint64_t v67;
  Swift::String v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t *v74;
  uint64_t v75;
  Swift::String v76;
  uint64_t v77;
  Swift::String v78;
  uint64_t v79;
  id v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  Swift::String v85;
  Swift::String v86;
  uint64_t v87;
  uint64_t v88;
  id v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  id v101;
  uint64_t v102;
  _QWORD *v103;
  void *v104;
  id v105;
  uint64_t v106;
  _QWORD *v107;
  id v108;
  id v109;
  id v110;
  char v111;
  id v112;
  _QWORD *v113;
  id v114;
  id v115;
  uint64_t v116;
  id v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)(_QWORD, _QWORD, uint64_t, uint64_t);
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t (*v129)(_QWORD, _QWORD, uint64_t, uint64_t);
  BOOL v130;
  void *v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  id v139;
  char v140;
  BOOL v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint8_t *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint32_t size;
  os_log_type_t v164;
  NSObject *oslog;
  uint64_t v166;
  uint64_t *v167;
  Class v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  id v175;
  Class v176;
  Class v177;
  Class v178;
  Class v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  id v190;
  id v191;
  Class v192;
  Class v193;
  Class v194;
  Class v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  id v199;
  id v200;
  uint64_t v201;
  void *v202;
  id v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  Class v209;
  id v210;
  id v211;
  uint64_t *v212;
  Class v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  id v220;
  Class v221;
  Class v222;
  Class v223;
  Class v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  id v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  id v235;
  id v236;
  Class v237;
  Class v238;
  Class v239;
  Class v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  id v244;
  id v245;
  uint64_t v246;
  void *v247;
  id v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  Class v254;
  id v255;
  uint64_t v256;
  uint64_t *v257;
  Class isa;
  id v259;
  id v260;
  id v261;
  id v262;
  uint64_t v263;
  void *v264;
  id v265;
  id v266;
  id v267;
  uint64_t v268;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  void (*v274)(uint64_t, uint64_t);
  uint64_t v275;
  uint8_t *buf;
  uint64_t v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  void (*v283)(uint64_t, uint64_t, uint64_t);
  uint32_t v284;
  os_log_type_t v285;
  NSObject *v286;
  uint64_t v287;

  v1 = *(_QWORD *)(v0 + 920);
  v281 = *(_QWORD *)(v0 + 904);
  v282 = *(_QWORD *)(v0 + 896);
  *(_QWORD *)(v0 + 480) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  v283 = *(void (**)(uint64_t, uint64_t, uint64_t))(v281 + 16);
  v283(v1, v2, v282);
  v286 = Logger.logObject.getter();
  v285 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 528) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v284 = *(_DWORD *)(v0 + 1056);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v287 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v286, v285))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v275 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v277 = createStorage<A>(capacity:type:)(0);
    v278 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v280 + 760) = buf;
    *(_QWORD *)(v280 + 768) = v277;
    *(_QWORD *)(v280 + 776) = v278;
    serialize(_:at:)(0, (_BYTE **)(v280 + 760));
    serialize(_:at:)(0, (_BYTE **)(v280 + 760));
    *(_QWORD *)(v280 + 784) = v287;
    v279 = (_QWORD *)swift_task_alloc();
    v279[2] = v280 + 760;
    v279[3] = v280 + 768;
    v279[4] = v280 + 776;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v286, v285, "#ConfirmationViewBuilder makePaymentConfirmationPhoneView", buf, v284);
    destroyStorage<A>(_:count:)(v277, 0, v275);
    destroyStorage<A>(_:count:)(v278, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v272 = *(_QWORD *)(v280 + 920);
  v271 = *(_QWORD *)(v280 + 904);
  v273 = *(_QWORD *)(v280 + 896);

  v274 = *(void (**)(uint64_t, uint64_t))(v271 + 8);
  v274(v272, v273);
  if (App.isFirstParty.getter())
  {
    v3 = *(id *)(v280 + 800);
    v270 = App.systemUIExtensionBundleId.getter();
    if (v4)
    {
      v268 = MEMORY[0x24957220C](v270);
      swift_bridgeObjectRelease();
      v269 = (void *)v268;
    }
    else
    {
      v269 = 0;
    }
    v267 = *(id *)(v280 + 800);
    objc_msgSend(v267, sel__setUiExtensionBundleId_);

  }
  v265 = (id)static CasinoFactory.makePlaceholderCardSection()();
  *(_QWORD *)(v280 + 928) = v265;
  *(_QWORD *)(v280 + 536) = v265;
  type metadata accessor for SAAppsLaunchApp();
  v266 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v280 + 936) = v266;
  *(_QWORD *)(v280 + 544) = v266;
  v5 = v266;
  v6 = App.appIdentifier.getter();
  if (v7)
  {
    v263 = MEMORY[0x24957220C](v6);
    swift_bridgeObjectRelease();
    v264 = (void *)v263;
  }
  else
  {
    v264 = 0;
  }
  objc_msgSend(v266, sel_setAppId_);

  type metadata accessor for SFAbstractCommand();
  _allocateUninitializedArray<A>(_:)();
  v257 = v8;
  v9 = v266;
  v256 = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
  swift_unknownObjectRelease();
  *v257 = v256;
  _finalizeUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v265, sel_setCommands_, isa);

  type metadata accessor for SFCardSection();
  *(_QWORD *)(v280 + 552) = Array.init()();
  type metadata accessor for SFRichTitleCardSection();
  v259 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v280 + 944) = v259;
  *(_QWORD *)(v280 + 560) = v259;
  type metadata accessor for SFRowCardSection();
  v260 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v280 + 952) = v260;
  *(_QWORD *)(v280 + 568) = v260;
  v261 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v280 + 960) = v261;
  *(_QWORD *)(v280 + 576) = v261;
  *(_QWORD *)(v280 + 96) = 0;
  *(_QWORD *)(v280 + 104) = 0;
  *(_QWORD *)(v280 + 584) = 0;
  *(_QWORD *)(v280 + 592) = 0;
  objc_opt_self();
  v262 = (id)swift_dynamicCastObjCClass();
  if (v262)
  {
    v10 = v262;
    *(_QWORD *)(v280 + 728) = v262;
    v11 = v259;
    _allocateUninitializedArray<A>(_:)();
    v253 = v12;
    *(_QWORD *)(v280 + 320) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v280 + 328) = v13;
    v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    type metadata accessor for INRequestPaymentIntent();
    *(_QWORD *)(v280 + 336) = SiriKitPaymentsIntent.simpleClassName.getter();
    *(_QWORD *)(v280 + 344) = v15;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String.UTF8View();
    v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".payer", 6uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    *v253 = String.init(stringInterpolation:)();
    v253[1] = v17;
    _finalizeUninitializedArray<A>(_:)();
    v254 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v259, sel_setParameterKeyPaths_, v254);

    v18 = v259;
    v255 = objc_msgSend(v262, sel_payer);
    if (v255)
    {
      v248 = objc_msgSend(v255, sel_displayName);
      v249 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v250 = v19;

      v251 = v249;
      v252 = v250;
    }
    else
    {
      v251 = 0;
      v252 = 0;
    }
    if (v252)
    {
      v246 = MEMORY[0x24957220C](v251);
      swift_bridgeObjectRelease();
      v247 = (void *)v246;
    }
    else
    {
      v247 = 0;
    }
    objc_msgSend(v259, sel_setTitle_);

    v245 = objc_msgSend(v262, sel_currencyAmount);
    if (v245)
    {
      *(_QWORD *)(v280 + 744) = v245;
      v20 = v259;
      v244 = objc_msgSend(v259, sel_parameterKeyPaths);
      if (v244)
      {
        v242 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v243 = v242;
      }
      else
      {
        v243 = 0;
      }
      *(_QWORD *)(v280 + 752) = v243;
      if (*(_QWORD *)(v280 + 752))
      {
        *(_QWORD *)(v280 + 448) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v280 + 456) = v21;
        v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v22);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v280 + 464) = SiriKitPaymentsIntent.simpleClassName.getter();
        *(_QWORD *)(v280 + 472) = v23;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String.UTF8View();
        v24 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".currencyAmount", 0xFuLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        String.init(stringInterpolation:)();
        specialized Array.append(_:)();
        if (*(_QWORD *)(v280 + 752))
        {
          v237 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v238 = v237;
        }
        else
        {
          v238 = 0;
        }
        objc_msgSend(v259, sel_setParameterKeyPaths_);

      }
      else
      {
        v241 = *(_QWORD *)(v280 + 752);
        swift_bridgeObjectRetain();
        if (v241)
        {
          v239 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v240 = v239;
        }
        else
        {
          v240 = 0;
        }
        objc_msgSend(v259, sel_setParameterKeyPaths_);

        outlined destroy of [SFCardSection]();
      }
      *(_QWORD *)(v280 + 96) = INCurrencyAmount.formattedString.getter();
      *(_QWORD *)(v280 + 104) = v25;
      swift_bridgeObjectRelease();

    }
    v236 = (id)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(v280 + 832) + 8))(*(_QWORD *)(v280 + 824));
    if (v236
      && (v235 = objc_msgSend(v236, sel_feeAmount), v236, v235))
    {
      v229 = INCurrencyAmount.formattedString.getter();
      v230 = v26;

      v231 = Optional<A>.emptyToNil.getter(v229, v230);
      v232 = v27;
      swift_bridgeObjectRelease();
      v233 = v231;
      v234 = v232;
    }
    else
    {
      v233 = 0;
      v234 = 0;
    }
    if (v234)
    {
      *(_QWORD *)(v280 + 400) = v233;
      *(_QWORD *)(v280 + 408) = v234;
      v28 = v260;
      v228 = objc_msgSend(v260, sel_parameterKeyPaths);
      if (v228)
      {
        v226 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v227 = v226;
      }
      else
      {
        v227 = 0;
      }
      *(_QWORD *)(v280 + 736) = v227;
      if (*(_QWORD *)(v280 + 736))
      {
        *(_QWORD *)(v280 + 416) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v280 + 424) = v29;
        v30 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v30);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v280 + 432) = SiriKitPaymentsIntent.simpleClassName.getter();
        *(_QWORD *)(v280 + 440) = v31;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String.UTF8View();
        v32 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".feeAmount", 0xAuLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v32);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        String.init(stringInterpolation:)();
        specialized Array.append(_:)();
        if (*(_QWORD *)(v280 + 736))
        {
          v221 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v222 = v221;
        }
        else
        {
          v222 = 0;
        }
        objc_msgSend(v260, sel_setParameterKeyPaths_);

      }
      else
      {
        v225 = *(_QWORD *)(v280 + 736);
        swift_bridgeObjectRetain();
        if (v225)
        {
          v223 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v224 = v223;
        }
        else
        {
          v224 = 0;
        }
        objc_msgSend(v260, sel_setParameterKeyPaths_);

        outlined destroy of [SFCardSection]();
      }
      type metadata accessor for SFRichText();
      swift_bridgeObjectRetain();
      v33 = @nonobjc SFRichText.__allocating_init(string:)(v233, v234);
      v34 = *(void **)(v280 + 584);
      *(_QWORD *)(v280 + 584) = v33;

      swift_bridgeObjectRelease();
    }
    v220 = objc_msgSend(v262, sel_note);
    if (v220)
    {
      v216 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v217 = v35;

      v218 = v216;
      v219 = v217;
    }
    else
    {
      v218 = 0;
      v219 = 0;
    }
    v214 = Optional<A>.emptyToNil.getter(v218, v219);
    v215 = v36;
    if (v36)
    {
      *(_QWORD *)(v280 + 352) = v214;
      *(_QWORD *)(v280 + 360) = v36;
      swift_bridgeObjectRelease();
      v37 = v261;
      _allocateUninitializedArray<A>(_:)();
      v212 = v38;
      *(_QWORD *)(v280 + 368) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v280 + 376) = v39;
      v40 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v40);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v280 + 384) = SiriKitPaymentsIntent.simpleClassName.getter();
      *(_QWORD *)(v280 + 392) = v41;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String.UTF8View();
      v42 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".note", 5uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v42);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      *v212 = String.init(stringInterpolation:)();
      v212[1] = v43;
      _finalizeUninitializedArray<A>(_:)();
      v213 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v261, sel_setParameterKeyPaths_, v213);

      type metadata accessor for SFRichText();
      swift_bridgeObjectRetain();
      v44 = @nonobjc SFRichText.__allocating_init(string:)(v214, v215);
      v45 = *(void **)(v280 + 592);
      *(_QWORD *)(v280 + 592) = v44;

    }
    swift_bridgeObjectRelease();

LABEL_112:
    v90 = v259;
    v151 = *(_QWORD *)(v280 + 96);
    v152 = *(_QWORD *)(v280 + 104);
    swift_bridgeObjectRetain();
    if (v152)
    {
      v149 = MEMORY[0x24957220C](v151);
      swift_bridgeObjectRelease();
      v150 = (void *)v149;
    }
    else
    {
      v150 = 0;
    }
    objc_msgSend(v259, sel_setSubtitle_);

    v91 = v259;
    objc_msgSend(v259, sel_setIsCentered_, 1);

    v92 = v265;
    *(_QWORD *)(v280 + 648) = v265;
    *(_QWORD *)(v280 + 968) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
    Array.append(_:)();
    v93 = v259;
    v148 = objc_msgSend(v259, sel_title);
    if (v148)
    {
      v144 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v145 = v94;

      v146 = v144;
      v147 = v145;
    }
    else
    {
      v146 = 0;
      v147 = 0;
    }

    v142 = Optional<A>.emptyToNil.getter(v146, v147);
    v143 = v95;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v280 + 160) = v142;
    *(_QWORD *)(v280 + 168) = v143;
    v141 = *(_QWORD *)(v280 + 168) != 0;
    outlined destroy of String.UTF8View();
    v96 = v259;
    if (v141)
    {
      v140 = 1;
    }
    else
    {
      v97 = v259;
      v139 = objc_msgSend(v259, sel_subtitle);
      if (v139)
      {
        v135 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v136 = v98;

        v137 = v135;
        v138 = v136;
      }
      else
      {
        v137 = 0;
        v138 = 0;
      }

      v133 = Optional<A>.emptyToNil.getter(v137, v138);
      v134 = v99;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v280 + 176) = v133;
      *(_QWORD *)(v280 + 184) = v134;
      v132 = *(_QWORD *)(v280 + 184) != 0;
      outlined destroy of String.UTF8View();
      v140 = v132;
    }

    if ((v140 & 1) != 0)
    {
      v100 = v259;
      *(_QWORD *)(v280 + 696) = v259;
      Array.append(_:)();
    }
    v131 = *(void **)(v280 + 592);
    v101 = v131;
    *(_QWORD *)(v280 + 656) = v131;
    v130 = *(_QWORD *)(v280 + 656) != 0;
    outlined destroy of SFRichText?((id *)(v280 + 656));
    if (v130)
    {
      v126 = *(_QWORD *)(v280 + 856);
      v125 = *(_QWORD *)(v280 + 840);
      *(_QWORD *)(v280 + 976) = type metadata accessor for SFRichText();
      outlined init with copy of GlobalsProviding(v125 + 80, v280 + 56);
      v127 = *(_QWORD *)(v280 + 80);
      v128 = *(_QWORD *)(v280 + 88);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v280 + 56), v127);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Note", 4uLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v102 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v102 - 8) + 56))(v126, 0, 1);
      v129 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v128 + 8) + **(int **)(v128 + 8));
      v103 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v280 + 984) = v103;
      *v103 = *(_QWORD *)(v280 + 480);
      v103[1] = ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:);
      return v129(*(_QWORD *)(v280 + 888), *(_QWORD *)(v280 + 856), v127, v128);
    }
    else
    {
      v104 = *(void **)(v280 + 584);
      v105 = v104;
      *(_QWORD *)(v280 + 664) = v104;
      v124 = *(_QWORD *)(v280 + 664) != 0;
      outlined destroy of SFRichText?((id *)(v280 + 664));
      if (v124)
      {
        v120 = *(_QWORD *)(v280 + 848);
        v119 = *(_QWORD *)(v280 + 840);
        *(_QWORD *)(v280 + 1000) = type metadata accessor for SFRichText();
        outlined init with copy of GlobalsProviding(v119 + 80, v280 + 16);
        v121 = *(_QWORD *)(v280 + 40);
        v122 = *(_QWORD *)(v280 + 48);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v280 + 16), v121);
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("feeAmount", 9uLL, 1);
        String.toSpeakableString.getter();
        swift_bridgeObjectRelease();
        v106 = type metadata accessor for SpeakableString();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v106 - 8) + 56))(v120, 0, 1);
        v123 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v122 + 16) + **(int **)(v122 + 16));
        v107 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v280 + 1008) = v107;
        *v107 = *(_QWORD *)(v280 + 480);
        v107[1] = ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:);
        return v123(*(_QWORD *)(v280 + 880), *(_QWORD *)(v280 + 848), v121, v122);
      }
      else
      {
        v114 = *(id *)(v280 + 808);
        v115 = *(id *)(v280 + 800);
        v116 = *(_QWORD *)(v280 + 792);
        type metadata accessor for SACardSnippet();
        swift_bridgeObjectRetain();
        v108 = v115;
        v109 = v114;
        v118 = (id)static SACardSnippet.makeFromCardSectionsWithIntentData(cardSections:intent:intentResponse:shouldGenerateAceId:)();
        *(_QWORD *)(v280 + 1024) = v118;

        swift_bridgeObjectRelease();
        *(_QWORD *)(v280 + 672) = v118;
        v110 = v118;
        v111 = default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
        v117 = static AceViewProviding.makeSash(app:isDisambiguation:)(v116, v111 & 1);
        objc_msgSend(v118, sel_setSash_);

        v112 = v118;
        v113 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v280 + 1032) = v113;
        *v113 = *(_QWORD *)(v280 + 480);
        v113[1] = ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:);
        return ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:)(*(_QWORD *)(v280 + 816));
      }
    }
  }
  objc_opt_self();
  v211 = (id)swift_dynamicCastObjCClass();
  if (v211)
  {
    v46 = v211;
    *(_QWORD *)(v280 + 640) = v211;
    v47 = v259;
    _allocateUninitializedArray<A>(_:)();
    v208 = v48;
    *(_QWORD *)(v280 + 128) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v280 + 136) = v49;
    v50 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v50);
    swift_bridgeObjectRelease();
    type metadata accessor for INSendPaymentIntent();
    *(_QWORD *)(v280 + 144) = SiriKitPaymentsIntent.simpleClassName.getter();
    *(_QWORD *)(v280 + 152) = v51;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String.UTF8View();
    v52 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".payee", 6uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    *v208 = String.init(stringInterpolation:)();
    v208[1] = v53;
    _finalizeUninitializedArray<A>(_:)();
    v209 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v259, sel_setParameterKeyPaths_, v209);

    v54 = v259;
    v210 = objc_msgSend(v211, sel_payee);
    if (v210)
    {
      v203 = objc_msgSend(v210, sel_displayName);
      v204 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v205 = v55;

      v206 = v204;
      v207 = v205;
    }
    else
    {
      v206 = 0;
      v207 = 0;
    }
    if (v207)
    {
      v201 = MEMORY[0x24957220C](v206);
      swift_bridgeObjectRelease();
      v202 = (void *)v201;
    }
    else
    {
      v202 = 0;
    }
    objc_msgSend(v259, sel_setTitle_);

    v200 = objc_msgSend(v211, sel_currencyAmount);
    if (v200)
    {
      *(_QWORD *)(v280 + 712) = v200;
      v56 = v259;
      v199 = objc_msgSend(v259, sel_parameterKeyPaths);
      if (v199)
      {
        v197 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v198 = v197;
      }
      else
      {
        v198 = 0;
      }
      *(_QWORD *)(v280 + 720) = v198;
      if (*(_QWORD *)(v280 + 720))
      {
        *(_QWORD *)(v280 + 288) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v280 + 296) = v57;
        v58 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v58);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v280 + 304) = SiriKitPaymentsIntent.simpleClassName.getter();
        *(_QWORD *)(v280 + 312) = v59;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String.UTF8View();
        v60 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".currencyAmount", 0xFuLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v60);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        String.init(stringInterpolation:)();
        specialized Array.append(_:)();
        if (*(_QWORD *)(v280 + 720))
        {
          v192 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v193 = v192;
        }
        else
        {
          v193 = 0;
        }
        objc_msgSend(v259, sel_setParameterKeyPaths_);

      }
      else
      {
        v196 = *(_QWORD *)(v280 + 720);
        swift_bridgeObjectRetain();
        if (v196)
        {
          v194 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v195 = v194;
        }
        else
        {
          v195 = 0;
        }
        objc_msgSend(v259, sel_setParameterKeyPaths_);

        outlined destroy of [SFCardSection]();
      }
      *(_QWORD *)(v280 + 96) = INCurrencyAmount.formattedString.getter();
      *(_QWORD *)(v280 + 104) = v61;
      swift_bridgeObjectRelease();

    }
    v191 = (id)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(v280 + 832) + 8))(*(_QWORD *)(v280 + 824));
    if (v191
      && (v190 = objc_msgSend(v191, sel_feeAmount), v191, v190))
    {
      v184 = INCurrencyAmount.formattedString.getter();
      v185 = v62;

      v186 = Optional<A>.emptyToNil.getter(v184, v185);
      v187 = v63;
      swift_bridgeObjectRelease();
      v188 = v186;
      v189 = v187;
    }
    else
    {
      v188 = 0;
      v189 = 0;
    }
    if (v189)
    {
      *(_QWORD *)(v280 + 240) = v188;
      *(_QWORD *)(v280 + 248) = v189;
      v64 = v260;
      v183 = objc_msgSend(v260, sel_parameterKeyPaths);
      if (v183)
      {
        v181 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v182 = v181;
      }
      else
      {
        v182 = 0;
      }
      *(_QWORD *)(v280 + 704) = v182;
      if (*(_QWORD *)(v280 + 704))
      {
        *(_QWORD *)(v280 + 256) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v280 + 264) = v65;
        v66 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v66);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v280 + 272) = SiriKitPaymentsIntent.simpleClassName.getter();
        *(_QWORD *)(v280 + 280) = v67;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String.UTF8View();
        v68 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".feeAmount", 0xAuLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v68);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        String.init(stringInterpolation:)();
        specialized Array.append(_:)();
        if (*(_QWORD *)(v280 + 704))
        {
          v176 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v177 = v176;
        }
        else
        {
          v177 = 0;
        }
        objc_msgSend(v260, sel_setParameterKeyPaths_);

      }
      else
      {
        v180 = *(_QWORD *)(v280 + 704);
        swift_bridgeObjectRetain();
        if (v180)
        {
          v178 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v179 = v178;
        }
        else
        {
          v179 = 0;
        }
        objc_msgSend(v260, sel_setParameterKeyPaths_);

        outlined destroy of [SFCardSection]();
      }
      type metadata accessor for SFRichText();
      swift_bridgeObjectRetain();
      v69 = @nonobjc SFRichText.__allocating_init(string:)(v188, v189);
      v70 = *(void **)(v280 + 584);
      *(_QWORD *)(v280 + 584) = v69;

      swift_bridgeObjectRelease();
    }
    v175 = objc_msgSend(v211, sel_note);
    if (v175)
    {
      v171 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v172 = v71;

      v173 = v171;
      v174 = v172;
    }
    else
    {
      v173 = 0;
      v174 = 0;
    }
    v169 = Optional<A>.emptyToNil.getter(v173, v174);
    v170 = v72;
    if (v72)
    {
      *(_QWORD *)(v280 + 192) = v169;
      *(_QWORD *)(v280 + 200) = v72;
      swift_bridgeObjectRelease();
      v73 = v261;
      _allocateUninitializedArray<A>(_:)();
      v167 = v74;
      *(_QWORD *)(v280 + 208) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v280 + 216) = v75;
      v76 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v76);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v280 + 224) = SiriKitPaymentsIntent.simpleClassName.getter();
      *(_QWORD *)(v280 + 232) = v77;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String.UTF8View();
      v78 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".note", 5uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v78);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      *v167 = String.init(stringInterpolation:)();
      v167[1] = v79;
      _finalizeUninitializedArray<A>(_:)();
      v168 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v261, sel_setParameterKeyPaths_, v168);

      type metadata accessor for SFRichText();
      swift_bridgeObjectRetain();
      v80 = @nonobjc SFRichText.__allocating_init(string:)(v169, v170);
      v81 = *(void **)(v280 + 592);
      *(_QWORD *)(v280 + 592) = v80;

    }
    swift_bridgeObjectRelease();

    goto LABEL_112;
  }
  v82 = *(_QWORD *)(v280 + 912);
  v162 = *(_QWORD *)(v280 + 896);
  v83 = Logger.payments.unsafeMutableAddressor();
  v283(v82, v83, v162);
  oslog = Logger.logObject.getter();
  v164 = static os_log_type_t.error.getter();
  *(_QWORD *)(v280 + 600) = 2;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v280 + 1060);
  v166 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v164))
  {
    v158 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v157 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v159 = createStorage<A>(capacity:type:)(0);
    v160 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v280 + 608) = v158;
    *(_QWORD *)(v280 + 616) = v159;
    *(_QWORD *)(v280 + 624) = v160;
    serialize(_:at:)(0, (_BYTE **)(v280 + 608));
    serialize(_:at:)(0, (_BYTE **)(v280 + 608));
    *(_QWORD *)(v280 + 632) = v166;
    v161 = (_QWORD *)swift_task_alloc();
    v161[2] = v280 + 608;
    v161[3] = v280 + 616;
    v161[4] = v280 + 624;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, oslog, v164, "#ConfirmationViewBuilder makePaymentConfirmationView (Phone) encountered unexpected intent type", v158, size);
    destroyStorage<A>(_:count:)(v159, 0, v157);
    destroyStorage<A>(_:count:)(v160, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v158, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v153 = *(_QWORD *)(v280 + 912);
  v154 = *(_QWORD *)(v280 + 896);

  v274(v153, v154);
  *(_QWORD *)(v280 + 112) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v280 + 120) = v84;
  v85 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v85);
  swift_bridgeObjectRelease();
  swift_getObjectType();
  DefaultStringInterpolation.appendInterpolation(_:)();
  v86 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v86);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  v156 = String.init(stringInterpolation:)();
  v155 = v87;
  lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
  swift_allocError();
  *(_QWORD *)v88 = v156;
  *(_QWORD *)(v88 + 8) = v155;
  *(_QWORD *)(v88 + 16) = 0;
  *(_QWORD *)(v88 + 24) = 0;
  *(_QWORD *)(v88 + 32) = 0;
  *(_QWORD *)(v88 + 40) = 0;
  *(_BYTE *)(v88 + 48) = 4;
  swift_willThrow();
  outlined destroy of SFRichText?((id *)(v280 + 592));
  outlined destroy of SFRichText?((id *)(v280 + 584));
  outlined destroy of String.UTF8View();

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v280 + 480) + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 480) = *v1;
  *(_QWORD *)(v2 + 992) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 840));
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;
  id v9;
  id v10;
  id v11;
  char v12;
  id v13;
  _QWORD *v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD, _QWORD, uint64_t, uint64_t);
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  void *v34;

  v34 = (void *)v0[120];
  v28 = v0[111];
  v27 = v0[109];
  v29 = v0[108];
  v0[60] = v0;
  v30 = TemplatingResult.resultSectionsAsString.getter();
  v31 = v1;
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v29);
  v32 = @nonobjc SFRichText.__allocating_init(string:)(v30, v31);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  objc_msgSend(v34, sel_setLeadingText_, v32);

  v33 = (void *)v0[74];
  v2 = v33;
  objc_msgSend(v34, sel_setTrailingText_, v33);

  v3 = v34;
  v0[86] = v34;
  Array.append(_:)();
  v4 = (void *)v0[73];
  v5 = v4;
  v0[83] = v4;
  v25 = v0[83] != 0;
  outlined destroy of SFRichText?((id *)(v26 + 664));
  if (v25)
  {
    v21 = *(_QWORD *)(v26 + 848);
    v20 = *(_QWORD *)(v26 + 840);
    *(_QWORD *)(v26 + 1000) = type metadata accessor for SFRichText();
    outlined init with copy of GlobalsProviding(v20 + 80, v26 + 16);
    v22 = *(_QWORD *)(v26 + 40);
    v23 = *(_QWORD *)(v26 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v26 + 16), v22);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("feeAmount", 9uLL, 1);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v6 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v21, 0, 1);
    v24 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 + 16) + **(int **)(v23 + 16));
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v26 + 1008) = v7;
    *v7 = *(_QWORD *)(v26 + 480);
    v7[1] = ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:);
    return v24(*(_QWORD *)(v26 + 880), *(_QWORD *)(v26 + 848), v22, v23);
  }
  else
  {
    v15 = *(id *)(v26 + 808);
    v16 = *(id *)(v26 + 800);
    v17 = *(_QWORD *)(v26 + 792);
    type metadata accessor for SACardSnippet();
    swift_bridgeObjectRetain();
    v9 = v16;
    v10 = v15;
    v19 = (id)static SACardSnippet.makeFromCardSectionsWithIntentData(cardSections:intent:intentResponse:shouldGenerateAceId:)();
    *(_QWORD *)(v26 + 1024) = v19;

    swift_bridgeObjectRelease();
    *(_QWORD *)(v26 + 672) = v19;
    v11 = v19;
    v12 = default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v18 = static AceViewProviding.makeSash(app:isDisambiguation:)(v17, v12 & 1);
    objc_msgSend(v19, sel_setSash_);

    v13 = v19;
    v14 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v26 + 1032) = v14;
    *v14 = *(_QWORD *)(v26 + 480);
    v14[1] = ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:);
    return ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:)(*(_QWORD *)(v26 + 816));
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 480) = *v1;
  *(_QWORD *)(v2 + 1016) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 832));
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  char v7;
  id v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  _QWORD *v24;

  v18 = (id)v0[119];
  v12 = v0[110];
  v11 = v0[109];
  v13 = v0[108];
  v0[60] = v0;
  v14 = TemplatingResult.resultSectionsAsString.getter();
  v15 = v1;
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  v16 = @nonobjc SFRichText.__allocating_init(string:)(v14, v15);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  objc_msgSend(v18, sel_setLeadingText_, v16);

  v17 = (id)v0[73];
  v2 = v17;
  objc_msgSend(v18, sel_setTrailingText_, v17);

  v3 = v18;
  v0[85] = v18;
  Array.append(_:)();
  v19 = (id)v0[101];
  v20 = (id)v0[100];
  v21 = v0[99];
  type metadata accessor for SACardSnippet();
  swift_bridgeObjectRetain();
  v4 = v20;
  v5 = v19;
  v23 = (id)static SACardSnippet.makeFromCardSectionsWithIntentData(cardSections:intent:intentResponse:shouldGenerateAceId:)();
  v0[128] = v23;

  swift_bridgeObjectRelease();
  v0[84] = v23;
  v6 = v23;
  v7 = default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v22 = static AceViewProviding.makeSash(app:isDisambiguation:)(v21, v7 & 1);
  objc_msgSend(v23, sel_setSash_);

  v8 = v23;
  v9 = (_QWORD *)swift_task_alloc();
  v24[129] = v9;
  *v9 = v24[60];
  v9[1] = ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:);
  return ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:)(v24[102]);
}

{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  id v3;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v5 = *(id *)(v0 + 1040);
  v1 = *(void **)(v0 + 1024);
  v8 = v1;
  v9 = *(id *)(v0 + 960);
  v10 = *(id *)(v0 + 952);
  v11 = *(id *)(v0 + 944);
  v12 = *(id *)(v0 + 936);
  v13 = *(id *)(v0 + 928);
  *(_QWORD *)(v0 + 480) = v0;
  objc_msgSend(v1, sel_setConfirmationOptions_);

  type metadata accessor for SAAceView();
  v7 = _allocateUninitializedArray<A>(_:)();
  v6 = v2;
  v3 = v8;
  *v6 = v8;
  _finalizeUninitializedArray<A>(_:)();

  outlined destroy of SFRichText?((id *)(v0 + 592));
  outlined destroy of SFRichText?((id *)(v0 + 584));
  outlined destroy of String.UTF8View();

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 480) + 8))(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v3 = *(id *)(v0 + 960);
  v4 = *(id *)(v0 + 952);
  v5 = *(id *)(v0 + 944);
  v6 = *(id *)(v0 + 936);
  v7 = *(id *)(v0 + 928);
  v1 = *(_QWORD *)(v0 + 856);
  *(_QWORD *)(v0 + 480) = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  outlined destroy of SFRichText?((id *)(v0 + 592));
  outlined destroy of SFRichText?((id *)(v0 + 584));
  outlined destroy of String.UTF8View();

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 480) + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v3 = *(id *)(v0 + 960);
  v4 = *(id *)(v0 + 952);
  v5 = *(id *)(v0 + 944);
  v6 = *(id *)(v0 + 936);
  v7 = *(id *)(v0 + 928);
  v1 = *(_QWORD *)(v0 + 848);
  *(_QWORD *)(v0 + 480) = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  outlined destroy of SFRichText?((id *)(v0 + 592));
  outlined destroy of SFRichText?((id *)(v0 + 584));
  outlined destroy of String.UTF8View();

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 480) + 8))();
}

{
  uint64_t v0;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v2 = *(id *)(v0 + 1024);
  v3 = *(id *)(v0 + 960);
  v4 = *(id *)(v0 + 952);
  v5 = *(id *)(v0 + 944);
  v6 = *(id *)(v0 + 936);
  v7 = *(id *)(v0 + 928);
  *(_QWORD *)(v0 + 480) = v0;

  outlined destroy of SFRichText?((id *)(v0 + 592));
  outlined destroy of SFRichText?((id *)(v0 + 584));
  outlined destroy of String.UTF8View();

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 480) + 8))();
}

uint64_t ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[60] = *v2;
  v3[130] = a1;
  v3[131] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v21;

  v9[79] = v8;
  v9[78] = v21;
  v9[77] = a8;
  v9[76] = a7;
  v9[75] = a6;
  v9[74] = a5;
  v9[73] = a4;
  v9[72] = a3;
  v9[71] = a2;
  v9[70] = a1;
  v9[46] = v9;
  v9[47] = 0;
  v9[48] = 0;
  v9[49] = 0;
  v9[50] = 0;
  v9[51] = 0;
  v9[52] = 0;
  v9[53] = 0;
  v9[26] = 0;
  v9[27] = 0;
  v9[28] = 0;
  v9[29] = 0;
  v9[54] = 0;
  v9[55] = 0;
  v9[57] = 0;
  v9[59] = 0;
  v9[30] = 0;
  v9[31] = 0;
  v9[32] = 0;
  v9[33] = 0;
  v9[65] = 0;
  v9[66] = 0;
  v9[67] = 0;
  v9[68] = 0;
  v9[69] = 0;
  v10 = type metadata accessor for Logger();
  v9[80] = v10;
  v9[81] = *(_QWORD *)(v10 - 8);
  v9[82] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  v9[83] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  v9[84] = swift_task_alloc();
  type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
  v9[85] = swift_task_alloc();
  type metadata accessor for DialogPhase();
  v9[86] = swift_task_alloc();
  v11 = type metadata accessor for NLContextUpdate();
  v9[87] = v11;
  v9[88] = *(_QWORD *)(v11 - 8);
  v9[89] = swift_task_alloc();
  v9[90] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  v9[91] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  v9[92] = swift_task_alloc();
  type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
  v9[93] = swift_task_alloc();
  v12 = type metadata accessor for OutputGenerationManifest();
  v9[94] = v12;
  v9[95] = *(_QWORD *)(v12 - 8);
  v9[96] = swift_task_alloc();
  v9[97] = swift_task_alloc();
  v9[98] = type metadata accessor for SiriPaymentsSnippetModel();
  v9[99] = swift_task_alloc();
  v9[100] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v9[101] = swift_task_alloc();
  v9[102] = swift_task_alloc();
  v13 = type metadata accessor for TemplatingResult();
  v9[103] = v13;
  v9[104] = *(_QWORD *)(v13 - 8);
  v9[105] = swift_task_alloc();
  v9[106] = swift_task_alloc();
  v9[107] = swift_task_alloc();
  v9[47] = a2;
  v9[48] = a3;
  v9[49] = a4;
  v9[50] = a5;
  v9[51] = a6;
  v9[52] = a7;
  v9[53] = v8;
  return swift_task_switch();
}

uint64_t ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 600);
  *(_QWORD *)(v0 + 368) = v0;
  v5 = v1[3];
  v6 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v5);
  v7 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 + 8) + **(int **)(v6 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  v4[108] = v2;
  *v2 = v4[46];
  v2[1] = ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:);
  return v7(v4[107], v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 368) = *v1;
  *(_QWORD *)(v2 + 872) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  v7 = v0[107];
  v6 = v0[104];
  v8 = v0[103];
  v9 = v0[79];
  v0[46] = v0;
  v1 = TemplatingResult.resultSectionsAsString.getter();
  v0[110] = v1;
  v0[111] = v2;
  v0[26] = v1;
  v0[27] = v2;
  v3 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[112] = v3;
  v3(v7, v8);
  outlined init with copy of GlobalsProviding(v9, (uint64_t)(v0 + 16));
  v13 = v0[19];
  v11 = v0[20];
  __swift_project_boxed_opaque_existential_1(v0 + 16, v13);
  v12 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v11 + 8) + **(int **)(v11 + 8));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 904) = v4;
  *v4 = *(_QWORD *)(v10 + 368);
  v4[1] = ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:);
  return v12(v13, v11);
}

{
  _QWORD *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, uint64_t);
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;

  v23 = v0[116];
  v22 = v0[115];
  v21 = v0[111];
  v20 = v0[110];
  v0[46] = v0;
  v0[28] = v22;
  v0[29] = v23;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 16));
  v1 = ConfirmationViewBuilder.makeYesNoOptions(yesLabel:noLabel:)(v20, v21, v22, v23);
  v24 = v2;
  v0[117] = v1;
  v0[118] = v2;
  v0[54] = v1;
  v0[55] = v2;
  v25 = objc_msgSend(v1, sel_commands);
  if (v25)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v18 = v17;
  }
  else
  {
    v18 = 0;
  }
  if (!v18)
    return _assertionFailure(_:_:file:line:flags:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Array.subscript.getter();
  v3 = v19[56];
  v19[119] = v3;
  v19[57] = v3;
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v24, sel_commands);
  if (v16)
  {
    v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v15 = v14;
  }
  else
  {
    v15 = 0;
  }
  if (!v15)
    return _assertionFailure(_:_:file:line:flags:)();
  v10 = v19[102];
  v9 = (_QWORD *)v19[76];
  Array.subscript.getter();
  v4 = v19[58];
  v19[120] = v4;
  v19[59] = v4;
  swift_bridgeObjectRelease();
  v11 = v9[3];
  v12 = v9[4];
  __swift_project_boxed_opaque_existential_1(v9, v11);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("note", 4uLL, 1);
  SpeakableString.init(serializedValue:)();
  v5 = type metadata accessor for SpeakableString();
  v19[121] = v5;
  v6 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v19[122] = v6;
  v6(v10, 0, 1);
  v13 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 + 16) + **(int **)(v12 + 16));
  v7 = (_QWORD *)swift_task_alloc();
  v19[123] = v7;
  *v7 = v19[46];
  v7[1] = ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:);
  return v13(v19[106], v19[102], v11, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 368) = *v1;
  *(_QWORD *)(v2 + 992) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 800));
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD, _QWORD, uint64_t, uint64_t);

  v11 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v0[122];
  v10 = v0[121];
  v5 = (void (*)(uint64_t, uint64_t))v0[112];
  v6 = v0[106];
  v7 = v0[103];
  v9 = v0[101];
  v8 = (_QWORD *)v0[76];
  v0[46] = v0;
  v1 = TemplatingResult.resultSectionsAsString.getter();
  v0[125] = v1;
  v0[126] = v2;
  v0[30] = v1;
  v0[31] = v2;
  v5(v6, v7);
  v13 = v8[3];
  v14 = v8[4];
  __swift_project_boxed_opaque_existential_1(v8, v13);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("feeAmount", 9uLL, 1);
  SpeakableString.init(serializedValue:)();
  v11(v9, 0, 1, v10);
  v15 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 + 16) + **(int **)(v14 + 16));
  v3 = (_QWORD *)swift_task_alloc();
  v12[127] = v3;
  *v3 = v12[46];
  v3[1] = ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:);
  return v15(v12[105], v12[101], v13, v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 368) = *v1;
  *(_QWORD *)(v2 + 1024) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 792));
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  char has_malloc_size;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v28;
  id v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_QWORD, uint64_t, uint64_t, _QWORD);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  uint8_t *buf;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint32_t size;
  os_log_type_t v58;
  NSObject *oslog;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  Swift::String v117;

  v108 = (void (*)(uint64_t, uint64_t))v0[112];
  v109 = v0[105];
  v111 = v0[103];
  v0[46] = v0;
  v110 = TemplatingResult.resultSectionsAsString.getter();
  v112 = v1;
  v0[129] = v1;
  v0[32] = v110;
  v0[33] = v1;
  v108(v109, v111);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_getObjectType();
  swift_unknownObjectRetain();
  v113 = SAClientBoundCommand.data.getter();
  v114 = v2;
  swift_unknownObjectRelease();
  swift_getObjectType();
  swift_unknownObjectRetain();
  v115 = SAClientBoundCommand.data.getter();
  v116 = v3;
  swift_unknownObjectRelease();
  v0[34] = App.appIdentifier.getter();
  v0[35] = v4;
  if (v0[35])
  {
    v117 = *(Swift::String *)(v107 + 272);
  }
  else
  {
    v117 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of String.UTF8View();
  }
  SiriPaymentsSnippetModel.PaymentConfirmationModel.init(confirmLabel:cancelLabel:noteLabel:feeLabel:confirmDI:cancelDI:appId:)(*(_QWORD *)(v107 + 880), *(_QWORD *)(v107 + 888), *(_QWORD *)(v107 + 920), *(_QWORD *)(v107 + 928), *(_QWORD *)(v107 + 1000), *(_QWORD *)(v107 + 1008), v110, v112, (_QWORD *)(v107 + 16), v113, v114, v115, v116, v117._countAndFlagsBits, (uint64_t)v117._object);
  if (App.isFirstParty.getter())
  {
    v5 = *(id *)(v107 + 576);
    v106 = App.systemUIExtensionBundleId.getter();
    if (v6)
    {
      v104 = MEMORY[0x24957220C](v106);
      swift_bridgeObjectRelease();
      v105 = (void *)v104;
    }
    else
    {
      v105 = 0;
    }
    v103 = *(id *)(v107 + 576);
    objc_msgSend(v103, sel__setUiExtensionBundleId_);

  }
  v102 = *(id *)(v107 + 584);
  v101 = *(id *)(v107 + 576);
  v7 = v101;
  v8 = v102;
  v9 = v101;
  v10 = v102;
  *(_QWORD *)(v107 + 288) = v101;
  *(_QWORD *)(v107 + 296) = v102;
  swift_getTupleTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INRequestPaymentIntent, INRequestPaymentIntentResponse));
  if ((swift_dynamicCast() & 1) != 0)
  {
    v86 = *(char **)(v107 + 800);
    v85 = *(char **)(v107 + 792);
    v90 = *(_QWORD *)(v107 + 776);
    v91 = *(_QWORD *)(v107 + 768);
    v89 = *(_QWORD *)(v107 + 760);
    v92 = *(_QWORD *)(v107 + 752);
    v96 = *(_QWORD *)(v107 + 744);
    v84 = *(_QWORD *)(v107 + 736);
    v83 = *(_QWORD *)(v107 + 728);
    v95 = *(_QWORD *)(v107 + 720);
    v88 = *(_QWORD *)(v107 + 712);
    v87 = *(_QWORD *)(v107 + 704);
    v93 = *(_QWORD *)(v107 + 696);
    v100 = *(id *)(v107 + 584);
    v99 = *(id *)(v107 + 576);
    v98 = *(id *)(v107 + 304);
    v97 = *(id *)(v107 + 312);
    *(_QWORD *)(v107 + 544) = v98;
    *(_QWORD *)(v107 + 552) = v97;
    v11 = v98;
    type metadata accessor for INRequestPaymentIntent();
    CodableIntent.init(wrappedValue:)();
    v12 = v97;
    type metadata accessor for INRequestPaymentIntentResponse();
    CodableIntentResponse.init(wrappedValue:)();
    outlined retain of SiriPaymentsSnippetModel.PaymentConfirmationModel((_QWORD *)(v107 + 16));
    SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.init(intent:response:confirmation:)(v84, v83, (const void *)(v107 + 16), v96);
    outlined init with copy of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(v96, (uint64_t)v85);
    swift_storeEnumTagMultiPayload();
    outlined init with take of SiriPaymentsSnippetModel(v85, v86);
    static PaymentsContextProvider.confirmationContextUpdate(isSend:)(0, v95);
    static DialogPhase.confirmation.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 16))(v88, v95, v93);
    *(_QWORD *)(swift_task_alloc() + 16) = v88;
    OutputGenerationManifest.init(dialogPhase:_:)();
    swift_task_dealloc();
    v94 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
    v94(v88, v93);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 32))(v90, v91, v92);
    v94(v95, v93);
    outlined destroy of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(v96);

    outlined destroy of (A, B)((id *)(v107 + 288));
LABEL_19:
    v32 = *(uint64_t **)(v107 + 800);
    v31 = *(_QWORD *)(v107 + 784);
    v37 = *(_QWORD *)(v107 + 776);
    v39 = *(_QWORD *)(v107 + 768);
    v36 = *(_QWORD *)(v107 + 760);
    v38 = *(_QWORD *)(v107 + 752);
    v34 = *(id *)(v107 + 592);
    type metadata accessor for ResponseFactory();
    *(_QWORD *)(v107 + 1040) = ResponseFactory.__allocating_init()();
    *(_QWORD *)(v107 + 192) = v31;
    *(_QWORD *)(v107 + 200) = lazy protocol witness table accessor for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v107 + 168));
    outlined init with copy of SiriPaymentsSnippetModel(v32, boxed_opaque_existential_1);
    type metadata accessor for DialogExecutionResult();
    v35 = _allocateUninitializedArray<A>(_:)();
    v33 = v28;
    v29 = v34;
    *v33 = v34;
    _finalizeUninitializedArray<A>(_:)();
    *(_QWORD *)(v107 + 1048) = v35;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v39, v37, v38);
    v40 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))(MEMORY[0x24BE97EE0] + (int)*MEMORY[0x24BE97EE0]);
    v30 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v107 + 1056) = v30;
    *v30 = *(_QWORD *)(v107 + 368);
    v30[1] = ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:);
    return v40(*(_QWORD *)(v107 + 560), v107 + 168, v35, *(_QWORD *)(v107 + 768));
  }
  v82 = *(id *)(v107 + 584);
  v81 = *(id *)(v107 + 576);
  outlined destroy of (A, B)((id *)(v107 + 288));
  v13 = v81;
  v14 = v82;
  *(_QWORD *)(v107 + 320) = v81;
  *(_QWORD *)(v107 + 328) = v82;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INSendPaymentIntent, INSendPaymentIntentResponse));
  if ((swift_dynamicCast() & 1) != 0)
  {
    v65 = *(char **)(v107 + 800);
    v64 = *(char **)(v107 + 792);
    v66 = *(_QWORD *)(v107 + 720);
    v63 = *(_QWORD *)(v107 + 680);
    v62 = *(_QWORD *)(v107 + 672);
    v61 = *(_QWORD *)(v107 + 664);
    v78 = *(id *)(v107 + 336);
    v77 = *(id *)(v107 + 344);
    *(_QWORD *)(v107 + 520) = v78;
    *(_QWORD *)(v107 + 528) = v77;
    v15 = v78;
    type metadata accessor for INSendPaymentIntent();
    CodableIntent.init(wrappedValue:)();
    v16 = v77;
    type metadata accessor for INSendPaymentIntentResponse();
    CodableIntentResponse.init(wrappedValue:)();
    outlined retain of SiriPaymentsSnippetModel.PaymentConfirmationModel((_QWORD *)(v107 + 16));
    SiriPaymentsSnippetModel.SendPaymentConfirmationModel.init(intent:response:confirmation:)(v62, v61, (const void *)(v107 + 16), v63);
    outlined init with copy of SiriPaymentsSnippetModel.SendPaymentConfirmationModel(v63, (uint64_t)v64);
    swift_storeEnumTagMultiPayload();
    outlined init with take of SiriPaymentsSnippetModel(v64, v65);
    *(_QWORD *)(v107 + 536) = v66;
    v70 = *(_QWORD *)(v107 + 776);
    v71 = *(_QWORD *)(v107 + 768);
    v69 = *(_QWORD *)(v107 + 760);
    v72 = *(_QWORD *)(v107 + 752);
    v75 = *(_QWORD *)(v107 + 720);
    v68 = *(_QWORD *)(v107 + 712);
    v67 = *(_QWORD *)(v107 + 704);
    v73 = *(_QWORD *)(v107 + 696);
    v76 = *(_QWORD *)(v107 + 680);
    v80 = *(id *)(v107 + 584);
    v79 = *(id *)(v107 + 576);
    has_malloc_size = _swift_stdlib_has_malloc_size();
    static PaymentsContextProvider.confirmationContextUpdate(isSend:)(has_malloc_size & 1, v75);
    static DialogPhase.confirmation.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v68, v75, v73);
    *(_QWORD *)(swift_task_alloc() + 16) = v68;
    OutputGenerationManifest.init(dialogPhase:_:)();
    swift_task_dealloc();
    v74 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
    v74(v68, v73);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 32))(v70, v71, v72);
    v74(v75, v73);
    outlined destroy of SiriPaymentsSnippetModel.SendPaymentConfirmationModel(v76);

    outlined destroy of (A, B)((id *)(v107 + 320));
    goto LABEL_19;
  }
  v18 = *(_QWORD *)(v107 + 656);
  v55 = *(_QWORD *)(v107 + 648);
  v56 = *(_QWORD *)(v107 + 640);
  outlined destroy of (A, B)((id *)(v107 + 320));
  v19 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v18, v19, v56);
  oslog = Logger.logObject.getter();
  v58 = static os_log_type_t.error.getter();
  *(_QWORD *)(v107 + 480) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v107 + 1072);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v60 = _allocateUninitializedArray<A>(_:)();
  if (!os_log_type_enabled(oslog, v58))
  {
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  v20 = *(_QWORD *)(v107 + 1024);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
  v52 = createStorage<A>(capacity:type:)(0);
  v53 = createStorage<A>(capacity:type:)(0);
  *(_QWORD *)(v107 + 488) = buf;
  *(_QWORD *)(v107 + 496) = v52;
  *(_QWORD *)(v107 + 504) = v53;
  serialize(_:at:)(0, (_BYTE **)(v107 + 488));
  serialize(_:at:)(0, (_BYTE **)(v107 + 488));
  *(_QWORD *)(v107 + 512) = v60;
  v54 = (_QWORD *)swift_task_alloc();
  v54[2] = v107 + 488;
  v54[3] = v107 + 496;
  v54[4] = v107 + 504;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
  lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  result = Sequence.forEach(_:)();
  if (!v20)
  {
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, oslog, v58, "#ConfirmationViewBuilder makeModernizedPaymentConfirmation encountered unexpected intent type", buf, size);
    destroyStorage<A>(_:count:)(v52, 0, v50);
    destroyStorage<A>(_:count:)(v53, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
LABEL_18:
    v48 = *(id *)(v107 + 944);
    v49 = *(id *)(v107 + 936);
    v42 = *(_QWORD *)(v107 + 656);
    v41 = *(_QWORD *)(v107 + 648);
    v43 = *(_QWORD *)(v107 + 640);
    v47 = *(id *)(v107 + 584);
    v46 = *(id *)(v107 + 576);

    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
    *(_QWORD *)(v107 + 352) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v107 + 360) = v22;
    v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v23);
    swift_bridgeObjectRelease();
    swift_getObjectType();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v24 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v45 = String.init(stringInterpolation:)();
    v44 = v25;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v26 = v45;
    *(_QWORD *)(v26 + 8) = v44;
    *(_QWORD *)(v26 + 16) = 0;
    *(_QWORD *)(v26 + 24) = 0;
    *(_QWORD *)(v26 + 32) = 0;
    *(_QWORD *)(v26 + 40) = 0;
    *(_BYTE *)(v26 + 48) = 4;
    swift_willThrow();

    outlined release of SiriPaymentsSnippetModel.PaymentConfirmationModel((_QWORD *)(v107 + 16));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v107 + 368) + 8))();
  }
  return result;
}

{
  uint64_t *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *v0;
  v6 = *v0 + 168;
  v4 = *(_QWORD *)(*v0 + 768);
  v3 = *(_QWORD *)(*v0 + 760);
  v5 = *(_QWORD *)(*v0 + 752);
  *(_QWORD *)(*v0 + 368) = *v0;
  swift_task_dealloc();
  v1 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v7 + 1064) = v1;
  v1(v4, v5);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(v6);
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  void (*v1)(void);
  id v3;
  id v4;
  uint64_t v5;

  v1 = (void (*)(void))v0[133];
  v3 = (id)v0[118];
  v4 = (id)v0[117];
  v5 = v0[100];
  v0[46] = v0;
  v1();
  outlined destroy of SiriPaymentsSnippetModel(v5);
  outlined release of SiriPaymentsSnippetModel.PaymentConfirmationModel(v0 + 2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[46] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 368) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 368) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 368) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 128);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 368) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;
  id v4;

  v3 = (id)v0[118];
  v4 = (id)v0[117];
  v1 = v0[102];
  v0[46] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[46] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;
  id v4;

  v3 = (id)v0[118];
  v4 = (id)v0[117];
  v1 = v0[101];
  v0[46] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[46] + 8))();
}

uint64_t ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[46] = *v3;
  v4[114] = v2;
  v4[115] = a1;
  v4[116] = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

id ConfirmationViewBuilder.makeYesNoOptions(yesLabel:noLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v35;
  id v36;
  unint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  Class isa;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  id v50;
  char *v51;
  id v52;
  id v53;
  id v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  Class v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  Class v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  id v78;
  id v79;
  char *v80;
  unint64_t v81;
  id v82;
  id v83;
  id v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  Class v90;
  id v91;
  id v92;
  id v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t *v102;
  unint64_t *v103;
  _BYTE **v104;
  uint64_t *v105;
  unint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t *v120;
  uint32_t v121;
  uint64_t v122;
  int v123;
  NSObject *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  char v130[8];
  uint64_t v131;
  uint64_t v132;
  _QWORD v133[2];
  id v134;
  char v135[8];
  uint64_t v136;
  uint64_t v137;
  _QWORD v138[2];
  id v139;
  id v140;
  id v141;
  uint64_t v142;
  uint32_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v113 = a1;
  v112 = a2;
  v109 = a3;
  v110 = a4;
  v147 = 0;
  v148 = 0;
  v145 = 0;
  v146 = 0;
  v144 = 0;
  v141 = 0;
  v140 = 0;
  v139 = 0;
  v134 = 0;
  v108 = 0;
  v122 = 0;
  v117 = type metadata accessor for Logger();
  v116 = *(_QWORD *)(v117 - 8);
  v114 = (*(_QWORD *)(v116 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (char *)&v35 - v114;
  v115 = (char *)&v35 - v114;
  v147 = MEMORY[0x24BDAC7A8](v113);
  v148 = v5;
  v145 = v6;
  v146 = v7;
  v144 = v8;
  v9 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v4, v9, v117);
  v124 = Logger.logObject.getter();
  v123 = static os_log_type_t.debug.getter();
  v120 = &v142;
  v142 = 2;
  v118 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v119 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v121 = v143;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v125 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v124, (os_log_type_t)v123))
  {
    v10 = v108;
    v98 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v96 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v97 = 0;
    v99 = createStorage<A>(capacity:type:)(0);
    v100 = createStorage<A>(capacity:type:)(v97);
    v104 = &v129;
    v129 = v98;
    v105 = &v128;
    v128 = v99;
    v102 = &v127;
    v127 = v100;
    v101 = 0;
    serialize(_:at:)(0, &v129);
    serialize(_:at:)(v101, v104);
    v126 = v125;
    v103 = &v35;
    MEMORY[0x24BDAC7A8](&v35);
    v11 = v105;
    v12 = &v35 - 6;
    v106 = &v35 - 6;
    v12[2] = (unint64_t)v104;
    v12[3] = (unint64_t)v11;
    v12[4] = v13;
    v107 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v10)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, v124, (os_log_type_t)v123, "#ConfirmationViewBuilder makeYesNoOptions", v98, v121);
      v95 = 0;
      destroyStorage<A>(_:count:)(v99, 0, v96);
      destroyStorage<A>(_:count:)(v100, v95, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v98, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v116 + 8))(v115, v117);
  v39 = 0;
  v35 = type metadata accessor for SAUIConfirmationOption();
  v93 = SAUIAppPunchOut.__allocating_init()();
  v141 = v93;
  swift_bridgeObjectRetain();
  v36 = (id)MEMORY[0x24957220C](v113, v112);
  swift_bridgeObjectRelease();
  v37 = 0x1F2749000uLL;
  objc_msgSend(v93, (SEL)0x1F2749448, v36);

  v94 = SAUIAppPunchOut.__allocating_init()();
  v140 = v94;
  swift_bridgeObjectRetain();
  v38 = (id)MEMORY[0x24957220C](v109, v110);
  swift_bridgeObjectRelease();
  objc_msgSend(v94, (SEL)(v37 + 1096), v38);

  v48 = type metadata accessor for SKIDirectInvocationPayload();
  v59 = 0;
  v92 = static SKIDirectInvocationPayload.from(_:)(0);
  v139 = v92;
  v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyHashable, Any));
  v73 = 1;
  v41 = _allocateUninitializedArray<A>(_:)();
  v40 = v14;
  v15 = Constants.DirectInvocationPayloadKeys.rawValue.getter(v59);
  v42 = v138;
  v138[0] = v15;
  v138[1] = v16;
  v61 = MEMORY[0x24BEE0D00];
  v60 = MEMORY[0x24BEE0D10];
  _convertToAnyHashable<A>(_:)();
  v17 = Constants.DirectInvocationButtonType.rawValue.getter(v59);
  v18 = v40;
  v19 = v17;
  v20 = v41;
  *(_QWORD *)(v40 + 64) = v61;
  *(_QWORD *)(v18 + 40) = v19;
  *(_QWORD *)(v18 + 48) = v21;
  _finalizeUninitializedArray<A>(_:)();
  v43 = v20;
  outlined destroy of String.UTF8View();
  v67 = MEMORY[0x24BEE23D0];
  v68 = MEMORY[0x24BEE4AD8] + 8;
  v69 = MEMORY[0x24BEE23D8];
  v44 = Dictionary.init(dictionaryLiteral:)();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v71 = 0x1F2F1A000uLL;
  objc_msgSend(v92, (SEL)0x1F2F1A648, isa);

  v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  v56 = _allocateUninitializedArray<A>(_:)();
  v55 = v22;
  v74 = 0x24BE99000uLL;
  v52 = (id)objc_opt_self();
  v49 = (id)objc_opt_self();
  v51 = v135;
  outlined init with copy of GlobalsProviding(v111 + 40, (uint64_t)v135);
  v47 = v136;
  v46 = v137;
  __swift_project_boxed_opaque_existential_1(v51, v136);
  v50 = (id)DeviceState.asInvocationContext.getter();
  v77 = 0x1F4E6E000uLL;
  v53 = objc_msgSend(v49, (SEL)0x1F4E6E929);

  __swift_destroy_boxed_opaque_existential_0((uint64_t)v51);
  v81 = 0x1F4E6E000uLL;
  v54 = objc_msgSend(v52, (SEL)0x1F4E6E909, v53);
  swift_unknownObjectRelease();
  v23 = v56;
  *v55 = v54;
  _finalizeUninitializedArray<A>(_:)();
  v57 = v23;
  v58 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v89 = 0x1F310C000uLL;
  objc_msgSend(v93, (SEL)0x1F310C827, v58);

  v91 = static SKIDirectInvocationPayload.from(_:)(v59);
  v134 = v91;
  v63 = _allocateUninitializedArray<A>(_:)();
  v62 = v24;
  v25 = Constants.DirectInvocationPayloadKeys.rawValue.getter(v59);
  v65 = v133;
  v133[0] = v25;
  v133[1] = v26;
  _convertToAnyHashable<A>(_:)();
  v27 = Constants.DirectInvocationButtonType.rawValue.getter(1);
  v28 = v62;
  v29 = v27;
  v30 = v63;
  *(_QWORD *)(v62 + 64) = v61;
  *(_QWORD *)(v28 + 40) = v29;
  *(_QWORD *)(v28 + 48) = v31;
  _finalizeUninitializedArray<A>(_:)();
  v66 = v30;
  outlined destroy of String.UTF8View();
  v70 = Dictionary.init(dictionaryLiteral:)();
  v72 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v91, (SEL)(v71 + 1608), v72);

  v86 = _allocateUninitializedArray<A>(_:)();
  v85 = v32;
  v82 = (id)objc_opt_self();
  v78 = (id)objc_opt_self();
  v80 = v130;
  outlined init with copy of GlobalsProviding(v111 + 40, (uint64_t)v130);
  v76 = v131;
  v75 = v132;
  __swift_project_boxed_opaque_existential_1(v80, v131);
  v79 = (id)DeviceState.asInvocationContext.getter();
  v83 = objc_msgSend(v78, (SEL)(v77 + 2345));

  __swift_destroy_boxed_opaque_existential_0((uint64_t)v80);
  v84 = objc_msgSend(v82, (SEL)(v81 + 2313), v83);
  swift_unknownObjectRelease();
  v33 = v86;
  *v85 = v84;
  _finalizeUninitializedArray<A>(_:)();
  v88 = v33;
  v90 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v94, (SEL)(v89 + 2087), v90);

  return v93;
}

uint64_t closure #1 in ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(char *, _QWORD);
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v13 = a1;
  v9 = a2;
  v16 = 0;
  v15 = 0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v12 = (char *)&v7 - v8;
  v16 = a1;
  v15 = v4;
  v11 = type metadata accessor for NLContextUpdate();
  v10 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v12, v9);
  v5 = *(void (**)(char *, _QWORD))(v10 + 56);
  v14 = 1;
  v5(v12, 0);
  OutputGenerationManifest.nlContextUpdate.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#IntentConfirmationPrompt", 0x27uLL, v14 & 1);
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t closure #2 in ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(char *, _QWORD);
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v13 = a1;
  v9 = a2;
  v16 = 0;
  v15 = 0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v12 = (char *)&v7 - v8;
  v16 = a1;
  v15 = v4;
  v11 = type metadata accessor for NLContextUpdate();
  v10 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v12, v9);
  v5 = *(void (**)(char *, _QWORD))(v10 + 56);
  v14 = 1;
  v5(v12, 0);
  OutputGenerationManifest.nlContextUpdate.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#IntentConfirmationPrompt", 0x24uLL, v14 & 1);
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t DefaultStringInterpolation.appendInterpolation(_:)()
{
  Swift::String v0;

  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

uint64_t ConfirmationViewBuilder.makeTCCAcceptanceView(app:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[27] = v1;
  v2[16] = v2;
  v2[17] = 0;
  v2[18] = 0;
  v2[12] = 0;
  v2[13] = 0;
  v2[14] = 0;
  v2[15] = 0;
  v2[20] = 0;
  v2[21] = 0;
  v2[22] = 0;
  v3 = type metadata accessor for Logger();
  v2[28] = v3;
  v2[29] = *(_QWORD *)(v3 - 8);
  v2[30] = swift_task_alloc();
  v2[17] = a1;
  v2[18] = v1;
  return swift_task_switch();
}

uint64_t ConfirmationViewBuilder.makeTCCAcceptanceView(app:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint8_t *buf;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint32_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 240);
  v18 = *(_QWORD *)(v0 + 232);
  v19 = *(_QWORD *)(v0 + 224);
  *(_QWORD *)(v0 + 128) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v1, v2, v19);
  v22 = Logger.logObject.getter();
  v21 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 152) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v20 = *(_DWORD *)(v0 + 312);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v23 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v22, v21))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v14 = createStorage<A>(capacity:type:)(0);
    v15 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v17 + 184) = buf;
    *(_QWORD *)(v17 + 192) = v14;
    *(_QWORD *)(v17 + 200) = v15;
    serialize(_:at:)(0, (_BYTE **)(v17 + 184));
    serialize(_:at:)(0, (_BYTE **)(v17 + 184));
    *(_QWORD *)(v17 + 208) = v23;
    v16 = (_QWORD *)swift_task_alloc();
    v16[2] = v17 + 184;
    v16[3] = v17 + 192;
    v16[4] = v17 + 200;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v22, v21, "#ConfirmationViewBuilder makeTCCAcceptanceView", buf, v20);
    destroyStorage<A>(_:count:)(v14, 0, v12);
    destroyStorage<A>(_:count:)(v15, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v17 + 240);
  v5 = *(_QWORD *)(v17 + 232);
  v7 = *(_QWORD *)(v17 + 224);
  v8 = *(_QWORD *)(v17 + 216);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  outlined init with copy of GlobalsProviding(v8, v17 + 16);
  v11 = *(_QWORD *)(v17 + 40);
  v9 = *(_QWORD *)(v17 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v17 + 16), v11);
  v10 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v9 + 24) + **(int **)(v9 + 24));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v17 + 248) = v3;
  *v3 = *(_QWORD *)(v17 + 128);
  v3[1] = ConfirmationViewBuilder.makeTCCAcceptanceView(app:);
  return v10(v11, v9);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;

  v1 = v0[34];
  v2 = v0[33];
  v5 = v0[27];
  v0[16] = v0;
  v0[12] = v2;
  v0[13] = v1;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  outlined init with copy of GlobalsProviding(v5, (uint64_t)(v0 + 7));
  v9 = v0[10];
  v7 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v9);
  v8 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v7 + 16) + **(int **)(v7 + 16));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 280) = v3;
  *v3 = *(_QWORD *)(v6 + 128);
  v3[1] = ConfirmationViewBuilder.makeTCCAcceptanceView(app:);
  return v8(v9, v7);
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  id v6;
  id v8;
  _QWORD *v9;
  Class v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  Class v18;
  Class v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  Class isa;
  Class v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  id v42;

  v38 = v0[38];
  v37 = v0[37];
  v36 = v0[34];
  v35 = v0[33];
  v0[16] = v0;
  v0[14] = v37;
  v0[15] = v38;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  v40 = ConfirmationViewBuilder.makeYesNoOptions(yesLabel:noLabel:)(v35, v36, v37, v38);
  v39 = v1;
  v0[20] = v40;
  v0[21] = v1;
  type metadata accessor for SAUIConfirmationView();
  v41 = SAUIAppPunchOut.__allocating_init()();
  v0[22] = v41;
  v42 = objc_msgSend(v40, sel_commands);
  if (v42)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v33 = v32;
  }
  else
  {
    v33 = 0;
  }
  if (v33)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v31 = isa;
  }
  else
  {
    v31 = 0;
  }
  objc_msgSend(v41, sel_setConfirmCommands_);

  v29 = objc_msgSend(v40, sel_label);
  if (v29)
  {
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v26 = v2;

    v27 = v25;
    v28 = v26;
  }
  else
  {
    v27 = 0;
    v28 = 0;
  }
  if (v28)
  {
    v23 = MEMORY[0x24957220C](v27);
    swift_bridgeObjectRelease();
    v24 = (void *)v23;
  }
  else
  {
    v24 = 0;
  }
  objc_msgSend(v41, sel_setConfirmText_);

  v22 = objc_msgSend(v39, sel_commands);
  if (v22)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v21 = v20;
  }
  else
  {
    v21 = 0;
  }
  if (v21)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    v18 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v19 = v18;
  }
  else
  {
    v19 = 0;
  }
  objc_msgSend(v41, sel_setDenyCommands_);

  v17 = objc_msgSend(v39, sel_label);
  if (v17)
  {
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v3;

    v15 = v13;
    v16 = v14;
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  if (v16)
  {
    v11 = MEMORY[0x24957220C](v15);
    swift_bridgeObjectRelease();
    v12 = v11;
  }
  else
  {
    v12 = 0;
  }
  objc_msgSend(v41, sel_setDenyText_, v12);

  type metadata accessor for SAUIConfirmationOption();
  _allocateUninitializedArray<A>(_:)();
  v9 = v4;
  v5 = v40;
  *v9 = v40;
  v6 = v39;
  v9[1] = v39;
  _finalizeUninitializedArray<A>(_:)();
  v10 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v41, sel_setAllConfirmationOptions_, v10);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(*(_QWORD *)(v34 + 128) + 8))(v41);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 128) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 128) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 128) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 128) + 8))();
}

uint64_t ConfirmationViewBuilder.makeTCCAcceptanceView(app:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[16] = *v3;
  v4[32] = v2;
  v4[33] = a1;
  v4[34] = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[16] = *v3;
  v4[36] = v2;
  v4[37] = a1;
  v4[38] = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ConfirmationViewBuilder.makeWatchFirstPartyView<A, B>(app:intent:response:confirmLabelProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v8[25] = v7;
  v8[24] = a7;
  v8[23] = a5;
  v8[22] = a4;
  v8[21] = a3;
  v8[20] = a2;
  v8[19] = a1;
  v8[4] = v8;
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  v8[8] = 0;
  v8[9] = 0;
  v8[11] = 0;
  v8[12] = 0;
  v8[13] = 0;
  v8[2] = 0;
  v8[3] = 0;
  v9 = type metadata accessor for Logger();
  v8[26] = v9;
  v8[27] = *(_QWORD *)(v9 - 8);
  v8[28] = swift_task_alloc();
  v8[5] = a1;
  v8[6] = a2;
  v8[7] = a3;
  v8[8] = a4;
  v8[9] = v7;
  return swift_task_switch();
}

uint64_t ConfirmationViewBuilder.makeWatchFirstPartyView<A, B>(app:intent:response:confirmLabelProvider:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  _QWORD *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  Class v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  Class isa;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint32_t v39;
  os_log_type_t v40;
  NSObject *v41;
  uint64_t v42;

  v1 = *(_QWORD *)(v0 + 224);
  v37 = *(_QWORD *)(v0 + 216);
  v38 = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v0 + 32) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v1, v2, v38);
  v41 = Logger.logObject.getter();
  v40 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 80) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v39 = *(_DWORD *)(v0 + 272);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v42 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v41, v40))
  {
    v32 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v33 = createStorage<A>(capacity:type:)(0);
    v34 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v36 + 120) = v32;
    *(_QWORD *)(v36 + 128) = v33;
    *(_QWORD *)(v36 + 136) = v34;
    serialize(_:at:)(0, (_BYTE **)(v36 + 120));
    serialize(_:at:)(0, (_BYTE **)(v36 + 120));
    *(_QWORD *)(v36 + 144) = v42;
    v35 = (_QWORD *)swift_task_alloc();
    v35[2] = v36 + 120;
    v35[3] = v36 + 128;
    v35[4] = v36 + 136;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v41, v40, "#ConfirmationViewBuilder makeWatchFirstPartyView", v32, v39);
    destroyStorage<A>(_:count:)(v33, 0, v31);
    destroyStorage<A>(_:count:)(v34, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v32, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v28 = *(_QWORD *)(v36 + 224);
  v27 = *(_QWORD *)(v36 + 216);
  v29 = *(_QWORD *)(v36 + 208);

  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v29);
  type metadata accessor for SASTItemGroup();
  v30 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v36 + 232) = v30;
  *(_QWORD *)(v36 + 88) = v30;
  if ((static RFFeatureFlags.ResponseFramework.SMART.getter() & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
    _allocateUninitializedArray<A>(_:)();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v30, sel_setTemplateItems_, isa);

    v25 = App.appIdentifier.getter();
    v26 = v3;
    if (v3)
    {
      v22 = *(id *)(v36 + 160);
      *(_QWORD *)(v36 + 16) = v25;
      *(_QWORD *)(v36 + 24) = v3;
      type metadata accessor for SASTApplicationBannerItem();
      v4 = v22;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v36 + 112) = SASTApplicationBannerItem.init(intent:appId:)(v22, v25, v26);
      v23 = objc_msgSend(v30, sel_templateItems);
      if (v23)
      {
        v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v21 = v20;
      }
      else
      {
        v21 = 0;
      }
      if (!v21)
        return _assertionFailure(_:_:file:line:flags:)();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SASTTemplateItem]);
      Array.append(_:)();
      v19 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v30, sel_setTemplateItems_);

      swift_bridgeObjectRelease();
    }
  }
  v6 = *(id *)(v36 + 160);
  v18 = App.systemUIExtensionBundleId.getter();
  if (v7)
  {
    v16 = MEMORY[0x24957220C](v18);
    swift_bridgeObjectRelease();
    v17 = (void *)v16;
  }
  else
  {
    v17 = 0;
  }
  v13 = *(id *)(v36 + 168);
  v11 = *(id *)(v36 + 160);
  objc_msgSend(v11, sel__setUiExtensionBundleId_);

  type metadata accessor for SAIntentGroupSendPaymentSnippet();
  v14 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v36 + 240) = v14;
  *(_QWORD *)(v36 + 96) = v14;
  type metadata accessor for SAIntentGroupProtobufMessage();
  v8 = v11;
  v12 = SAIntentGroupProtobufMessage.init(intent:)(v11);
  objc_msgSend(v14, sel_setIntent_);

  v9 = v13;
  v15 = SAIntentGroupProtobufMessage.init(response:)(v13);
  objc_msgSend(v14, sel_setIntentResponse_);

  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v36 + 248) = v10;
  *v10 = *(_QWORD *)(v36 + 32);
  v10[1] = ConfirmationViewBuilder.makeWatchFirstPartyView<A, B>(app:intent:response:confirmLabelProvider:);
  return ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(*(_QWORD *)(v36 + 152), *(_QWORD *)(v36 + 160), *(_QWORD *)(v36 + 176));
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  id v3;
  id v4;
  id v5;
  _QWORD *v6;
  id v7;
  id v8;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = v0[32];
  v0[4] = v0;
  v0[13] = v1;
  if ((static RFFeatureFlags.ResponseFramework.SMART.getter() & 1) != 0)
  {
    v12 = (id)v21[32];
    v13 = (id)v21[30];
    v14 = (id)v21[29];
    type metadata accessor for SAAceView();
    v11 = _allocateUninitializedArray<A>(_:)();
    v10 = v6;
    v7 = v13;
    *v10 = v13;
    v8 = v12;
    v10[1] = v12;
    _finalizeUninitializedArray<A>(_:)();

    v20 = v11;
  }
  else
  {
    v17 = (void *)v21[32];
    v18 = (void *)v21[30];
    v19 = (void *)v21[29];
    type metadata accessor for SAAceView();
    v16 = _allocateUninitializedArray<A>(_:)();
    v15 = v2;
    v3 = v19;
    *v15 = v19;
    v4 = v18;
    v15[1] = v18;
    v5 = v17;
    v15[2] = v17;
    _finalizeUninitializedArray<A>(_:)();

    v20 = v16;
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v21[4] + 8))(v20);
}

{
  _QWORD *v0;
  void *v1;
  id v3;

  v1 = (void *)v0[30];
  v3 = (id)v0[29];
  v0[4] = v0;

  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[4] + 8))();
}

uint64_t ConfirmationViewBuilder.makeWatchFirstPartyView<A, B>(app:intent:response:confirmLabelProvider:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[4] = *v2;
  v3[32] = a1;
  v3[33] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t implicit closure #1 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, sel_text);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  return String.init<A>(describing:)();
}

uint64_t implicit closure #4 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)()
{
  swift_bridgeObjectRetain();
  return String.init<A>(describing:)();
}

uint64_t default argument 1 of static SATextDecorationRegion.from(_:property:)()
{
  id v0;
  id v2;
  uint64_t v3;

  v2 = (id)*MEMORY[0x24BE82408];
  v0 = (id)*MEMORY[0x24BE82408];
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[29] = v3;
  v4[28] = a3;
  v4[27] = a2;
  v4[26] = a1;
  v4[7] = v4;
  v4[8] = 0;
  v4[9] = 0;
  v4[10] = 0;
  v4[11] = 0;
  v4[13] = 0;
  v4[14] = 0;
  v4[15] = 0;
  v4[16] = 0;
  v4[17] = 0;
  v4[18] = 0;
  v4[19] = 0;
  v4[20] = 0;
  v4[21] = 0;
  v5 = type metadata accessor for TemplatingResult();
  v4[30] = v5;
  v4[31] = *(_QWORD *)(v5 - 8);
  v4[32] = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  v4[33] = v6;
  v4[34] = *(_QWORD *)(v6 - 8);
  v4[35] = swift_task_alloc();
  v4[8] = a1;
  v4[9] = a2;
  v4[10] = a3;
  v4[11] = v3;
  return swift_task_switch();
}

uint64_t ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  _QWORD *v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *buf;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint32_t v27;
  os_log_type_t v28;
  NSObject *v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 280);
  v25 = *(_QWORD *)(v0 + 272);
  v26 = *(_QWORD *)(v0 + 264);
  *(_QWORD *)(v0 + 56) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v1, v2, v26);
  v29 = Logger.logObject.getter();
  v28 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 96) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v27 = *(_DWORD *)(v0 + 408);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v30 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v29, v28))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v21 = createStorage<A>(capacity:type:)(0);
    v22 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v24 + 176) = buf;
    *(_QWORD *)(v24 + 184) = v21;
    *(_QWORD *)(v24 + 192) = v22;
    serialize(_:at:)(0, (_BYTE **)(v24 + 176));
    serialize(_:at:)(0, (_BYTE **)(v24 + 176));
    *(_QWORD *)(v24 + 200) = v30;
    v23 = (_QWORD *)swift_task_alloc();
    v23[2] = v24 + 176;
    v23[3] = v24 + 184;
    v23[4] = v24 + 192;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v29, v28, "#ConfirmationViewBuilder makeWatchConfirmationButtons", buf, v27);
    destroyStorage<A>(_:count:)(v21, 0, v19);
    destroyStorage<A>(_:count:)(v22, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v24 + 280);
  v14 = *(_QWORD *)(v24 + 272);
  v16 = *(_QWORD *)(v24 + 264);
  v17 = *(id *)(v24 + 216);

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
  *(_QWORD *)(v24 + 288) = type metadata accessor for SASTCommandTemplateAction();
  v3 = v17;
  v18 = App.appIdentifier.getter();
  if (!v4)
    return _assertionFailure(_:_:file:line:flags:)();
  v10 = *(_QWORD **)(v24 + 224);
  v5 = SASTCommandTemplateAction.init(intent:appId:)(*(void **)(v24 + 216), v18, v4);
  *(_QWORD *)(v24 + 296) = v5;
  *(_QWORD *)(v24 + 104) = v5;
  *(_QWORD *)(v24 + 304) = type metadata accessor for SASTButtonItem();
  v6 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v24 + 312) = v6;
  *(_QWORD *)(v24 + 112) = v6;
  *(_QWORD *)(v24 + 320) = type metadata accessor for SAUIDecoratedText();
  v7 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v24 + 328) = v7;
  *(_QWORD *)(v24 + 120) = v7;
  v11 = v10[3];
  v12 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v13 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 + 8) + **(int **)(v12 + 8));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v24 + 336) = v8;
  *v8 = *(_QWORD *)(v24 + 56);
  v8[1] = ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:);
  return v13(*(_QWORD *)(v24 + 256), v11, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 344) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;

  v20 = (void *)v0[41];
  v19 = (void *)v0[39];
  v17 = v0[32];
  v15 = v0[31];
  v16 = v0[30];
  v21 = (void *)v0[27];
  v0[7] = v0;
  v1 = TemplatingResult.resultSectionsAsString.getter();
  v18 = (void *)MEMORY[0x24957220C](v1);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  swift_bridgeObjectRelease();
  objc_msgSend(v20, sel_setText_, v18);

  v2 = v20;
  objc_msgSend(v19, sel_setDecoratedLabel_, v20);

  v3 = v21;
  v22 = App.appIdentifier.getter();
  if (!v4)
    return _assertionFailure(_:_:file:line:flags:)();
  v10 = *(_QWORD *)(v14 + 232);
  v5 = SASTCommandTemplateAction.init(intent:appId:)(*(void **)(v14 + 216), v22, v4);
  *(_QWORD *)(v14 + 352) = v5;
  *(_QWORD *)(v14 + 128) = v5;
  v6 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v14 + 360) = v6;
  *(_QWORD *)(v14 + 136) = v6;
  v7 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v14 + 368) = v7;
  *(_QWORD *)(v14 + 144) = v7;
  outlined init with copy of GlobalsProviding(v10, v14 + 16);
  v13 = *(_QWORD *)(v14 + 40);
  v11 = *(_QWORD *)(v14 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v14 + 16), v13);
  v12 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v11 + 8) + **(int **)(v11 + 8));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v14 + 376) = v8;
  *v8 = *(_QWORD *)(v14 + 56);
  v8[1] = ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:);
  return v12(v13, v11);
}

{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  _QWORD *v9;
  id v10;
  id v11;
  _QWORD *v12;
  Class v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  Class v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  Class isa;
  Class v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;

  v1 = v0[49];
  v45 = (void *)v0[46];
  v44 = (void *)v0[45];
  v46 = (void *)v0[41];
  v0[7] = v0;
  v43 = (void *)MEMORY[0x24957220C](v1);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  objc_msgSend(v45, sel_setText_, v43);

  v2 = v45;
  objc_msgSend(v44, sel_setDecoratedLabel_, v45);

  v47 = objc_msgSend(v46, sel_text);
  if (v47)
  {
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v39 = v3;

    v40 = v38;
    v41 = v39;
  }
  else
  {
    v40 = 0;
    v41 = 0;
  }
  if (!v41)
    return _assertionFailure(_:_:file:line:flags:)();
  v37 = objc_msgSend(*(id *)(v42 + 368), sel_text);
  if (v37)
  {
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v5;

    v35 = v33;
    v36 = v34;
  }
  else
  {
    v35 = 0;
    v36 = 0;
  }
  if (!v36)
    return _assertionFailure(_:_:file:line:flags:)();
  v31 = ConfirmationViewBuilder.makeYesNoOptions(yesLabel:noLabel:)(v40, v41, v35, v36);
  v30 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v42 + 152) = v31;
  *(_QWORD *)(v42 + 160) = v30;
  v32 = objc_msgSend(v31, sel_commands);
  if (v32)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v29 = v28;
  }
  else
  {
    v29 = 0;
  }
  if (v29)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v27 = isa;
  }
  else
  {
    v27 = 0;
  }
  objc_msgSend(*(id *)(v42 + 296), sel_setCommands_);

  v25 = objc_msgSend(v30, sel_commands);
  if (v25)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v24 = v23;
  }
  else
  {
    v24 = 0;
  }
  if (v24)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    v21 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v22 = v21;
  }
  else
  {
    v22 = 0;
  }
  v14 = *(id *)(v42 + 368);
  v15 = *(id *)(v42 + 360);
  v16 = *(id *)(v42 + 352);
  v17 = *(id *)(v42 + 328);
  v18 = *(id *)(v42 + 312);
  v19 = *(id *)(v42 + 296);
  objc_msgSend(v16, sel_setCommands_);

  v7 = v19;
  objc_msgSend(v18, (SEL)0x1F26F0DC8, v19);
  swift_unknownObjectRelease();
  v8 = v16;
  objc_msgSend(v15, (SEL)0x1F26F0DC8, v16);
  swift_unknownObjectRelease();
  objc_msgSend(v18, (SEL)0x1F3ADD40CLL, 1);
  objc_msgSend(v15, (SEL)0x1F3ADD40CLL, 1);
  type metadata accessor for SASTItemGroup();
  v20 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v42 + 168) = v20;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
  _allocateUninitializedArray<A>(_:)();
  v12 = v9;
  v10 = v18;
  *v12 = v18;
  v11 = v15;
  v12[1] = v15;
  _finalizeUninitializedArray<A>(_:)();
  v13 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v20, sel_setTemplateItems_, v13);

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(*(_QWORD *)(v42 + 56) + 8))(v20);
}

{
  _QWORD *v0;
  void *v1;
  id v3;
  id v4;

  v1 = (void *)v0[41];
  v3 = (id)v0[39];
  v4 = (id)v0[37];
  v0[7] = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[7] + 8))();
}

{
  _QWORD *v0;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v2 = (id)v0[46];
  v3 = (id)v0[45];
  v4 = (id)v0[44];
  v5 = (id)v0[41];
  v6 = (id)v0[39];
  v7 = (id)v0[37];
  v0[7] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[7] + 8))();
}

uint64_t ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[7] = *v3;
  v4[48] = v2;
  v4[49] = a1;
  v4[50] = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t implicit closure #9 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)(void *a1)
{
  id v1;

  v1 = a1;
  type metadata accessor for SASTItemGroup();
  lazy protocol witness table accessor for type SASTItemGroup and conformance NSObject();
  return String.init<A>(describing:)();
}

uint64_t ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[23] = v1;
  v2[22] = a1;
  v2[11] = v2;
  v2[12] = 0;
  v2[13] = 0;
  v2[7] = 0;
  v2[8] = 0;
  v2[9] = 0;
  v2[10] = 0;
  v2[15] = 0;
  v2[16] = 0;
  v2[17] = 0;
  v3 = type metadata accessor for TemplatingResult();
  v2[24] = v3;
  v2[25] = *(_QWORD *)(v3 - 8);
  v2[26] = swift_task_alloc();
  v4 = type metadata accessor for Logger();
  v2[27] = v4;
  v2[28] = *(_QWORD *)(v4 - 8);
  v2[29] = swift_task_alloc();
  v2[12] = a1;
  v2[13] = v1;
  return swift_task_switch();
}

uint64_t ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD, uint64_t, uint64_t);
  uint64_t v12;
  uint8_t *buf;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint32_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 232);
  v18 = *(_QWORD *)(v0 + 224);
  v19 = *(_QWORD *)(v0 + 216);
  *(_QWORD *)(v0 + 88) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v1, v2, v19);
  v22 = Logger.logObject.getter();
  v21 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 112) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v20 = *(_DWORD *)(v0 + 304);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v23 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v22, v21))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v14 = createStorage<A>(capacity:type:)(0);
    v15 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v17 + 144) = buf;
    *(_QWORD *)(v17 + 152) = v14;
    *(_QWORD *)(v17 + 160) = v15;
    serialize(_:at:)(0, (_BYTE **)(v17 + 144));
    serialize(_:at:)(0, (_BYTE **)(v17 + 144));
    *(_QWORD *)(v17 + 168) = v23;
    v16 = (_QWORD *)swift_task_alloc();
    v16[2] = v17 + 144;
    v16[3] = v17 + 152;
    v16[4] = v17 + 160;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v22, v21, "#ConfirmationViewBuilder makeConfirmationOptions", buf, v20);
    destroyStorage<A>(_:count:)(v14, 0, v12);
    destroyStorage<A>(_:count:)(v15, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v17 + 232);
  v5 = *(_QWORD *)(v17 + 224);
  v7 = *(_QWORD *)(v17 + 216);
  v8 = *(_QWORD **)(v17 + 176);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  v9 = v8[3];
  v10 = v8[4];
  __swift_project_boxed_opaque_existential_1(v8, v9);
  v11 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 + 8) + **(int **)(v10 + 8));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v17 + 240) = v3;
  *v3 = *(_QWORD *)(v17 + 88);
  v3[1] = ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:);
  return v11(*(_QWORD *)(v17 + 208), v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = *v1;
  *(_QWORD *)(v2 + 248) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  v6 = v0[26];
  v5 = v0[25];
  v7 = v0[24];
  v8 = v0[23];
  v0[11] = v0;
  v1 = TemplatingResult.resultSectionsAsString.getter();
  v0[32] = v1;
  v0[33] = v2;
  v0[7] = v1;
  v0[8] = v2;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  outlined init with copy of GlobalsProviding(v8, (uint64_t)(v0 + 2));
  v12 = v0[5];
  v10 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v12);
  v11 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v10 + 8) + **(int **)(v10 + 8));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v9 + 272) = v3;
  *v3 = *(_QWORD *)(v9 + 88);
  v3[1] = ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:);
  return v11(v12, v10);
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  Class v20;
  Class v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  Class v32;
  Class v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  _QWORD *v46;
  id v47;
  Class isa;
  id v49;
  id v50;

  v40 = v0[37];
  v39 = v0[36];
  v38 = v0[33];
  v37 = v0[32];
  v0[11] = v0;
  v0[9] = v39;
  v0[10] = v40;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  v49 = ConfirmationViewBuilder.makeYesNoOptions(yesLabel:noLabel:)(v37, v38, v39, v40);
  v45 = v1;
  v0[15] = v49;
  v0[16] = v1;
  v41 = (void *)*MEMORY[0x24BE826C8];
  v2 = (id)*MEMORY[0x24BE826C8];
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v42 = (void *)MEMORY[0x24957220C](v3);
  swift_bridgeObjectRelease();

  objc_msgSend(v49, sel_setButtonRole_, v42);
  v43 = (void *)*MEMORY[0x24BE826D0];
  v4 = (id)*MEMORY[0x24BE826D0];
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v44 = (void *)MEMORY[0x24957220C](v5);
  swift_bridgeObjectRelease();

  objc_msgSend(v49, sel_setType_, v44);
  type metadata accessor for SAUIConfirmationOptions();
  v47 = SAUIAppPunchOut.__allocating_init()();
  v0[17] = v47;
  type metadata accessor for SAUIConfirmationOption();
  _allocateUninitializedArray<A>(_:)();
  v46 = v6;
  v7 = v49;
  *v46 = v49;
  v8 = v45;
  v46[1] = v45;
  _finalizeUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v47, sel_setAllConfirmationOptions_, isa);

  v50 = objc_msgSend(v49, sel_commands);
  if (v50)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v35 = v34;
  }
  else
  {
    v35 = 0;
  }
  if (v35)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    v32 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v33 = v32;
  }
  else
  {
    v33 = 0;
  }
  objc_msgSend(v47, sel_setConfirmCommands_);

  v31 = objc_msgSend(v49, sel_label);
  if (v31)
  {
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v28 = v9;

    v29 = v27;
    v30 = v28;
  }
  else
  {
    v29 = 0;
    v30 = 0;
  }
  if (v30)
  {
    v25 = MEMORY[0x24957220C](v29);
    swift_bridgeObjectRelease();
    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  objc_msgSend(v47, sel_setConfirmText_);

  v24 = objc_msgSend(v45, sel_commands);
  if (v24)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v23 = v22;
  }
  else
  {
    v23 = 0;
  }
  if (v23)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    v20 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v21 = v20;
  }
  else
  {
    v21 = 0;
  }
  objc_msgSend(v47, sel_setDenyCommands_);

  v19 = objc_msgSend(v45, sel_label);
  if (v19)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v16 = v10;

    v17 = v15;
    v18 = v16;
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  if (v18)
  {
    v13 = MEMORY[0x24957220C](v17);
    swift_bridgeObjectRelease();
    v14 = v13;
  }
  else
  {
    v14 = 0;
  }
  objc_msgSend(v47, sel_setDenyText_, v14);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(*(_QWORD *)(v36 + 88) + 8))(v47);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 88) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 88) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 88) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 88) + 8))();
}

uint64_t ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[11] = *v3;
  v4[35] = v2;
  v4[36] = a1;
  v4[37] = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

id @nonobjc SFRichText.__allocating_init(string:)(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  if (a2)
  {
    v4 = MEMORY[0x24957220C](a1);
    swift_bridgeObjectRelease();
    v5 = (void *)v4;
  }
  else
  {
    v5 = 0;
  }
  v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_textWithString_, v5);

  return v3;
}

uint64_t protocol witness for ConfirmationViewBuilding.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:) in conformance ConfirmationViewBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;

  *(_QWORD *)(v8 + 16) = v8;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 24) = v9;
  *v9 = *(_QWORD *)(v8 + 16);
  v9[1] = protocol witness for ConfirmationViewBuilding.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:) in conformance ConfirmationViewBuilder;
  return ConfirmationViewBuilder.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *protocol witness for ConfirmationViewBuilding.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:) in conformance ConfirmationViewBuilder(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v7 = (_QWORD *)(v3 + 16);
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v4);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

uint64_t protocol witness for ConfirmationViewBuilding.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:) in conformance ConfirmationViewBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;

  *(_QWORD *)(v8 + 16) = v8;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 24) = v9;
  *v9 = *(_QWORD *)(v8 + 16);
  v9[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t protocol witness for ConfirmationViewBuilding.makeTCCAcceptanceView(app:) in conformance ConfirmationViewBuilder(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for ConfirmationViewBuilding.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:) in conformance ConfirmationViewBuilder;
  return ConfirmationViewBuilder.makeTCCAcceptanceView(app:)(a1);
}

id @nonobjc SAUIAppPunchOut.init()()
{
  void *v0;

  return objc_msgSend(v0, sel_init);
}

unint64_t type metadata accessor for SASTColumnDataListItem()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SASTColumnDataListItem;
  if (!lazy cache variable for type metadata for SASTColumnDataListItem)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SASTColumnDataListItem);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PaymentsError and conformance PaymentsError;
  if (!lazy protocol witness table cache variable for type PaymentsError and conformance PaymentsError)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsError, &type metadata for PaymentsError);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsError and conformance PaymentsError);
    return v0;
  }
  return v2;
}

uint64_t sub_2470439EC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)()
{
  uint64_t v0;

  return implicit closure #1 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)(*(void **)(v0 + 16));
}

uint64_t sub_247043A30()
{
  return swift_deallocObject();
}

uint64_t sub_247043A58()
{
  return swift_deallocObject();
}

uint64_t sub_247043A80()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247043ABC()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [SASTTemplateItem] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [SASTTemplateItem] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SASTTemplateItem] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [SASTTemplateItem]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [SASTTemplateItem] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [SASTTemplateItem] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SASTTemplateItem] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [SASTTemplateItem]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12F8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [SASTTemplateItem] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t sub_247043B68()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #9 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)()
{
  uint64_t v0;

  return implicit closure #9 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)(*(void **)(v0 + 16));
}

uint64_t sub_247043BAC()
{
  return swift_deallocObject();
}

uint64_t sub_247043BD4()
{
  return swift_deallocObject();
}

uint64_t sub_247043BFC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247043C38()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t type metadata accessor for SAAceView()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SAAceView;
  if (!lazy cache variable for type metadata for SAAceView)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_247043CD8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)()
{
  return implicit closure #4 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)();
}

uint64_t sub_247043D20()
{
  return swift_deallocObject();
}

uint64_t sub_247043D48()
{
  return swift_deallocObject();
}

uint64_t sub_247043D70()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247043DAC()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t type metadata accessor for SATextDecorationRegion()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SATextDecorationRegion;
  if (!lazy cache variable for type metadata for SATextDecorationRegion)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SATextDecorationRegion);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_247043E4C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247043E88()
{
  return swift_deallocObject();
}

uint64_t sub_247043EB0()
{
  return swift_deallocObject();
}

uint64_t sub_247043ED8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247043F14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247043F50()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247043F8C()
{
  return swift_deallocObject();
}

uint64_t sub_247043FB4()
{
  return swift_deallocObject();
}

uint64_t sub_247043FDC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247044018()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247044054()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_247044090()
{
  return swift_deallocObject();
}

uint64_t sub_2470440B8()
{
  return swift_deallocObject();
}

uint64_t sub_2470440E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24704411C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247044158()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247044194()
{
  return swift_deallocObject();
}

uint64_t sub_2470441BC()
{
  return swift_deallocObject();
}

uint64_t sub_2470441E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247044220()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24704425C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247044298()
{
  return swift_deallocObject();
}

uint64_t sub_2470442C0()
{
  return swift_deallocObject();
}

uint64_t sub_2470442E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247044324()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247044360()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24704439C()
{
  return swift_deallocObject();
}

uint64_t sub_2470443C4()
{
  return swift_deallocObject();
}

uint64_t sub_2470443EC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247044428()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t type metadata accessor for SASTApplicationBannerItem()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SASTApplicationBannerItem;
  if (!lazy cache variable for type metadata for SASTApplicationBannerItem)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SASTApplicationBannerItem);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SAAppsLaunchApp()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SAAppsLaunchApp;
  if (!lazy cache variable for type metadata for SAAppsLaunchApp)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAAppsLaunchApp);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SFAbstractCommand()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SFAbstractCommand;
  if (!lazy cache variable for type metadata for SFAbstractCommand)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SFAbstractCommand);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SFCardSection()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SFCardSection;
  if (!lazy cache variable for type metadata for SFCardSection)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SFCardSection);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SFRichTitleCardSection()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SFRichTitleCardSection;
  if (!lazy cache variable for type metadata for SFRichTitleCardSection)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SFRichTitleCardSection);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SFRowCardSection()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SFRowCardSection;
  if (!lazy cache variable for type metadata for SFRowCardSection)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SFRowCardSection);
    return ObjCClassMetadata;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of SFRichText?(id *a1)
{

}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [SFCardSection]()
{
  swift_bridgeObjectRelease();
}

unint64_t type metadata accessor for INSendPaymentIntent()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for INSendPaymentIntent;
  if (!lazy cache variable for type metadata for INSendPaymentIntent)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INSendPaymentIntent);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SACardSnippet()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SACardSnippet;
  if (!lazy cache variable for type metadata for SACardSnippet)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SACardSnippet);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SFRichText()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SFRichText;
  if (!lazy cache variable for type metadata for SFRichText)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SFRichText);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for INRequestPaymentIntent()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for INRequestPaymentIntent;
  if (!lazy cache variable for type metadata for INRequestPaymentIntent)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INRequestPaymentIntent);
    return ObjCClassMetadata;
  }
  return v2;
}

id *outlined destroy of (A, B)(id *a1)
{

  return a1;
}

_QWORD *outlined release of SiriPaymentsSnippetModel.PaymentConfirmationModel(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = a1[8];
  v3 = a1[9];
  v4 = a1[10];
  v5 = a1[11];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v2, v3);
  outlined consume of Data._Representation(v4, v5);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (((a2 >> 62) & 3) == 1)
    return swift_release();
  if (((a2 >> 62) & 3) == 2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t type metadata accessor for INSendPaymentIntentResponse()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for INSendPaymentIntentResponse;
  if (!lazy cache variable for type metadata for INSendPaymentIntentResponse)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INSendPaymentIntentResponse);
    return ObjCClassMetadata;
  }
  return v2;
}

_QWORD *outlined retain of SiriPaymentsSnippetModel.PaymentConfirmationModel(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = a1[8];
  v3 = a1[9];
  v4 = a1[10];
  v5 = a1[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v2, v3);
  outlined copy of Data._Representation(v4, v5);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (((a2 >> 62) & 3) == 1)
    return swift_retain();
  if (((a2 >> 62) & 3) == 2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined init with copy of SiriPaymentsSnippetModel.SendPaymentConfirmationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v18;
  uint64_t v19;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v6 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
  v5 = *(int *)(v6 + 20);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a2 + v5, a1 + v5);
  v16 = (_QWORD *)(a1 + *(int *)(v6 + 24));
  v18 = (_QWORD *)(a2 + *(int *)(v6 + 24));
  *v18 = *v16;
  v8 = v16[1];
  swift_bridgeObjectRetain();
  v18[1] = v8;
  v18[2] = v16[2];
  v9 = v16[3];
  swift_bridgeObjectRetain();
  v18[3] = v9;
  v18[4] = v16[4];
  v10 = v16[5];
  swift_bridgeObjectRetain();
  v18[5] = v10;
  v18[6] = v16[6];
  v11 = v16[7];
  swift_bridgeObjectRetain();
  v18[7] = v11;
  v12 = v16[8];
  v13 = v16[9];
  outlined copy of Data._Representation(v12, v13);
  v18[8] = v12;
  v18[9] = v13;
  v14 = v16[10];
  v15 = v16[11];
  outlined copy of Data._Representation(v14, v15);
  v18[10] = v14;
  v18[11] = v15;
  v18[12] = v16[12];
  v19 = v16[13];
  swift_bridgeObjectRetain();
  result = a2;
  v18[13] = v19;
  return result;
}

char *outlined init with take of SiriPaymentsSnippetModel(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v15;
  int EnumCaseMultiPayload;

  v15 = type metadata accessor for SiriPaymentsSnippetModel();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
      (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 32))(a2, a1);
      v9 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
      v8 = &a2[*(int *)(v9 + 20)];
      v7 = &a1[*(int *)(v9 + 20)];
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
      (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 32))(v8, v7);
      memcpy(&a2[*(int *)(v9 + 24)], &a1[*(int *)(v9 + 24)], 0x70uLL);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  else
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
    v12 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
    v11 = &a2[*(int *)(v12 + 20)];
    v10 = &a1[*(int *)(v12 + 20)];
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(v11, v10);
    memcpy(&a2[*(int *)(v12 + 24)], &a1[*(int *)(v12 + 24)], 0x70uLL);
    swift_storeEnumTagMultiPayload();
  }
  return a2;
}

uint64_t partial apply for closure #2 in ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t outlined destroy of SiriPaymentsSnippetModel.SendPaymentConfirmationModel(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  v5 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
  v4 = *(int *)(v5 + 20);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v4);
  v6 = a1 + *(int *)(v5 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v6 + 64), *(_QWORD *)(v6 + 72));
  outlined consume of Data._Representation(*(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 88));
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel)
  {
    v0 = type metadata accessor for SiriPaymentsSnippetModel();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel)
  {
    v0 = type metadata accessor for SiriPaymentsSnippetModel();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel)
  {
    v0 = type metadata accessor for SiriPaymentsSnippetModel();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for SiriPaymentsSnippetModel, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel);
    return v1;
  }
  return v3;
}

_QWORD *outlined init with copy of SiriPaymentsSnippetModel(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int EnumCaseMultiPayload;

  type metadata accessor for SiriPaymentsSnippetModel();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
      (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v4 - 8) + 16))(a2, a1);
      v11 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
      v10 = (char *)a2 + *(int *)(v11 + 20);
      v9 = (char *)a1 + *(int *)(v11 + 20);
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
      (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 16))(v10, v9);
      v21 = (_QWORD *)((char *)a2 + *(int *)(v11 + 24));
      v20 = (uint64_t *)((char *)a1 + *(int *)(v11 + 24));
      *v21 = *v20;
      v12 = v20[1];
      swift_bridgeObjectRetain();
      v21[1] = v12;
      v21[2] = v20[2];
      v13 = v20[3];
      swift_bridgeObjectRetain();
      v21[3] = v13;
      v21[4] = v20[4];
      v14 = v20[5];
      swift_bridgeObjectRetain();
      v21[5] = v14;
      v21[6] = v20[6];
      v15 = v20[7];
      swift_bridgeObjectRetain();
      v21[7] = v15;
      v16 = v20[8];
      v17 = v20[9];
      outlined copy of Data._Representation(v16, v17);
      v21[8] = v16;
      v21[9] = v17;
      v18 = v20[10];
      v19 = v20[11];
      outlined copy of Data._Representation(v18, v19);
      v21[10] = v18;
      v21[11] = v19;
      v21[12] = v20[12];
      v22 = v20[13];
      swift_bridgeObjectRetain();
      v21[13] = v22;
    }
    else
    {
      v7 = *a1;
      swift_bridgeObjectRetain();
      *a2 = v7;
      a2[1] = a1[1];
      v8 = a1[2];
      swift_bridgeObjectRetain();
      a2[2] = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    v25 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
    v24 = (char *)a2 + *(int *)(v25 + 20);
    v23 = (char *)a1 + *(int *)(v25 + 20);
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v24, v23);
    v35 = (_QWORD *)((char *)a2 + *(int *)(v25 + 24));
    v34 = (uint64_t *)((char *)a1 + *(int *)(v25 + 24));
    *v35 = *v34;
    v26 = v34[1];
    swift_bridgeObjectRetain();
    v35[1] = v26;
    v35[2] = v34[2];
    v27 = v34[3];
    swift_bridgeObjectRetain();
    v35[3] = v27;
    v35[4] = v34[4];
    v28 = v34[5];
    swift_bridgeObjectRetain();
    v35[5] = v28;
    v35[6] = v34[6];
    v29 = v34[7];
    swift_bridgeObjectRetain();
    v35[7] = v29;
    v30 = v34[8];
    v31 = v34[9];
    outlined copy of Data._Representation(v30, v31);
    v35[8] = v30;
    v35[9] = v31;
    v32 = v34[10];
    v33 = v34[11];
    outlined copy of Data._Representation(v32, v33);
    v35[10] = v32;
    v35[11] = v33;
    v35[12] = v34[12];
    v36 = v34[13];
    swift_bridgeObjectRetain();
    v35[13] = v36;
    swift_storeEnumTagMultiPayload();
  }
  return a2;
}

unint64_t type metadata accessor for DialogExecutionResult()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for DialogExecutionResult;
  if (!lazy cache variable for type metadata for DialogExecutionResult)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for DialogExecutionResult);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t outlined destroy of SiriPaymentsSnippetModel(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int EnumCaseMultiPayload;

  type metadata accessor for SiriPaymentsSnippetModel();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1);
      v7 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
      v6 = a1 + *(int *)(v7 + 20);
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v6);
      v8 = a1 + *(int *)(v7 + 24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(_QWORD *)(v8 + 64), *(_QWORD *)(v8 + 72));
      outlined consume of Data._Representation(*(_QWORD *)(v8 + 80), *(_QWORD *)(v8 + 88));
      swift_bridgeObjectRelease();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
    v10 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
    v9 = a1 + *(int *)(v10 + 20);
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v9);
    v11 = a1 + *(int *)(v10 + 24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(v11 + 64), *(_QWORD *)(v11 + 72));
    outlined consume of Data._Representation(*(_QWORD *)(v11 + 80), *(_QWORD *)(v11 + 88));
    swift_bridgeObjectRelease();
  }
  return a1;
}

unint64_t type metadata accessor for INRequestPaymentIntentResponse()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for INRequestPaymentIntentResponse;
  if (!lazy cache variable for type metadata for INRequestPaymentIntentResponse)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INRequestPaymentIntentResponse);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t outlined init with copy of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v18;
  uint64_t v19;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v6 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
  v5 = *(int *)(v6 + 20);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a2 + v5, a1 + v5);
  v16 = (_QWORD *)(a1 + *(int *)(v6 + 24));
  v18 = (_QWORD *)(a2 + *(int *)(v6 + 24));
  *v18 = *v16;
  v8 = v16[1];
  swift_bridgeObjectRetain();
  v18[1] = v8;
  v18[2] = v16[2];
  v9 = v16[3];
  swift_bridgeObjectRetain();
  v18[3] = v9;
  v18[4] = v16[4];
  v10 = v16[5];
  swift_bridgeObjectRetain();
  v18[5] = v10;
  v18[6] = v16[6];
  v11 = v16[7];
  swift_bridgeObjectRetain();
  v18[7] = v11;
  v12 = v16[8];
  v13 = v16[9];
  outlined copy of Data._Representation(v12, v13);
  v18[8] = v12;
  v18[9] = v13;
  v14 = v16[10];
  v15 = v16[11];
  outlined copy of Data._Representation(v14, v15);
  v18[10] = v14;
  v18[11] = v15;
  v18[12] = v16[12];
  v19 = v16[13];
  swift_bridgeObjectRetain();
  result = a2;
  v18[13] = v19;
  return result;
}

uint64_t partial apply for closure #1 in ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t outlined destroy of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  v5 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
  v4 = *(int *)(v5 + 20);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v4);
  v6 = a1 + *(int *)(v5 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v6 + 64), *(_QWORD *)(v6 + 72));
  outlined consume of Data._Representation(*(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 88));
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t type metadata accessor for SAUIConfirmationOption()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SAUIConfirmationOption;
  if (!lazy cache variable for type metadata for SAUIConfirmationOption)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOption);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SKIDirectInvocationPayload()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SKIDirectInvocationPayload;
  if (!lazy cache variable for type metadata for SKIDirectInvocationPayload)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SKIDirectInvocationPayload);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SAUIConfirmationView()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SAUIConfirmationView;
  if (!lazy cache variable for type metadata for SAUIConfirmationView)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationView);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SAIntentGroupSendPaymentSnippet()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SAIntentGroupSendPaymentSnippet;
  if (!lazy cache variable for type metadata for SAIntentGroupSendPaymentSnippet)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupSendPaymentSnippet);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SAIntentGroupProtobufMessage()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SAIntentGroupProtobufMessage;
  if (!lazy cache variable for type metadata for SAIntentGroupProtobufMessage)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupProtobufMessage);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SAUIConfirmationOptions()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SAUIConfirmationOptions;
  if (!lazy cache variable for type metadata for SAUIConfirmationOptions)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOptions);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t initializeBufferWithCopyOfBuffer for ConfirmationViewBuilder(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for ConfirmationViewBuilder(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  __swift_destroy_boxed_opaque_existential_0(a1 + 40);
  return __swift_destroy_boxed_opaque_existential_0(a1 + 80);
}

_QWORD *initializeWithCopy for ConfirmationViewBuilder(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a2[3];
  a1[3] = v2;
  a1[4] = a2[4];
  (**(void (***)(void))(v2 - 8))();
  v3 = a2[8];
  a1[8] = v3;
  a1[9] = a2[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  v4 = a2[13];
  a1[13] = v4;
  a1[14] = a2[14];
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
  return a1;
}

uint64_t assignWithCopy for ConfirmationViewBuilder(uint64_t a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 40, a2 + 5);
  __swift_assign_boxed_opaque_existential_1(a1 + 80, a2 + 10);
  return a1;
}

uint64_t __swift_assign_boxed_opaque_existential_1(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE v10[24];

  v8 = (_QWORD *)result;
  if ((uint64_t *)result != a2)
  {
    v6 = *(_QWORD *)(result + 24);
    v7 = a2[3];
    if (v6 == v7)
    {
      if ((*(_DWORD *)(*(_QWORD *)(v6 - 8) + 80) & 0x20000) != 0)
      {
        v5 = *a2;
        swift_retain();
        result = swift_release();
        *v8 = v5;
      }
      else
      {
        return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(v6 - 8) + 24))(result, a2);
      }
    }
    else
    {
      *(_QWORD *)(result + 24) = v7;
      *(_QWORD *)(result + 32) = a2[4];
      v4 = (*(_DWORD *)(*(_QWORD *)(v7 - 8) + 80) & 0x20000) == 0;
      if ((*(_DWORD *)(*(_QWORD *)(v6 - 8) + 80) & 0x20000) != 0)
      {
        if ((*(_DWORD *)(*(_QWORD *)(v7 - 8) + 80) & 0x20000) != 0)
        {
          v2 = *a2;
          swift_retain();
          *v8 = v2;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)(v7 - 8) + 16))(result, a2);
        }
        return swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v10, result);
        if (v4)
        {
          (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v7 - 8) + 16))(v8, a2);
        }
        else
        {
          v3 = *a2;
          swift_retain();
          *v8 = v3;
        }
        return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)(v6 - 8) + 8))(v10);
      }
    }
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy120_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x78uLL);
}

uint64_t assignWithTake for ConfirmationViewBuilder(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  memcpy((void *)a1, (const void *)a2, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_0(a1 + 40);
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_0(a1 + 80);
  memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationViewBuilder(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 120))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationViewBuilder(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = 0;
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 112) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 120) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 120) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationViewBuilder()
{
  return &type metadata for ConfirmationViewBuilder;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ConfirmationViewBuilder.WalletAppLaunchAction(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for ConfirmationViewBuilder.WalletAppLaunchAction(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for ConfirmationViewBuilder.WalletAppLaunchAction(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for ConfirmationViewBuilder.WalletAppLaunchAction(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationViewBuilder.WalletAppLaunchAction()
{
  return &type metadata for ConfirmationViewBuilder.WalletAppLaunchAction;
}

unint64_t base witness table accessor for Equatable in ConfirmationViewBuilder.WalletAppLaunchAction()
{
  return lazy protocol witness table accessor for type ConfirmationViewBuilder.WalletAppLaunchAction and conformance ConfirmationViewBuilder.WalletAppLaunchAction();
}

unint64_t lazy protocol witness table accessor for type SASTItemGroup and conformance NSObject()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SASTItemGroup and conformance NSObject;
  if (!lazy protocol witness table cache variable for type SASTItemGroup and conformance NSObject)
  {
    v0 = type metadata accessor for SASTItemGroup();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BDD0240], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SASTItemGroup and conformance NSObject);
    return v1;
  }
  return v3;
}

uint64_t PaymentsContinueInAppStrategy.__allocating_init(globals:commonLabelsProvider:errorTemplateProvider:)(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  swift_allocObject();
  return PaymentsContinueInAppStrategy.init(globals:commonLabelsProvider:errorTemplateProvider:)(a1, a2, a3);
}

uint64_t PaymentsContinueInAppStrategy.init(globals:commonLabelsProvider:errorTemplateProvider:)(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v15;
  uint64_t v16[5];
  _BYTE v17[40];
  _BYTE v18[40];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;

  v24 = 0;
  v23 = 0;
  v22 = 0;
  v19 = 0;
  v4 = *v3;
  v24 = a1;
  v23 = a2;
  v22 = a3;
  v21 = *(_QWORD *)(v4 + 80);
  v20 = *(_QWORD *)(v4 + 88);
  v8 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  (*(void (**)(uint64_t))(v7 + 16))(v8);
  outlined init with take of CommonLabelsProviding(v18, (void *)(v15 + 16));
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v17);
  outlined init with take of CommonLabelsProviding(v17, (void *)(v15 + 56));
  v11 = a3[3];
  v9 = a3[4];
  v10 = __swift_project_boxed_opaque_existential_1(a3, v11);
  v16[3] = v11;
  v16[4] = v9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, _QWORD *))(*(_QWORD *)(v11 - 8) + 16))(boxed_opaque_existential_1, v10);
  outlined init with take of CommonLabelsProviding(v16, (void *)(v15 + 96));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a3);
  __swift_destroy_boxed_opaque_existential_0(a2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v15;
}

uint64_t PaymentsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  v3[89] = v2;
  v3[88] = a2;
  v3[87] = a1;
  v3[76] = v3;
  v3[77] = 0;
  v3[78] = 0;
  v3[80] = 0;
  v3[72] = 0;
  v3[73] = 0;
  v3[74] = 0;
  v3[75] = 0;
  v9 = *v2;
  v3[90] = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[91] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v3[92] = swift_task_alloc();
  v4 = type metadata accessor for Locale();
  v3[93] = v4;
  v3[94] = *(_QWORD *)(v4 - 8);
  v3[95] = swift_task_alloc();
  v3[96] = swift_task_alloc();
  v5 = type metadata accessor for TemplatingResult();
  v3[97] = v5;
  v3[98] = *(_QWORD *)(v5 - 8);
  v3[99] = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  v3[100] = v6;
  v3[101] = *(_QWORD *)(v6 - 8);
  v3[102] = swift_task_alloc();
  v3[77] = a2;
  v3[103] = *(_QWORD *)(v9 + 80);
  v3[104] = *(_QWORD *)(v9 + 88);
  v3[78] = v2;
  return swift_task_switch();
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = (_QWORD *)*v3;
  v6 = (_QWORD *)(*v3 + 16);
  v7 = *v3 + 496;
  v5[76] = *v3;
  v5[111] = v2;
  v5[112] = a1;
  v5[113] = a2;
  swift_task_dealloc();
  if (!v2)
  {
    (*(void (**)(_QWORD, _QWORD))(v6[92] + 8))(v6[94], v6[91]);
    __swift_destroy_boxed_opaque_existential_0(v7);
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = (_QWORD *)*v3;
  v6 = (_QWORD *)(*v3 + 16);
  v7 = *v3 + 376;
  v5[76] = *v3;
  v5[116] = v2;
  v5[117] = a1;
  v5[118] = a2;
  swift_task_dealloc();
  if (!v2)
  {
    (*(void (**)(_QWORD, _QWORD))(v6[92] + 8))(v6[93], v6[91]);
    __swift_destroy_boxed_opaque_existential_0(v7);
    swift_release();
  }
  return swift_task_switch();
}

uint64_t PaymentsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *buf;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint32_t v21;
  os_log_type_t v22;
  NSObject *v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 816);
  v19 = *(_QWORD *)(v0 + 808);
  v20 = *(_QWORD *)(v0 + 800);
  *(_QWORD *)(v0 + 608) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v1, v2, v20);
  v23 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 632) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v21 = *(_DWORD *)(v0 + 952);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v24 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v23, v22))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v15 = createStorage<A>(capacity:type:)(0);
    v16 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v18 + 664) = buf;
    *(_QWORD *)(v18 + 672) = v15;
    *(_QWORD *)(v18 + 680) = v16;
    serialize(_:at:)(0, (_BYTE **)(v18 + 664));
    serialize(_:at:)(0, (_BYTE **)(v18 + 664));
    *(_QWORD *)(v18 + 688) = v24;
    v17 = (_QWORD *)swift_task_alloc();
    v17[2] = v18 + 664;
    v17[3] = v18 + 672;
    v17[4] = v18 + 680;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v23, v22, "#PaymentsContinueInAppStrategy makeContinueInAppResponse", buf, v21);
    destroyStorage<A>(_:count:)(v15, 0, v13);
    destroyStorage<A>(_:count:)(v16, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v18 + 816);
  v10 = *(_QWORD *)(v18 + 808);
  v12 = *(_QWORD *)(v18 + 800);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  type metadata accessor for INRequestPaymentIntent();
  if (swift_dynamicCastMetatype())
  {
    *(_BYTE *)(v18 + 956) = 0;
  }
  else
  {
    type metadata accessor for INSendPaymentIntent();
    if (swift_dynamicCastMetatype())
    {
      *(_BYTE *)(v18 + 956) = 1;
    }
    else
    {
      type metadata accessor for INSearchForAccountsIntent();
      if (swift_dynamicCastMetatype())
        *(_BYTE *)(v18 + 956) = 2;
      else
        *(_BYTE *)(v18 + 956) = 1;
    }
  }
  outlined init with copy of GlobalsProviding(*(_QWORD *)(v18 + 712) + 96, v18 + 16);
  v7 = *(_QWORD *)(v18 + 40);
  v8 = *(_QWORD *)(v18 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v18 + 16), v7);
  v5 = *(unsigned __int8 *)(v18 + 956);
  *(_QWORD *)(v18 + 840) = type metadata accessor for IntentResolutionRecord();
  v6 = IntentResolutionRecord.app.getter();
  *(_QWORD *)(v18 + 848) = v6;
  v9 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 40) + **(int **)(v8 + 40));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v18 + 856) = v3;
  *v3 = *(_QWORD *)(v18 + 608);
  v3[1] = PaymentsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:);
  return v9(*(_QWORD *)(v18 + 792), v5, v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 608) = *v1;
  *(_QWORD *)(v2 + 864) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;

  v26 = v0[89];
  v0[76] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  type metadata accessor for SAAceView();
  v0[80] = Array.init()();
  outlined init with copy of GlobalsProviding(v26 + 16, (uint64_t)(v0 + 7));
  __swift_project_boxed_opaque_existential_1(v0 + 7, v0[10]);
  v27 = dispatch thunk of DeviceState.isPhone.getter();
  swift_retain();
  if ((v27 & 1) != 0)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v25 + 7));
    swift_retain();
  }
  else
  {
    outlined init with copy of GlobalsProviding(v25[89] + 16, (uint64_t)(v25 + 12));
    __swift_project_boxed_opaque_existential_1(v25 + 12, v25[15]);
    v24 = dispatch thunk of DeviceState.isPad.getter();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v25 + 12));
    swift_release();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v25 + 7));
    swift_retain();
    if ((v24 & 1) == 0)
    {
      outlined init with copy of GlobalsProviding(v25[89] + 16, (uint64_t)(v25 + 17));
      __swift_project_boxed_opaque_existential_1(v25 + 17, v25[20]);
      v23 = dispatch thunk of DeviceState.isPod.getter();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v25 + 17));
      swift_release();
      if ((v23 & 1) == 0)
        goto LABEL_8;
      goto LABEL_6;
    }
  }
  swift_release();
LABEL_6:
  outlined init with copy of GlobalsProviding(v25[89] + 16, (uint64_t)(v25 + 52));
  __swift_project_boxed_opaque_existential_1(v25 + 52, v25[55]);
  v22 = dispatch thunk of DeviceState.isCarPlay.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v25 + 52));
  if ((v22 & 1) == 0)
  {
    v17 = v25[89];
    outlined init with copy of GlobalsProviding(v17 + 56, (uint64_t)(v25 + 57));
    v18 = v25[60];
    v19 = v25[61];
    __swift_project_boxed_opaque_existential_1(v25 + 57, v18);
    v21 = IntentResolutionRecord.app.getter();
    v25[109] = v21;
    outlined init with copy of GlobalsProviding(v17 + 16, (uint64_t)(v25 + 62));
    __swift_project_boxed_opaque_existential_1(v25 + 62, v25[65]);
    dispatch thunk of DeviceState.siriLocale.getter();
    v20 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 + 32) + **(int **)(v19 + 32));
    v1 = (_QWORD *)swift_task_alloc();
    v25[110] = v1;
    *v1 = v25[76];
    v1[1] = PaymentsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:);
    return v20(v21, v25[96], v18, v19);
  }
LABEL_8:
  outlined init with copy of GlobalsProviding(v25[89] + 16, (uint64_t)(v25 + 22));
  __swift_project_boxed_opaque_existential_1(v25 + 22, v25[25]);
  v16 = dispatch thunk of DeviceState.isWatch.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v25 + 22));
  if ((v16 & 1) != 0)
  {
    v11 = v25[89];
    outlined init with copy of GlobalsProviding(v11 + 56, (uint64_t)(v25 + 42));
    v12 = v25[45];
    v13 = v25[46];
    __swift_project_boxed_opaque_existential_1(v25 + 42, v12);
    v15 = IntentResolutionRecord.app.getter();
    v25[114] = v15;
    outlined init with copy of GlobalsProviding(v11 + 16, (uint64_t)(v25 + 47));
    __swift_project_boxed_opaque_existential_1(v25 + 47, v25[50]);
    dispatch thunk of DeviceState.siriLocale.getter();
    v14 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 + 32) + **(int **)(v13 + 32));
    v3 = (_QWORD *)swift_task_alloc();
    v25[115] = v3;
    *v3 = v25[76];
    v3[1] = PaymentsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:);
    return v14(v15, v25[95], v12, v13);
  }
  else
  {
    v9 = v25[99];
    v7 = v25[98];
    v8 = v25[97];
    v10 = v25[91];
    v5 = v25[89];
    v6 = (uint64_t *)v25[87];
    outlined init with copy of GlobalsProviding(v5 + 16, (uint64_t)(v25 + 27));
    outlined init with copy of GlobalsProviding(v5 + 16, (uint64_t)(v25 + 32));
    __swift_project_boxed_opaque_existential_1(v25 + 32, v25[35]);
    dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
    swift_bridgeObjectRetain();
    v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v10, 1);
    v25[37] = 0;
    v25[38] = 0;
    v25[39] = 0;
    v25[40] = 0;
    v25[41] = 0;
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v6[3] = type metadata accessor for AceOutput();
    v6[4] = MEMORY[0x24BE99088];
    __swift_allocate_boxed_opaque_existential_1(v6);
    static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v25 + 37));
    outlined destroy of NLContextUpdate?(v10);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v25 + 32));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v25 + 27));
    outlined destroy of [SFCardSection]();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v25[76] + 8))();
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9 = v0[113];
  v5 = v0[112];
  v6 = (const void *)v0[92];
  v4 = v0[89];
  v0[76] = v0;
  v0[74] = v5;
  v0[75] = v9;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 57));
  v7 = IntentResolutionRecord.app.getter();
  v1 = type metadata accessor for URL();
  (*(void (**)(const void *, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v6, 1);
  outlined init with copy of GlobalsProviding(v4 + 16, (uint64_t)(v0 + 67));
  v8 = static ConfirmationViewBuilder.makeAppLaunchButton(for:buttonText:punchoutURL:deviceState:)(v7, v5, v9, v6, v0 + 67);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 67));
  outlined destroy of URL?((uint64_t)v6);
  swift_release();
  v0[82] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAAceView]);
  Array.append(_:)();
  swift_bridgeObjectRelease();
  v14 = v0[99];
  v12 = v0[98];
  v13 = v0[97];
  v15 = v0[91];
  v10 = v0[89];
  v11 = (uint64_t *)v0[87];
  outlined init with copy of GlobalsProviding(v10 + 16, (uint64_t)(v0 + 27));
  outlined init with copy of GlobalsProviding(v10 + 16, (uint64_t)(v0 + 32));
  __swift_project_boxed_opaque_existential_1(v0 + 32, v0[35]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  swift_bridgeObjectRetain();
  v2 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v15, 1);
  v0[37] = 0;
  v0[38] = 0;
  v0[39] = 0;
  v0[40] = 0;
  v0[41] = 0;
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v11[3] = type metadata accessor for AceOutput();
  v11[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v11);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 37));
  outlined destroy of NLContextUpdate?(v15);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));
  outlined destroy of [SFCardSection]();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v14, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[76] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = v0[118];
  v3 = v0[117];
  v0[76] = v0;
  v0[72] = v3;
  v0[73] = v7;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 42));
  v5 = IntentResolutionRecord.app.getter();
  v4 = (id)IntentResolutionRecord.intent.getter();
  v6 = static ConfirmationViewBuilder.makeWatchAppLaunchButton(for:buttonText:intent:)(v5, v3, v7, v4);

  swift_release();
  v0[81] = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAAceView]);
  Array.append(_:)();
  swift_bridgeObjectRelease();
  v12 = v0[99];
  v10 = v0[98];
  v11 = v0[97];
  v13 = v0[91];
  v8 = v0[89];
  v9 = (uint64_t *)v0[87];
  outlined init with copy of GlobalsProviding(v8 + 16, (uint64_t)(v0 + 27));
  outlined init with copy of GlobalsProviding(v8 + 16, (uint64_t)(v0 + 32));
  __swift_project_boxed_opaque_existential_1(v0 + 32, v0[35]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  swift_bridgeObjectRetain();
  v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v13, 1);
  v0[37] = 0;
  v0[38] = 0;
  v0[39] = 0;
  v0[40] = 0;
  v0[41] = 0;
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v9[3] = type metadata accessor for AceOutput();
  v9[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v9);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 37));
  outlined destroy of NLContextUpdate?(v13);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));
  outlined destroy of [SFCardSection]();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[76] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 608) = v0;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 608) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = v0[99];
  v5 = v0[98];
  v6 = v0[97];
  v1 = v0[96];
  v2 = v0[94];
  v3 = v0[93];
  v0[76] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 62));
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 57));
  outlined destroy of [SFCardSection]();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[76] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = v0[99];
  v5 = v0[98];
  v6 = v0[97];
  v1 = v0[95];
  v2 = v0[94];
  v3 = v0[93];
  v0[76] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 47));
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 42));
  outlined destroy of [SFCardSection]();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[76] + 8))();
}

uint64_t PaymentsContinueInAppStrategy.deinit()
{
  uint64_t v0;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  __swift_destroy_boxed_opaque_existential_0(v0 + 96);
  return v2;
}

uint64_t PaymentsContinueInAppStrategy.__deallocating_deinit()
{
  PaymentsContinueInAppStrategy.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance PaymentsContinueInAppStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return PaymentsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:)(a1, a2);
}

uint64_t type metadata instantiation function for PaymentsContinueInAppStrategy()
{
  return swift_allocateGenericClassMetadata();
}

uint64_t type metadata completion function for PaymentsContinueInAppStrategy()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t type metadata accessor for PaymentsContinueInAppStrategy(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x249572C38](a1, a2, &nominal type descriptor for PaymentsContinueInAppStrategy);
}

uint64_t instantiation function for generic protocol witness table for PaymentsContinueInAppStrategy<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsContinueInAppStrategy<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for ContinueInAppFlowStrategy in PaymentsContinueInAppStrategy<A, B>(uint64_t a1)
{
  return MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsContinueInAppStrategy<A, B>, a1);
}

uint64_t default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v4;
  _BYTE v6[40];
  _BYTE v7[40];
  _BYTE v8[40];
  uint64_t v9[7];

  v9[6] = a1;
  v9[5] = a2;
  v4 = type metadata accessor for Globals();
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v9);
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  result = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v9, (uint64_t)v8, (uint64_t)v7, (uint64_t)v6);
  a3[3] = v4;
  a3[4] = (uint64_t)&protocol witness table for Globals;
  *a3 = result;
  return result;
}

uint64_t default argument 1 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a1;
  v7 = a2;
  v6 = 0;
  v4 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v5 = (char *)&v3 - v4;
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t PaymentsRCHFlowStrategy.__allocating_init(globals:contactResolver:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return PaymentsRCHFlowStrategy.init(globals:contactResolver:)(a1, a2);
}

uint64_t PaymentsRCHFlowStrategy.init(globals:contactResolver:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  _BYTE **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint32_t v40;
  uint64_t v41;
  int v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE v49[8];
  _BYTE v50[8];
  uint64_t v51;
  uint32_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v31 = a1;
  v30 = a2;
  v57 = 0;
  v56 = 0;
  v55 = 0;
  v28 = 0;
  v29 = *v2;
  v41 = 0;
  v36 = type metadata accessor for Logger();
  v35 = *(_QWORD *)(v36 - 8);
  v32 = (*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = (char *)&v12 - v32;
  v34 = (char *)&v12 - v32;
  v57 = MEMORY[0x24BDAC7A8](v31);
  v56 = v4;
  v55 = v33;
  v54 = *(_QWORD *)(v5 + 80);
  v53 = *(_QWORD *)(v5 + 88);
  v6 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v3, v6, v36);
  v43 = Logger.logObject.getter();
  v42 = static os_log_type_t.debug.getter();
  v39 = &v51;
  v51 = 2;
  v37 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v38 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v40 = v52;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v44 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v43, (os_log_type_t)v42))
  {
    v7 = v28;
    v18 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v17 = 0;
    v19 = createStorage<A>(capacity:type:)(0);
    v20 = createStorage<A>(capacity:type:)(v17);
    v24 = &v48;
    v48 = v18;
    v25 = &v47;
    v47 = v19;
    v22 = &v46;
    v46 = v20;
    v21 = 0;
    serialize(_:at:)(0, &v48);
    serialize(_:at:)(v21, v24);
    v45 = v44;
    v23 = &v12;
    MEMORY[0x24BDAC7A8](&v12);
    v8 = v25;
    v9 = &v12 - 6;
    v26 = &v12 - 6;
    v9[2] = (uint64_t)v24;
    v9[3] = (uint64_t)v8;
    v9[4] = v10;
    v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v7)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, v43, (os_log_type_t)v42, "#PaymentsRCHFlowStrategy init", v18, v40);
      v15 = 0;
      destroyStorage<A>(_:count:)(v19, 0, v16);
      destroyStorage<A>(_:count:)(v20, v15, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v18, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v36);
  v13 = v50;
  outlined init with copy of GlobalsProviding(v31, (uint64_t)v50);
  outlined init with take of CommonLabelsProviding(v13, (void *)(v33 + 16));
  v14 = v49;
  outlined init with copy of GlobalsProviding(v30, (uint64_t)v49);
  outlined init with take of CommonLabelsProviding(v14, (void *)(v33 + 56));
  __swift_destroy_boxed_opaque_existential_0(v30);
  __swift_destroy_boxed_opaque_existential_0(v31);
  return v33;
}

uint64_t PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;

  v3[44] = v2;
  v3[43] = a2;
  v3[42] = a1;
  v3[17] = v3;
  v3[18] = 0;
  v3[19] = 0;
  v3[20] = 0;
  v3[28] = 0;
  v7 = *v2;
  v3[45] = *v2;
  v4 = type metadata accessor for Logger();
  v3[46] = v4;
  v3[47] = *(_QWORD *)(v4 - 8);
  v3[48] = swift_task_alloc();
  v3[49] = swift_task_alloc();
  v3[50] = swift_task_alloc();
  v3[51] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[52] = swift_task_alloc();
  v3[18] = a1;
  v3[19] = a2;
  v3[53] = *(_QWORD *)(v7 + 80);
  v3[20] = v2;
  return swift_task_switch();
}

uint64_t PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint32_t v28;
  os_log_type_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint32_t v41;
  os_log_type_t v42;
  NSObject *log;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint8_t *buf;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint32_t size;
  os_log_type_t v67;
  NSObject *oslog;
  uint64_t v69;
  uint64_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t);
  uint32_t v80;
  os_log_type_t v81;
  NSObject *v82;
  uint64_t v83;

  v76 = *(_QWORD *)(v0 + 416);
  v1 = *(_QWORD *)(v0 + 408);
  v77 = *(_QWORD *)(v0 + 376);
  v78 = *(_QWORD *)(v0 + 368);
  *(_QWORD *)(v0 + 136) = v0;
  v2 = SignpostName.makeIntentFromParse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v76);
  v3 = Logger.payments.unsafeMutableAddressor();
  v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16);
  v79(v1, v3, v78);
  v82 = Logger.logObject.getter();
  v81 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 168) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v80 = *(_DWORD *)(v0 + 432);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v83 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v82, v81))
  {
    v71 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v72 = createStorage<A>(capacity:type:)(0);
    v73 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v75 + 304) = v71;
    *(_QWORD *)(v75 + 312) = v72;
    *(_QWORD *)(v75 + 320) = v73;
    serialize(_:at:)(0, (_BYTE **)(v75 + 304));
    serialize(_:at:)(0, (_BYTE **)(v75 + 304));
    *(_QWORD *)(v75 + 328) = v83;
    v74 = (_QWORD *)swift_task_alloc();
    v74[2] = v75 + 304;
    v74[3] = v75 + 312;
    v74[4] = v75 + 320;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v82, v81, "#PaymentsRCHFlowStrategy makeIntentFromParse", v71, v80);
    destroyStorage<A>(_:count:)(v72, 0, v70);
    destroyStorage<A>(_:count:)(v73, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v71, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v63 = *(_QWORD *)(v75 + 408);
  v4 = *(_QWORD *)(v75 + 400);
  v62 = *(_QWORD *)(v75 + 376);
  v65 = *(_QWORD *)(v75 + 368);

  v64 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
  v64(v63, v65);
  v5 = Logger.payments.unsafeMutableAddressor();
  v79(v4, v5, v65);
  oslog = Logger.logObject.getter();
  v67 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v75 + 176) = 2;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v75 + 436);
  v69 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v67))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v59 = createStorage<A>(capacity:type:)(0);
    v60 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v75 + 272) = buf;
    *(_QWORD *)(v75 + 280) = v59;
    *(_QWORD *)(v75 + 288) = v60;
    serialize(_:at:)(0, (_BYTE **)(v75 + 272));
    serialize(_:at:)(0, (_BYTE **)(v75 + 272));
    *(_QWORD *)(v75 + 296) = v69;
    v61 = (_QWORD *)swift_task_alloc();
    v61[2] = v75 + 272;
    v61[3] = v75 + 280;
    v61[4] = v75 + 288;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, oslog, v67, "#PaymentsRCHFlowStrategy Transforming Parse to SiriKitPaymentsIntent.", buf, size);
    destroyStorage<A>(_:count:)(v59, 0, v57);
    destroyStorage<A>(_:count:)(v60, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v54 = *(_QWORD *)(v75 + 400);
  v55 = *(_QWORD *)(v75 + 368);
  v56 = *(id *)(v75 + 344);

  v64(v54, v55);
  v6 = v56;
  if (v56)
  {
    v52 = *(void **)(v75 + 344);
    v53 = *(_QWORD *)(*(_QWORD *)(v75 + 360) + 96);
  }
  else
  {
    v52 = 0;
    v53 = 0;
  }
  v50 = *(_QWORD *)(v75 + 352);
  outlined init with copy of GlobalsProviding(v50 + 16, v75 + 16);
  v49 = *(_QWORD *)(v75 + 40);
  v48 = *(_QWORD *)(v75 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v75 + 16), v49);
  (*(void (**)(uint64_t))(v48 + 24))(v49);
  outlined init with copy of GlobalsProviding(v50 + 56, v75 + 96);
  v51 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(v52, v53, v75 + 56, v75 + 96);
  __swift_destroy_boxed_opaque_existential_0(v75 + 96);
  __swift_destroy_boxed_opaque_existential_0(v75 + 56);
  __swift_destroy_boxed_opaque_existential_0(v75 + 16);

  if (v51)
  {
    v47 = swift_dynamicCastUnknownClass();
    if (v47)
    {
      v46 = v47;
    }
    else
    {

      v46 = 0;
    }
    v45 = v46;
  }
  else
  {
    v45 = 0;
  }
  if (v45)
  {
    v7 = *(_QWORD *)(v75 + 392);
    v40 = *(_QWORD *)(v75 + 368);
    *(_QWORD *)(v75 + 224) = v45;
    v8 = Logger.payments.unsafeMutableAddressor();
    v79(v7, v8, v40);
    log = Logger.logObject.getter();
    v42 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v75 + 232) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v41 = *(_DWORD *)(v75 + 444);
    v44 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v42))
    {
      v36 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v37 = createStorage<A>(capacity:type:)(0);
      v38 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v75 + 240) = v36;
      *(_QWORD *)(v75 + 248) = v37;
      *(_QWORD *)(v75 + 256) = v38;
      serialize(_:at:)(0, (_BYTE **)(v75 + 240));
      serialize(_:at:)(0, (_BYTE **)(v75 + 240));
      *(_QWORD *)(v75 + 264) = v44;
      v39 = (_QWORD *)swift_task_alloc();
      v39[2] = v75 + 240;
      v39[3] = v75 + 248;
      v39[4] = v75 + 256;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24701B000, log, v42, "#PaymentsRCHFlowStrategy Returning SiriKitPaymentsIntent.", v36, v41);
      destroyStorage<A>(_:count:)(v37, 0, v35);
      destroyStorage<A>(_:count:)(v38, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v36, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v33 = *(_QWORD *)(v75 + 416);
    v34 = *(_QWORD *)(v75 + 392);
    v32 = *(_QWORD *)(v75 + 368);

    v64(v34, v32);
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v33);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v75 + 136) + 8))(v45);
  }
  else
  {
    v10 = *(_QWORD *)(v75 + 384);
    v27 = *(_QWORD *)(v75 + 368);
    v11 = Logger.payments.unsafeMutableAddressor();
    v79(v10, v11, v27);
    v30 = Logger.logObject.getter();
    v29 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v75 + 184) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v28 = *(_DWORD *)(v75 + 440);
    v31 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v30, v29))
    {
      v23 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v24 = createStorage<A>(capacity:type:)(0);
      v25 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v75 + 192) = v23;
      *(_QWORD *)(v75 + 200) = v24;
      *(_QWORD *)(v75 + 208) = v25;
      serialize(_:at:)(0, (_BYTE **)(v75 + 192));
      serialize(_:at:)(0, (_BYTE **)(v75 + 192));
      *(_QWORD *)(v75 + 216) = v31;
      v26 = (_QWORD *)swift_task_alloc();
      v26[2] = v75 + 192;
      v26[3] = v75 + 200;
      v26[4] = v75 + 208;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24701B000, v30, v29, "#PaymentsRCHFlowStrategy could not convert to SiriKitPaymentsIntent.", v23, v28);
      destroyStorage<A>(_:count:)(v24, 0, v22);
      destroyStorage<A>(_:count:)(v25, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v23, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v19 = *(_QWORD *)(v75 + 384);
    v20 = *(_QWORD *)(v75 + 368);

    v64(v19, v20);
    v21 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_typeName);
    if (v21)
    {
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v16 = v12;

      v17 = v15;
      v18 = v16;
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
    if (v18)
    {
      v14 = *(_QWORD *)(v75 + 416);
      lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
      swift_allocError();
      *(_QWORD *)v13 = v17;
      *(_QWORD *)(v13 + 8) = v18;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 40) = 0;
      *(_BYTE *)(v13 + 48) = 10;
      swift_willThrow();
      $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
      outlined destroy of Signpost.OpenSignpost(v14);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)())(*(_QWORD *)(v75 + 136) + 8))();
    }
    else
    {
      return _assertionFailure(_:_:file:line:flags:)();
    }
  }
}

void $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)()
{
  Signpost.OpenSignpost.end()();
}

uint64_t PaymentsRCHFlowStrategy.actionForInput(input:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD v6[2];
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v10 = a2;
  v6[1] = a1;
  v3 = v2;
  v8 = v3;
  v18 = 0;
  v17 = 0;
  v9 = (_QWORD *)*v3;
  v14 = type metadata accessor for Parse();
  v12 = *(_QWORD *)(v14 - 8);
  v7 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v13 = (uint64_t)v6 - v7;
  v18 = a1;
  v17 = v8;
  v11 = v9[10];
  v16 = v11;
  v15 = v9[11];
  Input.parse.getter();
  static FlowUtil.actionForInput(parse:intentType:)(v13, v11, v9[12], v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
}

uint64_t PaymentsRCHFlowStrategy.makeAppDoesNotSupportIntentResponse(app:intent:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t *v25;
  _BYTE **v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint32_t v45;
  uint64_t v46;
  int v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint32_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v30 = a5;
  v36 = a1;
  v35 = a2;
  v32 = a3;
  v33 = a4;
  v62 = 0;
  v61 = 0;
  v58 = 0;
  v59 = 0;
  v57 = 0;
  v31 = 0;
  v34 = *v5;
  v46 = 0;
  v41 = type metadata accessor for Logger();
  v40 = *(_QWORD *)(v41 - 8);
  v37 = (*(_QWORD *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = (char *)&v17 - v37;
  v39 = (char *)&v17 - v37;
  v62 = MEMORY[0x24BDAC7A8](v36);
  v61 = v7;
  v60 = *(_QWORD *)(v8 + 80);
  v58 = v9;
  v59 = v10;
  v57 = v38;
  v56 = *(_QWORD *)(v8 + 88);
  v11 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v6, v11, v41);
  v48 = Logger.logObject.getter();
  v47 = static os_log_type_t.debug.getter();
  v44 = &v54;
  v54 = 2;
  v42 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v43 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v45 = v55;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v49 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v48, (os_log_type_t)v47))
  {
    v12 = v31;
    v20 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v19 = 0;
    v21 = createStorage<A>(capacity:type:)(0);
    v22 = createStorage<A>(capacity:type:)(v19);
    v26 = &v53;
    v53 = v20;
    v27 = &v52;
    v52 = v21;
    v24 = &v51;
    v51 = v22;
    v23 = 0;
    serialize(_:at:)(0, &v53);
    serialize(_:at:)(v23, v26);
    v50 = v49;
    v25 = &v17;
    MEMORY[0x24BDAC7A8](&v17);
    v13 = v27;
    v14 = &v17 - 6;
    v28 = &v17 - 6;
    v14[2] = (uint64_t)v26;
    v14[3] = (uint64_t)v13;
    v14[4] = v15;
    v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v12)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, v48, (os_log_type_t)v47, "#PaymentsRCHFlowStrategy makeAppDoesNotSupportIntentResponse", v20, v45);
      v17 = 0;
      destroyStorage<A>(_:count:)(v21, 0, v18);
      destroyStorage<A>(_:count:)(v22, v17, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v20, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v41);
  type metadata accessor for EmptyOutput();
  return static EmptyOutput.instance.getter();
}

uint64_t PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[5] = 0;
  v7 = *v2;
  v3[7] = *v2;
  v4 = type metadata accessor for Logger();
  v3[8] = v4;
  v3[9] = *(_QWORD *)(v4 - 8);
  v3[10] = swift_task_alloc();
  v3[3] = a1;
  v3[4] = a2;
  v3[11] = *(_QWORD *)(v7 + 80);
  v3[5] = v2;
  v3[12] = *(_QWORD *)(v7 + 88);
  return swift_task_switch();
}

uint64_t PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint32_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;

  v17 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 80);
  v14 = *(_QWORD *)(v0 + 72);
  v15 = *(_QWORD *)(v0 + 64);
  v18 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 16) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v1, v2, v15);
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = v16;
  v20[3] = v17;
  v20[4] = *(_QWORD *)(v18 + 96);
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 48) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v19 = *(_DWORD *)(v0 + 104);
  v23 = swift_allocObject();
  *(_BYTE *)(v23 + 16) = 32;
  v24 = swift_allocObject();
  *(_BYTE *)(v24 + 16) = 8;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = partial apply for implicit closure #1 in PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:);
  *(_QWORD *)(v21 + 24) = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v22 + 24) = v21;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v25 + 24) = v22;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v26 = v3;
  swift_retain();
  *v26 = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[1] = v23;
  swift_retain();
  v26[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[3] = v24;
  swift_retain();
  v26[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[5] = v25;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v27, v28))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v11 = createStorage<A>(capacity:type:)(0);
    v12 = createStorage<A>(capacity:type:)(1);
    v29 = buf;
    v30 = v11;
    v31 = v12;
    serialize(_:at:)(2, &v29);
    serialize(_:at:)(1, &v29);
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v23;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    _os_log_impl(&dword_24701B000, v27, v28, "#PaymentsRCHFlowStrategy<%s> makeIntentExecutionBehavior", buf, v19);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v7 = v13[10];
  v5 = v13[9];
  v6 = v13[8];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
  type metadata accessor for SiriKitIntentExecutionBehavior();
  v8 = static SiriKitIntentExecutionBehavior.standard()();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v13[2] + 8))(v8);
}

uint64_t PaymentsRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v11;

  v5[9] = a4;
  v5[8] = a1;
  v5[2] = v5;
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = 0;
  v5[6] = 0;
  v11 = *v4;
  v5[10] = *v4;
  v6 = type metadata accessor for Logger();
  v5[11] = v6;
  v5[12] = *(_QWORD *)(v6 - 8);
  v5[13] = swift_task_alloc();
  v5[3] = a2;
  v5[4] = a3;
  v5[14] = *(_QWORD *)(v11 + 80);
  v5[5] = a4;
  v5[15] = *(_QWORD *)(v11 + 88);
  v5[6] = v4;
  return swift_task_switch();
}

uint64_t PaymentsRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint32_t size;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;

  v18 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 88);
  v16 = *(_QWORD *)(v0 + 80);
  v20 = *(id *)(v0 + 72);
  *(_QWORD *)(v0 + 16) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v1, v2, v15);
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = v17;
  v22[3] = v18;
  v19 = *(_QWORD *)(v16 + 96);
  v22[4] = v19;
  v3 = v20;
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = v17;
  v25[3] = v18;
  v25[4] = v19;
  v25[5] = v20;
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 56) = 22;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 128);
  v27 = swift_allocObject();
  *(_BYTE *)(v27 + 16) = 32;
  v28 = swift_allocObject();
  *(_BYTE *)(v28 + 16) = 8;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = partial apply for implicit closure #1 in PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:);
  *(_QWORD *)(v23 + 24) = v22;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v24 + 24) = v23;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v29 + 24) = v24;
  v30 = swift_allocObject();
  *(_BYTE *)(v30 + 16) = 32;
  v31 = swift_allocObject();
  *(_BYTE *)(v31 + 16) = 8;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for implicit closure #2 in PaymentsRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:);
  *(_QWORD *)(v26 + 24) = v25;
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v32 + 24) = v26;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v33 = v4;
  swift_retain();
  *v33 = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[1] = v27;
  swift_retain();
  v33[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[3] = v28;
  swift_retain();
  v33[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[5] = v29;
  swift_retain();
  v33[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[7] = v30;
  swift_retain();
  v33[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[9] = v31;
  swift_retain();
  v33[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[11] = v32;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v34, v35))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v11 = createStorage<A>(capacity:type:)(0);
    v12 = createStorage<A>(capacity:type:)(2);
    v36 = buf;
    v37 = v11;
    v38 = v12;
    serialize(_:at:)(2, &v36);
    serialize(_:at:)(2, &v36);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v31;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    _os_log_impl(&dword_24701B000, v34, v35, "#PaymentsRCHFlowStrategy<%s> makeFailureConfirmingIntentResponse %s", buf, size);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 2, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v8 = v13[13];
  v6 = v13[12];
  v7 = v13[11];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v7);
  type metadata accessor for EmptyOutput();
  static EmptyOutput.instance.getter();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v13[2] + 8))();
}

uint64_t implicit closure #2 in PaymentsRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v3;

  v3 = a1;
  MEMORY[0x249572C98](MEMORY[0x24BDD0240], a3);
  return String.init<A>(describing:)();
}

uint64_t PaymentsRCHFlowStrategy.makeFailureHandlingIntentResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3[33] = v2;
  v3[32] = a1;
  v3[27] = v3;
  v3[28] = 0;
  v3[29] = 0;
  v3[31] = 0;
  v8 = *v2;
  v3[34] = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[35] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  v3[38] = v4;
  v3[39] = *(_QWORD *)(v4 - 8);
  v3[40] = swift_task_alloc();
  type metadata accessor for CATOption();
  v3[41] = swift_task_alloc();
  v5 = type metadata accessor for Logger();
  v3[42] = v5;
  v3[43] = *(_QWORD *)(v5 - 8);
  v3[44] = swift_task_alloc();
  v3[28] = a2;
  v3[45] = *(_QWORD *)(v8 + 80);
  v3[46] = *(_QWORD *)(v8 + 88);
  v3[29] = v2;
  return swift_task_switch();
}

uint64_t PaymentsRCHFlowStrategy.makeFailureHandlingIntentResponse(rchRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint8_t *buf;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint32_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;

  v22 = *(_QWORD *)(v0 + 368);
  v21 = *(_QWORD *)(v0 + 360);
  v1 = *(_QWORD *)(v0 + 352);
  v19 = *(_QWORD *)(v0 + 344);
  v20 = *(_QWORD *)(v0 + 336);
  v23 = *(_QWORD *)(v0 + 272);
  *(_QWORD *)(v0 + 216) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v1, v2, v20);
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = v21;
  v25[3] = v22;
  v25[4] = *(_QWORD *)(v23 + 96);
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 240) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v24 = *(_DWORD *)(v0 + 400);
  v28 = swift_allocObject();
  *(_BYTE *)(v28 + 16) = 32;
  v29 = swift_allocObject();
  *(_BYTE *)(v29 + 16) = 8;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for implicit closure #1 in PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:);
  *(_QWORD *)(v26 + 24) = v25;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v27 + 24) = v26;
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v30 + 24) = v27;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v31 = v3;
  swift_retain();
  *v31 = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[1] = v28;
  swift_retain();
  v31[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[3] = v29;
  swift_retain();
  v31[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[5] = v30;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v32, v33))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v16 = createStorage<A>(capacity:type:)(0);
    v17 = createStorage<A>(capacity:type:)(1);
    v34 = buf;
    v35 = v16;
    v36 = v17;
    serialize(_:at:)(2, &v34);
    serialize(_:at:)(1, &v34);
    v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v38 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v38 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v38 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    _os_log_impl(&dword_24701B000, v32, v33, "#PaymentsRCHFlowStrategy<%s> makeFailureHandlingIntentResponse", buf, v24);
    destroyStorage<A>(_:count:)(v16, 0, v14);
    destroyStorage<A>(_:count:)(v17, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v8 = v18[44];
  v7 = v18[43];
  v9 = v18[42];
  v10 = v18[37];
  v11 = v18[36];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v4 = CATWrapper.__allocating_init(options:globals:)();
  v18[47] = v4;
  v18[31] = v4;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NOT_ELIGIBLE", 0xCuLL, 1);
  String.toSpeakableString.getter();
  swift_bridgeObjectRelease();
  v12 = type metadata accessor for SpeakableString();
  v13 = *(void (**)(uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v10);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("send", 4uLL, 1);
  String.toSpeakableString.getter();
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v13)(v11, 0, 1, v12);
  v5 = (_QWORD *)swift_task_alloc();
  v18[48] = v5;
  *v5 = v18[27];
  v5[1] = PaymentsRCHFlowStrategy.makeFailureHandlingIntentResponse(rchRecord:);
  return PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:)(v18[40], v18[37], 0, v18[36]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(v2 + 216) = *v1;
  v2 += 216;
  v5 = v2 - 200;
  *(_QWORD *)(v2 + 176) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 280);
    outlined destroy of SpeakableString?(*(_QWORD *)(v5 + 272));
    outlined destroy of SpeakableString?(v4);
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = v0[40];
  v9 = v0[39];
  v10 = v0[38];
  v12 = v0[35];
  v5 = v0[33];
  v8 = (uint64_t *)v0[32];
  v0[27] = v0;
  outlined init with copy of GlobalsProviding(v5 + 16, (uint64_t)(v0 + 2));
  v4 = v0[5];
  v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  outlined init with copy of GlobalsProviding(v5 + 16, (uint64_t)(v0 + 12));
  v7 = v0[15];
  v6 = v0[16];
  __swift_project_boxed_opaque_existential_1(v0 + 12, v7);
  (*(void (**)(uint64_t))(v6 + 16))(v7);
  __swift_project_boxed_opaque_existential_1(v0 + 17, v0[20]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v12, 1);
  v0[22] = 0;
  v0[23] = 0;
  v0[24] = 0;
  v0[25] = 0;
  v0[26] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v8[3] = type metadata accessor for AceOutput();
  v8[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v8);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 22));
  outlined destroy of NLContextUpdate?(v12);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 17));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v10);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[27] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = v0[37];
  v1 = v0[36];
  v0[27] = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[27] + 8))();
}

uint64_t PaymentsRCHFlowStrategy.makeErrorResponse(error:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  *(_QWORD *)(v3 + 360) = v2;
  *(_QWORD *)(v3 + 352) = a2;
  *(_QWORD *)(v3 + 344) = a1;
  *(_QWORD *)(v3 + 264) = v3;
  *(_QWORD *)(v3 + 272) = 0;
  *(_QWORD *)(v3 + 280) = 0;
  *(_QWORD *)(v3 + 296) = 0;
  *(_BYTE *)(v3 + 592) = 0;
  v9 = *v2;
  *(_QWORD *)(v3 + 368) = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(_QWORD *)(v3 + 376) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v3 + 384) = swift_task_alloc();
  *(_QWORD *)(v3 + 392) = swift_task_alloc();
  *(_QWORD *)(v3 + 400) = swift_task_alloc();
  *(_QWORD *)(v3 + 408) = swift_task_alloc();
  v4 = type metadata accessor for BargeInError();
  *(_QWORD *)(v3 + 416) = v4;
  *(_QWORD *)(v3 + 424) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 432) = swift_task_alloc();
  type metadata accessor for CATOption();
  *(_QWORD *)(v3 + 440) = swift_task_alloc();
  v5 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v3 + 448) = v5;
  *(_QWORD *)(v3 + 456) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 464) = swift_task_alloc();
  *(_QWORD *)(v3 + 472) = swift_task_alloc();
  *(_QWORD *)(v3 + 480) = swift_task_alloc();
  *(_QWORD *)(v3 + 488) = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  *(_QWORD *)(v3 + 496) = v6;
  *(_QWORD *)(v3 + 504) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 512) = swift_task_alloc();
  *(_QWORD *)(v3 + 520) = swift_task_alloc();
  *(_QWORD *)(v3 + 528) = swift_task_alloc();
  *(_QWORD *)(v3 + 272) = a2;
  *(_QWORD *)(v3 + 280) = v2;
  *(_QWORD *)(v3 + 536) = *(_QWORD *)(v9 + 80);
  *(_QWORD *)(v3 + 544) = *(_QWORD *)(v9 + 88);
  return swift_task_switch();
}

uint64_t PaymentsRCHFlowStrategy.makeErrorResponse(error:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint32_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  NSObject *log;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t);
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint32_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  NSObject *oslog;
  os_log_type_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint8_t *buf;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint32_t size;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  uint8_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(uint64_t, uint64_t, uint64_t);
  uint64_t v118;

  v85 = *(_QWORD *)(v0 + 544);
  v84 = *(_QWORD *)(v0 + 536);
  v1 = *(_QWORD *)(v0 + 528);
  v81 = *(_QWORD *)(v0 + 504);
  v82 = *(_QWORD *)(v0 + 496);
  v86 = *(_QWORD *)(v0 + 368);
  v88 = *(id *)(v0 + 352);
  *(_QWORD *)(v0 + 264) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16);
  v83(v1, v2, v82);
  v90 = (_QWORD *)swift_allocObject();
  v90[2] = v84;
  v90[3] = v85;
  v87 = *(_QWORD *)(v86 + 96);
  v90[4] = v87;
  v3 = v88;
  v93 = swift_allocObject();
  *(_QWORD *)(v93 + 16) = v88;
  v102 = Logger.logObject.getter();
  v103 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 288) = 22;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 244);
  v95 = swift_allocObject();
  *(_BYTE *)(v95 + 16) = 32;
  v96 = swift_allocObject();
  *(_BYTE *)(v96 + 16) = 8;
  v91 = swift_allocObject();
  *(_QWORD *)(v91 + 16) = partial apply for implicit closure #1 in PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:);
  *(_QWORD *)(v91 + 24) = v90;
  v92 = swift_allocObject();
  *(_QWORD *)(v92 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v92 + 24) = v91;
  v97 = swift_allocObject();
  *(_QWORD *)(v97 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v97 + 24) = v92;
  v98 = swift_allocObject();
  *(_BYTE *)(v98 + 16) = 32;
  v99 = swift_allocObject();
  *(_BYTE *)(v99 + 16) = 8;
  v94 = swift_allocObject();
  *(_QWORD *)(v94 + 16) = partial apply for implicit closure #2 in PaymentsRCHFlowStrategy.makeErrorResponse(error:);
  *(_QWORD *)(v94 + 24) = v93;
  v100 = swift_allocObject();
  *(_QWORD *)(v100 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v100 + 24) = v94;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v101 = v4;
  swift_retain();
  *v101 = partial apply for closure #1 in OSLogArguments.append(_:);
  v101[1] = v95;
  swift_retain();
  v101[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v101[3] = v96;
  swift_retain();
  v101[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v101[5] = v97;
  swift_retain();
  v101[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v101[7] = v98;
  swift_retain();
  v101[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v101[9] = v99;
  swift_retain();
  v101[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v101[11] = v100;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v102, v103))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v78 = createStorage<A>(capacity:type:)(0);
    v79 = createStorage<A>(capacity:type:)(2);
    v114 = buf;
    v115 = v78;
    v116 = v79;
    serialize(_:at:)(2, &v114);
    serialize(_:at:)(2, &v114);
    v117 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v118 = v95;
    closure #1 in osLogInternal(_:log:type:)(&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
    v117 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v118 = v96;
    closure #1 in osLogInternal(_:log:type:)(&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
    v117 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v118 = v97;
    closure #1 in osLogInternal(_:log:type:)(&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
    v117 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v118 = v98;
    closure #1 in osLogInternal(_:log:type:)(&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
    v117 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v118 = v99;
    closure #1 in osLogInternal(_:log:type:)(&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
    v117 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v118 = v100;
    closure #1 in osLogInternal(_:log:type:)(&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
    _os_log_impl(&dword_24701B000, v102, v103, "#PaymentsRCHFlowStrategy<%s> makeErrorResponse for error: %s", buf, size);
    destroyStorage<A>(_:count:)(v78, 0, v76);
    destroyStorage<A>(_:count:)(v79, 2, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v71 = *(_QWORD *)(v80 + 528);
  v70 = *(_QWORD *)(v80 + 504);
  v72 = *(_QWORD *)(v80 + 496);
  v75 = *(id *)(v80 + 352);

  v73 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
  v73(v71, v72);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v74 = CATWrapper.__allocating_init(options:globals:)();
  *(_QWORD *)(v80 + 552) = v74;
  *(_QWORD *)(v80 + 296) = v74;
  v5 = v75;
  *(_QWORD *)(v80 + 304) = v75;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v80 + 424) + 8))(*(_QWORD *)(v80 + 432), *(_QWORD *)(v80 + 416));
    v6 = *(id *)(v80 + 352);

    *(_BYTE *)(v80 + 592) = 1;
    goto LABEL_22;
  }
  v7 = *(id *)(v80 + 352);
  v69 = *(void **)(v80 + 352);
  v8 = v69;
  *(_QWORD *)(v80 + 312) = v69;
  type metadata accessor for CommandFailure();
  if ((swift_dynamicCast() & 1) != 0)
    v68 = *(_QWORD *)(v80 + 320);
  else
    v68 = 0;
  if (v68)
  {
    v65 = CommandFailure.errorCode.getter();
    swift_release();
    v66 = v65;
    v67 = 0;
  }
  else
  {
    v66 = 0;
    v67 = 1;
  }
  *(_QWORD *)(v80 + 216) = v66;
  *(_BYTE *)(v80 + 224) = v67 & 1;
  *(_QWORD *)(v80 + 232) = 1307;
  *(_BYTE *)(v80 + 240) = 0;
  if ((*(_BYTE *)(v80 + 224) & 1) == 0)
  {
    outlined init with copy of Int?(v80 + 216, v80 + 248);
    if ((*(_BYTE *)(v80 + 240) & 1) == 0)
    {
      v64 = *(_QWORD *)(v80 + 248) == *(_QWORD *)(v80 + 232);
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if ((*(_BYTE *)(v80 + 240) & 1) == 0)
  {
LABEL_20:
    v64 = 0;
    goto LABEL_18;
  }
  v64 = 1;
LABEL_18:

  *(_BYTE *)(v80 + 592) = v64;
  if (!v64)
  {
    v30 = *(_QWORD *)(v80 + 544);
    v29 = *(_QWORD *)(v80 + 536);
    v13 = *(_QWORD *)(v80 + 512);
    v28 = *(_QWORD *)(v80 + 496);
    v14 = Logger.payments.unsafeMutableAddressor();
    v83(v13, v14, v28);
    v32 = (_QWORD *)swift_allocObject();
    v32[2] = v29;
    v32[3] = v30;
    v32[4] = v87;
    log = Logger.logObject.getter();
    v40 = static os_log_type_t.error.getter();
    *(_QWORD *)(v80 + 328) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v31 = *(_DWORD *)(v80 + 260);
    v35 = swift_allocObject();
    *(_BYTE *)(v35 + 16) = 32;
    v36 = swift_allocObject();
    *(_BYTE *)(v36 + 16) = 8;
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = partial apply for implicit closure #1 in PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:);
    *(_QWORD *)(v33 + 24) = v32;
    v34 = swift_allocObject();
    *(_QWORD *)(v34 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v34 + 24) = v33;
    v37 = swift_allocObject();
    *(_QWORD *)(v37 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v37 + 24) = v34;
    _allocateUninitializedArray<A>(_:)();
    v38 = v15;
    swift_retain();
    *v38 = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[1] = v35;
    swift_retain();
    v38[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[3] = v36;
    swift_retain();
    v38[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[5] = v37;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v40))
    {
      v25 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v26 = createStorage<A>(capacity:type:)(0);
      v27 = createStorage<A>(capacity:type:)(1);
      v104 = v25;
      v105 = v26;
      v106 = v27;
      serialize(_:at:)(2, &v104);
      serialize(_:at:)(1, &v104);
      v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v108 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v107, (uint64_t)&v104, (uint64_t)&v105, (uint64_t)&v106);
      v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v108 = v36;
      closure #1 in osLogInternal(_:log:type:)(&v107, (uint64_t)&v104, (uint64_t)&v105, (uint64_t)&v106);
      v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v108 = v37;
      closure #1 in osLogInternal(_:log:type:)(&v107, (uint64_t)&v104, (uint64_t)&v105, (uint64_t)&v106);
      _os_log_impl(&dword_24701B000, log, v40, "#PaymentsRCHFlowStrategy<%s> makeErrorResponse vending generic response", v25, v31);
      destroyStorage<A>(_:count:)(v26, 0, v24);
      destroyStorage<A>(_:count:)(v27, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v25, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v18 = *(_QWORD *)(v80 + 512);
    v19 = *(_QWORD *)(v80 + 496);
    v20 = *(_QWORD *)(v80 + 392);
    v21 = *(_QWORD *)(v80 + 384);

    v73(v18, v19);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v22 = type metadata accessor for SpeakableString();
    v23 = *(void (**)(uint64_t))(*(_QWORD *)(v22 - 8) + 56);
    v23(v20);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("send", 4uLL, 1);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v23)(v21, 0, 1, v22);
    v16 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v80 + 576) = v16;
    *v16 = *(_QWORD *)(v80 + 264);
    v16[1] = PaymentsRCHFlowStrategy.makeErrorResponse(error:);
    return PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:)(*(_QWORD *)(v80 + 472), *(_QWORD *)(v80 + 392), 0, *(_QWORD *)(v80 + 384));
  }
LABEL_22:
  v53 = *(_QWORD *)(v80 + 544);
  v52 = *(_QWORD *)(v80 + 536);
  v9 = *(_QWORD *)(v80 + 520);
  v51 = *(_QWORD *)(v80 + 496);
  v10 = Logger.payments.unsafeMutableAddressor();
  v83(v9, v10, v51);
  v55 = (_QWORD *)swift_allocObject();
  v55[2] = v52;
  v55[3] = v53;
  v55[4] = v87;
  oslog = Logger.logObject.getter();
  v63 = static os_log_type_t.error.getter();
  *(_QWORD *)(v80 + 336) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v54 = *(_DWORD *)(v80 + 596);
  v58 = swift_allocObject();
  *(_BYTE *)(v58 + 16) = 32;
  v59 = swift_allocObject();
  *(_BYTE *)(v59 + 16) = 8;
  v56 = swift_allocObject();
  *(_QWORD *)(v56 + 16) = partial apply for implicit closure #1 in PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:);
  *(_QWORD *)(v56 + 24) = v55;
  v57 = swift_allocObject();
  *(_QWORD *)(v57 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v57 + 24) = v56;
  v60 = swift_allocObject();
  *(_QWORD *)(v60 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v60 + 24) = v57;
  _allocateUninitializedArray<A>(_:)();
  v61 = v11;
  swift_retain();
  *v61 = partial apply for closure #1 in OSLogArguments.append(_:);
  v61[1] = v58;
  swift_retain();
  v61[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v61[3] = v59;
  swift_retain();
  v61[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v61[5] = v60;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v63))
  {
    v48 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v49 = createStorage<A>(capacity:type:)(0);
    v50 = createStorage<A>(capacity:type:)(1);
    v109 = v48;
    v110 = v49;
    v111 = v50;
    serialize(_:at:)(2, &v109);
    serialize(_:at:)(1, &v109);
    v112 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v113 = v58;
    closure #1 in osLogInternal(_:log:type:)(&v112, (uint64_t)&v109, (uint64_t)&v110, (uint64_t)&v111);
    v112 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v113 = v59;
    closure #1 in osLogInternal(_:log:type:)(&v112, (uint64_t)&v109, (uint64_t)&v110, (uint64_t)&v111);
    v112 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v113 = v60;
    closure #1 in osLogInternal(_:log:type:)(&v112, (uint64_t)&v109, (uint64_t)&v110, (uint64_t)&v111);
    _os_log_impl(&dword_24701B000, oslog, v63, "#PaymentsRCHFlowStrategy<%s> makeErrorResponse vending TIMEOUT response", v48, v54);
    destroyStorage<A>(_:count:)(v49, 0, v47);
    destroyStorage<A>(_:count:)(v50, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v48, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v41 = *(_QWORD *)(v80 + 520);
  v42 = *(_QWORD *)(v80 + 496);
  v43 = *(_QWORD *)(v80 + 408);
  v44 = *(_QWORD *)(v80 + 400);

  v73(v41, v42);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("TIMEOUT", 7uLL, 1);
  String.toSpeakableString.getter();
  swift_bridgeObjectRelease();
  v45 = type metadata accessor for SpeakableString();
  v46 = *(void (**)(uint64_t))(*(_QWORD *)(v45 - 8) + 56);
  v46(v43);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("send", 4uLL, 1);
  String.toSpeakableString.getter();
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v46)(v44, 0, 1, v45);
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v80 + 560) = v12;
  *v12 = *(_QWORD *)(v80 + 264);
  v12[1] = PaymentsRCHFlowStrategy.makeErrorResponse(error:);
  return PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:)(*(_QWORD *)(v80 + 480), *(_QWORD *)(v80 + 408), 0, *(_QWORD *)(v80 + 400));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v5 = *v1 + 16;
  *(_QWORD *)(v2 + 264) = *v1;
  *(_QWORD *)(v2 + 568) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 392);
    outlined destroy of SpeakableString?(*(_QWORD *)(v5 + 384));
    outlined destroy of SpeakableString?(v4);
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0[61];
  v2 = v0[60];
  v3 = v0[57];
  v4 = v0[56];
  v0[33] = v0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v4);
  v16 = v0[61];
  v17 = v0[58];
  v13 = v0[57];
  v14 = v0[56];
  v18 = v0[47];
  v9 = v0[45];
  v12 = (uint64_t *)v0[43];
  (*(void (**)(void))(v13 + 16))();
  outlined init with copy of GlobalsProviding(v9 + 16, (uint64_t)(v0 + 2));
  v8 = v0[5];
  v7 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v8);
  (*(void (**)(uint64_t))(v7 + 16))(v8);
  outlined init with copy of GlobalsProviding(v9 + 16, (uint64_t)(v0 + 12));
  v11 = v0[15];
  v10 = v0[16];
  __swift_project_boxed_opaque_existential_1(v0 + 12, v11);
  (*(void (**)(uint64_t))(v10 + 16))(v11);
  __swift_project_boxed_opaque_existential_1(v0 + 17, v0[20]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  v5 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v18, 1);
  v0[22] = 0;
  v0[23] = 0;
  v0[24] = 0;
  v0[25] = 0;
  v0[26] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v12[3] = type metadata accessor for AceOutput();
  v12[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v12);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 22));
  outlined destroy of NLContextUpdate?(v18);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 17));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v15(v17, v14);
  swift_release();
  v15(v16, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[33] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v5 = *v1 + 16;
  *(_QWORD *)(v2 + 264) = *v1;
  *(_QWORD *)(v2 + 584) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 376);
    outlined destroy of SpeakableString?(*(_QWORD *)(v5 + 368));
    outlined destroy of SpeakableString?(v4);
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0[61];
  v2 = v0[59];
  v3 = v0[57];
  v4 = v0[56];
  v0[33] = v0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v4);
  v16 = v0[61];
  v17 = v0[58];
  v13 = v0[57];
  v14 = v0[56];
  v18 = v0[47];
  v9 = v0[45];
  v12 = (uint64_t *)v0[43];
  (*(void (**)(void))(v13 + 16))();
  outlined init with copy of GlobalsProviding(v9 + 16, (uint64_t)(v0 + 2));
  v8 = v0[5];
  v7 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v8);
  (*(void (**)(uint64_t))(v7 + 16))(v8);
  outlined init with copy of GlobalsProviding(v9 + 16, (uint64_t)(v0 + 12));
  v11 = v0[15];
  v10 = v0[16];
  __swift_project_boxed_opaque_existential_1(v0 + 12, v11);
  (*(void (**)(uint64_t))(v10 + 16))(v11);
  __swift_project_boxed_opaque_existential_1(v0 + 17, v0[20]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  v5 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v18, 1);
  v0[22] = 0;
  v0[23] = 0;
  v0[24] = 0;
  v0[25] = 0;
  v0[26] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v12[3] = type metadata accessor for AceOutput();
  v12[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v12);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 22));
  outlined destroy of NLContextUpdate?(v18);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 17));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v15(v17, v14);
  swift_release();
  v15(v16, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[33] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = v0[51];
  v1 = v0[50];
  v0[33] = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[33] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = v0[49];
  v1 = v0[48];
  v0[33] = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[33] + 8))();
}

uint64_t implicit closure #2 in PaymentsRCHFlowStrategy.makeErrorResponse(error:)()
{
  swift_getErrorValue();
  return Error.localizedDescription.getter();
}

uint64_t PaymentsRCHFlowStrategy.deinit()
{
  uint64_t v0;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  return v2;
}

uint64_t PaymentsRCHFlowStrategy.__deallocating_deinit()
{
  PaymentsRCHFlowStrategy.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for RCHFlowStrategyAsync.actionForInput(input:) in conformance PaymentsRCHFlowStrategy<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PaymentsRCHFlowStrategy.actionForInput(input:)(a1, a2);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ConfirmationViewBuilding.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:) in conformance ConfirmationViewBuilder;
  return PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)(a1, a2);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeParameterMetadata(intent:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;

  v3 = type metadata accessor for PaymentsRCHFlowStrategy(0, a2[10], a2[11], a2[12]);
  return MEMORY[0x249570FF4](a1, v3, a3);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeErrorResponse(error:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return PaymentsRCHFlowStrategy.makeErrorResponse(error:)(a1, a2);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v8;

  v8 = v4;
  *(_QWORD *)(v4 + 16) = v4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 24) = v5;
  type metadata accessor for PaymentsRCHFlowStrategy(0, a4[10], a4[11], a4[12]);
  *v5 = *(_QWORD *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)();
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v8;

  v8 = v4;
  *(_QWORD *)(v4 + 16) = v4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 24) = v5;
  type metadata accessor for PaymentsRCHFlowStrategy(0, a4[10], a4[11], a4[12]);
  *v5 = *(_QWORD *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)();
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v8;

  v8 = v4;
  *(_QWORD *)(v4 + 16) = v4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 24) = v5;
  type metadata accessor for PaymentsRCHFlowStrategy(0, a4[10], a4[11], a4[12]);
  *v5 = *(_QWORD *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)();
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;

  v9 = v5;
  *(_QWORD *)(v5 + 16) = v5;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v9 + 24) = v6;
  type metadata accessor for PaymentsRCHFlowStrategy(0, a5[10], a5[11], a5[12]);
  *v6 = *(_QWORD *)(v9 + 16);
  v6[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)();
}

uint64_t protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v5 + 16) = v5;
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(**(_QWORD **)v4 + 160)
                                                                   + **(int **)(**(_QWORD **)v4 + 160));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v6;
  *v6 = *(_QWORD *)(v5 + 16);
  v6[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return v11(a1, a2, a3, a4);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>;
  return PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:)(a1, a2);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t SendPaymentFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[42] = v4;
  v5[41] = a4;
  v5[40] = a3;
  v5[39] = a2;
  v5[38] = a1;
  v5[31] = v5;
  v5[32] = 0;
  v5[33] = 0;
  v5[34] = 0;
  v5[35] = 0;
  v5[27] = 0;
  v5[28] = 0;
  v5[37] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v5[43] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v5[44] = swift_task_alloc();
  v6 = type metadata accessor for TemplatingResult();
  v5[45] = v6;
  v5[46] = *(_QWORD *)(v6 - 8);
  v5[47] = swift_task_alloc();
  v7 = type metadata accessor for Logger();
  v5[48] = v7;
  v5[49] = *(_QWORD *)(v7 - 8);
  v5[50] = swift_task_alloc();
  v5[32] = a2;
  v5[33] = a3;
  v5[34] = a4;
  v5[35] = v4;
  return swift_task_switch();
}

uint64_t SendPaymentFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *buf;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint32_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34[5];
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 400);
  v21 = *(_QWORD *)(v0 + 392);
  v22 = *(_QWORD *)(v0 + 384);
  v2 = *(void **)(v0 + 328);
  *(_QWORD *)(v0 + 248) = v0;
  v23 = static PaymentIntentCATResponseCode.from(_:)((unint64_t)objc_msgSend(v2, sel_code));
  v24 = v3;
  *(_QWORD *)(v0 + 408) = v3;
  *(_QWORD *)(v0 + 216) = v23;
  *(_QWORD *)(v0 + 224) = v3;
  v4 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v1, v4, v22);
  swift_bridgeObjectRetain();
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v23;
  *(_QWORD *)(v26 + 24) = v24;
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 288) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v25 = *(_DWORD *)(v0 + 448);
  v28 = swift_allocObject();
  *(_BYTE *)(v28 + 16) = 32;
  v29 = swift_allocObject();
  *(_BYTE *)(v29 + 16) = 8;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(_QWORD *)(v27 + 24) = v26;
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v30 + 24) = v27;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v31 = v5;
  swift_retain();
  *v31 = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[1] = v28;
  swift_retain();
  v31[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[3] = v29;
  swift_retain();
  v31[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[5] = v30;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v32, v33))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v18 = createStorage<A>(capacity:type:)(0);
    v19 = createStorage<A>(capacity:type:)(1);
    v35 = buf;
    v36 = v18;
    v37 = v19;
    serialize(_:at:)(2, &v35);
    serialize(_:at:)(1, &v35);
    v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v39 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v38, (uint64_t)&v35, (uint64_t)&v36, (uint64_t)&v37);
    v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v39 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v38, (uint64_t)&v35, (uint64_t)&v36, (uint64_t)&v37);
    v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v39 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v38, (uint64_t)&v35, (uint64_t)&v36, (uint64_t)&v37);
    _os_log_impl(&dword_24701B000, v32, v33, "#SendPaymentFlowStrategy makeFailureConfirmingIntentResponse, code %s", buf, v25);
    destroyStorage<A>(_:count:)(v18, 0, v16);
    destroyStorage<A>(_:count:)(v19, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v11 = v20[50];
  v10 = v20[49];
  v12 = v20[48];

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse>);
  v14 = type metadata accessor for INSendPaymentIntent();
  v20[52] = v14;
  v13 = type metadata accessor for INSendPaymentIntentResponse();
  default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v14, v13, v34);
  v15 = default argument 1 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v14, v13);
  v6 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v14, v13);
  v7 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v34, v15, v6);
  v20[53] = v7;
  v20[37] = v7;
  v8 = (_QWORD *)swift_task_alloc();
  v20[54] = v8;
  *v8 = v20[31];
  v8[1] = SendPaymentFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:);
  return PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:)(v20[44], v20[40], v20[41], v20[39]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 248) = *v1;
  *(_QWORD *)(v2 + 440) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v1 = v0[46];
  v2 = v0[45];
  v3 = v0[44];
  v0[31] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    outlined destroy of TemplatingResult?(v23[44]);
    v23[29] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v23[30] = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v12 = String.init(stringInterpolation:)();
    v11 = v9;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v10 = v12;
    *(_QWORD *)(v10 + 8) = v11;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 16;
    swift_willThrow();
  }
  else
  {
    v21 = v23[47];
    v19 = v23[46];
    v20 = v23[45];
    v22 = v23[43];
    v15 = v23[42];
    v18 = (uint64_t *)v23[38];
    (*(void (**)(void))(v19 + 32))();
    swift_retain();
    outlined init with copy of GlobalsProviding(v15 + 16, (uint64_t)(v23 + 2));
    swift_release();
    v14 = v23[5];
    v13 = v23[6];
    __swift_project_boxed_opaque_existential_1(v23 + 2, v14);
    (*(void (**)(uint64_t))(v13 + 16))(v14);
    swift_retain();
    outlined init with copy of GlobalsProviding(v15 + 16, (uint64_t)(v23 + 12));
    swift_release();
    v17 = v23[15];
    v16 = v23[16];
    __swift_project_boxed_opaque_existential_1(v23 + 12, v17);
    (*(void (**)(uint64_t))(v16 + 16))(v17);
    __swift_project_boxed_opaque_existential_1(v23 + 17, v23[20]);
    dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
    v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v22, 1);
    v23[22] = 0;
    v23[23] = 0;
    v23[24] = 0;
    v23[25] = 0;
    v23[26] = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v18[3] = type metadata accessor for AceOutput();
    v18[4] = MEMORY[0x24BE99088];
    __swift_allocate_boxed_opaque_existential_1(v18);
    static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v23 + 22));
    outlined destroy of NLContextUpdate?(v22);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 17));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 12));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 7));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 2));
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v20);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v23[31] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 248) = v0;
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 248) + 8))();
}

uint64_t SendPaymentFlowStrategy.__allocating_init(globals:contactResolver:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return SendPaymentFlowStrategy.init(globals:contactResolver:)(a1, a2);
}

uint64_t SendPaymentFlowStrategy.init(globals:contactResolver:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  _BYTE v6[40];
  _BYTE v7[40];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  v9 = a1;
  v8 = a2;
  outlined init with copy of GlobalsProviding(a1, (uint64_t)v7);
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v6);
  v5 = PaymentsRCHFlowStrategy.init(globals:contactResolver:)((uint64_t)v7, (uint64_t)v6);
  swift_retain();
  v10 = v5;
  __swift_destroy_boxed_opaque_existential_0(a2);
  __swift_destroy_boxed_opaque_existential_0(a1);
  swift_release();
  return v5;
}

uint64_t SendPaymentFlowStrategy.deinit()
{
  return PaymentsRCHFlowStrategy.deinit();
}

uint64_t SendPaymentFlowStrategy.__deallocating_deinit()
{
  SendPaymentFlowStrategy.deinit();
  return swift_deallocClassInstance();
}

uint64_t RequestPaymentFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[42] = v4;
  v5[41] = a4;
  v5[40] = a3;
  v5[39] = a2;
  v5[38] = a1;
  v5[31] = v5;
  v5[32] = 0;
  v5[33] = 0;
  v5[34] = 0;
  v5[35] = 0;
  v5[27] = 0;
  v5[28] = 0;
  v5[37] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v5[43] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v5[44] = swift_task_alloc();
  v6 = type metadata accessor for TemplatingResult();
  v5[45] = v6;
  v5[46] = *(_QWORD *)(v6 - 8);
  v5[47] = swift_task_alloc();
  v7 = type metadata accessor for Logger();
  v5[48] = v7;
  v5[49] = *(_QWORD *)(v7 - 8);
  v5[50] = swift_task_alloc();
  v5[32] = a2;
  v5[33] = a3;
  v5[34] = a4;
  v5[35] = v4;
  return swift_task_switch();
}

uint64_t RequestPaymentFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *buf;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint32_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34[5];
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 400);
  v21 = *(_QWORD *)(v0 + 392);
  v22 = *(_QWORD *)(v0 + 384);
  v2 = *(void **)(v0 + 328);
  *(_QWORD *)(v0 + 248) = v0;
  v23 = static PaymentIntentCATResponseCode.from(_:)((unint64_t)objc_msgSend(v2, sel_code));
  v24 = v3;
  *(_QWORD *)(v0 + 408) = v3;
  *(_QWORD *)(v0 + 216) = v23;
  *(_QWORD *)(v0 + 224) = v3;
  v4 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v1, v4, v22);
  swift_bridgeObjectRetain();
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v23;
  *(_QWORD *)(v26 + 24) = v24;
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 288) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v25 = *(_DWORD *)(v0 + 448);
  v28 = swift_allocObject();
  *(_BYTE *)(v28 + 16) = 32;
  v29 = swift_allocObject();
  *(_BYTE *)(v29 + 16) = 8;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(_QWORD *)(v27 + 24) = v26;
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v30 + 24) = v27;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v31 = v5;
  swift_retain();
  *v31 = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[1] = v28;
  swift_retain();
  v31[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[3] = v29;
  swift_retain();
  v31[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[5] = v30;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v32, v33))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v18 = createStorage<A>(capacity:type:)(0);
    v19 = createStorage<A>(capacity:type:)(1);
    v35 = buf;
    v36 = v18;
    v37 = v19;
    serialize(_:at:)(2, &v35);
    serialize(_:at:)(1, &v35);
    v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v39 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v38, (uint64_t)&v35, (uint64_t)&v36, (uint64_t)&v37);
    v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v39 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v38, (uint64_t)&v35, (uint64_t)&v36, (uint64_t)&v37);
    v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v39 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v38, (uint64_t)&v35, (uint64_t)&v36, (uint64_t)&v37);
    _os_log_impl(&dword_24701B000, v32, v33, "#RequestPaymentFlowStrategy makeFailureConfirmingIntentResponse %s", buf, v25);
    destroyStorage<A>(_:count:)(v18, 0, v16);
    destroyStorage<A>(_:count:)(v19, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v11 = v20[50];
  v10 = v20[49];
  v12 = v20[48];

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  v14 = type metadata accessor for INRequestPaymentIntent();
  v20[52] = v14;
  v13 = type metadata accessor for INRequestPaymentIntentResponse();
  default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v14, v13, v34);
  v15 = default argument 1 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v14, v13);
  v6 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v14, v13);
  v7 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v34, v15, v6);
  v20[53] = v7;
  v20[37] = v7;
  v8 = (_QWORD *)swift_task_alloc();
  v20[54] = v8;
  *v8 = v20[31];
  v8[1] = SendPaymentFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:);
  return PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:)(v20[44], v20[40], v20[41], v20[39]);
}

uint64_t SearchForAccountsFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[40] = v4;
  v5[39] = a4;
  v5[38] = a3;
  v5[37] = a2;
  v5[36] = a1;
  v5[29] = v5;
  v5[30] = 0;
  v5[31] = 0;
  v5[32] = 0;
  v5[33] = 0;
  v5[35] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v5[41] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v5[42] = swift_task_alloc();
  v6 = type metadata accessor for TemplatingResult();
  v5[43] = v6;
  v5[44] = *(_QWORD *)(v6 - 8);
  v5[45] = swift_task_alloc();
  v7 = type metadata accessor for Logger();
  v5[46] = v7;
  v5[47] = *(_QWORD *)(v7 - 8);
  v5[48] = swift_task_alloc();
  v5[30] = a2;
  v5[31] = a3;
  v5[32] = a4;
  v5[33] = v4;
  return swift_task_switch();
}

uint64_t SearchForAccountsFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *buf;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint32_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32[5];
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 384);
  v20 = *(_QWORD *)(v0 + 376);
  v21 = *(_QWORD *)(v0 + 368);
  v22 = *(id *)(v0 + 312);
  *(_QWORD *)(v0 + 232) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v1, v2, v21);
  v3 = v22;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v22;
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 272) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v23 = *(_DWORD *)(v0 + 424);
  v26 = swift_allocObject();
  *(_BYTE *)(v26 + 16) = 32;
  v27 = swift_allocObject();
  *(_BYTE *)(v27 + 16) = 8;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = partial apply for implicit closure #1 in SearchForAccountsFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:);
  *(_QWORD *)(v25 + 24) = v24;
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v28 + 24) = v25;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v29 = v4;
  swift_retain();
  *v29 = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[1] = v26;
  swift_retain();
  v29[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[3] = v27;
  swift_retain();
  v29[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[5] = v28;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v30, v31))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v17 = createStorage<A>(capacity:type:)(0);
    v18 = createStorage<A>(capacity:type:)(1);
    v33 = buf;
    v34 = v17;
    v35 = v18;
    serialize(_:at:)(2, &v33);
    serialize(_:at:)(1, &v33);
    v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v37 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v37 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v37 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    _os_log_impl(&dword_24701B000, v30, v31, "#SearchForAccountsFlowStrategy makeFailureConfirmingIntentResponse for response %s", buf, v23);
    destroyStorage<A>(_:count:)(v17, 0, v15);
    destroyStorage<A>(_:count:)(v18, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v10 = v19[48];
  v9 = v19[47];
  v11 = v19[46];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  v13 = type metadata accessor for INSearchForAccountsIntent();
  v19[49] = v13;
  v12 = type metadata accessor for INSearchForAccountsIntentResponse();
  default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v12, v32);
  v14 = default argument 1 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v12);
  v5 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v12);
  v6 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v32, v14, v5);
  v19[50] = v6;
  v19[35] = v6;
  v7 = (_QWORD *)swift_task_alloc();
  v19[51] = v7;
  *v7 = v19[29];
  v7[1] = SearchForAccountsFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:);
  return PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:)(v19[42], v19[38], v19[39], v19[37]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 232) = *v1;
  *(_QWORD *)(v2 + 416) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v1 = v0[44];
  v2 = v0[43];
  v3 = v0[42];
  v0[29] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    outlined destroy of TemplatingResult?(v23[42]);
    v23[27] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v23[28] = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v12 = String.init(stringInterpolation:)();
    v11 = v9;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v10 = v12;
    *(_QWORD *)(v10 + 8) = v11;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 16;
    swift_willThrow();
  }
  else
  {
    v21 = v23[45];
    v19 = v23[44];
    v20 = v23[43];
    v22 = v23[41];
    v15 = v23[40];
    v18 = (uint64_t *)v23[36];
    (*(void (**)(void))(v19 + 32))();
    swift_retain();
    outlined init with copy of GlobalsProviding(v15 + 16, (uint64_t)(v23 + 2));
    swift_release();
    v14 = v23[5];
    v13 = v23[6];
    __swift_project_boxed_opaque_existential_1(v23 + 2, v14);
    (*(void (**)(uint64_t))(v13 + 16))(v14);
    swift_retain();
    outlined init with copy of GlobalsProviding(v15 + 16, (uint64_t)(v23 + 12));
    swift_release();
    v17 = v23[15];
    v16 = v23[16];
    __swift_project_boxed_opaque_existential_1(v23 + 12, v17);
    (*(void (**)(uint64_t))(v16 + 16))(v17);
    __swift_project_boxed_opaque_existential_1(v23 + 17, v23[20]);
    dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
    v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v22, 1);
    v23[22] = 0;
    v23[23] = 0;
    v23[24] = 0;
    v23[25] = 0;
    v23[26] = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v18[3] = type metadata accessor for AceOutput();
    v18[4] = MEMORY[0x24BE99088];
    __swift_allocate_boxed_opaque_existential_1(v18);
    static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v23 + 22));
    outlined destroy of NLContextUpdate?(v22);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 17));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 12));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 7));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 2));
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v20);
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v23[29] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 232) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 232) + 8))();
}

uint64_t implicit closure #1 in SearchForAccountsFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(void *a1)
{
  id v1;

  v1 = a1;
  type metadata accessor for INSearchForAccountsIntentResponse();
  lazy protocol witness table accessor for type INSearchForAccountsIntentResponse and conformance NSObject();
  return String.init<A>(describing:)();
}

uint64_t outlined destroy of Signpost.OpenSignpost(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  return a1;
}

uint64_t sub_247051B90()
{
  return swift_deallocObject();
}

NSJSONWritingOptions partial apply for implicit closure #1 in PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  uint64_t v0;

  return NSJSONWritingOptions.init(rawValue:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_247051BF0()
{
  return swift_deallocObject();
}

uint64_t sub_247051C18()
{
  return swift_deallocObject();
}

uint64_t sub_247051C40()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247051C88()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247051CC4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247051D00()
{
  return swift_deallocObject();
}

uint64_t sub_247051D40()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in PaymentsRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)()
{
  uint64_t v0;

  return implicit closure #2 in PaymentsRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(*(void **)(v0 + 40), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_247051DB0()
{
  return swift_deallocObject();
}

uint64_t sub_247051DD8()
{
  return swift_deallocObject();
}

uint64_t sub_247051E00()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247051E3C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247051E78()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247051EB4()
{
  return swift_deallocObject();
}

uint64_t sub_247051EDC()
{
  return swift_deallocObject();
}

uint64_t sub_247051F04()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247051F40()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247051F7C()
{
  return swift_deallocObject();
}

uint64_t sub_247051FBC()
{
  return swift_deallocObject();
}

uint64_t sub_247051FE4()
{
  return swift_deallocObject();
}

uint64_t sub_24705200C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247052048()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247052084()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470520C0()
{
  return swift_deallocObject();
}

uint64_t sub_247052100()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in PaymentsRCHFlowStrategy.makeErrorResponse(error:)()
{
  return implicit closure #2 in PaymentsRCHFlowStrategy.makeErrorResponse(error:)();
}

uint64_t sub_247052144()
{
  return swift_deallocObject();
}

uint64_t sub_24705216C()
{
  return swift_deallocObject();
}

uint64_t sub_247052194()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470521D0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24705220C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247052248()
{
  return swift_deallocObject();
}

uint64_t sub_247052270()
{
  return swift_deallocObject();
}

uint64_t sub_247052298()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470522D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247052310()
{
  return swift_deallocObject();
}

uint64_t sub_247052350()
{
  return swift_deallocObject();
}

uint64_t sub_247052378()
{
  return swift_deallocObject();
}

uint64_t sub_2470523A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470523DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247052418()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247052454()
{
  return swift_deallocObject();
}

uint64_t sub_247052494()
{
  return swift_deallocObject();
}

uint64_t sub_2470524BC()
{
  return swift_deallocObject();
}

uint64_t sub_2470524E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247052520()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24705255C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with copy of Int?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = a2;
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t type metadata accessor for PaymentsRCHFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PaymentsRCHFlowStrategy);
}

uint64_t sub_2470525D0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24705260C()
{
  return swift_deallocObject();
}

uint64_t sub_247052634()
{
  return swift_deallocObject();
}

uint64_t sub_24705265C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247052698()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined destroy of TemplatingResult?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for TemplatingResult();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t sub_247052744()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247052780()
{
  return swift_deallocObject();
}

uint64_t sub_2470527A8()
{
  return swift_deallocObject();
}

uint64_t sub_2470527D0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24705280C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247052848()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SearchForAccountsFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)()
{
  uint64_t v0;

  return implicit closure #1 in SearchForAccountsFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(*(void **)(v0 + 16));
}

uint64_t sub_24705288C()
{
  return swift_deallocObject();
}

uint64_t sub_2470528B4()
{
  return swift_deallocObject();
}

uint64_t sub_2470528DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247052918()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata completion function for PaymentsRCHFlowStrategy()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t type metadata accessor for SendPaymentFlowStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SendPaymentFlowStrategy;
  if (!type metadata singleton initialization cache for SendPaymentFlowStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for SendPaymentFlowStrategy()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t type metadata accessor for RequestPaymentFlowStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for RequestPaymentFlowStrategy;
  if (!type metadata singleton initialization cache for RequestPaymentFlowStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata accessor for SearchForAccountsFlowStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SearchForAccountsFlowStrategy;
  if (!type metadata singleton initialization cache for SearchForAccountsFlowStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in PaymentsRCHFlowStrategy<A, B>(uint64_t a1)
{
  return MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsRCHFlowStrategy<A, B>, a1);
}

uint64_t base witness table accessor for RouteConfirmIntentResponseFlowStrategyAsync in PaymentsRCHFlowStrategy<A, B>(uint64_t a1)
{
  return MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsRCHFlowStrategy<A, B>, a1);
}

uint64_t base witness table accessor for ResolveConfirmFlowStrategyAsync in PaymentsRCHFlowStrategy<A, B>(uint64_t a1)
{
  return MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsRCHFlowStrategy<A, B>, a1);
}

unint64_t lazy protocol witness table accessor for type INSearchForAccountsIntentResponse and conformance NSObject()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type INSearchForAccountsIntentResponse and conformance NSObject;
  if (!lazy protocol witness table cache variable for type INSearchForAccountsIntentResponse and conformance NSObject)
  {
    v0 = type metadata accessor for INSearchForAccountsIntentResponse();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BDD0240], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type INSearchForAccountsIntentResponse and conformance NSObject);
    return v1;
  }
  return v3;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x249572C38](a1, v6, a5);
}

uint64_t UsoTaskBuilder.asUsoGraph()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[228];
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;

  v7 = a1;
  v8 = "Fatal error";
  v9 = "SiriPaymentsIntents/UsoTaskBuilder+SiriPayments.swift";
  v32 = 0;
  v31 = 0;
  v30 = 0;
  v29 = 0;
  v27 = 0;
  v10 = type metadata accessor for Logger();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v13 = &v6[-v12];
  v14 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v25 = &v6[-v16];
  v32 = &v6[-v16];
  v17 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v27);
  v23 = &v6[-v17];
  v31 = v1;
  v21 = type metadata accessor for UsoTaskBuilder();
  v18 = _allocateUninitializedArray<A>(_:)();
  v20 = v2;
  swift_retain();
  v3 = v18;
  *v20 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v24 = v3;
  v22 = 1;
  UsoBuilderOptions.init(longhandDefinedValues:)();
  v4 = type metadata accessor for UsoBuilderOptions();
  (*(void (**)(_BYTE *, _QWORD, _QWORD))(*(_QWORD *)(v4 - 8) + 56))(v23, 0, v22);
  v26 = MEMORY[0x2495715A0](v24, v23);
  outlined destroy of UsoBuilderOptions?((uint64_t)v23);
  swift_bridgeObjectRelease();
  v30 = v26;
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  v28 = 0;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v15 + 16))(v7, v25, v14);
  (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v25, v14);
  return swift_release();
}

uint64_t outlined destroy of UsoBuilderOptions?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for UsoBuilderOptions();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t sub_24705359C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2470535D8()
{
  return swift_deallocObject();
}

uint64_t sub_247053600()
{
  return swift_deallocObject();
}

uint64_t sub_247053628()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247053664()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t AppResolutionStateProvider.init(appBundleId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;

  v16 = a3;
  v17 = a1;
  v27 = a2;
  v34 = 0;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  v18 = 0;
  v19 = type metadata accessor for AppResolutionStateProvider();
  v20 = *(_QWORD *)(v19 - 8);
  v22 = *(_QWORD *)(v20 + 64);
  v21 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](0);
  v23 = (char *)&v9 - v21;
  v24 = v21;
  MEMORY[0x24BDAC7A8](v3);
  v25 = (char *)&v9 - v24;
  v34 = (char *)&v9 - v24;
  v32 = v4;
  v33 = v5;
  type metadata accessor for SAIntentGroupSiriKitAppSelectionState();
  v26 = SAUIAppPunchOut.__allocating_init()();
  v31 = v26;
  swift_bridgeObjectRetain();
  if (v27)
  {
    v14 = v17;
    v15 = v27;
    v13 = v27;
    v10 = v17;
    v29 = v17;
    v30 = v27;
    type metadata accessor for SASyncAppIdentifyingInfo();
    v12 = SAUIAppPunchOut.__allocating_init()();
    v28 = v12;
    swift_bridgeObjectRetain();
    v11 = (id)MEMORY[0x24957220C](v10, v13);
    swift_bridgeObjectRelease();
    objc_msgSend(v12, sel_setBundleId_, v11);

    v6 = v12;
    objc_msgSend(v26, sel_setRequestedApp_, v12);

    swift_bridgeObjectRelease();
  }
  v7 = v26;
  AppResolutionStateProvider.init(appSelectionState:)();
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v25, v23, v19);

  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(v16, v25, v19);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v25, v19);
}

unint64_t type metadata accessor for SAIntentGroupSiriKitAppSelectionState()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SAIntentGroupSiriKitAppSelectionState;
  if (!lazy cache variable for type metadata for SAIntentGroupSiriKitAppSelectionState)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupSiriKitAppSelectionState);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SASyncAppIdentifyingInfo()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SASyncAppIdentifyingInfo;
  if (!lazy cache variable for type metadata for SASyncAppIdentifyingInfo)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SASyncAppIdentifyingInfo);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t PaymentsAppResolutionFlowStrategy.authorizationRestrictions.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  if (v5)
    return v5;
  v2 = closure #1 in PaymentsAppResolutionFlowStrategy.authorizationRestrictions.getter();
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v4 + 16) = v2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v2;
}

uint64_t closure #1 in PaymentsAppResolutionFlowStrategy.authorizationRestrictions.getter()
{
  _QWORD *v0;

  type metadata accessor for INSiriAuthorizationStatus();
  _allocateUninitializedArray<A>(_:)();
  *v0 = 3;
  v0[1] = 0;
  _finalizeUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus();
  return Set.init(arrayLiteral:)();
}

uint64_t PaymentsAppResolutionFlowStrategy.authorizationRestrictions.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*PaymentsAppResolutionFlowStrategy.authorizationRestrictions.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = PaymentsAppResolutionFlowStrategy.authorizationRestrictions.getter();
  return PaymentsAppResolutionFlowStrategy.authorizationRestrictions.modify;
}

uint64_t PaymentsAppResolutionFlowStrategy.authorizationRestrictions.modify(uint64_t *a1, char a2)
{
  uint64_t result;
  uint64_t v3;

  if ((a2 & 1) == 0)
    return PaymentsAppResolutionFlowStrategy.authorizationRestrictions.setter(*a1);
  v3 = *a1;
  swift_bridgeObjectRetain();
  PaymentsAppResolutionFlowStrategy.authorizationRestrictions.setter(v3);
  result = (uint64_t)a1;
  outlined destroy of [SFCardSection]();
  return result;
}

uint64_t PaymentsAppResolutionFlowStrategy.appResolutionService.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 24);
  swift_retain();
  swift_endAccess();
  return v2;
}

uint64_t PaymentsAppResolutionFlowStrategy.appResolutionService.setter(uint64_t a1)
{
  uint64_t v1;

  swift_retain();
  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

uint64_t (*PaymentsAppResolutionFlowStrategy.appResolutionService.modify())()
{
  swift_beginAccess();
  return PaymentsAppResolutionFlowStrategy.appResolutionService.modify;
}

uint64_t PaymentsAppResolutionFlowStrategy.appResolutionService.modify()
{
  return swift_endAccess();
}

uint64_t PaymentsAppResolutionFlowStrategy.__allocating_init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_allocObject();
  return PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(a1, a2, a3, a4, a5);
}

uint64_t PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v13;
  _BYTE v14[40];
  _BYTE v15[40];
  _BYTE v16[40];
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = 0;
  v21 = 0;
  v20 = 0;
  v19 = 0;
  v18 = 0;
  v17 = 0;
  v6 = *v5;
  v23 = a1;
  v22 = *(_QWORD *)(v6 + 80);
  v21 = a2;
  v20 = a3;
  v19 = a4;
  v18 = a5;
  v17 = v5;
  v5[2] = 0;
  swift_retain();
  v5[3] = a1;
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v16);
  outlined init with take of CommonLabelsProviding(v16, v5 + 4);
  outlined init with copy of GlobalsProviding(a3, (uint64_t)v15);
  outlined init with take of CommonLabelsProviding(v15, v5 + 9);
  outlined init with copy of GlobalsProviding(a4, (uint64_t)v14);
  outlined init with take of CommonLabelsProviding(v14, v5 + 14);
  swift_retain();
  v5[19] = a5;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a4);
  __swift_destroy_boxed_opaque_existential_0(a3);
  __swift_destroy_boxed_opaque_existential_0(a2);
  swift_release();
  return v13;
}

uint64_t PaymentsAppResolutionFlowStrategy.resolveApp(input:)(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2[121] = v1;
  v2[120] = a1;
  v2[80] = v2;
  v2[81] = 0;
  v2[82] = 0;
  v2[84] = 0;
  v2[72] = 0;
  v2[73] = 0;
  v2[85] = 0;
  v2[86] = 0;
  *(_QWORD *)((char *)v2 + 1460) = 0;
  v2[95] = 0;
  v2[105] = 0;
  v2[109] = 0;
  v2[110] = 0;
  v2[76] = 0;
  v2[77] = 0;
  v2[116] = 0;
  v8 = *v1;
  v2[122] = *v1;
  v3 = type metadata accessor for Input();
  v2[123] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[124] = v4;
  v2[125] = *(_QWORD *)(v4 + 64);
  v2[126] = swift_task_alloc();
  v2[127] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppResolutionResult.AppResolutionResultError?);
  v2[128] = swift_task_alloc();
  v2[129] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v2[130] = swift_task_alloc();
  v5 = type metadata accessor for Logger();
  v2[131] = v5;
  v2[132] = *(_QWORD *)(v5 - 8);
  v2[133] = swift_task_alloc();
  v2[134] = swift_task_alloc();
  v2[135] = swift_task_alloc();
  v2[136] = swift_task_alloc();
  v2[137] = swift_task_alloc();
  v2[138] = swift_task_alloc();
  v2[139] = swift_task_alloc();
  v2[140] = swift_task_alloc();
  v2[141] = swift_task_alloc();
  v2[142] = swift_task_alloc();
  v2[143] = swift_task_alloc();
  v6 = type metadata accessor for Parse();
  v2[144] = v6;
  v2[145] = *(_QWORD *)(v6 - 8);
  v2[146] = swift_task_alloc();
  v2[81] = a1;
  v2[82] = v1;
  v2[147] = *(_QWORD *)(v8 + 80);
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 640) = *v1;
  *(_QWORD *)(v3 + 1232) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 640) = *v1;
  *(_QWORD *)(v3 + 1408) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  _QWORD *v0;
  id v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint32_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  NSObject *log;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint8_t *buf;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint32_t size;
  os_log_type_t v62;
  NSObject *oslog;
  uint64_t v64;
  Swift::Bool v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  Swift::String v72;
  Swift::String v73;
  __int128 *key;
  id v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  Swift::String v90;

  v82 = v0[146];
  v81 = v0[145];
  v83 = v0[144];
  v80 = v0[121];
  v0[80] = v0;
  Input.parse.getter();
  static AceService.currentAsync.getter();
  outlined init with copy of GlobalsProviding(v80 + 72, (uint64_t)(v0 + 7));
  v84 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(0, 0, (uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v82, v83);
  if (v84)
  {
    v78 = swift_dynamicCastUnknownClass();
    if (v78)
    {
      v77 = (void *)v78;
    }
    else
    {

      v77 = 0;
    }
    v76 = v77;
  }
  else
  {
    v76 = 0;
  }
  *(_QWORD *)(v79 + 1184) = v76;
  if (v76)
  {
    *(_QWORD *)(v79 + 672) = v76;
    v1 = v76;
    key = Constants.intentAppIDAssociatedKey.unsafeMutableAddressor();
    swift_beginAccess();
    v75 = objc_getAssociatedObject(v76, key);
    swift_endAccess();
    swift_unknownObjectRelease();
    if (v75)
    {
      _bridgeAnyObjectToAny(_:)();
      outlined init with take of Any(v79 + 160, v79 + 128);
      swift_unknownObjectRelease();
    }
    else
    {
      *(_QWORD *)(v79 + 128) = 0;
      *(_QWORD *)(v79 + 136) = 0;
      *(_QWORD *)(v79 + 144) = 0;
      *(_QWORD *)(v79 + 152) = 0;
    }
    outlined init with take of Any?((_OWORD *)(v79 + 128), (_OWORD *)(v79 + 96));
    if (*(_QWORD *)(v79 + 120))
    {
      if ((swift_dynamicCast() & 1) != 0)
        v73 = *(Swift::String *)(v79 + 624);
      else
        v73 = (Swift::String)0;
      v72 = v73;
    }
    else
    {
      outlined destroy of FlowActivity?(v79 + 96);
      v72 = (Swift::String)0;
    }
    *(_QWORD *)(v79 + 1192) = v72._object;
    *(Swift::String *)(v79 + 576) = v72;
    v90 = v72;
    if (!v72._object)
    {
      v3 = *(_QWORD *)(v79 + 968);
      v4 = swift_allocObject();
      *(_QWORD *)(v79 + 1200) = v4;
      *(_QWORD *)(v79 + 928) = v4 + 16;
      swift_beginAccess();
      *(_QWORD *)(v79 + 1208) = *(_QWORD *)(v3 + 24);
      swift_retain();
      swift_endAccess();
      v69 = PaymentsAppResolutionFlowStrategy.authorizationRestrictions.getter();
      *(_QWORD *)(v79 + 1216) = v69;
      v5 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v79 + 1224) = v5;
      *v5 = *(_QWORD *)(v79 + 640);
      v5[1] = PaymentsAppResolutionFlowStrategy.resolveApp(input:);
      return PaymentsAppResolver.listApps(siriAuthorizationRestriction:)(v69);
    }
    v70 = *(_QWORD *)(v79 + 1040);
    v2 = SignpostName.resolveApp.unsafeMutableAddressor();
    static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v70);
    *(_QWORD *)(v79 + 1240) = type metadata accessor for App();
    swift_bridgeObjectRetain();
    App.__allocating_init(appIdentifier:)();
    v71 = App.isFirstParty.getter();
    swift_release();
    if (v71)
    {
      v66 = *(_QWORD *)(v79 + 1040);
      type metadata accessor for AppResolutionAction();
      static AppUtil.walletApp.getter();
      v67 = static AppResolutionAction.select(app:)();
      swift_release();
      $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
      outlined destroy of Signpost.OpenSignpost(v66);
      swift_bridgeObjectRelease();

      v68 = v67;
    }
    else
    {
      swift_bridgeObjectRetain();
      *(Swift::String *)(v79 + 608) = v72;
      swift_beginAccess();
      swift_retain();
      swift_endAccess();
      v65 = PaymentsAppResolver.isAppOnDevice(_:)(v72);
      swift_release();
      if (v65)
      {
        swift_bridgeObjectRelease();
        v43 = *(_QWORD *)(v79 + 1176);
        v44 = *(_QWORD *)(v79 + 976);
        v46 = swift_allocObject();
        *(_QWORD *)(v79 + 1248) = v46;
        *(_QWORD *)(v79 + 680) = v46 + 16;
        *(_QWORD *)(v46 + 16) = Array.init()();
        v47 = swift_allocObject();
        *(_QWORD *)(v79 + 1256) = v47;
        *(_QWORD *)(v79 + 688) = v47 + 16;
        *(_BYTE *)(v47 + 16) = 0;
        v48 = swift_allocBox();
        v42 = v9;
        *(_QWORD *)(v79 + 1264) = v48;
        *(_QWORD *)(v79 + 1272) = v9;
        *(_QWORD *)(v79 + 1460) = v9;
        v10 = type metadata accessor for AppResolutionResult.AppResolutionResultError();
        *(_QWORD *)(v79 + 1280) = v10;
        v11 = *(_QWORD *)(v10 - 8);
        *(_QWORD *)(v79 + 1288) = v11;
        (*(void (**)(uint64_t, uint64_t))(v11 + 56))(v42, 1);
        *(_QWORD *)(v79 + 1296) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("resolveApp(input:)", 0x12uLL, 1)._object;
        v45 = swift_allocObject();
        *(_QWORD *)(v79 + 1304) = v45;
        swift_retain();
        swift_weakInit();
        swift_release();
        swift_retain();
        v12 = v76;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        v13 = swift_task_alloc();
        *(_QWORD *)(v79 + 1312) = v13;
        *(_QWORD *)(v13 + 16) = v43;
        v14 = *(_QWORD *)(v44 + 88);
        *(_QWORD *)(v79 + 1320) = v14;
        *(_QWORD *)(v13 + 24) = v14;
        *(_QWORD *)(v13 + 32) = v45;
        *(_QWORD *)(v13 + 40) = v76;
        *(Swift::String *)(v13 + 48) = v72;
        *(_QWORD *)(v13 + 64) = v46;
        *(_QWORD *)(v13 + 72) = v47;
        *(_QWORD *)(v13 + 80) = v48;
        v15 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v79 + 1328) = v15;
        *v15 = *(_QWORD *)(v79 + 640);
        v15[1] = PaymentsAppResolutionFlowStrategy.resolveApp(input:);
        return withCheckedContinuation<A>(isolation:function:_:)();
      }
      v7 = *(_QWORD *)(v79 + 1136);
      v59 = *(_QWORD *)(v79 + 1056);
      v60 = *(_QWORD *)(v79 + 1048);
      v8 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v7, v8, v60);
      oslog = Logger.logObject.getter();
      v62 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v79 + 888) = 2;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      size = *(_DWORD *)(v79 + 1452);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v64 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(oslog, v62))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v56 = createStorage<A>(capacity:type:)(0);
        v57 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v79 + 896) = buf;
        *(_QWORD *)(v79 + 904) = v56;
        *(_QWORD *)(v79 + 912) = v57;
        serialize(_:at:)(0, (_BYTE **)(v79 + 896));
        serialize(_:at:)(0, (_BYTE **)(v79 + 896));
        *(_QWORD *)(v79 + 920) = v64;
        v58 = (_QWORD *)swift_task_alloc();
        v58[2] = v79 + 896;
        v58[3] = v79 + 904;
        v58[4] = v79 + 912;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_24701B000, oslog, v62, "#PaymentsAppResolutionFlowStrategy resolveApp initial app search didn't find app, returning noAppFound", buf, size);
        destroyStorage<A>(_:count:)(v56, 0, v54);
        destroyStorage<A>(_:count:)(v57, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
      }
      swift_bridgeObjectRelease();
      v50 = *(_QWORD *)(v79 + 1136);
      v49 = *(_QWORD *)(v79 + 1056);
      v51 = *(_QWORD *)(v79 + 1048);
      v52 = *(_QWORD *)(v79 + 1040);

      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v51);
      type metadata accessor for AppResolutionAction();
      v53 = static AppResolutionAction.noAppFound()();
      swift_bridgeObjectRelease();
      $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
      outlined destroy of Signpost.OpenSignpost(v52);
      swift_bridgeObjectRelease();

      v68 = v53;
    }
  }
  else
  {
    v16 = *(_QWORD *)(v79 + 1064);
    v26 = *(_QWORD *)(v79 + 1056);
    v27 = *(_QWORD *)(v79 + 1048);
    v31 = *(_QWORD *)(v79 + 1008);
    v30 = *(_QWORD *)(v79 + 992);
    v32 = *(_QWORD *)(v79 + 984);
    v28 = *(_QWORD *)(v79 + 960);
    v17 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v16, v17, v27);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v31, v28, v32);
    v29 = (*(unsigned __int8 *)(v30 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
    v34 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v30 + 32))(v34 + v29, v31, v32);
    log = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    *(_QWORD *)(v79 + 664) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v33 = *(_DWORD *)(v79 + 1416);
    v36 = swift_allocObject();
    *(_BYTE *)(v36 + 16) = 32;
    v37 = swift_allocObject();
    *(_BYTE *)(v37 + 16) = 8;
    v35 = swift_allocObject();
    *(_QWORD *)(v35 + 16) = partial apply for implicit closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
    *(_QWORD *)(v35 + 24) = v34;
    v38 = swift_allocObject();
    *(_QWORD *)(v38 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v38 + 24) = v35;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    v39 = v18;
    swift_retain();
    *v39 = partial apply for closure #1 in OSLogArguments.append(_:);
    v39[1] = v36;
    swift_retain();
    v39[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v39[3] = v37;
    swift_retain();
    v39[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v39[5] = v38;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v41))
    {
      v23 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v24 = createStorage<A>(capacity:type:)(0);
      v25 = createStorage<A>(capacity:type:)(1);
      v85 = v23;
      v86 = v24;
      v87 = v25;
      serialize(_:at:)(2, &v85);
      serialize(_:at:)(1, &v85);
      v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v89 = v36;
      closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)&v85, (uint64_t)&v86, (uint64_t)&v87);
      v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v89 = v37;
      closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)&v85, (uint64_t)&v86, (uint64_t)&v87);
      v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v89 = v38;
      closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)&v85, (uint64_t)&v86, (uint64_t)&v87);
      _os_log_impl(&dword_24701B000, log, v41, "#PaymentsAppResolutionFlowStrategy resolveApp parse provided could not be converted to a known intent. %s", v23, v33);
      destroyStorage<A>(_:count:)(v24, 0, v22);
      destroyStorage<A>(_:count:)(v25, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v23, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v20 = *(_QWORD *)(v79 + 1064);
    v19 = *(_QWORD *)(v79 + 1056);
    v21 = *(_QWORD *)(v79 + 1048);

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
    type metadata accessor for AppResolutionAction();
    v68 = static AppResolutionAction.noAppFound()();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v79 + 640) + 8))(v68);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *buf;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32_t size;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  NSObject *oslog;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;

  v1 = *(_QWORD *)(v0 + 1232);
  v29 = *(_QWORD *)(v0 + 1200);
  v25 = *(_QWORD *)(v0 + 1144);
  v26 = *(_QWORD *)(v0 + 1056);
  v27 = *(_QWORD *)(v0 + 1048);
  *(_QWORD *)(v0 + 640) = v0;
  *(_QWORD *)(v29 + 16) = v1;
  PaymentsAppResolutionFlowStrategy.finalizeAppsForDisambiguation(_:)((_QWORD *)(v29 + 16));
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v2, v27);
  swift_retain();
  oslog = Logger.logObject.getter();
  v36 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 936) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 1456);
  v31 = swift_allocObject();
  *(_BYTE *)(v31 + 16) = 32;
  v32 = swift_allocObject();
  *(_BYTE *)(v32 + 16) = 8;
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = partial apply for implicit closure #2 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
  *(_QWORD *)(v30 + 24) = v29;
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v33 + 24) = v30;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v34 = v3;
  swift_retain();
  *v34 = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[1] = v31;
  swift_retain();
  v34[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[3] = v32;
  swift_retain();
  v34[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[5] = v33;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v36))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v22 = createStorage<A>(capacity:type:)(0);
    v23 = createStorage<A>(capacity:type:)(1);
    v37 = buf;
    v38 = v22;
    v39 = v23;
    serialize(_:at:)(2, &v37);
    serialize(_:at:)(1, &v37);
    v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v41 = v31;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v41 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v41 = v33;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    _os_log_impl(&dword_24701B000, oslog, v36, "#PaymentsAppResolutionFlowStrategy resolveApp found supporting apps %s", buf, size);
    destroyStorage<A>(_:count:)(v22, 0, v20);
    destroyStorage<A>(_:count:)(v23, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v15 = v24[143];
  v14 = v24[132];
  v16 = v24[131];
  v17 = (uint64_t *)(v24[150] + 16);

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
  swift_beginAccess();
  v18 = *v17;
  swift_bridgeObjectRetain();
  swift_endAccess();
  type metadata accessor for App();
  v19 = MEMORY[0x2495723C8](v18);
  swift_bridgeObjectRelease();
  if (v19 == 1)
  {
    v11 = (id)v24[148];
    type metadata accessor for AppResolutionAction();
    swift_beginAccess();
    Array.subscript.getter();
    swift_endAccess();
    v12 = static AppResolutionAction.select(app:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    v13 = v12;
  }
  else
  {
    v8 = v24[150];
    swift_beginAccess();
    v9 = *(_QWORD *)(v8 + 16);
    swift_bridgeObjectRetain();
    swift_endAccess();
    swift_bridgeObjectRetain();
    v24[118] = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
    lazy protocol witness table accessor for type [App] and conformance [A]();
    v10 = Collection.isEmpty.getter();
    outlined destroy of [SFCardSection]();
    swift_bridgeObjectRelease();
    type metadata accessor for AppResolutionAction();
    if ((v10 & 1) != 0)
    {
      v7 = static AppResolutionAction.noAppFound()();
    }
    else
    {
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_endAccess();
      v6 = static AppResolutionAction.disambiguate(apps:)();
      swift_bridgeObjectRelease();
      v7 = v6;
    }
    v5 = (id)v24[148];
    swift_release();
    swift_bridgeObjectRelease();

    v13 = v7;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v24[80] + 8))(v13);
}

{
  uint64_t v0;
  void *v2;

  v2 = *(void **)(*(_QWORD *)v0 + 1184);
  *(_QWORD *)(*(_QWORD *)v0 + 640) = *(_QWORD *)v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  _QWORD *v7;
  void (*v8)(uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint32_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  NSObject *log;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *buf;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint32_t size;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  NSObject *oslog;
  os_log_type_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  int v72;
  uint64_t v73;
  const void *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;

  v75 = v0[161];
  v77 = v0[160];
  v74 = (const void *)v0[159];
  v76 = (void *)v0[129];
  v0[80] = v0;
  swift_beginAccess();
  outlined init with copy of AppResolutionResult.AppResolutionResultError?(v74, v76);
  swift_endAccess();
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v75 + 48))(v76, 1, v77) == 1)
  {
    outlined destroy of AppResolutionResult.AppResolutionResultError?(*(_QWORD *)(v73 + 1032));
    goto LABEL_14;
  }
  v69 = *(_QWORD *)(v73 + 1288);
  v70 = *(_QWORD *)(v73 + 1280);
  v71 = *(void **)(v73 + 1024);
  outlined init with copy of AppResolutionResult.AppResolutionResultError?(*(const void **)(v73 + 1032), v71);
  v72 = (*(uint64_t (**)(void *, uint64_t))(v69 + 88))(v71, v70);
  if (v72 == *MEMORY[0x24BE90D28])
  {
    v65 = *(_QWORD *)(v73 + 1040);
    v64 = *(_QWORD *)(v73 + 1032);
    v63 = *(_QWORD **)(v73 + 1024);
    v66 = *(id *)(v73 + 1184);
    (*(void (**)(void))(*(_QWORD *)(v73 + 1288) + 96))();
    *(_QWORD *)(v73 + 880) = *v63;
    type metadata accessor for AppResolutionAction();
    v67 = static AppResolutionAction.appNotSupported(app:)();
    swift_release();
    outlined destroy of AppResolutionResult.AppResolutionResultError?(v64);
    swift_release();
    swift_release();
    swift_release();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v65);
    swift_bridgeObjectRelease();

    v68 = v67;
LABEL_18:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v73 + 640) + 8))(v68);
  }
  if (v72 == *MEMORY[0x24BE90D30])
  {
    v56 = *(_QWORD *)(v73 + 1040);
    v55 = *(_QWORD *)(v73 + 1032);
    v54 = *(_QWORD **)(v73 + 1024);
    v57 = *(id *)(v73 + 1184);
    (*(void (**)(void))(*(_QWORD *)(v73 + 1288) + 96))();
    *(_QWORD *)(v73 + 872) = *v54;
    type metadata accessor for AppResolutionAction();
    v58 = static AppResolutionAction.screenTimeEnabled(app:)();
    swift_release();
    outlined destroy of AppResolutionResult.AppResolutionResultError?(v55);
    swift_release();
    swift_release();
    swift_release();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v56);
    swift_bridgeObjectRelease();

    v68 = v58;
    goto LABEL_18;
  }
  if (v72 == *MEMORY[0x24BE90D20])
  {
    v60 = *(_QWORD *)(v73 + 1040);
    v59 = *(_QWORD *)(v73 + 1032);
    v61 = *(id *)(v73 + 1184);
    type metadata accessor for AppResolutionAction();
    v62 = static AppResolutionAction.noAppFound()();
    outlined destroy of AppResolutionResult.AppResolutionResultError?(v59);
    swift_release();
    swift_release();
    swift_release();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v60);
    swift_bridgeObjectRelease();

    v68 = v62;
    goto LABEL_18;
  }
  v43 = *(_QWORD *)(v73 + 1320);
  v42 = *(_QWORD *)(v73 + 1176);
  v1 = *(_QWORD *)(v73 + 1128);
  v40 = *(_QWORD *)(v73 + 1056);
  v41 = *(_QWORD *)(v73 + 1048);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v73 + 1288) + 8))(*(_QWORD *)(v73 + 1024), *(_QWORD *)(v73 + 1280));
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v1, v2, v41);
  v45 = swift_allocObject();
  *(_QWORD *)(v45 + 16) = v42;
  *(_QWORD *)(v45 + 24) = v43;
  oslog = Logger.logObject.getter();
  v53 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v73 + 864) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v73 + 1448);
  v48 = swift_allocObject();
  *(_BYTE *)(v48 + 16) = 32;
  v49 = swift_allocObject();
  *(_BYTE *)(v49 + 16) = 8;
  v46 = swift_allocObject();
  *(_QWORD *)(v46 + 16) = partial apply for implicit closure #7 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
  *(_QWORD *)(v46 + 24) = v45;
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v47 + 24) = v46;
  v50 = swift_allocObject();
  *(_QWORD *)(v50 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v50 + 24) = v47;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v51 = v3;
  swift_retain();
  *v51 = partial apply for closure #1 in OSLogArguments.append(_:);
  v51[1] = v48;
  swift_retain();
  v51[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v51[3] = v49;
  swift_retain();
  v51[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v51[5] = v50;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v53))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v38 = createStorage<A>(capacity:type:)(0);
    v39 = createStorage<A>(capacity:type:)(1);
    v83 = buf;
    v84 = v38;
    v85 = v39;
    serialize(_:at:)(2, &v83);
    serialize(_:at:)(1, &v83);
    v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v87 = v48;
    closure #1 in osLogInternal(_:log:type:)(&v86, (uint64_t)&v83, (uint64_t)&v84, (uint64_t)&v85);
    v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v87 = v49;
    closure #1 in osLogInternal(_:log:type:)(&v86, (uint64_t)&v83, (uint64_t)&v84, (uint64_t)&v85);
    v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v87 = v50;
    closure #1 in osLogInternal(_:log:type:)(&v86, (uint64_t)&v83, (uint64_t)&v84, (uint64_t)&v85);
    _os_log_impl(&dword_24701B000, oslog, v53, "#PaymentsAppResolutionFlowStrategy<%s> encountered unrecognized AppResolutionResultError case", buf, size);
    destroyStorage<A>(_:count:)(v38, 0, v36);
    destroyStorage<A>(_:count:)(v39, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v33 = *(_QWORD *)(v73 + 1128);
  v32 = *(_QWORD *)(v73 + 1056);
  v34 = *(_QWORD *)(v73 + 1048);
  v35 = *(_QWORD *)(v73 + 1032);

  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
  outlined destroy of AppResolutionResult.AppResolutionResultError?(v35);
LABEL_14:
  v22 = *(_QWORD *)(v73 + 1248);
  v4 = *(_QWORD *)(v73 + 1120);
  v20 = *(_QWORD *)(v73 + 1056);
  v21 = *(_QWORD *)(v73 + 1048);
  v5 = Logger.payments.unsafeMutableAddressor();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
  *(_QWORD *)(v73 + 1336) = v6;
  v6(v4, v5, v21);
  swift_retain();
  swift_retain();
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for implicit closure #4 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
  *(_QWORD *)(v24 + 24) = v22;
  swift_release();
  log = Logger.logObject.getter();
  v31 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v73 + 696) = 12;
  *(_QWORD *)(v73 + 1344) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v73 + 1352) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v73 + 1360) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v23 = *(_DWORD *)(v73 + 1420);
  v26 = swift_allocObject();
  *(_BYTE *)(v26 + 16) = 32;
  v27 = swift_allocObject();
  *(_BYTE *)(v27 + 16) = 8;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
  *(_QWORD *)(v25 + 24) = v24;
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v28 + 24) = v25;
  *(_QWORD *)(v73 + 1368) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v29 = v7;
  swift_retain();
  *v29 = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[1] = v26;
  swift_retain();
  v29[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[3] = v27;
  swift_retain();
  v29[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[5] = v28;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(log, v31))
  {
    v17 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v18 = createStorage<A>(capacity:type:)(0);
    v19 = createStorage<A>(capacity:type:)(1);
    v78 = v17;
    v79 = v18;
    v80 = v19;
    serialize(_:at:)(2, &v78);
    serialize(_:at:)(1, &v78);
    v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v82 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v78, (uint64_t)&v79, (uint64_t)&v80);
    v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v82 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v78, (uint64_t)&v79, (uint64_t)&v80);
    v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v82 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v78, (uint64_t)&v79, (uint64_t)&v80);
    _os_log_impl(&dword_24701B000, log, v31, "#PaymentsAppResolutionFlowStrategy resolved apps %s", v17, v23);
    destroyStorage<A>(_:count:)(v18, 0, v16);
    destroyStorage<A>(_:count:)(v19, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v17, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  *(_QWORD *)(v73 + 1376) = 0;
  v12 = *(_QWORD *)(v73 + 1120);
  v11 = *(_QWORD *)(v73 + 1056);
  v13 = *(_QWORD *)(v73 + 1048);
  v14 = (uint64_t *)(*(_QWORD *)(v73 + 1248) + 16);

  v8 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  *(_QWORD *)(v73 + 1384) = v8;
  v8(v12, v13);
  swift_beginAccess();
  v15 = *v14;
  *(_QWORD *)(v73 + 1392) = *v14;
  swift_bridgeObjectRetain();
  swift_endAccess();
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v73 + 1400) = v9;
  *v9 = *(_QWORD *)(v73 + 640);
  v9[1] = PaymentsAppResolutionFlowStrategy.resolveApp(input:);
  return PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:)(v15);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint32_t v40;
  os_log_type_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint32_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t, uint64_t);
  uint32_t v88;
  os_log_type_t v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t, uint64_t);
  uint32_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  NSObject *v108;
  os_log_type_t v109;
  Swift::Bool v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t);
  uint64_t v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint8_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(uint64_t, uint64_t, uint64_t);
  uint32_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  NSObject *log;
  os_log_type_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(uint64_t, uint64_t);
  uint64_t v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint8_t *buf;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(uint64_t, uint64_t, uint64_t);
  uint64_t v156;
  uint32_t size;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  NSObject *oslog;
  os_log_type_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint8_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t (*v175)(uint64_t, uint64_t, uint64_t);
  uint64_t v176;
  uint8_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t (*v180)(uint64_t, uint64_t, uint64_t);
  uint64_t v181;
  uint8_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t (*v185)(uint64_t, uint64_t, uint64_t);
  uint64_t v186;
  uint8_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t (*v190)(uint64_t, uint64_t, uint64_t);
  uint64_t v191;

  v167 = v0[176];
  v168 = v0[156];
  v169 = v0[155];
  v0[80] = v0;
  swift_beginAccess();
  *(_QWORD *)(v168 + 16) = v167;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  v170 = *(_QWORD *)(v168 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  v171 = MEMORY[0x2495723C8](v170, v169);
  swift_bridgeObjectRelease();
  if (v171 <= 1)
  {
    v141 = *(_QWORD *)(v166 + 1256);
    swift_beginAccess();
    v142 = *(_BYTE *)(v141 + 16);
    swift_endAccess();
    if ((v142 & 1) != 0)
    {
      v138 = *(_QWORD *)(v166 + 1248);
      swift_beginAccess();
      v139 = *(_QWORD *)(v138 + 16);
      swift_bridgeObjectRetain();
      swift_endAccess();
      swift_bridgeObjectRetain();
      *(_QWORD *)(v166 + 832) = v139;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
      lazy protocol witness table accessor for type [App] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [SFCardSection]();
      v140 = *(_QWORD *)(v166 + 824);
      if (v140)
      {
        v129 = *(void (**)(uint64_t, uint64_t, uint64_t))(v166 + 1336);
        v6 = *(_QWORD *)(v166 + 1104);
        v128 = *(_QWORD *)(v166 + 1048);
        *(_QWORD *)(v166 + 840) = v140;
        swift_bridgeObjectRelease();
        v7 = Logger.payments.unsafeMutableAddressor();
        v129(v6, v7, v128);
        swift_retain();
        log = Logger.logObject.getter();
        v137 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v166 + 848) = 12;
        UnsignedInteger<>.init<A>(_:)();
        v130 = *(_DWORD *)(v166 + 1440);
        v132 = swift_allocObject();
        *(_BYTE *)(v132 + 16) = 32;
        v133 = swift_allocObject();
        *(_BYTE *)(v133 + 16) = 8;
        v131 = swift_allocObject();
        *(_QWORD *)(v131 + 16) = partial apply for implicit closure #8 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
        *(_QWORD *)(v131 + 24) = v140;
        v134 = swift_allocObject();
        *(_QWORD *)(v134 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v134 + 24) = v131;
        _allocateUninitializedArray<A>(_:)();
        v135 = v8;
        swift_retain();
        *v135 = partial apply for closure #1 in OSLogArguments.append(_:);
        v135[1] = v132;
        swift_retain();
        v135[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v135[3] = v133;
        swift_retain();
        v135[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v135[5] = v134;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(log, v137))
        {
          v9 = *(_QWORD *)(v166 + 1376);
          v125 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v124 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v126 = createStorage<A>(capacity:type:)(0);
          v127 = createStorage<A>(capacity:type:)(1);
          v182 = v125;
          v183 = v126;
          v184 = v127;
          serialize(_:at:)(2, &v182);
          serialize(_:at:)(1, &v182);
          v185 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v186 = v132;
          result = closure #1 in osLogInternal(_:log:type:)(&v185, (uint64_t)&v182, (uint64_t)&v183, (uint64_t)&v184);
          if (v9)
            return result;
          v185 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v186 = v133;
          closure #1 in osLogInternal(_:log:type:)(&v185, (uint64_t)&v182, (uint64_t)&v183, (uint64_t)&v184);
          v185 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v186 = v134;
          closure #1 in osLogInternal(_:log:type:)(&v185, (uint64_t)&v182, (uint64_t)&v183, (uint64_t)&v184);
          _os_log_impl(&dword_24701B000, log, v137, "#PaymentsAppResolutionFlowStrategy resolveApp resolution found one app, returning needsConfirmation for %s", v125, v130);
          destroyStorage<A>(_:count:)(v126, 0, v124);
          destroyStorage<A>(_:count:)(v127, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v125, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        v120 = *(void (**)(uint64_t, uint64_t))(v166 + 1384);
        v118 = *(_QWORD *)(v166 + 1104);
        v119 = *(_QWORD *)(v166 + 1048);
        v121 = *(_QWORD *)(v166 + 1040);
        v122 = *(id *)(v166 + 1184);

        v120(v118, v119);
        type metadata accessor for AppResolutionAction();
        v123 = static AppResolutionAction.confirm(app:)();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
        outlined destroy of Signpost.OpenSignpost(v121);
        swift_bridgeObjectRelease();

        v149 = v123;
        goto LABEL_47;
      }
      swift_bridgeObjectRelease();
    }
    v114 = *(_QWORD *)(v166 + 1248);
    v115 = *(_QWORD *)(v166 + 1240);
    swift_beginAccess();
    v116 = *(_QWORD *)(v114 + 16);
    swift_bridgeObjectRetain();
    swift_endAccess();
    v117 = MEMORY[0x2495723C8](v116, v115);
    swift_bridgeObjectRelease();
    if (v117 == 1)
    {
      v111 = *(_QWORD *)(v166 + 1248);
      swift_beginAccess();
      v112 = *(_QWORD *)(v111 + 16);
      swift_bridgeObjectRetain();
      swift_endAccess();
      swift_bridgeObjectRetain();
      *(_QWORD *)(v166 + 752) = v112;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
      lazy protocol witness table accessor for type [App] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [SFCardSection]();
      v113 = *(_QWORD *)(v166 + 744);
      if (v113)
      {
        *(_QWORD *)(v166 + 760) = v113;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v166 + 592) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v166 + 600) = v10;
        v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v11);
        swift_bridgeObjectRelease();
        DefaultStringInterpolation.appendInterpolation(_:)();
        v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v12);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        v13._countAndFlagsBits = String.init(stringInterpolation:)();
        v110 = App.supportsIntent(intentName:)(v13);
        swift_bridgeObjectRelease();
        if (v110)
        {
          v101 = *(void (**)(uint64_t, uint64_t, uint64_t))(v166 + 1336);
          v14 = *(_QWORD *)(v166 + 1096);
          v100 = *(_QWORD *)(v166 + 1048);
          v15 = Logger.payments.unsafeMutableAddressor();
          v101(v14, v15, v100);
          swift_retain();
          v108 = Logger.logObject.getter();
          v109 = static os_log_type_t.debug.getter();
          *(_QWORD *)(v166 + 776) = 12;
          UnsignedInteger<>.init<A>(_:)();
          v102 = *(_DWORD *)(v166 + 1432);
          v104 = swift_allocObject();
          *(_BYTE *)(v104 + 16) = 32;
          v105 = swift_allocObject();
          *(_BYTE *)(v105 + 16) = 8;
          v103 = swift_allocObject();
          *(_QWORD *)(v103 + 16) = partial apply for implicit closure #8 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
          *(_QWORD *)(v103 + 24) = v113;
          v106 = swift_allocObject();
          *(_QWORD *)(v106 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
          *(_QWORD *)(v106 + 24) = v103;
          _allocateUninitializedArray<A>(_:)();
          v107 = v16;
          swift_retain();
          *v107 = partial apply for closure #1 in OSLogArguments.append(_:);
          v107[1] = v104;
          swift_retain();
          v107[2] = partial apply for closure #1 in OSLogArguments.append(_:);
          v107[3] = v105;
          swift_retain();
          v107[4] = partial apply for closure #1 in OSLogArguments.append(_:);
          v107[5] = v106;
          _finalizeUninitializedArray<A>(_:)();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v108, v109))
          {
            v17 = *(_QWORD *)(v166 + 1376);
            v97 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            v96 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
            v98 = createStorage<A>(capacity:type:)(0);
            v99 = createStorage<A>(capacity:type:)(1);
            v177 = v97;
            v178 = v98;
            v179 = v99;
            serialize(_:at:)(2, &v177);
            serialize(_:at:)(1, &v177);
            v180 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v181 = v104;
            result = closure #1 in osLogInternal(_:log:type:)(&v180, (uint64_t)&v177, (uint64_t)&v178, (uint64_t)&v179);
            if (v17)
              return result;
            v180 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v181 = v105;
            closure #1 in osLogInternal(_:log:type:)(&v180, (uint64_t)&v177, (uint64_t)&v178, (uint64_t)&v179);
            v180 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v181 = v106;
            closure #1 in osLogInternal(_:log:type:)(&v180, (uint64_t)&v177, (uint64_t)&v178, (uint64_t)&v179);
            _os_log_impl(&dword_24701B000, v108, v109, "#PaymentsAppResolutionFlowStrategy resolveApp resolution found one app, returning select for %s", v97, v102);
            destroyStorage<A>(_:count:)(v98, 0, v96);
            destroyStorage<A>(_:count:)(v99, 1, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x2495725CC](v97, MEMORY[0x24BEE4260]);
            swift_release();
            swift_release();
            swift_release();
            v95 = 0;
          }
          else
          {
            swift_release();
            swift_release();
            swift_release();
            v95 = *(_QWORD *)(v166 + 1376);
          }
          v94 = *(void (**)(uint64_t, uint64_t))(v166 + 1384);
          v92 = *(_QWORD *)(v166 + 1096);
          v93 = *(_QWORD *)(v166 + 1048);

          v94(v92, v93);
          if (!App.isFirstParty.getter())
          {
            v72 = *(_QWORD *)(v166 + 1040);
            v73 = *(id *)(v166 + 1184);
            type metadata accessor for AppResolutionAction();
            v74 = static AppResolutionAction.select(app:)();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
            outlined destroy of Signpost.OpenSignpost(v72);
            swift_bridgeObjectRelease();

            v149 = v74;
            goto LABEL_47;
          }
          v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v166 + 1336);
          v18 = *(_QWORD *)(v166 + 1088);
          v86 = *(_QWORD *)(v166 + 1048);
          v19 = Logger.payments.unsafeMutableAddressor();
          v87(v18, v19, v86);
          v90 = Logger.logObject.getter();
          v89 = static os_log_type_t.debug.getter();
          *(_QWORD *)(v166 + 784) = 2;
          UnsignedInteger<>.init<A>(_:)();
          v88 = *(_DWORD *)(v166 + 1436);
          v91 = _allocateUninitializedArray<A>(_:)();
          if (os_log_type_enabled(v90, v89))
          {
            v82 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            v81 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
            v83 = createStorage<A>(capacity:type:)(0);
            v84 = createStorage<A>(capacity:type:)(0);
            *(_QWORD *)(v166 + 792) = v82;
            *(_QWORD *)(v166 + 800) = v83;
            *(_QWORD *)(v166 + 808) = v84;
            serialize(_:at:)(0, (_BYTE **)(v166 + 792));
            serialize(_:at:)(0, (_BYTE **)(v166 + 792));
            *(_QWORD *)(v166 + 816) = v91;
            v85 = (_QWORD *)swift_task_alloc();
            v85[2] = v166 + 792;
            v85[3] = v166 + 800;
            v85[4] = v166 + 808;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
            lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
            result = Sequence.forEach(_:)();
            if (v95)
              return result;
            swift_task_dealloc();
            _os_log_impl(&dword_24701B000, v90, v89, "#PaymentsAppResolutionFlowStrategy resolveApp the app found was first party, falling back to pre-defined AppUtil constant for extension values", v82, v88);
            destroyStorage<A>(_:count:)(v83, 0, v81);
            destroyStorage<A>(_:count:)(v84, 0, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x2495725CC](v82, MEMORY[0x24BEE4260]);
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          v77 = *(void (**)(uint64_t, uint64_t))(v166 + 1384);
          v75 = *(_QWORD *)(v166 + 1088);
          v76 = *(_QWORD *)(v166 + 1048);
          v78 = *(_QWORD *)(v166 + 1040);
          v79 = *(id *)(v166 + 1184);

          v77(v75, v76);
          type metadata accessor for AppResolutionAction();
          static AppUtil.walletApp.getter();
          v80 = static AppResolutionAction.select(app:)();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
          outlined destroy of Signpost.OpenSignpost(v78);
          swift_bridgeObjectRelease();

          v149 = v80;
          goto LABEL_47;
        }
        v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v166 + 1336);
        v57 = *(_QWORD *)(v166 + 1320);
        v56 = *(_QWORD *)(v166 + 1176);
        v20 = *(_QWORD *)(v166 + 1080);
        v54 = *(_QWORD *)(v166 + 1048);
        v21 = Logger.payments.unsafeMutableAddressor();
        v55(v20, v21, v54);
        v59 = swift_allocObject();
        *(_QWORD *)(v59 + 16) = v56;
        *(_QWORD *)(v59 + 24) = v57;
        swift_retain();
        v70 = Logger.logObject.getter();
        v71 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v166 + 768) = 22;
        UnsignedInteger<>.init<A>(_:)();
        v58 = *(_DWORD *)(v166 + 1428);
        v63 = swift_allocObject();
        *(_BYTE *)(v63 + 16) = 32;
        v64 = swift_allocObject();
        *(_BYTE *)(v64 + 16) = 8;
        v60 = swift_allocObject();
        *(_QWORD *)(v60 + 16) = partial apply for implicit closure #7 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
        *(_QWORD *)(v60 + 24) = v59;
        v61 = swift_allocObject();
        *(_QWORD *)(v61 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v61 + 24) = v60;
        v65 = swift_allocObject();
        *(_QWORD *)(v65 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v65 + 24) = v61;
        v66 = swift_allocObject();
        *(_BYTE *)(v66 + 16) = 32;
        v67 = swift_allocObject();
        *(_BYTE *)(v67 + 16) = 8;
        v62 = swift_allocObject();
        *(_QWORD *)(v62 + 16) = partial apply for implicit closure #8 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
        *(_QWORD *)(v62 + 24) = v113;
        v68 = swift_allocObject();
        *(_QWORD *)(v68 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v68 + 24) = v62;
        _allocateUninitializedArray<A>(_:)();
        v69 = v22;
        swift_retain();
        *v69 = partial apply for closure #1 in OSLogArguments.append(_:);
        v69[1] = v63;
        swift_retain();
        v69[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v69[3] = v64;
        swift_retain();
        v69[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v69[5] = v65;
        swift_retain();
        v69[6] = partial apply for closure #1 in OSLogArguments.append(_:);
        v69[7] = v66;
        swift_retain();
        v69[8] = partial apply for closure #1 in OSLogArguments.append(_:);
        v69[9] = v67;
        swift_retain();
        v69[10] = partial apply for closure #1 in OSLogArguments.append(_:);
        v69[11] = v68;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v70, v71))
        {
          v23 = *(_QWORD *)(v166 + 1376);
          v51 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v52 = createStorage<A>(capacity:type:)(0);
          v53 = createStorage<A>(capacity:type:)(2);
          v172 = v51;
          v173 = v52;
          v174 = v53;
          serialize(_:at:)(2, &v172);
          serialize(_:at:)(2, &v172);
          v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v176 = v63;
          result = closure #1 in osLogInternal(_:log:type:)(&v175, (uint64_t)&v172, (uint64_t)&v173, (uint64_t)&v174);
          if (v23)
            return result;
          v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v176 = v64;
          closure #1 in osLogInternal(_:log:type:)(&v175, (uint64_t)&v172, (uint64_t)&v173, (uint64_t)&v174);
          v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v176 = v65;
          closure #1 in osLogInternal(_:log:type:)(&v175, (uint64_t)&v172, (uint64_t)&v173, (uint64_t)&v174);
          v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v176 = v66;
          closure #1 in osLogInternal(_:log:type:)(&v175, (uint64_t)&v172, (uint64_t)&v173, (uint64_t)&v174);
          v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v176 = v67;
          closure #1 in osLogInternal(_:log:type:)(&v175, (uint64_t)&v172, (uint64_t)&v173, (uint64_t)&v174);
          v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v176 = v68;
          closure #1 in osLogInternal(_:log:type:)(&v175, (uint64_t)&v172, (uint64_t)&v173, (uint64_t)&v174);
          _os_log_impl(&dword_24701B000, v70, v71, "#PaymentsAppResolutionFlowStrategy resolveApp found app that doesn't support %s, returning appNotSupported for %s", v51, v58);
          destroyStorage<A>(_:count:)(v52, 0, v50);
          destroyStorage<A>(_:count:)(v53, 2, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v51, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
        v46 = *(void (**)(uint64_t, uint64_t))(v166 + 1384);
        v44 = *(_QWORD *)(v166 + 1080);
        v45 = *(_QWORD *)(v166 + 1048);
        v47 = *(_QWORD *)(v166 + 1040);
        v48 = *(id *)(v166 + 1184);

        v46(v44, v45);
        type metadata accessor for AppResolutionAction();
        v49 = static AppResolutionAction.appNotSupported(app:)();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
        outlined destroy of Signpost.OpenSignpost(v47);
        swift_bridgeObjectRelease();

        v149 = v49;
        goto LABEL_47;
      }
      swift_bridgeObjectRelease();
    }
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v166 + 1336);
    v24 = *(_QWORD *)(v166 + 1072);
    v38 = *(_QWORD *)(v166 + 1048);
    v25 = Logger.payments.unsafeMutableAddressor();
    v39(v24, v25, v38);
    v42 = Logger.logObject.getter();
    v41 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v166 + 704) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v40 = *(_DWORD *)(v166 + 1424);
    v43 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v42, v41))
    {
      v26 = *(_QWORD *)(v166 + 1376);
      v34 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v35 = createStorage<A>(capacity:type:)(0);
      v36 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v166 + 712) = v34;
      *(_QWORD *)(v166 + 720) = v35;
      *(_QWORD *)(v166 + 728) = v36;
      serialize(_:at:)(0, (_BYTE **)(v166 + 712));
      serialize(_:at:)(0, (_BYTE **)(v166 + 712));
      *(_QWORD *)(v166 + 736) = v43;
      v37 = (_QWORD *)swift_task_alloc();
      v37[2] = v166 + 712;
      v37[3] = v166 + 720;
      v37[4] = v166 + 728;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v26)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24701B000, v42, v41, "#PaymentsAppResolutionFlowStrategy resolveApp resolution did not find any apps, returning noAppFound", v34, v40);
      destroyStorage<A>(_:count:)(v35, 0, v33);
      destroyStorage<A>(_:count:)(v36, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v34, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v29 = *(void (**)(uint64_t, uint64_t))(v166 + 1384);
    v27 = *(_QWORD *)(v166 + 1072);
    v28 = *(_QWORD *)(v166 + 1048);
    v30 = *(_QWORD *)(v166 + 1040);
    v31 = *(id *)(v166 + 1184);

    v29(v27, v28);
    type metadata accessor for AppResolutionAction();
    v32 = static AppResolutionAction.noAppFound()();
    swift_release();
    swift_release();
    swift_release();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v30);
    swift_bridgeObjectRelease();

    v149 = v32;
    goto LABEL_47;
  }
  v155 = *(void (**)(uint64_t, uint64_t, uint64_t))(v166 + 1336);
  v156 = *(_QWORD *)(v166 + 1248);
  v1 = *(_QWORD *)(v166 + 1112);
  v154 = *(_QWORD *)(v166 + 1048);
  v2 = Logger.payments.unsafeMutableAddressor();
  v155(v1, v2, v154);
  swift_retain();
  swift_retain();
  v158 = swift_allocObject();
  *(_QWORD *)(v158 + 16) = partial apply for implicit closure #4 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
  *(_QWORD *)(v158 + 24) = v156;
  swift_release();
  oslog = Logger.logObject.getter();
  v165 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v166 + 856) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v166 + 1444);
  v160 = swift_allocObject();
  *(_BYTE *)(v160 + 16) = 32;
  v161 = swift_allocObject();
  *(_BYTE *)(v161 + 16) = 8;
  v159 = swift_allocObject();
  *(_QWORD *)(v159 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
  *(_QWORD *)(v159 + 24) = v158;
  v162 = swift_allocObject();
  *(_QWORD *)(v162 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v162 + 24) = v159;
  _allocateUninitializedArray<A>(_:)();
  v163 = v3;
  swift_retain();
  *v163 = partial apply for closure #1 in OSLogArguments.append(_:);
  v163[1] = v160;
  swift_retain();
  v163[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v163[3] = v161;
  swift_retain();
  v163[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v163[5] = v162;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(oslog, v165))
  {
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_7;
  }
  v4 = *(_QWORD *)(v166 + 1376);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v150 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
  v152 = createStorage<A>(capacity:type:)(0);
  v153 = createStorage<A>(capacity:type:)(1);
  v187 = buf;
  v188 = v152;
  v189 = v153;
  serialize(_:at:)(2, &v187);
  serialize(_:at:)(1, &v187);
  v190 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v191 = v160;
  result = closure #1 in osLogInternal(_:log:type:)(&v190, (uint64_t)&v187, (uint64_t)&v188, (uint64_t)&v189);
  if (!v4)
  {
    v190 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v191 = v161;
    closure #1 in osLogInternal(_:log:type:)(&v190, (uint64_t)&v187, (uint64_t)&v188, (uint64_t)&v189);
    v190 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v191 = v162;
    closure #1 in osLogInternal(_:log:type:)(&v190, (uint64_t)&v187, (uint64_t)&v188, (uint64_t)&v189);
    _os_log_impl(&dword_24701B000, oslog, v165, "#PaymentsAppResolutionFlowStrategy resolveApp resolution found multiple apps, returning disambiguate for %s", buf, size);
    destroyStorage<A>(_:count:)(v152, 0, v150);
    destroyStorage<A>(_:count:)(v153, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
LABEL_7:
    v145 = *(void (**)(uint64_t, uint64_t))(v166 + 1384);
    v143 = *(_QWORD *)(v166 + 1112);
    v144 = *(_QWORD *)(v166 + 1048);
    v146 = *(_QWORD *)(v166 + 1040);
    v147 = *(id *)(v166 + 1184);

    v145(v143, v144);
    type metadata accessor for AppResolutionAction();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_endAccess();
    v148 = static AppResolutionAction.disambiguate(apps:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v146);
    swift_bridgeObjectRelease();

    v149 = v148;
LABEL_47:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v166 + 640) + 8))(v149);
  }
  return result;
}

uint64_t implicit closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  uint64_t v1;
  unint64_t v2;
  char *v3;
  uint64_t v4;

  v4 = type metadata accessor for Parse();
  v2 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v3 = (char *)&v1 - v2;
  Input.parse.getter();
  return String.init<A>(describing:)();
}

uint64_t sub_24705A330()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Input() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  type metadata accessor for Input();
  return implicit closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)();
}

uint64_t implicit closure #2 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
  lazy protocol witness table accessor for type [App] and conformance [A]();
  return String.init<A>(describing:)();
}

uint64_t closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD v24[2];
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t Strong;
  uint64_t v48[5];
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v38 = a1;
  v32 = a2;
  v33 = a3;
  v34 = a4;
  v35 = a5;
  v36 = a6;
  v37 = a7;
  v44 = a8;
  v59 = 0;
  v58 = 0;
  v57 = 0;
  v55 = 0;
  v56 = 0;
  v54 = 0;
  v53 = 0;
  v52 = 0;
  v50 = 0;
  v60 = a9;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(_QWORD *)(v40 + 64);
  v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0;
  v43 = (char *)v24 - v42;
  v59 = MEMORY[0x24BDAC7A8](v38);
  v45 = v9 + 16;
  v58 = v9 + 16;
  v57 = v10;
  v55 = v11;
  v56 = v12;
  v54 = v13 + 16;
  v53 = v14 + 16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppResolutionResult.AppResolutionResultError?);
  v52 = swift_projectBox();
  v46 = &v51;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  swift_endAccess();
  if (!Strong)
    return CheckedContinuation.resume<>()();
  v31 = Strong;
  v30 = Strong;
  v50 = Strong;
  v24[1] = &v49;
  swift_beginAccess();
  v29 = *(_QWORD *)(v30 + 24);
  swift_retain();
  swift_endAccess();
  swift_bridgeObjectRetain();
  v15 = type metadata accessor for AppResolutionStateProvider();
  v28 = v48;
  v48[3] = v15;
  v48[4] = MEMORY[0x24BE90CE0];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v48);
  AppResolutionStateProvider.init(appBundleId:)(v34, v35, (uint64_t)boxed_opaque_existential_1);
  swift_retain();
  swift_retain();
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v43, v38, v39);
  swift_retain();
  v25 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  v26 = (v25 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject();
  v18 = v37;
  v19 = v25;
  v20 = v40;
  v21 = v43;
  v22 = v39;
  v27 = v17;
  *(_QWORD *)(v17 + 16) = v36;
  *(_QWORD *)(v17 + 24) = v18;
  (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))(v17 + v19, v21, v22);
  *(_QWORD *)(v27 + v26) = v44;
  dispatch thunk of AppResolutionService.resolveApp(intent:appResolutionState:_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v28);
  swift_release();
  return swift_release();
}

uint64_t CheckedContinuation.resume<>()()
{
  return CheckedContinuation.resume(returning:)();
}

void closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  char *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE **v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE **v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  char *v64;
  void (*v65)(char *, char *, uint64_t);
  unint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t);
  unint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint32_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  NSObject *v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint32_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  NSObject *v100;
  int v101;
  id v102;
  id *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  unint64_t v123;
  char *v124;
  unint64_t v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t *v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  id *v148;
  void *v149;
  uint64_t v150;
  id *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t (*v162)(uint64_t, uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _BYTE *v166;
  uint64_t v167;
  uint32_t v168;
  char v169;
  uint64_t (*v170)(uint64_t, uint64_t, uint64_t);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE *v174;
  uint64_t v175;
  uint32_t v176;
  id v177;
  id v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;

  v148 = a1;
  v143 = a2;
  v144 = a3;
  v145 = a4;
  v146 = a5;
  v185 = 0;
  v183 = 0;
  v182 = 0;
  v181 = 0;
  v180 = 0;
  v179 = 0;
  v178 = 0;
  v118 = 0;
  v184 = 0;
  v161 = 0;
  v157 = 0;
  v154 = 0;
  v129 = 0;
  v119 = type metadata accessor for Logger();
  v120 = *(_QWORD *)(v119 - 8);
  v121 = (*(_QWORD *)(v120 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v119);
  v122 = (char *)v46 - v121;
  v123 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v46 - v121);
  v124 = (char *)v46 - v123;
  v125 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppResolutionResult.AppResolutionResultError?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v129);
  v126 = (char *)v46 - v125;
  v127 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v128 = (uint64_t)v46 - v127;
  v130 = type metadata accessor for AppResolutionResult.AppResolutionResultError();
  v131 = *(_QWORD *)(v130 - 8);
  v132 = *(_QWORD *)(v131 + 64);
  v133 = (v132 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v129);
  v134 = (char *)v46 - v133;
  v135 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v136 = (char *)v46 - v135;
  v185 = (char *)v46 - v135;
  v137 = type metadata accessor for AppResolutionResult();
  v138 = *(_QWORD *)(v137 - 8);
  v139 = (*(_QWORD *)(v138 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v137);
  v140 = (_QWORD *)((char *)v46 - v139);
  v141 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v142 = (char *)v46 - v141;
  v184 = (char *)v46 - v141;
  v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<AppResolutionResult, Error>);
  v147 = (*(_QWORD *)(*(_QWORD *)(v150 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v146);
  v151 = (id *)((char *)v46 - v147);
  v183 = v12;
  v182 = v13 + 16;
  v181 = v14 + 16;
  v180 = v15;
  v149 = (void *)swift_projectBox();
  v179 = v149;
  outlined init with copy of Result<AppResolutionResult, Error>(v148, v151);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, id *, uint64_t))(v138 + 32))(v142, v151, v137);
    v184 = v142;
    (*(void (**)(uint64_t *))(v138 + 16))(v140);
    v117 = (*(uint64_t (**)(uint64_t *, uint64_t))(v138 + 88))(v140, v137);
    if (v117 == *MEMORY[0x24BE90D58])
    {
      (*(void (**)(uint64_t *, uint64_t))(v138 + 96))(v140, v137);
      v109 = *v140;
      v161 = v109;
      swift_retain();
      v104 = &v160;
      v160 = v109;
      v105 = &v159;
      v106 = 33;
      v107 = 0;
      swift_beginAccess();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
      Array.append(_:)();
      swift_endAccess();
      v108 = &v158;
      swift_beginAccess();
      *(_BYTE *)(v144 + 16) = 1;
      swift_endAccess();
      swift_release();
    }
    else if (v117 == *MEMORY[0x24BE90D60])
    {
      (*(void (**)(uint64_t *, uint64_t))(v138 + 96))(v140, v137);
      v113 = *v140;
      v157 = v113;
      swift_bridgeObjectRetain();
      v111 = &v156;
      v156 = v113;
      v112 = &v155;
      swift_beginAccess();
      v110 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
      lazy protocol witness table accessor for type [App] and conformance [A]();
      Array.append<A>(contentsOf:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
    else if (v117 == *MEMORY[0x24BE90D68])
    {
      (*(void (**)(uint64_t *, uint64_t))(v138 + 96))(v140, v137);
      v116 = *v140;
      v154 = v116;
      swift_retain();
      v114 = &v153;
      v153 = v116;
      v115 = &v152;
      swift_beginAccess();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
      Array.append(_:)();
      swift_endAccess();
      swift_release();
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t))(v138 + 8))(v140, v137);
    }
    (*(void (**)(char *, uint64_t))(v138 + 8))(v142, v137);
LABEL_32:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
    CheckedContinuation.resume<>()();
    return;
  }
  v102 = *v151;
  v178 = v102;
  v16 = v102;
  v103 = &v177;
  v177 = v102;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) != 0)
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v131 + 56))(v128, 0, 1, v130);
  else
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 56))(v128, 1, 1, v130);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48))(v128, 1, v130) != 1)
  {
    v31 = v122;
    v67 = *(void (**)(char *, uint64_t, uint64_t))(v131 + 32);
    v67(v136, v128, v130);
    v65 = *(void (**)(char *, char *, uint64_t))(v131 + 16);
    v65(v126, v136, v130);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v131 + 56))(v126, 0, 1, v130);
    v64 = &v169;
    swift_beginAccess();
    outlined assign with take of AppResolutionResult.AppResolutionResultError?(v126, v149);
    swift_endAccess();
    v32 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v120 + 16))(v31, v32, v119);
    v65(v134, v136, v130);
    v66 = (*(unsigned __int8 *)(v131 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80);
    v74 = 7;
    v75 = swift_allocObject();
    v67((char *)(v75 + v66), (uint64_t)v134, v130);
    v83 = Logger.logObject.getter();
    v84 = static os_log_type_t.error.getter();
    v70 = &v167;
    v167 = 12;
    v68 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v69 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v71 = v168;
    v72 = 17;
    v77 = swift_allocObject();
    *(_BYTE *)(v77 + 16) = 32;
    v78 = swift_allocObject();
    *(_BYTE *)(v78 + 16) = 8;
    v73 = 32;
    v33 = swift_allocObject();
    v34 = v75;
    v76 = v33;
    *(_QWORD *)(v33 + 16) = partial apply for implicit closure #2 in closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
    *(_QWORD *)(v33 + 24) = v34;
    v35 = swift_allocObject();
    v36 = v76;
    v80 = v35;
    *(_QWORD *)(v35 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v35 + 24) = v36;
    v82 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v79 = _allocateUninitializedArray<A>(_:)();
    v81 = v37;
    swift_retain();
    v38 = v77;
    v39 = v81;
    *v81 = partial apply for closure #1 in OSLogArguments.append(_:);
    v39[1] = v38;
    swift_retain();
    v40 = v78;
    v41 = v81;
    v81[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v41[3] = v40;
    swift_retain();
    v42 = v80;
    v43 = v81;
    v81[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v43[5] = v42;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v83, (os_log_type_t)v84))
    {
      v44 = v118;
      v57 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v58 = createStorage<A>(capacity:type:)(0);
      v59 = createStorage<A>(capacity:type:)(1);
      v60 = &v166;
      v166 = v57;
      v61 = &v165;
      v165 = v58;
      v62 = &v164;
      v164 = v59;
      serialize(_:at:)(2, &v166);
      serialize(_:at:)(1, v60);
      v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v163 = v77;
      closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)v60, (uint64_t)v61, (uint64_t)v62);
      v63 = v44;
      if (v44)
      {
        __break(1u);
      }
      else
      {
        v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v163 = v78;
        closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v166, (uint64_t)&v165, (uint64_t)&v164);
        v55 = 0;
        v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v163 = v80;
        closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v166, (uint64_t)&v165, (uint64_t)&v164);
        _os_log_impl(&dword_24701B000, v83, (os_log_type_t)v84, "#PaymentsAppResolutionFlowStrategy resolveApp resolution returned an error: %s", v57, v71);
        destroyStorage<A>(_:count:)(v58, 0, v56);
        destroyStorage<A>(_:count:)(v59, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v57, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v120 + 8))(v122, v119);
    (*(void (**)(char *, uint64_t))(v131 + 8))(v136, v130);

    goto LABEL_32;
  }
  v17 = v124;
  outlined destroy of AppResolutionResult.AppResolutionResultError?(v128);
  v18 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v120 + 16))(v17, v18, v119);
  v19 = v102;
  v91 = 7;
  v92 = swift_allocObject();
  *(_QWORD *)(v92 + 16) = v102;
  v100 = Logger.logObject.getter();
  v101 = static os_log_type_t.error.getter();
  v87 = &v175;
  v175 = 12;
  v85 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v86 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v88 = v176;
  v89 = 17;
  v94 = swift_allocObject();
  *(_BYTE *)(v94 + 16) = 32;
  v95 = swift_allocObject();
  *(_BYTE *)(v95 + 16) = 8;
  v90 = 32;
  v20 = swift_allocObject();
  v21 = v92;
  v93 = v20;
  *(_QWORD *)(v20 + 16) = partial apply for implicit closure #2 in PaymentsRCHFlowStrategy.makeErrorResponse(error:);
  *(_QWORD *)(v20 + 24) = v21;
  v22 = swift_allocObject();
  v23 = v93;
  v97 = v22;
  *(_QWORD *)(v22 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v22 + 24) = v23;
  v99 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v96 = _allocateUninitializedArray<A>(_:)();
  v98 = v24;
  swift_retain();
  v25 = v94;
  v26 = v98;
  *v98 = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[1] = v25;
  swift_retain();
  v27 = v95;
  v28 = v98;
  v98[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[3] = v27;
  swift_retain();
  v29 = v97;
  v30 = v98;
  v98[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[5] = v29;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v100, (os_log_type_t)v101))
  {
    v45 = v118;
    v48 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v49 = createStorage<A>(capacity:type:)(0);
    v50 = createStorage<A>(capacity:type:)(1);
    v51 = &v174;
    v174 = v48;
    v52 = &v173;
    v173 = v49;
    v53 = &v172;
    v172 = v50;
    serialize(_:at:)(2, &v174);
    serialize(_:at:)(1, v51);
    v170 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v171 = v94;
    closure #1 in osLogInternal(_:log:type:)(&v170, (uint64_t)v51, (uint64_t)v52, (uint64_t)v53);
    v54 = v45;
    if (v45)
    {
      __break(1u);
    }
    else
    {
      v170 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v171 = v95;
      closure #1 in osLogInternal(_:log:type:)(&v170, (uint64_t)&v174, (uint64_t)&v173, (uint64_t)&v172);
      v46[1] = 0;
      v170 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v171 = v97;
      closure #1 in osLogInternal(_:log:type:)(&v170, (uint64_t)&v174, (uint64_t)&v173, (uint64_t)&v172);
      _os_log_impl(&dword_24701B000, v100, (os_log_type_t)v101, "#PaymentsAppResolutionFlowStrategy resolveApp resolution returned an unrecognized error: %s", v48, v88);
      destroyStorage<A>(_:count:)(v49, 0, v47);
      destroyStorage<A>(_:count:)(v50, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v48, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v120 + 8))(v124, v119);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  CheckedContinuation.resume<>()();

}

uint64_t implicit closure #2 in closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  type metadata accessor for AppResolutionResult.AppResolutionResultError();
  lazy protocol witness table accessor for type AppResolutionResult.AppResolutionResultError and conformance AppResolutionResult.AppResolutionResultError();
  return Error.localizedDescription.getter();
}

uint64_t implicit closure #4 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;

  v3 = (uint64_t *)(a1 + 16);
  swift_beginAccess();
  outlined init with copy of [App](v3, a2);
  return swift_endAccess();
}

uint64_t implicit closure #6 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  swift_retain();
  type metadata accessor for App();
  lazy protocol witness table accessor for type App and conformance App();
  return String.init<A>(describing:)();
}

uint64_t PaymentsAppResolutionFlowStrategy.parseConfirmationResponse(input:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t *v57;
  uint64_t *v58;
  _BYTE **v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint32_t v63;
  int v64;
  NSObject *v65;
  _BYTE *v66;
  uint64_t v67;
  int v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  _BYTE **v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  _QWORD *v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  uint32_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  NSObject *v141;
  int v142;
  uint64_t (*v143)(uint64_t, uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE *v147[2];
  uint64_t v148;
  uint64_t v149;
  _BYTE *v150[2];
  uint32_t v151;
  uint64_t v152;
  uint32_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;

  v111 = a1;
  v156 = 0;
  v155 = 0;
  v89 = 0;
  v110 = *v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v90 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v91 = (char *)&v49 - v90;
  v92 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v49 - v90);
  v93 = (char *)&v49 - v92;
  v98 = 0;
  v94 = type metadata accessor for Parse();
  v95 = *(_QWORD *)(v94 - 8);
  v96 = (*(_QWORD *)(v95 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v98);
  v97 = (char *)&v49 - v96;
  v116 = type metadata accessor for Input();
  v113 = *(_QWORD *)(v116 - 8);
  v112 = *(_QWORD *)(v113 + 64);
  v99 = (v112 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v98);
  v115 = (char *)&v49 - v99;
  v107 = type metadata accessor for Logger();
  v106 = *(_QWORD **)(v107 - 8);
  v101 = v106[8];
  v100 = (v101 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v111);
  v102 = (char *)&v49 - v100;
  v103 = (v101 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v49 - v103;
  v105 = (char *)&v49 - v103;
  v156 = v5;
  v155 = v104;
  v109 = *(_QWORD *)(v7 + 80);
  v154 = v109;
  v8 = Logger.payments.unsafeMutableAddressor();
  v108 = (void (*)(char *, uint64_t, uint64_t))v106[2];
  v108(v6, v8, v107);
  v128 = 32;
  v129 = 7;
  v9 = swift_allocObject();
  v10 = v110;
  v11 = v111;
  v12 = v113;
  v13 = v116;
  v14 = v9;
  v15 = v115;
  v122 = v14;
  *(_QWORD *)(v14 + 16) = v109;
  *(_QWORD *)(v14 + 24) = *(_QWORD *)(v10 + 88);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v11, v13);
  v114 = (*(unsigned __int8 *)(v113 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80);
  v130 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v113 + 32))(v130 + v114, v115, v116);
  v141 = Logger.logObject.getter();
  v142 = static os_log_type_t.debug.getter();
  v119 = &v152;
  v152 = 22;
  v117 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v118 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v120 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v121 = v153;
  v126 = 17;
  v132 = swift_allocObject();
  v125 = 32;
  *(_BYTE *)(v132 + 16) = 32;
  v133 = swift_allocObject();
  v127 = 8;
  *(_BYTE *)(v133 + 16) = 8;
  v16 = swift_allocObject();
  v17 = v122;
  v123 = v16;
  *(_QWORD *)(v16 + 16) = partial apply for implicit closure #7 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
  *(_QWORD *)(v16 + 24) = v17;
  v18 = swift_allocObject();
  v19 = v123;
  v124 = v18;
  *(_QWORD *)(v18 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v18 + 24) = v19;
  v20 = swift_allocObject();
  v21 = v124;
  v134 = v20;
  *(_QWORD *)(v20 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v20 + 24) = v21;
  v135 = swift_allocObject();
  *(_BYTE *)(v135 + 16) = v125;
  v136 = swift_allocObject();
  *(_BYTE *)(v136 + 16) = v127;
  v22 = swift_allocObject();
  v23 = v130;
  v131 = v22;
  *(_QWORD *)(v22 + 16) = partial apply for implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseConfirmationResponse(input:);
  *(_QWORD *)(v22 + 24) = v23;
  v24 = swift_allocObject();
  v25 = v131;
  v138 = v24;
  *(_QWORD *)(v24 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v24 + 24) = v25;
  v140 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v137 = _allocateUninitializedArray<A>(_:)();
  v139 = v26;
  swift_retain();
  v27 = v132;
  v28 = v139;
  *v139 = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[1] = v27;
  swift_retain();
  v29 = v133;
  v30 = v139;
  v139[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[3] = v29;
  swift_retain();
  v31 = v134;
  v32 = v139;
  v139[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v32[5] = v31;
  swift_retain();
  v33 = v135;
  v34 = v139;
  v139[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[7] = v33;
  swift_retain();
  v35 = v136;
  v36 = v139;
  v139[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v36[9] = v35;
  swift_retain();
  v37 = v138;
  v38 = v139;
  v139[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v38[11] = v37;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v141, (os_log_type_t)v142))
  {
    v39 = v89;
    v81 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v80 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v82 = createStorage<A>(capacity:type:)(0);
    v83 = createStorage<A>(capacity:type:)(2);
    v85 = v147;
    v147[0] = v81;
    v86 = &v146;
    v146 = v82;
    v87 = &v145;
    v145 = v83;
    v84 = 2;
    serialize(_:at:)(2, v147);
    serialize(_:at:)(v84, v85);
    v143 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v144 = v132;
    closure #1 in osLogInternal(_:log:type:)(&v143, (uint64_t)v85, (uint64_t)v86, (uint64_t)v87);
    v88 = v39;
    if (v39)
    {
      __break(1u);
    }
    else
    {
      v143 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v144 = v133;
      closure #1 in osLogInternal(_:log:type:)(&v143, (uint64_t)v147, (uint64_t)&v146, (uint64_t)&v145);
      v78 = 0;
      v41 = v78;
      v143 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v144 = v134;
      closure #1 in osLogInternal(_:log:type:)(&v143, (uint64_t)v147, (uint64_t)&v146, (uint64_t)&v145);
      v77 = v41;
      v143 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v144 = v135;
      closure #1 in osLogInternal(_:log:type:)(&v143, (uint64_t)v147, (uint64_t)&v146, (uint64_t)&v145);
      v76 = 0;
      v143 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v144 = v136;
      closure #1 in osLogInternal(_:log:type:)(&v143, (uint64_t)v147, (uint64_t)&v146, (uint64_t)&v145);
      v75 = 0;
      v143 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v144 = v138;
      closure #1 in osLogInternal(_:log:type:)(&v143, (uint64_t)v147, (uint64_t)&v146, (uint64_t)&v145);
      v74 = 0;
      _os_log_impl(&dword_24701B000, v141, (os_log_type_t)v142, "#PaymentsAppResolutionFlowStrategy<%s> parseConfirmationResponse, input %s", v81, v121);
      destroyStorage<A>(_:count:)(v82, 0, v80);
      destroyStorage<A>(_:count:)(v83, 2, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v81, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v79 = v74;
    }
  }
  else
  {
    v40 = v89;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v79 = v40;
  }
  v70 = v79;

  v71 = (void (*)(char *, uint64_t))v106[1];
  v71(v105, v107);
  Input.parse.getter();
  Parse.confirmationResponse.getter((uint64_t)v93);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v97, v94);
  v72 = type metadata accessor for ConfirmationResponse();
  v73 = *(_QWORD *)(v72 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v73 + 48))(v93, 1) == 1)
    goto LABEL_15;
  outlined init with copy of ConfirmationResponse?(v93, v91);
  v69 = (*(uint64_t (**)(char *, uint64_t))(v73 + 88))(v91, v72);
  if (v69 == *MEMORY[0x24BE98400])
  {
    type metadata accessor for AppConfirmationResponse();
    v67 = static AppConfirmationResponse.select()();
    outlined destroy of ConfirmationResponse?((uint64_t)v93);
    return v67;
  }
  if (v69 == *MEMORY[0x24BE983F8])
  {
LABEL_15:
    outlined destroy of ConfirmationResponse?((uint64_t)v93);
    type metadata accessor for AppConfirmationResponse();
    return static AppConfirmationResponse.cancel()();
  }
  v42 = v102;
  (*(void (**)(char *, uint64_t))(v73 + 8))(v91, v72);
  v43 = Logger.payments.unsafeMutableAddressor();
  v108(v42, v43, v107);
  v65 = Logger.logObject.getter();
  v64 = static os_log_type_t.debug.getter();
  v150[1] = (_BYTE *)2;
  UnsignedInteger<>.init<A>(_:)();
  v63 = v151;
  v66 = (_BYTE *)_allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v65, (os_log_type_t)v64))
  {
    v44 = v70;
    v53 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v52 = 0;
    v54 = createStorage<A>(capacity:type:)(0);
    v55 = createStorage<A>(capacity:type:)(v52);
    v59 = v150;
    v150[0] = v53;
    v60 = &v149;
    v149 = v54;
    v57 = &v148;
    v148 = v55;
    v56 = 0;
    serialize(_:at:)(0, v150);
    serialize(_:at:)(v56, v59);
    v147[1] = v66;
    v58 = &v49;
    MEMORY[0x24BDAC7A8](&v49);
    v45 = v60;
    v46 = &v49 - 6;
    v61 = &v49 - 6;
    v46[2] = (uint64_t)v59;
    v46[3] = (uint64_t)v45;
    v46[4] = v47;
    v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v44)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, v65, (os_log_type_t)v64, "Unrecognized response from user attempting to respond to confirmation prompt", v53, v63);
      v50 = 0;
      destroyStorage<A>(_:count:)(v54, 0, v51);
      destroyStorage<A>(_:count:)(v55, v50, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v53, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  v71(v102, v107);
  type metadata accessor for AppConfirmationResponse();
  v49 = static AppConfirmationResponse.ignore()();
  outlined destroy of ConfirmationResponse?((uint64_t)v93);
  return v49;
}

uint64_t implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseConfirmationResponse(input:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;

  v3 = a1;
  v5 = type metadata accessor for Input();
  v4 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v6 = (char *)&v3 - v4;
  (*(void (**)(char *))(v1 + 16))((char *)&v3 - v4);
  lazy protocol witness table accessor for type Input and conformance Input();
  return String.init<A>(describing:)();
}

uint64_t PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse(input:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void *object;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  Swift::String v93;
  uint64_t v94;
  uint64_t v95;
  Swift::String v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  int v102;
  uint64_t v103;
  Builtin::Word v104;
  void *v105;
  _QWORD *v106;
  int v107;
  void *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint8_t *v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t *v125;
  uint64_t *v126;
  _BYTE **v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint32_t v134;
  int v135;
  NSObject *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint8_t *v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE **v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  Swift::String_optional v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t *v156;
  uint32_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  NSObject *v169;
  int v170;
  Swift::String_optional v171;
  Swift::String_optional v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  id v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint8_t *v180;
  uint64_t v181;
  uint64_t v182;
  _BYTE **v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t *v190;
  uint32_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  NSObject *v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint8_t *v213;
  uint64_t v214;
  uint64_t v215;
  _BYTE **v216;
  uint64_t *v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t *v224;
  uint32_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  NSObject *v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  void (*v247)(char *, char *, uint64_t);
  uint64_t v248;
  uint64_t v249;
  int v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint8_t *v255;
  uint64_t v256;
  uint64_t v257;
  _BYTE **v258;
  uint64_t *v259;
  uint64_t *v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t *v264;
  uint32_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  NSObject *v278;
  int v279;
  uint64_t v280;
  const char *v281;
  const char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  char *v292;
  unint64_t v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  char *v298;
  unint64_t v299;
  char *v300;
  unint64_t v301;
  char *v302;
  unint64_t v303;
  char *v304;
  unint64_t v305;
  char *v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  char *v311;
  unint64_t v312;
  char *v313;
  unint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t (*v323)(uint64_t, uint64_t, uint64_t);
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _BYTE *v327;
  uint64_t v328;
  uint32_t v329;
  uint64_t (*v330)(uint64_t, uint64_t, uint64_t);
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _BYTE *v334;
  uint64_t v335;
  uint64_t v336;
  uint32_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t (*v340)(uint64_t, uint64_t, uint64_t);
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _BYTE *v344;
  uint64_t v345;
  uint32_t v346;
  uint64_t (*v347)(uint64_t, uint64_t, uint64_t);
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  _BYTE *v351;
  uint64_t v352;
  uint64_t v353;
  uint32_t v354;
  Swift::String_optional v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  _BYTE *v359;
  uint64_t v360;
  uint32_t v361;
  _QWORD v362[2];
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  char *v368;

  v280 = a1;
  v2 = v1;
  v315 = v2;
  v281 = "Fatal error";
  v282 = "SiriPaymentsIntents/PaymentsAppResolutionFlowStrategy.swift";
  v367 = 0;
  v366 = 0;
  v283 = 0;
  v355 = (Swift::String_optional)0;
  v352 = 0;
  v368 = 0;
  v338 = 0;
  v339 = 0;
  v335 = 0;
  v316 = *v2;
  v319 = 0;
  v284 = type metadata accessor for Input();
  v285 = *(_QWORD *)(v284 - 8);
  v286 = (*(_QWORD *)(v285 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v287 = (char *)&v103 - v286;
  v288 = type metadata accessor for Parse.DirectInvocation();
  v289 = *(_QWORD *)(v288 - 8);
  v290 = *(_QWORD *)(v289 + 64);
  v291 = (v290 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v319);
  v292 = (char *)&v103 - v291;
  v293 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v294 = (char *)&v103 - v293;
  v368 = (char *)&v103 - v293;
  v295 = type metadata accessor for Logger();
  v296 = *(_QWORD *)(v295 - 8);
  v297 = (*(_QWORD *)(v296 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v295);
  v298 = (char *)&v103 - v297;
  v299 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v103 - v297);
  v300 = (char *)&v103 - v299;
  v301 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v103 - v299);
  v302 = (char *)&v103 - v301;
  v303 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v103 - v301);
  v304 = (char *)&v103 - v303;
  v305 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v103 - v303);
  v306 = (char *)&v103 - v305;
  v307 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v319);
  v320 = (uint64_t)&v103 - v307;
  v308 = type metadata accessor for Parse();
  v309 = *(_QWORD *)(v308 - 8);
  v310 = (*(_QWORD *)(v309 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v308);
  v311 = (char *)&v103 - v310;
  v312 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v103 - v310);
  v313 = (char *)&v103 - v312;
  v314 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v103 - v312);
  v318 = (char *)&v103 - v314;
  v367 = a1;
  v366 = v315;
  v317 = *(_QWORD *)(v316 + 80);
  v365 = v317;
  Input.parse.getter();
  Parse.confirmationResponse.getter(v320);
  v321 = type metadata accessor for ConfirmationResponse();
  v322 = *(_QWORD *)(v321 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v322 + 48))(v320, 1) == 1)
  {
    outlined destroy of ConfirmationResponse?(v320);
    (*(void (**)(char *, uint64_t))(v309 + 8))(v318, v308);
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v322 + 88))(v320, v321) == *MEMORY[0x24BE983F8])
    {
      v12 = v306;
      (*(void (**)(uint64_t, uint64_t))(v322 + 8))(v320, v321);
      (*(void (**)(char *, uint64_t))(v309 + 8))(v318, v308);
      v13 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v296 + 16))(v12, v13, v295);
      v268 = 32;
      v269 = 7;
      v14 = swift_allocObject();
      v15 = v316;
      v267 = v14;
      *(_QWORD *)(v14 + 16) = v317;
      *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 88);
      v278 = Logger.logObject.getter();
      v279 = static os_log_type_t.debug.getter();
      v264 = &v328;
      v328 = 12;
      v262 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v263 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v265 = v329;
      v266 = 17;
      v272 = swift_allocObject();
      *(_BYTE *)(v272 + 16) = 32;
      v273 = swift_allocObject();
      *(_BYTE *)(v273 + 16) = 8;
      v16 = swift_allocObject();
      v17 = v267;
      v270 = v16;
      *(_QWORD *)(v16 + 16) = partial apply for implicit closure #7 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
      *(_QWORD *)(v16 + 24) = v17;
      v18 = swift_allocObject();
      v19 = v270;
      v271 = v18;
      *(_QWORD *)(v18 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v18 + 24) = v19;
      v20 = swift_allocObject();
      v21 = v271;
      v275 = v20;
      *(_QWORD *)(v20 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v20 + 24) = v21;
      v277 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v274 = _allocateUninitializedArray<A>(_:)();
      v276 = v22;
      swift_retain();
      v23 = v272;
      v24 = v276;
      *v276 = partial apply for closure #1 in OSLogArguments.append(_:);
      v24[1] = v23;
      swift_retain();
      v25 = v273;
      v26 = v276;
      v276[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v26[3] = v25;
      swift_retain();
      v27 = v275;
      v28 = v276;
      v276[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v28[5] = v27;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v278, (os_log_type_t)v279))
      {
        v29 = v283;
        v255 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v254 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v256 = createStorage<A>(capacity:type:)(0);
        v257 = createStorage<A>(capacity:type:)(1);
        v258 = &v327;
        v327 = v255;
        v259 = &v326;
        v326 = v256;
        v260 = &v325;
        v325 = v257;
        serialize(_:at:)(2, &v327);
        serialize(_:at:)(1, v258);
        v323 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v324 = v272;
        closure #1 in osLogInternal(_:log:type:)(&v323, (uint64_t)v258, (uint64_t)v259, (uint64_t)v260);
        v261 = v29;
        if (v29)
        {
          __break(1u);
        }
        else
        {
          v323 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v324 = v273;
          closure #1 in osLogInternal(_:log:type:)(&v323, (uint64_t)&v327, (uint64_t)&v326, (uint64_t)&v325);
          v253 = 0;
          v323 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v324 = v275;
          closure #1 in osLogInternal(_:log:type:)(&v323, (uint64_t)&v327, (uint64_t)&v326, (uint64_t)&v325);
          _os_log_impl(&dword_24701B000, v278, (os_log_type_t)v279, "#PaymentsAppResolutionFlowStrategy<%s> parseDisambiguationResponse found user rejected, returning .cancel()", v255, v265);
          destroyStorage<A>(_:count:)(v256, 0, v254);
          destroyStorage<A>(_:count:)(v257, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v255, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v296 + 8))(v306, v295);
      type metadata accessor for AppDisambiguationResponse();
      return static AppDisambiguationResponse.cancel()();
    }
    (*(void (**)(uint64_t, uint64_t))(v322 + 8))(v320, v321);
    (*(void (**)(char *, uint64_t))(v309 + 8))(v318, v308);
  }
  Input.parse.getter();
  v251 = (*(uint64_t (**)(char *, uint64_t))(v309 + 88))(v313, v308);
  if (v251 == *MEMORY[0x24BE98E88])
  {
    (*(void (**)(char *, uint64_t))(v309 + 96))(v313, v308);
    v247 = *(void (**)(char *, char *, uint64_t))(v289 + 32);
    v247(v294, v313, v288);
    v368 = v294;
    v248 = static PaymentsDirectInvocations.from(_:)((uint64_t)v294);
    v249 = v30;
    v250 = v31;
    if (v31 != 255)
    {
      v244 = v248;
      v245 = v249;
      v246 = v250;
      v241 = v250;
      v242 = v249;
      v243 = v248;
      if (v250 == 1)
      {
        v239 = v243;
        v240 = v242;
        v32 = v304;
        v221 = v242;
        v220 = v243;
        v338 = v243;
        v339 = v242;
        v33 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v296 + 16))(v32, v33, v295);
        swift_bridgeObjectRetain();
        v227 = 32;
        v228 = 7;
        v34 = swift_allocObject();
        v35 = v221;
        v229 = v34;
        *(_QWORD *)(v34 + 16) = v220;
        *(_QWORD *)(v34 + 24) = v35;
        v237 = Logger.logObject.getter();
        v238 = static os_log_type_t.debug.getter();
        v224 = &v336;
        v336 = 12;
        v222 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v223 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v225 = v337;
        v226 = 17;
        v231 = swift_allocObject();
        *(_BYTE *)(v231 + 16) = 32;
        v232 = swift_allocObject();
        *(_BYTE *)(v232 + 16) = 8;
        v36 = swift_allocObject();
        v37 = v229;
        v230 = v36;
        *(_QWORD *)(v36 + 16) = partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
        *(_QWORD *)(v36 + 24) = v37;
        v38 = swift_allocObject();
        v39 = v230;
        v234 = v38;
        *(_QWORD *)(v38 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v38 + 24) = v39;
        v236 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        v233 = _allocateUninitializedArray<A>(_:)();
        v235 = v40;
        swift_retain();
        v41 = v231;
        v42 = v235;
        *v235 = partial apply for closure #1 in OSLogArguments.append(_:);
        v42[1] = v41;
        swift_retain();
        v43 = v232;
        v44 = v235;
        v235[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v44[3] = v43;
        swift_retain();
        v45 = v234;
        v46 = v235;
        v235[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v46[5] = v45;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v237, (os_log_type_t)v238))
        {
          v47 = v283;
          v213 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v212 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v214 = createStorage<A>(capacity:type:)(0);
          v215 = createStorage<A>(capacity:type:)(1);
          v216 = &v334;
          v334 = v213;
          v217 = &v333;
          v333 = v214;
          v218 = &v332;
          v332 = v215;
          serialize(_:at:)(2, &v334);
          serialize(_:at:)(1, v216);
          v330 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v331 = v231;
          closure #1 in osLogInternal(_:log:type:)(&v330, (uint64_t)v216, (uint64_t)v217, (uint64_t)v218);
          v219 = v47;
          if (v47)
          {
            __break(1u);
          }
          else
          {
            v330 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v331 = v232;
            closure #1 in osLogInternal(_:log:type:)(&v330, (uint64_t)&v334, (uint64_t)&v333, (uint64_t)&v332);
            v211 = 0;
            v330 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v331 = v234;
            closure #1 in osLogInternal(_:log:type:)(&v330, (uint64_t)&v334, (uint64_t)&v333, (uint64_t)&v332);
            _os_log_impl(&dword_24701B000, v237, (os_log_type_t)v238, "#PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse() selecting app identifier from direct invocation %s", v213, v225);
            destroyStorage<A>(_:count:)(v214, 0, v212);
            destroyStorage<A>(_:count:)(v215, 1, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x2495725CC](v213, MEMORY[0x24BEE4260]);
            swift_release();
            swift_release();
            swift_release();
          }
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }

        (*(void (**)(char *, uint64_t))(v296 + 8))(v304, v295);
        v208 = 0;
        type metadata accessor for App();
        swift_bridgeObjectRetain();
        v209 = App.__allocating_init(appIdentifier:)();
        v335 = v209;
        v210 = type metadata accessor for AppDisambiguationResponse();
        if (App.isFirstParty.getter())
        {
          v207 = static AppUtil.walletApp.getter();
        }
        else
        {
          swift_retain();
          v207 = v209;
        }
        v205 = v207;
        v206 = static AppDisambiguationResponse.select(app:)();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v289 + 8))(v294, v288);
        return v206;
      }
      outlined consume of PaymentsDirectInvocations(v243, v242, v241);
    }
    v48 = v302;
    v49 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v296 + 16))(v48, v49, v295);
    (*(void (**)(char *, char *, uint64_t))(v289 + 16))(v292, v294, v288);
    v187 = (*(unsigned __int8 *)(v289 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v289 + 80);
    v194 = 7;
    v195 = swift_allocObject();
    v247((char *)(v195 + v187), v292, v288);
    v203 = Logger.logObject.getter();
    v204 = static os_log_type_t.error.getter();
    v190 = &v345;
    v345 = 12;
    v188 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v189 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v191 = v346;
    v192 = 17;
    v197 = swift_allocObject();
    *(_BYTE *)(v197 + 16) = 32;
    v198 = swift_allocObject();
    *(_BYTE *)(v198 + 16) = 8;
    v193 = 32;
    v50 = swift_allocObject();
    v51 = v195;
    v196 = v50;
    *(_QWORD *)(v50 + 16) = partial apply for implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse(input:);
    *(_QWORD *)(v50 + 24) = v51;
    v52 = swift_allocObject();
    v53 = v196;
    v200 = v52;
    *(_QWORD *)(v52 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v52 + 24) = v53;
    v202 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v199 = _allocateUninitializedArray<A>(_:)();
    v201 = v54;
    swift_retain();
    v55 = v197;
    v56 = v201;
    *v201 = partial apply for closure #1 in OSLogArguments.append(_:);
    v56[1] = v55;
    swift_retain();
    v57 = v198;
    v58 = v201;
    v201[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v58[3] = v57;
    swift_retain();
    v59 = v200;
    v60 = v201;
    v201[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v60[5] = v59;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v203, (os_log_type_t)v204))
    {
      v61 = v283;
      v180 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v179 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v181 = createStorage<A>(capacity:type:)(0);
      v182 = createStorage<A>(capacity:type:)(1);
      v183 = &v344;
      v344 = v180;
      v184 = &v343;
      v343 = v181;
      v185 = &v342;
      v342 = v182;
      serialize(_:at:)(2, &v344);
      serialize(_:at:)(1, v183);
      v340 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v341 = v197;
      closure #1 in osLogInternal(_:log:type:)(&v340, (uint64_t)v183, (uint64_t)v184, (uint64_t)v185);
      v186 = v61;
      if (v61)
      {
        __break(1u);
      }
      else
      {
        v340 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v341 = v198;
        closure #1 in osLogInternal(_:log:type:)(&v340, (uint64_t)&v344, (uint64_t)&v343, (uint64_t)&v342);
        v178 = 0;
        v340 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v341 = v200;
        closure #1 in osLogInternal(_:log:type:)(&v340, (uint64_t)&v344, (uint64_t)&v343, (uint64_t)&v342);
        _os_log_impl(&dword_24701B000, v203, (os_log_type_t)v204, "#PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse() couldn't get button press from Direct invocation %s", v180, v191);
        destroyStorage<A>(_:count:)(v181, 0, v179);
        destroyStorage<A>(_:count:)(v182, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v180, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v296 + 8))(v302, v295);
    v173 = type metadata accessor for AppDisambiguationResponse();
    v174 = Parse.DirectInvocation.identifier.getter();
    v175 = v62;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    v63 = (void *)swift_allocError();
    v64 = v175;
    v176 = v63;
    *(_QWORD *)v65 = v174;
    *(_QWORD *)(v65 + 8) = v64;
    *(_QWORD *)(v65 + 16) = 0;
    *(_QWORD *)(v65 + 24) = 0;
    *(_QWORD *)(v65 + 32) = 0;
    *(_QWORD *)(v65 + 40) = 0;
    *(_BYTE *)(v65 + 48) = 0;
    v177 = static AppDisambiguationResponse.error(_:)();

    (*(void (**)(char *, uint64_t))(v289 + 8))(v294, v288);
    return v177;
  }
  else if (v251 == *MEMORY[0x24BE98E98])
  {
    (*(void (**)(char *, uint64_t))(v309 + 96))(v313, v308);
    Input.parse.getter();
    v172 = Parse.toAppId()();
    (*(void (**)(char *, uint64_t))(v309 + 8))(v311, v308);
    if (v172.value._object)
    {
      v171 = v172;
      v66 = v300;
      v153 = v172;
      v355 = v172;
      v67 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v296 + 16))(v66, v67, v295);
      swift_bridgeObjectRetain();
      v159 = 32;
      v160 = 7;
      v68 = swift_allocObject();
      object = v153.value._object;
      v161 = v68;
      *(_QWORD *)(v68 + 16) = v153.value._countAndFlagsBits;
      *(_QWORD *)(v68 + 24) = object;
      v169 = Logger.logObject.getter();
      v170 = static os_log_type_t.debug.getter();
      v156 = &v353;
      v353 = 12;
      v154 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v155 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v157 = v354;
      v158 = 17;
      v163 = swift_allocObject();
      *(_BYTE *)(v163 + 16) = 32;
      v164 = swift_allocObject();
      *(_BYTE *)(v164 + 16) = 8;
      v70 = swift_allocObject();
      v71 = v161;
      v162 = v70;
      *(_QWORD *)(v70 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
      *(_QWORD *)(v70 + 24) = v71;
      v72 = swift_allocObject();
      v73 = v162;
      v166 = v72;
      *(_QWORD *)(v72 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v72 + 24) = v73;
      v168 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v165 = _allocateUninitializedArray<A>(_:)();
      v167 = v74;
      swift_retain();
      v75 = v163;
      v76 = v167;
      *v167 = partial apply for closure #1 in OSLogArguments.append(_:);
      v76[1] = v75;
      swift_retain();
      v77 = v164;
      v78 = v167;
      v167[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v78[3] = v77;
      swift_retain();
      v79 = v166;
      v80 = v167;
      v167[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v80[5] = v79;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v169, (os_log_type_t)v170))
      {
        v81 = v283;
        v146 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v145 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v147 = createStorage<A>(capacity:type:)(0);
        v148 = createStorage<A>(capacity:type:)(1);
        v149 = &v351;
        v351 = v146;
        v150 = &v350;
        v350 = v147;
        v151 = &v349;
        v349 = v148;
        serialize(_:at:)(2, &v351);
        serialize(_:at:)(1, v149);
        v347 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v348 = v163;
        closure #1 in osLogInternal(_:log:type:)(&v347, (uint64_t)v149, (uint64_t)v150, (uint64_t)v151);
        v152 = v81;
        if (v81)
        {
          __break(1u);
        }
        else
        {
          v347 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v348 = v164;
          closure #1 in osLogInternal(_:log:type:)(&v347, (uint64_t)&v351, (uint64_t)&v350, (uint64_t)&v349);
          v144 = 0;
          v347 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v348 = v166;
          closure #1 in osLogInternal(_:log:type:)(&v347, (uint64_t)&v351, (uint64_t)&v350, (uint64_t)&v349);
          _os_log_impl(&dword_24701B000, v169, (os_log_type_t)v170, "#PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse() selecting app identifier from parse %s", v146, v157);
          destroyStorage<A>(_:count:)(v147, 0, v145);
          destroyStorage<A>(_:count:)(v148, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v146, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v296 + 8))(v300, v295);
      v141 = 0;
      type metadata accessor for App();
      swift_bridgeObjectRetain();
      v142 = App.__allocating_init(appIdentifier:)();
      v352 = v142;
      v143 = type metadata accessor for AppDisambiguationResponse();
      if (App.isFirstParty.getter())
      {
        v140 = static AppUtil.walletApp.getter();
      }
      else
      {
        swift_retain();
        v140 = v142;
      }
      v138 = v140;
      v139 = static AppDisambiguationResponse.select(app:)();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v82 = type metadata accessor for USOParse();
      (*(void (**)(char *))(*(_QWORD *)(v82 - 8) + 8))(v313);
      return v139;
    }
    else
    {
      v83 = v298;
      v84 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v296 + 16))(v83, v84, v295);
      v136 = Logger.logObject.getter();
      v135 = static os_log_type_t.error.getter();
      v133 = &v360;
      v360 = 2;
      v131 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v132 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v134 = v361;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v137 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v136, (os_log_type_t)v135))
      {
        v85 = v283;
        v121 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v119 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v120 = 0;
        v122 = createStorage<A>(capacity:type:)(0);
        v123 = createStorage<A>(capacity:type:)(v120);
        v127 = &v359;
        v359 = v121;
        v128 = &v358;
        v358 = v122;
        v125 = &v357;
        v357 = v123;
        v124 = 0;
        serialize(_:at:)(0, &v359);
        serialize(_:at:)(v124, v127);
        v356 = v137;
        v126 = &v103;
        MEMORY[0x24BDAC7A8](&v103);
        v86 = v128;
        v87 = &v103 - 6;
        v129 = &v103 - 6;
        v87[2] = (uint64_t)v127;
        v87[3] = (uint64_t)v86;
        v87[4] = v88;
        v130 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v85)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_24701B000, v136, (os_log_type_t)v135, "#PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse() couldn't find associated app ID", v121, v134);
          v118 = 0;
          destroyStorage<A>(_:count:)(v122, 0, v119);
          destroyStorage<A>(_:count:)(v123, v118, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v121, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v296 + 8))(v298, v295);
      v116 = 0;
      type metadata accessor for AppDisambiguationResponse();
      lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
      v115 = (id)swift_allocError();
      *(_QWORD *)v89 = 10;
      *(_QWORD *)(v89 + 8) = 0;
      *(_QWORD *)(v89 + 16) = 0;
      *(_QWORD *)(v89 + 24) = 0;
      *(_QWORD *)(v89 + 32) = 0;
      *(_QWORD *)(v89 + 40) = 0;
      *(_BYTE *)(v89 + 48) = 17;
      v117 = static AppDisambiguationResponse.error(_:)();

      v90 = type metadata accessor for USOParse();
      (*(void (**)(char *))(*(_QWORD *)(v90 - 8) + 8))(v313);
      return v117;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v285 + 16))(v287, v280, v284);
    v104 = 86;
    v91 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v109 = &v363;
    v363 = v91;
    v364 = v92;
    v107 = 1;
    v93 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse() unexpected parse type ", v104, 1);
    v105 = v93._object;
    DefaultStringInterpolation.appendLiteral(_:)(v93);
    swift_bridgeObjectRelease();
    Input.parse.getter();
    v94 = String.init<A>(describing:)();
    v106 = v362;
    v362[0] = v94;
    v362[1] = v95;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String.UTF8View();
    v96 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v107 & 1);
    v108 = v96._object;
    DefaultStringInterpolation.appendLiteral(_:)(v96);
    swift_bridgeObjectRelease();
    v111 = v363;
    v110 = v364;
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v97 = String.init(stringInterpolation:)();
    v112 = v98;
    v113 = static Logger.logForCrash(_:)(v97, v98);
    v114 = v99;
    swift_bridgeObjectRelease();
    v101 = 216;
    v102 = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return v252;
}

uint64_t implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse(input:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;

  v3 = a1;
  v5 = type metadata accessor for Parse.DirectInvocation();
  v4 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v6 = (char *)&v3 - v4;
  (*(void (**)(char *))(v1 + 16))((char *)&v3 - v4);
  return String.init<A>(describing:)();
}

uint64_t PaymentsAppResolutionFlowStrategy.makeConfirmationPrompt(app:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  v3[28] = v2;
  v3[27] = a2;
  v3[26] = a1;
  v3[22] = v3;
  v3[23] = 0;
  v3[24] = 0;
  v3[25] = 0;
  v9 = *v2;
  v3[29] = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[30] = swift_task_alloc();
  v4 = type metadata accessor for Locale();
  v3[31] = v4;
  v3[32] = *(_QWORD *)(v4 - 8);
  v3[33] = swift_task_alloc();
  v5 = type metadata accessor for NLContextUpdate();
  v3[34] = v5;
  v3[35] = *(_QWORD *)(v5 - 8);
  v3[36] = swift_task_alloc();
  v6 = type metadata accessor for TemplatingResult();
  v3[37] = v6;
  v3[38] = *(_QWORD *)(v6 - 8);
  v3[39] = swift_task_alloc();
  v3[40] = swift_task_alloc();
  v3[41] = swift_task_alloc();
  v3[23] = a2;
  v3[24] = v2;
  v3[42] = *(_QWORD *)(v9 + 80);
  return swift_task_switch();
}

uint64_t PaymentsAppResolutionFlowStrategy.makeConfirmationPrompt(app:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;

  v1 = v0[28];
  v0[22] = v0;
  v0[43] = *(_QWORD *)(v1 + 152);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  v4[44] = v2;
  *v2 = v4[22];
  v2[1] = PaymentsAppResolutionFlowStrategy.makeConfirmationPrompt(app:);
  return PaymentsBaseCATs.buttonCancel()(v4[41]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 176) = *v1;
  *(_QWORD *)(v2 + 360) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;

  v1 = v0[28];
  v0[22] = v0;
  v0[46] = *(_QWORD *)(v1 + 152);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  v4[47] = v2;
  *v2 = v4[22];
  v2[1] = PaymentsAppResolutionFlowStrategy.makeConfirmationPrompt(app:);
  return PaymentsBaseCATs.buttonYes()(v4[40]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 176) = *v1;
  *(_QWORD *)(v2 + 384) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v1 = v0[28];
  v0[22] = v0;
  v0[49] = *(_QWORD *)(v1 + 152);
  swift_retain();
  v5 = App.sirikitApp.getter();
  v0[50] = v5;
  v2 = (_QWORD *)swift_task_alloc();
  v4[51] = v2;
  *v2 = v4[22];
  v2[1] = PaymentsAppResolutionFlowStrategy.makeConfirmationPrompt(app:);
  return PaymentsBaseCATs.confirmApp(app:)(v4[39], v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 176) = *v1;
  *(_QWORD *)(v2 + 416) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  char v1;
  _QWORD *v2;
  id v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = v0[42];
  v20 = v0[41];
  v21 = v0[40];
  v22 = v0[39];
  v17 = v0[38];
  v18 = v0[37];
  v23 = v0[36];
  v14 = v0[35];
  v15 = v0[34];
  v24 = v0[33];
  v9 = v0[32];
  v10 = v0[31];
  v25 = v0[30];
  v5 = v0[29];
  v11 = v0[28];
  v8 = v0[27];
  v13 = (uint64_t *)v0[26];
  v0[22] = v0;
  v16 = (void *)static AppResolutionResponse.makeConfirmationView(confirmDialog:cancelDialog:)();
  v0[25] = v16;
  outlined init with copy of GlobalsProviding(v11 + 112, (uint64_t)(v0 + 2));
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  dispatch thunk of DeviceState.siriLocale.getter();
  v7 = *(_QWORD *)(v5 + 88);
  v1 = default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  static PaymentsContextProvider.appConfirmationContextUpdate(app:locale:intentType:isRequestAccount:)(v8, v24, v6, v7, v1 & 1, v23);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v24, v10);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  outlined init with copy of GlobalsProviding(v11 + 112, (uint64_t)(v0 + 7));
  outlined init with copy of GlobalsProviding(v11 + 112, (uint64_t)(v0 + 12));
  __swift_project_boxed_opaque_existential_1(v0 + 12, v0[15]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  type metadata accessor for SAAceView();
  _allocateUninitializedArray<A>(_:)();
  v12 = v2;
  v3 = v16;
  *v12 = v16;
  _finalizeUninitializedArray<A>(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v25, v23, v15);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v25, 0, 1, v15);
  v0[17] = 0;
  v0[18] = 0;
  v0[19] = 0;
  v0[20] = 0;
  v0[21] = 0;
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v13[3] = type metadata accessor for AceOutput();
  v13[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v13);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 17));
  outlined destroy of NLContextUpdate?(v25);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v23, v15);

  v19 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v19(v22, v18);
  v19(v21, v18);
  v19(v20, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[22] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 176) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 176) + 8))();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v0[41];
  v2 = v0[38];
  v4 = v0[37];
  v0[22] = v0;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[22] + 8))();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v4 = v0[41];
  v3 = v0[40];
  v2 = v0[38];
  v5 = v0[37];
  v0[22] = v0;
  swift_release();
  swift_release();
  v6 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v6(v3, v5);
  v6(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[22] + 8))();
}

uint64_t PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;

  v4[20] = v3;
  v4[19] = a3;
  v4[18] = a2;
  v4[17] = a1;
  v4[12] = v4;
  v4[13] = 0;
  v4[14] = 0;
  v4[15] = 0;
  v4[16] = 0;
  v11 = *v3;
  v4[21] = *v3;
  type metadata accessor for DialogPhase();
  v4[22] = swift_task_alloc();
  v5 = type metadata accessor for OutputGenerationManifest();
  v4[23] = v5;
  v4[24] = *(_QWORD *)(v5 - 8);
  v4[25] = swift_task_alloc();
  v6 = type metadata accessor for Locale();
  v4[26] = v6;
  v4[27] = *(_QWORD *)(v6 - 8);
  v4[28] = swift_task_alloc();
  v7 = type metadata accessor for NLContextUpdate();
  v4[29] = v7;
  v4[30] = *(_QWORD *)(v7 - 8);
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  type metadata accessor for CATOption();
  v4[33] = swift_task_alloc();
  v4[13] = a2;
  v4[14] = a3;
  v4[15] = v3;
  v4[34] = *(_QWORD *)(v11 + 80);
  return swift_task_switch();
}

uint64_t PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  *(_QWORD *)(v0 + 96) = v0;
  type metadata accessor for DisambiguationCATsModern();
  default argument 0 of CATWrapper.init(options:globals:)();
  *(_QWORD *)(v0 + 280) = CATWrapperSimple.__allocating_init(options:globals:)();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 288) = v1;
  *v1 = *(_QWORD *)(v3 + 96);
  v1[1] = PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:);
  return DisambiguationCATsModern.intentDisambiguationPrompt()();
}

{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  void (*v3)(uint64_t, uint64_t);
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v1 = v0[37];
  v7 = v0[34];
  v13 = v0[32];
  v15 = v0[31];
  v14 = v0[30];
  v16 = v0[29];
  v11 = v0[28];
  v10 = v0[27];
  v12 = v0[26];
  v6 = v0[21];
  v17 = v0[20];
  v9 = v0[18];
  v0[12] = v0;
  v0[16] = v1;
  outlined init with copy of GlobalsProviding(v17 + 112, (uint64_t)(v0 + 2));
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  dispatch thunk of DeviceState.siriLocale.getter();
  v8 = *(_QWORD *)(v6 + 88);
  v2 = default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  static PaymentsContextProvider.appDisambiguationContextUpdate(apps:locale:intentType:isRequestAccount:)(v9, v11, v7, v8, v2 & 1, v13);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  static DialogPhase.confirmation.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v15, v13, v16);
  *(_QWORD *)(swift_task_alloc() + 16) = v15;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  v3 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v0[39] = v3;
  v3(v15, v16);
  outlined init with copy of GlobalsProviding(v17 + 112, (uint64_t)(v0 + 7));
  v4 = (_QWORD *)swift_task_alloc();
  v18[40] = v4;
  *v4 = v18[12];
  v4[1] = PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:);
  return static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)(v18[17], v18[18], v18[19], v18[25], v18[37], (uint64_t)(v0 + 7));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = *v1;
  v4 = v2 + 56;
  *(_QWORD *)(v2 + 328) = v0;
  swift_task_dealloc();
  if (!v0)
    __swift_destroy_boxed_opaque_existential_0(v4);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  id v5;
  uint64_t v6;

  v4 = (void (*)(uint64_t, uint64_t))v0[39];
  v5 = (id)v0[37];
  v6 = v0[32];
  v3 = v0[29];
  v1 = v0[24];
  v0[12] = v0;
  (*(void (**)(void))(v1 + 8))();
  v4(v6, v3);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[12] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 96) + 8))();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  id v8;

  v7 = (void (*)(uint64_t, uint64_t))v0[39];
  v8 = (id)v0[37];
  v5 = v0[32];
  v6 = v0[29];
  v3 = v0[25];
  v2 = v0[24];
  v4 = v0[23];
  v0[12] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  v7(v5, v6);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[12] + 8))();
}

uint64_t PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[12] = *v2;
  v3 += 12;
  v3[25] = a1;
  v3[26] = v1;
  swift_task_dealloc();
  if (!v1)
    swift_release();
  return swift_task_switch();
}

uint64_t closure #1 in PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(char *, _QWORD);
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v14 = a1;
  v9 = a2;
  v19 = 0;
  v18 = 0;
  v7 = 0;
  v16 = type metadata accessor for ResponseType();
  v15 = *(_QWORD *)(v16 - 8);
  v6 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v17 = (char *)&v6 - v6;
  v8 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v6 - v8;
  v19 = a1;
  v18 = v3;
  v11 = type metadata accessor for NLContextUpdate();
  v10 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v12, v9);
  v4 = *(void (**)(char *, _QWORD))(v10 + 56);
  v13 = 1;
  v4(v12, 0);
  OutputGenerationManifest.nlContextUpdate.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#DisambiguateApp", 0x1CuLL, v13 & 1);
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, *MEMORY[0x24BE97960], v16);
  return OutputGenerationManifest.responseType.setter();
}

uint64_t PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  *(_QWORD *)(v3 + 608) = v2;
  *(_QWORD *)(v3 + 600) = a2;
  *(_QWORD *)(v3 + 592) = a1;
  *(_QWORD *)(v3 + 536) = v3;
  *(_QWORD *)(v3 + 544) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_BYTE *)(v3 + 776) = 0;
  v9 = *v2;
  *(_QWORD *)(v3 + 616) = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(_QWORD *)(v3 + 624) = swift_task_alloc();
  v4 = type metadata accessor for NLContextUpdate();
  *(_QWORD *)(v3 + 632) = v4;
  *(_QWORD *)(v3 + 640) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 648) = swift_task_alloc();
  v5 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v3 + 656) = v5;
  *(_QWORD *)(v3 + 664) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 672) = swift_task_alloc();
  v6 = type metadata accessor for Locale();
  *(_QWORD *)(v3 + 680) = v6;
  *(_QWORD *)(v3 + 688) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 696) = swift_task_alloc();
  *(_QWORD *)(v3 + 544) = a2;
  *(_QWORD *)(v3 + 552) = v2;
  *(_QWORD *)(v3 + 704) = *(_QWORD *)(v9 + 80);
  return swift_task_switch();
}

uint64_t PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:)()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0[75];
  v0[67] = v0;
  v0[70] = v1;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
  lazy protocol witness table accessor for type [App] and conformance [A]();
  v23 = Sequence.sorted(by:)();
  v0[89] = v23;
  v20 = *(_QWORD *)(v22 + 696);
  v18 = *(_QWORD *)(v22 + 688);
  v19 = *(_QWORD *)(v22 + 680);
  v17 = *(_QWORD *)(v22 + 608);
  swift_release();
  *(_QWORD *)(v22 + 568) = v23;
  outlined init with copy of GlobalsProviding(v17 + 112, v22 + 16);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v22 + 16), *(_QWORD *)(v22 + 40));
  dispatch thunk of DeviceState.siriLocale.getter();
  v21 = static AppResolutionResponse.makeDisambiguationList(apps:inLocale:)();
  *(_QWORD *)(v22 + 720) = v21;
  v2 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  *(_QWORD *)(v22 + 728) = v2;
  v2(v20, v19);
  __swift_destroy_boxed_opaque_existential_0(v22 + 16);
  *(_QWORD *)(v22 + 576) = v21;
  if ((static RFFeatureFlags.ResponseFramework.SMART.getter() & 1) != 0)
  {
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v22 + 736) = v3;
    *v3 = *(_QWORD *)(v22 + 536);
    v3[1] = PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:);
    return PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:)(*(_QWORD *)(v22 + 592), v23, v21);
  }
  outlined init with copy of GlobalsProviding(*(_QWORD *)(v22 + 608) + 112, v22 + 56);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v22 + 56), *(_QWORD *)(v22 + 80));
  v16 = dispatch thunk of DeviceState.isWatch.getter();
  __swift_destroy_boxed_opaque_existential_0(v22 + 56);
  if ((v16 & 1) == 0)
  {
    outlined init with copy of GlobalsProviding(*(_QWORD *)(v22 + 608) + 112, v22 + 96);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v22 + 96), *(_QWORD *)(v22 + 120));
    v14 = dispatch thunk of DeviceState.isPhone.getter();
    swift_retain();
    if ((v14 & 1) != 0)
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_0(v22 + 96);
      swift_retain();
    }
    else
    {
      outlined init with copy of GlobalsProviding(*(_QWORD *)(v22 + 608) + 112, v22 + 136);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v22 + 136), *(_QWORD *)(v22 + 160));
      v13 = dispatch thunk of DeviceState.isPad.getter();
      __swift_destroy_boxed_opaque_existential_0(v22 + 136);
      swift_release();
      __swift_destroy_boxed_opaque_existential_0(v22 + 96);
      swift_retain();
      if ((v13 & 1) == 0)
      {
        outlined init with copy of GlobalsProviding(*(_QWORD *)(v22 + 608) + 112, v22 + 176);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v22 + 176), *(_QWORD *)(v22 + 200));
        v12 = dispatch thunk of DeviceState.isPod.getter();
        __swift_destroy_boxed_opaque_existential_0(v22 + 176);
        swift_release();
        swift_retain();
        if ((v12 & 1) == 0)
        {
          v11 = 0;
          goto LABEL_12;
        }
LABEL_10:
        outlined init with copy of GlobalsProviding(*(_QWORD *)(v22 + 608) + 112, v22 + 456);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v22 + 456), *(_QWORD *)(v22 + 480));
        v10 = dispatch thunk of DeviceState.isCarPlay.getter() ^ 1;
        __swift_destroy_boxed_opaque_existential_0(v22 + 456);
        v11 = v10;
LABEL_12:
        v8 = *(_QWORD *)(v22 + 608);
        swift_release();
        *(_BYTE *)(v22 + 776) = v11 & 1;
        type metadata accessor for SAUIAssistantUtteranceView();
        _allocateUninitializedArray<A>(_:)();
        outlined init with copy of GlobalsProviding(v8 + 112, v22 + 216);
        v9 = static AppResolutionResponse.makeDisambiguationViews(apps:utteranceViews:disambiguationList:deviceState:compact:)();
        __swift_destroy_boxed_opaque_existential_0(v22 + 216);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v22 + 584) = v9;
        goto LABEL_13;
      }
    }
    swift_release();
    swift_retain();
    goto LABEL_10;
  }
  outlined init with copy of GlobalsProviding(*(_QWORD *)(v22 + 608) + 112, v22 + 496);
  v5 = default argument 3 of static AceViewProviding.makeAceViewsForDisambiguation(app:disambiguationList:deviceState:disambiguationSnippetProvider:)();
  v15 = static AceViewProviding.makeAceViewsForDisambiguation(app:disambiguationList:deviceState:disambiguationSnippetProvider:)(0, v21, (_QWORD *)(v22 + 496), v5, v6);
  __swift_destroy_boxed_opaque_existential_0(v22 + 496);
  *(_QWORD *)(v22 + 584) = v15;
LABEL_13:
  *(_QWORD *)(v22 + 752) = *(_QWORD *)(*(_QWORD *)(v22 + 608) + 152);
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v22 + 760) = v7;
  *v7 = *(_QWORD *)(v22 + 536);
  v7[1] = PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:);
  return PaymentsBaseCATs.disambiguateApp()(*(_QWORD *)(v22 + 672));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 536) = *v1;
  *(_QWORD *)(v2 + 744) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 536) = v0;
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 536) + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 536) = *v1;
  *(_QWORD *)(v2 + 768) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  char v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = (void (*)(uint64_t, uint64_t))v0[91];
  v18 = v0[89];
  v4 = v0[88];
  v6 = v0[87];
  v7 = v0[85];
  v16 = v0[84];
  v15 = v0[83];
  v17 = v0[82];
  v13 = v0[81];
  v12 = v0[80];
  v14 = v0[79];
  v11 = v0[78];
  v3 = v0[77];
  v9 = v0[76];
  v10 = (uint64_t *)v0[74];
  v0[67] = v0;
  swift_bridgeObjectRetain();
  outlined init with copy of GlobalsProviding(v9 + 112, (uint64_t)(v0 + 32));
  __swift_project_boxed_opaque_existential_1(v0 + 32, v0[35]);
  dispatch thunk of DeviceState.isWatch.getter();
  PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  swift_bridgeObjectRelease();
  outlined init with copy of GlobalsProviding(v9 + 112, (uint64_t)(v0 + 37));
  __swift_project_boxed_opaque_existential_1(v0 + 37, v0[40]);
  dispatch thunk of DeviceState.siriLocale.getter();
  v5 = *(_QWORD *)(v3 + 88);
  v1 = default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  static PaymentsContextProvider.appDisambiguationContextUpdate(apps:locale:intentType:isRequestAccount:)(v18, v6, v4, v5, v1 & 1, v13);
  v8(v6, v7);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 37));
  outlined init with copy of GlobalsProviding(v9 + 112, (uint64_t)(v0 + 42));
  outlined init with copy of GlobalsProviding(v9 + 112, (uint64_t)(v0 + 47));
  __swift_project_boxed_opaque_existential_1(v0 + 47, v0[50]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  swift_bridgeObjectRetain();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v13, v14);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, v14);
  v0[52] = 0;
  v0[53] = 0;
  v0[54] = 0;
  v0[55] = 0;
  v0[56] = 0;
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v10[3] = type metadata accessor for AceOutput();
  v10[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v10);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 52));
  outlined destroy of NLContextUpdate?(v11);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 47));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 42));
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  outlined destroy of [SFCardSection]();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[67] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 536) = v0;
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 536) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 536) = v0;
  swift_release();
  outlined destroy of [SFCardSection]();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 536) + 8))();
}

uint64_t closure #1 in PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:)(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *object;
  int v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  _BYTE v40[8];
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v16 = a1;
  v13 = a2;
  v25 = a3;
  v50 = 0;
  v49 = 0;
  v48 = 0;
  v43._countAndFlagsBits = 0;
  v43._object = 0;
  v39._countAndFlagsBits = 0;
  v39._object = 0;
  v12 = *a3;
  v14 = 0;
  v30 = type metadata accessor for Locale();
  v21 = *(_QWORD *)(v30 - 8);
  v15 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v29 = (char *)&object - v15;
  v17 = *v16;
  v50 = v17;
  v24 = *v3;
  v49 = v24;
  v48 = v4;
  v47 = *(_QWORD *)(v5 + 80);
  v20 = type metadata accessor for AppInformationResolver();
  swift_retain();
  v23 = AppInformationResolver.__allocating_init(app:)();
  v22 = v44;
  outlined init with copy of GlobalsProviding((uint64_t)(v25 + 14), (uint64_t)v44);
  v19 = v45;
  v18 = v46;
  __swift_project_boxed_opaque_existential_1(v22, v45);
  dispatch thunk of DeviceState.siriLocale.getter();
  v34._countAndFlagsBits = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  v34._object = v6;
  v28 = *(void (**)(char *, uint64_t))(v21 + 8);
  v28(v29, v30);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
  swift_release();
  v43 = v34;
  swift_retain();
  v32 = AppInformationResolver.__allocating_init(app:)();
  v31 = v40;
  outlined init with copy of GlobalsProviding((uint64_t)(v25 + 14), (uint64_t)v40);
  v27 = v41;
  v26 = v42;
  __swift_project_boxed_opaque_existential_1(v31, v41);
  dispatch thunk of DeviceState.siriLocale.getter();
  v33._countAndFlagsBits = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  v33._object = v7;
  v28(v29, v30);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v31);
  swift_release();
  v39 = v33;
  swift_bridgeObjectRetain();
  v37 = v34;
  if (v34._object)
  {
    v38 = v37;
  }
  else
  {
    v38 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of String.UTF8View();
  }
  v11 = v38;
  swift_bridgeObjectRetain();
  v35 = v33;
  if (v33._object)
  {
    v36 = v35;
  }
  else
  {
    v36 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of String.UTF8View();
  }
  object = v36._object;
  v10 = static String.< infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t default argument 3 of static AceViewProviding.makeAceViewsForDisambiguation(app:disambiguationList:deviceState:disambiguationSnippetProvider:)()
{
  return type metadata accessor for SiriKitDisambiguationSnippetFactory();
}

uint64_t PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[38] = a1;
  v2[17] = v2;
  v2[18] = 0;
  v2[19] = 0;
  v2[20] = 0;
  v2[7] = 0;
  v2[8] = 0;
  v2[23] = 0;
  v2[11] = 0;
  v2[12] = 0;
  v3 = type metadata accessor for Logger();
  v2[39] = v3;
  v2[40] = *(_QWORD *)(v3 - 8);
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  v4 = type metadata accessor for ProtectedAppStatus.AppState();
  v2[44] = v4;
  v2[45] = *(_QWORD *)(v4 - 8);
  v2[46] = swift_task_alloc();
  v5 = type metadata accessor for ProtectedAppStatus();
  v2[47] = v5;
  v2[48] = *(_QWORD *)(v5 - 8);
  v2[49] = swift_task_alloc();
  v2[18] = a1;
  v2[19] = v1;
  return swift_task_switch();
}

uint64_t PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *buf;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint32_t size;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v32 = v0[38];
  v0[17] = v0;
  type metadata accessor for App();
  v0[20] = Array.init()();
  type metadata accessor for ProtectedAppCheck();
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  static ProtectedAppCheck.client(for:)();
  swift_release();
  swift_bridgeObjectRetain();
  v0[21] = v32;
  v0[50] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
  lazy protocol witness table accessor for type [App] and conformance [A]();
  Collection<>.makeIterator()();
  v33 = 0;
  while (1)
  {
    *(_QWORD *)(v31 + 408) = v33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[App]>);
    IndexingIterator.next()();
    v30 = *(_QWORD *)(v31 + 176);
    *(_QWORD *)(v31 + 416) = v30;
    if (!v30)
      break;
    *(_QWORD *)(v31 + 184) = v30;
    v28 = App.appIdentifier.getter();
    *(_QWORD *)(v31 + 424) = v1;
    if (v1)
    {
      *(_QWORD *)(v31 + 88) = v28;
      *(_QWORD *)(v31 + 96) = v1;
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v31 + 16), *(_QWORD *)(v31 + 40));
      v2 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v31 + 432) = v2;
      *v2 = *(_QWORD *)(v31 + 136);
      v2[1] = PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:);
      return dispatch thunk of ProtectedAppCheckClient.status(for:)();
    }
    v4 = *(_QWORD *)(v31 + 328);
    v17 = *(_QWORD *)(v31 + 320);
    v18 = *(_QWORD *)(v31 + 312);
    v5 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v4, v5, v18);
    swift_retain();
    swift_retain();
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = partial apply for implicit closure #3 in PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:);
    *(_QWORD *)(v20 + 24) = v30;
    swift_release();
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v31 + 192) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v31 + 440);
    v22 = swift_allocObject();
    *(_BYTE *)(v22 + 16) = 32;
    v23 = swift_allocObject();
    *(_BYTE *)(v23 + 16) = 8;
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
    *(_QWORD *)(v21 + 24) = v20;
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v24 + 24) = v21;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    v25 = v6;
    swift_retain();
    *v25 = partial apply for closure #1 in OSLogArguments.append(_:);
    v25[1] = v22;
    swift_retain();
    v25[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v25[3] = v23;
    swift_retain();
    v25[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v25[5] = v24;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v26, v27))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v15 = createStorage<A>(capacity:type:)(0);
      v16 = createStorage<A>(capacity:type:)(1);
      *(_QWORD *)(v31 + 208) = buf;
      *(_QWORD *)(v31 + 216) = v15;
      *(_QWORD *)(v31 + 224) = v16;
      serialize(_:at:)(2, (_BYTE **)(v31 + 208));
      serialize(_:at:)(1, (_BYTE **)(v31 + 208));
      *(_QWORD *)(v31 + 72) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v31 + 80) = v22;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 72), v31 + 208, v31 + 216, v31 + 224);
      *(_QWORD *)(v31 + 72) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v31 + 80) = v23;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 72), v31 + 208, v31 + 216, v31 + 224);
      *(_QWORD *)(v31 + 72) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v31 + 80) = v24;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 72), v31 + 208, v31 + 216, v31 + 224);
      _os_log_impl(&dword_24701B000, v26, v27, "#PaymentsAppResolutionFlowStrategy %s has no bundleID, but not filtering it out", buf, size);
      destroyStorage<A>(_:count:)(v15, 0, v13);
      destroyStorage<A>(_:count:)(v16, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v11 = 0;
      v12 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      v11 = v33;
      v12 = v29;
    }
    v9 = *(_QWORD *)(v31 + 328);
    v8 = *(_QWORD *)(v31 + 320);
    v10 = *(_QWORD *)(v31 + 312);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    swift_retain();
    *(_QWORD *)(v31 + 200) = v30;
    Array.append(_:)();
    swift_release();
    v33 = v11;
    v29 = v12;
  }
  outlined destroy of [SFCardSection]();
  v7 = *(_QWORD *)(v31 + 160);
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_0(v31 + 16);
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v31 + 136) + 8))(v7);
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 136) = *(_QWORD *)v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint32_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  NSObject *log;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint32_t size;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  NSObject *oslog;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint8_t *buf;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint32_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v90 = v0[46];
  v89 = v0[45];
  v91 = v0[44];
  v0[17] = v0;
  ProtectedAppStatus.state.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v89 + 88))(v90, v91) == *MEMORY[0x24BE981E8])
  {
    v4 = *(_QWORD *)(v88 + 344);
    v74 = *(_QWORD *)(v88 + 320);
    v75 = *(_QWORD *)(v88 + 312);
    v76 = *(_QWORD *)(v88 + 416);
    v5 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v4, v5, v75);
    swift_retain();
    swift_retain();
    v78 = swift_allocObject();
    *(_QWORD *)(v78 + 16) = partial apply for implicit closure #3 in PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:);
    *(_QWORD *)(v78 + 24) = v76;
    swift_release();
    v84 = Logger.logObject.getter();
    v85 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v88 + 272) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v77 = *(_DWORD *)(v88 + 448);
    v80 = swift_allocObject();
    *(_BYTE *)(v80 + 16) = 32;
    v81 = swift_allocObject();
    *(_BYTE *)(v81 + 16) = 8;
    v79 = swift_allocObject();
    *(_QWORD *)(v79 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
    *(_QWORD *)(v79 + 24) = v78;
    v82 = swift_allocObject();
    *(_QWORD *)(v82 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v82 + 24) = v79;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    v83 = v6;
    swift_retain();
    *v83 = partial apply for closure #1 in OSLogArguments.append(_:);
    v83[1] = v80;
    swift_retain();
    v83[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v83[3] = v81;
    swift_retain();
    v83[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v83[5] = v82;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v84, v85))
    {
      v7 = *(_QWORD *)(v88 + 408);
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v72 = createStorage<A>(capacity:type:)(0);
      v73 = createStorage<A>(capacity:type:)(1);
      *(_QWORD *)(v88 + 280) = buf;
      *(_QWORD *)(v88 + 288) = v72;
      *(_QWORD *)(v88 + 296) = v73;
      serialize(_:at:)(2, (_BYTE **)(v88 + 280));
      serialize(_:at:)(1, (_BYTE **)(v88 + 280));
      *(_QWORD *)(v88 + 120) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v88 + 128) = v80;
      result = closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 120), v88 + 280, v88 + 288, v88 + 296);
      if (v7)
        return result;
      *(_QWORD *)(v88 + 120) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v88 + 128) = v81;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 120), v88 + 280, v88 + 288, v88 + 296);
      *(_QWORD *)(v88 + 120) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v88 + 128) = v82;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 120), v88 + 280, v88 + 288, v88 + 296);
      _os_log_impl(&dword_24701B000, v84, v85, "#PaymentsAppResolutionFlowStrategy %s is hidden", buf, v77);
      destroyStorage<A>(_:count:)(v72, 0, v70);
      destroyStorage<A>(_:count:)(v73, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v69 = 0;
      v68 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      v69 = *(_QWORD *)(v88 + 408);
    }
    v64 = *(_QWORD *)(v88 + 344);
    v63 = *(_QWORD *)(v88 + 320);
    v65 = *(_QWORD *)(v88 + 312);

    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v64, v65);
    v66 = v69;
    v67 = v68;
  }
  else
  {
    v8 = *(_QWORD *)(v88 + 336);
    v51 = *(_QWORD *)(v88 + 320);
    v52 = *(_QWORD *)(v88 + 312);
    v53 = *(_QWORD *)(v88 + 416);
    v9 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v8, v9, v52);
    swift_retain();
    swift_retain();
    v55 = swift_allocObject();
    *(_QWORD *)(v55 + 16) = partial apply for implicit closure #3 in PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:);
    *(_QWORD *)(v55 + 24) = v53;
    swift_release();
    oslog = Logger.logObject.getter();
    v62 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v88 + 232) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v88 + 444);
    v57 = swift_allocObject();
    *(_BYTE *)(v57 + 16) = 32;
    v58 = swift_allocObject();
    *(_BYTE *)(v58 + 16) = 8;
    v56 = swift_allocObject();
    *(_QWORD *)(v56 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
    *(_QWORD *)(v56 + 24) = v55;
    v59 = swift_allocObject();
    *(_QWORD *)(v59 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v59 + 24) = v56;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    v60 = v10;
    swift_retain();
    *v60 = partial apply for closure #1 in OSLogArguments.append(_:);
    v60[1] = v57;
    swift_retain();
    v60[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v60[3] = v58;
    swift_retain();
    v60[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v60[5] = v59;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v62))
    {
      v11 = *(_QWORD *)(v88 + 408);
      v48 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v49 = createStorage<A>(capacity:type:)(0);
      v50 = createStorage<A>(capacity:type:)(1);
      *(_QWORD *)(v88 + 248) = v48;
      *(_QWORD *)(v88 + 256) = v49;
      *(_QWORD *)(v88 + 264) = v50;
      serialize(_:at:)(2, (_BYTE **)(v88 + 248));
      serialize(_:at:)(1, (_BYTE **)(v88 + 248));
      *(_QWORD *)(v88 + 104) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v88 + 112) = v57;
      result = closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 104), v88 + 248, v88 + 256, v88 + 264);
      if (v11)
        return result;
      *(_QWORD *)(v88 + 104) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v88 + 112) = v58;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 104), v88 + 248, v88 + 256, v88 + 264);
      *(_QWORD *)(v88 + 104) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v88 + 112) = v59;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 104), v88 + 248, v88 + 256, v88 + 264);
      _os_log_impl(&dword_24701B000, oslog, v62, "#PaymentsAppResolutionFlowStrategy %s is not hidden", v48, size);
      destroyStorage<A>(_:count:)(v49, 0, v47);
      destroyStorage<A>(_:count:)(v50, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v48, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v46 = 0;
      v45 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      v46 = *(_QWORD *)(v88 + 408);
    }
    v43 = *(_QWORD *)(v88 + 368);
    v42 = *(_QWORD *)(v88 + 360);
    v44 = *(_QWORD *)(v88 + 352);
    v39 = *(_QWORD *)(v88 + 336);
    v38 = *(_QWORD *)(v88 + 320);
    v40 = *(_QWORD *)(v88 + 312);
    v41 = *(_QWORD *)(v88 + 416);

    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v40);
    swift_retain();
    *(_QWORD *)(v88 + 240) = v41;
    Array.append(_:)();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v44);
    v66 = v46;
    v67 = v45;
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v88 + 384) + 8))(*(_QWORD *)(v88 + 392), *(_QWORD *)(v88 + 376));
  swift_bridgeObjectRelease();
  v36 = v66;
  for (i = v67; ; i = v20)
  {
    swift_release();
    *(_QWORD *)(v88 + 408) = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[App]>);
    IndexingIterator.next()();
    v86 = *(_QWORD *)(v88 + 176);
    *(_QWORD *)(v88 + 416) = v86;
    if (!v86)
      break;
    *(_QWORD *)(v88 + 184) = v86;
    v87 = App.appIdentifier.getter();
    *(_QWORD *)(v88 + 424) = v1;
    if (v1)
    {
      *(_QWORD *)(v88 + 88) = v87;
      *(_QWORD *)(v88 + 96) = v1;
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v88 + 16), *(_QWORD *)(v88 + 40));
      v2 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v88 + 432) = v2;
      *v2 = *(_QWORD *)(v88 + 136);
      v2[1] = PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:);
      return dispatch thunk of ProtectedAppCheckClient.status(for:)();
    }
    v12 = *(_QWORD *)(v88 + 328);
    v25 = *(_QWORD *)(v88 + 320);
    v26 = *(_QWORD *)(v88 + 312);
    v13 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v12, v13, v26);
    swift_retain();
    swift_retain();
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = partial apply for implicit closure #3 in PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:);
    *(_QWORD *)(v28 + 24) = v86;
    swift_release();
    log = Logger.logObject.getter();
    v35 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v88 + 192) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v27 = *(_DWORD *)(v88 + 440);
    v30 = swift_allocObject();
    *(_BYTE *)(v30 + 16) = 32;
    v31 = swift_allocObject();
    *(_BYTE *)(v31 + 16) = 8;
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
    *(_QWORD *)(v29 + 24) = v28;
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v32 + 24) = v29;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    v33 = v14;
    swift_retain();
    *v33 = partial apply for closure #1 in OSLogArguments.append(_:);
    v33[1] = v30;
    swift_retain();
    v33[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v33[3] = v31;
    swift_retain();
    v33[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v33[5] = v32;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v35))
    {
      v22 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v23 = createStorage<A>(capacity:type:)(0);
      v24 = createStorage<A>(capacity:type:)(1);
      *(_QWORD *)(v88 + 208) = v22;
      *(_QWORD *)(v88 + 216) = v23;
      *(_QWORD *)(v88 + 224) = v24;
      serialize(_:at:)(2, (_BYTE **)(v88 + 208));
      serialize(_:at:)(1, (_BYTE **)(v88 + 208));
      *(_QWORD *)(v88 + 72) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v88 + 80) = v30;
      result = closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 72), v88 + 208, v88 + 216, v88 + 224);
      if (v36)
        return result;
      *(_QWORD *)(v88 + 72) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v88 + 80) = v31;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 72), v88 + 208, v88 + 216, v88 + 224);
      *(_QWORD *)(v88 + 72) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v88 + 80) = v32;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 72), v88 + 208, v88 + 216, v88 + 224);
      _os_log_impl(&dword_24701B000, log, v35, "#PaymentsAppResolutionFlowStrategy %s has no bundleID, but not filtering it out", v22, v27);
      destroyStorage<A>(_:count:)(v23, 0, v21);
      destroyStorage<A>(_:count:)(v24, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v22, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v19 = 0;
      v20 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      v19 = v36;
      v20 = i;
    }
    v17 = *(_QWORD *)(v88 + 328);
    v16 = *(_QWORD *)(v88 + 320);
    v18 = *(_QWORD *)(v88 + 312);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
    swift_retain();
    *(_QWORD *)(v88 + 200) = v86;
    Array.append(_:)();
    v36 = v19;
  }
  outlined destroy of [SFCardSection]();
  v15 = *(_QWORD *)(v88 + 160);
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_0(v88 + 16);
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v88 + 136) + 8))(v15);
}

uint64_t implicit closure #1 in PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  swift_retain();
  result = a1;
  *a2 = a1;
  return result;
}

_QWORD *PaymentsAppResolutionFlowStrategy.finalizeAppsForDisambiguation(_:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  uint64_t v9;
  _QWORD v10[2];
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  v13 = 0;
  v9 = 0;
  v2 = *v1;
  v14 = a1;
  v12 = *(_QWORD *)(v2 + 80);
  v7 = *a1;
  swift_bridgeObjectRetain();
  v10[0] = v7;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
  lazy protocol witness table accessor for type [App] and conformance [A]();
  Collection.firstIndex(where:)();
  result = v10;
  outlined destroy of [SFCardSection]();
  if ((v11 & 1) == 0)
  {
    v9 = v10[1];
    type metadata accessor for App();
    Array.subscript.getter();
    v5 = App.appIdentifier.getter();
    v6 = v4;
    swift_release();
    v8[0] = v5;
    v8[1] = v6;
    result = v8;
    outlined destroy of String.UTF8View();
    if (!v6)
    {
      Array.remove(at:)();
      swift_release();
      static AppUtil.walletApp.getter();
      return (_QWORD *)Array.append(_:)();
    }
  }
  return result;
}

BOOL closure #1 in PaymentsAppResolutionFlowStrategy.finalizeAppsForDisambiguation(_:)()
{
  return App.isFirstParty.getter();
}

id PaymentsAppResolutionFlowStrategy.makeAppSelectionCommand(app:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[5];
  id v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v14 = 0;
  v13 = 0;
  v11 = 0;
  v2 = *v1;
  v14 = a1;
  v13 = v1;
  v12 = *(_QWORD *)(v2 + 80);
  v3 = App.appIdentifier.getter();
  v8 = static PaymentsDirectInvocations.selectionInvocation(appIdentifier:)(v3, v4);
  swift_bridgeObjectRelease();
  v11 = v8;
  v6 = (id)objc_opt_self();
  outlined init with copy of GlobalsProviding((uint64_t)(v1 + 14), (uint64_t)v10);
  v7 = SKIDirectInvocationPayload.toRSKE(deviceState:)(v10);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
  v9 = objc_msgSend(v6, sel_wrapCommandInStartLocalRequest_, v7);
  swift_unknownObjectRelease();

  return v9;
}

uint64_t PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)()
{
  swift_bridgeObjectRetain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAAceView]);
  lazy protocol witness table accessor for type [SAAceView] and conformance [A]();
  Sequence.forEach(_:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(id *a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  id v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE v23[8];
  uint64_t v24;
  void *(*v25)(void *, uint64_t);
  uint64_t v26;
  _QWORD v27[2];
  Class v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _BYTE *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  Class v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  Class v59;
  Class v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  id v77;
  uint64_t v78;
  id v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  _QWORD *v84;
  uint64_t v85;
  _BYTE *v86;
  unint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  Class v97;
  id v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  id v105;
  void *v106;
  id v107;
  id v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  id v113;
  uint64_t v114;
  unint64_t v115;
  id v116;
  unint64_t v117;
  id v118;
  id v119;
  id v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  Class isa;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  _BYTE *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  const char *v162;
  const char *v163;
  const char *v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD v169[3];
  uint64_t v170;
  id v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD v174[3];
  id v175;
  id v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD v180[3];
  uint64_t v181;
  id v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  char v186;
  id v187;

  v159 = a3;
  v160 = a4;
  v162 = "Fatal error";
  v163 = "Unexpectedly found nil while implicitly unwrapping an Optional value";
  v164 = "SiriPaymentsIntents/PaymentsAppResolutionFlowStrategy.swift";
  v187 = 0;
  v186 = 0;
  v185 = 0;
  v184 = 0;
  v182 = 0;
  v181 = 0;
  v176 = 0;
  v175 = 0;
  v171 = 0;
  v170 = 0;
  v4 = *a4;
  v165 = *a1;
  v187 = v165;
  v186 = a2 & 1;
  v185 = a3;
  v184 = a4;
  v183 = *(_QWORD *)(v4 + 80);
  if ((a2 & 1) != 0)
  {
    v5 = v165;
    objc_opt_self();
    v158 = swift_dynamicCastObjCClass();
    if (v158)
    {
      v157 = (void *)v158;
    }
    else
    {
      v156 = 0;

      v157 = 0;
    }
    v155 = v157;
    if (v157)
    {
      v154 = v155;
      v152 = v155;
      v171 = v155;
      v153 = objc_msgSend(v155, sel_templateItems);
      if (v153)
      {
        v151 = v153;
        v148 = v153;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
        v149 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v150 = v149;
      }
      else
      {
        v150 = 0;
      }
      v147 = v150;
      if (v150)
      {
        v146 = v147;
        v143 = v147;
        v142 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
        type metadata accessor for SASTColumnDataListItem();
        v144 = _arrayConditionalCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        v145 = v144;
      }
      else
      {
        v145 = 0;
      }
      v141 = v145;
      if (v145)
      {
        v140 = v141;
        v127 = v141;
        v170 = v141;
        v132 = v169;
        v169[0] = v141;
        v128 = &v168;
        v168 = v159;
        v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SASTColumnDataListItem]);
        v130 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
        v131 = lazy protocol witness table accessor for type [SASTColumnDataListItem] and conformance [A]();
        lazy protocol witness table accessor for type [App] and conformance [A]();
        zip<A, B>(_:_:)();
        v166 = v169[1];
        v167 = v169[2];
        swift_retain();
        v133 = v27;
        MEMORY[0x24BDAC7A8](v27);
        v134 = v23;
        v25 = partial apply for closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:);
        v26 = v6;
        v135 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Zip2Sequence<[SASTColumnDataListItem], [App]>);
        v136 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
        v7 = lazy protocol witness table accessor for type Zip2Sequence<[SASTColumnDataListItem], [App]> and conformance Zip2Sequence<A, B>();
        v8 = v161;
        result = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@guaranteed SAUIListItem, @guaranteed App) -> (@owned SAUIListItem), (uint64_t)v134, v135, v136, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v137);
        v138 = v8;
        v139 = result;
        if (!v8)
        {
          v124 = v139;
          swift_release();
          outlined destroy of Zip2Sequence<[SAUIListItem], [App]>();
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v152, sel_setTemplateItems_, isa);

          swift_bridgeObjectRelease();
          result = v138;
          v126 = v138;
          return result;
        }
        __break(1u);
        goto LABEL_70;
      }

    }
  }
  v10 = v165;
  objc_opt_self();
  v123 = swift_dynamicCastObjCClass();
  if (v123)
  {
    v122 = (void *)v123;
  }
  else
  {
    v121 = 0;

    v122 = 0;
  }
  v120 = v122;
  if (!v122)
    goto LABEL_53;
  v119 = v120;
  v116 = v120;
  v176 = v120;
  v114 = 0;
  v115 = type metadata accessor for SFCard();
  v117 = type metadata accessor for _SFPBCard();
  v118 = objc_msgSend(v120, sel_cardData);
  if (v118)
  {
    v113 = v118;
    v108 = v118;
    v109 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v110 = v11;

    v111 = v109;
    v112 = v110;
  }
  else
  {
    v111 = 0;
    v112 = 0xF000000000000000;
  }
  v107 = _SFPBCard.__allocating_init(data:)(v111, v112);
  if (v107)
  {
    v106 = v107;
  }
  else
  {
    v23[0] = 2;
    v24 = 348;
    LODWORD(v25) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  v105 = SFCard.__allocating_init(protobuf:)(v106);
  if (!v105)
  {

LABEL_53:
    v19 = v165;
    objc_opt_self();
    v54 = swift_dynamicCastObjCClass();
    if (v54)
    {
      v53 = (void *)v54;
    }
    else
    {
      v52 = 0;

      v53 = 0;
    }
    v51 = v53;
    if (v53)
    {
      v50 = v51;
      v47 = v51;
      v182 = v51;
      v48 = objc_msgSend(v51, sel_items);
      if (v48)
      {
        v46 = v48;
        v43 = v48;
        type metadata accessor for SAUIListItem();
        v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v45 = v44;
      }
      else
      {
        v45 = 0;
      }
      v42 = v45;
      if (v45)
      {
        v41 = v42;
        v29 = v42;
        v181 = v42;
        v34 = v180;
        v180[0] = v42;
        v30 = &v179;
        v179 = v159;
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAUIListItem]);
        v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
        v33 = lazy protocol witness table accessor for type [SAUIListItem] and conformance [A]();
        lazy protocol witness table accessor for type [App] and conformance [A]();
        zip<A, B>(_:_:)();
        v177 = v180[1];
        v178 = v180[2];
        swift_retain();
        v35 = v27;
        MEMORY[0x24BDAC7A8](v27);
        v36 = v23;
        v25 = partial apply for closure #4 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:);
        v26 = v20;
        v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<[SAUIListItem], [App]>);
        v38 = type metadata accessor for SAUIListItem();
        v21 = lazy protocol witness table accessor for type Zip2Sequence<[SAUIListItem], [App]> and conformance Zip2Sequence<A, B>();
        v22 = v161;
        result = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@guaranteed SAUIListItem, @guaranteed App) -> (@owned SAUIListItem), (uint64_t)v36, v37, v38, MEMORY[0x24BEE4078], v21, MEMORY[0x24BEE40A8], v137);
        v39 = v22;
        v40 = result;
        if (v22)
          goto LABEL_72;
        v27[1] = v40;
        swift_release();
        outlined destroy of Zip2Sequence<[SAUIListItem], [App]>();
        v28 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v47, sel_setItems_, v28);

        swift_bridgeObjectRelease();
        v49 = v39;
      }
      else
      {

        v49 = v161;
      }
    }
    else
    {
      v49 = v161;
    }
    v56 = v49;
LABEL_68:
    result = v56;
    v126 = v56;
    return result;
  }
  v104 = v105;
  v99 = v105;
  v175 = v105;
  v174[2] = v159;
  swift_retain();
  v100 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
  v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  v12 = lazy protocol witness table accessor for type [App] and conformance [A]();
  result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:), (uint64_t)v160, v100, v101, MEMORY[0x24BEE4078], v12, MEMORY[0x24BEE40A8], v137);
  v102 = v161;
  v103 = result;
  if (v161)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  v96 = v103;
  swift_release();
  v97 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v116, sel_setReferencedCommands_, v97);

  v98 = objc_msgSend(v99, sel_cardSections);
  if (v98)
  {
    v95 = v98;
    v92 = v98;
    type metadata accessor for SFCardSection();
    v93 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v94 = v93;
  }
  else
  {
    v94 = 0;
  }
  v174[0] = v94;
  if (!v94)
  {
    outlined destroy of [SFCardSection]();
    v91 = v102;
LABEL_42:
    v78 = v91;
    v17 = v99;
    v79 = _SFPBCard.__allocating_init(facade:)(v99);
    if (v79)
    {
      v77 = v79;
      v73 = v79;
      v74 = objc_msgSend(v79, sel_data);
      if (v74)
      {
        v72 = v74;
        v67 = v74;
        v68 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v69 = v18;

        v70 = v68;
        v71 = v69;
      }
      else
      {
        v70 = 0;
        v71 = 0xF000000000000000;
      }
      v66 = v71;
      v65 = v70;

      v75 = v65;
      v76 = v66;
    }
    else
    {
      v75 = 0;
      v76 = 0xF000000000000000;
    }
    v63 = v76;
    v64 = v75;
    if ((v76 & 0xF000000000000000) == 0xF000000000000000)
    {
      v60 = 0;
    }
    else
    {
      v61 = v64;
      v62 = v63;
      v57 = v63;
      v58 = v64;
      v59 = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v58, v57);
      v60 = v59;
    }
    v55 = v60;
    objc_msgSend(v116, sel_setCardData_);

    v56 = v78;
    goto LABEL_68;
  }
  v80 = v174;
  v81 = v174[0];
  swift_bridgeObjectRetain();
  outlined destroy of [SFCardSection]();
  v83 = &v173;
  v173 = v81;
  v82 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
  lazy protocol witness table accessor for type [SFCardSection] and conformance [A]();
  Sequence.enumerated()();
  outlined destroy of [SFCardSection]();
  v172 = v174[1];
  v13 = v116;
  v84 = v27;
  v85 = 15;
  MEMORY[0x24BDAC7A8](v27);
  v25 = (void *(*)(void *, uint64_t))v116;
  v86 = v23;
  v87 = (v85 + 32) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v23);
  v14 = &v23[-v87];
  v88 = v14;
  *((_QWORD *)v14 + 2) = partial apply for closure #3 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:);
  *((_QWORD *)v14 + 3) = v15;
  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[SFCardSection]>);
  lazy protocol witness table accessor for type EnumeratedSequence<[SFCardSection]> and conformance EnumeratedSequence<A>();
  v16 = v102;
  result = Sequence.forEach(_:)();
  v90 = v16;
  if (!v16)
  {

    outlined destroy of [SFCardSection]();
    v91 = v90;
    goto LABEL_42;
  }
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
  return result;
}

void *closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  id *v3;
  id v4;
  id v5;
  id v7;
  Class isa;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v11 = App.appIdentifier.getter();
  v12 = v2;
  if (v2)
  {
    type metadata accessor for SASTCommandTemplateAction();
    type metadata accessor for INIntent();
    v7 = SAUIAppPunchOut.__allocating_init()();
    swift_bridgeObjectRetain();
    v13 = SASTCommandTemplateAction.init(intent:appId:)(v7, v11, v12);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    _allocateUninitializedArray<A>(_:)();
    *v3 = PaymentsAppResolutionFlowStrategy.makeAppSelectionCommand(app:)(a2);
    _finalizeUninitializedArray<A>(_:)();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v13, sel_setCommands_, isa);

    v4 = v13;
    objc_msgSend(a1, sel_setAction_, v13);
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
  }
  v5 = a1;
  return a1;
}

uint64_t thunk for @callee_guaranteed (@guaranteed SASTColumnDataListItem, @guaranteed App) -> (@owned SASTTemplateItem)@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = a2(*a1, a1[1]);
  *a3 = result;
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t j;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  void (*v34)(char *, char *);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  uint64_t AssociatedTypeWitness;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  Swift::Int v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v34 = a1;
  v35 = a2;
  v79 = a3;
  v71 = a4;
  v36 = a5;
  v78 = a6;
  v38 = a8;
  v39 = "Fatal error";
  v40 = "Index out of bounds";
  v41 = "Swift/Collection.swift";
  v42 = "Range requires lowerBound <= upperBound";
  v43 = "Swift/Range.swift";
  v44 = "Index out of range";
  v45 = "Unexpectedly found nil while unwrapping an Optional value";
  v46 = "Swift/Sequence.swift";
  v86 = a3;
  v85 = a4;
  v84 = a5;
  v47 = *(_QWORD *)(a5 - 8);
  v48 = (*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1);
  v49 = (char *)&v21 - v48;
  v50 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v21 - v48);
  v51 = (char *)&v21 - v50;
  v52 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v21 - v50);
  v53 = (char *)&v21 - v52;
  v54 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v21 - v52);
  v55 = (char *)&v21 - v54;
  v57 = MEMORY[0x24BEE0E28];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v72 = 0;
  v58 = type metadata accessor for Optional();
  v60 = *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64);
  v59 = (v60 + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = MEMORY[0x24BDAC7A8](v72);
  v61 = (char *)&v21 - v59;
  v62 = (v60 + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v63 = (uint64_t)&v21 - v62;
  v64 = *(_QWORD *)(v13 - 8);
  v65 = (*(_QWORD *)(v64 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v66 = (char *)&v21 - v65;
  v75 = *(_QWORD *)(v15 - 8);
  v67 = (*(_QWORD *)(v75 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v74 = (char *)&v21 - v67;
  v68 = swift_getAssociatedTypeWitness();
  v69 = *(_QWORD *)(v68 - 8);
  v70 = (*(_QWORD *)(v69 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v79);
  v77 = (char *)&v21 - v70;
  v80 = dispatch thunk of Sequence.underestimatedCount.getter();
  v83 = Array.init()();
  v73 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v80);
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v74, v76, v79);
  dispatch thunk of Sequence.makeIterator()();
  result = v80;
  if (v80 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_32:
    __break(1u);
    return result;
  }
  v32 = 0;
  for (i = v37; ; i = v22)
  {
    v30 = i;
    v31 = v32;
    if (v32 == v80)
      goto LABEL_16;
    if (v31 < 0 || v31 >= v80)
      goto LABEL_15;
    v81 = v31;
    if (v80 < 0)
      goto LABEL_14;
    if (v31 >= v80)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_14:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_15:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
LABEL_16:
      v81 = 0;
      v82 = 1;
      v28 = v31;
      goto LABEL_17;
    }
    v29 = v31 + 1;
    if (__OFADD__(v31, 1))
      goto LABEL_32;
    v82 = 0;
    v28 = v29;
LABEL_17:
    v27 = v28;
    if ((v82 & 1) != 0)
      break;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v61, 1, AssociatedTypeWitness) == 1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    v20 = v30;
    v34(v61, v49);
    v22 = v20;
    if (v20)
    {
      (*(void (**)(char *, uint64_t))(v69 + 8))(v77, v68);
      outlined destroy of ContiguousArray<A1>();
      (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v38, v49, v36);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v61, AssociatedTypeWitness);
      return v21;
    }
    (*(void (**)(char *, uint64_t))(v64 + 8))(v61, AssociatedTypeWitness);
    ContiguousArray.append(_:)();
    result = v22;
    v32 = v27;
  }
  for (j = v30; ; j = v23)
  {
    v25 = j;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v63, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v69 + 8))(v77, v68);
      outlined destroy of A.Element?(v63, AssociatedTypeWitness);
      v24 = v83;
      swift_retain();
      swift_release();
      return v24;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v66, v63, AssociatedTypeWitness);
    v18 = v25;
    v34(v66, v51);
    v23 = v18;
    if (v18)
      break;
    (*(void (**)(char *, uint64_t))(v64 + 8))(v66, AssociatedTypeWitness);
    ContiguousArray.append(_:)();
  }
  (*(void (**)(char *, uint64_t))(v64 + 8))(v66, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v77, v68);
  outlined destroy of ContiguousArray<A1>();
  (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v38, v51, v36);
  return v21;
}

id _SFPBCard.__allocating_init(data:)(uint64_t a1, unint64_t a2)
{
  id v2;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc _SFPBCard.init(data:)(a1, a2);
}

id SFCard.__allocating_init(protobuf:)(void *a1)
{
  id v1;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc SFCard.init(protobuf:)(a1);
}

id closure #2 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = PaymentsAppResolutionFlowStrategy.makeAppSelectionCommand(app:)(*a1);
  *a2 = result;
  return result;
}

void closure #3 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(uint64_t a1, id a2, void *a3)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v25;
  void *v26;
  id v27;
  id v28[2];
  id v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;

  v33 = a1;
  v32 = a2;
  v31 = a3;
  v25 = objc_msgSend(a2, sel_commands);
  if (v25)
  {
    type metadata accessor for SFAbstractCommand();
    v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v23 = (void *)v22;
  }
  else
  {
    v23 = 0;
  }
  v30 = v23;
  if (v23)
  {
    swift_bridgeObjectRetain();
    outlined destroy of [SFCardSection]();
    swift_bridgeObjectRetain();
    v28[1] = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SFAbstractCommand]);
    lazy protocol witness table accessor for type [SFAbstractCommand] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [SFCardSection]();
    v21 = v29;
    swift_bridgeObjectRelease();
    if (v29)
    {
      v28[0] = objc_msgSend(v29, sel_value);
      if (v28[0])
      {
        v20 = v28[0];
        v3 = v28[0];
        outlined destroy of SFRichText?(v28);

        v27 = objc_msgSend(v20, sel_referentialCommand);
        if (v27)
        {
          v18 = v27;
          v4 = v27;
          outlined destroy of SFRichText?(&v27);

          v19 = objc_msgSend(a3, sel_referencedCommands);
          if (v19)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
            v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            v17 = v16;
          }
          else
          {
            v17 = 0;
          }
          if (!v17)
          {
            LOBYTE(v6) = 2;
            v7 = 356;
            LODWORD(v8) = 0;
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
          Array.subscript.getter();
          swift_getObjectType();
          v15 = objc_msgSend(v26, sel_aceId);
          if (v15)
          {
            v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v12 = v5;

            v13 = v11;
            v14 = v12;
          }
          else
          {
            v13 = 0;
            v14 = 0;
          }
          if (v14)
          {
            v9 = MEMORY[0x24957220C](v13);
            swift_bridgeObjectRelease();
            v10 = (void *)v9;
          }
          else
          {
            v10 = 0;
          }
          objc_msgSend(v18, sel_setReferenceIdentifier_, v6, v7, v8);

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined destroy of SFRichText?(&v27);

        }
      }
      else
      {
        outlined destroy of SFRichText?(v28);

      }
    }
  }
  else
  {
    outlined destroy of [SFCardSection]();
  }
}

uint64_t thunk for @callee_guaranteed (@unowned Int, @guaranteed SFCardSection) -> ()(_QWORD *a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  return a2(*a1, a1[1]);
}

id _SFPBCard.__allocating_init(facade:)(void *a1)
{
  id v1;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc _SFPBCard.init(facade:)(a1);
}

void *closure #4 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(void *a1, uint64_t a2)
{
  id *v2;
  id v3;
  Class isa;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  _allocateUninitializedArray<A>(_:)();
  *v2 = PaymentsAppResolutionFlowStrategy.makeAppSelectionCommand(app:)(a2);
  _finalizeUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setCommands_, isa);

  v3 = a1;
  return a1;
}

uint64_t PaymentsAppResolutionFlowStrategy.deinit()
{
  uint64_t v0;
  uint64_t v2;

  outlined destroy of [SFCardSection]();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 32);
  __swift_destroy_boxed_opaque_existential_0(v0 + 72);
  __swift_destroy_boxed_opaque_existential_0(v0 + 112);
  swift_release();
  return v2;
}

uint64_t PaymentsAppResolutionFlowStrategy.__deallocating_deinit()
{
  PaymentsAppResolutionFlowStrategy.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for AppResolutionOnDeviceFlowStrategyAsync.resolveApp(input:) in conformance PaymentsAppResolutionFlowStrategy<A>(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>;
  return PaymentsAppResolutionFlowStrategy.resolveApp(input:)(a1);
}

uint64_t protocol witness for AppResolutionOnDeviceFlowStrategyAsync.makeAppResolutionSuccessfulResponse(app:) in conformance PaymentsAppResolutionFlowStrategy<A1>()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return AppResolutionOnDeviceFlowStrategyAsync.makeAppResolutionSuccessfulResponse(app:)();
}

uint64_t protocol witness for AppResolutionOnDeviceFlowStrategyAsync.makeAppResolutionUnsuccessfulResponse(reason:) in conformance PaymentsAppResolutionFlowStrategy<A1>()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return AppResolutionOnDeviceFlowStrategyAsync.makeAppResolutionUnsuccessfulResponse(reason:)();
}

uint64_t protocol witness for AppResolutionOnDeviceFlowStrategyAsync.makeErrorResponse(error:) in conformance PaymentsAppResolutionFlowStrategy<A1>()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return AppResolutionOnDeviceFlowStrategyAsync.makeErrorResponse(error:)();
}

uint64_t protocol witness for AppConfirmationStrategyAsync.parseConfirmationResponse(input:) in conformance PaymentsAppResolutionFlowStrategy<A>(uint64_t a1)
{
  return PaymentsAppResolutionFlowStrategy.parseConfirmationResponse(input:)(a1);
}

uint64_t protocol witness for AppConfirmationStrategyAsync.makeConfirmationPrompt(app:) in conformance PaymentsAppResolutionFlowStrategy<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return PaymentsAppResolutionFlowStrategy.makeConfirmationPrompt(app:)(a1, a2);
}

uint64_t protocol witness for AppConfirmationStrategyAsync.makeRepromptOnEmptyParse(app:) in conformance PaymentsAppResolutionFlowStrategy<A1>()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return AppConfirmationStrategyAsync.makeRepromptOnEmptyParse(app:)();
}

uint64_t protocol witness for AppConfirmationStrategyAsync.makeRepromptOnLowConfidence(app:) in conformance PaymentsAppResolutionFlowStrategy<A1>()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return AppConfirmationStrategyAsync.makeRepromptOnLowConfidence(app:)();
}

uint64_t protocol witness for AppConfirmationStrategyAsync.makeConfirmationRejectedResponse(app:) in conformance PaymentsAppResolutionFlowStrategy<A1>()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return AppConfirmationStrategyAsync.makeConfirmationRejectedResponse(app:)();
}

uint64_t protocol witness for AppConfirmationStrategyAsync.makeConfirmationCancelledResponse(app:) in conformance PaymentsAppResolutionFlowStrategy<A1>()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return AppConfirmationStrategyAsync.makeConfirmationCancelledResponse(app:)();
}

uint64_t protocol witness for AppConfirmationStrategyAsync.makeConfirmationErrorResponse(error:app:) in conformance PaymentsAppResolutionFlowStrategy<A1>()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return AppConfirmationStrategyAsync.makeConfirmationErrorResponse(error:app:)();
}

uint64_t protocol witness for AppDisambiguationStrategyAsync.parseDisambiguationResponse(input:) in conformance PaymentsAppResolutionFlowStrategy<A>(uint64_t a1)
{
  return PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse(input:)(a1);
}

uint64_t protocol witness for AppDisambiguationStrategyAsync.makeDisambiguationPrompt(apps:) in conformance PaymentsAppResolutionFlowStrategy<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:)(a1, a2);
}

uint64_t protocol witness for AppDisambiguationStrategyAsync.makeRepromptOnEmptyParse(apps:) in conformance PaymentsAppResolutionFlowStrategy<A1>()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return AppDisambiguationStrategyAsync.makeRepromptOnEmptyParse(apps:)();
}

uint64_t protocol witness for AppDisambiguationStrategyAsync.makeRepromptOnLowConfidence(apps:) in conformance PaymentsAppResolutionFlowStrategy<A1>()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return AppDisambiguationStrategyAsync.makeRepromptOnLowConfidence(apps:)();
}

uint64_t protocol witness for AppDisambiguationStrategyAsync.makeDisambiguationCancelResponse(apps:) in conformance PaymentsAppResolutionFlowStrategy<A1>()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return AppDisambiguationStrategyAsync.makeDisambiguationCancelResponse(apps:)();
}

uint64_t protocol witness for AppDisambiguationStrategyAsync.makeDisambiguationErrorResponse(error:apps:) in conformance PaymentsAppResolutionFlowStrategy<A1>()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return AppDisambiguationStrategyAsync.makeDisambiguationErrorResponse(error:apps:)();
}

id @nonobjc _SFPBCard.init(data:)(uint64_t a1, unint64_t a2)
{
  id v3;
  Class isa;
  Class v5;
  void *v8;

  if ((a2 & 0xF000000000000000) == 0xF000000000000000)
  {
    v5 = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(a1, a2);
    v5 = isa;
  }
  v3 = objc_msgSend(v8, sel_initWithData_);

  return v3;
}

id @nonobjc SFCard.init(protobuf:)(void *a1)
{
  void *v1;
  id v4;

  v4 = objc_msgSend(v1, sel_initWithProtobuf_);

  return v4;
}

id @nonobjc _SFPBCard.init(facade:)(void *a1)
{
  void *v1;
  id v4;

  v4 = objc_msgSend(v1, sel_initWithFacade_);

  return v4;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v4)(void);
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v12 = a3;
  v9 = a4;
  v10 = *(_QWORD *)(a3 - 8);
  v8 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (void (*)(void))MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v7 - v8;
  v4();
  v13 = dispatch thunk of CustomStringConvertible.description.getter();
  v14 = v5;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v11, v12);
  return v13;
}

uint64_t sub_247066B54()
{
  return swift_deallocObject();
}

uint64_t sub_247066B7C()
{
  return swift_deallocObject();
}

uint64_t sub_247066BA4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247066BE0()
{
  swift_release();
  return swift_deallocObject();
}

_OWORD *outlined init with take of Any?(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  a2[1] = a1[1];
  return a2;
}

uint64_t sub_247066C80()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247066CBC()
{
  return swift_deallocObject();
}

uint64_t sub_247066CE4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)(a1, v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[2]);
}

void *outlined init with copy of AppResolutionResult.AppResolutionResultError?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for AppResolutionResult.AppResolutionResultError();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppResolutionResult.AppResolutionResultError?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of AppResolutionResult.AppResolutionResultError?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for AppResolutionResult.AppResolutionResultError();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for implicit closure #4 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return implicit closure #4 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)(v1, a1);
}

uint64_t sub_247066EA4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
  v1 = lazy protocol witness table accessor for type [App] and conformance [A]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type [App] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [App] and conformance [A];
  if (!lazy protocol witness table cache variable for type [App] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [App]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12F8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [App] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [App] and conformance [A];
  if (!lazy protocol witness table cache variable for type [App] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [App]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [App] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [App] and conformance [A];
  if (!lazy protocol witness table cache variable for type [App] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [App]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [App] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t sub_247066F9C()
{
  return swift_deallocObject();
}

uint64_t sub_247066FC4()
{
  return swift_deallocObject();
}

uint64_t sub_247066FEC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247067028()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470670D4()
{
  return swift_deallocObject();
}

NSJSONWritingOptions partial apply for implicit closure #7 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  uint64_t v0;

  return NSJSONWritingOptions.init(rawValue:)(*(_QWORD *)(v0 + 16));
}

uint64_t partial apply for implicit closure #8 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  return implicit closure #6 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)();
}

uint64_t sub_24706712C()
{
  return swift_deallocObject();
}

uint64_t sub_247067154()
{
  return swift_deallocObject();
}

uint64_t sub_24706717C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470671B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470671F4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247067230()
{
  return swift_deallocObject();
}

uint64_t sub_247067258()
{
  return swift_deallocObject();
}

uint64_t sub_247067280()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470672BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470672F8()
{
  return swift_deallocObject();
}

uint64_t sub_247067320()
{
  return swift_deallocObject();
}

uint64_t sub_247067348()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247067384()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470673C0()
{
  return swift_deallocObject();
}

uint64_t sub_2470673E8()
{
  return swift_deallocObject();
}

uint64_t sub_247067410()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24706744C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247067488()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470674C4()
{
  return swift_deallocObject();
}

uint64_t sub_2470674EC()
{
  return swift_deallocObject();
}

uint64_t sub_247067514()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247067550()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24706758C()
{
  return swift_deallocObject();
}

uint64_t sub_2470675C4()
{
  return swift_deallocObject();
}

uint64_t sub_2470675EC()
{
  return swift_deallocObject();
}

uint64_t sub_247067614()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247067650()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24706768C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  return implicit closure #2 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)();
}

uint64_t sub_2470676D0()
{
  return swift_deallocObject();
}

uint64_t sub_2470676F8()
{
  return swift_deallocObject();
}

uint64_t sub_247067720()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24706775C()
{
  swift_release();
  return swift_deallocObject();
}

__n128 outlined init with take of Any(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 16);
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t sub_2470677B4()
{
  return swift_deallocObject();
}

uint64_t sub_2470677EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Input() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseConfirmationResponse(input:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Input() - 8) + 80);
  return implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseConfirmationResponse(input:)(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_24706788C()
{
  return swift_deallocObject();
}

uint64_t sub_2470678B4()
{
  return swift_deallocObject();
}

uint64_t sub_2470678DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247067918()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247067954()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247067990()
{
  return swift_deallocObject();
}

uint64_t sub_2470679B8()
{
  return swift_deallocObject();
}

uint64_t sub_2470679E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247067A1C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined destroy of ConfirmationResponse?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for ConfirmationResponse();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

void *outlined init with copy of ConfirmationResponse?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for ConfirmationResponse();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t sub_247067B84()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247067BC0()
{
  return swift_deallocObject();
}

uint64_t sub_247067BE8()
{
  return swift_deallocObject();
}

uint64_t sub_247067C10()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247067C4C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247067C88()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Parse.DirectInvocation() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse(input:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Parse.DirectInvocation() - 8) + 80);
  return implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse(input:)(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_247067D28()
{
  return swift_deallocObject();
}

uint64_t sub_247067D50()
{
  return swift_deallocObject();
}

uint64_t sub_247067D78()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247067DB4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined consume of PaymentsDirectInvocations(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1 || a3 == 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_247067E54()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247067E90()
{
  return swift_deallocObject();
}

uint64_t sub_247067EB8()
{
  return swift_deallocObject();
}

uint64_t sub_247067EE0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247067F1C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247067F58()
{
  return swift_deallocObject();
}

uint64_t sub_247067F90()
{
  return swift_deallocObject();
}

uint64_t sub_247067FB8()
{
  return swift_deallocObject();
}

uint64_t sub_247067FE0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24706801C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247068058()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:)(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;

  return closure #1 in PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:)(a1, a2, v2) & 1;
}

unint64_t type metadata accessor for SAUIAssistantUtteranceView()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SAUIAssistantUtteranceView;
  if (!lazy cache variable for type metadata for SAUIAssistantUtteranceView)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAUIAssistantUtteranceView);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t partial apply for implicit closure #3 in PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return implicit closure #1 in PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:)(v1, a1);
}

uint64_t sub_24706819C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = type metadata accessor for App();
  v1 = lazy protocol witness table accessor for type App and conformance App();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SASTTemplateItem]);
  v1 = lazy protocol witness table accessor for type [SASTTemplateItem] and conformance [A]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = type metadata accessor for RRCandidate();
  v1 = lazy protocol witness table accessor for type RRCandidate and conformance RRCandidate();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type App and conformance App()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type App and conformance App;
  if (!lazy protocol witness table cache variable for type App and conformance App)
  {
    v0 = type metadata accessor for App();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BE90BD0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type App and conformance App);
    return v1;
  }
  return v3;
}

uint64_t sub_247068290()
{
  return swift_deallocObject();
}

uint64_t sub_2470682B8()
{
  return swift_deallocObject();
}

uint64_t sub_2470682E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24706831C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247068358()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247068394()
{
  return swift_deallocObject();
}

uint64_t sub_2470683BC()
{
  return swift_deallocObject();
}

uint64_t sub_2470683E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247068420()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24706845C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247068498()
{
  return swift_deallocObject();
}

uint64_t sub_2470684C0()
{
  return swift_deallocObject();
}

uint64_t sub_2470684E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247068524()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(id *a1)
{
  uint64_t v1;

  return closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(a1, *(_BYTE *)(v1 + 16) & 1, *(_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type [SAAceView] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [SAAceView] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SAAceView] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SAAceView]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [SAAceView] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t type metadata instantiation function for PaymentsAppResolutionFlowStrategy()
{
  return swift_allocateGenericClassMetadata();
}

uint64_t type metadata completion function for PaymentsAppResolutionFlowStrategy()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t type metadata accessor for PaymentsAppResolutionFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PaymentsAppResolutionFlowStrategy);
}

uint64_t base witness table accessor for AppConfirmationStrategyAsync in PaymentsAppResolutionFlowStrategy<A>(uint64_t a1)
{
  return MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsAppResolutionFlowStrategy<A>, a1);
}

uint64_t base witness table accessor for AppDisambiguationStrategyAsync in PaymentsAppResolutionFlowStrategy<A>(uint64_t a1)
{
  return MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsAppResolutionFlowStrategy<A>, a1);
}

unint64_t lazy protocol witness table accessor for type [SAUIListItem] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [SAUIListItem] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SAUIListItem] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SAUIListItem]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [SAUIListItem] and conformance [A]);
    return v1;
  }
  return v3;
}

void *partial apply for closure #4 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(void *a1, uint64_t a2)
{
  return closure #4 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(a1, a2);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed SAUIListItem, @guaranteed App) -> (@owned SAUIListItem)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return thunk for @callee_guaranteed (@guaranteed SASTColumnDataListItem, @guaranteed App) -> (@owned SASTTemplateItem)(a1, *(uint64_t (**)(_QWORD, _QWORD))(v2 + 16), a2);
}

unint64_t type metadata accessor for SAUIListItem()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SAUIListItem;
  if (!lazy cache variable for type metadata for SAUIListItem)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAUIListItem);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Zip2Sequence<[SAUIListItem], [App]> and conformance Zip2Sequence<A, B>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Zip2Sequence<[SAUIListItem], [App]> and conformance Zip2Sequence<A, B>;
  if (!lazy protocol witness table cache variable for type Zip2Sequence<[SAUIListItem], [App]> and conformance Zip2Sequence<A, B>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Zip2Sequence<[SAUIListItem], [App]>);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE2620], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Zip2Sequence<[SAUIListItem], [App]> and conformance Zip2Sequence<A, B>);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Zip2Sequence<[SAUIListItem], [App]>()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

unint64_t type metadata accessor for SFCard()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SFCard;
  if (!lazy cache variable for type metadata for SFCard)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SFCard);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for _SFPBCard()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for _SFPBCard;
  if (!lazy cache variable for type metadata for _SFPBCard)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for _SFPBCard);
    return ObjCClassMetadata;
  }
  return v2;
}

id partial apply for closure #2 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #2 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(a1, a2);
}

unint64_t lazy protocol witness table accessor for type [SFCardSection] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [SFCardSection] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SFCardSection] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [SFCardSection] and conformance [A]);
    return v1;
  }
  return v3;
}

void partial apply for closure #3 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(uint64_t a1, void *a2)
{
  uint64_t v2;

  closure #3 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(a1, a2, *(void **)(v2 + 16));
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned Int, @guaranteed SFCardSection) -> ()(_QWORD *a1)
{
  uint64_t v1;

  return thunk for @callee_guaranteed (@unowned Int, @guaranteed SFCardSection) -> ()(a1, *(uint64_t (**)(_QWORD, _QWORD))(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type EnumeratedSequence<[SFCardSection]> and conformance EnumeratedSequence<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type EnumeratedSequence<[SFCardSection]> and conformance EnumeratedSequence<A>;
  if (!lazy protocol witness table cache variable for type EnumeratedSequence<[SFCardSection]> and conformance EnumeratedSequence<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for EnumeratedSequence<[SFCardSection]>);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE2FC0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type EnumeratedSequence<[SFCardSection]> and conformance EnumeratedSequence<A>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [SASTColumnDataListItem] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [SASTColumnDataListItem] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SASTColumnDataListItem] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SASTColumnDataListItem]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [SASTColumnDataListItem] and conformance [A]);
    return v1;
  }
  return v3;
}

void *partial apply for closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(void *a1, uint64_t a2)
{
  return closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(a1, a2);
}

unint64_t lazy protocol witness table accessor for type Zip2Sequence<[SASTColumnDataListItem], [App]> and conformance Zip2Sequence<A, B>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Zip2Sequence<[SASTColumnDataListItem], [App]> and conformance Zip2Sequence<A, B>;
  if (!lazy protocol witness table cache variable for type Zip2Sequence<[SASTColumnDataListItem], [App]> and conformance Zip2Sequence<A, B>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Zip2Sequence<[SASTColumnDataListItem], [App]>);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE2620], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Zip2Sequence<[SASTColumnDataListItem], [App]> and conformance Zip2Sequence<A, B>);
    return v1;
  }
  return v3;
}

unint64_t type metadata accessor for INIntent()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for INIntent;
  if (!lazy cache variable for type metadata for INIntent)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INIntent);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [SFAbstractCommand] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [SFAbstractCommand] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SFAbstractCommand] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SFAbstractCommand]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [SFAbstractCommand] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of A.Element?(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ContiguousArray<A1>()
{
  swift_release();
}

unint64_t lazy protocol witness table accessor for type Input and conformance Input()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Input and conformance Input;
  if (!lazy protocol witness table cache variable for type Input and conformance Input)
  {
    v0 = type metadata accessor for Input();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BE98DE0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input);
    return v1;
  }
  return v3;
}

_QWORD *outlined init with copy of [App](uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  v4 = *a1;
  swift_bridgeObjectRetain();
  result = a2;
  *a2 = v4;
  return result;
}

uint64_t sub_247068DCC()
{
  uint64_t v0;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v2 = *(_QWORD *)(v4 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v4);
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>)
                 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v3, *(_QWORD *)(v1 + ((v3 + *(_QWORD *)(v2 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)));
}

_QWORD *outlined init with copy of Result<AppResolutionResult, Error>(id *a1, _QWORD *a2)
{
  uint64_t v2;
  id v3;
  id v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<AppResolutionResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = *a1;
    v3 = *a1;
    *a2 = v5;
  }
  else
  {
    v2 = type metadata accessor for AppResolutionResult();
    (*(void (**)(_QWORD *, id *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  }
  swift_storeEnumTagMultiPayload();
  return a2;
}

uint64_t sub_247068F9C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_247068FD8()
{
  return swift_deallocObject();
}

uint64_t sub_247069000()
{
  return swift_deallocObject();
}

uint64_t sub_247069028()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247069064()
{
  swift_release();
  return swift_deallocObject();
}

void *outlined assign with take of AppResolutionResult.AppResolutionResultError?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(const void *, uint64_t, uint64_t);

  v7 = type metadata accessor for AppResolutionResult.AppResolutionResultError();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a2, 1))
  {
    if (v9(a1, 1, v7))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppResolutionResult.AppResolutionResultError?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a2, a1, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
    }
  }
  else if (v9(a1, 1, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a2, v7);
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppResolutionResult.AppResolutionResultError?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a2, a1, v7);
  }
  return a2;
}

uint64_t sub_247069200()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for AppResolutionResult.AppResolutionResultError() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  type metadata accessor for AppResolutionResult.AppResolutionResultError();
  return implicit closure #2 in closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)();
}

uint64_t sub_2470692A0()
{
  return swift_deallocObject();
}

uint64_t sub_2470692C8()
{
  return swift_deallocObject();
}

uint64_t sub_2470692F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24706932C()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type AppResolutionResult.AppResolutionResultError and conformance AppResolutionResult.AppResolutionResultError()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AppResolutionResult.AppResolutionResultError and conformance AppResolutionResult.AppResolutionResultError;
  if (!lazy protocol witness table cache variable for type AppResolutionResult.AppResolutionResultError and conformance AppResolutionResult.AppResolutionResultError)
  {
    v0 = type metadata accessor for AppResolutionResult.AppResolutionResultError();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BE90D48], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AppResolutionResult.AppResolutionResultError and conformance AppResolutionResult.AppResolutionResultError);
    return v1;
  }
  return v3;
}

uint64_t PaymentsUnsupportedIntentCATs.disabledSurfIntent(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsUnsupportedIntent#DisabledSurfIntent", 0x2CuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsUnsupportedIntentCATs.disabledSurfIntent()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t PaymentsUnsupportedIntentCATs.disabledSurfIntent()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsUnsupportedIntent#DisabledSurfIntent", 0x2CuLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsUnsupportedIntent#DisabledSurfIntent", 0x2CuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *PaymentsUnsupportedIntentCATs.disabledSurfIntent()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v4 = (_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v4 + 8))(v4);
}

uint64_t PaymentsUnsupportedIntentCATs.unsupportedSurfIntent(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsUnsupportedIntent#UnsupportedSurfIntent", 0x2FuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsUnsupportedIntentCATs.unsupportedSurfIntent()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t PaymentsUnsupportedIntentCATs.unsupportedSurfIntent()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsUnsupportedIntent#UnsupportedSurfIntent", 0x2FuLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsUnsupportedIntent#UnsupportedSurfIntent", 0x2FuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for PaymentsUnsupportedIntentCATs()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for PaymentsUnsupportedIntentCATs;
  if (!type metadata singleton initialization cache for PaymentsUnsupportedIntentCATs)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for PaymentsUnsupportedIntentCATs()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t PaymentsUnsupportedIntentCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_allocObject();
  return PaymentsUnsupportedIntentCATs.init(templateDir:options:globals:)(a1, a2, a3);
}

uint64_t PaymentsUnsupportedIntentCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;

  v17 = a1;
  v15 = a2;
  v13 = a3;
  v22 = 0;
  v21 = 0;
  v20 = 0;
  v19 = 0;
  v16 = type metadata accessor for CATOption();
  v14 = *(_QWORD *)(v16 - 8);
  v9 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v11 = (char *)&v9 - v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (const void *)MEMORY[0x24BDAC7A8](v17);
  v12 = (char *)&v9 - v10;
  v21 = v4;
  v20 = v5;
  v19 = v6;
  v22 = v3;
  outlined init with copy of URL?(v4, (char *)&v9 - v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v11, v15, v16);
  v7 = v13;
  v18 = CATWrapper.init(templateDir:options:globals:)();
  swift_retain();
  v22 = v18;

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
  outlined destroy of URL?(v17);
  swift_release();
  return v18;
}

uint64_t PaymentsUnsupportedIntentCATs.deinit()
{
  return CATWrapper.deinit();
}

uint64_t PaymentsUnsupportedIntentCATs.__deallocating_deinit()
{
  PaymentsUnsupportedIntentCATs.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PaymentsUnsupportedIntentCATs()
{
  return type metadata accessor for PaymentsUnsupportedIntentCATs();
}

uint64_t Siri_Nlu_External_SystemDialogAct.init(systemOffered:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;

  v13 = a2;
  v16 = a1;
  v21 = 0;
  v20 = 0;
  v6 = 0;
  v15 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  v14 = *(_QWORD *)(v15 - 8);
  v7 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v12 = (char *)&v6 - v7;
  v19 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v17 = *(_QWORD *)(v19 - 8);
  v9 = *(_QWORD *)(v17 + 64);
  v8 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v16);
  v11 = (char *)&v6 - v8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - v10;
  v18 = (char *)&v6 - v10;
  v21 = (char *)&v6 - v10;
  v20 = v3;
  Siri_Nlu_External_SystemDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v4, v11, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, v16, v15);
  Siri_Nlu_External_SystemDialogAct.offered.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(v13, v18, v19);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v18, v19);
}

uint64_t Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;

  v13 = a2;
  v16 = a1;
  v21 = 0;
  v20 = 0;
  v6 = 0;
  v15 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  v14 = *(_QWORD *)(v15 - 8);
  v7 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v12 = (char *)&v6 - v7;
  v19 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v17 = *(_QWORD *)(v19 - 8);
  v9 = *(_QWORD *)(v17 + 64);
  v8 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v16);
  v11 = (char *)&v6 - v8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - v10;
  v18 = (char *)&v6 - v10;
  v21 = (char *)&v6 - v10;
  v20 = v3;
  Siri_Nlu_External_SystemDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v4, v11, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, v16, v15);
  Siri_Nlu_External_SystemDialogAct.prompted.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(v13, v18, v19);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v18, v19);
}

uint64_t Siri_Nlu_External_SystemDialogAct.init(gaveOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;

  v13 = a2;
  v16 = a1;
  v21 = 0;
  v20 = 0;
  v6 = 0;
  v15 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
  v14 = *(_QWORD *)(v15 - 8);
  v7 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v12 = (char *)&v6 - v7;
  v19 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v17 = *(_QWORD *)(v19 - 8);
  v9 = *(_QWORD *)(v17 + 64);
  v8 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v16);
  v11 = (char *)&v6 - v8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - v10;
  v18 = (char *)&v6 - v10;
  v21 = (char *)&v6 - v10;
  v20 = v3;
  Siri_Nlu_External_SystemDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v4, v11, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, v16, v15);
  Siri_Nlu_External_SystemDialogAct.gaveOptions.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(v13, v18, v19);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v18, v19);
}

uint64_t Siri_Nlu_External_SystemPrompted.init(_:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;

  v9 = a2;
  v23 = a1;
  v29 = 0;
  v28 = 0;
  v27 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  v10 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v26 = (char *)&v8 - v10;
  v11 = 0;
  v25 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v24 = *(_QWORD *)(v25 - 8);
  v12 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v8 - v12;
  v14 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v15 = (char *)&v8 - v14;
  v29 = (char *)&v8 - v14;
  v22 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  v19 = *(_QWORD *)(v22 - 8);
  v17 = *(_QWORD *)(v19 + 64);
  v16 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v23);
  v21 = (char *)&v8 - v16;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v20 = (char *)&v8 - v18;
  v28 = (char *)&v8 - v18;
  v27 = v6;
  Siri_Nlu_External_SystemPrompted.init()();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v20, v21, v22);
  outlined init with copy of Siri_Nlu_External_UsoGraph?(v23, v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v26, 1, v25) == 1)
  {
    outlined destroy of Siri_Nlu_External_UsoGraph?((uint64_t)v26);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v15, v26, v25);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v13, v15, v25);
    Siri_Nlu_External_SystemPrompted.target.setter();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v15, v25);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(v9, v20, v22);
  outlined destroy of Siri_Nlu_External_UsoGraph?((uint64_t)v23);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v20, v22);
}

void *outlined init with copy of Siri_Nlu_External_UsoGraph?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of Siri_Nlu_External_UsoGraph?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t static Siri_Nlu_External_SystemPrompted.from(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;

  v12 = a2;
  v18 = a1;
  v28 = 0;
  v27 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  v13 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v21 = (uint64_t)&v11 - v13;
  v14 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v18);
  v15 = (char *)&v11 - v14;
  v16 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v3);
  v23 = (char *)&v11 - v16;
  v28 = (char *)&v11 - v16;
  v27 = v5;
  v25 = 0;
  v20 = type metadata accessor for UsoTaskBuilder();
  v17 = _allocateUninitializedArray<A>(_:)();
  v19 = v6;
  swift_retain();
  v7 = v17;
  *v19 = v18;
  _finalizeUninitializedArray<A>(_:)();
  v22 = v7;
  v8 = type metadata accessor for UsoBuilderOptions();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v21, 1);
  v24 = MEMORY[0x2495715A0](v22, v21);
  outlined destroy of UsoBuilderOptions?(v21);
  swift_bridgeObjectRelease();
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  v26 = 0;
  swift_release();
  v9 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v23, 0, 1);
  outlined init with copy of Siri_Nlu_External_UsoGraph?(v23, v15);
  Siri_Nlu_External_SystemPrompted.init(_:)(v15, v12);
  return outlined destroy of Siri_Nlu_External_UsoGraph?((uint64_t)v23);
}

uint64_t Siri_Nlu_External_SystemOffered.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;

  v13 = a2;
  v16 = a1;
  v21 = 0;
  v20 = 0;
  v6 = 0;
  v15 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v14 = *(_QWORD *)(v15 - 8);
  v7 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v12 = (char *)&v6 - v7;
  v19 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  v17 = *(_QWORD *)(v19 - 8);
  v9 = *(_QWORD *)(v17 + 64);
  v8 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v16);
  v11 = (char *)&v6 - v8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - v10;
  v18 = (char *)&v6 - v10;
  v21 = (char *)&v6 - v10;
  v20 = v3;
  Siri_Nlu_External_SystemOffered.init()();
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v4, v11, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, v16, v15);
  Siri_Nlu_External_SystemOffered.offeredAct.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(v13, v18, v19);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v18, v19);
}

uint64_t static Siri_Nlu_External_SystemOffered.from(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a2;
  v10 = a1;
  v15 = 0;
  v6 = 0;
  v9 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  v8 = *(_QWORD *)(v9 - 8);
  v7 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v12 = (uint64_t)&v6 - v7;
  v11 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Siri_Nlu_External_UserDialogAct() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v12);
  v14 = (uint64_t)&v6 - v11;
  v15 = v3;
  (*(void (**)(uint64_t))(v4 + 16))(v2);
  Siri_Nlu_External_UserDialogAct.init(_:)(v12, v14);
  return Siri_Nlu_External_SystemOffered.init(_:)(v14, v13);
}

uint64_t Siri_Nlu_External_UserDialogAct.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;

  v13 = a2;
  v16 = a1;
  v21 = 0;
  v20 = 0;
  v6 = 0;
  v15 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  v14 = *(_QWORD *)(v15 - 8);
  v7 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v12 = (char *)&v6 - v7;
  v19 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v17 = *(_QWORD *)(v19 - 8);
  v9 = *(_QWORD *)(v17 + 64);
  v8 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v16);
  v11 = (char *)&v6 - v8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - v10;
  v18 = (char *)&v6 - v10;
  v21 = (char *)&v6 - v10;
  v20 = v3;
  Siri_Nlu_External_UserDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v4, v11, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, v16, v15);
  Siri_Nlu_External_UserDialogAct.wantedToProceed.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(v13, v18, v19);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v18, v19);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;

  v13 = a2;
  v16 = a1;
  v21 = 0;
  v20 = 0;
  v6 = 0;
  v15 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v14 = *(_QWORD *)(v15 - 8);
  v7 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v12 = (char *)&v6 - v7;
  v19 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v17 = *(_QWORD *)(v19 - 8);
  v9 = *(_QWORD *)(v17 + 64);
  v8 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v16);
  v11 = (char *)&v6 - v8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - v10;
  v18 = (char *)&v6 - v10;
  v21 = (char *)&v6 - v10;
  v20 = v3;
  Siri_Nlu_External_UserDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v4, v11, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, v16, v15);
  Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(v13, v18, v19);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v18, v19);
}

uint64_t Siri_Nlu_External_SystemGaveOptions.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;

  v12 = a2;
  v11 = a1;
  v17 = 0;
  v16 = 0;
  v14 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
  v13 = *(_QWORD *)(v14 - 8);
  v8 = *(_QWORD *)(v13 + 64);
  v7 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v11);
  v10 = (char *)&v6 - v7;
  v9 = v7;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - v9;
  v15 = (char *)&v6 - v9;
  v17 = (char *)&v6 - v9;
  v16 = v3;
  Siri_Nlu_External_SystemGaveOptions.init()();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v4, v10, v14);
  MEMORY[0x249571480](v11);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v12, v15, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v14);
}

uint64_t Siri_Nlu_External_UserStatedTask.init(_:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;

  v9 = a2;
  v23 = a1;
  v29 = 0;
  v28 = 0;
  v27 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  v10 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v26 = (char *)&v8 - v10;
  v11 = 0;
  v25 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v24 = *(_QWORD *)(v25 - 8);
  v12 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v8 - v12;
  v14 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v15 = (char *)&v8 - v14;
  v29 = (char *)&v8 - v14;
  v22 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v19 = *(_QWORD *)(v22 - 8);
  v17 = *(_QWORD *)(v19 + 64);
  v16 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v23);
  v21 = (char *)&v8 - v16;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v20 = (char *)&v8 - v18;
  v28 = (char *)&v8 - v18;
  v27 = v6;
  Siri_Nlu_External_UserStatedTask.init()();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v20, v21, v22);
  outlined init with copy of Siri_Nlu_External_UsoGraph?(v23, v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v26, 1, v25) == 1)
  {
    outlined destroy of Siri_Nlu_External_UsoGraph?((uint64_t)v26);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v15, v26, v25);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v13, v15, v25);
    Siri_Nlu_External_UserStatedTask.task.setter();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v15, v25);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(v9, v20, v22);
  outlined destroy of Siri_Nlu_External_UsoGraph?((uint64_t)v23);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v20, v22);
}

uint64_t static Siri_Nlu_External_UserStatedTask.from(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;

  v10 = a2;
  v16 = a1;
  v27 = 0;
  v26 = 0;
  v25 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  v11 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v12 = (char *)&v10 - v11;
  v13 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v10 - v11);
  v21 = (char *)&v10 - v13;
  v27 = (char *)&v10 - v13;
  v14 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v16);
  v19 = (uint64_t)&v10 - v14;
  v26 = v4;
  v23 = 0;
  v18 = type metadata accessor for UsoTaskBuilder();
  v15 = _allocateUninitializedArray<A>(_:)();
  v17 = v5;
  swift_retain();
  v6 = v15;
  *v17 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v20 = v6;
  v7 = type metadata accessor for UsoBuilderOptions();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v19, 1);
  v22 = MEMORY[0x2495715A0](v20, v19);
  outlined destroy of UsoBuilderOptions?(v19);
  swift_bridgeObjectRelease();
  v25 = v22;
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  v24 = 0;
  v8 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v21, 0, 1);
  outlined init with copy of Siri_Nlu_External_UsoGraph?(v21, v12);
  Siri_Nlu_External_UserStatedTask.init(_:)(v12, v10);
  outlined destroy of Siri_Nlu_External_UsoGraph?((uint64_t)v21);
  return swift_release();
}

uint64_t Siri_Nlu_External_UserDialogAct.usoTask.getter()
{
  uint64_t v1;

  static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoTask]);
  lazy protocol witness table accessor for type [UsoTask] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t lazy protocol witness table accessor for type [UsoTask] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [UsoTask] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UsoTask] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UsoTask]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [UsoTask] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t Siri_Nlu_External_UserDialogAct.contactId.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = 0;
  v24 = 0;
  v12 = 0;
  v20 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v19 = *(_QWORD *)(v20 - 8);
  v13 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v21 = (char *)&v4 - v13;
  v18 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v16 = *(_QWORD *)(v18 - 8);
  v14 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v18);
  v17 = (char *)&v4 - v14;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
  v15 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v23 = (uint64_t)&v4 - v15;
  v27 = v0;
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  Siri_Nlu_External_UserStatedTask.task.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v17, v18);
  v22 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v20);
  v26 = v22;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UsoEntityIdentifier]);
  lazy protocol witness table accessor for type [Siri_Nlu_External_UsoEntityIdentifier] and conformance [A]();
  Sequence.first(where:)();
  outlined destroy of [SFCardSection]();
  v10 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v11 + 48))(v23, 1) == 1)
  {
    v5 = 0;
    outlined destroy of Siri_Nlu_External_UsoEntityIdentifier?(v23);
    v8 = v5;
    v9 = v5;
  }
  else
  {
    v6 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
    v7 = v2;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v23, v10);
    v8 = v6;
    v9 = v7;
  }
  return v8;
}

uint64_t closure #1 in Siri_Nlu_External_UserDialogAct.contactId.getter(uint64_t a1)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[4];
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v26 = a1;
  v29 = 0;
  v14 = 0;
  v15 = type metadata accessor for Google_Protobuf_StringValue();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v18 = &v7[-v17];
  v27 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v24 = *(_QWORD *)(v27 - 8);
  v19 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v27);
  v25 = &v7[-v19];
  v29 = a1;
  v20 = Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter();
  v23 = v2;
  v3 = AppUtil.usoContactsBundleId.unsafeMutableAddressor();
  v21 = *(_QWORD *)v3;
  v22 = *((_QWORD *)v3 + 1);
  swift_bridgeObjectRetain();
  v28 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v24 + 16))(v25, v26, v27);
  if ((v28 & 1) != 0)
  {
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    v9 = Google_Protobuf_StringValue.value.getter();
    v11 = v4;
    (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v18, v15);
    UsoIdentifierNamespace.rawValue.getter(0);
    v10 = v5;
    v12 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v8 = v13;
  (*(void (**)(_BYTE *, uint64_t))(v24 + 8))(v25, v27);
  return v8 & 1;
}

unint64_t lazy protocol witness table accessor for type [Siri_Nlu_External_UsoEntityIdentifier] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Siri_Nlu_External_UsoEntityIdentifier] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Siri_Nlu_External_UsoEntityIdentifier] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Siri_Nlu_External_UsoEntityIdentifier]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Siri_Nlu_External_UsoEntityIdentifier] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of Siri_Nlu_External_UsoEntityIdentifier?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t Siri_Nlu_External_UserDialogAct.appId.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[32];
  _QWORD v55[3];
  uint64_t v56;
  _BYTE v57[32];
  uint64_t v58;

  v58 = v0;
  if (Siri_Nlu_External_UserDialogAct.usoTask.getter())
  {
    UsoTask.eraseToAny.getter();
    swift_release();
  }
  else
  {
    memset(v55, 0, sizeof(v55));
    v56 = 0;
  }
  if (!v56)
  {
    outlined destroy of FlowActivity?((uint64_t)v55);
    return 0;
  }
  outlined init with take of Any((uint64_t)v55, (uint64_t)v57);
  outlined init with copy of Any((uint64_t)v57, (uint64_t)v54);
  type metadata accessor for UsoTask_noVerb_common_Payment();
  if ((swift_dynamicCast() & 1) == 0)
  {
    type metadata accessor for UsoTask_pay_common_Payment();
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      swift_release();
      if (v45)
      {
        v29 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
        swift_release();
        v30 = v29;
      }
      else
      {
        v30 = 0;
      }
      swift_retain();
      if (v30)
      {
        v46 = v30;
      }
      else
      {
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
        v3 = swift_release();
        if (v44 && (v28 = MEMORY[0x2495716CC](v3), swift_release(), v28))
        {
          v26 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
          swift_release();
          v27 = v26;
        }
        else
        {
          v27 = 0;
        }
        swift_retain();
        if (v27)
        {
          v46 = v27;
        }
        else
        {
          swift_retain();
          dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
          v4 = swift_release();
          if (v43 && (v25 = MEMORY[0x2495716C0](v4), swift_release(), v25))
          {
            v46 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
            swift_release();
          }
          else
          {
            v46 = 0;
          }
          outlined destroy of ContiguousArray<A1>();
        }
        swift_release();
        outlined destroy of ContiguousArray<A1>();
      }
      swift_release();
      if (v46)
      {
        v24 = UsoEntity_common_App.appIdentifier.getter();
        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v54);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v57);
        return v24;
      }
    }
    else
    {
      type metadata accessor for UsoTask_requestMoney_common_Payment();
      if ((swift_dynamicCast() & 1) != 0)
      {
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
        swift_release();
        if (v49)
        {
          v22 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
          swift_release();
          v23 = v22;
        }
        else
        {
          v23 = 0;
        }
        swift_retain();
        if (v23)
        {
          v50 = v23;
        }
        else
        {
          swift_retain();
          dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
          v5 = swift_release();
          if (v48 && (v21 = MEMORY[0x2495716C0](v5), swift_release(), v21))
          {
            v19 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
            swift_release();
            v20 = v19;
          }
          else
          {
            v20 = 0;
          }
          swift_retain();
          if (v20)
          {
            v50 = v20;
          }
          else
          {
            swift_retain();
            dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
            v6 = swift_release();
            if (v47 && (v18 = MEMORY[0x2495716CC](v6), swift_release(), v18))
            {
              v50 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
              swift_release();
            }
            else
            {
              v50 = 0;
            }
            outlined destroy of ContiguousArray<A1>();
          }
          swift_release();
          outlined destroy of ContiguousArray<A1>();
        }
        swift_release();
        if (v50)
        {
          v17 = UsoEntity_common_App.appIdentifier.getter();
          swift_release();
          swift_release();
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v54);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v57);
          return v17;
        }
      }
      else
      {
        type metadata accessor for UsoTask_request_common_PaymentAccount();
        if ((swift_dynamicCast() & 1) != 0)
        {
          swift_retain();
          dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
          swift_release();
          if (v51)
          {
            v15 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
            swift_release();
            v16 = v15;
          }
          else
          {
            v16 = 0;
          }
          if (v16)
          {
            v14 = UsoEntity_common_App.appIdentifier.getter();
            swift_release();
            swift_release();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v54);
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v57);
            return v14;
          }
        }
        else
        {
          type metadata accessor for UsoTask_summarise_common_PaymentAccount();
          if ((swift_dynamicCast() & 1) != 0)
          {
            swift_retain();
            dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
            swift_release();
            if (v52)
            {
              v12 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
              swift_release();
              v13 = v12;
            }
            else
            {
              v13 = 0;
            }
            if (v13)
            {
              v11 = UsoEntity_common_App.appIdentifier.getter();
              swift_release();
              swift_release();
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v54);
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v57);
              return v11;
            }
          }
          else
          {
            type metadata accessor for UsoTask_noVerb_common_PaymentAccount();
            if ((swift_dynamicCast() & 1) == 0)
            {
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v54);
              goto LABEL_104;
            }
            swift_retain();
            dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
            swift_release();
            if (v53)
            {
              v9 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
              swift_release();
              v10 = v9;
            }
            else
            {
              v10 = 0;
            }
            if (v10)
            {
              v8 = UsoEntity_common_App.appIdentifier.getter();
              swift_release();
              swift_release();
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v54);
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v57);
              return v8;
            }
          }
        }
      }
    }
LABEL_102:
    swift_release();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v54);
LABEL_104:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v57);
    return 0;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  swift_release();
  if (v41)
  {
    v37 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
    swift_release();
    v38 = v37;
  }
  else
  {
    v38 = 0;
  }
  swift_retain();
  if (v38)
  {
    v42 = v38;
  }
  else
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    v1 = swift_release();
    if (v40 && (v36 = MEMORY[0x2495716CC](v1), swift_release(), v36))
    {
      v34 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
      swift_release();
      v35 = v34;
    }
    else
    {
      v35 = 0;
    }
    swift_retain();
    if (v35)
    {
      v42 = v35;
    }
    else
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      v2 = swift_release();
      if (v39 && (v33 = MEMORY[0x2495716C0](v2), swift_release(), v33))
      {
        v42 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
        swift_release();
      }
      else
      {
        v42 = 0;
      }
      outlined destroy of ContiguousArray<A1>();
    }
    swift_release();
    outlined destroy of ContiguousArray<A1>();
  }
  swift_release();
  if (!v42)
    goto LABEL_102;
  v31 = UsoEntity_common_App.appIdentifier.getter();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v54);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v57);
  return v31;
}

uint64_t Siri_Nlu_External_UserWantedToProceed.init(_:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;

  v9 = a2;
  v23 = a1;
  v29 = 0;
  v28 = 0;
  v27 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  v10 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v26 = (char *)&v8 - v10;
  v11 = 0;
  v25 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v24 = *(_QWORD *)(v25 - 8);
  v12 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v8 - v12;
  v14 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v15 = (char *)&v8 - v14;
  v29 = (char *)&v8 - v14;
  v22 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  v19 = *(_QWORD *)(v22 - 8);
  v17 = *(_QWORD *)(v19 + 64);
  v16 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v23);
  v21 = (char *)&v8 - v16;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v20 = (char *)&v8 - v18;
  v28 = (char *)&v8 - v18;
  v27 = v6;
  Siri_Nlu_External_UserWantedToProceed.init()();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v20, v21, v22);
  outlined init with copy of Siri_Nlu_External_UsoGraph?(v23, v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v26, 1, v25) == 1)
  {
    outlined destroy of Siri_Nlu_External_UsoGraph?((uint64_t)v26);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v15, v26, v25);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v13, v15, v25);
    Siri_Nlu_External_UserWantedToProceed.reference.setter();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v15, v25);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(v9, v20, v22);
  outlined destroy of Siri_Nlu_External_UsoGraph?((uint64_t)v23);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v20, v22);
}

uint64_t static Siri_Nlu_External_UserWantedToProceed.from(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;

  v12 = a2;
  v18 = a1;
  v28 = 0;
  v27 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  v13 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v21 = (uint64_t)&v11 - v13;
  v14 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v18);
  v15 = (char *)&v11 - v14;
  v16 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v3);
  v23 = (char *)&v11 - v16;
  v28 = (char *)&v11 - v16;
  v27 = v5;
  v25 = 0;
  v20 = type metadata accessor for UsoTaskBuilder();
  v17 = _allocateUninitializedArray<A>(_:)();
  v19 = v6;
  swift_retain();
  v7 = v17;
  *v19 = v18;
  _finalizeUninitializedArray<A>(_:)();
  v22 = v7;
  v8 = type metadata accessor for UsoBuilderOptions();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v21, 1);
  v24 = MEMORY[0x2495715A0](v22, v21);
  outlined destroy of UsoBuilderOptions?(v21);
  swift_bridgeObjectRelease();
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  v26 = 0;
  swift_release();
  v9 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v23, 0, 1);
  outlined init with copy of Siri_Nlu_External_UsoGraph?(v23, v15);
  Siri_Nlu_External_UserWantedToProceed.init(_:)(v15, v12);
  return outlined destroy of Siri_Nlu_External_UsoGraph?((uint64_t)v23);
}

const char *Features.domain.getter()
{
  return "SiriPayments";
}

const char *Features.feature.getter(char a1)
{
  if ((a1 & 1) != 0)
    return "NLXFuture";
  else
    return "NLX";
}

BOOL static Features.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t Features.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t Features.hashValue.getter()
{
  lazy protocol witness table accessor for type Features and conformance Features();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type Features and conformance Features()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Features and conformance Features;
  if (!lazy protocol witness table cache variable for type Features and conformance Features)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Features, &type metadata for Features);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Features and conformance Features);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Features and conformance Features;
  if (!lazy protocol witness table cache variable for type Features and conformance Features)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Features, &type metadata for Features);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Features and conformance Features);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Features and conformance Features;
  if (!lazy protocol witness table cache variable for type Features and conformance Features)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Features, &type metadata for Features);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Features and conformance Features);
    return v0;
  }
  return v2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Features(_BYTE *a1, _BYTE *a2)
{
  return static Features.__derived_enum_equals(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Features()
{
  return Features.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Features()
{
  return Features.hash(into:)();
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance Features()
{
  return Features.domain.getter();
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance Features()
{
  _BYTE *v0;

  return Features.feature.getter(*v0 & 1);
}

uint64_t SiriPaymentsFeatureManager.isNLXEnabled.getter()
{
  char v1;
  _BYTE v2[24];
  ValueMetadata *v3;
  unint64_t v4;

  v3 = &type metadata for Features;
  v4 = lazy protocol witness table accessor for type Features and conformance Features();
  v2[0] = 0;
  v1 = SiriPaymentsFeatureManager.logAndReturn(flag:)((uint64_t)v2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v2);
  return v1 & 1;
}

uint64_t SiriPaymentsFeatureManager.logAndReturn(flag:)(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v37[6];
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE **v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint32_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  NSObject *v85;
  int v86;
  uint64_t (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint32_t v93;
  char v94[8];
  _BYTE v95[12];
  char v96;
  uint64_t v97;

  v53 = a1;
  v97 = 0;
  v96 = 0;
  v47 = 0;
  v51 = type metadata accessor for Logger();
  v50 = *(_QWORD *)(v51 - 8);
  v48 = (*(_QWORD *)(v50 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = (char *)v37 - v48;
  v49 = (char *)v37 - v48;
  v97 = MEMORY[0x24BDAC7A8](v53);
  v57 = isFeatureEnabled(_:)();
  v56 = 1;
  v96 = v57 & 1;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v1, v2, v51);
  v52 = v95;
  outlined init with copy of GlobalsProviding(v53, (uint64_t)v95);
  v54 = 56;
  v70 = 7;
  v62 = swift_allocObject();
  outlined init with take of CommonLabelsProviding(v52, (void *)(v62 + 16));
  v55 = v94;
  outlined init with copy of GlobalsProviding(v53, (uint64_t)v94);
  v64 = swift_allocObject();
  outlined init with take of CommonLabelsProviding(v55, (void *)(v64 + 16));
  v67 = 17;
  v71 = swift_allocObject();
  *(_BYTE *)(v71 + 16) = v57 & v56;
  v85 = Logger.logObject.getter();
  v86 = static os_log_type_t.default.getter();
  v60 = &v92;
  v69 = 32;
  v92 = 32;
  v58 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v59 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v61 = v93;
  v73 = swift_allocObject();
  v66 = 32;
  *(_BYTE *)(v73 + 16) = 32;
  v74 = swift_allocObject();
  v68 = 8;
  *(_BYTE *)(v74 + 16) = 8;
  v3 = swift_allocObject();
  v4 = v62;
  v63 = v3;
  *(_QWORD *)(v3 + 16) = partial apply for implicit closure #1 in SiriPaymentsFeatureManager.logAndReturn(flag:);
  *(_QWORD *)(v3 + 24) = v4;
  v5 = swift_allocObject();
  v6 = v63;
  v75 = v5;
  *(_QWORD *)(v5 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v5 + 24) = v6;
  v76 = swift_allocObject();
  *(_BYTE *)(v76 + 16) = v66;
  v77 = swift_allocObject();
  *(_BYTE *)(v77 + 16) = v68;
  v7 = swift_allocObject();
  v8 = v64;
  v65 = v7;
  *(_QWORD *)(v7 + 16) = partial apply for implicit closure #2 in SiriPaymentsFeatureManager.logAndReturn(flag:);
  *(_QWORD *)(v7 + 24) = v8;
  v9 = swift_allocObject();
  v10 = v65;
  v78 = v9;
  *(_QWORD *)(v9 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v9 + 24) = v10;
  v79 = swift_allocObject();
  *(_BYTE *)(v79 + 16) = v66;
  v80 = swift_allocObject();
  *(_BYTE *)(v80 + 16) = v68;
  v11 = swift_allocObject();
  v12 = v71;
  v72 = v11;
  *(_QWORD *)(v11 + 16) = partial apply for implicit closure #3 in SiriPaymentsFeatureManager.logAndReturn(flag:);
  *(_QWORD *)(v11 + 24) = v12;
  v13 = swift_allocObject();
  v14 = v72;
  v82 = v13;
  *(_QWORD *)(v13 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v13 + 24) = v14;
  v84 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v81 = _allocateUninitializedArray<A>(_:)();
  v83 = v15;
  swift_retain();
  v16 = v73;
  v17 = v83;
  *v83 = partial apply for closure #1 in OSLogArguments.append(_:);
  v17[1] = v16;
  swift_retain();
  v18 = v74;
  v19 = v83;
  v83[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v19[3] = v18;
  swift_retain();
  v20 = v75;
  v21 = v83;
  v83[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v21[5] = v20;
  swift_retain();
  v22 = v76;
  v23 = v83;
  v83[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v23[7] = v22;
  swift_retain();
  v24 = v77;
  v25 = v83;
  v83[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v25[9] = v24;
  swift_retain();
  v26 = v78;
  v27 = v83;
  v83[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[11] = v26;
  swift_retain();
  v28 = v79;
  v29 = v83;
  v83[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[13] = v28;
  swift_retain();
  v30 = v80;
  v31 = v83;
  v83[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[15] = v30;
  swift_retain();
  v32 = v82;
  v33 = v83;
  v83[16] = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[17] = v32;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v85, (os_log_type_t)v86))
  {
    v34 = v47;
    v40 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v41 = createStorage<A>(capacity:type:)(0);
    v42 = createStorage<A>(capacity:type:)(3);
    v43 = &v91;
    v91 = v40;
    v44 = &v90;
    v90 = v41;
    v45 = &v89;
    v89 = v42;
    serialize(_:at:)(2, &v91);
    serialize(_:at:)(3, v43);
    v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v88 = v73;
    closure #1 in osLogInternal(_:log:type:)(&v87, (uint64_t)v43, (uint64_t)v44, (uint64_t)v45);
    v46 = v34;
    if (v34)
    {
      __break(1u);
    }
    else
    {
      v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v88 = v74;
      closure #1 in osLogInternal(_:log:type:)(&v87, (uint64_t)&v91, (uint64_t)&v90, (uint64_t)&v89);
      v38 = 0;
      v35 = v38;
      v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v88 = v75;
      closure #1 in osLogInternal(_:log:type:)(&v87, (uint64_t)&v91, (uint64_t)&v90, (uint64_t)&v89);
      v37[5] = v35;
      v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v88 = v76;
      closure #1 in osLogInternal(_:log:type:)(&v87, (uint64_t)&v91, (uint64_t)&v90, (uint64_t)&v89);
      v37[4] = 0;
      v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v88 = v77;
      closure #1 in osLogInternal(_:log:type:)(&v87, (uint64_t)&v91, (uint64_t)&v90, (uint64_t)&v89);
      v37[3] = 0;
      v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v88 = v78;
      closure #1 in osLogInternal(_:log:type:)(&v87, (uint64_t)&v91, (uint64_t)&v90, (uint64_t)&v89);
      v37[2] = 0;
      v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v88 = v79;
      closure #1 in osLogInternal(_:log:type:)(&v87, (uint64_t)&v91, (uint64_t)&v90, (uint64_t)&v89);
      v37[1] = 0;
      v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v88 = v80;
      closure #1 in osLogInternal(_:log:type:)(&v87, (uint64_t)&v91, (uint64_t)&v90, (uint64_t)&v89);
      v37[0] = 0;
      v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v88 = v82;
      closure #1 in osLogInternal(_:log:type:)(&v87, (uint64_t)&v91, (uint64_t)&v90, (uint64_t)&v89);
      _os_log_impl(&dword_24701B000, v85, (os_log_type_t)v86, "FeatureFlag: %s/%s=%s", v40, v61);
      destroyStorage<A>(_:count:)(v41, 0, v39);
      destroyStorage<A>(_:count:)(v42, 3, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v40, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v51);
  return v57 & 1;
}

uint64_t SiriPaymentsFeatureManager.isNLXFutureEnabled.getter()
{
  char v1;
  _BYTE v2[24];
  ValueMetadata *v3;
  unint64_t v4;

  v3 = &type metadata for Features;
  v4 = lazy protocol witness table accessor for type Features and conformance Features();
  v2[0] = 1;
  v1 = SiriPaymentsFeatureManager.logAndReturn(flag:)((uint64_t)v2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v2);
  return v1 & 1;
}

uint64_t implicit closure #1 in SiriPaymentsFeatureManager.logAndReturn(flag:)(_QWORD *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of FeatureFlagsKey.domain.getter();
  return String.init<A>(describing:)();
}

uint64_t sub_24706DEAC()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SiriPaymentsFeatureManager.logAndReturn(flag:)()
{
  uint64_t v0;

  return implicit closure #1 in SiriPaymentsFeatureManager.logAndReturn(flag:)((_QWORD *)(v0 + 16));
}

uint64_t implicit closure #2 in SiriPaymentsFeatureManager.logAndReturn(flag:)(_QWORD *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of FeatureFlagsKey.feature.getter();
  return String.init<A>(describing:)();
}

uint64_t sub_24706DF5C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SiriPaymentsFeatureManager.logAndReturn(flag:)()
{
  uint64_t v0;

  return implicit closure #2 in SiriPaymentsFeatureManager.logAndReturn(flag:)((_QWORD *)(v0 + 16));
}

uint64_t implicit closure #3 in SiriPaymentsFeatureManager.logAndReturn(flag:)(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("on", 2uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("off", 3uLL, 1)._countAndFlagsBits;
}

uint64_t sub_24706E018()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in SiriPaymentsFeatureManager.logAndReturn(flag:)()
{
  uint64_t v0;

  return implicit closure #3 in SiriPaymentsFeatureManager.logAndReturn(flag:)(*(_BYTE *)(v0 + 16) & 1);
}

uint64_t protocol witness for SiriPaymentsFeatureManaging.isNLXEnabled.getter in conformance SiriPaymentsFeatureManager()
{
  return SiriPaymentsFeatureManager.isNLXEnabled.getter() & 1;
}

uint64_t protocol witness for SiriPaymentsFeatureManaging.isNLXFutureEnabled.getter in conformance SiriPaymentsFeatureManager()
{
  return SiriPaymentsFeatureManager.isNLXFutureEnabled.getter() & 1;
}

uint64_t sub_24706E07C()
{
  return swift_deallocObject();
}

uint64_t sub_24706E0A4()
{
  return swift_deallocObject();
}

uint64_t sub_24706E0CC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24706E108()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24706E144()
{
  return swift_deallocObject();
}

uint64_t sub_24706E16C()
{
  return swift_deallocObject();
}

uint64_t sub_24706E194()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24706E1D0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24706E20C()
{
  return swift_deallocObject();
}

uint64_t sub_24706E234()
{
  return swift_deallocObject();
}

uint64_t sub_24706E25C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24706E298()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t base witness table accessor for Equatable in Features()
{
  return lazy protocol witness table accessor for type Features and conformance Features();
}

ValueMetadata *type metadata accessor for Features()
{
  return &type metadata for Features;
}

ValueMetadata *type metadata accessor for SiriPaymentsFeatureManager()
{
  return &type metadata for SiriPaymentsFeatureManager;
}

uint64_t AmountUnsupportedStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t AmountUnsupportedStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  String.NOT_YET_IMPLEMENTED.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t AmountUnsupportedStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v2[3] = a1;
  v2[4] = v1;
  return swift_task_switch();
}

uint64_t AmountUnsupportedStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  String.NOT_YET_IMPLEMENTED.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t AmountUnsupportedStrategy.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AmountUnsupportedStrategy.__deallocating_deinit()
{
  AmountUnsupportedStrategy.deinit();
  return swift_deallocClassInstance();
}

uint64_t AmountUnsupportedStrategy.__allocating_init()()
{
  swift_allocObject();
  return AmountUnsupportedStrategy.deinit();
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance AmountUnsupportedStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return AmountUnsupportedStrategy.makeUnsupportedValueOutput(resolveRecord:)(a1, a2);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance AmountUnsupportedStrategy<A, B>(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for ConfirmationViewBuilding.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:) in conformance ConfirmationViewBuilder;
  return AmountUnsupportedStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(a1);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance AmountUnsupportedStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;

  v7 = v3;
  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 24) = v4;
  type metadata accessor for AmountUnsupportedStrategy(0, a3[10], a3[11], a3[12]);
  *v4 = *(_QWORD *)(v7 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)();
}

uint64_t type metadata accessor for AmountUnsupportedStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AmountUnsupportedStrategy);
}

uint64_t type metadata completion function for AmountUnsupportedStrategy()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t RequestPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[6] = v1;
  v2[5] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v2[3] = a1;
  v2[4] = v1;
  return swift_task_switch();
}

uint64_t RequestPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, void *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  Swift::String *v9;
  uint64_t v10;

  v10 = v0[5];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#IntentConfirmationPrompt", 0x27uLL, 1);
  v0[7] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v9 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (v10)
  {
    v7 = v8[5];
    v9[2]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v9[1]._countAndFlagsBits = v7;
  }
  else
  {
    v9[1]._countAndFlagsBits = 0;
    v9[1]._object = 0;
    v9[2]._countAndFlagsBits = 0;
    v9[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v8[8] = v5;
  v6 = (uint64_t (*)(uint64_t, void *, uint64_t))(MEMORY[0x24BE92A08] + (int)*MEMORY[0x24BE92A08]);
  v3 = (_QWORD *)swift_task_alloc();
  v8[9] = v3;
  *v3 = v8[2];
  v3[1] = RequestPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:);
  return v6(v1._countAndFlagsBits, v1._object, v5);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 16) + 8))();
}

_QWORD *RequestPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v6;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v6 = (_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 80) = v1;
  swift_task_dealloc();
  if (v1)
    return (_QWORD *)swift_task_switch();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v6 + 8))(v6, a1);
}

uint64_t RequestPaymentCATsModern.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_allocObject();
  return RequestPaymentCATsModern.init(templateDir:options:globals:)(a1, a2, a3);
}

uint64_t RequestPaymentCATsModern.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;

  v17 = a1;
  v15 = a2;
  v13 = a3;
  v22 = 0;
  v21 = 0;
  v20 = 0;
  v19 = 0;
  v16 = type metadata accessor for CATOption();
  v14 = *(_QWORD *)(v16 - 8);
  v9 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v11 = (char *)&v9 - v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (const void *)MEMORY[0x24BDAC7A8](v17);
  v12 = (char *)&v9 - v10;
  v21 = v4;
  v20 = v5;
  v19 = v6;
  v22 = v3;
  outlined init with copy of URL?(v4, (char *)&v9 - v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v11, v15, v16);
  v7 = v13;
  v18 = CATWrapperSimple.init(templateDir:options:globals:)();
  swift_retain();
  v22 = v18;

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
  outlined destroy of URL?(v17);
  swift_release();
  return v18;
}

uint64_t RequestPaymentCATsModern.__allocating_init(useResponseMode:options:)(char a1, uint64_t a2)
{
  swift_allocObject();
  return RequestPaymentCATsModern.init(useResponseMode:options:)(a1 & 1, a2);
}

uint64_t RequestPaymentCATsModern.init(useResponseMode:options:)(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v7 = a1;
  v8 = a2;
  v14 = 0;
  v13 = 0;
  v12 = 0;
  v10 = type metadata accessor for CATOption();
  v9 = *(_QWORD *)(v10 - 8);
  v6[0] = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v6[1] = (char *)v6 - v6[0];
  v13 = v7 & 1;
  v12 = v3;
  v14 = v2;
  (*(void (**)(void))(v4 + 16))();
  v11 = CATWrapperSimple.init(useResponseMode:options:)();
  swift_retain();
  v14 = v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  swift_release();
  return v11;
}

uint64_t RequestPaymentCATsModern.deinit()
{
  return CATWrapperSimple.deinit();
}

uint64_t RequestPaymentCATsModern.__deallocating_deinit()
{
  RequestPaymentCATsModern.deinit();
  return swift_deallocClassInstance();
}

uint64_t SendPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[6] = v1;
  v2[5] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v2[3] = a1;
  v2[4] = v1;
  return swift_task_switch();
}

uint64_t SendPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, void *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  Swift::String *v9;
  uint64_t v10;

  v10 = v0[5];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#IntentConfirmationPrompt", 0x24uLL, 1);
  v0[7] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v9 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (v10)
  {
    v7 = v8[5];
    v9[2]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v9[1]._countAndFlagsBits = v7;
  }
  else
  {
    v9[1]._countAndFlagsBits = 0;
    v9[1]._object = 0;
    v9[2]._countAndFlagsBits = 0;
    v9[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v8[8] = v5;
  v6 = (uint64_t (*)(uint64_t, void *, uint64_t))(MEMORY[0x24BE92A08] + (int)*MEMORY[0x24BE92A08]);
  v3 = (_QWORD *)swift_task_alloc();
  v8[9] = v3;
  *v3 = v8[2];
  v3[1] = RequestPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:);
  return v6(v1._countAndFlagsBits, v1._object, v5);
}

uint64_t DisambiguationCATsModern.intentDisambiguationPrompt()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[4] = v0;
  v1[2] = v1;
  v1[3] = 0;
  v1[3] = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#DisambiguateApp", 0x1CuLL, 1);
  v0[5] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[6] = v5;
  v6 = (uint64_t (*)(uint64_t, void *, uint64_t))(MEMORY[0x24BE92A08] + (int)*MEMORY[0x24BE92A08]);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 56) = v2;
  *v2 = *(_QWORD *)(v4 + 16);
  v2[1] = DisambiguationCATsModern.intentDisambiguationPrompt();
  return v6(v1._countAndFlagsBits, v1._object, v5);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 16) + 8))();
}

_QWORD *DisambiguationCATsModern.intentDisambiguationPrompt()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v6;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v6 = (_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 64) = v1;
  swift_task_dealloc();
  if (v1)
    return (_QWORD *)swift_task_switch();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v6 + 8))(v6, a1);
}

uint64_t type metadata accessor for RequestPaymentCATsModern()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for RequestPaymentCATsModern;
  if (!type metadata singleton initialization cache for RequestPaymentCATsModern)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for RequestPaymentCATsModern()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t ObjC metadata update function for RequestPaymentCATsModern()
{
  return type metadata accessor for RequestPaymentCATsModern();
}

uint64_t type metadata accessor for SendPaymentCATsModern()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SendPaymentCATsModern;
  if (!type metadata singleton initialization cache for SendPaymentCATsModern)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for SendPaymentCATsModern()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t ObjC metadata update function for SendPaymentCATsModern()
{
  return type metadata accessor for SendPaymentCATsModern();
}

uint64_t type metadata accessor for DisambiguationCATsModern()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for DisambiguationCATsModern;
  if (!type metadata singleton initialization cache for DisambiguationCATsModern)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for DisambiguationCATsModern()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t ObjC metadata update function for DisambiguationCATsModern()
{
  return type metadata accessor for DisambiguationCATsModern();
}

uint64_t SearchForCardInfoCATs.apply(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#Apply", 0x17uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.apply()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t SearchForCardInfoCATs.apply()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#Apply", 0x17uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#Apply", 0x17uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.goToAppleWebsite(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#GoToAppleWebsite", 0x22uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.goToAppleWebsite()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t SearchForCardInfoCATs.goToAppleWebsite()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#GoToAppleWebsite", 0x22uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#GoToAppleWebsite", 0x22uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.learn(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#Learn", 0x17uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.learn()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t SearchForCardInfoCATs.learn()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#Learn", 0x17uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#Learn", 0x17uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.openAppleWebsite(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#OpenAppleWebsite", 0x22uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.openAppleWebsite()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t SearchForCardInfoCATs.openAppleWebsite()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#OpenAppleWebsite", 0x22uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#OpenAppleWebsite", 0x22uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.openWallet(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#OpenWallet", 0x1CuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.openWallet()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t SearchForCardInfoCATs.openWallet()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#OpenWallet", 0x1CuLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#OpenWallet", 0x1CuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.unlock(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#Unlock", 0x18uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.unlock()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t SearchForCardInfoCATs.unlock()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#Unlock", 0x18uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#Unlock", 0x18uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.unsupportedDevice(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#UnsupportedDevice", 0x23uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.unsupportedDevice()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t SearchForCardInfoCATs.unsupportedDevice()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#UnsupportedDevice", 0x23uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#UnsupportedDevice", 0x23uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.unsupportedLocale(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#UnsupportedLocale", 0x23uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.unsupportedLocale()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t SearchForCardInfoCATs.unsupportedLocale()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#UnsupportedLocale", 0x23uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#UnsupportedLocale", 0x23uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for SearchForCardInfoCATs()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SearchForCardInfoCATs;
  if (!type metadata singleton initialization cache for SearchForCardInfoCATs)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for SearchForCardInfoCATs()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t ObjC metadata update function for SearchForCardInfoCATs()
{
  return type metadata accessor for SearchForCardInfoCATs();
}

NSJSONWritingOptions default argument 1 of PaymentsContinueInAppStrategy.init(globals:commonLabelsProvider:errorTemplateProvider:)@<X0>(Swift::UInt a1@<X0>, uint64_t a2@<X8>)
{
  NSJSONWritingOptions result;

  result = NSJSONWritingOptions.init(rawValue:)(a1);
  *(_QWORD *)(a2 + 24) = &type metadata for CommonLabelsProvider;
  *(_QWORD *)(a2 + 32) = &protocol witness table for CommonLabelsProvider;
  return result;
}

uint64_t default argument 2 of PaymentsContinueInAppStrategy.init(globals:commonLabelsProvider:errorTemplateProvider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[5];
  _QWORD v15[6];

  v15[5] = a1;
  v15[4] = a2;
  v15[0] = a1;
  v15[1] = a2;
  v15[2] = a3;
  v15[3] = a4;
  v11 = type metadata accessor for PaymentsErrorTemplateProvider(0, (uint64_t)v15);
  default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(a1, a2, v14);
  v10 = default argument 1 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(a1, a2);
  v5 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(a1, a2);
  v13 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v14, v10, v5);
  a5[3] = v11;
  v6 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsErrorTemplateProvider<A, B>, v11);
  result = v13;
  a5[4] = v6;
  *a5 = v13;
  return result;
}

uint64_t default argument 1 of PaymentsRCHFlowStrategy.init(globals:contactResolver:)@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = type metadata accessor for SiriKitContactResolver();
  a1[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(a1);
  return SiriKitContactResolver.init()();
}

uint64_t default argument 0 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v7[40];
  uint64_t v8;

  v8 = a1;
  type metadata accessor for PaymentsAppResolver(0, a1, a2, a4);
  default argument 0 of PaymentsAppResolver.init(appLister:)(a1, a2, (uint64_t)v7);
  return PaymentsAppResolver.__allocating_init(appLister:)((uint64_t)v7);
}

uint64_t default argument 0 of PaymentsAppResolver.init(appLister:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  PaymentsAppLister.init()();
  result = type metadata accessor for PaymentsAppLister(0, a1, a2, v3);
  *(_QWORD *)(a3 + 24) = result;
  *(_QWORD *)(a3 + 32) = &protocol witness table for PaymentsAppLister<A>;
  return result;
}

NSJSONWritingOptions default argument 1 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)@<X0>(Swift::UInt a1@<X0>, uint64_t a2@<X8>)
{
  NSJSONWritingOptions result;

  result = NSJSONWritingOptions.init(rawValue:)(a1);
  *(_QWORD *)(a2 + 24) = &type metadata for CommonLabelsProvider;
  *(_QWORD *)(a2 + 32) = &protocol witness table for CommonLabelsProvider;
  return result;
}

uint64_t default argument 2 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = type metadata accessor for SiriKitContactResolver();
  a1[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(a1);
  return SiriKitContactResolver.init()();
}

uint64_t default argument 3 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)()
{
  return static Device.current.getter();
}

uint64_t default argument 4 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(uint64_t a1)
{
  _QWORD v2[4];

  v2[3] = a1;
  v2[2] = 0;
  v2[0] = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v2[1] = (char *)v2 - v2[0];
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t FlowFactory.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GlobalsProviding(v1 + 16, a1);
}

uint64_t FlowFactory.__allocating_init(deviceState:contactResolver:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return FlowFactory.init(deviceState:contactResolver:)(a1, a2);
}

uint64_t FlowFactory.init(deviceState:contactResolver:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v6;
  _BYTE v7[40];
  _BYTE v8[40];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = 0;
  v11 = a1;
  v10 = a2;
  outlined init with copy of GlobalsProviding(a1, (uint64_t)v8);
  outlined init with take of CommonLabelsProviding(v8, (void *)(v2 + 16));
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v7);
  outlined init with take of CommonLabelsProviding(v7, (void *)(v2 + 56));
  __swift_destroy_boxed_opaque_existential_0(a2);
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v6;
}

uint64_t FlowFactory.findFlow(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[119] = v1;
  v2[118] = a1;
  v2[68] = v2;
  v2[69] = 0;
  v2[70] = 0;
  v2[72] = 0;
  v2[93] = 0;
  v2[99] = 0;
  v2[105] = 0;
  v2[111] = 0;
  v2[117] = 0;
  v3 = type metadata accessor for Siri_Nlu_External_UserParse();
  v2[120] = v3;
  v2[121] = *(_QWORD *)(v3 - 8);
  v2[122] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v2[123] = swift_task_alloc();
  v4 = type metadata accessor for Logger();
  v2[124] = v4;
  v2[125] = *(_QWORD *)(v4 - 8);
  v2[126] = swift_task_alloc();
  v2[127] = swift_task_alloc();
  v2[128] = swift_task_alloc();
  v2[129] = swift_task_alloc();
  v2[130] = swift_task_alloc();
  v2[131] = swift_task_alloc();
  v2[132] = swift_task_alloc();
  v2[133] = swift_task_alloc();
  v2[134] = swift_task_alloc();
  v5 = type metadata accessor for USOParse();
  v2[135] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[136] = v6;
  v2[137] = *(_QWORD *)(v6 + 64);
  v2[138] = swift_task_alloc();
  v2[139] = swift_task_alloc();
  v7 = type metadata accessor for Parse();
  v2[140] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[141] = v8;
  v2[142] = *(_QWORD *)(v8 + 64);
  v2[143] = swift_task_alloc();
  v2[144] = swift_task_alloc();
  v2[69] = a1;
  v2[70] = v1;
  return swift_task_switch();
}

uint64_t FlowFactory.findFlow(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint32_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint32_t v61;
  os_log_type_t v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint32_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint32_t v96;
  os_log_type_t v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint32_t v117;
  os_log_type_t v118;
  NSObject *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint8_t *v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint32_t v142;
  os_log_type_t v143;
  NSObject *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint8_t *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint32_t v163;
  os_log_type_t v164;
  NSObject *log;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint8_t *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint32_t v184;
  os_log_type_t v185;
  NSObject *oslog;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void (*v203)(uint64_t, uint64_t);
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint8_t *buf;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void (*v218)(uint64_t, uint64_t, uint64_t);
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void (*v224)(unint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  NSObject *v232;
  os_log_type_t v233;
  uint64_t v234;
  void (*v235)(void);
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint8_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t (*v242)(uint64_t, uint64_t, uint64_t);
  uint64_t v243;
  uint8_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t (*v247)(uint64_t, uint64_t, uint64_t);
  uint64_t v248;
  uint8_t *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t (*v252)(uint64_t, uint64_t, uint64_t);
  uint64_t v253;

  v238 = v0[144];
  v236 = v0[141];
  v237 = v0[140];
  v0[68] = v0;
  v235 = *(void (**)(void))(v236 + 16);
  v235();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v236 + 88))(v238, v237) != *MEMORY[0x24BE98E98])
  {
    v39 = *(_QWORD *)(v234 + 1144);
    v38 = *(_QWORD *)(v234 + 1128);
    v40 = *(_QWORD *)(v234 + 1120);
    v20 = *(_QWORD *)(v234 + 1008);
    v34 = *(_QWORD *)(v234 + 1000);
    v35 = *(_QWORD *)(v234 + 992);
    v36 = *(_QWORD *)(v234 + 944);
    v21 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v20, v21, v35);
    ((void (*)(uint64_t, uint64_t, uint64_t))v235)(v39, v36, v40);
    v37 = (*(unsigned __int8 *)(v38 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
    v42 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v38 + 32))(v42 + v37, v39, v40);
    v48 = Logger.logObject.getter();
    v49 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v234 + 568) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v41 = *(_DWORD *)(v234 + 1160);
    v44 = swift_allocObject();
    *(_BYTE *)(v44 + 16) = 32;
    v45 = swift_allocObject();
    *(_BYTE *)(v45 + 16) = 8;
    v43 = swift_allocObject();
    *(_QWORD *)(v43 + 16) = partial apply for implicit closure #3 in FlowFactory.findFlow(for:);
    *(_QWORD *)(v43 + 24) = v42;
    v46 = swift_allocObject();
    *(_QWORD *)(v46 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v46 + 24) = v43;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    v47 = v22;
    swift_retain();
    *v47 = partial apply for closure #1 in OSLogArguments.append(_:);
    v47[1] = v44;
    swift_retain();
    v47[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v47[3] = v45;
    swift_retain();
    v47[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v47[5] = v46;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v48, v49))
    {
      v31 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v32 = createStorage<A>(capacity:type:)(0);
      v33 = createStorage<A>(capacity:type:)(1);
      v239 = v31;
      v240 = v32;
      v241 = v33;
      serialize(_:at:)(2, &v239);
      serialize(_:at:)(1, &v239);
      v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v243 = v44;
      closure #1 in osLogInternal(_:log:type:)(&v242, (uint64_t)&v239, (uint64_t)&v240, (uint64_t)&v241);
      v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v243 = v45;
      closure #1 in osLogInternal(_:log:type:)(&v242, (uint64_t)&v239, (uint64_t)&v240, (uint64_t)&v241);
      v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v243 = v46;
      closure #1 in osLogInternal(_:log:type:)(&v242, (uint64_t)&v239, (uint64_t)&v240, (uint64_t)&v241);
      _os_log_impl(&dword_24701B000, v48, v49, "#FlowFactory received unsupported parse: %s", v31, v41);
      destroyStorage<A>(_:count:)(v32, 0, v30);
      destroyStorage<A>(_:count:)(v33, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v31, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v28 = *(_QWORD *)(v234 + 1152);
    v27 = *(_QWORD *)(v234 + 1128);
    v29 = *(_QWORD *)(v234 + 1120);
    v25 = *(_QWORD *)(v234 + 1008);
    v24 = *(_QWORD *)(v234 + 1000);
    v26 = *(_QWORD *)(v234 + 992);

    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v29);
    goto LABEL_91;
  }
  v215 = *(_QWORD *)(v234 + 1152);
  v219 = *(_QWORD *)(v234 + 1112);
  v222 = *(_QWORD *)(v234 + 1104);
  v220 = *(_QWORD *)(v234 + 1088);
  v223 = *(_QWORD *)(v234 + 1080);
  v1 = *(_QWORD *)(v234 + 1072);
  v216 = *(_QWORD *)(v234 + 1000);
  v217 = *(_QWORD *)(v234 + 992);
  (*(void (**)(void))(*(_QWORD *)(v234 + 1128) + 96))();
  v224 = *(void (**)(unint64_t, uint64_t, uint64_t))(v220 + 32);
  v224(v219, v215, v223);
  *(_QWORD *)(v234 + 576) = v219;
  v2 = Logger.payments.unsafeMutableAddressor();
  v218 = *(void (**)(uint64_t, uint64_t, uint64_t))(v216 + 16);
  v218(v1, v2, v217);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v220 + 16))(v222, v219, v223);
  v221 = (*(unsigned __int8 *)(v220 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v220 + 80);
  v226 = swift_allocObject();
  v224(v226 + v221, v222, v223);
  v232 = Logger.logObject.getter();
  v233 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v234 + 584) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v234 + 1164);
  v228 = swift_allocObject();
  *(_BYTE *)(v228 + 16) = 32;
  v229 = swift_allocObject();
  *(_BYTE *)(v229 + 16) = 8;
  v227 = swift_allocObject();
  *(_QWORD *)(v227 + 16) = partial apply for implicit closure #1 in FlowFactory.findFlow(for:);
  *(_QWORD *)(v227 + 24) = v226;
  v230 = swift_allocObject();
  *(_QWORD *)(v230 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v230 + 24) = v227;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v231 = v3;
  swift_retain();
  *v231 = partial apply for closure #1 in OSLogArguments.append(_:);
  v231[1] = v228;
  swift_retain();
  v231[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v231[3] = v229;
  swift_retain();
  v231[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v231[5] = v230;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v232, v233))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v211 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v213 = createStorage<A>(capacity:type:)(0);
    v214 = createStorage<A>(capacity:type:)(1);
    v249 = buf;
    v250 = v213;
    v251 = v214;
    serialize(_:at:)(2, &v249);
    serialize(_:at:)(1, &v249);
    v252 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v253 = v228;
    closure #1 in osLogInternal(_:log:type:)(&v252, (uint64_t)&v249, (uint64_t)&v250, (uint64_t)&v251);
    v252 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v253 = v229;
    closure #1 in osLogInternal(_:log:type:)(&v252, (uint64_t)&v249, (uint64_t)&v250, (uint64_t)&v251);
    v252 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v253 = v230;
    closure #1 in osLogInternal(_:log:type:)(&v252, (uint64_t)&v249, (uint64_t)&v250, (uint64_t)&v251);
    _os_log_impl(&dword_24701B000, v232, v233, "#FlowFactory received uso parse: %s", buf, size);
    destroyStorage<A>(_:count:)(v213, 0, v211);
    destroyStorage<A>(_:count:)(v214, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v201 = *(_QWORD *)(v234 + 1072);
  v200 = *(_QWORD *)(v234 + 1000);
  v202 = *(_QWORD *)(v234 + 992);
  v208 = *(_QWORD *)(v234 + 984);
  v206 = *(_QWORD *)(v234 + 976);
  v204 = *(_QWORD *)(v234 + 968);
  v205 = *(_QWORD *)(v234 + 960);

  v203 = *(void (**)(uint64_t, uint64_t))(v200 + 8);
  v203(v201, v202);
  v4 = USOParse.userParse.getter();
  v207 = MEMORY[0x249571348](v4);
  (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v206, v205);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v234 + 592) = v207;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
  lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  v209 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v210 = *(_QWORD *)(v209 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v210 + 48))(v208, 1) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(*(_QWORD *)(v234 + 984));
  }
  else
  {
    v198 = *(_QWORD *)(v234 + 984);
    v199 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v210 + 8))(v198, v209);
    if (v199)
    {
      UsoTask.eraseToAny.getter();
      swift_release();
      goto LABEL_10;
    }
  }
  *(_QWORD *)(v234 + 448) = 0;
  *(_QWORD *)(v234 + 456) = 0;
  *(_QWORD *)(v234 + 464) = 0;
  *(_QWORD *)(v234 + 472) = 0;
LABEL_10:
  if (*(_QWORD *)(v234 + 472))
  {
    outlined init with take of Any(v234 + 448, v234 + 416);
    outlined init with copy of Any(v234 + 416, v234 + 480);
    type metadata accessor for UsoTask_pay_common_Payment();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v196 = *(_QWORD *)(v234 + 952);
      static AceService.currentAsync.getter();
      outlined init with copy of GlobalsProviding(v196 + 56, v234 + 376);
      v197 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(0, 0, v234 + 336, v234 + 376);
      __swift_destroy_boxed_opaque_existential_0(v234 + 376);
      __swift_destroy_boxed_opaque_existential_0(v234 + 336);
      if (v197)
      {
        objc_opt_self();
        v195 = swift_dynamicCastObjCClass();
        if (v195)
        {
          v194 = (void *)v195;
        }
        else
        {

          v194 = 0;
        }
        v193 = v194;
      }
      else
      {
        v193 = 0;
      }
      if (v193)
      {
        v189 = *(_QWORD *)(v234 + 1112);
        v188 = *(_QWORD *)(v234 + 1088);
        v190 = *(_QWORD *)(v234 + 1080);
        *(_QWORD *)(v234 + 936) = v193;
        v191 = FlowFactory.sendPaymentFlow(intent:)(v193);

        swift_release();
        __swift_destroy_boxed_opaque_existential_0(v234 + 480);
        __swift_destroy_boxed_opaque_existential_0(v234 + 416);
        (*(void (**)(uint64_t, uint64_t))(v188 + 8))(v189, v190);
        v192 = v191;
        goto LABEL_92;
      }
      v5 = *(_QWORD *)(v234 + 1064);
      v183 = *(_QWORD *)(v234 + 992);
      v6 = Logger.payments.unsafeMutableAddressor();
      v218(v5, v6, v183);
      oslog = Logger.logObject.getter();
      v185 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v234 + 896) = 2;
      UnsignedInteger<>.init<A>(_:)();
      v184 = *(_DWORD *)(v234 + 1192);
      v187 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(oslog, v185))
      {
        v179 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v178 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v180 = createStorage<A>(capacity:type:)(0);
        v181 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v234 + 904) = v179;
        *(_QWORD *)(v234 + 912) = v180;
        *(_QWORD *)(v234 + 920) = v181;
        serialize(_:at:)(0, (_BYTE **)(v234 + 904));
        serialize(_:at:)(0, (_BYTE **)(v234 + 904));
        *(_QWORD *)(v234 + 928) = v187;
        v182 = (_QWORD *)swift_task_alloc();
        v182[2] = v234 + 904;
        v182[3] = v234 + 912;
        v182[4] = v234 + 920;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_24701B000, oslog, v185, "#FlowFactory couldn't create intent from parse", v179, v184);
        destroyStorage<A>(_:count:)(v180, 0, v178);
        destroyStorage<A>(_:count:)(v181, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v179, MEMORY[0x24BEE4260]);
      }
      swift_bridgeObjectRelease();
      v176 = *(_QWORD *)(v234 + 1064);
      v177 = *(_QWORD *)(v234 + 992);

      v203(v176, v177);
      swift_release();
      __swift_destroy_boxed_opaque_existential_0(v234 + 480);
    }
    else
    {
      type metadata accessor for UsoTask_noVerb_common_Payment();
      if ((swift_dynamicCast() & 1) != 0)
      {
        v174 = *(_QWORD *)(v234 + 952);
        static AceService.currentAsync.getter();
        outlined init with copy of GlobalsProviding(v174 + 56, v234 + 296);
        v175 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(0, 0, v234 + 256, v234 + 296);
        __swift_destroy_boxed_opaque_existential_0(v234 + 296);
        __swift_destroy_boxed_opaque_existential_0(v234 + 256);
        if (v175)
        {
          objc_opt_self();
          v173 = swift_dynamicCastObjCClass();
          if (v173)
          {
            v172 = (void *)v173;
          }
          else
          {

            v172 = 0;
          }
          v171 = v172;
        }
        else
        {
          v171 = 0;
        }
        if (v171)
        {
          v168 = *(_QWORD *)(v234 + 1112);
          v167 = *(_QWORD *)(v234 + 1088);
          v169 = *(_QWORD *)(v234 + 1080);
          *(_QWORD *)(v234 + 888) = v171;
          v170 = FlowFactory.sendPaymentFlow(intent:)(v171);

          swift_release();
          __swift_destroy_boxed_opaque_existential_0(v234 + 480);
          __swift_destroy_boxed_opaque_existential_0(v234 + 416);
          (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v168, v169);
          v192 = v170;
          goto LABEL_92;
        }
        v7 = *(_QWORD *)(v234 + 1056);
        v162 = *(_QWORD *)(v234 + 992);
        v8 = Logger.payments.unsafeMutableAddressor();
        v218(v7, v8, v162);
        log = Logger.logObject.getter();
        v164 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v234 + 848) = 2;
        UnsignedInteger<>.init<A>(_:)();
        v163 = *(_DWORD *)(v234 + 1188);
        v166 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(log, v164))
        {
          v158 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v157 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v159 = createStorage<A>(capacity:type:)(0);
          v160 = createStorage<A>(capacity:type:)(0);
          *(_QWORD *)(v234 + 856) = v158;
          *(_QWORD *)(v234 + 864) = v159;
          *(_QWORD *)(v234 + 872) = v160;
          serialize(_:at:)(0, (_BYTE **)(v234 + 856));
          serialize(_:at:)(0, (_BYTE **)(v234 + 856));
          *(_QWORD *)(v234 + 880) = v166;
          v161 = (_QWORD *)swift_task_alloc();
          v161[2] = v234 + 856;
          v161[3] = v234 + 864;
          v161[4] = v234 + 872;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_24701B000, log, v164, "#FlowFactory couldn't create intent from parse", v158, v163);
          destroyStorage<A>(_:count:)(v159, 0, v157);
          destroyStorage<A>(_:count:)(v160, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v158, MEMORY[0x24BEE4260]);
        }
        swift_bridgeObjectRelease();
        v155 = *(_QWORD *)(v234 + 1056);
        v156 = *(_QWORD *)(v234 + 992);

        v203(v155, v156);
        swift_release();
        __swift_destroy_boxed_opaque_existential_0(v234 + 480);
      }
      else
      {
        type metadata accessor for UsoTask_requestMoney_common_Payment();
        if ((swift_dynamicCast() & 1) != 0)
        {
          v153 = *(_QWORD *)(v234 + 952);
          static AceService.currentAsync.getter();
          outlined init with copy of GlobalsProviding(v153 + 56, v234 + 216);
          v154 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(0, 0, v234 + 176, v234 + 216);
          __swift_destroy_boxed_opaque_existential_0(v234 + 216);
          __swift_destroy_boxed_opaque_existential_0(v234 + 176);
          if (v154)
          {
            objc_opt_self();
            v152 = swift_dynamicCastObjCClass();
            if (v152)
            {
              v151 = (void *)v152;
            }
            else
            {

              v151 = 0;
            }
            v150 = v151;
          }
          else
          {
            v150 = 0;
          }
          if (v150)
          {
            v147 = *(_QWORD *)(v234 + 1112);
            v146 = *(_QWORD *)(v234 + 1088);
            v148 = *(_QWORD *)(v234 + 1080);
            *(_QWORD *)(v234 + 840) = v150;
            v149 = FlowFactory.requestPaymentFlow(intent:)(v150);

            swift_release();
            __swift_destroy_boxed_opaque_existential_0(v234 + 480);
            __swift_destroy_boxed_opaque_existential_0(v234 + 416);
            (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v147, v148);
            v192 = v149;
            goto LABEL_92;
          }
          v9 = *(_QWORD *)(v234 + 1048);
          v141 = *(_QWORD *)(v234 + 992);
          v10 = Logger.payments.unsafeMutableAddressor();
          v218(v9, v10, v141);
          v144 = Logger.logObject.getter();
          v143 = static os_log_type_t.debug.getter();
          *(_QWORD *)(v234 + 800) = 2;
          UnsignedInteger<>.init<A>(_:)();
          v142 = *(_DWORD *)(v234 + 1184);
          v145 = _allocateUninitializedArray<A>(_:)();
          if (os_log_type_enabled(v144, v143))
          {
            v137 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            v136 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
            v138 = createStorage<A>(capacity:type:)(0);
            v139 = createStorage<A>(capacity:type:)(0);
            *(_QWORD *)(v234 + 808) = v137;
            *(_QWORD *)(v234 + 816) = v138;
            *(_QWORD *)(v234 + 824) = v139;
            serialize(_:at:)(0, (_BYTE **)(v234 + 808));
            serialize(_:at:)(0, (_BYTE **)(v234 + 808));
            *(_QWORD *)(v234 + 832) = v145;
            v140 = (_QWORD *)swift_task_alloc();
            v140[2] = v234 + 808;
            v140[3] = v234 + 816;
            v140[4] = v234 + 824;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
            lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
            Sequence.forEach(_:)();
            swift_task_dealloc();
            _os_log_impl(&dword_24701B000, v144, v143, "#FlowFactory couldn't create intent from parse", v137, v142);
            destroyStorage<A>(_:count:)(v138, 0, v136);
            destroyStorage<A>(_:count:)(v139, 0, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x2495725CC](v137, MEMORY[0x24BEE4260]);
          }
          swift_bridgeObjectRelease();
          v134 = *(_QWORD *)(v234 + 1048);
          v135 = *(_QWORD *)(v234 + 992);

          v203(v134, v135);
          swift_release();
          __swift_destroy_boxed_opaque_existential_0(v234 + 480);
        }
        else
        {
          type metadata accessor for UsoTask_summarise_common_PaymentAccount();
          if ((swift_dynamicCast() & 1) != 0)
          {
            if ((USOParse.isRequestToSummariseAppleCardInfo.getter() & 1) != 0)
            {
              v131 = *(_QWORD *)(v234 + 1112);
              v130 = *(_QWORD *)(v234 + 1088);
              v132 = *(_QWORD *)(v234 + 1080);
              v133 = FlowFactory.makeLearnAboutAppleCardFlow()();
              swift_release();
              __swift_destroy_boxed_opaque_existential_0(v234 + 480);
              __swift_destroy_boxed_opaque_existential_0(v234 + 416);
              (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v131, v132);
              v192 = v133;
              goto LABEL_92;
            }
            v128 = *(_QWORD *)(v234 + 952);
            static AceService.currentAsync.getter();
            outlined init with copy of GlobalsProviding(v128 + 56, v234 + 136);
            v129 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(0, 0, v234 + 96, v234 + 136);
            __swift_destroy_boxed_opaque_existential_0(v234 + 136);
            __swift_destroy_boxed_opaque_existential_0(v234 + 96);
            if (v129)
            {
              objc_opt_self();
              v127 = swift_dynamicCastObjCClass();
              if (v127)
              {
                v126 = (void *)v127;
              }
              else
              {

                v126 = 0;
              }
              v125 = v126;
            }
            else
            {
              v125 = 0;
            }
            if (v125)
            {
              v122 = *(_QWORD *)(v234 + 1112);
              v121 = *(_QWORD *)(v234 + 1088);
              v123 = *(_QWORD *)(v234 + 1080);
              *(_QWORD *)(v234 + 792) = v125;
              v124 = FlowFactory.searchForAccountsFlow(intent:)(v125);

              swift_release();
              __swift_destroy_boxed_opaque_existential_0(v234 + 480);
              __swift_destroy_boxed_opaque_existential_0(v234 + 416);
              (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v122, v123);
              v192 = v124;
              goto LABEL_92;
            }
            v11 = *(_QWORD *)(v234 + 1040);
            v116 = *(_QWORD *)(v234 + 992);
            v12 = Logger.payments.unsafeMutableAddressor();
            v218(v11, v12, v116);
            v119 = Logger.logObject.getter();
            v118 = static os_log_type_t.debug.getter();
            *(_QWORD *)(v234 + 752) = 2;
            UnsignedInteger<>.init<A>(_:)();
            v117 = *(_DWORD *)(v234 + 1180);
            v120 = _allocateUninitializedArray<A>(_:)();
            if (os_log_type_enabled(v119, v118))
            {
              v112 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
              v111 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
              v113 = createStorage<A>(capacity:type:)(0);
              v114 = createStorage<A>(capacity:type:)(0);
              *(_QWORD *)(v234 + 760) = v112;
              *(_QWORD *)(v234 + 768) = v113;
              *(_QWORD *)(v234 + 776) = v114;
              serialize(_:at:)(0, (_BYTE **)(v234 + 760));
              serialize(_:at:)(0, (_BYTE **)(v234 + 760));
              *(_QWORD *)(v234 + 784) = v120;
              v115 = (_QWORD *)swift_task_alloc();
              v115[2] = v234 + 760;
              v115[3] = v234 + 768;
              v115[4] = v234 + 776;
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
              lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
              Sequence.forEach(_:)();
              swift_task_dealloc();
              _os_log_impl(&dword_24701B000, v119, v118, "#FlowFactory couldn't create intent from parse", v112, v117);
              destroyStorage<A>(_:count:)(v113, 0, v111);
              destroyStorage<A>(_:count:)(v114, 0, MEMORY[0x24BEE4AD8] + 8);
              MEMORY[0x2495725CC](v112, MEMORY[0x24BEE4260]);
            }
            swift_bridgeObjectRelease();
            v109 = *(_QWORD *)(v234 + 1040);
            v110 = *(_QWORD *)(v234 + 992);

            v203(v109, v110);
            swift_release();
            __swift_destroy_boxed_opaque_existential_0(v234 + 480);
          }
          else
          {
            type metadata accessor for UsoTask_noVerb_common_PaymentAccount();
            if ((swift_dynamicCast() & 1) != 0
              || (type metadata accessor for UsoTask_request_common_PaymentAccount(), (swift_dynamicCast() & 1) != 0))
            {
              swift_release();
              __swift_destroy_boxed_opaque_existential_0(v234 + 480);
              v107 = *(_QWORD *)(v234 + 952);
              static AceService.currentAsync.getter();
              outlined init with copy of GlobalsProviding(v107 + 56, v234 + 56);
              v108 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(0, 0, v234 + 16, v234 + 56);
              __swift_destroy_boxed_opaque_existential_0(v234 + 56);
              __swift_destroy_boxed_opaque_existential_0(v234 + 16);
              if (v108)
              {
                objc_opt_self();
                v106 = swift_dynamicCastObjCClass();
                if (v106)
                {
                  v105 = (void *)v106;
                }
                else
                {

                  v105 = 0;
                }
                v104 = v105;
              }
              else
              {
                v104 = 0;
              }
              if (v104)
              {
                v101 = *(_QWORD *)(v234 + 1112);
                v100 = *(_QWORD *)(v234 + 1088);
                v102 = *(_QWORD *)(v234 + 1080);
                *(_QWORD *)(v234 + 744) = v104;
                v103 = FlowFactory.searchForAccountsFlow(intent:)(v104);

                __swift_destroy_boxed_opaque_existential_0(v234 + 416);
                (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v101, v102);
                v192 = v103;
                goto LABEL_92;
              }
              v13 = *(_QWORD *)(v234 + 1032);
              v95 = *(_QWORD *)(v234 + 992);
              v14 = Logger.payments.unsafeMutableAddressor();
              v218(v13, v14, v95);
              v98 = Logger.logObject.getter();
              v97 = static os_log_type_t.debug.getter();
              *(_QWORD *)(v234 + 704) = 2;
              UnsignedInteger<>.init<A>(_:)();
              v96 = *(_DWORD *)(v234 + 1176);
              v99 = _allocateUninitializedArray<A>(_:)();
              if (os_log_type_enabled(v98, v97))
              {
                v91 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
                v90 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
                v92 = createStorage<A>(capacity:type:)(0);
                v93 = createStorage<A>(capacity:type:)(0);
                *(_QWORD *)(v234 + 712) = v91;
                *(_QWORD *)(v234 + 720) = v92;
                *(_QWORD *)(v234 + 728) = v93;
                serialize(_:at:)(0, (_BYTE **)(v234 + 712));
                serialize(_:at:)(0, (_BYTE **)(v234 + 712));
                *(_QWORD *)(v234 + 736) = v99;
                v94 = (_QWORD *)swift_task_alloc();
                v94[2] = v234 + 712;
                v94[3] = v234 + 720;
                v94[4] = v234 + 728;
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
                lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
                Sequence.forEach(_:)();
                swift_task_dealloc();
                _os_log_impl(&dword_24701B000, v98, v97, "#FlowFactory couldn't create intent from parse", v91, v96);
                destroyStorage<A>(_:count:)(v92, 0, v90);
                destroyStorage<A>(_:count:)(v93, 0, MEMORY[0x24BEE4AD8] + 8);
                MEMORY[0x2495725CC](v91, MEMORY[0x24BEE4260]);
              }
              swift_bridgeObjectRelease();
              v88 = *(_QWORD *)(v234 + 1032);
              v89 = *(_QWORD *)(v234 + 992);

              v203(v88, v89);
            }
            else
            {
              type metadata accessor for UsoTask_create_common_PaymentAccount();
              if ((swift_dynamicCast() & 1) != 0)
              {
                if ((USOParse.isRequestToCreateAppleCardAccount.getter() & 1) != 0)
                {
                  v85 = *(_QWORD *)(v234 + 1112);
                  v84 = *(_QWORD *)(v234 + 1088);
                  v86 = *(_QWORD *)(v234 + 1080);
                  v87 = FlowFactory.makeApplyForAppleCardFlow()();
                  swift_release();
                  __swift_destroy_boxed_opaque_existential_0(v234 + 480);
                  __swift_destroy_boxed_opaque_existential_0(v234 + 416);
                  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v85, v86);
                  v192 = v87;
                  goto LABEL_92;
                }
                swift_release();
                __swift_destroy_boxed_opaque_existential_0(v234 + 480);
              }
              else
              {
                v15 = *(_QWORD *)(v234 + 1024);
                v74 = *(_QWORD *)(v234 + 992);
                v16 = Logger.payments.unsafeMutableAddressor();
                v218(v15, v16, v74);
                outlined init with copy of Any(v234 + 416, v234 + 512);
                v76 = swift_allocObject();
                outlined init with take of Any(v234 + 512, v76 + 16);
                v82 = Logger.logObject.getter();
                v83 = static os_log_type_t.debug.getter();
                *(_QWORD *)(v234 + 696) = 12;
                UnsignedInteger<>.init<A>(_:)();
                v75 = *(_DWORD *)(v234 + 1172);
                v78 = swift_allocObject();
                *(_BYTE *)(v78 + 16) = 32;
                v79 = swift_allocObject();
                *(_BYTE *)(v79 + 16) = 8;
                v77 = swift_allocObject();
                *(_QWORD *)(v77 + 16) = partial apply for implicit closure #2 in FlowFactory.findFlow(for:);
                *(_QWORD *)(v77 + 24) = v76;
                v80 = swift_allocObject();
                *(_QWORD *)(v80 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
                *(_QWORD *)(v80 + 24) = v77;
                _allocateUninitializedArray<A>(_:)();
                v81 = v17;
                swift_retain();
                *v81 = partial apply for closure #1 in OSLogArguments.append(_:);
                v81[1] = v78;
                swift_retain();
                v81[2] = partial apply for closure #1 in OSLogArguments.append(_:);
                v81[3] = v79;
                swift_retain();
                v81[4] = partial apply for closure #1 in OSLogArguments.append(_:);
                v81[5] = v80;
                _finalizeUninitializedArray<A>(_:)();
                swift_bridgeObjectRelease();
                if (os_log_type_enabled(v82, v83))
                {
                  v71 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
                  v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
                  v72 = createStorage<A>(capacity:type:)(0);
                  v73 = createStorage<A>(capacity:type:)(1);
                  v244 = v71;
                  v245 = v72;
                  v246 = v73;
                  serialize(_:at:)(2, &v244);
                  serialize(_:at:)(1, &v244);
                  v247 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v248 = v78;
                  closure #1 in osLogInternal(_:log:type:)(&v247, (uint64_t)&v244, (uint64_t)&v245, (uint64_t)&v246);
                  v247 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v248 = v79;
                  closure #1 in osLogInternal(_:log:type:)(&v247, (uint64_t)&v244, (uint64_t)&v245, (uint64_t)&v246);
                  v247 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v248 = v80;
                  closure #1 in osLogInternal(_:log:type:)(&v247, (uint64_t)&v244, (uint64_t)&v245, (uint64_t)&v246);
                  _os_log_impl(&dword_24701B000, v82, v83, "#FlowFactory encountered unsupported task: %s", v71, v75);
                  destroyStorage<A>(_:count:)(v72, 0, v70);
                  destroyStorage<A>(_:count:)(v73, 1, MEMORY[0x24BEE4AD8] + 8);
                  MEMORY[0x2495725CC](v71, MEMORY[0x24BEE4260]);
                  swift_release();
                  swift_release();
                  swift_release();
                }
                else
                {
                  swift_release();
                  swift_release();
                  swift_release();
                }
                v68 = *(_QWORD *)(v234 + 1024);
                v69 = *(_QWORD *)(v234 + 992);

                v203(v68, v69);
                __swift_destroy_boxed_opaque_existential_0(v234 + 480);
              }
            }
          }
        }
      }
    }
    v66 = *(_QWORD *)(v234 + 1112);
    v65 = *(_QWORD *)(v234 + 1088);
    v67 = *(_QWORD *)(v234 + 1080);
    __swift_destroy_boxed_opaque_existential_0(v234 + 416);
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v66, v67);
LABEL_91:
    v192 = 0;
    goto LABEL_92;
  }
  v18 = *(_QWORD *)(v234 + 1016);
  v60 = *(_QWORD *)(v234 + 992);
  outlined destroy of FlowActivity?(v234 + 448);
  v19 = Logger.payments.unsafeMutableAddressor();
  v218(v18, v19, v60);
  v63 = Logger.logObject.getter();
  v62 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v234 + 600) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v61 = *(_DWORD *)(v234 + 1168);
  v64 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v63, v62))
  {
    v56 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v57 = createStorage<A>(capacity:type:)(0);
    v58 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v234 + 608) = v56;
    *(_QWORD *)(v234 + 616) = v57;
    *(_QWORD *)(v234 + 624) = v58;
    serialize(_:at:)(0, (_BYTE **)(v234 + 608));
    serialize(_:at:)(0, (_BYTE **)(v234 + 608));
    *(_QWORD *)(v234 + 632) = v64;
    v59 = (_QWORD *)swift_task_alloc();
    v59[2] = v234 + 608;
    v59[3] = v234 + 616;
    v59[4] = v234 + 624;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v63, v62, "#FlowFactory couldn't find a UsoTask for the given UsoParse", v56, v61);
    destroyStorage<A>(_:count:)(v57, 0, v55);
    destroyStorage<A>(_:count:)(v58, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v56, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v53 = *(_QWORD *)(v234 + 1112);
  v52 = *(_QWORD *)(v234 + 1088);
  v54 = *(_QWORD *)(v234 + 1080);
  v50 = *(_QWORD *)(v234 + 1016);
  v51 = *(_QWORD *)(v234 + 992);

  v203(v50, v51);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v53, v54);
  v192 = 0;
LABEL_92:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v234 + 544) + 8))(v192);
}

uint64_t implicit closure #1 in FlowFactory.findFlow(for:)()
{
  return USOParse.debugDescription.getter();
}

uint64_t implicit closure #2 in FlowFactory.findFlow(for:)(uint64_t a1)
{
  _BYTE v2[32];

  outlined init with copy of Any(a1, (uint64_t)v2);
  return String.init<A>(describing:)();
}

uint64_t implicit closure #3 in FlowFactory.findFlow(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;

  v3 = a1;
  v5 = type metadata accessor for Parse();
  v4 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v6 = (char *)&v3 - v4;
  (*(void (**)(char *))(v1 + 16))((char *)&v3 - v4);
  return String.init<A>(describing:)();
}

uint64_t sub_247074974()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Parse() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in FlowFactory.findFlow(for:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Parse() - 8) + 80);
  return implicit closure #3 in FlowFactory.findFlow(for:)(v0 + ((v1 + 16) & ~v1));
}

uint64_t FlowFactory.guardFlow(with:)()
{
  return static CommonGuardFlowUtils.makeGuardFlow(withGuards:)();
}

uint64_t FlowFactory.unsupportedActionFlow()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[10] = v0;
  v1[2] = v1;
  v1[3] = 0;
  v2 = type metadata accessor for Logger();
  v1[11] = v2;
  v1[12] = *(_QWORD *)(v2 - 8);
  v1[13] = swift_task_alloc();
  v1[3] = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint32_t v17;
  os_log_type_t v18;
  NSObject *v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 104);
  v15 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 16) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v2, v16);
  v19 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 32) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v17 = *(_DWORD *)(v0 + 112);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v20 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v19, v18))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v11 = createStorage<A>(capacity:type:)(0);
    v12 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v14 + 48) = buf;
    *(_QWORD *)(v14 + 56) = v11;
    *(_QWORD *)(v14 + 64) = v12;
    serialize(_:at:)(0, (_BYTE **)(v14 + 48));
    serialize(_:at:)(0, (_BYTE **)(v14 + 48));
    *(_QWORD *)(v14 + 72) = v20;
    v13 = (_QWORD *)swift_task_alloc();
    v13[2] = v14 + 48;
    v13[3] = v14 + 56;
    v13[4] = v14 + 64;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v19, v18, "#FlowFactory building flow for unsupportedAction", buf, v17);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v14 + 104);
  v4 = *(_QWORD *)(v14 + 96);
  v5 = *(_QWORD *)(v14 + 88);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v5);
  type metadata accessor for SimpleOutputFlowAsync();
  swift_retain();
  swift_retain();
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v6 = SimpleOutputFlowAsync.__allocating_init(outputPublisher:outputGenerator:)();
  swift_release();
  *(_QWORD *)(v14 + 40) = v6;
  v8 = Flow.eraseToAnyFlow()();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 + 16) + 8))(v8);
}

uint64_t closure #1 in FlowFactory.unsupportedActionFlow()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[20] = a2;
  v2[19] = a1;
  v2[17] = v2;
  v2[18] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[21] = swift_task_alloc();
  type metadata accessor for CATOption();
  v2[22] = swift_task_alloc();
  v3 = type metadata accessor for TemplatingResult();
  v2[23] = v3;
  v2[24] = *(_QWORD *)(v3 - 8);
  v2[25] = swift_task_alloc();
  v2[18] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in FlowFactory.unsupportedActionFlow()()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v3;

  *(_QWORD *)(v0 + 136) = v0;
  type metadata accessor for PaymentsUnsupportedIntentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  *(_QWORD *)(v0 + 208) = CATWrapper.__allocating_init(options:globals:)();
  v1 = (_QWORD *)swift_task_alloc();
  v3[27] = v1;
  *v1 = v3[17];
  v1[1] = closure #1 in FlowFactory.unsupportedActionFlow();
  return PaymentsUnsupportedIntentCATs.unsupportedSurfIntent()(v3[25]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 136) = *v1;
  *(_QWORD *)(v2 + 224) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = v0[25];
  v5 = v0[24];
  v6 = v0[23];
  v8 = v0[21];
  v3 = v0[20];
  v4 = (uint64_t *)v0[19];
  v0[17] = v0;
  outlined init with copy of GlobalsProviding(v3 + 16, (uint64_t)(v0 + 2));
  outlined init with copy of GlobalsProviding(v3 + 16, (uint64_t)(v0 + 7));
  __swift_project_boxed_opaque_existential_1(v0 + 7, v0[10]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v8, 1);
  v0[12] = 0;
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  v0[16] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v4[3] = type metadata accessor for AceOutput();
  v4[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v4);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 12));
  outlined destroy of NLContextUpdate?(v8);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[17] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 136) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 136) + 8))();
}

uint64_t FlowFactory.unsupportedOnDeviceFlow()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char **v5;
  char *v6;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  char **v20;
  char *v21;
  uint64_t *v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint32_t v33;
  uint64_t v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41[2];
  char v42;
  uint64_t v43;
  uint32_t v44;
  uint64_t v45;

  v45 = 0;
  v25 = 0;
  v34 = 0;
  v29 = type metadata accessor for Logger();
  v28 = *(_QWORD *)(v29 - 8);
  v26 = (*(_QWORD *)(v28 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v29);
  v0 = (char *)&v8 - v26;
  v27 = (char *)&v8 - v26;
  v45 = v1;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v0, v2, v29);
  v36 = Logger.logObject.getter();
  v35 = static os_log_type_t.debug.getter();
  v32 = &v43;
  v43 = 2;
  v30 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v31 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v33 = v44;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v37 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v36, (os_log_type_t)v35))
  {
    v3 = v25;
    v15 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v14 = 0;
    v16 = createStorage<A>(capacity:type:)(0);
    v17 = createStorage<A>(capacity:type:)(v14);
    v21 = (char *)v41;
    v41[0] = v15;
    v22 = &v40;
    v40 = v16;
    v19 = &v39;
    v39 = v17;
    v18 = 0;
    serialize(_:at:)(0, v41);
    serialize(_:at:)(v18, (_BYTE **)v21);
    v38 = v37;
    v20 = &v8;
    MEMORY[0x24BDAC7A8](&v8);
    v4 = v22;
    v5 = &v8 - 6;
    v23 = &v8 - 6;
    v5[2] = v21;
    v5[3] = (char *)v4;
    v5[4] = v6;
    v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v3)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, v36, (os_log_type_t)v35, "#FlowFactory building flow for unsupported on device", v15, v33);
      v12 = 0;
      destroyStorage<A>(_:count:)(v16, 0, v13);
      destroyStorage<A>(_:count:)(v17, v12, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v15, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v29);
  v10 = type metadata accessor for SimpleOutputFlowAsync();
  swift_retain();
  swift_retain();
  v8 = &v42;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v9 = (_BYTE *)SimpleOutputFlowAsync.__allocating_init(outputPublisher:outputGenerator:)();
  swift_release();
  v41[1] = v9;
  v11 = Flow.eraseToAnyFlow()();
  swift_release();
  return v11;
}

uint64_t closure #1 in FlowFactory.unsupportedOnDeviceFlow()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[20] = a2;
  v2[19] = a1;
  v2[17] = v2;
  v2[18] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[21] = swift_task_alloc();
  type metadata accessor for CATOption();
  v2[22] = swift_task_alloc();
  v3 = type metadata accessor for TemplatingResult();
  v2[23] = v3;
  v2[24] = *(_QWORD *)(v3 - 8);
  v2[25] = swift_task_alloc();
  v2[18] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in FlowFactory.unsupportedOnDeviceFlow()()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v3;

  *(_QWORD *)(v0 + 136) = v0;
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  *(_QWORD *)(v0 + 208) = CATWrapper.__allocating_init(options:globals:)();
  v1 = (_QWORD *)swift_task_alloc();
  v3[27] = v1;
  *v1 = v3[17];
  v1[1] = closure #1 in FlowFactory.unsupportedActionFlow();
  return PaymentsBaseCATs.unsupportedOnWatch()(v3[25]);
}

uint64_t FlowFactory.sendPaymentFlow(intent:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _UNKNOWN **v12;
  uint64_t *v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[5];
  uint64_t v30[4];
  uint64_t v31;
  uint64_t v32;

  v15 = a1;
  v32 = 0;
  v31 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INSendPaymentIntent, INSendPaymentIntentResponse>);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v17 = (uint64_t)&v6 - v7;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowFactory<SendPaymentFlowStrategy>);
  v21 = *(_QWORD *)(v22 - 8);
  v8 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v15);
  v23 = (char *)&v6 - v8;
  v32 = v3;
  v31 = v1;
  v9 = 0;
  v19 = type metadata accessor for SendPaymentFlowStrategy();
  v10 = type metadata accessor for INSendPaymentIntent();
  v11 = type metadata accessor for INSendPaymentIntentResponse();
  v13 = v30;
  v12 = &protocol witness table for INSendPaymentIntent;
  default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v10, v11, v30);
  v14 = v29;
  default argument 1 of PaymentsRCHFlowStrategy.init(globals:contactResolver:)(v29);
  v4 = SendPaymentFlowStrategy.__allocating_init(globals:contactResolver:)((uint64_t)v13, (uint64_t)v14);
  v20 = &v28;
  v28 = v4;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INSendPaymentIntent, INSendPaymentIntentResponse>);
  FlowFactory.sendPaymentFlowProducers(intent:)(v15, v17);
  v18 = RCHChildFlowFactory.__allocating_init(producers:)();
  lazy protocol witness table accessor for type SendPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>();
  RCHFlowFactory.init(strategy:childFlowFactory:)();
  v24 = RCHFlowFactory.makeAppResolvingRCHFlow()();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v22);
  v27 = v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INSendPaymentIntent, INSendPaymentIntentResponse>>);
  lazy protocol witness table accessor for type AnyValueFlow<RCHFlowResult<INSendPaymentIntent, INSendPaymentIntentResponse>> and conformance AnyValueFlow<A>();
  v26 = Flow.eraseToAnyFlow()();
  swift_release();
  return v26;
}

uint64_t FlowFactory.sendPaymentFlowProducers(intent:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _UNKNOWN **v48;
  _UNKNOWN **v49;
  uint64_t *v50;
  _BYTE *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t *v89;
  _BYTE **v90;
  _BYTE **v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  unint64_t v101;
  char *v102;
  void *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t *v110;
  uint32_t v111;
  uint64_t v112;
  int v113;
  NSObject *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127[5];
  _BYTE v128[40];
  uint64_t v129[5];
  _QWORD *v130;
  uint64_t v131;
  char v132;
  uint64_t v133[5];
  _BYTE v134[40];
  uint64_t v135;
  uint32_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;

  v95 = a2;
  v103 = a1;
  v140 = 0;
  v139 = 0;
  v138 = 0;
  v137 = 0;
  v96 = 0;
  v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INSendPaymentIntent, INSendPaymentIntentResponse>);
  v98 = *(_QWORD *)(v97 - 8);
  v99 = (*(_QWORD *)(v98 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v97);
  v100 = (char *)&v34 - v99;
  v140 = (char *)&v34 - v99;
  v112 = 0;
  v107 = type metadata accessor for Logger();
  v106 = *(_QWORD *)(v107 - 8);
  v101 = (*(_QWORD *)(v106 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v112);
  v2 = (char *)&v34 - v101;
  v102 = (char *)&v34 - v101;
  v104 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Signpost.OpenSignpost() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v103);
  v105 = (uint64_t)&v34 - v104;
  v139 = (char *)&v34 - v104;
  v138 = v3;
  v137 = v4;
  v5 = SignpostName.makeSendPaymentFlowProducers.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v5, v5[1], *((unsigned __int8 *)v5 + 16), v105);
  v6 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v106 + 16))(v2, v6, v107);
  v114 = Logger.logObject.getter();
  v113 = static os_log_type_t.debug.getter();
  v110 = &v135;
  v135 = 2;
  v108 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v109 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v111 = v136;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v115 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v114, (os_log_type_t)v113))
  {
    v7 = v96;
    v85 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v83 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v84 = 0;
    v86 = createStorage<A>(capacity:type:)(0);
    v87 = createStorage<A>(capacity:type:)(v84);
    v91 = &v119;
    v119 = v85;
    v92 = &v118;
    v118 = v86;
    v89 = &v117;
    v117 = v87;
    v88 = 0;
    serialize(_:at:)(0, &v119);
    serialize(_:at:)(v88, v91);
    v116 = v115;
    v90 = &v34;
    MEMORY[0x24BDAC7A8](&v34);
    v8 = v92;
    v9 = (uint64_t *)(&v34 - 6);
    v93 = (uint64_t *)(&v34 - 6);
    v9[2] = (uint64_t)v91;
    v9[3] = (uint64_t)v8;
    v9[4] = v10;
    v94 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v7)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, v114, (os_log_type_t)v113, "#sendPaymentFlowProducers init", v85, v111);
      v82 = 0;
      destroyStorage<A>(_:count:)(v86, 0, v83);
      destroyStorage<A>(_:count:)(v87, v82, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v85, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v106 + 8))(v102, v107);
  v77 = 0;
  v46 = type metadata accessor for INSendPaymentIntent();
  v47 = type metadata accessor for INSendPaymentIntentResponse();
  RCHChildFlowProducersAsync.init()();
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsAppResolutionFlowStrategy<INSendPaymentIntent>);
  v48 = &protocol witness table for INSendPaymentIntent;
  v37 = default argument 0 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v46, (uint64_t)&protocol witness table for INSendPaymentIntent, v11, v12);
  v34 = v134;
  default argument 1 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v46, (uint64_t)v134);
  v35 = v133;
  default argument 2 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v133);
  v36 = &v132;
  default argument 3 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)();
  v13 = default argument 4 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v46);
  v14 = PaymentsAppResolutionFlowStrategy.__allocating_init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v37, (uint64_t)v34, (uint64_t)v35, (uint64_t)v36, v13);
  v39 = &v131;
  v131 = v14;
  lazy protocol witness table accessor for type PaymentsAppResolutionFlowStrategy<INSendPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>();
  v40 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B, C>(strategy:)();
  v41 = v15;
  swift_release();
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  v42 = type metadata accessor for SendTCCHandleStrategy();
  v16 = v103;
  v17 = SendTCCHandleStrategy.__allocating_init(previousIntent:)(v103);
  v43 = &v130;
  v130 = v17;
  lazy protocol witness table accessor for type SendTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>();
  v44 = static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)();
  v45 = v18;
  swift_release();
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter();
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsContinueInAppStrategy<INSendPaymentIntent, INSendPaymentIntentResponse>);
  v50 = v129;
  v49 = &protocol witness table for INSendPaymentIntentResponse;
  default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v46, v47, v129);
  v51 = v128;
  default argument 1 of PaymentsContinueInAppStrategy.init(globals:commonLabelsProvider:errorTemplateProvider:)(v46, (uint64_t)v128);
  v52 = v127;
  default argument 2 of PaymentsContinueInAppStrategy.init(globals:commonLabelsProvider:errorTemplateProvider:)(v46, v47, (uint64_t)v48, (uint64_t)v49, v127);
  v19 = PaymentsContinueInAppStrategy.__allocating_init(globals:commonLabelsProvider:errorTemplateProvider:)(v50, (uint64_t)v51, v52);
  v54 = &v126;
  v126 = v19;
  lazy protocol witness table accessor for type PaymentsContinueInAppStrategy<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>();
  v55 = static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithDialogProducer<A>(strategy:)();
  v56 = v20;
  swift_release();
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter();
  v57 = type metadata accessor for SendPaymentUnsupportedValueStrategy();
  v21 = SendPaymentUnsupportedValueStrategy.__allocating_init()();
  v58 = &v125;
  v125 = v21;
  lazy protocol witness table accessor for type SendPaymentUnsupportedValueStrategy and conformance SendPaymentUnsupportedValueStrategy();
  v59 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
  v60 = v22;
  swift_release();
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
  v61 = type metadata accessor for SendPaymentNeedsValueStrategy();
  v23 = SendPaymentUnsupportedValueStrategy.__allocating_init()();
  v62 = &v124;
  v124 = v23;
  lazy protocol witness table accessor for type SendPaymentNeedsValueStrategy and conformance SendPaymentNeedsValueStrategy();
  v63 = static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
  v64 = v24;
  swift_release();
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
  v65 = type metadata accessor for PayeeDisambiguationStrategy();
  v25 = PayeeDisambiguationStrategy.__allocating_init()();
  v66 = &v123;
  v123 = v25;
  lazy protocol witness table accessor for type PayeeDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>();
  v67 = static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
  v68 = v26;
  swift_release();
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
  v69 = type metadata accessor for SendPaymentNeedsConfirmationFlowStrategy();
  v27 = SendPaymentNeedsConfirmationFlowStrategy.__allocating_init()();
  v70 = &v122;
  v122 = v27;
  lazy protocol witness table accessor for type SendPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>();
  v71 = static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)();
  v72 = v28;
  swift_release();
  RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter();
  v73 = type metadata accessor for SendPaymentConfirmIntentStrategy();
  v29 = SendPaymentUnsupportedValueStrategy.__allocating_init()();
  v74 = &v121;
  v121 = v29;
  lazy protocol witness table accessor for type SendPaymentConfirmIntentStrategy and conformance SendPaymentConfirmIntentStrategy();
  v75 = static RCHChildFlowFactoryHelper.makeConfirmIntentFlowProducer<A>(strategy:)();
  v76 = v30;
  swift_release();
  RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter();
  v78 = type metadata accessor for SendPaymentHandleIntentStrategy();
  v31 = SendPaymentUnsupportedValueStrategy.__allocating_init()();
  v79 = &v120;
  v120 = v31;
  lazy protocol witness table accessor for type SendPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>();
  v80 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  v81 = v32;
  swift_release();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v98 + 32))(v95, v100, v97);
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  return outlined destroy of Signpost.OpenSignpost(v105);
}

uint64_t FlowFactory.requestPaymentFlow(intent:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _UNKNOWN **v12;
  uint64_t *v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[5];
  uint64_t v30[4];
  uint64_t v31;
  uint64_t v32;

  v15 = a1;
  v32 = 0;
  v31 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v17 = (uint64_t)&v6 - v7;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowFactory<RequestPaymentFlowStrategy>);
  v21 = *(_QWORD *)(v22 - 8);
  v8 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v15);
  v23 = (char *)&v6 - v8;
  v32 = v3;
  v31 = v1;
  v9 = 0;
  v19 = type metadata accessor for RequestPaymentFlowStrategy();
  v10 = type metadata accessor for INRequestPaymentIntent();
  v11 = type metadata accessor for INRequestPaymentIntentResponse();
  v13 = v30;
  v12 = &protocol witness table for INRequestPaymentIntent;
  default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v10, v11, v30);
  v14 = v29;
  default argument 1 of PaymentsRCHFlowStrategy.init(globals:contactResolver:)(v29);
  v4 = SendPaymentFlowStrategy.__allocating_init(globals:contactResolver:)((uint64_t)v13, (uint64_t)v14);
  v20 = &v28;
  v28 = v4;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  FlowFactory.requestPaymentFlowProducers(intent:)(v15, v17);
  v18 = RCHChildFlowFactory.__allocating_init(producers:)();
  lazy protocol witness table accessor for type RequestPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>();
  RCHFlowFactory.init(strategy:childFlowFactory:)();
  v24 = RCHFlowFactory.makeAppResolvingRCHFlow()();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v22);
  v27 = v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INRequestPaymentIntent, INRequestPaymentIntentResponse>>);
  lazy protocol witness table accessor for type AnyValueFlow<RCHFlowResult<INRequestPaymentIntent, INRequestPaymentIntentResponse>> and conformance AnyValueFlow<A>();
  v26 = Flow.eraseToAnyFlow()();
  swift_release();
  return v26;
}

uint64_t FlowFactory.requestPaymentFlowProducers(intent:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _UNKNOWN **v48;
  _UNKNOWN **v49;
  uint64_t *v50;
  _BYTE *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t *v89;
  _BYTE **v90;
  _BYTE **v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  unint64_t v101;
  char *v102;
  void *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t *v110;
  uint32_t v111;
  uint64_t v112;
  int v113;
  NSObject *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127[5];
  _BYTE v128[40];
  uint64_t v129[5];
  _QWORD *v130;
  uint64_t v131;
  char v132;
  uint64_t v133[5];
  _BYTE v134[40];
  uint64_t v135;
  uint32_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;

  v95 = a2;
  v103 = a1;
  v140 = 0;
  v139 = 0;
  v138 = 0;
  v137 = 0;
  v96 = 0;
  v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  v98 = *(_QWORD *)(v97 - 8);
  v99 = (*(_QWORD *)(v98 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v97);
  v100 = (char *)&v34 - v99;
  v140 = (char *)&v34 - v99;
  v112 = 0;
  v107 = type metadata accessor for Logger();
  v106 = *(_QWORD *)(v107 - 8);
  v101 = (*(_QWORD *)(v106 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v112);
  v2 = (char *)&v34 - v101;
  v102 = (char *)&v34 - v101;
  v104 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Signpost.OpenSignpost() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v103);
  v105 = (uint64_t)&v34 - v104;
  v139 = (char *)&v34 - v104;
  v138 = v3;
  v137 = v4;
  v5 = SignpostName.makeRequestPaymentFlowProducers.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v5, v5[1], *((unsigned __int8 *)v5 + 16), v105);
  v6 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v106 + 16))(v2, v6, v107);
  v114 = Logger.logObject.getter();
  v113 = static os_log_type_t.debug.getter();
  v110 = &v135;
  v135 = 2;
  v108 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v109 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v111 = v136;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v115 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v114, (os_log_type_t)v113))
  {
    v7 = v96;
    v85 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v83 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v84 = 0;
    v86 = createStorage<A>(capacity:type:)(0);
    v87 = createStorage<A>(capacity:type:)(v84);
    v91 = &v119;
    v119 = v85;
    v92 = &v118;
    v118 = v86;
    v89 = &v117;
    v117 = v87;
    v88 = 0;
    serialize(_:at:)(0, &v119);
    serialize(_:at:)(v88, v91);
    v116 = v115;
    v90 = &v34;
    MEMORY[0x24BDAC7A8](&v34);
    v8 = v92;
    v9 = (uint64_t *)(&v34 - 6);
    v93 = (uint64_t *)(&v34 - 6);
    v9[2] = (uint64_t)v91;
    v9[3] = (uint64_t)v8;
    v9[4] = v10;
    v94 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v7)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, v114, (os_log_type_t)v113, "#requestPaymentFlowProducers init", v85, v111);
      v82 = 0;
      destroyStorage<A>(_:count:)(v86, 0, v83);
      destroyStorage<A>(_:count:)(v87, v82, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v85, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v106 + 8))(v102, v107);
  v77 = 0;
  v46 = type metadata accessor for INRequestPaymentIntent();
  v47 = type metadata accessor for INRequestPaymentIntentResponse();
  RCHChildFlowProducersAsync.init()();
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsAppResolutionFlowStrategy<INRequestPaymentIntent>);
  v48 = &protocol witness table for INRequestPaymentIntent;
  v37 = default argument 0 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v46, (uint64_t)&protocol witness table for INRequestPaymentIntent, v11, v12);
  v34 = v134;
  default argument 1 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v46, (uint64_t)v134);
  v35 = v133;
  default argument 2 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v133);
  v36 = &v132;
  default argument 3 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)();
  v13 = default argument 4 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v46);
  v14 = PaymentsAppResolutionFlowStrategy.__allocating_init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v37, (uint64_t)v34, (uint64_t)v35, (uint64_t)v36, v13);
  v39 = &v131;
  v131 = v14;
  lazy protocol witness table accessor for type PaymentsAppResolutionFlowStrategy<INRequestPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>();
  v40 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B, C>(strategy:)();
  v41 = v15;
  swift_release();
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  v42 = type metadata accessor for RequestTCCHandleStrategy();
  v16 = v103;
  v17 = RequestTCCHandleStrategy.__allocating_init(previousIntent:)(v103);
  v43 = &v130;
  v130 = v17;
  lazy protocol witness table accessor for type RequestTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>();
  v44 = static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)();
  v45 = v18;
  swift_release();
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter();
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsContinueInAppStrategy<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  v50 = v129;
  v49 = &protocol witness table for INRequestPaymentIntentResponse;
  default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v46, v47, v129);
  v51 = v128;
  default argument 1 of PaymentsContinueInAppStrategy.init(globals:commonLabelsProvider:errorTemplateProvider:)(v46, (uint64_t)v128);
  v52 = v127;
  default argument 2 of PaymentsContinueInAppStrategy.init(globals:commonLabelsProvider:errorTemplateProvider:)(v46, v47, (uint64_t)v48, (uint64_t)v49, v127);
  v19 = PaymentsContinueInAppStrategy.__allocating_init(globals:commonLabelsProvider:errorTemplateProvider:)(v50, (uint64_t)v51, v52);
  v54 = &v126;
  v126 = v19;
  lazy protocol witness table accessor for type PaymentsContinueInAppStrategy<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>();
  v55 = static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithDialogProducer<A>(strategy:)();
  v56 = v20;
  swift_release();
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter();
  v57 = type metadata accessor for RequestPaymentUnsupportedValueStrategy();
  v21 = RequestPaymentHandleIntentStrategy.__allocating_init()();
  v58 = &v125;
  v125 = v21;
  lazy protocol witness table accessor for type RequestPaymentUnsupportedValueStrategy and conformance RequestPaymentUnsupportedValueStrategy();
  v59 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
  v60 = v22;
  swift_release();
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
  v61 = type metadata accessor for RequestPaymentNeedsValueStrategy();
  v23 = RequestPaymentHandleIntentStrategy.__allocating_init()();
  v62 = &v124;
  v124 = v23;
  lazy protocol witness table accessor for type RequestPaymentNeedsValueStrategy and conformance RequestPaymentNeedsValueStrategy();
  v63 = static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
  v64 = v24;
  swift_release();
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
  v65 = type metadata accessor for PayerDisambiguationStrategy();
  v25 = PayerDisambiguationStrategy.__allocating_init()();
  v66 = &v123;
  v123 = v25;
  lazy protocol witness table accessor for type PayerDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>();
  v67 = static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
  v68 = v26;
  swift_release();
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
  v69 = type metadata accessor for RequestPaymentNeedsConfirmationFlowStrategy();
  v27 = RequestPaymentNeedsConfirmationFlowStrategy.__allocating_init()();
  v70 = &v122;
  v122 = v27;
  lazy protocol witness table accessor for type RequestPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>();
  v71 = static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)();
  v72 = v28;
  swift_release();
  RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter();
  v73 = type metadata accessor for RequestPaymentConfirmIntentStrategy();
  v29 = RequestPaymentHandleIntentStrategy.__allocating_init()();
  v74 = &v121;
  v121 = v29;
  lazy protocol witness table accessor for type RequestPaymentConfirmIntentStrategy and conformance RequestPaymentConfirmIntentStrategy();
  v75 = static RCHChildFlowFactoryHelper.makeConfirmIntentFlowProducer<A>(strategy:)();
  v76 = v30;
  swift_release();
  RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter();
  v78 = type metadata accessor for RequestPaymentHandleIntentStrategy();
  v31 = RequestPaymentHandleIntentStrategy.__allocating_init()();
  v79 = &v120;
  v120 = v31;
  lazy protocol witness table accessor for type RequestPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>();
  v80 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  v81 = v32;
  swift_release();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v98 + 32))(v95, v100, v97);
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  return outlined destroy of Signpost.OpenSignpost(v105);
}

uint64_t FlowFactory.searchForAccountsFlow(intent:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _UNKNOWN **v12;
  uint64_t *v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[5];
  uint64_t v30[4];
  uint64_t v31;
  uint64_t v32;

  v15 = a1;
  v32 = 0;
  v31 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v17 = (uint64_t)&v6 - v7;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowFactory<SearchForAccountsFlowStrategy>);
  v21 = *(_QWORD *)(v22 - 8);
  v8 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v15);
  v23 = (char *)&v6 - v8;
  v32 = v3;
  v31 = v1;
  v9 = 0;
  v19 = type metadata accessor for SearchForAccountsFlowStrategy();
  v10 = type metadata accessor for INSearchForAccountsIntent();
  v11 = type metadata accessor for INSearchForAccountsIntentResponse();
  v13 = v30;
  v12 = &protocol witness table for INSearchForAccountsIntent;
  default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v10, v11, v30);
  v14 = v29;
  default argument 1 of PaymentsRCHFlowStrategy.init(globals:contactResolver:)(v29);
  v4 = SendPaymentFlowStrategy.__allocating_init(globals:contactResolver:)((uint64_t)v13, (uint64_t)v14);
  v20 = &v28;
  v28 = v4;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  FlowFactory.searchForAccountsFlowProducers(intent:)(v15, v17);
  v18 = RCHChildFlowFactory.__allocating_init(producers:)();
  lazy protocol witness table accessor for type SearchForAccountsFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>();
  RCHFlowFactory.init(strategy:childFlowFactory:)();
  v24 = RCHFlowFactory.makeAppResolvingRCHFlow()();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v22);
  v27 = v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>>);
  lazy protocol witness table accessor for type AnyValueFlow<RCHFlowResult<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>> and conformance AnyValueFlow<A>();
  v26 = Flow.eraseToAnyFlow()();
  swift_release();
  return v26;
}

uint64_t FlowFactory.searchForAccountsFlowProducers(intent:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  _BYTE *v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  _BYTE v70[40];
  uint64_t v71[5];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76[5];
  _BYTE v77[40];
  uint64_t v78;
  uint64_t v79;
  char *v80;

  v63 = a2;
  v51 = a1;
  v80 = 0;
  v79 = 0;
  v78 = 0;
  v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  v62 = *(_QWORD *)(v65 - 8);
  v22[0] = (*(_QWORD *)(v62 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v64 = (char *)v22 - v22[0];
  v80 = (char *)v22 - v22[0];
  v79 = MEMORY[0x24BDAC7A8](v51);
  v78 = v2;
  v57 = 0;
  v28 = type metadata accessor for INSearchForAccountsIntent();
  v53 = type metadata accessor for INSearchForAccountsIntentResponse();
  RCHChildFlowProducersAsync.init()();
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsAppResolutionFlowStrategy<INSearchForAccountsIntent>);
  v22[1] = &protocol witness table for INSearchForAccountsIntent;
  v26 = default argument 0 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v28, (uint64_t)&protocol witness table for INSearchForAccountsIntent, v3, v4);
  v23 = v77;
  default argument 1 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v28, (uint64_t)v77);
  v24 = v76;
  default argument 2 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v76);
  v25 = &v75;
  default argument 3 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)();
  v5 = default argument 4 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v28);
  v6 = PaymentsAppResolutionFlowStrategy.__allocating_init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v26, (uint64_t)v23, (uint64_t)v24, (uint64_t)v25, v5);
  v29 = &v74;
  v74 = v6;
  lazy protocol witness table accessor for type PaymentsAppResolutionFlowStrategy<INSearchForAccountsIntent> and conformance PaymentsAppResolutionFlowStrategy<A>();
  v30 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B, C>(strategy:)();
  v31 = v7;
  swift_release();
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  v32 = type metadata accessor for SearchForAccountsContinueInAppStrategy();
  v8 = SearchForAccountsContinueInAppStrategy.__allocating_init()();
  v33 = &v73;
  v73 = v8;
  lazy protocol witness table accessor for type SearchForAccountsContinueInAppStrategy and conformance SearchForAccountsContinueInAppStrategy();
  v34 = static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithDialogProducer<A>(strategy:)();
  v35 = v9;
  swift_release();
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter();
  v36 = type metadata accessor for SearchForAccountsHandleIntentStrategy();
  v10 = SearchForAccountsHandleIntentStrategy.__allocating_init()();
  v37 = &v72;
  v72 = v10;
  lazy protocol witness table accessor for type SearchForAccountsHandleIntentStrategy and conformance BaseStrategy<A, B, C>();
  v38 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  v39 = v11;
  swift_release();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  v43 = type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
  v40 = v71;
  default argument 0 of SearchForAccountsNeedsConfirmationStrategy.init(globals:catFamily:commonLabelsProvider:)(v71);
  v41 = default argument 1 of SearchForAccountsNeedsConfirmationStrategy.init(globals:catFamily:commonLabelsProvider:)();
  v42 = v70;
  default argument 2 of SearchForAccountsNeedsConfirmationStrategy.init(globals:catFamily:commonLabelsProvider:)(v41, (uint64_t)v70);
  v12 = SearchForAccountsNeedsConfirmationStrategy.__allocating_init(globals:catFamily:commonLabelsProvider:)(v40, v41, (uint64_t)v42);
  v44 = &v69;
  v69 = v12;
  lazy protocol witness table accessor for type SearchForAccountsNeedsConfirmationStrategy and conformance SearchForAccountsNeedsConfirmationStrategy();
  v45 = static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)();
  v46 = v13;
  swift_release();
  RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter();
  v47 = type metadata accessor for SearchForAccountsNeedsValueStrategy();
  v14 = SearchForAccountsContinueInAppStrategy.__allocating_init()();
  v48 = &v68;
  v68 = v14;
  lazy protocol witness table accessor for type SearchForAccountsNeedsValueStrategy and conformance SearchForAccountsNeedsValueStrategy();
  v49 = static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
  v50 = v15;
  swift_release();
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
  v52 = type metadata accessor for SearchForAccountsTCCHandleStrategy();
  v16 = v51;
  v17 = SearchForAccountsTCCHandleStrategy.__allocating_init(previousIntent:)(v51);
  v54 = &v67;
  v67 = v17;
  lazy protocol witness table accessor for type SearchForAccountsTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>();
  v55 = static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)();
  v56 = v18;
  swift_release();
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter();
  v58 = type metadata accessor for SearchForAccountsUnsupportedValueStrategy();
  v19 = SearchForAccountsContinueInAppStrategy.__allocating_init()();
  v59 = &v66;
  v66 = v19;
  lazy protocol witness table accessor for type SearchForAccountsUnsupportedValueStrategy and conformance SearchForAccountsUnsupportedValueStrategy();
  v60 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)();
  v61 = v20;
  swift_release();
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v62 + 32))(v63, v64, v65);
}

uint64_t default argument 0 of SearchForAccountsNeedsConfirmationStrategy.init(globals:catFamily:commonLabelsProvider:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;
  _BYTE v4[40];
  _BYTE v5[40];
  _BYTE v6[40];
  uint64_t v7[5];

  v2 = type metadata accessor for Globals();
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v7);
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  result = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v7, (uint64_t)v6, (uint64_t)v5, (uint64_t)v4);
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for Globals;
  *a1 = result;
  return result;
}

uint64_t default argument 1 of SearchForAccountsNeedsConfirmationStrategy.init(globals:catFamily:commonLabelsProvider:)()
{
  uint64_t v1;
  unint64_t v2;
  char *v3;
  uint64_t v4;

  v4 = 0;
  v2 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v3 = (char *)&v1 - v2;
  type metadata accessor for SearchForAccountsCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  return CATWrapper.__allocating_init(options:globals:)();
}

NSJSONWritingOptions default argument 2 of SearchForAccountsNeedsConfirmationStrategy.init(globals:catFamily:commonLabelsProvider:)@<X0>(Swift::UInt a1@<X0>, uint64_t a2@<X8>)
{
  NSJSONWritingOptions result;

  result = NSJSONWritingOptions.init(rawValue:)(a1);
  *(_QWORD *)(a2 + 24) = &type metadata for CommonLabelsProvider;
  *(_QWORD *)(a2 + 32) = &protocol witness table for CommonLabelsProvider;
  return result;
}

uint64_t FlowFactory.makeApplyForAppleCardFlow()()
{
  uint64_t v1;

  type metadata accessor for SimpleOutputFlowAsync();
  swift_retain();
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  SimpleOutputFlowAsync.__allocating_init(outputPublisher:outputGenerator:)();
  v1 = Flow.eraseToAnyFlow()();
  swift_release();
  return v1;
}

uint64_t closure #1 in FlowFactory.makeApplyForAppleCardFlow()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[107] = a2;
  v2[106] = a1;
  v2[101] = v2;
  v2[102] = 0;
  v2[103] = 0;
  v2[104] = 0;
  v2[105] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[108] = swift_task_alloc();
  v3 = type metadata accessor for TemplatingResult();
  v2[109] = v3;
  v2[110] = *(_QWORD *)(v3 - 8);
  v2[111] = swift_task_alloc();
  v2[112] = swift_task_alloc();
  v2[113] = swift_task_alloc();
  v2[114] = swift_task_alloc();
  v2[115] = swift_task_alloc();
  v2[116] = swift_task_alloc();
  v4 = type metadata accessor for Locale();
  v2[117] = v4;
  v2[118] = *(_QWORD *)(v4 - 8);
  v2[119] = swift_task_alloc();
  type metadata accessor for CATOption();
  v2[120] = swift_task_alloc();
  v2[102] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in FlowFactory.makeApplyForAppleCardFlow()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v14 = *(_QWORD *)(v0 + 952);
  v13 = *(_QWORD *)(v0 + 944);
  v15 = *(_QWORD *)(v0 + 936);
  *(_QWORD *)(v0 + 808) = v0;
  type metadata accessor for SearchForCardInfoCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v12 = CATWrapper.__allocating_init(options:globals:)();
  *(_QWORD *)(v0 + 968) = v12;
  *(_QWORD *)(v0 + 824) = v12;
  static Locale.current.getter();
  v16 = Locale.identifier.getter();
  v17 = v1;
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  *(_QWORD *)(v0 + 776) = v16;
  *(_QWORD *)(v0 + 784) = v17;
  *(Swift::String *)(v0 + 792) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_US", 3uLL, 1);
  lazy protocol witness table accessor for type String and conformance String();
  v18 = StringProtocol.contains<A>(_:)();
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  if ((v18 & 1) != 0)
  {
    outlined init with copy of GlobalsProviding(v11[107] + 16, (uint64_t)(v11 + 42));
    __swift_project_boxed_opaque_existential_1(v11 + 42, v11[45]);
    v10 = dispatch thunk of DeviceState.isPhone.getter();
    swift_retain();
    if ((v10 & 1) != 0)
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v11 + 42));
      swift_retain();
    }
    else
    {
      outlined init with copy of GlobalsProviding(v11[107] + 16, (uint64_t)(v11 + 47));
      __swift_project_boxed_opaque_existential_1(v11 + 47, v11[50]);
      v9 = dispatch thunk of DeviceState.isPad.getter();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v11 + 47));
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v11 + 42));
      swift_retain();
      if ((v9 & 1) == 0)
      {
        outlined init with copy of GlobalsProviding(v11[107] + 16, (uint64_t)(v11 + 52));
        __swift_project_boxed_opaque_existential_1(v11 + 52, v11[55]);
        v8 = dispatch thunk of DeviceState.isPod.getter();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)(v11 + 52));
        swift_release();
        if ((v8 & 1) == 0)
        {
LABEL_9:
          v4 = (_QWORD *)swift_task_alloc();
          v11[126] = v4;
          *v4 = v11[101];
          v4[1] = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
          return SearchForCardInfoCATs.unsupportedDevice()(v11[114]);
        }
LABEL_7:
        outlined init with copy of GlobalsProviding(v11[107] + 16, (uint64_t)(v11 + 72));
        __swift_project_boxed_opaque_existential_1(v11 + 72, v11[75]);
        v7 = dispatch thunk of DeviceState.isCarPlay.getter();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)(v11 + 72));
        if ((v7 & 1) == 0)
        {
          v2 = (_QWORD *)swift_task_alloc();
          v11[122] = v2;
          *v2 = v11[101];
          v2[1] = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
          return SearchForCardInfoCATs.apply()(v11[116]);
        }
        goto LABEL_9;
      }
    }
    swift_release();
    goto LABEL_7;
  }
  outlined init with copy of GlobalsProviding(v11[107] + 16, (uint64_t)(v11 + 2));
  __swift_project_boxed_opaque_existential_1(v11 + 2, v11[5]);
  v6 = dispatch thunk of DeviceState.isWatch.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v11 + 2));
  v5 = (_QWORD *)swift_task_alloc();
  if ((v6 & 1) != 0)
  {
    v11[128] = v5;
    *v5 = v11[101];
    v5[1] = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
    return SearchForCardInfoCATs.unsupportedDevice()(v11[113]);
  }
  else
  {
    v11[130] = v5;
    *v5 = v11[101];
    v5[1] = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
    return SearchForCardInfoCATs.unsupportedLocale()(v11[112]);
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *v1;
  v4 = *v1 + 16;
  v5 = (_QWORD *)(*v1 + 808);
  *(_QWORD *)(v6 + 808) = *v1;
  *(_QWORD *)(v6 + 984) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 976) = v2;
  *v2 = *v5;
  v2[1] = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
  return SearchForCardInfoCATs.openWallet()(*(_QWORD *)(v4 + 904));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 808) = *v1;
  *(_QWORD *)(v2 + 1000) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);

  v15 = v0[116];
  v14 = v0[115];
  v13 = v0[110];
  v16 = v0[109];
  v12 = v0[108];
  v10 = v0[107];
  v11 = (uint64_t *)v0[106];
  v0[101] = v0;
  type metadata accessor for SAAceView();
  v9 = _allocateUninitializedArray<A>(_:)();
  v8 = v1;
  v5 = TemplatingResult.resultSectionsAsString.getter();
  v6 = v2;
  outlined init with copy of GlobalsProviding(v10 + 16, (uint64_t)(v0 + 77));
  v7 = static ConfirmationViewBuilder.makeWalletAppLaunchButton(launchAction:buttonText:deviceState:)(0, v5, v6, v0 + 77);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 77));
  swift_bridgeObjectRelease();
  *v8 = v7;
  _finalizeUninitializedArray<A>(_:)();
  v0[105] = v9;
  outlined init with copy of GlobalsProviding(v10 + 16, (uint64_t)(v0 + 82));
  outlined init with copy of GlobalsProviding(v10 + 16, (uint64_t)(v0 + 87));
  __swift_project_boxed_opaque_existential_1(v0 + 87, v0[90]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  v3 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v12, 1);
  v0[92] = 0;
  v0[93] = 0;
  v0[94] = 0;
  v0[95] = 0;
  v0[96] = 0;
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v11[3] = type metadata accessor for AceOutput();
  v11[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v11);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 92));
  outlined destroy of NLContextUpdate?(v12);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 87));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 82));
  swift_bridgeObjectRelease();
  v17 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v17(v14, v16);
  v17(v15, v16);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[101] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 808) = *v1;
  *(_QWORD *)(v2 + 1016) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = v0[114];
  v6 = v0[110];
  v8 = v0[109];
  v5 = v0[108];
  v3 = v0[107];
  v4 = (uint64_t *)v0[106];
  v0[101] = v0;
  outlined init with copy of GlobalsProviding(v3 + 16, (uint64_t)(v0 + 57));
  outlined init with copy of GlobalsProviding(v3 + 16, (uint64_t)(v0 + 62));
  __swift_project_boxed_opaque_existential_1(v0 + 62, v0[65]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v5, 1);
  v0[67] = 0;
  v0[68] = 0;
  v0[69] = 0;
  v0[70] = 0;
  v0[71] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v4[3] = type metadata accessor for AceOutput();
  v4[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v4);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 67));
  outlined destroy of NLContextUpdate?(v5);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 62));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 57));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[101] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 808) = *v1;
  *(_QWORD *)(v2 + 1032) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = v0[113];
  v6 = v0[110];
  v8 = v0[109];
  v5 = v0[108];
  v3 = v0[107];
  v4 = (uint64_t *)v0[106];
  v0[101] = v0;
  outlined init with copy of GlobalsProviding(v3 + 16, (uint64_t)(v0 + 27));
  outlined init with copy of GlobalsProviding(v3 + 16, (uint64_t)(v0 + 32));
  __swift_project_boxed_opaque_existential_1(v0 + 32, v0[35]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v5, 1);
  v0[37] = 0;
  v0[38] = 0;
  v0[39] = 0;
  v0[40] = 0;
  v0[41] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v4[3] = type metadata accessor for AceOutput();
  v4[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v4);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 37));
  outlined destroy of NLContextUpdate?(v5);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[101] + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *v1;
  v4 = *v1 + 16;
  v5 = (_QWORD *)(*v1 + 808);
  *(_QWORD *)(v6 + 808) = *v1;
  *(_QWORD *)(v6 + 1048) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 1040) = v2;
  *v2 = *v5;
  v2[1] = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
  return SearchForCardInfoCATs.openAppleWebsite()(*(_QWORD *)(v4 + 872));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 808) = *v1;
  *(_QWORD *)(v2 + 1064) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);

  v18 = v0[112];
  v17 = v0[111];
  v16 = v0[110];
  v19 = v0[109];
  v15 = v0[108];
  v13 = v0[107];
  v14 = (uint64_t *)v0[106];
  v0[101] = v0;
  type metadata accessor for SAAceView();
  v12 = _allocateUninitializedArray<A>(_:)();
  v11 = v1;
  v2 = (uint64_t *)String.APPLE_CARD_WEB_PAGE_LINK.unsafeMutableAddressor();
  v7 = *v2;
  v9 = v2[1];
  swift_bridgeObjectRetain();
  v6 = TemplatingResult.resultSectionsAsString.getter();
  v8 = v3;
  outlined init with copy of GlobalsProviding(v13 + 16, (uint64_t)(v0 + 7));
  v10 = static ConfirmationViewBuilder.makeWebPunchoutButton(for:buttonText:deviceState:)(v7, v9, v6, v8, v0 + 7);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v11 = v10;
  _finalizeUninitializedArray<A>(_:)();
  v0[104] = v12;
  outlined init with copy of GlobalsProviding(v13 + 16, (uint64_t)(v0 + 12));
  outlined init with copy of GlobalsProviding(v13 + 16, (uint64_t)(v0 + 17));
  __swift_project_boxed_opaque_existential_1(v0 + 17, v0[20]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  v4 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v15, 1);
  v0[22] = 0;
  v0[23] = 0;
  v0[24] = 0;
  v0[25] = 0;
  v0[26] = 0;
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v14[3] = type metadata accessor for AceOutput();
  v14[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v14);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 22));
  outlined destroy of NLContextUpdate?(v15);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 17));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  swift_bridgeObjectRelease();
  v20 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v20(v17, v19);
  v20(v18, v19);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[101] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 808) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 808) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 808) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 808) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[112];
  v2 = v0[110];
  v3 = v0[109];
  v0[101] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[101] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 808) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 808) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[116];
  v2 = v0[110];
  v3 = v0[109];
  v0[101] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[101] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 808) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 808) + 8))();
}

uint64_t FlowFactory.makeLearnAboutAppleCardFlow()()
{
  uint64_t v1;

  type metadata accessor for SimpleOutputFlowAsync();
  swift_retain();
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  SimpleOutputFlowAsync.__allocating_init(outputPublisher:outputGenerator:)();
  v1 = Flow.eraseToAnyFlow()();
  swift_release();
  return v1;
}

uint64_t closure #1 in FlowFactory.makeLearnAboutAppleCardFlow()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[97] = a2;
  v2[96] = a1;
  v2[91] = v2;
  v2[92] = 0;
  v2[93] = 0;
  v2[94] = 0;
  v2[95] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[98] = swift_task_alloc();
  v3 = type metadata accessor for TemplatingResult();
  v2[99] = v3;
  v2[100] = *(_QWORD *)(v3 - 8);
  v2[101] = swift_task_alloc();
  v2[102] = swift_task_alloc();
  v2[103] = swift_task_alloc();
  v2[104] = swift_task_alloc();
  v2[105] = swift_task_alloc();
  v2[106] = swift_task_alloc();
  v4 = type metadata accessor for Locale();
  v2[107] = v4;
  v2[108] = *(_QWORD *)(v4 - 8);
  v2[109] = swift_task_alloc();
  type metadata accessor for CATOption();
  v2[110] = swift_task_alloc();
  v2[92] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in FlowFactory.makeLearnAboutAppleCardFlow()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  char v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v12 = *(_QWORD *)(v0 + 872);
  v11 = *(_QWORD *)(v0 + 864);
  v13 = *(_QWORD *)(v0 + 856);
  *(_QWORD *)(v0 + 728) = v0;
  type metadata accessor for SearchForCardInfoCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v10 = CATWrapper.__allocating_init(options:globals:)();
  *(_QWORD *)(v0 + 888) = v10;
  *(_QWORD *)(v0 + 744) = v10;
  static Locale.current.getter();
  v14 = Locale.identifier.getter();
  v15 = v1;
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  *(_QWORD *)(v0 + 696) = v14;
  *(_QWORD *)(v0 + 704) = v15;
  *(Swift::String *)(v0 + 712) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_US", 3uLL, 1);
  lazy protocol witness table accessor for type String and conformance String();
  v16 = StringProtocol.contains<A>(_:)();
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  if ((v16 & 1) != 0)
  {
    outlined init with copy of GlobalsProviding(v9[97] + 16, (uint64_t)(v9 + 42));
    __swift_project_boxed_opaque_existential_1(v9 + 42, v9[45]);
    v8 = dispatch thunk of DeviceState.isPhone.getter();
    swift_retain();
    if ((v8 & 1) != 0)
    {
      outlined init with copy of GlobalsProviding(v9[97] + 16, (uint64_t)(v9 + 82));
      __swift_project_boxed_opaque_existential_1(v9 + 82, v9[85]);
      v7 = dispatch thunk of DeviceState.isCarPlay.getter();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v9 + 82));
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v9 + 42));
      if ((v7 & 1) == 0)
      {
        v2 = (_QWORD *)swift_task_alloc();
        v9[112] = v2;
        *v2 = v9[91];
        v2[1] = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
        return SearchForCardInfoCATs.learn()(v9[106]);
      }
    }
    else
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v9 + 42));
    }
    v4 = (_QWORD *)swift_task_alloc();
    v9[116] = v4;
    *v4 = v9[91];
    v4[1] = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
    return SearchForCardInfoCATs.unsupportedDevice()(v9[104]);
  }
  else
  {
    outlined init with copy of GlobalsProviding(v9[97] + 16, (uint64_t)(v9 + 2));
    __swift_project_boxed_opaque_existential_1(v9 + 2, v9[5]);
    v6 = dispatch thunk of DeviceState.isWatch.getter();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v9 + 2));
    v5 = (_QWORD *)swift_task_alloc();
    if ((v6 & 1) != 0)
    {
      v9[118] = v5;
      *v5 = v9[91];
      v5[1] = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
      return SearchForCardInfoCATs.unsupportedDevice()(v9[103]);
    }
    else
    {
      v9[120] = v5;
      *v5 = v9[91];
      v5[1] = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
      return SearchForCardInfoCATs.unsupportedLocale()(v9[102]);
    }
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *v1;
  v4 = *v1 + 16;
  v5 = (_QWORD *)(*v1 + 728);
  *(_QWORD *)(v6 + 728) = *v1;
  *(_QWORD *)(v6 + 904) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 896) = v2;
  *v2 = *v5;
  v2[1] = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
  return SearchForCardInfoCATs.openWallet()(*(_QWORD *)(v4 + 824));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 728) = *v1;
  *(_QWORD *)(v2 + 920) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);

  v15 = v0[106];
  v14 = v0[105];
  v13 = v0[100];
  v16 = v0[99];
  v12 = v0[98];
  v10 = v0[97];
  v11 = (uint64_t *)v0[96];
  v0[91] = v0;
  type metadata accessor for SAAceView();
  v9 = _allocateUninitializedArray<A>(_:)();
  v8 = v1;
  v5 = TemplatingResult.resultSectionsAsString.getter();
  v6 = v2;
  outlined init with copy of GlobalsProviding(v10 + 16, (uint64_t)(v0 + 62));
  v7 = static ConfirmationViewBuilder.makeWalletAppLaunchButton(launchAction:buttonText:deviceState:)(1u, v5, v6, v0 + 62);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 62));
  swift_bridgeObjectRelease();
  *v8 = v7;
  _finalizeUninitializedArray<A>(_:)();
  v0[95] = v9;
  outlined init with copy of GlobalsProviding(v10 + 16, (uint64_t)(v0 + 67));
  outlined init with copy of GlobalsProviding(v10 + 16, (uint64_t)(v0 + 72));
  __swift_project_boxed_opaque_existential_1(v0 + 72, v0[75]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  v3 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v12, 1);
  v0[77] = 0;
  v0[78] = 0;
  v0[79] = 0;
  v0[80] = 0;
  v0[81] = 0;
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v11[3] = type metadata accessor for AceOutput();
  v11[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v11);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 77));
  outlined destroy of NLContextUpdate?(v12);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 72));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 67));
  swift_bridgeObjectRelease();
  v17 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v17(v14, v16);
  v17(v15, v16);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[91] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 728) = *v1;
  *(_QWORD *)(v2 + 936) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = v0[104];
  v6 = v0[100];
  v8 = v0[99];
  v5 = v0[98];
  v3 = v0[97];
  v4 = (uint64_t *)v0[96];
  v0[91] = v0;
  outlined init with copy of GlobalsProviding(v3 + 16, (uint64_t)(v0 + 47));
  outlined init with copy of GlobalsProviding(v3 + 16, (uint64_t)(v0 + 52));
  __swift_project_boxed_opaque_existential_1(v0 + 52, v0[55]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v5, 1);
  v0[57] = 0;
  v0[58] = 0;
  v0[59] = 0;
  v0[60] = 0;
  v0[61] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v4[3] = type metadata accessor for AceOutput();
  v4[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v4);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 57));
  outlined destroy of NLContextUpdate?(v5);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 52));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 47));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[91] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 728) = *v1;
  *(_QWORD *)(v2 + 952) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = v0[103];
  v6 = v0[100];
  v8 = v0[99];
  v5 = v0[98];
  v3 = v0[97];
  v4 = (uint64_t *)v0[96];
  v0[91] = v0;
  outlined init with copy of GlobalsProviding(v3 + 16, (uint64_t)(v0 + 27));
  outlined init with copy of GlobalsProviding(v3 + 16, (uint64_t)(v0 + 32));
  __swift_project_boxed_opaque_existential_1(v0 + 32, v0[35]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v5, 1);
  v0[37] = 0;
  v0[38] = 0;
  v0[39] = 0;
  v0[40] = 0;
  v0[41] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v4[3] = type metadata accessor for AceOutput();
  v4[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v4);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 37));
  outlined destroy of NLContextUpdate?(v5);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[91] + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *v1;
  v4 = *v1 + 16;
  v5 = (_QWORD *)(*v1 + 728);
  *(_QWORD *)(v6 + 728) = *v1;
  *(_QWORD *)(v6 + 968) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 960) = v2;
  *v2 = *v5;
  v2[1] = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
  return SearchForCardInfoCATs.openAppleWebsite()(*(_QWORD *)(v4 + 792));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 728) = *v1;
  *(_QWORD *)(v2 + 984) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);

  v18 = v0[102];
  v17 = v0[101];
  v16 = v0[100];
  v19 = v0[99];
  v15 = v0[98];
  v13 = v0[97];
  v14 = (uint64_t *)v0[96];
  v0[91] = v0;
  type metadata accessor for SAAceView();
  v12 = _allocateUninitializedArray<A>(_:)();
  v11 = v1;
  v2 = (uint64_t *)String.APPLE_CARD_WEB_PAGE_LINK.unsafeMutableAddressor();
  v7 = *v2;
  v9 = v2[1];
  swift_bridgeObjectRetain();
  v6 = TemplatingResult.resultSectionsAsString.getter();
  v8 = v3;
  outlined init with copy of GlobalsProviding(v13 + 16, (uint64_t)(v0 + 7));
  v10 = static ConfirmationViewBuilder.makeWebPunchoutButton(for:buttonText:deviceState:)(v7, v9, v6, v8, v0 + 7);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v11 = v10;
  _finalizeUninitializedArray<A>(_:)();
  v0[94] = v12;
  outlined init with copy of GlobalsProviding(v13 + 16, (uint64_t)(v0 + 12));
  outlined init with copy of GlobalsProviding(v13 + 16, (uint64_t)(v0 + 17));
  __swift_project_boxed_opaque_existential_1(v0 + 17, v0[20]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  v4 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v15, 1);
  v0[22] = 0;
  v0[23] = 0;
  v0[24] = 0;
  v0[25] = 0;
  v0[26] = 0;
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v14[3] = type metadata accessor for AceOutput();
  v14[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v14);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 22));
  outlined destroy of NLContextUpdate?(v15);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 17));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  swift_bridgeObjectRelease();
  v20 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v20(v17, v19);
  v20(v18, v19);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[91] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 728) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 728) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 728) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 728) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[102];
  v2 = v0[100];
  v3 = v0[99];
  v0[91] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[91] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 728) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 728) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[106];
  v2 = v0[100];
  v3 = v0[99];
  v0[91] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[91] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 728) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 728) + 8))();
}

uint64_t FlowFactory.deinit()
{
  uint64_t v0;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  return v2;
}

uint64_t FlowFactory.__deallocating_deinit()
{
  FlowFactory.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for FlowProviding.deviceState.getter in conformance FlowFactory@<X0>(uint64_t a1@<X8>)
{
  return FlowFactory.deviceState.getter(a1);
}

uint64_t protocol witness for FlowProviding.findFlow(for:) in conformance FlowFactory(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v5 = (uint64_t (*)(uint64_t))(*(_QWORD *)(**(_QWORD **)v1 + 104) + **(int **)(**(_QWORD **)v1 + 104));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ConfirmationViewBuilding.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:) in conformance ConfirmationViewBuilder;
  return v5(a1);
}

uint64_t protocol witness for FlowProviding.guardFlow(with:) in conformance FlowFactory()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

uint64_t protocol witness for FlowProviding.sendPaymentFlow(intent:) in conformance FlowFactory()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

uint64_t protocol witness for FlowProviding.requestPaymentFlow(intent:) in conformance FlowFactory()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

uint64_t protocol witness for FlowProviding.searchForAccountsFlow(intent:) in conformance FlowFactory()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 168))();
}

uint64_t protocol witness for FlowProviding.unsupportedActionFlow() in conformance FlowFactory()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  *(_QWORD *)(v1 + 16) = v1;
  v4 = (uint64_t (*)(void))(*(_QWORD *)(**(_QWORD **)v0 + 120) + **(int **)(**(_QWORD **)v0 + 120));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for ConfirmationViewBuilding.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:) in conformance ConfirmationViewBuilder;
  return v4();
}

uint64_t protocol witness for FlowProviding.unsupportedOnDeviceFlow() in conformance FlowFactory()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

uint64_t sub_24707B18C()
{
  return swift_deallocObject();
}

uint64_t sub_24707B1B4()
{
  return swift_deallocObject();
}

uint64_t sub_24707B1DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24707B218()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24707B254()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for USOParse() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in FlowFactory.findFlow(for:)()
{
  type metadata accessor for USOParse();
  return implicit closure #1 in FlowFactory.findFlow(for:)();
}

uint64_t sub_24707B2F4()
{
  return swift_deallocObject();
}

uint64_t sub_24707B31C()
{
  return swift_deallocObject();
}

uint64_t sub_24707B344()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24707B380()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Siri_Nlu_External_UserDialogAct] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Siri_Nlu_External_UserDialogAct] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Siri_Nlu_External_UserDialogAct] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Siri_Nlu_External_UserDialogAct] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Siri_Nlu_External_UserDialogAct] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Siri_Nlu_External_UserDialogAct] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of Siri_Nlu_External_UserDialogAct?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t sub_24707B49C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in FlowFactory.findFlow(for:)()
{
  uint64_t v0;

  return implicit closure #2 in FlowFactory.findFlow(for:)(v0 + 16);
}

uint64_t sub_24707B4E0()
{
  return swift_deallocObject();
}

uint64_t sub_24707B508()
{
  return swift_deallocObject();
}

uint64_t sub_24707B530()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24707B56C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FlowFactory.unsupportedActionFlow()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = partial apply for closure #1 in FlowFactory.unsupportedActionFlow();
  return closure #1 in FlowFactory.unsupportedActionFlow()(a1, v4);
}

uint64_t partial apply for closure #1 in FlowFactory.unsupportedActionFlow()()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t partial apply for closure #1 in FlowFactory.unsupportedOnDeviceFlow()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = partial apply for closure #1 in FlowFactory.unsupportedActionFlow();
  return closure #1 in FlowFactory.unsupportedOnDeviceFlow()(a1, v4);
}

unint64_t lazy protocol witness table accessor for type SendPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SendPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>;
  if (!lazy protocol witness table cache variable for type SendPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>)
  {
    v0 = type metadata accessor for SendPaymentFlowStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsRCHFlowStrategy<A, B>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type AnyValueFlow<RCHFlowResult<INSendPaymentIntent, INSendPaymentIntentResponse>> and conformance AnyValueFlow<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INSendPaymentIntent, INSendPaymentIntentResponse>> and conformance AnyValueFlow<A>;
  if (!lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INSendPaymentIntent, INSendPaymentIntentResponse>> and conformance AnyValueFlow<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INSendPaymentIntent, INSendPaymentIntentResponse>>);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BE96B80], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INSendPaymentIntent, INSendPaymentIntentResponse>> and conformance AnyValueFlow<A>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type PaymentsAppResolutionFlowStrategy<INSendPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type PaymentsAppResolutionFlowStrategy<INSendPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>;
  if (!lazy protocol witness table cache variable for type PaymentsAppResolutionFlowStrategy<INSendPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PaymentsAppResolutionFlowStrategy<INSendPaymentIntent>);
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsAppResolutionFlowStrategy<A>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsAppResolutionFlowStrategy<INSendPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type SendTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SendTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type SendTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>)
  {
    v0 = type metadata accessor for SendTCCHandleStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for TCCHandleStrategy<A, B, C>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SendTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type PaymentsContinueInAppStrategy<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type PaymentsContinueInAppStrategy<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>;
  if (!lazy protocol witness table cache variable for type PaymentsContinueInAppStrategy<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PaymentsContinueInAppStrategy<INSendPaymentIntent, INSendPaymentIntentResponse>);
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsContinueInAppStrategy<A, B>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsContinueInAppStrategy<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type SendPaymentUnsupportedValueStrategy and conformance SendPaymentUnsupportedValueStrategy()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SendPaymentUnsupportedValueStrategy and conformance SendPaymentUnsupportedValueStrategy;
  if (!lazy protocol witness table cache variable for type SendPaymentUnsupportedValueStrategy and conformance SendPaymentUnsupportedValueStrategy)
  {
    v0 = type metadata accessor for SendPaymentUnsupportedValueStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for SendPaymentUnsupportedValueStrategy, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentUnsupportedValueStrategy and conformance SendPaymentUnsupportedValueStrategy);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type SendPaymentNeedsValueStrategy and conformance SendPaymentNeedsValueStrategy()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SendPaymentNeedsValueStrategy and conformance SendPaymentNeedsValueStrategy;
  if (!lazy protocol witness table cache variable for type SendPaymentNeedsValueStrategy and conformance SendPaymentNeedsValueStrategy)
  {
    v0 = type metadata accessor for SendPaymentNeedsValueStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for SendPaymentNeedsValueStrategy, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentNeedsValueStrategy and conformance SendPaymentNeedsValueStrategy);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SendPaymentNeedsValueStrategy and conformance SendPaymentNeedsValueStrategy;
  if (!lazy protocol witness table cache variable for type SendPaymentNeedsValueStrategy and conformance SendPaymentNeedsValueStrategy)
  {
    v0 = type metadata accessor for SendPaymentNeedsValueStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for SendPaymentNeedsValueStrategy, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentNeedsValueStrategy and conformance SendPaymentNeedsValueStrategy);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type PayeeDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type PayeeDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type PayeeDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>)
  {
    v0 = type metadata accessor for PayeeDisambiguationStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for ContactDisambiguationStrategy<A, B, C>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type PayeeDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type SendPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SendPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type SendPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>)
  {
    v0 = type metadata accessor for SendPaymentNeedsConfirmationFlowStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsNeedsConfirmationFlowStrategy<A, B, C>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type SendPaymentConfirmIntentStrategy and conformance SendPaymentConfirmIntentStrategy()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SendPaymentConfirmIntentStrategy and conformance SendPaymentConfirmIntentStrategy;
  if (!lazy protocol witness table cache variable for type SendPaymentConfirmIntentStrategy and conformance SendPaymentConfirmIntentStrategy)
  {
    v0 = type metadata accessor for SendPaymentConfirmIntentStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for SendPaymentConfirmIntentStrategy, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentConfirmIntentStrategy and conformance SendPaymentConfirmIntentStrategy);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type SendPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SendPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type SendPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>)
  {
    v0 = type metadata accessor for SendPaymentHandleIntentStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for BaseStrategy<A, B, C>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type RequestPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RequestPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>;
  if (!lazy protocol witness table cache variable for type RequestPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>)
  {
    v0 = type metadata accessor for RequestPaymentFlowStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsRCHFlowStrategy<A, B>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type AnyValueFlow<RCHFlowResult<INRequestPaymentIntent, INRequestPaymentIntentResponse>> and conformance AnyValueFlow<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INRequestPaymentIntent, INRequestPaymentIntentResponse>> and conformance AnyValueFlow<A>;
  if (!lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INRequestPaymentIntent, INRequestPaymentIntentResponse>> and conformance AnyValueFlow<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INRequestPaymentIntent, INRequestPaymentIntentResponse>>);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BE96B80], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INRequestPaymentIntent, INRequestPaymentIntentResponse>> and conformance AnyValueFlow<A>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type PaymentsAppResolutionFlowStrategy<INRequestPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type PaymentsAppResolutionFlowStrategy<INRequestPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>;
  if (!lazy protocol witness table cache variable for type PaymentsAppResolutionFlowStrategy<INRequestPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PaymentsAppResolutionFlowStrategy<INRequestPaymentIntent>);
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsAppResolutionFlowStrategy<A>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsAppResolutionFlowStrategy<INRequestPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type RequestTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RequestTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type RequestTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>)
  {
    v0 = type metadata accessor for RequestTCCHandleStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for TCCHandleStrategy<A, B, C>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RequestTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type PaymentsContinueInAppStrategy<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type PaymentsContinueInAppStrategy<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>;
  if (!lazy protocol witness table cache variable for type PaymentsContinueInAppStrategy<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PaymentsContinueInAppStrategy<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsContinueInAppStrategy<A, B>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsContinueInAppStrategy<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type RequestPaymentUnsupportedValueStrategy and conformance RequestPaymentUnsupportedValueStrategy()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RequestPaymentUnsupportedValueStrategy and conformance RequestPaymentUnsupportedValueStrategy;
  if (!lazy protocol witness table cache variable for type RequestPaymentUnsupportedValueStrategy and conformance RequestPaymentUnsupportedValueStrategy)
  {
    v0 = type metadata accessor for RequestPaymentUnsupportedValueStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for RequestPaymentUnsupportedValueStrategy, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentUnsupportedValueStrategy and conformance RequestPaymentUnsupportedValueStrategy);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type RequestPaymentNeedsValueStrategy and conformance RequestPaymentNeedsValueStrategy()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RequestPaymentNeedsValueStrategy and conformance RequestPaymentNeedsValueStrategy;
  if (!lazy protocol witness table cache variable for type RequestPaymentNeedsValueStrategy and conformance RequestPaymentNeedsValueStrategy)
  {
    v0 = type metadata accessor for RequestPaymentNeedsValueStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for RequestPaymentNeedsValueStrategy, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentNeedsValueStrategy and conformance RequestPaymentNeedsValueStrategy);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RequestPaymentNeedsValueStrategy and conformance RequestPaymentNeedsValueStrategy;
  if (!lazy protocol witness table cache variable for type RequestPaymentNeedsValueStrategy and conformance RequestPaymentNeedsValueStrategy)
  {
    v0 = type metadata accessor for RequestPaymentNeedsValueStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for RequestPaymentNeedsValueStrategy, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentNeedsValueStrategy and conformance RequestPaymentNeedsValueStrategy);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type PayerDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type PayerDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type PayerDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>)
  {
    v0 = type metadata accessor for PayerDisambiguationStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for ContactDisambiguationStrategy<A, B, C>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type PayerDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type RequestPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RequestPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type RequestPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>)
  {
    v0 = type metadata accessor for RequestPaymentNeedsConfirmationFlowStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsNeedsConfirmationFlowStrategy<A, B, C>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type RequestPaymentConfirmIntentStrategy and conformance RequestPaymentConfirmIntentStrategy()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RequestPaymentConfirmIntentStrategy and conformance RequestPaymentConfirmIntentStrategy;
  if (!lazy protocol witness table cache variable for type RequestPaymentConfirmIntentStrategy and conformance RequestPaymentConfirmIntentStrategy)
  {
    v0 = type metadata accessor for RequestPaymentConfirmIntentStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for RequestPaymentConfirmIntentStrategy, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentConfirmIntentStrategy and conformance RequestPaymentConfirmIntentStrategy);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type RequestPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RequestPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type RequestPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>)
  {
    v0 = type metadata accessor for RequestPaymentHandleIntentStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for BaseStrategy<A, B, C>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type SearchForAccountsFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SearchForAccountsFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>;
  if (!lazy protocol witness table cache variable for type SearchForAccountsFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>)
  {
    v0 = type metadata accessor for SearchForAccountsFlowStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsRCHFlowStrategy<A, B>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type AnyValueFlow<RCHFlowResult<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>> and conformance AnyValueFlow<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>> and conformance AnyValueFlow<A>;
  if (!lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>> and conformance AnyValueFlow<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>>);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BE96B80], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>> and conformance AnyValueFlow<A>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type PaymentsAppResolutionFlowStrategy<INSearchForAccountsIntent> and conformance PaymentsAppResolutionFlowStrategy<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type PaymentsAppResolutionFlowStrategy<INSearchForAccountsIntent> and conformance PaymentsAppResolutionFlowStrategy<A>;
  if (!lazy protocol witness table cache variable for type PaymentsAppResolutionFlowStrategy<INSearchForAccountsIntent> and conformance PaymentsAppResolutionFlowStrategy<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PaymentsAppResolutionFlowStrategy<INSearchForAccountsIntent>);
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsAppResolutionFlowStrategy<A>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsAppResolutionFlowStrategy<INSearchForAccountsIntent> and conformance PaymentsAppResolutionFlowStrategy<A>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type SearchForAccountsHandleIntentStrategy and conformance BaseStrategy<A, B, C>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SearchForAccountsHandleIntentStrategy and conformance BaseStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type SearchForAccountsHandleIntentStrategy and conformance BaseStrategy<A, B, C>)
  {
    v0 = type metadata accessor for SearchForAccountsHandleIntentStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for BaseStrategy<A, B, C>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsHandleIntentStrategy and conformance BaseStrategy<A, B, C>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type SearchForAccountsNeedsConfirmationStrategy and conformance SearchForAccountsNeedsConfirmationStrategy()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SearchForAccountsNeedsConfirmationStrategy and conformance SearchForAccountsNeedsConfirmationStrategy;
  if (!lazy protocol witness table cache variable for type SearchForAccountsNeedsConfirmationStrategy and conformance SearchForAccountsNeedsConfirmationStrategy)
  {
    v0 = type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for SearchForAccountsNeedsConfirmationStrategy, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsNeedsConfirmationStrategy and conformance SearchForAccountsNeedsConfirmationStrategy);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SearchForAccountsNeedsConfirmationStrategy and conformance SearchForAccountsNeedsConfirmationStrategy;
  if (!lazy protocol witness table cache variable for type SearchForAccountsNeedsConfirmationStrategy and conformance SearchForAccountsNeedsConfirmationStrategy)
  {
    v0 = type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for SearchForAccountsNeedsConfirmationStrategy, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsNeedsConfirmationStrategy and conformance SearchForAccountsNeedsConfirmationStrategy);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type SearchForAccountsNeedsValueStrategy and conformance SearchForAccountsNeedsValueStrategy()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SearchForAccountsNeedsValueStrategy and conformance SearchForAccountsNeedsValueStrategy;
  if (!lazy protocol witness table cache variable for type SearchForAccountsNeedsValueStrategy and conformance SearchForAccountsNeedsValueStrategy)
  {
    v0 = type metadata accessor for SearchForAccountsNeedsValueStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for SearchForAccountsNeedsValueStrategy, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsNeedsValueStrategy and conformance SearchForAccountsNeedsValueStrategy);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SearchForAccountsNeedsValueStrategy and conformance SearchForAccountsNeedsValueStrategy;
  if (!lazy protocol witness table cache variable for type SearchForAccountsNeedsValueStrategy and conformance SearchForAccountsNeedsValueStrategy)
  {
    v0 = type metadata accessor for SearchForAccountsNeedsValueStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for SearchForAccountsNeedsValueStrategy, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsNeedsValueStrategy and conformance SearchForAccountsNeedsValueStrategy);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type SearchForAccountsTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SearchForAccountsTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type SearchForAccountsTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>)
  {
    v0 = type metadata accessor for SearchForAccountsTCCHandleStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for TCCHandleStrategy<A, B, C>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type SearchForAccountsUnsupportedValueStrategy and conformance SearchForAccountsUnsupportedValueStrategy()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SearchForAccountsUnsupportedValueStrategy and conformance SearchForAccountsUnsupportedValueStrategy;
  if (!lazy protocol witness table cache variable for type SearchForAccountsUnsupportedValueStrategy and conformance SearchForAccountsUnsupportedValueStrategy)
  {
    v0 = type metadata accessor for SearchForAccountsUnsupportedValueStrategy();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for SearchForAccountsUnsupportedValueStrategy, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsUnsupportedValueStrategy and conformance SearchForAccountsUnsupportedValueStrategy);
    return v1;
  }
  return v3;
}

uint64_t partial apply for closure #1 in FlowFactory.makeApplyForAppleCardFlow()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = partial apply for closure #1 in FlowFactory.unsupportedActionFlow();
  return closure #1 in FlowFactory.makeApplyForAppleCardFlow()(a1, v4);
}

uint64_t partial apply for closure #1 in FlowFactory.makeLearnAboutAppleCardFlow()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = partial apply for closure #1 in FlowFactory.unsupportedActionFlow();
  return closure #1 in FlowFactory.makeLearnAboutAppleCardFlow()(a1, v4);
}

uint64_t type metadata accessor for FlowFactory()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    v0 = MEMORY[0x249572C98](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    v0 = MEMORY[0x249572C98](MEMORY[0x24BEE0D40], MEMORY[0x24BEE0D00]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    v0 = MEMORY[0x249572C98](MEMORY[0x24BEE0D48], MEMORY[0x24BEE0D00]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return v0;
  }
  return v2;
}

uint64_t default argument 1 of static USOEntityNumberExtractor.preciseRound(_:_:)()
{
  return 4;
}

float static USOEntityNumberExtractor.preciseRound(_:_:)(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  Swift::Int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  float v12;
  _BYTE v14[4];
  float v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  float v20;
  float v21;
  float v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _DWORD *v27;
  int v28;
  float v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  NSDecimal *v37;
  Swift::Int v38;
  int v39;
  NSDecimal *v40;
  Swift::Int v41;
  int v42;
  uint64_t v43;
  int v44;

  v21 = a2;
  v18 = a1;
  v44 = 0;
  v43 = 0;
  v30 = 0.0;
  v25 = type metadata accessor for FloatingPointRoundingRule();
  v24 = *(_QWORD *)(v25 - 8);
  v16 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v18);
  v26 = &v14[-v16];
  v17 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v2);
  v23 = &v14[-v17];
  v44 = v5;
  v43 = v4;
  v40 = (NSDecimal *)MEMORY[0x2495725A8](10.0);
  v41 = v6;
  v42 = v7;
  v37 = v40;
  v38 = v6;
  v39 = v7;
  pow(_:_:)((NSDecimal *)HIWORD(v7), v40, v6);
  v34 = v8;
  v35 = v9;
  v36 = v10;
  v31 = v8;
  v32 = v9;
  v33 = v10;
  NSDecimal._bridgeToObjectiveC()((NSDecimalNumber *)HIWORD(v10));
  v19 = v11;
  Float.init(truncating:)();
  v20 = v12;

  v30 = v20;
  v22 = v21 * v20;
  v27 = (_DWORD *)MEMORY[0x24BEE38D0];
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v24 + 104))(v23, *MEMORY[0x24BEE38D0], v25);
  v29 = v22;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 16))(v26, v23, v25);
  v28 = (*(uint64_t (**)(_BYTE *, uint64_t))(v24 + 88))(v26, v25);
  if (v28 == *v27)
  {
    v29 = roundf(v22);
    goto LABEL_15;
  }
  if (v28 == *MEMORY[0x24BEE38C8])
  {
    v29 = rintf(v22);
    goto LABEL_15;
  }
  if (v28 == *MEMORY[0x24BEE38E0])
  {
LABEL_12:
    v29 = ceilf(v22);
    goto LABEL_15;
  }
  if (v28 == *MEMORY[0x24BEE38E8])
  {
LABEL_14:
    v29 = floorf(v22);
    goto LABEL_15;
  }
  if (v28 == *MEMORY[0x24BEE38B8])
  {
    v29 = truncf(v22);
    goto LABEL_15;
  }
  if (v28 == *MEMORY[0x24BEE38C0])
  {
    if ((Float.sign.getter() & 1) == 0)
      goto LABEL_12;
    goto LABEL_14;
  }
  Float._roundSlowPath(_:)();
  (*(void (**)(_BYTE *, uint64_t))(v24 + 8))(v26, v25);
LABEL_15:
  v15 = v29;
  (*(void (**)(_BYTE *, uint64_t))(v24 + 8))(v23, v25);
  return v15 / v20;
}

float default argument 3 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)()
{
  return 0.1;
}

float default argument 4 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)()
{
  return 0.3;
}

uint64_t static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  char v26;
  float v27;
  float v28;
  char v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  uint64_t v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  float v41;
  int v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  float v58;
  uint64_t *v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  unsigned int v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  id v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  void (*v92)(char *, uint64_t);
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  float v107;
  float v108;
  float v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  float v128;
  float v129;
  float v130;
  float v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  _DWORD v139[2];
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  float v153;
  char v154;
  float v155;
  uint64_t v156;
  float v157;
  unsigned __int8 v158;
  uint64_t v159;
  float v160;
  uint64_t v161;
  float v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  int v175;
  int v176;
  int v177;
  uint64_t v178;
  char *v179;
  char *v180;

  v138 = a1;
  v128 = a2;
  v129 = a3;
  v130 = a4;
  v131 = a5;
  v116 = 0;
  v180 = 0;
  v179 = 0;
  v178 = 0;
  v177 = 0;
  v176 = 0;
  v175 = 0;
  v174 = 0;
  v172 = 0;
  v166 = 0;
  v165 = 0;
  v164 = 0;
  v162 = 0.0;
  v160 = 0.0;
  v159 = 0;
  v156 = 0;
  v151 = 0;
  v150 = 0;
  v147 = 0;
  v145 = 0;
  v146 = 0;
  v144 = 0;
  v143 = 0;
  v142 = 0;
  v140 = 0;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Decimal.DefinedValues?);
  v117 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v118 = (uint64_t)&v35 - v117;
  v125 = 0;
  v119 = type metadata accessor for UsoEntity_common_Decimal.DefinedValues();
  v120 = *(_QWORD *)(v119 - 8);
  v121 = (*(_QWORD *)(v120 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v119);
  v122 = (char *)&v35 - v121;
  v123 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v35 - v121);
  v124 = (char *)&v35 - v123;
  v180 = (char *)&v35 - v123;
  v126 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Number.DefinedValues?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v125);
  v127 = (uint64_t)&v35 - v126;
  v132 = type metadata accessor for UsoEntity_common_Number.DefinedValues();
  v133 = *(_QWORD *)(v132 - 8);
  v134 = (*(_QWORD *)(v133 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v138);
  v135 = (char *)&v35 - v134;
  v136 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v137 = (char *)&v35 - v136;
  v179 = (char *)&v35 - v136;
  v178 = v9;
  v177 = v10;
  v176 = v11;
  v175 = v12;
  v174 = v13;
  swift_retain();
  if (!v138)
  {
    v106 = v116 | 0x100000000;
    goto LABEL_89;
  }
  v115 = v138;
  v113 = v138;
  v172 = v138;
  swift_retain();
  type metadata accessor for UsoEntity_common_Number();
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
  v14 = swift_release();
  v114 = v171;
  if (v171)
  {
    v112 = v114;
    v111 = v114;
    v140 = v114;
    MEMORY[0x249571624](v14);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v127, 1, v132) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v133 + 32))(v137, v127, v132);
      (*(void (**)(char *, char *, uint64_t))(v133 + 16))(v135, v137, v132);
      v110 = (*(uint64_t (**)(char *, uint64_t))(v133 + 88))(v135, v132);
      if (v110 == *MEMORY[0x24BEA0400])
      {
        strcpy((char *)v139, "(knN");
      }
      else if (v110 == *MEMORY[0x24BEA03F8])
      {
        v139[0] = 1094713344;
        LOBYTE(v139[1]) = 0;
      }
      else if (v110 == *MEMORY[0x24BEA0418])
      {
        v139[0] = 1148846080;
        LOBYTE(v139[1]) = 0;
      }
      else if (v110 == *MEMORY[0x24BEA0420])
      {
        v139[0] = 1399379109;
        LOBYTE(v139[1]) = 0;
      }
      else if (v110 == *MEMORY[0x24BEA03B8])
      {
        v109 = (float)(0.5 * v129) + (float)(0.5 * v128);
        v16 = default argument 1 of static USOEntityNumberExtractor.preciseRound(_:_:)();
        v139[0] = static USOEntityNumberExtractor.preciseRound(_:_:)(v16, v109);
        LOBYTE(v139[1]) = 0;
      }
      else if (v110 == *MEMORY[0x24BEA0410])
      {
        v139[0] = 1232348160;
        LOBYTE(v139[1]) = 0;
      }
      else if (v110 == *MEMORY[0x24BEA03E0])
      {
        v139[0] = 1203982336;
        LOBYTE(v139[1]) = 0;
      }
      else if (v110 == *MEMORY[0x24BEA03F0])
      {
        v108 = (float)(v130 * v129) + (float)((float)(1.0 - v130) * v128);
        v17 = default argument 1 of static USOEntityNumberExtractor.preciseRound(_:_:)();
        v139[0] = static USOEntityNumberExtractor.preciseRound(_:_:)(v17, v108);
        LOBYTE(v139[1]) = 0;
      }
      else if (v110 == *MEMORY[0x24BEA03D0])
      {
        *(float *)v139 = v129;
        LOBYTE(v139[1]) = 0;
      }
      else if (v110 == *MEMORY[0x24BEA03C0])
      {
        v139[0] = 1176256512;
        LOBYTE(v139[1]) = 0;
      }
      else if (v110 == *MEMORY[0x24BEA03E8])
      {
        v107 = (float)(v131 * v129) + (float)((float)(1.0 - v131) * v128);
        v18 = default argument 1 of static USOEntityNumberExtractor.preciseRound(_:_:)();
        v139[0] = static USOEntityNumberExtractor.preciseRound(_:_:)(v18, v107);
        LOBYTE(v139[1]) = 0;
      }
      else if (v110 == *MEMORY[0x24BEA0408])
      {
        v139[0] = 1120403456;
        LOBYTE(v139[1]) = 0;
      }
      else if (v110 == *MEMORY[0x24BEA03B0])
      {
        v139[0] = 1259902592;
        LOBYTE(v139[1]) = 0;
      }
      else if (v110 == *MEMORY[0x24BEA03D8])
      {
        *(float *)v139 = v128;
        LOBYTE(v139[1]) = 0;
      }
      else
      {
        v139[0] = 0;
        LOBYTE(v139[1]) = 1;
        (*(void (**)(char *, uint64_t))(v133 + 8))(v135, v132);
      }
      v105 = v139[0];
      v104 = LOBYTE(v139[1]);
      (*(void (**)(char *, uint64_t))(v133 + 8))(v137, v132);
      swift_release();
      swift_release();
      v106 = __PAIR64__(v104, v105);
      goto LABEL_89;
    }
    outlined destroy of UsoEntity_common_Number.DefinedValues?(v127);
    swift_release();
  }
  swift_retain();
  type metadata accessor for UsoEntity_common_Integer();
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
  swift_release();
  v103 = v170;
  if (v170)
  {
    v102 = v103;
    v100 = v103;
    v143 = v103;
    v101 = dispatch thunk of UsoEntity_common_Integer.integerValue.getter();
    if ((v19 & 1) == 0)
    {
      v99 = v101;
      v142 = v101;
      v97 = &v141;
      v141 = v101;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      Float.init<A>(_:)();
      v98 = v20;
      swift_release();
      swift_release();
      v106 = v98;
      goto LABEL_89;
    }
    goto LABEL_86;
  }
  swift_retain();
  type metadata accessor for UsoEntity_common_Decimal();
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
  v21 = swift_release();
  v96 = v169;
  if (v169)
  {
    v95 = v96;
    v94 = v96;
    v147 = v96;
    MEMORY[0x24957166C](v21);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48))(v118, 1, v119) == 1)
    {
      v22 = outlined destroy of UsoEntity_common_Decimal.DefinedValues?(v118);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v120 + 32))(v124, v118, v119);
      (*(void (**)(char *, _QWORD, uint64_t))(v120 + 104))(v122, *MEMORY[0x24BEA0558], v119);
      lazy protocol witness table accessor for type UsoEntity_common_Decimal.DefinedValues and conformance UsoEntity_common_Decimal.DefinedValues();
      v93 = == infix<A>(_:_:)();
      v92 = *(void (**)(char *, uint64_t))(v120 + 8);
      v92(v122, v119);
      if ((v93 & 1) != 0)
      {
        v91 = 1008981770;
        v92(v124, v119);
        swift_release();
        swift_release();
        v106 = v91;
        goto LABEL_89;
      }
      v22 = ((uint64_t (*)(char *, uint64_t))v92)(v124, v119);
    }
    v89 = MEMORY[0x249571684](v22);
    v90 = v23;
    if (v23)
    {
      v87 = v89;
      v88 = v90;
      v83 = v90;
      v82 = v89;
      v145 = v89;
      v146 = v90;
      type metadata accessor for NSNumberFormatter();
      v84 = SAUIAppPunchOut.__allocating_init()();
      v144 = v84;
      objc_msgSend(v84, sel_setNumberStyle_, 1);
      swift_bridgeObjectRetain();
      v85 = (id)MEMORY[0x24957220C](v82, v83);
      swift_bridgeObjectRelease();
      v86 = objc_msgSend(v84, sel_numberFromString_, v85);

      if (v86)
      {
        v81 = v86;
        v78 = v86;
        objc_msgSend(v86, sel_floatValue);
        v79 = v24;

        v80 = v79;
      }
      else
      {
        v80 = 0x100000000;
      }
      v77 = v80;

      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v106 = v77;
      goto LABEL_89;
    }
LABEL_86:
    swift_release();
LABEL_87:
    swift_release();
    v106 = v116 | 0x100000000;
    goto LABEL_89;
  }
  swift_retain();
  type metadata accessor for UsoEntity_common_MixedFraction();
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
  swift_release();
  v76 = v168;
  if (!v168)
  {
    swift_retain();
    type metadata accessor for UsoEntity_common_MultipliedNumber();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    v31 = swift_release();
    v56 = v167;
    if (!v167)
      goto LABEL_87;
    v55 = v56;
    v53 = v56;
    v166 = v56;
    v54 = MEMORY[0x249571930](v31);
    if (v54)
    {
      v52 = v54;
      v50 = v54;
      v165 = v54;
      v51 = MEMORY[0x249571924]();
      if (v51)
      {
        v49 = v51;
        v44 = v51;
        v164 = v51;
        swift_retain();
        v46 = CodeGenBase.entity.getter();
        swift_release();
        v45 = default argument 3 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
        v32 = default argument 4 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
        v163 = static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)(v46, v128, v129, v45, v32);
        v47 = *(float *)&v163;
        v48 = BYTE4(v163);
        swift_release();
        if ((v48 & 1) == 0)
        {
          v43 = v47;
          v38 = v47;
          v162 = v47;
          swift_retain();
          v40 = CodeGenBase.entity.getter();
          swift_release();
          v39 = default argument 3 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
          v33 = default argument 4 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
          v161 = static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)(v40, v128, v129, v39, v33);
          v41 = *(float *)&v161;
          v42 = BYTE4(v161);
          swift_release();
          if ((v42 & 1) == 0)
          {
            v37 = v41;
            v160 = v41;
            *(float *)&v36 = v41 * v38;
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v106 = v36;
            goto LABEL_89;
          }
        }
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
      }
    }
    goto LABEL_86;
  }
  v75 = v76;
  v73 = v76;
  v159 = v76;
  v157 = 0.0;
  v158 = 1;
  v74 = dispatch thunk of UsoEntity_common_MixedFraction.numeratorValue.getter();
  if ((v25 & 1) == 0)
  {
    v72 = v74;
    v70 = v74;
    v151 = v74;
    v71 = dispatch thunk of UsoEntity_common_MixedFraction.denominatorValue.getter();
    if ((v26 & 1) == 0)
    {
      v69 = v71;
      v68 = v71;
      v150 = v71;
      if (!v71)
      {
        swift_release();
        swift_release();
        v106 = v116 | 0x100000000;
        goto LABEL_89;
      }
      v64 = &v149;
      v149 = v70;
      v66 = lazy protocol witness table accessor for type Int64 and conformance Int64();
      v65 = MEMORY[0x24BEE4008];
      Float.init<A>(_:)();
      v67 = v27;
      v148 = v68;
      Float.init<A>(_:)();
      v157 = v67 / v28;
      v158 = 0;
    }
  }
  v63 = dispatch thunk of UsoEntity_common_MixedFraction.wholeValue.getter();
  if ((v29 & 1) == 0)
  {
    v62 = v63;
    v61 = v62;
    v156 = v62;
    v153 = v157;
    v154 = v158 & 1;
    if ((v158 & 1) != 0)
      v155 = 0.0;
    else
      v155 = v153;
    v60 = v155;
    v59 = &v152;
    v152 = v61;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    Float.init<A>(_:)();
    v157 = v60 + v30;
    v158 = 0;
  }
  v58 = v157;
  v57 = v158;
  swift_release();
  swift_release();
  v106 = __PAIR64__(v57, LODWORD(v58));
LABEL_89:
  LODWORD(v173) = v106;
  BYTE4(v173) = BYTE4(v106) & 1;
  return v173;
}

unint64_t lazy protocol witness table accessor for type Int64 and conformance Int64()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    v0 = MEMORY[0x249572C98](MEMORY[0x24BEE4040], MEMORY[0x24BEE4008]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
    return v0;
  }
  return v2;
}

uint64_t outlined destroy of UsoEntity_common_Decimal.DefinedValues?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for UsoEntity_common_Decimal.DefinedValues();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

unint64_t type metadata accessor for NSNumberFormatter()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSNumberFormatter;
  if (!lazy cache variable for type metadata for NSNumberFormatter)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSNumberFormatter);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type UsoEntity_common_Decimal.DefinedValues and conformance UsoEntity_common_Decimal.DefinedValues()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type UsoEntity_common_Decimal.DefinedValues and conformance UsoEntity_common_Decimal.DefinedValues;
  if (!lazy protocol witness table cache variable for type UsoEntity_common_Decimal.DefinedValues and conformance UsoEntity_common_Decimal.DefinedValues)
  {
    v0 = type metadata accessor for UsoEntity_common_Decimal.DefinedValues();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEA0580], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_Decimal.DefinedValues and conformance UsoEntity_common_Decimal.DefinedValues);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of UsoEntity_common_Number.DefinedValues?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for UsoEntity_common_Number.DefinedValues();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

ValueMetadata *type metadata accessor for USOEntityNumberExtractor()
{
  return &type metadata for USOEntityNumberExtractor;
}

uint64_t PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  return PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(a1, a2, a3);
}

uint64_t PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v9;
  _BYTE v10[40];
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = 0;
  v15 = 0;
  v14 = 0;
  v13 = 0;
  v4 = *v3;
  v16 = a1;
  v15 = a2;
  v14 = a3;
  v13 = v3;
  v12 = *(_QWORD *)(v4 + 80);
  v11 = *(_QWORD *)(v4 + 88);
  outlined init with copy of GlobalsProviding(a1, (uint64_t)v10);
  outlined init with take of CommonLabelsProviding(v10, v3 + 2);
  swift_retain();
  v3[7] = a2;
  swift_retain();
  v3[8] = a3;
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v9;
}

uint64_t PaymentsErrorTemplateProvider.continueInAppError(intentType:app:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 56) = v3;
  *(_QWORD *)(v4 + 48) = a3;
  *(_BYTE *)(v4 + 89) = a2;
  *(_QWORD *)(v4 + 40) = a1;
  *(_QWORD *)(v4 + 16) = v4;
  *(_BYTE *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 88) = a2;
  *(_QWORD *)(v4 + 24) = a3;
  *(_QWORD *)(v4 + 32) = v3;
  return swift_task_switch();
}

uint64_t PaymentsErrorTemplateProvider.continueInAppError(intentType:app:)()
{
  uint64_t v0;
  Swift::String v1;
  _QWORD *v2;
  uint64_t v4;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("fallback", 8uLL, 1);
  *(_QWORD *)(v0 + 64) = v1._object;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 72) = v2;
  *v2 = *(_QWORD *)(v4 + 16);
  v2[1] = PaymentsErrorTemplateProvider.continueInAppError(intentType:app:);
  return PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)(*(_QWORD *)(v4 + 40), v1._countAndFlagsBits, (uint64_t)v1._object, *(_BYTE *)(v4 + 89), 0, 0, 0, 0);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

_QWORD *PaymentsErrorTemplateProvider.continueInAppError(intentType:app:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v4 = (_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  swift_bridgeObjectRelease();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v4 + 8))(v4);
}

uint64_t PaymentsErrorTemplateProvider.errorWithCode(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v4 = *v2;
  v3[3] = a2;
  v3[8] = *(_QWORD *)(v4 + 80);
  v3[9] = *(_QWORD *)(v4 + 88);
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t PaymentsErrorTemplateProvider.errorWithCode(from:)()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0[2] = v0;
  type metadata accessor for IntentResolutionRecord();
  v4 = IntentResolutionRecord.intent.getter();
  v0[10] = v4;
  v5 = IntentResolutionRecord.intentResponse.getter();
  v0[11] = v5;
  v6 = IntentResolutionRecord.app.getter();
  v0[12] = v6;
  v1 = (_QWORD *)swift_task_alloc();
  v3[13] = v1;
  *v1 = v3[2];
  v1[1] = PaymentsErrorTemplateProvider.errorWithCode(from:);
  return PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:)(v3[5], v4, v5, v6);
}

{
  _QWORD *v0;
  id v2;
  id v3;

  v2 = (id)v0[11];
  v3 = (id)v0[10];
  v0[2] = v0;
  swift_release();

  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

_QWORD *PaymentsErrorTemplateProvider.errorWithCode(from:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v6 = v2 + 16;
  v7 = (_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  v4 = *(void **)(v6 + 72);
  v5 = *(void **)(v6 + 64);
  swift_release();

  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v7 + 8))(v7);
}

uint64_t PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  *(_QWORD *)(v3 + 240) = v2;
  *(_QWORD *)(v3 + 232) = a2;
  *(_QWORD *)(v3 + 224) = a1;
  *(_QWORD *)(v3 + 80) = v3;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_BYTE *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_BYTE *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  v10 = *v2;
  *(_QWORD *)(v3 + 248) = *v2;
  *(_QWORD *)(v3 + 256) = *(_QWORD *)(v10 + 80);
  v4 = type metadata accessor for ParameterResolutionRecord();
  *(_QWORD *)(v3 + 264) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 272) = v5;
  *(_QWORD *)(v3 + 280) = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v3 + 288) = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  *(_QWORD *)(v3 + 296) = v6;
  *(_QWORD *)(v3 + 304) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 312) = swift_task_alloc();
  *(_QWORD *)(v3 + 320) = swift_task_alloc();
  *(_QWORD *)(v3 + 328) = swift_task_alloc();
  *(_QWORD *)(v3 + 336) = swift_task_alloc();
  *(_QWORD *)(v3 + 344) = swift_task_alloc();
  v7 = type metadata accessor for ParameterIdentifier();
  *(_QWORD *)(v3 + 352) = v7;
  *(_QWORD *)(v3 + 360) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 368) = swift_task_alloc();
  *(_QWORD *)(v3 + 88) = a2;
  *(_QWORD *)(v3 + 96) = v2;
  *(_QWORD *)(v3 + 376) = *(_QWORD *)(v10 + 88);
  return swift_task_switch();
}

uint64_t PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:)()
{
  _QWORD *v0;
  id v1;
  void *v2;
  SiriPaymentsIntents::RequestPaymentSlots_optional v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  void *v22;
  SiriPaymentsIntents::SendPaymentSlots_optional v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint32_t v56;
  os_log_type_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint32_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint32_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  NSObject *v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  id v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  Swift::String rawValue;
  id v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint8_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint32_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  NSObject *log;
  os_log_type_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint8_t *buf;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint32_t size;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  NSObject *oslog;
  os_log_type_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  id v190;
  id v191;
  id v192;
  uint64_t v193;
  uint64_t v194;
  id v195;
  id v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  Swift::String v200;
  uint64_t v201;
  void *v202;
  void *v203;
  uint8_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t (*v207)(uint64_t, uint64_t, uint64_t);
  uint64_t v208;
  uint8_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t (*v212)(uint64_t, uint64_t, uint64_t);
  uint64_t v213;
  uint8_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t (*v217)(uint64_t, uint64_t, uint64_t);
  uint64_t v218;
  uint8_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t (*v222)(uint64_t, uint64_t, uint64_t);
  uint64_t v223;
  uint64_t v224;

  v0[10] = v0;
  v202 = (void *)ParameterResolutionRecord.intent.getter();
  v0[48] = v202;
  objc_opt_self();
  v203 = (void *)swift_dynamicCastObjCClass();
  v0[49] = v203;
  if (v203)
  {
    v198 = *(_QWORD *)(v201 + 368);
    v197 = *(_QWORD *)(v201 + 360);
    v199 = *(_QWORD *)(v201 + 352);
    v1 = v203;
    *(_QWORD *)(v201 + 184) = v203;
    ParameterResolutionRecord.parameter.getter();
    v200._countAndFlagsBits = ParameterIdentifier.name.getter();
    v200._object = v2;
    (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v198, v199);
    v3.value = RequestPaymentSlots.init(rawValue:)(v200).value;
    if (v3.value == SiriPaymentsIntents_RequestPaymentSlots_unknownDefault)
    {
      v143 = *(_QWORD *)(v201 + 376);
      v17 = *(_QWORD *)(v201 + 336);
      v139 = *(_QWORD *)(v201 + 304);
      v140 = *(_QWORD *)(v201 + 296);
      v147 = *(_QWORD *)(v201 + 288);
      v146 = *(_QWORD *)(v201 + 272);
      v148 = *(_QWORD *)(v201 + 264);
      v142 = *(_QWORD *)(v201 + 256);
      v144 = *(_QWORD *)(v201 + 248);
      v141 = *(_QWORD *)(v201 + 232);
      v18 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v139 + 16))(v17, v18, v140);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 16))(v147, v141, v148);
      v145 = (*(unsigned __int8 *)(v146 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80);
      v150 = (char *)swift_allocObject();
      *((_QWORD *)v150 + 2) = v142;
      *((_QWORD *)v150 + 3) = v143;
      *((_QWORD *)v150 + 4) = *(_QWORD *)(v144 + 96);
      *((_QWORD *)v150 + 5) = *(_QWORD *)(v144 + 104);
      (*(void (**)(char *, uint64_t, uint64_t))(v146 + 32))(&v150[v145], v147, v148);
      log = Logger.logObject.getter();
      v157 = static os_log_type_t.error.getter();
      *(_QWORD *)(v201 + 192) = 12;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v149 = *(_DWORD *)(v201 + 540);
      v152 = swift_allocObject();
      *(_BYTE *)(v152 + 16) = 32;
      v153 = swift_allocObject();
      *(_BYTE *)(v153 + 16) = 8;
      v151 = swift_allocObject();
      *(_QWORD *)(v151 + 16) = partial apply for implicit closure #3 in PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:);
      *(_QWORD *)(v151 + 24) = v150;
      v154 = swift_allocObject();
      *(_QWORD *)(v154 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v154 + 24) = v151;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      _allocateUninitializedArray<A>(_:)();
      v155 = v19;
      swift_retain();
      *v155 = partial apply for closure #1 in OSLogArguments.append(_:);
      v155[1] = v152;
      swift_retain();
      v155[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v155[3] = v153;
      swift_retain();
      v155[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v155[5] = v154;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(log, v157))
      {
        v136 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v135 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v137 = createStorage<A>(capacity:type:)(0);
        v138 = createStorage<A>(capacity:type:)(1);
        v214 = v136;
        v215 = v137;
        v216 = v138;
        serialize(_:at:)(2, &v214);
        serialize(_:at:)(1, &v214);
        v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v218 = v152;
        closure #1 in osLogInternal(_:log:type:)(&v217, (uint64_t)&v214, (uint64_t)&v215, (uint64_t)&v216);
        v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v218 = v153;
        closure #1 in osLogInternal(_:log:type:)(&v217, (uint64_t)&v214, (uint64_t)&v215, (uint64_t)&v216);
        v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v218 = v154;
        closure #1 in osLogInternal(_:log:type:)(&v217, (uint64_t)&v214, (uint64_t)&v215, (uint64_t)&v216);
        _os_log_impl(&dword_24701B000, log, v157, "#PaymentsErrorTemplateProvider unsupportedErrorWithCode unknown parameter for Request: %s", v136, v149);
        destroyStorage<A>(_:count:)(v137, 0, v135);
        destroyStorage<A>(_:count:)(v138, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v136, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      v132 = *(_QWORD *)(v201 + 336);
      v131 = *(_QWORD *)(v201 + 304);
      v133 = *(_QWORD *)(v201 + 296);
      v134 = *(_QWORD *)(v201 + 224);

      (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v132, v133);
      v20 = type metadata accessor for TemplatingResult();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v134, 1);

    }
    else
    {
      *(SiriPaymentsIntents::RequestPaymentSlots_optional *)(v201 + 528) = v3;
      *(_QWORD *)(v201 + 48) = 0;
      *(_QWORD *)(v201 + 56) = 0;
      if (v3.value)
      {
        if (v3.value == SiriPaymentsIntents_RequestPaymentSlots_currencyAmount)
        {
          v196 = (id)ParameterResolutionRecord.result.getter();
          objc_msgSend(v196, sel_unsupportedReason);

          INSiriAuthorizationStatus.init(rawValue:)();
          if ((v5 & 1) == 0)
          {
            *(_QWORD *)(v201 + 216) = v4;
            *(_QWORD *)(v201 + 48) = static PaymentIntentCATResponseCode.from(_:)(v4);
            *(_QWORD *)(v201 + 56) = v6;
            swift_bridgeObjectRelease();
          }
        }
      }
      else
      {
        v195 = (id)ParameterResolutionRecord.result.getter();
        objc_msgSend(v195, sel_unsupportedReason);

        INSiriAuthorizationStatus.init(rawValue:)();
        if ((v8 & 1) == 0)
        {
          *(_QWORD *)(v201 + 208) = v7;
          *(_QWORD *)(v201 + 48) = static PaymentIntentCATResponseCode.from(_:)(v7);
          *(_QWORD *)(v201 + 56) = v9;
          swift_bridgeObjectRelease();
        }
      }
      v193 = *(_QWORD *)(v201 + 48);
      v194 = *(_QWORD *)(v201 + 56);
      *(_QWORD *)(v201 + 400) = v194;
      swift_bridgeObjectRetain();
      if (v194)
      {
        *(_QWORD *)(v201 + 64) = v193;
        *(_QWORD *)(v201 + 72) = v194;
        v190 = objc_msgSend(v203, sel_payer);
        *(_QWORD *)(v201 + 408) = v190;
        v191 = objc_msgSend(v203, sel_currencyAmount);
        *(_QWORD *)(v201 + 416) = v191;
        v192 = objc_msgSend(v203, sel_note);
        if (v192)
        {
          v186 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v187 = v10;

          v188 = v186;
          v189 = v187;
        }
        else
        {
          v188 = 0;
          v189 = 0;
        }
        *(_QWORD *)(v201 + 424) = v189;
        v185 = ParameterResolutionRecord.app.getter();
        *(_QWORD *)(v201 + 432) = v185;
        v11 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v201 + 440) = v11;
        *v11 = *(_QWORD *)(v201 + 80);
        v11[1] = PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:);
        v12 = *(_QWORD *)(v201 + 224);
        v224 = v185;
        return PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)(v12, v193, v194, 0, (uint64_t)v190, (uint64_t)v191, v188, v189);
      }
      v170 = *(_QWORD *)(v201 + 376);
      v13 = *(_QWORD *)(v201 + 344);
      v166 = *(_QWORD *)(v201 + 304);
      v167 = *(_QWORD *)(v201 + 296);
      v174 = *(_QWORD *)(v201 + 288);
      v173 = *(_QWORD *)(v201 + 272);
      v175 = *(_QWORD *)(v201 + 264);
      v169 = *(_QWORD *)(v201 + 256);
      v171 = *(_QWORD *)(v201 + 248);
      v168 = *(_QWORD *)(v201 + 232);
      v14 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v166 + 16))(v13, v14, v167);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v173 + 16))(v174, v168, v175);
      v172 = (*(unsigned __int8 *)(v173 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80);
      v177 = (char *)swift_allocObject();
      *((_QWORD *)v177 + 2) = v169;
      *((_QWORD *)v177 + 3) = v170;
      *((_QWORD *)v177 + 4) = *(_QWORD *)(v171 + 96);
      *((_QWORD *)v177 + 5) = *(_QWORD *)(v171 + 104);
      (*(void (**)(char *, uint64_t, uint64_t))(v173 + 32))(&v177[v172], v174, v175);
      oslog = Logger.logObject.getter();
      v184 = static os_log_type_t.error.getter();
      *(_QWORD *)(v201 + 200) = 12;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      size = *(_DWORD *)(v201 + 544);
      v179 = swift_allocObject();
      *(_BYTE *)(v179 + 16) = 32;
      v180 = swift_allocObject();
      *(_BYTE *)(v180 + 16) = 8;
      v178 = swift_allocObject();
      *(_QWORD *)(v178 + 16) = partial apply for implicit closure #3 in PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:);
      *(_QWORD *)(v178 + 24) = v177;
      v181 = swift_allocObject();
      *(_QWORD *)(v181 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v181 + 24) = v178;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      _allocateUninitializedArray<A>(_:)();
      v182 = v15;
      swift_retain();
      *v182 = partial apply for closure #1 in OSLogArguments.append(_:);
      v182[1] = v179;
      swift_retain();
      v182[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v182[3] = v180;
      swift_retain();
      v182[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v182[5] = v181;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(oslog, v184))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v162 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v164 = createStorage<A>(capacity:type:)(0);
        v165 = createStorage<A>(capacity:type:)(1);
        v219 = buf;
        v220 = v164;
        v221 = v165;
        serialize(_:at:)(2, &v219);
        serialize(_:at:)(1, &v219);
        v222 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v223 = v179;
        closure #1 in osLogInternal(_:log:type:)(&v222, (uint64_t)&v219, (uint64_t)&v220, (uint64_t)&v221);
        v222 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v223 = v180;
        closure #1 in osLogInternal(_:log:type:)(&v222, (uint64_t)&v219, (uint64_t)&v220, (uint64_t)&v221);
        v222 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v223 = v181;
        closure #1 in osLogInternal(_:log:type:)(&v222, (uint64_t)&v219, (uint64_t)&v220, (uint64_t)&v221);
        _os_log_impl(&dword_24701B000, oslog, v184, "#PaymentsErrorTemplateProvider unsupportedErrorWithCode recognized Request slot %s, but no known error code found, returning nil", buf, size);
        destroyStorage<A>(_:count:)(v164, 0, v162);
        destroyStorage<A>(_:count:)(v165, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      v159 = *(_QWORD *)(v201 + 344);
      v158 = *(_QWORD *)(v201 + 304);
      v160 = *(_QWORD *)(v201 + 296);
      v161 = *(_QWORD *)(v201 + 224);

      (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v159, v160);
      v16 = type metadata accessor for TemplatingResult();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v161, 1);
      outlined destroy of String.UTF8View();

    }
LABEL_48:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v201 + 80) + 8))();
  }
  objc_opt_self();
  v130 = (id)swift_dynamicCastObjCClass();
  *(_QWORD *)(v201 + 456) = v130;
  if (!v130)
  {
    v42 = *(_QWORD *)(v201 + 312);
    v54 = *(_QWORD *)(v201 + 304);
    v55 = *(_QWORD *)(v201 + 296);

    v43 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v42, v43, v55);
    v58 = Logger.logObject.getter();
    v57 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v201 + 104) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v56 = *(_DWORD *)(v201 + 524);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v59 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v58, v57))
    {
      v50 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v51 = createStorage<A>(capacity:type:)(0);
      v52 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v201 + 112) = v50;
      *(_QWORD *)(v201 + 120) = v51;
      *(_QWORD *)(v201 + 128) = v52;
      serialize(_:at:)(0, (_BYTE **)(v201 + 112));
      serialize(_:at:)(0, (_BYTE **)(v201 + 112));
      *(_QWORD *)(v201 + 136) = v59;
      v53 = (_QWORD *)swift_task_alloc();
      v53[2] = v201 + 112;
      v53[3] = v201 + 120;
      v53[4] = v201 + 128;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24701B000, v58, v57, "#PaymentsErrorTemplateProvider unsupportedErrorWithCode returning nil", v50, v56);
      destroyStorage<A>(_:count:)(v51, 0, v49);
      destroyStorage<A>(_:count:)(v52, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v50, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v46 = *(_QWORD *)(v201 + 312);
    v45 = *(_QWORD *)(v201 + 304);
    v47 = *(_QWORD *)(v201 + 296);
    v48 = *(_QWORD *)(v201 + 224);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v47);
    v44 = type metadata accessor for TemplatingResult();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v48, 1);
    goto LABEL_48;
  }
  v127 = *(_QWORD *)(v201 + 368);
  v126 = *(_QWORD *)(v201 + 360);
  v128 = *(_QWORD *)(v201 + 352);
  v21 = v130;
  *(_QWORD *)(v201 + 144) = v130;
  ParameterResolutionRecord.parameter.getter();
  rawValue._countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v22;
  (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v127, v128);
  v23.value = SendPaymentSlots.init(rawValue:)(rawValue).value;
  if (v23.value == SiriPaymentsIntents_SendPaymentSlots_unknownDefault)
  {
    v72 = *(_QWORD *)(v201 + 376);
    v38 = *(_QWORD *)(v201 + 320);
    v68 = *(_QWORD *)(v201 + 304);
    v69 = *(_QWORD *)(v201 + 296);
    v76 = *(_QWORD *)(v201 + 288);
    v75 = *(_QWORD *)(v201 + 272);
    v77 = *(_QWORD *)(v201 + 264);
    v71 = *(_QWORD *)(v201 + 256);
    v73 = *(_QWORD *)(v201 + 248);
    v70 = *(_QWORD *)(v201 + 232);
    v39 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16))(v38, v39, v69);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 16))(v76, v70, v77);
    v74 = (*(unsigned __int8 *)(v75 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
    v79 = (char *)swift_allocObject();
    *((_QWORD *)v79 + 2) = v71;
    *((_QWORD *)v79 + 3) = v72;
    *((_QWORD *)v79 + 4) = *(_QWORD *)(v73 + 96);
    *((_QWORD *)v79 + 5) = *(_QWORD *)(v73 + 104);
    (*(void (**)(char *, uint64_t, uint64_t))(v75 + 32))(&v79[v74], v76, v77);
    v85 = Logger.logObject.getter();
    v86 = static os_log_type_t.error.getter();
    *(_QWORD *)(v201 + 152) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v78 = *(_DWORD *)(v201 + 532);
    v81 = swift_allocObject();
    *(_BYTE *)(v81 + 16) = 32;
    v82 = swift_allocObject();
    *(_BYTE *)(v82 + 16) = 8;
    v80 = swift_allocObject();
    *(_QWORD *)(v80 + 16) = partial apply for implicit closure #3 in PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:);
    *(_QWORD *)(v80 + 24) = v79;
    v83 = swift_allocObject();
    *(_QWORD *)(v83 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v83 + 24) = v80;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    v84 = v40;
    swift_retain();
    *v84 = partial apply for closure #1 in OSLogArguments.append(_:);
    v84[1] = v81;
    swift_retain();
    v84[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v84[3] = v82;
    swift_retain();
    v84[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v84[5] = v83;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v85, v86))
    {
      v65 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v66 = createStorage<A>(capacity:type:)(0);
      v67 = createStorage<A>(capacity:type:)(1);
      v204 = v65;
      v205 = v66;
      v206 = v67;
      serialize(_:at:)(2, &v204);
      serialize(_:at:)(1, &v204);
      v207 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v208 = v81;
      closure #1 in osLogInternal(_:log:type:)(&v207, (uint64_t)&v204, (uint64_t)&v205, (uint64_t)&v206);
      v207 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v208 = v82;
      closure #1 in osLogInternal(_:log:type:)(&v207, (uint64_t)&v204, (uint64_t)&v205, (uint64_t)&v206);
      v207 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v208 = v83;
      closure #1 in osLogInternal(_:log:type:)(&v207, (uint64_t)&v204, (uint64_t)&v205, (uint64_t)&v206);
      _os_log_impl(&dword_24701B000, v85, v86, "#PaymentsErrorTemplateProvider unsupportedErrorWithCode unknown parameter for Send: %s", v65, v78);
      destroyStorage<A>(_:count:)(v66, 0, v64);
      destroyStorage<A>(_:count:)(v67, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v65, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v61 = *(_QWORD *)(v201 + 320);
    v60 = *(_QWORD *)(v201 + 304);
    v62 = *(_QWORD *)(v201 + 296);
    v63 = *(_QWORD *)(v201 + 224);

    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v61, v62);
    v41 = type metadata accessor for TemplatingResult();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v63, 1);

    goto LABEL_48;
  }
  *(SiriPaymentsIntents::SendPaymentSlots_optional *)(v201 + 520) = v23;
  *(_QWORD *)(v201 + 16) = 0;
  *(_QWORD *)(v201 + 24) = 0;
  if (v23.value)
  {
    if (v23.value == SiriPaymentsIntents_SendPaymentSlots_currencyAmount)
    {
      v125 = (id)ParameterResolutionRecord.result.getter();
      objc_msgSend(v125, sel_unsupportedReason);

      INSiriAuthorizationStatus.init(rawValue:)();
      if ((v25 & 1) == 0)
      {
        *(_QWORD *)(v201 + 176) = v24;
        *(_QWORD *)(v201 + 16) = static PaymentIntentCATResponseCode.from(_:)(v24);
        *(_QWORD *)(v201 + 24) = v26;
        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    v124 = (id)ParameterResolutionRecord.result.getter();
    objc_msgSend(v124, sel_unsupportedReason);

    INSiriAuthorizationStatus.init(rawValue:)();
    if ((v28 & 1) == 0)
    {
      *(_QWORD *)(v201 + 168) = v27;
      *(_QWORD *)(v201 + 16) = static PaymentIntentCATResponseCode.from(_:)(v27);
      *(_QWORD *)(v201 + 24) = v29;
      swift_bridgeObjectRelease();
    }
  }
  v122 = *(_QWORD *)(v201 + 16);
  v123 = *(_QWORD *)(v201 + 24);
  *(_QWORD *)(v201 + 464) = v123;
  swift_bridgeObjectRetain();
  if (!v123)
  {
    v99 = *(_QWORD *)(v201 + 376);
    v34 = *(_QWORD *)(v201 + 328);
    v95 = *(_QWORD *)(v201 + 304);
    v96 = *(_QWORD *)(v201 + 296);
    v103 = *(_QWORD *)(v201 + 288);
    v102 = *(_QWORD *)(v201 + 272);
    v104 = *(_QWORD *)(v201 + 264);
    v98 = *(_QWORD *)(v201 + 256);
    v100 = *(_QWORD *)(v201 + 248);
    v97 = *(_QWORD *)(v201 + 232);
    v35 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16))(v34, v35, v96);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 16))(v103, v97, v104);
    v101 = (*(unsigned __int8 *)(v102 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80);
    v106 = (char *)swift_allocObject();
    *((_QWORD *)v106 + 2) = v98;
    *((_QWORD *)v106 + 3) = v99;
    *((_QWORD *)v106 + 4) = *(_QWORD *)(v100 + 96);
    *((_QWORD *)v106 + 5) = *(_QWORD *)(v100 + 104);
    (*(void (**)(char *, uint64_t, uint64_t))(v102 + 32))(&v106[v101], v103, v104);
    v112 = Logger.logObject.getter();
    v113 = static os_log_type_t.error.getter();
    *(_QWORD *)(v201 + 160) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v105 = *(_DWORD *)(v201 + 536);
    v108 = swift_allocObject();
    *(_BYTE *)(v108 + 16) = 32;
    v109 = swift_allocObject();
    *(_BYTE *)(v109 + 16) = 8;
    v107 = swift_allocObject();
    *(_QWORD *)(v107 + 16) = partial apply for implicit closure #3 in PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:);
    *(_QWORD *)(v107 + 24) = v106;
    v110 = swift_allocObject();
    *(_QWORD *)(v110 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v110 + 24) = v107;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    v111 = v36;
    swift_retain();
    *v111 = partial apply for closure #1 in OSLogArguments.append(_:);
    v111[1] = v108;
    swift_retain();
    v111[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v111[3] = v109;
    swift_retain();
    v111[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v111[5] = v110;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v112, v113))
    {
      v92 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v91 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v93 = createStorage<A>(capacity:type:)(0);
      v94 = createStorage<A>(capacity:type:)(1);
      v209 = v92;
      v210 = v93;
      v211 = v94;
      serialize(_:at:)(2, &v209);
      serialize(_:at:)(1, &v209);
      v212 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v213 = v108;
      closure #1 in osLogInternal(_:log:type:)(&v212, (uint64_t)&v209, (uint64_t)&v210, (uint64_t)&v211);
      v212 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v213 = v109;
      closure #1 in osLogInternal(_:log:type:)(&v212, (uint64_t)&v209, (uint64_t)&v210, (uint64_t)&v211);
      v212 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v213 = v110;
      closure #1 in osLogInternal(_:log:type:)(&v212, (uint64_t)&v209, (uint64_t)&v210, (uint64_t)&v211);
      _os_log_impl(&dword_24701B000, v112, v113, "#PaymentsErrorTemplateProvider unsupportedErrorWithCode recognized Send slot %s, but no known error code found, returning nil", v92, v105);
      destroyStorage<A>(_:count:)(v93, 0, v91);
      destroyStorage<A>(_:count:)(v94, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v92, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v88 = *(_QWORD *)(v201 + 328);
    v87 = *(_QWORD *)(v201 + 304);
    v89 = *(_QWORD *)(v201 + 296);
    v90 = *(_QWORD *)(v201 + 224);

    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v88, v89);
    v37 = type metadata accessor for TemplatingResult();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v90, 1);
    outlined destroy of String.UTF8View();

    goto LABEL_48;
  }
  *(_QWORD *)(v201 + 32) = v122;
  *(_QWORD *)(v201 + 40) = v123;
  v119 = objc_msgSend(v130, sel_payee);
  *(_QWORD *)(v201 + 472) = v119;
  v120 = objc_msgSend(v130, sel_currencyAmount);
  *(_QWORD *)(v201 + 480) = v120;
  v121 = objc_msgSend(v130, sel_note);
  if (v121)
  {
    v115 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v116 = v30;

    v117 = v115;
    v118 = v116;
  }
  else
  {
    v117 = 0;
    v118 = 0;
  }
  *(_QWORD *)(v201 + 488) = v118;
  v114 = ParameterResolutionRecord.app.getter();
  *(_QWORD *)(v201 + 496) = v114;
  v31 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v201 + 504) = v31;
  *v31 = *(_QWORD *)(v201 + 80);
  v31[1] = PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:);
  v32 = *(_QWORD *)(v201 + 224);
  v224 = v114;
  return PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)(v32, v122, v123, 1, (uint64_t)v119, (uint64_t)v120, v117, v118);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = *v1;
  v2 += 80;
  v6 = v2 - 64;
  *(_QWORD *)(v2 + 368) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(void **)(v6 + 400);
    v5 = *(void **)(v6 + 392);
    swift_release();
    swift_bridgeObjectRelease();

  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  id v4;
  id v5;

  v4 = (id)v0[49];
  v5 = (id)v0[48];
  v3 = v0[28];
  v0[10] = v0;
  v1 = type metadata accessor for TemplatingResult();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v3, 0, 1);
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[10] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = *v1;
  v2 += 80;
  v6 = v2 - 64;
  *(_QWORD *)(v2 + 432) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(void **)(v6 + 464);
    v5 = *(void **)(v6 + 456);
    swift_release();
    swift_bridgeObjectRelease();

  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  id v4;
  id v5;

  v4 = (id)v0[57];
  v5 = (id)v0[48];
  v3 = v0[28];
  v0[10] = v0;
  v1 = type metadata accessor for TemplatingResult();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v3, 0, 1);
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[10] + 8))();
}

{
  _QWORD *v0;
  id v2;
  id v3;
  id v4;
  id v5;

  v2 = (id)v0[52];
  v3 = (id)v0[51];
  v4 = (id)v0[49];
  v5 = (id)v0[48];
  v0[10] = v0;
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[10] + 8))();
}

{
  _QWORD *v0;
  id v2;
  id v3;
  id v4;
  id v5;

  v2 = (id)v0[60];
  v3 = (id)v0[59];
  v4 = (id)v0[57];
  v5 = (id)v0[48];
  v0[10] = v0;
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[10] + 8))();
}

uint64_t implicit closure #1 in PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[2];
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[0] = a2;
  v4[1] = 0;
  v8 = type metadata accessor for ParameterIdentifier();
  v6 = *(_QWORD *)(v8 - 8);
  v5 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v7 = (char *)v4 - v5;
  type metadata accessor for ParameterResolutionRecord();
  ParameterResolutionRecord.parameter.getter();
  v9 = ParameterIdentifier.name.getter();
  v10 = v2;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v7, v8);
  return v9;
}

uint64_t PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[21] = v4;
  v5[20] = a4;
  v5[19] = a3;
  v5[18] = a2;
  v5[17] = a1;
  v5[2] = v5;
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = 0;
  v5[6] = 0;
  v5[12] = 0;
  v5[13] = 0;
  v5[14] = 0;
  v5[15] = 0;
  v5[16] = 0;
  v6 = type metadata accessor for Logger();
  v5[22] = v6;
  v5[23] = *(_QWORD *)(v6 - 8);
  v5[24] = swift_task_alloc();
  v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  v5[6] = v4;
  return swift_task_switch();
}

uint64_t PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:)()
{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint8_t *buf;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint32_t size;
  os_log_type_t v35;
  NSObject *oslog;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  uint64_t v62;
  void *v63;
  void *v64;

  v63 = (void *)v0[19];
  v1 = (void *)v0[18];
  v0[2] = v0;
  v2 = v1;
  v3 = v63;
  objc_opt_self();
  v64 = (void *)swift_dynamicCastObjCClass();
  v0[25] = v64;
  if (v64)
  {
    v4 = v64;
    objc_opt_self();
    v61 = (void *)swift_dynamicCastObjCClass();
    *(_QWORD *)(v62 + 208) = v61;
    if (v61)
    {
      v5 = v61;
      *(_QWORD *)(v62 + 120) = v64;
      *(_QWORD *)(v62 + 128) = v61;
      v56 = static PaymentIntentCATResponseCode.from(_:)((unint64_t)objc_msgSend(v61, sel_code));
      v57 = v6;
      *(_QWORD *)(v62 + 216) = v6;
      v58 = objc_msgSend(v64, sel_payer);
      *(_QWORD *)(v62 + 224) = v58;
      v59 = objc_msgSend(v64, sel_currencyAmount);
      *(_QWORD *)(v62 + 232) = v59;
      v60 = objc_msgSend(v64, sel_note);
      if (v60)
      {
        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v53 = v7;

        v54 = v52;
        v55 = v53;
      }
      else
      {
        v54 = 0;
        v55 = 0;
      }
      *(_QWORD *)(v62 + 240) = v55;
      v8 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v62 + 248) = v8;
      *v8 = *(_QWORD *)(v62 + 16);
      v8[1] = PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:);
      return PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)(*(_QWORD *)(v62 + 136), v56, v57, 0, (uint64_t)v58, (uint64_t)v59, v54, v55);
    }

  }
  objc_opt_self();
  v51 = (void *)swift_dynamicCastObjCClass();
  *(_QWORD *)(v62 + 264) = v51;
  if (v51)
  {
    v9 = v51;
    objc_opt_self();
    v50 = (void *)swift_dynamicCastObjCClass();
    *(_QWORD *)(v62 + 272) = v50;
    if (v50)
    {
      v10 = v50;
      *(_QWORD *)(v62 + 104) = v51;
      *(_QWORD *)(v62 + 112) = v50;
      v45 = static PaymentIntentCATResponseCode.from(_:)((unint64_t)objc_msgSend(v50, sel_code));
      v46 = v11;
      *(_QWORD *)(v62 + 280) = v11;
      v47 = objc_msgSend(v51, sel_payee);
      *(_QWORD *)(v62 + 288) = v47;
      v48 = objc_msgSend(v51, sel_currencyAmount);
      *(_QWORD *)(v62 + 296) = v48;
      v49 = objc_msgSend(v51, sel_note);
      if (v49)
      {
        v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v42 = v12;

        v43 = v41;
        v44 = v42;
      }
      else
      {
        v43 = 0;
        v44 = 0;
      }
      *(_QWORD *)(v62 + 304) = v44;
      v13 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v62 + 312) = v13;
      *v13 = *(_QWORD *)(v62 + 16);
      v13[1] = PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:);
      return PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)(*(_QWORD *)(v62 + 136), v45, v46, 1, (uint64_t)v47, (uint64_t)v48, v43, v44);
    }

  }
  objc_opt_self();
  if (swift_dynamicCastObjCClass()
    && (objc_opt_self(), v40 = (id)swift_dynamicCastObjCClass(), (*(_QWORD *)(v62 + 328) = v40) != 0))
  {
    v15 = v40;
    *(_QWORD *)(v62 + 96) = v40;
    v38 = static PaymentIntentCATResponseCode.from(_:)((unint64_t)objc_msgSend(v40, sel_code));
    v39 = v16;
    *(_QWORD *)(v62 + 336) = v16;
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v62 + 344) = v17;
    *v17 = *(_QWORD *)(v62 + 16);
    v17[1] = PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:);
    return PaymentsErrorTemplateProvider.searchForAccountErrorWithCode(responseCode:app:)(*(_QWORD *)(v62 + 136), v38, v39, *(_QWORD *)(v62 + 160));
  }
  else
  {
    v18 = *(_QWORD *)(v62 + 192);
    v32 = *(_QWORD *)(v62 + 184);
    v33 = *(_QWORD *)(v62 + 176);
    v19 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v18, v19, v33);
    oslog = Logger.logObject.getter();
    v35 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v62 + 56) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v62 + 360);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v37 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v35))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v29 = createStorage<A>(capacity:type:)(0);
      v30 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v62 + 64) = buf;
      *(_QWORD *)(v62 + 72) = v29;
      *(_QWORD *)(v62 + 80) = v30;
      serialize(_:at:)(0, (_BYTE **)(v62 + 64));
      serialize(_:at:)(0, (_BYTE **)(v62 + 64));
      *(_QWORD *)(v62 + 88) = v37;
      v31 = (_QWORD *)swift_task_alloc();
      v31[2] = v62 + 64;
      v31[3] = v62 + 72;
      v31[4] = v62 + 80;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24701B000, oslog, v35, "PaymentsErrorTemplateProvider errorWithCode unexpected intent type, returning nil", buf, size);
      destroyStorage<A>(_:count:)(v29, 0, v27);
      destroyStorage<A>(_:count:)(v30, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v22 = *(_QWORD *)(v62 + 192);
    v21 = *(_QWORD *)(v62 + 184);
    v23 = *(_QWORD *)(v62 + 176);
    v26 = *(id *)(v62 + 152);
    v25 = *(id *)(v62 + 144);
    v24 = *(_QWORD *)(v62 + 136);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
    v20 = type metadata accessor for TemplatingResult();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v24, 1);

    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v62 + 16) + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v6 = v2 + 16;
  *(_QWORD *)(v2 + 256) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(void **)(v6 + 216);
    v5 = *(void **)(v6 + 208);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v4 = (id)v0[26];
  v5 = (id)v0[25];
  v7 = (id)v0[19];
  v6 = (id)v0[18];
  v3 = v0[17];
  v0[2] = v0;
  v1 = type metadata accessor for TemplatingResult();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v3, 0, 1);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v6 = v2 + 16;
  *(_QWORD *)(v2 + 320) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(void **)(v6 + 280);
    v5 = *(void **)(v6 + 272);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v4 = (id)v0[34];
  v5 = (id)v0[33];
  v7 = (id)v0[19];
  v6 = (id)v0[18];
  v3 = v0[17];
  v0[2] = v0;
  v1 = type metadata accessor for TemplatingResult();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v3, 0, 1);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  *(_QWORD *)(v2 + 352) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  id v4;
  id v5;
  id v6;

  v4 = (id)v0[41];
  v6 = (id)v0[19];
  v5 = (id)v0[18];
  v3 = v0[17];
  v0[2] = v0;
  v1 = type metadata accessor for TemplatingResult();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v3, 0, 1);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

{
  _QWORD *v0;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v2 = (id)v0[29];
  v3 = (id)v0[28];
  v4 = (id)v0[26];
  v5 = (id)v0[25];
  v7 = (id)v0[19];
  v6 = (id)v0[18];
  v0[2] = v0;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

{
  _QWORD *v0;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v2 = (id)v0[37];
  v3 = (id)v0[36];
  v4 = (id)v0[34];
  v5 = (id)v0[33];
  v7 = (id)v0[19];
  v6 = (id)v0[18];
  v0[2] = v0;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

{
  _QWORD *v0;
  id v2;
  id v3;
  id v4;

  v2 = (id)v0[41];
  v4 = (id)v0[19];
  v3 = (id)v0[18];
  v0[2] = v0;
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

uint64_t PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v19;

  *(_QWORD *)(v9 + 400) = v8;
  *(_QWORD *)(v9 + 392) = v19;
  *(_QWORD *)(v9 + 384) = a8;
  *(_QWORD *)(v9 + 376) = a7;
  *(_QWORD *)(v9 + 368) = a6;
  *(_QWORD *)(v9 + 360) = a5;
  *(_BYTE *)(v9 + 523) = a4;
  *(_QWORD *)(v9 + 352) = a3;
  *(_QWORD *)(v9 + 344) = a2;
  *(_QWORD *)(v9 + 336) = a1;
  *(_QWORD *)(v9 + 248) = v9;
  *(_QWORD *)(v9 + 216) = 0;
  *(_QWORD *)(v9 + 224) = 0;
  *(_BYTE *)(v9 + 520) = 0;
  *(_QWORD *)(v9 + 256) = 0;
  *(_QWORD *)(v9 + 264) = 0;
  *(_QWORD *)(v9 + 232) = 0;
  *(_QWORD *)(v9 + 240) = 0;
  *(_QWORD *)(v9 + 272) = 0;
  *(_QWORD *)(v9 + 280) = 0;
  *(_QWORD *)(v9 + 296) = 0;
  *(_QWORD *)(v9 + 304) = 0;
  *(_QWORD *)(v9 + 312) = 0;
  *(_QWORD *)(v9 + 320) = 0;
  *(_QWORD *)(v9 + 328) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v9 + 408) = swift_task_alloc();
  *(_QWORD *)(v9 + 416) = swift_task_alloc();
  *(_QWORD *)(v9 + 424) = swift_task_alloc();
  *(_QWORD *)(v9 + 432) = swift_task_alloc();
  *(_QWORD *)(v9 + 440) = swift_task_alloc();
  type metadata accessor for Locale();
  *(_QWORD *)(v9 + 448) = swift_task_alloc();
  v10 = type metadata accessor for Logger();
  *(_QWORD *)(v9 + 456) = v10;
  *(_QWORD *)(v9 + 464) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 472) = swift_task_alloc();
  *(_QWORD *)(v9 + 216) = a2;
  *(_QWORD *)(v9 + 224) = a3;
  *(_BYTE *)(v9 + 520) = a4;
  *(_QWORD *)(v9 + 256) = a5;
  *(_QWORD *)(v9 + 264) = a6;
  *(_QWORD *)(v9 + 232) = a7;
  *(_QWORD *)(v9 + 240) = a8;
  *(_QWORD *)(v9 + 272) = v19;
  *(_QWORD *)(v9 + 280) = v8;
  return swift_task_switch();
}

uint64_t PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint8_t *buf;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint32_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;

  v1 = *(_QWORD *)(v0 + 472);
  v56 = *(_QWORD *)(v0 + 464);
  v57 = *(_QWORD *)(v0 + 456);
  v58 = *(_BYTE *)(v0 + 523);
  v60 = *(_QWORD *)(v0 + 352);
  v59 = *(_QWORD *)(v0 + 344);
  *(_QWORD *)(v0 + 248) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v1, v2, v57);
  v62 = swift_allocObject();
  *(_BYTE *)(v62 + 16) = v58;
  swift_bridgeObjectRetain();
  v64 = swift_allocObject();
  *(_QWORD *)(v64 + 16) = v59;
  *(_QWORD *)(v64 + 24) = v60;
  v73 = Logger.logObject.getter();
  v74 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 288) = 22;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v61 = *(_DWORD *)(v0 + 524);
  v66 = swift_allocObject();
  *(_BYTE *)(v66 + 16) = 32;
  v67 = swift_allocObject();
  *(_BYTE *)(v67 + 16) = 8;
  v63 = swift_allocObject();
  *(_QWORD *)(v63 + 16) = partial apply for implicit closure #1 in PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:);
  *(_QWORD *)(v63 + 24) = v62;
  v68 = swift_allocObject();
  *(_QWORD *)(v68 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v68 + 24) = v63;
  v69 = swift_allocObject();
  *(_BYTE *)(v69 + 16) = 32;
  v70 = swift_allocObject();
  *(_BYTE *)(v70 + 16) = 8;
  v65 = swift_allocObject();
  *(_QWORD *)(v65 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(_QWORD *)(v65 + 24) = v64;
  v71 = swift_allocObject();
  *(_QWORD *)(v71 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v71 + 24) = v65;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v72 = v3;
  swift_retain();
  *v72 = partial apply for closure #1 in OSLogArguments.append(_:);
  v72[1] = v66;
  swift_retain();
  v72[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v72[3] = v67;
  swift_retain();
  v72[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v72[5] = v68;
  swift_retain();
  v72[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v72[7] = v69;
  swift_retain();
  v72[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v72[9] = v70;
  swift_retain();
  v72[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v72[11] = v71;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v73, v74))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v53 = createStorage<A>(capacity:type:)(0);
    v54 = createStorage<A>(capacity:type:)(2);
    v75 = buf;
    v76 = v53;
    v77 = v54;
    serialize(_:at:)(2, &v75);
    serialize(_:at:)(2, &v75);
    v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v79 = v66;
    closure #1 in osLogInternal(_:log:type:)(&v78, (uint64_t)&v75, (uint64_t)&v76, (uint64_t)&v77);
    v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v79 = v67;
    closure #1 in osLogInternal(_:log:type:)(&v78, (uint64_t)&v75, (uint64_t)&v76, (uint64_t)&v77);
    v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v79 = v68;
    closure #1 in osLogInternal(_:log:type:)(&v78, (uint64_t)&v75, (uint64_t)&v76, (uint64_t)&v77);
    v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v79 = v69;
    closure #1 in osLogInternal(_:log:type:)(&v78, (uint64_t)&v75, (uint64_t)&v76, (uint64_t)&v77);
    v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v79 = v70;
    closure #1 in osLogInternal(_:log:type:)(&v78, (uint64_t)&v75, (uint64_t)&v76, (uint64_t)&v77);
    v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v79 = v71;
    closure #1 in osLogInternal(_:log:type:)(&v78, (uint64_t)&v75, (uint64_t)&v76, (uint64_t)&v77);
    _os_log_impl(&dword_24701B000, v73, v74, "#PaymentsErrorTemplateProvider errorWithCode intentType %s, code %s", buf, v61);
    destroyStorage<A>(_:count:)(v53, 0, v51);
    destroyStorage<A>(_:count:)(v54, 2, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v47 = *(_QWORD *)(v55 + 472);
  v46 = *(_QWORD *)(v55 + 464);
  v48 = *(_QWORD *)(v55 + 456);
  v50 = *(id *)(v55 + 360);

  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v48);
  type metadata accessor for PaymentsDialogConcept.Builder();
  v49 = PaymentsDialogConcept.Builder.__allocating_init()();
  *(_QWORD *)(v55 + 480) = v49;
  *(_QWORD *)(v55 + 296) = v49;
  v4 = v50;
  if (v50)
  {
    v43 = *(id *)(v55 + 360);
    v40 = *(_QWORD *)(v55 + 400);
    v45 = *(_BYTE *)(v55 + 523);
    *(_QWORD *)(v55 + 320) = v43;
    type metadata accessor for DialogPerson();
    v5 = v43;
    outlined init with copy of GlobalsProviding(v40 + 16, v55 + 16);
    v42 = *(_QWORD *)(v55 + 40);
    v41 = *(_QWORD *)(v55 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v55 + 16), v42);
    (*(void (**)(uint64_t))(v41 + 16))(v42);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v55 + 56), *(_QWORD *)(v55 + 80));
    dispatch thunk of DeviceState.siriLocale.getter();
    v44 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
    __swift_destroy_boxed_opaque_existential_0(v55 + 56);
    __swift_destroy_boxed_opaque_existential_0(v55 + 16);
    *(_QWORD *)(v55 + 328) = v44;
    *(_BYTE *)(v55 + 521) = v45;
    *(_BYTE *)(v55 + 522) = 0;
    lazy protocol witness table accessor for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode();
    if ((== infix<A>(_:_:)() & 1) != 0)
    {
      swift_retain();
      swift_retain();
      v39 = (uint64_t *)(v49 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payerName);
      swift_beginAccess();
      *v39 = v44;
    }
    else
    {
      swift_retain();
      swift_retain();
      v38 = (uint64_t *)(v49 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payeeName);
      swift_beginAccess();
      *v38 = v44;
    }
    swift_release();
    swift_endAccess();
    swift_release();
    swift_release();

  }
  v37 = *(void **)(v55 + 368);
  v6 = v37;
  if (v37)
  {
    v35 = *(id *)(v55 + 368);
    *(_QWORD *)(v55 + 312) = v35;
    type metadata accessor for DialogCurrency.Builder();
    DialogCurrency.Builder.__allocating_init()();
    v36 = objc_msgSend(v35, sel_amount);
    if (v36)
    {
      objc_msgSend(v36, sel_doubleValue);

    }
    dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
    swift_release();
    v34 = objc_msgSend(v35, sel_currencyCode);
    if (v34)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      v32 = v7;

      v33 = v32;
    }
    else
    {
      v33 = 0;
    }
    if (v33)
    {
      v31 = *(_QWORD *)(v55 + 440);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v8 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v31, 0, 1);
    }
    else
    {
      v28 = *(_QWORD *)(v55 + 440);
      v9 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v28, 1);
    }
    v29 = *(_QWORD *)(v55 + 440);
    dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)();
    outlined destroy of SpeakableString?(v29);
    swift_release();
    v30 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
    swift_release();
    swift_retain();
    swift_beginAccess();
    *(_QWORD *)(v49 + 16) = v30;
    swift_release();
    swift_endAccess();
    swift_release();

  }
  v27 = *(_QWORD *)(v55 + 384);
  swift_bridgeObjectRetain();
  if (v27)
  {
    v26 = *(_QWORD *)(v55 + 432);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v26, 0, 1);
  }
  else
  {
    v14 = *(_QWORD *)(v55 + 432);
    v13 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v14, 1);
  }
  v17 = *(const void **)(v55 + 432);
  v15 = *(void **)(v55 + 424);
  v20 = *(_QWORD *)(v55 + 416);
  v22 = *(_QWORD *)(v55 + 408);
  v19 = *(_QWORD *)(v55 + 400);
  v21 = *(_BYTE *)(v55 + 523);
  outlined init with copy of SpeakableString?(v17, v15);
  v16 = (void *)(v49 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo);
  swift_beginAccess();
  outlined assign with take of SpeakableString?(v15, v16);
  swift_endAccess();
  outlined destroy of SpeakableString?((uint64_t)v17);
  v18 = App.sirikitApp.getter();
  swift_retain();
  swift_beginAccess();
  *(_QWORD *)(v49 + 24) = v18;
  swift_release();
  swift_endAccess();
  swift_release();
  v25 = PaymentsDialogConcept.Builder.build()();
  *(_QWORD *)(v55 + 488) = v25;
  *(_QWORD *)(v55 + 304) = v25;
  *(_QWORD *)(v55 + 496) = *(_QWORD *)(v19 + 56);
  swift_retain();
  String.toSpeakableString.getter();
  v23 = type metadata accessor for SpeakableString();
  v24 = *(void (**)(uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v24(v20);
  swift_retain();
  Constants.IntentTypeCATCode.rawValue.getter(v21);
  String.toSpeakableString.getter();
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v24)(v22, 0, 1, v23);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v55 + 504) = v11;
  *v11 = *(_QWORD *)(v55 + 248);
  v11[1] = PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:);
  return PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:)(*(_QWORD *)(v55 + 336), *(_QWORD *)(v55 + 416), v25, *(_QWORD *)(v55 + 408));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(v2 + 248) = *v1;
  v2 += 248;
  v5 = v2 - 232;
  *(_QWORD *)(v2 + 264) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 400);
    outlined destroy of SpeakableString?(*(_QWORD *)(v5 + 392));
    swift_release();
    outlined destroy of SpeakableString?(v4);
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 248) = v0;
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 248) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = v0[52];
  v1 = v0[51];
  v0[31] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();
  outlined destroy of SpeakableString?(v3);
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[31] + 8))();
}

uint64_t implicit closure #1 in PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)(char a1)
{
  return Constants.IntentTypeCATCode.rawValue.getter(a1);
}

uint64_t PaymentsErrorTemplateProvider.searchForAccountErrorWithCode(responseCode:app:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[12] = v4;
  v5[11] = a4;
  v5[10] = a3;
  v5[9] = a2;
  v5[8] = a1;
  v5[4] = v5;
  v5[2] = 0;
  v5[3] = 0;
  v5[5] = 0;
  v5[6] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  v5[15] = v6;
  v5[16] = *(_QWORD *)(v6 - 8);
  v5[17] = swift_task_alloc();
  v5[2] = a2;
  v5[3] = a3;
  v5[5] = a4;
  v5[6] = v4;
  return swift_task_switch();
}

uint64_t PaymentsErrorTemplateProvider.searchForAccountErrorWithCode(responseCode:app:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *buf;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint32_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 136);
  v21 = *(_QWORD *)(v0 + 128);
  v22 = *(_QWORD *)(v0 + 120);
  v24 = *(_QWORD *)(v0 + 80);
  v23 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 32) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v1, v2, v22);
  swift_bridgeObjectRetain();
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v23;
  *(_QWORD *)(v26 + 24) = v24;
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 56) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v25 = *(_DWORD *)(v0 + 208);
  v28 = swift_allocObject();
  *(_BYTE *)(v28 + 16) = 32;
  v29 = swift_allocObject();
  *(_BYTE *)(v29 + 16) = 8;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(_QWORD *)(v27 + 24) = v26;
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v30 + 24) = v27;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v31 = v3;
  swift_retain();
  *v31 = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[1] = v28;
  swift_retain();
  v31[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[3] = v29;
  swift_retain();
  v31[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[5] = v30;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v32, v33))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v18 = createStorage<A>(capacity:type:)(0);
    v19 = createStorage<A>(capacity:type:)(1);
    v34 = buf;
    v35 = v18;
    v36 = v19;
    serialize(_:at:)(2, &v34);
    serialize(_:at:)(1, &v34);
    v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v38 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v38 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v38 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    _os_log_impl(&dword_24701B000, v32, v33, "#PaymentsErrorTemplateProvider searchForAccountErrorWithCode code %s", buf, v25);
    destroyStorage<A>(_:count:)(v18, 0, v16);
    destroyStorage<A>(_:count:)(v19, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v14 = v20[17];
  v13 = v20[16];
  v15 = v20[15];

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  if (App.isFirstParty.getter())
  {
    v11 = v20[14];
    v20[18] = *(_QWORD *)(v20[12] + 64);
    swift_retain();
    String.toSpeakableString.getter();
    v4 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v11, 0, 1);
    v12 = App.sirikitApp.getter();
    v20[19] = v12;
    v5 = (_QWORD *)swift_task_alloc();
    v20[20] = v5;
    *v5 = v20[4];
    v5[1] = PaymentsErrorTemplateProvider.searchForAccountErrorWithCode(responseCode:app:);
    return SearchForAccountsCATs.errorWithCodeForApplePay(errorCode:app:)(v20[8], v20[14], v12);
  }
  else
  {
    v9 = v20[13];
    v20[22] = *(_QWORD *)(v20[12] + 64);
    swift_retain();
    String.toSpeakableString.getter();
    v7 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v9, 0, 1);
    v10 = App.sirikitApp.getter();
    v20[23] = v10;
    v8 = (_QWORD *)swift_task_alloc();
    v20[24] = v8;
    *v8 = v20[4];
    v8[1] = PaymentsErrorTemplateProvider.searchForAccountErrorWithCode(responseCode:app:);
    return SearchForAccountsCATs.errorWithCode(errorCode:app:)(v20[8], v20[13], v10);
  }
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 32) = v0;
  swift_release();
  outlined destroy of SpeakableString?(v2);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 32) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 32) = v0;
  swift_release();
  outlined destroy of SpeakableString?(v2);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 32) + 8))();
}

_QWORD *PaymentsErrorTemplateProvider.searchForAccountErrorWithCode(responseCode:app:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = (_QWORD *)*v1;
  v2[4] = *v1;
  v2 += 4;
  v5 = v2 - 2;
  v6 = v2;
  v2[17] = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  v4 = v5[12];
  swift_release();
  outlined destroy of SpeakableString?(v4);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v6 + 8))(v6);
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = (_QWORD *)*v1;
  v2[4] = *v1;
  v2 += 4;
  v5 = v2 - 2;
  v6 = v2;
  v2[21] = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  v4 = v5[11];
  swift_release();
  outlined destroy of SpeakableString?(v4);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v6 + 8))(v6);
}

uint64_t PaymentsErrorTemplateProvider.deinit()
{
  uint64_t v0;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_release();
  swift_release();
  return v2;
}

uint64_t PaymentsErrorTemplateProvider.__deallocating_deinit()
{
  PaymentsErrorTemplateProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PaymentsErrorTemplateProviding.continueInAppError(intentType:app:) in conformance PaymentsErrorTemplateProvider<A, B>(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return PaymentsErrorTemplateProvider.continueInAppError(intentType:app:)(a1, a2, a3);
}

uint64_t protocol witness for PaymentsErrorTemplateProviding.errorWithCode(from:) in conformance PaymentsErrorTemplateProvider<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return PaymentsErrorTemplateProvider.errorWithCode(from:)(a1, a2);
}

uint64_t protocol witness for PaymentsErrorTemplateProviding.unsupportedErrorWithCode(from:) in conformance PaymentsErrorTemplateProvider<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:)(a1, a2);
}

uint64_t protocol witness for PaymentsErrorTemplateProviding.errorWithCode(intent:intentResponse:app:) in conformance PaymentsErrorTemplateProvider<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 16) = v4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:)(a1, a2, a3, a4);
}

uint64_t sub_247085100()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for ParameterResolutionRecord() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v0 + 16);
  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ParameterResolutionRecord() - 8) + 80);
  return implicit closure #1 in PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:)(v0 + ((v1 + 48) & ~v1), v3);
}

uint64_t sub_2470851F0()
{
  return swift_deallocObject();
}

uint64_t sub_247085218()
{
  return swift_deallocObject();
}

uint64_t sub_247085240()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24708527C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470852B8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for ParameterResolutionRecord() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247085338()
{
  return swift_deallocObject();
}

uint64_t sub_247085360()
{
  return swift_deallocObject();
}

uint64_t sub_247085388()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470853C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247085400()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for ParameterResolutionRecord() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247085480()
{
  return swift_deallocObject();
}

uint64_t sub_2470854A8()
{
  return swift_deallocObject();
}

uint64_t sub_2470854D0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24708550C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247085548()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for ParameterResolutionRecord() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_2470855C8()
{
  return swift_deallocObject();
}

uint64_t sub_2470855F0()
{
  return swift_deallocObject();
}

uint64_t sub_247085618()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247085654()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247085690()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)()
{
  uint64_t v0;

  return implicit closure #1 in PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)(*(_BYTE *)(v0 + 16));
}

uint64_t sub_2470856C0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2470856FC()
{
  return swift_deallocObject();
}

uint64_t sub_247085724()
{
  return swift_deallocObject();
}

uint64_t sub_24708574C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247085788()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470857C4()
{
  return swift_deallocObject();
}

uint64_t sub_2470857EC()
{
  return swift_deallocObject();
}

uint64_t sub_247085814()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247085850()
{
  swift_release();
  return swift_deallocObject();
}

void *outlined init with copy of SpeakableString?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for SpeakableString();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

void *outlined assign with take of SpeakableString?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(const void *, uint64_t, uint64_t);

  v7 = type metadata accessor for SpeakableString();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a2, 1))
  {
    if (v9(a1, 1, v7))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a2, a1, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
    }
  }
  else if (v9(a1, 1, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a2, v7);
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a2, a1, v7);
  }
  return a2;
}

unint64_t lazy protocol witness table accessor for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode;
  if (!lazy protocol witness table cache variable for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.IntentTypeCATCode, &type metadata for Constants.IntentTypeCATCode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode;
  if (!lazy protocol witness table cache variable for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.IntentTypeCATCode, &type metadata for Constants.IntentTypeCATCode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode);
    return v0;
  }
  return v2;
}

uint64_t sub_247085B10()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247085B4C()
{
  return swift_deallocObject();
}

uint64_t sub_247085B74()
{
  return swift_deallocObject();
}

uint64_t sub_247085B9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247085BD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata completion function for PaymentsErrorTemplateProvider()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t type metadata accessor for PaymentsErrorTemplateProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x249572C38](a1, a2, &nominal type descriptor for PaymentsErrorTemplateProvider);
}

uint64_t associated type witness table accessor for PaymentsErrorTemplateProviding.IntentResponseType : SiriKitPaymentsIntentResponse in PaymentsErrorTemplateProvider<A, B>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 104);
}

uint64_t associated type witness table accessor for PaymentsErrorTemplateProviding.IntentType : SiriKitPaymentsIntent in PaymentsErrorTemplateProvider<A, B>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 96);
}

id static SKIDirectInvocationPayload.from(_:)(char a1)
{
  Constants.DirectInvocationPayloadIdentifiers.rawValue.getter(a1 & 1);
  return SKIDirectInvocationPayload.__allocating_init(identifier:)();
}

SiriPaymentsIntents::DIIdentifier __swiftcall DIIdentifier.init(namespace:id:)(Swift::String a1, Swift::String id)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *object;
  uint64_t countAndFlagsBits;
  SiriPaymentsIntents::DIIdentifier result;

  countAndFlagsBits = a1._countAndFlagsBits;
  object = a1._object;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of DIIdentifier();
  v2 = object;
  v4 = id._object;
  v3 = id._countAndFlagsBits;
  v5 = countAndFlagsBits;
  result.id._object = v4;
  result.id._countAndFlagsBits = v3;
  result.namespace._object = v2;
  result.namespace._countAndFlagsBits = v5;
  return result;
}

uint64_t DIIdentifier.payloadId.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  return String.init(stringInterpolation:)();
}

uint64_t DirectInvocationCodable.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  unint64_t v15;
  void *v16;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  _BYTE **v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  unint64_t v68;
  void (*v69)(unint64_t, char *, uint64_t);
  unint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint32_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  NSObject *v91;
  int v92;
  void (*v93)(char *, uint64_t, uint64_t);
  void (*v94)(char *, char *, uint64_t);
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  unint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  Class isa;
  id v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  unint64_t v142;
  char *v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t (*v157)(uint64_t, uint64_t, uint64_t);
  uint64_t v158;
  _BYTE *v159;
  uint64_t v160;
  uint32_t v161;
  id v162[2];
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;

  v123 = a4;
  v124 = a1;
  v146 = a2;
  v147 = a3;
  v172 = *MEMORY[0x24BDAC8D0];
  v165 = 0;
  v164 = 0;
  v163 = 0;
  v125 = 0;
  v166 = 0;
  v167 = 0;
  v156 = a2;
  v131 = 0;
  v126 = type metadata accessor for Parse.DirectInvocation();
  v127 = *(_QWORD *)(v126 - 8);
  v128 = *(_QWORD *)(v127 + 64);
  v129 = (v128 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v130 = (char *)&v43 - v129;
  v132 = type metadata accessor for Logger();
  v133 = *(_QWORD *)(v132 - 8);
  v134 = (*(_QWORD *)(v133 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v131);
  v135 = (char *)&v43 - v134;
  v136 = type metadata accessor for Optional();
  v137 = (*(_QWORD *)(*(_QWORD *)(v136 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v136);
  v138 = (uint64_t)&v43 - v137;
  v139 = *(_QWORD *)(v5 - 8);
  v140 = (*(_QWORD *)(v139 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v43 - v137);
  v141 = (char *)&v43 - v140;
  v142 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8]((char *)&v43 - v140);
  v143 = (char *)&v43 - v142;
  v165 = (char *)&v43 - v142;
  v144 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v145 = (char *)&v43 - v144;
  v164 = (char *)&v43 - v144;
  v163 = a1;
  v150 = Parse.DirectInvocation.identifier.getter();
  v153 = v9;
  (*(void (**)(void))(v147 + 32))();
  v148 = v10;
  v149 = v11;
  v151 = DIIdentifier.payloadId.getter();
  v152 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v154 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v154 & 1) != 0)
  {
    v171 = 0;
    v122 = (id)objc_opt_self();
    v170 = Parse.DirectInvocation.userData.getter();
    if (v170)
    {
      v155 = v170;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
      _allocateUninitializedArray<A>(_:)();
      v155 = Dictionary.init(dictionaryLiteral:)();
      outlined destroy of [SFCardSection]();
    }
    v116 = v155;
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v117 = 0;
    type metadata accessor for NSJSONWritingOptions();
    v118 = _allocateUninitializedArray<A>(_:)();
    lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
    SetAlgebra<>.init(arrayLiteral:)();
    v162[0] = v171;
    v121 = objc_msgSend(v122, sel_dataWithJSONObject_options_error_, isa, v162[1], v162);
    v119 = v162[0];
    v13 = v162[0];
    v14 = v171;
    v171 = v119;

    swift_unknownObjectRelease();
    if (v121)
    {
      v115 = v121;
      v109 = v121;
      v110 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v111 = v15;

      v112 = v110;
      v113 = v111;
      v114 = v125;
    }
    else
    {
      v48 = 0;
      v49 = 0xF000000000000000;
      v46 = v171;
      v47 = (id)_convertNSErrorToError(_:)();

      swift_willThrow();
      v50 = 0;

      v112 = v48;
      v113 = v49;
      v114 = v50;
    }
    v106 = v114;
    v107 = v113;
    v108 = v112;
    if ((v113 & 0xF000000000000000) == 0xF000000000000000)
    {
      v103 = (uint64_t)v106;
    }
    else
    {
      v104 = v108;
      v105 = v107;
      v16 = v106;
      v99 = v107;
      v98 = v108;
      v166 = v108;
      v167 = v107;
      type metadata accessor for JSONDecoder();
      v100 = JSONDecoder.__allocating_init()();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      v101 = (uint64_t)v16;
      v102 = v16;
      if (v16)
      {
        v44 = v102;
        v45 = 0;
        swift_release();

        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56))(v138, 1, 1, v146);
        v97 = v45;
      }
      else
      {
        swift_release();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v139 + 56))(v138, 0, 1, v146);
        v97 = v101;
      }
      v96 = v97;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v139 + 48))(v138, 1, v146) != 1)
      {
        v93 = *(void (**)(_QWORD, _QWORD, _QWORD))(v139 + 32);
        v93(v143, v138, v146);
        v94 = *(void (**)(_QWORD, _QWORD, _QWORD))(v139 + 16);
        v94(v141, v143, v146);
        v93(v145, v141, v146);
        v95 = *(void (**)(_QWORD, _QWORD))(v139 + 8);
        v95(v143, v146);
        outlined consume of Data._Representation(v98, v99);
        v94(v123, v145, v146);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v139 + 56))(v123, 0, 1, v146);
        (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v124, v126);
        return ((uint64_t (*)(char *, uint64_t))v95)(v145, v146);
      }
      outlined destroy of A?(v138, v146);
      outlined consume of Data._Representation(v98, v99);
      v103 = v96;
    }
    v18 = v135;
    v64 = v103;
    v19 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v18, v19, v132);
    v66 = *(void (**)(_QWORD, _QWORD, _QWORD))(v127 + 16);
    v66(v130, v124, v126);
    v67 = *(unsigned int *)(v127 + 80);
    v65 = (v67 + 16) & ~(unint64_t)v67;
    v79 = 7;
    v74 = swift_allocObject();
    v69 = *(void (**)(_QWORD, _QWORD, _QWORD))(v127 + 32);
    v69(v74 + v65, v130, v126);
    v66(v130, v124, v126);
    v68 = (v67 + 16) & ~(unint64_t)v67;
    v80 = swift_allocObject();
    v69(v80 + v68, v130, v126);
    v91 = Logger.logObject.getter();
    v92 = static os_log_type_t.error.getter();
    v72 = &v160;
    v160 = 22;
    v70 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v71 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v73 = v161;
    v76 = 17;
    v82 = swift_allocObject();
    *(_BYTE *)(v82 + 16) = 34;
    v83 = swift_allocObject();
    v77 = 8;
    *(_BYTE *)(v83 + 16) = 8;
    v78 = 32;
    v20 = swift_allocObject();
    v21 = v74;
    v75 = v20;
    *(_QWORD *)(v20 + 16) = partial apply for implicit closure #2 in DirectInvocationCodable.init(_:);
    *(_QWORD *)(v20 + 24) = v21;
    v22 = swift_allocObject();
    v23 = v75;
    v84 = v22;
    *(_QWORD *)(v22 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v22 + 24) = v23;
    v85 = swift_allocObject();
    *(_BYTE *)(v85 + 16) = 32;
    v86 = swift_allocObject();
    *(_BYTE *)(v86 + 16) = v77;
    v24 = swift_allocObject();
    v25 = v80;
    v81 = v24;
    *(_QWORD *)(v24 + 16) = partial apply for implicit closure #3 in DirectInvocationCodable.init(_:);
    *(_QWORD *)(v24 + 24) = v25;
    v26 = swift_allocObject();
    v27 = v81;
    v88 = v26;
    *(_QWORD *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v26 + 24) = v27;
    v90 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    v87 = _allocateUninitializedArray<A>(_:)();
    v89 = v28;
    swift_retain();
    v29 = v82;
    v30 = v89;
    *v89 = partial apply for closure #1 in OSLogArguments.append(_:);
    v30[1] = v29;
    swift_retain();
    v31 = v83;
    v32 = v89;
    v89[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v32[3] = v31;
    swift_retain();
    v33 = v84;
    v34 = v89;
    v89[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v34[5] = v33;
    swift_retain();
    v35 = v85;
    v36 = v89;
    v89[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v36[7] = v35;
    swift_retain();
    v37 = v86;
    v38 = v89;
    v89[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[9] = v37;
    swift_retain();
    v39 = v88;
    v40 = v89;
    v89[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v40[11] = v39;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v91, (os_log_type_t)v92))
    {
      v41 = v64;
      v56 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v57 = createStorage<A>(capacity:type:)(0);
      v58 = createStorage<A>(capacity:type:)(2);
      v60 = &v159;
      v159 = v56;
      v61 = &v169;
      v169 = v57;
      v62 = &v168;
      v168 = v58;
      v59 = 2;
      serialize(_:at:)(2, &v159);
      serialize(_:at:)(v59, v60);
      v157 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v158 = v82;
      closure #1 in osLogInternal(_:log:type:)(&v157, (uint64_t)v60, (uint64_t)v61, (uint64_t)v62);
      v63 = v41;
      if (v41)
      {
        __break(1u);
      }
      else
      {
        v157 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v158 = v83;
        closure #1 in osLogInternal(_:log:type:)(&v157, (uint64_t)&v159, (uint64_t)&v169, (uint64_t)&v168);
        v54 = 0;
        v42 = v54;
        v157 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v158 = v84;
        closure #1 in osLogInternal(_:log:type:)(&v157, (uint64_t)&v159, (uint64_t)&v169, (uint64_t)&v168);
        v53 = v42;
        v157 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v158 = v85;
        closure #1 in osLogInternal(_:log:type:)(&v157, (uint64_t)&v159, (uint64_t)&v169, (uint64_t)&v168);
        v52 = 0;
        v157 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v158 = v86;
        closure #1 in osLogInternal(_:log:type:)(&v157, (uint64_t)&v159, (uint64_t)&v169, (uint64_t)&v168);
        v51 = 0;
        v157 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v158 = v88;
        closure #1 in osLogInternal(_:log:type:)(&v157, (uint64_t)&v159, (uint64_t)&v169, (uint64_t)&v168);
        _os_log_impl(&dword_24701B000, v91, (os_log_type_t)v92, "JSON Serializer failed to convert %{public}s with userData of %s to typed object", v56, v73);
        destroyStorage<A>(_:count:)(v57, 0, v55);
        destroyStorage<A>(_:count:)(v58, 2, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v56, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v133 + 8))(v135, v132);
  }
  (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v124, v126);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56))(v123, 1, 1, v146);
}

uint64_t implicit closure #2 in DirectInvocationCodable.init(_:)()
{
  return Parse.DirectInvocation.identifier.getter();
}

uint64_t implicit closure #3 in DirectInvocationCodable.init(_:)()
{
  Parse.DirectInvocation.userData.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]?);
  return String.init<A>(describing:)();
}

id DirectInvocationCodable.asPayload.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v7 = a1;
  v8 = a2;
  v10 = 0;
  v11 = a1;
  v5 = *(_QWORD *)(a1 - 8);
  v4 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v4 - v4;
  v10 = v2;
  type metadata accessor for SKIDirectInvocationPayload();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v9, v6, v7);
  return SKIDirectInvocationPayload.init<A>(_:)(v9, v7, v8);
}

id SKIDirectInvocationPayload.init<A>(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v4;
  id v5;
  unint64_t v6;
  id v7;
  void *v8;
  id v10;
  void *v11;
  Class v12;
  id v13;
  void *v14;
  id v15;
  Class isa;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v25;
  unint64_t v26;
  id v27[5];
  id v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v27[3] = a1;
  v18 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  (*(void (**)(void))(a3 + 32))();
  v3 = DIIdentifier.payloadId.getter();
  v19 = (id)MEMORY[0x24957220C](v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = objc_msgSend(v18, sel_initWithIdentifier_, v19);

  v4 = v20;
  v5 = v20;
  v28 = 0;
  v21 = (void *)objc_opt_self();
  type metadata accessor for JSONEncoder();
  JSONEncoder.__allocating_init()();
  v25 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v26 = v6;
  swift_release();
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v25, v26);
  type metadata accessor for NSJSONReadingOptions();
  _allocateUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  SetAlgebra<>.init(arrayLiteral:)();
  v27[0] = 0;
  v17 = objc_msgSend(v21, sel_JSONObjectWithData_options_error_, isa, v27[1], v27);
  v15 = v27[0];
  v7 = v27[0];
  v8 = v28;
  v28 = v15;

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v10 = v28;
    v11 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    memset(v29, 0, sizeof(v29));
    v30 = 0;
  }
  if (v30)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if ((swift_dynamicCast() & 1) != 0)
      v13 = v27[2];
    else
      v13 = 0;
    v14 = v13;
  }
  else
  {
    outlined destroy of FlowActivity?((uint64_t)v29);
    v14 = 0;
  }
  v27[4] = v14;
  if (!v14)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
    _allocateUninitializedArray<A>(_:)();
    Dictionary.init(dictionaryLiteral:)();
    outlined destroy of [SFCardSection]();
  }
  _dictionaryUpCast<A, B, C, D>(_:)();
  v12 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  objc_msgSend(v20, sel_setUserData_, v12);

  (*(void (**)(void *))(*(_QWORD *)(a2 - 8) + 8))(a1);
  return v20;
}

id DirectInvocationCodable.serializeToAceCommand(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7;
  id v8;
  id v9;

  v7 = (id)objc_opt_self();
  v8 = DirectInvocationCodable.asPayload.getter(a2, a3);
  v9 = objc_msgSend(v7, sel_runSiriKitExecutorCommandWithContext_payload_, a1);

  return v9;
}

id DirectInvocationCodable.serializeToStartLocalRequest(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3;
  id v5;
  id v6;
  id v7;

  v7 = DirectInvocationCodable.serializeToAceCommand(context:)(a1, a2, a3);
  v5 = (id)objc_opt_self();
  v3 = v7;
  v6 = objc_msgSend(v5, sel_wrapCommandInStartLocalRequest_, v7);
  swift_unknownObjectRelease();

  return v6;
}

uint64_t DirectInvocationCodable.serializeToBase64(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  uint64_t countAndFlagsBits;

  v4 = DirectInvocationCodable.serializeToAceCommand(context:)(a1, a2, a3);
  countAndFlagsBits = AceObject.serializeToBase64()().value._countAndFlagsBits;

  return countAndFlagsBits;
}

id SKIDirectInvocationPayload.__allocating_init(identifier:)()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc SKIDirectInvocationPayload.init(identifier:)();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of DIIdentifier()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_247087AD8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Parse.DirectInvocation() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in DirectInvocationCodable.init(_:)()
{
  type metadata accessor for Parse.DirectInvocation();
  return implicit closure #2 in DirectInvocationCodable.init(_:)();
}

uint64_t sub_247087B78()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Parse.DirectInvocation() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in DirectInvocationCodable.init(_:)()
{
  type metadata accessor for Parse.DirectInvocation();
  return implicit closure #3 in DirectInvocationCodable.init(_:)();
}

uint64_t Parse.DirectInvocation.is<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;

  Parse.DirectInvocation.identifier.getter();
  (*(void (**)(uint64_t))(a3 + 32))(a2);
  DIIdentifier.payloadId.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

id @nonobjc SKIDirectInvocationPayload.init(identifier:)()
{
  id v1;
  id v2;
  id v3;

  v2 = (id)MEMORY[0x24957220C]();
  v3 = objc_msgSend(v1, sel_initWithIdentifier_);

  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_247087D38()
{
  return swift_deallocObject();
}

uint64_t sub_247087D60()
{
  return swift_deallocObject();
}

uint64_t sub_247087D88()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247087DC4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247087E00()
{
  return swift_deallocObject();
}

uint64_t sub_247087E28()
{
  return swift_deallocObject();
}

uint64_t sub_247087E50()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247087E8C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined destroy of A?(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  return a1;
}

uint64_t destroy for DIIdentifier()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for DIIdentifier(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v6;

  *a1 = *a2;
  v3 = a2[1];
  swift_bridgeObjectRetain();
  a1[1] = v3;
  a1[2] = a2[2];
  v6 = a2[3];
  swift_bridgeObjectRetain();
  result = a1;
  a1[3] = v6;
  return result;
}

_QWORD *assignWithCopy for DIIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v5;

  *a1 = *a2;
  v3 = a2[1];
  swift_bridgeObjectRetain();
  a1[1] = v3;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v5 = a2[3];
  swift_bridgeObjectRetain();
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 16) = result;
  return result;
}

_QWORD *assignWithTake for DIIdentifier(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DIIdentifier(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 > 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    {
      v4 = *(_QWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (*(_QWORD *)(a1 + 8) < 0x100000000uLL)
        v3 = *(_QWORD *)(a1 + 8);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DIIdentifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 8) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for DIIdentifier()
{
  return &type metadata for DIIdentifier;
}

uint64_t SendPaymentNeedsConfirmationFlowStrategy.__allocating_init()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[5];
  _QWORD v29[5];
  _BYTE v30[40];
  uint64_t v31;
  _BYTE v32[40];
  char v33;
  char v34;
  char v35;
  uint64_t v36[5];
  _QWORD v37[6];

  v31 = 0;
  v17 = 0;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v16 = (char *)&v6 - v7;
  v12 = type metadata accessor for Globals();
  v8 = v36;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v36);
  v9 = &v35;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v10 = &v34;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v11 = &v33;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  v25 = v37;
  v37[3] = v12;
  v37[4] = &protocol witness table for Globals;
  v37[0] = v0;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse>);
  v15 = v32;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v32);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v14 = CATWrapper.__allocating_init(options:globals:)();
  v13 = type metadata accessor for INSendPaymentIntent();
  v1 = type metadata accessor for INSendPaymentIntentResponse();
  v2 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v1);
  v24 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v15, v14, v2);
  v31 = v24;
  v23 = v30;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v30);
  type metadata accessor for SendPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v18 = CATWrapper.__allocating_init(options:globals:)();
  NSJSONWritingOptions.init(rawValue:)(v18);
  v19 = v29;
  v29[3] = &type metadata for CommonLabelsProvider;
  v29[4] = &protocol witness table for CommonLabelsProvider;
  v3 = type metadata accessor for SiriKitContactResolver();
  v20 = v28;
  v28[3] = v3;
  v28[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v28);
  SiriKitContactResolver.init()();
  swift_retain();
  v21 = &v27;
  v27 = v24;
  v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  v26 = RequestPaymentNeedsConfirmationFlowStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v23, v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v21, v22, v4);
  swift_retain();
  v37[5] = v26;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  swift_release();
  return v26;
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.__allocating_init()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[5];
  _QWORD v29[5];
  _BYTE v30[40];
  uint64_t v31;
  _BYTE v32[40];
  char v33;
  char v34;
  char v35;
  uint64_t v36[5];
  _QWORD v37[6];

  v31 = 0;
  v17 = 0;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v16 = (char *)&v6 - v7;
  v12 = type metadata accessor for Globals();
  v8 = v36;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v36);
  v9 = &v35;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v10 = &v34;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v11 = &v33;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  v25 = v37;
  v37[3] = v12;
  v37[4] = &protocol witness table for Globals;
  v37[0] = v0;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  v15 = v32;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v32);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v14 = CATWrapper.__allocating_init(options:globals:)();
  v13 = type metadata accessor for INRequestPaymentIntent();
  v1 = type metadata accessor for INRequestPaymentIntentResponse();
  v2 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v1);
  v24 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v15, v14, v2);
  v31 = v24;
  v23 = v30;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v30);
  type metadata accessor for RequestPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v18 = CATWrapper.__allocating_init(options:globals:)();
  NSJSONWritingOptions.init(rawValue:)(v18);
  v19 = v29;
  v29[3] = &type metadata for CommonLabelsProvider;
  v29[4] = &protocol witness table for CommonLabelsProvider;
  v3 = type metadata accessor for SiriKitContactResolver();
  v20 = v28;
  v28[3] = v3;
  v28[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v28);
  SiriKitContactResolver.init()();
  swift_retain();
  v21 = &v27;
  v27 = v24;
  v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  v26 = RequestPaymentNeedsConfirmationFlowStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v23, v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v21, v22, v4);
  swift_retain();
  v37[5] = v26;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  swift_release();
  return v26;
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.authenticationPolicy.getter()
{
  return static UnlockDevicePolicy.requiringDeviceUnlock.getter();
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.actionForInput(_:resolveRecord:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_retain();
  BaseStrategy.actionForInput(_:)(a1, a2);
  return swift_release();
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.parseConfirmationResponse(input:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[26] = v3;
  v4[25] = a3;
  v4[24] = a2;
  v4[23] = a1;
  v4[12] = v4;
  v4[13] = 0;
  v4[14] = 0;
  v4[15] = 0;
  v4[17] = 0;
  v5 = *v3;
  v4[27] = *v3;
  v4[28] = *(_QWORD *)(v5 + 216);
  v6 = type metadata accessor for ParameterResolutionRecord();
  v4[29] = v6;
  v4[30] = *(_QWORD *)(v6 - 8);
  v4[31] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v4[32] = swift_task_alloc();
  v7 = type metadata accessor for Parse();
  v4[33] = v7;
  v4[34] = *(_QWORD *)(v7 - 8);
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  v8 = type metadata accessor for Logger();
  v4[37] = v8;
  v4[38] = *(_QWORD *)(v8 - 8);
  v4[39] = swift_task_alloc();
  v4[13] = a2;
  v4[14] = a3;
  v4[15] = v3;
  return swift_task_switch();
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.parseConfirmationResponse(input:resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  id v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint32_t v35;
  os_log_type_t v36;
  NSObject *v37;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 312);
  v33 = *(_QWORD *)(v0 + 304);
  v34 = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 96) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v1, v2, v34);
  v37 = Logger.logObject.getter();
  v36 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 128) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v35 = *(_DWORD *)(v0 + 320);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v38 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v37, v36))
  {
    v28 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v29 = createStorage<A>(capacity:type:)(0);
    v30 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v32 + 152) = v28;
    *(_QWORD *)(v32 + 160) = v29;
    *(_QWORD *)(v32 + 168) = v30;
    serialize(_:at:)(0, (_BYTE **)(v32 + 152));
    serialize(_:at:)(0, (_BYTE **)(v32 + 152));
    *(_QWORD *)(v32 + 176) = v38;
    v31 = (_QWORD *)swift_task_alloc();
    v31[2] = v32 + 152;
    v31[3] = v32 + 160;
    v31[4] = v32 + 168;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v37, v36, "#PaymentsNeedsConfirmationFlowStrategy parseConfirmationResponse", v28, v35);
    destroyStorage<A>(_:count:)(v29, 0, v27);
    destroyStorage<A>(_:count:)(v30, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v28, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v32 + 312);
  v15 = *(_QWORD *)(v32 + 304);
  v17 = *(_QWORD *)(v32 + 296);
  v23 = *(_QWORD *)(v32 + 288);
  v22 = *(_QWORD *)(v32 + 272);
  v24 = *(_QWORD *)(v32 + 264);
  v18 = *(_QWORD *)(v32 + 216);
  v19 = *(_QWORD *)(v32 + 208);

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  Input.parse.getter();
  v21 = (id)ParameterResolutionRecord.intent.getter();
  v20 = *(_QWORD *)(v18 + 240);
  static AceService.currentAsync.getter();
  swift_retain();
  outlined init with copy of GlobalsProviding(v19 + 64, v32 + 56);
  swift_release();
  v26 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(v21, v20, v32 + 16, v32 + 56);
  __swift_destroy_boxed_opaque_existential_0(v32 + 56);
  __swift_destroy_boxed_opaque_existential_0(v32 + 16);

  v25 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  v25(v23, v24);
  if (v26)
  {
    v14 = swift_dynamicCastUnknownClass();
    if (v14)
    {
      v13 = (void *)v14;
    }
    else
    {

      v13 = 0;
    }
    v12 = v13;
  }
  else
  {
    v12 = 0;
  }
  v6 = *(_QWORD *)(v32 + 280);
  v7 = *(_QWORD *)(v32 + 264);
  v5 = *(_QWORD *)(v32 + 256);
  v11 = *(_QWORD *)(v32 + 248);
  v8 = *(_QWORD *)(v32 + 240);
  v10 = *(_QWORD *)(v32 + 232);
  v9 = *(_QWORD *)(v32 + 200);
  *(_QWORD *)(v32 + 136) = v12;
  Input.parse.getter();
  Parse.confirmationResponse.getter(v5);
  v25(v6, v7);
  v3 = v12;
  *(_QWORD *)(v32 + 144) = v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v9, v10);
  if (!*(_QWORD *)(v32 + 144))
  {
    ParameterResolutionRecord.intent.getter();
    outlined destroy of SFRichText?((id *)(v32 + 144));
  }
  (*(void (**)(void))(*(_QWORD *)(v32 + 240) + 8))();
  NeedsConfirmationAnswer.init(answeredValue:updatedIntent:)();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v32 + 96) + 8))();
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[11] = a1;
  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  v5 = type metadata accessor for Logger();
  v4[12] = v5;
  v4[13] = *(_QWORD *)(v5 - 8);
  v4[14] = swift_task_alloc();
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return swift_task_switch();
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *buf;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint32_t v15;
  os_log_type_t v16;
  NSObject *v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 112);
  v13 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 16) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v1, v2, v14);
  v17 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 48) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v15 = *(_DWORD *)(v0 + 120);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v18 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v17, v16))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v9 = createStorage<A>(capacity:type:)(0);
    v10 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v12 + 56) = buf;
    *(_QWORD *)(v12 + 64) = v9;
    *(_QWORD *)(v12 + 72) = v10;
    serialize(_:at:)(0, (_BYTE **)(v12 + 56));
    serialize(_:at:)(0, (_BYTE **)(v12 + 56));
    *(_QWORD *)(v12 + 80) = v18;
    v11 = (_QWORD *)swift_task_alloc();
    v11[2] = v12 + 56;
    v11[3] = v12 + 64;
    v11[4] = v12 + 72;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v17, v16, "#PaymentsNeedsConfirmationFlowStrategy base makePromptForConfirmation, this should not be called", buf, v15);
    destroyStorage<A>(_:count:)(v9, 0, v7);
    destroyStorage<A>(_:count:)(v10, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v12 + 112);
  v4 = *(_QWORD *)(v12 + 104);
  v5 = *(_QWORD *)(v12 + 96);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
  type metadata accessor for EmptyOutput();
  static EmptyOutput.instance.getter();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v12 + 16) + 8))();
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[12] = a1;
  v5[2] = v5;
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = 0;
  v5[6] = 0;
  v6 = type metadata accessor for Logger();
  v5[13] = v6;
  v5[14] = *(_QWORD *)(v6 - 8);
  v5[15] = swift_task_alloc();
  v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  v5[6] = v4;
  return swift_task_switch();
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *buf;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint32_t v15;
  os_log_type_t v16;
  NSObject *v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 112);
  v14 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 16) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v1, v2, v14);
  v17 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 56) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v15 = *(_DWORD *)(v0 + 128);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v18 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v17, v16))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v9 = createStorage<A>(capacity:type:)(0);
    v10 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v12 + 64) = buf;
    *(_QWORD *)(v12 + 72) = v9;
    *(_QWORD *)(v12 + 80) = v10;
    serialize(_:at:)(0, (_BYTE **)(v12 + 64));
    serialize(_:at:)(0, (_BYTE **)(v12 + 64));
    *(_QWORD *)(v12 + 88) = v18;
    v11 = (_QWORD *)swift_task_alloc();
    v11[2] = v12 + 64;
    v11[3] = v12 + 72;
    v11[4] = v12 + 80;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v17, v16, "#PaymentsNeedsConfirmationFlowStrategy base makeIntentCancelledByParameterRejectionResponse, this should not be called", buf, v15);
    destroyStorage<A>(_:count:)(v9, 0, v7);
    destroyStorage<A>(_:count:)(v10, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v12 + 120);
  v4 = *(_QWORD *)(v12 + 112);
  v5 = *(_QWORD *)(v12 + 104);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
  type metadata accessor for EmptyOutput();
  static EmptyOutput.instance.getter();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v12 + 16) + 8))();
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_allocObject();
  return PaymentsNeedsConfirmationFlowStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[40];
  _BYTE v31[40];
  _BYTE v32[40];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v28 = a1;
  v27 = a2;
  v26 = a3;
  v25 = a4;
  v22 = a5;
  v24 = a6;
  v20 = a7;
  v41 = 0;
  v37 = 0;
  v36 = 0;
  v35 = 0;
  v34 = 0;
  v33 = 0;
  v42 = a6;
  v23 = *(_QWORD *)(a6 - 8);
  v16 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](a1);
  v19 = (uint64_t)&v15 - v16;
  v40 = v9[27];
  v39 = v9[28];
  v38 = v9[29];
  v37 = v8;
  v36 = v10;
  v35 = v11;
  v34 = v12;
  v33 = v13;
  v41 = v7;
  v21 = v32;
  outlined init with copy of GlobalsProviding(v8, (uint64_t)v32);
  swift_retain();
  v17 = v31;
  outlined init with copy of GlobalsProviding(v26, (uint64_t)v31);
  v18 = v30;
  outlined init with copy of GlobalsProviding(v25, (uint64_t)v30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v19, v22, v24);
  v29 = BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v21, v27, (uint64_t)v17, (uint64_t)v18, v19, v24, v20);
  swift_retain();
  v41 = v29;
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  __swift_destroy_boxed_opaque_existential_0(v25);
  __swift_destroy_boxed_opaque_existential_0(v26);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v28);
  swift_release();
  return v29;
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.deinit()
{
  return BaseStrategy.deinit();
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.__deallocating_deinit()
{
  PaymentsNeedsConfirmationFlowStrategy.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for NeedsConfirmationWithCancellationFlowStrategyAsync.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v5 + 16) = v5;
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(**(_QWORD **)v4 + 288)
                                                                   + **(int **)(**(_QWORD **)v4 + 288));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v6;
  *v6 = *(_QWORD *)(v5 + 16);
  v6[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return v11(a1, a2, a3, a4);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.authenticationPolicy.getter in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>()
{
  return PaymentsNeedsConfirmationFlowStrategy.authenticationPolicy.getter();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PaymentsNeedsConfirmationFlowStrategy.actionForInput(_:resolveRecord:)(a1, a2);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.parseConfirmationResponse(input:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return PaymentsNeedsConfirmationFlowStrategy.parseConfirmationResponse(input:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v11;

  v11 = v3;
  v3[7] = v3;
  v4 = (_QWORD *)swift_task_alloc();
  v11[8] = v4;
  v5 = a3[28];
  v6 = a3[29];
  v7 = a3[30];
  v8 = a3[31];
  v11[2] = a3[27];
  v11[3] = v5;
  v11[4] = v6;
  v11[5] = v7;
  v11[6] = v8;
  type metadata accessor for PaymentsNeedsConfirmationFlowStrategy(0, (uint64_t)(v11 + 2));
  *v4 = v11[7];
  v4[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:)();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(unsigned int a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 56) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v3 + 56) + 8))(a1);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = v4;
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(**(_QWORD **)v3 + 280)
                                                         + **(int **)(**(_QWORD **)v3 + 280));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return v9(a1, a2, a3);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v12;

  v12 = v4;
  v4[7] = v4;
  v5 = (_QWORD *)swift_task_alloc();
  v12[8] = v5;
  v6 = a4[28];
  v7 = a4[29];
  v8 = a4[30];
  v9 = a4[31];
  v12[2] = a4[27];
  v12[3] = v6;
  v12[4] = v7;
  v12[5] = v8;
  v12[6] = v9;
  type metadata accessor for PaymentsNeedsConfirmationFlowStrategy(0, (uint64_t)(v12 + 2));
  *v5 = v12[7];
  v5[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:)();
}

_QWORD *protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 56) = *v0;
  v3 = (_QWORD *)(v1 + 56);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v12;

  v12 = v4;
  v4[7] = v4;
  v5 = (_QWORD *)swift_task_alloc();
  v12[8] = v5;
  v6 = a4[28];
  v7 = a4[29];
  v8 = a4[30];
  v9 = a4[31];
  v12[2] = a4[27];
  v12[3] = v6;
  v12[4] = v7;
  v12[5] = v8;
  v12[6] = v9;
  type metadata accessor for PaymentsNeedsConfirmationFlowStrategy(0, (uint64_t)(v12 + 2));
  *v5 = v12[7];
  v5[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return NeedsConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:resolveRecord:)();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v11;

  v11 = v3;
  v3[7] = v3;
  v4 = (_QWORD *)swift_task_alloc();
  v11[8] = v4;
  v5 = a3[28];
  v6 = a3[29];
  v7 = a3[30];
  v8 = a3[31];
  v11[2] = a3[27];
  v11[3] = v5;
  v11[4] = v6;
  v11[5] = v7;
  v11[6] = v8;
  type metadata accessor for PaymentsNeedsConfirmationFlowStrategy(0, (uint64_t)(v11 + 2));
  *v4 = v11[7];
  v4[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return NeedsConfirmationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v11;

  v11 = v3;
  v3[7] = v3;
  v4 = (_QWORD *)swift_task_alloc();
  v11[8] = v4;
  v5 = a3[28];
  v6 = a3[29];
  v7 = a3[30];
  v8 = a3[31];
  v11[2] = a3[27];
  v11[3] = v5;
  v11[4] = v6;
  v11[5] = v7;
  v11[6] = v8;
  type metadata accessor for PaymentsNeedsConfirmationFlowStrategy(0, (uint64_t)(v11 + 2));
  *v4 = v11[7];
  v4[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return NeedsConfirmationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse(app:intent:parameter:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v13;

  v13 = v5;
  v5[7] = v5;
  v6 = (_QWORD *)swift_task_alloc();
  v13[8] = v6;
  v7 = a5[28];
  v8 = a5[29];
  v9 = a5[30];
  v10 = a5[31];
  v13[2] = a5[27];
  v13[3] = v7;
  v13[4] = v8;
  v13[5] = v9;
  v13[6] = v10;
  type metadata accessor for PaymentsNeedsConfirmationFlowStrategy(0, (uint64_t)(v13 + 2));
  *v6 = v13[7];
  v6[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return NeedsConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse(app:intent:parameter:)();
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v13;

  v13 = v5;
  v5[7] = v5;
  v6 = (_QWORD *)swift_task_alloc();
  v13[8] = v6;
  v7 = a5[28];
  v8 = a5[29];
  v9 = a5[30];
  v10 = a5[31];
  v13[2] = a5[27];
  v13[3] = v7;
  v13[4] = v8;
  v13[5] = v9;
  v13[6] = v10;
  type metadata accessor for PaymentsNeedsConfirmationFlowStrategy(0, (uint64_t)(v13 + 2));
  *v6 = v13[7];
  v6[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)();
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v14;

  v14 = v6;
  v6[7] = v6;
  v7 = (_QWORD *)swift_task_alloc();
  v14[8] = v7;
  v8 = a6[28];
  v9 = a6[29];
  v10 = a6[30];
  v11 = a6[31];
  v14[2] = a6[27];
  v14[3] = v8;
  v14[4] = v9;
  v14[5] = v10;
  v14[6] = v11;
  type metadata accessor for PaymentsNeedsConfirmationFlowStrategy(0, (uint64_t)(v14 + 2));
  *v7 = v14[7];
  v7[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)();
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 + 1048) = v3;
  *(_QWORD *)(v4 + 1040) = a3;
  *(_QWORD *)(v4 + 1032) = a2;
  *(_QWORD *)(v4 + 1024) = a1;
  *(_QWORD *)(v4 + 896) = v4;
  *(_QWORD *)(v4 + 904) = 0;
  *(_QWORD *)(v4 + 912) = 0;
  *(_QWORD *)(v4 + 920) = 0;
  *(_QWORD *)(v4 + 688) = 0;
  *(_QWORD *)(v4 + 696) = 0;
  *(_BYTE *)(v4 + 1280) = 0;
  *(_QWORD *)(v4 + 936) = 0;
  *(_QWORD *)(v4 + 784) = 0;
  *(_QWORD *)(v4 + 792) = 0;
  *(_QWORD *)(v4 + 944) = 0;
  *(_QWORD *)(v4 + 960) = 0;
  *(_QWORD *)(v4 + 968) = 0;
  *(_QWORD *)(v4 + 984) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(_QWORD *)(v4 + 1056) = swift_task_alloc();
  v5 = type metadata accessor for NLContextUpdate();
  *(_QWORD *)(v4 + 1064) = v5;
  *(_QWORD *)(v4 + 1072) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 1080) = swift_task_alloc();
  v6 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v4 + 1088) = v6;
  *(_QWORD *)(v4 + 1096) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 1104) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v4 + 1112) = swift_task_alloc();
  *(_QWORD *)(v4 + 1120) = swift_task_alloc();
  *(_QWORD *)(v4 + 1128) = swift_task_alloc();
  type metadata accessor for Locale();
  *(_QWORD *)(v4 + 1136) = swift_task_alloc();
  v7 = type metadata accessor for ParameterIdentifier();
  *(_QWORD *)(v4 + 1144) = v7;
  *(_QWORD *)(v4 + 1152) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 1160) = swift_task_alloc();
  v8 = type metadata accessor for Logger();
  *(_QWORD *)(v4 + 1168) = v8;
  *(_QWORD *)(v4 + 1176) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 1184) = swift_task_alloc();
  *(_QWORD *)(v4 + 904) = a2;
  *(_QWORD *)(v4 + 912) = a3;
  *(_QWORD *)(v4 + 920) = v3;
  return swift_task_switch();
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  SiriPaymentsIntents::RequestPaymentSlots_optional v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  Swift::String rawValue;
  SiriPaymentsIntents::RequestPaymentSlots value;
  uint64_t v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint32_t v112;
  os_log_type_t v113;
  NSObject *v114;
  uint64_t v115;

  v1 = *(_QWORD *)(v0 + 1184);
  v110 = *(_QWORD *)(v0 + 1176);
  v111 = *(_QWORD *)(v0 + 1168);
  *(_QWORD *)(v0 + 896) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 16))(v1, v2, v111);
  v114 = Logger.logObject.getter();
  v113 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 928) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v112 = *(_DWORD *)(v0 + 1284);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v115 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v114, v113))
  {
    v105 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v104 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v106 = createStorage<A>(capacity:type:)(0);
    v107 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v109 + 992) = v105;
    *(_QWORD *)(v109 + 1000) = v106;
    *(_QWORD *)(v109 + 1008) = v107;
    serialize(_:at:)(0, (_BYTE **)(v109 + 992));
    serialize(_:at:)(0, (_BYTE **)(v109 + 992));
    *(_QWORD *)(v109 + 1016) = v115;
    v108 = (_QWORD *)swift_task_alloc();
    v108[2] = v109 + 992;
    v108[3] = v109 + 1000;
    v108[4] = v109 + 1008;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v114, v113, "#RequestPaymentNeedsConfirmationFlowStrategy makePromptForConfirmation", v105, v112);
    destroyStorage<A>(_:count:)(v106, 0, v104);
    destroyStorage<A>(_:count:)(v107, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v105, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v97 = *(_QWORD *)(v109 + 1184);
  v96 = *(_QWORD *)(v109 + 1176);
  v98 = *(_QWORD *)(v109 + 1168);
  v100 = *(_QWORD *)(v109 + 1160);
  v99 = *(_QWORD *)(v109 + 1152);
  v101 = *(_QWORD *)(v109 + 1144);

  (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v97, v98);
  *(_QWORD *)(v109 + 1192) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);
  ParameterResolutionRecord.parameter.getter();
  rawValue._countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  *(_QWORD *)(v109 + 1200) = v3;
  *(_QWORD *)(v109 + 688) = rawValue._countAndFlagsBits;
  *(_QWORD *)(v109 + 696) = v3;
  (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v100, v101);
  swift_bridgeObjectRetain();
  v4.value = RequestPaymentSlots.init(rawValue:)(rawValue).value;
  value = v4.value;
  if (v4.value == SiriPaymentsIntents_RequestPaymentSlots_unknownDefault)
  {
    swift_bridgeObjectRetain();
    *(_QWORD *)(v109 + 704) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v109 + 712) = v47;
    v48 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v48);
    swift_bridgeObjectRelease();
    type metadata accessor for INRequestPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v49 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v49);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v53 = String.init(stringInterpolation:)();
    v52 = v50;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(Swift::String *)v51 = rawValue;
    *(_QWORD *)(v51 + 16) = v53;
    *(_QWORD *)(v51 + 24) = v52;
    *(_QWORD *)(v51 + 32) = 0;
    *(_QWORD *)(v51 + 40) = 0;
    *(_BYTE *)(v51 + 48) = 8;
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  else
  {
    *(SiriPaymentsIntents::RequestPaymentSlots_optional *)(v109 + 1280) = v4;
    type metadata accessor for PaymentsDialogConcept.Builder();
    v95 = PaymentsDialogConcept.Builder.__allocating_init()();
    *(_QWORD *)(v109 + 1208) = v95;
    *(_QWORD *)(v109 + 936) = v95;
    if (value)
    {
      if (value == SiriPaymentsIntents_RequestPaymentSlots_currencyAmount)
      {
        outlined init with copy of Any(*(_QWORD *)(v109 + 1032), v109 + 560);
        type metadata accessor for INCurrencyAmount();
        if ((swift_dynamicCast() & 1) != 0)
          v82 = *(void **)(v109 + 952);
        else
          v82 = 0;
        if (v82)
        {
          *(_QWORD *)(v109 + 960) = v82;
          type metadata accessor for DialogCurrency.Builder();
          DialogCurrency.Builder.__allocating_init()();
          v81 = objc_msgSend(v82, sel_currencyCode);
          if (v81)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            v79 = v17;

            v80 = v79;
          }
          else
          {
            v80 = 0;
          }
          if (v80)
          {
            v78 = *(_QWORD *)(v109 + 1128);
            String.toSpeakableString.getter();
            swift_bridgeObjectRelease();
            v18 = type metadata accessor for SpeakableString();
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v78, 0, 1);
          }
          else
          {
            v74 = *(_QWORD *)(v109 + 1128);
            v19 = type metadata accessor for SpeakableString();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v74, 1);
          }
          v76 = *(_QWORD *)(v109 + 1128);
          dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)();
          outlined destroy of SpeakableString?(v76);
          swift_release();
          v77 = objc_msgSend(v82, sel_amount);
          if (v77)
          {
            objc_msgSend(v77, sel_doubleValue);

          }
          dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
          swift_release();
          v75 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
          swift_release();
          *(_QWORD *)(v109 + 968) = v75;
          swift_retain();
          PaymentsDialogConcept.Builder.withAmount(_:)(v75);
          swift_release();
          swift_release();
          swift_release();

          goto LABEL_34;
        }
        v67 = *(_QWORD *)(v109 + 1032);
        v68 = RequestPaymentSlots.rawValue.getter(value);
        v69 = v20;
        *(_QWORD *)(v109 + 800) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v109 + 808) = v21;
        v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v22);
        swift_bridgeObjectRelease();
        outlined init with copy of Any(v67, v109 + 592);
        *(_QWORD *)(v109 + 816) = String.init<A>(describing:)();
        *(_QWORD *)(v109 + 824) = v23;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String.UTF8View();
        v24 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        v70 = String.init(stringInterpolation:)();
        v71 = v25;
        *(_QWORD *)(v109 + 832) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v109 + 840) = v26;
        v27 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v27);
        swift_bridgeObjectRelease();
        type metadata accessor for INRequestPaymentIntent();
        DefaultStringInterpolation.appendInterpolation(_:)();
        v28 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        v73 = String.init(stringInterpolation:)();
        v72 = v29;
        lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
        swift_allocError();
        *(_QWORD *)v30 = v68;
        *(_QWORD *)(v30 + 8) = v69;
        *(_QWORD *)(v30 + 16) = v70;
        *(_QWORD *)(v30 + 24) = v71;
        *(_QWORD *)(v30 + 32) = v73;
        *(_QWORD *)(v30 + 40) = v72;
        *(_BYTE *)(v30 + 48) = 9;
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined init with copy of Any(*(_QWORD *)(v109 + 1032), v109 + 496);
        v31 = swift_dynamicCast();
        if ((v31 & 1) != 0)
        {
          v65 = *(_QWORD *)(v109 + 720);
          v66 = *(_QWORD *)(v109 + 728);
        }
        else
        {
          v65 = 0;
          v66 = 0;
        }
        if (v66)
        {
          v64 = *(const void **)(v109 + 1120);
          *(_QWORD *)(v109 + 784) = v65;
          *(_QWORD *)(v109 + 792) = v66;
          String.toSpeakableString.getter();
          v32 = type metadata accessor for SpeakableString();
          (*(void (**)(const void *, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v64, 0, 1);
          PaymentsDialogConcept.Builder.withMemo(_:)(v64);
          outlined destroy of SpeakableString?((uint64_t)v64);
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_34;
        }
        v57 = *(_QWORD *)(v109 + 1032);
        v58 = RequestPaymentSlots.rawValue.getter(value);
        v59 = v33;
        *(_QWORD *)(v109 + 736) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v109 + 744) = v34;
        v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v35);
        swift_bridgeObjectRelease();
        outlined init with copy of Any(v57, v109 + 528);
        *(_QWORD *)(v109 + 752) = String.init<A>(describing:)();
        *(_QWORD *)(v109 + 760) = v36;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String.UTF8View();
        v37 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v37);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        v60 = String.init(stringInterpolation:)();
        v61 = v38;
        *(_QWORD *)(v109 + 768) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v109 + 776) = v39;
        v40 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v40);
        swift_bridgeObjectRelease();
        type metadata accessor for INRequestPaymentIntent();
        DefaultStringInterpolation.appendInterpolation(_:)();
        v41 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        v63 = String.init(stringInterpolation:)();
        v62 = v42;
        lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
        swift_allocError();
        *(_QWORD *)v43 = v58;
        *(_QWORD *)(v43 + 8) = v59;
        *(_QWORD *)(v43 + 16) = v60;
        *(_QWORD *)(v43 + 24) = v61;
        *(_QWORD *)(v43 + 32) = v63;
        *(_QWORD *)(v43 + 40) = v62;
        *(_BYTE *)(v43 + 48) = 9;
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      outlined init with copy of Any(*(_QWORD *)(v109 + 1032), v109 + 624);
      type metadata accessor for INPerson();
      if ((swift_dynamicCast() & 1) != 0)
        v94 = *(void **)(v109 + 976);
      else
        v94 = 0;
      if (v94)
      {
        v90 = *(_QWORD *)(v109 + 1048);
        *(_QWORD *)(v109 + 984) = v94;
        type metadata accessor for DialogPerson();
        v5 = v94;
        swift_retain();
        outlined init with copy of GlobalsProviding(v90 + 104, v109 + 416);
        swift_release();
        v92 = *(_QWORD *)(v109 + 440);
        v91 = *(_QWORD *)(v109 + 448);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v109 + 416), v92);
        (*(void (**)(uint64_t))(v91 + 16))(v92);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v109 + 456), *(_QWORD *)(v109 + 480));
        dispatch thunk of DeviceState.siriLocale.getter();
        default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
        v93 = DialogPerson.__allocating_init(person:locale:useConversationalName:)();
        __swift_destroy_boxed_opaque_existential_0(v109 + 456);
        __swift_destroy_boxed_opaque_existential_0(v109 + 416);
        PaymentsDialogConcept.Builder.withPayerName(_:)(v93);
        swift_release();
        swift_release();

LABEL_34:
        v55 = *(_QWORD *)(v109 + 1112);
        v54 = *(_QWORD *)(v109 + 1048);
        swift_retain();
        *(_QWORD *)(v109 + 1216) = *(_QWORD *)(v54 + 16);
        swift_retain();
        swift_release();
        RequestPaymentSlots.rawValue.getter(value);
        String.toSpeakableString.getter();
        swift_bridgeObjectRelease();
        v44 = type metadata accessor for SpeakableString();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v55, 0, 1);
        v56 = PaymentsDialogConcept.Builder.build()();
        *(_QWORD *)(v109 + 1224) = v56;
        v45 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v109 + 1232) = v45;
        *v45 = *(_QWORD *)(v109 + 896);
        v45[1] = RequestPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
        return RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:)(*(_QWORD *)(v109 + 1104), *(_QWORD *)(v109 + 1112), v56);
      }
      v83 = *(_QWORD *)(v109 + 1032);
      v84 = RequestPaymentSlots.rawValue.getter(0);
      v85 = v6;
      *(_QWORD *)(v109 + 848) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v109 + 856) = v7;
      v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v8);
      swift_bridgeObjectRelease();
      outlined init with copy of Any(v83, v109 + 656);
      *(_QWORD *)(v109 + 864) = String.init<A>(describing:)();
      *(_QWORD *)(v109 + 872) = v9;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String.UTF8View();
      v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      v86 = String.init(stringInterpolation:)();
      v87 = v11;
      *(_QWORD *)(v109 + 880) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v109 + 888) = v12;
      v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v13);
      swift_bridgeObjectRelease();
      type metadata accessor for INRequestPaymentIntent();
      DefaultStringInterpolation.appendInterpolation(_:)();
      v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      v89 = String.init(stringInterpolation:)();
      v88 = v15;
      lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
      swift_allocError();
      *(_QWORD *)v16 = v84;
      *(_QWORD *)(v16 + 8) = v85;
      *(_QWORD *)(v16 + 16) = v86;
      *(_QWORD *)(v16 + 24) = v87;
      *(_QWORD *)(v16 + 32) = v89;
      *(_QWORD *)(v16 + 40) = v88;
      *(_BYTE *)(v16 + 48) = 9;
      swift_willThrow();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v109 + 896) + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v5 = *v1 + 16;
  *(_QWORD *)(v2 + 896) = *v1;
  *(_QWORD *)(v2 + 1240) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 1096);
    swift_release();
    outlined destroy of SpeakableString?(v4);
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v5 = v0[131];
  v0[112] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 24, (uint64_t)(v0 + 17));
  swift_release();
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, (uint64_t)(v0 + 22));
  swift_release();
  v4 = v0[25];
  v3 = v0[26];
  __swift_project_boxed_opaque_existential_1(v0 + 22, v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_retain();
  v6 = *(_QWORD *)(v5 + 16);
  swift_retain();
  swift_release();
  v10[3] = type metadata accessor for RequestPaymentCATs();
  v10[4] = &protocol witness table for RequestPaymentCATs;
  v10[0] = v6;
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)(v0 + 17), (uint64_t)&v9, (uint64_t)v10, v0 + 2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 22));
  v8 = ParameterResolutionRecord.app.getter();
  v0[156] = v8;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 1256) = v1;
  *v1 = *(_QWORD *)(v7 + 896);
  v1[1] = RequestPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  return ConfirmationViewBuilder.makeTCCAcceptanceView(app:)(v8);
}

{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v13 = (id)v0[158];
  v16 = v0[138];
  v14 = v0[137];
  v15 = v0[136];
  v17 = v0[135];
  v11 = v0[134];
  v12 = v0[133];
  v18 = v0[132];
  v6 = v0[131];
  v10 = (uint64_t *)v0[128];
  v0[112] = v0;
  v0[118] = v13;
  static PaymentsContextProvider.confirmationContextUpdate(isSend:)(0, v17);
  swift_retain();
  outlined init with copy of GlobalsProviding(v6 + 104, (uint64_t)(v0 + 27));
  swift_release();
  v5 = v0[30];
  v4 = v0[31];
  __swift_project_boxed_opaque_existential_1(v0 + 27, v5);
  (*(void (**)(uint64_t))(v4 + 16))(v5);
  swift_retain();
  outlined init with copy of GlobalsProviding(v6 + 104, (uint64_t)(v0 + 37));
  swift_release();
  v8 = v0[40];
  v7 = v0[41];
  __swift_project_boxed_opaque_existential_1(v0 + 37, v8);
  (*(void (**)(uint64_t))(v7 + 16))(v8);
  __swift_project_boxed_opaque_existential_1(v0 + 42, v0[45]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  type metadata accessor for SAAceView();
  _allocateUninitializedArray<A>(_:)();
  v9 = v1;
  v2 = v13;
  *v9 = v13;
  _finalizeUninitializedArray<A>(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v18, v17, v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v12);
  v0[47] = 0;
  v0[48] = 0;
  v0[49] = 0;
  v0[50] = 0;
  v0[51] = 0;
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v10[3] = type metadata accessor for AceOutput();
  v10[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v10);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 47));
  outlined destroy of NLContextUpdate?(v18);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 42));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 37));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v17, v12);

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[112] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 1112);
  *(_QWORD *)(v0 + 896) = v0;
  swift_release();
  outlined destroy of SpeakableString?(v2);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 896) + 8))();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v0[138];
  v2 = v0[137];
  v3 = v0[136];
  v0[112] = v0;
  swift_release();
  outlined destroy of ConfirmationViewBuilder((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[112] + 8))();
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;

  v3 = (_QWORD *)*v2;
  v5 = *v2 + 16;
  v3[112] = *v2;
  v3[158] = a1;
  v3[159] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    outlined destroy of ConfirmationViewBuilder(v5);
  }
  return swift_task_switch();
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[38] = v4;
  v5[37] = a1;
  v5[27] = v5;
  v5[28] = 0;
  v5[29] = 0;
  v5[30] = 0;
  v5[31] = 0;
  v6 = type metadata accessor for TemplatingResult();
  v5[39] = v6;
  v5[40] = *(_QWORD *)(v6 - 8);
  v5[41] = swift_task_alloc();
  v7 = type metadata accessor for Logger();
  v5[42] = v7;
  v5[43] = *(_QWORD *)(v7 - 8);
  v5[44] = swift_task_alloc();
  v5[28] = a2;
  v5[29] = a3;
  v5[30] = a4;
  v5[31] = v4;
  return swift_task_switch();
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint32_t v17;
  os_log_type_t v18;
  NSObject *v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 352);
  v15 = *(_QWORD *)(v0 + 344);
  v16 = *(_QWORD *)(v0 + 336);
  *(_QWORD *)(v0 + 216) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v2, v16);
  v19 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 256) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v17 = *(_DWORD *)(v0 + 384);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v20 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v19, v18))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v11 = createStorage<A>(capacity:type:)(0);
    v12 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v14 + 264) = buf;
    *(_QWORD *)(v14 + 272) = v11;
    *(_QWORD *)(v14 + 280) = v12;
    serialize(_:at:)(0, (_BYTE **)(v14 + 264));
    serialize(_:at:)(0, (_BYTE **)(v14 + 264));
    *(_QWORD *)(v14 + 288) = v20;
    v13 = (_QWORD *)swift_task_alloc();
    v13[2] = v14 + 264;
    v13[3] = v14 + 272;
    v13[4] = v14 + 280;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v19, v18, "#RequestPaymentNeedsConfirmationFlowStrategy makeIntentCancelledByParameterRejectionResponse", buf, v17);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v14 + 352);
  v5 = *(_QWORD *)(v14 + 344);
  v7 = *(_QWORD *)(v14 + 336);
  v8 = *(_QWORD *)(v14 + 304);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  swift_retain();
  *(_QWORD *)(v14 + 360) = *(_QWORD *)(v8 + 16);
  swift_retain();
  swift_release();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v14 + 368) = v3;
  *v3 = *(_QWORD *)(v14 + 216);
  v3[1] = RequestPaymentNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:);
  return RequestPaymentCATs.promptCancelled()(*(_QWORD *)(v14 + 328));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 216) = *v1;
  *(_QWORD *)(v2 + 376) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = v0[41];
  v8 = v0[40];
  v9 = v0[39];
  v4 = v0[38];
  v7 = (uint64_t *)v0[37];
  v0[27] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v4 + 104, (uint64_t)(v0 + 2));
  swift_release();
  v3 = v0[5];
  v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v3);
  (*(void (**)(uint64_t))(v2 + 16))(v3);
  swift_retain();
  outlined init with copy of GlobalsProviding(v4 + 104, (uint64_t)(v0 + 12));
  swift_release();
  v6 = v0[15];
  v5 = v0[16];
  __swift_project_boxed_opaque_existential_1(v0 + 12, v6);
  (*(void (**)(uint64_t))(v5 + 16))(v6);
  __swift_project_boxed_opaque_existential_1(v0 + 17, v0[20]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  v0[22] = 0;
  v0[23] = 0;
  v0[24] = 0;
  v0[25] = 0;
  v0[26] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  v7[3] = type metadata accessor for AceOutput();
  v7[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v7);
  static AceOutputHelper.makeCancellationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:canUseServerTTS:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 22));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 17));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[27] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 216) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 216) + 8))();
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_allocObject();
  return RequestPaymentNeedsConfirmationFlowStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[40];
  _BYTE v28[40];
  _BYTE v29[40];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v25 = a1;
  v24 = a2;
  v23 = a3;
  v22 = a4;
  v19 = a5;
  v21 = a6;
  v17 = a7;
  v35 = 0;
  v34 = 0;
  v33 = 0;
  v32 = 0;
  v31 = 0;
  v30 = 0;
  v36 = a6;
  v20 = *(_QWORD *)(a6 - 8);
  v13 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = (uint64_t)&v13 - v13;
  v34 = MEMORY[0x24BDAC7A8](a1);
  v33 = v8;
  v32 = v9;
  v31 = v10;
  v30 = v11;
  v35 = v7;
  v18 = v29;
  outlined init with copy of GlobalsProviding(v34, (uint64_t)v29);
  swift_retain();
  v14 = v28;
  outlined init with copy of GlobalsProviding(v23, (uint64_t)v28);
  v15 = v27;
  outlined init with copy of GlobalsProviding(v22, (uint64_t)v27);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v16, v19, v21);
  v26 = PaymentsNeedsConfirmationFlowStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v18, v24, (uint64_t)v14, (uint64_t)v15, v16, v21, v17);
  swift_retain();
  v35 = v26;
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  __swift_destroy_boxed_opaque_existential_0(v22);
  __swift_destroy_boxed_opaque_existential_0(v23);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v25);
  swift_release();
  return v26;
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.deinit()
{
  return PaymentsNeedsConfirmationFlowStrategy.deinit();
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.__deallocating_deinit()
{
  RequestPaymentNeedsConfirmationFlowStrategy.deinit();
  return swift_deallocClassInstance();
}

uint64_t SendPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 + 1048) = v3;
  *(_QWORD *)(v4 + 1040) = a3;
  *(_QWORD *)(v4 + 1032) = a2;
  *(_QWORD *)(v4 + 1024) = a1;
  *(_QWORD *)(v4 + 896) = v4;
  *(_QWORD *)(v4 + 904) = 0;
  *(_QWORD *)(v4 + 912) = 0;
  *(_QWORD *)(v4 + 920) = 0;
  *(_QWORD *)(v4 + 688) = 0;
  *(_QWORD *)(v4 + 696) = 0;
  *(_BYTE *)(v4 + 1280) = 0;
  *(_QWORD *)(v4 + 936) = 0;
  *(_QWORD *)(v4 + 784) = 0;
  *(_QWORD *)(v4 + 792) = 0;
  *(_QWORD *)(v4 + 944) = 0;
  *(_QWORD *)(v4 + 960) = 0;
  *(_QWORD *)(v4 + 968) = 0;
  *(_QWORD *)(v4 + 984) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(_QWORD *)(v4 + 1056) = swift_task_alloc();
  v5 = type metadata accessor for NLContextUpdate();
  *(_QWORD *)(v4 + 1064) = v5;
  *(_QWORD *)(v4 + 1072) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 1080) = swift_task_alloc();
  v6 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v4 + 1088) = v6;
  *(_QWORD *)(v4 + 1096) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 1104) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v4 + 1112) = swift_task_alloc();
  *(_QWORD *)(v4 + 1120) = swift_task_alloc();
  *(_QWORD *)(v4 + 1128) = swift_task_alloc();
  type metadata accessor for Locale();
  *(_QWORD *)(v4 + 1136) = swift_task_alloc();
  v7 = type metadata accessor for ParameterIdentifier();
  *(_QWORD *)(v4 + 1144) = v7;
  *(_QWORD *)(v4 + 1152) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 1160) = swift_task_alloc();
  v8 = type metadata accessor for Logger();
  *(_QWORD *)(v4 + 1168) = v8;
  *(_QWORD *)(v4 + 1176) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 1184) = swift_task_alloc();
  *(_QWORD *)(v4 + 904) = a2;
  *(_QWORD *)(v4 + 912) = a3;
  *(_QWORD *)(v4 + 920) = v3;
  return swift_task_switch();
}

uint64_t SendPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  SiriPaymentsIntents::SendPaymentSlots_optional v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  Swift::String rawValue;
  SiriPaymentsIntents::SendPaymentSlots value;
  uint64_t v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint32_t v112;
  os_log_type_t v113;
  NSObject *v114;
  uint64_t v115;

  v1 = *(_QWORD *)(v0 + 1184);
  v110 = *(_QWORD *)(v0 + 1176);
  v111 = *(_QWORD *)(v0 + 1168);
  *(_QWORD *)(v0 + 896) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 16))(v1, v2, v111);
  v114 = Logger.logObject.getter();
  v113 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 928) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v112 = *(_DWORD *)(v0 + 1284);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v115 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v114, v113))
  {
    v105 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v104 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v106 = createStorage<A>(capacity:type:)(0);
    v107 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v109 + 992) = v105;
    *(_QWORD *)(v109 + 1000) = v106;
    *(_QWORD *)(v109 + 1008) = v107;
    serialize(_:at:)(0, (_BYTE **)(v109 + 992));
    serialize(_:at:)(0, (_BYTE **)(v109 + 992));
    *(_QWORD *)(v109 + 1016) = v115;
    v108 = (_QWORD *)swift_task_alloc();
    v108[2] = v109 + 992;
    v108[3] = v109 + 1000;
    v108[4] = v109 + 1008;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v114, v113, "#SendPaymentNeedsConfirmationFlowStrategy makePromptForConfirmation", v105, v112);
    destroyStorage<A>(_:count:)(v106, 0, v104);
    destroyStorage<A>(_:count:)(v107, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v105, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v97 = *(_QWORD *)(v109 + 1184);
  v96 = *(_QWORD *)(v109 + 1176);
  v98 = *(_QWORD *)(v109 + 1168);
  v100 = *(_QWORD *)(v109 + 1160);
  v99 = *(_QWORD *)(v109 + 1152);
  v101 = *(_QWORD *)(v109 + 1144);

  (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v97, v98);
  *(_QWORD *)(v109 + 1192) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);
  ParameterResolutionRecord.parameter.getter();
  rawValue._countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  *(_QWORD *)(v109 + 1200) = v3;
  *(_QWORD *)(v109 + 688) = rawValue._countAndFlagsBits;
  *(_QWORD *)(v109 + 696) = v3;
  (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v100, v101);
  swift_bridgeObjectRetain();
  v4.value = SendPaymentSlots.init(rawValue:)(rawValue).value;
  value = v4.value;
  if (v4.value == SiriPaymentsIntents_SendPaymentSlots_unknownDefault)
  {
    swift_bridgeObjectRetain();
    *(_QWORD *)(v109 + 704) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v109 + 712) = v47;
    v48 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v48);
    swift_bridgeObjectRelease();
    type metadata accessor for INSendPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v49 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v49);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v53 = String.init(stringInterpolation:)();
    v52 = v50;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(Swift::String *)v51 = rawValue;
    *(_QWORD *)(v51 + 16) = v53;
    *(_QWORD *)(v51 + 24) = v52;
    *(_QWORD *)(v51 + 32) = 0;
    *(_QWORD *)(v51 + 40) = 0;
    *(_BYTE *)(v51 + 48) = 8;
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  else
  {
    *(SiriPaymentsIntents::SendPaymentSlots_optional *)(v109 + 1280) = v4;
    type metadata accessor for PaymentsDialogConcept.Builder();
    v95 = PaymentsDialogConcept.Builder.__allocating_init()();
    *(_QWORD *)(v109 + 1208) = v95;
    *(_QWORD *)(v109 + 936) = v95;
    if (value)
    {
      if (value == SiriPaymentsIntents_SendPaymentSlots_currencyAmount)
      {
        outlined init with copy of Any(*(_QWORD *)(v109 + 1032), v109 + 560);
        type metadata accessor for INCurrencyAmount();
        if ((swift_dynamicCast() & 1) != 0)
          v82 = *(void **)(v109 + 952);
        else
          v82 = 0;
        if (v82)
        {
          *(_QWORD *)(v109 + 960) = v82;
          type metadata accessor for DialogCurrency.Builder();
          DialogCurrency.Builder.__allocating_init()();
          v81 = objc_msgSend(v82, sel_currencyCode);
          if (v81)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            v79 = v17;

            v80 = v79;
          }
          else
          {
            v80 = 0;
          }
          if (v80)
          {
            v78 = *(_QWORD *)(v109 + 1128);
            String.toSpeakableString.getter();
            swift_bridgeObjectRelease();
            v18 = type metadata accessor for SpeakableString();
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v78, 0, 1);
          }
          else
          {
            v74 = *(_QWORD *)(v109 + 1128);
            v19 = type metadata accessor for SpeakableString();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v74, 1);
          }
          v76 = *(_QWORD *)(v109 + 1128);
          dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)();
          outlined destroy of SpeakableString?(v76);
          swift_release();
          v77 = objc_msgSend(v82, sel_amount);
          if (v77)
          {
            objc_msgSend(v77, sel_doubleValue);

          }
          dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
          swift_release();
          v75 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
          swift_release();
          *(_QWORD *)(v109 + 968) = v75;
          swift_retain();
          PaymentsDialogConcept.Builder.withAmount(_:)(v75);
          swift_release();
          swift_release();
          swift_release();

          goto LABEL_34;
        }
        v67 = *(_QWORD *)(v109 + 1032);
        v68 = SendPaymentSlots.rawValue.getter(value);
        v69 = v20;
        *(_QWORD *)(v109 + 800) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v109 + 808) = v21;
        v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v22);
        swift_bridgeObjectRelease();
        outlined init with copy of Any(v67, v109 + 592);
        *(_QWORD *)(v109 + 816) = String.init<A>(describing:)();
        *(_QWORD *)(v109 + 824) = v23;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String.UTF8View();
        v24 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        v70 = String.init(stringInterpolation:)();
        v71 = v25;
        *(_QWORD *)(v109 + 832) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v109 + 840) = v26;
        v27 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v27);
        swift_bridgeObjectRelease();
        type metadata accessor for INSendPaymentIntent();
        DefaultStringInterpolation.appendInterpolation(_:)();
        v28 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        v73 = String.init(stringInterpolation:)();
        v72 = v29;
        lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
        swift_allocError();
        *(_QWORD *)v30 = v68;
        *(_QWORD *)(v30 + 8) = v69;
        *(_QWORD *)(v30 + 16) = v70;
        *(_QWORD *)(v30 + 24) = v71;
        *(_QWORD *)(v30 + 32) = v73;
        *(_QWORD *)(v30 + 40) = v72;
        *(_BYTE *)(v30 + 48) = 9;
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined init with copy of Any(*(_QWORD *)(v109 + 1032), v109 + 496);
        v31 = swift_dynamicCast();
        if ((v31 & 1) != 0)
        {
          v65 = *(_QWORD *)(v109 + 720);
          v66 = *(_QWORD *)(v109 + 728);
        }
        else
        {
          v65 = 0;
          v66 = 0;
        }
        if (v66)
        {
          v64 = *(const void **)(v109 + 1120);
          *(_QWORD *)(v109 + 784) = v65;
          *(_QWORD *)(v109 + 792) = v66;
          String.toSpeakableString.getter();
          v32 = type metadata accessor for SpeakableString();
          (*(void (**)(const void *, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v64, 0, 1);
          PaymentsDialogConcept.Builder.withMemo(_:)(v64);
          outlined destroy of SpeakableString?((uint64_t)v64);
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_34;
        }
        v57 = *(_QWORD *)(v109 + 1032);
        v58 = SendPaymentSlots.rawValue.getter(value);
        v59 = v33;
        *(_QWORD *)(v109 + 736) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v109 + 744) = v34;
        v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v35);
        swift_bridgeObjectRelease();
        outlined init with copy of Any(v57, v109 + 528);
        *(_QWORD *)(v109 + 752) = String.init<A>(describing:)();
        *(_QWORD *)(v109 + 760) = v36;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String.UTF8View();
        v37 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v37);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        v60 = String.init(stringInterpolation:)();
        v61 = v38;
        *(_QWORD *)(v109 + 768) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v109 + 776) = v39;
        v40 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v40);
        swift_bridgeObjectRelease();
        type metadata accessor for INSendPaymentIntent();
        DefaultStringInterpolation.appendInterpolation(_:)();
        v41 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        v63 = String.init(stringInterpolation:)();
        v62 = v42;
        lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
        swift_allocError();
        *(_QWORD *)v43 = v58;
        *(_QWORD *)(v43 + 8) = v59;
        *(_QWORD *)(v43 + 16) = v60;
        *(_QWORD *)(v43 + 24) = v61;
        *(_QWORD *)(v43 + 32) = v63;
        *(_QWORD *)(v43 + 40) = v62;
        *(_BYTE *)(v43 + 48) = 9;
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      outlined init with copy of Any(*(_QWORD *)(v109 + 1032), v109 + 624);
      type metadata accessor for INPerson();
      if ((swift_dynamicCast() & 1) != 0)
        v94 = *(void **)(v109 + 976);
      else
        v94 = 0;
      if (v94)
      {
        v90 = *(_QWORD *)(v109 + 1048);
        *(_QWORD *)(v109 + 984) = v94;
        type metadata accessor for DialogPerson();
        v5 = v94;
        swift_retain();
        outlined init with copy of GlobalsProviding(v90 + 104, v109 + 416);
        swift_release();
        v92 = *(_QWORD *)(v109 + 440);
        v91 = *(_QWORD *)(v109 + 448);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v109 + 416), v92);
        (*(void (**)(uint64_t))(v91 + 16))(v92);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v109 + 456), *(_QWORD *)(v109 + 480));
        dispatch thunk of DeviceState.siriLocale.getter();
        default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
        v93 = DialogPerson.__allocating_init(person:locale:useConversationalName:)();
        __swift_destroy_boxed_opaque_existential_0(v109 + 456);
        __swift_destroy_boxed_opaque_existential_0(v109 + 416);
        PaymentsDialogConcept.Builder.withPayeeName(_:)(v93);
        swift_release();
        swift_release();

LABEL_34:
        v55 = *(_QWORD *)(v109 + 1112);
        v54 = *(_QWORD *)(v109 + 1048);
        swift_retain();
        *(_QWORD *)(v109 + 1216) = *(_QWORD *)(v54 + 16);
        swift_retain();
        swift_release();
        SendPaymentSlots.rawValue.getter(value);
        String.toSpeakableString.getter();
        swift_bridgeObjectRelease();
        v44 = type metadata accessor for SpeakableString();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v55, 0, 1);
        v56 = PaymentsDialogConcept.Builder.build()();
        *(_QWORD *)(v109 + 1224) = v56;
        v45 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v109 + 1232) = v45;
        *v45 = *(_QWORD *)(v109 + 896);
        v45[1] = SendPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
        return SendPaymentCATs.confirmSlotValue(slot:paymentsConcept:)(*(_QWORD *)(v109 + 1104), *(_QWORD *)(v109 + 1112), v56);
      }
      v83 = *(_QWORD *)(v109 + 1032);
      v84 = SendPaymentSlots.rawValue.getter(0);
      v85 = v6;
      *(_QWORD *)(v109 + 848) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v109 + 856) = v7;
      v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v8);
      swift_bridgeObjectRelease();
      outlined init with copy of Any(v83, v109 + 656);
      *(_QWORD *)(v109 + 864) = String.init<A>(describing:)();
      *(_QWORD *)(v109 + 872) = v9;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String.UTF8View();
      v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      v86 = String.init(stringInterpolation:)();
      v87 = v11;
      *(_QWORD *)(v109 + 880) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v109 + 888) = v12;
      v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v13);
      swift_bridgeObjectRelease();
      type metadata accessor for INSendPaymentIntent();
      DefaultStringInterpolation.appendInterpolation(_:)();
      v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      v89 = String.init(stringInterpolation:)();
      v88 = v15;
      lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
      swift_allocError();
      *(_QWORD *)v16 = v84;
      *(_QWORD *)(v16 + 8) = v85;
      *(_QWORD *)(v16 + 16) = v86;
      *(_QWORD *)(v16 + 24) = v87;
      *(_QWORD *)(v16 + 32) = v89;
      *(_QWORD *)(v16 + 40) = v88;
      *(_BYTE *)(v16 + 48) = 9;
      swift_willThrow();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v109 + 896) + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v5 = *v1 + 16;
  *(_QWORD *)(v2 + 896) = *v1;
  *(_QWORD *)(v2 + 1240) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 1096);
    swift_release();
    outlined destroy of SpeakableString?(v4);
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v5 = v0[131];
  v0[112] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 24, (uint64_t)(v0 + 17));
  swift_release();
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, (uint64_t)(v0 + 22));
  swift_release();
  v4 = v0[25];
  v3 = v0[26];
  __swift_project_boxed_opaque_existential_1(v0 + 22, v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_retain();
  v6 = *(_QWORD *)(v5 + 16);
  swift_retain();
  swift_release();
  v10[3] = type metadata accessor for SendPaymentCATs();
  v10[4] = &protocol witness table for SendPaymentCATs;
  v10[0] = v6;
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)(v0 + 17), (uint64_t)&v9, (uint64_t)v10, v0 + 2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 22));
  v8 = ParameterResolutionRecord.app.getter();
  v0[156] = v8;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 1256) = v1;
  *v1 = *(_QWORD *)(v7 + 896);
  v1[1] = SendPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  return ConfirmationViewBuilder.makeTCCAcceptanceView(app:)(v8);
}

{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v13 = (id)v0[158];
  v16 = v0[138];
  v14 = v0[137];
  v15 = v0[136];
  v17 = v0[135];
  v11 = v0[134];
  v12 = v0[133];
  v18 = v0[132];
  v6 = v0[131];
  v10 = (uint64_t *)v0[128];
  v0[112] = v0;
  v0[118] = v13;
  static PaymentsContextProvider.confirmationContextUpdate(isSend:)(1u, v17);
  swift_retain();
  outlined init with copy of GlobalsProviding(v6 + 104, (uint64_t)(v0 + 27));
  swift_release();
  v5 = v0[30];
  v4 = v0[31];
  __swift_project_boxed_opaque_existential_1(v0 + 27, v5);
  (*(void (**)(uint64_t))(v4 + 16))(v5);
  swift_retain();
  outlined init with copy of GlobalsProviding(v6 + 104, (uint64_t)(v0 + 37));
  swift_release();
  v8 = v0[40];
  v7 = v0[41];
  __swift_project_boxed_opaque_existential_1(v0 + 37, v8);
  (*(void (**)(uint64_t))(v7 + 16))(v8);
  __swift_project_boxed_opaque_existential_1(v0 + 42, v0[45]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  type metadata accessor for SAAceView();
  _allocateUninitializedArray<A>(_:)();
  v9 = v1;
  v2 = v13;
  *v9 = v13;
  _finalizeUninitializedArray<A>(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v18, v17, v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v12);
  v0[47] = 0;
  v0[48] = 0;
  v0[49] = 0;
  v0[50] = 0;
  v0[51] = 0;
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v10[3] = type metadata accessor for AceOutput();
  v10[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v10);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 47));
  outlined destroy of NLContextUpdate?(v18);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 42));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 37));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v17, v12);

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[112] + 8))();
}

uint64_t SendPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;

  v3 = (_QWORD *)*v2;
  v5 = *v2 + 16;
  v3[112] = *v2;
  v3[158] = a1;
  v3[159] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    outlined destroy of ConfirmationViewBuilder(v5);
  }
  return swift_task_switch();
}

uint64_t SendPaymentNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[38] = v4;
  v5[37] = a1;
  v5[27] = v5;
  v5[28] = 0;
  v5[29] = 0;
  v5[30] = 0;
  v5[31] = 0;
  v6 = type metadata accessor for TemplatingResult();
  v5[39] = v6;
  v5[40] = *(_QWORD *)(v6 - 8);
  v5[41] = swift_task_alloc();
  v7 = type metadata accessor for Logger();
  v5[42] = v7;
  v5[43] = *(_QWORD *)(v7 - 8);
  v5[44] = swift_task_alloc();
  v5[28] = a2;
  v5[29] = a3;
  v5[30] = a4;
  v5[31] = v4;
  return swift_task_switch();
}

uint64_t SendPaymentNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint32_t v17;
  os_log_type_t v18;
  NSObject *v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 352);
  v15 = *(_QWORD *)(v0 + 344);
  v16 = *(_QWORD *)(v0 + 336);
  *(_QWORD *)(v0 + 216) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v2, v16);
  v19 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 256) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v17 = *(_DWORD *)(v0 + 384);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v20 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v19, v18))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v11 = createStorage<A>(capacity:type:)(0);
    v12 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v14 + 264) = buf;
    *(_QWORD *)(v14 + 272) = v11;
    *(_QWORD *)(v14 + 280) = v12;
    serialize(_:at:)(0, (_BYTE **)(v14 + 264));
    serialize(_:at:)(0, (_BYTE **)(v14 + 264));
    *(_QWORD *)(v14 + 288) = v20;
    v13 = (_QWORD *)swift_task_alloc();
    v13[2] = v14 + 264;
    v13[3] = v14 + 272;
    v13[4] = v14 + 280;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v19, v18, "#SendPaymentNeedsConfirmationFlowStrategy makeIntentCancelledByParameterRejectionResponse", buf, v17);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v14 + 352);
  v5 = *(_QWORD *)(v14 + 344);
  v7 = *(_QWORD *)(v14 + 336);
  v8 = *(_QWORD *)(v14 + 304);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  swift_retain();
  *(_QWORD *)(v14 + 360) = *(_QWORD *)(v8 + 16);
  swift_retain();
  swift_release();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v14 + 368) = v3;
  *v3 = *(_QWORD *)(v14 + 216);
  v3[1] = RequestPaymentNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:);
  return SendPaymentCATs.promptCancelled()(*(_QWORD *)(v14 + 328));
}

unint64_t lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>;
  if (!lazy protocol witness table cache variable for type PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse>);
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsErrorTemplateProvider<A, B>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>;
  if (!lazy protocol witness table cache variable for type PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsErrorTemplateProvider<A, B>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>);
    return v1;
  }
  return v3;
}

uint64_t type metadata accessor for PaymentsNeedsConfirmationFlowStrategy(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x249572C38](a1, a2, &nominal type descriptor for PaymentsNeedsConfirmationFlowStrategy);
}

unint64_t type metadata accessor for INCurrencyAmount()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for INCurrencyAmount;
  if (!lazy cache variable for type metadata for INCurrencyAmount)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INCurrencyAmount);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for INPerson()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for INPerson;
  if (!lazy cache variable for type metadata for INPerson)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INPerson);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t type metadata instantiation function for PaymentsNeedsConfirmationFlowStrategy()
{
  return swift_allocateGenericClassMetadata();
}

uint64_t type metadata completion function for PaymentsNeedsConfirmationFlowStrategy()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t type metadata accessor for RequestPaymentNeedsConfirmationFlowStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for RequestPaymentNeedsConfirmationFlowStrategy;
  if (!type metadata singleton initialization cache for RequestPaymentNeedsConfirmationFlowStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for RequestPaymentNeedsConfirmationFlowStrategy()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t type metadata accessor for SendPaymentNeedsConfirmationFlowStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for SendPaymentNeedsConfirmationFlowStrategy;
  if (!type metadata singleton initialization cache for SendPaymentNeedsConfirmationFlowStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t base witness table accessor for ParameterResolutionHandlingAsync in PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1)
{
  return MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsNeedsConfirmationFlowStrategy<A, B, C>, a1);
}

uint64_t base witness table accessor for NeedsConfirmationFlowStrategyAsync in PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1)
{
  return MEMORY[0x249572C98](&protocol conformance descriptor for PaymentsNeedsConfirmationFlowStrategy<A, B, C>, a1);
}

uint64_t RequestPaymentCATs.confirmButtonLabel(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#ConfirmButtonLabel", 0x21uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.confirmButtonLabel()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t RequestPaymentCATs.confirmButtonLabel()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#ConfirmButtonLabel", 0x21uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#ConfirmButtonLabel", 0x21uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:completion:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String *v8;
  Swift::String v9;
  const void *v10;
  char *v11;
  Swift::String *v12;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v14;
  uint64_t v15;
  Swift::String *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String *v20;
  Swift::String *v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String *v32;
  const void *v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v33 = a1;
  v25 = a2;
  v26 = a3;
  v27 = a4;
  v42 = 0;
  v41 = 0;
  v39 = 0;
  v40 = 0;
  v38 = 0;
  v28 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v35 = (char *)v22 - v28;
  v42 = MEMORY[0x24BDAC7A8](v33);
  v41 = v5;
  v39 = v6;
  v40 = v7;
  v38 = v4;
  v34 = 1;
  v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#ConfirmSlotValue", 0x1FuLL, 1);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v31 = _allocateUninitializedArray<A>(_:)();
  v32 = v8;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v34 & 1);
  v10 = v33;
  v11 = v35;
  *v32 = v9;
  outlined init with copy of SpeakableString?(v10, v11);
  v36 = type metadata accessor for SpeakableString();
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v37 + 48))(v35, v34) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v35);
    v21 = v32;
    v32[1]._countAndFlagsBits = 0;
    v21[1]._object = 0;
    v21[2]._countAndFlagsBits = 0;
    v21[2]._object = 0;
  }
  else
  {
    v12 = v32;
    v32[2]._object = (void *)v36;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 32))(boxed_opaque_existential_1, v35, v36);
  }
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  v32[3] = v14;
  swift_retain();
  if (v25)
  {
    v24 = v25;
    v23 = v25;
    v15 = type metadata accessor for PaymentsDialogConcept();
    v16 = v32;
    v17 = v23;
    v32[5]._object = (void *)v15;
    v16[4]._countAndFlagsBits = v17;
  }
  else
  {
    v20 = v32;
    v32[4]._countAndFlagsBits = 0;
    v20[4]._object = 0;
    v20[5]._countAndFlagsBits = 0;
    v20[5]._object = 0;
  }
  v18 = v31;
  _finalizeUninitializedArray<A>(_:)();
  v22[0] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v22[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[9] = v3;
  v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return swift_task_switch();
}

uint64_t RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  Swift::String *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v14 = (void *)v0[10];
  v13 = (const void *)v0[7];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#ConfirmSlotValue", 0x1FuLL, 1);
  v0[11] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v12 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v13, v14);
  v15 = type metadata accessor for SpeakableString();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v16 + 48))(v14, 1) == 1)
  {
    outlined destroy of SpeakableString?(v11[10]);
    v12[1]._countAndFlagsBits = 0;
    v12[1]._object = 0;
    v12[2]._countAndFlagsBits = 0;
    v12[2]._object = 0;
  }
  else
  {
    v10 = v11[10];
    v12[2]._object = (void *)v15;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v10, v15);
  }
  v9 = v11[8];
  v12[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (v9)
  {
    v8 = v11[8];
    v12[5]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v12[4]._countAndFlagsBits = v8;
  }
  else
  {
    v12[4]._countAndFlagsBits = 0;
    v12[4]._object = 0;
    v12[5]._countAndFlagsBits = 0;
    v12[5]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v11[12] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v11[13] = v4;
  *v4 = v11[2];
  v4[1] = RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:);
  return v7(v11[6], v1._countAndFlagsBits, v1._object, v6);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

_QWORD *RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v4 = (_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v4 + 8))(v4);
}

uint64_t RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  Swift::String *v5;
  Swift::String v6;
  const void *v7;
  char *v8;
  Swift::String *v9;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v11;
  uint64_t v12;
  Swift::String *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String *v17;
  Swift::String *v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String *v28;
  const void *v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v22 = a3;
  v29 = a1;
  v23 = a2;
  v36 = 0;
  v35 = 0;
  v34 = 0;
  v24 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v31 = (char *)v19 - v24;
  v36 = MEMORY[0x24BDAC7A8](v29);
  v35 = v4;
  v34 = v3;
  v30 = 1;
  v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#ConfirmSlotValue", 0x1FuLL, 1);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v27 = _allocateUninitializedArray<A>(_:)();
  v28 = v5;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v30 & 1);
  v7 = v29;
  v8 = v31;
  *v28 = v6;
  outlined init with copy of SpeakableString?(v7, v8);
  v32 = type metadata accessor for SpeakableString();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v33 + 48))(v31, v30) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v31);
    v18 = v28;
    v28[1]._countAndFlagsBits = 0;
    v18[1]._object = 0;
    v18[2]._countAndFlagsBits = 0;
    v18[2]._object = 0;
  }
  else
  {
    v9 = v28;
    v28[2]._object = (void *)v32;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v9[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 32))(boxed_opaque_existential_1, v31, v32);
  }
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  v28[3] = v11;
  swift_retain();
  if (v23)
  {
    v21 = v23;
    v20 = v23;
    v12 = type metadata accessor for PaymentsDialogConcept();
    v13 = v28;
    v14 = v20;
    v28[5]._object = (void *)v12;
    v13[4]._countAndFlagsBits = v14;
  }
  else
  {
    v17 = v28;
    v28[4]._countAndFlagsBits = 0;
    v17[4]._object = 0;
    v17[5]._countAndFlagsBits = 0;
    v17[5]._object = 0;
  }
  v15 = v27;
  _finalizeUninitializedArray<A>(_:)();
  v19[1] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v19[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.confirmSnippetHeader(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#ConfirmSnippetHeader", 0x23uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.confirmSnippetHeader()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t RequestPaymentCATs.confirmSnippetHeader()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#ConfirmSnippetHeader", 0x23uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#ConfirmSnippetHeader", 0x23uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.disambiguateSlotValue(slot:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String *v6;
  Swift::String v7;
  const void *v8;
  char *v9;
  Swift::String *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  Swift::String *v14;
  _QWORD v15[5];
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String *v20;
  const void *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = a1;
  v15[3] = a2;
  v15[4] = a3;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v16 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)v15 - v16;
  v29 = MEMORY[0x24BDAC7A8](v21);
  v27 = v4;
  v28 = v5;
  v26 = v3;
  v22 = 1;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#DisambiguateSlotValue", 0x24uLL, 1);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v19 = _allocateUninitializedArray<A>(_:)();
  v20 = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v22 & 1);
  v8 = v21;
  v9 = v23;
  *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    v14 = v20;
    v20[1]._countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[0] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.disambiguateSlotValue(slot:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t RequestPaymentCATs.disambiguateSlotValue(slot:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *p_countAndFlagsBits;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = (void *)v0[8];
  v11 = (const void *)v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#DisambiguateSlotValue", 0x24uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_countAndFlagsBits = &v2->_countAndFlagsBits;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  v13 = type metadata accessor for SpeakableString();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v14 + 48))(v12, 1) == 1)
  {
    outlined destroy of SpeakableString?(v9[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    v8 = v9[8];
    p_countAndFlagsBits[5] = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v8, v13);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[10] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v9[11] = v4;
  *v4 = v9[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  return v7(v9[5], v1._countAndFlagsBits, v1._object, v6);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

_QWORD *RequestPaymentCATs.disambiguateSlotValue(slot:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v4 = (_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v4 + 8))(v4);
}

uint64_t RequestPaymentCATs.disambiguateSlotValue(slot:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  Swift::String *v3;
  Swift::String v4;
  const void *v5;
  char *v6;
  Swift::String *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  Swift::String *v11;
  _QWORD v12[4];
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String *v17;
  const void *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12[3] = a2;
  v18 = a1;
  v24 = 0;
  v23 = 0;
  v13 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = (char *)v12 - v13;
  v24 = MEMORY[0x24BDAC7A8](v18);
  v23 = v2;
  v19 = 1;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#DisambiguateSlotValue", 0x24uLL, 1);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v16 = _allocateUninitializedArray<A>(_:)();
  v17 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v19 & 1);
  v5 = v18;
  v6 = v20;
  *v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  v21 = type metadata accessor for SpeakableString();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    v11 = v17;
    v17[1]._countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[1] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.handledSnippetHeader(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#HandledSnippetHeader", 0x23uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.handledSnippetHeader()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t RequestPaymentCATs.handledSnippetHeader()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#HandledSnippetHeader", 0x23uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#HandledSnippetHeader", 0x23uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:completion:)(uint64_t a1)
{
  Swift::String *v1;
  Swift::String *v3;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#IntentConfirmationPrompt", 0x27uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v3 = v1;
  *v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v3[1]._countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  Swift::String *v9;
  uint64_t v10;

  v10 = v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#IntentConfirmationPrompt", 0x27uLL, 1);
  v0[8] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v9 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (v10)
  {
    v7 = v8[6];
    v9[2]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v9[1]._countAndFlagsBits = v7;
  }
  else
  {
    v9[1]._countAndFlagsBits = 0;
    v9[1]._object = 0;
    v9[2]._countAndFlagsBits = 0;
    v9[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v8[9] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v3 = (_QWORD *)swift_task_alloc();
  v8[10] = v3;
  *v3 = v8[2];
  v3[1] = RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:);
  return v6(v8[5], v1._countAndFlagsBits, v1._object, v5);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

_QWORD *RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v4 = (_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v4 + 8))(v4);
}

uint64_t RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:)(uint64_t a1)
{
  Swift::String *v1;
  Swift::String *v3;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#IntentConfirmationPrompt", 0x27uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v3 = v1;
  *v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v3[1]._countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.intentHandledResponse(app:completion:)(uint64_t a1)
{
  Swift::String *v1;
  Swift::String *v3;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#IntentHandledResponse", 0x24uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v3 = v1;
  *v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.intentHandledResponse(app:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t RequestPaymentCATs.intentHandledResponse(app:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  Swift::String *v9;
  uint64_t v10;

  v10 = v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#IntentHandledResponse", 0x24uLL, 1);
  v0[8] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v9 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (v10)
  {
    v7 = v8[6];
    v9[2]._object = (void *)type metadata accessor for SirikitApp();
    v9[1]._countAndFlagsBits = v7;
  }
  else
  {
    v9[1]._countAndFlagsBits = 0;
    v9[1]._object = 0;
    v9[2]._countAndFlagsBits = 0;
    v9[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v8[9] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v3 = (_QWORD *)swift_task_alloc();
  v8[10] = v3;
  *v3 = v8[2];
  v3[1] = RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:);
  return v6(v8[5], v1._countAndFlagsBits, v1._object, v5);
}

uint64_t RequestPaymentCATs.intentHandledResponse(app:)(uint64_t a1)
{
  Swift::String *v1;
  Swift::String *v3;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#IntentHandledResponse", 0x24uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v3 = v1;
  *v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.labelForResponseSlot(slot:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String *v6;
  Swift::String v7;
  const void *v8;
  char *v9;
  Swift::String *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  Swift::String *v14;
  _QWORD v15[5];
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String *v20;
  const void *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = a1;
  v15[3] = a2;
  v15[4] = a3;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v16 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)v15 - v16;
  v29 = MEMORY[0x24BDAC7A8](v21);
  v27 = v4;
  v28 = v5;
  v26 = v3;
  v22 = 1;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#LabelForResponseSlot", 0x23uLL, 1);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v19 = _allocateUninitializedArray<A>(_:)();
  v20 = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v22 & 1);
  v8 = v21;
  v9 = v23;
  *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    v14 = v20;
    v20[1]._countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[0] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.labelForResponseSlot(slot:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t RequestPaymentCATs.labelForResponseSlot(slot:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *p_countAndFlagsBits;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = (void *)v0[8];
  v11 = (const void *)v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#LabelForResponseSlot", 0x23uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_countAndFlagsBits = &v2->_countAndFlagsBits;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  v13 = type metadata accessor for SpeakableString();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v14 + 48))(v12, 1) == 1)
  {
    outlined destroy of SpeakableString?(v9[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    v8 = v9[8];
    p_countAndFlagsBits[5] = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v8, v13);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[10] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v9[11] = v4;
  *v4 = v9[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  return v7(v9[5], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t RequestPaymentCATs.labelForResponseSlot(slot:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  Swift::String *v3;
  Swift::String v4;
  const void *v5;
  char *v6;
  Swift::String *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  Swift::String *v11;
  _QWORD v12[4];
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String *v17;
  const void *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12[3] = a2;
  v18 = a1;
  v24 = 0;
  v23 = 0;
  v13 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = (char *)v12 - v13;
  v24 = MEMORY[0x24BDAC7A8](v18);
  v23 = v2;
  v19 = 1;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#LabelForResponseSlot", 0x23uLL, 1);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v16 = _allocateUninitializedArray<A>(_:)();
  v17 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v19 & 1);
  v5 = v18;
  v6 = v20;
  *v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  v21 = type metadata accessor for SpeakableString();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    v11 = v17;
    v17[1]._countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[1] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.noResultsResponse(app:completion:)(uint64_t a1)
{
  Swift::String *v1;
  Swift::String *v3;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#NoResultsResponse", 0x20uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v3 = v1;
  *v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.noResultsResponse(app:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t RequestPaymentCATs.noResultsResponse(app:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  Swift::String *v9;
  uint64_t v10;

  v10 = v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#NoResultsResponse", 0x20uLL, 1);
  v0[8] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v9 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (v10)
  {
    v7 = v8[6];
    v9[2]._object = (void *)type metadata accessor for SirikitApp();
    v9[1]._countAndFlagsBits = v7;
  }
  else
  {
    v9[1]._countAndFlagsBits = 0;
    v9[1]._object = 0;
    v9[2]._countAndFlagsBits = 0;
    v9[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v8[9] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v3 = (_QWORD *)swift_task_alloc();
  v8[10] = v3;
  *v3 = v8[2];
  v3[1] = RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:);
  return v6(v8[5], v1._countAndFlagsBits, v1._object, v5);
}

uint64_t RequestPaymentCATs.noResultsResponse(app:)(uint64_t a1)
{
  Swift::String *v1;
  Swift::String *v3;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#NoResultsResponse", 0x20uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v3 = v1;
  *v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.promptCancelled(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#PromptCancelled", 0x1EuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.promptCancelled()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t RequestPaymentCATs.promptCancelled()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#PromptCancelled", 0x1EuLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#PromptCancelled", 0x1EuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.promptForSlotValue(slot:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String *v6;
  Swift::String v7;
  const void *v8;
  char *v9;
  Swift::String *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  Swift::String *v14;
  _QWORD v15[5];
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String *v20;
  const void *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = a1;
  v15[3] = a2;
  v15[4] = a3;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v16 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)v15 - v16;
  v29 = MEMORY[0x24BDAC7A8](v21);
  v27 = v4;
  v28 = v5;
  v26 = v3;
  v22 = 1;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#PromptForSlotValue", 0x21uLL, 1);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v19 = _allocateUninitializedArray<A>(_:)();
  v20 = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v22 & 1);
  v8 = v21;
  v9 = v23;
  *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    v14 = v20;
    v20[1]._countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[0] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.promptForSlotValue(slot:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t RequestPaymentCATs.promptForSlotValue(slot:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *p_countAndFlagsBits;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = (void *)v0[8];
  v11 = (const void *)v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#PromptForSlotValue", 0x21uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_countAndFlagsBits = &v2->_countAndFlagsBits;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  v13 = type metadata accessor for SpeakableString();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v14 + 48))(v12, 1) == 1)
  {
    outlined destroy of SpeakableString?(v9[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    v8 = v9[8];
    p_countAndFlagsBits[5] = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v8, v13);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[10] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v9[11] = v4;
  *v4 = v9[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  return v7(v9[5], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t RequestPaymentCATs.promptForSlotValue(slot:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  Swift::String *v3;
  Swift::String v4;
  const void *v5;
  char *v6;
  Swift::String *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  Swift::String *v11;
  _QWORD v12[4];
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String *v17;
  const void *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12[3] = a2;
  v18 = a1;
  v24 = 0;
  v23 = 0;
  v13 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = (char *)v12 - v13;
  v24 = MEMORY[0x24BDAC7A8](v18);
  v23 = v2;
  v19 = 1;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#PromptForSlotValue", 0x21uLL, 1);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v16 = _allocateUninitializedArray<A>(_:)();
  v17 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v19 & 1);
  v5 = v18;
  v6 = v20;
  *v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  v21 = type metadata accessor for SpeakableString();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    v11 = v17;
    v17[1]._countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[1] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.slotDisplayValue(slot:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String *v6;
  Swift::String v7;
  const void *v8;
  char *v9;
  Swift::String *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  Swift::String *v14;
  _QWORD v15[5];
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String *v20;
  const void *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = a1;
  v15[3] = a2;
  v15[4] = a3;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v16 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)v15 - v16;
  v29 = MEMORY[0x24BDAC7A8](v21);
  v27 = v4;
  v28 = v5;
  v26 = v3;
  v22 = 1;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#SlotDisplayValue", 0x1FuLL, 1);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v19 = _allocateUninitializedArray<A>(_:)();
  v20 = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v22 & 1);
  v8 = v21;
  v9 = v23;
  *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    v14 = v20;
    v20[1]._countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[0] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.slotDisplayValue(slot:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t RequestPaymentCATs.slotDisplayValue(slot:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *p_countAndFlagsBits;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = (void *)v0[8];
  v11 = (const void *)v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#SlotDisplayValue", 0x1FuLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_countAndFlagsBits = &v2->_countAndFlagsBits;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  v13 = type metadata accessor for SpeakableString();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v14 + 48))(v12, 1) == 1)
  {
    outlined destroy of SpeakableString?(v9[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    v8 = v9[8];
    p_countAndFlagsBits[5] = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v8, v13);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[10] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v9[11] = v4;
  *v4 = v9[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  return v7(v9[5], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t RequestPaymentCATs.slotDisplayValue(slot:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  Swift::String *v3;
  Swift::String v4;
  const void *v5;
  char *v6;
  Swift::String *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  Swift::String *v11;
  _QWORD v12[4];
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String *v17;
  const void *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12[3] = a2;
  v18 = a1;
  v24 = 0;
  v23 = 0;
  v13 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = (char *)v12 - v13;
  v24 = MEMORY[0x24BDAC7A8](v18);
  v23 = v2;
  v19 = 1;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#SlotDisplayValue", 0x1FuLL, 1);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v16 = _allocateUninitializedArray<A>(_:)();
  v17 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v19 & 1);
  v5 = v18;
  v6 = v20;
  *v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  v21 = type metadata accessor for SpeakableString();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    v11 = v17;
    v17[1]._countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[1] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.unsupportedSlotValue(slot:paymentsConcept:completion:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String *v8;
  Swift::String v9;
  const void *v10;
  char *v11;
  Swift::String *v12;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v14;
  uint64_t v15;
  Swift::String *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String *v20;
  Swift::String *v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String *v32;
  const void *v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v33 = a1;
  v25 = a2;
  v26 = a3;
  v27 = a4;
  v42 = 0;
  v41 = 0;
  v39 = 0;
  v40 = 0;
  v38 = 0;
  v28 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v35 = (char *)v22 - v28;
  v42 = MEMORY[0x24BDAC7A8](v33);
  v41 = v5;
  v39 = v6;
  v40 = v7;
  v38 = v4;
  v34 = 1;
  v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#UnsupportedSlotValue", 0x23uLL, 1);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v31 = _allocateUninitializedArray<A>(_:)();
  v32 = v8;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v34 & 1);
  v10 = v33;
  v11 = v35;
  *v32 = v9;
  outlined init with copy of SpeakableString?(v10, v11);
  v36 = type metadata accessor for SpeakableString();
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v37 + 48))(v35, v34) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v35);
    v21 = v32;
    v32[1]._countAndFlagsBits = 0;
    v21[1]._object = 0;
    v21[2]._countAndFlagsBits = 0;
    v21[2]._object = 0;
  }
  else
  {
    v12 = v32;
    v32[2]._object = (void *)v36;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 32))(boxed_opaque_existential_1, v35, v36);
  }
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  v32[3] = v14;
  swift_retain();
  if (v25)
  {
    v24 = v25;
    v23 = v25;
    v15 = type metadata accessor for PaymentsDialogConcept();
    v16 = v32;
    v17 = v23;
    v32[5]._object = (void *)v15;
    v16[4]._countAndFlagsBits = v17;
  }
  else
  {
    v20 = v32;
    v32[4]._countAndFlagsBits = 0;
    v20[4]._object = 0;
    v20[5]._countAndFlagsBits = 0;
    v20[5]._object = 0;
  }
  v18 = v31;
  _finalizeUninitializedArray<A>(_:)();
  v22[0] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v22[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.unsupportedSlotValue(slot:paymentsConcept:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[9] = v3;
  v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return swift_task_switch();
}

uint64_t RequestPaymentCATs.unsupportedSlotValue(slot:paymentsConcept:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  Swift::String *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v14 = (void *)v0[10];
  v13 = (const void *)v0[7];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#UnsupportedSlotValue", 0x23uLL, 1);
  v0[11] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v12 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v13, v14);
  v15 = type metadata accessor for SpeakableString();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v16 + 48))(v14, 1) == 1)
  {
    outlined destroy of SpeakableString?(v11[10]);
    v12[1]._countAndFlagsBits = 0;
    v12[1]._object = 0;
    v12[2]._countAndFlagsBits = 0;
    v12[2]._object = 0;
  }
  else
  {
    v10 = v11[10];
    v12[2]._object = (void *)v15;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v10, v15);
  }
  v9 = v11[8];
  v12[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (v9)
  {
    v8 = v11[8];
    v12[5]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v12[4]._countAndFlagsBits = v8;
  }
  else
  {
    v12[4]._countAndFlagsBits = 0;
    v12[4]._object = 0;
    v12[5]._countAndFlagsBits = 0;
    v12[5]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v11[12] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v11[13] = v4;
  *v4 = v11[2];
  v4[1] = RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:);
  return v7(v11[6], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t RequestPaymentCATs.unsupportedSlotValue(slot:paymentsConcept:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  Swift::String *v5;
  Swift::String v6;
  const void *v7;
  char *v8;
  Swift::String *v9;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v11;
  uint64_t v12;
  Swift::String *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String *v17;
  Swift::String *v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String *v28;
  const void *v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v22 = a3;
  v29 = a1;
  v23 = a2;
  v36 = 0;
  v35 = 0;
  v34 = 0;
  v24 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v31 = (char *)v19 - v24;
  v36 = MEMORY[0x24BDAC7A8](v29);
  v35 = v4;
  v34 = v3;
  v30 = 1;
  v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#UnsupportedSlotValue", 0x23uLL, 1);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v27 = _allocateUninitializedArray<A>(_:)();
  v28 = v5;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v30 & 1);
  v7 = v29;
  v8 = v31;
  *v28 = v6;
  outlined init with copy of SpeakableString?(v7, v8);
  v32 = type metadata accessor for SpeakableString();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v33 + 48))(v31, v30) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v31);
    v18 = v28;
    v28[1]._countAndFlagsBits = 0;
    v18[1]._object = 0;
    v18[2]._countAndFlagsBits = 0;
    v18[2]._object = 0;
  }
  else
  {
    v9 = v28;
    v28[2]._object = (void *)v32;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v9[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 32))(boxed_opaque_existential_1, v31, v32);
  }
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  v28[3] = v11;
  swift_retain();
  if (v23)
  {
    v21 = v23;
    v20 = v23;
    v12 = type metadata accessor for PaymentsDialogConcept();
    v13 = v28;
    v14 = v20;
    v28[5]._object = (void *)v12;
    v13[4]._countAndFlagsBits = v14;
  }
  else
  {
    v17 = v28;
    v28[4]._countAndFlagsBits = 0;
    v17[4]._object = 0;
    v17[5]._countAndFlagsBits = 0;
    v17[5]._object = 0;
  }
  v15 = v27;
  _finalizeUninitializedArray<A>(_:)();
  v19[1] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v19[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for PaymentConfirmationLabelProviding.confirmButtonLabel() in conformance RequestPaymentCATs(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentCATs.confirmButtonLabel()(a1);
}

uint64_t protocol witness for PaymentSlotDisplayValueProviding.slotDisplayValue(slot:) in conformance RequestPaymentCATs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentCATs.slotDisplayValue(slot:)(a1, a2);
}

uint64_t protocol witness for PaymentSlotDisplayValueProviding.labelForResponseSlot(slot:) in conformance RequestPaymentCATs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentCATs.labelForResponseSlot(slot:)(a1, a2);
}

uint64_t type metadata accessor for RequestPaymentCATs()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for RequestPaymentCATs;
  if (!type metadata singleton initialization cache for RequestPaymentCATs)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for RequestPaymentCATs()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t ObjC metadata update function for RequestPaymentCATs()
{
  return type metadata accessor for RequestPaymentCATs();
}

uint64_t RequestPaymentHandleIntentStrategy.__allocating_init()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[5];
  _QWORD v29[5];
  _BYTE v30[40];
  uint64_t v31;
  _BYTE v32[40];
  char v33;
  char v34;
  char v35;
  uint64_t v36[5];
  _QWORD v37[6];

  v31 = 0;
  v17 = 0;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v16 = (char *)&v6 - v7;
  v12 = type metadata accessor for Globals();
  v8 = v36;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v36);
  v9 = &v35;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v10 = &v34;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v11 = &v33;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  v25 = v37;
  v37[3] = v12;
  v37[4] = &protocol witness table for Globals;
  v37[0] = v0;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  v15 = v32;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v32);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v14 = CATWrapper.__allocating_init(options:globals:)();
  v13 = type metadata accessor for INRequestPaymentIntent();
  v1 = type metadata accessor for INRequestPaymentIntentResponse();
  v2 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v1);
  v24 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v15, v14, v2);
  v31 = v24;
  v23 = v30;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v30);
  type metadata accessor for RequestPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v18 = CATWrapper.__allocating_init(options:globals:)();
  NSJSONWritingOptions.init(rawValue:)(v18);
  v19 = v29;
  v29[3] = &type metadata for CommonLabelsProvider;
  v29[4] = &protocol witness table for CommonLabelsProvider;
  v3 = type metadata accessor for SiriKitContactResolver();
  v20 = v28;
  v28[3] = v3;
  v28[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v28);
  SiriKitContactResolver.init()();
  swift_retain();
  v21 = &v27;
  v27 = v24;
  v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  v26 = SearchForAccountsContinueInAppStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v23, v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v21, v22, v4);
  swift_retain();
  v37[5] = v26;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  swift_release();
  return v26;
}

uint64_t RequestPaymentHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[5] = 0;
  v4 = type metadata accessor for Logger();
  v3[11] = v4;
  v3[12] = *(_QWORD *)(v4 - 8);
  v3[13] = swift_task_alloc();
  v3[3] = a1;
  v3[4] = a2;
  v3[5] = v2;
  return swift_task_switch();
}

uint64_t RequestPaymentHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint32_t v16;
  os_log_type_t v17;
  NSObject *v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 16) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v1, v2, v15);
  v18 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 48) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v16 = *(_DWORD *)(v0 + 112);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v19 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v18, v17))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v10 = createStorage<A>(capacity:type:)(0);
    v11 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v13 + 56) = buf;
    *(_QWORD *)(v13 + 64) = v10;
    *(_QWORD *)(v13 + 72) = v11;
    serialize(_:at:)(0, (_BYTE **)(v13 + 56));
    serialize(_:at:)(0, (_BYTE **)(v13 + 56));
    *(_QWORD *)(v13 + 80) = v19;
    v12 = (_QWORD *)swift_task_alloc();
    v12[2] = v13 + 56;
    v12[3] = v13 + 64;
    v12[4] = v13 + 72;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v18, v17, "#RequestPaymentHandleIntentStrategy makeIntentExecutionBehavior", buf, v16);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v13 + 104);
  v4 = *(_QWORD *)(v13 + 96);
  v5 = *(_QWORD *)(v13 + 88);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
  type metadata accessor for SiriKitIntentExecutionBehavior();
  v7 = static SiriKitIntentExecutionBehavior.standard()();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 16) + 8))(v7);
}

uint64_t RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[55] = v2;
  v3[54] = a2;
  v3[53] = a1;
  v3[41] = v3;
  v3[42] = 0;
  v3[43] = 0;
  v3[45] = 0;
  v3[37] = 0;
  v3[38] = 0;
  v3[52] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v3[56] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[57] = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  v3[58] = v4;
  v3[59] = *(_QWORD *)(v4 - 8);
  v3[60] = swift_task_alloc();
  v3[61] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  v3[62] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[63] = v6;
  v3[64] = *(_QWORD *)(v6 + 64);
  v3[65] = swift_task_alloc();
  v7 = type metadata accessor for Logger();
  v3[66] = v7;
  v3[67] = *(_QWORD *)(v7 - 8);
  v3[68] = swift_task_alloc();
  v3[69] = swift_task_alloc();
  v3[70] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[71] = swift_task_alloc();
  v3[42] = a2;
  v3[43] = v2;
  return swift_task_switch();
}

uint64_t RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint32_t size;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  NSObject *oslog;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  id v40;
  id v41;
  uint64_t v42;
  uint8_t *buf;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint32_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;

  v47 = *(_QWORD *)(v0 + 568);
  v1 = *(_QWORD *)(v0 + 560);
  v48 = *(_QWORD *)(v0 + 536);
  v49 = *(_QWORD *)(v0 + 528);
  v54 = *(_QWORD *)(v0 + 520);
  v52 = *(_QWORD *)(v0 + 504);
  v55 = *(_QWORD *)(v0 + 496);
  v51 = *(_QWORD *)(v0 + 432);
  *(_QWORD *)(v0 + 328) = v0;
  v2 = SignpostName.makeRequestPaymentIntentHandledResponse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v47);
  v3 = Logger.payments.unsafeMutableAddressor();
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16);
  *(_QWORD *)(v0 + 576) = v50;
  v50(v1, v3, v49);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v54, v51, v55);
  v53 = (*(unsigned __int8 *)(v52 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  v57 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v52 + 32))(v57 + v53, v54, v55);
  v63 = Logger.logObject.getter();
  v64 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 352) = 12;
  *(_QWORD *)(v0 + 584) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 592) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 600) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v56 = *(_DWORD *)(v0 + 680);
  v59 = swift_allocObject();
  *(_BYTE *)(v59 + 16) = 32;
  v60 = swift_allocObject();
  *(_BYTE *)(v60 + 16) = 8;
  v58 = swift_allocObject();
  *(_QWORD *)(v58 + 16) = partial apply for implicit closure #1 in RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  *(_QWORD *)(v58 + 24) = v57;
  v61 = swift_allocObject();
  *(_QWORD *)(v61 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v61 + 24) = v58;
  *(_QWORD *)(v0 + 608) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v62 = v4;
  swift_retain();
  *v62 = partial apply for closure #1 in OSLogArguments.append(_:);
  v62[1] = v59;
  swift_retain();
  v62[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v62[3] = v60;
  swift_retain();
  v62[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v62[5] = v61;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v63, v64))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v44 = createStorage<A>(capacity:type:)(0);
    v45 = createStorage<A>(capacity:type:)(1);
    v70 = buf;
    v71 = v44;
    v72 = v45;
    serialize(_:at:)(2, &v70);
    serialize(_:at:)(1, &v70);
    v73 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v74 = v59;
    closure #1 in osLogInternal(_:log:type:)(&v73, (uint64_t)&v70, (uint64_t)&v71, (uint64_t)&v72);
    v73 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v74 = v60;
    closure #1 in osLogInternal(_:log:type:)(&v73, (uint64_t)&v70, (uint64_t)&v71, (uint64_t)&v72);
    v73 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v74 = v61;
    closure #1 in osLogInternal(_:log:type:)(&v73, (uint64_t)&v70, (uint64_t)&v71, (uint64_t)&v72);
    _os_log_impl(&dword_24701B000, v63, v64, "#RequestPaymentHandleIntentStrategy makeIntentHandledResponse response: %s", buf, v56);
    destroyStorage<A>(_:count:)(v44, 0, v42);
    destroyStorage<A>(_:count:)(v45, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v37 = *(_QWORD *)(v46 + 560);
  v36 = *(_QWORD *)(v46 + 536);
  v38 = *(_QWORD *)(v46 + 528);

  v39 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
  *(_QWORD *)(v46 + 616) = v39;
  v39(v37, v38);
  v40 = (id)IntentResolutionRecord.intentResponse.getter();
  v41 = objc_msgSend(v40, sel_code);
  *(_QWORD *)(v46 + 360) = v41;

  if (v41 == (id)3)
  {
    v34 = *(_QWORD *)(v46 + 440);
    swift_retain();
    *(_QWORD *)(v46 + 624) = *(_QWORD *)(v34 + 16);
    swift_retain();
    swift_release();
    IntentResolutionRecord.app.getter();
    v35 = App.sirikitApp.getter();
    *(_QWORD *)(v46 + 632) = v35;
    swift_release();
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v46 + 640) = v5;
    *v5 = *(_QWORD *)(v46 + 328);
    v5[1] = RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    return RequestPaymentCATs.intentHandledResponse(app:)(*(_QWORD *)(v46 + 488), v35);
  }
  else
  {
    v7 = *(_QWORD *)(v46 + 544);
    v22 = *(_QWORD *)(v46 + 528);
    v23 = static PaymentIntentCATResponseCode.from(_:)((unint64_t)v41);
    v24 = v8;
    *(_QWORD *)(v46 + 656) = v8;
    *(_QWORD *)(v46 + 296) = v23;
    *(_QWORD *)(v46 + 304) = v8;
    v9 = Logger.payments.unsafeMutableAddressor();
    v50(v7, v9, v22);
    swift_bridgeObjectRetain();
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v23;
    *(_QWORD *)(v26 + 24) = v24;
    oslog = Logger.logObject.getter();
    v33 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v46 + 368) = 12;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v46 + 684);
    v28 = swift_allocObject();
    *(_BYTE *)(v28 + 16) = 32;
    v29 = swift_allocObject();
    *(_BYTE *)(v29 + 16) = 8;
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
    *(_QWORD *)(v27 + 24) = v26;
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v30 + 24) = v27;
    _allocateUninitializedArray<A>(_:)();
    v31 = v10;
    swift_retain();
    *v31 = partial apply for closure #1 in OSLogArguments.append(_:);
    v31[1] = v28;
    swift_retain();
    v31[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v31[3] = v29;
    swift_retain();
    v31[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v31[5] = v30;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v33))
    {
      v19 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v20 = createStorage<A>(capacity:type:)(0);
      v21 = createStorage<A>(capacity:type:)(1);
      v65 = v19;
      v66 = v20;
      v67 = v21;
      serialize(_:at:)(2, &v65);
      serialize(_:at:)(1, &v65);
      v68 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v69 = v28;
      closure #1 in osLogInternal(_:log:type:)(&v68, (uint64_t)&v65, (uint64_t)&v66, (uint64_t)&v67);
      v68 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v69 = v29;
      closure #1 in osLogInternal(_:log:type:)(&v68, (uint64_t)&v65, (uint64_t)&v66, (uint64_t)&v67);
      v68 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v69 = v30;
      closure #1 in osLogInternal(_:log:type:)(&v68, (uint64_t)&v65, (uint64_t)&v66, (uint64_t)&v67);
      _os_log_impl(&dword_24701B000, oslog, v33, "#RequestPaymentHandleIntentStrategy makeIntentHandledResponse error case: %s", v19, size);
      destroyStorage<A>(_:count:)(v20, 0, v18);
      destroyStorage<A>(_:count:)(v21, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v19, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v12 = *(_QWORD *)(v46 + 544);
    v13 = *(_QWORD *)(v46 + 528);
    v14 = *(_QWORD *)(v46 + 440);

    v39(v12, v13);
    swift_retain();
    outlined init with copy of GlobalsProviding(v14 + 144, v46 + 16);
    swift_release();
    v15 = *(_QWORD *)(v46 + 40);
    v16 = *(_QWORD *)(v46 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v46 + 16), v15);
    v17 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 + 48) + **(int **)(v16 + 48));
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v46 + 664) = v11;
    *v11 = *(_QWORD *)(v46 + 328);
    v11[1] = RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    return v17(*(_QWORD *)(v46 + 448), *(_QWORD *)(v46 + 432), v15, v16);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 328) = *v1;
  *(_QWORD *)(v2 + 648) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *buf;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v26;
  NSObject *oslog;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;

  *(_QWORD *)(v0 + 328) = v0;
  v40 = (void *)IntentResolutionRecord.intentResponse.getter();
  v41 = objc_msgSend(v40, sel_paymentRecord);
  if (v41)
  {
    v38 = *(_QWORD *)(v39 + 568);
    v36 = *(_QWORD *)(v39 + 488);
    v35 = *(_QWORD *)(v39 + 472);
    v37 = *(_QWORD *)(v39 + 464);
    v34 = *(_QWORD *)(v39 + 456);
    v31 = *(_QWORD *)(v39 + 440);
    v33 = *(uint64_t **)(v39 + 424);
    *(_QWORD *)(v39 + 416) = v41;

    swift_retain();
    outlined init with copy of GlobalsProviding(v31 + 104, v39 + 176);
    swift_release();
    v30 = *(_QWORD *)(v39 + 200);
    v29 = *(_QWORD *)(v39 + 208);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v39 + 176), v30);
    (*(void (**)(uint64_t))(v29 + 16))(v30);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    type metadata accessor for SAAceView();
    _allocateUninitializedArray<A>(_:)();
    swift_retain();
    v32 = BaseStrategy.ttsEnabled.getter();
    swift_release();
    static PaymentsContextProvider.handleRequestPayment(paymentRecord:needsSDA:)(v41, v32 & 1, v34);
    v1 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v34, 0, 1);
    *(_QWORD *)(v39 + 256) = 0;
    *(_QWORD *)(v39 + 264) = 0;
    *(_QWORD *)(v39 + 272) = 0;
    *(_QWORD *)(v39 + 280) = 0;
    *(_QWORD *)(v39 + 288) = 0;
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v33[3] = type metadata accessor for AceOutput();
    v33[4] = MEMORY[0x24BE99088];
    __swift_allocate_boxed_opaque_existential_1(v33);
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?(v39 + 256);
    outlined destroy of NLContextUpdate?(v34);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0(v39 + 216);
    __swift_destroy_boxed_opaque_existential_0(v39 + 176);

    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v37);
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v38);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v39 + 328) + 8))();
  }
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 576);
  v3 = *(_QWORD *)(v39 + 552);
  v23 = *(_QWORD *)(v39 + 528);

  v4 = Logger.payments.unsafeMutableAddressor();
  v24(v3, v4, v23);
  oslog = Logger.logObject.getter();
  v26 = static os_log_type_t.error.getter();
  *(_QWORD *)(v39 + 376) = 2;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v39 + 688);
  v28 = _allocateUninitializedArray<A>(_:)();
  if (!os_log_type_enabled(oslog, v26))
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v39 + 648);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
  v20 = createStorage<A>(capacity:type:)(0);
  v21 = createStorage<A>(capacity:type:)(0);
  *(_QWORD *)(v39 + 384) = buf;
  *(_QWORD *)(v39 + 392) = v20;
  *(_QWORD *)(v39 + 400) = v21;
  serialize(_:at:)(0, (_BYTE **)(v39 + 384));
  serialize(_:at:)(0, (_BYTE **)(v39 + 384));
  *(_QWORD *)(v39 + 408) = v28;
  v22 = (_QWORD *)swift_task_alloc();
  v22[2] = v39 + 384;
  v22[3] = v39 + 392;
  v22[4] = v39 + 400;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
  lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  result = Sequence.forEach(_:)();
  if (!v5)
  {
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, oslog, v26, "#RequestPaymentHandleIntentStrategy found no paymentRecord in intent response, throwing exception", buf, size);
    destroyStorage<A>(_:count:)(v20, 0, v18);
    destroyStorage<A>(_:count:)(v21, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
LABEL_8:
    v10 = *(void (**)(uint64_t, uint64_t))(v39 + 616);
    v17 = *(_QWORD *)(v39 + 568);
    v8 = *(_QWORD *)(v39 + 552);
    v9 = *(_QWORD *)(v39 + 528);
    v15 = *(_QWORD *)(v39 + 488);
    v14 = *(_QWORD *)(v39 + 472);
    v16 = *(_QWORD *)(v39 + 464);

    v10(v8, v9);
    type metadata accessor for INRequestPaymentIntent();
    v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v6;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v7 = v12;
    *(_QWORD *)(v7 + 8) = v11;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 12;
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v39 + 328) + 8))();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 328) = *v1;
  *(_QWORD *)(v2 + 672) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v1 = v0[59];
  v2 = v0[58];
  v3 = v0[56];
  v0[41] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v13 = v23[71];
    outlined destroy of TemplatingResult?(v23[56]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 2));
    v23[39] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v23[40] = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    type metadata accessor for INRequestPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v12 = String.init(stringInterpolation:)();
    v11 = v9;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v10 = v12;
    *(_QWORD *)(v10 + 8) = v11;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 16;
    swift_willThrow();
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v13);
  }
  else
  {
    v22 = v23[71];
    v20 = v23[60];
    v19 = v23[59];
    v21 = v23[58];
    v18 = v23[57];
    v16 = v23[55];
    v17 = (uint64_t *)v23[53];
    (*(void (**)(void))(v19 + 32))();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 2));
    swift_retain();
    outlined init with copy of GlobalsProviding(v16 + 104, (uint64_t)(v23 + 7));
    swift_release();
    v15 = v23[10];
    v14 = v23[11];
    __swift_project_boxed_opaque_existential_1(v23 + 7, v15);
    (*(void (**)(uint64_t))(v14 + 16))(v15);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v18, 1);
    v23[17] = 0;
    v23[18] = 0;
    v23[19] = 0;
    v23[20] = 0;
    v23[21] = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v17[3] = type metadata accessor for AceOutput();
    v17[4] = MEMORY[0x24BE99088];
    __swift_allocate_boxed_opaque_existential_1(v17);
    static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v23 + 17));
    outlined destroy of NLContextUpdate?(v18);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 12));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 7));
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v22);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v23[41] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 568);
  *(_QWORD *)(v0 + 328) = v0;
  swift_release();
  swift_release();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 328) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 568);
  *(_QWORD *)(v0 + 328) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 328) + 8))();
}

uint64_t implicit closure #1 in RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  IntentResolutionRecord.intentResponse.getter();
  type metadata accessor for INRequestPaymentIntentResponse();
  lazy protocol witness table accessor for type INRequestPaymentIntentResponse and conformance NSObject();
  return String.init<A>(describing:)();
}

uint64_t RequestPaymentHandleIntentStrategy.makeContinueInAppResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[32] = v2;
  v3[31] = a2;
  v3[30] = a1;
  v3[22] = v3;
  v3[23] = 0;
  v3[24] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[33] = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  v3[34] = v4;
  v3[35] = *(_QWORD *)(v4 - 8);
  v3[36] = swift_task_alloc();
  v5 = type metadata accessor for Logger();
  v3[37] = v5;
  v3[38] = *(_QWORD *)(v5 - 8);
  v3[39] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[40] = swift_task_alloc();
  v3[23] = a2;
  v3[24] = v2;
  return swift_task_switch();
}

uint64_t RequestPaymentHandleIntentStrategy.makeContinueInAppResponse(rchRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint8_t *buf;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint32_t v23;
  os_log_type_t v24;
  NSObject *v25;
  uint64_t v26;

  v20 = *(_QWORD *)(v0 + 320);
  v1 = *(_QWORD *)(v0 + 312);
  v21 = *(_QWORD *)(v0 + 304);
  v22 = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 176) = v0;
  v2 = SignpostName.makeRequestPaymentContinueInAppResponse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v20);
  v3 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v1, v3, v22);
  v25 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 200) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v23 = *(_DWORD *)(v0 + 352);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v26 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v25, v24))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v16 = createStorage<A>(capacity:type:)(0);
    v17 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v19 + 208) = buf;
    *(_QWORD *)(v19 + 216) = v16;
    *(_QWORD *)(v19 + 224) = v17;
    serialize(_:at:)(0, (_BYTE **)(v19 + 208));
    serialize(_:at:)(0, (_BYTE **)(v19 + 208));
    *(_QWORD *)(v19 + 232) = v26;
    v18 = (_QWORD *)swift_task_alloc();
    v18[2] = v19 + 208;
    v18[3] = v19 + 216;
    v18[4] = v19 + 224;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v25, v24, "#RequestPaymentHandleIntentStrategy makeContinueInAppResponse", buf, v23);
    destroyStorage<A>(_:count:)(v16, 0, v14);
    destroyStorage<A>(_:count:)(v17, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v19 + 312);
  v6 = *(_QWORD *)(v19 + 304);
  v8 = *(_QWORD *)(v19 + 296);
  v9 = *(_QWORD *)(v19 + 256);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_retain();
  outlined init with copy of GlobalsProviding(v9 + 144, v19 + 16);
  swift_release();
  v11 = *(_QWORD *)(v19 + 40);
  v12 = *(_QWORD *)(v19 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v19 + 16), v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  v10 = IntentResolutionRecord.app.getter();
  *(_QWORD *)(v19 + 328) = v10;
  v13 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 + 40) + **(int **)(v12 + 40));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v19 + 336) = v4;
  *v4 = *(_QWORD *)(v19 + 176);
  v4[1] = RequestPaymentHandleIntentStrategy.makeContinueInAppResponse(rchRecord:);
  return v13(*(_QWORD *)(v19 + 288), 0, v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 176) = *v1;
  *(_QWORD *)(v2 + 344) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = v0[40];
  v10 = v0[36];
  v7 = v0[35];
  v8 = v0[34];
  v11 = v0[33];
  v5 = v0[32];
  v6 = (uint64_t *)v0[30];
  v0[22] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, (uint64_t)(v0 + 7));
  swift_release();
  v4 = v0[10];
  v3 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v11, 1);
  v0[17] = 0;
  v0[18] = 0;
  v0[19] = 0;
  v0[20] = 0;
  v0[21] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v6[3] = type metadata accessor for AceOutput();
  v6[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v6);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 17));
  outlined destroy of NLContextUpdate?(v11);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v8);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[22] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 320);
  *(_QWORD *)(v0 + 176) = v0;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v3 + 176) + 8))();
}

uint64_t RequestPaymentHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[34] = v2;
  v3[33] = a2;
  v3[32] = a1;
  v3[24] = v3;
  v3[25] = 0;
  v3[26] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[35] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v3[36] = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  v3[37] = v4;
  v3[38] = *(_QWORD *)(v4 - 8);
  v3[39] = swift_task_alloc();
  v5 = type metadata accessor for Logger();
  v3[40] = v5;
  v3[41] = *(_QWORD *)(v5 - 8);
  v3[42] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[43] = swift_task_alloc();
  v3[25] = a2;
  v3[26] = v2;
  return swift_task_switch();
}

uint64_t RequestPaymentHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v13;
  uint8_t *buf;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint32_t v22;
  os_log_type_t v23;
  NSObject *v24;
  uint64_t v25;

  v19 = *(_QWORD *)(v0 + 344);
  v1 = *(_QWORD *)(v0 + 336);
  v20 = *(_QWORD *)(v0 + 328);
  v21 = *(_QWORD *)(v0 + 320);
  *(_QWORD *)(v0 + 192) = v0;
  v2 = SignpostName.makeRequestPaymentFailureHandlingIntentResponse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v19);
  v3 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v1, v3, v21);
  v24 = Logger.logObject.getter();
  v23 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 216) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v22 = *(_DWORD *)(v0 + 368);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v25 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v24, v23))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v15 = createStorage<A>(capacity:type:)(0);
    v16 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v18 + 224) = buf;
    *(_QWORD *)(v18 + 232) = v15;
    *(_QWORD *)(v18 + 240) = v16;
    serialize(_:at:)(0, (_BYTE **)(v18 + 224));
    serialize(_:at:)(0, (_BYTE **)(v18 + 224));
    *(_QWORD *)(v18 + 248) = v25;
    v17 = (_QWORD *)swift_task_alloc();
    v17[2] = v18 + 224;
    v17[3] = v18 + 232;
    v17[4] = v18 + 240;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v24, v23, "#RequestPaymentHandleIntentStrategy makeFailureHandlingIntentResponse", buf, v22);
    destroyStorage<A>(_:count:)(v15, 0, v13);
    destroyStorage<A>(_:count:)(v16, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v18 + 336);
  v6 = *(_QWORD *)(v18 + 328);
  v8 = *(_QWORD *)(v18 + 320);
  v9 = *(_QWORD *)(v18 + 272);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_retain();
  outlined init with copy of GlobalsProviding(v9 + 144, v18 + 16);
  swift_release();
  v10 = *(_QWORD *)(v18 + 40);
  v11 = *(_QWORD *)(v18 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v18 + 16), v10);
  v12 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + 48) + **(int **)(v11 + 48));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v18 + 352) = v4;
  *v4 = *(_QWORD *)(v18 + 192);
  v4[1] = RequestPaymentHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:);
  return v12(*(_QWORD *)(v18 + 288), *(_QWORD *)(v18 + 264), v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 192) = *v1;
  *(_QWORD *)(v2 + 360) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v1 = v0[38];
  v2 = v0[37];
  v3 = v0[36];
  v0[24] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v13 = v23[43];
    outlined destroy of TemplatingResult?(v23[36]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 2));
    v23[22] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v23[23] = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    type metadata accessor for INRequestPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v12 = String.init(stringInterpolation:)();
    v11 = v9;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v10 = v12;
    *(_QWORD *)(v10 + 8) = v11;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 16;
    swift_willThrow();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v13);
  }
  else
  {
    v20 = v23[43];
    v21 = v23[39];
    v18 = v23[38];
    v19 = v23[37];
    v22 = v23[35];
    v16 = v23[34];
    v17 = (uint64_t *)v23[32];
    (*(void (**)(void))(v18 + 32))();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 2));
    swift_retain();
    outlined init with copy of GlobalsProviding(v16 + 104, (uint64_t)(v23 + 7));
    swift_release();
    v15 = v23[10];
    v14 = v23[11];
    __swift_project_boxed_opaque_existential_1(v23 + 7, v15);
    (*(void (**)(uint64_t))(v14 + 16))(v15);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v22, 1);
    v23[17] = 0;
    v23[18] = 0;
    v23[19] = 0;
    v23[20] = 0;
    v23[21] = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v17[3] = type metadata accessor for AceOutput();
    v17[4] = MEMORY[0x24BE99088];
    __swift_allocate_boxed_opaque_existential_1(v17);
    static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v23 + 17));
    outlined destroy of NLContextUpdate?(v22);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 12));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v23 + 7));
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v19);
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v20);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v23[24] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 344);
  *(_QWORD *)(v0 + 192) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 192) + 8))();
}

uint64_t INRequestPaymentIntentResponseCode.speakable.getter()
{
  Swift::String v0;
  Swift::String v1;

  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v0);
  swift_bridgeObjectRelease();
  INBalanceType.rawValue.getter();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  String.init(stringInterpolation:)();
  return SpeakableString.init(print:speak:)();
}

uint64_t sub_247098C78()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INRequestPaymentIntent, INRequestPaymentIntentResponse>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  return implicit closure #1 in RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)();
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1 > 0)
  {
    type metadata accessor for SABaseCommand();
    v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = a1;
    return v1;
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
    swift_retain();
    return v3;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = a1;
    return v1;
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
    swift_retain();
    return v3;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1 > 0)
  {
    type metadata accessor for SAAceView();
    v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = a1;
    return v1;
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
    swift_retain();
    return v3;
  }
  return result;
}

uint64_t sub_247098E24()
{
  return swift_deallocObject();
}

uint64_t sub_247098E4C()
{
  return swift_deallocObject();
}

uint64_t sub_247098E74()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247098EB0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247098EEC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247098F28()
{
  return swift_deallocObject();
}

uint64_t sub_247098F50()
{
  return swift_deallocObject();
}

uint64_t sub_247098F78()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247098FB4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for RequestPaymentHandleIntentStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for RequestPaymentHandleIntentStrategy;
  if (!type metadata singleton initialization cache for RequestPaymentHandleIntentStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

unint64_t type metadata accessor for SABaseCommand()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SABaseCommand;
  if (!lazy cache variable for type metadata for SABaseCommand)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type INRequestPaymentIntentResponse and conformance NSObject()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type INRequestPaymentIntentResponse and conformance NSObject;
  if (!lazy protocol witness table cache variable for type INRequestPaymentIntentResponse and conformance NSObject)
  {
    v0 = type metadata accessor for INRequestPaymentIntentResponse();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BDD0240], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type INRequestPaymentIntentResponse and conformance NSObject);
    return v1;
  }
  return v3;
}

uint64_t PaymentAccountInformation.description.getter(unint64_t a1, void *a2, void *a3, unint64_t a4)
{
  Swift::String v4;
  Swift::String v5;
  id v6;
  uint64_t v7;
  Swift::String v8;
  id v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  char v24;
  char v25;
  char v26;
  char v27;

  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("balanceType: ", 0xDuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  v26 = static Constants.PaymentAccountBalanceType.fromINBalanceType(_:)(a1, 0);
  if (v26 == 4)
    v27 = 3;
  else
    v27 = v26;
  Constants.PaymentAccountBalanceType.rawValue.getter(v27);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\nnickname: ", 0xCuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  v6 = a2;
  if (a2)
  {
    v17 = objc_msgSend(a2, sel_spokenPhrase);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v7;

    v19 = v18;
  }
  else
  {
    v19 = 0;
  }
  if (!v19)
  {
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nil", 3uLL, 1);
    outlined destroy of String.UTF8View();
  }
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\norganizationName: ", 0x14uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  v9 = a3;
  if (a3)
  {
    v14 = objc_msgSend(a3, sel_spokenPhrase);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v10;

    v16 = v15;
  }
  else
  {
    v16 = 0;
  }
  if (!v16)
  {
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nil", 3uLL, 1);
    outlined destroy of String.UTF8View();
  }
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\ntype: ", 8uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v11);
  swift_bridgeObjectRelease();
  v24 = static Constants.PaymentAccountType.fromINAccountType(_:)(a4);
  if (v24 == 9)
    v25 = 0;
  else
    v25 = v24;
  Constants.PaymentAccountType.rawValue.getter(v25);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  return String.init(stringInterpolation:)();
}

NSJSONWritingOptions static PaymentAccountInformation.from(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  Class isa;
  Class v15;
  void *v16;
  Class v17;
  Class v18;
  objc_class *v19;
  objc_class *v20;
  char *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  id v27;
  _QWORD *v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t *v63;
  uint64_t *v64;
  _BYTE **v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint32_t v69;
  int v70;
  NSObject *v71;
  uint64_t v72;
  NSJSONWritingOptions v73;
  uint64_t v74;
  id v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE **v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  Class v86;
  Class v87;
  Swift::UInt v88;
  NSJSONWritingOptions v89;
  id v90;
  id v91;
  void *v92;
  _QWORD *v93;
  uint32_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  NSObject *v105;
  int v106;
  Swift::String v107;
  uint64_t v108;
  void *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  Swift::String v119;
  Swift::String v120;
  uint64_t v121;
  Swift::String v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(char *, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint8_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t *v134;
  uint64_t *v135;
  _BYTE **v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  unint64_t v145;
  char *v146;
  unint64_t v147;
  char *v148;
  _QWORD *v149;
  uint64_t v150;
  void (*v151)(char *, uint64_t, uint64_t);
  unint64_t v152;
  unint64_t v153;
  uint64_t *v154;
  unint64_t v155;
  uint32_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  NSObject *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE *v165;
  Swift::String v166;
  uint64_t v167;
  void *v168;
  uint64_t (*v169)(uint64_t, uint64_t, uint64_t);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _BYTE *v173[2];
  uint32_t v174;
  __int128 v175;
  __int128 v176;
  Class v177;
  Class v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _BYTE *v183[2];
  uint32_t v184;
  uint64_t v185;
  uint32_t v186;
  uint64_t v187;

  v142 = a1;
  v187 = 0;
  v141 = 0;
  v179 = 0;
  v175 = 0u;
  v176 = 0u;
  v167 = 0;
  v168 = 0;
  v166 = (Swift::String)0;
  v157 = 0;
  v150 = type metadata accessor for Logger();
  v149 = *(_QWORD **)(v150 - 8);
  v143 = (v149[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = MEMORY[0x24BDAC7A8](v142);
  v144 = (char *)&v53 - v143;
  v145 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v1);
  v146 = (char *)&v53 - v145;
  v147 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v53 - v147;
  v148 = (char *)&v53 - v147;
  v187 = v5;
  v7 = Logger.payments.unsafeMutableAddressor();
  v151 = (void (*)(char *, uint64_t, uint64_t))v149[2];
  v151(v6, v7, v150);
  v160 = Logger.logObject.getter();
  v159 = static os_log_type_t.debug.getter();
  v154 = &v185;
  v185 = 2;
  v152 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v153 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v155 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v156 = v186;
  v158 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v161 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v160, (os_log_type_t)v159))
  {
    v8 = v141;
    v130 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v128 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v129 = 0;
    v131 = createStorage<A>(capacity:type:)(0);
    v132 = createStorage<A>(capacity:type:)(v129);
    v136 = &v165;
    v165 = v130;
    v137 = &v164;
    v164 = v131;
    v134 = &v163;
    v163 = v132;
    v133 = 0;
    serialize(_:at:)(0, &v165);
    serialize(_:at:)(v133, v136);
    v162 = v161;
    v135 = &v53;
    MEMORY[0x24BDAC7A8](&v53);
    v9 = v137;
    v10 = &v53 - 6;
    v138 = &v53 - 6;
    v10[2] = (uint64_t)v136;
    v10[3] = (uint64_t)v9;
    v10[4] = v11;
    v139 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    v140 = v8;
    if (v8)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24701B000, v160, (os_log_type_t)v159, "#PaymentAccountInformation attempting to extract account search parameters", v130, v156);
      v126 = 0;
      destroyStorage<A>(_:count:)(v131, 0, v128);
      destroyStorage<A>(_:count:)(v132, v126, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v130, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
      v127 = v140;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v127 = v141;
  }
  v124 = v127;

  v125 = (void (*)(char *, uint64_t))v149[1];
  v125(v148, v150);
  v12 = swift_retain();
  if (v142)
  {
    v123 = v142;
    v121 = v142;
    v179 = v142;
    v178 = 0;
    v122._countAndFlagsBits = MEMORY[0x2495718B8](v12);
    v122._object = v13;
    if (v13)
    {
      v120 = v122;
      v119 = v122;
      v166 = v122;
      type metadata accessor for INSpeakableString();
      swift_bridgeObjectRetain();
      isa = INSpeakableString.__allocating_init(spokenPhrase:)(v119).super.isa;
      v15 = v178;
      v178 = isa;

      swift_bridgeObjectRelease();
    }
    v177 = 0;
    v118 = MEMORY[0x2495718AC]();
    if (v118)
    {
      v117 = v118;
      v112 = v118;
      v113 = MEMORY[0x249571780]();
      v114 = v16;
      swift_release();
      v115 = v113;
      v116 = v114;
    }
    else
    {
      v115 = 0;
      v116 = 0;
    }
    v110 = v116;
    v111 = v115;
    if (v116)
    {
      v108 = v111;
      v109 = v110;
      v107._object = v110;
      v107._countAndFlagsBits = v111;
      v167 = v111;
      v168 = v110;
      type metadata accessor for INSpeakableString();
      swift_bridgeObjectRetain();
      v17 = INSpeakableString.__allocating_init(spokenPhrase:)(v107).super.isa;
      v18 = v177;
      v177 = v17;

      swift_bridgeObjectRelease();
    }
    v88 = UsoEntity_common_PaymentAccount.balanceTypeAsINType.getter();
    v86 = v178;
    v19 = v178;
    v87 = v177;
    v20 = v177;
    UsoEntity_common_PaymentAccount.accountAsINType.getter();
    v21 = v146;
    v89 = NSJSONWritingOptions.init(rawValue:)(v88);
    v90 = v22;
    v91 = v23;
    v92 = v24;
    *(_QWORD *)&v175 = v89;
    *((_QWORD *)&v175 + 1) = v22;
    *(_QWORD *)&v176 = v23;
    *((_QWORD *)&v176 + 1) = v24;
    v25 = Logger.payments.unsafeMutableAddressor();
    v151(v21, v25, v150);
    v26 = v90;
    v27 = v91;
    v97 = 7;
    v28 = (_QWORD *)swift_allocObject();
    v29 = v90;
    v30 = v91;
    v31 = v92;
    v93 = v28;
    v28[2] = v89;
    v28[3] = v29;
    v28[4] = v30;
    v28[5] = v31;
    swift_retain();
    v96 = 32;
    v32 = swift_allocObject();
    v33 = v93;
    v98 = v32;
    *(_QWORD *)(v32 + 16) = partial apply for implicit closure #1 in static PaymentAccountInformation.from(_:);
    *(_QWORD *)(v32 + 24) = v33;
    swift_release();
    v105 = Logger.logObject.getter();
    v106 = static os_log_type_t.debug.getter();
    v173[1] = (_BYTE *)12;
    UnsignedInteger<>.init<A>(_:)();
    v94 = v174;
    v95 = 17;
    v100 = swift_allocObject();
    *(_BYTE *)(v100 + 16) = 32;
    v101 = swift_allocObject();
    *(_BYTE *)(v101 + 16) = 8;
    v34 = swift_allocObject();
    v35 = v98;
    v99 = v34;
    *(_QWORD *)(v34 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_0;
    *(_QWORD *)(v34 + 24) = v35;
    v36 = swift_allocObject();
    v37 = v99;
    v103 = v36;
    *(_QWORD *)(v36 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v36 + 24) = v37;
    v102 = _allocateUninitializedArray<A>(_:)();
    v104 = v38;
    swift_retain();
    v39 = v100;
    v40 = v104;
    *v104 = partial apply for closure #1 in OSLogArguments.append(_:);
    v40[1] = v39;
    swift_retain();
    v41 = v101;
    v42 = v104;
    v104[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v42[3] = v41;
    swift_retain();
    v43 = v103;
    v44 = v104;
    v104[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v44[5] = v43;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v105, (os_log_type_t)v106))
    {
      v45 = v124;
      v79 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v78 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v80 = createStorage<A>(capacity:type:)(0);
      v81 = createStorage<A>(capacity:type:)(1);
      v82 = v173;
      v173[0] = v79;
      v83 = &v172;
      v172 = v80;
      v84 = &v171;
      v171 = v81;
      serialize(_:at:)(2, v173);
      serialize(_:at:)(1, v82);
      v169 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v170 = v100;
      closure #1 in osLogInternal(_:log:type:)(&v169, (uint64_t)v82, (uint64_t)v83, (uint64_t)v84);
      v85 = v45;
      if (v45)
      {
        __break(1u);
      }
      else
      {
        v169 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v170 = v101;
        closure #1 in osLogInternal(_:log:type:)(&v169, (uint64_t)v173, (uint64_t)&v172, (uint64_t)&v171);
        v77 = 0;
        v169 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v170 = v103;
        closure #1 in osLogInternal(_:log:type:)(&v169, (uint64_t)v173, (uint64_t)&v172, (uint64_t)&v171);
        _os_log_impl(&dword_24701B000, v105, (os_log_type_t)v106, "#PaymentAccountInformation obtained the following parameters from the provided entity:\n%s", v79, v94);
        destroyStorage<A>(_:count:)(v80, 0, v78);
        destroyStorage<A>(_:count:)(v81, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v79, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    v125(v146, v150);
    outlined destroy of SFRichText?((id *)&v177);
    outlined destroy of SFRichText?((id *)&v178);
    swift_release();
    v73 = v89;
    v74 = (uint64_t)v90;
    v75 = v91;
    v76 = v92;
  }
  else
  {
    v46 = v144;
    v47 = Logger.payments.unsafeMutableAddressor();
    v151(v46, v47, v150);
    v71 = Logger.logObject.getter();
    v70 = static os_log_type_t.debug.getter();
    v183[1] = (_BYTE *)2;
    UnsignedInteger<>.init<A>(_:)();
    v69 = v184;
    v72 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v71, (os_log_type_t)v70))
    {
      v48 = v124;
      v59 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v58 = 0;
      v60 = createStorage<A>(capacity:type:)(0);
      v61 = createStorage<A>(capacity:type:)(v58);
      v65 = v183;
      v183[0] = v59;
      v66 = &v182;
      v182 = v60;
      v63 = &v181;
      v181 = v61;
      v62 = 0;
      serialize(_:at:)(0, v183);
      serialize(_:at:)(v62, v65);
      v180 = v72;
      v64 = &v53;
      MEMORY[0x24BDAC7A8](&v53);
      v49 = v66;
      v50 = &v53 - 6;
      v67 = &v53 - 6;
      v50[2] = (uint64_t)v65;
      v50[3] = (uint64_t)v49;
      v50[4] = v51;
      v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v48)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_24701B000, v71, (os_log_type_t)v70, "#PaymentAccountInformation entity provided was nil, early returning", v59, v69);
        v56 = 0;
        destroyStorage<A>(_:count:)(v60, 0, v57);
        destroyStorage<A>(_:count:)(v61, v56, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v59, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v55 = 0;
    v54 = 1;

    v125(v144, v150);
    v73 = (NSJSONWritingOptions)v55;
    v74 = v54;
    v75 = v55;
    v76 = v55;
  }
  return v73;
}

INSpeakableString __swiftcall INSpeakableString.__allocating_init(spokenPhrase:)(Swift::String spokenPhrase)
{
  id v1;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (INSpeakableString)@nonobjc INSpeakableString.init(spokenPhrase:)();
}

uint64_t implicit closure #1 in static PaymentAccountInformation.from(_:)@<X0>(id a1@<X1>, uint64_t a2@<X0>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  id v5;
  id v6;
  uint64_t result;

  v5 = a1;
  v6 = a3;
  result = a2;
  *a5 = a2;
  a5[1] = (uint64_t)a1;
  a5[2] = (uint64_t)a3;
  a5[3] = a4;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PaymentAccountInformation()
{
  uint64_t v0;

  return PaymentAccountInformation.description.getter(*(_QWORD *)v0, *(void **)(v0 + 8), *(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

id @nonobjc INSpeakableString.init(spokenPhrase:)()
{
  id v1;
  id v2;
  id v3;

  v2 = (id)MEMORY[0x24957220C]();
  v3 = objc_msgSend(v1, sel_initWithSpokenPhrase_);

  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_24709A98C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in static PaymentAccountInformation.from(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return implicit closure #1 in static PaymentAccountInformation.from(_:)(*(id *)(v1 + 24), *(_QWORD *)(v1 + 16), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_24709A9E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v1 = lazy protocol witness table accessor for type PaymentAccountInformation and conformance PaymentAccountInformation();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v4, v3, (uint64_t)&type metadata for PaymentAccountInformation, v1);
}

unint64_t lazy protocol witness table accessor for type PaymentAccountInformation and conformance PaymentAccountInformation()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PaymentAccountInformation and conformance PaymentAccountInformation;
  if (!lazy protocol witness table cache variable for type PaymentAccountInformation and conformance PaymentAccountInformation)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for PaymentAccountInformation, &type metadata for PaymentAccountInformation);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PaymentAccountInformation and conformance PaymentAccountInformation);
    return v0;
  }
  return v2;
}

uint64_t sub_24709AAD0()
{
  return swift_deallocObject();
}

uint64_t sub_24709AAF8()
{
  return swift_deallocObject();
}

uint64_t sub_24709AB20()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24709AB5C()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t type metadata accessor for INSpeakableString()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for INSpeakableString;
  if (!lazy cache variable for type metadata for INSpeakableString)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INSpeakableString);
    return ObjCClassMetadata;
  }
  return v2;
}

void destroy for PaymentAccountInformation(uint64_t a1)
{

}

_QWORD *initializeWithCopy for PaymentAccountInformation(_QWORD *a1, _QWORD *a2)
{
  id v2;
  id v3;
  _QWORD *result;
  void *v5;
  void *v6;

  *a1 = *a2;
  v5 = (void *)a2[1];
  v2 = v5;
  a1[1] = v5;
  v6 = (void *)a2[2];
  v3 = v6;
  result = a1;
  a1[2] = v6;
  a1[3] = a2[3];
  return result;
}

_QWORD *assignWithCopy for PaymentAccountInformation(_QWORD *a1, _QWORD *a2)
{
  id v2;
  id v3;
  _QWORD *result;
  void *v5;
  id v6;
  void *v7;
  id v8;

  *a1 = *a2;
  v6 = (id)a1[1];
  v5 = (void *)a2[1];
  v2 = v5;
  a1[1] = v5;

  v8 = (id)a1[2];
  v7 = (void *)a2[2];
  v3 = v7;
  a1[2] = v7;

  result = a1;
  a1[3] = a2[3];
  return result;
}

_QWORD *assignWithTake for PaymentAccountInformation(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  _QWORD *result;

  *a1 = *a2;
  v3 = (void *)a1[1];
  a1[1] = a2[1];

  v4 = (void *)a1[2];
  a1[2] = a2[2];

  result = a1;
  a1[3] = a2[3];
  return result;
}

uint64_t getEnumTagSinglePayload for PaymentAccountInformation(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFE && *(_BYTE *)(a1 + 32))
    {
      v5 = *(_QWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + 8) < 0x100000000uLL)
        v4 = *(_QWORD *)(a1 + 8);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PaymentAccountInformation(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PaymentAccountInformation()
{
  return &type metadata for PaymentAccountInformation;
}

uint64_t TemplatingResult.resultSectionsAsString.getter()
{
  uint64_t v1;

  TemplatingResult.sections.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TemplatingSection]);
  lazy protocol witness table accessor for type [TemplatingSection] and conformance [A]();
  Sequence.compactMap<A>(_:)();
  outlined destroy of [SFCardSection]();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v1 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  outlined destroy of [SFCardSection]();
  return v1;
}

uint64_t closure #1 in TemplatingResult.resultSectionsAsString.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a2;
  v15 = 0;
  v11 = type metadata accessor for TemplatingText();
  v9 = *(_QWORD *)(v11 - 8);
  v8 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v10 = (char *)&v7 - v8;
  v15 = a1;
  TemplatingSection.content.getter();
  v12 = TemplatingText.text.getter();
  v14 = v3;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v10, v11);
  result = v12;
  v5 = v13;
  v6 = v14;
  *v13 = v12;
  v5[1] = v6;
  return result;
}

unint64_t lazy protocol witness table accessor for type [TemplatingSection] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [TemplatingSection] and conformance [A];
  if (!lazy protocol witness table cache variable for type [TemplatingSection] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [TemplatingSection]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [TemplatingSection] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12B0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return v1;
  }
  return v3;
}

_QWORD *SearchForAccountsNeedsConfirmationStrategy.__allocating_init(globals:catFamily:commonLabelsProvider:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  return SearchForAccountsNeedsConfirmationStrategy.init(globals:catFamily:commonLabelsProvider:)(a1, a2, a3);
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.ttsEnabled.getter()
{
  uint64_t v0;
  char v2;
  _QWORD v3[6];

  v3[5] = 0;
  outlined init with copy of GlobalsProviding(v0 + 104, (uint64_t)v3);
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v2 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v3);
  return v2 & 1;
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.authenticationPolicy.getter()
{
  return static UnlockDevicePolicy.requiringDeviceUnlock.getter();
}

_QWORD *SearchForAccountsNeedsConfirmationStrategy.init(globals:catFamily:commonLabelsProvider:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v11;
  _BYTE v12[40];
  _BYTE v13[40];
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v15 = 0;
  v18 = a1;
  v17 = a2;
  v16 = a3;
  v5 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  (*(void (**)(uint64_t))(v4 + 24))(v5);
  outlined init with take of CommonLabelsProviding(v14, v11 + 7);
  v7 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  (*(void (**)(uint64_t))(v6 + 16))(v7);
  outlined init with take of CommonLabelsProviding(v13, v11 + 13);
  swift_retain();
  v11[12] = a2;
  outlined init with copy of GlobalsProviding(a3, (uint64_t)v12);
  outlined init with take of CommonLabelsProviding(v12, v11 + 2);
  __swift_destroy_boxed_opaque_existential_0(a3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v11;
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.actionForInput(_:resolveRecord:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[2];
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v11 = a3;
  v7[0] = a1;
  v7[1] = a2;
  v9 = v3;
  v17 = 0;
  v16 = 0;
  v15 = 0;
  v10 = 0;
  v14 = type metadata accessor for Parse();
  v12 = *(_QWORD *)(v14 - 8);
  v8 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v13 = (uint64_t)v7 - v8;
  v17 = v7[0];
  v16 = v4;
  v15 = v3;
  Input.parse.getter();
  v5 = type metadata accessor for INSearchForAccountsIntent();
  static FlowUtil.actionForInput(parse:intentType:)(v13, v5, (uint64_t)&protocol witness table for INSearchForAccountsIntent, v11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 792) = v3;
  *(_QWORD *)(v4 + 784) = a3;
  *(_QWORD *)(v4 + 776) = a2;
  *(_QWORD *)(v4 + 768) = a1;
  *(_QWORD *)(v4 + 632) = v4;
  *(_QWORD *)(v4 + 640) = 0;
  *(_QWORD *)(v4 + 648) = 0;
  *(_QWORD *)(v4 + 656) = 0;
  *(_QWORD *)(v4 + 520) = 0;
  *(_QWORD *)(v4 + 528) = 0;
  *(_BYTE *)(v4 + 984) = 0;
  *(_QWORD *)(v4 + 584) = 0;
  *(_QWORD *)(v4 + 592) = 0;
  *(_QWORD *)(v4 + 688) = 0;
  *(_QWORD *)(v4 + 696) = 0;
  *(_QWORD *)(v4 + 704) = 0;
  *(_QWORD *)(v4 + 600) = 0;
  *(_QWORD *)(v4 + 608) = 0;
  *(_QWORD *)(v4 + 720) = 0;
  *(_QWORD *)(v4 + 736) = 0;
  *(_QWORD *)(v4 + 744) = 0;
  *(_QWORD *)(v4 + 616) = 0;
  *(_QWORD *)(v4 + 624) = 0;
  *(_QWORD *)(v4 + 760) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(_QWORD *)(v4 + 800) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v4 + 808) = swift_task_alloc();
  *(_QWORD *)(v4 + 816) = swift_task_alloc();
  v5 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v4 + 824) = v5;
  *(_QWORD *)(v4 + 832) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 840) = swift_task_alloc();
  v6 = type metadata accessor for ParameterIdentifier();
  *(_QWORD *)(v4 + 848) = v6;
  *(_QWORD *)(v4 + 856) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 864) = swift_task_alloc();
  v7 = type metadata accessor for Logger();
  *(_QWORD *)(v4 + 872) = v7;
  *(_QWORD *)(v4 + 880) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 888) = swift_task_alloc();
  *(_QWORD *)(v4 + 896) = swift_task_alloc();
  *(_QWORD *)(v4 + 640) = a2;
  *(_QWORD *)(v4 + 648) = a3;
  *(_QWORD *)(v4 + 656) = v3;
  return swift_task_switch();
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  SiriPaymentsIntents::SearchForAccountsSlots_optional v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String rawValue;
  uint64_t v21;
  uint8_t *buf;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint32_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;

  v1 = *(_QWORD *)(v0 + 896);
  v26 = *(_QWORD *)(v0 + 880);
  v27 = *(_QWORD *)(v0 + 872);
  v28 = *(_QWORD *)(v0 + 776);
  *(_QWORD *)(v0 + 632) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v1, v2, v27);
  outlined init with copy of Any(v28, v0 + 296);
  v30 = swift_allocObject();
  outlined init with take of Any(v0 + 296, v30 + 16);
  v36 = Logger.logObject.getter();
  v37 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 664) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v29 = *(_DWORD *)(v0 + 988);
  v32 = swift_allocObject();
  *(_BYTE *)(v32 + 16) = 32;
  v33 = swift_allocObject();
  *(_BYTE *)(v33 + 16) = 8;
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = partial apply for implicit closure #2 in FlowFactory.findFlow(for:);
  *(_QWORD *)(v31 + 24) = v30;
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v34 + 24) = v31;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v35 = v3;
  swift_retain();
  *v35 = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[1] = v32;
  swift_retain();
  v35[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[3] = v33;
  swift_retain();
  v35[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[5] = v34;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v36, v37))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v23 = createStorage<A>(capacity:type:)(0);
    v24 = createStorage<A>(capacity:type:)(1);
    v38 = buf;
    v39 = v23;
    v40 = v24;
    serialize(_:at:)(2, &v38);
    serialize(_:at:)(1, &v38);
    v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v42 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v42 = v33;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v42 = v34;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    _os_log_impl(&dword_24701B000, v36, v37, "#SearchForAccountsNeedsConfirmationStrategy makePromptForConfirmation, itemToConfirm %s", buf, v29);
    destroyStorage<A>(_:count:)(v23, 0, v21);
    destroyStorage<A>(_:count:)(v24, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v15 = *(_QWORD *)(v25 + 896);
  v14 = *(_QWORD *)(v25 + 880);
  v16 = *(_QWORD *)(v25 + 872);
  v18 = *(_QWORD *)(v25 + 864);
  v17 = *(_QWORD *)(v25 + 856);
  v19 = *(_QWORD *)(v25 + 848);

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
  *(_QWORD *)(v25 + 904) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSearchForAccountsIntent>);
  ParameterResolutionRecord.parameter.getter();
  rawValue._countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v4;
  *(_QWORD *)(v25 + 912) = v4;
  *(_QWORD *)(v25 + 520) = rawValue._countAndFlagsBits;
  *(_QWORD *)(v25 + 528) = v4;
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
  swift_bridgeObjectRetain();
  v5.value = SearchForAccountsSlots.init(rawValue:)(rawValue).value;
  if (v5.value != SiriPaymentsIntents_SearchForAccountsSlots_unknownDefault)
  {
    *(SiriPaymentsIntents::SearchForAccountsSlots_optional *)(v25 + 984) = v5;
    *(_QWORD *)(v25 + 552) = 0;
    *(_QWORD *)(v25 + 560) = 0;
    __asm { BR              X8 }
  }
  swift_bridgeObjectRetain();
  *(_QWORD *)(v25 + 536) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v25 + 544) = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  type metadata accessor for INSearchForAccountsIntent();
  DefaultStringInterpolation.appendInterpolation(_:)();
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  v13 = String.init(stringInterpolation:)();
  v12 = v9;
  lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
  swift_allocError();
  *(Swift::String *)v10 = rawValue;
  *(_QWORD *)(v10 + 16) = v13;
  *(_QWORD *)(v10 + 24) = v12;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  *(_BYTE *)(v10 + 48) = 2;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v25 + 632) + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v5 = *v1 + 16;
  *(_QWORD *)(v2 + 632) = *v1;
  *(_QWORD *)(v2 + 944) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 800);
    outlined destroy of SpeakableString?(*(_QWORD *)(v5 + 792));
    outlined destroy of SpeakableString?(v4);
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[10];

  v3 = v0[99];
  v0[79] = v0;
  outlined init with copy of GlobalsProviding(v3 + 16, (uint64_t)(v0 + 17));
  outlined init with copy of GlobalsProviding(v3 + 104, (uint64_t)(v0 + 22));
  v4 = *(_QWORD *)(v3 + 96);
  swift_retain();
  v7[3] = type metadata accessor for SearchForAccountsCATs();
  v7[4] = &protocol witness table for SearchForAccountsCATs;
  v7[0] = v4;
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)(v0 + 17), (uint64_t)(v0 + 22), (uint64_t)v7, v0 + 2);
  v6 = ParameterResolutionRecord.app.getter();
  v0[119] = v6;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 960) = v1;
  *v1 = *(_QWORD *)(v5 + 632);
  v1[1] = SearchForAccountsNeedsConfirmationStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  return ConfirmationViewBuilder.makeTCCAcceptanceView(app:)(v6);
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  id v3;
  char has_malloc_size;
  uint64_t v5;
  _QWORD *v7;
  uint64_t *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = (id)v0[121];
  v12 = v0[105];
  v10 = v0[104];
  v11 = v0[103];
  v13 = v0[100];
  v1 = v0[99];
  v8 = (uint64_t *)v0[96];
  v0[79] = v0;
  v0[86] = v9;
  outlined init with copy of GlobalsProviding(v1 + 104, (uint64_t)(v0 + 27));
  SearchForAccountsNeedsConfirmationStrategy.ttsEnabled.getter();
  type metadata accessor for SAAceView();
  _allocateUninitializedArray<A>(_:)();
  v7 = v2;
  v3 = v9;
  *v7 = v9;
  _finalizeUninitializedArray<A>(_:)();
  has_malloc_size = _swift_stdlib_has_malloc_size();
  static PaymentsContextProvider.confirmationContextUpdate(isSend:)(has_malloc_size & 1, v13);
  v5 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v13, 0, 1);
  v0[32] = 0;
  v0[33] = 0;
  v0[34] = 0;
  v0[35] = 0;
  v0[36] = 0;
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v8[3] = type metadata accessor for AceOutput();
  v8[4] = MEMORY[0x24BE99088];
  __swift_allocate_boxed_opaque_existential_1(v8);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 32));
  outlined destroy of NLContextUpdate?(v13);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[79] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = v0[102];
  v1 = v0[101];
  v0[79] = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v3);
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[79] + 8))();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v0[105];
  v2 = v0[104];
  v3 = v0[103];
  v0[79] = v0;
  swift_release();
  outlined destroy of ConfirmationViewBuilder((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[79] + 8))();
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;

  v3 = (_QWORD *)*v2;
  v5 = *v2 + 16;
  v3[79] = *v2;
  v3[121] = a1;
  v3[122] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    outlined destroy of ConfirmationViewBuilder(v5);
  }
  return swift_task_switch();
}

uint64_t sub_24709DB60()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.parseConfirmationResponse(input:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[9] = a3;
  v4[8] = a2;
  v4[7] = a1;
  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v4[10] = swift_task_alloc();
  v5 = type metadata accessor for Parse();
  v4[11] = v5;
  v4[12] = *(_QWORD *)(v5 - 8);
  v4[13] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSearchForAccountsIntent>);
  v4[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[15] = v7;
  v4[16] = *(_QWORD *)(v7 + 64);
  v4[17] = swift_task_alloc();
  v8 = type metadata accessor for Logger();
  v4[18] = v8;
  v4[19] = *(_QWORD *)(v8 - 8);
  v4[20] = swift_task_alloc();
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return swift_task_switch();
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.parseConfirmationResponse(input:resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *buf;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint32_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 152);
  v18 = *(_QWORD *)(v0 + 144);
  v22 = *(_QWORD *)(v0 + 136);
  v20 = *(_QWORD *)(v0 + 120);
  v23 = *(_QWORD *)(v0 + 112);
  v19 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 16) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v1, v2, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v22, v19, v23);
  v21 = (*(unsigned __int8 *)(v20 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v25 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v20 + 32))(v25 + v21, v22, v23);
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 48) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v24 = *(_DWORD *)(v0 + 168);
  v27 = swift_allocObject();
  *(_BYTE *)(v27 + 16) = 32;
  v28 = swift_allocObject();
  *(_BYTE *)(v28 + 16) = 8;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for implicit closure #1 in SearchForAccountsNeedsConfirmationStrategy.parseConfirmationResponse(input:resolveRecord:);
  *(_QWORD *)(v26 + 24) = v25;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v29 + 24) = v26;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v30 = v3;
  swift_retain();
  *v30 = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[1] = v27;
  swift_retain();
  v30[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[3] = v28;
  swift_retain();
  v30[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[5] = v29;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v31, v32))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v14 = createStorage<A>(capacity:type:)(0);
    v15 = createStorage<A>(capacity:type:)(1);
    v33 = buf;
    v34 = v14;
    v35 = v15;
    serialize(_:at:)(2, &v33);
    serialize(_:at:)(1, &v33);
    v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v37 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v37 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v37 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    _os_log_impl(&dword_24701B000, v31, v32, "#SearchForAccountsNeedsConfirmationStrategy parseConfirmationResponse for intent %s", buf, v24);
    destroyStorage<A>(_:count:)(v14, 0, v12);
    destroyStorage<A>(_:count:)(v15, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v9 = v16[20];
  v5 = v16[19];
  v6 = v16[18];
  v10 = v16[13];
  v7 = v16[12];
  v8 = v16[11];
  v11 = v16[10];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v6);
  Input.parse.getter();
  Parse.confirmationResponse.getter(v11);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v8);
  ParameterResolutionRecord.intent.getter();
  type metadata accessor for INSearchForAccountsIntent();
  NeedsConfirmationAnswer.init(answeredValue:updatedIntent:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v16[2] + 8))();
}

uint64_t implicit closure #1 in SearchForAccountsNeedsConfirmationStrategy.parseConfirmationResponse(input:resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSearchForAccountsIntent>);
  ParameterResolutionRecord.intent.getter();
  type metadata accessor for INSearchForAccountsIntent();
  lazy protocol witness table accessor for type INSearchForAccountsIntent and conformance NSObject();
  return String.init<A>(describing:)();
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.deinit()
{
  uint64_t v0;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 104);
  return v2;
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.__deallocating_deinit()
{
  SearchForAccountsNeedsConfirmationStrategy.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.authenticationPolicy.getter in conformance SearchForAccountsNeedsConfirmationStrategy()
{
  return SearchForAccountsNeedsConfirmationStrategy.authenticationPolicy.getter();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SearchForAccountsNeedsConfirmationStrategy.actionForInput(_:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.parseConfirmationResponse(input:resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SearchForAccountsNeedsConfirmationStrategy.parseConfirmationResponse(input:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy;
  return NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:)();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy(unsigned int a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SearchForAccountsNeedsConfirmationStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:)();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return NeedsConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:resolveRecord:)();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return NeedsConfirmationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return NeedsConfirmationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse(app:intent:parameter:) in conformance SearchForAccountsNeedsConfirmationStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return NeedsConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse(app:intent:parameter:)();
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance SearchForAccountsNeedsConfirmationStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)();
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance SearchForAccountsNeedsConfirmationStrategy()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v3 = v0;
  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
  *v1 = *(_QWORD *)(v3 + 16);
  v1[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)();
}

uint64_t sub_24709EB2C()
{
  return swift_deallocObject();
}

uint64_t sub_24709EB54()
{
  return swift_deallocObject();
}

uint64_t sub_24709EB7C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24709EBB8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24709EBF4()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_24709EC30()
{
  return swift_deallocObject();
}

uint64_t sub_24709EC58()
{
  return swift_deallocObject();
}

uint64_t sub_24709EC80()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24709ECBC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24709ECF8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSearchForAccountsIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SearchForAccountsNeedsConfirmationStrategy.parseConfirmationResponse(input:resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSearchForAccountsIntent>);
  return implicit closure #1 in SearchForAccountsNeedsConfirmationStrategy.parseConfirmationResponse(input:resolveRecord:)();
}

uint64_t sub_24709EDA0()
{
  return swift_deallocObject();
}

uint64_t sub_24709EDC8()
{
  return swift_deallocObject();
}

uint64_t sub_24709EDF0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24709EE2C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for SearchForAccountsNeedsConfirmationStrategy()
{
  return objc_opt_self();
}

unint64_t base witness table accessor for ParameterResolutionHandlingAsync in SearchForAccountsNeedsConfirmationStrategy()
{
  return lazy protocol witness table accessor for type SearchForAccountsNeedsConfirmationStrategy and conformance SearchForAccountsNeedsConfirmationStrategy();
}

unint64_t lazy protocol witness table accessor for type INSearchForAccountsIntent and conformance NSObject()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type INSearchForAccountsIntent and conformance NSObject;
  if (!lazy protocol witness table cache variable for type INSearchForAccountsIntent and conformance NSObject)
  {
    v0 = type metadata accessor for INSearchForAccountsIntent();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BDD0240], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type INSearchForAccountsIntent and conformance NSObject);
    return v1;
  }
  return v3;
}

uint64_t SearchForAccountsViewBuilder.init(catFamily:deviceState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE v7[40];
  uint64_t v8;
  uint64_t v9;
  uint64_t __b[6];

  memset(__b, 0, sizeof(__b));
  v9 = a1;
  v8 = a2;
  swift_retain();
  __b[0] = a1;
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v7);
  outlined init with take of CommonLabelsProviding(v7, &__b[1]);
  outlined init with copy of SearchForAccountsViewBuilder(__b, a3);
  __swift_destroy_boxed_opaque_existential_0(a2);
  swift_release();
  return outlined destroy of SearchForAccountsViewBuilder((uint64_t)__b);
}

_QWORD *outlined init with copy of SearchForAccountsViewBuilder(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  swift_retain();
  *a2 = v4;
  v2 = a1[4];
  a2[4] = v2;
  a2[5] = a1[5];
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))((uint64_t)(a2 + 1), (uint64_t)(a1 + 1));
  return a2;
}

uint64_t outlined destroy of SearchForAccountsViewBuilder(uint64_t a1)
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a1 + 8);
  return a1;
}

uint64_t SearchForAccountsViewBuilder.buildSnippets(for:app:intent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[15] = v3;
  v4[14] = a3;
  v4[13] = a2;
  v4[12] = a1;
  v4[7] = v4;
  v4[8] = 0;
  v4[9] = 0;
  v4[10] = 0;
  v4[11] = 0;
  v4[8] = a1;
  v4[9] = a2;
  v4[10] = a3;
  v4[11] = v3;
  return swift_task_switch();
}

uint64_t SearchForAccountsViewBuilder.buildSnippets(for:app:intent:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  char v5;

  v1 = v0[15];
  v0[7] = v0;
  outlined init with copy of GlobalsProviding(v1 + 8, (uint64_t)(v0 + 2));
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  v5 = dispatch thunk of DeviceState.isWatch.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  v2 = (_QWORD *)swift_task_alloc();
  if ((v5 & 1) != 0)
  {
    v4[16] = v2;
    *v2 = v4[7];
    v2[1] = SearchForAccountsViewBuilder.buildSnippets(for:app:intent:);
    return SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)(v4[12], v4[13], v4[14]);
  }
  else
  {
    v4[17] = v2;
    *v2 = v4[7];
    v2[1] = SearchForAccountsViewBuilder.buildSnippets(for:app:intent:);
    return SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:)(v4[12], v4[13]);
  }
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 56) = v0;
  type metadata accessor for SACardSnippet();
  type metadata accessor for SAAceView();
  v2 = _arrayForceCast<A, B>(_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 56) + 8))(v2);
}

_QWORD *SearchForAccountsViewBuilder.buildSnippets(for:app:intent:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 56) = *v2;
  v7 = (_QWORD *)(v3 + 56);
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v4);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v3 = *v2;
  *(_QWORD *)(v3 + 56) = *v2;
  v6 = (_QWORD *)(v3 + 56);
  *(_QWORD *)(v3 + 144) = a1;
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v6 + 8))(v6, v4);
  else
    return (_QWORD *)swift_task_switch();
}

uint64_t SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[47] = v3;
  v4[46] = a3;
  v4[45] = a2;
  v4[44] = a1;
  v4[14] = v4;
  v4[15] = 0;
  v4[16] = 0;
  v4[17] = 0;
  v4[18] = 0;
  v4[21] = 0;
  v4[2] = 0;
  v4[3] = 0;
  v4[25] = 0;
  v4[26] = 0;
  v4[27] = 0;
  v4[28] = 0;
  v4[4] = 0;
  v4[5] = 0;
  v4[6] = 0;
  v4[7] = 0;
  v4[8] = 0;
  v4[9] = 0;
  v4[10] = 0;
  v4[11] = 0;
  v4[33] = 0;
  v4[34] = 0;
  v4[36] = 0;
  v4[12] = 0;
  v4[13] = 0;
  v5 = type metadata accessor for Logger();
  v4[48] = v5;
  v4[49] = *(_QWORD *)(v5 - 8);
  v4[50] = swift_task_alloc();
  v4[51] = swift_task_alloc();
  v4[52] = swift_task_alloc();
  v4[53] = swift_task_alloc();
  v4[15] = a1;
  v4[16] = a2;
  v4[17] = a3;
  v4[18] = v3;
  return swift_task_switch();
}

uint64_t SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  _QWORD *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  _QWORD *v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  _QWORD *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  id v42;
  uint64_t v43;
  uint32_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  _QWORD *v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t, uint64_t);
  id v90;
  uint64_t v91;
  uint32_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  NSObject *log;
  os_log_type_t v100;
  uint64_t v101;
  uint64_t v102;
  Class v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint8_t *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint32_t v118;
  os_log_type_t v119;
  NSObject *oslog;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t);
  id v126;
  Class isa;
  uint64_t v128;
  uint8_t *buf;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint32_t size;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  NSObject *v144;
  os_log_type_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint8_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t (*v152)(uint64_t, uint64_t, uint64_t);
  uint64_t v153;
  uint8_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t (*v157)(uint64_t, uint64_t, uint64_t);
  uint64_t v158;
  uint64_t v159;
  uint8_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t (*v163)(uint64_t, uint64_t, uint64_t);
  uint64_t v164;

  v147 = v0[44];
  v0[14] = v0;
  swift_bridgeObjectRetain();
  v0[19] = v147;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPaymentAccount]);
  lazy protocol witness table accessor for type [INPaymentAccount] and conformance [A]();
  v148 = Collection.isEmpty.getter();
  outlined destroy of [SFCardSection]();
  if ((v148 & 1) != 0)
  {
    type metadata accessor for SAAceView();
    v83 = _allocateUninitializedArray<A>(_:)();
LABEL_52:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v146 + 112) + 8))(v83);
  }
  v1 = *(_QWORD *)(v146 + 424);
  v132 = *(_QWORD *)(v146 + 392);
  v133 = *(_QWORD *)(v146 + 384);
  v135 = *(_QWORD *)(v146 + 352);
  v2 = Logger.payments.unsafeMutableAddressor();
  v134 = *(void (**)(uint64_t, uint64_t, uint64_t))(v132 + 16);
  *(_QWORD *)(v146 + 432) = v134;
  v134(v1, v2, v133);
  swift_bridgeObjectRetain();
  v136 = swift_allocObject();
  *(_QWORD *)(v136 + 16) = v135;
  swift_retain();
  v138 = swift_allocObject();
  *(_QWORD *)(v138 + 16) = partial apply for implicit closure #1 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
  *(_QWORD *)(v138 + 24) = v136;
  swift_release();
  v144 = Logger.logObject.getter();
  v145 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v146 + 160) = 12;
  *(_QWORD *)(v146 + 440) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v146 + 448) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v146 + 456) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v146 + 632);
  v140 = swift_allocObject();
  *(_BYTE *)(v140 + 16) = 32;
  v141 = swift_allocObject();
  *(_BYTE *)(v141 + 16) = 8;
  v139 = swift_allocObject();
  *(_QWORD *)(v139 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_1;
  *(_QWORD *)(v139 + 24) = v138;
  v142 = swift_allocObject();
  *(_QWORD *)(v142 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v142 + 24) = v139;
  *(_QWORD *)(v146 + 464) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v143 = v3;
  swift_retain();
  *v143 = partial apply for closure #1 in OSLogArguments.append(_:);
  v143[1] = v140;
  swift_retain();
  v143[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v143[3] = v141;
  swift_retain();
  v143[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v143[5] = v142;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v144, v145))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v128 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v130 = createStorage<A>(capacity:type:)(0);
    v131 = createStorage<A>(capacity:type:)(1);
    v160 = buf;
    v161 = v130;
    v162 = v131;
    serialize(_:at:)(2, &v160);
    serialize(_:at:)(1, &v160);
    v163 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v164 = v140;
    closure #1 in osLogInternal(_:log:type:)(&v163, (uint64_t)&v160, (uint64_t)&v161, (uint64_t)&v162);
    v163 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v164 = v141;
    closure #1 in osLogInternal(_:log:type:)(&v163, (uint64_t)&v160, (uint64_t)&v161, (uint64_t)&v162);
    v163 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v164 = v142;
    closure #1 in osLogInternal(_:log:type:)(&v163, (uint64_t)&v160, (uint64_t)&v161, (uint64_t)&v162);
    _os_log_impl(&dword_24701B000, v144, v145, "#SearchForAccountsHandleIntentStrategy buildWatchSnippets for accounts %s", buf, size);
    destroyStorage<A>(_:count:)(v130, 0, v128);
    destroyStorage<A>(_:count:)(v131, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v123 = *(_QWORD *)(v146 + 424);
  v122 = *(_QWORD *)(v146 + 392);
  v124 = *(_QWORD *)(v146 + 384);

  v125 = *(void (**)(uint64_t, uint64_t))(v122 + 8);
  *(_QWORD *)(v146 + 472) = v125;
  v125(v123, v124);
  type metadata accessor for SASTItemGroup();
  v126 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v146 + 480) = v126;
  *(_QWORD *)(v146 + 168) = v126;
  *(_QWORD *)(v146 + 488) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
  _allocateUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v126, sel_setTemplateItems_, isa);

  if (App.isFirstParty.getter())
  {
    v4 = *(_QWORD *)(v146 + 416);
    v117 = *(_QWORD *)(v146 + 384);
    v5 = Logger.payments.unsafeMutableAddressor();
    v134(v4, v5, v117);
    oslog = Logger.logObject.getter();
    v119 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v146 + 232) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v118 = *(_DWORD *)(v146 + 640);
    v121 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v119))
    {
      v113 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v112 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v114 = createStorage<A>(capacity:type:)(0);
      v115 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v146 + 320) = v113;
      *(_QWORD *)(v146 + 328) = v114;
      *(_QWORD *)(v146 + 336) = v115;
      serialize(_:at:)(0, (_BYTE **)(v146 + 320));
      serialize(_:at:)(0, (_BYTE **)(v146 + 320));
      *(_QWORD *)(v146 + 344) = v121;
      v116 = (_QWORD *)swift_task_alloc();
      v116[2] = v146 + 320;
      v116[3] = v146 + 328;
      v116[4] = v146 + 336;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24701B000, oslog, v119, "#SearchForAccountsHandleIntentStrategy buildWatchSnippets for Wallet", v113, v118);
      destroyStorage<A>(_:count:)(v114, 0, v112);
      destroyStorage<A>(_:count:)(v115, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v113, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v108 = *(_QWORD *)(v146 + 416);
    v109 = *(_QWORD *)(v146 + 384);

    v125(v108, v109);
    v110 = App.appIdentifier.getter();
    v111 = v6;
    if (v6)
    {
      v106 = *(id *)(v146 + 368);
      *(_QWORD *)(v146 + 96) = v110;
      *(_QWORD *)(v146 + 104) = v6;
      type metadata accessor for SASTApplicationBannerItem();
      v7 = v106;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v146 + 312) = SASTApplicationBannerItem.init(intent:appId:)(v106, v110, v111);
      v107 = objc_msgSend(v126, sel_templateItems);
      if (v107)
      {
        v104 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v105 = v104;
      }
      else
      {
        v105 = 0;
      }
      v159 = v105;
      if (!v105)
        return _assertionFailure(_:_:file:line:flags:)();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SASTTemplateItem]);
      Array.append(_:)();
      v103 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v126, sel_setTemplateItems_);

      swift_bridgeObjectRelease();
    }
    v101 = *(_QWORD *)(v146 + 352);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v146 + 240) = v101;
    Collection<>.makeIterator()();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexingIterator<[INPaymentAccount]>);
    IndexingIterator.next()();
    v102 = *(_QWORD *)(v146 + 248);
    *(_QWORD *)(v146 + 496) = v102;
    if (v102)
    {
      *(_QWORD *)(v146 + 264) = v102;
      v9 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v146 + 504) = v9;
      *v9 = *(_QWORD *)(v146 + 112);
      v9[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
      return SearchForAccountsViewBuilder.makeTemplateAction(for:app:)(v102, *(_QWORD *)(v146 + 360));
    }
    v90 = *(id *)(v146 + 480);
    v89 = *(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 432);
    v10 = *(_QWORD *)(v146 + 408);
    v88 = *(_QWORD *)(v146 + 384);
    outlined destroy of [SFCardSection]();
    v11 = Logger.payments.unsafeMutableAddressor();
    v89(v10, v11, v88);
    v12 = v90;
    v91 = swift_allocObject();
    *(_QWORD *)(v91 + 16) = v90;
    swift_retain();
    v93 = swift_allocObject();
    *(_QWORD *)(v93 + 16) = partial apply for implicit closure #2 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
    *(_QWORD *)(v93 + 24) = v91;
    swift_release();
    log = Logger.logObject.getter();
    v100 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v146 + 256) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v92 = *(_DWORD *)(v146 + 644);
    v95 = swift_allocObject();
    *(_BYTE *)(v95 + 16) = 32;
    v96 = swift_allocObject();
    *(_BYTE *)(v96 + 16) = 8;
    v94 = swift_allocObject();
    *(_QWORD *)(v94 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
    *(_QWORD *)(v94 + 24) = v93;
    v97 = swift_allocObject();
    *(_QWORD *)(v97 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v97 + 24) = v94;
    _allocateUninitializedArray<A>(_:)();
    v98 = v13;
    swift_retain();
    *v98 = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[1] = v95;
    swift_retain();
    v98[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[3] = v96;
    swift_retain();
    v98[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[5] = v97;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v100))
    {
      v85 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v84 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v86 = createStorage<A>(capacity:type:)(0);
      v87 = createStorage<A>(capacity:type:)(1);
      v154 = v85;
      v155 = v86;
      v156 = v87;
      serialize(_:at:)(2, &v154);
      serialize(_:at:)(1, &v154);
      v157 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v158 = v95;
      closure #1 in osLogInternal(_:log:type:)(&v157, (uint64_t)&v154, (uint64_t)&v155, (uint64_t)&v156);
      v157 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v158 = v96;
      closure #1 in osLogInternal(_:log:type:)(&v157, (uint64_t)&v154, (uint64_t)&v155, (uint64_t)&v156);
      v157 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v158 = v97;
      closure #1 in osLogInternal(_:log:type:)(&v157, (uint64_t)&v154, (uint64_t)&v155, (uint64_t)&v156);
      _os_log_impl(&dword_24701B000, log, v100, "#SearchForAccountsHandleIntentStrategy buildWatchSnippets for Wallet items %s", v85, v92);
      destroyStorage<A>(_:count:)(v86, 0, v84);
      destroyStorage<A>(_:count:)(v87, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v85, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v82 = *(id *)(v146 + 480);
    v79 = *(void (**)(uint64_t, uint64_t))(v146 + 472);
    v77 = *(_QWORD *)(v146 + 408);
    v78 = *(_QWORD *)(v146 + 384);

    v79(v77, v78);
    type metadata accessor for SAAceView();
    v81 = _allocateUninitializedArray<A>(_:)();
    v80 = v14;
    v15 = v82;
    *v80 = v82;
    _finalizeUninitializedArray<A>(_:)();

    v83 = v81;
    goto LABEL_52;
  }
  v75 = *(_QWORD *)(v146 + 352);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v146 + 176) = v75;
  Collection<>.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexingIterator<[INPaymentAccount]>);
  IndexingIterator.next()();
  v76 = *(void **)(v146 + 184);
  *(_QWORD *)(v146 + 528) = v76;
  if (!v76)
  {
    v42 = *(id *)(v146 + 480);
    v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 432);
    v24 = *(_QWORD *)(v146 + 400);
    v40 = *(_QWORD *)(v146 + 384);
    outlined destroy of [SFCardSection]();
    v25 = Logger.payments.unsafeMutableAddressor();
    v41(v24, v25, v40);
    v26 = v42;
    v43 = swift_allocObject();
    *(_QWORD *)(v43 + 16) = v42;
    swift_retain();
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = partial apply for implicit closure #3 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
    *(_QWORD *)(v45 + 24) = v43;
    swift_release();
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v146 + 192) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v44 = *(_DWORD *)(v146 + 636);
    v47 = swift_allocObject();
    *(_BYTE *)(v47 + 16) = 32;
    v48 = swift_allocObject();
    *(_BYTE *)(v48 + 16) = 8;
    v46 = swift_allocObject();
    *(_QWORD *)(v46 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
    *(_QWORD *)(v46 + 24) = v45;
    v49 = swift_allocObject();
    *(_QWORD *)(v49 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v49 + 24) = v46;
    _allocateUninitializedArray<A>(_:)();
    v50 = v27;
    swift_retain();
    *v50 = partial apply for closure #1 in OSLogArguments.append(_:);
    v50[1] = v47;
    swift_retain();
    v50[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v50[3] = v48;
    swift_retain();
    v50[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v50[5] = v49;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v51, v52))
    {
      v37 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v38 = createStorage<A>(capacity:type:)(0);
      v39 = createStorage<A>(capacity:type:)(1);
      v149 = v37;
      v150 = v38;
      v151 = v39;
      serialize(_:at:)(2, &v149);
      serialize(_:at:)(1, &v149);
      v152 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v153 = v47;
      closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)&v149, (uint64_t)&v150, (uint64_t)&v151);
      v152 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v153 = v48;
      closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)&v149, (uint64_t)&v150, (uint64_t)&v151);
      v152 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v153 = v49;
      closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)&v149, (uint64_t)&v150, (uint64_t)&v151);
      _os_log_impl(&dword_24701B000, v51, v52, "#SearchForAccountsHandleIntentStrategy buildWatchSnippets itemGroup items %s", v37, v44);
      destroyStorage<A>(_:count:)(v38, 0, v36);
      destroyStorage<A>(_:count:)(v39, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v37, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v35 = *(id *)(v146 + 480);
    v32 = *(void (**)(uint64_t, uint64_t))(v146 + 472);
    v30 = *(_QWORD *)(v146 + 400);
    v31 = *(_QWORD *)(v146 + 384);

    v32(v30, v31);
    type metadata accessor for SAAceView();
    v34 = _allocateUninitializedArray<A>(_:)();
    v33 = v28;
    v29 = v35;
    *v33 = v35;
    _finalizeUninitializedArray<A>(_:)();

    v83 = v34;
    goto LABEL_52;
  }
  *(_QWORD *)(v146 + 200) = v76;
  type metadata accessor for SASTColumnDataListItem();
  v16 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v146 + 536) = v16;
  *(_QWORD *)(v146 + 208) = v16;
  *(_QWORD *)(v146 + 544) = type metadata accessor for SAUIDecoratedText();
  v73 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v146 + 552) = v73;
  *(_QWORD *)(v146 + 216) = v73;
  *(_QWORD *)(v146 + 224) = SAUIAppPunchOut.__allocating_init()();
  v17 = objc_msgSend(v76, sel_organizationName);
  v74 = v17;
  if (v17)
  {
    v68 = objc_msgSend(v17, sel_spokenPhrase);
    v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v70 = v18;

    v71 = v69;
    v72 = v70;
  }
  else
  {
    v71 = 0;
    v72 = 0;
  }
  *(_QWORD *)(v146 + 560) = v72;
  if (v72)
  {
    *(_QWORD *)(v146 + 64) = v71;
    *(_QWORD *)(v146 + 72) = v72;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v67 = (id)MEMORY[0x24957220C](v71, v72);
      swift_bridgeObjectRelease();
      objc_msgSend(v73, sel_setText_, v67);

      v19 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v146 + 568) = v19;
      *v19 = *(_QWORD *)(v146 + 112);
      v19[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
      return SearchForAccountsViewBuilder.fillWatchLabelForAccountIfNeeded(account:label:)((uint64_t)v76, v146 + 224);
    }
    swift_bridgeObjectRelease();
  }
  v66 = objc_msgSend(v76, sel_nickname);
  if (v66)
  {
    v61 = objc_msgSend(v66, sel_spokenPhrase);
    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v63 = v20;

    v64 = v62;
    v65 = v63;
  }
  else
  {
    v64 = 0;
    v65 = 0;
  }
  *(_QWORD *)(v146 + 584) = v65;
  if (v65)
  {
    *(_QWORD *)(v146 + 48) = v64;
    *(_QWORD *)(v146 + 56) = v65;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v60 = (id)MEMORY[0x24957220C](v64, v65);
      swift_bridgeObjectRelease();
      objc_msgSend(v73, sel_setText_, v60);

      v21 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v146 + 592) = v21;
      *v21 = *(_QWORD *)(v146 + 112);
      v21[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
      return SearchForAccountsViewBuilder.fillWatchLabelForAccountIfNeeded(account:label:)((uint64_t)v76, v146 + 224);
    }
    swift_bridgeObjectRelease();
  }
  v59 = objc_msgSend(v76, sel_accountNumber);
  if (v59)
  {
    v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v56 = v22;

    v57 = v55;
    v58 = v56;
  }
  else
  {
    v57 = 0;
    v58 = 0;
  }
  if (v58)
  {
    *(_QWORD *)(v146 + 32) = v57;
    *(_QWORD *)(v146 + 40) = v58;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v54 = (id)MEMORY[0x24957220C](v57, v58);
      swift_bridgeObjectRelease();
      objc_msgSend(v73, sel_setText_, v54);

    }
    swift_bridgeObjectRelease();
  }
  v53 = *(_QWORD *)(v146 + 528);
  v23 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v146 + 608) = v23;
  *v23 = *(_QWORD *)(v146 + 112);
  v23[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
  return SearchForAccountsViewBuilder.makeTemplateAction(for:app:)(v53, *(_QWORD *)(v146 + 360));
}

{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  uint64_t result;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  _QWORD *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint8_t *buf;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  id v23;
  uint64_t v24;
  uint32_t size;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  NSObject *oslog;
  os_log_type_t v33;
  id v34;
  id v35;
  id v36;
  Class isa;
  Class v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;

  v1 = (void *)v0[64];
  v0[14] = v0;
  v0[34] = v1;
  v0[35] = objc_msgSend(v1, sel_itemGroupView);
  if (v0[35])
  {
    v46 = *(void **)(v50 + 280);
    v4 = v46;
    outlined destroy of SFRichText?((id *)(v50 + 280));
    v47 = objc_msgSend(v46, sel_templateItems);
    if (v47)
    {
      v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v45 = v44;
    }
    else
    {
      v45 = 0;
    }

    v43 = v45;
  }
  else
  {
    outlined destroy of SFRichText?((id *)(v50 + 280));
    v43 = 0;
  }
  if (v43)
  {
    v41 = *(id *)(v50 + 480);
    *(_QWORD *)(v50 + 288) = v43;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v50 + 296) = v43;
    v42 = objc_msgSend(v41, sel_templateItems);
    if (v42)
    {
      v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v40 = v39;
    }
    else
    {
      v40 = 0;
    }
    *(_QWORD *)(v50 + 304) = v40;
    if (!*(_QWORD *)(v50 + 304))
      return _assertionFailure(_:_:file:line:flags:)();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SASTTemplateItem]);
    lazy protocol witness table accessor for type [SASTTemplateItem] and conformance [A]();
    Array.append<A>(contentsOf:)();
    if (*(_QWORD *)(v50 + 304))
    {
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v38 = isa;
    }
    else
    {
      v38 = 0;
    }
    v35 = *(id *)(v50 + 512);
    v36 = *(id *)(v50 + 496);
    objc_msgSend(*(id *)(v50 + 480), sel_setTemplateItems_);

    swift_bridgeObjectRelease();
    v48 = *(_QWORD *)(v50 + 520);
  }
  else
  {
    v34 = *(id *)(v50 + 496);

    v48 = *(_QWORD *)(v50 + 520);
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexingIterator<[INPaymentAccount]>);
  IndexingIterator.next()();
  v49 = *(_QWORD *)(v50 + 248);
  *(_QWORD *)(v50 + 496) = v49;
  if (v49)
  {
    *(_QWORD *)(v50 + 264) = v49;
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v50 + 504) = v2;
    *v2 = *(_QWORD *)(v50 + 112);
    v2[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
    return SearchForAccountsViewBuilder.makeTemplateAction(for:app:)(v49, *(_QWORD *)(v50 + 360));
  }
  v23 = *(id *)(v50 + 480);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 432);
  v5 = *(_QWORD *)(v50 + 408);
  v21 = *(_QWORD *)(v50 + 384);
  outlined destroy of [SFCardSection]();
  v6 = Logger.payments.unsafeMutableAddressor();
  v22(v5, v6, v21);
  v7 = v23;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v23;
  swift_retain();
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for implicit closure #2 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
  *(_QWORD *)(v26 + 24) = v24;
  swift_release();
  oslog = Logger.logObject.getter();
  v33 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v50 + 256) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v50 + 644);
  v28 = swift_allocObject();
  *(_BYTE *)(v28 + 16) = 32;
  v29 = swift_allocObject();
  *(_BYTE *)(v29 + 16) = 8;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
  *(_QWORD *)(v27 + 24) = v26;
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v30 + 24) = v27;
  _allocateUninitializedArray<A>(_:)();
  v31 = v8;
  swift_retain();
  *v31 = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[1] = v28;
  swift_retain();
  v31[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[3] = v29;
  swift_retain();
  v31[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[5] = v30;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(oslog, v33))
  {
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_25;
  }
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
  v19 = createStorage<A>(capacity:type:)(0);
  v20 = createStorage<A>(capacity:type:)(1);
  v51 = buf;
  v52 = v19;
  v53 = v20;
  serialize(_:at:)(2, &v51);
  serialize(_:at:)(1, &v51);
  v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v55 = v28;
  result = closure #1 in osLogInternal(_:log:type:)(&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
  if (!v48)
  {
    v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v55 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v55 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    _os_log_impl(&dword_24701B000, oslog, v33, "#SearchForAccountsHandleIntentStrategy buildWatchSnippets for Wallet items %s", buf, size);
    destroyStorage<A>(_:count:)(v19, 0, v17);
    destroyStorage<A>(_:count:)(v20, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
LABEL_25:
    v16 = *(id *)(v50 + 480);
    v13 = *(void (**)(uint64_t, uint64_t))(v50 + 472);
    v11 = *(_QWORD *)(v50 + 408);
    v12 = *(_QWORD *)(v50 + 384);

    v13(v11, v12);
    type metadata accessor for SAAceView();
    v15 = _allocateUninitializedArray<A>(_:)();
    v14 = v9;
    v10 = v16;
    *v14 = v16;
    _finalizeUninitializedArray<A>(_:)();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v50 + 112) + 8))(v15);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 112) = *v1;
  *(_QWORD *)(v2 + 576) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)(v0 + 112) = v0;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v0 + 528);
  v1 = (_QWORD *)swift_task_alloc();
  v3[76] = v1;
  *v1 = v3[14];
  v1[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
  return SearchForAccountsViewBuilder.makeTemplateAction(for:app:)(v4, v3[45]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 112) = *v1;
  *(_QWORD *)(v2 + 600) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)(v0 + 112) = v0;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v0 + 528);
  v1 = (_QWORD *)swift_task_alloc();
  v3[76] = v1;
  *v1 = v3[14];
  v1[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
  return SearchForAccountsViewBuilder.makeTemplateAction(for:app:)(v4, v3[45]);
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  _QWORD *v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  _QWORD *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint8_t *buf;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  id v35;
  uint64_t v36;
  uint32_t size;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  NSObject *oslog;
  os_log_type_t v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  Class isa;
  Class v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  void *v83;
  uint64_t v84;
  void *v85;
  id v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;

  v1 = (void *)v0[67];
  v0[14] = v0;
  objc_msgSend(v1, sel_setAction_);
  swift_unknownObjectRelease();
  v85 = (void *)v0[28];
  v2 = v85;
  v86 = objc_msgSend(v85, sel_text);
  if (v86)
  {
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v58 = v12;

    v59 = v57;
    v60 = v58;
  }
  else
  {
    v59 = 0;
    v60 = 0;
  }

  v56 = Optional<A>.isNilOrEmpty.getter(v59, v60);
  swift_bridgeObjectRelease();
  if ((v56 & 1) != 0)
  {
    v55 = _allocateUninitializedArray<A>(_:)();
  }
  else
  {
    v54 = _allocateUninitializedArray<A>(_:)();
    v52 = v13;
    v53 = *(void **)(v84 + 224);
    v14 = v53;
    *v52 = v53;
    _finalizeUninitializedArray<A>(_:)();
    v55 = v54;
  }
  if (v55)
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v51 = isa;
  }
  else
  {
    v51 = 0;
  }
  v46 = *(id *)(v84 + 552);
  v47 = *(id *)(v84 + 536);
  v48 = *(id *)(v84 + 528);
  objc_msgSend(v47, sel_setDecoratedRows_);

  v15 = v46;
  objc_msgSend(v47, sel_setTitle_, v46);

  v16 = v47;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v47, (uint64_t)&protocol witness table for SASTColumnDataListItem);
  swift_unknownObjectRelease();

  v49 = *(_QWORD *)(v84 + 624);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexingIterator<[INPaymentAccount]>);
  IndexingIterator.next()();
  v81 = *(void **)(v84 + 184);
  *(_QWORD *)(v84 + 528) = v81;
  if (v81)
  {
    *(_QWORD *)(v84 + 200) = v81;
    type metadata accessor for SASTColumnDataListItem();
    v3 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v84 + 536) = v3;
    *(_QWORD *)(v84 + 208) = v3;
    *(_QWORD *)(v84 + 544) = type metadata accessor for SAUIDecoratedText();
    v82 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v84 + 552) = v82;
    *(_QWORD *)(v84 + 216) = v82;
    *(_QWORD *)(v84 + 224) = SAUIAppPunchOut.__allocating_init()();
    v4 = objc_msgSend(v81, sel_organizationName);
    v83 = v4;
    if (v4)
    {
      v76 = objc_msgSend(v4, sel_spokenPhrase);
      v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v78 = v5;

      v79 = v77;
      v80 = v78;
    }
    else
    {
      v79 = 0;
      v80 = 0;
    }
    *(_QWORD *)(v84 + 560) = v80;
    if (v80)
    {
      *(_QWORD *)(v84 + 64) = v79;
      *(_QWORD *)(v84 + 72) = v80;
      if ((String.isEmpty.getter() & 1) == 0)
      {
        swift_bridgeObjectRetain();
        v75 = (id)MEMORY[0x24957220C](v79, v80);
        swift_bridgeObjectRelease();
        objc_msgSend(v82, sel_setText_, v75);

        v6 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v84 + 568) = v6;
        *v6 = *(_QWORD *)(v84 + 112);
        v6[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
        return SearchForAccountsViewBuilder.fillWatchLabelForAccountIfNeeded(account:label:)((uint64_t)v81, v84 + 224);
      }
      swift_bridgeObjectRelease();
    }
    v74 = objc_msgSend(v81, sel_nickname);
    if (v74)
    {
      v69 = objc_msgSend(v74, sel_spokenPhrase);
      v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v71 = v7;

      v72 = v70;
      v73 = v71;
    }
    else
    {
      v72 = 0;
      v73 = 0;
    }
    *(_QWORD *)(v84 + 584) = v73;
    if (v73)
    {
      *(_QWORD *)(v84 + 48) = v72;
      *(_QWORD *)(v84 + 56) = v73;
      if ((String.isEmpty.getter() & 1) == 0)
      {
        swift_bridgeObjectRetain();
        v68 = (id)MEMORY[0x24957220C](v72, v73);
        swift_bridgeObjectRelease();
        objc_msgSend(v82, sel_setText_, v68);

        v8 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v84 + 592) = v8;
        *v8 = *(_QWORD *)(v84 + 112);
        v8[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
        return SearchForAccountsViewBuilder.fillWatchLabelForAccountIfNeeded(account:label:)((uint64_t)v81, v84 + 224);
      }
      swift_bridgeObjectRelease();
    }
    v67 = objc_msgSend(v81, sel_accountNumber);
    if (v67)
    {
      v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v64 = v10;

      v65 = v63;
      v66 = v64;
    }
    else
    {
      v65 = 0;
      v66 = 0;
    }
    if (v66)
    {
      *(_QWORD *)(v84 + 32) = v65;
      *(_QWORD *)(v84 + 40) = v66;
      if ((String.isEmpty.getter() & 1) == 0)
      {
        swift_bridgeObjectRetain();
        v62 = (id)MEMORY[0x24957220C](v65, v66);
        swift_bridgeObjectRelease();
        objc_msgSend(v82, sel_setText_, v62);

      }
      swift_bridgeObjectRelease();
    }
    v61 = *(_QWORD *)(v84 + 528);
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v84 + 608) = v11;
    *v11 = *(_QWORD *)(v84 + 112);
    v11[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
    return SearchForAccountsViewBuilder.makeTemplateAction(for:app:)(v61, *(_QWORD *)(v84 + 360));
  }
  else
  {
    v35 = *(id *)(v84 + 480);
    v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 432);
    v17 = *(_QWORD *)(v84 + 400);
    v33 = *(_QWORD *)(v84 + 384);
    outlined destroy of [SFCardSection]();
    v18 = Logger.payments.unsafeMutableAddressor();
    v34(v17, v18, v33);
    v19 = v35;
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = v35;
    swift_retain();
    v38 = swift_allocObject();
    *(_QWORD *)(v38 + 16) = partial apply for implicit closure #3 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
    *(_QWORD *)(v38 + 24) = v36;
    swift_release();
    oslog = Logger.logObject.getter();
    v45 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v84 + 192) = 12;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v84 + 636);
    v40 = swift_allocObject();
    *(_BYTE *)(v40 + 16) = 32;
    v41 = swift_allocObject();
    *(_BYTE *)(v41 + 16) = 8;
    v39 = swift_allocObject();
    *(_QWORD *)(v39 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
    *(_QWORD *)(v39 + 24) = v38;
    v42 = swift_allocObject();
    *(_QWORD *)(v42 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v42 + 24) = v39;
    _allocateUninitializedArray<A>(_:)();
    v43 = v20;
    swift_retain();
    *v43 = partial apply for closure #1 in OSLogArguments.append(_:);
    v43[1] = v40;
    swift_retain();
    v43[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v43[3] = v41;
    swift_retain();
    v43[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v43[5] = v42;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (!os_log_type_enabled(oslog, v45))
    {
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_40;
    }
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v31 = createStorage<A>(capacity:type:)(0);
    v32 = createStorage<A>(capacity:type:)(1);
    v87 = buf;
    v88 = v31;
    v89 = v32;
    serialize(_:at:)(2, &v87);
    serialize(_:at:)(1, &v87);
    v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v91 = v40;
    result = closure #1 in osLogInternal(_:log:type:)(&v90, (uint64_t)&v87, (uint64_t)&v88, (uint64_t)&v89);
    if (!v49)
    {
      v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v91 = v41;
      closure #1 in osLogInternal(_:log:type:)(&v90, (uint64_t)&v87, (uint64_t)&v88, (uint64_t)&v89);
      v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v91 = v42;
      closure #1 in osLogInternal(_:log:type:)(&v90, (uint64_t)&v87, (uint64_t)&v88, (uint64_t)&v89);
      _os_log_impl(&dword_24701B000, oslog, v45, "#SearchForAccountsHandleIntentStrategy buildWatchSnippets itemGroup items %s", buf, size);
      destroyStorage<A>(_:count:)(v31, 0, v29);
      destroyStorage<A>(_:count:)(v32, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
LABEL_40:
      v28 = *(id *)(v84 + 480);
      v25 = *(void (**)(uint64_t, uint64_t))(v84 + 472);
      v23 = *(_QWORD *)(v84 + 400);
      v24 = *(_QWORD *)(v84 + 384);

      v25(v23, v24);
      type metadata accessor for SAAceView();
      v27 = _allocateUninitializedArray<A>(_:)();
      v26 = v21;
      v22 = v28;
      *v26 = v28;
      _finalizeUninitializedArray<A>(_:)();

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v84 + 112) + 8))(v27);
    }
  }
  return result;
}

{
  _QWORD *v0;
  void *v1;
  id v3;

  v1 = (void *)v0[62];
  v3 = (id)v0[60];
  v0[14] = v0;

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[14] + 8))();
}

{
  uint64_t v0;
  id v2;
  id v3;
  id v4;
  id v5;

  v2 = *(id *)(v0 + 552);
  v3 = *(id *)(v0 + 536);
  v4 = *(id *)(v0 + 528);
  v5 = *(id *)(v0 + 480);
  *(_QWORD *)(v0 + 112) = v0;
  swift_bridgeObjectRelease();

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 112) + 8))();
}

{
  uint64_t v0;
  id v2;
  id v3;
  id v4;
  id v5;

  v2 = *(id *)(v0 + 552);
  v3 = *(id *)(v0 + 536);
  v4 = *(id *)(v0 + 528);
  v5 = *(id *)(v0 + 480);
  *(_QWORD *)(v0 + 112) = v0;
  swift_bridgeObjectRelease();

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 112) + 8))();
}

{
  uint64_t v0;
  id v2;
  id v3;
  id v4;
  id v5;

  v2 = *(id *)(v0 + 552);
  v3 = *(id *)(v0 + 536);
  v4 = *(id *)(v0 + 528);
  v5 = *(id *)(v0 + 480);
  *(_QWORD *)(v0 + 112) = v0;

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 112) + 8))();
}

uint64_t SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[14] = *v2;
  v3[64] = a1;
  v3[65] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[14] = *v2;
  v3[77] = a1;
  v3[78] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 + 312) = v2;
  *(_QWORD *)(v3 + 304) = a2;
  *(_QWORD *)(v3 + 296) = a1;
  *(_QWORD *)(v3 + 144) = v3;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 248) = 0;
  *(_QWORD *)(v3 + 256) = 0;
  *(_BYTE *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v3 + 320) = swift_task_alloc();
  *(_QWORD *)(v3 + 328) = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v3 + 336) = v4;
  *(_QWORD *)(v3 + 344) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 352) = swift_task_alloc();
  v5 = type metadata accessor for UUID();
  *(_QWORD *)(v3 + 360) = v5;
  *(_QWORD *)(v3 + 368) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 376) = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  *(_QWORD *)(v3 + 384) = v6;
  *(_QWORD *)(v3 + 392) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 400) = swift_task_alloc();
  *(_QWORD *)(v3 + 152) = a1;
  *(_QWORD *)(v3 + 160) = a2;
  *(_QWORD *)(v3 + 168) = v2;
  return swift_task_switch();
}

uint64_t SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *buf;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint32_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;

  v37 = v0[37];
  v0[18] = v0;
  swift_bridgeObjectRetain();
  v0[22] = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPaymentAccount]);
  lazy protocol witness table accessor for type [INPaymentAccount] and conformance [A]();
  v38 = Collection.isEmpty.getter();
  outlined destroy of [SFCardSection]();
  if ((v38 & 1) != 0)
  {
    type metadata accessor for SACardSnippet();
    v12 = _allocateUninitializedArray<A>(_:)();
  }
  else
  {
    v1 = *(_QWORD *)(v36 + 400);
    v23 = *(_QWORD *)(v36 + 392);
    v24 = *(_QWORD *)(v36 + 384);
    v25 = *(_QWORD *)(v36 + 296);
    v2 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v1, v2, v24);
    swift_bridgeObjectRetain();
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v25;
    swift_retain();
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = partial apply for implicit closure #1 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
    *(_QWORD *)(v28 + 24) = v26;
    swift_release();
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v36 + 184) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v27 = *(_DWORD *)(v36 + 44);
    v30 = swift_allocObject();
    *(_BYTE *)(v30 + 16) = 32;
    v31 = swift_allocObject();
    *(_BYTE *)(v31 + 16) = 8;
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_1;
    *(_QWORD *)(v29 + 24) = v28;
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v32 + 24) = v29;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    v33 = v3;
    swift_retain();
    *v33 = partial apply for closure #1 in OSLogArguments.append(_:);
    v33[1] = v30;
    swift_retain();
    v33[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v33[3] = v31;
    swift_retain();
    v33[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v33[5] = v32;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v34, v35))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v21 = createStorage<A>(capacity:type:)(0);
      v22 = createStorage<A>(capacity:type:)(1);
      v39 = buf;
      v40 = v21;
      v41 = v22;
      serialize(_:at:)(2, &v39);
      serialize(_:at:)(1, &v39);
      v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v43 = v30;
      closure #1 in osLogInternal(_:log:type:)(&v42, (uint64_t)&v39, (uint64_t)&v40, (uint64_t)&v41);
      v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v43 = v31;
      closure #1 in osLogInternal(_:log:type:)(&v42, (uint64_t)&v39, (uint64_t)&v40, (uint64_t)&v41);
      v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v43 = v32;
      closure #1 in osLogInternal(_:log:type:)(&v42, (uint64_t)&v39, (uint64_t)&v40, (uint64_t)&v41);
      _os_log_impl(&dword_24701B000, v34, v35, "#SearchForAccountsHandleIntentStrategy buildSnippet for accounts %s", buf, v27);
      destroyStorage<A>(_:count:)(v21, 0, v19);
      destroyStorage<A>(_:count:)(v22, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v16 = *(_QWORD *)(v36 + 400);
    v15 = *(_QWORD *)(v36 + 392);
    v17 = *(_QWORD *)(v36 + 384);
    v18 = *(_QWORD *)(v36 + 296);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
    type metadata accessor for INPaymentAccount();
    if (MEMORY[0x2495723C8](v18) <= 1)
    {
      Array.subscript.getter();
      v8 = *(_QWORD *)(v36 + 192);
      *(_QWORD *)(v36 + 520) = v8;
      v6 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v36 + 528) = v6;
      *v6 = *(_QWORD *)(v36 + 144);
      v6[1] = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
      return SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:)(v8, *(_QWORD *)(v36 + 304));
    }
    v13 = *(_QWORD *)(v36 + 296);
    *(_QWORD *)(v36 + 408) = type metadata accessor for SFCardSection();
    *(_QWORD *)(v36 + 208) = Array.init()();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v36 + 216) = v13;
    Collection<>.makeIterator()();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexingIterator<[INPaymentAccount]>);
    IndexingIterator.next()();
    v14 = *(_QWORD *)(v36 + 224);
    *(_QWORD *)(v36 + 416) = v14;
    if (v14)
    {
      *(_QWORD *)(v36 + 232) = v14;
      v4 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v36 + 424) = v4;
      *v4 = *(_QWORD *)(v36 + 144);
      v4[1] = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
      return SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:)(v14, *(_QWORD *)(v36 + 304));
    }
    outlined destroy of [SFCardSection]();
    type metadata accessor for SACardSnippet();
    v11 = _allocateUninitializedArray<A>(_:)();
    v10 = v5;
    swift_bridgeObjectRetain();
    App.appIdentifier.getter();
    default argument 3 of static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
    v9 = static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *v10 = v9;
    _finalizeUninitializedArray<A>(_:)();
    outlined destroy of [SFCardSection]();
    v12 = v11;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 + 144) + 8))(v12);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  char v15;
  _QWORD *v16;
  char v18;
  id v19;
  id v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  char v38;
  id v39;
  id v40;
  id v41;
  char v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  id v71;
  Class isa;
  void *v73;
  id v74;
  void *v75;

  v1 = v0[54];
  v73 = (void *)v0[52];
  v69 = v0[47];
  v67 = v0[46];
  v68 = v0[45];
  v0[18] = v0;
  v0[30] = v1;
  type metadata accessor for SFCard();
  v71 = SAUIAppPunchOut.__allocating_init()();
  v0[56] = v71;
  v0[31] = v71;
  UUID.init()();
  v2 = UUID.uuidString.getter();
  v70 = (void *)MEMORY[0x24957220C](v2);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v69, v68);
  swift_bridgeObjectRelease();
  objc_msgSend(v71, sel_setCardId_, v70);

  swift_bridgeObjectRetain();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v71, sel_setCardSections_, isa);

  type metadata accessor for SFRowCardSection();
  v74 = SAUIAppPunchOut.__allocating_init()();
  v0[57] = v74;
  v0[32] = v74;
  v0[33] = 0;
  v3 = objc_msgSend(v73, sel_organizationName);
  v75 = v3;
  if (v3)
  {
    v60 = objc_msgSend(v3, sel_spokenPhrase);
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v62 = v5;

    v63 = v61;
    v64 = v62;
  }
  else
  {
    v63 = 0;
    v64 = 0;
  }
  if (v64)
  {
    *(_QWORD *)(v66 + 112) = v63;
    *(_QWORD *)(v66 + 120) = v64;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      type metadata accessor for SFRichText();
      swift_bridgeObjectRetain();
      v6 = @nonobjc SFRichText.__allocating_init(string:)(v63, v64);
      v7 = *(void **)(v66 + 264);
      *(_QWORD *)(v66 + 264) = v6;

      swift_bridgeObjectRetain();
      v59 = (id)MEMORY[0x24957220C](v63, v64);
      swift_bridgeObjectRelease();
      objc_msgSend(v71, sel_setTitle_, v59);

      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    swift_bridgeObjectRelease();
  }
  v58 = objc_msgSend(*(id *)(v66 + 416), sel_nickname);
  if (v58)
  {
    v53 = objc_msgSend(v58, sel_spokenPhrase);
    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v55 = v8;

    v56 = v54;
    v57 = v55;
  }
  else
  {
    v56 = 0;
    v57 = 0;
  }
  if (v57)
  {
    *(_QWORD *)(v66 + 96) = v56;
    *(_QWORD *)(v66 + 104) = v57;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      type metadata accessor for SFRichText();
      swift_bridgeObjectRetain();
      v9 = @nonobjc SFRichText.__allocating_init(string:)(v56, v57);
      v10 = *(void **)(v66 + 264);
      *(_QWORD *)(v66 + 264) = v9;

      swift_bridgeObjectRetain();
      v52 = (id)MEMORY[0x24957220C](v56, v57);
      swift_bridgeObjectRelease();
      objc_msgSend(v71, sel_setTitle_, v52);

      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    swift_bridgeObjectRelease();
  }
  v51 = objc_msgSend(*(id *)(v66 + 416), sel_accountNumber);
  if (v51)
  {
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v48 = v11;

    v49 = v47;
    v50 = v48;
  }
  else
  {
    v49 = 0;
    v50 = 0;
  }
  if (v50)
  {
    *(_QWORD *)(v66 + 80) = v49;
    *(_QWORD *)(v66 + 88) = v50;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      type metadata accessor for SFRichText();
      swift_bridgeObjectRetain();
      v12 = @nonobjc SFRichText.__allocating_init(string:)(v49, v50);
      v13 = *(void **)(v66 + 264);
      *(_QWORD *)(v66 + 264) = v12;

      swift_bridgeObjectRetain();
      v46 = (id)MEMORY[0x24957220C](v49, v50);
      swift_bridgeObjectRelease();
      objc_msgSend(v71, sel_setTitle_, v46);

    }
    swift_bridgeObjectRelease();
  }
LABEL_24:
  v44 = *(id *)(v66 + 416);
  v43 = *(id *)(v66 + 264);
  v14 = v43;
  objc_msgSend(v74, sel_setLeadingText_, v43);

  v45 = objc_msgSend(v44, sel_balance);
  if (v45)
  {
    v40 = objc_msgSend(v45, sel_balanceType);

    v41 = v40;
    v42 = 0;
  }
  else
  {
    v41 = 0;
    v42 = 1;
  }
  *(_QWORD *)(v66 + 16) = v41;
  *(_BYTE *)(v66 + 24) = v42 & 1;
  *(_QWORD *)(v66 + 32) = 1;
  *(_BYTE *)(v66 + 40) = 0;
  if ((*(_BYTE *)(v66 + 24) & 1) == 0)
  {
    outlined init with copy of Int?(v66 + 16, v66 + 128);
    if ((*(_BYTE *)(v66 + 40) & 1) != 0)
      goto LABEL_35;
    *(_QWORD *)(v66 + 280) = *(_QWORD *)(v66 + 128);
    *(_QWORD *)(v66 + 288) = *(_QWORD *)(v66 + 32);
    type metadata accessor for INBalanceType();
    lazy protocol witness table accessor for type INBalanceType and conformance INBalanceType();
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    if ((v15 & 1) == 0)
      goto LABEL_35;
LABEL_34:
    v39 = objc_msgSend(*(id *)(v66 + 416), sel_balance);
    *(_QWORD *)(v66 + 464) = v39;
    v16 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v66 + 472) = v16;
    *v16 = *(_QWORD *)(v66 + 144);
    v16[1] = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
    return SearchForAccountsViewBuilder.buildBalanceText(for:)((uint64_t)v39);
  }
  if ((*(_BYTE *)(v66 + 40) & 1) != 0)
    goto LABEL_34;
LABEL_35:
  v18 = static Constants.PaymentAccountType.fromINAccountType(_:)((unint64_t)objc_msgSend(*(id *)(v66 + 416), sel_accountType));
  v38 = v18;
  if (v18 == 9)
  {
    v35 = *(id *)(v66 + 456);
    v36 = *(id *)(v66 + 448);
    v37 = *(id *)(v66 + 416);
    v19 = v35;
    v20 = v36;
    objc_msgSend(v35, sel_setNextCard_, v36);

    v21 = v35;
    *(_QWORD *)(v66 + 272) = v35;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
    Array.append(_:)();
    outlined destroy of SFRichText?((id *)(v66 + 264));

    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexingIterator<[INPaymentAccount]>);
    IndexingIterator.next()();
    v65 = *(_QWORD *)(v66 + 224);
    *(_QWORD *)(v66 + 416) = v65;
    if (v65)
    {
      *(_QWORD *)(v66 + 232) = v65;
      v4 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v66 + 424) = v4;
      *v4 = *(_QWORD *)(v66 + 144);
      v4[1] = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
      return SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:)(v65, *(_QWORD *)(v66 + 304));
    }
    else
    {
      outlined destroy of [SFCardSection]();
      type metadata accessor for SACardSnippet();
      v31 = _allocateUninitializedArray<A>(_:)();
      v30 = v28;
      swift_bridgeObjectRetain();
      App.appIdentifier.getter();
      default argument 3 of static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
      v29 = static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v30 = v29;
      _finalizeUninitializedArray<A>(_:)();
      outlined destroy of [SFCardSection]();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v66 + 144) + 8))(v31);
    }
  }
  else
  {
    v22 = *(_QWORD **)(v66 + 312);
    *(_BYTE *)(v66 + 552) = v18;
    *(_QWORD *)(v66 + 496) = *v22;
    swift_retain();
    Constants.PaymentAccountType.asCATIDForLoc.getter(v38);
    if (v23)
    {
      v34 = *(_QWORD *)(v66 + 328);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v24 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v34, 0, 1);
    }
    else
    {
      v32 = *(_QWORD *)(v66 + 328);
      v27 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v32, 1);
    }
    v33 = *(_QWORD *)(v66 + 320);
    v25 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v33, 1);
    v26 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v66 + 504) = v26;
    *v26 = *(_QWORD *)(v66 + 144);
    v26[1] = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
    return SearchForAccountsCATs.labelForEnum(accountType:balanceType:)(*(_QWORD *)(v66 + 352), *(_QWORD *)(v66 + 328), *(_QWORD *)(v66 + 320));
  }
}

{
  uint64_t v0;
  void *v1;
  char v2;
  _QWORD *v3;
  id v5;
  id v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char v27;

  v26 = *(void **)(v0 + 480);
  v1 = *(void **)(v0 + 456);
  *(_QWORD *)(v0 + 144) = v0;
  objc_msgSend(v1, sel_setTrailingText_);

  v2 = static Constants.PaymentAccountType.fromINAccountType(_:)((unint64_t)objc_msgSend(*(id *)(v0 + 416), sel_accountType));
  v27 = v2;
  if (v2 == 9)
  {
    v21 = *(id *)(v25 + 456);
    v22 = *(id *)(v25 + 448);
    v23 = *(void **)(v25 + 416);
    v5 = v21;
    v6 = v22;
    objc_msgSend(v21, sel_setNextCard_, v22);

    v7 = v21;
    *(_QWORD *)(v25 + 272) = v21;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
    Array.append(_:)();
    outlined destroy of SFRichText?((id *)(v25 + 264));

    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexingIterator<[INPaymentAccount]>);
    IndexingIterator.next()();
    v24 = *(_QWORD *)(v25 + 224);
    *(_QWORD *)(v25 + 416) = v24;
    if (v24)
    {
      *(_QWORD *)(v25 + 232) = v24;
      v3 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v25 + 424) = v3;
      *v3 = *(_QWORD *)(v25 + 144);
      v3[1] = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
      return SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:)(v24, *(_QWORD *)(v25 + 304));
    }
    else
    {
      outlined destroy of [SFCardSection]();
      type metadata accessor for SACardSnippet();
      v17 = _allocateUninitializedArray<A>(_:)();
      v16 = v14;
      swift_bridgeObjectRetain();
      App.appIdentifier.getter();
      default argument 3 of static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
      v15 = static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v16 = v15;
      _finalizeUninitializedArray<A>(_:)();
      outlined destroy of [SFCardSection]();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v25 + 144) + 8))(v17);
    }
  }
  else
  {
    v8 = *(_QWORD **)(v25 + 312);
    *(_BYTE *)(v25 + 552) = v2;
    *(_QWORD *)(v25 + 496) = *v8;
    swift_retain();
    Constants.PaymentAccountType.asCATIDForLoc.getter(v27);
    if (v9)
    {
      v20 = *(_QWORD *)(v25 + 328);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v10 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v20, 0, 1);
    }
    else
    {
      v18 = *(_QWORD *)(v25 + 328);
      v13 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v18, 1);
    }
    v19 = *(_QWORD *)(v25 + 320);
    v11 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v19, 1);
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v25 + 504) = v12;
    *v12 = *(_QWORD *)(v25 + 144);
    v12[1] = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
    return SearchForAccountsCATs.labelForEnum(accountType:balanceType:)(*(_QWORD *)(v25 + 352), *(_QWORD *)(v25 + 328), *(_QWORD *)(v25 + 320));
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(v2 + 144) = *v1;
  v2 += 144;
  v5 = v2 - 128;
  *(_QWORD *)(v2 + 368) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 312);
    outlined destroy of SpeakableString?(*(_QWORD *)(v5 + 304));
    outlined destroy of SpeakableString?(v4);
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;

  v16 = *(id *)(v0 + 456);
  v13 = *(_QWORD *)(v0 + 352);
  v12 = *(_QWORD *)(v0 + 344);
  v14 = *(_QWORD *)(v0 + 336);
  *(_QWORD *)(v0 + 144) = v0;
  v15 = TemplatingResult.resultSectionsAsString.getter();
  v18 = v1;
  *(_QWORD *)(v0 + 64) = v15;
  *(_QWORD *)(v0 + 72) = v1;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  type metadata accessor for SFRichText();
  swift_bridgeObjectRetain();
  v17 = @nonobjc SFRichText.__allocating_init(string:)(v15, v18);
  objc_msgSend(v16, sel_setLeadingSubtitle_);

  swift_bridgeObjectRelease();
  v19 = *(void **)(v0 + 456);
  v20 = *(void **)(v0 + 448);
  v21 = *(void **)(v0 + 416);
  v2 = v19;
  v3 = v20;
  objc_msgSend(v19, sel_setNextCard_, v20);

  v4 = v19;
  *(_QWORD *)(v0 + 272) = v19;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
  Array.append(_:)();
  outlined destroy of SFRichText?((id *)(v0 + 264));

  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexingIterator<[INPaymentAccount]>);
  IndexingIterator.next()();
  v22 = *(_QWORD *)(v0 + 224);
  *(_QWORD *)(v0 + 416) = v22;
  if (v22)
  {
    v11[29] = v22;
    v5 = (_QWORD *)swift_task_alloc();
    v11[53] = v5;
    *v5 = v11[18];
    v5[1] = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
    return SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:)(v22, v11[38]);
  }
  else
  {
    outlined destroy of [SFCardSection]();
    type metadata accessor for SACardSnippet();
    v10 = _allocateUninitializedArray<A>(_:)();
    v9 = v7;
    swift_bridgeObjectRetain();
    App.appIdentifier.getter();
    default argument 3 of static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
    v8 = static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *v9 = v8;
    _finalizeUninitializedArray<A>(_:)();
    outlined destroy of [SFCardSection]();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v11[18] + 8))(v10);
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v1 = v0[67];
  v0[18] = v0;
  v0[25] = v1;
  type metadata accessor for SACardSnippet();
  v6 = _allocateUninitializedArray<A>(_:)();
  v5 = v2;
  App.appIdentifier.getter();
  default argument 3 of static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
  v4 = static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v5 = v4;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[18] + 8))(v6);
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 416);
  *(_QWORD *)(v0 + 144) = v0;

  outlined destroy of [SFCardSection]();
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 144) + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v3;
  id v4;
  id v5;

  v1 = *(void **)(v0 + 464);
  v3 = *(id *)(v0 + 456);
  v4 = *(id *)(v0 + 448);
  v5 = *(id *)(v0 + 416);
  *(_QWORD *)(v0 + 144) = v0;

  outlined destroy of SFRichText?((id *)(v0 + 264));
  swift_bridgeObjectRelease();

  outlined destroy of [SFCardSection]();
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 144) + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  id v4;
  id v5;
  id v6;

  v4 = *(id *)(v0 + 456);
  v5 = *(id *)(v0 + 448);
  v6 = *(id *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 328);
  v1 = *(_QWORD *)(v0 + 320);
  *(_QWORD *)(v0 + 144) = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v3);
  swift_release();
  outlined destroy of SFRichText?((id *)(v0 + 264));

  swift_bridgeObjectRelease();
  outlined destroy of [SFCardSection]();
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 144) + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 520);
  *(_QWORD *)(v0 + 144) = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 144) + 8))();
}

uint64_t SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[18] = *v2;
  v3[54] = a1;
  v3[55] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[18] = *v2;
  v3 += 18;
  v5 = v3 - 16;
  v3[42] = a1;
  v3[43] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[18] = *v2;
  v3 += 18;
  v5 = v3 - 16;
  v3[49] = a1;
  v3[50] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

unint64_t lazy protocol witness table accessor for type [INPaymentAccount] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [INPaymentAccount] and conformance [A];
  if (!lazy protocol witness table cache variable for type [INPaymentAccount] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [INPaymentAccount]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [INPaymentAccount] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [INPaymentAccount] and conformance [A];
  if (!lazy protocol witness table cache variable for type [INPaymentAccount] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [INPaymentAccount]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12F8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [INPaymentAccount] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 + 240) = v2;
  *(_QWORD *)(v3 + 232) = a1;
  *(_QWORD *)(v3 + 80) = v3;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_BYTE *)(v3 + 712) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v3 + 248) = swift_task_alloc();
  *(_QWORD *)(v3 + 256) = swift_task_alloc();
  *(_QWORD *)(v3 + 264) = swift_task_alloc();
  *(_QWORD *)(v3 + 272) = swift_task_alloc();
  *(_QWORD *)(v3 + 280) = swift_task_alloc();
  *(_QWORD *)(v3 + 288) = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v3 + 296) = v4;
  *(_QWORD *)(v3 + 304) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 312) = swift_task_alloc();
  *(_QWORD *)(v3 + 320) = swift_task_alloc();
  *(_QWORD *)(v3 + 328) = swift_task_alloc();
  *(_QWORD *)(v3 + 336) = swift_task_alloc();
  *(_QWORD *)(v3 + 344) = swift_task_alloc();
  *(_QWORD *)(v3 + 88) = a1;
  *(_QWORD *)(v3 + 96) = a2;
  *(_QWORD *)(v3 + 104) = v2;
  return swift_task_switch();
}

uint64_t SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:)()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD, uint64_t);
  _QWORD *v8;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  _QWORD *v19;
  id v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  char has_malloc_size;
  id v31;
  id v32;
  id v33;
  id v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  _QWORD *v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;

  v61 = (void *)v0[29];
  v0[10] = v0;
  type metadata accessor for SFCardSection();
  v0[14] = Array.init()();
  v62 = objc_msgSend(v61, sel_organizationName);
  if (v62)
  {
    v55 = objc_msgSend(v62, sel_spokenPhrase);
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v57 = v1;

    v58 = v56;
    v59 = v57;
  }
  else
  {
    v58 = 0;
    v59 = 0;
  }
  *(_QWORD *)(v60 + 360) = v59;
  *(_QWORD *)(v60 + 352) = v58;
  if (v59)
  {
    *(_QWORD *)(v60 + 64) = v58;
    *(_QWORD *)(v60 + 72) = v59;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      v54 = *(_QWORD *)(v60 + 288);
      v53 = *(_QWORD **)(v60 + 240);
      type metadata accessor for SFRowCardSection();
      v2 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v60 + 368) = v2;
      *(_QWORD *)(v60 + 216) = v2;
      *(_QWORD *)(v60 + 376) = *v53;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("organizationName", 0x10uLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v3 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v54, 0, 1);
      v4 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v60 + 384) = v4;
      *v4 = *(_QWORD *)(v60 + 80);
      v4[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(*(_QWORD *)(v60 + 344), *(_QWORD *)(v60 + 288));
    }
    swift_bridgeObjectRelease();
  }
  v52 = static Constants.PaymentAccountType.fromINAccountType(_:)((unint64_t)objc_msgSend(*(id *)(v60 + 232), sel_accountType));
  *(_BYTE *)(v60 + 715) = v52;
  if (v52 != 9)
  {
    *(_BYTE *)(v60 + 712) = v52;
    *(_BYTE *)(v60 + 713) = v52;
    *(_BYTE *)(v60 + 714) = 0;
    lazy protocol witness table accessor for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      v51 = *(_QWORD *)(v60 + 280);
      v50 = *(_QWORD **)(v60 + 240);
      type metadata accessor for SFRowCardSection();
      v5 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v60 + 400) = v5;
      *(_QWORD *)(v60 + 200) = v5;
      *(_QWORD *)(v60 + 408) = *v50;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v6 = type metadata accessor for SpeakableString();
      *(_QWORD *)(v60 + 416) = v6;
      v7 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
      *(_QWORD *)(v60 + 424) = v7;
      v7(v51, 0, 1);
      v8 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v60 + 432) = v8;
      *v8 = *(_QWORD *)(v60 + 80);
      v8[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(*(_QWORD *)(v60 + 336), *(_QWORD *)(v60 + 280));
    }
  }
  v49 = objc_msgSend(*(id *)(v60 + 232), sel_nickname);
  if (v49)
  {
    v44 = objc_msgSend(v49, sel_spokenPhrase);
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v46 = v10;

    v47 = v45;
    v48 = v46;
  }
  else
  {
    v47 = 0;
    v48 = 0;
  }
  *(_QWORD *)(v60 + 480) = v48;
  *(_QWORD *)(v60 + 472) = v47;
  if (v48)
  {
    *(_QWORD *)(v60 + 32) = v47;
    *(_QWORD *)(v60 + 40) = v48;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      v43 = *(_QWORD *)(v60 + 256);
      v42 = *(_QWORD **)(v60 + 240);
      type metadata accessor for SFRowCardSection();
      v11 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v60 + 488) = v11;
      *(_QWORD *)(v60 + 184) = v11;
      *(_QWORD *)(v60 + 496) = *v42;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNickname", 0xFuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v12 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v43, 0, 1);
      v13 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v60 + 504) = v13;
      *v13 = *(_QWORD *)(v60 + 80);
      v13[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(*(_QWORD *)(v60 + 320), *(_QWORD *)(v60 + 256));
    }
    swift_bridgeObjectRelease();
  }
  v41 = objc_msgSend(*(id *)(v60 + 232), sel_accountNumber);
  if (v41)
  {
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v38 = v14;

    v39 = v37;
    v40 = v38;
  }
  else
  {
    v39 = 0;
    v40 = 0;
  }
  *(_QWORD *)(v60 + 528) = v40;
  *(_QWORD *)(v60 + 520) = v39;
  if (v40)
  {
    *(_QWORD *)(v60 + 16) = v39;
    *(_QWORD *)(v60 + 24) = v40;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      v36 = *(_QWORD *)(v60 + 248);
      v35 = *(_QWORD **)(v60 + 240);
      type metadata accessor for SFRowCardSection();
      v15 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v60 + 536) = v15;
      *(_QWORD *)(v60 + 168) = v15;
      *(_QWORD *)(v60 + 544) = *v35;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v16 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v36, 0, 1);
      v17 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v60 + 552) = v17;
      *v17 = *(_QWORD *)(v60 + 80);
      v17[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(*(_QWORD *)(v60 + 312), *(_QWORD *)(v60 + 248));
    }
    swift_bridgeObjectRelease();
  }
  v34 = objc_msgSend(*(id *)(v60 + 232), sel_balance);
  if (v34)
  {
    v32 = objc_msgSend(v34, sel_amount);

    v33 = v32;
  }
  else
  {
    v33 = 0;
  }
  *(_QWORD *)(v60 + 120) = v33;
  if (*(_QWORD *)(v60 + 120))
  {
    outlined destroy of SFRichText?((id *)(v60 + 120));
    v29 = *(id *)(v60 + 232);
    type metadata accessor for SFRowCardSection();
    v18 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v60 + 568) = v18;
    *(_QWORD *)(v60 + 152) = v18;
    v31 = objc_msgSend(v29, sel_balance);
    *(_QWORD *)(v60 + 576) = v31;
    has_malloc_size = _swift_stdlib_has_malloc_size();
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v60 + 584) = v19;
    *v19 = *(_QWORD *)(v60 + 80);
    v19[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
    return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)((uint64_t)v31, has_malloc_size & 1);
  }
  else
  {
    outlined destroy of SFRichText?((id *)(v60 + 120));
    v20 = objc_msgSend(*(id *)(v60 + 232), sel_secondaryBalance);
    v28 = v20;
    if (v20)
    {
      v26 = objc_msgSend(v20, sel_amount);

      v27 = v26;
    }
    else
    {
      v27 = 0;
    }
    *(_QWORD *)(v60 + 128) = v27;
    if (*(_QWORD *)(v60 + 128))
    {
      outlined destroy of SFRichText?((id *)(v60 + 128));
      v24 = *(id *)(v60 + 232);
      type metadata accessor for SFRowCardSection();
      v21 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v60 + 640) = v21;
      *(_QWORD *)(v60 + 136) = v21;
      v25 = objc_msgSend(v24, sel_secondaryBalance);
      *(_QWORD *)(v60 + 648) = v25;
      v22 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v60 + 656) = v22;
      *v22 = *(_QWORD *)(v60 + 80);
      v22[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)((uint64_t)v25, 0);
    }
    else
    {
      outlined destroy of SFRichText?((id *)(v60 + 128));
      v23 = *(_QWORD *)(v60 + 112);
      swift_bridgeObjectRetain();
      outlined destroy of [SFCardSection]();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v60 + 80) + 8))(v23);
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = *v1;
  v2 += 80;
  v4 = v2 - 64;
  *(_QWORD *)(v2 + 312) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 272));
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  char v5;
  id v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  _QWORD *v20;
  id v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  char has_malloc_size;
  id v32;
  id v33;
  id v34;
  id v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  _QWORD *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;

  v60 = *(void **)(v0 + 368);
  v61 = *(_QWORD *)(v0 + 360);
  v55 = *(_QWORD *)(v0 + 352);
  v58 = *(_QWORD *)(v0 + 344);
  v57 = *(_QWORD *)(v0 + 304);
  v59 = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 80) = v0;
  type metadata accessor for SFRichText();
  v1 = TemplatingResult.resultSectionsAsString.getter();
  v54 = @nonobjc SFRichText.__allocating_init(string:)(v1, v2);
  objc_msgSend(v60, sel_setLeadingText_);

  swift_bridgeObjectRetain();
  v56 = @nonobjc SFRichText.__allocating_init(string:)(v55, v61);
  objc_msgSend(v60, sel_setTrailingText_);

  v3 = v60;
  objc_msgSend(v60, sel_setSeparatorStyle_, 4);

  v4 = v60;
  *(_QWORD *)(v0 + 224) = v60;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
  Array.append(_:)();
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v58, v59);

  swift_bridgeObjectRelease();
  v5 = static Constants.PaymentAccountType.fromINAccountType(_:)((unint64_t)objc_msgSend(*(id *)(v0 + 232), sel_accountType));
  *(_BYTE *)(v0 + 715) = v5;
  if (v5 != 9)
  {
    *(_BYTE *)(v53 + 712) = v5;
    *(_BYTE *)(v53 + 713) = v5;
    *(_BYTE *)(v53 + 714) = 0;
    lazy protocol witness table accessor for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      v52 = *(_QWORD *)(v53 + 280);
      v51 = *(_QWORD **)(v53 + 240);
      type metadata accessor for SFRowCardSection();
      v6 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v53 + 400) = v6;
      *(_QWORD *)(v53 + 200) = v6;
      *(_QWORD *)(v53 + 408) = *v51;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v7 = type metadata accessor for SpeakableString();
      *(_QWORD *)(v53 + 416) = v7;
      v8 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
      *(_QWORD *)(v53 + 424) = v8;
      v8(v52, 0, 1);
      v9 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v53 + 432) = v9;
      *v9 = *(_QWORD *)(v53 + 80);
      v9[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(*(_QWORD *)(v53 + 336), *(_QWORD *)(v53 + 280));
    }
  }
  v50 = objc_msgSend(*(id *)(v53 + 232), sel_nickname);
  if (v50)
  {
    v45 = objc_msgSend(v50, sel_spokenPhrase);
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v47 = v10;

    v48 = v46;
    v49 = v47;
  }
  else
  {
    v48 = 0;
    v49 = 0;
  }
  *(_QWORD *)(v53 + 480) = v49;
  *(_QWORD *)(v53 + 472) = v48;
  if (v49)
  {
    *(_QWORD *)(v53 + 32) = v48;
    *(_QWORD *)(v53 + 40) = v49;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      v44 = *(_QWORD *)(v53 + 256);
      v43 = *(_QWORD **)(v53 + 240);
      type metadata accessor for SFRowCardSection();
      v11 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v53 + 488) = v11;
      *(_QWORD *)(v53 + 184) = v11;
      *(_QWORD *)(v53 + 496) = *v43;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNickname", 0xFuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v12 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v44, 0, 1);
      v13 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v53 + 504) = v13;
      *v13 = *(_QWORD *)(v53 + 80);
      v13[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(*(_QWORD *)(v53 + 320), *(_QWORD *)(v53 + 256));
    }
    swift_bridgeObjectRelease();
  }
  v42 = objc_msgSend(*(id *)(v53 + 232), sel_accountNumber);
  if (v42)
  {
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v39 = v15;

    v40 = v38;
    v41 = v39;
  }
  else
  {
    v40 = 0;
    v41 = 0;
  }
  *(_QWORD *)(v53 + 528) = v41;
  *(_QWORD *)(v53 + 520) = v40;
  if (v41)
  {
    *(_QWORD *)(v53 + 16) = v40;
    *(_QWORD *)(v53 + 24) = v41;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      v37 = *(_QWORD *)(v53 + 248);
      v36 = *(_QWORD **)(v53 + 240);
      type metadata accessor for SFRowCardSection();
      v16 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v53 + 536) = v16;
      *(_QWORD *)(v53 + 168) = v16;
      *(_QWORD *)(v53 + 544) = *v36;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v17 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v37, 0, 1);
      v18 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v53 + 552) = v18;
      *v18 = *(_QWORD *)(v53 + 80);
      v18[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(*(_QWORD *)(v53 + 312), *(_QWORD *)(v53 + 248));
    }
    swift_bridgeObjectRelease();
  }
  v35 = objc_msgSend(*(id *)(v53 + 232), sel_balance);
  if (v35)
  {
    v33 = objc_msgSend(v35, sel_amount);

    v34 = v33;
  }
  else
  {
    v34 = 0;
  }
  *(_QWORD *)(v53 + 120) = v34;
  if (*(_QWORD *)(v53 + 120))
  {
    outlined destroy of SFRichText?((id *)(v53 + 120));
    v30 = *(id *)(v53 + 232);
    type metadata accessor for SFRowCardSection();
    v19 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v53 + 568) = v19;
    *(_QWORD *)(v53 + 152) = v19;
    v32 = objc_msgSend(v30, sel_balance);
    *(_QWORD *)(v53 + 576) = v32;
    has_malloc_size = _swift_stdlib_has_malloc_size();
    v20 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v53 + 584) = v20;
    *v20 = *(_QWORD *)(v53 + 80);
    v20[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
    return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)((uint64_t)v32, has_malloc_size & 1);
  }
  else
  {
    outlined destroy of SFRichText?((id *)(v53 + 120));
    v21 = objc_msgSend(*(id *)(v53 + 232), sel_secondaryBalance);
    v29 = v21;
    if (v21)
    {
      v27 = objc_msgSend(v21, sel_amount);

      v28 = v27;
    }
    else
    {
      v28 = 0;
    }
    *(_QWORD *)(v53 + 128) = v28;
    if (*(_QWORD *)(v53 + 128))
    {
      outlined destroy of SFRichText?((id *)(v53 + 128));
      v25 = *(id *)(v53 + 232);
      type metadata accessor for SFRowCardSection();
      v22 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v53 + 640) = v22;
      *(_QWORD *)(v53 + 136) = v22;
      v26 = objc_msgSend(v25, sel_secondaryBalance);
      *(_QWORD *)(v53 + 648) = v26;
      v23 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v53 + 656) = v23;
      *v23 = *(_QWORD *)(v53 + 80);
      v23[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)((uint64_t)v26, 0);
    }
    else
    {
      outlined destroy of SFRichText?((id *)(v53 + 128));
      v24 = *(_QWORD *)(v53 + 112);
      swift_bridgeObjectRetain();
      outlined destroy of [SFCardSection]();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v53 + 80) + 8))(v24);
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = *v1;
  v2 += 80;
  v4 = v2 - 64;
  *(_QWORD *)(v2 + 360) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 264));
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v8;
  char v9;

  v9 = *(_BYTE *)(v0 + 715);
  v1 = *(_QWORD **)(v0 + 240);
  *(_QWORD *)(v0 + 80) = v0;
  *(_QWORD *)(v0 + 448) = *v1;
  swift_retain();
  Constants.PaymentAccountType.asCATIDForLoc.getter(v9);
  if (v2)
  {
    v7 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v8[53];
    v6 = v8[52];
    v5 = v8[34];
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v7(v5, 0, 1, v6);
  }
  else
  {
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))v8[53])(v8[34], 1, 1, v8[52]);
  }
  ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))v8[53])(v8[33], 1, 1, v8[52]);
  v3 = (_QWORD *)swift_task_alloc();
  v8[57] = v3;
  *v3 = v8[10];
  v3[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  return SearchForAccountsCATs.labelForEnum(accountType:balanceType:)(v8[41], v8[34], v8[33]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = *v1;
  v2 += 80;
  v5 = v2 - 64;
  *(_QWORD *)(v2 + 384) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 256);
    outlined destroy of SpeakableString?(*(_QWORD *)(v5 + 248));
    outlined destroy of SpeakableString?(v4);
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  id v16;
  _QWORD *v17;
  id v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  char has_malloc_size;
  id v29;
  id v30;
  id v31;
  id v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  _QWORD *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  void *v57;
  void *v58;

  v57 = *(void **)(v0 + 400);
  v54 = *(_QWORD *)(v0 + 336);
  v49 = *(_QWORD *)(v0 + 328);
  v48 = *(_QWORD *)(v0 + 304);
  v55 = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 80) = v0;
  v51 = TemplatingResult.resultSectionsAsString.getter();
  v53 = v1;
  *(_QWORD *)(v0 + 48) = v51;
  *(_QWORD *)(v0 + 56) = v1;
  v56 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
  v56(v49, v55);
  type metadata accessor for SFRichText();
  v2 = TemplatingResult.resultSectionsAsString.getter();
  v50 = @nonobjc SFRichText.__allocating_init(string:)(v2, v3);
  objc_msgSend(v57, sel_setLeadingText_);

  swift_bridgeObjectRetain();
  v52 = @nonobjc SFRichText.__allocating_init(string:)(v51, v53);
  objc_msgSend(v57, sel_setTrailingText_);

  v4 = v57;
  objc_msgSend(v57, sel_setSeparatorStyle_, 4);

  v5 = v57;
  *(_QWORD *)(v0 + 208) = v57;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
  Array.append(_:)();
  swift_bridgeObjectRelease();
  v56(v54, v55);

  v6 = objc_msgSend(*(id *)(v0 + 232), sel_nickname);
  v58 = v6;
  if (v6)
  {
    v42 = objc_msgSend(v6, sel_spokenPhrase);
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v44 = v7;

    v45 = v43;
    v46 = v44;
  }
  else
  {
    v45 = 0;
    v46 = 0;
  }
  *(_QWORD *)(v47 + 480) = v46;
  *(_QWORD *)(v47 + 472) = v45;
  if (v46)
  {
    *(_QWORD *)(v47 + 32) = v45;
    *(_QWORD *)(v47 + 40) = v46;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      v41 = *(_QWORD *)(v47 + 256);
      v40 = *(_QWORD **)(v47 + 240);
      type metadata accessor for SFRowCardSection();
      v8 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v47 + 488) = v8;
      *(_QWORD *)(v47 + 184) = v8;
      *(_QWORD *)(v47 + 496) = *v40;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNickname", 0xFuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v9 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v41, 0, 1);
      v10 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v47 + 504) = v10;
      *v10 = *(_QWORD *)(v47 + 80);
      v10[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(*(_QWORD *)(v47 + 320), *(_QWORD *)(v47 + 256));
    }
    swift_bridgeObjectRelease();
  }
  v39 = objc_msgSend(*(id *)(v47 + 232), sel_accountNumber);
  if (v39)
  {
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v36 = v11;

    v37 = v35;
    v38 = v36;
  }
  else
  {
    v37 = 0;
    v38 = 0;
  }
  *(_QWORD *)(v47 + 528) = v38;
  *(_QWORD *)(v47 + 520) = v37;
  if (v38)
  {
    *(_QWORD *)(v47 + 16) = v37;
    *(_QWORD *)(v47 + 24) = v38;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      v34 = *(_QWORD *)(v47 + 248);
      v33 = *(_QWORD **)(v47 + 240);
      type metadata accessor for SFRowCardSection();
      v12 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v47 + 536) = v12;
      *(_QWORD *)(v47 + 168) = v12;
      *(_QWORD *)(v47 + 544) = *v33;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v13 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v34, 0, 1);
      v14 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v47 + 552) = v14;
      *v14 = *(_QWORD *)(v47 + 80);
      v14[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(*(_QWORD *)(v47 + 312), *(_QWORD *)(v47 + 248));
    }
    swift_bridgeObjectRelease();
  }
  v32 = objc_msgSend(*(id *)(v47 + 232), sel_balance);
  if (v32)
  {
    v30 = objc_msgSend(v32, sel_amount);

    v31 = v30;
  }
  else
  {
    v31 = 0;
  }
  *(_QWORD *)(v47 + 120) = v31;
  if (*(_QWORD *)(v47 + 120))
  {
    outlined destroy of SFRichText?((id *)(v47 + 120));
    v27 = *(id *)(v47 + 232);
    type metadata accessor for SFRowCardSection();
    v16 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v47 + 568) = v16;
    *(_QWORD *)(v47 + 152) = v16;
    v29 = objc_msgSend(v27, sel_balance);
    *(_QWORD *)(v47 + 576) = v29;
    has_malloc_size = _swift_stdlib_has_malloc_size();
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v47 + 584) = v17;
    *v17 = *(_QWORD *)(v47 + 80);
    v17[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
    return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)((uint64_t)v29, has_malloc_size & 1);
  }
  else
  {
    outlined destroy of SFRichText?((id *)(v47 + 120));
    v18 = objc_msgSend(*(id *)(v47 + 232), sel_secondaryBalance);
    v26 = v18;
    if (v18)
    {
      v24 = objc_msgSend(v18, sel_amount);

      v25 = v24;
    }
    else
    {
      v25 = 0;
    }
    *(_QWORD *)(v47 + 128) = v25;
    if (*(_QWORD *)(v47 + 128))
    {
      outlined destroy of SFRichText?((id *)(v47 + 128));
      v22 = *(id *)(v47 + 232);
      type metadata accessor for SFRowCardSection();
      v19 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v47 + 640) = v19;
      *(_QWORD *)(v47 + 136) = v19;
      v23 = objc_msgSend(v22, sel_secondaryBalance);
      *(_QWORD *)(v47 + 648) = v23;
      v20 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v47 + 656) = v20;
      *v20 = *(_QWORD *)(v47 + 80);
      v20[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)((uint64_t)v23, 0);
    }
    else
    {
      outlined destroy of SFRichText?((id *)(v47 + 128));
      v21 = *(_QWORD *)(v47 + 112);
      swift_bridgeObjectRetain();
      outlined destroy of [SFCardSection]();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v47 + 80) + 8))(v21);
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = *v1;
  v2 += 80;
  v4 = v2 - 64;
  *(_QWORD *)(v2 + 432) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 240));
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  id v10;
  _QWORD *v11;
  id v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  char has_malloc_size;
  id v23;
  id v24;
  id v25;
  id v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  id v42;

  v40 = *(void **)(v0 + 488);
  v41 = *(_QWORD *)(v0 + 480);
  v35 = *(_QWORD *)(v0 + 472);
  v38 = *(_QWORD *)(v0 + 320);
  v37 = *(_QWORD *)(v0 + 304);
  v39 = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 80) = v0;
  type metadata accessor for SFRichText();
  v1 = TemplatingResult.resultSectionsAsString.getter();
  v34 = @nonobjc SFRichText.__allocating_init(string:)(v1, v2);
  objc_msgSend(v40, sel_setLeadingText_);

  swift_bridgeObjectRetain();
  v36 = @nonobjc SFRichText.__allocating_init(string:)(v35, v41);
  objc_msgSend(v40, sel_setTrailingText_);

  v3 = v40;
  objc_msgSend(v40, sel_setSeparatorStyle_, 4);

  v4 = v40;
  *(_QWORD *)(v0 + 192) = v40;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
  Array.append(_:)();
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);

  swift_bridgeObjectRelease();
  v42 = objc_msgSend(*(id *)(v0 + 232), sel_accountNumber);
  if (v42)
  {
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v30 = v5;

    v31 = v29;
    v32 = v30;
  }
  else
  {
    v31 = 0;
    v32 = 0;
  }
  *(_QWORD *)(v33 + 528) = v32;
  *(_QWORD *)(v33 + 520) = v31;
  if (v32)
  {
    *(_QWORD *)(v33 + 16) = v31;
    *(_QWORD *)(v33 + 24) = v32;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      v28 = *(_QWORD *)(v33 + 248);
      v27 = *(_QWORD **)(v33 + 240);
      type metadata accessor for SFRowCardSection();
      v6 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v33 + 536) = v6;
      *(_QWORD *)(v33 + 168) = v6;
      *(_QWORD *)(v33 + 544) = *v27;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v7 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v28, 0, 1);
      v8 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v33 + 552) = v8;
      *v8 = *(_QWORD *)(v33 + 80);
      v8[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(*(_QWORD *)(v33 + 312), *(_QWORD *)(v33 + 248));
    }
    swift_bridgeObjectRelease();
  }
  v26 = objc_msgSend(*(id *)(v33 + 232), sel_balance);
  if (v26)
  {
    v24 = objc_msgSend(v26, sel_amount);

    v25 = v24;
  }
  else
  {
    v25 = 0;
  }
  *(_QWORD *)(v33 + 120) = v25;
  if (*(_QWORD *)(v33 + 120))
  {
    outlined destroy of SFRichText?((id *)(v33 + 120));
    v21 = *(id *)(v33 + 232);
    type metadata accessor for SFRowCardSection();
    v10 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v33 + 568) = v10;
    *(_QWORD *)(v33 + 152) = v10;
    v23 = objc_msgSend(v21, sel_balance);
    *(_QWORD *)(v33 + 576) = v23;
    has_malloc_size = _swift_stdlib_has_malloc_size();
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v33 + 584) = v11;
    *v11 = *(_QWORD *)(v33 + 80);
    v11[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
    return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)((uint64_t)v23, has_malloc_size & 1);
  }
  else
  {
    outlined destroy of SFRichText?((id *)(v33 + 120));
    v12 = objc_msgSend(*(id *)(v33 + 232), sel_secondaryBalance);
    v20 = v12;
    if (v12)
    {
      v18 = objc_msgSend(v12, sel_amount);

      v19 = v18;
    }
    else
    {
      v19 = 0;
    }
    *(_QWORD *)(v33 + 128) = v19;
    if (*(_QWORD *)(v33 + 128))
    {
      outlined destroy of SFRichText?((id *)(v33 + 128));
      v16 = *(id *)(v33 + 232);
      type metadata accessor for SFRowCardSection();
      v13 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v33 + 640) = v13;
      *(_QWORD *)(v33 + 136) = v13;
      v17 = objc_msgSend(v16, sel_secondaryBalance);
      *(_QWORD *)(v33 + 648) = v17;
      v14 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v33 + 656) = v14;
      *v14 = *(_QWORD *)(v33 + 80);
      v14[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)((uint64_t)v17, 0);
    }
    else
    {
      outlined destroy of SFRichText?((id *)(v33 + 128));
      v15 = *(_QWORD *)(v33 + 112);
      swift_bridgeObjectRetain();
      outlined destroy of [SFCardSection]();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v33 + 80) + 8))(v15);
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = *v1;
  v2 += 80;
  v4 = v2 - 64;
  *(_QWORD *)(v2 + 480) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 232));
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  _QWORD *v6;
  id v7;
  id v8;
  _QWORD *v9;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  char has_malloc_size;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;

  v29 = *(void **)(v0 + 536);
  v30 = *(_QWORD *)(v0 + 528);
  v24 = *(_QWORD *)(v0 + 520);
  v27 = *(_QWORD *)(v0 + 312);
  v26 = *(_QWORD *)(v0 + 304);
  v28 = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 80) = v0;
  type metadata accessor for SFRichText();
  v1 = TemplatingResult.resultSectionsAsString.getter();
  v23 = @nonobjc SFRichText.__allocating_init(string:)(v1, v2);
  objc_msgSend(v29, sel_setLeadingText_);

  swift_bridgeObjectRetain();
  v25 = @nonobjc SFRichText.__allocating_init(string:)(v24, v30);
  objc_msgSend(v29, sel_setTrailingText_);

  v3 = v29;
  *(_QWORD *)(v0 + 176) = v29;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
  Array.append(_:)();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);

  swift_bridgeObjectRelease();
  v4 = objc_msgSend(*(id *)(v0 + 232), sel_balance);
  v31 = v4;
  if (v4)
  {
    v20 = objc_msgSend(v4, sel_amount);

    v21 = v20;
  }
  else
  {
    v21 = 0;
  }
  *(_QWORD *)(v22 + 120) = v21;
  if (*(_QWORD *)(v22 + 120))
  {
    outlined destroy of SFRichText?((id *)(v22 + 120));
    v17 = *(void **)(v22 + 232);
    type metadata accessor for SFRowCardSection();
    v5 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v22 + 568) = v5;
    *(_QWORD *)(v22 + 152) = v5;
    v19 = objc_msgSend(v17, sel_balance);
    *(_QWORD *)(v22 + 576) = v19;
    has_malloc_size = _swift_stdlib_has_malloc_size();
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v22 + 584) = v6;
    *v6 = *(_QWORD *)(v22 + 80);
    v6[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
    return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)((uint64_t)v19, has_malloc_size & 1);
  }
  else
  {
    outlined destroy of SFRichText?((id *)(v22 + 120));
    v7 = objc_msgSend(*(id *)(v22 + 232), sel_secondaryBalance);
    v16 = v7;
    if (v7)
    {
      v14 = objc_msgSend(v7, sel_amount);

      v15 = v14;
    }
    else
    {
      v15 = 0;
    }
    *(_QWORD *)(v22 + 128) = v15;
    if (*(_QWORD *)(v22 + 128))
    {
      outlined destroy of SFRichText?((id *)(v22 + 128));
      v12 = *(id *)(v22 + 232);
      type metadata accessor for SFRowCardSection();
      v8 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v22 + 640) = v8;
      *(_QWORD *)(v22 + 136) = v8;
      v13 = objc_msgSend(v12, sel_secondaryBalance);
      *(_QWORD *)(v22 + 648) = v13;
      v9 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v22 + 656) = v9;
      *v9 = *(_QWORD *)(v22 + 80);
      v9[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)((uint64_t)v13, 0);
    }
    else
    {
      outlined destroy of SFRichText?((id *)(v22 + 128));
      v11 = *(_QWORD *)(v22 + 112);
      swift_bridgeObjectRetain();
      outlined destroy of [SFCardSection]();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v22 + 80) + 8))(v11);
    }
  }
}

{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  id v4;
  id v5;
  uint64_t v6;
  id v7;

  v4 = (id)v0[74];
  v1 = (void *)v0[71];
  v5 = (id)v0[29];
  v0[10] = v0;
  objc_msgSend(v1, sel_setLeadingText_);

  v7 = objc_msgSend(v5, sel_balance);
  v0[76] = v7;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 616) = v2;
  *v2 = *(_QWORD *)(v6 + 80);
  v2[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  return SearchForAccountsViewBuilder.buildBalanceText(for:)((uint64_t)v7);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  _QWORD *v6;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;

  v14 = *(void **)(v0 + 624);
  v1 = *(void **)(v0 + 568);
  v15 = v1;
  *(_QWORD *)(v0 + 80) = v0;
  objc_msgSend(v1, sel_setTrailingText_);

  v2 = v15;
  objc_msgSend(v15, sel_setSeparatorStyle_, 4);

  v3 = v15;
  *(_QWORD *)(v0 + 160) = v15;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
  Array.append(_:)();

  v4 = objc_msgSend(*(id *)(v0 + 232), sel_secondaryBalance);
  v16 = v4;
  if (v4)
  {
    v11 = objc_msgSend(v4, sel_amount);

    v12 = v11;
  }
  else
  {
    v12 = 0;
  }
  *(_QWORD *)(v13 + 128) = v12;
  if (*(_QWORD *)(v13 + 128))
  {
    outlined destroy of SFRichText?((id *)(v13 + 128));
    v9 = *(id *)(v13 + 232);
    type metadata accessor for SFRowCardSection();
    v5 = SAUIAppPunchOut.__allocating_init()();
    *(_QWORD *)(v13 + 640) = v5;
    *(_QWORD *)(v13 + 136) = v5;
    v10 = objc_msgSend(v9, sel_secondaryBalance);
    *(_QWORD *)(v13 + 648) = v10;
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v13 + 656) = v6;
    *v6 = *(_QWORD *)(v13 + 80);
    v6[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
    return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)((uint64_t)v10, 0);
  }
  else
  {
    outlined destroy of SFRichText?((id *)(v13 + 128));
    v8 = *(_QWORD *)(v13 + 112);
    swift_bridgeObjectRetain();
    outlined destroy of [SFCardSection]();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 80) + 8))(v8);
  }
}

{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  id v4;
  id v5;
  uint64_t v6;
  id v7;

  v4 = (id)v0[83];
  v1 = (void *)v0[80];
  v5 = (id)v0[29];
  v0[10] = v0;
  objc_msgSend(v1, sel_setLeadingText_);

  v7 = objc_msgSend(v5, sel_secondaryBalance);
  v0[85] = v7;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 688) = v2;
  *v2 = *(_QWORD *)(v6 + 80);
  v2[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  return SearchForAccountsViewBuilder.buildBalanceText(for:)((uint64_t)v7);
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  id v5;
  id v6;
  uint64_t v7;

  v5 = (id)v0[87];
  v1 = (void *)v0[80];
  v6 = v1;
  v0[10] = v0;
  objc_msgSend(v1, sel_setTrailingText_);

  v2 = v6;
  objc_msgSend(v6, sel_setSeparatorStyle_, 4);

  v3 = v6;
  v0[18] = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
  Array.append(_:)();

  v7 = v0[14];
  swift_bridgeObjectRetain();
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[10] + 8))(v7);
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;

  v3 = (id)v0[46];
  v1 = v0[36];
  v0[10] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();

  swift_bridgeObjectRelease();
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[10] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;

  v3 = (id)v0[50];
  v1 = v0[35];
  v0[10] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[10] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v7 = (id)v0[50];
  v5 = v0[42];
  v4 = v0[38];
  v6 = v0[37];
  v3 = v0[34];
  v1 = v0[33];
  v0[10] = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v3);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[10] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;

  v3 = (id)v0[61];
  v1 = v0[32];
  v0[10] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();

  swift_bridgeObjectRelease();
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[10] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;

  v3 = (id)v0[67];
  v1 = v0[31];
  v0[10] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();

  swift_bridgeObjectRelease();
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[10] + 8))();
}

{
  _QWORD *v0;
  void *v1;
  id v3;

  v1 = (void *)v0[72];
  v3 = (id)v0[71];
  v0[10] = v0;

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[10] + 8))();
}

{
  _QWORD *v0;
  void *v1;
  id v3;

  v1 = (void *)v0[76];
  v3 = (id)v0[71];
  v0[10] = v0;

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[10] + 8))();
}

{
  _QWORD *v0;
  void *v1;
  id v3;

  v1 = (void *)v0[81];
  v3 = (id)v0[80];
  v0[10] = v0;

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[10] + 8))();
}

{
  _QWORD *v0;
  void *v1;
  id v3;

  v1 = (void *)v0[85];
  v3 = (id)v0[80];
  v0[10] = v0;

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[10] + 8))();
}

uint64_t SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[10] = *v2;
  v3 += 10;
  v5 = v3 - 8;
  v3[64] = a1;
  v3[65] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[10] = *v2;
  v3 += 10;
  v5 = v3 - 8;
  v3[68] = a1;
  v3[69] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[10] = *v2;
  v3 += 10;
  v5 = v3 - 8;
  v3[73] = a1;
  v3[74] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[10] = *v2;
  v3 += 10;
  v5 = v3 - 8;
  v3[77] = a1;
  v3[78] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

uint64_t SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 + 88) = v2;
  *(_BYTE *)(v3 + 225) = a2 & 1;
  *(_QWORD *)(v3 + 80) = a1;
  *(_QWORD *)(v3 + 32) = v3;
  *(_QWORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_BYTE *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v3 + 96) = swift_task_alloc();
  *(_QWORD *)(v3 + 104) = swift_task_alloc();
  *(_QWORD *)(v3 + 112) = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v3 + 120) = v4;
  *(_QWORD *)(v3 + 128) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 136) = swift_task_alloc();
  *(_QWORD *)(v3 + 144) = swift_task_alloc();
  *(_QWORD *)(v3 + 152) = swift_task_alloc();
  *(_QWORD *)(v3 + 160) = swift_task_alloc();
  *(_QWORD *)(v3 + 40) = a1;
  *(_BYTE *)(v3 + 224) = a2 & 1;
  *(_QWORD *)(v3 + 48) = v2;
  return swift_task_switch();
}

uint64_t SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)()
{
  uint64_t v0;
  id v1;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v4;
  Swift::String v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;

  v20 = *(void **)(v0 + 80);
  *(_QWORD *)(v0 + 32) = v0;
  v1 = v20;
  if (v20)
  {
    v18 = *(void **)(v19 + 80);
    *(_QWORD *)(v19 + 56) = v18;
    *(_QWORD *)(v19 + 64) = objc_msgSend(v18, sel_balanceType);
    *(_QWORD *)(v19 + 72) = 1;
    type metadata accessor for INBalanceType();
    lazy protocol witness table accessor for type INBalanceType and conformance INBalanceType();
    if ((== infix<A>(_:_:)() & 1) != 0)
    {
      if ((*(_BYTE *)(v19 + 225) & 1) != 0)
      {
        v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("balance", 7uLL, 1);
        object = v4._object;
        countAndFlagsBits = v4._countAndFlagsBits;
      }
      else
      {
        v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("secondaryBalance", 0x10uLL, 1);
        object = v5._object;
        countAndFlagsBits = v5._countAndFlagsBits;
      }
      *(_QWORD *)(v19 + 168) = object;
      v17 = *(_QWORD *)(v19 + 112);
      v6 = *(_QWORD **)(v19 + 88);
      *(_QWORD *)(v19 + 16) = countAndFlagsBits;
      *(_QWORD *)(v19 + 24) = object;
      *(_QWORD *)(v19 + 176) = *v6;
      swift_retain();
      String.toSpeakableString.getter();
      v7 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v17, 0, 1);
      v8 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v19 + 184) = v8;
      *v8 = *(_QWORD *)(v19 + 32);
      v8[1] = SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(*(_QWORD *)(v19 + 152), *(_QWORD *)(v19 + 112));
    }
    else
    {
      v13 = *(_QWORD *)(v19 + 104);
      v12 = *(_QWORD **)(v19 + 88);
      v16 = static Constants.PaymentAccountBalanceType.fromINBalanceType(_:)((unint64_t)objc_msgSend(v18, sel_balanceType), 0);
      *(_BYTE *)(v19 + 232) = v16;
      *(_QWORD *)(v19 + 200) = *v12;
      swift_retain();
      v14 = type metadata accessor for SpeakableString();
      v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
      v15(v13, 1);
      if (v16 == 4)
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))v15)(*(_QWORD *)(v19 + 96), 1, 1, v14);
      }
      else
      {
        v11 = *(_QWORD *)(v19 + 96);
        Constants.PaymentAccountBalanceType.asCATIDForLoc.getter(v16);
        String.toSpeakableString.getter();
        swift_bridgeObjectRelease();
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v15)(v11, 0, 1, v14);
      }
      v10 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v19 + 208) = v10;
      *v10 = *(_QWORD *)(v19 + 32);
      v10[1] = SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:);
      return SearchForAccountsCATs.labelForEnum(accountType:balanceType:)(*(_QWORD *)(v19 + 144), *(_QWORD *)(v19 + 104), *(_QWORD *)(v19 + 96));
    }
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v19 + 32) + 8))(0);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 32) = *v1;
  v2 += 32;
  v4 = v2 - 16;
  *(_QWORD *)(v2 + 160) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 96));
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  id v14;
  id v15;

  v1 = v0[20];
  v2 = v0[19];
  v3 = v0[16];
  v4 = v0[15];
  v0[4] = v0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v4);
  swift_bridgeObjectRelease();
  v13 = v0[20];
  v5 = v0[17];
  v8 = v0[16];
  v11 = v0[15];
  v14 = (id)v0[10];
  type metadata accessor for SFRichText();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, v13, v11);
  v9 = TemplatingResult.resultSectionsAsString.getter();
  v10 = v6;
  v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v12(v5, v11);
  v15 = @nonobjc SFRichText.__allocating_init(string:)(v9, v10);
  v12(v13, v11);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0[4] + 8))(v15);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(v2 + 32) = *v1;
  v2 += 32;
  v5 = v2 - 16;
  *(_QWORD *)(v2 + 184) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 88);
    outlined destroy of SpeakableString?(*(_QWORD *)(v5 + 80));
    outlined destroy of SpeakableString?(v4);
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  id v14;
  id v15;

  v1 = v0[20];
  v2 = v0[18];
  v3 = v0[16];
  v4 = v0[15];
  v0[4] = v0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v4);
  v13 = v0[20];
  v5 = v0[17];
  v8 = v0[16];
  v11 = v0[15];
  v14 = (id)v0[10];
  type metadata accessor for SFRichText();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, v13, v11);
  v9 = TemplatingResult.resultSectionsAsString.getter();
  v10 = v6;
  v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v12(v5, v11);
  v15 = @nonobjc SFRichText.__allocating_init(string:)(v9, v10);
  v12(v13, v11);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0[4] + 8))(v15);
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;

  v1 = v0[14];
  v3 = (id)v0[10];
  v0[4] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[4] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  id v4;

  v3 = v0[13];
  v1 = v0[12];
  v4 = (id)v0[10];
  v0[4] = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v3);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[4] + 8))();
}

uint64_t SearchForAccountsViewBuilder.buildBalanceText(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[15] = a1;
  v2[8] = v2;
  v2[9] = 0;
  v2[10] = 0;
  v2[11] = 0;
  v2[12] = 0;
  v2[9] = a1;
  v2[10] = v1;
  return swift_task_switch();
}

uint64_t SearchForAccountsViewBuilder.buildBalanceText(for:)()
{
  _QWORD *v0;
  id v1;
  id v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  char v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;

  v30 = (void *)v0[15];
  v0[8] = v0;
  type metadata accessor for NSNumberFormatter();
  v29 = SAUIAppPunchOut.__allocating_init()();
  v0[11] = v29;
  objc_msgSend(v29, sel_setNumberStyle_, 2);
  v1 = v30;
  if (v30)
  {
    v25 = *(void **)(v28 + 120);
    v26 = objc_msgSend(v25, sel_amount);

    v27 = v26;
  }
  else
  {
    v27 = 0;
  }
  if (!v27)
  {

    v14 = 0;
    return (*(uint64_t (**)(id))(*(_QWORD *)(v28 + 64) + 8))(v14);
  }
  v24 = *(void **)(v28 + 120);
  *(_QWORD *)(v28 + 96) = v27;
  v2 = v24;
  if (v24)
  {
    v20 = *(void **)(v28 + 120);
    v21 = objc_msgSend(v20, sel_balanceType);

    v22 = v21;
    v23 = 0;
  }
  else
  {
    v22 = 0;
    v23 = 1;
  }
  *(_QWORD *)(v28 + 16) = v22;
  *(_BYTE *)(v28 + 24) = v23 & 1;
  *(_QWORD *)(v28 + 32) = 1;
  *(_BYTE *)(v28 + 40) = 0;
  if ((*(_BYTE *)(v28 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(v28 + 40) & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    outlined init with copy of Int?(v28 + 16, v28 + 48);
    if ((*(_BYTE *)(v28 + 40) & 1) != 0
      || (*(_QWORD *)(v28 + 104) = *(_QWORD *)(v28 + 48),
          *(_QWORD *)(v28 + 112) = *(_QWORD *)(v28 + 32),
          type metadata accessor for INBalanceType(),
          lazy protocol witness table accessor for type INBalanceType and conformance INBalanceType(),
          v3 = dispatch thunk of static Equatable.== infix(_:_:)(),
          (v3 & 1) == 0))
    {
LABEL_19:
      objc_msgSend(v29, sel_setNumberStyle_, 1);
      type metadata accessor for SFRichText();
      v12 = objc_msgSend(v29, sel_stringFromNumber_, v27);
      if (v12)
      {
        v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v9 = v5;

        v10 = v8;
        v11 = v9;
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
      v7 = @nonobjc SFRichText.__allocating_init(string:)(v10, v11);

      v14 = v7;
      return (*(uint64_t (**)(id))(*(_QWORD *)(v28 + 64) + 8))(v14);
    }
  }
  type metadata accessor for SFRichText();
  v19 = objc_msgSend(v29, sel_stringFromNumber_, v27);
  if (v19)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v16 = v4;

    v17 = v15;
    v18 = v16;
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  v13 = @nonobjc SFRichText.__allocating_init(string:)(v17, v18);

  v14 = v13;
  return (*(uint64_t (**)(id))(*(_QWORD *)(v28 + 64) + 8))(v14);
}

uint64_t implicit closure #1 in SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  swift_bridgeObjectRetain();
  result = a1;
  *a2 = a1;
  return result;
}

uint64_t default argument 3 of static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)()
{
  return specialized static Array._allocateUninitialized(_:)(0);
}

uint64_t SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 + 96) = v2;
  *(_BYTE *)(v3 + 233) = a2 & 1;
  *(_QWORD *)(v3 + 88) = a1;
  *(_QWORD *)(v3 + 32) = v3;
  *(_QWORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_BYTE *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v3 + 104) = swift_task_alloc();
  *(_QWORD *)(v3 + 112) = swift_task_alloc();
  *(_QWORD *)(v3 + 120) = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v3 + 128) = v4;
  *(_QWORD *)(v3 + 136) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 144) = swift_task_alloc();
  *(_QWORD *)(v3 + 152) = swift_task_alloc();
  *(_QWORD *)(v3 + 160) = swift_task_alloc();
  *(_QWORD *)(v3 + 168) = swift_task_alloc();
  *(_QWORD *)(v3 + 40) = a1;
  *(_BYTE *)(v3 + 232) = a2 & 1;
  *(_QWORD *)(v3 + 48) = v2;
  return swift_task_switch();
}

uint64_t SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)()
{
  uint64_t v0;
  id v1;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v4;
  Swift::String v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;

  v20 = *(void **)(v0 + 88);
  *(_QWORD *)(v0 + 32) = v0;
  v1 = v20;
  if (v20)
  {
    v18 = *(void **)(v19 + 88);
    *(_QWORD *)(v19 + 56) = v18;
    *(_QWORD *)(v19 + 64) = objc_msgSend(v18, sel_balanceType);
    *(_QWORD *)(v19 + 72) = 1;
    type metadata accessor for INBalanceType();
    lazy protocol witness table accessor for type INBalanceType and conformance INBalanceType();
    if ((== infix<A>(_:_:)() & 1) != 0)
    {
      if ((*(_BYTE *)(v19 + 233) & 1) != 0)
      {
        v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("balance", 7uLL, 1);
        object = v4._object;
        countAndFlagsBits = v4._countAndFlagsBits;
      }
      else
      {
        v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("secondaryBalance", 0x10uLL, 1);
        object = v5._object;
        countAndFlagsBits = v5._countAndFlagsBits;
      }
      *(_QWORD *)(v19 + 176) = object;
      v17 = *(_QWORD *)(v19 + 120);
      v6 = *(_QWORD **)(v19 + 96);
      *(_QWORD *)(v19 + 16) = countAndFlagsBits;
      *(_QWORD *)(v19 + 24) = object;
      *(_QWORD *)(v19 + 184) = *v6;
      swift_retain();
      String.toSpeakableString.getter();
      v7 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v17, 0, 1);
      v8 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v19 + 192) = v8;
      *v8 = *(_QWORD *)(v19 + 32);
      v8[1] = SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(*(_QWORD *)(v19 + 160), *(_QWORD *)(v19 + 120));
    }
    else
    {
      v13 = *(_QWORD *)(v19 + 112);
      v12 = *(_QWORD **)(v19 + 96);
      v16 = static Constants.PaymentAccountBalanceType.fromINBalanceType(_:)((unint64_t)objc_msgSend(v18, sel_balanceType), 0);
      *(_BYTE *)(v19 + 240) = v16;
      *(_QWORD *)(v19 + 208) = *v12;
      swift_retain();
      v14 = type metadata accessor for SpeakableString();
      v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
      v15(v13, 1);
      if (v16 == 4)
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))v15)(*(_QWORD *)(v19 + 104), 1, 1, v14);
      }
      else
      {
        v11 = *(_QWORD *)(v19 + 104);
        Constants.PaymentAccountBalanceType.asCATIDForLoc.getter(v16);
        String.toSpeakableString.getter();
        swift_bridgeObjectRelease();
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v15)(v11, 0, 1, v14);
      }
      v10 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v19 + 216) = v10;
      *v10 = *(_QWORD *)(v19 + 32);
      v10[1] = SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:);
      return SearchForAccountsCATs.labelForEnum(accountType:balanceType:)(*(_QWORD *)(v19 + 152), *(_QWORD *)(v19 + 112), *(_QWORD *)(v19 + 104));
    }
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v19 + 32) + 8))(0);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 32) = *v1;
  v2 += 32;
  v4 = v2 - 16;
  *(_QWORD *)(v2 + 168) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 104));
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  id v13;
  id v14;

  v1 = v0[21];
  v2 = v0[20];
  v3 = v0[17];
  v4 = v0[16];
  v0[4] = v0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v4);
  swift_bridgeObjectRelease();
  v10 = v0[21];
  v8 = v0[18];
  v7 = v0[17];
  v11 = v0[16];
  v13 = (id)v0[11];
  type metadata accessor for SAUIDecoratedText();
  v14 = SAUIAppPunchOut.__allocating_init()();
  v0[10] = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v10, v11);
  v5 = TemplatingResult.resultSectionsAsString.getter();
  v9 = (id)MEMORY[0x24957220C](v5);
  v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v12(v8, v11);
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_setText_, v9);

  v12(v10, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0[4] + 8))(v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(v2 + 32) = *v1;
  v2 += 32;
  v5 = v2 - 16;
  *(_QWORD *)(v2 + 192) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 96);
    outlined destroy of SpeakableString?(*(_QWORD *)(v5 + 88));
    outlined destroy of SpeakableString?(v4);
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  id v13;
  id v14;

  v1 = v0[21];
  v2 = v0[19];
  v3 = v0[17];
  v4 = v0[16];
  v0[4] = v0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v4);
  v10 = v0[21];
  v8 = v0[18];
  v7 = v0[17];
  v11 = v0[16];
  v13 = (id)v0[11];
  type metadata accessor for SAUIDecoratedText();
  v14 = SAUIAppPunchOut.__allocating_init()();
  v0[10] = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v10, v11);
  v5 = TemplatingResult.resultSectionsAsString.getter();
  v9 = (id)MEMORY[0x24957220C](v5);
  v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v12(v8, v11);
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_setText_, v9);

  v12(v10, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0[4] + 8))(v14);
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;

  v1 = v0[15];
  v3 = (id)v0[11];
  v0[4] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[4] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  id v4;

  v3 = v0[14];
  v1 = v0[13];
  v4 = (id)v0[11];
  v0[4] = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v3);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[4] + 8))();
}

uint64_t SearchForAccountsViewBuilder.buildWatchBalanceText(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[16] = a1;
  v2[8] = v2;
  v2[9] = 0;
  v2[10] = 0;
  v2[11] = 0;
  v2[12] = 0;
  v2[13] = 0;
  v2[9] = a1;
  v2[10] = v1;
  return swift_task_switch();
}

uint64_t SearchForAccountsViewBuilder.buildWatchBalanceText(for:)()
{
  _QWORD *v0;
  id v1;
  id v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  char v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;

  v33 = (void *)v0[16];
  v0[8] = v0;
  type metadata accessor for NSNumberFormatter();
  v32 = SAUIAppPunchOut.__allocating_init()();
  v0[11] = v32;
  objc_msgSend(v32, sel_setNumberStyle_, 2);
  v1 = v33;
  if (v33)
  {
    v28 = *(void **)(v31 + 128);
    v29 = objc_msgSend(v28, sel_amount);

    v30 = v29;
  }
  else
  {
    v30 = 0;
  }
  if (!v30)
  {

    v7 = 0;
    return (*(uint64_t (**)(id))(*(_QWORD *)(v31 + 64) + 8))(v7);
  }
  v27 = *(void **)(v31 + 128);
  *(_QWORD *)(v31 + 96) = v30;
  type metadata accessor for SAUIDecoratedText();
  v26 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v31 + 104) = v26;
  v2 = v27;
  if (v27)
  {
    v22 = *(void **)(v31 + 128);
    v23 = objc_msgSend(v22, sel_balanceType);

    v24 = v23;
    v25 = 0;
  }
  else
  {
    v24 = 0;
    v25 = 1;
  }
  *(_QWORD *)(v31 + 16) = v24;
  *(_BYTE *)(v31 + 24) = v25 & 1;
  *(_QWORD *)(v31 + 32) = 1;
  *(_BYTE *)(v31 + 40) = 0;
  if ((*(_BYTE *)(v31 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(v31 + 40) & 1) == 0)
      goto LABEL_22;
LABEL_14:
    v21 = objc_msgSend(v32, sel_stringFromNumber_, v30);
    if (v21)
    {
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v18 = v4;

      v19 = v17;
      v20 = v18;
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    if (v20)
    {
      v15 = MEMORY[0x24957220C](v19);
      swift_bridgeObjectRelease();
      v16 = (void *)v15;
    }
    else
    {
      v16 = 0;
    }
    objc_msgSend(v26, sel_setText_);

    goto LABEL_29;
  }
  outlined init with copy of Int?(v31 + 16, v31 + 48);
  if ((*(_BYTE *)(v31 + 40) & 1) == 0)
  {
    *(_QWORD *)(v31 + 112) = *(_QWORD *)(v31 + 48);
    *(_QWORD *)(v31 + 120) = *(_QWORD *)(v31 + 32);
    type metadata accessor for INBalanceType();
    lazy protocol witness table accessor for type INBalanceType and conformance INBalanceType();
    v3 = dispatch thunk of static Equatable.== infix(_:_:)();
    if ((v3 & 1) != 0)
      goto LABEL_14;
  }
LABEL_22:
  objc_msgSend(v32, sel_setNumberStyle_, 1);
  v14 = objc_msgSend(v32, sel_stringFromNumber_, v30);
  if (v14)
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v5;

    v12 = v10;
    v13 = v11;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  if (v13)
  {
    v8 = MEMORY[0x24957220C](v12);
    swift_bridgeObjectRelease();
    v9 = (void *)v8;
  }
  else
  {
    v9 = 0;
  }
  objc_msgSend(v26, sel_setText_);

LABEL_29:
  v7 = v26;
  return (*(uint64_t (**)(id))(*(_QWORD *)(v31 + 64) + 8))(v7);
}

uint64_t sub_2470AF568()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return implicit closure #1 in SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:)(*(_QWORD *)(v1 + 16), a1);
}

uint64_t SearchForAccountsViewBuilder.makeTemplateAction(for:app:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 + 272) = v2;
  *(_QWORD *)(v3 + 264) = a1;
  *(_QWORD *)(v3 + 80) = v3;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 192) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_BYTE *)(v3 + 760) = 0;
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 248) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 256) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v3 + 280) = swift_task_alloc();
  *(_QWORD *)(v3 + 288) = swift_task_alloc();
  *(_QWORD *)(v3 + 296) = swift_task_alloc();
  *(_QWORD *)(v3 + 304) = swift_task_alloc();
  *(_QWORD *)(v3 + 312) = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v3 + 320) = v4;
  *(_QWORD *)(v3 + 328) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 336) = swift_task_alloc();
  *(_QWORD *)(v3 + 344) = swift_task_alloc();
  *(_QWORD *)(v3 + 352) = swift_task_alloc();
  *(_QWORD *)(v3 + 360) = swift_task_alloc();
  *(_QWORD *)(v3 + 88) = a1;
  *(_QWORD *)(v3 + 96) = a2;
  *(_QWORD *)(v3 + 104) = v2;
  return swift_task_switch();
}

uint64_t SearchForAccountsViewBuilder.makeTemplateAction(for:app:)()
{
  _QWORD *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  id v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t);
  _QWORD *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  id v25;
  _QWORD *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  BOOL v43;
  id v44;
  id v45;
  id v46;
  char has_malloc_size;
  id v48;
  BOOL v49;
  id v50;
  id v51;
  id v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  _QWORD *v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  _QWORD *v68;
  uint64_t v69;
  char v70;
  id v71;
  _QWORD *v72;
  Class v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  Class isa;
  id v83;
  void *v84;
  void *v85;

  v84 = (void *)v0[33];
  v0[10] = v0;
  type metadata accessor for SASTViewTemplateAction();
  v1 = SAUIAppPunchOut.__allocating_init()();
  v0[46] = v1;
  v0[14] = v1;
  type metadata accessor for SASTItemGroup();
  v81 = SAUIAppPunchOut.__allocating_init()();
  v0[47] = v81;
  v0[15] = v81;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
  _allocateUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v81, sel_setTemplateItems_, isa);

  type metadata accessor for SASTPropertyListItem();
  v83 = SAUIAppPunchOut.__allocating_init()();
  v0[48] = v83;
  v0[16] = v83;
  v2 = SAUIAppPunchOut.__allocating_init()();
  v0[49] = v2;
  v0[17] = v2;
  v3 = SAUIAppPunchOut.__allocating_init()();
  v0[50] = v3;
  v0[18] = v3;
  v4 = SAUIAppPunchOut.__allocating_init()();
  v0[51] = v4;
  v0[19] = v4;
  v5 = SAUIAppPunchOut.__allocating_init()();
  v0[52] = v5;
  v0[20] = v5;
  v6 = SAUIAppPunchOut.__allocating_init()();
  v0[53] = v6;
  v0[21] = v6;
  v7 = objc_msgSend(v84, sel_organizationName);
  v85 = v7;
  if (v7)
  {
    v75 = objc_msgSend(v7, sel_spokenPhrase);
    v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v77 = v8;

    v78 = v76;
    v79 = v77;
  }
  else
  {
    v78 = 0;
    v79 = 0;
  }
  if (v79)
  {
    *(_QWORD *)(v80 + 64) = v78;
    *(_QWORD *)(v80 + 72) = v79;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      type metadata accessor for SAUIDecoratedText();
      v74 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v80 + 256) = v74;
      swift_bridgeObjectRetain();
      v71 = (id)MEMORY[0x24957220C](v78, v79);
      swift_bridgeObjectRelease();
      objc_msgSend(v74, sel_setText_, v71);

      _allocateUninitializedArray<A>(_:)();
      v72 = v9;
      v10 = v74;
      *v72 = v74;
      _finalizeUninitializedArray<A>(_:)();
      v73 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v83, sel_setDecoratedValues_, v73);

    }
    swift_bridgeObjectRelease();
  }
  v70 = static Constants.PaymentAccountType.fromINAccountType(_:)((unint64_t)objc_msgSend(*(id *)(v80 + 264), sel_accountType));
  *(_BYTE *)(v80 + 763) = v70;
  if (v70 != 9)
  {
    *(_BYTE *)(v80 + 760) = v70;
    *(_BYTE *)(v80 + 761) = v70;
    *(_BYTE *)(v80 + 762) = 0;
    lazy protocol witness table accessor for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      v69 = *(_QWORD *)(v80 + 312);
      v68 = *(_QWORD **)(v80 + 272);
      *(_QWORD *)(v80 + 432) = type metadata accessor for SAUIDecoratedText();
      v11 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v80 + 440) = v11;
      *(_QWORD *)(v80 + 240) = v11;
      *(_QWORD *)(v80 + 448) = *v68;
      swift_retain();
      SearchForAccountsSlots.rawValue.getter(1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v12 = type metadata accessor for SpeakableString();
      *(_QWORD *)(v80 + 456) = v12;
      v13 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
      *(_QWORD *)(v80 + 464) = v13;
      v13(v69, 0, 1);
      v14 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v80 + 472) = v14;
      *v14 = *(_QWORD *)(v80 + 80);
      v14[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(*(_QWORD *)(v80 + 360), *(_QWORD *)(v80 + 312));
    }
  }
  v67 = objc_msgSend(*(id *)(v80 + 264), sel_nickname);
  if (v67)
  {
    v62 = objc_msgSend(v67, sel_spokenPhrase);
    v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v64 = v15;

    v65 = v63;
    v66 = v64;
  }
  else
  {
    v65 = 0;
    v66 = 0;
  }
  *(_QWORD *)(v80 + 528) = v66;
  *(_QWORD *)(v80 + 520) = v65;
  if (v66)
  {
    *(_QWORD *)(v80 + 32) = v65;
    *(_QWORD *)(v80 + 40) = v66;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      v61 = *(_QWORD *)(v80 + 288);
      v60 = *(_QWORD **)(v80 + 272);
      *(_QWORD *)(v80 + 536) = type metadata accessor for SAUIDecoratedText();
      v16 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v80 + 544) = v16;
      *(_QWORD *)(v80 + 224) = v16;
      *(_QWORD *)(v80 + 552) = *v60;
      swift_retain();
      SearchForAccountsSlots.rawValue.getter(0);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v17 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v61, 0, 1);
      v18 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v80 + 560) = v18;
      *v18 = *(_QWORD *)(v80 + 80);
      v18[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(*(_QWORD *)(v80 + 344), *(_QWORD *)(v80 + 288));
    }
    swift_bridgeObjectRelease();
  }
  v59 = objc_msgSend(*(id *)(v80 + 264), sel_accountNumber);
  if (v59)
  {
    v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v56 = v20;

    v57 = v55;
    v58 = v56;
  }
  else
  {
    v57 = 0;
    v58 = 0;
  }
  *(_QWORD *)(v80 + 584) = v58;
  *(_QWORD *)(v80 + 576) = v57;
  if (v58)
  {
    *(_QWORD *)(v80 + 16) = v57;
    *(_QWORD *)(v80 + 24) = v58;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      v54 = *(_QWORD *)(v80 + 280);
      v53 = *(_QWORD **)(v80 + 272);
      *(_QWORD *)(v80 + 592) = type metadata accessor for SAUIDecoratedText();
      v21 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v80 + 600) = v21;
      *(_QWORD *)(v80 + 208) = v21;
      *(_QWORD *)(v80 + 608) = *v53;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v22 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v54, 0, 1);
      v23 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v80 + 616) = v23;
      *v23 = *(_QWORD *)(v80 + 80);
      v23[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(*(_QWORD *)(v80 + 336), *(_QWORD *)(v80 + 280));
    }
    swift_bridgeObjectRelease();
  }
  v52 = objc_msgSend(*(id *)(v80 + 264), sel_balance);
  if (v52)
  {
    v50 = objc_msgSend(v52, sel_amount);

    v51 = v50;
  }
  else
  {
    v51 = 0;
  }
  *(_QWORD *)(v80 + 176) = v51;
  v49 = *(_QWORD *)(v80 + 176) != 0;
  outlined destroy of SFRichText?((id *)(v80 + 176));
  if (v49)
  {
    v48 = objc_msgSend(*(id *)(v80 + 264), sel_balance);
    *(_QWORD *)(v80 + 632) = v48;
    has_malloc_size = _swift_stdlib_has_malloc_size();
    v24 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v80 + 640) = v24;
    *v24 = *(_QWORD *)(v80 + 80);
    v24[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
    return SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)((uint64_t)v48, has_malloc_size & 1);
  }
  else
  {
    v25 = objc_msgSend(*(id *)(v80 + 264), sel_secondaryBalance);
    v46 = v25;
    if (v25)
    {
      v44 = objc_msgSend(v25, sel_amount);

      v45 = v44;
    }
    else
    {
      v45 = 0;
    }
    *(_QWORD *)(v80 + 184) = v45;
    v43 = *(_QWORD *)(v80 + 184) != 0;
    outlined destroy of SFRichText?((id *)(v80 + 184));
    if (v43)
    {
      v42 = objc_msgSend(*(id *)(v80 + 264), sel_secondaryBalance);
      *(_QWORD *)(v80 + 696) = v42;
      v26 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v80 + 704) = v26;
      *v26 = *(_QWORD *)(v80 + 80);
      v26[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
      return SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)((uint64_t)v42, 0);
    }
    else
    {
      v35 = *(id *)(v80 + 424);
      v36 = *(id *)(v80 + 416);
      v37 = *(id *)(v80 + 408);
      v38 = *(id *)(v80 + 400);
      v39 = *(id *)(v80 + 392);
      v40 = *(id *)(v80 + 384);
      v41 = *(id *)(v80 + 376);
      v34 = *(id *)(v80 + 368);
      v27 = v40;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v40, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v28 = v39;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v39, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v29 = v38;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v38, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v30 = v37;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v37, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v31 = v36;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v36, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v32 = v35;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v35, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v33 = v41;
      objc_msgSend(v34, sel_setItemGroupView_, v41);

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v80 + 80) + 8))(*(_QWORD *)(v80 + 368));
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = *v1;
  v2 += 80;
  v4 = v2 - 64;
  *(_QWORD *)(v2 + 400) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 296));
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  char v16;

  v13 = *(void **)(v0 + 440);
  v16 = *(_BYTE *)(v0 + 763);
  v12 = *(_QWORD *)(v0 + 360);
  v10 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 320);
  v15 = *(_QWORD **)(v0 + 272);
  *(_QWORD *)(v0 + 80) = v0;
  v1 = TemplatingResult.resultSectionsAsString.getter();
  v14 = (void *)MEMORY[0x24957220C](v1);
  v2 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  *(_QWORD *)(v0 + 488) = v2;
  v2(v12, v11);
  swift_bridgeObjectRelease();
  objc_msgSend(v13, sel_setText_, v14);

  *(_QWORD *)(v0 + 496) = *v15;
  swift_retain();
  Constants.PaymentAccountType.asCATIDForLoc.getter(v16);
  if (v3)
  {
    v8 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v9[58];
    v7 = v9[57];
    v6 = v9[38];
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v8(v6, 0, 1, v7);
  }
  else
  {
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))v9[58])(v9[38], 1, 1, v9[57]);
  }
  ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))v9[58])(v9[37], 1, 1, v9[57]);
  v4 = (_QWORD *)swift_task_alloc();
  v9[63] = v4;
  *v4 = v9[10];
  v4[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  return SearchForAccountsCATs.labelForEnum(accountType:balanceType:)(v9[44], v9[38], v9[37]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = *v1;
  v2 += 80;
  v5 = v2 - 64;
  *(_QWORD *)(v2 + 432) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 288);
    outlined destroy of SpeakableString?(*(_QWORD *)(v5 + 280));
    outlined destroy of SpeakableString?(v4);
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;
  id v16;
  _QWORD *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  BOOL v34;
  id v35;
  id v36;
  id v37;
  char has_malloc_size;
  id v39;
  BOOL v40;
  id v41;
  id v42;
  id v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  _QWORD *v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  _QWORD *v64;
  void *v65;
  Class isa;
  id v67;
  uint64_t v68;
  void *v69;
  void *v70;

  v59 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
  v69 = *(void **)(v0 + 440);
  v65 = *(void **)(v0 + 392);
  v60 = *(_QWORD *)(v0 + 352);
  v61 = *(_QWORD *)(v0 + 320);
  *(_QWORD *)(v0 + 80) = v0;
  v62 = TemplatingResult.resultSectionsAsString.getter();
  v68 = v1;
  *(_QWORD *)(v0 + 48) = v62;
  *(_QWORD *)(v0 + 56) = v1;
  v59(v60, v61);
  v67 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v0 + 248) = v67;
  swift_bridgeObjectRetain();
  v63 = (void *)MEMORY[0x24957220C](v62, v68);
  swift_bridgeObjectRelease();
  objc_msgSend(v67, sel_setText_, v63);

  v2 = v69;
  objc_msgSend(v65, sel_setDecoratedTitle_, v69);

  _allocateUninitializedArray<A>(_:)();
  v64 = v3;
  v4 = v67;
  *v64 = v67;
  _finalizeUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v65, sel_setDecoratedValues_, isa);

  swift_bridgeObjectRelease();
  v5 = objc_msgSend(*(id *)(v0 + 264), sel_nickname);
  v70 = v5;
  if (v5)
  {
    v53 = objc_msgSend(v5, sel_spokenPhrase);
    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v55 = v6;

    v56 = v54;
    v57 = v55;
  }
  else
  {
    v56 = 0;
    v57 = 0;
  }
  *(_QWORD *)(v58 + 528) = v57;
  *(_QWORD *)(v58 + 520) = v56;
  if (v57)
  {
    *(_QWORD *)(v58 + 32) = v56;
    *(_QWORD *)(v58 + 40) = v57;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      v52 = *(_QWORD *)(v58 + 288);
      v51 = *(_QWORD **)(v58 + 272);
      *(_QWORD *)(v58 + 536) = type metadata accessor for SAUIDecoratedText();
      v7 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v58 + 544) = v7;
      *(_QWORD *)(v58 + 224) = v7;
      *(_QWORD *)(v58 + 552) = *v51;
      swift_retain();
      SearchForAccountsSlots.rawValue.getter(0);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v8 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v52, 0, 1);
      v9 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v58 + 560) = v9;
      *v9 = *(_QWORD *)(v58 + 80);
      v9[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(*(_QWORD *)(v58 + 344), *(_QWORD *)(v58 + 288));
    }
    swift_bridgeObjectRelease();
  }
  v50 = objc_msgSend(*(id *)(v58 + 264), sel_accountNumber);
  if (v50)
  {
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v47 = v10;

    v48 = v46;
    v49 = v47;
  }
  else
  {
    v48 = 0;
    v49 = 0;
  }
  *(_QWORD *)(v58 + 584) = v49;
  *(_QWORD *)(v58 + 576) = v48;
  if (v49)
  {
    *(_QWORD *)(v58 + 16) = v48;
    *(_QWORD *)(v58 + 24) = v49;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      v45 = *(_QWORD *)(v58 + 280);
      v44 = *(_QWORD **)(v58 + 272);
      *(_QWORD *)(v58 + 592) = type metadata accessor for SAUIDecoratedText();
      v11 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v58 + 600) = v11;
      *(_QWORD *)(v58 + 208) = v11;
      *(_QWORD *)(v58 + 608) = *v44;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v12 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v45, 0, 1);
      v13 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v58 + 616) = v13;
      *v13 = *(_QWORD *)(v58 + 80);
      v13[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(*(_QWORD *)(v58 + 336), *(_QWORD *)(v58 + 280));
    }
    swift_bridgeObjectRelease();
  }
  v43 = objc_msgSend(*(id *)(v58 + 264), sel_balance);
  if (v43)
  {
    v41 = objc_msgSend(v43, sel_amount);

    v42 = v41;
  }
  else
  {
    v42 = 0;
  }
  *(_QWORD *)(v58 + 176) = v42;
  v40 = *(_QWORD *)(v58 + 176) != 0;
  outlined destroy of SFRichText?((id *)(v58 + 176));
  if (v40)
  {
    v39 = objc_msgSend(*(id *)(v58 + 264), sel_balance);
    *(_QWORD *)(v58 + 632) = v39;
    has_malloc_size = _swift_stdlib_has_malloc_size();
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v58 + 640) = v15;
    *v15 = *(_QWORD *)(v58 + 80);
    v15[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
    return SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)((uint64_t)v39, has_malloc_size & 1);
  }
  else
  {
    v16 = objc_msgSend(*(id *)(v58 + 264), sel_secondaryBalance);
    v37 = v16;
    if (v16)
    {
      v35 = objc_msgSend(v16, sel_amount);

      v36 = v35;
    }
    else
    {
      v36 = 0;
    }
    *(_QWORD *)(v58 + 184) = v36;
    v34 = *(_QWORD *)(v58 + 184) != 0;
    outlined destroy of SFRichText?((id *)(v58 + 184));
    if (v34)
    {
      v33 = objc_msgSend(*(id *)(v58 + 264), sel_secondaryBalance);
      *(_QWORD *)(v58 + 696) = v33;
      v17 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v58 + 704) = v17;
      *v17 = *(_QWORD *)(v58 + 80);
      v17[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
      return SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)((uint64_t)v33, 0);
    }
    else
    {
      v26 = *(id *)(v58 + 424);
      v27 = *(id *)(v58 + 416);
      v28 = *(id *)(v58 + 408);
      v29 = *(id *)(v58 + 400);
      v30 = *(id *)(v58 + 392);
      v31 = *(id *)(v58 + 384);
      v32 = *(id *)(v58 + 376);
      v25 = *(id *)(v58 + 368);
      v18 = v31;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v31, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v19 = v30;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v30, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v20 = v29;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v29, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v21 = v28;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v28, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v22 = v27;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v27, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v23 = v26;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v26, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v24 = v32;
      objc_msgSend(v25, sel_setItemGroupView_, v32);

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v58 + 80) + 8))(*(_QWORD *)(v58 + 368));
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = *v1;
  v2 += 80;
  v4 = v2 - 64;
  *(_QWORD *)(v2 + 488) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 272));
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v10;
  id v11;
  _QWORD *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  BOOL v29;
  id v30;
  id v31;
  id v32;
  char has_malloc_size;
  id v34;
  BOOL v35;
  id v36;
  id v37;
  id v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  void *v53;
  Class isa;
  id v55;
  void *v56;
  uint64_t v57;
  id v58;

  v56 = *(void **)(v0 + 544);
  v57 = *(_QWORD *)(v0 + 528);
  v50 = *(_QWORD *)(v0 + 520);
  v53 = *(void **)(v0 + 400);
  v48 = *(_QWORD *)(v0 + 344);
  v46 = *(_QWORD *)(v0 + 328);
  v47 = *(_QWORD *)(v0 + 320);
  *(_QWORD *)(v0 + 80) = v0;
  v1 = TemplatingResult.resultSectionsAsString.getter();
  v49 = (void *)MEMORY[0x24957220C](v1);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v48, v47);
  swift_bridgeObjectRelease();
  objc_msgSend(v56, (SEL)0x1F2BB17C8, v49);

  v55 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v0 + 232) = v55;
  swift_bridgeObjectRetain();
  v51 = (void *)MEMORY[0x24957220C](v50, v57);
  swift_bridgeObjectRelease();
  objc_msgSend(v55, (SEL)0x1F2BB17C8, v51);

  v2 = v56;
  objc_msgSend(v53, sel_setDecoratedTitle_, v56);

  _allocateUninitializedArray<A>(_:)();
  v52 = v3;
  v4 = v55;
  *v52 = v55;
  _finalizeUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v53, sel_setDecoratedValues_, isa);

  swift_bridgeObjectRelease();
  v58 = objc_msgSend(*(id *)(v0 + 264), sel_accountNumber);
  if (v58)
  {
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v42 = v5;

    v43 = v41;
    v44 = v42;
  }
  else
  {
    v43 = 0;
    v44 = 0;
  }
  *(_QWORD *)(v45 + 584) = v44;
  *(_QWORD *)(v45 + 576) = v43;
  if (v44)
  {
    *(_QWORD *)(v45 + 16) = v43;
    *(_QWORD *)(v45 + 24) = v44;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      v40 = *(_QWORD *)(v45 + 280);
      v39 = *(_QWORD **)(v45 + 272);
      *(_QWORD *)(v45 + 592) = type metadata accessor for SAUIDecoratedText();
      v6 = SAUIAppPunchOut.__allocating_init()();
      *(_QWORD *)(v45 + 600) = v6;
      *(_QWORD *)(v45 + 208) = v6;
      *(_QWORD *)(v45 + 608) = *v39;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v7 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v40, 0, 1);
      v8 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v45 + 616) = v8;
      *v8 = *(_QWORD *)(v45 + 80);
      v8[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(*(_QWORD *)(v45 + 336), *(_QWORD *)(v45 + 280));
    }
    swift_bridgeObjectRelease();
  }
  v38 = objc_msgSend(*(id *)(v45 + 264), sel_balance);
  if (v38)
  {
    v36 = objc_msgSend(v38, sel_amount);

    v37 = v36;
  }
  else
  {
    v37 = 0;
  }
  *(_QWORD *)(v45 + 176) = v37;
  v35 = *(_QWORD *)(v45 + 176) != 0;
  outlined destroy of SFRichText?((id *)(v45 + 176));
  if (v35)
  {
    v34 = objc_msgSend(*(id *)(v45 + 264), sel_balance);
    *(_QWORD *)(v45 + 632) = v34;
    has_malloc_size = _swift_stdlib_has_malloc_size();
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v45 + 640) = v10;
    *v10 = *(_QWORD *)(v45 + 80);
    v10[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
    return SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)((uint64_t)v34, has_malloc_size & 1);
  }
  else
  {
    v11 = objc_msgSend(*(id *)(v45 + 264), sel_secondaryBalance);
    v32 = v11;
    if (v11)
    {
      v30 = objc_msgSend(v11, sel_amount);

      v31 = v30;
    }
    else
    {
      v31 = 0;
    }
    *(_QWORD *)(v45 + 184) = v31;
    v29 = *(_QWORD *)(v45 + 184) != 0;
    outlined destroy of SFRichText?((id *)(v45 + 184));
    if (v29)
    {
      v28 = objc_msgSend(*(id *)(v45 + 264), sel_secondaryBalance);
      *(_QWORD *)(v45 + 696) = v28;
      v12 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v45 + 704) = v12;
      *v12 = *(_QWORD *)(v45 + 80);
      v12[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
      return SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)((uint64_t)v28, 0);
    }
    else
    {
      v21 = *(id *)(v45 + 424);
      v22 = *(id *)(v45 + 416);
      v23 = *(id *)(v45 + 408);
      v24 = *(id *)(v45 + 400);
      v25 = *(id *)(v45 + 392);
      v26 = *(id *)(v45 + 384);
      v27 = *(id *)(v45 + 376);
      v20 = *(id *)(v45 + 368);
      v13 = v26;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v26, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v14 = v25;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v25, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v15 = v24;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v24, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v16 = v23;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v23, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v17 = v22;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v22, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v18 = v21;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v21, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v19 = v27;
      objc_msgSend(v20, sel_setItemGroupView_, v27);

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v45 + 80) + 8))(*(_QWORD *)(v45 + 368));
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = *v1;
  v2 += 80;
  v4 = v2 - 64;
  *(_QWORD *)(v2 + 544) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 264));
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  id v4;
  id v5;
  _QWORD *v6;
  id v7;
  _QWORD *v8;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  BOOL v26;
  id v27;
  id v28;
  id v29;
  char has_malloc_size;
  id v31;
  BOOL v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  void *v43;
  Class isa;
  id v45;
  void *v46;
  uint64_t v47;
  void *v48;

  v46 = *(void **)(v0 + 600);
  v47 = *(_QWORD *)(v0 + 584);
  v40 = *(_QWORD *)(v0 + 576);
  v43 = *(void **)(v0 + 408);
  v38 = *(_QWORD *)(v0 + 336);
  v36 = *(_QWORD *)(v0 + 328);
  v37 = *(_QWORD *)(v0 + 320);
  *(_QWORD *)(v0 + 80) = v0;
  v1 = TemplatingResult.resultSectionsAsString.getter();
  v39 = (void *)MEMORY[0x24957220C](v1);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v38, v37);
  swift_bridgeObjectRelease();
  objc_msgSend(v46, (SEL)0x1F2BB17C8, v39);

  v45 = SAUIAppPunchOut.__allocating_init()();
  *(_QWORD *)(v0 + 216) = v45;
  swift_bridgeObjectRetain();
  v41 = (void *)MEMORY[0x24957220C](v40, v47);
  swift_bridgeObjectRelease();
  objc_msgSend(v45, (SEL)0x1F2BB17C8, v41);

  v2 = v46;
  objc_msgSend(v43, sel_setDecoratedTitle_, v46);

  _allocateUninitializedArray<A>(_:)();
  v42 = v3;
  v4 = v45;
  *v42 = v45;
  _finalizeUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v43, sel_setDecoratedValues_, isa);

  swift_bridgeObjectRelease();
  v5 = objc_msgSend(*(id *)(v0 + 264), sel_balance);
  v48 = v5;
  if (v5)
  {
    v33 = objc_msgSend(v5, sel_amount);

    v34 = v33;
  }
  else
  {
    v34 = 0;
  }
  *(_QWORD *)(v35 + 176) = v34;
  v32 = *(_QWORD *)(v35 + 176) != 0;
  outlined destroy of SFRichText?((id *)(v35 + 176));
  if (v32)
  {
    v31 = objc_msgSend(*(id *)(v35 + 264), sel_balance);
    *(_QWORD *)(v35 + 632) = v31;
    has_malloc_size = _swift_stdlib_has_malloc_size();
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v35 + 640) = v6;
    *v6 = *(_QWORD *)(v35 + 80);
    v6[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
    return SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)((uint64_t)v31, has_malloc_size & 1);
  }
  else
  {
    v7 = objc_msgSend(*(id *)(v35 + 264), sel_secondaryBalance);
    v29 = v7;
    if (v7)
    {
      v27 = objc_msgSend(v7, sel_amount);

      v28 = v27;
    }
    else
    {
      v28 = 0;
    }
    *(_QWORD *)(v35 + 184) = v28;
    v26 = *(_QWORD *)(v35 + 184) != 0;
    outlined destroy of SFRichText?((id *)(v35 + 184));
    if (v26)
    {
      v25 = objc_msgSend(*(id *)(v35 + 264), sel_secondaryBalance);
      *(_QWORD *)(v35 + 696) = v25;
      v8 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v35 + 704) = v8;
      *v8 = *(_QWORD *)(v35 + 80);
      v8[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
      return SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)((uint64_t)v25, 0);
    }
    else
    {
      v18 = *(id *)(v35 + 424);
      v19 = *(id *)(v35 + 416);
      v20 = *(id *)(v35 + 408);
      v21 = *(id *)(v35 + 400);
      v22 = *(id *)(v35 + 392);
      v23 = *(id *)(v35 + 384);
      v24 = *(id *)(v35 + 376);
      v17 = *(id *)(v35 + 368);
      v10 = v23;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v23, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v11 = v22;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v22, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v12 = v21;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v21, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v13 = v20;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v20, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v14 = v19;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v19, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v15 = v18;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v18, (uint64_t)&protocol witness table for SASTPropertyListItem);
      swift_unknownObjectRelease();
      v16 = v24;
      objc_msgSend(v17, sel_setItemGroupView_, v24);

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v35 + 80) + 8))(*(_QWORD *)(v35 + 368));
    }
  }
}

{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  id v4;
  id v5;
  uint64_t v6;
  id v7;

  v4 = (id)v0[81];
  v1 = (void *)v0[52];
  v5 = (id)v0[33];
  v0[10] = v0;
  objc_msgSend(v1, sel_setDecoratedTitle_);

  v7 = objc_msgSend(v5, sel_balance);
  v0[83] = v7;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 672) = v2;
  *v2 = *(_QWORD *)(v6 + 80);
  v2[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  return SearchForAccountsViewBuilder.buildWatchBalanceText(for:)((uint64_t)v7);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  id v3;
  id v4;
  _QWORD *v5;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  BOOL v23;
  id v24;
  id v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  Class isa;
  void *v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 680);
  *(_QWORD *)(v0 + 80) = v0;
  if (v1)
  {
    v30 = *(void **)(v31 + 680);
    v28 = *(void **)(v31 + 416);
    *(_QWORD *)(v31 + 200) = v30;
    type metadata accessor for SAUIDecoratedText();
    _allocateUninitializedArray<A>(_:)();
    v27 = v2;
    v3 = v30;
    *v27 = v30;
    _finalizeUninitializedArray<A>(_:)();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v28, sel_setDecoratedValues_, isa);

  }
  v4 = objc_msgSend(*(id *)(v31 + 264), sel_secondaryBalance);
  v26 = v4;
  if (v4)
  {
    v24 = objc_msgSend(v4, sel_amount);

    v25 = v24;
  }
  else
  {
    v25 = 0;
  }
  *(_QWORD *)(v31 + 184) = v25;
  v23 = *(_QWORD *)(v31 + 184) != 0;
  outlined destroy of SFRichText?((id *)(v31 + 184));
  if (v23)
  {
    v22 = objc_msgSend(*(id *)(v31 + 264), sel_secondaryBalance);
    *(_QWORD *)(v31 + 696) = v22;
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v31 + 704) = v5;
    *v5 = *(_QWORD *)(v31 + 80);
    v5[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
    return SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)((uint64_t)v22, 0);
  }
  else
  {
    v15 = *(id *)(v31 + 424);
    v16 = *(id *)(v31 + 416);
    v17 = *(id *)(v31 + 408);
    v18 = *(id *)(v31 + 400);
    v19 = *(id *)(v31 + 392);
    v20 = *(id *)(v31 + 384);
    v21 = *(id *)(v31 + 376);
    v14 = *(id *)(v31 + 368);
    v7 = v20;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v20, (uint64_t)&protocol witness table for SASTPropertyListItem);
    swift_unknownObjectRelease();
    v8 = v19;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v19, (uint64_t)&protocol witness table for SASTPropertyListItem);
    swift_unknownObjectRelease();
    v9 = v18;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v18, (uint64_t)&protocol witness table for SASTPropertyListItem);
    swift_unknownObjectRelease();
    v10 = v17;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v17, (uint64_t)&protocol witness table for SASTPropertyListItem);
    swift_unknownObjectRelease();
    v11 = v16;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v16, (uint64_t)&protocol witness table for SASTPropertyListItem);
    swift_unknownObjectRelease();
    v12 = v15;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v15, (uint64_t)&protocol witness table for SASTPropertyListItem);
    swift_unknownObjectRelease();
    v13 = v21;
    objc_msgSend(v14, sel_setItemGroupView_, v21);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v31 + 80) + 8))(*(_QWORD *)(v31 + 368));
  }
}

{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  id v4;
  id v5;
  uint64_t v6;
  id v7;

  v4 = (id)v0[89];
  v1 = (void *)v0[53];
  v5 = (id)v0[33];
  v0[10] = v0;
  objc_msgSend(v1, sel_setDecoratedTitle_);

  v7 = objc_msgSend(v5, sel_secondaryBalance);
  v0[91] = v7;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 736) = v2;
  *v2 = *(_QWORD *)(v6 + 80);
  v2[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  return SearchForAccountsViewBuilder.buildWatchBalanceText(for:)((uint64_t)v7);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _QWORD *v20;
  void *v21;
  Class isa;
  void *v23;
  _QWORD *v24;

  v1 = *(_QWORD *)(v0 + 744);
  *(_QWORD *)(v0 + 80) = v0;
  if (v1)
  {
    v23 = (void *)v24[93];
    v21 = (void *)v24[53];
    v24[24] = v23;
    type metadata accessor for SAUIDecoratedText();
    _allocateUninitializedArray<A>(_:)();
    v20 = v2;
    v3 = v23;
    *v20 = v23;
    _finalizeUninitializedArray<A>(_:)();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v21, sel_setDecoratedValues_, isa);

  }
  v13 = (id)v24[53];
  v14 = (id)v24[52];
  v15 = (id)v24[51];
  v16 = (id)v24[50];
  v17 = (id)v24[49];
  v18 = (id)v24[48];
  v19 = (id)v24[47];
  v12 = (id)v24[46];
  v4 = v18;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v18, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  v5 = v17;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v17, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  v6 = v16;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v16, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  v7 = v15;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v15, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  v8 = v14;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v14, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  v9 = v13;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v13, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  v10 = v19;
  objc_msgSend(v12, sel_setItemGroupView_, v19);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v24[10] + 8))(v24[46]);
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v3 = (id)v0[55];
  v4 = (id)v0[53];
  v5 = (id)v0[52];
  v6 = (id)v0[51];
  v7 = (id)v0[50];
  v8 = (id)v0[49];
  v9 = (id)v0[48];
  v10 = (id)v0[47];
  v11 = (id)v0[46];
  v1 = v0[39];
  v0[10] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[10] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v4 = (id)v0[55];
  v5 = (id)v0[53];
  v6 = (id)v0[52];
  v7 = (id)v0[51];
  v8 = (id)v0[50];
  v9 = (id)v0[49];
  v10 = (id)v0[48];
  v11 = (id)v0[47];
  v12 = (id)v0[46];
  v3 = v0[38];
  v1 = v0[37];
  v0[10] = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v3);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[10] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v3 = (id)v0[68];
  v4 = (id)v0[53];
  v5 = (id)v0[52];
  v6 = (id)v0[51];
  v7 = (id)v0[50];
  v8 = (id)v0[49];
  v9 = (id)v0[48];
  v10 = (id)v0[47];
  v11 = (id)v0[46];
  v1 = v0[36];
  v0[10] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[10] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v3 = (id)v0[75];
  v4 = (id)v0[53];
  v5 = (id)v0[52];
  v6 = (id)v0[51];
  v7 = (id)v0[50];
  v8 = (id)v0[49];
  v9 = (id)v0[48];
  v10 = (id)v0[47];
  v11 = (id)v0[46];
  v1 = v0[35];
  v0[10] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[10] + 8))();
}

{
  _QWORD *v0;
  void *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v1 = (void *)v0[79];
  v3 = (id)v0[53];
  v4 = (id)v0[52];
  v5 = (id)v0[51];
  v6 = (id)v0[50];
  v7 = (id)v0[49];
  v8 = (id)v0[48];
  v9 = (id)v0[47];
  v10 = (id)v0[46];
  v0[10] = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[10] + 8))();
}

{
  _QWORD *v0;
  void *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v1 = (void *)v0[83];
  v3 = (id)v0[53];
  v4 = (id)v0[52];
  v5 = (id)v0[51];
  v6 = (id)v0[50];
  v7 = (id)v0[49];
  v8 = (id)v0[48];
  v9 = (id)v0[47];
  v10 = (id)v0[46];
  v0[10] = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[10] + 8))();
}

{
  _QWORD *v0;
  void *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v1 = (void *)v0[87];
  v3 = (id)v0[53];
  v4 = (id)v0[52];
  v5 = (id)v0[51];
  v6 = (id)v0[50];
  v7 = (id)v0[49];
  v8 = (id)v0[48];
  v9 = (id)v0[47];
  v10 = (id)v0[46];
  v0[10] = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[10] + 8))();
}

{
  _QWORD *v0;
  void *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v1 = (void *)v0[91];
  v3 = (id)v0[53];
  v4 = (id)v0[52];
  v5 = (id)v0[51];
  v6 = (id)v0[50];
  v7 = (id)v0[49];
  v8 = (id)v0[48];
  v9 = (id)v0[47];
  v10 = (id)v0[46];
  v0[10] = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[10] + 8))();
}

uint64_t SearchForAccountsViewBuilder.makeTemplateAction(for:app:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[10] = *v2;
  v3 += 10;
  v5 = v3 - 8;
  v3[71] = a1;
  v3[72] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[10] = *v2;
  v3 += 10;
  v5 = v3 - 8;
  v3[75] = a1;
  v3[76] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[10] = *v2;
  v3 += 10;
  v5 = v3 - 8;
  v3[79] = a1;
  v3[80] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[10] = *v2;
  v3 += 10;
  v5 = v3 - 8;
  v3[83] = a1;
  v3[84] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

void implicit closure #2 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v6;

  v6 = objc_msgSend(a1, sel_templateItems);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
    v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v4 = v3;
  }
  else
  {
    v4 = 0;
  }
  if (v4)
  {
    v2 = v4;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  *a2 = v2;
}

uint64_t SearchForAccountsViewBuilder.fillWatchLabelForAccountIfNeeded(account:label:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v3 + 136) = v2;
  *(_QWORD *)(v3 + 128) = a2;
  *(_QWORD *)(v3 + 120) = a1;
  *(_QWORD *)(v3 + 48) = v3;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v3 + 144) = swift_task_alloc();
  *(_QWORD *)(v3 + 152) = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v3 + 160) = v4;
  *(_QWORD *)(v3 + 168) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 176) = swift_task_alloc();
  v5 = type metadata accessor for Logger();
  *(_QWORD *)(v3 + 184) = v5;
  *(_QWORD *)(v3 + 192) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 200) = swift_task_alloc();
  *(_QWORD *)(v3 + 56) = a1;
  *(_QWORD *)(v3 + 64) = a2;
  *(_QWORD *)(v3 + 72) = v2;
  return swift_task_switch();
}

uint64_t SearchForAccountsViewBuilder.fillWatchLabelForAccountIfNeeded(account:label:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint32_t v34;
  os_log_type_t v35;
  NSObject *v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 200);
  v32 = *(_QWORD *)(v0 + 192);
  v33 = *(_QWORD *)(v0 + 184);
  *(_QWORD *)(v0 + 48) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v1, v2, v33);
  v36 = Logger.logObject.getter();
  v35 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 80) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v34 = *(_DWORD *)(v0 + 236);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v37 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v36, v35))
  {
    v27 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v28 = createStorage<A>(capacity:type:)(0);
    v29 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v31 + 88) = v27;
    *(_QWORD *)(v31 + 96) = v28;
    *(_QWORD *)(v31 + 104) = v29;
    serialize(_:at:)(0, (_BYTE **)(v31 + 88));
    serialize(_:at:)(0, (_BYTE **)(v31 + 88));
    *(_QWORD *)(v31 + 112) = v37;
    v30 = (_QWORD *)swift_task_alloc();
    v30[2] = v31 + 88;
    v30[3] = v31 + 96;
    v30[4] = v31 + 104;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24701B000, v36, v35, "#SearchForAccountsHandleIntentStrategy fillWatchLabelForAccountIfNeeded", v27, v34);
    destroyStorage<A>(_:count:)(v28, 0, v26);
    destroyStorage<A>(_:count:)(v29, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v27, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v31 + 200);
  v21 = *(_QWORD *)(v31 + 192);
  v23 = *(_QWORD *)(v31 + 184);
  v24 = *(void **)(v31 + 120);

  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
  v25 = static Constants.PaymentAccountType.fromINAccountType(_:)((unint64_t)objc_msgSend(v24, sel_accountType));
  if (v25 == 9
    || (*(_BYTE *)(v31 + 232) = v25,
        *(_BYTE *)(v31 + 233) = v25,
        *(_BYTE *)(v31 + 234) = 0,
        lazy protocol witness table accessor for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType(),
        (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0))
  {
    v17 = objc_msgSend(*(id *)(v31 + 120), sel_accountNumber);
    if (v17)
    {
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v9;

      v15 = v13;
      v16 = v14;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    if (v16)
    {
      *(_QWORD *)(v31 + 16) = v15;
      *(_QWORD *)(v31 + 24) = v16;
      if ((String.isEmpty.getter() & 1) == 0)
      {
        v12 = **(id **)(v31 + 128);
        v10 = v12;
        swift_bridgeObjectRetain();
        v11 = (id)MEMORY[0x24957220C](v15, v16);
        swift_bridgeObjectRelease();
        objc_msgSend(v12, sel_setText_, v11);

      }
      swift_bridgeObjectRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v31 + 48) + 8))();
  }
  else
  {
    *(_QWORD *)(v31 + 208) = **(_QWORD **)(v31 + 136);
    swift_retain();
    Constants.PaymentAccountType.asCATIDForLoc.getter(v25);
    if (v3)
    {
      v20 = *(_QWORD *)(v31 + 152);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v4 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v20, 0, 1);
    }
    else
    {
      v18 = *(_QWORD *)(v31 + 152);
      v8 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v18, 1);
    }
    v19 = *(_QWORD *)(v31 + 144);
    v5 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v19, 1);
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v31 + 216) = v6;
    *v6 = *(_QWORD *)(v31 + 48);
    v6[1] = SearchForAccountsViewBuilder.fillWatchLabelForAccountIfNeeded(account:label:);
    return SearchForAccountsCATs.labelForEnum(accountType:balanceType:)(*(_QWORD *)(v31 + 176), *(_QWORD *)(v31 + 152), *(_QWORD *)(v31 + 144));
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(v2 + 48) = *v1;
  v2 += 48;
  v5 = v2 - 32;
  *(_QWORD *)(v2 + 176) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 136);
    outlined destroy of SpeakableString?(*(_QWORD *)(v5 + 128));
    outlined destroy of SpeakableString?(v4);
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;

  v5 = v0[22];
  v4 = v0[21];
  v6 = v0[20];
  v7 = (id *)v0[16];
  v0[6] = v0;
  v8 = TemplatingResult.resultSectionsAsString.getter();
  v11 = v1;
  v0[4] = v8;
  v0[5] = v1;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  v10 = *v7;
  v2 = *v7;
  swift_bridgeObjectRetain();
  v9 = (id)MEMORY[0x24957220C](v8, v11);
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setText_, v9);

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[6] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = v0[19];
  v1 = v0[18];
  v0[6] = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[6] + 8))();
}

void implicit closure #3 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v6;

  v6 = objc_msgSend(a1, sel_templateItems);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
    v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v4 = v3;
  }
  else
  {
    v4 = 0;
  }
  if (v4)
  {
    v2 = v4;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  *a2 = v2;
}

uint64_t protocol witness for SearchForAccountsViewBuilding.buildSnippets(for:app:intent:) in conformance SearchForAccountsViewBuilder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ConfirmationViewBuilding.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:) in conformance ConfirmationViewBuilder;
  return SearchForAccountsViewBuilder.buildSnippets(for:app:intent:)(a1, a2, a3);
}

uint64_t sub_2470B6D70()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_1()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPaymentAccount]);
  v1 = lazy protocol witness table accessor for type [INPaymentAccount] and conformance [A]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

uint64_t sub_2470B6F70()
{
  return swift_deallocObject();
}

uint64_t sub_2470B6F98()
{
  return swift_deallocObject();
}

uint64_t sub_2470B6FC0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470B6FFC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470B7038()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for implicit closure #3 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)(uint64_t *a1@<X8>)
{
  uint64_t v1;

  implicit closure #3 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)(*(void **)(v1 + 16), a1);
}

uint64_t sub_2470B707C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470B7174()
{
  return swift_deallocObject();
}

uint64_t sub_2470B719C()
{
  return swift_deallocObject();
}

uint64_t sub_2470B71C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470B7200()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470B723C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for implicit closure #2 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)(uint64_t *a1@<X8>)
{
  uint64_t v1;

  implicit closure #2 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)(*(void **)(v1 + 16), a1);
}

uint64_t sub_2470B7280()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470B72BC()
{
  return swift_deallocObject();
}

uint64_t sub_2470B72E4()
{
  return swift_deallocObject();
}

uint64_t sub_2470B730C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470B7348()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470B7384()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2470B73C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470B73FC()
{
  return swift_deallocObject();
}

uint64_t sub_2470B7424()
{
  return swift_deallocObject();
}

uint64_t sub_2470B744C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470B7488()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t type metadata accessor for INPaymentAccount()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for INPaymentAccount;
  if (!lazy cache variable for type metadata for INPaymentAccount)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INPaymentAccount);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType;
  if (!lazy protocol witness table cache variable for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.PaymentAccountType, &type metadata for Constants.PaymentAccountType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType;
  if (!lazy protocol witness table cache variable for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for Constants.PaymentAccountType, &type metadata for Constants.PaymentAccountType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType);
    return v0;
  }
  return v2;
}

unint64_t type metadata accessor for SASTViewTemplateAction()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SASTViewTemplateAction;
  if (!lazy cache variable for type metadata for SASTViewTemplateAction)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SASTViewTemplateAction);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SASTPropertyListItem()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SASTPropertyListItem;
  if (!lazy cache variable for type metadata for SASTPropertyListItem)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SASTPropertyListItem);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t destroy for SearchForAccountsViewBuilder(uint64_t a1)
{
  swift_release();
  return __swift_destroy_boxed_opaque_existential_0(a1 + 8);
}

_QWORD *initializeWithCopy for SearchForAccountsViewBuilder(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  v2 = a2[4];
  a1[4] = v2;
  a1[5] = a2[5];
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

_QWORD *assignWithCopy for SearchForAccountsViewBuilder(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  swift_retain();
  *a1 = v3;
  swift_release();
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 1), a2 + 1);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy48_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x30uLL);
}

_QWORD *assignWithTake for SearchForAccountsViewBuilder(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(a1 + 1));
  memcpy(a1 + 1, a2 + 1, 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchForAccountsViewBuilder(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)a1))
        v3 = *(_QWORD *)a1;
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchForAccountsViewBuilder(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 48) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 48) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)result = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchForAccountsViewBuilder()
{
  return &type metadata for SearchForAccountsViewBuilder;
}

_QWORD *PayeeDisambiguationStrategy.__allocating_init()()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE **v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  uint64_t *v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint32_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  NSObject *v61;
  int v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint32_t v69;
  uint64_t v70[5];
  _QWORD v71[5];
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  uint64_t v76[5];
  uint64_t v77;
  _QWORD *v78;

  v77 = 0;
  v72 = 0;
  v26 = 0;
  v40 = 0;
  v45 = type metadata accessor for Logger();
  v44 = *(_QWORD *)(v45 - 8);
  v27 = (*(_QWORD *)(v44 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v42 = (char *)v17 - v27;
  v28 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v40);
  v29 = (char *)v17 - v28;
  v36 = type metadata accessor for SendPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v38 = CATWrapper.__allocating_init(options:globals:)();
  v77 = v38;
  v34 = type metadata accessor for Globals();
  v30 = v76;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v76);
  v31 = &v75;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v32 = &v74;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v33 = &v73;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v35 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v30, (uint64_t)v31, (uint64_t)v32, (uint64_t)v33);
  v72 = v35;
  swift_retain();
  swift_retain();
  v39 = v71;
  v71[3] = v34;
  v71[4] = &protocol witness table for Globals;
  v71[0] = v35;
  v37 = type metadata accessor for INSendPaymentIntent();
  type metadata accessor for INSendPaymentIntentResponse();
  v41 = v70;
  default argument 3 of ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:)(v70);
  v0 = PayeeDisambiguationStrategy.__allocating_init(catFamily:globals:mockGlobals:contactResolver:)(v38, (uint64_t)v39, v40, (uint64_t)v41);
  v1 = v42;
  v43 = v0;
  swift_retain();
  v78 = v43;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v1, v2, v45);
  v61 = Logger.logObject.getter();
  v62 = static os_log_type_t.debug.getter();
  v48 = &v68;
  v68 = 12;
  v46 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v49 = v69;
  v50 = 17;
  v52 = 7;
  v55 = swift_allocObject();
  *(_BYTE *)(v55 + 16) = 32;
  v56 = swift_allocObject();
  *(_BYTE *)(v56 + 16) = 8;
  v51 = 32;
  v3 = swift_allocObject();
  v53 = v3;
  *(_QWORD *)(v3 + 16) = implicit closure #1 in PayeeDisambiguationStrategy.init();
  *(_QWORD *)(v3 + 24) = 0;
  v4 = swift_allocObject();
  v5 = v53;
  v54 = v4;
  *(_QWORD *)(v4 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v4 + 24) = v5;
  v6 = swift_allocObject();
  v7 = v54;
  v58 = v6;
  *(_QWORD *)(v6 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v6 + 24) = v7;
  v60 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v57 = _allocateUninitializedArray<A>(_:)();
  v59 = v8;
  swift_retain();
  v9 = v55;
  v10 = v59;
  *v59 = partial apply for closure #1 in OSLogArguments.append(_:);
  v10[1] = v9;
  swift_retain();
  v11 = v56;
  v12 = v59;
  v59[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v12[3] = v11;
  swift_retain();
  v13 = v58;
  v14 = v59;
  v59[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v14[5] = v13;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v61, (os_log_type_t)v62))
  {
    v15 = v26;
    v19 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v20 = createStorage<A>(capacity:type:)(0);
    v21 = createStorage<A>(capacity:type:)(1);
    v22 = &v67;
    v67 = v19;
    v23 = &v66;
    v66 = v20;
    v24 = &v65;
    v65 = v21;
    serialize(_:at:)(2, &v67);
    serialize(_:at:)(1, v22);
    v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v64 = v55;
    closure #1 in osLogInternal(_:log:type:)(&v63, (uint64_t)v22, (uint64_t)v23, (uint64_t)v24);
    v25 = v15;
    if (v15)
    {
      __break(1u);
    }
    else
    {
      v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v64 = v56;
      closure #1 in osLogInternal(_:log:type:)(&v63, (uint64_t)&v67, (uint64_t)&v66, (uint64_t)&v65);
      v17[0] = 0;
      v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v64 = v58;
      closure #1 in osLogInternal(_:log:type:)(&v63, (uint64_t)&v67, (uint64_t)&v66, (uint64_t)&v65);
      _os_log_impl(&dword_24701B000, v61, (os_log_type_t)v62, "#ContactDisambiguationStrategy<%s> init", v19, v49);
      destroyStorage<A>(_:count:)(v20, 0, v18);
      destroyStorage<A>(_:count:)(v21, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v19, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v44 + 8))(v42, v45);
  swift_release();
  swift_release();
  swift_release();
  return v43;
}

_QWORD *PayerDisambiguationStrategy.__allocating_init()()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE **v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  uint64_t *v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint32_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  NSObject *v61;
  int v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint32_t v69;
  uint64_t v70[5];
  _QWORD v71[5];
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  uint64_t v76[5];
  uint64_t v77;
  _QWORD *v78;

  v77 = 0;
  v72 = 0;
  v26 = 0;
  v40 = 0;
  v45 = type metadata accessor for Logger();
  v44 = *(_QWORD *)(v45 - 8);
  v27 = (*(_QWORD *)(v44 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v42 = (char *)v17 - v27;
  v28 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v40);
  v29 = (char *)v17 - v28;
  v36 = type metadata accessor for RequestPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v38 = CATWrapper.__allocating_init(options:globals:)();
  v77 = v38;
  v34 = type metadata accessor for Globals();
  v30 = v76;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v76);
  v31 = &v75;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v32 = &v74;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v33 = &v73;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v35 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v30, (uint64_t)v31, (uint64_t)v32, (uint64_t)v33);
  v72 = v35;
  swift_retain();
  swift_retain();
  v39 = v71;
  v71[3] = v34;
  v71[4] = &protocol witness table for Globals;
  v71[0] = v35;
  v37 = type metadata accessor for INRequestPaymentIntent();
  type metadata accessor for INRequestPaymentIntentResponse();
  v41 = v70;
  default argument 3 of ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:)(v70);
  v0 = PayeeDisambiguationStrategy.__allocating_init(catFamily:globals:mockGlobals:contactResolver:)(v38, (uint64_t)v39, v40, (uint64_t)v41);
  v1 = v42;
  v43 = v0;
  swift_retain();
  v78 = v43;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v1, v2, v45);
  v61 = Logger.logObject.getter();
  v62 = static os_log_type_t.debug.getter();
  v48 = &v68;
  v68 = 12;
  v46 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v49 = v69;
  v50 = 17;
  v52 = 7;
  v55 = swift_allocObject();
  *(_BYTE *)(v55 + 16) = 32;
  v56 = swift_allocObject();
  *(_BYTE *)(v56 + 16) = 8;
  v51 = 32;
  v3 = swift_allocObject();
  v53 = v3;
  *(_QWORD *)(v3 + 16) = implicit closure #1 in PayerDisambiguationStrategy.init();
  *(_QWORD *)(v3 + 24) = 0;
  v4 = swift_allocObject();
  v5 = v53;
  v54 = v4;
  *(_QWORD *)(v4 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v4 + 24) = v5;
  v6 = swift_allocObject();
  v7 = v54;
  v58 = v6;
  *(_QWORD *)(v6 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v6 + 24) = v7;
  v60 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v57 = _allocateUninitializedArray<A>(_:)();
  v59 = v8;
  swift_retain();
  v9 = v55;
  v10 = v59;
  *v59 = partial apply for closure #1 in OSLogArguments.append(_:);
  v10[1] = v9;
  swift_retain();
  v11 = v56;
  v12 = v59;
  v59[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v12[3] = v11;
  swift_retain();
  v13 = v58;
  v14 = v59;
  v59[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v14[5] = v13;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v61, (os_log_type_t)v62))
  {
    v15 = v26;
    v19 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v20 = createStorage<A>(capacity:type:)(0);
    v21 = createStorage<A>(capacity:type:)(1);
    v22 = &v67;
    v67 = v19;
    v23 = &v66;
    v66 = v20;
    v24 = &v65;
    v65 = v21;
    serialize(_:at:)(2, &v67);
    serialize(_:at:)(1, v22);
    v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v64 = v55;
    closure #1 in osLogInternal(_:log:type:)(&v63, (uint64_t)v22, (uint64_t)v23, (uint64_t)v24);
    v25 = v15;
    if (v15)
    {
      __break(1u);
    }
    else
    {
      v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v64 = v56;
      closure #1 in osLogInternal(_:log:type:)(&v63, (uint64_t)&v67, (uint64_t)&v66, (uint64_t)&v65);
      v17[0] = 0;
      v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v64 = v58;
      closure #1 in osLogInternal(_:log:type:)(&v63, (uint64_t)&v67, (uint64_t)&v66, (uint64_t)&v65);
      _os_log_impl(&dword_24701B000, v61, (os_log_type_t)v62, "#ContactDisambiguationStrategy<%s> init", v19, v49);
      destroyStorage<A>(_:count:)(v20, 0, v18);
      destroyStorage<A>(_:count:)(v21, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v19, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v44 + 8))(v42, v45);
  swift_release();
  swift_release();
  swift_release();
  return v43;
}

uint64_t ContactDisambiguationStrategy.catFamily.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  swift_retain();
  return v2;
}

uint64_t default argument 3 of ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:)@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = type metadata accessor for SiriKitContactResolver();
  a1[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(a1);
  return SiriKitContactResolver.init()();
}

_QWORD *ContactDisambiguationStrategy.__allocating_init(catFamily:globals:mockGlobals:contactResolver:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  swift_allocObject();
  return ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:)(a1, a2, a3, a4);
}

_QWORD *ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE **v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint32_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  NSObject *v75;
  int v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  char v82[8];
  char v83[8];
  uint64_t v84;
  uint32_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v49 = a1;
  v48 = a2;
  v46 = a3;
  v47 = a4;
  v93 = 0;
  v91 = 0;
  v90 = 0;
  v89 = 0;
  v88 = 0;
  v45 = 0;
  v58 = *v4;
  v54 = type metadata accessor for Logger();
  v53 = *(_QWORD *)(v54 - 8);
  v50 = (*(_QWORD *)(v53 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = (char *)&v33 - v50;
  v52 = (char *)&v33 - v50;
  v93 = MEMORY[0x24BDAC7A8](v49);
  v57 = v6[12];
  v92 = v57;
  v91 = v7;
  v90 = v8;
  v89 = v9;
  v88 = v51;
  v55 = v6[10];
  v87 = v55;
  v56 = v6[11];
  v86 = v56;
  v10 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v5, v10, v54);
  v66 = 7;
  v11 = (_QWORD *)swift_allocObject();
  v12 = v56;
  v13 = v57;
  v14 = v58;
  v64 = v11;
  v11[2] = v55;
  v11[3] = v12;
  v11[4] = v13;
  v11[5] = *(_QWORD *)(v14 + 104);
  v75 = Logger.logObject.getter();
  v76 = static os_log_type_t.debug.getter();
  v61 = &v84;
  v84 = 12;
  v59 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v60 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v62 = v85;
  v63 = 17;
  v69 = swift_allocObject();
  *(_BYTE *)(v69 + 16) = 32;
  v70 = swift_allocObject();
  *(_BYTE *)(v70 + 16) = 8;
  v65 = 32;
  v15 = swift_allocObject();
  v16 = v64;
  v67 = v15;
  *(_QWORD *)(v15 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  *(_QWORD *)(v15 + 24) = v16;
  v17 = swift_allocObject();
  v18 = v67;
  v68 = v17;
  *(_QWORD *)(v17 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v17 + 24) = v18;
  v19 = swift_allocObject();
  v20 = v68;
  v72 = v19;
  *(_QWORD *)(v19 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v19 + 24) = v20;
  v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v71 = _allocateUninitializedArray<A>(_:)();
  v73 = v21;
  swift_retain();
  v22 = v69;
  v23 = v73;
  *v73 = partial apply for closure #1 in OSLogArguments.append(_:);
  v23[1] = v22;
  swift_retain();
  v24 = v70;
  v25 = v73;
  v73[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v25[3] = v24;
  swift_retain();
  v26 = v72;
  v27 = v73;
  v73[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[5] = v26;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v75, (os_log_type_t)v76))
  {
    v28 = v45;
    v38 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v39 = createStorage<A>(capacity:type:)(0);
    v40 = createStorage<A>(capacity:type:)(1);
    v41 = &v81;
    v81 = v38;
    v42 = &v80;
    v80 = v39;
    v43 = &v79;
    v79 = v40;
    serialize(_:at:)(2, &v81);
    serialize(_:at:)(1, v41);
    v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v78 = v69;
    closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)v41, (uint64_t)v42, (uint64_t)v43);
    v44 = v28;
    if (v28)
    {
      __break(1u);
    }
    else
    {
      v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v78 = v70;
      closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)&v81, (uint64_t)&v80, (uint64_t)&v79);
      v36 = 0;
      v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v78 = v72;
      closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)&v81, (uint64_t)&v80, (uint64_t)&v79);
      _os_log_impl(&dword_24701B000, v75, (os_log_type_t)v76, "#ContactDisambiguationStrategy<%s> init", v38, v62);
      destroyStorage<A>(_:count:)(v39, 0, v37);
      destroyStorage<A>(_:count:)(v40, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v38, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v54);
  swift_retain();
  v29 = v48;
  v51[2] = v49;
  v34 = v83;
  outlined init with copy of GlobalsProviding(v29, (uint64_t)v83);
  outlined init with take of CommonLabelsProviding(v34, v51 + 3);
  v30 = v46;
  v31 = v47;
  v51[8] = v46;
  v35 = v82;
  outlined init with copy of GlobalsProviding(v31, (uint64_t)v82);
  outlined init with take of CommonLabelsProviding(v35, v51 + 9);
  __swift_destroy_boxed_opaque_existential_0(v47);

  __swift_destroy_boxed_opaque_existential_0(v48);
  swift_release();
  return v51;
}

uint64_t ContactDisambiguationStrategy.actionForInput(_:resolveRecord:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  _QWORD v31[3];
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE **v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  uint32_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  NSObject *v81;
  int v82;
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint32_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;

  v40 = a3;
  v54 = a1;
  v53 = a2;
  v96 = 0;
  v95 = 0;
  v94 = 0;
  v92 = 0;
  v41 = 0;
  v63 = *v3;
  v48 = 0;
  v42 = type metadata accessor for Parse();
  v43 = *(_QWORD *)(v42 - 8);
  v44 = (*(_QWORD *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](0);
  v45 = (uint64_t)v31 - v44;
  v46 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v47 = (char *)v31 - v46;
  v49 = type metadata accessor for USOParse();
  v50 = *(_QWORD *)(v49 - 8);
  v51 = (*(_QWORD *)(v50 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v48);
  v52 = (char *)v31 - v51;
  v96 = (char *)v31 - v51;
  v59 = type metadata accessor for Logger();
  v58 = *(_QWORD *)(v59 - 8);
  v55 = (*(_QWORD *)(v58 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v54);
  v7 = (char *)v31 - v55;
  v57 = (char *)v31 - v55;
  v95 = v6;
  v94 = v8;
  v60 = v9[10];
  v93 = v60;
  v92 = v56;
  v61 = v9[11];
  v91 = v61;
  v62 = v9[12];
  v90 = v62;
  v10 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v7, v10, v59);
  v72 = 7;
  v11 = (_QWORD *)swift_allocObject();
  v12 = v61;
  v13 = v62;
  v14 = v63;
  v70 = v11;
  v11[2] = v60;
  v11[3] = v12;
  v11[4] = v13;
  v64 = *(_QWORD *)(v14 + 104);
  v11[5] = v64;
  v81 = Logger.logObject.getter();
  v82 = static os_log_type_t.debug.getter();
  v67 = &v88;
  v88 = 12;
  v65 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v66 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v68 = v89;
  v69 = 17;
  v75 = swift_allocObject();
  *(_BYTE *)(v75 + 16) = 32;
  v76 = swift_allocObject();
  *(_BYTE *)(v76 + 16) = 8;
  v71 = 32;
  v15 = swift_allocObject();
  v16 = v70;
  v73 = v15;
  *(_QWORD *)(v15 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  *(_QWORD *)(v15 + 24) = v16;
  v17 = swift_allocObject();
  v18 = v73;
  v74 = v17;
  *(_QWORD *)(v17 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v17 + 24) = v18;
  v19 = swift_allocObject();
  v20 = v74;
  v78 = v19;
  *(_QWORD *)(v19 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v19 + 24) = v20;
  v80 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v77 = _allocateUninitializedArray<A>(_:)();
  v79 = v21;
  swift_retain();
  v22 = v75;
  v23 = v79;
  *v79 = partial apply for closure #1 in OSLogArguments.append(_:);
  v23[1] = v22;
  swift_retain();
  v24 = v76;
  v25 = v79;
  v79[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v25[3] = v24;
  swift_retain();
  v26 = v78;
  v27 = v79;
  v79[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[5] = v26;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v81, (os_log_type_t)v82))
  {
    v28 = v41;
    v33 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v34 = createStorage<A>(capacity:type:)(0);
    v35 = createStorage<A>(capacity:type:)(1);
    v36 = &v87;
    v87 = v33;
    v37 = &v86;
    v86 = v34;
    v38 = &v85;
    v85 = v35;
    serialize(_:at:)(2, &v87);
    serialize(_:at:)(1, v36);
    v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v84 = v75;
    closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)v36, (uint64_t)v37, (uint64_t)v38);
    v39 = v28;
    if (v28)
    {
      __break(1u);
    }
    else
    {
      v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v84 = v76;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v87, (uint64_t)&v86, (uint64_t)&v85);
      v31[1] = 0;
      v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v84 = v78;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v87, (uint64_t)&v86, (uint64_t)&v85);
      _os_log_impl(&dword_24701B000, v81, (os_log_type_t)v82, "#ContactDisambiguationStrategy<%s> actionForInput", v33, v68);
      destroyStorage<A>(_:count:)(v34, 0, v32);
      destroyStorage<A>(_:count:)(v35, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v33, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v59);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v43 + 88))(v47, v42) == *MEMORY[0x24BE98E98])
  {
    v29 = v52;
    (*(void (**)(char *, uint64_t))(v43 + 96))(v47, v42);
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v29, v47, v49);
    if (USOParse.isOrdinalDisambiguation.getter())
    {
      static ActionForInput.handle()();
      return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v52, v49);
    }
    (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v49);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v47, v42);
  }
  Input.parse.getter();
  static FlowUtil.actionForInput(parse:intentType:)(v45, v60, *(_QWORD *)(v64 + 8), v40);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v45, v42);
}

uint64_t ContactDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v2[9] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v2[6] = 0;
  v7 = (_QWORD *)*v1;
  v2[10] = *v1;
  v2[11] = v7[10];
  v3 = type metadata accessor for ParameterResolutionRecord();
  v2[12] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[13] = v4;
  v2[14] = *(_QWORD *)(v4 + 64);
  v2[15] = swift_task_alloc();
  v5 = type metadata accessor for Logger();
  v2[16] = v5;
  v2[17] = *(_QWORD *)(v5 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v2[20] = swift_task_alloc();
  v2[3] = a1;
  v2[4] = v1;
  v2[21] = v7[11];
  v2[22] = v7[12];
  return swift_task_switch();
}

uint64_t ContactDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint32_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  NSObject *oslog;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *buf;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint32_t size;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;

  v59 = *(_QWORD *)(v0 + 176);
  v58 = *(_QWORD *)(v0 + 168);
  v51 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 152);
  v52 = *(_QWORD *)(v0 + 136);
  v53 = *(_QWORD *)(v0 + 128);
  v63 = *(_QWORD *)(v0 + 120);
  v61 = *(_QWORD *)(v0 + 104);
  v64 = *(_QWORD *)(v0 + 96);
  v57 = *(_QWORD *)(v0 + 88);
  v55 = *(_QWORD *)(v0 + 80);
  v56 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 16) = v0;
  v2 = SignpostName.makeDisambiguationItemContainer.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v51);
  v3 = Logger.payments.unsafeMutableAddressor();
  v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16);
  v54(v1, v3, v53);
  v66 = (_QWORD *)swift_allocObject();
  v66[2] = v57;
  v66[3] = v58;
  v66[4] = v59;
  v60 = *(_QWORD *)(v55 + 104);
  v66[5] = v60;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v63, v56, v64);
  v62 = (*(unsigned __int8 *)(v61 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
  v69 = (char *)swift_allocObject();
  *((_QWORD *)v69 + 2) = v57;
  *((_QWORD *)v69 + 3) = v58;
  *((_QWORD *)v69 + 4) = v59;
  *((_QWORD *)v69 + 5) = v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(&v69[v62], v63, v64);
  v78 = Logger.logObject.getter();
  v79 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 40) = 22;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 184);
  v71 = swift_allocObject();
  *(_BYTE *)(v71 + 16) = 32;
  v72 = swift_allocObject();
  *(_BYTE *)(v72 + 16) = 8;
  v67 = swift_allocObject();
  *(_QWORD *)(v67 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  *(_QWORD *)(v67 + 24) = v66;
  v68 = swift_allocObject();
  *(_QWORD *)(v68 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v68 + 24) = v67;
  v73 = swift_allocObject();
  *(_QWORD *)(v73 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v73 + 24) = v68;
  v74 = swift_allocObject();
  *(_BYTE *)(v74 + 16) = 64;
  v75 = swift_allocObject();
  *(_BYTE *)(v75 + 16) = 8;
  v70 = swift_allocObject();
  *(_QWORD *)(v70 + 16) = partial apply for implicit closure #2 in ContactDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:);
  *(_QWORD *)(v70 + 24) = v69;
  v76 = swift_allocObject();
  *(_QWORD *)(v76 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v76 + 24) = v70;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v77 = v4;
  swift_retain();
  *v77 = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[1] = v71;
  swift_retain();
  v77[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[3] = v72;
  swift_retain();
  v77[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[5] = v73;
  swift_retain();
  v77[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[7] = v74;
  swift_retain();
  v77[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[9] = v75;
  swift_retain();
  v77[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[11] = v76;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v78, v79))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v48 = createStorage<A>(capacity:type:)(1);
    v49 = createStorage<A>(capacity:type:)(1);
    v85 = buf;
    v86 = v48;
    v87 = v49;
    serialize(_:at:)(2, &v85);
    serialize(_:at:)(2, &v85);
    v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v89 = v71;
    closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)&v85, (uint64_t)&v86, (uint64_t)&v87);
    v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v89 = v72;
    closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)&v85, (uint64_t)&v86, (uint64_t)&v87);
    v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v89 = v73;
    closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)&v85, (uint64_t)&v86, (uint64_t)&v87);
    v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v89 = v74;
    closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)&v85, (uint64_t)&v86, (uint64_t)&v87);
    v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v89 = v75;
    closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)&v85, (uint64_t)&v86, (uint64_t)&v87);
    v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v89 = v76;
    closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)&v85, (uint64_t)&v86, (uint64_t)&v87);
    _os_log_impl(&dword_24701B000, v78, v79, "#ContactDisambiguationStrategy<%s> Intent resolution result: %@", buf, size);
    destroyStorage<A>(_:count:)(v48, 1, v46);
    destroyStorage<A>(_:count:)(v49, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v40 = *(_QWORD *)(v50 + 152);
  v39 = *(_QWORD *)(v50 + 136);
  v41 = *(_QWORD *)(v50 + 128);

  v42 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  v42(v40, v41);
  v44 = (id)ParameterResolutionRecord.result.getter();
  v43 = objc_msgSend(v44, sel_disambiguationItems);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for INPerson();
  v45 = _arrayConditionalCast<A, B>(_:)();
  if (v45)
  {
    v22 = *(_QWORD *)(v50 + 176);
    v21 = *(_QWORD *)(v50 + 168);
    v5 = *(_QWORD *)(v50 + 144);
    v19 = *(_QWORD *)(v50 + 128);
    v20 = *(_QWORD *)(v50 + 88);
    *(_QWORD *)(v50 + 48) = v45;
    swift_bridgeObjectRelease();

    v6 = Logger.payments.unsafeMutableAddressor();
    v54(v5, v6, v19);
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = v20;
    v25[3] = v21;
    v25[4] = v22;
    v25[5] = v60;
    swift_bridgeObjectRetain();
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v45;
    swift_retain();
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = partial apply for implicit closure #1 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
    *(_QWORD *)(v28 + 24) = v23;
    swift_release();
    oslog = Logger.logObject.getter();
    v38 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v50 + 56) = 22;
    UnsignedInteger<>.init<A>(_:)();
    v24 = *(_DWORD *)(v50 + 188);
    v30 = swift_allocObject();
    *(_BYTE *)(v30 + 16) = 32;
    v31 = swift_allocObject();
    *(_BYTE *)(v31 + 16) = 8;
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
    *(_QWORD *)(v26 + 24) = v25;
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v27 + 24) = v26;
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v32 + 24) = v27;
    v33 = swift_allocObject();
    *(_BYTE *)(v33 + 16) = 32;
    v34 = swift_allocObject();
    *(_BYTE *)(v34 + 16) = 8;
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_2;
    *(_QWORD *)(v29 + 24) = v28;
    v35 = swift_allocObject();
    *(_QWORD *)(v35 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v35 + 24) = v29;
    _allocateUninitializedArray<A>(_:)();
    v36 = v7;
    swift_retain();
    *v36 = partial apply for closure #1 in OSLogArguments.append(_:);
    v36[1] = v30;
    swift_retain();
    v36[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v36[3] = v31;
    swift_retain();
    v36[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v36[5] = v32;
    swift_retain();
    v36[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v36[7] = v33;
    swift_retain();
    v36[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v36[9] = v34;
    swift_retain();
    v36[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v36[11] = v35;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v38))
    {
      v16 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v17 = createStorage<A>(capacity:type:)(0);
      v18 = createStorage<A>(capacity:type:)(2);
      v80 = v16;
      v81 = v17;
      v82 = v18;
      serialize(_:at:)(2, &v80);
      serialize(_:at:)(2, &v80);
      v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v84 = v30;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
      v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v84 = v31;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
      v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v84 = v32;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
      v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v84 = v33;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
      v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v84 = v34;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
      v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v84 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
      _os_log_impl(&dword_24701B000, oslog, v38, "#ContactDisambiguationStrategy<%s> INPersons retrieved from disambiguation items: %s", v16, v24);
      destroyStorage<A>(_:count:)(v17, 0, v15);
      destroyStorage<A>(_:count:)(v18, 2, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v16, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    v13 = *(_QWORD *)(v50 + 144);
    v14 = *(_QWORD *)(v50 + 128);

    v42(v13, v14);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicDisambiguationItemContainer<INPerson>);
    *(_QWORD *)(v50 + 64) = v45;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
    lazy protocol witness table accessor for type [INPerson] and conformance [A]();
    Sequence.sorted(by:)();
    v11 = *(_QWORD *)(v50 + 160);
    v12 = BasicDisambiguationItemContainer.__allocating_init(_:_:)();
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v11);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v50 + 16) + 8))(v12);
  }
  else
  {
    v10 = *(_QWORD *)(v50 + 160);
    swift_bridgeObjectRelease();

    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v9 = 2;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    *(_BYTE *)(v9 + 48) = 17;
    swift_willThrow();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(*(_QWORD *)(v50 + 16) + 8))();
  }
}

uint64_t implicit closure #2 in ContactDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)()
{
  type metadata accessor for ParameterResolutionRecord();
  return ParameterResolutionRecord.result.getter();
}

uint64_t closure #1 in ContactDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)(id *a1, id *a2)
{
  id v3;
  id v4;
  id v5;
  char v6;

  v3 = *a2;
  v5 = objc_msgSend(*a1, (SEL)0x1F304BE48);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = objc_msgSend(v3, (SEL)0x1F304BE48);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = static String.< infix(_:_:)();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v18;

  v5[70] = v4;
  v5[69] = a4;
  v5[68] = a3;
  v5[67] = a2;
  v5[66] = a1;
  v5[33] = v5;
  v5[34] = 0;
  v5[35] = 0;
  v5[36] = 0;
  v5[37] = 0;
  v5[39] = 0;
  v5[41] = 0;
  v5[45] = 0;
  v5[47] = 0;
  v5[50] = 0;
  v5[54] = 0;
  v5[55] = 0;
  v5[57] = 0;
  v5[60] = 0;
  v5[62] = 0;
  v5[31] = 0;
  v5[32] = 0;
  v5[64] = 0;
  v18 = (_QWORD *)*v4;
  v5[71] = *v4;
  v5[72] = v18[10];
  v6 = type metadata accessor for IntentPromptAnswer();
  v5[73] = v6;
  v5[74] = *(_QWORD *)(v6 - 8);
  v5[75] = swift_task_alloc();
  v7 = type metadata accessor for ParameterIdentifier();
  v5[76] = v7;
  v5[77] = *(_QWORD *)(v7 - 8);
  v5[78] = swift_task_alloc();
  v8 = type metadata accessor for PersonNameComponents();
  v5[79] = v8;
  v5[80] = *(_QWORD *)(v8 - 8);
  v5[81] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  v5[82] = swift_task_alloc();
  v5[83] = swift_task_alloc();
  v5[84] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>);
  v5[85] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[86] = v10;
  v5[87] = *(_QWORD *)(v10 + 64);
  v5[88] = swift_task_alloc();
  v11 = type metadata accessor for Parse.DirectInvocation();
  v5[89] = v11;
  v5[90] = *(_QWORD *)(v11 - 8);
  v5[91] = swift_task_alloc();
  v12 = type metadata accessor for Parse();
  v5[92] = v12;
  v5[93] = *(_QWORD *)(v12 - 8);
  v5[94] = swift_task_alloc();
  v5[95] = swift_task_alloc();
  v5[96] = swift_task_alloc();
  v13 = type metadata accessor for Logger();
  v5[97] = v13;
  v5[98] = *(_QWORD *)(v13 - 8);
  v5[99] = swift_task_alloc();
  v5[100] = swift_task_alloc();
  v5[101] = swift_task_alloc();
  v5[102] = swift_task_alloc();
  v5[103] = swift_task_alloc();
  v5[104] = swift_task_alloc();
  v5[105] = swift_task_alloc();
  v5[106] = swift_task_alloc();
  v5[107] = swift_task_alloc();
  v5[108] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v5[109] = swift_task_alloc();
  v5[34] = a2;
  v5[35] = a3;
  v5[36] = a4;
  v5[37] = v4;
  v5[110] = v18[11];
  v5[111] = v18[12];
  return swift_task_switch();
}

uint64_t ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  _QWORD *v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  Swift::String v43;
  uint64_t v44;
  __int128 *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  id v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  id v61;
  void **v62;
  void *v63;
  id v64;
  uint64_t v65;
  id v66;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint32_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  NSObject *v102;
  os_log_type_t v103;
  id v104;
  id v105;
  void *v106;
  id v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  void (*v117)(uint64_t, _QWORD);
  uint64_t v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint32_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  NSObject *v139;
  os_log_type_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint8_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint32_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  NSObject *v161;
  os_log_type_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  id v168;
  uint64_t v169;
  id v170;
  id v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  id v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  id v184;
  id v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  Swift::String v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  id v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  id v203;
  id v204;
  id v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint8_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint32_t v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  NSObject *v229;
  os_log_type_t v230;
  id v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint8_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  id v243;
  uint32_t v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  NSObject *v257;
  os_log_type_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint8_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint32_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  NSObject *v282;
  os_log_type_t v283;
  Swift::String v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint8_t *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint32_t v295;
  _QWORD *v296;
  uint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _QWORD *v307;
  NSObject *v308;
  os_log_type_t v309;
  void *v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  void (*v319)(uint64_t, uint64_t);
  id v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint8_t *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint8_t *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint32_t v343;
  _QWORD *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  _QWORD *v355;
  NSObject *log;
  os_log_type_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint32_t v362;
  _QWORD *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  _QWORD *v374;
  NSObject *v375;
  os_log_type_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unsigned __int8 v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  void (*v387)(uint64_t, uint64_t);
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint8_t *buf;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  void (*v402)(uint64_t, uint64_t, uint64_t);
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint32_t size;
  _QWORD *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  _QWORD *v415;
  NSObject *oslog;
  os_log_type_t v417;
  uint64_t v418;
  char v419;
  uint8_t *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t (*v423)(uint64_t, uint64_t, uint64_t);
  uint64_t v424;
  void *v425;
  unint64_t v426;
  uint8_t *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t (*v430)(uint64_t, uint64_t, uint64_t);
  uint64_t v431;
  uint8_t *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t (*v435)(uint64_t, uint64_t, uint64_t);
  uint64_t v436;
  uint8_t *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t (*v440)(uint64_t, uint64_t, uint64_t);
  uint64_t v441;
  uint8_t *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t (*v445)(uint64_t, uint64_t, uint64_t);
  uint64_t v446;
  uint8_t *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t (*v450)(uint64_t, uint64_t, uint64_t);
  uint64_t v451;
  uint8_t *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t (*v455)(uint64_t, uint64_t, uint64_t);
  uint64_t v456;
  uint8_t *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t (*v460)(uint64_t, uint64_t, uint64_t);
  uint64_t v461;
  uint8_t *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t (*v465)(uint64_t, uint64_t, uint64_t);
  uint64_t v466;
  uint8_t *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t (*v470)(uint64_t, uint64_t, uint64_t);
  uint64_t v471;

  MEMORY[0x24BDAC7A8](a1);
  v405 = *(_QWORD *)(v1 + 888);
  v404 = *(_QWORD *)(v1 + 880);
  v399 = *(_QWORD *)(v1 + 872);
  v2 = *(_QWORD *)(v1 + 864);
  v400 = *(_QWORD *)(v1 + 784);
  v401 = *(_QWORD *)(v1 + 776);
  v403 = *(_QWORD *)(v1 + 576);
  v406 = *(_QWORD *)(v1 + 568);
  *(_QWORD *)(v1 + 264) = v1;
  v3 = SignpostName.parseDisambiguationResult.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v3, v3[1], *((unsigned __int8 *)v3 + 16), v399);
  v4 = Logger.payments.unsafeMutableAddressor();
  v402 = *(void (**)(uint64_t, uint64_t, uint64_t))(v400 + 16);
  v402(v2, v4, v401);
  v409 = (_QWORD *)swift_allocObject();
  v409[2] = v403;
  v409[3] = v404;
  v409[4] = v405;
  v407 = *(_QWORD *)(v406 + 104);
  v409[5] = v407;
  oslog = Logger.logObject.getter();
  v417 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v1 + 304) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v1 + 896);
  v412 = swift_allocObject();
  *(_BYTE *)(v412 + 16) = 32;
  v413 = swift_allocObject();
  *(_BYTE *)(v413 + 16) = 8;
  v410 = swift_allocObject();
  *(_QWORD *)(v410 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  *(_QWORD *)(v410 + 24) = v409;
  v411 = swift_allocObject();
  *(_QWORD *)(v411 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v411 + 24) = v410;
  v414 = swift_allocObject();
  *(_QWORD *)(v414 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v414 + 24) = v411;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v415 = v5;
  swift_retain();
  *v415 = partial apply for closure #1 in OSLogArguments.append(_:);
  v415[1] = v412;
  swift_retain();
  v415[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v415[3] = v413;
  swift_retain();
  v415[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v415[5] = v414;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v417))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v395 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v397 = createStorage<A>(capacity:type:)(0);
    v398 = createStorage<A>(capacity:type:)(1);
    v467 = buf;
    v468 = v397;
    v469 = v398;
    serialize(_:at:)(2, &v467);
    serialize(_:at:)(1, &v467);
    v470 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v471 = v412;
    closure #1 in osLogInternal(_:log:type:)(&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
    v470 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v471 = v413;
    closure #1 in osLogInternal(_:log:type:)(&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
    v470 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v471 = v414;
    closure #1 in osLogInternal(_:log:type:)(&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
    _os_log_impl(&dword_24701B000, oslog, v417, "#ContactDisambiguationStrategy<%s> Running parseDisambiguationResult()", buf, size);
    destroyStorage<A>(_:count:)(v397, 0, v395);
    destroyStorage<A>(_:count:)(v398, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v385 = *(_QWORD *)(v1 + 864);
  v384 = *(_QWORD *)(v1 + 784);
  v386 = *(_QWORD *)(v1 + 776);
  v393 = *(_QWORD *)(v1 + 768);
  v392 = *(_QWORD *)(v1 + 744);
  v394 = *(_QWORD *)(v1 + 736);

  v387 = *(void (**)(uint64_t, uint64_t))(v384 + 8);
  v387(v385, v386);
  v388 = swift_allocObject();
  *(_QWORD *)(v1 + 312) = v388 + 16;
  *(_QWORD *)(v388 + 16) = 0;
  *(_QWORD *)(v388 + 24) = 0;
  *(_QWORD *)(v1 + 320) = 0;
  v418 = 0;
  v419 = 1;
  v390 = PaginatedItemContainer.items.getter();
  v389 = type metadata accessor for INPerson();
  v391 = MEMORY[0x2495723C8](v390);
  *(_QWORD *)(v1 + 328) = v391;
  swift_bridgeObjectRelease();
  Input.parse.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v392 + 88))(v393, v394) == *MEMORY[0x24BE98E88])
  {
    v378 = *(_QWORD *)(v1 + 768);
    v380 = *(_QWORD *)(v1 + 728);
    v377 = *(_QWORD *)(v1 + 720);
    v379 = *(_QWORD *)(v1 + 712);
    (*(void (**)(void))(*(_QWORD *)(v1 + 744) + 96))();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v377 + 32))(v380, v378, v379);
    *(_QWORD *)(v1 + 496) = v380;
    v381 = static PaymentsDirectInvocations.from(_:)(v380);
    v382 = v7;
    v383 = v6;
    if (v6 != 255)
    {
      if (!v6)
      {
        v342 = *(_QWORD *)(v1 + 888);
        v341 = *(_QWORD *)(v1 + 880);
        v11 = *(_QWORD *)(v1 + 856);
        v339 = *(_QWORD *)(v1 + 776);
        v340 = *(_QWORD *)(v1 + 576);
        *(_QWORD *)(v1 + 512) = v381;
        v12 = Logger.payments.unsafeMutableAddressor();
        v402(v11, v12, v339);
        v344 = (_QWORD *)swift_allocObject();
        v344[2] = v340;
        v344[3] = v341;
        v344[4] = v342;
        v344[5] = v407;
        v347 = swift_allocObject();
        *(_QWORD *)(v347 + 16) = v381;
        log = Logger.logObject.getter();
        v357 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v1 + 520) = 22;
        UnsignedInteger<>.init<A>(_:)();
        v343 = *(_DWORD *)(v1 + 932);
        v349 = swift_allocObject();
        *(_BYTE *)(v349 + 16) = 32;
        v350 = swift_allocObject();
        *(_BYTE *)(v350 + 16) = 8;
        v345 = swift_allocObject();
        *(_QWORD *)(v345 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
        *(_QWORD *)(v345 + 24) = v344;
        v346 = swift_allocObject();
        *(_QWORD *)(v346 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v346 + 24) = v345;
        v351 = swift_allocObject();
        *(_QWORD *)(v351 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v351 + 24) = v346;
        v352 = swift_allocObject();
        *(_BYTE *)(v352 + 16) = 0;
        v353 = swift_allocObject();
        *(_BYTE *)(v353 + 16) = 8;
        v348 = swift_allocObject();
        *(_QWORD *)(v348 + 16) = partial apply for implicit closure #21 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
        *(_QWORD *)(v348 + 24) = v347;
        v354 = swift_allocObject();
        *(_QWORD *)(v354 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
        *(_QWORD *)(v354 + 24) = v348;
        _allocateUninitializedArray<A>(_:)();
        v355 = v13;
        swift_retain();
        *v355 = partial apply for closure #1 in OSLogArguments.append(_:);
        v355[1] = v349;
        swift_retain();
        v355[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v355[3] = v350;
        swift_retain();
        v355[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v355[5] = v351;
        swift_retain();
        v355[6] = partial apply for closure #1 in OSLogArguments.append(_:);
        v355[7] = v352;
        swift_retain();
        v355[8] = partial apply for closure #1 in OSLogArguments.append(_:);
        v355[9] = v353;
        swift_retain();
        v355[10] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
        v355[11] = v354;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(log, v357))
        {
          v336 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v335 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v337 = createStorage<A>(capacity:type:)(0);
          v338 = createStorage<A>(capacity:type:)(1);
          v462 = v336;
          v463 = v337;
          v464 = v338;
          serialize(_:at:)(2, &v462);
          serialize(_:at:)(2, &v462);
          v465 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v466 = v349;
          closure #1 in osLogInternal(_:log:type:)(&v465, (uint64_t)&v462, (uint64_t)&v463, (uint64_t)&v464);
          v465 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v466 = v350;
          closure #1 in osLogInternal(_:log:type:)(&v465, (uint64_t)&v462, (uint64_t)&v463, (uint64_t)&v464);
          v465 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v466 = v351;
          closure #1 in osLogInternal(_:log:type:)(&v465, (uint64_t)&v462, (uint64_t)&v463, (uint64_t)&v464);
          v465 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v466 = v352;
          closure #1 in osLogInternal(_:log:type:)(&v465, (uint64_t)&v462, (uint64_t)&v463, (uint64_t)&v464);
          v465 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v466 = v353;
          closure #1 in osLogInternal(_:log:type:)(&v465, (uint64_t)&v462, (uint64_t)&v463, (uint64_t)&v464);
          v465 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
          v466 = v354;
          closure #1 in osLogInternal(_:log:type:)(&v465, (uint64_t)&v462, (uint64_t)&v463, (uint64_t)&v464);
          _os_log_impl(&dword_24701B000, log, v357, "#ContactDisambiguationStrategy<%s> parseDisambiguationResult, personDisambiguation DI selected index: %ld", v336, v343);
          destroyStorage<A>(_:count:)(v337, 0, v335);
          destroyStorage<A>(_:count:)(v338, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v336, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
        v333 = *(_QWORD *)(v1 + 856);
        v334 = *(_QWORD *)(v1 + 776);

        v387(v333, v334);
        v418 = v381;
        v419 = 0;
        outlined consume of PaymentsDirectInvocations?(v381, v382, 0);
        goto LABEL_17;
      }
      if (v6 == 2)
      {
        v361 = *(_QWORD *)(v1 + 888);
        v360 = *(_QWORD *)(v1 + 880);
        v8 = *(_QWORD *)(v1 + 848);
        v358 = *(_QWORD *)(v1 + 776);
        v359 = *(_QWORD *)(v1 + 576);
        swift_bridgeObjectRetain();
        *(_QWORD *)(v1 + 248) = v381;
        *(_QWORD *)(v1 + 256) = v382;
        v9 = Logger.payments.unsafeMutableAddressor();
        v402(v8, v9, v358);
        v363 = (_QWORD *)swift_allocObject();
        v363[2] = v359;
        v363[3] = v360;
        v363[4] = v361;
        v363[5] = v407;
        swift_bridgeObjectRetain();
        v366 = swift_allocObject();
        *(_QWORD *)(v366 + 16) = v381;
        *(_QWORD *)(v366 + 24) = v382;
        v375 = Logger.logObject.getter();
        v376 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v1 + 504) = 22;
        UnsignedInteger<>.init<A>(_:)();
        v362 = *(_DWORD *)(v1 + 928);
        v368 = swift_allocObject();
        *(_BYTE *)(v368 + 16) = 32;
        v369 = swift_allocObject();
        *(_BYTE *)(v369 + 16) = 8;
        v364 = swift_allocObject();
        *(_QWORD *)(v364 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
        *(_QWORD *)(v364 + 24) = v363;
        v365 = swift_allocObject();
        *(_QWORD *)(v365 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v365 + 24) = v364;
        v370 = swift_allocObject();
        *(_QWORD *)(v370 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v370 + 24) = v365;
        v371 = swift_allocObject();
        *(_BYTE *)(v371 + 16) = 32;
        v372 = swift_allocObject();
        *(_BYTE *)(v372 + 16) = 8;
        v367 = swift_allocObject();
        *(_QWORD *)(v367 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
        *(_QWORD *)(v367 + 24) = v366;
        v373 = swift_allocObject();
        *(_QWORD *)(v373 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v373 + 24) = v367;
        _allocateUninitializedArray<A>(_:)();
        v374 = v10;
        swift_retain();
        *v374 = partial apply for closure #1 in OSLogArguments.append(_:);
        v374[1] = v368;
        swift_retain();
        v374[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v374[3] = v369;
        swift_retain();
        v374[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v374[5] = v370;
        swift_retain();
        v374[6] = partial apply for closure #1 in OSLogArguments.append(_:);
        v374[7] = v371;
        swift_retain();
        v374[8] = partial apply for closure #1 in OSLogArguments.append(_:);
        v374[9] = v372;
        swift_retain();
        v374[10] = partial apply for closure #1 in OSLogArguments.append(_:);
        v374[11] = v373;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v375, v376))
        {
          v330 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v329 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          v331 = createStorage<A>(capacity:type:)(0);
          v332 = createStorage<A>(capacity:type:)(2);
          v457 = v330;
          v458 = v331;
          v459 = v332;
          serialize(_:at:)(2, &v457);
          serialize(_:at:)(2, &v457);
          v460 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v461 = v368;
          closure #1 in osLogInternal(_:log:type:)(&v460, (uint64_t)&v457, (uint64_t)&v458, (uint64_t)&v459);
          v460 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v461 = v369;
          closure #1 in osLogInternal(_:log:type:)(&v460, (uint64_t)&v457, (uint64_t)&v458, (uint64_t)&v459);
          v460 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v461 = v370;
          closure #1 in osLogInternal(_:log:type:)(&v460, (uint64_t)&v457, (uint64_t)&v458, (uint64_t)&v459);
          v460 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v461 = v371;
          closure #1 in osLogInternal(_:log:type:)(&v460, (uint64_t)&v457, (uint64_t)&v458, (uint64_t)&v459);
          v460 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v461 = v372;
          closure #1 in osLogInternal(_:log:type:)(&v460, (uint64_t)&v457, (uint64_t)&v458, (uint64_t)&v459);
          v460 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v461 = v373;
          closure #1 in osLogInternal(_:log:type:)(&v460, (uint64_t)&v457, (uint64_t)&v458, (uint64_t)&v459);
          _os_log_impl(&dword_24701B000, v375, v376, "#ContactDisambiguationStrategy<%s> parseDisambiguationResult, contactPicker DI selected id: %s", v330, v362);
          destroyStorage<A>(_:count:)(v331, 0, v329);
          destroyStorage<A>(_:count:)(v332, 2, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v330, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
        v327 = *(_QWORD *)(v1 + 848);
        v328 = *(_QWORD *)(v1 + 776);

        v387(v327, v328);
        swift_bridgeObjectRetain();
        *(_QWORD *)(v388 + 16) = v381;
        *(_QWORD *)(v388 + 24) = v382;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of PaymentsDirectInvocations?(v381, v382, v383);
LABEL_17:
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 720) + 8))(*(_QWORD *)(v1 + 728), *(_QWORD *)(v1 + 712));
        goto LABEL_33;
      }
    }
    v326 = *(_QWORD *)(v1 + 872);
    v324 = *(_QWORD *)(v1 + 728);
    v323 = *(_QWORD *)(v1 + 720);
    v325 = *(_QWORD *)(v1 + 712);
    v322 = Parse.DirectInvocation.identifier.getter();
    v321 = v14;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v15 = v322;
    *(_QWORD *)(v15 + 8) = v321;
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 24) = 0;
    *(_QWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 40) = 0;
    *(_BYTE *)(v15 + 48) = 0;
    swift_willThrow();
    outlined consume of PaymentsDirectInvocations?(v381, v382, v383);
    (*(void (**)(uint64_t, uint64_t))(v323 + 8))(v324, v325);
    outlined destroy of SFRichText?((id *)(v1 + 320));
    swift_release();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v326);
LABEL_97:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v1 + 264) + 8))();
  }
  v317 = *(_QWORD *)(v1 + 760);
  v316 = *(_QWORD *)(v1 + 744);
  v318 = *(_QWORD *)(v1 + 736);
  v315 = *(_QWORD *)(v1 + 560);
  Input.parse.getter();
  outlined init with copy of GlobalsProviding(v315 + 24, v1 + 16);
  v314 = *(_QWORD *)(v1 + 40);
  v313 = *(_QWORD *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 16), v314);
  (*(void (**)(uint64_t))(v313 + 24))(v314);
  outlined init with copy of GlobalsProviding(v315 + 72, v1 + 96);
  v320 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(0, 0, v1 + 56, v1 + 96);
  __swift_destroy_boxed_opaque_existential_0(v1 + 96);
  __swift_destroy_boxed_opaque_existential_0(v1 + 56);
  __swift_destroy_boxed_opaque_existential_0(v1 + 16);
  v319 = *(void (**)(uint64_t, uint64_t))(v316 + 8);
  v319(v317, v318);
  if (v320)
  {
    v312 = swift_dynamicCastUnknownClass();
    if (v312)
    {
      v311 = (void *)v312;
    }
    else
    {

      v311 = 0;
    }
    v310 = v311;
  }
  else
  {
    v310 = 0;
  }
  if (v310)
  {
    v294 = *(_QWORD *)(v1 + 888);
    v293 = *(_QWORD *)(v1 + 880);
    v16 = *(_QWORD *)(v1 + 840);
    v291 = *(_QWORD *)(v1 + 776);
    v292 = *(_QWORD *)(v1 + 576);
    *(_QWORD *)(v1 + 480) = v310;
    v17 = Logger.payments.unsafeMutableAddressor();
    v402(v16, v17, v291);
    v296 = (_QWORD *)swift_allocObject();
    v296[2] = v292;
    v296[3] = v293;
    v296[4] = v294;
    v296[5] = v407;
    v18 = v310;
    v299 = (_QWORD *)swift_allocObject();
    v299[2] = v292;
    v299[3] = v293;
    v299[4] = v294;
    v299[5] = v407;
    v299[6] = v310;
    v308 = Logger.logObject.getter();
    v309 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v1 + 488) = 22;
    UnsignedInteger<>.init<A>(_:)();
    v295 = *(_DWORD *)(v1 + 924);
    v301 = swift_allocObject();
    *(_BYTE *)(v301 + 16) = 32;
    v302 = swift_allocObject();
    *(_BYTE *)(v302 + 16) = 8;
    v297 = swift_allocObject();
    *(_QWORD *)(v297 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
    *(_QWORD *)(v297 + 24) = v296;
    v298 = swift_allocObject();
    *(_QWORD *)(v298 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v298 + 24) = v297;
    v303 = swift_allocObject();
    *(_QWORD *)(v303 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v303 + 24) = v298;
    v304 = swift_allocObject();
    *(_BYTE *)(v304 + 16) = 32;
    v305 = swift_allocObject();
    *(_BYTE *)(v305 + 16) = 8;
    v300 = swift_allocObject();
    *(_QWORD *)(v300 + 16) = partial apply for implicit closure #7 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
    *(_QWORD *)(v300 + 24) = v299;
    v306 = swift_allocObject();
    *(_QWORD *)(v306 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v306 + 24) = v300;
    _allocateUninitializedArray<A>(_:)();
    v307 = v19;
    swift_retain();
    *v307 = partial apply for closure #1 in OSLogArguments.append(_:);
    v307[1] = v301;
    swift_retain();
    v307[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v307[3] = v302;
    swift_retain();
    v307[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v307[5] = v303;
    swift_retain();
    v307[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v307[7] = v304;
    swift_retain();
    v307[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v307[9] = v305;
    swift_retain();
    v307[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v307[11] = v306;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v308, v309))
    {
      v288 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v287 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v289 = createStorage<A>(capacity:type:)(0);
      v290 = createStorage<A>(capacity:type:)(2);
      v452 = v288;
      v453 = v289;
      v454 = v290;
      serialize(_:at:)(2, &v452);
      serialize(_:at:)(2, &v452);
      v455 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v456 = v301;
      closure #1 in osLogInternal(_:log:type:)(&v455, (uint64_t)&v452, (uint64_t)&v453, (uint64_t)&v454);
      v455 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v456 = v302;
      closure #1 in osLogInternal(_:log:type:)(&v455, (uint64_t)&v452, (uint64_t)&v453, (uint64_t)&v454);
      v455 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v456 = v303;
      closure #1 in osLogInternal(_:log:type:)(&v455, (uint64_t)&v452, (uint64_t)&v453, (uint64_t)&v454);
      v455 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v456 = v304;
      closure #1 in osLogInternal(_:log:type:)(&v455, (uint64_t)&v452, (uint64_t)&v453, (uint64_t)&v454);
      v455 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v456 = v305;
      closure #1 in osLogInternal(_:log:type:)(&v455, (uint64_t)&v452, (uint64_t)&v453, (uint64_t)&v454);
      v455 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v456 = v306;
      closure #1 in osLogInternal(_:log:type:)(&v455, (uint64_t)&v452, (uint64_t)&v453, (uint64_t)&v454);
      _os_log_impl(&dword_24701B000, v308, v309, "#ContactDisambiguationStrategy<%s> parseDisambiguationResult, Intent: %s", v288, v295);
      destroyStorage<A>(_:count:)(v289, 0, v287);
      destroyStorage<A>(_:count:)(v290, 2, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v288, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    v285 = *(_QWORD *)(v1 + 840);
    v286 = *(_QWORD *)(v1 + 776);

    v387(v285, v286);
    Input.parse.getter();
    v21 = Parse.toContactId()();
    v319(*(_QWORD *)(v1 + 752), *(_QWORD *)(v1 + 736));
    if (v20)
    {

      v284._countAndFlagsBits = 0;
      v284._object = 0;
    }
    else
    {
      v284 = v21;
    }
    *(Swift::String *)(v388 + 16) = v284;
    swift_bridgeObjectRelease();

  }
  v319(*(_QWORD *)(v1 + 768), *(_QWORD *)(v1 + 736));
LABEL_33:
  v22 = *(_QWORD *)(v1 + 832);
  v265 = *(_QWORD *)(v1 + 776);
  v269 = *(_QWORD *)(v1 + 704);
  v268 = *(_QWORD *)(v1 + 688);
  v270 = *(_QWORD *)(v1 + 680);
  v266 = *(_QWORD *)(v1 + 544);
  v23 = Logger.payments.unsafeMutableAddressor();
  v402(v22, v23, v265);
  swift_retain();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v268 + 16))(v269, v266, v270);
  v267 = (*(unsigned __int8 *)(v268 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v268 + 80);
  v273 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v268 + 32))(v273 + v267, v269, v270);
  v282 = Logger.logObject.getter();
  v283 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v1 + 336) = 22;
  UnsignedInteger<>.init<A>(_:)();
  v271 = *(_DWORD *)(v1 + 900);
  v275 = swift_allocObject();
  *(_BYTE *)(v275 + 16) = 32;
  v276 = swift_allocObject();
  *(_BYTE *)(v276 + 16) = 8;
  v272 = swift_allocObject();
  *(_QWORD *)(v272 + 16) = partial apply for implicit closure #8 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
  *(_QWORD *)(v272 + 24) = v388;
  v277 = swift_allocObject();
  *(_QWORD *)(v277 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v277 + 24) = v272;
  v278 = swift_allocObject();
  *(_BYTE *)(v278 + 16) = 32;
  v279 = swift_allocObject();
  *(_BYTE *)(v279 + 16) = 8;
  v274 = swift_allocObject();
  *(_QWORD *)(v274 + 16) = partial apply for implicit closure #9 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
  *(_QWORD *)(v274 + 24) = v273;
  v280 = swift_allocObject();
  *(_QWORD *)(v280 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v280 + 24) = v274;
  _allocateUninitializedArray<A>(_:)();
  v281 = v24;
  swift_retain();
  *v281 = partial apply for closure #1 in OSLogArguments.append(_:);
  v281[1] = v275;
  swift_retain();
  v281[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v281[3] = v276;
  swift_retain();
  v281[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v281[5] = v277;
  swift_retain();
  v281[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v281[7] = v278;
  swift_retain();
  v281[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v281[9] = v279;
  swift_retain();
  v281[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v281[11] = v280;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v282, v283))
  {
    v262 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v261 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v263 = createStorage<A>(capacity:type:)(0);
    v264 = createStorage<A>(capacity:type:)(2);
    v447 = v262;
    v448 = v263;
    v449 = v264;
    serialize(_:at:)(2, &v447);
    serialize(_:at:)(2, &v447);
    v450 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v451 = v275;
    closure #1 in osLogInternal(_:log:type:)(&v450, (uint64_t)&v447, (uint64_t)&v448, (uint64_t)&v449);
    v450 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v451 = v276;
    closure #1 in osLogInternal(_:log:type:)(&v450, (uint64_t)&v447, (uint64_t)&v448, (uint64_t)&v449);
    v450 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v451 = v277;
    closure #1 in osLogInternal(_:log:type:)(&v450, (uint64_t)&v447, (uint64_t)&v448, (uint64_t)&v449);
    v450 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v451 = v278;
    closure #1 in osLogInternal(_:log:type:)(&v450, (uint64_t)&v447, (uint64_t)&v448, (uint64_t)&v449);
    v450 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v451 = v279;
    closure #1 in osLogInternal(_:log:type:)(&v450, (uint64_t)&v447, (uint64_t)&v448, (uint64_t)&v449);
    v450 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v451 = v280;
    closure #1 in osLogInternal(_:log:type:)(&v450, (uint64_t)&v447, (uint64_t)&v448, (uint64_t)&v449);
    _os_log_impl(&dword_24701B000, v282, v283, "comparing personId %s to paginatedItems: %s", v262, v271);
    destroyStorage<A>(_:count:)(v263, 0, v261);
    destroyStorage<A>(_:count:)(v264, 2, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](v262, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v259 = *(_QWORD *)(v1 + 832);
  v260 = *(_QWORD *)(v1 + 776);

  v387(v259, v260);
  if ((v419 & 1) != 0 || (*(_QWORD *)(v1 + 456) = v418, v418 < 0) || v418 >= v391)
  {
    *(_QWORD *)(v1 + 352) = PaginatedItemContainer.items.getter();
    *(_QWORD *)(swift_task_alloc() + 16) = v388 + 16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
    lazy protocol witness table accessor for type [INPerson] and conformance [A]();
    Sequence.first(where:)();
    swift_task_dealloc();
    outlined destroy of [SFCardSection]();
    v231 = *(id *)(v1 + 344);
    if (v231)
    {
      v215 = *(_QWORD *)(v1 + 888);
      v214 = *(_QWORD *)(v1 + 880);
      v29 = *(_QWORD *)(v1 + 816);
      v212 = *(_QWORD *)(v1 + 776);
      v213 = *(_QWORD *)(v1 + 576);
      *(_QWORD *)(v1 + 440) = v231;
      v30 = v231;
      v31 = v231;
      v32 = *(void **)(v1 + 320);
      *(_QWORD *)(v1 + 320) = v231;

      v33 = Logger.payments.unsafeMutableAddressor();
      v402(v29, v33, v212);
      v217 = (_QWORD *)swift_allocObject();
      v217[2] = v213;
      v217[3] = v214;
      v217[4] = v215;
      v217[5] = v407;
      v220 = swift_allocObject();
      *(_QWORD *)(v220 + 16) = v231;
      v229 = Logger.logObject.getter();
      v230 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v1 + 448) = 22;
      UnsignedInteger<>.init<A>(_:)();
      v216 = *(_DWORD *)(v1 + 916);
      v222 = swift_allocObject();
      *(_BYTE *)(v222 + 16) = 32;
      v223 = swift_allocObject();
      *(_BYTE *)(v223 + 16) = 8;
      v218 = swift_allocObject();
      *(_QWORD *)(v218 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
      *(_QWORD *)(v218 + 24) = v217;
      v219 = swift_allocObject();
      *(_QWORD *)(v219 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v219 + 24) = v218;
      v224 = swift_allocObject();
      *(_QWORD *)(v224 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v224 + 24) = v219;
      v225 = swift_allocObject();
      *(_BYTE *)(v225 + 16) = 32;
      v226 = swift_allocObject();
      *(_BYTE *)(v226 + 16) = 8;
      v221 = swift_allocObject();
      *(_QWORD *)(v221 + 16) = partial apply for specialized implicit closure #13 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
      *(_QWORD *)(v221 + 24) = v220;
      v227 = swift_allocObject();
      *(_QWORD *)(v227 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v227 + 24) = v221;
      _allocateUninitializedArray<A>(_:)();
      v228 = v34;
      swift_retain();
      *v228 = partial apply for closure #1 in OSLogArguments.append(_:);
      v228[1] = v222;
      swift_retain();
      v228[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v228[3] = v223;
      swift_retain();
      v228[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v228[5] = v224;
      swift_retain();
      v228[6] = partial apply for closure #1 in OSLogArguments.append(_:);
      v228[7] = v225;
      swift_retain();
      v228[8] = partial apply for closure #1 in OSLogArguments.append(_:);
      v228[9] = v226;
      swift_retain();
      v228[10] = partial apply for closure #1 in OSLogArguments.append(_:);
      v228[11] = v227;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v229, v230))
      {
        v209 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v208 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v210 = createStorage<A>(capacity:type:)(0);
        v211 = createStorage<A>(capacity:type:)(2);
        v437 = v209;
        v438 = v210;
        v439 = v211;
        serialize(_:at:)(2, &v437);
        serialize(_:at:)(2, &v437);
        v440 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v441 = v222;
        closure #1 in osLogInternal(_:log:type:)(&v440, (uint64_t)&v437, (uint64_t)&v438, (uint64_t)&v439);
        v440 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v441 = v223;
        closure #1 in osLogInternal(_:log:type:)(&v440, (uint64_t)&v437, (uint64_t)&v438, (uint64_t)&v439);
        v440 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v441 = v224;
        closure #1 in osLogInternal(_:log:type:)(&v440, (uint64_t)&v437, (uint64_t)&v438, (uint64_t)&v439);
        v440 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v441 = v225;
        closure #1 in osLogInternal(_:log:type:)(&v440, (uint64_t)&v437, (uint64_t)&v438, (uint64_t)&v439);
        v440 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v441 = v226;
        closure #1 in osLogInternal(_:log:type:)(&v440, (uint64_t)&v437, (uint64_t)&v438, (uint64_t)&v439);
        v440 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v441 = v227;
        closure #1 in osLogInternal(_:log:type:)(&v440, (uint64_t)&v437, (uint64_t)&v438, (uint64_t)&v439);
        _os_log_impl(&dword_24701B000, v229, v230, "#ContactDisambiguationStrategy<%s> parseDisambiguationResult, selected person by ID: %s", v209, v216);
        destroyStorage<A>(_:count:)(v210, 0, v208);
        destroyStorage<A>(_:count:)(v211, 2, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v209, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      v206 = *(_QWORD *)(v1 + 816);
      v207 = *(_QWORD *)(v1 + 776);

      v387(v206, v207);
    }
  }
  else
  {
    v242 = *(_QWORD *)(v1 + 888);
    v241 = *(_QWORD *)(v1 + 880);
    v238 = *(_QWORD *)(v1 + 824);
    v239 = *(_QWORD *)(v1 + 776);
    v240 = *(_QWORD *)(v1 + 576);
    PaginatedItemContainer.items.getter();
    Array.subscript.getter();
    v243 = *(id *)(v1 + 464);
    swift_bridgeObjectRelease();
    v25 = v243;
    v26 = *(void **)(v1 + 320);
    *(_QWORD *)(v1 + 320) = v243;

    v27 = Logger.payments.unsafeMutableAddressor();
    v402(v238, v27, v239);
    v245 = (_QWORD *)swift_allocObject();
    v245[2] = v240;
    v245[3] = v241;
    v245[4] = v242;
    v245[5] = v407;
    v248 = swift_allocObject();
    *(_QWORD *)(v248 + 16) = v243;
    v257 = Logger.logObject.getter();
    v258 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v1 + 472) = 22;
    UnsignedInteger<>.init<A>(_:)();
    v244 = *(_DWORD *)(v1 + 920);
    v250 = swift_allocObject();
    *(_BYTE *)(v250 + 16) = 32;
    v251 = swift_allocObject();
    *(_BYTE *)(v251 + 16) = 8;
    v246 = swift_allocObject();
    *(_QWORD *)(v246 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
    *(_QWORD *)(v246 + 24) = v245;
    v247 = swift_allocObject();
    *(_QWORD *)(v247 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v247 + 24) = v246;
    v252 = swift_allocObject();
    *(_QWORD *)(v252 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v252 + 24) = v247;
    v253 = swift_allocObject();
    *(_BYTE *)(v253 + 16) = 32;
    v254 = swift_allocObject();
    *(_BYTE *)(v254 + 16) = 8;
    v249 = swift_allocObject();
    *(_QWORD *)(v249 + 16) = partial apply for specialized implicit closure #13 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
    *(_QWORD *)(v249 + 24) = v248;
    v255 = swift_allocObject();
    *(_QWORD *)(v255 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v255 + 24) = v249;
    _allocateUninitializedArray<A>(_:)();
    v256 = v28;
    swift_retain();
    *v256 = partial apply for closure #1 in OSLogArguments.append(_:);
    v256[1] = v250;
    swift_retain();
    v256[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v256[3] = v251;
    swift_retain();
    v256[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v256[5] = v252;
    swift_retain();
    v256[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v256[7] = v253;
    swift_retain();
    v256[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v256[9] = v254;
    swift_retain();
    v256[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v256[11] = v255;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v257, v258))
    {
      v235 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v234 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v236 = createStorage<A>(capacity:type:)(0);
      v237 = createStorage<A>(capacity:type:)(2);
      v442 = v235;
      v443 = v236;
      v444 = v237;
      serialize(_:at:)(2, &v442);
      serialize(_:at:)(2, &v442);
      v445 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v446 = v250;
      closure #1 in osLogInternal(_:log:type:)(&v445, (uint64_t)&v442, (uint64_t)&v443, (uint64_t)&v444);
      v445 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v446 = v251;
      closure #1 in osLogInternal(_:log:type:)(&v445, (uint64_t)&v442, (uint64_t)&v443, (uint64_t)&v444);
      v445 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v446 = v252;
      closure #1 in osLogInternal(_:log:type:)(&v445, (uint64_t)&v442, (uint64_t)&v443, (uint64_t)&v444);
      v445 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v446 = v253;
      closure #1 in osLogInternal(_:log:type:)(&v445, (uint64_t)&v442, (uint64_t)&v443, (uint64_t)&v444);
      v445 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v446 = v254;
      closure #1 in osLogInternal(_:log:type:)(&v445, (uint64_t)&v442, (uint64_t)&v443, (uint64_t)&v444);
      v445 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v446 = v255;
      closure #1 in osLogInternal(_:log:type:)(&v445, (uint64_t)&v442, (uint64_t)&v443, (uint64_t)&v444);
      _os_log_impl(&dword_24701B000, v257, v258, "#ContactDisambiguationStrategy<%s> parseDisambiguationResult, selected participant ordinally or by direct invocation: %s", v235, v244);
      destroyStorage<A>(_:count:)(v236, 0, v234);
      destroyStorage<A>(_:count:)(v237, 2, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v235, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    v232 = *(_QWORD *)(v1 + 824);
    v233 = *(_QWORD *)(v1 + 776);

    v387(v232, v233);
  }
  swift_beginAccess();
  v205 = *(id *)(v1 + 320);
  v35 = v205;
  swift_endAccess();
  if (!v205)
  {
    v84 = *(_QWORD *)(v1 + 888);
    v83 = *(_QWORD *)(v1 + 880);
    v68 = *(_QWORD *)(v1 + 792);
    v81 = *(_QWORD *)(v1 + 776);
    v82 = *(_QWORD *)(v1 + 576);
    v69 = Logger.payments.unsafeMutableAddressor();
    v402(v68, v69, v81);
    v86 = (_QWORD *)swift_allocObject();
    v86[2] = v82;
    v86[3] = v83;
    v86[4] = v84;
    v86[5] = v407;
    swift_retain();
    v90 = swift_allocObject();
    *(_QWORD *)(v90 + 16) = v418;
    *(_BYTE *)(v90 + 24) = v419 & 1;
    v102 = Logger.logObject.getter();
    v103 = static os_log_type_t.error.getter();
    *(_QWORD *)(v1 + 368) = 32;
    UnsignedInteger<>.init<A>(_:)();
    v85 = *(_DWORD *)(v1 + 904);
    v92 = swift_allocObject();
    *(_BYTE *)(v92 + 16) = 32;
    v93 = swift_allocObject();
    *(_BYTE *)(v93 + 16) = 8;
    v87 = swift_allocObject();
    *(_QWORD *)(v87 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
    *(_QWORD *)(v87 + 24) = v86;
    v88 = swift_allocObject();
    *(_QWORD *)(v88 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v88 + 24) = v87;
    v94 = swift_allocObject();
    *(_QWORD *)(v94 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v94 + 24) = v88;
    v95 = swift_allocObject();
    *(_BYTE *)(v95 + 16) = 32;
    v96 = swift_allocObject();
    *(_BYTE *)(v96 + 16) = 8;
    v89 = swift_allocObject();
    *(_QWORD *)(v89 + 16) = partial apply for implicit closure #8 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
    *(_QWORD *)(v89 + 24) = v388;
    v97 = swift_allocObject();
    *(_QWORD *)(v97 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v97 + 24) = v89;
    v98 = swift_allocObject();
    *(_BYTE *)(v98 + 16) = 32;
    v99 = swift_allocObject();
    *(_BYTE *)(v99 + 16) = 8;
    v91 = swift_allocObject();
    *(_QWORD *)(v91 + 16) = partial apply for specialized implicit closure #16 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
    *(_QWORD *)(v91 + 24) = v90;
    v100 = swift_allocObject();
    *(_QWORD *)(v100 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v100 + 24) = v91;
    _allocateUninitializedArray<A>(_:)();
    v101 = v70;
    swift_retain();
    *v101 = partial apply for closure #1 in OSLogArguments.append(_:);
    v101[1] = v92;
    swift_retain();
    v101[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v101[3] = v93;
    swift_retain();
    v101[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v101[5] = v94;
    swift_retain();
    v101[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v101[7] = v95;
    swift_retain();
    v101[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v101[9] = v96;
    swift_retain();
    v101[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v101[11] = v97;
    swift_retain();
    v101[12] = partial apply for closure #1 in OSLogArguments.append(_:);
    v101[13] = v98;
    swift_retain();
    v101[14] = partial apply for closure #1 in OSLogArguments.append(_:);
    v101[15] = v99;
    swift_retain();
    v101[16] = partial apply for closure #1 in OSLogArguments.append(_:);
    v101[17] = v100;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v102, v103))
    {
      v78 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v77 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v79 = createStorage<A>(capacity:type:)(0);
      v80 = createStorage<A>(capacity:type:)(3);
      v420 = v78;
      v421 = v79;
      v422 = v80;
      serialize(_:at:)(2, &v420);
      serialize(_:at:)(3, &v420);
      v423 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v424 = v92;
      closure #1 in osLogInternal(_:log:type:)(&v423, (uint64_t)&v420, (uint64_t)&v421, (uint64_t)&v422);
      v423 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v424 = v93;
      closure #1 in osLogInternal(_:log:type:)(&v423, (uint64_t)&v420, (uint64_t)&v421, (uint64_t)&v422);
      v423 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v424 = v94;
      closure #1 in osLogInternal(_:log:type:)(&v423, (uint64_t)&v420, (uint64_t)&v421, (uint64_t)&v422);
      v423 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v424 = v95;
      closure #1 in osLogInternal(_:log:type:)(&v423, (uint64_t)&v420, (uint64_t)&v421, (uint64_t)&v422);
      v423 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v424 = v96;
      closure #1 in osLogInternal(_:log:type:)(&v423, (uint64_t)&v420, (uint64_t)&v421, (uint64_t)&v422);
      v423 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v424 = v97;
      closure #1 in osLogInternal(_:log:type:)(&v423, (uint64_t)&v420, (uint64_t)&v421, (uint64_t)&v422);
      v423 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v424 = v98;
      closure #1 in osLogInternal(_:log:type:)(&v423, (uint64_t)&v420, (uint64_t)&v421, (uint64_t)&v422);
      v423 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v424 = v99;
      closure #1 in osLogInternal(_:log:type:)(&v423, (uint64_t)&v420, (uint64_t)&v421, (uint64_t)&v422);
      v423 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v424 = v100;
      closure #1 in osLogInternal(_:log:type:)(&v423, (uint64_t)&v420, (uint64_t)&v421, (uint64_t)&v422);
      _os_log_impl(&dword_24701B000, v102, v103, "#ContactDisambiguationStrategy<%s> Could not resolve disambiguation selection from id: %s or index: %s", v78, v85);
      destroyStorage<A>(_:count:)(v79, 0, v77);
      destroyStorage<A>(_:count:)(v80, 3, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v78, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    v76 = *(_QWORD *)(v1 + 872);
    v72 = *(_QWORD *)(v1 + 792);
    v73 = *(_QWORD *)(v1 + 776);

    v387(v72, v73);
    swift_beginAccess();
    v74 = *(_QWORD *)(v388 + 16);
    v75 = *(_QWORD *)(v388 + 24);
    swift_bridgeObjectRetain();
    swift_endAccess();
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v71 = v74;
    *(_QWORD *)(v71 + 8) = v75;
    *(_QWORD *)(v71 + 16) = 0;
    *(_QWORD *)(v71 + 24) = 0;
    *(_QWORD *)(v71 + 32) = 0;
    *(_QWORD *)(v71 + 40) = 0;
    *(_BYTE *)(v71 + 48) = 13;
    swift_willThrow();
    outlined destroy of SFRichText?((id *)(v1 + 320));
    swift_release();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v76);
    goto LABEL_97;
  }
  v36 = v205;
  v37 = v205;
  v38 = v205;
  v39 = v205;
  v40 = v205;
  v41 = v205;
  *(_QWORD *)(v1 + 360) = v205;
  v204 = objc_msgSend(v205, sel_personHandle);
  if (v204)
  {
    *(_QWORD *)(v1 + 432) = v204;

    v42 = v204;
    v203 = objc_msgSend(v205, sel_nameComponents);
    if (v203)
    {
      v202 = *(_QWORD *)(v1 + 672);
      v199 = *(_QWORD *)(v1 + 648);
      v200 = *(_QWORD *)(v1 + 640);
      v201 = *(_QWORD *)(v1 + 632);
      static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v200 + 32))(v202, v199, v201);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v200 + 56))(v202, 0, 1, v201);

    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v1 + 640) + 56))(*(_QWORD *)(v1 + 672), 1, 1, *(_QWORD *)(v1 + 632));
    }

    v198 = objc_msgSend(v205, sel_nameComponents);
    if (v198)
    {
      v197 = *(_QWORD *)(v1 + 656);
      v194 = *(_QWORD *)(v1 + 648);
      v195 = *(_QWORD *)(v1 + 640);
      v196 = *(_QWORD *)(v1 + 632);
      static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v195 + 32))(v197, v194, v196);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v195 + 56))(v197, 0, 1, v196);

    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v1 + 640) + 56))(*(_QWORD *)(v1 + 656), 1, 1, *(_QWORD *)(v1 + 632));
    }
    v193 = *(void **)(v1 + 664);
    v191 = *(_QWORD *)(v1 + 640);
    v192 = *(_QWORD *)(v1 + 632);
    outlined init with take of PersonNameComponents?(*(const void **)(v1 + 656), v193);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v191 + 48))(v193, 1, v192))
    {
      outlined destroy of PersonNameComponents?(*(_QWORD *)(v1 + 664));

      v190._countAndFlagsBits = 0;
      v190._object = 0;
    }
    else
    {
      v186 = *(_QWORD *)(v1 + 664);
      v188 = *(_QWORD *)(v1 + 648);
      v187 = *(_QWORD *)(v1 + 640);
      v189 = *(_QWORD *)(v1 + 632);
      (*(void (**)(uint64_t))(v187 + 16))(v188);
      outlined destroy of PersonNameComponents?(v186);

      v43 = PersonNameComponents.formatted()();
      (*(void (**)(uint64_t, uint64_t))(v187 + 8))(v188, v189);
      v190 = v43;
    }
    *(Swift::String *)(v1 + 232) = v190;
    if (*(_QWORD *)(v1 + 240))
    {
      v44 = *(_QWORD *)(v1 + 240);
      *(_QWORD *)(v1 + 216) = *(_QWORD *)(v1 + 232);
      *(_QWORD *)(v1 + 224) = v44;
    }
    else
    {
      v45 = String.EMPTY.unsafeMutableAddressor();
      outlined init with copy of String(v45, (_QWORD *)(v1 + 216));
      outlined destroy of String.UTF8View();
    }
    v182 = *(_QWORD *)(v1 + 216);
    v183 = *(_QWORD *)(v1 + 224);
    v184 = objc_msgSend(v205, sel_image);

    v185 = objc_msgSend(v205, sel_contactIdentifier);
    if (v185)
    {
      v178 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v179 = v46;

      v180 = v178;
      v181 = v179;
    }
    else
    {
      v180 = 0;
      v181 = 0;
    }

    v177 = objc_msgSend(v205, sel_customIdentifier);
    if (v177)
    {
      v173 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v174 = v47;

      v175 = v173;
      v176 = v174;
    }
    else
    {
      v175 = 0;
      v176 = 0;
    }
    v172 = *(_QWORD *)(v1 + 672);

    v48 = INPerson.__allocating_init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:)(v204, v172, v182, v183, v184, v180, v181, v175, v176);
    v49 = *(void **)(v1 + 360);
    *(_QWORD *)(v1 + 360) = v48;

  }
  else
  {

  }
  v169 = *(_QWORD *)(v1 + 576);
  type metadata accessor for ParameterResolutionRecord();
  v170 = (id)ParameterResolutionRecord.intent.getter();
  v171 = (id)(*(uint64_t (**)(uint64_t))(v407 + 16))(v169);

  if (v171)
  {
    v168 = objc_msgSend(v171, sel_siriMatches);
    if (v168)
    {
      v166 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v167 = v166;
    }
    else
    {
      v167 = 0;
    }

    v165 = v167;
  }
  else
  {
    v165 = 0;
  }
  *(_QWORD *)(v1 + 384) = v165;
  if (*(_QWORD *)(v1 + 384))
  {
    *(_QWORD *)(v1 + 376) = *(_QWORD *)(v1 + 384);
  }
  else
  {
    *(_QWORD *)(v1 + 376) = Array.init()();
    outlined destroy of [SFCardSection]();
  }
  v163 = *(_QWORD *)(v1 + 376);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v1 + 392) = v163;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  lazy protocol witness table accessor for type [INPerson] and conformance [A]();
  v164 = Collection.isEmpty.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  if ((v164 & 1) != 0)
  {
    v152 = *(_QWORD *)(v1 + 888);
    v151 = *(_QWORD *)(v1 + 880);
    v50 = *(_QWORD *)(v1 + 808);
    v149 = *(_QWORD *)(v1 + 776);
    v150 = *(_QWORD *)(v1 + 576);
    v51 = Logger.payments.unsafeMutableAddressor();
    v402(v50, v51, v149);
    v154 = (_QWORD *)swift_allocObject();
    v154[2] = v150;
    v154[3] = v151;
    v154[4] = v152;
    v154[5] = v407;
    v161 = Logger.logObject.getter();
    v162 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v1 + 416) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v153 = *(_DWORD *)(v1 + 912);
    v157 = swift_allocObject();
    *(_BYTE *)(v157 + 16) = 32;
    v158 = swift_allocObject();
    *(_BYTE *)(v158 + 16) = 8;
    v155 = swift_allocObject();
    *(_QWORD *)(v155 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
    *(_QWORD *)(v155 + 24) = v154;
    v156 = swift_allocObject();
    *(_QWORD *)(v156 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v156 + 24) = v155;
    v159 = swift_allocObject();
    *(_QWORD *)(v159 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v159 + 24) = v156;
    _allocateUninitializedArray<A>(_:)();
    v160 = v52;
    swift_retain();
    *v160 = partial apply for closure #1 in OSLogArguments.append(_:);
    v160[1] = v157;
    swift_retain();
    v160[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v160[3] = v158;
    swift_retain();
    v160[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v160[5] = v159;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v161, v162))
    {
      v146 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v145 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v147 = createStorage<A>(capacity:type:)(0);
      v148 = createStorage<A>(capacity:type:)(1);
      v432 = v146;
      v433 = v147;
      v434 = v148;
      serialize(_:at:)(2, &v432);
      serialize(_:at:)(1, &v432);
      v435 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v436 = v157;
      closure #1 in osLogInternal(_:log:type:)(&v435, (uint64_t)&v432, (uint64_t)&v433, (uint64_t)&v434);
      v435 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v436 = v158;
      closure #1 in osLogInternal(_:log:type:)(&v435, (uint64_t)&v432, (uint64_t)&v433, (uint64_t)&v434);
      v435 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v436 = v159;
      closure #1 in osLogInternal(_:log:type:)(&v435, (uint64_t)&v432, (uint64_t)&v433, (uint64_t)&v434);
      _os_log_impl(&dword_24701B000, v161, v162, "#ContactDisambiguationStrategy<%s> appending selectedPerson to empty persons array", v146, v153);
      destroyStorage<A>(_:count:)(v147, 0, v145);
      destroyStorage<A>(_:count:)(v148, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v146, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v142 = *(_QWORD *)(v1 + 808);
    v143 = *(_QWORD *)(v1 + 776);

    v387(v142, v143);
    v144 = *(void **)(v1 + 360);
    v53 = v144;
    *(_QWORD *)(v1 + 424) = v144;
    Array.append(_:)();
  }
  else
  {
    ParameterResolutionRecord.parameter.getter();
    v141 = ParameterIdentifier.multicardinalIndex.getter();
    if ((v54 & 1) != 0)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 616) + 8))(*(_QWORD *)(v1 + 624), *(_QWORD *)(v1 + 608));
    }
    else
    {
      v125 = *(_QWORD *)(v1 + 888);
      v124 = *(_QWORD *)(v1 + 880);
      v55 = *(_QWORD *)(v1 + 800);
      v122 = *(_QWORD *)(v1 + 776);
      v56 = *(_QWORD *)(v1 + 624);
      v57 = *(_QWORD *)(v1 + 616);
      v58 = *(_QWORD *)(v1 + 608);
      v123 = *(_QWORD *)(v1 + 576);
      *(_QWORD *)(v1 + 400) = v141;
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
      v59 = Logger.payments.unsafeMutableAddressor();
      v402(v55, v59, v122);
      v127 = (_QWORD *)swift_allocObject();
      v127[2] = v123;
      v127[3] = v124;
      v127[4] = v125;
      v127[5] = v407;
      v130 = swift_allocObject();
      *(_QWORD *)(v130 + 16) = v141;
      v139 = Logger.logObject.getter();
      v140 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v1 + 408) = 22;
      UnsignedInteger<>.init<A>(_:)();
      v126 = *(_DWORD *)(v1 + 908);
      v132 = swift_allocObject();
      *(_BYTE *)(v132 + 16) = 32;
      v133 = swift_allocObject();
      *(_BYTE *)(v133 + 16) = 8;
      v128 = swift_allocObject();
      *(_QWORD *)(v128 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
      *(_QWORD *)(v128 + 24) = v127;
      v129 = swift_allocObject();
      *(_QWORD *)(v129 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v129 + 24) = v128;
      v134 = swift_allocObject();
      *(_QWORD *)(v134 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v134 + 24) = v129;
      v135 = swift_allocObject();
      *(_BYTE *)(v135 + 16) = 0;
      v136 = swift_allocObject();
      *(_BYTE *)(v136 + 16) = 8;
      v131 = swift_allocObject();
      *(_QWORD *)(v131 + 16) = partial apply for implicit closure #21 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
      *(_QWORD *)(v131 + 24) = v130;
      v137 = swift_allocObject();
      *(_QWORD *)(v137 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
      *(_QWORD *)(v137 + 24) = v131;
      _allocateUninitializedArray<A>(_:)();
      v138 = v60;
      swift_retain();
      *v138 = partial apply for closure #1 in OSLogArguments.append(_:);
      v138[1] = v132;
      swift_retain();
      v138[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v138[3] = v133;
      swift_retain();
      v138[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v138[5] = v134;
      swift_retain();
      v138[6] = partial apply for closure #1 in OSLogArguments.append(_:);
      v138[7] = v135;
      swift_retain();
      v138[8] = partial apply for closure #1 in OSLogArguments.append(_:);
      v138[9] = v136;
      swift_retain();
      v138[10] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
      v138[11] = v137;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v139, v140))
      {
        v119 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v118 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v120 = createStorage<A>(capacity:type:)(0);
        v121 = createStorage<A>(capacity:type:)(1);
        v427 = v119;
        v428 = v120;
        v429 = v121;
        serialize(_:at:)(2, &v427);
        serialize(_:at:)(2, &v427);
        v430 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v431 = v132;
        closure #1 in osLogInternal(_:log:type:)(&v430, (uint64_t)&v427, (uint64_t)&v428, (uint64_t)&v429);
        v430 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v431 = v133;
        closure #1 in osLogInternal(_:log:type:)(&v430, (uint64_t)&v427, (uint64_t)&v428, (uint64_t)&v429);
        v430 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v431 = v134;
        closure #1 in osLogInternal(_:log:type:)(&v430, (uint64_t)&v427, (uint64_t)&v428, (uint64_t)&v429);
        v430 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v431 = v135;
        closure #1 in osLogInternal(_:log:type:)(&v430, (uint64_t)&v427, (uint64_t)&v428, (uint64_t)&v429);
        v430 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v431 = v136;
        closure #1 in osLogInternal(_:log:type:)(&v430, (uint64_t)&v427, (uint64_t)&v428, (uint64_t)&v429);
        v430 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
        v431 = v137;
        closure #1 in osLogInternal(_:log:type:)(&v430, (uint64_t)&v427, (uint64_t)&v428, (uint64_t)&v429);
        _os_log_impl(&dword_24701B000, v139, v140, "#ContactDisambiguationStrategy<%s> setting selectedPerson to multicardinalValueIndex %ld", v119, v126);
        destroyStorage<A>(_:count:)(v120, 0, v118);
        destroyStorage<A>(_:count:)(v121, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v119, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      v114 = *(_QWORD *)(v1 + 800);
      v115 = *(_QWORD *)(v1 + 776);

      v387(v114, v115);
      v116 = *(void **)(v1 + 360);
      v61 = v116;
      v117 = (void (*)(uint64_t, _QWORD))Array.subscript.modify();
      v63 = *v62;
      *v62 = v116;

      v117(v1 + 136, 0);
    }
  }
  v112 = *(_QWORD *)(v1 + 872);
  v113 = *(_QWORD *)(v1 + 600);
  v110 = *(_QWORD *)(v1 + 592);
  v111 = *(_QWORD *)(v1 + 584);
  v109 = *(_QWORD *)(v1 + 576);
  v107 = (id)ParameterResolutionRecord.intent.getter();
  v106 = *(void **)(v1 + 360);
  v64 = v106;
  v104 = (id)ParameterResolutionRecord.intent.getter();
  v65 = (*(uint64_t (**)(uint64_t))(v407 + 24))(v109);
  v105 = (id)MEMORY[0x24957220C](v65);

  swift_bridgeObjectRelease();
  objc_msgSend(v107, sel_setValue_forKeyPath_, v106, v105);

  swift_unknownObjectRelease();
  v108 = *(void **)(v1 + 360);
  v66 = v108;
  v426 = v389;
  v425 = v108;
  ParameterResolutionRecord.intent.getter();
  IntentPromptAnswer.init(answeredValue:updatedIntent:)();
  static DisambiguationResult.chosenItem(_:)();
  (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v113, v111);
  outlined destroy of [SFCardSection]();

  outlined destroy of SFRichText?((id *)(v1 + 320));
  swift_release();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v112);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v1 + 264) + 8))();
}

uint64_t implicit closure #7 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(void *a1, uint64_t a2)
{
  id v2;

  v2 = a1;
  MEMORY[0x249572C98](MEMORY[0x24BDD0240], a2);
  return String.init<A>(describing:)();
}

uint64_t implicit closure #8 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  return String.init<A>(describing:)();
}

uint64_t implicit closure #9 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;

  v3 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>);
  v4 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v6 = (char *)&v3 - v4;
  (*(void (**)(char *))(v1 + 16))((char *)&v3 - v4);
  return String.init<A>(describing:)();
}

uint64_t specialized implicit closure #11 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(void *a1)
{
  id v1;

  v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INPerson?);
  return String.init<A>(describing:)();
}

uint64_t closure #1 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  char v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v15 = 0;
  v14 = 0;
  v15 = *a1;
  v14 = a2;
  v7 = INPerson.identifier.getter();
  v8 = v2;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v9 = *a2;
  v10 = a2[1];
  swift_bridgeObjectRetain();
  swift_endAccess();
  swift_bridgeObjectRetain();
  v12[0] = v7;
  v12[1] = v8;
  v12[2] = v9;
  v13 = v10;
  if (!v8)
  {
    if (!v13)
    {
      outlined destroy of String.UTF8View();
      v5 = 1;
      goto LABEL_7;
    }
    goto LABEL_8;
  }
  outlined init with copy of String(v12, &v11);
  if (!v13)
  {
    outlined destroy of String.UTF8View();
LABEL_8:
    outlined destroy of DIIdentifier();
    v5 = 0;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();
  v5 = v4;
LABEL_7:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t specialized implicit closure #16 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  return String.init<A>(describing:)();
}

id INPerson.__allocating_init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v9;

  v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc INPerson.init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v13;

  *(_QWORD *)(v4 + 656) = v3;
  *(_QWORD *)(v4 + 648) = a3;
  *(_QWORD *)(v4 + 640) = a2;
  *(_QWORD *)(v4 + 632) = a1;
  *(_QWORD *)(v4 + 664) = *v3;
  *(_QWORD *)(v4 + 456) = v4;
  *(_QWORD *)(v4 + 464) = 0;
  *(_QWORD *)(v4 + 472) = 0;
  *(_QWORD *)(v4 + 480) = 0;
  *(_QWORD *)(v4 + 496) = 0;
  *(_QWORD *)(v4 + 504) = 0;
  *(_QWORD *)(v4 + 520) = 0;
  *(_BYTE *)(v4 + 1048) = 0;
  *(_QWORD *)(v4 + 576) = 0;
  *(_BYTE *)(v4 + 1056) = 0;
  *(_QWORD *)(v4 + 584) = 0;
  *(_QWORD *)(v4 + 592) = 0;
  v13 = (_QWORD *)*v3;
  *(_QWORD *)(v4 + 672) = *v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(_QWORD *)(v4 + 680) = swift_task_alloc();
  v5 = type metadata accessor for AceOutput();
  *(_QWORD *)(v4 + 688) = v5;
  *(_QWORD *)(v4 + 696) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 704) = swift_task_alloc();
  v6 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v4 + 712) = v6;
  *(_QWORD *)(v4 + 720) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 728) = swift_task_alloc();
  type metadata accessor for DialogPhase();
  *(_QWORD *)(v4 + 736) = swift_task_alloc();
  v7 = type metadata accessor for OutputGenerationManifest();
  *(_QWORD *)(v4 + 744) = v7;
  *(_QWORD *)(v4 + 752) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 760) = swift_task_alloc();
  v8 = type metadata accessor for NLContextUpdate();
  *(_QWORD *)(v4 + 768) = v8;
  *(_QWORD *)(v4 + 776) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 784) = swift_task_alloc();
  *(_QWORD *)(v4 + 792) = swift_task_alloc();
  *(_QWORD *)(v4 + 800) = swift_task_alloc();
  v9 = type metadata accessor for Logger();
  *(_QWORD *)(v4 + 808) = v9;
  *(_QWORD *)(v4 + 816) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 824) = swift_task_alloc();
  *(_QWORD *)(v4 + 832) = swift_task_alloc();
  *(_QWORD *)(v4 + 840) = swift_task_alloc();
  *(_QWORD *)(v4 + 848) = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  *(_QWORD *)(v4 + 856) = swift_task_alloc();
  *(_QWORD *)(v4 + 464) = a2;
  *(_QWORD *)(v4 + 472) = a3;
  *(_QWORD *)(v4 + 864) = v13[10];
  *(_QWORD *)(v4 + 480) = v3;
  *(_QWORD *)(v4 + 872) = v13[11];
  *(_QWORD *)(v4 + 880) = v13[12];
  return swift_task_switch();
}

uint64_t ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  id v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(_QWORD, uint64_t);
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint32_t v35;
  os_log_type_t v36;
  NSObject *log;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint32_t v61;
  os_log_type_t v62;
  NSObject *oslog;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  _BYTE *v80;
  char v81;
  uint64_t v82;
  uint8_t *buf;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint32_t size;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  NSObject *v104;
  os_log_type_t v105;
  uint64_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t (*v110)(uint64_t, uint64_t, uint64_t);
  uint64_t v111;

  v93 = *(_QWORD *)(v0 + 880);
  v92 = *(_QWORD *)(v0 + 872);
  v91 = *(_QWORD *)(v0 + 864);
  v87 = *(_QWORD *)(v0 + 856);
  v1 = *(_QWORD *)(v0 + 848);
  v88 = *(_QWORD *)(v0 + 816);
  v89 = *(_QWORD *)(v0 + 808);
  v94 = *(_QWORD *)(v0 + 672);
  *(_QWORD *)(v0 + 456) = v0;
  v2 = SignpostName.makePromptForDisambiguation.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v87);
  v3 = Logger.payments.unsafeMutableAddressor();
  v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 16);
  *(_QWORD *)(v0 + 888) = v90;
  v90(v1, v3, v89);
  v97 = (_QWORD *)swift_allocObject();
  v97[2] = v91;
  v97[3] = v92;
  v97[4] = v93;
  v95 = *(_QWORD *)(v94 + 104);
  *(_QWORD *)(v0 + 896) = v95;
  v97[5] = v95;
  v104 = Logger.logObject.getter();
  v105 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 488) = 12;
  *(_QWORD *)(v0 + 904) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 912) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 920) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 1052);
  v100 = swift_allocObject();
  *(_BYTE *)(v100 + 16) = 32;
  v101 = swift_allocObject();
  *(_BYTE *)(v101 + 16) = 8;
  v98 = swift_allocObject();
  *(_QWORD *)(v98 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  *(_QWORD *)(v98 + 24) = v97;
  v99 = swift_allocObject();
  *(_QWORD *)(v99 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v99 + 24) = v98;
  v102 = swift_allocObject();
  *(_QWORD *)(v102 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v102 + 24) = v99;
  *(_QWORD *)(v0 + 928) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v103 = v4;
  swift_retain();
  *v103 = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[1] = v100;
  swift_retain();
  v103[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[3] = v101;
  swift_retain();
  v103[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[5] = v102;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v104, v105))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v82 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v84 = createStorage<A>(capacity:type:)(0);
    v85 = createStorage<A>(capacity:type:)(1);
    v107 = buf;
    v108 = v84;
    v109 = v85;
    serialize(_:at:)(2, &v107);
    serialize(_:at:)(1, &v107);
    v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v111 = v100;
    closure #1 in osLogInternal(_:log:type:)(&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
    v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v111 = v101;
    closure #1 in osLogInternal(_:log:type:)(&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
    v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v111 = v102;
    closure #1 in osLogInternal(_:log:type:)(&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
    _os_log_impl(&dword_24701B000, v104, v105, "#ContactDisambiguationStrategy<%s> Running makePromptForDisambiguation()", buf, size);
    destroyStorage<A>(_:count:)(v84, 0, v82);
    destroyStorage<A>(_:count:)(v85, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v77 = *(_QWORD *)(v86 + 848);
  v76 = *(_QWORD *)(v86 + 816);
  v78 = *(_QWORD *)(v86 + 808);

  v79 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
  *(_QWORD *)(v86 + 936) = v79;
  v79(v77, v78);
  *(_QWORD *)(v86 + 944) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>);
  v80 = (_BYTE *)PaginatedItemContainer.items.getter();
  v81 = static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(v80);
  swift_bridgeObjectRelease();
  if ((v81 & 1) != 0)
  {
    v74 = PaginatedItemContainer.items.getter();
    v75 = static ContactDisambiguationStrategy.handleType(for:)(v74);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v86 + 1049) = v75;
  }
  else
  {
    *(_BYTE *)(v86 + 1049) = 4;
  }
  v69 = *(_QWORD *)(v86 + 656);
  type metadata accessor for DisambiguationViewBuilder();
  v67 = *(_BYTE *)(v86 + 1049);
  v68 = PaginatedItemContainer.items.getter();
  outlined init with copy of GlobalsProviding(v69 + 24, v86 + 16);
  v66 = *(_QWORD *)(v86 + 40);
  v65 = *(_QWORD *)(v86 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v86 + 16), v66);
  (*(void (**)(uint64_t))(v65 + 16))(v66);
  v72 = DisambiguationViewBuilder.__allocating_init(contactDisambiguationType:persons:deviceState:)(v67, v68, (uint64_t)&v106);
  *(_QWORD *)(v86 + 952) = v72;
  __swift_destroy_boxed_opaque_existential_0(v86 + 16);
  *(_QWORD *)(v86 + 496) = v72;
  type metadata accessor for ParameterResolutionRecord();
  ParameterResolutionRecord.app.getter();
  outlined init with copy of GlobalsProviding(v69 + 24, v86 + 56);
  v71 = *(_QWORD *)(v86 + 80);
  v70 = *(_QWORD *)(v86 + 88);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v86 + 56), v71);
  (*(void (**)(uint64_t))(v70 + 16))(v71);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v86 + 96), *(_QWORD *)(v86 + 120));
  dispatch thunk of DeviceState.isWatch.getter();
  __swift_destroy_boxed_opaque_existential_0(v86 + 96);
  __swift_destroy_boxed_opaque_existential_0(v86 + 56);
  v73 = DisambiguationViewBuilder.makeDisambiguationItems(app:compact:)();
  *(_QWORD *)(v86 + 960) = v73;
  swift_release();
  *(_QWORD *)(v86 + 504) = v73;
  if ((static RFFeatureFlags.ResponseFramework.SMART.getter() & 1) != 0)
  {
    v5 = *(_QWORD *)(v86 + 840);
    v60 = *(_QWORD *)(v86 + 808);
    v6 = Logger.payments.unsafeMutableAddressor();
    v90(v5, v6, v60);
    oslog = Logger.logObject.getter();
    v62 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v86 + 568) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v61 = *(_DWORD *)(v86 + 1068);
    v64 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v62))
    {
      v56 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v57 = createStorage<A>(capacity:type:)(0);
      v58 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v86 + 600) = v56;
      *(_QWORD *)(v86 + 608) = v57;
      *(_QWORD *)(v86 + 616) = v58;
      serialize(_:at:)(0, (_BYTE **)(v86 + 600));
      serialize(_:at:)(0, (_BYTE **)(v86 + 600));
      *(_QWORD *)(v86 + 624) = v64;
      v59 = (_QWORD *)swift_task_alloc();
      v59[2] = v86 + 600;
      v59[3] = v86 + 608;
      v59[4] = v86 + 616;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24701B000, oslog, v62, "SnippetViews for disambiguation using RF 2.0", v56, v61);
      destroyStorage<A>(_:count:)(v57, 0, v55);
      destroyStorage<A>(_:count:)(v58, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v56, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v46 = *(_QWORD *)(v86 + 864);
    v43 = *(_QWORD *)(v86 + 840);
    v44 = *(_QWORD *)(v86 + 808);
    v49 = *(_QWORD *)(v86 + 800);
    v51 = *(_QWORD *)(v86 + 792);
    v50 = *(_QWORD *)(v86 + 776);
    v52 = *(_QWORD *)(v86 + 768);
    v53 = *(_QWORD *)(v86 + 656);

    v79(v43, v44);
    v45 = PaginatedItemContainer.items.getter();
    *(_QWORD *)(v86 + 968) = v45;
    *(_QWORD *)(v86 + 576) = v45;
    v47 = v46 == type metadata accessor for INSendPaymentIntent();
    *(_BYTE *)(v86 + 1056) = v47;
    v48 = PaginatedItemContainer.items.getter();
    static PaymentsContextProvider.personDisambiguationContextUpdate(persons:isSend:)(v48, v47, v49);
    swift_bridgeObjectRelease();
    static DialogPhase.clarification.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v51, v49, v52);
    *(_QWORD *)(swift_task_alloc() + 16) = v51;
    OutputGenerationManifest.init(dialogPhase:_:)();
    swift_task_dealloc();
    v7 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    *(_QWORD *)(v86 + 976) = v7;
    v7(v51, v52);
    v54 = *(void **)(v53 + 64);
    v8 = v54;
    if (v54)
    {
      *(_QWORD *)(v86 + 592) = v54;
      type metadata accessor for ContactResolutionSnippetGenerator();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.MobileSMS", 0x13uLL, 1);
      v9 = v54;
      *(_QWORD *)(v86 + 584) = ContactResolutionSnippetGenerator.__allocating_init(appBundleId:globals:)();

    }
    else
    {
      v39 = *(_QWORD *)(v86 + 656);
      type metadata accessor for ContactResolutionSnippetGenerator();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.MobileSMS", 0x13uLL, 1);
      outlined init with copy of GlobalsProviding(v39 + 24, v86 + 416);
      v41 = *(_QWORD *)(v86 + 440);
      v40 = *(_QWORD *)(v86 + 448);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v86 + 416), v41);
      (*(void (**)(uint64_t))(v40 + 16))(v41);
      default argument 1 of ContactResolutionSnippetGenerator.init(appBundleId:globals:deviceState:)();
      v42 = ContactResolutionSnippetGenerator.__allocating_init(appBundleId:globals:deviceState:)();
      __swift_destroy_boxed_opaque_existential_0(v86 + 416);
      *(_QWORD *)(v86 + 584) = v42;
    }
    *(_QWORD *)(v86 + 984) = *(_QWORD *)(v86 + 584);
    swift_retain();
    PaymentsDirectInvocations.Identifiers.rawValue.getter(0);
    *(_QWORD *)(v86 + 992) = v10;
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v86 + 1000) = v11;
    *v11 = *(_QWORD *)(v86 + 456);
    v11[1] = ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
    return ContactResolutionSnippetGenerator.generateDetailedDisambiguationContactNames(contacts:directInvocationID:outputGenerationManifest:)();
  }
  else
  {
    v13 = *(_QWORD *)(v86 + 832);
    v34 = *(_QWORD *)(v86 + 808);
    v14 = Logger.payments.unsafeMutableAddressor();
    v90(v13, v14, v34);
    log = Logger.logObject.getter();
    v36 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v86 + 512) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v35 = *(_DWORD *)(v86 + 1060);
    v38 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v36))
    {
      v30 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v31 = createStorage<A>(capacity:type:)(0);
      v32 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v86 + 536) = v30;
      *(_QWORD *)(v86 + 544) = v31;
      *(_QWORD *)(v86 + 552) = v32;
      serialize(_:at:)(0, (_BYTE **)(v86 + 536));
      serialize(_:at:)(0, (_BYTE **)(v86 + 536));
      *(_QWORD *)(v86 + 560) = v38;
      v33 = (_QWORD *)swift_task_alloc();
      v33[2] = v86 + 536;
      v33[3] = v86 + 544;
      v33[4] = v86 + 552;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24701B000, log, v36, "AceViews for disambiguation", v30, v35);
      destroyStorage<A>(_:count:)(v31, 0, v29);
      destroyStorage<A>(_:count:)(v32, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v30, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v24 = *(_QWORD *)(v86 + 864);
    v17 = *(_QWORD *)(v86 + 832);
    v18 = *(_QWORD *)(v86 + 808);
    v26 = *(_QWORD *)(v86 + 656);

    v79(v17, v18);
    v22 = ParameterResolutionRecord.app.getter();
    type metadata accessor for SiriKitDisambiguationList();
    PaginatedItemContainer.items.getter();
    type metadata accessor for INPerson();
    _arrayForceCast<A, B>(_:)();
    swift_bridgeObjectRetain();
    _swift_stdlib_has_malloc_size();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v21 = SiriKitDisambiguationList.__allocating_init(rawItems:disambiguationItems:shouldReadItemsInVox:requestUnlockForEmptyOrDuplicateItems:)();
    swift_bridgeObjectRelease();
    outlined init with copy of GlobalsProviding(v26 + 24, v86 + 136);
    v20 = *(_QWORD *)(v86 + 160);
    v19 = *(_QWORD *)(v86 + 168);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v86 + 136), v20);
    (*(void (**)(uint64_t))(v19 + 16))(v20);
    v15 = type metadata accessor for SiriKitDisambiguationSnippetFactory();
    v23 = static AceViewProviding.makeAceViewsForDisambiguation(app:disambiguationList:deviceState:disambiguationSnippetProvider:)(v22, v21, (_QWORD *)(v86 + 176), v15, (uint64_t)&protocol witness table for SiriKitDisambiguationSnippetFactory);
    *(_QWORD *)(v86 + 1016) = v23;
    __swift_destroy_boxed_opaque_existential_0(v86 + 176);
    __swift_destroy_boxed_opaque_existential_0(v86 + 136);
    swift_release();
    swift_release();
    *(_QWORD *)(v86 + 520) = v23;
    v25 = (id)ParameterResolutionRecord.intent.getter();
    v27 = (*(uint64_t (**)(uint64_t))(v95 + 16))(v24);
    *(_QWORD *)(v86 + 1024) = v27;

    v28 = (uint64_t (*)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)v26 + 184)
                                                  + **(int **)(*(_QWORD *)v26 + 184));
    v16 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v86 + 1032) = v16;
    *v16 = *(_QWORD *)(v86 + 456);
    v16[1] = ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
    return v28(*(_QWORD *)(v86 + 728), v27);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 456) = *v1;
  *(_QWORD *)(v2 + 1008) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  v7 = (void (*)(uint64_t, uint64_t))v0[122];
  v8 = v0[107];
  v5 = v0[100];
  v6 = v0[96];
  v3 = v0[95];
  v2 = v0[94];
  v4 = v0[93];
  v0[57] = v0;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  v7(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[57] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 456) = *v1;
  *(_QWORD *)(v2 + 1040) = v0;
  swift_task_dealloc();
  if (!v0)

  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *buf;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint32_t size;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;

  v40 = *(_QWORD *)(v0 + 896);
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 888);
  v39 = *(_QWORD *)(v0 + 880);
  v38 = *(_QWORD *)(v0 + 872);
  v37 = *(_QWORD *)(v0 + 864);
  v1 = *(_QWORD *)(v0 + 824);
  v35 = *(_QWORD *)(v0 + 808);
  *(_QWORD *)(v0 + 456) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  v36(v1, v2, v35);
  v42 = (_QWORD *)swift_allocObject();
  v42[2] = v37;
  v42[3] = v38;
  v42[4] = v39;
  v42[5] = v40;
  v49 = Logger.logObject.getter();
  v50 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 528) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 1064);
  v45 = swift_allocObject();
  *(_BYTE *)(v45 + 16) = 32;
  v46 = swift_allocObject();
  *(_BYTE *)(v46 + 16) = 8;
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  *(_QWORD *)(v43 + 24) = v42;
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v44 + 24) = v43;
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v47 + 24) = v44;
  _allocateUninitializedArray<A>(_:)();
  v48 = v3;
  swift_retain();
  *v48 = partial apply for closure #1 in OSLogArguments.append(_:);
  v48[1] = v45;
  swift_retain();
  v48[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v48[3] = v46;
  swift_retain();
  v48[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v48[5] = v47;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v49, v50))
  {
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_6;
  }
  v4 = *(_QWORD *)(v34 + 1040);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
  v32 = createStorage<A>(capacity:type:)(0);
  v33 = createStorage<A>(capacity:type:)(1);
  v51 = buf;
  v52 = v32;
  v53 = v33;
  serialize(_:at:)(2, &v51);
  serialize(_:at:)(1, &v51);
  v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v55 = v45;
  result = closure #1 in osLogInternal(_:log:type:)(&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
  if (!v4)
  {
    v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v55 = v46;
    closure #1 in osLogInternal(_:log:type:)(&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v55 = v47;
    closure #1 in osLogInternal(_:log:type:)(&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    _os_log_impl(&dword_24701B000, v49, v50, "#ContactDisambiguationStrategy<%s> Creating SDAs and updating NLContext()", buf, size);
    destroyStorage<A>(_:count:)(v32, 0, v30);
    destroyStorage<A>(_:count:)(v33, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
LABEL_6:
    v9 = *(void (**)(uint64_t, uint64_t))(v34 + 936);
    v10 = *(_QWORD *)(v34 + 864);
    v29 = *(_QWORD *)(v34 + 856);
    v7 = *(_QWORD *)(v34 + 824);
    v8 = *(_QWORD *)(v34 + 808);
    v24 = *(_QWORD *)(v34 + 784);
    v23 = *(_QWORD *)(v34 + 776);
    v25 = *(_QWORD *)(v34 + 768);
    v27 = *(_QWORD *)(v34 + 728);
    v26 = *(_QWORD *)(v34 + 720);
    v28 = *(_QWORD *)(v34 + 712);
    v22 = *(_QWORD *)(v34 + 704);
    v20 = *(_QWORD *)(v34 + 696);
    v21 = *(_QWORD *)(v34 + 688);
    v18 = *(_QWORD *)(v34 + 680);
    v15 = *(_QWORD *)(v34 + 656);
    v19 = *(uint64_t **)(v34 + 632);

    v9(v7, v8);
    v11 = v10 == type metadata accessor for INSendPaymentIntent();
    *(_BYTE *)(v34 + 1048) = v11;
    v12 = PaginatedItemContainer.items.getter();
    static PaymentsContextProvider.personDisambiguationContextUpdate(persons:isSend:)(v12, v11, v24);
    swift_bridgeObjectRelease();
    outlined init with copy of GlobalsProviding(v15 + 24, v34 + 216);
    v14 = *(_QWORD *)(v34 + 240);
    v13 = *(_QWORD *)(v34 + 248);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v34 + 216), v14);
    (*(void (**)(uint64_t))(v13 + 16))(v14);
    outlined init with copy of GlobalsProviding(v15 + 24, v34 + 296);
    v17 = *(_QWORD *)(v34 + 320);
    v16 = *(_QWORD *)(v34 + 328);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v34 + 296), v17);
    (*(void (**)(uint64_t))(v16 + 16))(v17);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v34 + 336), *(_QWORD *)(v34 + 360));
    dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v18, v24, v25);
    (*(void (**)(uint64_t))(v23 + 56))(v18);
    type metadata accessor for SABaseCommand();
    _allocateUninitializedArray<A>(_:)();
    *(_QWORD *)(v34 + 376) = 0;
    *(_QWORD *)(v34 + 384) = 0;
    *(_QWORD *)(v34 + 392) = 0;
    *(_QWORD *)(v34 + 400) = 0;
    *(_QWORD *)(v34 + 408) = 0;
    static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    outlined destroy of FlowActivity?(v34 + 376);
    swift_bridgeObjectRelease();
    outlined destroy of NLContextUpdate?(v18);
    __swift_destroy_boxed_opaque_existential_0(v34 + 336);
    __swift_destroy_boxed_opaque_existential_0(v34 + 296);
    __swift_destroy_boxed_opaque_existential_0(v34 + 256);
    __swift_destroy_boxed_opaque_existential_0(v34 + 216);
    v19[3] = v21;
    v19[4] = MEMORY[0x24BE99088];
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v20 + 16))(boxed_opaque_existential_1, v22, v21);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v29);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v34 + 456) + 8))();
  }
  return result;
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  v7 = (void (*)(uint64_t, uint64_t))v0[122];
  v8 = v0[107];
  v5 = v0[100];
  v6 = v0[96];
  v3 = v0[95];
  v2 = v0[94];
  v4 = v0[93];
  v0[57] = v0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  v7(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[57] + 8))();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v3;

  v1 = (void *)v0[128];
  v3 = v0[107];
  v0[57] = v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[57] + 8))();
}

uint64_t static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD v96[2];
  uint64_t v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE **v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint32_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  NSObject *v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint8_t *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  _BYTE **v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint32_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  NSObject *v154;
  int v155;
  int v156;
  uint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  int v163;
  Swift::String v164;
  int v165;
  id v166;
  id v167;
  unsigned __int128 v168;
  unsigned __int128 v169;
  id v170;
  _QWORD *v171;
  id v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  id v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  id v193;
  id v194;
  id v195;
  id v196;
  _QWORD *v197;
  id v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  id v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  id v219;
  id v220;
  id v221;
  id v222;
  _QWORD *v223;
  id v224;
  int v225;
  int v226;
  uint64_t v227;
  int v228;
  unint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  void (*v233)(char *, uint64_t);
  uint64_t v234;
  unint64_t v235;
  _QWORD *v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint8_t *v242;
  uint64_t v243;
  uint64_t v244;
  _BYTE **v245;
  uint64_t *v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  _BYTE *v250;
  unint64_t v251;
  char *v252;
  unint64_t v253;
  uint64_t v254;
  char *v255;
  unint64_t v256;
  char *v257;
  _QWORD *v258;
  uint64_t v259;
  void (*v260)(char *, uint64_t, uint64_t);
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t *v268;
  unint64_t v269;
  uint32_t v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  NSObject *v283;
  int v284;
  uint64_t (*v285)(uint64_t, uint64_t, uint64_t);
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _BYTE *v289[2];
  uint64_t v290;
  uint64_t v291;
  _BYTE *v292;
  void *v293;
  _BYTE *v294;
  uint64_t v295;
  uint64_t v296;
  _BYTE *v297;
  void *v298;
  _BYTE *v299;
  uint64_t (*v300)(uint64_t, uint64_t, uint64_t);
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _BYTE *v304[2];
  uint32_t v305;
  Swift::String v306;
  Swift::String v307;
  _BYTE *v308;
  void *v309;
  Swift::String v310;
  unsigned __int8 v311;
  char v312;
  _BYTE *v313;
  char v314;
  _BYTE *v315;
  uint64_t (*v316)(uint64_t, uint64_t, uint64_t);
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  _BYTE *v320[2];
  uint32_t v321;
  _BYTE *v322;
  uint64_t v323;
  uint32_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;

  v250 = a1;
  v329 = 0;
  v328 = 0;
  v249 = 0;
  v314 = 0;
  v312 = 0;
  v311 = 0;
  v306 = (Swift::String)0;
  v295 = 0;
  v296 = 0;
  v290 = 0;
  v291 = 0;
  v259 = type metadata accessor for Logger();
  v258 = *(_QWORD **)(v259 - 8);
  v254 = v258[8];
  v251 = (v254 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = MEMORY[0x24BDAC7A8](v250);
  v252 = (char *)v96 - v251;
  v253 = v251;
  v2 = MEMORY[0x24BDAC7A8](v1);
  v255 = (char *)v96 - v253;
  v256 = (v254 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v96 - v256;
  v257 = (char *)v96 - v256;
  v329 = v3;
  v328 = v5;
  v261 = v5[10];
  v327 = v261;
  v262 = v5[11];
  v326 = v262;
  v263 = v5[12];
  v325 = v263;
  v6 = Logger.payments.unsafeMutableAddressor();
  v260 = (void (*)(char *, uint64_t, uint64_t))v258[2];
  v260(v4, v6, v259);
  v274 = 7;
  v7 = (_QWORD *)swift_allocObject();
  v8 = v262;
  v9 = v263;
  v10 = v264;
  v272 = v7;
  v7[2] = v261;
  v7[3] = v8;
  v7[4] = v9;
  v265 = *(_QWORD *)(v10 + 104);
  v7[5] = v265;
  v283 = Logger.logObject.getter();
  v284 = static os_log_type_t.debug.getter();
  v268 = &v323;
  v323 = 12;
  v266 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v267 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v269 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v270 = v324;
  v271 = 17;
  v277 = swift_allocObject();
  *(_BYTE *)(v277 + 16) = 32;
  v278 = swift_allocObject();
  *(_BYTE *)(v278 + 16) = 8;
  v273 = 32;
  v11 = swift_allocObject();
  v12 = v272;
  v275 = v11;
  *(_QWORD *)(v11 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  *(_QWORD *)(v11 + 24) = v12;
  v13 = swift_allocObject();
  v14 = v275;
  v276 = v13;
  *(_QWORD *)(v13 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v13 + 24) = v14;
  v15 = swift_allocObject();
  v16 = v276;
  v280 = v15;
  *(_QWORD *)(v15 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v15 + 24) = v16;
  v282 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v279 = _allocateUninitializedArray<A>(_:)();
  v281 = v17;
  swift_retain();
  v18 = v277;
  v19 = v281;
  *v281 = partial apply for closure #1 in OSLogArguments.append(_:);
  v19[1] = v18;
  swift_retain();
  v20 = v278;
  v21 = v281;
  v281[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v21[3] = v20;
  swift_retain();
  v22 = v280;
  v23 = v281;
  v281[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v23[5] = v22;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v283, (os_log_type_t)v284))
  {
    v24 = v249;
    v242 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v241 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v243 = createStorage<A>(capacity:type:)(0);
    v244 = createStorage<A>(capacity:type:)(1);
    v245 = v289;
    v289[0] = v242;
    v246 = &v288;
    v288 = v243;
    v247 = &v287;
    v287 = v244;
    serialize(_:at:)(2, v289);
    serialize(_:at:)(1, v245);
    v285 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v286 = v277;
    closure #1 in osLogInternal(_:log:type:)(&v285, (uint64_t)v245, (uint64_t)v246, (uint64_t)v247);
    v248 = v24;
    if (v24)
    {
      __break(1u);
    }
    else
    {
      v285 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v286 = v278;
      closure #1 in osLogInternal(_:log:type:)(&v285, (uint64_t)v289, (uint64_t)&v288, (uint64_t)&v287);
      v239 = 0;
      v285 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v286 = v280;
      closure #1 in osLogInternal(_:log:type:)(&v285, (uint64_t)v289, (uint64_t)&v288, (uint64_t)&v287);
      v238 = 0;
      _os_log_impl(&dword_24701B000, v283, (os_log_type_t)v284, "#ContactDisambiguationStrategy<%s> allHaveSameIdentifier", v242, v270);
      destroyStorage<A>(_:count:)(v243, 0, v241);
      destroyStorage<A>(_:count:)(v244, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v242, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v240 = v238;
    }
  }
  else
  {
    v25 = v249;
    swift_release();
    swift_release();
    swift_release();
    v240 = v25;
  }
  v232 = v240;

  v233 = (void (*)(char *, uint64_t))v258[1];
  v233(v257, v259);
  swift_bridgeObjectRetain();
  v236 = &v322;
  v322 = v250;
  v234 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  v235 = lazy protocol witness table accessor for type [INPerson] and conformance [A]();
  v237 = Collection.isEmpty.getter();
  outlined destroy of [SFCardSection]();
  if ((v237 & 1) != 0)
  {
    v76 = v252;
    v77 = Logger.payments.unsafeMutableAddressor();
    v260(v76, v77, v259);
    v109 = 7;
    v78 = (_QWORD *)swift_allocObject();
    v79 = v262;
    v80 = v263;
    v81 = v265;
    v107 = v78;
    v78[2] = v261;
    v78[3] = v79;
    v78[4] = v80;
    v78[5] = v81;
    v117 = Logger.logObject.getter();
    v118 = static os_log_type_t.debug.getter();
    v320[1] = (_BYTE *)12;
    UnsignedInteger<>.init<A>(_:)();
    v105 = v321;
    v106 = 17;
    v112 = swift_allocObject();
    *(_BYTE *)(v112 + 16) = 32;
    v113 = swift_allocObject();
    *(_BYTE *)(v113 + 16) = 8;
    v108 = 32;
    v82 = swift_allocObject();
    v83 = v107;
    v110 = v82;
    *(_QWORD *)(v82 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
    *(_QWORD *)(v82 + 24) = v83;
    v84 = swift_allocObject();
    v85 = v110;
    v111 = v84;
    *(_QWORD *)(v84 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v84 + 24) = v85;
    v86 = swift_allocObject();
    v87 = v111;
    v115 = v86;
    *(_QWORD *)(v86 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v86 + 24) = v87;
    v114 = _allocateUninitializedArray<A>(_:)();
    v116 = v88;
    swift_retain();
    v89 = v112;
    v90 = v116;
    *v116 = partial apply for closure #1 in OSLogArguments.append(_:);
    v90[1] = v89;
    swift_retain();
    v91 = v113;
    v92 = v116;
    v116[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[3] = v91;
    swift_retain();
    v93 = v115;
    v94 = v116;
    v116[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v94[5] = v93;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v117, (os_log_type_t)v118))
    {
      v95 = v232;
      v98 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v97 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v99 = createStorage<A>(capacity:type:)(0);
      v100 = createStorage<A>(capacity:type:)(1);
      v101 = v320;
      v320[0] = v98;
      v102 = &v319;
      v319 = v99;
      v103 = &v318;
      v318 = v100;
      serialize(_:at:)(2, v320);
      serialize(_:at:)(1, v101);
      v316 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v317 = v112;
      closure #1 in osLogInternal(_:log:type:)(&v316, (uint64_t)v101, (uint64_t)v102, (uint64_t)v103);
      v104 = v95;
      if (v95)
      {
        __break(1u);
      }
      else
      {
        v316 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v317 = v113;
        closure #1 in osLogInternal(_:log:type:)(&v316, (uint64_t)v320, (uint64_t)&v319, (uint64_t)&v318);
        v96[1] = 0;
        v316 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v317 = v115;
        closure #1 in osLogInternal(_:log:type:)(&v316, (uint64_t)v320, (uint64_t)&v319, (uint64_t)&v318);
        _os_log_impl(&dword_24701B000, v117, (os_log_type_t)v118, "#ContactDisambiguationStrategy<%s> allHaveSameIdentifier no recipients provided, returning false", v98, v105);
        destroyStorage<A>(_:count:)(v99, 0, v97);
        destroyStorage<A>(_:count:)(v100, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v98, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    v233(v252, v259);
    v119 = 0;
    return v119 & 1;
  }
  v26 = v232;
  v315 = v250;
  v229 = lazy protocol witness table accessor for type [INPerson] and conformance [A]();
  result = Sequence.allSatisfy(_:)();
  v230 = v26;
  v231 = result;
  if (!v26)
  {
    v226 = v231;
    v314 = v231 & 1;
    v313 = v250;
    v28 = Sequence.allSatisfy(_:)();
    v227 = 0;
    v228 = v28;
    v225 = v28;
    v312 = v28 & 1;
    if ((v226 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      v223 = &v292;
      v292 = v250;
      Collection.first.getter();
      outlined destroy of [SFCardSection]();
      v224 = v293;
      if (v293)
      {
        v222 = v224;
        v220 = v224;
        v221 = objc_msgSend(v224, sel_contactIdentifier);
        if (v221)
        {
          v219 = v221;
          v214 = v221;
          v215 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v216 = v29;

          v217 = v215;
          v218 = v216;
        }
        else
        {
          v217 = 0;
          v218 = 0;
        }
        v211 = v218;
        v210 = v217;

        v212 = v210;
        v213 = v211;
      }
      else
      {
        v212 = 0;
        v213 = 0;
      }
      v208 = v213;
      v209 = v212;
      if (v213)
      {
        v206 = v209;
        v207 = v208;
        v30 = v227;
        v201 = v208;
        v203 = v209;
        v290 = v209;
        v291 = v208;
        v289[1] = v250;
        swift_bridgeObjectRetain();
        v202 = v96;
        MEMORY[0x24BDAC7A8](v96);
        v31 = &v96[-4];
        v31[2] = v203;
        v31[3] = v32;
        result = Sequence.allSatisfy(_:)();
        v204 = v30;
        v205 = result;
        if (!v30)
        {
          v199 = v205;
          swift_bridgeObjectRelease();
          v311 = v199 & 1;
          swift_bridgeObjectRelease();
          v200 = v204;
LABEL_45:
          v42 = v255;
          v133 = v200;
          v43 = Logger.payments.unsafeMutableAddressor();
          v260(v42, v43, v259);
          v143 = 7;
          v44 = (_QWORD *)swift_allocObject();
          v45 = v262;
          v46 = v263;
          v47 = v265;
          v136 = v44;
          v44[2] = v261;
          v44[3] = v45;
          v44[4] = v46;
          v44[5] = v47;
          v134 = v311;
          v139 = 17;
          v140 = swift_allocObject();
          *(_BYTE *)(v140 + 16) = v134 & 1;
          v154 = Logger.logObject.getter();
          v155 = static os_log_type_t.debug.getter();
          v304[1] = (_BYTE *)18;
          UnsignedInteger<>.init<A>(_:)();
          v135 = v305;
          v146 = swift_allocObject();
          *(_BYTE *)(v146 + 16) = 32;
          v147 = swift_allocObject();
          *(_BYTE *)(v147 + 16) = 8;
          v142 = 32;
          v48 = swift_allocObject();
          v49 = v136;
          v137 = v48;
          *(_QWORD *)(v48 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
          *(_QWORD *)(v48 + 24) = v49;
          v50 = swift_allocObject();
          v51 = v137;
          v138 = v50;
          *(_QWORD *)(v50 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
          *(_QWORD *)(v50 + 24) = v51;
          v52 = swift_allocObject();
          v53 = v138;
          v148 = v52;
          *(_QWORD *)(v52 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
          *(_QWORD *)(v52 + 24) = v53;
          v149 = swift_allocObject();
          *(_BYTE *)(v149 + 16) = 0;
          v150 = swift_allocObject();
          *(_BYTE *)(v150 + 16) = 4;
          v54 = swift_allocObject();
          v55 = v140;
          v141 = v54;
          *(_QWORD *)(v54 + 16) = partial apply for implicit closure #6 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:);
          *(_QWORD *)(v54 + 24) = v55;
          v56 = swift_allocObject();
          v57 = v141;
          v144 = v56;
          *(_QWORD *)(v56 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
          *(_QWORD *)(v56 + 24) = v57;
          v58 = swift_allocObject();
          v59 = v144;
          v145 = v58;
          *(_QWORD *)(v58 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
          *(_QWORD *)(v58 + 24) = v59;
          v60 = swift_allocObject();
          v61 = v145;
          v152 = v60;
          *(_QWORD *)(v60 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
          *(_QWORD *)(v60 + 24) = v61;
          v151 = _allocateUninitializedArray<A>(_:)();
          v153 = v62;
          swift_retain();
          v63 = v146;
          v64 = v153;
          *v153 = partial apply for closure #1 in OSLogArguments.append(_:);
          v64[1] = v63;
          swift_retain();
          v65 = v147;
          v66 = v153;
          v153[2] = partial apply for closure #1 in OSLogArguments.append(_:);
          v66[3] = v65;
          swift_retain();
          v67 = v148;
          v68 = v153;
          v153[4] = partial apply for closure #1 in OSLogArguments.append(_:);
          v68[5] = v67;
          swift_retain();
          v69 = v149;
          v70 = v153;
          v153[6] = partial apply for closure #1 in OSLogArguments.append(_:);
          v70[7] = v69;
          swift_retain();
          v71 = v150;
          v72 = v153;
          v153[8] = partial apply for closure #1 in OSLogArguments.append(_:);
          v72[9] = v71;
          swift_retain();
          v73 = v152;
          v74 = v153;
          v153[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
          v74[11] = v73;
          _finalizeUninitializedArray<A>(_:)();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v154, (os_log_type_t)v155))
          {
            v75 = v133;
            v125 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            v124 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
            v126 = createStorage<A>(capacity:type:)(0);
            v127 = createStorage<A>(capacity:type:)(1);
            v129 = v304;
            v304[0] = v125;
            v130 = &v303;
            v303 = v126;
            v131 = &v302;
            v302 = v127;
            v128 = 2;
            serialize(_:at:)(2, v304);
            serialize(_:at:)(v128, v129);
            v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v301 = v146;
            closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)v129, (uint64_t)v130, (uint64_t)v131);
            v132 = v75;
            if (v75)
            {
              __break(1u);
            }
            else
            {
              v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
              v301 = v147;
              closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)v304, (uint64_t)&v303, (uint64_t)&v302);
              v123 = 0;
              v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
              v301 = v148;
              closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)v304, (uint64_t)&v303, (uint64_t)&v302);
              v122 = 0;
              v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
              v301 = v149;
              closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)v304, (uint64_t)&v303, (uint64_t)&v302);
              v121 = 0;
              v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
              v301 = v150;
              closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)v304, (uint64_t)&v303, (uint64_t)&v302);
              v120 = 0;
              v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
              v301 = v152;
              closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)v304, (uint64_t)&v303, (uint64_t)&v302);
              _os_log_impl(&dword_24701B000, v154, (os_log_type_t)v155, "#ContactDisambiguationStrategy<%s> allHaveSameIdentifier %{BOOL}d", v125, v135);
              destroyStorage<A>(_:count:)(v126, 0, v124);
              destroyStorage<A>(_:count:)(v127, 1, MEMORY[0x24BEE4AD8] + 8);
              MEMORY[0x2495725CC](v125, MEMORY[0x24BEE4260]);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
            }
          }
          else
          {
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
          }

          v233(v255, v259);
          v119 = v311;
          return v119 & 1;
        }
        goto LABEL_59;
      }
    }
    if ((v225 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      v197 = &v297;
      v297 = v250;
      Collection.first.getter();
      outlined destroy of [SFCardSection]();
      v198 = v298;
      if (v298)
      {
        v196 = v198;
        v194 = v198;
        v195 = objc_msgSend(v198, sel_customIdentifier);
        if (v195)
        {
          v193 = v195;
          v188 = v195;
          v189 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v190 = v33;

          v191 = v189;
          v192 = v190;
        }
        else
        {
          v191 = 0;
          v192 = 0;
        }
        v185 = v192;
        v184 = v191;

        v186 = v184;
        v187 = v185;
      }
      else
      {
        v186 = 0;
        v187 = 0;
      }
      v182 = v187;
      v183 = v186;
      if (v187)
      {
        v180 = v183;
        v181 = v182;
        v34 = v227;
        v175 = v182;
        v177 = v183;
        v295 = v183;
        v296 = v182;
        v294 = v250;
        swift_bridgeObjectRetain();
        v176 = v96;
        MEMORY[0x24BDAC7A8](v96);
        v35 = &v96[-4];
        v35[2] = v177;
        v35[3] = v36;
        result = Sequence.allSatisfy(_:)();
        v178 = v34;
        v179 = result;
        if (v34)
          goto LABEL_60;
        v173 = v179;
        swift_bridgeObjectRelease();
        v311 = v173 & 1;
        swift_bridgeObjectRelease();
        v174 = v178;
LABEL_44:
        v200 = v174;
        goto LABEL_45;
      }
    }
    swift_bridgeObjectRetain();
    v171 = &v308;
    v308 = v250;
    Collection.first.getter();
    outlined destroy of [SFCardSection]();
    v172 = v309;
    if (v309)
    {
      v170 = v172;
      v166 = v172;
      v167 = objc_msgSend(v172, sel_displayName);
      *(_QWORD *)&v168 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *((_QWORD *)&v168 + 1) = v37;

      v169 = v168;
    }
    else
    {
      v169 = 0uLL;
    }
    v307 = (Swift::String)v169;
    if (*((_QWORD *)&v169 + 1))
    {
      v310 = v307;
    }
    else
    {
      v310 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      outlined destroy of String.UTF8View();
    }
    v164 = v310;
    v306 = v310;
    v165 = String.isEmpty.getter();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((v165 & 1) == 0)
    {
      v38 = v227;
      v299 = v250;
      swift_bridgeObjectRetain();
      v161 = v96;
      MEMORY[0x24BDAC7A8](v96);
      v39 = &v96[-4];
      v39[2] = v164._countAndFlagsBits;
      v39[3] = v40;
      v41 = Sequence.allSatisfy(_:)();
      v162 = v38;
      v163 = v41;
      if (!v38)
      {
        v158 = v163;
        swift_bridgeObjectRelease();
        v159 = v158;
        v160 = v162;
LABEL_42:
        v157 = v160;
        v156 = v159;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v311 = v156 & 1;
        swift_bridgeObjectRelease();
        v174 = v157;
        goto LABEL_44;
      }
      __break(1u);
    }
    v159 = 0;
    v160 = v227;
    goto LABEL_42;
  }
  __break(1u);
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
  return result;
}

uint64_t static ContactDisambiguationStrategy.handleType(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  int v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE **v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint32_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  NSObject *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint8_t *v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE **v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint32_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  NSObject *v135;
  int v136;
  uint64_t v138;
  uint64_t v139;
  uint8_t *v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE **v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  uint32_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  NSObject *v159;
  int v160;
  int v161;
  int v162;
  uint64_t v163;
  int v164;
  void (*v165)(char *, uint64_t);
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint8_t *v174;
  uint64_t v175;
  uint64_t v176;
  _BYTE **v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  char *v184;
  unint64_t v185;
  char *v186;
  unint64_t v187;
  uint64_t v188;
  char *v189;
  unint64_t v190;
  char *v191;
  _QWORD *v192;
  uint64_t v193;
  void (*v194)(char *, uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t *v202;
  unint64_t v203;
  uint32_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  NSObject *v217;
  int v218;
  uint64_t (*v219)(uint64_t, uint64_t, uint64_t);
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _BYTE *v223;
  uint64_t (*v224)(uint64_t, uint64_t, uint64_t);
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _BYTE *v228[2];
  uint32_t v229;
  uint64_t (*v230)(uint64_t, uint64_t, uint64_t);
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _BYTE *v234[2];
  uint32_t v235;
  uint64_t (*v236)(uint64_t, uint64_t, uint64_t);
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _BYTE *v240[2];
  uint32_t v241;
  char v242;
  uint64_t v243;
  char v244;
  uint64_t v245;
  uint64_t v246;
  uint32_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;

  v182 = a1;
  v252 = 0;
  v251 = 0;
  v181 = 0;
  v244 = 0;
  v242 = 0;
  v193 = type metadata accessor for Logger();
  v192 = *(_QWORD **)(v193 - 8);
  v188 = v192[8];
  v183 = (v188 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = MEMORY[0x24BDAC7A8](v182);
  v184 = (char *)&v91 - v183;
  v185 = v183;
  v2 = MEMORY[0x24BDAC7A8](v1);
  v186 = (char *)&v91 - v185;
  v187 = (v188 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v189 = (char *)&v91 - v187;
  v190 = (v188 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v91 - v190;
  v191 = (char *)&v91 - v190;
  v252 = v4;
  v251 = v6;
  v195 = v6[10];
  v250 = v195;
  v196 = v6[11];
  v249 = v196;
  v197 = v6[12];
  v248 = v197;
  v7 = Logger.payments.unsafeMutableAddressor();
  v194 = (void (*)(char *, uint64_t, uint64_t))v192[2];
  v194(v5, v7, v193);
  v208 = 7;
  v8 = (_QWORD *)swift_allocObject();
  v9 = v196;
  v10 = v197;
  v11 = v198;
  v206 = v8;
  v8[2] = v195;
  v8[3] = v9;
  v8[4] = v10;
  v199 = *(_QWORD *)(v11 + 104);
  v8[5] = v199;
  v217 = Logger.logObject.getter();
  v218 = static os_log_type_t.debug.getter();
  v202 = &v246;
  v246 = 12;
  v200 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v201 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v203 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v204 = v247;
  v205 = 17;
  v211 = swift_allocObject();
  *(_BYTE *)(v211 + 16) = 32;
  v212 = swift_allocObject();
  *(_BYTE *)(v212 + 16) = 8;
  v207 = 32;
  v12 = swift_allocObject();
  v13 = v206;
  v209 = v12;
  *(_QWORD *)(v12 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  *(_QWORD *)(v12 + 24) = v13;
  v14 = swift_allocObject();
  v15 = v209;
  v210 = v14;
  *(_QWORD *)(v14 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v14 + 24) = v15;
  v16 = swift_allocObject();
  v17 = v210;
  v214 = v16;
  *(_QWORD *)(v16 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v16 + 24) = v17;
  v216 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v213 = _allocateUninitializedArray<A>(_:)();
  v215 = v18;
  swift_retain();
  v19 = v211;
  v20 = v215;
  *v215 = partial apply for closure #1 in OSLogArguments.append(_:);
  v20[1] = v19;
  swift_retain();
  v21 = v212;
  v22 = v215;
  v215[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v22[3] = v21;
  swift_retain();
  v23 = v214;
  v24 = v215;
  v215[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v24[5] = v23;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v217, (os_log_type_t)v218))
  {
    v25 = v181;
    v174 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v173 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v175 = createStorage<A>(capacity:type:)(0);
    v176 = createStorage<A>(capacity:type:)(1);
    v177 = &v223;
    v223 = v174;
    v178 = &v222;
    v222 = v175;
    v179 = &v221;
    v221 = v176;
    serialize(_:at:)(2, &v223);
    serialize(_:at:)(1, v177);
    v219 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v220 = v211;
    closure #1 in osLogInternal(_:log:type:)(&v219, (uint64_t)v177, (uint64_t)v178, (uint64_t)v179);
    v180 = v25;
    if (v25)
    {
      __break(1u);
    }
    else
    {
      v219 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v220 = v212;
      closure #1 in osLogInternal(_:log:type:)(&v219, (uint64_t)&v223, (uint64_t)&v222, (uint64_t)&v221);
      v171 = 0;
      v27 = v171;
      v219 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v220 = v214;
      closure #1 in osLogInternal(_:log:type:)(&v219, (uint64_t)&v223, (uint64_t)&v222, (uint64_t)&v221);
      v170 = v27;
      _os_log_impl(&dword_24701B000, v217, (os_log_type_t)v218, "#ContactDisambiguationStrategy<%s> handleType(for:)", v174, v204);
      destroyStorage<A>(_:count:)(v175, 0, v173);
      destroyStorage<A>(_:count:)(v176, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v174, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v172 = v170;
    }
  }
  else
  {
    v26 = v181;
    swift_release();
    swift_release();
    swift_release();
    v172 = v26;
  }
  v28 = v172;

  v165 = (void (*)(char *, uint64_t))v192[1];
  v165(v191, v193);
  v245 = v182;
  v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  v167 = lazy protocol witness table accessor for type [INPerson] and conformance [A]();
  result = Sequence.allSatisfy(_:)();
  v168 = v28;
  v169 = result;
  if (v28)
  {
    __break(1u);
    __break(1u);
  }
  else
  {
    v162 = v169;
    v244 = v169 & 1;
    v243 = v182;
    v30 = Sequence.allSatisfy(_:)();
    v163 = 0;
    v164 = v30;
    v161 = v30;
    v242 = v30 & 1;
    if ((v162 & 1) != 0)
    {
      v31 = v189;
      v32 = Logger.payments.unsafeMutableAddressor();
      v194(v31, v32, v193);
      v151 = 7;
      v33 = (_QWORD *)swift_allocObject();
      v34 = v196;
      v35 = v197;
      v36 = v199;
      v149 = v33;
      v33[2] = v195;
      v33[3] = v34;
      v33[4] = v35;
      v33[5] = v36;
      v159 = Logger.logObject.getter();
      v160 = static os_log_type_t.debug.getter();
      v228[1] = (_BYTE *)12;
      UnsignedInteger<>.init<A>(_:)();
      v147 = v229;
      v148 = 17;
      v154 = swift_allocObject();
      *(_BYTE *)(v154 + 16) = 32;
      v155 = swift_allocObject();
      *(_BYTE *)(v155 + 16) = 8;
      v150 = 32;
      v37 = swift_allocObject();
      v38 = v149;
      v152 = v37;
      *(_QWORD *)(v37 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
      *(_QWORD *)(v37 + 24) = v38;
      v39 = swift_allocObject();
      v40 = v152;
      v153 = v39;
      *(_QWORD *)(v39 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v39 + 24) = v40;
      v41 = swift_allocObject();
      v42 = v153;
      v157 = v41;
      *(_QWORD *)(v41 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v41 + 24) = v42;
      v156 = _allocateUninitializedArray<A>(_:)();
      v158 = v43;
      swift_retain();
      v44 = v154;
      v45 = v158;
      *v158 = partial apply for closure #1 in OSLogArguments.append(_:);
      v45[1] = v44;
      swift_retain();
      v46 = v155;
      v47 = v158;
      v158[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v47[3] = v46;
      swift_retain();
      v48 = v157;
      v49 = v158;
      v158[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v49[5] = v48;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v159, (os_log_type_t)v160))
      {
        v50 = v163;
        v140 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v139 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v141 = createStorage<A>(capacity:type:)(0);
        v142 = createStorage<A>(capacity:type:)(1);
        v143 = v228;
        v228[0] = v140;
        v144 = &v227;
        v227 = v141;
        v145 = &v226;
        v226 = v142;
        serialize(_:at:)(2, v228);
        serialize(_:at:)(1, v143);
        v224 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v225 = v154;
        closure #1 in osLogInternal(_:log:type:)(&v224, (uint64_t)v143, (uint64_t)v144, (uint64_t)v145);
        v146 = v50;
        if (v50)
        {
          __break(1u);
        }
        else
        {
          v224 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v225 = v155;
          closure #1 in osLogInternal(_:log:type:)(&v224, (uint64_t)v228, (uint64_t)&v227, (uint64_t)&v226);
          v138 = 0;
          v224 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v225 = v157;
          closure #1 in osLogInternal(_:log:type:)(&v224, (uint64_t)v228, (uint64_t)&v227, (uint64_t)&v226);
          _os_log_impl(&dword_24701B000, v159, (os_log_type_t)v160, "#ContactDisambiguationStrategy<%s> handleType(for:) found .allEmail", v140, v147);
          destroyStorage<A>(_:count:)(v141, 0, v139);
          destroyStorage<A>(_:count:)(v142, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v140, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      v165(v189, v193);
      return 1;
    }
    else if ((v161 & 1) != 0)
    {
      v51 = v186;
      v52 = Logger.payments.unsafeMutableAddressor();
      v194(v51, v52, v193);
      v127 = 7;
      v53 = (_QWORD *)swift_allocObject();
      v54 = v196;
      v55 = v197;
      v56 = v199;
      v125 = v53;
      v53[2] = v195;
      v53[3] = v54;
      v53[4] = v55;
      v53[5] = v56;
      v135 = Logger.logObject.getter();
      v136 = static os_log_type_t.debug.getter();
      v234[1] = (_BYTE *)12;
      UnsignedInteger<>.init<A>(_:)();
      v123 = v235;
      v124 = 17;
      v130 = swift_allocObject();
      *(_BYTE *)(v130 + 16) = 32;
      v131 = swift_allocObject();
      *(_BYTE *)(v131 + 16) = 8;
      v126 = 32;
      v57 = swift_allocObject();
      v58 = v125;
      v128 = v57;
      *(_QWORD *)(v57 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
      *(_QWORD *)(v57 + 24) = v58;
      v59 = swift_allocObject();
      v60 = v128;
      v129 = v59;
      *(_QWORD *)(v59 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v59 + 24) = v60;
      v61 = swift_allocObject();
      v62 = v129;
      v133 = v61;
      *(_QWORD *)(v61 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v61 + 24) = v62;
      v132 = _allocateUninitializedArray<A>(_:)();
      v134 = v63;
      swift_retain();
      v64 = v130;
      v65 = v134;
      *v134 = partial apply for closure #1 in OSLogArguments.append(_:);
      v65[1] = v64;
      swift_retain();
      v66 = v131;
      v67 = v134;
      v134[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v67[3] = v66;
      swift_retain();
      v68 = v133;
      v69 = v134;
      v134[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v69[5] = v68;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v135, (os_log_type_t)v136))
      {
        v70 = v163;
        v116 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v115 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v117 = createStorage<A>(capacity:type:)(0);
        v118 = createStorage<A>(capacity:type:)(1);
        v119 = v234;
        v234[0] = v116;
        v120 = &v233;
        v233 = v117;
        v121 = &v232;
        v232 = v118;
        serialize(_:at:)(2, v234);
        serialize(_:at:)(1, v119);
        v230 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v231 = v130;
        closure #1 in osLogInternal(_:log:type:)(&v230, (uint64_t)v119, (uint64_t)v120, (uint64_t)v121);
        v122 = v70;
        if (v70)
        {
          __break(1u);
        }
        else
        {
          v230 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v231 = v131;
          closure #1 in osLogInternal(_:log:type:)(&v230, (uint64_t)v234, (uint64_t)&v233, (uint64_t)&v232);
          v114 = 0;
          v230 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v231 = v133;
          closure #1 in osLogInternal(_:log:type:)(&v230, (uint64_t)v234, (uint64_t)&v233, (uint64_t)&v232);
          _os_log_impl(&dword_24701B000, v135, (os_log_type_t)v136, "#ContactDisambiguationStrategy<%s> handleType(for:) found .allPhone", v116, v123);
          destroyStorage<A>(_:count:)(v117, 0, v115);
          destroyStorage<A>(_:count:)(v118, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v116, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      v165(v186, v193);
      return 0;
    }
    else
    {
      v71 = v184;
      v72 = Logger.payments.unsafeMutableAddressor();
      v194(v71, v72, v193);
      v104 = 7;
      v73 = (_QWORD *)swift_allocObject();
      v74 = v196;
      v75 = v197;
      v76 = v199;
      v102 = v73;
      v73[2] = v195;
      v73[3] = v74;
      v73[4] = v75;
      v73[5] = v76;
      v112 = Logger.logObject.getter();
      v113 = static os_log_type_t.debug.getter();
      v240[1] = (_BYTE *)12;
      UnsignedInteger<>.init<A>(_:)();
      v100 = v241;
      v101 = 17;
      v107 = swift_allocObject();
      *(_BYTE *)(v107 + 16) = 32;
      v108 = swift_allocObject();
      *(_BYTE *)(v108 + 16) = 8;
      v103 = 32;
      v77 = swift_allocObject();
      v78 = v102;
      v105 = v77;
      *(_QWORD *)(v77 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
      *(_QWORD *)(v77 + 24) = v78;
      v79 = swift_allocObject();
      v80 = v105;
      v106 = v79;
      *(_QWORD *)(v79 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v79 + 24) = v80;
      v81 = swift_allocObject();
      v82 = v106;
      v110 = v81;
      *(_QWORD *)(v81 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v81 + 24) = v82;
      v109 = _allocateUninitializedArray<A>(_:)();
      v111 = v83;
      swift_retain();
      v84 = v107;
      v85 = v111;
      *v111 = partial apply for closure #1 in OSLogArguments.append(_:);
      v85[1] = v84;
      swift_retain();
      v86 = v108;
      v87 = v111;
      v111[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v87[3] = v86;
      swift_retain();
      v88 = v110;
      v89 = v111;
      v111[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v89[5] = v88;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v112, (os_log_type_t)v113))
      {
        v90 = v163;
        v93 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v92 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v94 = createStorage<A>(capacity:type:)(0);
        v95 = createStorage<A>(capacity:type:)(1);
        v96 = v240;
        v240[0] = v93;
        v97 = &v239;
        v239 = v94;
        v98 = &v238;
        v238 = v95;
        serialize(_:at:)(2, v240);
        serialize(_:at:)(1, v96);
        v236 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v237 = v107;
        closure #1 in osLogInternal(_:log:type:)(&v236, (uint64_t)v96, (uint64_t)v97, (uint64_t)v98);
        v99 = v90;
        if (v90)
        {
          __break(1u);
        }
        else
        {
          v236 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v237 = v108;
          closure #1 in osLogInternal(_:log:type:)(&v236, (uint64_t)v240, (uint64_t)&v239, (uint64_t)&v238);
          v91 = 0;
          v236 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v237 = v110;
          closure #1 in osLogInternal(_:log:type:)(&v236, (uint64_t)v240, (uint64_t)&v239, (uint64_t)&v238);
          _os_log_impl(&dword_24701B000, v112, (os_log_type_t)v113, "#ContactDisambiguationStrategy<%s> handleType(for:) found .phoneAndEmail", v93, v100);
          destroyStorage<A>(_:count:)(v94, 0, v92);
          destroyStorage<A>(_:count:)(v95, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v93, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      v165(v184, v193);
      return 2;
    }
  }
  return result;
}

uint64_t closure #1 in ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v15 = a1;
  v9 = a2;
  v20 = 0;
  v19 = 0;
  v8 = 0;
  v17 = type metadata accessor for ResponseType();
  v16 = *(_QWORD *)(v17 - 8);
  v6 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v17);
  v18 = (char *)&v6 - v6;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v7 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v14 = (char *)&v6 - v7;
  v20 = a1;
  v19 = v4;
  v12 = 1;
  v11 = 0;
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  v13 = type metadata accessor for NLContextUpdate();
  v10 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v14, v9);
  (*(void (**)(char *, _QWORD, _QWORD, uint64_t))(v10 + 56))(v14, v11, v12, v13);
  OutputGenerationManifest.nlContextUpdate.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x24BE97960], v17);
  return OutputGenerationManifest.responseType.setter();
}

uint64_t default argument 1 of ContactResolutionSnippetGenerator.init(appBundleId:globals:deviceState:)()
{
  type metadata accessor for CATGlobals();
  return CATGlobals.__allocating_init()();
}

uint64_t ContactDisambiguationStrategy.disambiguationPromptDialog(person:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t ContactDisambiguationStrategy.disambiguationPromptDialog(person:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = v0;
  lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
  swift_allocError();
  *(_QWORD *)v1 = 11;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 48) = 17;
  swift_willThrow();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

uint64_t closure #1 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(id *a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v6 = objc_msgSend(*a1, sel_contactIdentifier);
  if (v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v4 = v1;

    v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  if (!v5)
  {
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of String.UTF8View();
  }
  v3 = String.isEmpty.getter();
  swift_bridgeObjectRelease();
  return (v3 ^ 1) & 1;
}

uint64_t closure #2 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(id *a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v6 = objc_msgSend(*a1, sel_customIdentifier);
  if (v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v4 = v1;

    v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  if (!v5)
  {
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of String.UTF8View();
  }
  v3 = String.isEmpty.getter();
  swift_bridgeObjectRelease();
  return (v3 ^ 1) & 1;
}

uint64_t closure #3 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;

  v19 = 0;
  v17 = 0;
  v18 = 0;
  v19 = *a1;
  v17 = a2;
  v18 = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = objc_msgSend(v19, sel_contactIdentifier);
  if (v13)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v3;

    v9 = v7;
    v10 = v8;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  swift_bridgeObjectRetain();
  v15[0] = a2;
  v15[1] = a3;
  v15[2] = v9;
  v16 = v10;
  if (!a3)
  {
    if (!v16)
    {
      outlined destroy of String.UTF8View();
      v6 = 1;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  outlined init with copy of String(v15, &v14);
  if (!v16)
  {
    outlined destroy of String.UTF8View();
LABEL_11:
    outlined destroy of DIIdentifier();
    v6 = 0;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();
  v6 = v5;
LABEL_10:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t closure #4 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;

  v19 = 0;
  v17 = 0;
  v18 = 0;
  v19 = *a1;
  v17 = a2;
  v18 = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = objc_msgSend(v19, sel_customIdentifier);
  if (v13)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v3;

    v9 = v7;
    v10 = v8;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  swift_bridgeObjectRetain();
  v15[0] = a2;
  v15[1] = a3;
  v15[2] = v9;
  v16 = v10;
  if (!a3)
  {
    if (!v16)
    {
      outlined destroy of String.UTF8View();
      v6 = 1;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  outlined init with copy of String(v15, &v14);
  if (!v16)
  {
    outlined destroy of String.UTF8View();
LABEL_11:
    outlined destroy of DIIdentifier();
    v6 = 0;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();
  v6 = v5;
LABEL_10:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t closure #5 in implicit closure #4 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(id *a1)
{
  id v2;
  char v3;

  v2 = objc_msgSend(*a1, sel_displayName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();

  return v3 & 1;
}

uint64_t implicit closure #6 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(char a1)
{
  return a1 & 1;
}

uint64_t closure #1 in static ContactDisambiguationStrategy.handleType(for:)(id *a1)
{
  id v1;
  id v2;
  id v3;
  char v5;
  char v6;
  id v7;
  id v8;
  id v9;
  char v10;
  char v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  char v18;
  id v19;
  id v20;

  v20 = 0;
  v20 = *a1;
  v12 = v20;
  v13 = INPerson.hasHandleLabel.getter();
  v1 = v20;
  if ((v13 & 1) != 0)
    v11 = 1;
  else
    v11 = INPerson.hasHandleValue.getter();

  v2 = v20;
  if ((v11 & 1) != 0)
  {
    v19 = objc_msgSend(v20, sel_personHandle);
    if (v19)
    {
      v7 = v19;
      v3 = v19;
      outlined destroy of SFRichText?(&v19);
      v8 = objc_msgSend(v7, sel_type);

      v9 = v8;
      v10 = 0;
    }
    else
    {
      outlined destroy of SFRichText?(&v19);
      v9 = 0;
      v10 = 1;
    }
    v15 = v9;
    v16 = v10 & 1;
    v17 = 1;
    v18 = 0;
    if ((v10 & 1) != 0 || (outlined init with copy of Int?((uint64_t)&v15, (uint64_t)&v14), (v18 & 1) != 0))
    {
      v6 = 0;
    }
    else
    {
      type metadata accessor for INPersonHandleType();
      lazy protocol witness table accessor for type INPersonHandleType and conformance INPersonHandleType();
      v6 = dispatch thunk of static Equatable.== infix(_:_:)();
    }
    v5 = v6;
  }
  else
  {
    v5 = 0;
  }

  return v5 & 1;
}

uint64_t closure #2 in static ContactDisambiguationStrategy.handleType(for:)(id *a1)
{
  id v1;
  id v2;
  id v3;
  char v5;
  char v6;
  id v7;
  id v8;
  id v9;
  char v10;
  char v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  char v18;
  id v19;
  id v20;

  v20 = 0;
  v20 = *a1;
  v12 = v20;
  v13 = INPerson.hasHandleLabel.getter();
  v1 = v20;
  if ((v13 & 1) != 0)
    v11 = 1;
  else
    v11 = INPerson.hasHandleValue.getter();

  v2 = v20;
  if ((v11 & 1) != 0)
  {
    v19 = objc_msgSend(v20, sel_personHandle);
    if (v19)
    {
      v7 = v19;
      v3 = v19;
      outlined destroy of SFRichText?(&v19);
      v8 = objc_msgSend(v7, sel_type);

      v9 = v8;
      v10 = 0;
    }
    else
    {
      outlined destroy of SFRichText?(&v19);
      v9 = 0;
      v10 = 1;
    }
    v15 = v9;
    v16 = v10 & 1;
    v17 = 2;
    v18 = 0;
    if ((v10 & 1) != 0 || (outlined init with copy of Int?((uint64_t)&v15, (uint64_t)&v14), (v18 & 1) != 0))
    {
      v6 = 0;
    }
    else
    {
      type metadata accessor for INPersonHandleType();
      lazy protocol witness table accessor for type INPersonHandleType and conformance INPersonHandleType();
      v6 = dispatch thunk of static Equatable.== infix(_:_:)();
    }
    v5 = v6;
  }
  else
  {
    v5 = 0;
  }

  return v5 & 1;
}

uint64_t ContactDisambiguationStrategy.deinit()
{
  uint64_t v0;
  uint64_t v2;

  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  outlined destroy of SFRichText?((id *)(v0 + 64));
  __swift_destroy_boxed_opaque_existential_0(v0 + 72);
  return v2;
}

uint64_t ContactDisambiguationStrategy.__deallocating_deinit()
{
  ContactDisambiguationStrategy.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ContactDisambiguationStrategyProviding.catFamily.getter in conformance ContactDisambiguationStrategy<A, B, C>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ContactDisambiguationStrategy.catFamily.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.authenticationPolicy.getter in conformance ContactDisambiguationStrategy<A1, B1, C1>()
{
  return NeedsDisambiguationFlowStrategyAsync.authenticationPolicy.getter();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.paginationStyle(resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v10[4];

  v3 = a2[11];
  v4 = a2[12];
  v5 = a2[13];
  v10[0] = a2[10];
  v10[1] = v3;
  v10[2] = v4;
  v10[3] = v5;
  v6 = type metadata accessor for ContactDisambiguationStrategy(0, (uint64_t)v10);
  return MEMORY[0x2495708C8](a1, v6, a3);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ContactDisambiguationStrategy.actionForInput(_:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2[3] = a1;
  v2[2] = v2;
  v3 = (_QWORD *)swift_task_alloc();
  v2[4] = v3;
  *v3 = v2[2];
  v3[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return ContactDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)(a2);
}

_QWORD *protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v6 = v3 + 16;
  v7 = (_QWORD *)(v3 + 16);
  swift_task_dealloc();
  if (!v1)
    **(_QWORD **)(v6 + 8) = a1;
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v7 + 8))(v7);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 16) = v4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(a1, a2, a3, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v11;

  v11 = v4;
  v4[6] = v4;
  v5 = (_QWORD *)swift_task_alloc();
  v11[7] = v5;
  v6 = a4[11];
  v7 = a4[12];
  v8 = a4[13];
  v11[2] = a4[10];
  v11[3] = v6;
  v11[4] = v7;
  v11[5] = v8;
  type metadata accessor for ContactDisambiguationStrategy(0, (uint64_t)(v11 + 2));
  *v5 = v11[6];
  v5[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:)();
}

_QWORD *protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 48) = *v0;
  v3 = (_QWORD *)(v1 + 48);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v11;

  v11 = v4;
  v4[6] = v4;
  v5 = (_QWORD *)swift_task_alloc();
  v11[7] = v5;
  v6 = a4[11];
  v7 = a4[12];
  v8 = a4[13];
  v11[2] = a4[10];
  v11[3] = v6;
  v11[4] = v7;
  v11[5] = v8;
  type metadata accessor for ContactDisambiguationStrategy(0, (uint64_t)(v11 + 2));
  *v5 = v11[6];
  v5[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:)();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v10;

  v10 = v3;
  v3[6] = v3;
  v4 = (_QWORD *)swift_task_alloc();
  v10[7] = v4;
  v5 = a3[11];
  v6 = a3[12];
  v7 = a3[13];
  v10[2] = a3[10];
  v10[3] = v5;
  v10[4] = v6;
  v10[5] = v7;
  type metadata accessor for ContactDisambiguationStrategy(0, (uint64_t)(v10 + 2));
  *v4 = v10[6];
  v4[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v10;

  v10 = v3;
  v3[6] = v3;
  v4 = (_QWORD *)swift_task_alloc();
  v10[7] = v4;
  v5 = a3[11];
  v6 = a3[12];
  v7 = a3[13];
  v10[2] = a3[10];
  v10[3] = v5;
  v10[4] = v6;
  v10[5] = v7;
  type metadata accessor for ContactDisambiguationStrategy(0, (uint64_t)(v10 + 2));
  *v4 = v10[6];
  v4[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];

  v2 = a2[11];
  v3 = a2[12];
  v4 = a2[13];
  v6[0] = a2[10];
  v6[1] = v2;
  v6[2] = v3;
  v6[3] = v4;
  type metadata accessor for ContactDisambiguationStrategy(0, (uint64_t)v6);
  return NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:)();
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v12;

  v12 = v5;
  v5[6] = v5;
  v6 = (_QWORD *)swift_task_alloc();
  v12[7] = v6;
  v7 = a5[11];
  v8 = a5[12];
  v9 = a5[13];
  v12[2] = a5[10];
  v12[3] = v7;
  v12[4] = v8;
  v12[5] = v9;
  type metadata accessor for ContactDisambiguationStrategy(0, (uint64_t)(v12 + 2));
  *v6 = v12[6];
  v6[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)();
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v13;

  v13 = v6;
  v6[6] = v6;
  v7 = (_QWORD *)swift_task_alloc();
  v13[7] = v7;
  v8 = a6[11];
  v9 = a6[12];
  v10 = a6[13];
  v13[2] = a6[10];
  v13[3] = v8;
  v13[4] = v9;
  v13[5] = v10;
  type metadata accessor for ContactDisambiguationStrategy(0, (uint64_t)(v13 + 2));
  *v7 = v13[6];
  v7[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)();
}

unint64_t implicit closure #1 in PayeeDisambiguationStrategy.init()()
{
  return type metadata accessor for INSendPaymentIntent();
}

uint64_t PayeeDisambiguationStrategy.disambiguationPromptDialog(person:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[22] = v2;
  v3[21] = a2;
  v3[20] = a1;
  v3[14] = v3;
  v3[15] = 0;
  v3[16] = 0;
  v3[17] = 0;
  v3[18] = 0;
  v3[19] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[23] = swift_task_alloc();
  type metadata accessor for Locale();
  v3[24] = swift_task_alloc();
  v3[15] = a2;
  v3[16] = v2;
  return swift_task_switch();
}

uint64_t PayeeDisambiguationStrategy.disambiguationPromptDialog(person:)()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  *(_QWORD *)(v0 + 112) = v0;
  swift_retain();
  swift_retain();
  swift_release();
  type metadata accessor for SendPaymentCATs();
  v28 = swift_dynamicCastClass();
  if (v28)
  {
    v26 = v28;
  }
  else
  {
    swift_release();
    v26 = 0;
  }
  v27[25] = v26;
  if (v26)
  {
    v25 = (void *)v27[21];
    v27[17] = v26;
    v1 = v25;
    if (v25)
    {
      v22 = (void *)v27[21];
      v23 = v27[23];
      v19 = v27[22];
      v27[18] = v22;
      type metadata accessor for DialogPerson();
      v2 = v22;
      swift_retain();
      outlined init with copy of GlobalsProviding(v19 + 24, (uint64_t)(v27 + 2));
      swift_release();
      v21 = v27[5];
      v20 = v27[6];
      __swift_project_boxed_opaque_existential_1(v27 + 2, v21);
      (*(void (**)(uint64_t))(v20 + 16))(v21);
      __swift_project_boxed_opaque_existential_1(v27 + 7, v27[10]);
      dispatch thunk of DeviceState.siriLocale.getter();
      v24 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
      v27[26] = v24;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v27 + 7));
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v27 + 2));
      v27[19] = v24;
      SendPaymentSlots.rawValue.getter(0);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v3 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v23, 0, 1);
      swift_retain();
      v4 = (_QWORD *)swift_task_alloc();
      v27[27] = v4;
      *v4 = v27[14];
      v4[1] = PayeeDisambiguationStrategy.disambiguationPromptDialog(person:);
      return SendPaymentCATs.disambiguateSlotValue(slot:payee:)(v27[20], v27[23], v24);
    }
    v15 = SendPaymentSlots.rawValue.getter(0);
    v16 = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nil", 3uLL, 1);
    v27[12] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v27[13] = v8;
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    type metadata accessor for INSendPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v18 = String.init(stringInterpolation:)();
    v17 = v11;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v12 = v15;
    *(_QWORD *)(v12 + 8) = v16;
    *(Swift::String *)(v12 + 16) = v7;
    *(_QWORD *)(v12 + 32) = v18;
    *(_QWORD *)(v12 + 40) = v17;
    *(_BYTE *)(v12 + 48) = 9;
    swift_willThrow();
    swift_release();
  }
  else
  {
    v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#DisambiguateSlotValue", 0x21uLL, 1);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(Swift::String *)v14 = v13;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = 0;
    *(_BYTE *)(v14 + 48) = 6;
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v27[14] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(v2 + 112) = *v1;
  v2 += 112;
  v5 = v2 - 96;
  *(_QWORD *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 168);
    swift_release();
    outlined destroy of SpeakableString?(v4);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  id v2;

  v2 = *(id *)(v0 + 168);
  *(_QWORD *)(v0 + 112) = v0;
  swift_release();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 112) + 8))();
}

{
  _QWORD *v0;
  uint64_t v2;
  id v3;

  v2 = v0[23];
  v3 = (id)v0[21];
  v0[14] = v0;
  swift_release();
  outlined destroy of SpeakableString?(v2);
  swift_release();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[14] + 8))();
}

_QWORD *PayeeDisambiguationStrategy.__allocating_init(catFamily:globals:mockGlobals:contactResolver:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  swift_allocObject();
  return PayeeDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:)(a1, a2, a3, a4);
}

_QWORD *PayeeDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v4;
  _QWORD *v10;
  _BYTE v11[40];
  _BYTE v12[40];
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v17 = 0;
  v16 = a1;
  v15 = a2;
  v14 = a3;
  v13 = a4;
  swift_retain();
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v12);
  v4 = a3;
  outlined init with copy of GlobalsProviding(a4, (uint64_t)v11);
  v10 = ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:)(a1, (uint64_t)v12, a3, (uint64_t)v11);
  swift_retain();
  v17 = v10;
  __swift_destroy_boxed_opaque_existential_0(a4);

  __swift_destroy_boxed_opaque_existential_0(a2);
  swift_release();
  swift_release();
  return v10;
}

uint64_t PayeeDisambiguationStrategy.deinit()
{
  return ContactDisambiguationStrategy.deinit();
}

uint64_t PayeeDisambiguationStrategy.__deallocating_deinit()
{
  PayeeDisambiguationStrategy.deinit();
  return swift_deallocClassInstance();
}

unint64_t implicit closure #1 in PayerDisambiguationStrategy.init()()
{
  return type metadata accessor for INRequestPaymentIntent();
}

uint64_t PayerDisambiguationStrategy.disambiguationPromptDialog(person:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[22] = v2;
  v3[21] = a2;
  v3[20] = a1;
  v3[14] = v3;
  v3[15] = 0;
  v3[16] = 0;
  v3[17] = 0;
  v3[18] = 0;
  v3[19] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[23] = swift_task_alloc();
  type metadata accessor for Locale();
  v3[24] = swift_task_alloc();
  v3[15] = a2;
  v3[16] = v2;
  return swift_task_switch();
}

uint64_t PayerDisambiguationStrategy.disambiguationPromptDialog(person:)()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  *(_QWORD *)(v0 + 112) = v0;
  swift_retain();
  swift_retain();
  swift_release();
  type metadata accessor for RequestPaymentCATs();
  v28 = swift_dynamicCastClass();
  if (v28)
  {
    v26 = v28;
  }
  else
  {
    swift_release();
    v26 = 0;
  }
  v27[25] = v26;
  if (v26)
  {
    v25 = (void *)v27[21];
    v27[17] = v26;
    v1 = v25;
    if (v25)
    {
      v22 = (void *)v27[21];
      v24 = v27[23];
      v19 = v27[22];
      v27[18] = v22;
      type metadata accessor for DialogPerson();
      v2 = v22;
      swift_retain();
      outlined init with copy of GlobalsProviding(v19 + 24, (uint64_t)(v27 + 2));
      swift_release();
      v21 = v27[5];
      v20 = v27[6];
      __swift_project_boxed_opaque_existential_1(v27 + 2, v21);
      (*(void (**)(uint64_t))(v20 + 16))(v21);
      __swift_project_boxed_opaque_existential_1(v27 + 7, v27[10]);
      dispatch thunk of DeviceState.siriLocale.getter();
      v23 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
      v27[26] = v23;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v27 + 7));
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v27 + 2));
      v27[19] = v23;
      RequestPaymentSlots.rawValue.getter(0);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v3 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v24, 0, 1);
      v4 = (_QWORD *)swift_task_alloc();
      v27[27] = v4;
      *v4 = v27[14];
      v4[1] = PayerDisambiguationStrategy.disambiguationPromptDialog(person:);
      return RequestPaymentCATs.disambiguateSlotValue(slot:)(v27[20], v27[23]);
    }
    v15 = RequestPaymentSlots.rawValue.getter(0);
    v16 = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nil", 3uLL, 1);
    v27[12] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v27[13] = v8;
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    type metadata accessor for INRequestPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v18 = String.init(stringInterpolation:)();
    v17 = v11;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(_QWORD *)v12 = v15;
    *(_QWORD *)(v12 + 8) = v16;
    *(Swift::String *)(v12 + 16) = v7;
    *(_QWORD *)(v12 + 32) = v18;
    *(_QWORD *)(v12 + 40) = v17;
    *(_BYTE *)(v12 + 48) = 9;
    swift_willThrow();
    swift_release();
  }
  else
  {
    v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#DisambiguateSlotValue", 0x24uLL, 1);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(Swift::String *)v14 = v13;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = 0;
    *(_BYTE *)(v14 + 48) = 6;
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v27[14] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 112) = *v1;
  v2 += 112;
  v4 = v2 - 96;
  *(_QWORD *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of SpeakableString?(*(_QWORD *)(v4 + 168));
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;

  v1 = v0[23];
  v3 = (id)v0[21];
  v0[14] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[14] + 8))();
}

id @nonobjc INPerson.init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v9;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  Class isa;
  Class v19;
  void *v27;
  uint64_t v29;
  uint64_t v30;

  v29 = type metadata accessor for PersonNameComponents();
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v30 + 48))(a2, 1) == 1)
  {
    v19 = 0;
  }
  else
  {
    isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(a2, v29);
    v19 = isa;
  }
  if (a4)
  {
    v16 = MEMORY[0x24957220C](a3);
    swift_bridgeObjectRelease();
    v17 = (void *)v16;
  }
  else
  {
    v17 = 0;
  }
  if (a7)
  {
    v14 = MEMORY[0x24957220C](a6);
    swift_bridgeObjectRelease();
    v15 = (void *)v14;
  }
  else
  {
    v15 = 0;
  }
  if (a9)
  {
    v13 = MEMORY[0x24957220C](a8);
    swift_bridgeObjectRelease();
    v9 = objc_msgSend(v27, sel_initWithPersonHandle_nameComponents_displayName_image_contactIdentifier_customIdentifier_, a1, v19, v17, a5, v15, v13);
  }
  else
  {
    v9 = objc_msgSend(v27, sel_initWithPersonHandle_nameComponents_displayName_image_contactIdentifier_customIdentifier_, a1, v19, v17, a5, v15, 0);
  }
  v12 = v9;

  return v12;
}

uint64_t sub_2470CB5A8()
{
  return swift_deallocObject();
}

uint64_t sub_2470CB5D0()
{
  return swift_deallocObject();
}

uint64_t closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v15 = a1;
  v18 = a6;
  v13[1] = a7;
  v22 = a6;
  v16 = *(_QWORD *)(a6 - 8);
  v13[0] = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](a1);
  v17 = (uint64_t)v13 - v13[0];
  v8(v7);
  v14 = dispatch thunk of static FixedWidthInteger.bitWidth.getter() >> 3;
  v20 = *v15;
  v21 = v20 + v14;
  _ss27_withUnprotectedUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v17, partial apply for closure #1 in serialize<A>(_:at:), (uint64_t)v19, v18, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v13[2]);
  v9 = v16;
  v10 = v17;
  v11 = v18;
  *v15 += v14;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

uint64_t closure #1 in serialize<A>(_:at:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t _ss27_withUnprotectedUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(void);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v17 = a2;
  v13 = a5;
  v14 = a8;
  v23 = a4;
  v22 = a5;
  v21 = a6;
  v15 = *(_QWORD *)(a5 - 8);
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = MEMORY[0x24BDAC7A8]();
  v18 = (char *)&v12 - v16;
  v20 = v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  result = v17();
  v19 = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v14, v18, v13);
  return result;
}

uint64_t sub_2470CB81C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CB858()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CB894()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CB8D0()
{
  return swift_deallocObject();
}

uint64_t sub_2470CB8F8()
{
  return swift_deallocObject();
}

uint64_t sub_2470CB920()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CB95C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CB998()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CB9D4()
{
  return swift_deallocObject();
}

NSJSONWritingOptions partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:)()
{
  uint64_t v0;

  return NSJSONWritingOptions.init(rawValue:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2470CBA44()
{
  return swift_deallocObject();
}

uint64_t sub_2470CBA6C()
{
  return swift_deallocObject();
}

uint64_t sub_2470CBA94()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CBAD0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CBB0C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CBB48()
{
  return swift_deallocObject();
}

uint64_t sub_2470CBB90()
{
  return swift_deallocObject();
}

uint64_t sub_2470CBBB8()
{
  return swift_deallocObject();
}

uint64_t sub_2470CBBE0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CBC1C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CBC58()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CBC94()
{
  return swift_deallocObject();
}

uint64_t sub_2470CBCDC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for ParameterResolutionRecord() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in ContactDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)()
{
  type metadata accessor for ParameterResolutionRecord();
  return implicit closure #2 in ContactDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)();
}

uint64_t sub_2470CBDD8()
{
  return swift_deallocObject();
}

uint64_t sub_2470CBE00()
{
  return swift_deallocObject();
}

uint64_t sub_2470CBE28()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CBE64()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CBEA0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CBEDC()
{
  return swift_deallocObject();
}

uint64_t sub_2470CBF04()
{
  return swift_deallocObject();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_2470CBF60()
{
  swift_release();
  return swift_deallocObject();
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  _QWORD *v4;
  id v7;
  uint64_t v8;

  v7 = (id)a4();
  v8 = *a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v8 + 8;
  v4 = *a2;
  if (*a2)
  {
    *v4 = v7;
    *a2 = v4 + 1;
  }
  else
  {

  }
}

uint64_t sub_2470CC0D8()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in OSLogArguments.append(_:)(uint64_t *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_2470CC120()
{
  return swift_deallocObject();
}

uint64_t sub_2470CC168()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2470CC1A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_2()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  v1 = lazy protocol witness table accessor for type [INPerson] and conformance [A]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type [INPerson] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [INPerson] and conformance [A];
  if (!lazy protocol witness table cache variable for type [INPerson] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [INPerson]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12F8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [INPerson] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [INPerson] and conformance [A];
  if (!lazy protocol witness table cache variable for type [INPerson] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [INPerson]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [INPerson] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [INPerson] and conformance [A];
  if (!lazy protocol witness table cache variable for type [INPerson] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [INPerson]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [INPerson] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [INPerson] and conformance [A];
  if (!lazy protocol witness table cache variable for type [INPerson] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [INPerson]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12F0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [INPerson] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t sub_2470CC29C()
{
  return swift_deallocObject();
}

uint64_t sub_2470CC2C4()
{
  return swift_deallocObject();
}

uint64_t sub_2470CC2EC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CC328()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CC364()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CC3A0()
{
  return swift_deallocObject();
}

uint64_t sub_2470CC3C8()
{
  return swift_deallocObject();
}

uint64_t sub_2470CC3F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CC42C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CC4D8()
{
  return swift_deallocObject();
}

uint64_t sub_2470CC520()
{
  return swift_deallocObject();
}

uint64_t sub_2470CC548()
{
  return swift_deallocObject();
}

uint64_t sub_2470CC570()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CC5AC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CC5E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CC624()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #8 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  return implicit closure #8 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)();
}

uint64_t sub_2470CC668()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #9 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>)
                                      - 8)
                          + 80);
  return implicit closure #9 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_2470CC710()
{
  return swift_deallocObject();
}

uint64_t sub_2470CC738()
{
  return swift_deallocObject();
}

uint64_t sub_2470CC760()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CC79C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CC7D8()
{
  return swift_deallocObject();
}

uint64_t sub_2470CC800()
{
  return swift_deallocObject();
}

uint64_t sub_2470CC828()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CC864()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(a1, *(_QWORD **)(v1 + 16)) & 1;
}

uint64_t sub_2470CC8C8()
{
  return swift_deallocObject();
}

uint64_t sub_2470CC910()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #16 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  return specialized implicit closure #16 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)();
}

uint64_t sub_2470CC948()
{
  return swift_deallocObject();
}

uint64_t sub_2470CC970()
{
  return swift_deallocObject();
}

uint64_t sub_2470CC998()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CC9D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CCA10()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CCA4C()
{
  return swift_deallocObject();
}

uint64_t sub_2470CCA74()
{
  return swift_deallocObject();
}

uint64_t sub_2470CCA9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CCAD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CCB14()
{
  return swift_deallocObject();
}

uint64_t sub_2470CCB3C()
{
  return swift_deallocObject();
}

uint64_t sub_2470CCB64()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CCBA0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CCC4C()
{
  return swift_deallocObject();
}

uint64_t sub_2470CCC94()
{
  return swift_deallocObject();
}

NSJSONWritingOptions partial apply for implicit closure #21 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  uint64_t v0;

  return NSJSONWritingOptions.init(rawValue:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2470CCCC4()
{
  return swift_deallocObject();
}

uint64_t sub_2470CCCEC()
{
  return swift_deallocObject();
}

uint64_t sub_2470CCD14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CCD50()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CCD8C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CCDC8()
{
  return swift_deallocObject();
}

uint64_t sub_2470CCDF0()
{
  return swift_deallocObject();
}

uint64_t sub_2470CCE18()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_2470CCE60()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE1768], v4);
}

uint64_t sub_2470CCF64()
{
  return swift_deallocObject();
}

uint64_t sub_2470CCFAC()
{
  return swift_deallocObject();
}

uint64_t sub_2470CCFD4()
{
  return swift_deallocObject();
}

uint64_t sub_2470CCFFC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CD038()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CD074()
{
  swift_release();
  return swift_deallocObject();
}

void *outlined init with take of PersonNameComponents?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for PersonNameComponents();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of PersonNameComponents?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for PersonNameComponents();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

_QWORD *outlined init with copy of String(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  *a2 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  result = a2;
  a2[1] = v4;
  return result;
}

uint64_t sub_2470CD218()
{
  return swift_deallocObject();
}

uint64_t sub_2470CD260()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #13 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  uint64_t v0;

  return specialized implicit closure #11 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(*(void **)(v0 + 16));
}

uint64_t sub_2470CD2A4()
{
  return swift_deallocObject();
}

uint64_t sub_2470CD2CC()
{
  return swift_deallocObject();
}

uint64_t sub_2470CD2F4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CD330()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CD36C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CD3A8()
{
  return swift_deallocObject();
}

uint64_t sub_2470CD3D0()
{
  return swift_deallocObject();
}

uint64_t sub_2470CD3F8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CD434()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CD470()
{
  return swift_deallocObject();
}

uint64_t sub_2470CD4B8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2470CD4F4()
{
  return swift_deallocObject();
}

uint64_t sub_2470CD51C()
{
  return swift_deallocObject();
}

uint64_t sub_2470CD544()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CD580()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CD5BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CD5F8()
{
  return swift_deallocObject();
}

uint64_t sub_2470CD620()
{
  return swift_deallocObject();
}

uint64_t sub_2470CD648()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CD684()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CD6C0()
{
  return swift_deallocObject();
}

uint64_t sub_2470CD708()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  uint64_t v0;

  return implicit closure #7 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(*(void **)(v0 + 48), *(_QWORD *)(v0 + 16));
}

uint64_t sub_2470CD788()
{
  return swift_deallocObject();
}

uint64_t sub_2470CD7B0()
{
  return swift_deallocObject();
}

uint64_t sub_2470CD7D8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CD814()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CD850()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CD88C()
{
  return swift_deallocObject();
}

uint64_t sub_2470CD8B4()
{
  return swift_deallocObject();
}

uint64_t sub_2470CD8DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CD918()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined consume of PaymentsDirectInvocations?(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return outlined consume of PaymentsDirectInvocations(result, a2, a3);
  return result;
}

uint64_t sub_2470CD9A0()
{
  return swift_deallocObject();
}

uint64_t sub_2470CD9E8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2470CDA24()
{
  return swift_deallocObject();
}

uint64_t sub_2470CDA4C()
{
  return swift_deallocObject();
}

uint64_t sub_2470CDA74()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CDAB0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CDAEC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CDB28()
{
  return swift_deallocObject();
}

uint64_t sub_2470CDB50()
{
  return swift_deallocObject();
}

uint64_t sub_2470CDB78()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CDBB4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CDBF0()
{
  return swift_deallocObject();
}

uint64_t sub_2470CDC38()
{
  return swift_deallocObject();
}

uint64_t sub_2470CDC60()
{
  return swift_deallocObject();
}

uint64_t sub_2470CDC88()
{
  return swift_deallocObject();
}

uint64_t sub_2470CDCB0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CDCEC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CDD28()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CDD64()
{
  return swift_deallocObject();
}

uint64_t sub_2470CDD8C()
{
  return swift_deallocObject();
}

uint64_t sub_2470CDDB4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CDDF0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CDE2C()
{
  return swift_deallocObject();
}

uint64_t sub_2470CDE74()
{
  return swift_deallocObject();
}

uint64_t sub_2470CDE9C()
{
  return swift_deallocObject();
}

uint64_t sub_2470CDEC4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CDF00()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CDF3C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CDF78()
{
  return swift_deallocObject();
}

uint64_t sub_2470CDFC0()
{
  return swift_deallocObject();
}

uint64_t sub_2470CDFE8()
{
  return swift_deallocObject();
}

uint64_t sub_2470CE010()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CE04C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CE088()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_2470CE0CC()
{
  return swift_deallocObject();
}

uint64_t sub_2470CE114()
{
  return swift_deallocObject();
}

uint64_t sub_2470CE13C()
{
  return swift_deallocObject();
}

uint64_t sub_2470CE164()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CE1A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CE1DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CE218()
{
  return swift_deallocObject();
}

uint64_t sub_2470CE260()
{
  return swift_deallocObject();
}

uint64_t sub_2470CE288()
{
  return swift_deallocObject();
}

uint64_t sub_2470CE2B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CE2EC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CE328()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CE364()
{
  return swift_deallocObject();
}

uint64_t sub_2470CE3AC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #6 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)()
{
  uint64_t v0;

  return implicit closure #6 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(*(_BYTE *)(v0 + 16) & 1);
}

uint64_t sub_2470CE3E0()
{
  return swift_deallocObject();
}

uint64_t sub_2470CE408()
{
  return swift_deallocObject();
}

uint64_t sub_2470CE430()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CE46C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CE4A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CE4E4()
{
  return swift_deallocObject();
}

uint64_t sub_2470CE50C()
{
  return swift_deallocObject();
}

BOOL implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return (a1() & 1) != 0;
}

uint64_t sub_2470CE580()
{
  swift_release();
  return swift_deallocObject();
}

BOOL partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_2470CE5C8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_2470CE638()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int32)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_2470CE680()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t closure #1 in OSLogArguments.append<A>(_:)partial apply(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE3F88], v4);
}

unint64_t lazy protocol witness table accessor for type Int32 and conformance Int32()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    v0 = MEMORY[0x249572C98](MEMORY[0x24BEE3FD8], MEMORY[0x24BEE3F88]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
    return v0;
  }
  return v2;
}

uint64_t partial apply for closure #5 in implicit closure #4 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(id *a1)
{
  return closure #5 in implicit closure #4 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(a1) & 1;
}

uint64_t partial apply for closure #4 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(id *a1)
{
  uint64_t v1;

  return closure #4 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t partial apply for closure #3 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(id *a1)
{
  uint64_t v1;

  return closure #3 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_2470CE808()
{
  return swift_deallocObject();
}

uint64_t sub_2470CE850()
{
  return swift_deallocObject();
}

uint64_t sub_2470CE878()
{
  return swift_deallocObject();
}

uint64_t sub_2470CE8A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CE8DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CE918()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CE954()
{
  return swift_deallocObject();
}

uint64_t sub_2470CE99C()
{
  return swift_deallocObject();
}

uint64_t sub_2470CE9C4()
{
  return swift_deallocObject();
}

uint64_t sub_2470CE9EC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CEA28()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CEA64()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CEAA0()
{
  return swift_deallocObject();
}

uint64_t sub_2470CEAE8()
{
  return swift_deallocObject();
}

uint64_t sub_2470CEB10()
{
  return swift_deallocObject();
}

uint64_t sub_2470CEB38()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CEB74()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CEBB0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CEBEC()
{
  return swift_deallocObject();
}

uint64_t sub_2470CEC34()
{
  return swift_deallocObject();
}

uint64_t sub_2470CEC5C()
{
  return swift_deallocObject();
}

uint64_t sub_2470CEC84()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CECC0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470CECFC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for ContactDisambiguationStrategy(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x249572C38](a1, a2, &nominal type descriptor for ContactDisambiguationStrategy);
}

uint64_t type metadata completion function for ContactDisambiguationStrategy()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t type metadata accessor for PayeeDisambiguationStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for PayeeDisambiguationStrategy;
  if (!type metadata singleton initialization cache for PayeeDisambiguationStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for PayeeDisambiguationStrategy()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t type metadata accessor for PayerDisambiguationStrategy()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for PayerDisambiguationStrategy;
  if (!type metadata singleton initialization cache for PayerDisambiguationStrategy)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t instantiation function for generic protocol witness table for ContactDisambiguationStrategy<A, B, C>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x249572C98](&protocol conformance descriptor for ContactDisambiguationStrategy<A, B, C>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for ParameterResolutionHandlingAsync in ContactDisambiguationStrategy<A, B, C>(uint64_t a1)
{
  return MEMORY[0x249572C98](&protocol conformance descriptor for ContactDisambiguationStrategy<A, B, C>, a1);
}

uint64_t associated type witness table accessor for NeedsDisambiguationFlowStrategyAsync.DisambiguationItemContainerType : DisambiguationItemContaining in ContactDisambiguationStrategy<A, B, C>(uint64_t a1)
{
  return MEMORY[0x249572C98](MEMORY[0x24BE98C98], a1);
}

uint64_t partial apply for closure #1 in serialize<A>(_:at:)()
{
  return closure #1 in serialize<A>(_:at:)();
}

uint64_t TCCTemplateProvider.makePromptToEnableApp(appDisplayInfo:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 40) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = TCCTemplateProvider.makePromptToEnableApp(appDisplayInfo:deviceState:);
  return static TCCTemplates.promptToEnableApp(appDisplayInfo:deviceState:)();
}

_QWORD *TCCTemplateProvider.makePromptToEnableApp(appDisplayInfo:deviceState:)()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t TCCTemplateProvider.makeCancellationPrompt(deviceState:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  *(_QWORD *)(v2 + 16) = v2;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 24) = a2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 32) = v3;
  *v3 = *(_QWORD *)(v5 + 16);
  v3[1] = TCCTemplateProvider.makeCancellationPrompt(deviceState:);
  return static TCCTemplates.confirmationCancelled(deviceState:)();
}

_QWORD *TCCTemplateProvider.makeCancellationPrompt(deviceState:)()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t TCCTemplateProvider.makeRejectionPrompt(deviceState:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  *(_QWORD *)(v2 + 16) = v2;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 24) = a2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 32) = v3;
  *v3 = *(_QWORD *)(v5 + 16);
  v3[1] = TCCTemplateProvider.makeCancellationPrompt(deviceState:);
  return static TCCTemplates.confirmationRejected(deviceState:)();
}

uint64_t protocol witness for TCCTemplateProviding.makePromptToEnableApp(appDisplayInfo:deviceState:) in conformance TCCTemplateProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return TCCTemplateProvider.makePromptToEnableApp(appDisplayInfo:deviceState:)(a1, a2, a3);
}

uint64_t protocol witness for TCCTemplateProviding.makeCancellationPrompt(deviceState:) in conformance TCCTemplateProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return TCCTemplateProvider.makeCancellationPrompt(deviceState:)(a1, a2);
}

uint64_t protocol witness for TCCTemplateProviding.makeRejectionPrompt(deviceState:) in conformance TCCTemplateProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return TCCTemplateProvider.makeRejectionPrompt(deviceState:)(a1, a2);
}

ValueMetadata *type metadata accessor for TCCTemplateProvider()
{
  return &type metadata for TCCTemplateProvider;
}

uint64_t PaymentsBaseCATs.buttonCancel(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ButtonCancel", 0x19uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.buttonCancel()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t PaymentsBaseCATs.buttonCancel()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ButtonCancel", 0x19uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ButtonCancel", 0x19uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.buttonYes(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ButtonYes", 0x16uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.buttonYes()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t PaymentsBaseCATs.buttonYes()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ButtonYes", 0x16uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ButtonYes", 0x16uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.confirmApp(app:completion:)(uint64_t a1)
{
  Swift::String *v1;
  Swift::String *v3;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ConfirmApp", 0x17uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v3 = v1;
  *v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.confirmApp(app:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t PaymentsBaseCATs.confirmApp(app:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  Swift::String *v9;
  uint64_t v10;

  v10 = v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ConfirmApp", 0x17uLL, 1);
  v0[8] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v9 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (v10)
  {
    v7 = v8[6];
    v9[2]._object = (void *)type metadata accessor for SirikitApp();
    v9[1]._countAndFlagsBits = v7;
  }
  else
  {
    v9[1]._countAndFlagsBits = 0;
    v9[1]._object = 0;
    v9[2]._countAndFlagsBits = 0;
    v9[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v8[9] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v3 = (_QWORD *)swift_task_alloc();
  v8[10] = v3;
  *v3 = v8[2];
  v3[1] = RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:);
  return v6(v8[5], v1._countAndFlagsBits, v1._object, v5);
}

uint64_t PaymentsBaseCATs.confirmApp(app:)(uint64_t a1)
{
  Swift::String *v1;
  Swift::String *v3;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ConfirmApp", 0x17uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v3 = v1;
  *v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.disambiguateApp(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#DisambiguateApp", 0x1CuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.disambiguateApp()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t PaymentsBaseCATs.disambiguateApp()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#DisambiguateApp", 0x1CuLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#DisambiguateApp", 0x1CuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:completion:)(const void *a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String *v13;
  Swift::String v14;
  const void *v15;
  char *v16;
  Swift::String *v17;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v19;
  uint64_t v20;
  Swift::String *v21;
  uint64_t v22;
  Swift::String v23;
  const void *v24;
  char *v25;
  uint64_t *p_countAndFlagsBits;
  uint64_t *v27;
  uint64_t v28;
  Swift::String *v30;
  Swift::String *v31;
  Swift::String *v32;
  _QWORD v33[3];
  Swift::String *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String *v48;
  const void *v49;
  unsigned int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(char *, _QWORD);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v49 = a1;
  v38 = a2;
  v39 = a3;
  v40 = a4;
  v41 = a5;
  v60 = 0;
  v59 = 0;
  v58 = 0;
  v56 = 0;
  v57 = 0;
  v55 = 0;
  v42 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v49);
  v43 = (char *)v33 - v42;
  v44 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v51 = (char *)v33 - v44;
  v60 = v8;
  v59 = v9;
  v58 = v10;
  v56 = v11;
  v57 = v12;
  v55 = v5;
  v50 = 1;
  v45 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ErrorWithCode", 0x1AuLL, 1);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v47 = _allocateUninitializedArray<A>(_:)();
  v48 = v13;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorCode", 9uLL, v50 & 1);
  v15 = v49;
  v16 = v51;
  *v48 = v14;
  outlined init with copy of SpeakableString?(v15, v16);
  v52 = type metadata accessor for SpeakableString();
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(unsigned int (**)(char *, _QWORD))(v53 + 48);
  if (v54(v51, v50) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v51);
    v32 = v48;
    v48[1]._countAndFlagsBits = 0;
    v32[1]._object = 0;
    v32[2]._countAndFlagsBits = 0;
    v32[2]._object = 0;
  }
  else
  {
    v17 = v48;
    v48[2]._object = (void *)v52;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v17[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v53 + 32))(boxed_opaque_existential_1, v51, v52);
  }
  v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  v48[3] = v19;
  swift_retain();
  if (v38)
  {
    v37 = v38;
    v36 = v38;
    v20 = type metadata accessor for PaymentsDialogConcept();
    v21 = v48;
    v22 = v36;
    v48[5]._object = (void *)v20;
    v21[4]._countAndFlagsBits = v22;
  }
  else
  {
    v31 = v48;
    v48[4]._countAndFlagsBits = 0;
    v31[4]._object = 0;
    v31[5]._countAndFlagsBits = 0;
    v31[5]._object = 0;
  }
  v34 = v48 + 7;
  v35 = 1;
  v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("intentType", 0xAuLL, 1);
  v24 = v39;
  v25 = v43;
  v48[6] = v23;
  outlined init with copy of SpeakableString?(v24, v25);
  if (((unsigned int (*)(char *, _QWORD, uint64_t))v54)(v43, v35, v52) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v43);
    v30 = v48;
    v48[7]._countAndFlagsBits = 0;
    v30[7]._object = 0;
    v30[8]._countAndFlagsBits = 0;
    v30[8]._object = 0;
  }
  else
  {
    p_countAndFlagsBits = &v34->_countAndFlagsBits;
    v48[8]._object = (void *)v52;
    v27 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v53 + 32))(v27, v43, v52);
  }
  v28 = v47;
  _finalizeUninitializedArray<A>(_:)();
  v33[1] = v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v33[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[11] = v4;
  v5[10] = a4;
  v5[9] = a3;
  v5[8] = a2;
  v5[7] = a1;
  v5[2] = v5;
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = 0;
  v5[6] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v5[12] = swift_task_alloc();
  v5[13] = swift_task_alloc();
  v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  v5[6] = v4;
  return swift_task_switch();
}

uint64_t PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t (*v8)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v9;
  const void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  Swift::String *v16;
  const void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(void *, uint64_t);

  v18 = (void *)v0[13];
  v17 = (const void *)v0[8];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ErrorWithCode", 0x1AuLL, 1);
  v0[14] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v16 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorCode", 9uLL, 1);
  outlined init with copy of SpeakableString?(v17, v18);
  v19 = type metadata accessor for SpeakableString();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(void *, uint64_t))(v20 + 48);
  if (v21(v18, 1) == 1)
  {
    outlined destroy of SpeakableString?(v15[13]);
    v16[1]._countAndFlagsBits = 0;
    v16[1]._object = 0;
    v16[2]._countAndFlagsBits = 0;
    v16[2]._object = 0;
  }
  else
  {
    v14 = v15[13];
    v16[2]._object = (void *)v19;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v16[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v20 + 32))(boxed_opaque_existential_1, v14, v19);
  }
  v13 = v15[9];
  v16[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (v13)
  {
    v12 = v15[9];
    v16[5]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v16[4]._countAndFlagsBits = v12;
  }
  else
  {
    v16[4]._countAndFlagsBits = 0;
    v16[4]._object = 0;
    v16[5]._countAndFlagsBits = 0;
    v16[5]._object = 0;
  }
  v11 = (void *)v15[12];
  v10 = (const void *)v15[10];
  v16[6] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("intentType", 0xAuLL, 1);
  outlined init with copy of SpeakableString?(v10, v11);
  if (((unsigned int (*)(void *, uint64_t, uint64_t))v21)(v11, 1, v19) == 1)
  {
    outlined destroy of SpeakableString?(v15[12]);
    v16[7]._countAndFlagsBits = 0;
    v16[7]._object = 0;
    v16[8]._countAndFlagsBits = 0;
    v16[8]._object = 0;
  }
  else
  {
    v9 = v15[12];
    v16[8]._object = (void *)v19;
    v4 = __swift_allocate_boxed_opaque_existential_1(&v16[7]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v20 + 32))(v4, v9, v19);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v15[15] = v7;
  v8 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v5 = (_QWORD *)swift_task_alloc();
  v15[16] = v5;
  *v5 = v15[2];
  v5[1] = PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:);
  return v8(v15[7], v1._countAndFlagsBits, v1._object, v7);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

_QWORD *PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v4 = (_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 136) = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v4 + 8))(v4);
}

uint64_t PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String *v10;
  Swift::String v11;
  const void *v12;
  char *v13;
  Swift::String *v14;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v16;
  uint64_t v17;
  Swift::String *v18;
  uint64_t v19;
  Swift::String v20;
  const void *v21;
  char *v22;
  uint64_t *p_countAndFlagsBits;
  uint64_t *v24;
  uint64_t v25;
  Swift::String *v27;
  Swift::String *v28;
  Swift::String *v29;
  _QWORD v30[2];
  Swift::String *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String *v44;
  const void *v45;
  unsigned int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(char *, _QWORD);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v35 = a4;
  v45 = a1;
  v36 = a2;
  v37 = a3;
  v54 = 0;
  v53 = 0;
  v52 = 0;
  v51 = 0;
  v38 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v45);
  v39 = (char *)v30 - v38;
  v40 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v47 = (char *)v30 - v40;
  v54 = v7;
  v53 = v8;
  v52 = v9;
  v51 = v4;
  v46 = 1;
  v41 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ErrorWithCode", 0x1AuLL, 1);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v43 = _allocateUninitializedArray<A>(_:)();
  v44 = v10;
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorCode", 9uLL, v46 & 1);
  v12 = v45;
  v13 = v47;
  *v44 = v11;
  outlined init with copy of SpeakableString?(v12, v13);
  v48 = type metadata accessor for SpeakableString();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(unsigned int (**)(char *, _QWORD))(v49 + 48);
  if (v50(v47, v46) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v47);
    v29 = v44;
    v44[1]._countAndFlagsBits = 0;
    v29[1]._object = 0;
    v29[2]._countAndFlagsBits = 0;
    v29[2]._object = 0;
  }
  else
  {
    v14 = v44;
    v44[2]._object = (void *)v48;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v14[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v49 + 32))(boxed_opaque_existential_1, v47, v48);
  }
  v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  v44[3] = v16;
  swift_retain();
  if (v36)
  {
    v34 = v36;
    v33 = v36;
    v17 = type metadata accessor for PaymentsDialogConcept();
    v18 = v44;
    v19 = v33;
    v44[5]._object = (void *)v17;
    v18[4]._countAndFlagsBits = v19;
  }
  else
  {
    v28 = v44;
    v44[4]._countAndFlagsBits = 0;
    v28[4]._object = 0;
    v28[5]._countAndFlagsBits = 0;
    v28[5]._object = 0;
  }
  v31 = v44 + 7;
  v32 = 1;
  v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("intentType", 0xAuLL, 1);
  v21 = v37;
  v22 = v39;
  v44[6] = v20;
  outlined init with copy of SpeakableString?(v21, v22);
  if (((unsigned int (*)(char *, _QWORD, uint64_t))v50)(v39, v32, v48) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v39);
    v27 = v44;
    v44[7]._countAndFlagsBits = 0;
    v27[7]._object = 0;
    v27[8]._countAndFlagsBits = 0;
    v27[8]._object = 0;
  }
  else
  {
    p_countAndFlagsBits = &v31->_countAndFlagsBits;
    v44[8]._object = (void *)v48;
    v24 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v49 + 32))(v24, v39, v48);
  }
  v25 = v43;
  _finalizeUninitializedArray<A>(_:)();
  v30[0] = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v30[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.knownIntentResponse(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#KnownIntentResponse", 0x20uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.knownIntentResponse()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t PaymentsBaseCATs.knownIntentResponse()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#KnownIntentResponse", 0x20uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#KnownIntentResponse", 0x20uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.labelForEnum(accountType:amountType:balanceType:completion:)(const void *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String *v15;
  Swift::String v16;
  const void *v17;
  char *v18;
  Swift::String *v19;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v21;
  const void *v22;
  char *v23;
  uint64_t *p_countAndFlagsBits;
  uint64_t *v25;
  Swift::String v26;
  const void *v27;
  char *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  Swift::String *v33;
  Swift::String *v34;
  Swift::String *v35;
  _QWORD v36[3];
  Swift::String *v37;
  unsigned int v38;
  Swift::String *v39;
  unsigned int v40;
  const void *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String *v53;
  const void *v54;
  unsigned int v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int (*v59)(char *, _QWORD);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v54 = a1;
  v41 = a2;
  v42 = a3;
  v43 = a4;
  v44 = a5;
  v65 = 0;
  v64 = 0;
  v63 = 0;
  v61 = 0;
  v62 = 0;
  v60 = 0;
  v45 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v54);
  v46 = (char *)v36 - v45;
  v47 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v48 = (char *)v36 - v47;
  v49 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v56 = (char *)v36 - v49;
  v65 = v10;
  v64 = v11;
  v63 = v12;
  v61 = v13;
  v62 = v14;
  v60 = v5;
  v55 = 1;
  v50 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#LabelForEnum", 0x19uLL, 1);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v52 = _allocateUninitializedArray<A>(_:)();
  v53 = v15;
  v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, v55 & 1);
  v17 = v54;
  v18 = v56;
  *v53 = v16;
  outlined init with copy of SpeakableString?(v17, v18);
  v57 = type metadata accessor for SpeakableString();
  v58 = *(_QWORD *)(v57 - 8);
  v59 = *(unsigned int (**)(char *, _QWORD))(v58 + 48);
  if (v59(v56, v55) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v56);
    v35 = v53;
    v53[1]._countAndFlagsBits = 0;
    v35[1]._object = 0;
    v35[2]._countAndFlagsBits = 0;
    v35[2]._object = 0;
  }
  else
  {
    v19 = v53;
    v53[2]._object = (void *)v57;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v19[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v58 + 32))(boxed_opaque_existential_1, v56, v57);
  }
  v39 = v53 + 4;
  v40 = 1;
  v21 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amountType", 0xAuLL, 1);
  v22 = v41;
  v23 = v48;
  v53[3] = v21;
  outlined init with copy of SpeakableString?(v22, v23);
  if (((unsigned int (*)(char *, _QWORD, uint64_t))v59)(v48, v40, v57) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v48);
    v34 = v53;
    v53[4]._countAndFlagsBits = 0;
    v34[4]._object = 0;
    v34[5]._countAndFlagsBits = 0;
    v34[5]._object = 0;
  }
  else
  {
    p_countAndFlagsBits = &v39->_countAndFlagsBits;
    v53[5]._object = (void *)v57;
    v25 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v58 + 32))(v25, v48, v57);
  }
  v37 = v53 + 7;
  v38 = 1;
  v26 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("balanceType", 0xBuLL, 1);
  v27 = v42;
  v28 = v46;
  v53[6] = v26;
  outlined init with copy of SpeakableString?(v27, v28);
  if (((unsigned int (*)(char *, _QWORD, uint64_t))v59)(v46, v38, v57) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v46);
    v33 = v53;
    v53[7]._countAndFlagsBits = 0;
    v33[7]._object = 0;
    v33[8]._countAndFlagsBits = 0;
    v33[8]._object = 0;
  }
  else
  {
    v29 = &v37->_countAndFlagsBits;
    v53[8]._object = (void *)v57;
    v30 = __swift_allocate_boxed_opaque_existential_1(v29);
    (*(void (**)(uint64_t *, char *, uint64_t))(v58 + 32))(v30, v46, v57);
  }
  v31 = v52;
  _finalizeUninitializedArray<A>(_:)();
  v36[1] = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v36[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.labelForEnum(accountType:amountType:balanceType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[11] = v4;
  v5[10] = a4;
  v5[9] = a3;
  v5[8] = a2;
  v5[7] = a1;
  v5[2] = v5;
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = 0;
  v5[6] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v5[12] = swift_task_alloc();
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  v5[6] = v4;
  return swift_task_switch();
}

uint64_t PaymentsBaseCATs.labelForEnum(accountType:amountType:balanceType:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t (*v9)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v10;
  const void *v11;
  void *v12;
  uint64_t v13;
  const void *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  Swift::String *v18;
  const void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(void *, uint64_t);

  v20 = (void *)v0[14];
  v19 = (const void *)v0[8];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#LabelForEnum", 0x19uLL, 1);
  v0[15] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  v18 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, 1);
  outlined init with copy of SpeakableString?(v19, v20);
  v21 = type metadata accessor for SpeakableString();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned int (**)(void *, uint64_t))(v22 + 48);
  if (v23(v20, 1) == 1)
  {
    outlined destroy of SpeakableString?(v17[14]);
    v18[1]._countAndFlagsBits = 0;
    v18[1]._object = 0;
    v18[2]._countAndFlagsBits = 0;
    v18[2]._object = 0;
  }
  else
  {
    v16 = v17[14];
    v18[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v18[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v16, v21);
  }
  v15 = (void *)v17[13];
  v14 = (const void *)v17[9];
  v18[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amountType", 0xAuLL, 1);
  outlined init with copy of SpeakableString?(v14, v15);
  if (((unsigned int (*)(void *, uint64_t, uint64_t))v23)(v15, 1, v21) == 1)
  {
    outlined destroy of SpeakableString?(v17[13]);
    v18[4]._countAndFlagsBits = 0;
    v18[4]._object = 0;
    v18[5]._countAndFlagsBits = 0;
    v18[5]._object = 0;
  }
  else
  {
    v13 = v17[13];
    v18[5]._object = (void *)v21;
    v4 = __swift_allocate_boxed_opaque_existential_1(&v18[4]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v22 + 32))(v4, v13, v21);
  }
  v12 = (void *)v17[12];
  v11 = (const void *)v17[10];
  v18[6] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("balanceType", 0xBuLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  if (((unsigned int (*)(void *, uint64_t, uint64_t))v23)(v12, 1, v21) == 1)
  {
    outlined destroy of SpeakableString?(v17[12]);
    v18[7]._countAndFlagsBits = 0;
    v18[7]._object = 0;
    v18[8]._countAndFlagsBits = 0;
    v18[8]._object = 0;
  }
  else
  {
    v10 = v17[12];
    v18[8]._object = (void *)v21;
    v5 = __swift_allocate_boxed_opaque_existential_1(&v18[7]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v22 + 32))(v5, v10, v21);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v8 = KeyValuePairs.init(dictionaryLiteral:)();
  v17[16] = v8;
  v9 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v6 = (_QWORD *)swift_task_alloc();
  v17[17] = v6;
  *v6 = v17[2];
  v6[1] = PaymentsBaseCATs.labelForEnum(accountType:amountType:balanceType:);
  return v9(v17[7], v1._countAndFlagsBits, v1._object, v8);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

_QWORD *PaymentsBaseCATs.labelForEnum(accountType:amountType:balanceType:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v4 = (_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 144) = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v4 + 8))(v4);
}

uint64_t PaymentsBaseCATs.labelForEnum(accountType:amountType:balanceType:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, const void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String *v12;
  Swift::String v13;
  const void *v14;
  char *v15;
  Swift::String *v16;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v18;
  const void *v19;
  char *v20;
  uint64_t *p_countAndFlagsBits;
  uint64_t *v22;
  Swift::String v23;
  const void *v24;
  char *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  Swift::String *v30;
  Swift::String *v31;
  Swift::String *v32;
  _QWORD v33[2];
  Swift::String *v34;
  unsigned int v35;
  Swift::String *v36;
  unsigned int v37;
  uint64_t v38;
  const void *v39;
  const void *v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String *v49;
  const void *v50;
  unsigned int v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(char *, _QWORD);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v38 = a4;
  v50 = a1;
  v39 = a2;
  v40 = a3;
  v59 = 0;
  v58 = 0;
  v57 = 0;
  v56 = 0;
  v41 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v50);
  v42 = (char *)v33 - v41;
  v43 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v44 = (char *)v33 - v43;
  v45 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v52 = (char *)v33 - v45;
  v59 = v9;
  v58 = v10;
  v57 = v11;
  v56 = v4;
  v51 = 1;
  v46 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#LabelForEnum", 0x19uLL, 1);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v48 = _allocateUninitializedArray<A>(_:)();
  v49 = v12;
  v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, v51 & 1);
  v14 = v50;
  v15 = v52;
  *v49 = v13;
  outlined init with copy of SpeakableString?(v14, v15);
  v53 = type metadata accessor for SpeakableString();
  v54 = *(_QWORD *)(v53 - 8);
  v55 = *(unsigned int (**)(char *, _QWORD))(v54 + 48);
  if (v55(v52, v51) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v52);
    v32 = v49;
    v49[1]._countAndFlagsBits = 0;
    v32[1]._object = 0;
    v32[2]._countAndFlagsBits = 0;
    v32[2]._object = 0;
  }
  else
  {
    v16 = v49;
    v49[2]._object = (void *)v53;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v16[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v54 + 32))(boxed_opaque_existential_1, v52, v53);
  }
  v36 = v49 + 4;
  v37 = 1;
  v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amountType", 0xAuLL, 1);
  v19 = v39;
  v20 = v44;
  v49[3] = v18;
  outlined init with copy of SpeakableString?(v19, v20);
  if (((unsigned int (*)(char *, _QWORD, uint64_t))v55)(v44, v37, v53) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v44);
    v31 = v49;
    v49[4]._countAndFlagsBits = 0;
    v31[4]._object = 0;
    v31[5]._countAndFlagsBits = 0;
    v31[5]._object = 0;
  }
  else
  {
    p_countAndFlagsBits = &v36->_countAndFlagsBits;
    v49[5]._object = (void *)v53;
    v22 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v54 + 32))(v22, v44, v53);
  }
  v34 = v49 + 7;
  v35 = 1;
  v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("balanceType", 0xBuLL, 1);
  v24 = v40;
  v25 = v42;
  v49[6] = v23;
  outlined init with copy of SpeakableString?(v24, v25);
  if (((unsigned int (*)(char *, _QWORD, uint64_t))v55)(v42, v35, v53) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v42);
    v30 = v49;
    v49[7]._countAndFlagsBits = 0;
    v30[7]._object = 0;
    v30[8]._countAndFlagsBits = 0;
    v30[8]._object = 0;
  }
  else
  {
    v26 = &v34->_countAndFlagsBits;
    v49[8]._object = (void *)v53;
    v27 = __swift_allocate_boxed_opaque_existential_1(v26);
    (*(void (**)(uint64_t *, char *, uint64_t))(v54 + 32))(v27, v42, v53);
  }
  v28 = v48;
  _finalizeUninitializedArray<A>(_:)();
  v33[0] = v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v33[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.labelForPreferences(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#LabelForPreferences", 0x20uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.labelForPreferences()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t PaymentsBaseCATs.labelForPreferences()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#LabelForPreferences", 0x20uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#LabelForPreferences", 0x20uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.noAppFoundOnDeviceToSupportIntent(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#NoAppFoundOnDeviceToSupportIntent", 0x2EuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.noAppFoundOnDeviceToSupportIntent()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t PaymentsBaseCATs.noAppFoundOnDeviceToSupportIntent()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#NoAppFoundOnDeviceToSupportIntent", 0x2EuLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#NoAppFoundOnDeviceToSupportIntent", 0x2EuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.noResultsResponse(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#NoResultsResponse", 0x1EuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.noResultsResponse()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t PaymentsBaseCATs.noResultsResponse()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#NoResultsResponse", 0x1EuLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#NoResultsResponse", 0x1EuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.slotDisplayValue(slotName:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String *v6;
  Swift::String v7;
  const void *v8;
  char *v9;
  Swift::String *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  Swift::String *v14;
  _QWORD v15[5];
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String *v20;
  const void *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = a1;
  v15[3] = a2;
  v15[4] = a3;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v16 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)v15 - v16;
  v29 = MEMORY[0x24BDAC7A8](v21);
  v27 = v4;
  v28 = v5;
  v26 = v3;
  v22 = 1;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#SlotDisplayValue", 0x1DuLL, 1);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v19 = _allocateUninitializedArray<A>(_:)();
  v20 = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slotName", 8uLL, v22 & 1);
  v8 = v21;
  v9 = v23;
  *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  v24 = type metadata accessor for SpeakableString();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    v14 = v20;
    v20[1]._countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[0] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.slotDisplayValue(slotName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t PaymentsBaseCATs.slotDisplayValue(slotName:)()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String *v2;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, void *, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *p_countAndFlagsBits;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = (void *)v0[8];
  v11 = (const void *)v0[6];
  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#SlotDisplayValue", 0x1DuLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_countAndFlagsBits = &v2->_countAndFlagsBits;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slotName", 8uLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  v13 = type metadata accessor for SpeakableString();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v14 + 48))(v12, 1) == 1)
  {
    outlined destroy of SpeakableString?(v9[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    v8 = v9[8];
    p_countAndFlagsBits[5] = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v8, v13);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[10] = v6;
  v7 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v4 = (_QWORD *)swift_task_alloc();
  v9[11] = v4;
  *v4 = v9[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  return v7(v9[5], v1._countAndFlagsBits, v1._object, v6);
}

uint64_t PaymentsBaseCATs.slotDisplayValue(slotName:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  Swift::String *v3;
  Swift::String v4;
  const void *v5;
  char *v6;
  Swift::String *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  Swift::String *v11;
  _QWORD v12[4];
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String *v17;
  const void *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12[3] = a2;
  v18 = a1;
  v24 = 0;
  v23 = 0;
  v13 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = (char *)v12 - v13;
  v24 = MEMORY[0x24BDAC7A8](v18);
  v23 = v2;
  v19 = 1;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#SlotDisplayValue", 0x1DuLL, 1);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  v16 = _allocateUninitializedArray<A>(_:)();
  v17 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slotName", 8uLL, v19 & 1);
  v5 = v18;
  v6 = v20;
  *v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  v21 = type metadata accessor for SpeakableString();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    v11 = v17;
    v17[1]._countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[1] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.unsupportedOnWatch(completion:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#UnsupportedOnWatch", 0x1FuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.unsupportedOnWatch()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t PaymentsBaseCATs.unsupportedOnWatch()()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, void *, uint64_t);

  v0[2] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#UnsupportedOnWatch", 0x1FuLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v5;
  v6 = (uint64_t (*)(_QWORD, uint64_t, void *, uint64_t))(MEMORY[0x24BE92870] + (int)*MEMORY[0x24BE92870]);
  v2 = (_QWORD *)swift_task_alloc();
  v4[8] = v2;
  *v2 = v4[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  return v6(v4[4], v1._countAndFlagsBits, v1._object, v5);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#UnsupportedOnWatch", 0x1FuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for PaymentsBaseCATs()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for PaymentsBaseCATs;
  if (!type metadata singleton initialization cache for PaymentsBaseCATs)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for PaymentsBaseCATs()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t ObjC metadata update function for PaymentsBaseCATs()
{
  return type metadata accessor for PaymentsBaseCATs();
}

uint64_t BaseStrategy.deinit()
{
  uint64_t v0;
  uint64_t v2;

  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  __swift_destroy_boxed_opaque_existential_0(v0 + 64);
  __swift_destroy_boxed_opaque_existential_0(v0 + 104);
  __swift_destroy_boxed_opaque_existential_0(v0 + 144);
  return v2;
}

uint64_t BaseStrategy.ttsEnabled.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD v6[4];
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v13 = 0;
  v1 = (_QWORD *)*v0;
  v13 = v0;
  v12 = v1[10];
  v11 = v1[11];
  v10 = v1[12];
  outlined init with copy of GlobalsProviding((uint64_t)(v0 + 13), (uint64_t)v7);
  v4 = v8;
  v3 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  __swift_project_boxed_opaque_existential_1(v6, v6[3]);
  v5 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v7);
  return v5 & 1;
}

uint64_t BaseStrategy.actionForInput(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE **v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  uint32_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  NSObject *v69;
  int v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint32_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v35 = a2;
  v42 = a1;
  v82 = 0;
  v81 = 0;
  v36 = 0;
  v51 = *v2;
  v37 = 0;
  v38 = type metadata accessor for Parse();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = (*(_QWORD *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v41 = (uint64_t)v26 - v40;
  v47 = type metadata accessor for Logger();
  v46 = *(_QWORD *)(v47 - 8);
  v43 = (*(_QWORD *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v42);
  v4 = (char *)v26 - v43;
  v45 = (char *)v26 - v43;
  v82 = v3;
  v81 = v44;
  v48 = v5[10];
  v80 = v48;
  v49 = v5[11];
  v79 = v49;
  v50 = v5[12];
  v78 = v50;
  v6 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v4, v6, v47);
  v60 = 7;
  v7 = (_QWORD *)swift_allocObject();
  v8 = v49;
  v9 = v50;
  v10 = v51;
  v58 = v7;
  v7[2] = v48;
  v7[3] = v8;
  v7[4] = v9;
  v52 = *(_QWORD *)(v10 + 104);
  v7[5] = v52;
  v69 = Logger.logObject.getter();
  v70 = static os_log_type_t.debug.getter();
  v55 = &v76;
  v76 = 12;
  v53 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v54 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v56 = v77;
  v57 = 17;
  v63 = swift_allocObject();
  *(_BYTE *)(v63 + 16) = 32;
  v64 = swift_allocObject();
  *(_BYTE *)(v64 + 16) = 8;
  v59 = 32;
  v11 = swift_allocObject();
  v12 = v58;
  v61 = v11;
  *(_QWORD *)(v11 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  *(_QWORD *)(v11 + 24) = v12;
  v13 = swift_allocObject();
  v14 = v61;
  v62 = v13;
  *(_QWORD *)(v13 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v13 + 24) = v14;
  v15 = swift_allocObject();
  v16 = v62;
  v66 = v15;
  *(_QWORD *)(v15 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v15 + 24) = v16;
  v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v65 = _allocateUninitializedArray<A>(_:)();
  v67 = v17;
  swift_retain();
  v18 = v63;
  v19 = v67;
  *v67 = partial apply for closure #1 in OSLogArguments.append(_:);
  v19[1] = v18;
  swift_retain();
  v20 = v64;
  v21 = v67;
  v67[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v21[3] = v20;
  swift_retain();
  v22 = v66;
  v23 = v67;
  v67[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v23[5] = v22;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v69, (os_log_type_t)v70))
  {
    v24 = v36;
    v28 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v29 = createStorage<A>(capacity:type:)(0);
    v30 = createStorage<A>(capacity:type:)(1);
    v31 = &v75;
    v75 = v28;
    v32 = &v74;
    v74 = v29;
    v33 = &v73;
    v73 = v30;
    serialize(_:at:)(2, &v75);
    serialize(_:at:)(1, v31);
    v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v72 = v63;
    closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)v31, (uint64_t)v32, (uint64_t)v33);
    v34 = v24;
    if (v24)
    {
      __break(1u);
    }
    else
    {
      v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v72 = v64;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v75, (uint64_t)&v74, (uint64_t)&v73);
      v26[0] = 0;
      v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v72 = v66;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v75, (uint64_t)&v74, (uint64_t)&v73);
      _os_log_impl(&dword_24701B000, v69, (os_log_type_t)v70, "#BaseStrategy<%s> actionForInput", v28, v56);
      destroyStorage<A>(_:count:)(v29, 0, v27);
      destroyStorage<A>(_:count:)(v30, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v28, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v47);
  Input.parse.getter();
  static FlowUtil.actionForInput(parse:intentType:)(v41, v48, v52, v35);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v41, v38);
}

uint64_t BaseStrategy.makeIntentExecutionBehavior(app:intent:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v7;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[5] = 0;
  v7 = (_QWORD *)*v2;
  v3[7] = *v2;
  v4 = type metadata accessor for Logger();
  v3[8] = v4;
  v3[9] = *(_QWORD *)(v4 - 8);
  v3[10] = swift_task_alloc();
  v3[3] = a1;
  v3[4] = a2;
  v3[11] = v7[10];
  v3[5] = v2;
  v3[12] = v7[11];
  v3[13] = v7[12];
  return swift_task_switch();
}

uint64_t BaseStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint32_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;

  v18 = *(_QWORD *)(v0 + 104);
  v17 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 80);
  v14 = *(_QWORD *)(v0 + 72);
  v15 = *(_QWORD *)(v0 + 64);
  v19 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 16) = v0;
  v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v1, v2, v15);
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = v16;
  v21[3] = v17;
  v21[4] = v18;
  v21[5] = *(_QWORD *)(v19 + 104);
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 48) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v20 = *(_DWORD *)(v0 + 112);
  v24 = swift_allocObject();
  *(_BYTE *)(v24 + 16) = 32;
  v25 = swift_allocObject();
  *(_BYTE *)(v25 + 16) = 8;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  *(_QWORD *)(v22 + 24) = v21;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v23 + 24) = v22;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v26 + 24) = v23;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v27 = v3;
  swift_retain();
  *v27 = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[1] = v24;
  swift_retain();
  v27[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[3] = v25;
  swift_retain();
  v27[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[5] = v26;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v28, v29))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v11 = createStorage<A>(capacity:type:)(0);
    v12 = createStorage<A>(capacity:type:)(1);
    v30 = buf;
    v31 = v11;
    v32 = v12;
    serialize(_:at:)(2, &v30);
    serialize(_:at:)(1, &v30);
    v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v34 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v34 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v34 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    _os_log_impl(&dword_24701B000, v28, v29, "#BaseStrategy<%s> makeIntentExecutionBehavior", buf, v20);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x2495725CC](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v7 = v13[10];
  v5 = v13[9];
  v6 = v13[8];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
  type metadata accessor for SiriKitIntentExecutionBehavior();
  v8 = static SiriKitIntentExecutionBehavior.standard()();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v13[2] + 8))(v8);
}

uint64_t BaseStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t BaseStrategy.makeIntentHandledResponse(rchRecord:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  type metadata accessor for EmptyOutput();
  static EmptyOutput.instance.getter();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

uint64_t BaseStrategy.commonLabelsProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GlobalsProviding(v1 + 24, a1);
}

uint64_t BaseStrategy.globals.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GlobalsProviding(v1 + 104, a1);
}

uint64_t BaseStrategy.errorProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GlobalsProviding(v1 + 144, a1);
}

uint64_t BaseStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_allocObject();
  return BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v19;
  uint64_t v20[5];
  _BYTE v21[40];
  _BYTE v22[40];
  _BYTE v23[40];
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v32 = 0;
  v31 = 0;
  v29 = 0;
  v28 = 0;
  v27 = 0;
  v26 = 0;
  v33 = a6;
  v8 = (_QWORD *)*v7;
  v32 = a1;
  v31 = a2;
  v30 = v8[12];
  v29 = a3;
  v28 = a4;
  v27 = a5;
  v26 = v7;
  v25 = v8[10];
  v24 = v8[11];
  outlined init with copy of GlobalsProviding(a1, (uint64_t)v23);
  outlined init with take of CommonLabelsProviding(v23, v7 + 13);
  swift_retain();
  v7[2] = a2;
  outlined init with copy of GlobalsProviding(a3, (uint64_t)v22);
  outlined init with take of CommonLabelsProviding(v22, v7 + 3);
  outlined init with copy of GlobalsProviding(a4, (uint64_t)v21);
  outlined init with take of CommonLabelsProviding(v21, v7 + 8);
  v20[3] = a6;
  v20[4] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v20);
  v12 = *(_QWORD *)(a6 - 8);
  (*(void (**)(uint64_t *, uint64_t))(v12 + 16))(boxed_opaque_existential_1, a5);
  outlined init with take of CommonLabelsProviding(v20, v7 + 18);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a5, a6);
  __swift_destroy_boxed_opaque_existential_0(a4);
  __swift_destroy_boxed_opaque_existential_0(a3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v19;
}

uint64_t sub_2470D4720()
{
  return swift_deallocObject();
}

uint64_t BaseStrategy.__deallocating_deinit()
{
  BaseStrategy.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for BaseStrategyProviding.commonLabelsProvider.getter in conformance BaseStrategy<A, B, C>@<X0>(uint64_t a1@<X8>)
{
  return BaseStrategy.commonLabelsProvider.getter(a1);
}

uint64_t protocol witness for BaseStrategyProviding.globals.getter in conformance BaseStrategy<A, B, C>@<X0>(uint64_t a1@<X8>)
{
  return BaseStrategy.globals.getter(a1);
}

uint64_t protocol witness for BaseStrategyProviding.errorProvider.getter in conformance BaseStrategy<A, B, C>@<X0>(uint64_t a1@<X8>)
{
  return BaseStrategy.errorProvider.getter(a1);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.authenticationPolicy.getter in conformance BaseStrategy<A1, B1, C1>()
{
  return HandleIntentFlowStrategyAsync.authenticationPolicy.getter();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance BaseStrategy<A, B, C>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v10;

  v10 = v3;
  v3[6] = v3;
  v4 = (_QWORD *)swift_task_alloc();
  v10[7] = v4;
  v5 = a3[11];
  v6 = a3[12];
  v7 = a3[13];
  v10[2] = a3[10];
  v10[3] = v5;
  v10[4] = v6;
  v10[5] = v7;
  type metadata accessor for BaseStrategy(0, (uint64_t)(v10 + 2));
  *v4 = v10[6];
  v4[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance BaseStrategy<A, B, C>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v10;

  v10 = v3;
  v3[6] = v3;
  v4 = (_QWORD *)swift_task_alloc();
  v10[7] = v4;
  v5 = a3[11];
  v6 = a3[12];
  v7 = a3[13];
  v10[2] = a3[10];
  v10[3] = v5;
  v10[4] = v6;
  v10[5] = v7;
  type metadata accessor for BaseStrategy(0, (uint64_t)(v10 + 2));
  *v4 = v10[6];
  v4[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance BaseStrategy<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v7 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(**(_QWORD **)v2 + 208)
                                                + **(int **)(**(_QWORD **)v2 + 208));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return v7(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance BaseStrategy<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v7 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(**(_QWORD **)v2 + 184)
                                                + **(int **)(**(_QWORD **)v2 + 184));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return v7(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance BaseStrategy<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v7 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(**(_QWORD **)v2 + 192)
                                                + **(int **)(**(_QWORD **)v2 + 192));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return v7(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance BaseStrategy<A, B, C>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v10;

  v10 = v3;
  v3[6] = v3;
  v4 = (_QWORD *)swift_task_alloc();
  v10[7] = v4;
  v5 = a3[11];
  v6 = a3[12];
  v7 = a3[13];
  v10[2] = a3[10];
  v10[3] = v5;
  v10[4] = v6;
  v10[5] = v7;
  type metadata accessor for BaseStrategy(0, (uint64_t)(v10 + 2));
  *v4 = v10[6];
  v4[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance BaseStrategy<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v7 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(**(_QWORD **)v2 + 200)
                                                + **(int **)(**(_QWORD **)v2 + 200));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return v7(a1, a2);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance BaseStrategy<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v7 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(**(_QWORD **)v2 + 176)
                                                + **(int **)(**(_QWORD **)v2 + 176));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>;
  return v7(a1, a2);
}

uint64_t sub_2470D4D58()
{
  return swift_deallocObject();
}

uint64_t sub_2470D4D80()
{
  return swift_deallocObject();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(void (*a1)(void))
{
  a1();
  return _typeName(_:qualified:)();
}

uint64_t sub_2470D4DD4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470D4E10()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470D4E4C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470D4E88()
{
  return swift_deallocObject();
}

uint64_t sub_2470D4ED0()
{
  return swift_deallocObject();
}

uint64_t sub_2470D4EF8()
{
  return swift_deallocObject();
}

uint64_t sub_2470D4F20()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470D4F5C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470D4F98()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for BaseStrategy(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x249572C38](a1, a2, &nominal type descriptor for BaseStrategy);
}

uint64_t type metadata completion function for BaseStrategy()
{
  uint64_t inited;

  inited = swift_initClassMetadata2();
  if (!inited)
    return 0;
  return inited;
}

uint64_t instantiation function for generic protocol witness table for BaseStrategy<A, B, C>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x249572C98](&protocol conformance descriptor for BaseStrategy<A, B, C>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in BaseStrategy<A, B, C>(uint64_t a1)
{
  return MEMORY[0x249572C98](&protocol conformance descriptor for BaseStrategy<A, B, C>, a1);
}

float default argument 1 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)()
{
  return 0.0;
}

uint64_t default argument 2 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)()
{
  return static Float.greatestFiniteMagnitude.getter();
}

uint64_t static Transformer<>.transformer(previousIntent:contactResolver:)(void *a1, uint64_t a2)
{
  id v2;
  uint64_t v6;
  _BYTE v7[40];
  uint64_t v8;
  void *v9;

  v9 = a1;
  v8 = a2;
  v2 = a1;
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v7);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  outlined init with take of CommonLabelsProviding(v7, (void *)(v6 + 24));
  type metadata accessor for UsoTask_noVerb_common_Payment();
  type metadata accessor for INSendPaymentIntent();
  return Transformer.init(transform:)();
}

{
  id v2;
  uint64_t v6;
  _BYTE v7[40];
  uint64_t v8;
  void *v9;

  v9 = a1;
  v8 = a2;
  v2 = a1;
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v7);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  outlined init with take of CommonLabelsProviding(v7, (void *)(v6 + 24));
  type metadata accessor for UsoTask_pay_common_Payment();
  type metadata accessor for INSendPaymentIntent();
  return Transformer.init(transform:)();
}

{
  id v2;
  uint64_t v6;
  _BYTE v7[40];
  uint64_t v8;
  void *v9;

  v9 = a1;
  v8 = a2;
  v2 = a1;
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v7);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  outlined init with take of CommonLabelsProviding(v7, (void *)(v6 + 24));
  type metadata accessor for UsoTask_requestMoney_common_Payment();
  type metadata accessor for INRequestPaymentIntent();
  return Transformer.init(transform:)();
}

uint64_t closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  Class *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  char *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  void *v57;
  id v58;
  id v59;
  void *v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  void *v79;
  char *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  void *v97;
  char *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  void *v112;
  float v113;
  float v114;
  void *v115;
  uint64_t result;
  uint64_t v117;
  void *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD *v155;
  void *v156;
  NSDecimalNumber *v157;
  Class isa;
  Class v159;
  uint64_t v160;
  id v161;
  objc_class *v162;
  Swift::String_optional v163;
  INSendPaymentIntent v164;
  char *v165;
  uint64_t v166;
  objc_class *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  objc_class *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  _QWORD *v196;
  void *v197;
  objc_class *v198;
  Class v199;
  id v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  void *v204;
  void *v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  uint8_t *v209;
  uint64_t v210;
  uint64_t v211;
  _BYTE **v212;
  uint64_t *v213;
  uint64_t *v214;
  void *v215;
  uint64_t *v216;
  id v217;
  uint32_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  NSObject *v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  __int128 *v236;
  uint64_t v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  void *v260;
  uint64_t v261;
  void *v262;
  uint64_t v263;
  void *v264;
  uint64_t v265;
  uint8_t *v266;
  uint64_t v267;
  uint64_t v268;
  _BYTE **v269;
  uint64_t *v270;
  uint64_t *v271;
  void *v272;
  void *v273;
  char *v274;
  id v275;
  Class v276;
  objc_class *v277;
  _BOOL8 v278;
  Class v279;
  uint32_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  NSObject *v291;
  int v292;
  uint64_t v293;
  _BOOL8 v294;
  uint64_t v295;
  uint64_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  void *v302;
  int v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  void *v312;
  uint64_t v313;
  uint8_t *v314;
  uint64_t v315;
  uint64_t v316;
  _BYTE **v317;
  uint64_t *v318;
  uint64_t *v319;
  void *v320;
  Swift::String v321;
  uint32_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  NSObject *v345;
  int v346;
  void *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  void *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  void *v358;
  uint64_t v359;
  void *object;
  uint64_t v361;
  uint64_t v362;
  void *v363;
  uint64_t v364;
  Swift::Float v365;
  uint64_t v366;
  Swift::Float v367;
  float v368;
  float v369;
  float v370;
  uint64_t v371;
  Swift::Float v372;
  int v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  void *v380;
  uint64_t v381;
  void *v382;
  uint64_t v383;
  void *v384;
  void *v385;
  uint64_t v386;
  void *v387;
  uint64_t v388;
  uint8_t *v389;
  uint64_t v390;
  uint64_t v391;
  _BYTE **v392;
  uint64_t *v393;
  uint64_t *v394;
  void *v395;
  uint32_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  _QWORD *v405;
  NSObject *v406;
  int v407;
  uint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  void *v414;
  void *v415;
  uint64_t v416;
  void *v417;
  uint64_t v418;
  uint8_t *v419;
  uint64_t v420;
  uint64_t v421;
  _BYTE **v422;
  uint64_t *v423;
  uint64_t *v424;
  void *v425;
  void *v426;
  uint64_t v427;
  uint32_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  _QWORD *v438;
  NSObject *v439;
  int v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  _QWORD *v446;
  uint64_t v447;
  void *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  void *v453;
  void *v454;
  uint64_t v455;
  void *v456;
  uint64_t v457;
  uint8_t *v458;
  uint64_t v459;
  uint64_t v460;
  _BYTE **v461;
  uint64_t *v462;
  uint64_t *v463;
  void *v464;
  void (*v465)(char *, char *, uint64_t);
  unint64_t v466;
  void (*v467)(char *, char *, uint64_t);
  uint32_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  _QWORD *v478;
  NSObject *v479;
  int v480;
  void *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t (*v502)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v503;
  void *v504;
  uint64_t v505;
  uint64_t v506;
  id v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  _BOOL8 v511;
  id v512;
  id v513;
  id v514;
  id v515;
  id v516;
  id v517;
  id v518;
  id v519;
  void *v520;
  uint64_t v521;
  uint64_t v522;
  void *v523;
  uint64_t v524;
  void *v525;
  uint64_t v526;
  uint8_t *v527;
  uint64_t v528;
  uint64_t v529;
  _BYTE **v530;
  uint64_t *v531;
  uint64_t *v532;
  void *v533;
  void *v534;
  void (*v535)(char *, uint64_t);
  uint32_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  _QWORD *v546;
  NSObject *v547;
  int v548;
  void *v549;
  uint64_t v550;
  void *v551;
  uint64_t v552;
  uint8_t *v553;
  uint64_t v554;
  uint64_t v555;
  _BYTE **v556;
  uint64_t *v557;
  uint64_t *v558;
  void *v559;
  Class *v560;
  void *v561;
  unint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  unint64_t v566;
  char *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  unint64_t v571;
  char *v572;
  unint64_t v573;
  char *v574;
  uint64_t v575;
  unint64_t v576;
  char *v577;
  unint64_t v578;
  char *v579;
  unint64_t v580;
  char *v581;
  _QWORD *v582;
  id v583;
  uint64_t v584;
  uint64_t v585;
  unint64_t v586;
  char *v587;
  unint64_t v588;
  char *v589;
  unint64_t v590;
  char *v591;
  unint64_t v592;
  char *v593;
  unint64_t v594;
  char *v595;
  unint64_t v596;
  char *v597;
  unint64_t v598;
  char *v599;
  unint64_t v600;
  char *v601;
  _QWORD *v602;
  uint64_t v603;
  void (*v604)(char *, uint64_t, uint64_t);
  unint64_t v605;
  unint64_t v606;
  uint64_t *v607;
  unint64_t v608;
  uint32_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  _QWORD *v619;
  uint64_t v620;
  NSObject *v621;
  int v622;
  uint64_t (*v623)(uint64_t, uint64_t, uint64_t);
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  _BYTE *v627;
  uint64_t (*v628)(uint64_t, uint64_t, uint64_t);
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  _BYTE *v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t (*v635)(uint64_t, uint64_t, uint64_t);
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  _BYTE *v639;
  uint64_t (*v640)(uint64_t, uint64_t, uint64_t);
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  _BYTE *v644;
  _QWORD v645[2];
  uint64_t (*v646)(uint64_t, uint64_t, uint64_t);
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  _BYTE *v650[2];
  uint32_t v651;
  uint64_t v652;
  uint32_t v653;
  uint64_t v654;
  _QWORD v655[4];
  uint32_t v656;
  uint64_t v657;
  uint64_t (*v658)(uint64_t, uint64_t, uint64_t);
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  _BYTE *v662[2];
  uint32_t v663;
  Swift::String v664;
  Swift::String v665;
  uint64_t v666;
  uint64_t v667;
  Swift::String v668;
  Swift::Float v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t (*v676)(uint64_t, uint64_t, uint64_t);
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  _BYTE *v680;
  uint64_t (*v681)(uint64_t, uint64_t, uint64_t);
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  _BYTE *v685[2];
  uint32_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint32_t v696;
  Class v697;
  char v698;
  uint64_t v699;
  objc_class *v700;
  _BOOL8 v701;
  Class v702;
  uint64_t v703;
  uint64_t v704;
  uint32_t v705;
  uint64_t v706;
  uint32_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  char *v711;
  char *v712;
  INPerson_optional v713;
  INCurrencyAmount_optional v714;

  v2 = MEMORY[0x24BDAC7A8](a1);
  v560 = v3;
  v584 = v2;
  v583 = v4;
  v582 = v5;
  v561 = v1;
  v712 = 0;
  v711 = 0;
  v710 = 0;
  v709 = 0;
  v708 = 0;
  v703 = 0;
  v697 = 0;
  v688 = 0;
  v675 = 0;
  v672 = 0;
  v673 = 0;
  v671 = 0;
  v669 = 0.0;
  v668._countAndFlagsBits = 0;
  v668._object = 0;
  v666 = 0;
  v667 = 0;
  v654 = 0;
  v634 = 0;
  v633 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  v562 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v563 = (uint64_t)&v200 - v562;
  v575 = 0;
  v564 = type metadata accessor for ContactResolverConfig();
  v565 = *(_QWORD *)(v564 - 8);
  v566 = (*(_QWORD *)(v565 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v575);
  v567 = (char *)&v200 - v566;
  v568 = type metadata accessor for ContactQuery();
  v569 = *(_QWORD *)(v568 - 8);
  v570 = *(_QWORD *)(v569 + 64);
  v571 = (v570 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v568);
  v572 = (char *)&v200 - v571;
  v573 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v200 - v571);
  v574 = (char *)&v200 - v573;
  v712 = (char *)&v200 - v573;
  v576 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v575);
  v577 = (char *)&v200 - v576;
  v578 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v579 = (char *)&v200 - v578;
  v580 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v581 = (char *)&v200 - v580;
  v711 = (char *)&v200 - v580;
  v603 = type metadata accessor for Logger();
  v602 = *(_QWORD **)(v603 - 8);
  v585 = v602[8];
  v586 = (v585 + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = MEMORY[0x24BDAC7A8](v584);
  v587 = (char *)&v200 - v586;
  v588 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v589 = (char *)&v200 - v588;
  v590 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v591 = (char *)&v200 - v590;
  v592 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v593 = (char *)&v200 - v592;
  v594 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v595 = (char *)&v200 - v594;
  v596 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v597 = (char *)&v200 - v596;
  v598 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v599 = (char *)&v200 - v598;
  v600 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  v26 = (uint64_t *)MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v200 - v600;
  v601 = (char *)&v200 - v600;
  v611 = *v26;
  v710 = v611;
  v709 = v28;
  v708 = v29;
  v30 = Logger.payments.unsafeMutableAddressor();
  v604 = (void (*)(char *, uint64_t, uint64_t))v602[2];
  v604(v27, v30, v603);
  swift_retain();
  v621 = Logger.logObject.getter();
  v622 = static os_log_type_t.debug.getter();
  v607 = &v706;
  v706 = 12;
  v605 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v606 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v608 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v609 = v707;
  v610 = 17;
  v613 = 7;
  v615 = swift_allocObject();
  *(_BYTE *)(v615 + 16) = 32;
  v616 = swift_allocObject();
  *(_BYTE *)(v616 + 16) = 8;
  v612 = 32;
  v31 = swift_allocObject();
  v32 = v611;
  v614 = v31;
  *(_QWORD *)(v31 + 16) = partial apply for implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  *(_QWORD *)(v31 + 24) = v32;
  v33 = swift_allocObject();
  v34 = v614;
  v618 = v33;
  *(_QWORD *)(v33 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v33 + 24) = v34;
  v620 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v617 = _allocateUninitializedArray<A>(_:)();
  v619 = v35;
  swift_retain();
  v36 = v615;
  v37 = v619;
  *v619 = partial apply for closure #1 in OSLogArguments.append(_:);
  v37[1] = v36;
  swift_retain();
  v38 = v616;
  v39 = v619;
  v619[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v39[3] = v38;
  swift_retain();
  v40 = v618;
  v41 = v619;
  v619[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v41[5] = v40;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v621, (os_log_type_t)v622))
  {
    v553 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v552 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v554 = createStorage<A>(capacity:type:)(0);
    v555 = createStorage<A>(capacity:type:)(1);
    v556 = &v627;
    v627 = v553;
    v557 = &v626;
    v626 = v554;
    v558 = &v625;
    v625 = v555;
    serialize(_:at:)(2, &v627);
    serialize(_:at:)(1, v556);
    v42 = v561;
    v623 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v624 = v615;
    closure #1 in osLogInternal(_:log:type:)(&v623, (uint64_t)v556, (uint64_t)v557, (uint64_t)v558);
    v559 = v42;
    if (v42)
    {
      __break(1u);
    }
    else
    {
      v623 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v624 = v616;
      closure #1 in osLogInternal(_:log:type:)(&v623, (uint64_t)&v627, (uint64_t)&v626, (uint64_t)&v625);
      v550 = 0;
      v623 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v624 = v618;
      closure #1 in osLogInternal(_:log:type:)(&v623, (uint64_t)&v627, (uint64_t)&v626, (uint64_t)&v625);
      v549 = 0;
      _os_log_impl(&dword_24701B000, v621, (os_log_type_t)v622, "#Transformer for noVerb_common_Payment task %s", v553, v609);
      destroyStorage<A>(_:count:)(v554, 0, v552);
      destroyStorage<A>(_:count:)(v555, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v553, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v551 = v549;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v551 = v561;
  }
  v43 = v599;
  v534 = v551;

  v535 = (void (*)(char *, uint64_t))v602[1];
  v535(v601, v603);
  v44 = Logger.payments.unsafeMutableAddressor();
  v604(v43, v44, v603);
  v45 = v583;
  v539 = 7;
  v540 = swift_allocObject();
  *(_QWORD *)(v540 + 16) = v583;
  v547 = Logger.logObject.getter();
  v548 = static os_log_type_t.debug.getter();
  v704 = 12;
  UnsignedInteger<>.init<A>(_:)();
  v536 = v705;
  v537 = 17;
  v542 = swift_allocObject();
  *(_BYTE *)(v542 + 16) = 32;
  v543 = swift_allocObject();
  *(_BYTE *)(v543 + 16) = 8;
  v538 = 32;
  v46 = swift_allocObject();
  v47 = v540;
  v541 = v46;
  *(_QWORD *)(v46 + 16) = partial apply for implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  *(_QWORD *)(v46 + 24) = v47;
  v48 = swift_allocObject();
  v49 = v541;
  v545 = v48;
  *(_QWORD *)(v48 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v48 + 24) = v49;
  v544 = _allocateUninitializedArray<A>(_:)();
  v546 = v50;
  swift_retain();
  v51 = v542;
  v52 = v546;
  *v546 = partial apply for closure #1 in OSLogArguments.append(_:);
  v52[1] = v51;
  swift_retain();
  v53 = v543;
  v54 = v546;
  v546[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v54[3] = v53;
  swift_retain();
  v55 = v545;
  v56 = v546;
  v546[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v56[5] = v55;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v547, (os_log_type_t)v548))
  {
    v527 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v526 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v528 = createStorage<A>(capacity:type:)(0);
    v529 = createStorage<A>(capacity:type:)(1);
    v530 = &v632;
    v632 = v527;
    v531 = &v631;
    v631 = v528;
    v532 = &v630;
    v630 = v529;
    serialize(_:at:)(2, &v632);
    serialize(_:at:)(1, v530);
    v57 = v534;
    v628 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v629 = v542;
    closure #1 in osLogInternal(_:log:type:)(&v628, (uint64_t)v530, (uint64_t)v531, (uint64_t)v532);
    v533 = v57;
    if (v57)
    {
      __break(1u);
    }
    else
    {
      v628 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v629 = v543;
      closure #1 in osLogInternal(_:log:type:)(&v628, (uint64_t)&v632, (uint64_t)&v631, (uint64_t)&v630);
      v524 = 0;
      v628 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v629 = v545;
      closure #1 in osLogInternal(_:log:type:)(&v628, (uint64_t)&v632, (uint64_t)&v631, (uint64_t)&v630);
      v523 = 0;
      _os_log_impl(&dword_24701B000, v547, (os_log_type_t)v548, "#Transformer for noVerb_common_Payment previous intent is %s", v527, v536);
      destroyStorage<A>(_:count:)(v528, 0, v526);
      destroyStorage<A>(_:count:)(v529, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v527, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v525 = v523;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v525 = v534;
  }
  v520 = v525;

  v535(v599, v603);
  v521 = swift_allocObject();
  v522 = v521 + 16;
  v703 = v521 + 16;
  v58 = v583;
  if (v583)
  {
    v519 = v583;
    v518 = v583;
    v59 = objc_msgSend(v583, sel_payee);
    v60 = v518;
    *(_QWORD *)(v521 + 16) = v59;

  }
  else
  {
    *(_QWORD *)(v521 + 16) = 0;
  }
  v61 = v583;
  if (v583)
  {
    v517 = v583;
    v516 = v583;
    v702 = (Class)objc_msgSend(v583, sel_currencyAmount);

  }
  else
  {
    v702 = 0;
  }
  v62 = v583;
  if (v583)
  {
    v515 = v583;
    v513 = v583;
    v514 = objc_msgSend(v583, sel_note);
    if (v514)
    {
      v512 = v514;
      v507 = v514;
      v508 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v509 = v63;

      v510 = v508;
      v511 = v509;
    }
    else
    {
      v510 = 0;
      v511 = 0;
    }
    v700 = (objc_class *)v510;
    v701 = v511;

  }
  else
  {
    v700 = 0;
    v701 = 0;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v506 = v699;
  if (v699)
  {
    v505 = v506;
    v501 = v506;
    v675 = v506;
    swift_release();
    v502 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v569 + 56);
    v64 = v502(v581, 1, 1, v568);
    v503 = MEMORY[0x2495716C0](v64);
    if (v503 && (v500 = v503, v498 = v503, v499 = MEMORY[0x2495718C4](), swift_release(), v499))
    {
      v497 = v499;
      v494 = v499;
      v495 = CodeGenBase.entity.getter();
      swift_release();
      v496 = v495;
    }
    else
    {
      v496 = 0;
    }
    v492 = v496;
    type metadata accessor for UsoEntity_common_Person();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    v65 = swift_release();
    v493 = v674;
    if (v674)
    {
      v491 = v493;
      v488 = v493;
      v633 = v493;
      UsoEntity_common_Person.toContactQuery()();
      v502(v579, 0, 1, v568);
      outlined assign with take of ContactQuery?(v579, v581);
      swift_release();
    }
    else
    {
      v490 = MEMORY[0x2495716C0](v65);
      if (v490)
      {
        v489 = v490;
        v485 = v490;
        v486 = MEMORY[0x2495718C4]();
        swift_release();
        v487 = v486;
      }
      else
      {
        v487 = 0;
      }
      v484 = v487;
      if (v487)
      {
        v483 = v484;
        v482 = v484;
        v634 = v484;
        UsoEntity_common_Agent.toContactQuery()();
        v502(v579, 0, 1, v568);
        outlined assign with take of ContactQuery?(v579, v581);
        swift_release();
      }
    }
    outlined init with copy of ContactQuery?(v581, v577);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v569 + 48))(v577, 1, v568) == 1)
    {
      outlined destroy of ContactQuery?((uint64_t)v577);
      v481 = v520;
    }
    else
    {
      v66 = v597;
      v467 = *(void (**)(char *, char *, uint64_t))(v569 + 32);
      v467(v574, v577, v568);
      v67 = Logger.payments.unsafeMutableAddressor();
      v604(v66, v67, v603);
      v465 = *(void (**)(char *, char *, uint64_t))(v569 + 16);
      v465(v572, v574, v568);
      v466 = (*(unsigned __int8 *)(v569 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v569 + 80);
      v471 = 7;
      v472 = swift_allocObject();
      v467((char *)(v472 + v466), v572, v568);
      v479 = Logger.logObject.getter();
      v480 = static os_log_type_t.debug.getter();
      v655[3] = 12;
      UnsignedInteger<>.init<A>(_:)();
      v468 = v656;
      v469 = 17;
      v474 = swift_allocObject();
      *(_BYTE *)(v474 + 16) = 32;
      v475 = swift_allocObject();
      *(_BYTE *)(v475 + 16) = 8;
      v470 = 32;
      v68 = swift_allocObject();
      v69 = v472;
      v473 = v68;
      *(_QWORD *)(v68 + 16) = partial apply for implicit closure #3 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
      *(_QWORD *)(v68 + 24) = v69;
      v70 = swift_allocObject();
      v71 = v473;
      v477 = v70;
      *(_QWORD *)(v70 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v70 + 24) = v71;
      v476 = _allocateUninitializedArray<A>(_:)();
      v478 = v72;
      swift_retain();
      v73 = v474;
      v74 = v478;
      *v478 = partial apply for closure #1 in OSLogArguments.append(_:);
      v74[1] = v73;
      swift_retain();
      v75 = v475;
      v76 = v478;
      v478[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v76[3] = v75;
      swift_retain();
      v77 = v477;
      v78 = v478;
      v478[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v78[5] = v77;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v479, (os_log_type_t)v480))
      {
        v458 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v457 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v459 = createStorage<A>(capacity:type:)(0);
        v460 = createStorage<A>(capacity:type:)(1);
        v461 = &v639;
        v639 = v458;
        v462 = &v638;
        v638 = v459;
        v463 = &v637;
        v637 = v460;
        serialize(_:at:)(2, &v639);
        serialize(_:at:)(1, v461);
        v79 = v520;
        v635 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v636 = v474;
        closure #1 in osLogInternal(_:log:type:)(&v635, (uint64_t)v461, (uint64_t)v462, (uint64_t)v463);
        v464 = v79;
        if (v79)
        {
          __break(1u);
        }
        else
        {
          v635 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v636 = v475;
          closure #1 in osLogInternal(_:log:type:)(&v635, (uint64_t)&v639, (uint64_t)&v638, (uint64_t)&v637);
          v455 = 0;
          v635 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v636 = v477;
          closure #1 in osLogInternal(_:log:type:)(&v635, (uint64_t)&v639, (uint64_t)&v638, (uint64_t)&v637);
          v454 = 0;
          _os_log_impl(&dword_24701B000, v479, (os_log_type_t)v480, "#Transformer payee contact in USO parse as ContactQuery is: %s", v458, v468);
          destroyStorage<A>(_:count:)(v459, 0, v457);
          destroyStorage<A>(_:count:)(v460, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v458, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          v456 = v454;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        v456 = v520;
      }
      v448 = v456;

      v535(v597, v603);
      v449 = v582[3];
      v450 = v582[4];
      __swift_project_boxed_opaque_existential_1(v582, v449);
      v444 = _allocateUninitializedArray<A>(_:)();
      v465(v80, v574, v568);
      v81 = v444;
      _finalizeUninitializedArray<A>(_:)();
      v447 = v81;
      v445 = SiriKitContactResolver.defaultConfig.unsafeMutableAddressor();
      v446 = v655;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v565 + 16))(v567, v445, v564);
      swift_endAccess();
      v82 = v448;
      v83 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v450 + 16))(v447, v567, v449);
      v451 = (uint64_t)v82;
      v452 = v83;
      v453 = v82;
      if (v82)
      {
        v200 = v453;
        v201 = 0;
        v202 = 0;
        (*(void (**)(char *, uint64_t))(v565 + 8))(v567, v564);
        swift_bridgeObjectRelease();

        v442 = v201;
        v443 = v202;
      }
      else
      {
        v441 = v452;
        (*(void (**)(char *, uint64_t))(v565 + 8))(v567, v564);
        swift_bridgeObjectRelease();
        v442 = v441;
        v443 = v451;
      }
      v84 = v595;
      v426 = (void *)v443;
      v427 = v442;
      v654 = v442;
      v85 = Logger.payments.unsafeMutableAddressor();
      v604(v84, v85, v603);
      swift_bridgeObjectRetain();
      v431 = 7;
      v432 = swift_allocObject();
      *(_QWORD *)(v432 + 16) = v427;
      v439 = Logger.logObject.getter();
      v440 = static os_log_type_t.debug.getter();
      v652 = 12;
      UnsignedInteger<>.init<A>(_:)();
      v428 = v653;
      v429 = 17;
      v434 = swift_allocObject();
      *(_BYTE *)(v434 + 16) = 32;
      v435 = swift_allocObject();
      *(_BYTE *)(v435 + 16) = 8;
      v430 = 32;
      v86 = swift_allocObject();
      v87 = v432;
      v433 = v86;
      *(_QWORD *)(v86 + 16) = partial apply for implicit closure #4 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
      *(_QWORD *)(v86 + 24) = v87;
      v88 = swift_allocObject();
      v89 = v433;
      v437 = v88;
      *(_QWORD *)(v88 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v88 + 24) = v89;
      v436 = _allocateUninitializedArray<A>(_:)();
      v438 = v90;
      swift_retain();
      v91 = v434;
      v92 = v438;
      *v438 = partial apply for closure #1 in OSLogArguments.append(_:);
      v92[1] = v91;
      swift_retain();
      v93 = v435;
      v94 = v438;
      v438[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v94[3] = v93;
      swift_retain();
      v95 = v437;
      v96 = v438;
      v438[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v96[5] = v95;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v439, (os_log_type_t)v440))
      {
        v419 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v418 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v420 = createStorage<A>(capacity:type:)(0);
        v421 = createStorage<A>(capacity:type:)(1);
        v422 = &v644;
        v644 = v419;
        v423 = &v643;
        v643 = v420;
        v424 = &v642;
        v642 = v421;
        serialize(_:at:)(2, &v644);
        serialize(_:at:)(1, v422);
        v97 = v426;
        v640 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v641 = v434;
        closure #1 in osLogInternal(_:log:type:)(&v640, (uint64_t)v422, (uint64_t)v423, (uint64_t)v424);
        v425 = v97;
        if (v97)
        {
          __break(1u);
        }
        else
        {
          v640 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v641 = v435;
          closure #1 in osLogInternal(_:log:type:)(&v640, (uint64_t)&v644, (uint64_t)&v643, (uint64_t)&v642);
          v416 = 0;
          v640 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v641 = v437;
          closure #1 in osLogInternal(_:log:type:)(&v640, (uint64_t)&v644, (uint64_t)&v643, (uint64_t)&v642);
          v415 = 0;
          _os_log_impl(&dword_24701B000, v439, (os_log_type_t)v440, "#Transformer SiriKitContactResolver found matches for payee in USO parse: %s", v419, v428);
          destroyStorage<A>(_:count:)(v420, 0, v418);
          destroyStorage<A>(_:count:)(v421, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v419, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          v417 = v415;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        v417 = v426;
      }
      v414 = v417;

      v535(v595, v603);
      swift_bridgeObjectRetain();
      if (v427)
      {
        v413 = v427;
        v410 = v427;
        swift_bridgeObjectRetain();
        v409 = v645;
        v645[0] = v410;
        v408 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
        lazy protocol witness table accessor for type [INPerson] and conformance [A]();
        Collection.first.getter();
        outlined destroy of [SFCardSection]();
        v411 = v645[1];
        swift_bridgeObjectRelease();
        v412 = v411;
      }
      else
      {
        v412 = 0;
      }
      v98 = v593;
      v99 = *(void **)(v521 + 16);
      *(_QWORD *)(v521 + 16) = v412;

      v100 = Logger.payments.unsafeMutableAddressor();
      v604(v98, v100, v603);
      swift_retain();
      v406 = Logger.logObject.getter();
      v407 = static os_log_type_t.debug.getter();
      v650[1] = (_BYTE *)12;
      UnsignedInteger<>.init<A>(_:)();
      v396 = v651;
      v397 = 17;
      v399 = 7;
      v401 = swift_allocObject();
      *(_BYTE *)(v401 + 16) = 32;
      v402 = swift_allocObject();
      *(_BYTE *)(v402 + 16) = 8;
      v398 = 32;
      v101 = swift_allocObject();
      v102 = v521;
      v400 = v101;
      *(_QWORD *)(v101 + 16) = partial apply for implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
      *(_QWORD *)(v101 + 24) = v102;
      v103 = swift_allocObject();
      v104 = v400;
      v404 = v103;
      *(_QWORD *)(v103 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v103 + 24) = v104;
      v403 = _allocateUninitializedArray<A>(_:)();
      v405 = v105;
      swift_retain();
      v106 = v401;
      v107 = v405;
      *v405 = partial apply for closure #1 in OSLogArguments.append(_:);
      v107[1] = v106;
      swift_retain();
      v108 = v402;
      v109 = v405;
      v405[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v109[3] = v108;
      swift_retain();
      v110 = v404;
      v111 = v405;
      v405[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v111[5] = v110;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v406, (os_log_type_t)v407))
      {
        v389 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v388 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v390 = createStorage<A>(capacity:type:)(0);
        v391 = createStorage<A>(capacity:type:)(1);
        v392 = v650;
        v650[0] = v389;
        v393 = &v649;
        v649 = v390;
        v394 = &v648;
        v648 = v391;
        serialize(_:at:)(2, v650);
        serialize(_:at:)(1, v392);
        v112 = v414;
        v646 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v647 = v401;
        closure #1 in osLogInternal(_:log:type:)(&v646, (uint64_t)v392, (uint64_t)v393, (uint64_t)v394);
        v395 = v112;
        if (v112)
        {
          __break(1u);
        }
        else
        {
          v646 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v647 = v402;
          closure #1 in osLogInternal(_:log:type:)(&v646, (uint64_t)v650, (uint64_t)&v649, (uint64_t)&v648);
          v386 = 0;
          v646 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v647 = v404;
          closure #1 in osLogInternal(_:log:type:)(&v646, (uint64_t)v650, (uint64_t)&v649, (uint64_t)&v648);
          v385 = 0;
          _os_log_impl(&dword_24701B000, v406, (os_log_type_t)v407, "#Transformer resolved payee from matches as %s", v389, v396);
          destroyStorage<A>(_:count:)(v390, 0, v388);
          destroyStorage<A>(_:count:)(v391, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v389, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          v387 = v385;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        v387 = v414;
      }
      v384 = v387;

      v535(v593, v603);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v569 + 8))(v574, v568);
      v481 = v384;
    }
    v382 = v481;
    v383 = MEMORY[0x2495716D8]();
    if (v383)
    {
      v381 = v383;
      v378 = v383;
      v671 = v383;
      v379 = MEMORY[0x249571888]();
      if (v379)
      {
        v377 = v379;
        v374 = v379;
        v375 = CodeGenBase.entity.getter();
        swift_release();
        v376 = v375;
      }
      else
      {
        v376 = 0;
      }
      v371 = v376;
      v370 = default argument 1 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      default argument 2 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      v368 = v113;
      v369 = default argument 3 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      v114 = default argument 4 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      v670 = static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)(v371, v370, v368, v369, v114);
      v372 = *(float *)&v670;
      v373 = BYTE4(v670);
      swift_release();
      if ((v373 & 1) == 0)
      {
        v367 = v372;
        v365 = v372;
        v669 = v372;
        v668 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        v366 = MEMORY[0x249571894]();
        if (v366)
        {
          v364 = v366;
          v361 = v366;
          object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("name", 4uLL, 1)._object;
          v362 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
          swift_bridgeObjectRelease();
          swift_release();
          if (v362)
          {
            v359 = v362;
            v657 = v362;
            v357 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoIdentifier]);
            lazy protocol witness table accessor for type [UsoIdentifier] and conformance [A]();
            v115 = v382;
            result = Sequence.first(where:)();
            v358 = v115;
            if (v115)
            {
              __break(1u);
              return result;
            }
            outlined destroy of [SFCardSection]();
            v355 = type metadata accessor for UsoIdentifier();
            v356 = *(_QWORD *)(v355 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t))(v356 + 48))(v563, 1) != 1)
            {
              v350 = UsoIdentifier.value.getter();
              v351 = v117;
              (*(void (**)(uint64_t, uint64_t))(v356 + 8))(v563, v355);
              v352 = v350;
              v353 = v351;
              v354 = v358;
LABEL_83:
              v347 = v354;
              v348 = v353;
              v349 = v352;
              v666 = v352;
              v667 = v353;
              v664._countAndFlagsBits = UsoEntity_common_CurrencyAmount.currencyIdentifier.getter();
              v664._object = v118;
              if (v118)
              {
                v665 = v664;
              }
              else
              {
                v665 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
                outlined destroy of String.UTF8View();
              }
              v119 = v591;
              v321 = v665;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v668 = v321;
              swift_bridgeObjectRelease();
              v120 = Logger.payments.unsafeMutableAddressor();
              v604(v119, v120, v603);
              v331 = 7;
              v323 = swift_allocObject();
              *(Swift::Float *)(v323 + 16) = v365;
              v330 = 32;
              v121 = swift_allocObject();
              v122 = v321._object;
              v325 = v121;
              *(_QWORD *)(v121 + 16) = v321._countAndFlagsBits;
              *(_QWORD *)(v121 + 24) = v122;
              swift_bridgeObjectRetain();
              v123 = swift_allocObject();
              v124 = v348;
              v332 = v123;
              *(_QWORD *)(v123 + 16) = v349;
              *(_QWORD *)(v123 + 24) = v124;
              v345 = Logger.logObject.getter();
              v346 = static os_log_type_t.debug.getter();
              v662[1] = (_BYTE *)v330;
              UnsignedInteger<>.init<A>(_:)();
              v322 = v663;
              v328 = 17;
              v334 = swift_allocObject();
              v327 = 32;
              *(_BYTE *)(v334 + 16) = 32;
              v335 = swift_allocObject();
              v329 = 8;
              *(_BYTE *)(v335 + 16) = 8;
              v125 = swift_allocObject();
              v126 = v323;
              v324 = v125;
              *(_QWORD *)(v125 + 16) = partial apply for implicit closure #7 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
              *(_QWORD *)(v125 + 24) = v126;
              v127 = swift_allocObject();
              v128 = v324;
              v336 = v127;
              *(_QWORD *)(v127 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
              *(_QWORD *)(v127 + 24) = v128;
              v337 = swift_allocObject();
              *(_BYTE *)(v337 + 16) = v327;
              v338 = swift_allocObject();
              *(_BYTE *)(v338 + 16) = v329;
              v129 = swift_allocObject();
              v130 = v325;
              v326 = v129;
              *(_QWORD *)(v129 + 16) = partial apply for specialized implicit closure #8 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
              *(_QWORD *)(v129 + 24) = v130;
              v131 = swift_allocObject();
              v132 = v326;
              v339 = v131;
              *(_QWORD *)(v131 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
              *(_QWORD *)(v131 + 24) = v132;
              v340 = swift_allocObject();
              *(_BYTE *)(v340 + 16) = v327;
              v341 = swift_allocObject();
              *(_BYTE *)(v341 + 16) = v329;
              v133 = swift_allocObject();
              v134 = v332;
              v333 = v133;
              *(_QWORD *)(v133 + 16) = partial apply for implicit closure #9 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
              *(_QWORD *)(v133 + 24) = v134;
              v135 = swift_allocObject();
              v136 = v333;
              v343 = v135;
              *(_QWORD *)(v135 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
              *(_QWORD *)(v135 + 24) = v136;
              v342 = _allocateUninitializedArray<A>(_:)();
              v344 = v137;
              swift_retain();
              v138 = v334;
              v139 = v344;
              *v344 = partial apply for closure #1 in OSLogArguments.append(_:);
              v139[1] = v138;
              swift_retain();
              v140 = v335;
              v141 = v344;
              v344[2] = partial apply for closure #1 in OSLogArguments.append(_:);
              v141[3] = v140;
              swift_retain();
              v142 = v336;
              v143 = v344;
              v344[4] = partial apply for closure #1 in OSLogArguments.append(_:);
              v143[5] = v142;
              swift_retain();
              v144 = v337;
              v145 = v344;
              v344[6] = partial apply for closure #1 in OSLogArguments.append(_:);
              v145[7] = v144;
              swift_retain();
              v146 = v338;
              v147 = v344;
              v344[8] = partial apply for closure #1 in OSLogArguments.append(_:);
              v147[9] = v146;
              swift_retain();
              v148 = v339;
              v149 = v344;
              v344[10] = partial apply for closure #1 in OSLogArguments.append(_:);
              v149[11] = v148;
              swift_retain();
              v150 = v340;
              v151 = v344;
              v344[12] = partial apply for closure #1 in OSLogArguments.append(_:);
              v151[13] = v150;
              swift_retain();
              v152 = v341;
              v153 = v344;
              v344[14] = partial apply for closure #1 in OSLogArguments.append(_:);
              v153[15] = v152;
              swift_retain();
              v154 = v343;
              v155 = v344;
              v344[16] = partial apply for closure #1 in OSLogArguments.append(_:);
              v155[17] = v154;
              _finalizeUninitializedArray<A>(_:)();
              swift_bridgeObjectRelease();
              if (os_log_type_enabled(v345, (os_log_type_t)v346))
              {
                v314 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
                v313 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
                v315 = createStorage<A>(capacity:type:)(0);
                v316 = createStorage<A>(capacity:type:)(3);
                v317 = v662;
                v662[0] = v314;
                v318 = &v661;
                v661 = v315;
                v319 = &v660;
                v660 = v316;
                serialize(_:at:)(2, v662);
                serialize(_:at:)(3, v317);
                v156 = v347;
                v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                v659 = v334;
                closure #1 in osLogInternal(_:log:type:)(&v658, (uint64_t)v317, (uint64_t)v318, (uint64_t)v319);
                v320 = v156;
                if (v156)
                {
                  __break(1u);
                }
                else
                {
                  v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v659 = v335;
                  closure #1 in osLogInternal(_:log:type:)(&v658, (uint64_t)v662, (uint64_t)&v661, (uint64_t)&v660);
                  v311 = 0;
                  v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v659 = v336;
                  closure #1 in osLogInternal(_:log:type:)(&v658, (uint64_t)v662, (uint64_t)&v661, (uint64_t)&v660);
                  v310 = 0;
                  v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v659 = v337;
                  closure #1 in osLogInternal(_:log:type:)(&v658, (uint64_t)v662, (uint64_t)&v661, (uint64_t)&v660);
                  v309 = 0;
                  v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v659 = v338;
                  closure #1 in osLogInternal(_:log:type:)(&v658, (uint64_t)v662, (uint64_t)&v661, (uint64_t)&v660);
                  v308 = 0;
                  v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v659 = v339;
                  closure #1 in osLogInternal(_:log:type:)(&v658, (uint64_t)v662, (uint64_t)&v661, (uint64_t)&v660);
                  v307 = 0;
                  v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v659 = v340;
                  closure #1 in osLogInternal(_:log:type:)(&v658, (uint64_t)v662, (uint64_t)&v661, (uint64_t)&v660);
                  v306 = 0;
                  v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v659 = v341;
                  closure #1 in osLogInternal(_:log:type:)(&v658, (uint64_t)v662, (uint64_t)&v661, (uint64_t)&v660);
                  v305 = 0;
                  v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v659 = v343;
                  closure #1 in osLogInternal(_:log:type:)(&v658, (uint64_t)v662, (uint64_t)&v661, (uint64_t)&v660);
                  v304 = 0;
                  _os_log_impl(&dword_24701B000, v345, (os_log_type_t)v346, "#Transformer found currency, %s %s. Raw usoIdentifier was %s", v314, v322);
                  destroyStorage<A>(_:count:)(v315, 0, v313);
                  destroyStorage<A>(_:count:)(v316, 3, MEMORY[0x24BEE4AD8] + 8);
                  MEMORY[0x2495725CC](v314, MEMORY[0x24BEE4260]);
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  v312 = v304;
                }
              }
              else
              {
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                v312 = v347;
              }
              v302 = v312;

              v535(v591, v603);
              v303 = String.isEmpty.getter();
              swift_bridgeObjectRelease();
              if ((v303 & 1) != 0)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                v300 = 0;
                v301 = type metadata accessor for INCurrencyAmount();
                type metadata accessor for NSDecimalNumber();
                NSDecimalNumber.__allocating_init(value:)((NSDecimalNumber *)LODWORD(v365), v365);
                isa = INCurrencyAmount.__allocating_init(amount:currencyCode:)(v157, v321).super.isa;
                v159 = v702;
                v702 = isa;

              }
              swift_bridgeObjectRelease();
              outlined destroy of String.UTF8View();
              swift_release();
              v380 = v302;
              goto LABEL_96;
            }
            outlined destroy of UsoIdentifier?(v563);
            v363 = v358;
          }
          else
          {
            v363 = v382;
          }
        }
        else
        {
          v363 = v382;
        }
        v352 = 0;
        v353 = 0;
        v354 = v363;
        goto LABEL_83;
      }
      swift_release();
      v380 = v382;
    }
    else
    {
      v380 = v382;
    }
LABEL_96:
    v297 = v380;
    v298 = MEMORY[0x2495716B4]();
    v299 = v160;
    if (v160)
    {
      v295 = v298;
      v296 = v299;
      v294 = v299;
      v293 = v298;
      v672 = v298;
      v673 = v299;
      swift_bridgeObjectRetain();
      v700 = (objc_class *)v293;
      v701 = v294;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    outlined destroy of ContactQuery?((uint64_t)v581);
    swift_release();
    v504 = v297;
    goto LABEL_99;
  }
  swift_release();
  v504 = v520;
LABEL_99:
  v273 = v504;
  type metadata accessor for INSendPaymentIntent();
  v274 = &v698;
  v282 = 32;
  swift_beginAccess();
  v275 = *(id *)(v521 + 16);
  v161 = v275;
  swift_endAccess();
  v276 = v702;
  v162 = v702;
  v277 = v700;
  v278 = v701;
  swift_bridgeObjectRetain();
  v713.value.super.isa = (Class)v275;
  v713.is_nil = (char)v276;
  v714.value.super.isa = v277;
  v714.is_nil = v278;
  v164.super.super.isa = INSendPaymentIntent.__allocating_init(payee:currencyAmount:note:)(v713, v714, v163).super.super.isa;
  v165 = v589;
  v279 = v164.super.super.isa;
  v697 = v164.super.super.isa;
  v166 = Logger.payments.unsafeMutableAddressor();
  v604(v165, v166, v603);
  v167 = v279;
  v283 = 7;
  v284 = swift_allocObject();
  *(_QWORD *)(v284 + 16) = v279;
  v291 = Logger.logObject.getter();
  v292 = static os_log_type_t.debug.getter();
  v695 = 12;
  UnsignedInteger<>.init<A>(_:)();
  v280 = v696;
  v281 = 17;
  v286 = swift_allocObject();
  *(_BYTE *)(v286 + 16) = 32;
  v287 = swift_allocObject();
  *(_BYTE *)(v287 + 16) = 8;
  v168 = swift_allocObject();
  v169 = v284;
  v285 = v168;
  *(_QWORD *)(v168 + 16) = partial apply for implicit closure #10 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  *(_QWORD *)(v168 + 24) = v169;
  v170 = swift_allocObject();
  v171 = v285;
  v289 = v170;
  *(_QWORD *)(v170 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v170 + 24) = v171;
  v288 = _allocateUninitializedArray<A>(_:)();
  v290 = v172;
  swift_retain();
  v173 = v286;
  v174 = v290;
  *v290 = partial apply for closure #1 in OSLogArguments.append(_:);
  v174[1] = v173;
  swift_retain();
  v175 = v287;
  v176 = v290;
  v290[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v176[3] = v175;
  swift_retain();
  v177 = v289;
  v178 = v290;
  v290[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v178[5] = v177;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v291, (os_log_type_t)v292))
  {
    v266 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v265 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v267 = createStorage<A>(capacity:type:)(0);
    v268 = createStorage<A>(capacity:type:)(1);
    v269 = &v680;
    v680 = v266;
    v270 = &v679;
    v679 = v267;
    v271 = &v678;
    v678 = v268;
    serialize(_:at:)(2, &v680);
    serialize(_:at:)(1, v269);
    v179 = v273;
    v676 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v677 = v286;
    closure #1 in osLogInternal(_:log:type:)(&v676, (uint64_t)v269, (uint64_t)v270, (uint64_t)v271);
    v272 = v179;
    if (v179)
    {
      __break(1u);
    }
    else
    {
      v676 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v677 = v287;
      closure #1 in osLogInternal(_:log:type:)(&v676, (uint64_t)&v680, (uint64_t)&v679, (uint64_t)&v678);
      v263 = 0;
      v676 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v677 = v289;
      closure #1 in osLogInternal(_:log:type:)(&v676, (uint64_t)&v680, (uint64_t)&v679, (uint64_t)&v678);
      v262 = 0;
      _os_log_impl(&dword_24701B000, v291, (os_log_type_t)v292, "#Transformer returning intent %s", v266, v280);
      destroyStorage<A>(_:count:)(v267, 0, v265);
      destroyStorage<A>(_:count:)(v268, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v266, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v264 = v262;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v264 = v273;
  }
  v260 = v264;

  v535(v589, v603);
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v261 = v693;
  swift_release();
  if (v261)
  {
    v259 = v261;
    v256 = v261;
    v257 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
    swift_release();
    v258 = v257;
  }
  else
  {
    v258 = 0;
  }
  v692 = v258;
  swift_retain();
  if (v692)
  {
    v694 = v692;
  }
  else
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    v255 = v691;
    v180 = swift_release();
    if (v255 && (v254 = v255, v252 = v255, v253 = MEMORY[0x2495716CC](v180), swift_release(), v253))
    {
      v251 = v253;
      v248 = v253;
      v249 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
      swift_release();
      v250 = v249;
    }
    else
    {
      v250 = 0;
    }
    v690 = v250;
    swift_retain();
    if (v690)
    {
      v694 = v690;
    }
    else
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      v247 = v689;
      v181 = swift_release();
      if (v247 && (v246 = v247, v244 = v247, v245 = MEMORY[0x2495716C0](v181), swift_release(), v245))
      {
        v243 = v245;
        v242 = v245;
        v694 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
        swift_release();
      }
      else
      {
        v694 = 0;
      }
      outlined destroy of ContiguousArray<A1>();
    }
    swift_release();
    outlined destroy of ContiguousArray<A1>();
  }
  swift_release();
  v241 = v694;
  if (v694)
  {
    v240 = v241;
    v235 = v241;
    v688 = v241;
    v182 = v279;
    v236 = Constants.intentAppIDAssociatedKey.unsafeMutableAddressor();
    v237 = UsoEntity_common_App.appIdentifier.getter();
    v238 = v183;
    if (v183)
    {
      v233 = v237;
      v234 = v238;
      v230 = v238;
      v231 = MEMORY[0x24957220C](v237);
      swift_bridgeObjectRelease();
      v232 = (void *)v231;
    }
    else
    {
      v232 = 0;
    }
    v184 = v587;
    v217 = v232;
    v216 = &v687;
    v220 = 32;
    swift_beginAccess();
    objc_setAssociatedObject(v279, v236, v217, (void *)0x301);
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v185 = Logger.payments.unsafeMutableAddressor();
    v604(v184, v185, v603);
    swift_retain();
    v228 = Logger.logObject.getter();
    v229 = static os_log_type_t.debug.getter();
    v685[1] = (_BYTE *)12;
    UnsignedInteger<>.init<A>(_:)();
    v218 = v686;
    v219 = 17;
    v221 = 7;
    v223 = swift_allocObject();
    *(_BYTE *)(v223 + 16) = 32;
    v224 = swift_allocObject();
    *(_BYTE *)(v224 + 16) = 8;
    v186 = swift_allocObject();
    v187 = v235;
    v222 = v186;
    *(_QWORD *)(v186 + 16) = partial apply for implicit closure #13 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
    *(_QWORD *)(v186 + 24) = v187;
    v188 = swift_allocObject();
    v189 = v222;
    v226 = v188;
    *(_QWORD *)(v188 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v188 + 24) = v189;
    v225 = _allocateUninitializedArray<A>(_:)();
    v227 = v190;
    swift_retain();
    v191 = v223;
    v192 = v227;
    *v227 = partial apply for closure #1 in OSLogArguments.append(_:);
    v192[1] = v191;
    swift_retain();
    v193 = v224;
    v194 = v227;
    v227[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v194[3] = v193;
    swift_retain();
    v195 = v226;
    v196 = v227;
    v227[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v196[5] = v195;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v228, (os_log_type_t)v229))
    {
      v209 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v208 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v210 = createStorage<A>(capacity:type:)(0);
      v211 = createStorage<A>(capacity:type:)(1);
      v212 = v685;
      v685[0] = v209;
      v213 = &v684;
      v684 = v210;
      v214 = &v683;
      v683 = v211;
      serialize(_:at:)(2, v685);
      serialize(_:at:)(1, v212);
      v197 = v260;
      v681 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v682 = v223;
      closure #1 in osLogInternal(_:log:type:)(&v681, (uint64_t)v212, (uint64_t)v213, (uint64_t)v214);
      v215 = v197;
      if (v197)
      {
        __break(1u);
      }
      else
      {
        v681 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v682 = v224;
        closure #1 in osLogInternal(_:log:type:)(&v681, (uint64_t)v685, (uint64_t)&v684, (uint64_t)&v683);
        v206 = 0;
        v681 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v682 = v226;
        closure #1 in osLogInternal(_:log:type:)(&v681, (uint64_t)v685, (uint64_t)&v684, (uint64_t)&v683);
        v205 = 0;
        _os_log_impl(&dword_24701B000, v228, (os_log_type_t)v229, "#Transformer found app to use for intent as %s", v209, v218);
        destroyStorage<A>(_:count:)(v210, 0, v208);
        destroyStorage<A>(_:count:)(v211, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v209, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        v207 = v205;
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      v207 = v260;
    }
    v204 = v207;

    v535(v587, v603);
    swift_release();
    v239 = v204;
  }
  else
  {
    v239 = v260;
  }
  v203 = v239;
  v198 = v279;
  v199 = v279;
  *v560 = v279;

  outlined destroy of String.UTF8View();
  outlined destroy of SFRichText?((id *)&v702);
  return swift_release();
}

{
  void *v1;
  uint64_t v2;
  Class *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  char *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  void *v57;
  id v58;
  id v59;
  void *v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  void *v79;
  char *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  void *v97;
  char *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  void *v112;
  float v113;
  float v114;
  void *v115;
  uint64_t result;
  uint64_t v117;
  void *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD *v155;
  void *v156;
  NSDecimalNumber *v157;
  Class isa;
  Class v159;
  uint64_t v160;
  id v161;
  objc_class *v162;
  Swift::String_optional v163;
  INSendPaymentIntent v164;
  char *v165;
  uint64_t v166;
  objc_class *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  objc_class *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  void *v201;
  objc_class *v202;
  Class v203;
  id v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  void *v208;
  void *v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  uint8_t *v213;
  uint64_t v214;
  uint64_t v215;
  _BYTE **v216;
  uint64_t *v217;
  uint64_t *v218;
  void *v219;
  __int128 *v220;
  uint64_t *v221;
  id v222;
  __int128 v223;
  uint32_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  NSObject *v235;
  int v236;
  void *v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  __int128 v261;
  __int128 v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  uint64_t v268;
  void *v269;
  uint64_t v270;
  void *v271;
  uint64_t v272;
  uint8_t *v273;
  uint64_t v274;
  uint64_t v275;
  _BYTE **v276;
  uint64_t *v277;
  uint64_t *v278;
  void *v279;
  void *v280;
  char *v281;
  id v282;
  Class v283;
  objc_class *v284;
  _BOOL8 v285;
  Class v286;
  uint32_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  NSObject *v298;
  int v299;
  uint64_t v300;
  _BOOL8 v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  void *v309;
  int v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  void *v319;
  uint64_t v320;
  uint8_t *v321;
  uint64_t v322;
  uint64_t v323;
  _BYTE **v324;
  uint64_t *v325;
  uint64_t *v326;
  void *v327;
  Swift::String v328;
  uint32_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  uint64_t v335;
  int v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  _QWORD *v351;
  NSObject *v352;
  int v353;
  void *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  void *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  void *v365;
  uint64_t v366;
  void *object;
  uint64_t v368;
  uint64_t v369;
  void *v370;
  uint64_t v371;
  Swift::Float v372;
  uint64_t v373;
  Swift::Float v374;
  float v375;
  float v376;
  float v377;
  uint64_t v378;
  Swift::Float v379;
  int v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  void *v387;
  uint64_t v388;
  void *v389;
  uint64_t v390;
  void *v391;
  void *v392;
  uint64_t v393;
  void *v394;
  uint64_t v395;
  uint8_t *v396;
  uint64_t v397;
  uint64_t v398;
  _BYTE **v399;
  uint64_t *v400;
  uint64_t *v401;
  void *v402;
  uint32_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  _QWORD *v412;
  NSObject *v413;
  int v414;
  uint64_t v415;
  _QWORD *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  void *v421;
  void *v422;
  uint64_t v423;
  void *v424;
  uint64_t v425;
  uint8_t *v426;
  uint64_t v427;
  uint64_t v428;
  _BYTE **v429;
  uint64_t *v430;
  uint64_t *v431;
  void *v432;
  void *v433;
  uint64_t v434;
  uint32_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  _QWORD *v445;
  NSObject *v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  _QWORD *v453;
  uint64_t v454;
  void *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  void *v460;
  void *v461;
  uint64_t v462;
  void *v463;
  uint64_t v464;
  uint8_t *v465;
  uint64_t v466;
  uint64_t v467;
  _BYTE **v468;
  uint64_t *v469;
  uint64_t *v470;
  void *v471;
  void (*v472)(char *, char *, uint64_t);
  unint64_t v473;
  void (*v474)(char *, char *, uint64_t);
  uint32_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  _QWORD *v485;
  NSObject *v486;
  int v487;
  void *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t (*v509)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v510;
  void *v511;
  uint64_t v512;
  uint64_t v513;
  id v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  _BOOL8 v518;
  id v519;
  id v520;
  id v521;
  id v522;
  id v523;
  id v524;
  id v525;
  id v526;
  void *v527;
  uint64_t v528;
  uint64_t v529;
  void *v530;
  uint64_t v531;
  void *v532;
  uint64_t v533;
  uint8_t *v534;
  uint64_t v535;
  uint64_t v536;
  _BYTE **v537;
  uint64_t *v538;
  uint64_t *v539;
  void *v540;
  void *v541;
  void (*v542)(char *, uint64_t);
  uint32_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  _QWORD *v553;
  NSObject *v554;
  int v555;
  void *v556;
  uint64_t v557;
  void *v558;
  uint64_t v559;
  uint8_t *v560;
  uint64_t v561;
  uint64_t v562;
  _BYTE **v563;
  uint64_t *v564;
  uint64_t *v565;
  void *v566;
  Class *v567;
  void *v568;
  unint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  unint64_t v573;
  char *v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  unint64_t v578;
  char *v579;
  unint64_t v580;
  char *v581;
  uint64_t v582;
  unint64_t v583;
  char *v584;
  unint64_t v585;
  char *v586;
  unint64_t v587;
  char *v588;
  _QWORD *v589;
  id v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  char *v594;
  unint64_t v595;
  char *v596;
  unint64_t v597;
  char *v598;
  unint64_t v599;
  char *v600;
  unint64_t v601;
  char *v602;
  unint64_t v603;
  char *v604;
  unint64_t v605;
  char *v606;
  unint64_t v607;
  char *v608;
  _QWORD *v609;
  uint64_t v610;
  void (*v611)(char *, uint64_t, uint64_t);
  unint64_t v612;
  unint64_t v613;
  uint64_t *v614;
  unint64_t v615;
  uint32_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  _QWORD *v626;
  uint64_t v627;
  NSObject *v628;
  int v629;
  uint64_t (*v630)(uint64_t, uint64_t, uint64_t);
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  _BYTE *v634;
  uint64_t (*v635)(uint64_t, uint64_t, uint64_t);
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  _BYTE *v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t (*v642)(uint64_t, uint64_t, uint64_t);
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  _BYTE *v646;
  uint64_t (*v647)(uint64_t, uint64_t, uint64_t);
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  _BYTE *v651;
  _QWORD v652[2];
  uint64_t (*v653)(uint64_t, uint64_t, uint64_t);
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  _BYTE *v657[2];
  uint32_t v658;
  uint64_t v659;
  uint32_t v660;
  uint64_t v661;
  _QWORD v662[4];
  uint32_t v663;
  uint64_t v664;
  uint64_t (*v665)(uint64_t, uint64_t, uint64_t);
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  _BYTE *v669[2];
  uint32_t v670;
  Swift::String v671;
  Swift::String v672;
  uint64_t v673;
  uint64_t v674;
  Swift::String v675;
  Swift::Float v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t (*v683)(uint64_t, uint64_t, uint64_t);
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  _BYTE *v687;
  uint64_t (*v688)(uint64_t, uint64_t, uint64_t);
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  _BYTE *v692[2];
  uint32_t v693;
  uint64_t v694;
  __int128 v695;
  uint64_t v696;
  __int128 v697;
  uint64_t v698;
  __int128 v699;
  uint64_t v700;
  __int128 v701;
  uint64_t v702;
  uint32_t v703;
  Class v704;
  char v705;
  uint64_t v706;
  objc_class *v707;
  _BOOL8 v708;
  Class v709;
  uint64_t v710;
  uint64_t v711;
  uint32_t v712;
  uint64_t v713;
  uint32_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  char *v718;
  char *v719;
  INPerson_optional v720;
  INCurrencyAmount_optional v721;

  v2 = MEMORY[0x24BDAC7A8](a1);
  v567 = v3;
  v591 = v2;
  v590 = v4;
  v589 = v5;
  v568 = v1;
  v719 = 0;
  v718 = 0;
  v717 = 0;
  v716 = 0;
  v715 = 0;
  v710 = 0;
  v704 = 0;
  v695 = 0uLL;
  v682 = 0;
  v679 = 0;
  v680 = 0;
  v678 = 0;
  v676 = 0.0;
  v675._countAndFlagsBits = 0;
  v675._object = 0;
  v673 = 0;
  v674 = 0;
  v661 = 0;
  v641 = 0;
  v640 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  v569 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v570 = (uint64_t)&v204 - v569;
  v582 = 0;
  v571 = type metadata accessor for ContactResolverConfig();
  v572 = *(_QWORD *)(v571 - 8);
  v573 = (*(_QWORD *)(v572 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v582);
  v574 = (char *)&v204 - v573;
  v575 = type metadata accessor for ContactQuery();
  v576 = *(_QWORD *)(v575 - 8);
  v577 = *(_QWORD *)(v576 + 64);
  v578 = (v577 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v575);
  v579 = (char *)&v204 - v578;
  v580 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v204 - v578);
  v581 = (char *)&v204 - v580;
  v719 = (char *)&v204 - v580;
  v583 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v582);
  v584 = (char *)&v204 - v583;
  v585 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v586 = (char *)&v204 - v585;
  v587 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v588 = (char *)&v204 - v587;
  v718 = (char *)&v204 - v587;
  v610 = type metadata accessor for Logger();
  v609 = *(_QWORD **)(v610 - 8);
  v592 = v609[8];
  v593 = (v592 + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = MEMORY[0x24BDAC7A8](v591);
  v594 = (char *)&v204 - v593;
  v595 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v596 = (char *)&v204 - v595;
  v597 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v598 = (char *)&v204 - v597;
  v599 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v600 = (char *)&v204 - v599;
  v601 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v602 = (char *)&v204 - v601;
  v603 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v604 = (char *)&v204 - v603;
  v605 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v606 = (char *)&v204 - v605;
  v607 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  v26 = (uint64_t *)MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v204 - v607;
  v608 = (char *)&v204 - v607;
  v618 = *v26;
  v717 = v618;
  v716 = v28;
  v715 = v29;
  v30 = Logger.payments.unsafeMutableAddressor();
  v611 = (void (*)(char *, uint64_t, uint64_t))v609[2];
  v611(v27, v30, v610);
  swift_retain();
  v628 = Logger.logObject.getter();
  v629 = static os_log_type_t.debug.getter();
  v614 = &v713;
  v713 = 12;
  v612 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v613 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v615 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v616 = v714;
  v617 = 17;
  v620 = 7;
  v622 = swift_allocObject();
  *(_BYTE *)(v622 + 16) = 32;
  v623 = swift_allocObject();
  *(_BYTE *)(v623 + 16) = 8;
  v619 = 32;
  v31 = swift_allocObject();
  v32 = v618;
  v621 = v31;
  *(_QWORD *)(v31 + 16) = partial apply for implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  *(_QWORD *)(v31 + 24) = v32;
  v33 = swift_allocObject();
  v34 = v621;
  v625 = v33;
  *(_QWORD *)(v33 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v33 + 24) = v34;
  v627 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v624 = _allocateUninitializedArray<A>(_:)();
  v626 = v35;
  swift_retain();
  v36 = v622;
  v37 = v626;
  *v626 = partial apply for closure #1 in OSLogArguments.append(_:);
  v37[1] = v36;
  swift_retain();
  v38 = v623;
  v39 = v626;
  v626[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v39[3] = v38;
  swift_retain();
  v40 = v625;
  v41 = v626;
  v626[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v41[5] = v40;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v628, (os_log_type_t)v629))
  {
    v560 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v559 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v561 = createStorage<A>(capacity:type:)(0);
    v562 = createStorage<A>(capacity:type:)(1);
    v563 = &v634;
    v634 = v560;
    v564 = &v633;
    v633 = v561;
    v565 = &v632;
    v632 = v562;
    serialize(_:at:)(2, &v634);
    serialize(_:at:)(1, v563);
    v42 = v568;
    v630 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v631 = v622;
    closure #1 in osLogInternal(_:log:type:)(&v630, (uint64_t)v563, (uint64_t)v564, (uint64_t)v565);
    v566 = v42;
    if (v42)
    {
      __break(1u);
    }
    else
    {
      v630 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v631 = v623;
      closure #1 in osLogInternal(_:log:type:)(&v630, (uint64_t)&v634, (uint64_t)&v633, (uint64_t)&v632);
      v557 = 0;
      v630 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v631 = v625;
      closure #1 in osLogInternal(_:log:type:)(&v630, (uint64_t)&v634, (uint64_t)&v633, (uint64_t)&v632);
      v556 = 0;
      _os_log_impl(&dword_24701B000, v628, (os_log_type_t)v629, "#Transformer for pay_common_Payment task %s", v560, v616);
      destroyStorage<A>(_:count:)(v561, 0, v559);
      destroyStorage<A>(_:count:)(v562, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v560, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v558 = v556;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v558 = v568;
  }
  v43 = v606;
  v541 = v558;

  v542 = (void (*)(char *, uint64_t))v609[1];
  v542(v608, v610);
  v44 = Logger.payments.unsafeMutableAddressor();
  v611(v43, v44, v610);
  v45 = v590;
  v546 = 7;
  v547 = swift_allocObject();
  *(_QWORD *)(v547 + 16) = v590;
  v554 = Logger.logObject.getter();
  v555 = static os_log_type_t.debug.getter();
  v711 = 12;
  UnsignedInteger<>.init<A>(_:)();
  v543 = v712;
  v544 = 17;
  v549 = swift_allocObject();
  *(_BYTE *)(v549 + 16) = 32;
  v550 = swift_allocObject();
  *(_BYTE *)(v550 + 16) = 8;
  v545 = 32;
  v46 = swift_allocObject();
  v47 = v547;
  v548 = v46;
  *(_QWORD *)(v46 + 16) = partial apply for implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  *(_QWORD *)(v46 + 24) = v47;
  v48 = swift_allocObject();
  v49 = v548;
  v552 = v48;
  *(_QWORD *)(v48 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v48 + 24) = v49;
  v551 = _allocateUninitializedArray<A>(_:)();
  v553 = v50;
  swift_retain();
  v51 = v549;
  v52 = v553;
  *v553 = partial apply for closure #1 in OSLogArguments.append(_:);
  v52[1] = v51;
  swift_retain();
  v53 = v550;
  v54 = v553;
  v553[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v54[3] = v53;
  swift_retain();
  v55 = v552;
  v56 = v553;
  v553[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v56[5] = v55;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v554, (os_log_type_t)v555))
  {
    v534 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v533 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v535 = createStorage<A>(capacity:type:)(0);
    v536 = createStorage<A>(capacity:type:)(1);
    v537 = &v639;
    v639 = v534;
    v538 = &v638;
    v638 = v535;
    v539 = &v637;
    v637 = v536;
    serialize(_:at:)(2, &v639);
    serialize(_:at:)(1, v537);
    v57 = v541;
    v635 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v636 = v549;
    closure #1 in osLogInternal(_:log:type:)(&v635, (uint64_t)v537, (uint64_t)v538, (uint64_t)v539);
    v540 = v57;
    if (v57)
    {
      __break(1u);
    }
    else
    {
      v635 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v636 = v550;
      closure #1 in osLogInternal(_:log:type:)(&v635, (uint64_t)&v639, (uint64_t)&v638, (uint64_t)&v637);
      v531 = 0;
      v635 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v636 = v552;
      closure #1 in osLogInternal(_:log:type:)(&v635, (uint64_t)&v639, (uint64_t)&v638, (uint64_t)&v637);
      v530 = 0;
      _os_log_impl(&dword_24701B000, v554, (os_log_type_t)v555, "#Transformer for pay_common_Payment previous intent is %s", v534, v543);
      destroyStorage<A>(_:count:)(v535, 0, v533);
      destroyStorage<A>(_:count:)(v536, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v534, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v532 = v530;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v532 = v541;
  }
  v527 = v532;

  v542(v606, v610);
  v528 = swift_allocObject();
  v529 = v528 + 16;
  v710 = v528 + 16;
  v58 = v590;
  if (v590)
  {
    v526 = v590;
    v525 = v590;
    v59 = objc_msgSend(v590, sel_payee);
    v60 = v525;
    *(_QWORD *)(v528 + 16) = v59;

  }
  else
  {
    *(_QWORD *)(v528 + 16) = 0;
  }
  v61 = v590;
  if (v590)
  {
    v524 = v590;
    v523 = v590;
    v709 = (Class)objc_msgSend(v590, sel_currencyAmount);

  }
  else
  {
    v709 = 0;
  }
  v62 = v590;
  if (v590)
  {
    v522 = v590;
    v520 = v590;
    v521 = objc_msgSend(v590, sel_note);
    if (v521)
    {
      v519 = v521;
      v514 = v521;
      v515 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v516 = v63;

      v517 = v515;
      v518 = v516;
    }
    else
    {
      v517 = 0;
      v518 = 0;
    }
    v707 = (objc_class *)v517;
    v708 = v518;

  }
  else
  {
    v707 = 0;
    v708 = 0;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v513 = v706;
  if (v706)
  {
    v512 = v513;
    v508 = v513;
    v682 = v513;
    swift_release();
    v509 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v576 + 56);
    v64 = v509(v588, 1, 1, v575);
    v510 = MEMORY[0x2495716C0](v64);
    if (v510 && (v507 = v510, v505 = v510, v506 = MEMORY[0x2495718C4](), swift_release(), v506))
    {
      v504 = v506;
      v501 = v506;
      v502 = CodeGenBase.entity.getter();
      swift_release();
      v503 = v502;
    }
    else
    {
      v503 = 0;
    }
    v499 = v503;
    type metadata accessor for UsoEntity_common_Person();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    v65 = swift_release();
    v500 = v681;
    if (v681)
    {
      v498 = v500;
      v495 = v500;
      v640 = v500;
      UsoEntity_common_Person.toContactQuery()();
      v509(v586, 0, 1, v575);
      outlined assign with take of ContactQuery?(v586, v588);
      swift_release();
    }
    else
    {
      v497 = MEMORY[0x2495716C0](v65);
      if (v497)
      {
        v496 = v497;
        v492 = v497;
        v493 = MEMORY[0x2495718C4]();
        swift_release();
        v494 = v493;
      }
      else
      {
        v494 = 0;
      }
      v491 = v494;
      if (v494)
      {
        v490 = v491;
        v489 = v491;
        v641 = v491;
        UsoEntity_common_Agent.toContactQuery()();
        v509(v586, 0, 1, v575);
        outlined assign with take of ContactQuery?(v586, v588);
        swift_release();
      }
    }
    outlined init with copy of ContactQuery?(v588, v584);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v576 + 48))(v584, 1, v575) == 1)
    {
      outlined destroy of ContactQuery?((uint64_t)v584);
      v488 = v527;
    }
    else
    {
      v66 = v604;
      v474 = *(void (**)(char *, char *, uint64_t))(v576 + 32);
      v474(v581, v584, v575);
      v67 = Logger.payments.unsafeMutableAddressor();
      v611(v66, v67, v610);
      v472 = *(void (**)(char *, char *, uint64_t))(v576 + 16);
      v472(v579, v581, v575);
      v473 = (*(unsigned __int8 *)(v576 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v576 + 80);
      v478 = 7;
      v479 = swift_allocObject();
      v474((char *)(v479 + v473), v579, v575);
      v486 = Logger.logObject.getter();
      v487 = static os_log_type_t.debug.getter();
      v662[3] = 12;
      UnsignedInteger<>.init<A>(_:)();
      v475 = v663;
      v476 = 17;
      v481 = swift_allocObject();
      *(_BYTE *)(v481 + 16) = 32;
      v482 = swift_allocObject();
      *(_BYTE *)(v482 + 16) = 8;
      v477 = 32;
      v68 = swift_allocObject();
      v69 = v479;
      v480 = v68;
      *(_QWORD *)(v68 + 16) = partial apply for implicit closure #3 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
      *(_QWORD *)(v68 + 24) = v69;
      v70 = swift_allocObject();
      v71 = v480;
      v484 = v70;
      *(_QWORD *)(v70 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v70 + 24) = v71;
      v483 = _allocateUninitializedArray<A>(_:)();
      v485 = v72;
      swift_retain();
      v73 = v481;
      v74 = v485;
      *v485 = partial apply for closure #1 in OSLogArguments.append(_:);
      v74[1] = v73;
      swift_retain();
      v75 = v482;
      v76 = v485;
      v485[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v76[3] = v75;
      swift_retain();
      v77 = v484;
      v78 = v485;
      v485[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v78[5] = v77;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v486, (os_log_type_t)v487))
      {
        v465 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v464 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v466 = createStorage<A>(capacity:type:)(0);
        v467 = createStorage<A>(capacity:type:)(1);
        v468 = &v646;
        v646 = v465;
        v469 = &v645;
        v645 = v466;
        v470 = &v644;
        v644 = v467;
        serialize(_:at:)(2, &v646);
        serialize(_:at:)(1, v468);
        v79 = v527;
        v642 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v643 = v481;
        closure #1 in osLogInternal(_:log:type:)(&v642, (uint64_t)v468, (uint64_t)v469, (uint64_t)v470);
        v471 = v79;
        if (v79)
        {
          __break(1u);
        }
        else
        {
          v642 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v643 = v482;
          closure #1 in osLogInternal(_:log:type:)(&v642, (uint64_t)&v646, (uint64_t)&v645, (uint64_t)&v644);
          v462 = 0;
          v642 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v643 = v484;
          closure #1 in osLogInternal(_:log:type:)(&v642, (uint64_t)&v646, (uint64_t)&v645, (uint64_t)&v644);
          v461 = 0;
          _os_log_impl(&dword_24701B000, v486, (os_log_type_t)v487, "#Transformer payee contact in USO parse as ContactQuery is: %s", v465, v475);
          destroyStorage<A>(_:count:)(v466, 0, v464);
          destroyStorage<A>(_:count:)(v467, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v465, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          v463 = v461;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        v463 = v527;
      }
      v455 = v463;

      v542(v604, v610);
      v456 = v589[3];
      v457 = v589[4];
      __swift_project_boxed_opaque_existential_1(v589, v456);
      v451 = _allocateUninitializedArray<A>(_:)();
      v472(v80, v581, v575);
      v81 = v451;
      _finalizeUninitializedArray<A>(_:)();
      v454 = v81;
      v452 = SiriKitContactResolver.defaultConfig.unsafeMutableAddressor();
      v453 = v662;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v572 + 16))(v574, v452, v571);
      swift_endAccess();
      v82 = v455;
      v83 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v457 + 16))(v454, v574, v456);
      v458 = (uint64_t)v82;
      v459 = v83;
      v460 = v82;
      if (v82)
      {
        v204 = v460;
        v205 = 0;
        v206 = 0;
        (*(void (**)(char *, uint64_t))(v572 + 8))(v574, v571);
        swift_bridgeObjectRelease();

        v449 = v205;
        v450 = v206;
      }
      else
      {
        v448 = v459;
        (*(void (**)(char *, uint64_t))(v572 + 8))(v574, v571);
        swift_bridgeObjectRelease();
        v449 = v448;
        v450 = v458;
      }
      v84 = v602;
      v433 = (void *)v450;
      v434 = v449;
      v661 = v449;
      v85 = Logger.payments.unsafeMutableAddressor();
      v611(v84, v85, v610);
      swift_bridgeObjectRetain();
      v438 = 7;
      v439 = swift_allocObject();
      *(_QWORD *)(v439 + 16) = v434;
      v446 = Logger.logObject.getter();
      v447 = static os_log_type_t.debug.getter();
      v659 = 12;
      UnsignedInteger<>.init<A>(_:)();
      v435 = v660;
      v436 = 17;
      v441 = swift_allocObject();
      *(_BYTE *)(v441 + 16) = 32;
      v442 = swift_allocObject();
      *(_BYTE *)(v442 + 16) = 8;
      v437 = 32;
      v86 = swift_allocObject();
      v87 = v439;
      v440 = v86;
      *(_QWORD *)(v86 + 16) = partial apply for implicit closure #4 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
      *(_QWORD *)(v86 + 24) = v87;
      v88 = swift_allocObject();
      v89 = v440;
      v444 = v88;
      *(_QWORD *)(v88 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v88 + 24) = v89;
      v443 = _allocateUninitializedArray<A>(_:)();
      v445 = v90;
      swift_retain();
      v91 = v441;
      v92 = v445;
      *v445 = partial apply for closure #1 in OSLogArguments.append(_:);
      v92[1] = v91;
      swift_retain();
      v93 = v442;
      v94 = v445;
      v445[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v94[3] = v93;
      swift_retain();
      v95 = v444;
      v96 = v445;
      v445[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v96[5] = v95;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v446, (os_log_type_t)v447))
      {
        v426 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v425 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v427 = createStorage<A>(capacity:type:)(0);
        v428 = createStorage<A>(capacity:type:)(1);
        v429 = &v651;
        v651 = v426;
        v430 = &v650;
        v650 = v427;
        v431 = &v649;
        v649 = v428;
        serialize(_:at:)(2, &v651);
        serialize(_:at:)(1, v429);
        v97 = v433;
        v647 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v648 = v441;
        closure #1 in osLogInternal(_:log:type:)(&v647, (uint64_t)v429, (uint64_t)v430, (uint64_t)v431);
        v432 = v97;
        if (v97)
        {
          __break(1u);
        }
        else
        {
          v647 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v648 = v442;
          closure #1 in osLogInternal(_:log:type:)(&v647, (uint64_t)&v651, (uint64_t)&v650, (uint64_t)&v649);
          v423 = 0;
          v647 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v648 = v444;
          closure #1 in osLogInternal(_:log:type:)(&v647, (uint64_t)&v651, (uint64_t)&v650, (uint64_t)&v649);
          v422 = 0;
          _os_log_impl(&dword_24701B000, v446, (os_log_type_t)v447, "#Transformer SiriKitContactResolver found matches for payee in USO parse: %s", v426, v435);
          destroyStorage<A>(_:count:)(v427, 0, v425);
          destroyStorage<A>(_:count:)(v428, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v426, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          v424 = v422;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        v424 = v433;
      }
      v421 = v424;

      v542(v602, v610);
      swift_bridgeObjectRetain();
      if (v434)
      {
        v420 = v434;
        v417 = v434;
        swift_bridgeObjectRetain();
        v416 = v652;
        v652[0] = v417;
        v415 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
        lazy protocol witness table accessor for type [INPerson] and conformance [A]();
        Collection.first.getter();
        outlined destroy of [SFCardSection]();
        v418 = v652[1];
        swift_bridgeObjectRelease();
        v419 = v418;
      }
      else
      {
        v419 = 0;
      }
      v98 = v600;
      v99 = *(void **)(v528 + 16);
      *(_QWORD *)(v528 + 16) = v419;

      v100 = Logger.payments.unsafeMutableAddressor();
      v611(v98, v100, v610);
      swift_retain();
      v413 = Logger.logObject.getter();
      v414 = static os_log_type_t.debug.getter();
      v657[1] = (_BYTE *)12;
      UnsignedInteger<>.init<A>(_:)();
      v403 = v658;
      v404 = 17;
      v406 = 7;
      v408 = swift_allocObject();
      *(_BYTE *)(v408 + 16) = 32;
      v409 = swift_allocObject();
      *(_BYTE *)(v409 + 16) = 8;
      v405 = 32;
      v101 = swift_allocObject();
      v102 = v528;
      v407 = v101;
      *(_QWORD *)(v101 + 16) = partial apply for implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
      *(_QWORD *)(v101 + 24) = v102;
      v103 = swift_allocObject();
      v104 = v407;
      v411 = v103;
      *(_QWORD *)(v103 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v103 + 24) = v104;
      v410 = _allocateUninitializedArray<A>(_:)();
      v412 = v105;
      swift_retain();
      v106 = v408;
      v107 = v412;
      *v412 = partial apply for closure #1 in OSLogArguments.append(_:);
      v107[1] = v106;
      swift_retain();
      v108 = v409;
      v109 = v412;
      v412[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v109[3] = v108;
      swift_retain();
      v110 = v411;
      v111 = v412;
      v412[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v111[5] = v110;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v413, (os_log_type_t)v414))
      {
        v396 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v395 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v397 = createStorage<A>(capacity:type:)(0);
        v398 = createStorage<A>(capacity:type:)(1);
        v399 = v657;
        v657[0] = v396;
        v400 = &v656;
        v656 = v397;
        v401 = &v655;
        v655 = v398;
        serialize(_:at:)(2, v657);
        serialize(_:at:)(1, v399);
        v112 = v421;
        v653 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v654 = v408;
        closure #1 in osLogInternal(_:log:type:)(&v653, (uint64_t)v399, (uint64_t)v400, (uint64_t)v401);
        v402 = v112;
        if (v112)
        {
          __break(1u);
        }
        else
        {
          v653 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v654 = v409;
          closure #1 in osLogInternal(_:log:type:)(&v653, (uint64_t)v657, (uint64_t)&v656, (uint64_t)&v655);
          v393 = 0;
          v653 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v654 = v411;
          closure #1 in osLogInternal(_:log:type:)(&v653, (uint64_t)v657, (uint64_t)&v656, (uint64_t)&v655);
          v392 = 0;
          _os_log_impl(&dword_24701B000, v413, (os_log_type_t)v414, "#Transformer resolved payee from matches as %s", v396, v403);
          destroyStorage<A>(_:count:)(v397, 0, v395);
          destroyStorage<A>(_:count:)(v398, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v396, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          v394 = v392;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        v394 = v421;
      }
      v391 = v394;

      v542(v600, v610);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v576 + 8))(v581, v575);
      v488 = v391;
    }
    v389 = v488;
    v390 = MEMORY[0x2495716D8]();
    if (v390)
    {
      v388 = v390;
      v385 = v390;
      v678 = v390;
      v386 = MEMORY[0x249571888]();
      if (v386)
      {
        v384 = v386;
        v381 = v386;
        v382 = CodeGenBase.entity.getter();
        swift_release();
        v383 = v382;
      }
      else
      {
        v383 = 0;
      }
      v378 = v383;
      v377 = default argument 1 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      default argument 2 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      v375 = v113;
      v376 = default argument 3 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      v114 = default argument 4 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      v677 = static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)(v378, v377, v375, v376, v114);
      v379 = *(float *)&v677;
      v380 = BYTE4(v677);
      swift_release();
      if ((v380 & 1) == 0)
      {
        v374 = v379;
        v372 = v379;
        v676 = v379;
        v675 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        v373 = MEMORY[0x249571894]();
        if (v373)
        {
          v371 = v373;
          v368 = v373;
          object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("name", 4uLL, 1)._object;
          v369 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
          swift_bridgeObjectRelease();
          swift_release();
          if (v369)
          {
            v366 = v369;
            v664 = v369;
            v364 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoIdentifier]);
            lazy protocol witness table accessor for type [UsoIdentifier] and conformance [A]();
            v115 = v389;
            result = Sequence.first(where:)();
            v365 = v115;
            if (v115)
            {
              __break(1u);
              return result;
            }
            outlined destroy of [SFCardSection]();
            v362 = type metadata accessor for UsoIdentifier();
            v363 = *(_QWORD *)(v362 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t))(v363 + 48))(v570, 1) != 1)
            {
              v357 = UsoIdentifier.value.getter();
              v358 = v117;
              (*(void (**)(uint64_t, uint64_t))(v363 + 8))(v570, v362);
              v359 = v357;
              v360 = v358;
              v361 = v365;
LABEL_83:
              v354 = v361;
              v355 = v360;
              v356 = v359;
              v673 = v359;
              v674 = v360;
              v671._countAndFlagsBits = UsoEntity_common_CurrencyAmount.currencyIdentifier.getter();
              v671._object = v118;
              if (v118)
              {
                v672 = v671;
              }
              else
              {
                v672 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
                outlined destroy of String.UTF8View();
              }
              v119 = v598;
              v328 = v672;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v675 = v328;
              swift_bridgeObjectRelease();
              v120 = Logger.payments.unsafeMutableAddressor();
              v611(v119, v120, v610);
              v338 = 7;
              v330 = swift_allocObject();
              *(Swift::Float *)(v330 + 16) = v372;
              v337 = 32;
              v121 = swift_allocObject();
              v122 = v328._object;
              v332 = v121;
              *(_QWORD *)(v121 + 16) = v328._countAndFlagsBits;
              *(_QWORD *)(v121 + 24) = v122;
              swift_bridgeObjectRetain();
              v123 = swift_allocObject();
              v124 = v355;
              v339 = v123;
              *(_QWORD *)(v123 + 16) = v356;
              *(_QWORD *)(v123 + 24) = v124;
              v352 = Logger.logObject.getter();
              v353 = static os_log_type_t.debug.getter();
              v669[1] = (_BYTE *)v337;
              UnsignedInteger<>.init<A>(_:)();
              v329 = v670;
              v335 = 17;
              v341 = swift_allocObject();
              v334 = 32;
              *(_BYTE *)(v341 + 16) = 32;
              v342 = swift_allocObject();
              v336 = 8;
              *(_BYTE *)(v342 + 16) = 8;
              v125 = swift_allocObject();
              v126 = v330;
              v331 = v125;
              *(_QWORD *)(v125 + 16) = partial apply for implicit closure #7 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
              *(_QWORD *)(v125 + 24) = v126;
              v127 = swift_allocObject();
              v128 = v331;
              v343 = v127;
              *(_QWORD *)(v127 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
              *(_QWORD *)(v127 + 24) = v128;
              v344 = swift_allocObject();
              *(_BYTE *)(v344 + 16) = v334;
              v345 = swift_allocObject();
              *(_BYTE *)(v345 + 16) = v336;
              v129 = swift_allocObject();
              v130 = v332;
              v333 = v129;
              *(_QWORD *)(v129 + 16) = partial apply for specialized implicit closure #8 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
              *(_QWORD *)(v129 + 24) = v130;
              v131 = swift_allocObject();
              v132 = v333;
              v346 = v131;
              *(_QWORD *)(v131 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
              *(_QWORD *)(v131 + 24) = v132;
              v347 = swift_allocObject();
              *(_BYTE *)(v347 + 16) = v334;
              v348 = swift_allocObject();
              *(_BYTE *)(v348 + 16) = v336;
              v133 = swift_allocObject();
              v134 = v339;
              v340 = v133;
              *(_QWORD *)(v133 + 16) = partial apply for implicit closure #9 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
              *(_QWORD *)(v133 + 24) = v134;
              v135 = swift_allocObject();
              v136 = v340;
              v350 = v135;
              *(_QWORD *)(v135 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
              *(_QWORD *)(v135 + 24) = v136;
              v349 = _allocateUninitializedArray<A>(_:)();
              v351 = v137;
              swift_retain();
              v138 = v341;
              v139 = v351;
              *v351 = partial apply for closure #1 in OSLogArguments.append(_:);
              v139[1] = v138;
              swift_retain();
              v140 = v342;
              v141 = v351;
              v351[2] = partial apply for closure #1 in OSLogArguments.append(_:);
              v141[3] = v140;
              swift_retain();
              v142 = v343;
              v143 = v351;
              v351[4] = partial apply for closure #1 in OSLogArguments.append(_:);
              v143[5] = v142;
              swift_retain();
              v144 = v344;
              v145 = v351;
              v351[6] = partial apply for closure #1 in OSLogArguments.append(_:);
              v145[7] = v144;
              swift_retain();
              v146 = v345;
              v147 = v351;
              v351[8] = partial apply for closure #1 in OSLogArguments.append(_:);
              v147[9] = v146;
              swift_retain();
              v148 = v346;
              v149 = v351;
              v351[10] = partial apply for closure #1 in OSLogArguments.append(_:);
              v149[11] = v148;
              swift_retain();
              v150 = v347;
              v151 = v351;
              v351[12] = partial apply for closure #1 in OSLogArguments.append(_:);
              v151[13] = v150;
              swift_retain();
              v152 = v348;
              v153 = v351;
              v351[14] = partial apply for closure #1 in OSLogArguments.append(_:);
              v153[15] = v152;
              swift_retain();
              v154 = v350;
              v155 = v351;
              v351[16] = partial apply for closure #1 in OSLogArguments.append(_:);
              v155[17] = v154;
              _finalizeUninitializedArray<A>(_:)();
              swift_bridgeObjectRelease();
              if (os_log_type_enabled(v352, (os_log_type_t)v353))
              {
                v321 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
                v320 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
                v322 = createStorage<A>(capacity:type:)(0);
                v323 = createStorage<A>(capacity:type:)(3);
                v324 = v669;
                v669[0] = v321;
                v325 = &v668;
                v668 = v322;
                v326 = &v667;
                v667 = v323;
                serialize(_:at:)(2, v669);
                serialize(_:at:)(3, v324);
                v156 = v354;
                v665 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                v666 = v341;
                closure #1 in osLogInternal(_:log:type:)(&v665, (uint64_t)v324, (uint64_t)v325, (uint64_t)v326);
                v327 = v156;
                if (v156)
                {
                  __break(1u);
                }
                else
                {
                  v665 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v666 = v342;
                  closure #1 in osLogInternal(_:log:type:)(&v665, (uint64_t)v669, (uint64_t)&v668, (uint64_t)&v667);
                  v318 = 0;
                  v665 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v666 = v343;
                  closure #1 in osLogInternal(_:log:type:)(&v665, (uint64_t)v669, (uint64_t)&v668, (uint64_t)&v667);
                  v317 = 0;
                  v665 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v666 = v344;
                  closure #1 in osLogInternal(_:log:type:)(&v665, (uint64_t)v669, (uint64_t)&v668, (uint64_t)&v667);
                  v316 = 0;
                  v665 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v666 = v345;
                  closure #1 in osLogInternal(_:log:type:)(&v665, (uint64_t)v669, (uint64_t)&v668, (uint64_t)&v667);
                  v315 = 0;
                  v665 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v666 = v346;
                  closure #1 in osLogInternal(_:log:type:)(&v665, (uint64_t)v669, (uint64_t)&v668, (uint64_t)&v667);
                  v314 = 0;
                  v665 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v666 = v347;
                  closure #1 in osLogInternal(_:log:type:)(&v665, (uint64_t)v669, (uint64_t)&v668, (uint64_t)&v667);
                  v313 = 0;
                  v665 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v666 = v348;
                  closure #1 in osLogInternal(_:log:type:)(&v665, (uint64_t)v669, (uint64_t)&v668, (uint64_t)&v667);
                  v312 = 0;
                  v665 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v666 = v350;
                  closure #1 in osLogInternal(_:log:type:)(&v665, (uint64_t)v669, (uint64_t)&v668, (uint64_t)&v667);
                  v311 = 0;
                  _os_log_impl(&dword_24701B000, v352, (os_log_type_t)v353, "#Transformer found currency, %s %s. Raw usoIdentifier was %s", v321, v329);
                  destroyStorage<A>(_:count:)(v322, 0, v320);
                  destroyStorage<A>(_:count:)(v323, 3, MEMORY[0x24BEE4AD8] + 8);
                  MEMORY[0x2495725CC](v321, MEMORY[0x24BEE4260]);
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  v319 = v311;
                }
              }
              else
              {
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                v319 = v354;
              }
              v309 = v319;

              v542(v598, v610);
              v310 = String.isEmpty.getter();
              swift_bridgeObjectRelease();
              if ((v310 & 1) != 0)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                v307 = 0;
                v308 = type metadata accessor for INCurrencyAmount();
                type metadata accessor for NSDecimalNumber();
                NSDecimalNumber.__allocating_init(value:)((NSDecimalNumber *)LODWORD(v372), v372);
                isa = INCurrencyAmount.__allocating_init(amount:currencyCode:)(v157, v328).super.isa;
                v159 = v709;
                v709 = isa;

              }
              swift_bridgeObjectRelease();
              outlined destroy of String.UTF8View();
              swift_release();
              v387 = v309;
              goto LABEL_96;
            }
            outlined destroy of UsoIdentifier?(v570);
            v370 = v365;
          }
          else
          {
            v370 = v389;
          }
        }
        else
        {
          v370 = v389;
        }
        v359 = 0;
        v360 = 0;
        v361 = v370;
        goto LABEL_83;
      }
      swift_release();
      v387 = v389;
    }
    else
    {
      v387 = v389;
    }
LABEL_96:
    v304 = v387;
    v305 = MEMORY[0x2495716B4]();
    v306 = v160;
    if (v160)
    {
      v302 = v305;
      v303 = v306;
      v301 = v306;
      v300 = v305;
      v679 = v305;
      v680 = v306;
      swift_bridgeObjectRetain();
      v707 = (objc_class *)v300;
      v708 = v301;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    outlined destroy of ContactQuery?((uint64_t)v588);
    swift_release();
    v511 = v304;
    goto LABEL_99;
  }
  swift_release();
  v511 = v527;
LABEL_99:
  v280 = v511;
  type metadata accessor for INSendPaymentIntent();
  v281 = &v705;
  v289 = 32;
  swift_beginAccess();
  v282 = *(id *)(v528 + 16);
  v161 = v282;
  swift_endAccess();
  v283 = v709;
  v162 = v709;
  v284 = v707;
  v285 = v708;
  swift_bridgeObjectRetain();
  v720.value.super.isa = (Class)v282;
  v720.is_nil = (char)v283;
  v721.value.super.isa = v284;
  v721.is_nil = v285;
  v164.super.super.isa = INSendPaymentIntent.__allocating_init(payee:currencyAmount:note:)(v720, v721, v163).super.super.isa;
  v165 = v596;
  v286 = v164.super.super.isa;
  v704 = v164.super.super.isa;
  v166 = Logger.payments.unsafeMutableAddressor();
  v611(v165, v166, v610);
  v167 = v286;
  v290 = 7;
  v291 = swift_allocObject();
  *(_QWORD *)(v291 + 16) = v286;
  v298 = Logger.logObject.getter();
  v299 = static os_log_type_t.debug.getter();
  v702 = 12;
  UnsignedInteger<>.init<A>(_:)();
  v287 = v703;
  v288 = 17;
  v293 = swift_allocObject();
  *(_BYTE *)(v293 + 16) = 32;
  v294 = swift_allocObject();
  *(_BYTE *)(v294 + 16) = 8;
  v168 = swift_allocObject();
  v169 = v291;
  v292 = v168;
  *(_QWORD *)(v168 + 16) = partial apply for implicit closure #10 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  *(_QWORD *)(v168 + 24) = v169;
  v170 = swift_allocObject();
  v171 = v292;
  v296 = v170;
  *(_QWORD *)(v170 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v170 + 24) = v171;
  v295 = _allocateUninitializedArray<A>(_:)();
  v297 = v172;
  swift_retain();
  v173 = v293;
  v174 = v297;
  *v297 = partial apply for closure #1 in OSLogArguments.append(_:);
  v174[1] = v173;
  swift_retain();
  v175 = v294;
  v176 = v297;
  v297[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v176[3] = v175;
  swift_retain();
  v177 = v296;
  v178 = v297;
  v297[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v178[5] = v177;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v298, (os_log_type_t)v299))
  {
    v273 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v272 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v274 = createStorage<A>(capacity:type:)(0);
    v275 = createStorage<A>(capacity:type:)(1);
    v276 = &v687;
    v687 = v273;
    v277 = &v686;
    v686 = v274;
    v278 = &v685;
    v685 = v275;
    serialize(_:at:)(2, &v687);
    serialize(_:at:)(1, v276);
    v179 = v280;
    v683 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v684 = v293;
    closure #1 in osLogInternal(_:log:type:)(&v683, (uint64_t)v276, (uint64_t)v277, (uint64_t)v278);
    v279 = v179;
    if (v179)
    {
      __break(1u);
    }
    else
    {
      v683 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v684 = v294;
      closure #1 in osLogInternal(_:log:type:)(&v683, (uint64_t)&v687, (uint64_t)&v686, (uint64_t)&v685);
      v270 = 0;
      v683 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v684 = v296;
      closure #1 in osLogInternal(_:log:type:)(&v683, (uint64_t)&v687, (uint64_t)&v686, (uint64_t)&v685);
      v269 = 0;
      _os_log_impl(&dword_24701B000, v298, (os_log_type_t)v299, "#Transformer returning intent %s", v273, v287);
      destroyStorage<A>(_:count:)(v274, 0, v272);
      destroyStorage<A>(_:count:)(v275, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v273, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v271 = v269;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v271 = v280;
  }
  v267 = v271;

  v542(v596, v610);
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v268 = v700;
  swift_release();
  if (v268
    && (v266 = v268,
        v264 = v268,
        v265 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter(),
        swift_release(),
        v265))
  {
    v263 = v265;
    v260 = v265;
    *(_QWORD *)&v261 = UsoEntity_common_App.appIdentifier.getter();
    *((_QWORD *)&v261 + 1) = v180;
    swift_release();
    v262 = v261;
  }
  else
  {
    v262 = 0uLL;
  }
  v699 = v262;
  swift_retain();
  if (*((_QWORD *)&v699 + 1))
  {
    v701 = v699;
  }
  else
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    v259 = v698;
    v181 = swift_release();
    if (!v259)
      goto LABEL_134;
    v258 = v259;
    v256 = v259;
    v257 = MEMORY[0x2495716CC](v181);
    swift_release();
    if (!v257)
      goto LABEL_134;
    v255 = v257;
    v253 = v257;
    v254 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
    swift_release();
    if (v254)
    {
      v252 = v254;
      v249 = v254;
      *(_QWORD *)&v250 = UsoEntity_common_App.appIdentifier.getter();
      *((_QWORD *)&v250 + 1) = v182;
      swift_release();
      v251 = v250;
    }
    else
    {
LABEL_134:
      v251 = 0uLL;
    }
    v697 = v251;
    swift_retain();
    if (*((_QWORD *)&v697 + 1))
    {
      v701 = v697;
    }
    else
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      v248 = v696;
      v183 = swift_release();
      if (!v248)
        goto LABEL_133;
      v247 = v248;
      v245 = v248;
      v246 = MEMORY[0x2495716C0](v183);
      swift_release();
      if (v246
        && (v244 = v246,
            v242 = v246,
            v243 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter(),
            swift_release(),
            v243))
      {
        v241 = v243;
        v240 = v243;
        *(_QWORD *)&v701 = UsoEntity_common_App.appIdentifier.getter();
        *((_QWORD *)&v701 + 1) = v184;
        swift_release();
      }
      else
      {
LABEL_133:
        v701 = 0uLL;
      }
      outlined destroy of String.UTF8View();
    }
    swift_release();
    outlined destroy of String.UTF8View();
  }
  swift_release();
  v239 = v701;
  if (*((_QWORD *)&v701 + 1))
  {
    v238 = v239;
    v185 = v594;
    v223 = v239;
    v695 = v239;
    v186 = v286;
    v220 = Constants.intentAppIDAssociatedKey.unsafeMutableAddressor();
    swift_bridgeObjectRetain();
    v222 = (id)MEMORY[0x24957220C](v223, *((_QWORD *)&v223 + 1));
    swift_bridgeObjectRelease();
    v221 = &v694;
    v226 = 32;
    swift_beginAccess();
    objc_setAssociatedObject(v286, v220, v222, (void *)0x301);
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v187 = Logger.payments.unsafeMutableAddressor();
    v611(v185, v187, v610);
    swift_bridgeObjectRetain();
    v227 = 7;
    v188 = swift_allocObject();
    v189 = *((_QWORD *)&v223 + 1);
    v228 = v188;
    *(_QWORD *)(v188 + 16) = v223;
    *(_QWORD *)(v188 + 24) = v189;
    v235 = Logger.logObject.getter();
    v236 = static os_log_type_t.debug.getter();
    v692[1] = (_BYTE *)12;
    UnsignedInteger<>.init<A>(_:)();
    v224 = v693;
    v225 = 17;
    v230 = swift_allocObject();
    *(_BYTE *)(v230 + 16) = 32;
    v231 = swift_allocObject();
    *(_BYTE *)(v231 + 16) = 8;
    v190 = swift_allocObject();
    v191 = v228;
    v229 = v190;
    *(_QWORD *)(v190 + 16) = partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    *(_QWORD *)(v190 + 24) = v191;
    v192 = swift_allocObject();
    v193 = v229;
    v233 = v192;
    *(_QWORD *)(v192 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v192 + 24) = v193;
    v232 = _allocateUninitializedArray<A>(_:)();
    v234 = v194;
    swift_retain();
    v195 = v230;
    v196 = v234;
    *v234 = partial apply for closure #1 in OSLogArguments.append(_:);
    v196[1] = v195;
    swift_retain();
    v197 = v231;
    v198 = v234;
    v234[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v198[3] = v197;
    swift_retain();
    v199 = v233;
    v200 = v234;
    v234[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v200[5] = v199;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v235, (os_log_type_t)v236))
    {
      v213 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v212 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v214 = createStorage<A>(capacity:type:)(0);
      v215 = createStorage<A>(capacity:type:)(1);
      v216 = v692;
      v692[0] = v213;
      v217 = &v691;
      v691 = v214;
      v218 = &v690;
      v690 = v215;
      serialize(_:at:)(2, v692);
      serialize(_:at:)(1, v216);
      v201 = v267;
      v688 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v689 = v230;
      closure #1 in osLogInternal(_:log:type:)(&v688, (uint64_t)v216, (uint64_t)v217, (uint64_t)v218);
      v219 = v201;
      if (v201)
      {
        __break(1u);
      }
      else
      {
        v688 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v689 = v231;
        closure #1 in osLogInternal(_:log:type:)(&v688, (uint64_t)v692, (uint64_t)&v691, (uint64_t)&v690);
        v210 = 0;
        v688 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v689 = v233;
        closure #1 in osLogInternal(_:log:type:)(&v688, (uint64_t)v692, (uint64_t)&v691, (uint64_t)&v690);
        v209 = 0;
        _os_log_impl(&dword_24701B000, v235, (os_log_type_t)v236, "#Transformer found appIdentifier to use for intent as %s", v213, v224);
        destroyStorage<A>(_:count:)(v214, 0, v212);
        destroyStorage<A>(_:count:)(v215, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v213, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        v211 = v209;
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      v211 = v267;
    }
    v208 = v211;

    v542(v594, v610);
    swift_bridgeObjectRelease();
    v237 = v208;
  }
  else
  {
    v237 = v267;
  }
  v207 = v237;
  v202 = v286;
  v203 = v286;
  *v567 = v286;

  outlined destroy of String.UTF8View();
  outlined destroy of SFRichText?((id *)&v709);
  return swift_release();
}

{
  void *v1;
  uint64_t v2;
  Class *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  char *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  void *v57;
  id v58;
  id v59;
  void *v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  void *v79;
  char *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  void *v97;
  char *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  void *v112;
  float v113;
  float v114;
  void *v115;
  uint64_t result;
  uint64_t v117;
  void *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD *v155;
  void *v156;
  NSDecimalNumber *v157;
  Class isa;
  Class v159;
  uint64_t v160;
  id v161;
  objc_class *v162;
  Swift::String_optional v163;
  INRequestPaymentIntent v164;
  char *v165;
  uint64_t v166;
  objc_class *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  objc_class *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  _QWORD *v196;
  void *v197;
  objc_class *v198;
  Class v199;
  id v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  void *v204;
  void *v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  uint8_t *v209;
  uint64_t v210;
  uint64_t v211;
  _BYTE **v212;
  uint64_t *v213;
  uint64_t *v214;
  void *v215;
  uint64_t *v216;
  id v217;
  uint32_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  NSObject *v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  __int128 *v236;
  uint64_t v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  void *v260;
  uint64_t v261;
  void *v262;
  uint64_t v263;
  void *v264;
  uint64_t v265;
  uint8_t *v266;
  uint64_t v267;
  uint64_t v268;
  _BYTE **v269;
  uint64_t *v270;
  uint64_t *v271;
  void *v272;
  void *v273;
  char *v274;
  id v275;
  Class v276;
  objc_class *v277;
  _BOOL8 v278;
  Class v279;
  uint32_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  NSObject *v291;
  int v292;
  uint64_t v293;
  _BOOL8 v294;
  uint64_t v295;
  uint64_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  void *v302;
  int v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  void *v312;
  uint64_t v313;
  uint8_t *v314;
  uint64_t v315;
  uint64_t v316;
  _BYTE **v317;
  uint64_t *v318;
  uint64_t *v319;
  void *v320;
  Swift::String v321;
  uint32_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  NSObject *v345;
  int v346;
  void *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  void *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  void *v358;
  uint64_t v359;
  void *object;
  uint64_t v361;
  uint64_t v362;
  void *v363;
  uint64_t v364;
  Swift::Float v365;
  uint64_t v366;
  Swift::Float v367;
  float v368;
  float v369;
  float v370;
  uint64_t v371;
  Swift::Float v372;
  int v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  void *v380;
  uint64_t v381;
  void *v382;
  uint64_t v383;
  void *v384;
  void *v385;
  uint64_t v386;
  void *v387;
  uint64_t v388;
  uint8_t *v389;
  uint64_t v390;
  uint64_t v391;
  _BYTE **v392;
  uint64_t *v393;
  uint64_t *v394;
  void *v395;
  uint32_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  _QWORD *v405;
  NSObject *v406;
  int v407;
  uint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  void *v414;
  void *v415;
  uint64_t v416;
  void *v417;
  uint64_t v418;
  uint8_t *v419;
  uint64_t v420;
  uint64_t v421;
  _BYTE **v422;
  uint64_t *v423;
  uint64_t *v424;
  void *v425;
  void *v426;
  uint64_t v427;
  uint32_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  _QWORD *v438;
  NSObject *v439;
  int v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  _QWORD *v446;
  uint64_t v447;
  void *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  void *v453;
  void *v454;
  uint64_t v455;
  void *v456;
  uint64_t v457;
  uint8_t *v458;
  uint64_t v459;
  uint64_t v460;
  _BYTE **v461;
  uint64_t *v462;
  uint64_t *v463;
  void *v464;
  void (*v465)(char *, char *, uint64_t);
  unint64_t v466;
  void (*v467)(char *, char *, uint64_t);
  uint32_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  _QWORD *v478;
  NSObject *v479;
  int v480;
  void *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t (*v502)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v503;
  void *v504;
  uint64_t v505;
  uint64_t v506;
  id v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  _BOOL8 v511;
  id v512;
  id v513;
  id v514;
  id v515;
  id v516;
  id v517;
  id v518;
  id v519;
  void *v520;
  uint64_t v521;
  uint64_t v522;
  void *v523;
  uint64_t v524;
  void *v525;
  uint64_t v526;
  uint8_t *v527;
  uint64_t v528;
  uint64_t v529;
  _BYTE **v530;
  uint64_t *v531;
  uint64_t *v532;
  void *v533;
  void *v534;
  void (*v535)(char *, uint64_t);
  uint32_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  _QWORD *v546;
  NSObject *v547;
  int v548;
  void *v549;
  uint64_t v550;
  void *v551;
  uint64_t v552;
  uint8_t *v553;
  uint64_t v554;
  uint64_t v555;
  _BYTE **v556;
  uint64_t *v557;
  uint64_t *v558;
  void *v559;
  Class *v560;
  void *v561;
  unint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  unint64_t v566;
  char *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  unint64_t v571;
  char *v572;
  unint64_t v573;
  char *v574;
  uint64_t v575;
  unint64_t v576;
  char *v577;
  unint64_t v578;
  char *v579;
  unint64_t v580;
  char *v581;
  _QWORD *v582;
  id v583;
  uint64_t v584;
  uint64_t v585;
  unint64_t v586;
  char *v587;
  unint64_t v588;
  char *v589;
  unint64_t v590;
  char *v591;
  unint64_t v592;
  char *v593;
  unint64_t v594;
  char *v595;
  unint64_t v596;
  char *v597;
  unint64_t v598;
  char *v599;
  unint64_t v600;
  char *v601;
  _QWORD *v602;
  uint64_t v603;
  void (*v604)(char *, uint64_t, uint64_t);
  unint64_t v605;
  unint64_t v606;
  uint64_t *v607;
  unint64_t v608;
  uint32_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  _QWORD *v619;
  uint64_t v620;
  NSObject *v621;
  int v622;
  uint64_t (*v623)(uint64_t, uint64_t, uint64_t);
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  _BYTE *v627;
  uint64_t (*v628)(uint64_t, uint64_t, uint64_t);
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  _BYTE *v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t (*v635)(uint64_t, uint64_t, uint64_t);
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  _BYTE *v639;
  uint64_t (*v640)(uint64_t, uint64_t, uint64_t);
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  _BYTE *v644;
  _QWORD v645[2];
  uint64_t (*v646)(uint64_t, uint64_t, uint64_t);
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  _BYTE *v650[2];
  uint32_t v651;
  uint64_t v652;
  uint32_t v653;
  uint64_t v654;
  _QWORD v655[4];
  uint32_t v656;
  uint64_t v657;
  uint64_t (*v658)(uint64_t, uint64_t, uint64_t);
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  _BYTE *v662[2];
  uint32_t v663;
  Swift::String v664;
  Swift::String v665;
  uint64_t v666;
  uint64_t v667;
  Swift::String v668;
  Swift::Float v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t (*v676)(uint64_t, uint64_t, uint64_t);
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  _BYTE *v680;
  uint64_t (*v681)(uint64_t, uint64_t, uint64_t);
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  _BYTE *v685[2];
  uint32_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint32_t v696;
  Class v697;
  char v698;
  uint64_t v699;
  objc_class *v700;
  _BOOL8 v701;
  Class v702;
  uint64_t v703;
  uint64_t v704;
  uint32_t v705;
  uint64_t v706;
  uint32_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  char *v711;
  char *v712;
  INPerson_optional v713;
  INCurrencyAmount_optional v714;

  v2 = MEMORY[0x24BDAC7A8](a1);
  v560 = v3;
  v584 = v2;
  v583 = v4;
  v582 = v5;
  v561 = v1;
  v712 = 0;
  v711 = 0;
  v710 = 0;
  v709 = 0;
  v708 = 0;
  v703 = 0;
  v697 = 0;
  v688 = 0;
  v675 = 0;
  v672 = 0;
  v673 = 0;
  v671 = 0;
  v669 = 0.0;
  v668._countAndFlagsBits = 0;
  v668._object = 0;
  v666 = 0;
  v667 = 0;
  v654 = 0;
  v634 = 0;
  v633 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  v562 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v563 = (uint64_t)&v200 - v562;
  v575 = 0;
  v564 = type metadata accessor for ContactResolverConfig();
  v565 = *(_QWORD *)(v564 - 8);
  v566 = (*(_QWORD *)(v565 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v575);
  v567 = (char *)&v200 - v566;
  v568 = type metadata accessor for ContactQuery();
  v569 = *(_QWORD *)(v568 - 8);
  v570 = *(_QWORD *)(v569 + 64);
  v571 = (v570 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v568);
  v572 = (char *)&v200 - v571;
  v573 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v200 - v571);
  v574 = (char *)&v200 - v573;
  v712 = (char *)&v200 - v573;
  v576 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v575);
  v577 = (char *)&v200 - v576;
  v578 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v579 = (char *)&v200 - v578;
  v580 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v581 = (char *)&v200 - v580;
  v711 = (char *)&v200 - v580;
  v603 = type metadata accessor for Logger();
  v602 = *(_QWORD **)(v603 - 8);
  v585 = v602[8];
  v586 = (v585 + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = MEMORY[0x24BDAC7A8](v584);
  v587 = (char *)&v200 - v586;
  v588 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v589 = (char *)&v200 - v588;
  v590 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v591 = (char *)&v200 - v590;
  v592 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v593 = (char *)&v200 - v592;
  v594 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v595 = (char *)&v200 - v594;
  v596 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v597 = (char *)&v200 - v596;
  v598 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v599 = (char *)&v200 - v598;
  v600 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  v26 = (uint64_t *)MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v200 - v600;
  v601 = (char *)&v200 - v600;
  v611 = *v26;
  v710 = v611;
  v709 = v28;
  v708 = v29;
  v30 = Logger.payments.unsafeMutableAddressor();
  v604 = (void (*)(char *, uint64_t, uint64_t))v602[2];
  v604(v27, v30, v603);
  swift_retain();
  v621 = Logger.logObject.getter();
  v622 = static os_log_type_t.debug.getter();
  v607 = &v706;
  v706 = 12;
  v605 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v606 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v608 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v609 = v707;
  v610 = 17;
  v613 = 7;
  v615 = swift_allocObject();
  *(_BYTE *)(v615 + 16) = 32;
  v616 = swift_allocObject();
  *(_BYTE *)(v616 + 16) = 8;
  v612 = 32;
  v31 = swift_allocObject();
  v32 = v611;
  v614 = v31;
  *(_QWORD *)(v31 + 16) = partial apply for implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  *(_QWORD *)(v31 + 24) = v32;
  v33 = swift_allocObject();
  v34 = v614;
  v618 = v33;
  *(_QWORD *)(v33 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v33 + 24) = v34;
  v620 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v617 = _allocateUninitializedArray<A>(_:)();
  v619 = v35;
  swift_retain();
  v36 = v615;
  v37 = v619;
  *v619 = partial apply for closure #1 in OSLogArguments.append(_:);
  v37[1] = v36;
  swift_retain();
  v38 = v616;
  v39 = v619;
  v619[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v39[3] = v38;
  swift_retain();
  v40 = v618;
  v41 = v619;
  v619[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v41[5] = v40;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v621, (os_log_type_t)v622))
  {
    v553 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v552 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v554 = createStorage<A>(capacity:type:)(0);
    v555 = createStorage<A>(capacity:type:)(1);
    v556 = &v627;
    v627 = v553;
    v557 = &v626;
    v626 = v554;
    v558 = &v625;
    v625 = v555;
    serialize(_:at:)(2, &v627);
    serialize(_:at:)(1, v556);
    v42 = v561;
    v623 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v624 = v615;
    closure #1 in osLogInternal(_:log:type:)(&v623, (uint64_t)v556, (uint64_t)v557, (uint64_t)v558);
    v559 = v42;
    if (v42)
    {
      __break(1u);
    }
    else
    {
      v623 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v624 = v616;
      closure #1 in osLogInternal(_:log:type:)(&v623, (uint64_t)&v627, (uint64_t)&v626, (uint64_t)&v625);
      v550 = 0;
      v623 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v624 = v618;
      closure #1 in osLogInternal(_:log:type:)(&v623, (uint64_t)&v627, (uint64_t)&v626, (uint64_t)&v625);
      v549 = 0;
      _os_log_impl(&dword_24701B000, v621, (os_log_type_t)v622, "#Transformer for requestMoney_common_Payment task %s", v553, v609);
      destroyStorage<A>(_:count:)(v554, 0, v552);
      destroyStorage<A>(_:count:)(v555, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v553, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v551 = v549;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v551 = v561;
  }
  v43 = v599;
  v534 = v551;

  v535 = (void (*)(char *, uint64_t))v602[1];
  v535(v601, v603);
  v44 = Logger.payments.unsafeMutableAddressor();
  v604(v43, v44, v603);
  v45 = v583;
  v539 = 7;
  v540 = swift_allocObject();
  *(_QWORD *)(v540 + 16) = v583;
  v547 = Logger.logObject.getter();
  v548 = static os_log_type_t.debug.getter();
  v704 = 12;
  UnsignedInteger<>.init<A>(_:)();
  v536 = v705;
  v537 = 17;
  v542 = swift_allocObject();
  *(_BYTE *)(v542 + 16) = 32;
  v543 = swift_allocObject();
  *(_BYTE *)(v543 + 16) = 8;
  v538 = 32;
  v46 = swift_allocObject();
  v47 = v540;
  v541 = v46;
  *(_QWORD *)(v46 + 16) = partial apply for implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  *(_QWORD *)(v46 + 24) = v47;
  v48 = swift_allocObject();
  v49 = v541;
  v545 = v48;
  *(_QWORD *)(v48 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v48 + 24) = v49;
  v544 = _allocateUninitializedArray<A>(_:)();
  v546 = v50;
  swift_retain();
  v51 = v542;
  v52 = v546;
  *v546 = partial apply for closure #1 in OSLogArguments.append(_:);
  v52[1] = v51;
  swift_retain();
  v53 = v543;
  v54 = v546;
  v546[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v54[3] = v53;
  swift_retain();
  v55 = v545;
  v56 = v546;
  v546[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v56[5] = v55;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v547, (os_log_type_t)v548))
  {
    v527 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v526 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v528 = createStorage<A>(capacity:type:)(0);
    v529 = createStorage<A>(capacity:type:)(1);
    v530 = &v632;
    v632 = v527;
    v531 = &v631;
    v631 = v528;
    v532 = &v630;
    v630 = v529;
    serialize(_:at:)(2, &v632);
    serialize(_:at:)(1, v530);
    v57 = v534;
    v628 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v629 = v542;
    closure #1 in osLogInternal(_:log:type:)(&v628, (uint64_t)v530, (uint64_t)v531, (uint64_t)v532);
    v533 = v57;
    if (v57)
    {
      __break(1u);
    }
    else
    {
      v628 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v629 = v543;
      closure #1 in osLogInternal(_:log:type:)(&v628, (uint64_t)&v632, (uint64_t)&v631, (uint64_t)&v630);
      v524 = 0;
      v628 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v629 = v545;
      closure #1 in osLogInternal(_:log:type:)(&v628, (uint64_t)&v632, (uint64_t)&v631, (uint64_t)&v630);
      v523 = 0;
      _os_log_impl(&dword_24701B000, v547, (os_log_type_t)v548, "#Transformer for requestMoney_common_Payment previous intent is %s", v527, v536);
      destroyStorage<A>(_:count:)(v528, 0, v526);
      destroyStorage<A>(_:count:)(v529, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v527, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v525 = v523;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v525 = v534;
  }
  v520 = v525;

  v535(v599, v603);
  v521 = swift_allocObject();
  v522 = v521 + 16;
  v703 = v521 + 16;
  v58 = v583;
  if (v583)
  {
    v519 = v583;
    v518 = v583;
    v59 = objc_msgSend(v583, sel_payer);
    v60 = v518;
    *(_QWORD *)(v521 + 16) = v59;

  }
  else
  {
    *(_QWORD *)(v521 + 16) = 0;
  }
  v61 = v583;
  if (v583)
  {
    v517 = v583;
    v516 = v583;
    v702 = (Class)objc_msgSend(v583, sel_currencyAmount);

  }
  else
  {
    v702 = 0;
  }
  v62 = v583;
  if (v583)
  {
    v515 = v583;
    v513 = v583;
    v514 = objc_msgSend(v583, sel_note);
    if (v514)
    {
      v512 = v514;
      v507 = v514;
      v508 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v509 = v63;

      v510 = v508;
      v511 = v509;
    }
    else
    {
      v510 = 0;
      v511 = 0;
    }
    v700 = (objc_class *)v510;
    v701 = v511;

  }
  else
  {
    v700 = 0;
    v701 = 0;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v506 = v699;
  if (v699)
  {
    v505 = v506;
    v501 = v506;
    v675 = v506;
    swift_release();
    v502 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v569 + 56);
    v64 = v502(v581, 1, 1, v568);
    v503 = MEMORY[0x2495716CC](v64);
    if (v503 && (v500 = v503, v498 = v503, v499 = MEMORY[0x2495718C4](), swift_release(), v499))
    {
      v497 = v499;
      v494 = v499;
      v495 = CodeGenBase.entity.getter();
      swift_release();
      v496 = v495;
    }
    else
    {
      v496 = 0;
    }
    v492 = v496;
    type metadata accessor for UsoEntity_common_Person();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    v65 = swift_release();
    v493 = v674;
    if (v674)
    {
      v491 = v493;
      v488 = v493;
      v633 = v493;
      UsoEntity_common_Person.toContactQuery()();
      v502(v579, 0, 1, v568);
      outlined assign with take of ContactQuery?(v579, v581);
      swift_release();
    }
    else
    {
      v490 = MEMORY[0x2495716CC](v65);
      if (v490)
      {
        v489 = v490;
        v485 = v490;
        v486 = MEMORY[0x2495718C4]();
        swift_release();
        v487 = v486;
      }
      else
      {
        v487 = 0;
      }
      v484 = v487;
      if (v487)
      {
        v483 = v484;
        v482 = v484;
        v634 = v484;
        UsoEntity_common_Agent.toContactQuery()();
        v502(v579, 0, 1, v568);
        outlined assign with take of ContactQuery?(v579, v581);
        swift_release();
      }
    }
    outlined init with copy of ContactQuery?(v581, v577);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v569 + 48))(v577, 1, v568) == 1)
    {
      outlined destroy of ContactQuery?((uint64_t)v577);
      v481 = v520;
    }
    else
    {
      v66 = v597;
      v467 = *(void (**)(char *, char *, uint64_t))(v569 + 32);
      v467(v574, v577, v568);
      v67 = Logger.payments.unsafeMutableAddressor();
      v604(v66, v67, v603);
      v465 = *(void (**)(char *, char *, uint64_t))(v569 + 16);
      v465(v572, v574, v568);
      v466 = (*(unsigned __int8 *)(v569 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v569 + 80);
      v471 = 7;
      v472 = swift_allocObject();
      v467((char *)(v472 + v466), v572, v568);
      v479 = Logger.logObject.getter();
      v480 = static os_log_type_t.debug.getter();
      v655[3] = 12;
      UnsignedInteger<>.init<A>(_:)();
      v468 = v656;
      v469 = 17;
      v474 = swift_allocObject();
      *(_BYTE *)(v474 + 16) = 32;
      v475 = swift_allocObject();
      *(_BYTE *)(v475 + 16) = 8;
      v470 = 32;
      v68 = swift_allocObject();
      v69 = v472;
      v473 = v68;
      *(_QWORD *)(v68 + 16) = partial apply for implicit closure #3 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
      *(_QWORD *)(v68 + 24) = v69;
      v70 = swift_allocObject();
      v71 = v473;
      v477 = v70;
      *(_QWORD *)(v70 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v70 + 24) = v71;
      v476 = _allocateUninitializedArray<A>(_:)();
      v478 = v72;
      swift_retain();
      v73 = v474;
      v74 = v478;
      *v478 = partial apply for closure #1 in OSLogArguments.append(_:);
      v74[1] = v73;
      swift_retain();
      v75 = v475;
      v76 = v478;
      v478[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v76[3] = v75;
      swift_retain();
      v77 = v477;
      v78 = v478;
      v478[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v78[5] = v77;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v479, (os_log_type_t)v480))
      {
        v458 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v457 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v459 = createStorage<A>(capacity:type:)(0);
        v460 = createStorage<A>(capacity:type:)(1);
        v461 = &v639;
        v639 = v458;
        v462 = &v638;
        v638 = v459;
        v463 = &v637;
        v637 = v460;
        serialize(_:at:)(2, &v639);
        serialize(_:at:)(1, v461);
        v79 = v520;
        v635 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v636 = v474;
        closure #1 in osLogInternal(_:log:type:)(&v635, (uint64_t)v461, (uint64_t)v462, (uint64_t)v463);
        v464 = v79;
        if (v79)
        {
          __break(1u);
        }
        else
        {
          v635 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v636 = v475;
          closure #1 in osLogInternal(_:log:type:)(&v635, (uint64_t)&v639, (uint64_t)&v638, (uint64_t)&v637);
          v455 = 0;
          v635 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v636 = v477;
          closure #1 in osLogInternal(_:log:type:)(&v635, (uint64_t)&v639, (uint64_t)&v638, (uint64_t)&v637);
          v454 = 0;
          _os_log_impl(&dword_24701B000, v479, (os_log_type_t)v480, "#Transformer payee contact in USO parse as ContactQuery is: %s", v458, v468);
          destroyStorage<A>(_:count:)(v459, 0, v457);
          destroyStorage<A>(_:count:)(v460, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v458, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          v456 = v454;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        v456 = v520;
      }
      v448 = v456;

      v535(v597, v603);
      v449 = v582[3];
      v450 = v582[4];
      __swift_project_boxed_opaque_existential_1(v582, v449);
      v444 = _allocateUninitializedArray<A>(_:)();
      v465(v80, v574, v568);
      v81 = v444;
      _finalizeUninitializedArray<A>(_:)();
      v447 = v81;
      v445 = SiriKitContactResolver.defaultConfig.unsafeMutableAddressor();
      v446 = v655;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v565 + 16))(v567, v445, v564);
      swift_endAccess();
      v82 = v448;
      v83 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v450 + 16))(v447, v567, v449);
      v451 = (uint64_t)v82;
      v452 = v83;
      v453 = v82;
      if (v82)
      {
        v200 = v453;
        v201 = 0;
        v202 = 0;
        (*(void (**)(char *, uint64_t))(v565 + 8))(v567, v564);
        swift_bridgeObjectRelease();

        v442 = v201;
        v443 = v202;
      }
      else
      {
        v441 = v452;
        (*(void (**)(char *, uint64_t))(v565 + 8))(v567, v564);
        swift_bridgeObjectRelease();
        v442 = v441;
        v443 = v451;
      }
      v84 = v595;
      v426 = (void *)v443;
      v427 = v442;
      v654 = v442;
      v85 = Logger.payments.unsafeMutableAddressor();
      v604(v84, v85, v603);
      swift_bridgeObjectRetain();
      v431 = 7;
      v432 = swift_allocObject();
      *(_QWORD *)(v432 + 16) = v427;
      v439 = Logger.logObject.getter();
      v440 = static os_log_type_t.debug.getter();
      v652 = 12;
      UnsignedInteger<>.init<A>(_:)();
      v428 = v653;
      v429 = 17;
      v434 = swift_allocObject();
      *(_BYTE *)(v434 + 16) = 32;
      v435 = swift_allocObject();
      *(_BYTE *)(v435 + 16) = 8;
      v430 = 32;
      v86 = swift_allocObject();
      v87 = v432;
      v433 = v86;
      *(_QWORD *)(v86 + 16) = partial apply for implicit closure #4 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
      *(_QWORD *)(v86 + 24) = v87;
      v88 = swift_allocObject();
      v89 = v433;
      v437 = v88;
      *(_QWORD *)(v88 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v88 + 24) = v89;
      v436 = _allocateUninitializedArray<A>(_:)();
      v438 = v90;
      swift_retain();
      v91 = v434;
      v92 = v438;
      *v438 = partial apply for closure #1 in OSLogArguments.append(_:);
      v92[1] = v91;
      swift_retain();
      v93 = v435;
      v94 = v438;
      v438[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v94[3] = v93;
      swift_retain();
      v95 = v437;
      v96 = v438;
      v438[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v96[5] = v95;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v439, (os_log_type_t)v440))
      {
        v419 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v418 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v420 = createStorage<A>(capacity:type:)(0);
        v421 = createStorage<A>(capacity:type:)(1);
        v422 = &v644;
        v644 = v419;
        v423 = &v643;
        v643 = v420;
        v424 = &v642;
        v642 = v421;
        serialize(_:at:)(2, &v644);
        serialize(_:at:)(1, v422);
        v97 = v426;
        v640 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v641 = v434;
        closure #1 in osLogInternal(_:log:type:)(&v640, (uint64_t)v422, (uint64_t)v423, (uint64_t)v424);
        v425 = v97;
        if (v97)
        {
          __break(1u);
        }
        else
        {
          v640 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v641 = v435;
          closure #1 in osLogInternal(_:log:type:)(&v640, (uint64_t)&v644, (uint64_t)&v643, (uint64_t)&v642);
          v416 = 0;
          v640 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v641 = v437;
          closure #1 in osLogInternal(_:log:type:)(&v640, (uint64_t)&v644, (uint64_t)&v643, (uint64_t)&v642);
          v415 = 0;
          _os_log_impl(&dword_24701B000, v439, (os_log_type_t)v440, "#Transformer SiriKitContactResolver found matches for payee in USO parse: %s", v419, v428);
          destroyStorage<A>(_:count:)(v420, 0, v418);
          destroyStorage<A>(_:count:)(v421, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v419, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          v417 = v415;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        v417 = v426;
      }
      v414 = v417;

      v535(v595, v603);
      swift_bridgeObjectRetain();
      if (v427)
      {
        v413 = v427;
        v410 = v427;
        swift_bridgeObjectRetain();
        v409 = v645;
        v645[0] = v410;
        v408 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
        lazy protocol witness table accessor for type [INPerson] and conformance [A]();
        Collection.first.getter();
        outlined destroy of [SFCardSection]();
        v411 = v645[1];
        swift_bridgeObjectRelease();
        v412 = v411;
      }
      else
      {
        v412 = 0;
      }
      v98 = v593;
      v99 = *(void **)(v521 + 16);
      *(_QWORD *)(v521 + 16) = v412;

      v100 = Logger.payments.unsafeMutableAddressor();
      v604(v98, v100, v603);
      swift_retain();
      v406 = Logger.logObject.getter();
      v407 = static os_log_type_t.debug.getter();
      v650[1] = (_BYTE *)12;
      UnsignedInteger<>.init<A>(_:)();
      v396 = v651;
      v397 = 17;
      v399 = 7;
      v401 = swift_allocObject();
      *(_BYTE *)(v401 + 16) = 32;
      v402 = swift_allocObject();
      *(_BYTE *)(v402 + 16) = 8;
      v398 = 32;
      v101 = swift_allocObject();
      v102 = v521;
      v400 = v101;
      *(_QWORD *)(v101 + 16) = partial apply for implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
      *(_QWORD *)(v101 + 24) = v102;
      v103 = swift_allocObject();
      v104 = v400;
      v404 = v103;
      *(_QWORD *)(v103 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v103 + 24) = v104;
      v403 = _allocateUninitializedArray<A>(_:)();
      v405 = v105;
      swift_retain();
      v106 = v401;
      v107 = v405;
      *v405 = partial apply for closure #1 in OSLogArguments.append(_:);
      v107[1] = v106;
      swift_retain();
      v108 = v402;
      v109 = v405;
      v405[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v109[3] = v108;
      swift_retain();
      v110 = v404;
      v111 = v405;
      v405[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v111[5] = v110;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v406, (os_log_type_t)v407))
      {
        v389 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v388 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v390 = createStorage<A>(capacity:type:)(0);
        v391 = createStorage<A>(capacity:type:)(1);
        v392 = v650;
        v650[0] = v389;
        v393 = &v649;
        v649 = v390;
        v394 = &v648;
        v648 = v391;
        serialize(_:at:)(2, v650);
        serialize(_:at:)(1, v392);
        v112 = v414;
        v646 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v647 = v401;
        closure #1 in osLogInternal(_:log:type:)(&v646, (uint64_t)v392, (uint64_t)v393, (uint64_t)v394);
        v395 = v112;
        if (v112)
        {
          __break(1u);
        }
        else
        {
          v646 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v647 = v402;
          closure #1 in osLogInternal(_:log:type:)(&v646, (uint64_t)v650, (uint64_t)&v649, (uint64_t)&v648);
          v386 = 0;
          v646 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v647 = v404;
          closure #1 in osLogInternal(_:log:type:)(&v646, (uint64_t)v650, (uint64_t)&v649, (uint64_t)&v648);
          v385 = 0;
          _os_log_impl(&dword_24701B000, v406, (os_log_type_t)v407, "#Transformer resolved payer from matches as %s", v389, v396);
          destroyStorage<A>(_:count:)(v390, 0, v388);
          destroyStorage<A>(_:count:)(v391, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v389, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          v387 = v385;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        v387 = v414;
      }
      v384 = v387;

      v535(v593, v603);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v569 + 8))(v574, v568);
      v481 = v384;
    }
    v382 = v481;
    v383 = MEMORY[0x2495716D8]();
    if (v383)
    {
      v381 = v383;
      v378 = v383;
      v671 = v383;
      v379 = MEMORY[0x249571888]();
      if (v379)
      {
        v377 = v379;
        v374 = v379;
        v375 = CodeGenBase.entity.getter();
        swift_release();
        v376 = v375;
      }
      else
      {
        v376 = 0;
      }
      v371 = v376;
      v370 = default argument 1 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      default argument 2 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      v368 = v113;
      v369 = default argument 3 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      v114 = default argument 4 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      v670 = static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)(v371, v370, v368, v369, v114);
      v372 = *(float *)&v670;
      v373 = BYTE4(v670);
      swift_release();
      if ((v373 & 1) == 0)
      {
        v367 = v372;
        v365 = v372;
        v669 = v372;
        v668 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        v366 = MEMORY[0x249571894]();
        if (v366)
        {
          v364 = v366;
          v361 = v366;
          object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("name", 4uLL, 1)._object;
          v362 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
          swift_bridgeObjectRelease();
          swift_release();
          if (v362)
          {
            v359 = v362;
            v657 = v362;
            v357 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoIdentifier]);
            lazy protocol witness table accessor for type [UsoIdentifier] and conformance [A]();
            v115 = v382;
            result = Sequence.first(where:)();
            v358 = v115;
            if (v115)
            {
              __break(1u);
              return result;
            }
            outlined destroy of [SFCardSection]();
            v355 = type metadata accessor for UsoIdentifier();
            v356 = *(_QWORD *)(v355 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t))(v356 + 48))(v563, 1) != 1)
            {
              v350 = UsoIdentifier.value.getter();
              v351 = v117;
              (*(void (**)(uint64_t, uint64_t))(v356 + 8))(v563, v355);
              v352 = v350;
              v353 = v351;
              v354 = v358;
LABEL_83:
              v347 = v354;
              v348 = v353;
              v349 = v352;
              v666 = v352;
              v667 = v353;
              v664._countAndFlagsBits = UsoEntity_common_CurrencyAmount.currencyIdentifier.getter();
              v664._object = v118;
              if (v118)
              {
                v665 = v664;
              }
              else
              {
                v665 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
                outlined destroy of String.UTF8View();
              }
              v119 = v591;
              v321 = v665;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v668 = v321;
              swift_bridgeObjectRelease();
              v120 = Logger.payments.unsafeMutableAddressor();
              v604(v119, v120, v603);
              v331 = 7;
              v323 = swift_allocObject();
              *(Swift::Float *)(v323 + 16) = v365;
              v330 = 32;
              v121 = swift_allocObject();
              v122 = v321._object;
              v325 = v121;
              *(_QWORD *)(v121 + 16) = v321._countAndFlagsBits;
              *(_QWORD *)(v121 + 24) = v122;
              swift_bridgeObjectRetain();
              v123 = swift_allocObject();
              v124 = v348;
              v332 = v123;
              *(_QWORD *)(v123 + 16) = v349;
              *(_QWORD *)(v123 + 24) = v124;
              v345 = Logger.logObject.getter();
              v346 = static os_log_type_t.debug.getter();
              v662[1] = (_BYTE *)v330;
              UnsignedInteger<>.init<A>(_:)();
              v322 = v663;
              v328 = 17;
              v334 = swift_allocObject();
              v327 = 32;
              *(_BYTE *)(v334 + 16) = 32;
              v335 = swift_allocObject();
              v329 = 8;
              *(_BYTE *)(v335 + 16) = 8;
              v125 = swift_allocObject();
              v126 = v323;
              v324 = v125;
              *(_QWORD *)(v125 + 16) = partial apply for implicit closure #7 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
              *(_QWORD *)(v125 + 24) = v126;
              v127 = swift_allocObject();
              v128 = v324;
              v336 = v127;
              *(_QWORD *)(v127 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
              *(_QWORD *)(v127 + 24) = v128;
              v337 = swift_allocObject();
              *(_BYTE *)(v337 + 16) = v327;
              v338 = swift_allocObject();
              *(_BYTE *)(v338 + 16) = v329;
              v129 = swift_allocObject();
              v130 = v325;
              v326 = v129;
              *(_QWORD *)(v129 + 16) = partial apply for specialized implicit closure #8 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
              *(_QWORD *)(v129 + 24) = v130;
              v131 = swift_allocObject();
              v132 = v326;
              v339 = v131;
              *(_QWORD *)(v131 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
              *(_QWORD *)(v131 + 24) = v132;
              v340 = swift_allocObject();
              *(_BYTE *)(v340 + 16) = v327;
              v341 = swift_allocObject();
              *(_BYTE *)(v341 + 16) = v329;
              v133 = swift_allocObject();
              v134 = v332;
              v333 = v133;
              *(_QWORD *)(v133 + 16) = partial apply for implicit closure #9 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
              *(_QWORD *)(v133 + 24) = v134;
              v135 = swift_allocObject();
              v136 = v333;
              v343 = v135;
              *(_QWORD *)(v135 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
              *(_QWORD *)(v135 + 24) = v136;
              v342 = _allocateUninitializedArray<A>(_:)();
              v344 = v137;
              swift_retain();
              v138 = v334;
              v139 = v344;
              *v344 = partial apply for closure #1 in OSLogArguments.append(_:);
              v139[1] = v138;
              swift_retain();
              v140 = v335;
              v141 = v344;
              v344[2] = partial apply for closure #1 in OSLogArguments.append(_:);
              v141[3] = v140;
              swift_retain();
              v142 = v336;
              v143 = v344;
              v344[4] = partial apply for closure #1 in OSLogArguments.append(_:);
              v143[5] = v142;
              swift_retain();
              v144 = v337;
              v145 = v344;
              v344[6] = partial apply for closure #1 in OSLogArguments.append(_:);
              v145[7] = v144;
              swift_retain();
              v146 = v338;
              v147 = v344;
              v344[8] = partial apply for closure #1 in OSLogArguments.append(_:);
              v147[9] = v146;
              swift_retain();
              v148 = v339;
              v149 = v344;
              v344[10] = partial apply for closure #1 in OSLogArguments.append(_:);
              v149[11] = v148;
              swift_retain();
              v150 = v340;
              v151 = v344;
              v344[12] = partial apply for closure #1 in OSLogArguments.append(_:);
              v151[13] = v150;
              swift_retain();
              v152 = v341;
              v153 = v344;
              v344[14] = partial apply for closure #1 in OSLogArguments.append(_:);
              v153[15] = v152;
              swift_retain();
              v154 = v343;
              v155 = v344;
              v344[16] = partial apply for closure #1 in OSLogArguments.append(_:);
              v155[17] = v154;
              _finalizeUninitializedArray<A>(_:)();
              swift_bridgeObjectRelease();
              if (os_log_type_enabled(v345, (os_log_type_t)v346))
              {
                v314 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
                v313 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
                v315 = createStorage<A>(capacity:type:)(0);
                v316 = createStorage<A>(capacity:type:)(3);
                v317 = v662;
                v662[0] = v314;
                v318 = &v661;
                v661 = v315;
                v319 = &v660;
                v660 = v316;
                serialize(_:at:)(2, v662);
                serialize(_:at:)(3, v317);
                v156 = v347;
                v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                v659 = v334;
                closure #1 in osLogInternal(_:log:type:)(&v658, (uint64_t)v317, (uint64_t)v318, (uint64_t)v319);
                v320 = v156;
                if (v156)
                {
                  __break(1u);
                }
                else
                {
                  v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v659 = v335;
                  closure #1 in osLogInternal(_:log:type:)(&v658, (uint64_t)v662, (uint64_t)&v661, (uint64_t)&v660);
                  v311 = 0;
                  v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v659 = v336;
                  closure #1 in osLogInternal(_:log:type:)(&v658, (uint64_t)v662, (uint64_t)&v661, (uint64_t)&v660);
                  v310 = 0;
                  v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v659 = v337;
                  closure #1 in osLogInternal(_:log:type:)(&v658, (uint64_t)v662, (uint64_t)&v661, (uint64_t)&v660);
                  v309 = 0;
                  v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v659 = v338;
                  closure #1 in osLogInternal(_:log:type:)(&v658, (uint64_t)v662, (uint64_t)&v661, (uint64_t)&v660);
                  v308 = 0;
                  v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v659 = v339;
                  closure #1 in osLogInternal(_:log:type:)(&v658, (uint64_t)v662, (uint64_t)&v661, (uint64_t)&v660);
                  v307 = 0;
                  v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v659 = v340;
                  closure #1 in osLogInternal(_:log:type:)(&v658, (uint64_t)v662, (uint64_t)&v661, (uint64_t)&v660);
                  v306 = 0;
                  v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v659 = v341;
                  closure #1 in osLogInternal(_:log:type:)(&v658, (uint64_t)v662, (uint64_t)&v661, (uint64_t)&v660);
                  v305 = 0;
                  v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  v659 = v343;
                  closure #1 in osLogInternal(_:log:type:)(&v658, (uint64_t)v662, (uint64_t)&v661, (uint64_t)&v660);
                  v304 = 0;
                  _os_log_impl(&dword_24701B000, v345, (os_log_type_t)v346, "#Transformer found currency, %s %s. Raw usoIdentifier was %s", v314, v322);
                  destroyStorage<A>(_:count:)(v315, 0, v313);
                  destroyStorage<A>(_:count:)(v316, 3, MEMORY[0x24BEE4AD8] + 8);
                  MEMORY[0x2495725CC](v314, MEMORY[0x24BEE4260]);
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  v312 = v304;
                }
              }
              else
              {
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                v312 = v347;
              }
              v302 = v312;

              v535(v591, v603);
              v303 = String.isEmpty.getter();
              swift_bridgeObjectRelease();
              if ((v303 & 1) != 0)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                v300 = 0;
                v301 = type metadata accessor for INCurrencyAmount();
                type metadata accessor for NSDecimalNumber();
                NSDecimalNumber.__allocating_init(value:)((NSDecimalNumber *)LODWORD(v365), v365);
                isa = INCurrencyAmount.__allocating_init(amount:currencyCode:)(v157, v321).super.isa;
                v159 = v702;
                v702 = isa;

              }
              swift_bridgeObjectRelease();
              outlined destroy of String.UTF8View();
              swift_release();
              v380 = v302;
              goto LABEL_96;
            }
            outlined destroy of UsoIdentifier?(v563);
            v363 = v358;
          }
          else
          {
            v363 = v382;
          }
        }
        else
        {
          v363 = v382;
        }
        v352 = 0;
        v353 = 0;
        v354 = v363;
        goto LABEL_83;
      }
      swift_release();
      v380 = v382;
    }
    else
    {
      v380 = v382;
    }
LABEL_96:
    v297 = v380;
    v298 = MEMORY[0x2495716B4]();
    v299 = v160;
    if (v160)
    {
      v295 = v298;
      v296 = v299;
      v294 = v299;
      v293 = v298;
      v672 = v298;
      v673 = v299;
      swift_bridgeObjectRetain();
      v700 = (objc_class *)v293;
      v701 = v294;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    outlined destroy of ContactQuery?((uint64_t)v581);
    swift_release();
    v504 = v297;
    goto LABEL_99;
  }
  swift_release();
  v504 = v520;
LABEL_99:
  v273 = v504;
  type metadata accessor for INRequestPaymentIntent();
  v274 = &v698;
  v282 = 32;
  swift_beginAccess();
  v275 = *(id *)(v521 + 16);
  v161 = v275;
  swift_endAccess();
  v276 = v702;
  v162 = v702;
  v277 = v700;
  v278 = v701;
  swift_bridgeObjectRetain();
  v713.value.super.isa = (Class)v275;
  v713.is_nil = (char)v276;
  v714.value.super.isa = v277;
  v714.is_nil = v278;
  v164.super.super.isa = INRequestPaymentIntent.__allocating_init(payer:currencyAmount:note:)(v713, v714, v163).super.super.isa;
  v165 = v589;
  v279 = v164.super.super.isa;
  v697 = v164.super.super.isa;
  v166 = Logger.payments.unsafeMutableAddressor();
  v604(v165, v166, v603);
  v167 = v279;
  v283 = 7;
  v284 = swift_allocObject();
  *(_QWORD *)(v284 + 16) = v279;
  v291 = Logger.logObject.getter();
  v292 = static os_log_type_t.debug.getter();
  v695 = 12;
  UnsignedInteger<>.init<A>(_:)();
  v280 = v696;
  v281 = 17;
  v286 = swift_allocObject();
  *(_BYTE *)(v286 + 16) = 32;
  v287 = swift_allocObject();
  *(_BYTE *)(v287 + 16) = 8;
  v168 = swift_allocObject();
  v169 = v284;
  v285 = v168;
  *(_QWORD *)(v168 + 16) = partial apply for implicit closure #10 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  *(_QWORD *)(v168 + 24) = v169;
  v170 = swift_allocObject();
  v171 = v285;
  v289 = v170;
  *(_QWORD *)(v170 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v170 + 24) = v171;
  v288 = _allocateUninitializedArray<A>(_:)();
  v290 = v172;
  swift_retain();
  v173 = v286;
  v174 = v290;
  *v290 = partial apply for closure #1 in OSLogArguments.append(_:);
  v174[1] = v173;
  swift_retain();
  v175 = v287;
  v176 = v290;
  v290[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v176[3] = v175;
  swift_retain();
  v177 = v289;
  v178 = v290;
  v290[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v178[5] = v177;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v291, (os_log_type_t)v292))
  {
    v266 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v265 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v267 = createStorage<A>(capacity:type:)(0);
    v268 = createStorage<A>(capacity:type:)(1);
    v269 = &v680;
    v680 = v266;
    v270 = &v679;
    v679 = v267;
    v271 = &v678;
    v678 = v268;
    serialize(_:at:)(2, &v680);
    serialize(_:at:)(1, v269);
    v179 = v273;
    v676 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v677 = v286;
    closure #1 in osLogInternal(_:log:type:)(&v676, (uint64_t)v269, (uint64_t)v270, (uint64_t)v271);
    v272 = v179;
    if (v179)
    {
      __break(1u);
    }
    else
    {
      v676 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v677 = v287;
      closure #1 in osLogInternal(_:log:type:)(&v676, (uint64_t)&v680, (uint64_t)&v679, (uint64_t)&v678);
      v263 = 0;
      v676 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v677 = v289;
      closure #1 in osLogInternal(_:log:type:)(&v676, (uint64_t)&v680, (uint64_t)&v679, (uint64_t)&v678);
      v262 = 0;
      _os_log_impl(&dword_24701B000, v291, (os_log_type_t)v292, "#Transformer returned intent %s", v266, v280);
      destroyStorage<A>(_:count:)(v267, 0, v265);
      destroyStorage<A>(_:count:)(v268, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v266, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v264 = v262;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v264 = v273;
  }
  v260 = v264;

  v535(v589, v603);
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v261 = v693;
  swift_release();
  if (v261)
  {
    v259 = v261;
    v256 = v261;
    v257 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
    swift_release();
    v258 = v257;
  }
  else
  {
    v258 = 0;
  }
  v692 = v258;
  swift_retain();
  if (v692)
  {
    v694 = v692;
  }
  else
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    v255 = v691;
    v180 = swift_release();
    if (v255 && (v254 = v255, v252 = v255, v253 = MEMORY[0x2495716C0](v180), swift_release(), v253))
    {
      v251 = v253;
      v248 = v253;
      v249 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
      swift_release();
      v250 = v249;
    }
    else
    {
      v250 = 0;
    }
    v690 = v250;
    swift_retain();
    if (v690)
    {
      v694 = v690;
    }
    else
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      v247 = v689;
      v181 = swift_release();
      if (v247 && (v246 = v247, v244 = v247, v245 = MEMORY[0x2495716CC](v181), swift_release(), v245))
      {
        v243 = v245;
        v242 = v245;
        v694 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
        swift_release();
      }
      else
      {
        v694 = 0;
      }
      outlined destroy of ContiguousArray<A1>();
    }
    swift_release();
    outlined destroy of ContiguousArray<A1>();
  }
  swift_release();
  v241 = v694;
  if (v694)
  {
    v240 = v241;
    v235 = v241;
    v688 = v241;
    v182 = v279;
    v236 = Constants.intentAppIDAssociatedKey.unsafeMutableAddressor();
    v237 = UsoEntity_common_App.appIdentifier.getter();
    v238 = v183;
    if (v183)
    {
      v233 = v237;
      v234 = v238;
      v230 = v238;
      v231 = MEMORY[0x24957220C](v237);
      swift_bridgeObjectRelease();
      v232 = (void *)v231;
    }
    else
    {
      v232 = 0;
    }
    v184 = v587;
    v217 = v232;
    v216 = &v687;
    v220 = 32;
    swift_beginAccess();
    objc_setAssociatedObject(v279, v236, v217, (void *)0x301);
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v185 = Logger.payments.unsafeMutableAddressor();
    v604(v184, v185, v603);
    swift_retain();
    v228 = Logger.logObject.getter();
    v229 = static os_log_type_t.debug.getter();
    v685[1] = (_BYTE *)12;
    UnsignedInteger<>.init<A>(_:)();
    v218 = v686;
    v219 = 17;
    v221 = 7;
    v223 = swift_allocObject();
    *(_BYTE *)(v223 + 16) = 32;
    v224 = swift_allocObject();
    *(_BYTE *)(v224 + 16) = 8;
    v186 = swift_allocObject();
    v187 = v235;
    v222 = v186;
    *(_QWORD *)(v186 + 16) = partial apply for implicit closure #13 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
    *(_QWORD *)(v186 + 24) = v187;
    v188 = swift_allocObject();
    v189 = v222;
    v226 = v188;
    *(_QWORD *)(v188 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v188 + 24) = v189;
    v225 = _allocateUninitializedArray<A>(_:)();
    v227 = v190;
    swift_retain();
    v191 = v223;
    v192 = v227;
    *v227 = partial apply for closure #1 in OSLogArguments.append(_:);
    v192[1] = v191;
    swift_retain();
    v193 = v224;
    v194 = v227;
    v227[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v194[3] = v193;
    swift_retain();
    v195 = v226;
    v196 = v227;
    v227[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v196[5] = v195;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v228, (os_log_type_t)v229))
    {
      v209 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v208 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      v210 = createStorage<A>(capacity:type:)(0);
      v211 = createStorage<A>(capacity:type:)(1);
      v212 = v685;
      v685[0] = v209;
      v213 = &v684;
      v684 = v210;
      v214 = &v683;
      v683 = v211;
      serialize(_:at:)(2, v685);
      serialize(_:at:)(1, v212);
      v197 = v260;
      v681 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v682 = v223;
      closure #1 in osLogInternal(_:log:type:)(&v681, (uint64_t)v212, (uint64_t)v213, (uint64_t)v214);
      v215 = v197;
      if (v197)
      {
        __break(1u);
      }
      else
      {
        v681 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v682 = v224;
        closure #1 in osLogInternal(_:log:type:)(&v681, (uint64_t)v685, (uint64_t)&v684, (uint64_t)&v683);
        v206 = 0;
        v681 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v682 = v226;
        closure #1 in osLogInternal(_:log:type:)(&v681, (uint64_t)v685, (uint64_t)&v684, (uint64_t)&v683);
        v205 = 0;
        _os_log_impl(&dword_24701B000, v228, (os_log_type_t)v229, "#Transformer found app to use for intent as %s", v209, v218);
        destroyStorage<A>(_:count:)(v210, 0, v208);
        destroyStorage<A>(_:count:)(v211, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x2495725CC](v209, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        v207 = v205;
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      v207 = v260;
    }
    v204 = v207;

    v535(v587, v603);
    swift_release();
    v239 = v204;
  }
  else
  {
    v239 = v260;
  }
  v203 = v239;
  v198 = v279;
  v199 = v279;
  *v560 = v279;

  outlined destroy of String.UTF8View();
  outlined destroy of SFRichText?((id *)&v702);
  return swift_release();
}

uint64_t sub_2470D8CE0()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(uint64_t a1)
{
  return closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(a1);
}

{
  return closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(a1);
}

{
  return closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(a1);
}

uint64_t implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  swift_retain();
  type metadata accessor for UsoTask_noVerb_common_Payment();
  return String.init<A>(describing:)();
}

{
  swift_retain();
  type metadata accessor for UsoTask_pay_common_Payment();
  return String.init<A>(describing:)();
}

{
  swift_retain();
  type metadata accessor for UsoTask_requestMoney_common_Payment();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(void *a1)
{
  id v1;

  v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INSendPaymentIntent?);
  return String.init<A>(describing:)();
}

{
  id v1;

  v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INRequestPaymentIntent?);
  return String.init<A>(describing:)();
}

uint64_t implicit closure #3 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  return ContactQuery.description.getter();
}

uint64_t implicit closure #4 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]?);
  _allocateUninitializedArray<A>(_:)();
  v3 = v1;
  swift_bridgeObjectRetain();
  *v3 = a1;
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[INPerson]?]);
  lazy protocol witness table accessor for type [[INPerson]?] and conformance [A]();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(uint64_t a1)
{
  id v1;

  swift_beginAccess();
  v1 = *(id *)(a1 + 16);
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INPerson?);
  return String.init<A>(describing:)();
}

uint64_t closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(uint64_t a1)
{
  uint64_t v1;
  Swift::String v2;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  Swift::String v10;
  uint64_t v11;

  v11 = a1;
  v6 = UsoIdentifier.namespace.getter();
  v7 = v1;
  swift_bridgeObjectRetain();
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("currencyUnit", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v9[0] = v6;
  v9[1] = v7;
  v10 = v2;
  if (!v7)
  {
    if (!v10._object)
    {
      outlined destroy of String.UTF8View();
      v5 = 1;
      goto LABEL_7;
    }
    goto LABEL_8;
  }
  outlined init with copy of String(v9, &v8);
  if (!v10._object)
  {
    outlined destroy of String.UTF8View();
LABEL_8:
    outlined destroy of DIIdentifier();
    v5 = 0;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();
  v5 = v4;
LABEL_7:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t implicit closure #7 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  return String.init<A>(describing:)();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> specialized implicit closure #8 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  swift_bridgeObjectRetain();
}

uint64_t implicit closure #9 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  return String.init<A>(describing:)();
}

void __swiftcall NSDecimalNumber.__allocating_init(value:)(NSDecimalNumber *__return_ptr retstr, Swift::Float value)
{
  id v2;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  @nonobjc NSDecimalNumber.init(value:)();
}

INCurrencyAmount __swiftcall INCurrencyAmount.__allocating_init(amount:currencyCode:)(NSDecimalNumber *amount, Swift::String currencyCode)
{
  id v2;
  uint64_t countAndFlagsBits;

  countAndFlagsBits = currencyCode._countAndFlagsBits;
  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (INCurrencyAmount)@nonobjc INCurrencyAmount.init(amount:currencyCode:)(amount, countAndFlagsBits);
}

INSendPaymentIntent __swiftcall INSendPaymentIntent.__allocating_init(payee:currencyAmount:note:)(INPerson_optional payee, INCurrencyAmount_optional currencyAmount, Swift::String_optional note)
{
  id v3;
  void *v5;
  Class v6;
  uint64_t v7;
  Class isa;

  isa = payee.value.super.isa;
  v5 = *(void **)&payee.is_nil;
  v6 = currencyAmount.value.super.isa;
  v7 = *(_QWORD *)&currencyAmount.is_nil;
  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (INSendPaymentIntent)@nonobjc INSendPaymentIntent.init(payee:currencyAmount:note:)(isa, v5, (uint64_t)v6, v7);
}

uint64_t implicit closure #10 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(void *a1)
{
  id v1;

  v1 = a1;
  type metadata accessor for INSendPaymentIntent();
  lazy protocol witness table accessor for type INSendPaymentIntent and conformance NSObject();
  return String.init<A>(describing:)();
}

{
  id v1;

  v1 = a1;
  type metadata accessor for INRequestPaymentIntent();
  lazy protocol witness table accessor for type INRequestPaymentIntent and conformance NSObject();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #13 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  swift_retain();
  type metadata accessor for UsoEntity_common_App();
  return String.init<A>(describing:)();
}

{
  UsoEntity_common_App.appIdentifier.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  return String.init<A>(describing:)();
}

uint64_t sub_2470DD000()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  return swift_deallocObject();
}

uint64_t sub_2470E0C98()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  return swift_deallocObject();
}

INRequestPaymentIntent __swiftcall INRequestPaymentIntent.__allocating_init(payer:currencyAmount:note:)(INPerson_optional payer, INCurrencyAmount_optional currencyAmount, Swift::String_optional note)
{
  id v3;
  void *v5;
  Class v6;
  uint64_t v7;
  Class isa;

  isa = payer.value.super.isa;
  v5 = *(void **)&payer.is_nil;
  v6 = currencyAmount.value.super.isa;
  v7 = *(_QWORD *)&currencyAmount.is_nil;
  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (INRequestPaymentIntent)@nonobjc INRequestPaymentIntent.init(payer:currencyAmount:note:)(isa, v5, (uint64_t)v6, v7);
}

uint64_t static Transformer<>.transformer(previousIntent:)(void *a1)
{
  id v1;

  v1 = a1;
  *(_QWORD *)(swift_allocObject() + 16) = a1;
  type metadata accessor for UsoTask_request_common_PaymentAccount();
  type metadata accessor for INSearchForAccountsIntent();
  return Transformer.init(transform:)();
}

{
  id v1;

  v1 = a1;
  *(_QWORD *)(swift_allocObject() + 16) = a1;
  type metadata accessor for UsoTask_summarise_common_PaymentAccount();
  type metadata accessor for INSearchForAccountsIntent();
  return Transformer.init(transform:)();
}

{
  id v1;

  v1 = a1;
  *(_QWORD *)(swift_allocObject() + 16) = a1;
  type metadata accessor for UsoTask_noVerb_common_PaymentAccount();
  type metadata accessor for INSearchForAccountsIntent();
  return Transformer.init(transform:)();
}

id *closure #1 in static Transformer<>.transformer(previousIntent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  Swift::String v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  Swift::String v56;
  Swift::String v57;
  id v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  id v75;
  id v76;
  id *result;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE **v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint32_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  NSObject *v101;
  int v102;
  uint64_t *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  id v115;
  Class v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  _QWORD *v125;
  int v126;
  int v127;
  uint64_t countAndFlagsBits;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  __int128 *v149;
  uint64_t v150;
  uint64_t v151;
  void *object;
  id v153;
  Class isa;
  uint64_t *v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  id v169;
  id v170;
  uint64_t v171;
  uint64_t v172;
  __int128 v173;
  id v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  NSJSONWritingOptions v178;
  __int128 v179;
  id v180;
  id v181;
  id v182;
  uint64_t v183;
  int v184;
  id v185;
  id v186;
  id v187;
  id v188;
  id v189;
  uint64_t v190;
  int v191;
  id v192;
  id v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint8_t *v200;
  uint64_t v201;
  uint64_t v202;
  _BYTE **v203;
  uint64_t *v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  void (*v208)(char *, uint64_t);
  uint32_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  NSObject *v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint8_t *v226;
  uint64_t v227;
  uint64_t v228;
  _BYTE **v229;
  uint64_t *v230;
  uint64_t *v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  id v235;
  uint64_t v236;
  unint64_t v237;
  char *v238;
  unint64_t v239;
  char *v240;
  unint64_t v241;
  char *v242;
  _QWORD *v243;
  uint64_t v244;
  void (*v245)(char *, uint64_t, uint64_t);
  unint64_t v246;
  unint64_t v247;
  uint64_t *v248;
  unint64_t v249;
  uint32_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  NSObject *v262;
  int v263;
  uint64_t (*v264)(uint64_t, uint64_t, uint64_t);
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _BYTE *v268;
  uint64_t (*v269)(uint64_t, uint64_t, uint64_t);
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _BYTE *v273;
  __int128 v274;
  __int128 v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD v281[2];
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t (*v285)(uint64_t, uint64_t, uint64_t);
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _BYTE *v289[2];
  uint32_t v290;
  _QWORD v291[2];
  uint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  id v296;
  uint64_t v297;
  uint64_t v298;
  char v299;
  uint64_t v300;
  id v301;
  uint64_t v302;
  char v303;
  uint64_t v304;
  id v305[2];
  uint32_t v306;
  uint64_t v307;
  uint32_t v308;
  uint64_t v309;
  uint64_t v310;

  v233 = a3;
  v236 = a1;
  v235 = a2;
  v310 = 0;
  v309 = 0;
  v296 = 0;
  v280 = 0;
  v279 = 0;
  v274 = 0u;
  v275 = 0u;
  v244 = type metadata accessor for Logger();
  v243 = *(_QWORD **)(v244 - 8);
  v237 = (v243[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v236);
  v238 = (char *)&v78 - v237;
  v239 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v3);
  v240 = (char *)&v78 - v239;
  v241 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = (uint64_t *)MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v78 - v241;
  v242 = (char *)&v78 - v241;
  v252 = *v7;
  v310 = v252;
  v309 = v9;
  v10 = Logger.payments.unsafeMutableAddressor();
  v245 = (void (*)(char *, uint64_t, uint64_t))v243[2];
  v245(v8, v10, v244);
  swift_retain();
  v262 = Logger.logObject.getter();
  v263 = static os_log_type_t.debug.getter();
  v248 = &v307;
  v307 = 12;
  v246 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v247 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v249 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v250 = v308;
  v251 = 17;
  v254 = 7;
  v256 = swift_allocObject();
  *(_BYTE *)(v256 + 16) = 32;
  v257 = swift_allocObject();
  *(_BYTE *)(v257 + 16) = 8;
  v253 = 32;
  v11 = swift_allocObject();
  v12 = v252;
  v255 = v11;
  *(_QWORD *)(v11 + 16) = partial apply for implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:);
  *(_QWORD *)(v11 + 24) = v12;
  v13 = swift_allocObject();
  v14 = v255;
  v259 = v13;
  *(_QWORD *)(v13 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v13 + 24) = v14;
  v261 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v258 = _allocateUninitializedArray<A>(_:)();
  v260 = v15;
  swift_retain();
  v16 = v256;
  v17 = v260;
  *v260 = partial apply for closure #1 in OSLogArguments.append(_:);
  v17[1] = v16;
  swift_retain();
  v18 = v257;
  v19 = v260;
  v260[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v19[3] = v18;
  swift_retain();
  v20 = v259;
  v21 = v260;
  v260[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v21[5] = v20;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v262, (os_log_type_t)v263))
  {
    v226 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v225 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v227 = createStorage<A>(capacity:type:)(0);
    v228 = createStorage<A>(capacity:type:)(1);
    v229 = &v268;
    v268 = v226;
    v230 = &v267;
    v267 = v227;
    v231 = &v266;
    v266 = v228;
    serialize(_:at:)(2, &v268);
    serialize(_:at:)(1, v229);
    v22 = v234;
    v264 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v265 = v256;
    closure #1 in osLogInternal(_:log:type:)(&v264, (uint64_t)v229, (uint64_t)v230, (uint64_t)v231);
    v232 = v22;
    if (v22)
    {
      __break(1u);
    }
    else
    {
      v264 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v265 = v257;
      closure #1 in osLogInternal(_:log:type:)(&v264, (uint64_t)&v268, (uint64_t)&v267, (uint64_t)&v266);
      v223 = 0;
      v264 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v265 = v259;
      closure #1 in osLogInternal(_:log:type:)(&v264, (uint64_t)&v268, (uint64_t)&v267, (uint64_t)&v266);
      v222 = 0;
      _os_log_impl(&dword_24701B000, v262, (os_log_type_t)v263, "#Transformer for request_common_PaymentAccount task %s", v226, v250);
      destroyStorage<A>(_:count:)(v227, 0, v225);
      destroyStorage<A>(_:count:)(v228, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v226, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v224 = v222;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v224 = v234;
  }
  v23 = v240;
  v207 = v224;

  v208 = (void (*)(char *, uint64_t))v243[1];
  v208(v242, v244);
  v24 = Logger.payments.unsafeMutableAddressor();
  v245(v23, v24, v244);
  v25 = v235;
  v212 = 7;
  v213 = swift_allocObject();
  *(_QWORD *)(v213 + 16) = v235;
  v220 = Logger.logObject.getter();
  v221 = static os_log_type_t.debug.getter();
  v305[1] = (id)12;
  UnsignedInteger<>.init<A>(_:)();
  v209 = v306;
  v210 = 17;
  v215 = swift_allocObject();
  *(_BYTE *)(v215 + 16) = 32;
  v216 = swift_allocObject();
  *(_BYTE *)(v216 + 16) = 8;
  v211 = 32;
  v26 = swift_allocObject();
  v27 = v213;
  v214 = v26;
  *(_QWORD *)(v26 + 16) = partial apply for implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:);
  *(_QWORD *)(v26 + 24) = v27;
  v28 = swift_allocObject();
  v29 = v214;
  v218 = v28;
  *(_QWORD *)(v28 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v28 + 24) = v29;
  v217 = _allocateUninitializedArray<A>(_:)();
  v219 = v30;
  swift_retain();
  v31 = v215;
  v32 = v219;
  *v219 = partial apply for closure #1 in OSLogArguments.append(_:);
  v32[1] = v31;
  swift_retain();
  v33 = v216;
  v34 = v219;
  v219[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[3] = v33;
  swift_retain();
  v35 = v218;
  v36 = v219;
  v219[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v36[5] = v35;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v220, (os_log_type_t)v221))
  {
    v200 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v199 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v201 = createStorage<A>(capacity:type:)(0);
    v202 = createStorage<A>(capacity:type:)(1);
    v203 = &v273;
    v273 = v200;
    v204 = &v272;
    v272 = v201;
    v205 = &v271;
    v271 = v202;
    serialize(_:at:)(2, &v273);
    serialize(_:at:)(1, v203);
    v37 = v207;
    v269 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v270 = v215;
    closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)v203, (uint64_t)v204, (uint64_t)v205);
    v206 = v37;
    if (v37)
    {
      __break(1u);
    }
    else
    {
      v269 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v270 = v216;
      closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)&v273, (uint64_t)&v272, (uint64_t)&v271);
      v197 = 0;
      v269 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v270 = v218;
      closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)&v273, (uint64_t)&v272, (uint64_t)&v271);
      v196 = 0;
      _os_log_impl(&dword_24701B000, v220, (os_log_type_t)v221, "#Transformer for request_common_PaymentAccount previous intent is %s", v200, v209);
      destroyStorage<A>(_:count:)(v201, 0, v199);
      destroyStorage<A>(_:count:)(v202, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v200, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v198 = v196;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v198 = v207;
  }
  v195 = v198;

  v208(v240, v244);
  v38 = v235;
  if (v235)
  {
    v194 = v235;
    v193 = v235;
    v305[0] = objc_msgSend(v235, sel_accountNickname);

  }
  else
  {
    v305[0] = 0;
  }
  v39 = v235;
  if (v235)
  {
    v192 = v235;
    v188 = v235;
    v189 = objc_msgSend(v235, sel_accountType);

    v190 = (uint64_t)v189;
    v191 = 0;
  }
  else
  {
    v190 = 0;
    v191 = 1;
  }
  v302 = v190;
  v303 = v191 & 1;
  if ((v191 & 1) != 0)
    v304 = 0;
  else
    v304 = v302;
  v40 = v235;
  if (v235)
  {
    v187 = v235;
    v186 = v235;
    v301 = objc_msgSend(v235, sel_organizationName);

  }
  else
  {
    v301 = 0;
  }
  v41 = v235;
  if (v235)
  {
    v185 = v235;
    v181 = v235;
    v182 = objc_msgSend(v235, sel_requestedBalanceType);

    v183 = (uint64_t)v182;
    v184 = 0;
  }
  else
  {
    v183 = 0;
    v184 = 1;
  }
  v298 = v183;
  v299 = v184 & 1;
  if ((v184 & 1) != 0)
    v300 = 1;
  else
    v300 = v298;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v177 = v297;
  swift_release();
  v178 = static PaymentAccountInformation.from(_:)(v177);
  v180 = v42;
  *(_QWORD *)&v179 = v43;
  *((_QWORD *)&v179 + 1) = v44;
  swift_release();
  if (v180 != (id)1)
  {
    *(_QWORD *)&v175 = v178;
    *((_QWORD *)&v175 + 1) = v180;
    v176 = v179;
    v172 = *((_QWORD *)&v179 + 1);
    v174 = (id)v179;
    v173 = v175;
    v274 = v175;
    v275 = v179;
    v45 = v180;
    v46 = v305[0];
    v305[0] = *((id *)&v173 + 1);

    v304 = v172;
    v47 = v174;
    v48 = v301;
    v301 = v174;

    v300 = v173;
  }
  type metadata accessor for INSearchForAccountsIntent();
  v169 = v305[0];
  v49 = v305[0];
  v167 = v304;
  v168 = v301;
  v50 = v301;
  v170 = INSearchForAccountsIntent.__allocating_init(accountNickname:accountType:organizationName:requestedBalanceType:)(v169, v167, v168);
  v296 = v170;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v171 = v295;
  swift_release();
  if (v171)
  {
    v166 = v171;
    v163 = v171;
    v164 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
    swift_release();
    v165 = v164;
  }
  else
  {
    v165 = 0;
  }
  v162 = v165;
  if (v165)
  {
    v161 = v162;
    v158 = v162;
    v280 = v162;
    v159 = type metadata accessor for App();
    UsoEntity_common_App.appIdentifier.getter();
    v160 = App.__allocating_init(appIdentifier:)();
    v279 = v160;
    if (App.isFirstParty.getter())
    {
      v157 = &v277;
      v277 = v304;
      v155 = &v276;
      v276 = 0;
      v156 = type metadata accessor for INAccountType();
      lazy protocol witness table accessor for type INAccountType and conformance INAccountType();
      if ((== infix<A>(_:_:)() & 1) != 0)
      {
        INBalanceType.rawValue.getter();
        isa = Int._bridgeToObjectiveC()().super.super.isa;
        v51 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, 1);
        object = v51._object;
        v153 = (id)MEMORY[0x24957220C](v51._countAndFlagsBits);
        swift_bridgeObjectRelease();
        objc_msgSend(v170, sel_setValue_forKeyPath_, isa, v153);

        swift_unknownObjectRelease();
      }
    }
    v52 = v170;
    v149 = Constants.intentAppIDAssociatedKey.unsafeMutableAddressor();
    v150 = UsoEntity_common_App.appIdentifier.getter();
    v151 = v53;
    if (v53)
    {
      v147 = v150;
      v148 = v151;
      v144 = v151;
      v145 = MEMORY[0x24957220C](v150);
      swift_bridgeObjectRelease();
      v146 = (void *)v145;
    }
    else
    {
      v146 = 0;
    }
    v143 = v146;
    v142 = &v278;
    swift_beginAccess();
    objc_setAssociatedObject(v170, v149, v143, (void *)0x301);
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v141 = v294;
  v54 = swift_release();
  if (v141 && (v140 = v141, v138 = v141, v139 = MEMORY[0x2495718A0](v54), swift_release(), v139))
  {
    v137 = v139;
    v132 = v139;
    v133 = MEMORY[0x2495719CC]();
    v134 = v55;
    swift_release();
    v135 = v133;
    v136 = v134;
  }
  else
  {
    v135 = 0;
    v136 = 0;
  }
  v130 = v136;
  v129 = v135;
  swift_bridgeObjectRetain();
  v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Apple Cash", 0xAuLL, 1);
  countAndFlagsBits = v56._countAndFlagsBits;
  v131 = v56._object;
  swift_bridgeObjectRetain();
  v291[0] = v129;
  v291[1] = v130;
  v292 = countAndFlagsBits;
  v293 = v131;
  if (v130)
  {
    outlined init with copy of String(v291, v281);
    if (v293)
    {
      v121 = v281[0];
      v124 = v281[1];
      swift_bridgeObjectRetain();
      v122 = v292;
      v125 = v291;
      v123 = v293;
      swift_bridgeObjectRetain();
      v126 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of String.UTF8View();
      v127 = v126;
      goto LABEL_56;
    }
    outlined destroy of String.UTF8View();
    goto LABEL_58;
  }
  if (v293)
  {
LABEL_58:
    outlined destroy of DIIdentifier();
    v127 = 0;
    goto LABEL_56;
  }
  outlined destroy of String.UTF8View();
  v127 = 1;
LABEL_56:
  v120 = v127;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v120 & 1) != 0)
  {
    v119 = &v284;
    v284 = v304;
    v117 = &v283;
    v283 = 0;
    v118 = type metadata accessor for INAccountType();
    lazy protocol witness table accessor for type INAccountType and conformance INAccountType();
    if ((== infix<A>(_:_:)() & 1) != 0)
    {
      INBalanceType.rawValue.getter();
      v116 = Int._bridgeToObjectiveC()().super.super.isa;
      v57 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, 1);
      v114 = v57._object;
      v115 = (id)MEMORY[0x24957220C](v57._countAndFlagsBits);
      swift_bridgeObjectRelease();
      objc_msgSend(v170, sel_setValue_forKeyPath_, v116, v115);

      swift_unknownObjectRelease();
    }
    v58 = v170;
    v110 = Constants.intentAppIDAssociatedKey.unsafeMutableAddressor();
    v111 = static AppUtil.walletApp.getter();
    v112 = App.appIdentifier.getter();
    v113 = v59;
    if (v59)
    {
      v108 = v112;
      v109 = v113;
      v105 = v113;
      v106 = MEMORY[0x24957220C](v112);
      swift_bridgeObjectRelease();
      v107 = (void *)v106;
    }
    else
    {
      v107 = 0;
    }
    v104 = v107;
    swift_release();
    v103 = &v282;
    swift_beginAccess();
    objc_setAssociatedObject(v170, v110, v104, (void *)0x301);
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  v60 = v238;
  v61 = Logger.payments.unsafeMutableAddressor();
  v245(v60, v61, v244);
  v62 = v170;
  v93 = 7;
  v94 = swift_allocObject();
  *(_QWORD *)(v94 + 16) = v170;
  v101 = Logger.logObject.getter();
  v102 = static os_log_type_t.debug.getter();
  v289[1] = (_BYTE *)12;
  UnsignedInteger<>.init<A>(_:)();
  v90 = v290;
  v91 = 17;
  v96 = swift_allocObject();
  *(_BYTE *)(v96 + 16) = 32;
  v97 = swift_allocObject();
  *(_BYTE *)(v97 + 16) = 8;
  v92 = 32;
  v63 = swift_allocObject();
  v64 = v94;
  v95 = v63;
  *(_QWORD *)(v63 + 16) = partial apply for implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:);
  *(_QWORD *)(v63 + 24) = v64;
  v65 = swift_allocObject();
  v66 = v95;
  v99 = v65;
  *(_QWORD *)(v65 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v65 + 24) = v66;
  v98 = _allocateUninitializedArray<A>(_:)();
  v100 = v67;
  swift_retain();
  v68 = v96;
  v69 = v100;
  *v100 = partial apply for closure #1 in OSLogArguments.append(_:);
  v69[1] = v68;
  swift_retain();
  v70 = v97;
  v71 = v100;
  v100[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v71[3] = v70;
  swift_retain();
  v72 = v99;
  v73 = v100;
  v100[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v73[5] = v72;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v101, (os_log_type_t)v102))
  {
    v83 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v82 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v84 = createStorage<A>(capacity:type:)(0);
    v85 = createStorage<A>(capacity:type:)(1);
    v86 = v289;
    v289[0] = v83;
    v87 = &v288;
    v288 = v84;
    v88 = &v287;
    v287 = v85;
    serialize(_:at:)(2, v289);
    serialize(_:at:)(1, v86);
    v74 = v195;
    v285 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v286 = v96;
    closure #1 in osLogInternal(_:log:type:)(&v285, (uint64_t)v86, (uint64_t)v87, (uint64_t)v88);
    v89 = v74;
    if (v74)
    {
      __break(1u);
    }
    else
    {
      v285 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v286 = v97;
      closure #1 in osLogInternal(_:log:type:)(&v285, (uint64_t)v289, (uint64_t)&v288, (uint64_t)&v287);
      v80 = 0;
      v285 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v286 = v99;
      closure #1 in osLogInternal(_:log:type:)(&v285, (uint64_t)v289, (uint64_t)&v288, (uint64_t)&v287);
      v79 = 0;
      _os_log_impl(&dword_24701B000, v101, (os_log_type_t)v102, "#Transformer newly transformed intent is %s", v83, v90);
      destroyStorage<A>(_:count:)(v84, 0, v82);
      destroyStorage<A>(_:count:)(v85, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v83, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v81 = v79;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v81 = v195;
  }
  v78 = v81;

  v208(v238, v244);
  v75 = v170;
  v76 = v170;
  *v233 = v170;

  outlined destroy of SFRichText?(&v301);
  result = v305;
  outlined destroy of SFRichText?(v305);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  char *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  id v69;
  id v70;
  id *result;
  char *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE **v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  id v104;
  id v105;
  uint32_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  NSObject *v117;
  int v118;
  uint64_t v119;
  __int128 v120;
  id v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  NSJSONWritingOptions v125;
  __int128 v126;
  id v127;
  id v128;
  id v129;
  uint64_t v130;
  int v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  uint64_t v137;
  int v138;
  id v139;
  id v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint8_t *v147;
  uint64_t v148;
  uint64_t v149;
  _BYTE **v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(char *, uint64_t);
  uint32_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  NSObject *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint8_t *v173;
  uint64_t v174;
  uint64_t v175;
  _BYTE **v176;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  id v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  unint64_t v186;
  char *v187;
  unint64_t v188;
  char *v189;
  _QWORD *v190;
  uint64_t v191;
  void (*v192)(char *, uint64_t, uint64_t);
  unint64_t v193;
  unint64_t v194;
  uint64_t *v195;
  unint64_t v196;
  uint32_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  NSObject *v209;
  int v210;
  uint64_t (*v211)(uint64_t, uint64_t, uint64_t);
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _BYTE *v215;
  uint64_t (*v216)(uint64_t, uint64_t, uint64_t);
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _BYTE *v220;
  __int128 v221;
  __int128 v222;
  uint64_t (*v223)(uint64_t, uint64_t, uint64_t);
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _BYTE *v227;
  char v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint32_t v232;
  id v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  uint64_t v237;
  id v238;
  uint64_t v239;
  char v240;
  uint64_t v241;
  id v242[2];
  uint32_t v243;
  uint64_t v244;
  uint32_t v245;
  uint64_t v246;
  uint64_t v247;

  v180 = a3;
  v183 = a1;
  v182 = a2;
  v247 = 0;
  v246 = 0;
  v233 = 0;
  v229 = 0;
  v221 = 0u;
  v222 = 0u;
  v191 = type metadata accessor for Logger();
  v190 = *(_QWORD **)(v191 - 8);
  v184 = (v190[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v183);
  v185 = (char *)&v72 - v184;
  v186 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v3);
  v187 = (char *)&v72 - v186;
  v188 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = (uint64_t *)MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v72 - v188;
  v189 = (char *)&v72 - v188;
  v199 = *v7;
  v247 = v199;
  v246 = v9;
  v10 = Logger.payments.unsafeMutableAddressor();
  v192 = (void (*)(char *, uint64_t, uint64_t))v190[2];
  v192(v8, v10, v191);
  swift_retain();
  v209 = Logger.logObject.getter();
  v210 = static os_log_type_t.debug.getter();
  v195 = &v244;
  v244 = 12;
  v193 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v194 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v196 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v197 = v245;
  v198 = 17;
  v201 = 7;
  v203 = swift_allocObject();
  *(_BYTE *)(v203 + 16) = 32;
  v204 = swift_allocObject();
  *(_BYTE *)(v204 + 16) = 8;
  v200 = 32;
  v11 = swift_allocObject();
  v12 = v199;
  v202 = v11;
  *(_QWORD *)(v11 + 16) = partial apply for implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:);
  *(_QWORD *)(v11 + 24) = v12;
  v13 = swift_allocObject();
  v14 = v202;
  v206 = v13;
  *(_QWORD *)(v13 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v13 + 24) = v14;
  v208 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v205 = _allocateUninitializedArray<A>(_:)();
  v207 = v15;
  swift_retain();
  v16 = v203;
  v17 = v207;
  *v207 = partial apply for closure #1 in OSLogArguments.append(_:);
  v17[1] = v16;
  swift_retain();
  v18 = v204;
  v19 = v207;
  v207[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v19[3] = v18;
  swift_retain();
  v20 = v206;
  v21 = v207;
  v207[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v21[5] = v20;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v209, (os_log_type_t)v210))
  {
    v173 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v172 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v174 = createStorage<A>(capacity:type:)(0);
    v175 = createStorage<A>(capacity:type:)(1);
    v176 = &v215;
    v215 = v173;
    v177 = &v214;
    v214 = v174;
    v178 = &v213;
    v213 = v175;
    serialize(_:at:)(2, &v215);
    serialize(_:at:)(1, v176);
    v22 = v181;
    v211 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v212 = v203;
    closure #1 in osLogInternal(_:log:type:)(&v211, (uint64_t)v176, (uint64_t)v177, (uint64_t)v178);
    v179 = v22;
    if (v22)
    {
      __break(1u);
    }
    else
    {
      v211 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v212 = v204;
      closure #1 in osLogInternal(_:log:type:)(&v211, (uint64_t)&v215, (uint64_t)&v214, (uint64_t)&v213);
      v170 = 0;
      v211 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v212 = v206;
      closure #1 in osLogInternal(_:log:type:)(&v211, (uint64_t)&v215, (uint64_t)&v214, (uint64_t)&v213);
      v169 = 0;
      _os_log_impl(&dword_24701B000, v209, (os_log_type_t)v210, "#Transformer for summarise_common_PaymentAccount task %s", v173, v197);
      destroyStorage<A>(_:count:)(v174, 0, v172);
      destroyStorage<A>(_:count:)(v175, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v173, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v171 = v169;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v171 = v181;
  }
  v23 = v187;
  v154 = v171;

  v155 = (void (*)(char *, uint64_t))v190[1];
  v155(v189, v191);
  v24 = Logger.payments.unsafeMutableAddressor();
  v192(v23, v24, v191);
  v25 = v182;
  v159 = 7;
  v160 = swift_allocObject();
  *(_QWORD *)(v160 + 16) = v182;
  v167 = Logger.logObject.getter();
  v168 = static os_log_type_t.debug.getter();
  v242[1] = (id)12;
  UnsignedInteger<>.init<A>(_:)();
  v156 = v243;
  v157 = 17;
  v162 = swift_allocObject();
  *(_BYTE *)(v162 + 16) = 32;
  v163 = swift_allocObject();
  *(_BYTE *)(v163 + 16) = 8;
  v158 = 32;
  v26 = swift_allocObject();
  v27 = v160;
  v161 = v26;
  *(_QWORD *)(v26 + 16) = partial apply for implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:);
  *(_QWORD *)(v26 + 24) = v27;
  v28 = swift_allocObject();
  v29 = v161;
  v165 = v28;
  *(_QWORD *)(v28 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v28 + 24) = v29;
  v164 = _allocateUninitializedArray<A>(_:)();
  v166 = v30;
  swift_retain();
  v31 = v162;
  v32 = v166;
  *v166 = partial apply for closure #1 in OSLogArguments.append(_:);
  v32[1] = v31;
  swift_retain();
  v33 = v163;
  v34 = v166;
  v166[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[3] = v33;
  swift_retain();
  v35 = v165;
  v36 = v166;
  v166[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v36[5] = v35;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v167, (os_log_type_t)v168))
  {
    v147 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v146 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v148 = createStorage<A>(capacity:type:)(0);
    v149 = createStorage<A>(capacity:type:)(1);
    v150 = &v220;
    v220 = v147;
    v151 = &v219;
    v219 = v148;
    v152 = &v218;
    v218 = v149;
    serialize(_:at:)(2, &v220);
    serialize(_:at:)(1, v150);
    v37 = v154;
    v216 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v217 = v162;
    closure #1 in osLogInternal(_:log:type:)(&v216, (uint64_t)v150, (uint64_t)v151, (uint64_t)v152);
    v153 = v37;
    if (v37)
    {
      __break(1u);
    }
    else
    {
      v216 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v217 = v163;
      closure #1 in osLogInternal(_:log:type:)(&v216, (uint64_t)&v220, (uint64_t)&v219, (uint64_t)&v218);
      v144 = 0;
      v216 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v217 = v165;
      closure #1 in osLogInternal(_:log:type:)(&v216, (uint64_t)&v220, (uint64_t)&v219, (uint64_t)&v218);
      v143 = 0;
      _os_log_impl(&dword_24701B000, v167, (os_log_type_t)v168, "#Transformer for summarise_common_PaymentAccount previous intent is %s", v147, v156);
      destroyStorage<A>(_:count:)(v148, 0, v146);
      destroyStorage<A>(_:count:)(v149, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v147, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v145 = v143;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v145 = v154;
  }
  v142 = v145;

  v155(v187, v191);
  v38 = v182;
  if (v182)
  {
    v141 = v182;
    v140 = v182;
    v242[0] = objc_msgSend(v182, sel_accountNickname);

  }
  else
  {
    v242[0] = 0;
  }
  v39 = v182;
  if (v182)
  {
    v139 = v182;
    v135 = v182;
    v136 = objc_msgSend(v182, sel_accountType);

    v137 = (uint64_t)v136;
    v138 = 0;
  }
  else
  {
    v137 = 0;
    v138 = 1;
  }
  v239 = v137;
  v240 = v138 & 1;
  if ((v138 & 1) != 0)
    v241 = 0;
  else
    v241 = v239;
  v40 = v182;
  if (v182)
  {
    v134 = v182;
    v133 = v182;
    v238 = objc_msgSend(v182, sel_organizationName);

  }
  else
  {
    v238 = 0;
  }
  v41 = v182;
  if (v182)
  {
    v132 = v182;
    v128 = v182;
    v129 = objc_msgSend(v182, sel_requestedBalanceType);

    v130 = (uint64_t)v129;
    v131 = 0;
  }
  else
  {
    v130 = 0;
    v131 = 1;
  }
  v235 = v130;
  v236 = v131 & 1;
  if ((v131 & 1) != 0)
    v237 = 1;
  else
    v237 = v235;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v124 = v234;
  swift_release();
  v125 = static PaymentAccountInformation.from(_:)(v124);
  v127 = v42;
  *(_QWORD *)&v126 = v43;
  *((_QWORD *)&v126 + 1) = v44;
  swift_release();
  if (v127 != (id)1)
  {
    *(_QWORD *)&v122 = v125;
    *((_QWORD *)&v122 + 1) = v127;
    v123 = v126;
    v119 = *((_QWORD *)&v126 + 1);
    v121 = (id)v126;
    v120 = v122;
    v221 = v122;
    v222 = v126;
    v45 = v127;
    v46 = v242[0];
    v242[0] = *((id *)&v120 + 1);

    v241 = v119;
    v47 = v121;
    v48 = v238;
    v238 = v121;

    v237 = v120;
  }
  type metadata accessor for INSearchForAccountsIntent();
  v104 = v242[0];
  v49 = v242[0];
  v102 = v241;
  v103 = v238;
  v50 = v238;
  v51 = INSearchForAccountsIntent.__allocating_init(accountNickname:accountType:organizationName:requestedBalanceType:)(v104, v102, v103);
  v52 = v185;
  v105 = v51;
  v233 = v51;
  v53 = Logger.payments.unsafeMutableAddressor();
  v192(v52, v53, v191);
  v54 = v105;
  v109 = 7;
  v110 = swift_allocObject();
  *(_QWORD *)(v110 + 16) = v105;
  v117 = Logger.logObject.getter();
  v118 = static os_log_type_t.debug.getter();
  v231 = 12;
  UnsignedInteger<>.init<A>(_:)();
  v106 = v232;
  v107 = 17;
  v112 = swift_allocObject();
  *(_BYTE *)(v112 + 16) = 32;
  v113 = swift_allocObject();
  *(_BYTE *)(v113 + 16) = 8;
  v108 = 32;
  v55 = swift_allocObject();
  v56 = v110;
  v111 = v55;
  *(_QWORD *)(v55 + 16) = partial apply for implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:);
  *(_QWORD *)(v55 + 24) = v56;
  v57 = swift_allocObject();
  v58 = v111;
  v115 = v57;
  *(_QWORD *)(v57 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v57 + 24) = v58;
  v114 = _allocateUninitializedArray<A>(_:)();
  v116 = v59;
  swift_retain();
  v60 = v112;
  v61 = v116;
  *v116 = partial apply for closure #1 in OSLogArguments.append(_:);
  v61[1] = v60;
  swift_retain();
  v62 = v113;
  v63 = v116;
  v116[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v63[3] = v62;
  swift_retain();
  v64 = v115;
  v65 = v116;
  v116[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v65[5] = v64;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v117, (os_log_type_t)v118))
  {
    v95 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v94 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v96 = createStorage<A>(capacity:type:)(0);
    v97 = createStorage<A>(capacity:type:)(1);
    v98 = &v227;
    v227 = v95;
    v99 = &v226;
    v226 = v96;
    v100 = &v225;
    v225 = v97;
    serialize(_:at:)(2, &v227);
    serialize(_:at:)(1, v98);
    v66 = v142;
    v223 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v224 = v112;
    closure #1 in osLogInternal(_:log:type:)(&v223, (uint64_t)v98, (uint64_t)v99, (uint64_t)v100);
    v101 = v66;
    if (v66)
    {
      __break(1u);
    }
    else
    {
      v223 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v224 = v113;
      closure #1 in osLogInternal(_:log:type:)(&v223, (uint64_t)&v227, (uint64_t)&v226, (uint64_t)&v225);
      v92 = 0;
      v223 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v224 = v115;
      closure #1 in osLogInternal(_:log:type:)(&v223, (uint64_t)&v227, (uint64_t)&v226, (uint64_t)&v225);
      v91 = 0;
      _os_log_impl(&dword_24701B000, v117, (os_log_type_t)v118, "#Transformer newly transformed intent is %s", v95, v106);
      destroyStorage<A>(_:count:)(v96, 0, v94);
      destroyStorage<A>(_:count:)(v97, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v95, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v93 = v91;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v93 = v142;
  }
  v89 = v93;

  v155(v185, v191);
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v90 = v230;
  swift_release();
  if (v90)
  {
    v88 = v90;
    v85 = v90;
    v86 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
    swift_release();
    v87 = v86;
  }
  else
  {
    v87 = 0;
  }
  v84 = v87;
  if (v87)
  {
    v83 = v84;
    v79 = v84;
    v229 = v84;
    v67 = v105;
    v80 = Constants.intentAppIDAssociatedKey.unsafeMutableAddressor();
    v81 = UsoEntity_common_App.appIdentifier.getter();
    v82 = v68;
    if (v68)
    {
      v77 = v81;
      v78 = v82;
      v74 = v82;
      v75 = MEMORY[0x24957220C](v81);
      swift_bridgeObjectRelease();
      v76 = (void *)v75;
    }
    else
    {
      v76 = 0;
    }
    v73 = v76;
    v72 = &v228;
    swift_beginAccess();
    objc_setAssociatedObject(v105, v80, v73, (void *)0x301);
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
  }
  v69 = v105;
  v70 = v105;
  *v180 = v105;

  outlined destroy of SFRichText?(&v238);
  result = v242;
  outlined destroy of SFRichText?(v242);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  char *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  id v69;
  id v70;
  id *result;
  char *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE **v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  id v104;
  id v105;
  uint32_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  NSObject *v117;
  int v118;
  uint64_t v119;
  __int128 v120;
  id v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  NSJSONWritingOptions v125;
  __int128 v126;
  id v127;
  id v128;
  id v129;
  uint64_t v130;
  int v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  uint64_t v137;
  int v138;
  id v139;
  id v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint8_t *v147;
  uint64_t v148;
  uint64_t v149;
  _BYTE **v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(char *, uint64_t);
  uint32_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  NSObject *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint8_t *v173;
  uint64_t v174;
  uint64_t v175;
  _BYTE **v176;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  id v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  unint64_t v186;
  char *v187;
  unint64_t v188;
  char *v189;
  _QWORD *v190;
  uint64_t v191;
  void (*v192)(char *, uint64_t, uint64_t);
  unint64_t v193;
  unint64_t v194;
  uint64_t *v195;
  unint64_t v196;
  uint32_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  NSObject *v209;
  int v210;
  uint64_t (*v211)(uint64_t, uint64_t, uint64_t);
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _BYTE *v215;
  uint64_t (*v216)(uint64_t, uint64_t, uint64_t);
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _BYTE *v220;
  __int128 v221;
  __int128 v222;
  uint64_t (*v223)(uint64_t, uint64_t, uint64_t);
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _BYTE *v227;
  char v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint32_t v232;
  id v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  uint64_t v237;
  id v238;
  uint64_t v239;
  char v240;
  uint64_t v241;
  id v242[2];
  uint32_t v243;
  uint64_t v244;
  uint32_t v245;
  uint64_t v246;
  uint64_t v247;

  v180 = a3;
  v183 = a1;
  v182 = a2;
  v247 = 0;
  v246 = 0;
  v233 = 0;
  v229 = 0;
  v221 = 0u;
  v222 = 0u;
  v191 = type metadata accessor for Logger();
  v190 = *(_QWORD **)(v191 - 8);
  v184 = (v190[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v183);
  v185 = (char *)&v72 - v184;
  v186 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v3);
  v187 = (char *)&v72 - v186;
  v188 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = (uint64_t *)MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v72 - v188;
  v189 = (char *)&v72 - v188;
  v199 = *v7;
  v247 = v199;
  v246 = v9;
  v10 = Logger.payments.unsafeMutableAddressor();
  v192 = (void (*)(char *, uint64_t, uint64_t))v190[2];
  v192(v8, v10, v191);
  swift_retain();
  v209 = Logger.logObject.getter();
  v210 = static os_log_type_t.debug.getter();
  v195 = &v244;
  v244 = 12;
  v193 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v194 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v196 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v197 = v245;
  v198 = 17;
  v201 = 7;
  v203 = swift_allocObject();
  *(_BYTE *)(v203 + 16) = 32;
  v204 = swift_allocObject();
  *(_BYTE *)(v204 + 16) = 8;
  v200 = 32;
  v11 = swift_allocObject();
  v12 = v199;
  v202 = v11;
  *(_QWORD *)(v11 + 16) = partial apply for implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:);
  *(_QWORD *)(v11 + 24) = v12;
  v13 = swift_allocObject();
  v14 = v202;
  v206 = v13;
  *(_QWORD *)(v13 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v13 + 24) = v14;
  v208 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v205 = _allocateUninitializedArray<A>(_:)();
  v207 = v15;
  swift_retain();
  v16 = v203;
  v17 = v207;
  *v207 = partial apply for closure #1 in OSLogArguments.append(_:);
  v17[1] = v16;
  swift_retain();
  v18 = v204;
  v19 = v207;
  v207[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v19[3] = v18;
  swift_retain();
  v20 = v206;
  v21 = v207;
  v207[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v21[5] = v20;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v209, (os_log_type_t)v210))
  {
    v173 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v172 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v174 = createStorage<A>(capacity:type:)(0);
    v175 = createStorage<A>(capacity:type:)(1);
    v176 = &v215;
    v215 = v173;
    v177 = &v214;
    v214 = v174;
    v178 = &v213;
    v213 = v175;
    serialize(_:at:)(2, &v215);
    serialize(_:at:)(1, v176);
    v22 = v181;
    v211 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v212 = v203;
    closure #1 in osLogInternal(_:log:type:)(&v211, (uint64_t)v176, (uint64_t)v177, (uint64_t)v178);
    v179 = v22;
    if (v22)
    {
      __break(1u);
    }
    else
    {
      v211 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v212 = v204;
      closure #1 in osLogInternal(_:log:type:)(&v211, (uint64_t)&v215, (uint64_t)&v214, (uint64_t)&v213);
      v170 = 0;
      v211 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v212 = v206;
      closure #1 in osLogInternal(_:log:type:)(&v211, (uint64_t)&v215, (uint64_t)&v214, (uint64_t)&v213);
      v169 = 0;
      _os_log_impl(&dword_24701B000, v209, (os_log_type_t)v210, "#Transformer for noVerb_common_PaymentAccount task %s", v173, v197);
      destroyStorage<A>(_:count:)(v174, 0, v172);
      destroyStorage<A>(_:count:)(v175, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v173, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v171 = v169;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v171 = v181;
  }
  v23 = v187;
  v154 = v171;

  v155 = (void (*)(char *, uint64_t))v190[1];
  v155(v189, v191);
  v24 = Logger.payments.unsafeMutableAddressor();
  v192(v23, v24, v191);
  v25 = v182;
  v159 = 7;
  v160 = swift_allocObject();
  *(_QWORD *)(v160 + 16) = v182;
  v167 = Logger.logObject.getter();
  v168 = static os_log_type_t.debug.getter();
  v242[1] = (id)12;
  UnsignedInteger<>.init<A>(_:)();
  v156 = v243;
  v157 = 17;
  v162 = swift_allocObject();
  *(_BYTE *)(v162 + 16) = 32;
  v163 = swift_allocObject();
  *(_BYTE *)(v163 + 16) = 8;
  v158 = 32;
  v26 = swift_allocObject();
  v27 = v160;
  v161 = v26;
  *(_QWORD *)(v26 + 16) = partial apply for implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:);
  *(_QWORD *)(v26 + 24) = v27;
  v28 = swift_allocObject();
  v29 = v161;
  v165 = v28;
  *(_QWORD *)(v28 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v28 + 24) = v29;
  v164 = _allocateUninitializedArray<A>(_:)();
  v166 = v30;
  swift_retain();
  v31 = v162;
  v32 = v166;
  *v166 = partial apply for closure #1 in OSLogArguments.append(_:);
  v32[1] = v31;
  swift_retain();
  v33 = v163;
  v34 = v166;
  v166[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[3] = v33;
  swift_retain();
  v35 = v165;
  v36 = v166;
  v166[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v36[5] = v35;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v167, (os_log_type_t)v168))
  {
    v147 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v146 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v148 = createStorage<A>(capacity:type:)(0);
    v149 = createStorage<A>(capacity:type:)(1);
    v150 = &v220;
    v220 = v147;
    v151 = &v219;
    v219 = v148;
    v152 = &v218;
    v218 = v149;
    serialize(_:at:)(2, &v220);
    serialize(_:at:)(1, v150);
    v37 = v154;
    v216 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v217 = v162;
    closure #1 in osLogInternal(_:log:type:)(&v216, (uint64_t)v150, (uint64_t)v151, (uint64_t)v152);
    v153 = v37;
    if (v37)
    {
      __break(1u);
    }
    else
    {
      v216 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v217 = v163;
      closure #1 in osLogInternal(_:log:type:)(&v216, (uint64_t)&v220, (uint64_t)&v219, (uint64_t)&v218);
      v144 = 0;
      v216 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v217 = v165;
      closure #1 in osLogInternal(_:log:type:)(&v216, (uint64_t)&v220, (uint64_t)&v219, (uint64_t)&v218);
      v143 = 0;
      _os_log_impl(&dword_24701B000, v167, (os_log_type_t)v168, "#Transformer for noVerb_common_PaymentAccount previous intent is %s", v147, v156);
      destroyStorage<A>(_:count:)(v148, 0, v146);
      destroyStorage<A>(_:count:)(v149, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v147, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v145 = v143;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v145 = v154;
  }
  v142 = v145;

  v155(v187, v191);
  v38 = v182;
  if (v182)
  {
    v141 = v182;
    v140 = v182;
    v242[0] = objc_msgSend(v182, sel_accountNickname);

  }
  else
  {
    v242[0] = 0;
  }
  v39 = v182;
  if (v182)
  {
    v139 = v182;
    v135 = v182;
    v136 = objc_msgSend(v182, sel_accountType);

    v137 = (uint64_t)v136;
    v138 = 0;
  }
  else
  {
    v137 = 0;
    v138 = 1;
  }
  v239 = v137;
  v240 = v138 & 1;
  if ((v138 & 1) != 0)
    v241 = 0;
  else
    v241 = v239;
  v40 = v182;
  if (v182)
  {
    v134 = v182;
    v133 = v182;
    v238 = objc_msgSend(v182, sel_organizationName);

  }
  else
  {
    v238 = 0;
  }
  v41 = v182;
  if (v182)
  {
    v132 = v182;
    v128 = v182;
    v129 = objc_msgSend(v182, sel_requestedBalanceType);

    v130 = (uint64_t)v129;
    v131 = 0;
  }
  else
  {
    v130 = 0;
    v131 = 1;
  }
  v235 = v130;
  v236 = v131 & 1;
  if ((v131 & 1) != 0)
    v237 = 1;
  else
    v237 = v235;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v124 = v234;
  swift_release();
  v125 = static PaymentAccountInformation.from(_:)(v124);
  v127 = v42;
  *(_QWORD *)&v126 = v43;
  *((_QWORD *)&v126 + 1) = v44;
  swift_release();
  if (v127 != (id)1)
  {
    *(_QWORD *)&v122 = v125;
    *((_QWORD *)&v122 + 1) = v127;
    v123 = v126;
    v119 = *((_QWORD *)&v126 + 1);
    v121 = (id)v126;
    v120 = v122;
    v221 = v122;
    v222 = v126;
    v45 = v127;
    v46 = v242[0];
    v242[0] = *((id *)&v120 + 1);

    v241 = v119;
    v47 = v121;
    v48 = v238;
    v238 = v121;

    v237 = v120;
  }
  type metadata accessor for INSearchForAccountsIntent();
  v104 = v242[0];
  v49 = v242[0];
  v102 = v241;
  v103 = v238;
  v50 = v238;
  v51 = INSearchForAccountsIntent.__allocating_init(accountNickname:accountType:organizationName:requestedBalanceType:)(v104, v102, v103);
  v52 = v185;
  v105 = v51;
  v233 = v51;
  v53 = Logger.payments.unsafeMutableAddressor();
  v192(v52, v53, v191);
  v54 = v105;
  v109 = 7;
  v110 = swift_allocObject();
  *(_QWORD *)(v110 + 16) = v105;
  v117 = Logger.logObject.getter();
  v118 = static os_log_type_t.debug.getter();
  v231 = 12;
  UnsignedInteger<>.init<A>(_:)();
  v106 = v232;
  v107 = 17;
  v112 = swift_allocObject();
  *(_BYTE *)(v112 + 16) = 32;
  v113 = swift_allocObject();
  *(_BYTE *)(v113 + 16) = 8;
  v108 = 32;
  v55 = swift_allocObject();
  v56 = v110;
  v111 = v55;
  *(_QWORD *)(v55 + 16) = partial apply for implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:);
  *(_QWORD *)(v55 + 24) = v56;
  v57 = swift_allocObject();
  v58 = v111;
  v115 = v57;
  *(_QWORD *)(v57 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v57 + 24) = v58;
  v114 = _allocateUninitializedArray<A>(_:)();
  v116 = v59;
  swift_retain();
  v60 = v112;
  v61 = v116;
  *v116 = partial apply for closure #1 in OSLogArguments.append(_:);
  v61[1] = v60;
  swift_retain();
  v62 = v113;
  v63 = v116;
  v116[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v63[3] = v62;
  swift_retain();
  v64 = v115;
  v65 = v116;
  v116[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v65[5] = v64;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v117, (os_log_type_t)v118))
  {
    v95 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v94 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v96 = createStorage<A>(capacity:type:)(0);
    v97 = createStorage<A>(capacity:type:)(1);
    v98 = &v227;
    v227 = v95;
    v99 = &v226;
    v226 = v96;
    v100 = &v225;
    v225 = v97;
    serialize(_:at:)(2, &v227);
    serialize(_:at:)(1, v98);
    v66 = v142;
    v223 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v224 = v112;
    closure #1 in osLogInternal(_:log:type:)(&v223, (uint64_t)v98, (uint64_t)v99, (uint64_t)v100);
    v101 = v66;
    if (v66)
    {
      __break(1u);
    }
    else
    {
      v223 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v224 = v113;
      closure #1 in osLogInternal(_:log:type:)(&v223, (uint64_t)&v227, (uint64_t)&v226, (uint64_t)&v225);
      v92 = 0;
      v223 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v224 = v115;
      closure #1 in osLogInternal(_:log:type:)(&v223, (uint64_t)&v227, (uint64_t)&v226, (uint64_t)&v225);
      v91 = 0;
      _os_log_impl(&dword_24701B000, v117, (os_log_type_t)v118, "#Transformer newly transformed intent is %s", v95, v106);
      destroyStorage<A>(_:count:)(v96, 0, v94);
      destroyStorage<A>(_:count:)(v97, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v95, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v93 = v91;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v93 = v142;
  }
  v89 = v93;

  v155(v185, v191);
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v90 = v230;
  swift_release();
  if (v90)
  {
    v88 = v90;
    v85 = v90;
    v86 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
    swift_release();
    v87 = v86;
  }
  else
  {
    v87 = 0;
  }
  v84 = v87;
  if (v87)
  {
    v83 = v84;
    v79 = v84;
    v229 = v84;
    v67 = v105;
    v80 = Constants.intentAppIDAssociatedKey.unsafeMutableAddressor();
    v81 = UsoEntity_common_App.appIdentifier.getter();
    v82 = v68;
    if (v68)
    {
      v77 = v81;
      v78 = v82;
      v74 = v82;
      v75 = MEMORY[0x24957220C](v81);
      swift_bridgeObjectRelease();
      v76 = (void *)v75;
    }
    else
    {
      v76 = 0;
    }
    v73 = v76;
    v72 = &v228;
    swift_beginAccess();
    objc_setAssociatedObject(v105, v80, v73, (void *)0x301);
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
  }
  v69 = v105;
  v70 = v105;
  *v180 = v105;

  outlined destroy of SFRichText?(&v238);
  result = v242;
  outlined destroy of SFRichText?(v242);
  return result;
}

uint64_t sub_2470E274C()
{
  uint64_t v0;

  return swift_deallocObject();
}

id *partial apply for closure #1 in static Transformer<>.transformer(previousIntent:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in static Transformer<>.transformer(previousIntent:)(a1, *(void **)(v2 + 16), a2);
}

{
  uint64_t v2;

  return closure #1 in static Transformer<>.transformer(previousIntent:)(a1, *(void **)(v2 + 16), a2);
}

{
  uint64_t v2;

  return closure #1 in static Transformer<>.transformer(previousIntent:)(a1, *(void **)(v2 + 16), a2);
}

uint64_t implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:)()
{
  swift_retain();
  type metadata accessor for UsoTask_request_common_PaymentAccount();
  return String.init<A>(describing:)();
}

{
  swift_retain();
  type metadata accessor for UsoTask_summarise_common_PaymentAccount();
  return String.init<A>(describing:)();
}

{
  swift_retain();
  type metadata accessor for UsoTask_noVerb_common_PaymentAccount();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:)(void *a1)
{
  id v1;

  v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INSearchForAccountsIntent?);
  return String.init<A>(describing:)();
}

id INSearchForAccountsIntent.__allocating_init(accountNickname:accountType:organizationName:requestedBalanceType:)(void *a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc INSearchForAccountsIntent.init(accountNickname:accountType:organizationName:requestedBalanceType:)(a1, a2, a3);
}

uint64_t implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:)(void *a1)
{
  id v1;

  v1 = a1;
  type metadata accessor for INSearchForAccountsIntent();
  lazy protocol witness table accessor for type INSearchForAccountsIntent and conformance NSObject();
  return String.init<A>(describing:)();
}

uint64_t sub_2470E3C94()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2470E50F0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t default argument 0 of static Transformer<>.transformer(appBundleId:)()
{
  uint64_t v1;

  v1 = *(_QWORD *)AppUtil.usoNamespace.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t static Transformer<>.transformer(appBundleId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  swift_bridgeObjectRetain();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  type metadata accessor for INPerson();
  type metadata accessor for UsoEntityBuilder_common_Person();
  return Transformer.init(transform:)();
}

uint64_t closure #1 in static Transformer<>.transformer(appBundleId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  char *v69;
  id v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  char *v90;

  v52 = a4;
  v59 = a1;
  v61 = a2;
  v60 = a3;
  v90 = 0;
  v89 = 0;
  v87 = 0;
  v88 = 0;
  v86 = 0;
  v85 = 0;
  v83 = 0;
  v84 = 0;
  v81 = 0;
  v82 = 0;
  v79 = 0;
  v80 = 0;
  v77 = 0;
  v78 = 0;
  v75 = 0;
  v76 = 0;
  v73 = 0;
  v74 = 0;
  v62 = 0;
  v53 = type metadata accessor for UsoIdentifier();
  v54 = *(_QWORD *)(v53 - 8);
  v55 = (*(_QWORD *)(v54 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v53);
  v56 = (char *)v17 - v55;
  v57 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v62);
  v58 = (uint64_t)v17 - v57;
  v63 = type metadata accessor for PersonNameComponents();
  v64 = *(_QWORD *)(v63 - 8);
  v66 = *(_QWORD *)(v64 + 64);
  v65 = (v66 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v62);
  v67 = (char *)v17 - v65;
  v68 = (v66 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v69 = (char *)v17 - v68;
  v90 = (char *)v17 - v68;
  v70 = *v5;
  v89 = v70;
  v87 = v6;
  v88 = v7;
  type metadata accessor for UsoEntityBuilder_common_Person();
  v71 = UsoEntityBuilder_common_Person.__allocating_init()();
  v86 = v71;
  v72 = objc_msgSend(v70, sel_nameComponents);
  if (v72)
  {
    v51 = v72;
    v50 = v72;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v64 + 32))(v58, v67, v63);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v58, 0, 1, v63);

  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56))(v58, 1, 1, v63);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v58, 1, v63) == 1)
  {
    outlined destroy of PersonNameComponents?(v58);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v69, v58, v63);
    type metadata accessor for UsoEntityBuilder_common_PersonName();
    v47 = UsoEntityBuilder_common_PersonName.__allocating_init()();
    v85 = v47;
    v48 = PersonNameComponents.nickname.getter();
    v49 = v8;
    if (v8)
    {
      v45 = v48;
      v46 = v49;
      v44 = v49;
      v73 = v48;
      v74 = v49;
      MEMORY[0x249571984]();
      swift_bridgeObjectRelease();
    }
    v42 = PersonNameComponents.givenName.getter();
    v43 = v9;
    if (v9)
    {
      v40 = v42;
      v41 = v43;
      v39 = v43;
      v75 = v42;
      v76 = v43;
      MEMORY[0x249571990]();
      swift_bridgeObjectRelease();
    }
    v37 = PersonNameComponents.familyName.getter();
    v38 = v10;
    if (v10)
    {
      v35 = v37;
      v36 = v38;
      v34 = v38;
      v77 = v37;
      v78 = v38;
      MEMORY[0x24957199C]();
      swift_bridgeObjectRelease();
    }
    v32 = PersonNameComponents.middleName.getter();
    v33 = v11;
    if (v11)
    {
      v30 = v32;
      v31 = v33;
      v29 = v33;
      v79 = v32;
      v80 = v33;
      MEMORY[0x2495719A8]();
      swift_bridgeObjectRelease();
    }
    v27 = PersonNameComponents.namePrefix.getter();
    v28 = v12;
    if (v12)
    {
      v25 = v27;
      v26 = v28;
      v24 = v28;
      v81 = v27;
      v82 = v28;
      MEMORY[0x24957196C]();
      swift_bridgeObjectRelease();
    }
    v22 = PersonNameComponents.nameSuffix.getter();
    v23 = v13;
    if (v13)
    {
      v20 = v22;
      v21 = v23;
      v19 = v23;
      v83 = v22;
      v84 = v23;
      MEMORY[0x249571978]();
      swift_bridgeObjectRelease();
    }
    swift_retain();
    MEMORY[0x2495717BC](v47, MEMORY[0x24BEA23C0]);
    v14 = swift_release();
    v18 = MEMORY[0x2495717D4](v14);
    if (v18)
    {
      v17[3] = v18;
      v17[2] = v18;
      v17[0] = INPerson.uniqueContactIdentifier.getter();
      v17[1] = v15;
      swift_bridgeObjectRetain();
      UsoIdentifierNamespace.rawValue.getter(0);
      UsoIdentifier.init(value:appBundleId:namespace:)();
      dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v56, v53);
      swift_release();
    }
    swift_release();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v69, v63);
  }
  swift_retain();
  *v52 = v71;
  return swift_release();
}

uint64_t sub_2470E5A70()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Transformer<>.transformer(appBundleId:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in static Transformer<>.transformer(appBundleId:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t one-time initialization function for transformer()
{
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoEntityBuilder, UsoEntity>);
  __swift_allocate_value_buffer(v1, static Transformer<>.transformer);
  __swift_project_value_buffer(v1, (uint64_t)static Transformer<>.transformer);
  type metadata accessor for UsoEntityBuilder();
  type metadata accessor for UsoEntity();
  return Transformer.init(transform:)();
}

{
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<INPerson, UsoEntity>);
  __swift_allocate_value_buffer(v1, static Transformer<>.transformer);
  __swift_project_value_buffer(v1, (uint64_t)static Transformer<>.transformer);
  type metadata accessor for INPerson();
  type metadata accessor for UsoEntity();
  return Transformer.init(transform:)();
}

uint64_t closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;

  v20 = MEMORY[0x2495716FC]();
  if (v20)
  {
    swift_retain();
    *a1 = v20;
    return swift_release();
  }
  else
  {
    v18 = type metadata accessor for TransformationError();
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    swift_allocError();
    v17 = v1;
    DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v2);
    swift_bridgeObjectRelease();
    type metadata accessor for UsoEntityBuilder();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v13 = String.init(stringInterpolation:)();
    v14 = v4;
    DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    type metadata accessor for UsoEntity();
    DefaultStringInterpolation.appendInterpolation(_:)();
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    v11 = String.init(stringInterpolation:)();
    v12 = v7;
    PaymentsError.errorDescription.getter();
    v15 = v8;
    v16 = v9;
    outlined consume of PaymentsError(v13, v14, v11, v12, 0, 0, 5u);
    *v17 = v15;
    v17[1] = v16;
    (*(void (**)(void))(*(_QWORD *)(v18 - 8) + 104))();
    return swift_willThrow();
  }
}

uint64_t Transformer<>.transformer.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for transformer != -1)
    swift_once();
  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoEntityBuilder, UsoEntity>);
  return __swift_project_value_buffer(v0, (uint64_t)static Transformer<>.transformer);
}

{
  uint64_t v0;

  if (one-time initialization token for transformer != -1)
    swift_once();
  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<INPerson, UsoEntity>);
  return __swift_project_value_buffer(v0, (uint64_t)static Transformer<>.transformer);
}

uint64_t static Transformer<>.transformer(contactResolver:)(uint64_t a1)
{
  uint64_t v2;
  _BYTE v3[40];
  uint64_t v4;

  v4 = a1;
  outlined init with copy of GlobalsProviding(a1, (uint64_t)v3);
  v2 = swift_allocObject();
  outlined init with take of CommonLabelsProviding(v3, (void *)(v2 + 16));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactQuery]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  return Transformer.init(transform:)();
}

uint64_t closure #1 in static Transformer<>.transformer(contactResolver:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE **v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint32_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  NSObject *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint32_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;

  v60 = a3;
  v67 = a1;
  v70 = a2;
  v95 = 0;
  v94 = 0;
  v93 = 0;
  v91 = 0;
  v65 = 0;
  v61 = type metadata accessor for Logger();
  v62 = *(_QWORD *)(v61 - 8);
  v63 = (*(_QWORD *)(v62 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v64 = (char *)v27 - v63;
  v73 = type metadata accessor for ContactResolverConfig();
  v71 = *(_QWORD *)(v73 - 8);
  v66 = (*(_QWORD *)(v71 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v65);
  v76 = (char *)v27 - v66;
  v68 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Signpost.OpenSignpost() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = (uint64_t *)MEMORY[0x24BDAC7A8](v67);
  v69 = (uint64_t)v27 - v68;
  v95 = (char *)v27 - v68;
  v75 = *v3;
  v94 = v75;
  v93 = v4;
  v5 = SignpostName.transformContactQueryToINPersons.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v5, v5[1], *((unsigned __int8 *)v5 + 16), v69);
  v78 = v70[3];
  v79 = v70[4];
  __swift_project_boxed_opaque_existential_1(v70, v78);
  v72 = SiriKitContactResolver.defaultConfig.unsafeMutableAddressor();
  v74 = &v92;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v76, v72, v73);
  swift_endAccess();
  v6 = v77;
  v7 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v79 + 8))(v75, v76, v78);
  v80 = v6;
  v81 = v7;
  v82 = v6;
  if (v6)
  {
    v27[1] = v82;
    (*(void (**)(char *, uint64_t))(v71 + 8))(v76, v73);
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    return outlined destroy of Signpost.OpenSignpost(v69);
  }
  else
  {
    v57 = v81;
    (*(void (**)(char *, uint64_t))(v71 + 8))(v76, v73);
    v91 = v57;
    v90 = v57;
    v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
    lazy protocol witness table accessor for type [INPerson] and conformance [A]();
    v8 = v80;
    result = Sequence.forEach(_:)();
    v59 = v8;
    if (v8)
    {
      __break(1u);
    }
    else
    {
      v10 = v64;
      v11 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v10, v11, v61);
      swift_bridgeObjectRetain();
      v46 = 7;
      v39 = swift_allocObject();
      *(_QWORD *)(v39 + 16) = v57;
      swift_retain();
      v45 = 32;
      v12 = swift_allocObject();
      v13 = v39;
      v47 = v12;
      *(_QWORD *)(v12 + 16) = partial apply for implicit closure #1 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
      *(_QWORD *)(v12 + 24) = v13;
      swift_release();
      v55 = Logger.logObject.getter();
      v56 = static os_log_type_t.debug.getter();
      v42 = &v88;
      v88 = 12;
      v40 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v41 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v43 = v89;
      v44 = 17;
      v49 = swift_allocObject();
      *(_BYTE *)(v49 + 16) = 32;
      v50 = swift_allocObject();
      *(_BYTE *)(v50 + 16) = 8;
      v14 = swift_allocObject();
      v15 = v47;
      v48 = v14;
      *(_QWORD *)(v14 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_2;
      *(_QWORD *)(v14 + 24) = v15;
      v16 = swift_allocObject();
      v17 = v48;
      v52 = v16;
      *(_QWORD *)(v16 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(_QWORD *)(v16 + 24) = v17;
      v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      v51 = _allocateUninitializedArray<A>(_:)();
      v53 = v18;
      swift_retain();
      v19 = v49;
      v20 = v53;
      *v53 = partial apply for closure #1 in OSLogArguments.append(_:);
      v20[1] = v19;
      swift_retain();
      v21 = v50;
      v22 = v53;
      v53[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v22[3] = v21;
      swift_retain();
      v23 = v52;
      v24 = v53;
      v53[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v24[5] = v23;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v55, (os_log_type_t)v56))
      {
        v32 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        v33 = createStorage<A>(capacity:type:)(0);
        v34 = createStorage<A>(capacity:type:)(1);
        v35 = &v87;
        v87 = v32;
        v36 = &v86;
        v86 = v33;
        v37 = &v85;
        v85 = v34;
        serialize(_:at:)(2, &v87);
        serialize(_:at:)(1, v35);
        v25 = v59;
        v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v84 = v49;
        closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)v35, (uint64_t)v36, (uint64_t)v37);
        v38 = v25;
        if (v25)
        {
          __break(1u);
        }
        else
        {
          v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v84 = v50;
          closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v87, (uint64_t)&v86, (uint64_t)&v85);
          v29 = 0;
          v26 = v29;
          v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v84 = v52;
          closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v87, (uint64_t)&v86, (uint64_t)&v85);
          v28 = v26;
          _os_log_impl(&dword_24701B000, v55, (os_log_type_t)v56, "#Transformer for resolving INPersons from ContactQuery returning persons: %s", v32, v43);
          destroyStorage<A>(_:count:)(v33, 0, v31);
          destroyStorage<A>(_:count:)(v34, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x2495725CC](v32, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          v30 = v28;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        v30 = v59;
      }
      v27[2] = v30;

      (*(void (**)(char *, uint64_t))(v62 + 8))(v64, v61);
      swift_bridgeObjectRetain();
      *v60 = v57;
      swift_bridgeObjectRelease();
      $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
      return outlined destroy of Signpost.OpenSignpost(v69);
    }
  }
  return result;
}

uint64_t sub_2470E68B0()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Transformer<>.transformer(contactResolver:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in static Transformer<>.transformer(contactResolver:)(a1, (_QWORD *)(v2 + 16), a2);
}

void closure #1 in closure #1 in static Transformer<>.transformer(contactResolver:)(id *a1)
{
  uint64_t v1;
  Class isa;
  Class v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;

  v8 = *a1;
  v9 = objc_msgSend(*a1, sel_siriMatches);
  if (v9)
  {
    type metadata accessor for INPerson();
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
    lazy protocol witness table accessor for type [INPerson] and conformance [A]();
    v1 = _ArrayProtocol.filter(_:)();
    if (v7)
    {
      __break(1u);
      return;
    }
    v4 = v1;
  }
  else
  {
    v4 = 0;
  }
  if (v4)
  {
    type metadata accessor for INPerson();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v3 = isa;
  }
  else
  {
    v3 = 0;
  }
  objc_msgSend(v8, sel_setAlternatives_);

}

BOOL closure #1 in closure #1 in closure #1 in static Transformer<>.transformer(contactResolver:)(id *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;

  v11 = *a1;
  v12 = objc_msgSend(*a1, sel_contactIdentifier);
  if (v12)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v1;

    v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  outlined destroy of String.UTF8View();
  v2 = v11;
  if (v10)
  {
    v8 = 1;
  }
  else
  {
    v7 = objc_msgSend(v11, sel_customIdentifier);
    if (v7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      v5 = v3;

      v6 = v5;
    }
    else
    {
      v6 = 0;
    }
    outlined destroy of String.UTF8View();
    v8 = v6 != 0;
  }

  return v8;
}

uint64_t closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v19 = a2;
  v21 = a1;
  v42 = 0;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<INPerson, UsoEntityBuilder_common_Person>);
  v29 = *(_QWORD *)(v31 - 8);
  v20 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v31);
  v30 = (char *)v12 - v20;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoEntityBuilder, UsoEntity>);
  v23 = *(_QWORD *)(v26 - 8);
  v22 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (uint64_t *)MEMORY[0x24BDAC7A8](v21);
  v3 = (char *)v12 - v22;
  v24 = (char *)v12 - v22;
  v33 = *v2;
  v42 = v33;
  v4 = Transformer<>.transformer.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v3, v4, v26);
  v25 = (void (*)(uint64_t *__return_ptr, uint64_t *))Transformer.transform.getter();
  v27 = v5;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v26);
  v6 = default argument 0 of static Transformer<>.transformer(appBundleId:)();
  v28 = v7;
  static Transformer<>.transformer(appBundleId:)(v6, v7);
  swift_bridgeObjectRelease();
  v35 = (void (*)(uint64_t *__return_ptr, uint64_t *))Transformer.transform.getter();
  v32 = v8;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
  v9 = v34;
  v41 = v33;
  v35(&v40, &v41);
  v36 = v9;
  v37 = v9;
  if (v9)
  {
    v14 = v37;
    swift_release();
    result = swift_release();
    v15 = v14;
  }
  else
  {
    v16 = v40;
    swift_release();
    v10 = v36;
    v39 = v16;
    v25(&v38, &v39);
    v17 = v10;
    v18 = v10;
    if (v10)
    {
      v12[1] = v18;
      swift_release();
      return swift_release();
    }
    else
    {
      v13 = v38;
      swift_release();
      result = swift_release();
      *v19 = v13;
    }
  }
  return result;
}

uint64_t sub_2470E7054()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id @nonobjc NSDecimalNumber.init(value:)()
{
  void *v0;

  return objc_msgSend(v0, sel_initWithFloat_);
}

id @nonobjc INCurrencyAmount.init(amount:currencyCode:)(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  id v6;

  v4 = (id)MEMORY[0x24957220C](a2);
  v6 = objc_msgSend(v3, sel_initWithAmount_currencyCode_, a1);

  swift_bridgeObjectRelease();
  return v6;
}

id @nonobjc INSendPaymentIntent.init(payee:currencyAmount:note:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v4;
  id v6;
  id v7;
  uint64_t v8;
  void *v11;

  if (a4)
  {
    v8 = MEMORY[0x24957220C](a3);
    swift_bridgeObjectRelease();
    v4 = objc_msgSend(v11, sel_initWithPayee_currencyAmount_note_, a1, a2, v8);
  }
  else
  {
    v4 = objc_msgSend(v11, sel_initWithPayee_currencyAmount_note_, a1, a2, 0);
  }
  v7 = v4;

  return v7;
}

id @nonobjc INRequestPaymentIntent.init(payer:currencyAmount:note:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v4;
  id v6;
  id v7;
  uint64_t v8;
  void *v11;

  if (a4)
  {
    v8 = MEMORY[0x24957220C](a3);
    swift_bridgeObjectRelease();
    v4 = objc_msgSend(v11, sel_initWithPayer_currencyAmount_note_, a1, a2, v8);
  }
  else
  {
    v4 = objc_msgSend(v11, sel_initWithPayer_currencyAmount_note_, a1, a2, 0);
  }
  v7 = v4;

  return v7;
}

id @nonobjc INSearchForAccountsIntent.init(accountNickname:accountType:organizationName:requestedBalanceType:)(void *a1, uint64_t a2, void *a3)
{
  void *v3;
  id v7;

  v7 = objc_msgSend(v3, sel_initWithAccountNickname_accountType_organizationName_requestedBalanceType_, a1, a2, a2);

  return v7;
}

uint64_t sub_2470E7318()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E7354()
{
  return swift_deallocObject();
}

uint64_t sub_2470E737C()
{
  return swift_deallocObject();
}

uint64_t sub_2470E73A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E73E0()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type TransformationError and conformance TransformationError()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type TransformationError and conformance TransformationError;
  if (!lazy protocol witness table cache variable for type TransformationError and conformance TransformationError)
  {
    v0 = type metadata accessor for TransformationError();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEA8DD0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type TransformationError and conformance TransformationError);
    return v1;
  }
  return v3;
}

void outlined consume of PaymentsError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  if (a7 <= 0x10uLL)
    __asm { BR              X8 }
}

uint64_t partial apply for implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:)()
{
  return implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:)();
}

{
  return implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:)();
}

{
  return implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:)();
}

uint64_t sub_2470E76A0()
{
  return swift_deallocObject();
}

uint64_t sub_2470E76C8()
{
  return swift_deallocObject();
}

uint64_t sub_2470E76F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E772C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E7768()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:)()
{
  uint64_t v0;

  return implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:)(*(void **)(v0 + 16));
}

uint64_t sub_2470E77AC()
{
  return swift_deallocObject();
}

uint64_t sub_2470E77D4()
{
  return swift_deallocObject();
}

uint64_t sub_2470E77FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E7838()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E7874()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:)()
{
  uint64_t v0;

  return implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:)(*(void **)(v0 + 16));
}

uint64_t sub_2470E78B8()
{
  return swift_deallocObject();
}

uint64_t sub_2470E78E0()
{
  return swift_deallocObject();
}

uint64_t sub_2470E7908()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E7944()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E7988()
{
  return swift_deallocObject();
}

uint64_t sub_2470E79B0()
{
  return swift_deallocObject();
}

uint64_t sub_2470E79D8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E7A14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E7A50()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2470E7A8C()
{
  return swift_deallocObject();
}

uint64_t sub_2470E7AB4()
{
  return swift_deallocObject();
}

uint64_t sub_2470E7ADC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E7B18()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E7B54()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2470E7B90()
{
  return swift_deallocObject();
}

uint64_t sub_2470E7BB8()
{
  return swift_deallocObject();
}

uint64_t sub_2470E7BE0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E7C1C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E7C60()
{
  return swift_deallocObject();
}

uint64_t sub_2470E7C88()
{
  return swift_deallocObject();
}

uint64_t sub_2470E7CB0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E7CEC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E7D28()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2470E7D64()
{
  return swift_deallocObject();
}

uint64_t sub_2470E7D8C()
{
  return swift_deallocObject();
}

uint64_t sub_2470E7DB4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E7DF0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E7E2C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2470E7E68()
{
  return swift_deallocObject();
}

uint64_t sub_2470E7E90()
{
  return swift_deallocObject();
}

uint64_t sub_2470E7EB8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E7EF4()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type INAccountType and conformance INAccountType()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type INAccountType and conformance INAccountType;
  if (!lazy protocol witness table cache variable for type INAccountType and conformance INAccountType)
  {
    v0 = type metadata accessor for INAccountType();
    v1 = MEMORY[0x249572C98](&protocol conformance descriptor for INAccountType, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type INAccountType and conformance INAccountType);
    return v1;
  }
  return v3;
}

uint64_t partial apply for implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  return implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)();
}

{
  return implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)();
}

{
  return implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)();
}

uint64_t sub_2470E7FA8()
{
  return swift_deallocObject();
}

uint64_t sub_2470E7FD0()
{
  return swift_deallocObject();
}

uint64_t sub_2470E7FF8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E8034()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E8070()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  uint64_t v0;

  return implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(*(void **)(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(*(void **)(v0 + 16));
}

uint64_t sub_2470E80B4()
{
  return swift_deallocObject();
}

uint64_t sub_2470E80DC()
{
  return swift_deallocObject();
}

uint64_t sub_2470E8104()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E8140()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E817C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2470E81B8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #10 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  uint64_t v0;

  return implicit closure #10 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(*(void **)(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #10 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(*(void **)(v0 + 16));
}

uint64_t sub_2470E81FC()
{
  return swift_deallocObject();
}

uint64_t sub_2470E8224()
{
  return swift_deallocObject();
}

uint64_t sub_2470E824C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E8288()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #13 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  return implicit closure #13 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)();
}

{
  return implicit closure #13 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)();
}

uint64_t sub_2470E82CC()
{
  return swift_deallocObject();
}

uint64_t sub_2470E82F4()
{
  return swift_deallocObject();
}

uint64_t sub_2470E831C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E8358()
{
  swift_release();
  return swift_deallocObject();
}

void *outlined init with copy of ContactQuery?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for ContactQuery();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of ContactQuery?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for ContactQuery();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t sub_2470E84C0()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  return implicit closure #7 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)();
}

uint64_t sub_2470E84F0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #8 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  specialized implicit closure #8 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)();
  return result;
}

uint64_t sub_2470E8538()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #9 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  return implicit closure #9 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)();
}

uint64_t sub_2470E8580()
{
  return swift_deallocObject();
}

uint64_t sub_2470E85A8()
{
  return swift_deallocObject();
}

uint64_t sub_2470E85D0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E860C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E8648()
{
  return swift_deallocObject();
}

uint64_t sub_2470E8670()
{
  return swift_deallocObject();
}

uint64_t sub_2470E8698()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E86D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E8710()
{
  return swift_deallocObject();
}

uint64_t sub_2470E8738()
{
  return swift_deallocObject();
}

uint64_t sub_2470E8760()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E879C()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t type metadata accessor for NSDecimalNumber()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSDecimalNumber;
  if (!lazy cache variable for type metadata for NSDecimalNumber)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSDecimalNumber);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [UsoIdentifier] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [UsoIdentifier] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UsoIdentifier] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UsoIdentifier]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [UsoIdentifier] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [UsoIdentifier] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UsoIdentifier] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UsoIdentifier]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12F0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [UsoIdentifier] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [UsoIdentifier] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UsoIdentifier] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UsoIdentifier]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [UsoIdentifier] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of UsoIdentifier?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for UsoIdentifier();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t sub_2470E891C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for ContactQuery() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  type metadata accessor for ContactQuery();
  return implicit closure #3 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)();
}

uint64_t sub_2470E89BC()
{
  return swift_deallocObject();
}

uint64_t sub_2470E89E4()
{
  return swift_deallocObject();
}

uint64_t sub_2470E8A0C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E8A48()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E8A84()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  uint64_t v0;

  return implicit closure #4 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2470E8AC8()
{
  return swift_deallocObject();
}

uint64_t sub_2470E8AF0()
{
  return swift_deallocObject();
}

uint64_t sub_2470E8B18()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E8B54()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  uint64_t v0;

  return implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(v0);
}

uint64_t sub_2470E8B98()
{
  return swift_deallocObject();
}

uint64_t sub_2470E8BC0()
{
  return swift_deallocObject();
}

uint64_t sub_2470E8BE8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E8C24()
{
  swift_release();
  return swift_deallocObject();
}

void *outlined assign with take of ContactQuery?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(const void *, uint64_t, uint64_t);

  v7 = type metadata accessor for ContactQuery();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a2, 1))
  {
    if (v9(a1, 1, v7))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a2, a1, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
    }
  }
  else if (v9(a1, 1, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a2, v7);
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a2, a1, v7);
  }
  return a2;
}

unint64_t lazy protocol witness table accessor for type [[INPerson]?] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [[INPerson]?] and conformance [A];
  if (!lazy protocol witness table cache variable for type [[INPerson]?] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[INPerson]?]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12F8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [[INPerson]?] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type INRequestPaymentIntent and conformance NSObject()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type INRequestPaymentIntent and conformance NSObject;
  if (!lazy protocol witness table cache variable for type INRequestPaymentIntent and conformance NSObject)
  {
    v0 = type metadata accessor for INRequestPaymentIntent();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BDD0240], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type INRequestPaymentIntent and conformance NSObject);
    return v1;
  }
  return v3;
}

uint64_t sub_2470E8EA8()
{
  return swift_deallocObject();
}

uint64_t sub_2470E8ED0()
{
  return swift_deallocObject();
}

uint64_t sub_2470E8EF8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E8F34()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E8F70()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2470E8FB4()
{
  return swift_deallocObject();
}

uint64_t sub_2470E8FDC()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9004()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9040()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E907C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2470E90C0()
{
  return swift_deallocObject();
}

uint64_t sub_2470E90E8()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9110()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E914C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9188()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2470E91C4()
{
  return swift_deallocObject();
}

uint64_t sub_2470E91EC()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9214()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9250()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E928C()
{
  return swift_deallocObject();
}

uint64_t sub_2470E92B4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2470E92F0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2470E932C()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9354()
{
  return swift_deallocObject();
}

uint64_t sub_2470E937C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E93B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E93F4()
{
  return swift_deallocObject();
}

uint64_t sub_2470E941C()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9444()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9480()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E94BC()
{
  return swift_deallocObject();
}

uint64_t sub_2470E94E4()
{
  return swift_deallocObject();
}

uint64_t sub_2470E950C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9548()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9584()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for ContactQuery() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_2470E95F4()
{
  return swift_deallocObject();
}

uint64_t sub_2470E961C()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9644()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9680()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E96BC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2470E96F8()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9720()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9748()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9784()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E97C0()
{
  return swift_deallocObject();
}

uint64_t sub_2470E97E8()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9810()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E984C()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type INSendPaymentIntent and conformance NSObject()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type INSendPaymentIntent and conformance NSObject;
  if (!lazy protocol witness table cache variable for type INSendPaymentIntent and conformance NSObject)
  {
    v0 = type metadata accessor for INSendPaymentIntent();
    v1 = MEMORY[0x249572C98](MEMORY[0x24BDD0240], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type INSendPaymentIntent and conformance NSObject);
    return v1;
  }
  return v3;
}

uint64_t sub_2470E9900()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9928()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9950()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E998C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E99C8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2470E9A04()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9A2C()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9A54()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9A90()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9ACC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2470E9B08()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9B30()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9B58()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9B94()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9BD8()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9C00()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9C28()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9C64()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9CA0()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9CC8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2470E9D04()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2470E9D40()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9D68()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9D90()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9DCC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9E08()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9E30()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9E58()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9E94()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9ED0()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9EF8()
{
  return swift_deallocObject();
}

uint64_t sub_2470E9F20()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9F5C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470E9F98()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for ContactQuery() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_2470EA008()
{
  return swift_deallocObject();
}

uint64_t sub_2470EA030()
{
  return swift_deallocObject();
}

uint64_t sub_2470EA058()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470EA094()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470EA0D0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2470EA10C()
{
  return swift_deallocObject();
}

uint64_t sub_2470EA134()
{
  return swift_deallocObject();
}

uint64_t sub_2470EA15C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470EA198()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470EA1D4()
{
  return swift_deallocObject();
}

uint64_t sub_2470EA1FC()
{
  return swift_deallocObject();
}

uint64_t sub_2470EA224()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2470EA260()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[42] = a6;
  v6[41] = a5;
  v6[40] = a4;
  v6[39] = a2;
  v6[38] = a1;
  v6[24] = v6;
  v6[25] = 0;
  v6[26] = 0;
  v6[27] = 0;
  v6[28] = 0;
  v6[29] = 0;
  v6[31] = 0;
  v6[33] = 0;
  v6[22] = 0;
  v6[23] = 0;
  v6[37] = 0;
  v6[17] = 0;
  v6[18] = 0;
  v6[19] = 0;
  v6[43] = type metadata accessor for SiriPaymentsSnippetModel();
  v6[44] = swift_task_alloc();
  v6[45] = swift_task_alloc();
  v6[25] = a2;
  v6[26] = a3;
  v6[27] = a4;
  v6[28] = a5;
  v6[29] = a6;
  return swift_task_switch();
}

uint64_t static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v10;
  id v11;
  _QWORD *v12;
  NSJSONWritingOptions v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD, uint64_t, uint64_t, _QWORD);
  uint64_t rawValue;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;

  v1 = v0[42];
  v2 = v0[39];
  v0[24] = v0;
  v0[30] = v2;
  outlined init with copy of GlobalsProviding(v1, (uint64_t)(v0 + 2));
  *(_QWORD *)(swift_task_alloc() + 16) = v0 + 2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
  lazy protocol witness table accessor for type [App] and conformance [A]();
  v36 = Sequence.compactMap<A>(_:)();
  v0[46] = v36;
  v33 = *(_QWORD *)(v35 + 312);
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_0(v35 + 16);
  *(_QWORD *)(v35 + 248) = v36;
  *(_QWORD *)(v35 + 256) = v33;
  v34 = Sequence.compactMap<A>(_:)();
  *(_QWORD *)(v35 + 376) = v34;
  v3 = *(void **)(v35 + 328);
  *(_QWORD *)(v35 + 264) = v34;
  v30 = objc_msgSend(v3, sel_dialog);
  type metadata accessor for DialogElement();
  v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v35 + 280) = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DialogElement]);
  lazy protocol witness table accessor for type [DialogElement] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  v32 = *(void **)(v35 + 272);
  swift_bridgeObjectRelease();
  if (v32)
  {
    v25 = objc_msgSend(v32, sel_fullPrint);
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v27 = v4;

    v28 = v26;
    v29 = v27;
  }
  else
  {

    v28 = 0;
    v29 = 0;
  }
  *(_QWORD *)(v35 + 160) = v28;
  *(_QWORD *)(v35 + 168) = v29;
  if (*(_QWORD *)(v35 + 168))
  {
    v37 = *(Swift::String *)(v35 + 160);
  }
  else
  {
    v37 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of String.UTF8View();
  }
  v5 = *(_QWORD *)(v35 + 336);
  v6 = *(_QWORD *)(v35 + 312);
  *(_QWORD *)(v35 + 384) = v37._object;
  *(Swift::String *)(v35 + 176) = v37;
  *(_QWORD *)(v35 + 288) = v6;
  outlined init with copy of GlobalsProviding(v5, v35 + 56);
  *(_QWORD *)(swift_task_alloc() + 16) = v35 + 56;
  rawValue = Sequence.compactMap<A>(_:)();
  *(_QWORD *)(v35 + 392) = rawValue;
  v19 = *(char **)(v35 + 360);
  v17 = *(_QWORD *)(v35 + 352);
  v18 = *(_QWORD *)(v35 + 344);
  v21 = *(id *)(v35 + 328);
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_0(v35 + 56);
  *(_QWORD *)(v35 + 296) = rawValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = NSJSONWritingOptions.init(rawValue:)(rawValue);
  v15 = v7;
  v16 = v8;
  *(_QWORD *)(v35 + 400) = v14;
  *(_QWORD *)(v35 + 408) = v8;
  *(_QWORD *)(v35 + 136) = v14;
  *(_QWORD *)(v35 + 144) = v7;
  *(_QWORD *)(v35 + 152) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)v17 = v14;
  *(_QWORD *)(v17 + 8) = v15;
  *(_QWORD *)(v17 + 16) = v16;
  swift_storeEnumTagMultiPayload();
  outlined init with take of SiriPaymentsSnippetModel((char *)v17, v19);
  type metadata accessor for ResponseFactory();
  *(_QWORD *)(v35 + 416) = ResponseFactory.__allocating_init()();
  *(_QWORD *)(v35 + 120) = v18;
  *(_QWORD *)(v35 + 128) = lazy protocol witness table accessor for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v35 + 96));
  outlined init with copy of SiriPaymentsSnippetModel((uint64_t *)v19, boxed_opaque_existential_1);
  type metadata accessor for DialogExecutionResult();
  v22 = _allocateUninitializedArray<A>(_:)();
  v20 = v10;
  v11 = v21;
  *v20 = v21;
  _finalizeUninitializedArray<A>(_:)();
  *(_QWORD *)(v35 + 424) = v22;
  v23 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))(MEMORY[0x24BE97EE0] + (int)*MEMORY[0x24BE97EE0]);
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v35 + 432) = v12;
  *v12 = *(_QWORD *)(v35 + 192);
  v12[1] = static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:);
  return v23(*(_QWORD *)(v35 + 304), v35 + 96, v22, *(_QWORD *)(v35 + 320));
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0 + 96;
  *(_QWORD *)(*(_QWORD *)v0 + 192) = *(_QWORD *)v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(v2);
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 360);
  *(_QWORD *)(v0 + 192) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of SiriPaymentsSnippetModel(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 192) + 8))();
}

uint64_t DisambiguationViewBuilder.__allocating_init(contactDisambiguationType:persons:deviceState:)(char a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  return DisambiguationViewBuilder.init(contactDisambiguationType:persons:deviceState:)(a1, a2, a3);
}

uint64_t DisambiguationViewBuilder.makeContactDisambiguationView<A, B>(app:intent:response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  v4[6] = 0;
  v4[3] = a1;
  v4[4] = a2;
  v4[5] = a3;
  v4[6] = v3;
  return swift_task_switch();
}

uint64_t DisambiguationViewBuilder.makeContactDisambiguationView<A, B>(app:intent:response:)()
{
  uint64_t v0;
  id v1;

  *(_QWORD *)(v0 + 16) = v0;
  type metadata accessor for SAAceView();
  v1 = SAUIAppPunchOut.__allocating_init()();
  return (*(uint64_t (**)(id))(*(_QWORD *)(v0 + 16) + 8))(v1);
}

uint64_t DisambiguationViewBuilder.persons.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t DisambiguationViewBuilder.persons.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t DisambiguationViewBuilder.init(contactDisambiguationType:persons:deviceState:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v8;
  _BYTE v9[40];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v13 = a1;
  v12 = a2;
  v11 = a3;
  v10 = v3;
  type metadata accessor for INPerson();
  *(_QWORD *)(v3 + 24) = _allocateUninitializedArray<A>(_:)();
  *(_BYTE *)(v3 + 16) = a1;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v3 + 24) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  outlined init with copy of GlobalsProviding(a3, (uint64_t)v9);
  outlined init with take of CommonLabelsProviding(v9, (void *)(v3 + 32));
  __swift_destroy_boxed_opaque_existential_0(a3);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t DisambiguationViewBuilder.makeDisambiguationItems(app:compact:)()
{
  uint64_t v0;
  int v3;

  v3 = *(unsigned __int8 *)(v0 + 16);
  if ((v3 - 3) <= 1u)
    return DisambiguationViewBuilder.makeContactDisambiguationItems()();
  else
    return DisambiguationViewBuilder.makeDuplicateContactDisambiguationItems(_:)(v3);
}

uint64_t DisambiguationViewBuilder.makeContactDisambiguationItems()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  id v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  char v65;
  _QWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  char *v69;

  v69 = 0;
  v68 = 0;
  v67 = 0;
  v58 = v66;
  v66[0] = 0;
  v66[1] = 0;
  v62 = 0;
  v61 = 0;
  v54 = 0;
  v46 = type metadata accessor for Image();
  v47 = *(_QWORD *)(v46 - 8);
  v48 = (*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v49 = (uint64_t *)((char *)&v17 - v48);
  v50 = type metadata accessor for ContactQuery();
  v51 = *(_QWORD *)(v50 - 8);
  v52 = (*(_QWORD *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v54);
  v53 = (uint64_t)&v17 - v52;
  v69 = (char *)&v17 - v52;
  v68 = v0;
  v55 = type metadata accessor for SiriKitDisambiguationItem();
  v67 = _allocateUninitializedArray<A>(_:)();
  v56 = &v65;
  swift_beginAccess();
  v57 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  swift_endAccess();
  v64 = v57;
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  lazy protocol witness table accessor for type [INPerson] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[INPerson]>);
    IndexingIterator.next()();
    v45 = v63;
    if (!v63)
      break;
    v44 = v45;
    v43 = v45;
    v62 = v45;
    INPerson.toContactQuery()(v53);
    v33 = type metadata accessor for SiriKitDisambiguationItemComponent();
    v25 = 0x1F304B000uLL;
    v20 = objc_msgSend(v43, (SEL)0x1F304BE48);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v1;
    v21 = dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)();
    swift_bridgeObjectRelease();

    v24 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.hideOnLockScreen()();
    swift_release();
    v23 = objc_msgSend(v43, (SEL)(v25 + 3656));
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v22 = v2;
    v28 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withPrint(_:)();
    swift_bridgeObjectRelease();

    swift_release();
    v27 = objc_msgSend(v43, (SEL)(v25 + 3656));
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v26 = v3;
    v29 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withSpeak(_:)();
    swift_bridgeObjectRelease();

    swift_release();
    v30 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withPrintBlue(_:)();
    swift_release();
    v42 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()();
    swift_release();
    v61 = v42;
    v34 = 1;
    v31 = _allocateUninitializedArray<A>(_:)();
    v32 = v4;
    swift_retain();
    v5 = v31;
    *v32 = v42;
    _finalizeUninitializedArray<A>(_:)();
    v40 = v5;
    v37 = MEMORY[0x24BEE0D00];
    v36 = _allocateUninitializedArray<A>(_:)();
    v35 = v6;
    v7 = INPerson.identifier.getter();
    v8 = v35;
    v9 = v7;
    v10 = v36;
    *v35 = v9;
    v8[1] = v11;
    _finalizeUninitializedArray<A>(_:)();
    v12 = v47;
    *v49 = v10;
    (*(void (**)(void))(v12 + 104))();
    v13 = INPerson.identifier.getter();
    v38 = v14;
    v39 = static PaymentsDirectInvocations.selectionInvocation(contactIdentifier:)(v13, v14);
    swift_bridgeObjectRelease();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v15 = SiriKitDisambiguationItem.__allocating_init(components:image:directInvocation:allowLineWrapForDisplayText:)();
    v41 = &v60;
    v60 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SiriKitDisambiguationItem]);
    Array.append(_:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v53, v50);

  }
  outlined destroy of [SFCardSection]();
  v17 = &v67;
  v18 = v67;
  swift_bridgeObjectRetain();
  outlined destroy of [SFCardSection]();
  return v18;
}

uint64_t DisambiguationViewBuilder.makeDuplicateContactDisambiguationItems(_:)(int a1)
{
  uint64_t v1;
  char v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  Swift::String *v42;
  id v43;
  Swift::String v44;
  id v45;
  uint64_t v46;
  id v47;
  uint64_t *v48;
  uint64_t v49;
  id v50;
  int v51;
  id v52;
  id v53;
  Swift::String v54;
  id v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  id v62;
  int v63;
  uint64_t v64;
  id v65;
  Swift::String v66;
  id v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  id v71;
  id v72;
  Swift::String v73;
  id v74;
  uint64_t v75;
  id v76;
  id v77;
  id v78;
  void *v79;
  void *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  id v92;
  id v93;
  id v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  Swift::String v100;
  id v101;
  void *v102;
  void *v103;
  uint64_t v104;
  char v105;
  _QWORD v106[2];
  uint64_t v107;
  uint64_t v108;
  char v109;

  v81 = a1;
  v109 = 0;
  v108 = 0;
  v107 = 0;
  v90 = v106;
  v106[0] = 0;
  v106[1] = 0;
  v102 = 0;
  v101 = 0;
  v100._countAndFlagsBits = 0;
  v100._object = 0;
  v97 = 0;
  v86 = 0;
  v82 = type metadata accessor for Image();
  v83 = *(_QWORD *)(v82 - 8);
  v84 = (*(_QWORD *)(v83 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v85 = (_QWORD *)((char *)v20 - v84);
  v109 = v2;
  v108 = v1;
  v87 = type metadata accessor for SiriKitDisambiguationItem();
  v107 = _allocateUninitializedArray<A>(_:)();
  v88 = &v105;
  swift_beginAccess();
  v89 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  swift_endAccess();
  v104 = v89;
  v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  lazy protocol witness table accessor for type [INPerson] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[INPerson]>);
    IndexingIterator.next()();
    v80 = v103;
    if (!v103)
      break;
    v79 = v80;
    v77 = v80;
    v102 = v80;
    v78 = INPerson.toCNContact.getter();
    v101 = v78;
    if ((_BYTE)v81)
    {
      if (v81 == 1)
      {
        v69 = objc_msgSend(v78, sel_emailAddresses);
        v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
        v68 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        Array.subscript.getter();
        v65 = v93;
        v67 = objc_msgSend(v93, sel_value);
        v66._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v66._object = v4;

        v100 = v66;
        swift_bridgeObjectRelease();

      }
      else
      {
        v62 = objc_msgSend(v78, sel_phoneNumbers);
        v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
        v61 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        swift_bridgeObjectRetain();
        v60 = &v99;
        v99 = v61;
        v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CNLabeledValue]);
        lazy protocol witness table accessor for type [CNLabeledValue<CNPhoneNumber>] and conformance [A]();
        v63 = Collection.isEmpty.getter();
        outlined destroy of [SFCardSection]();
        swift_bridgeObjectRelease();

        if ((v63 & 1) != 0)
        {
          v50 = objc_msgSend(v78, sel_emailAddresses);
          v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
          swift_bridgeObjectRetain();
          v48 = &v98;
          v98 = v49;
          lazy protocol witness table accessor for type [CNLabeledValue<NSString>] and conformance [A]();
          v51 = Collection.isEmpty.getter();
          outlined destroy of [SFCardSection]();
          swift_bridgeObjectRelease();

          if ((v51 & 1) != 0)
          {
            v100 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
          }
          else
          {
            v47 = objc_msgSend(v78, sel_emailAddresses);
            v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
            Array.subscript.getter();
            v43 = v95;
            v45 = objc_msgSend(v95, sel_value);
            v44._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v44._object = v6;

            v100 = v44;
            swift_bridgeObjectRelease();

          }
        }
        else
        {
          v57 = objc_msgSend(v78, sel_phoneNumbers);
          v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
          Array.subscript.getter();
          v52 = v94;
          v53 = objc_msgSend(v94, sel_value);

          v55 = objc_msgSend(v53, sel_stringValue);
          v54._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v54._object = v5;

          v100 = v54;
          swift_bridgeObjectRelease();

        }
      }
    }
    else
    {
      v76 = objc_msgSend(v78, sel_phoneNumbers);
      v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
      v75 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      Array.subscript.getter();
      v71 = v92;
      v72 = objc_msgSend(v92, sel_value);

      v74 = objc_msgSend(v72, sel_stringValue);
      v73._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v73._object = v3;

      v100 = v73;
      swift_bridgeObjectRelease();

    }
    v32 = type metadata accessor for SiriKitDisambiguationItemComponent();
    v42 = &v100;
    v22 = v100;
    swift_bridgeObjectRetain();
    v23 = dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)();
    swift_bridgeObjectRelease();
    v25 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.hideOnLockScreen()();
    swift_release();
    v24 = v100;
    swift_bridgeObjectRetain();
    v27 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withPrint(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    v26 = v100;
    swift_bridgeObjectRetain();
    v28 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withSpeak(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    v29 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withPrintBlue(_:)();
    swift_release();
    v41 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()();
    swift_release();
    v97 = v41;
    v33 = 1;
    v30 = _allocateUninitializedArray<A>(_:)();
    v31 = v7;
    swift_retain();
    v8 = v30;
    *v31 = v41;
    _finalizeUninitializedArray<A>(_:)();
    v39 = v8;
    v36 = MEMORY[0x24BEE0D00];
    v35 = _allocateUninitializedArray<A>(_:)();
    v34 = v9;
    v10 = INPerson.identifier.getter();
    v11 = v34;
    v12 = v10;
    v13 = v35;
    *v34 = v12;
    v11[1] = v14;
    _finalizeUninitializedArray<A>(_:)();
    v15 = v83;
    *v85 = v13;
    (*(void (**)(void))(v15 + 104))();
    v16 = INPerson.identifier.getter();
    v37 = v17;
    v38 = static PaymentsDirectInvocations.selectionInvocation(contactIdentifier:)(v16, v17);
    swift_bridgeObjectRelease();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v18 = SiriKitDisambiguationItem.__allocating_init(components:image:directInvocation:allowLineWrapForDisplayText:)();
    v40 = &v96;
    v96 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SiriKitDisambiguationItem]);
    Array.append(_:)();
    swift_release();
    outlined destroy of String.UTF8View();

  }
  outlined destroy of [SFCardSection]();
  v20[1] = &v107;
  v21 = v107;
  swift_bridgeObjectRetain();
  outlined destroy of [SFCardSection]();
  return v21;
}

uint64_t DisambiguationViewBuilder.deinit()
{
  uint64_t v0;
  uint64_t v2;

  outlined destroy of [SFCardSection]();
  __swift_destroy_boxed_opaque_existential_0(v0 + 32);
  return v2;
}

uint64_t DisambiguationViewBuilder.__deallocating_deinit()
{
  DisambiguationViewBuilder.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for DisambiguationViewBuilding.makeContactDisambiguationView<A, B>(app:intent:response:) in conformance DisambiguationViewBuilder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for ConfirmationViewBuilding.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:) in conformance ConfirmationViewBuilder;
  return DisambiguationViewBuilder.makeContactDisambiguationView<A, B>(app:intent:response:)(a1, a2, a3);
}

uint64_t closure #1 in static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  _QWORD v9[3];
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v20 = a3;
  v9[1] = a1;
  v12 = a2;
  v23 = 0;
  v22 = 0;
  v9[2] = 0;
  v17 = type metadata accessor for Locale();
  v15 = *(_QWORD *)(v17 - 8);
  v10 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v16 = (char *)v9 - v10;
  v11 = *v3;
  v23 = v11;
  v22 = v4;
  type metadata accessor for AppInformationResolver();
  swift_retain();
  v18 = AppInformationResolver.__allocating_init(app:)();
  v14 = v12[3];
  v13 = v12[4];
  __swift_project_boxed_opaque_existential_1(v12, v14);
  dispatch thunk of DeviceState.siriLocale.getter();
  v19 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  v21 = v5;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v16, v17);
  swift_release();
  result = v19;
  v7 = v20;
  v8 = v21;
  *v20 = v19;
  v7[1] = v8;
  return result;
}

uint64_t partial apply for closure #1 in static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)(a1, *(_QWORD **)(v2 + 16), a2);
}

uint64_t closure #2 in static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = App.appIdentifier.getter();
  *a1 = result;
  a1[1] = v2;
  return result;
}

unint64_t type metadata accessor for DialogElement()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for DialogElement;
  if (!lazy cache variable for type metadata for DialogElement)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for DialogElement);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [DialogElement] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [DialogElement] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DialogElement] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DialogElement]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [DialogElement] and conformance [A]);
    return v1;
  }
  return v3;
}

NSJSONWritingOptions closure #3 in static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)@<X0>(_QWORD *a1@<X1>, NSJSONWritingOptions *a2@<X8>)
{
  NSJSONWritingOptions result;
  NSJSONWritingOptions v3;
  NSJSONWritingOptions v4;
  NSJSONWritingOptions v5;

  result = App.toAppDescription(deviceState:)(a1);
  *a2 = result;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v5;
  return result;
}

NSJSONWritingOptions partial apply for closure #3 in static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)@<X0>(NSJSONWritingOptions *a1@<X8>)
{
  uint64_t v1;

  return closure #3 in static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)(*(_QWORD **)(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type [CNLabeledValue<CNPhoneNumber>] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [CNLabeledValue<CNPhoneNumber>] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CNLabeledValue<CNPhoneNumber>] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CNLabeledValue]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [CNLabeledValue<CNPhoneNumber>] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [CNLabeledValue<NSString>] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [CNLabeledValue<NSString>] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CNLabeledValue<NSString>] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CNLabeledValue]);
    v1 = MEMORY[0x249572C98](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [CNLabeledValue<NSString>] and conformance [A]);
    return v1;
  }
  return v3;
}

BOOL static DuplicateContactDisambiguationType.__derived_enum_equals(_:_:)(char a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (a1 == 1)
      v4 = 1;
    else
      v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  if (a2)
  {
    if (a2 == 1)
      v3 = 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  return v4 == v3;
}

uint64_t DuplicateContactDisambiguationType.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t DuplicateContactDisambiguationType.hashValue.getter()
{
  lazy protocol witness table accessor for type DuplicateContactDisambiguationType and conformance DuplicateContactDisambiguationType();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type DuplicateContactDisambiguationType and conformance DuplicateContactDisambiguationType()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DuplicateContactDisambiguationType and conformance DuplicateContactDisambiguationType;
  if (!lazy protocol witness table cache variable for type DuplicateContactDisambiguationType and conformance DuplicateContactDisambiguationType)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for DuplicateContactDisambiguationType, &type metadata for DuplicateContactDisambiguationType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DuplicateContactDisambiguationType and conformance DuplicateContactDisambiguationType);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DuplicateContactDisambiguationType and conformance DuplicateContactDisambiguationType;
  if (!lazy protocol witness table cache variable for type DuplicateContactDisambiguationType and conformance DuplicateContactDisambiguationType)
  {
    v0 = MEMORY[0x249572C98](&protocol conformance descriptor for DuplicateContactDisambiguationType, &type metadata for DuplicateContactDisambiguationType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DuplicateContactDisambiguationType and conformance DuplicateContactDisambiguationType);
    return v0;
  }
  return v2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DuplicateContactDisambiguationType(char *a1, char *a2)
{
  return static DuplicateContactDisambiguationType.__derived_enum_equals(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance DuplicateContactDisambiguationType()
{
  return DuplicateContactDisambiguationType.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DuplicateContactDisambiguationType()
{
  return DuplicateContactDisambiguationType.hash(into:)();
}

uint64_t type metadata accessor for DisambiguationViewBuilder()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for AppDisambiguationViewBuilder()
{
  return &type metadata for AppDisambiguationViewBuilder;
}

uint64_t getEnumTagSinglePayload for ContactDisambiguationType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  unsigned int v8;
  int v9;

  if (a2)
  {
    if (a2 <= 0xFB)
      goto LABEL_15;
    v8 = ((a2 + 4) >> 8) + 1;
    v9 = 1;
    if (v8 >= 0x100)
    {
      if (v8 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v9 = v2;
    }
    if (v9 == 1)
      v7 = a1[1];
    else
      v7 = v9 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v7)
    {
      v6 = (*a1 | ((v7 - 1) << 8)) + 251;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v4 = v3 - 2;
      if (v4 < 0)
        v4 = -1;
      v6 = v4;
    }
  }
  else
  {
    v6 = -1;
  }
  return (v6 + 1);
}

_BYTE *storeEnumTagSinglePayload for ContactDisambiguationType(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFB)
  {
    v5 = ((a3 + 4) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFB)
  {
    v4 = ((a2 - 252) >> 8) + 1;
    *result = a2 + 4;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 4;
  }
  return result;
}

uint64_t getEnumTag for ContactDisambiguationType(unsigned __int8 *a1)
{
  return getEnumTagSinglePayload for DuplicateContactDisambiguationType(a1, 2u);
}

_BYTE *destructiveInjectEnumTag for ContactDisambiguationType(_BYTE *a1, unsigned int a2)
{
  return storeEnumTagSinglePayload for DuplicateContactDisambiguationType(a1, a2, 2u);
}

ValueMetadata *type metadata accessor for ContactDisambiguationType()
{
  return &type metadata for ContactDisambiguationType;
}

uint64_t getEnumTagSinglePayload for DuplicateContactDisambiguationType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for DuplicateContactDisambiguationType(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for DuplicateContactDisambiguationType(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for DuplicateContactDisambiguationType(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for DuplicateContactDisambiguationType()
{
  return &type metadata for DuplicateContactDisambiguationType;
}

unint64_t base witness table accessor for Equatable in DuplicateContactDisambiguationType()
{
  return lazy protocol witness table accessor for type DuplicateContactDisambiguationType and conformance DuplicateContactDisambiguationType();
}

_QWORD *SendTCCHandleStrategy.__allocating_init(previousIntent:)(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _UNKNOWN **v18;
  _UNKNOWN **v19;
  uint64_t *v20;
  _QWORD *v21;
  _BYTE *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  _BYTE v28[40];
  uint64_t v29[5];
  _QWORD v30[5];
  _BYTE v31[40];
  _QWORD v32[5];
  _QWORD v33[5];
  _QWORD v34[5];
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39[5];
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v26 = a1;
  v41 = 0;
  v40 = 0;
  v35 = 0;
  v14 = 0;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v6 = (char *)&v4 - v5;
  v41 = v1;
  v17 = type metadata accessor for SendPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v25 = CATWrapper.__allocating_init(options:globals:)();
  v40 = v25;
  NSJSONWritingOptions.init(rawValue:)(v25);
  type metadata accessor for Globals();
  v7 = v39;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v39);
  v8 = &v38;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v9 = &v37;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v10 = &v36;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v24 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)v10);
  v35 = v24;
  v2 = v26;
  swift_retain();
  v21 = v34;
  v34[3] = &type metadata for CommonLabelsProvider;
  v34[4] = &protocol witness table for CommonLabelsProvider;
  v13 = v32;
  v32[3] = &type metadata for CommonLabelsProvider;
  v32[4] = &protocol witness table for CommonLabelsProvider;
  v11 = v31;
  outlined init with copy of GlobalsProviding(v24 + 56, (uint64_t)v31);
  swift_retain();
  v12 = v30;
  v30[3] = v17;
  v30[4] = &protocol witness table for SendPaymentCATs;
  v30[0] = v25;
  v23 = v33;
  v33[3] = &type metadata for ConfirmationViewBuilder;
  v33[4] = &protocol witness table for ConfirmationViewBuilder;
  v33[0] = swift_allocObject();
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)v13, (uint64_t)v11, (uint64_t)v12, (_QWORD *)(v33[0] + 16));
  v15 = type metadata accessor for INSendPaymentIntent();
  v16 = type metadata accessor for INSendPaymentIntentResponse();
  v20 = v29;
  v18 = &protocol witness table for INSendPaymentIntent;
  v19 = &protocol witness table for INSendPaymentIntentResponse;
  default argument 1 of TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccTemplateProvider:confirmationViewBuilder:)(v15, v16, v17, v29);
  v22 = v28;
  default argument 4 of TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccTemplateProvider:confirmationViewBuilder:)(v15, (uint64_t)v28);
  v27 = SendTCCHandleStrategy.__allocating_init(previousIntent:globals:catFamily:commonLabelsProvider:tccTemplateProvider:confirmationViewBuilder:)(v26, (uint64_t)v20, v25, (uint64_t)v21, (uint64_t)v22, (uint64_t)v23);
  swift_retain();
  v42 = v27;
  swift_release();
  swift_release();

  swift_release();
  return v27;
}

uint64_t sub_2470ED35C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  __swift_destroy_boxed_opaque_existential_0(v0 + 96);
  return swift_deallocObject();
}

_QWORD *RequestTCCHandleStrategy.__allocating_init(previousIntent:)(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _UNKNOWN **v18;
  _UNKNOWN **v19;
  uint64_t *v20;
  _QWORD *v21;
  _BYTE *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  _BYTE v28[40];
  uint64_t v29[5];
  _QWORD v30[5];
  _BYTE v31[40];
  _QWORD v32[5];
  _QWORD v33[5];
  _QWORD v34[5];
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39[5];
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v26 = a1;
  v41 = 0;
  v40 = 0;
  v35 = 0;
  v14 = 0;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v6 = (char *)&v4 - v5;
  v41 = v1;
  v17 = type metadata accessor for RequestPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v25 = CATWrapper.__allocating_init(options:globals:)();
  v40 = v25;
  NSJSONWritingOptions.init(rawValue:)(v25);
  type metadata accessor for Globals();
  v7 = v39;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v39);
  v8 = &v38;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v9 = &v37;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v10 = &v36;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v24 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)v10);
  v35 = v24;
  v2 = v26;
  swift_retain();
  v21 = v34;
  v34[3] = &type metadata for CommonLabelsProvider;
  v34[4] = &protocol witness table for CommonLabelsProvider;
  v13 = v32;
  v32[3] = &type metadata for CommonLabelsProvider;
  v32[4] = &protocol witness table for CommonLabelsProvider;
  v11 = v31;
  outlined init with copy of GlobalsProviding(v24 + 56, (uint64_t)v31);
  swift_retain();
  v12 = v30;
  v30[3] = v17;
  v30[4] = &protocol witness table for RequestPaymentCATs;
  v30[0] = v25;
  v23 = v33;
  v33[3] = &type metadata for ConfirmationViewBuilder;
  v33[4] = &protocol witness table for ConfirmationViewBuilder;
  v33[0] = swift_allocObject();
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)v13, (uint64_t)v11, (uint64_t)v12, (_QWORD *)(v33[0] + 16));
  v15 = type metadata accessor for INRequestPaymentIntent();
  v16 = type metadata accessor for INRequestPaymentIntentResponse();
  v20 = v29;
  v18 = &protocol witness table for INRequestPaymentIntent;
  v19 = &protocol witness table for INRequestPaymentIntentResponse;
  default argument 1 of TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccTemplateProvider:confirmationViewBuilder:)(v15, v16, v17, v29);
  v22 = v28;
  default argument 4 of TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccTemplateProvider:confirmationViewBuilder:)(v15, (uint64_t)v28);
  v27 = SendTCCHandleStrategy.__allocating_init(previousIntent:globals:catFamily:commonLabelsProvider:tccTemplateProvider:confirmationViewBuilder:)(v26, (uint64_t)v20, v25, (uint64_t)v21, (uint64_t)v22, (uint64_t)v23);
  swift_retain();
  v42 = v27;
  swift_release();
  swift_release();

  swift_release();
  return v27;
}

_QWORD *SearchForAccountsTCCHandleStrategy.__allocating_init(previousIntent:)(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _UNKNOWN **v18;
  _UNKNOWN **v19;
  uint64_t *v20;
  _QWORD *v21;
  _BYTE *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  _BYTE v28[40];
  uint64_t v29[5];
  _QWORD v30[5];
  _BYTE v31[40];
  _QWORD v32[5];
  _QWORD v33[5];
  _QWORD v34[5];
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39[5];
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v26 = a1;
  v41 = 0;
  v40 = 0;
  v35 = 0;
  v14 = 0;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v6 = (char *)&v4 - v5;
  v41 = v1;
  v17 = type metadata accessor for SearchForAccountsCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  v25 = CATWrapper.__allocating_init(options:globals:)();
  v40 = v25;
  NSJSONWritingOptions.init(rawValue:)(v25);
  type metadata accessor for Globals();
  v7 = v39;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v39);
  v8 = &v38;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v9 = &v37;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v10 = &v36;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  v24 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)v10);
  v35 = v24;
  v2 = v26;
  swift_retain();
  v21 = v34;
  v34[3] = &type metadata for CommonLabelsProvider;
  v34[4] = &protocol witness table for CommonLabelsProvider;
  v13 = v32;
  v32[3] = &type metadata for CommonLabelsProvider;
  v32[4] = &protocol witness table for CommonLabelsProvider;
  v11 = v31;
  outlined init with copy of GlobalsProviding(v24 + 56, (uint64_t)v31);
  swift_retain();
  v12 = v30;
  v30[3] = v17;
  v30[4] = &protocol witness table for SearchForAccountsCATs;
  v30[0] = v25;
  v23 = v33;
  v33[3] = &type metadata for ConfirmationViewBuilder;
  v33[4] = &protocol witness table for ConfirmationViewBuilder;
  v33[0] = swift_allocObject();
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)v13, (uint64_t)v11, (uint64_t)v12, (_QWORD *)(v33[0] + 16));
  v15 = type metadata accessor for INSearchForAccountsIntent();
  v16 = type metadata accessor for INSearchForAccountsIntentResponse();
  v20 = v29;
  v18 = &protocol witness table for INSearchForAccountsIntent;
  v19 = &protocol witness table for INSearchForAccountsIntentResponse;
  default argument 1 of TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccTemplateProvider:confirmationViewBuilder:)(v15, v16, v17, v29);
  v22 = v28;
  default argument 4 of TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccTemplateProvider:confirmationViewBuilder:)(v15, (uint64_t)v28);
  v27 = SendTCCHandleStrategy.__allocating_init(previousIntent:globals:catFamily:commonLabelsProvider:tccTemplateProvider:confirmationViewBuilder:)(v26, (uint64_t)v20, v25, (uint64_t)v21, (uint64_t)v22, (uint64_t)v23);
  swift_retain();
  v42 = v27;
  swift_release();
  swift_release();

  swift_release();
  return v27;
}

uint64_t default argument 1 of TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccTemplateProvider:confirmationViewBuilder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _BYTE v7[40];
  _BYTE v8[40];
  _BYTE v9[40];
  uint64_t v10[8];

  v10[7] = a1;
  v10[6] = a2;
  v10[5] = a3;
  v5 = type metadata accessor for Globals();
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v10);
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  result = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v10, (uint64_t)v9, (uint64_t)v8, (uint64_t)v7);
  a4[3] = v5;
  a4[4] = (uint64_t)&protocol witness table for Globals;
  *a4 = result;
  return result;
}

NSJSONWritingOptions default argument 4 of TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccTemplateProvider:confirmationViewBuilder:)@<X0>(Swift::UInt a1@<X0>, uint64_t a2@<X8>)
{
  NSJSONWritingOptions result;

  result = NSJSONWritingOptions.init(rawValue:)(a1);
  *(_QWORD *)(a2 + 24) = &type metadata for TCCTemplateProvider;
  *(_QWORD *)(a2 + 32) = &protocol witness table for TCCTemplateProvider;
  return result;
}

_QWORD *SendTCCHandleStrategy.__allocating_init(previousIntent:globals:catFamily:commonLabelsProvider:tccTemplateProvider:confirmationViewBuilder:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_allocObject();
  return SendTCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccTemplateProvider:confirmationViewBuilder:)(a1, a2, a3, a4, a5, a6);
}

_QWORD *SendTCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccTemplateProvider:confirmationViewBuilder:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v6;
  _QWORD *v14;
  _BYTE v15[40];
  _BYTE v16[40];
  _BYTE v17[40];
  _QWORD v18[11];
  _QWORD *v19;

  v19 = 0;
  v18[10] = a1;
  v18[9] = a2;
  v18[8] = a3;
  v18[7] = a4;
  v18[6] = a5;
  v18[5] = a6;
  v6 = a1;
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v18);
  swift_retain();
  outlined init with copy of GlobalsProviding(a4, (uint64_t)v17);
  outlined init with copy of GlobalsProviding(a5, (uint64_t)v16);
  outlined init with copy of GlobalsProviding(a6, (uint64_t)v15);
  v14 = TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccTemplateProvider:confirmationViewBuilder:)(a1, v18, a3, (uint64_t)v17, (uint64_t)v16, (uint64_t)v15);
  swift_retain();
  v19 = v14;
  __swift_destroy_boxed_opaque_existential_0(a6);
  __swift_destroy_boxed_opaque_existential_0(a5);
  __swift_destroy_boxed_opaque_existential_0(a4);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a2);

  swift_release();
  return v14;
}

uint64_t SendTCCHandleStrategy.deinit()
{
  return TCCHandleStrategy.deinit();
}

uint64_t TCCHandleStrategy.deinit()
{
  uint64_t v0;
  uint64_t v2;

  outlined destroy of SFRichText?((id *)(v0 + 16));
  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  __swift_destroy_boxed_opaque_existential_0(v0 + 64);
  __swift_destroy_boxed_opaque_existential_0(v0 + 104);
  __swift_destroy_boxed_opaque_existential_0(v0 + 144);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 192);
  return v2;
}

uint64_t SendTCCHandleStrategy.__deallocating_deinit()
{
  SendTCCHandleStrategy.deinit();
  return swift_deallocClassInstance();
}

void *TCCHandleStrategy.previousIntent.getter()
{
  uint64_t v0;
  id v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v0 + 16);
  v1 = v3;
  swift_endAccess();
  return v3;
}

void TCCHandleStrategy.previousIntent.setter(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v2 = a1;
  swift_beginAccess();
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;

  swift_endAccess();
}

uint64_t (*TCCHandleStrategy.previousIntent.modify())()
{
  swift_beginAccess();
  return PaymentsAppResolutionFlowStrategy.appResolutionService.modify;
}

uint64_t TCCHandleStrategy.ttsEnabled.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  char v3;
  _QWORD v4[8];
  _QWORD *v5;

  v5 = 0;
  v1 = (_QWORD *)*v0;
  v5 = v0;
  v4[7] = v1[10];
  v4[6] = v1[11];
  v4[5] = v1[12];
  outlined init with copy of GlobalsProviding((uint64_t)(v0 + 24), (uint64_t)v4);
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  v3 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v4);
  return v3 & 1;
}

uint64_t TCCHandleStrategy.actionForInput(input:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE **v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  uint32_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  NSObject *v69;
  int v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint32_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v35 = a2;
  v42 = a1;
  v82 = 0;
  v81 = 0;
  v36 = 0;
  v51 = *v2;
  v37 = 0;
  v38 = type metadata accessor for Parse();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = (*(_QWORD *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v41 = (uint64_t)v26 - v40;
  v47 = type metadata accessor for Logger();
  v46 = *(_QWORD *)(v47 - 8);
  v43 = (*(_QWORD *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v42);
  v4 = (char *)v26 - v43;
  v45 = (char *)v26 - v43;
  v82 = v3;
  v81 = v44;
  v48 = v5[10];
  v80 = v48;
  v49 = v5[11];
  v79 = v49;
  v50 = v5[12];
  v78 = v50;
  v6 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v4, v6, v47);
  v60 = 7;
  v7 = (_QWORD *)swift_allocObject();
  v8 = v49;
  v9 = v50;
  v10 = v51;
  v58 = v7;
  v7[2] = v48;
  v7[3] = v8;
  v7[4] = v9;
  v52 = *(_QWORD *)(v10 + 104);
  v7[5] = v52;
  v7[6] = *(_QWORD *)(v10 + 112);
  v69 = Logger.logObject.getter();
  v70 = static os_log_type_t.debug.getter();
  v55 = &v76;
  v76 = 12;
  v53 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v54 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v56 = v77;
  v57 = 17;
  v63 = swift_allocObject();
  *(_BYTE *)(v63 + 16) = 32;
  v64 = swift_allocObject();
  *(_BYTE *)(v64 + 16) = 8;
  v59 = 32;
  v11 = swift_allocObject();
  v12 = v58;
  v61 = v11;
  *(_QWORD *)(v11 + 16) = partial apply for implicit closure #1 in TCCHandleStrategy.actionForInput(input:);
  *(_QWORD *)(v11 + 24) = v12;
  v13 = swift_allocObject();
  v14 = v61;
  v62 = v13;
  *(_QWORD *)(v13 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v13 + 24) = v14;
  v15 = swift_allocObject();
  v16 = v62;
  v66 = v15;
  *(_QWORD *)(v15 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(_QWORD *)(v15 + 24) = v16;
  v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v65 = _allocateUninitializedArray<A>(_:)();
  v67 = v17;
  swift_retain();
  v18 = v63;
  v19 = v67;
  *v67 = partial apply for closure #1 in OSLogArguments.append(_:);
  v19[1] = v18;
  swift_retain();
  v20 = v64;
  v21 = v67;
  v67[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v21[3] = v20;
  swift_retain();
  v22 = v66;
  v23 = v67;
  v67[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v23[5] = v22;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v69, (os_log_type_t)v70))
  {
    v24 = v36;
    v28 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v29 = createStorage<A>(capacity:type:)(0);
    v30 = createStorage<A>(capacity:type:)(1);
    v31 = &v75;
    v75 = v28;
    v32 = &v74;
    v74 = v29;
    v33 = &v73;
    v73 = v30;
    serialize(_:at:)(2, &v75);
    serialize(_:at:)(1, v31);
    v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v72 = v63;
    closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)v31, (uint64_t)v32, (uint64_t)v33);
    v34 = v24;
    if (v24)
    {
      __break(1u);
    }
    else
    {
      v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v72 = v64;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v75, (uint64_t)&v74, (uint64_t)&v73);
      v26[0] = 0;
      v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v72 = v66;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v75, (uint64_t)&v74, (uint64_t)&v73);
      _os_log_impl(&dword_24701B000, v69, (os_log_type_t)v70, "##TCCHandleStrategy<%s> actionForInput", v28, v56);
      destroyStorage<A>(_:count:)(v29, 0, v27);
      destroyStorage<A>(_:count:)(v30, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x2495725CC](v28, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v47);
  Input.parse.getter();
  static FlowUtil.actionForInput(parse:intentType:)(v41, v48, v52, v35);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v41, v38);
}

