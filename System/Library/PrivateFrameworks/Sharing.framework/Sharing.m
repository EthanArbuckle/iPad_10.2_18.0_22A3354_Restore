uint64_t SFDeviceClassCodeGet()
{
  if (SFDeviceClassCodeGet_sOnce != -1)
    dispatch_once(&SFDeviceClassCodeGet_sOnce, &__block_literal_global_36);
  return SFDeviceClassCodeGet_sResult;
}

id daemon_log()
{
  if (daemon_log_onceToken != -1)
    dispatch_once(&daemon_log_onceToken, &__block_literal_global_108);
  return (id)daemon_log___logger;
}

id paired_unlock_log()
{
  if (paired_unlock_log_onceToken != -1)
    dispatch_once(&paired_unlock_log_onceToken, &__block_literal_global_118_0);
  return (id)paired_unlock_log___logger;
}

id SFDeviceModel()
{
  if (SFDeviceModel_onceToken != -1)
    dispatch_once(&SFDeviceModel_onceToken, &__block_literal_global_194_0);
  return (id)SFDeviceModel_result;
}

uint64_t BOOLeanValueForPreference(const __CFString *a1, uint64_t a2)
{
  const __CFBoolean *v3;
  const __CFBoolean *v4;
  CFTypeID v5;
  uint64_t Value;

  v3 = (const __CFBoolean *)copySharingPrefValue(a1);
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFBooleanGetTypeID())
    {
      Value = CFBooleanGetValue(v4);
    }
    else
    {
      if (v5 != CFStringGetTypeID())
      {
LABEL_7:
        CFRelease(v4);
        return a2;
      }
      Value = stringIsTrueString((const __CFString *)v4);
    }
    a2 = Value;
    goto LABEL_7;
  }
  return a2;
}

CFPropertyListRef copySharingPrefValue(const __CFString *a1)
{
  CFPropertyListRef result;

  result = CFPreferencesCopyAppValue(a1, CFSTR("/private/var/Managed Preferences/mobile/com.apple.Sharing"));
  if (!result)
    return CFPreferencesCopyAppValue(a1, CFSTR("com.apple.Sharing"));
  return result;
}

void sub_1A2837B00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A283B45C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A283B9EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A283BC34(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1A283BFA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A283C22C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id WPNearbyKeyRSSIFunction()
{
  return (id)constantValWPNearbyKeyRSSI;
}

id WPNearbyKeyPairedFunction()
{
  return (id)constantValWPNearbyKeyPaired;
}

id WPNearbyKeyManufacturerDataFunction()
{
  return (id)constantValWPNearbyKeyManufacturerData;
}

id WPNearbyKeyDeviceAddressFunction()
{
  return (id)constantValWPNearbyKeyDeviceAddress;
}

void sub_1A283F0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1A28408F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t SFAppleIDAddKeyToKeychain(void *a1, uint64_t a2, int a3, _QWORD *a4)
{
  id v6;
  void *v7;
  uint64_t v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  id v11;
  id v12;
  id v13;
  id *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFDictionary *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  const __CFDictionary *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v34;
  uint64_t v35;
  CFTypeRef result;
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[4];
  _QWORD v41[5];

  v41[4] = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v7 = 0;
  result = 0;
  v8 = 4294960591;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  if (!v6 || !a2)
    goto LABEL_54;
  v14 = (id *)MEMORY[0x1E0CD6A00];
  if (!a3)
    v14 = (id *)MEMORY[0x1E0CD6A10];
  v13 = *v14;
  v15 = *MEMORY[0x1E0CD6C98];
  v16 = *MEMORY[0x1E0CD6CC0];
  v17 = *MEMORY[0x1E0CD69F8];
  v40[0] = *MEMORY[0x1E0CD6C98];
  v40[1] = v17;
  v41[0] = v16;
  v41[1] = v13;
  v18 = *MEMORY[0x1E0CD7020];
  v40[2] = *MEMORY[0x1E0CD70E8];
  v40[3] = v18;
  v41[2] = a2;
  v41[3] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v41, v40, 4);
  v19 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v10 = v19;
  if (!v19)
  {
    v7 = 0;
    v9 = 0;
    v11 = 0;
    v12 = 0;
    goto LABEL_62;
  }
  v20 = SecItemCopyMatching(v19, &result);
  if ((_DWORD)v20 == -25300)
    goto LABEL_15;
  v21 = v20;
  if ((_DWORD)v20)
  {
    if (gLogCategory_SFAppleIDKeychainUtilities <= 60
      && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
    {
      v34 = v21;
      LogPrintF();
    }
LABEL_15:
    v12 = 0;
    goto LABEL_16;
  }
  v12 = (id)result;
  if (result)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v12 = v12;
      v11 = v12;
      goto LABEL_17;
    }
  }
LABEL_16:
  v11 = 0;
LABEL_17:
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary", v34);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v22;
  if (!v22)
  {
    v9 = 0;
    v8 = 4294960568;
    goto LABEL_54;
  }
  objc_msgSend(v22, "setObject:forKeyedSubscript:", CFSTR("com.apple.sharing.appleidauthentication"), *MEMORY[0x1E0CD6898]);
  objc_msgSend(v7, "setObject:forKeyedSubscript:", *MEMORY[0x1E0CD68B0], *MEMORY[0x1E0CD68A0]);
  if (!v11)
  {
    v9 = 0;
    goto LABEL_34;
  }
  v23 = *MEMORY[0x1E0CD70E0];
  v38[0] = v15;
  v38[1] = v23;
  v39[0] = v16;
  v39[1] = v11;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, v38, 2);
  v24 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v9 = v24;
  if (!v24)
  {
LABEL_62:
    v8 = 4294960534;
    goto LABEL_54;
  }
  v25 = SecItemUpdate(v24, (CFDictionaryRef)v7);
  if (!(_DWORD)v25)
  {
    if (gLogCategory_SFAppleIDKeychainUtilities <= 30)
    {
      v27 = a4;
      if (gLogCategory_SFAppleIDKeychainUtilities == -1 && !_LogCategory_Initialize())
        goto LABEL_51;
      goto LABEL_48;
    }
LABEL_50:
    v27 = a4;
    goto LABEL_51;
  }
  if (gLogCategory_SFAppleIDKeychainUtilities <= 60)
  {
    v26 = v25;
    if (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize())
    {
      v35 = v26;
      LogPrintF();
    }
  }
  v28 = SecItemDelete(v9);
  if ((_DWORD)v28)
  {
    if (gLogCategory_SFAppleIDKeychainUtilities <= 60)
    {
      v29 = v28;
      if (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize())
      {
        v35 = v29;
        LogPrintF();
      }
    }
  }
LABEL_34:
  objc_msgSend(v7, "addEntriesFromDictionary:", v10, v35);
  objc_msgSend(v7, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0CD70A8]);
  objc_msgSend(v7, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], *MEMORY[0x1E0CD6B80]);
  if (!SecItemAdd((CFDictionaryRef)v7, &result))
  {
LABEL_44:
    v32 = (void *)result;

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v8 = 4294960540;
      v12 = v32;
      goto LABEL_54;
    }
    v12 = v32;

    if (gLogCategory_SFAppleIDKeychainUtilities <= 30)
    {
      v27 = a4;
      if (gLogCategory_SFAppleIDKeychainUtilities == -1 && !_LogCategory_Initialize())
      {
        v11 = v12;
LABEL_51:
        if (v27)
        {
          v11 = objc_retainAutorelease(v11);
          v8 = 0;
          *v27 = v11;
        }
        else
        {
          v8 = 0;
        }
        goto LABEL_54;
      }
      v11 = v12;
LABEL_48:
      LogPrintF();
      goto LABEL_51;
    }
    v11 = v12;
    goto LABEL_50;
  }
  if (gLogCategory_SFAppleIDKeychainUtilities <= 60
    && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v30 = SecItemDelete((CFDictionaryRef)v7);
  if (!(_DWORD)v30)
  {
    v31 = SecItemAdd((CFDictionaryRef)v7, &result);
    if ((_DWORD)v31)
    {
      v8 = v31;
      if (gLogCategory_SFAppleIDKeychainUtilities <= 60
        && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_42;
      }
      goto LABEL_54;
    }
    goto LABEL_44;
  }
  v8 = v30;
  if (gLogCategory_SFAppleIDKeychainUtilities <= 60
    && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
  {
LABEL_42:
    LogPrintF();
  }
LABEL_54:

  return v8;
}

uint64_t SFAppleIDRemoveKeyFromKeychain(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v4)
  {
    v6 = *MEMORY[0x1E0CD6CC0];
    v7 = *MEMORY[0x1E0CD70E0];
    v13[0] = *MEMORY[0x1E0CD6C98];
    v13[1] = v7;
    v14[0] = v6;
    v14[1] = v4;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 2);
    v8 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v8)
    {
      v10 = SecItemDelete(v8);
      if ((_DWORD)v10 == -25300)
      {
        if (gLogCategory_SFAppleIDKeychainUtilities <= 60
          && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v11 = 4294941996;
      }
      else
      {
        v11 = v10;
        if ((_DWORD)v10)
        {
          if (gLogCategory_SFAppleIDKeychainUtilities <= 60
            && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        else
        {
          if (gLogCategory_SFAppleIDKeychainUtilities <= 30
            && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v11 = 0;
        }
      }
    }
    else
    {
      v11 = 4294960534;
    }
  }
  else
  {
    v9 = 0;
    v11 = 4294960591;
  }

  return v11;
}

uint64_t SFAppleIDCopyKeyFromKeychainForReference(void *a1, CFTypeRef *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  const __CFDictionary *v6;
  uint64_t v7;
  CFTypeID v8;
  CFTypeID TypeID;
  uint64_t v10;
  CFTypeRef result;
  _QWORD v13[3];
  _QWORD v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  result = 0;
  if (v3)
  {
    v5 = *MEMORY[0x1E0CD70E0];
    v13[0] = *MEMORY[0x1E0CD6C98];
    v13[1] = v5;
    v14[0] = *MEMORY[0x1E0CD6CC0];
    v14[1] = v3;
    v13[2] = *MEMORY[0x1E0CD7028];
    v14[2] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 3);
    v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    v7 = SecItemCopyMatching(v6, &result);
    if ((_DWORD)v7)
    {
      v10 = v7;
      if (gLogCategory_SFAppleIDKeychainUtilities <= 90
        && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else if (result)
    {
      v8 = CFGetTypeID(result);
      TypeID = SecKeyGetTypeID();
      v10 = 0;
      if (a2 && v8 == TypeID)
      {
        v10 = 0;
        *a2 = result;
      }
    }
    else
    {
      v10 = 0;
    }
  }
  else
  {
    v6 = 0;
    v10 = 4294960591;
  }

  return v10;
}

uint64_t SFAppleIDCopyKeychainReferenceForKey(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  const __CFDictionary *v4;
  uint64_t v5;
  CFTypeID v6;
  uint64_t v7;
  CFTypeRef result;
  _QWORD v10[3];
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  result = 0;
  if (a1)
  {
    v3 = *MEMORY[0x1E0CD70E8];
    v10[0] = *MEMORY[0x1E0CD6C98];
    v10[1] = v3;
    v11[0] = *MEMORY[0x1E0CD6CC0];
    v11[1] = a1;
    v10[2] = *MEMORY[0x1E0CD7020];
    v11[2] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 3);
    v4 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    v5 = SecItemCopyMatching(v4, &result);
    if ((_DWORD)v5)
    {
      v7 = v5;
      if (gLogCategory_SFAppleIDKeychainUtilities <= 90
        && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else if (result)
    {
      v6 = CFGetTypeID(result);
      if (v6 == CFDataGetTypeID())
      {
        v7 = 0;
        if (a2)
          *a2 = (id)result;
      }
      else
      {
        v7 = 4294960540;
      }
    }
    else
    {
      v7 = 4294960534;
    }
  }
  else
  {
    v4 = 0;
    v7 = 4294960591;
  }

  return v7;
}

uint64_t SFAppleIDAddCertificateToKeychain(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  const __CFDictionary *v21;
  id v22;
  CFTypeID v23;
  CFTypeRef v24;
  void *v25;
  uint64_t v26;
  const __CFDictionary *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  id v42;
  const __CFDictionary *query;
  CFTypeRef result;
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[2];
  uint64_t v48;
  _QWORD v49[4];

  v49[3] = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v7 = a3;
  v8 = 0;
  result = 0;
  v9 = 4294960591;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  if (!v6 || !a2)
    goto LABEL_53;
  v14 = *MEMORY[0x1E0CD6C98];
  v15 = *MEMORY[0x1E0CD6CA0];
  v16 = *MEMORY[0x1E0CD70E8];
  v47[0] = *MEMORY[0x1E0CD6C98];
  v47[1] = v16;
  v49[0] = v15;
  v49[1] = a2;
  v48 = *MEMORY[0x1E0CD7020];
  v17 = v48;
  v49[2] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v49, v47, 3);
  v11 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v18 = SecItemCopyMatching(v11, &result);
  v41 = v17;
  if ((_DWORD)v18 == -25300)
    goto LABEL_12;
  v19 = v18;
  if ((_DWORD)v18)
  {
    if (gLogCategory_SFAppleIDKeychainUtilities <= 60
      && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
    {
      v38 = v19;
      LogPrintF();
    }
LABEL_12:
    v10 = 0;
    goto LABEL_13;
  }
  if (!result)
  {
    v8 = 0;
    v10 = 0;
    v12 = 0;
    v13 = 0;
    goto LABEL_72;
  }
  v20 = v6;
  v21 = v11;
  v22 = v7;
  v23 = CFGetTypeID(result);
  if (v23 != CFDataGetTypeID())
  {
    v8 = 0;
    v13 = 0;
    v9 = 4294960540;
    v7 = v22;
    v11 = v21;
    v6 = v20;
    v10 = 0;
    v12 = 0;
    goto LABEL_53;
  }
  v24 = result;
  result = 0;
  v7 = v22;
  v11 = v21;
  v6 = v20;
  v10 = (id)v24;
LABEL_13:
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary", v38);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v25;
  if (!v25)
  {
    v8 = 0;
    v12 = 0;
    v9 = 4294960568;
    goto LABEL_53;
  }
  if (v7)
    objc_msgSend(v25, "setObject:forKeyedSubscript:", v7, *MEMORY[0x1E0CD6A90]);
  objc_msgSend(v13, "setObject:forKeyedSubscript:", CFSTR("com.apple.sharing.appleidauthentication"), *MEMORY[0x1E0CD6898]);
  objc_msgSend(v13, "setObject:forKeyedSubscript:", *MEMORY[0x1E0CD68D0], *MEMORY[0x1E0CD68A0]);
  v42 = v7;
  if (!v10)
  {
    query = 0;
    goto LABEL_32;
  }
  v26 = *MEMORY[0x1E0CD70E0];
  v45[0] = v14;
  v45[1] = v26;
  v46[0] = v15;
  v46[1] = v10;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v46, v45, 2);
  v27 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  if (!v27)
  {
    v8 = 0;
    v12 = 0;
LABEL_72:
    v9 = 4294960534;
    goto LABEL_53;
  }
  query = v27;
  v28 = SecItemUpdate(v27, (CFDictionaryRef)v13);
  if (!(_DWORD)v28)
  {
    if (gLogCategory_SFAppleIDKeychainUtilities > 30)
    {
      v8 = 0;
      v30 = a4;
      goto LABEL_62;
    }
    v30 = a4;
    if (gLogCategory_SFAppleIDKeychainUtilities == -1)
    {
      v8 = 0;
      if (!_LogCategory_Initialize())
      {
LABEL_62:
        if (v30)
        {
          v10 = objc_retainAutorelease(v10);
          v9 = 0;
          *v30 = v10;
        }
        else
        {
          v9 = 0;
        }
        goto LABEL_65;
      }
    }
    else
    {
      v8 = 0;
    }
LABEL_46:
    LogPrintF();
    goto LABEL_62;
  }
  if (gLogCategory_SFAppleIDKeychainUtilities <= 60)
  {
    v29 = v28;
    if (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize())
    {
      v39 = v29;
      LogPrintF();
    }
  }
  v31 = SecItemDelete(query);
  if ((_DWORD)v31)
  {
    if (gLogCategory_SFAppleIDKeychainUtilities <= 60)
    {
      v32 = v31;
      if (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize())
      {
        v39 = v32;
        LogPrintF();
      }
    }
  }
LABEL_32:
  objc_msgSend(v13, "setObject:forKeyedSubscript:", v15, v14, v39);
  objc_msgSend(v13, "setObject:forKeyedSubscript:", a2, v16);
  v33 = MEMORY[0x1E0C9AAB0];
  objc_msgSend(v13, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], v41);
  objc_msgSend(v13, "setObject:forKeyedSubscript:", v33, *MEMORY[0x1E0CD70A8]);
  objc_msgSend(v13, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], *MEMORY[0x1E0CD6B80]);
  if (!SecItemAdd((CFDictionaryRef)v13, &result))
  {
LABEL_42:
    v8 = (id)result;
    result = 0;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v8 = v8;

      v7 = v42;
      if (gLogCategory_SFAppleIDKeychainUtilities > 30)
      {
        v10 = v8;
        v30 = a4;
        goto LABEL_62;
      }
      v30 = a4;
      if (gLogCategory_SFAppleIDKeychainUtilities == -1 && !_LogCategory_Initialize())
      {
        v10 = v8;
        goto LABEL_62;
      }
      v10 = v8;
      goto LABEL_46;
    }
    v9 = 4294960540;
    v7 = v42;
    v12 = query;
LABEL_53:
    query = v12;
    v35 = gLogCategory_SFAppleIDKeychainUtilities;
    goto LABEL_54;
  }
  if (gLogCategory_SFAppleIDKeychainUtilities <= 60
    && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v34 = SecItemDelete(v11);
  if (!(_DWORD)v34)
  {
    v36 = SecItemAdd((CFDictionaryRef)v13, &result);
    if ((_DWORD)v36)
    {
      v9 = v36;
      v35 = gLogCategory_SFAppleIDKeychainUtilities;
      if (gLogCategory_SFAppleIDKeychainUtilities > 60)
      {
        v8 = 0;
        v7 = v42;
        goto LABEL_54;
      }
      if (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize())
        LogPrintF();
      v8 = 0;
      v7 = v42;
      v12 = query;
      goto LABEL_53;
    }
    goto LABEL_42;
  }
  v9 = v34;
  v35 = gLogCategory_SFAppleIDKeychainUtilities;
  if (gLogCategory_SFAppleIDKeychainUtilities <= 60)
  {
    v7 = v42;
    if (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize())
      LogPrintF();
    v8 = 0;
    v12 = query;
    goto LABEL_53;
  }
  v8 = 0;
  v7 = v42;
LABEL_54:
  if (v35 <= 90 && (v35 != -1 || _LogCategory_Initialize()))
    LogPrintF();
LABEL_65:
  if (result)
    CFRelease(result);

  return v9;
}

uint64_t SFAppleIDRemoveCertificateFromKeychain(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v4)
  {
    v6 = *MEMORY[0x1E0CD70E0];
    v12[0] = *MEMORY[0x1E0CD6C98];
    v12[1] = v6;
    v13[0] = *MEMORY[0x1E0CD6CA0];
    v13[1] = v4;
    v12[2] = *MEMORY[0x1E0CD7028];
    v13[2] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, v12, 3);
    v7 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
    {
      v9 = SecItemDelete(v7);
      if ((_DWORD)v9 == -25300)
      {
        if (gLogCategory_SFAppleIDKeychainUtilities <= 60
          && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v10 = 4294941996;
      }
      else
      {
        v10 = v9;
        if ((_DWORD)v9)
        {
          if (gLogCategory_SFAppleIDKeychainUtilities <= 60
            && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        else
        {
          if (gLogCategory_SFAppleIDKeychainUtilities <= 30
            && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v10 = 0;
        }
      }
    }
    else
    {
      v10 = 4294960534;
    }
  }
  else
  {
    v8 = 0;
    v10 = 4294960591;
  }

  return v10;
}

uint64_t SFAppleIDCopyCertificateFromKeychainForReference(void *a1, CFTypeRef *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  const __CFDictionary *v6;
  uint64_t v7;
  CFTypeID v8;
  CFTypeID TypeID;
  CFTypeRef result;
  _QWORD v12[3];
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  result = 0;
  if (!v3)
  {
    v6 = 0;
    v7 = 4294960591;
    goto LABEL_15;
  }
  v5 = *MEMORY[0x1E0CD70E0];
  v12[0] = *MEMORY[0x1E0CD6C98];
  v12[1] = v5;
  v13[0] = *MEMORY[0x1E0CD6CA0];
  v13[1] = v3;
  v12[2] = *MEMORY[0x1E0CD7028];
  v13[2] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, v12, 3);
  v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v7 = SecItemCopyMatching(v6, &result);
  if ((_DWORD)v7)
  {
    if (gLogCategory_SFAppleIDKeychainUtilities <= 90
      && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    if (!result)
    {
      v7 = 0;
      goto LABEL_15;
    }
    v8 = CFGetTypeID(result);
    TypeID = SecCertificateGetTypeID();
    if (a2 && v8 == TypeID)
    {
      v7 = 0;
      *a2 = result;
      result = 0;
      goto LABEL_15;
    }
  }
  if (result)
    CFRelease(result);
LABEL_15:

  return v7;
}

uint64_t SFAppleIDCopyKeychainReferenceForCertificate(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  const __CFDictionary *v4;
  uint64_t v5;
  CFTypeID v6;
  uint64_t v7;
  CFTypeRef result;
  _QWORD v10[3];
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  result = 0;
  if (!a1)
  {
    v4 = 0;
    v7 = 4294960591;
    goto LABEL_10;
  }
  v3 = *MEMORY[0x1E0CD70E8];
  v10[0] = *MEMORY[0x1E0CD6C98];
  v10[1] = v3;
  v11[0] = *MEMORY[0x1E0CD6CA0];
  v11[1] = a1;
  v10[2] = *MEMORY[0x1E0CD7020];
  v11[2] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 3);
  v4 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v5 = SecItemCopyMatching(v4, &result);
  if ((_DWORD)v5)
  {
    v7 = v5;
    if (gLogCategory_SFAppleIDKeychainUtilities <= 90
      && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    if (!result)
    {
      v7 = 4294960534;
      goto LABEL_10;
    }
    v6 = CFGetTypeID(result);
    if (v6 == CFDataGetTypeID())
    {
      if (a2)
      {
        v7 = 0;
        *a2 = (id)result;
        result = 0;
        goto LABEL_10;
      }
      v7 = 0;
    }
    else
    {
      v7 = 4294960540;
    }
  }
  if (result)
    CFRelease(result);
LABEL_10:

  return v7;
}

uint64_t SFAppleIDCreateCertificateWithPEMString(void *a1, SecCertificateRef *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  const __CFData *v7;
  SecCertificateRef v8;
  uint64_t v9;

  v3 = a1;
  if (!v3)
  {
    v5 = 0;
LABEL_12:
    v7 = 0;
    v9 = 4294960591;
    goto LABEL_10;
  }
  objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringByTrimmingCharactersInSet:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!objc_msgSend(v5, "hasPrefix:", CFSTR("-----BEGIN CERTIFICATE-----"))
    || !objc_msgSend(v5, "hasSuffix:", CFSTR("-----END CERTIFICATE-----")))
  {
    goto LABEL_12;
  }
  objc_msgSend(v5, "substringFromIndex:", objc_msgSend(CFSTR("-----BEGIN CERTIFICATE-----"), "length"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "substringWithRange:", 0, objc_msgSend(v6, "length") - objc_msgSend(CFSTR("-----END CERTIFICATE-----"), "length"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
  {
    v7 = 0;
    goto LABEL_14;
  }
  v7 = (const __CFData *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBase64EncodedString:options:", v5, 1);
  if (!v7)
  {
LABEL_14:
    v9 = 4294960579;
    goto LABEL_10;
  }
  v8 = SecCertificateCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7);
  if (v8)
  {
    if (a2)
    {
      v9 = 0;
      *a2 = v8;
    }
    else
    {
      CFRelease(v8);
      v9 = 0;
    }
  }
  else
  {
    v9 = 4294960534;
  }
LABEL_10:

  return v9;
}

void SFAppleIDCreateKeyPair(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  id *v12;
  _QWORD v13[4];
  id v14;
  int v15;
  _QWORD block[4];
  id v17;
  NSObject *v18;
  id v19;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  dispatch_get_global_queue(0, 0);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v6)
    v10 = v6;
  else
    v10 = (void *)v8;
  v11 = v10;
  if (v7)
  {
    if (v5)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __SFAppleIDCreateKeyPair_block_invoke;
      block[3] = &unk_1E482D2B8;
      v12 = &v17;
      v17 = v5;
      v18 = v11;
      v19 = v7;
      dispatch_async(v9, block);

    }
    else
    {
      if (gLogCategory_SFAppleIDKeychainUtilities <= 90
        && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = __SFAppleIDCreateKeyPair_block_invoke_3;
      v13[3] = &unk_1E482D2E0;
      v12 = &v14;
      v14 = v7;
      v15 = -6705;
      dispatch_async(v11, v13);
    }

  }
}

uint64_t SFAppleIDCreateCertificateRequestPEMStringForKeyPair(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *CertificateRequestWithParameters;
  id v17;
  int v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  const __CFString *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = v7;
  v9 = 0;
  v10 = 4294960591;
  if (!v7 || !a2 || !a3)
    goto LABEL_22;
  v24 = CFSTR("cn");
  v25[0] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (!v12)
  {
    v17 = 0;
    v18 = 0;
    v15 = 0;
LABEL_16:
    v10 = 4294960568;
    goto LABEL_8;
  }
  objc_msgSend(v12, "addObject:", v11);
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (!v14)
  {
    v17 = 0;
    v18 = 0;
    goto LABEL_16;
  }
  objc_msgSend(v14, "setObject:forKeyedSubscript:", &unk_1E48906E8, *MEMORY[0x1E0CD6C90]);
  CertificateRequestWithParameters = (void *)SecGenerateCertificateRequestWithParameters();
  if (CertificateRequestWithParameters)
  {
    v17 = objc_retainAutorelease(CertificateRequestWithParameters);
    v10 = 0;
    v18 = 1;
  }
  else
  {
    if (gLogCategory_SFAppleIDKeychainUtilities <= 90
      && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v17 = 0;
    v18 = 0;
    v10 = 4294960534;
  }
LABEL_8:

  v19 = v17;
  v9 = v19;
  if (v18)
  {
    if (v19)
    {
      objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", CFSTR("-----BEGIN CERTIFICATE REQUEST-----\n"));
      v20 = objc_claimAutoreleasedReturnValue();
      if (v20)
      {
        v21 = (id)v20;
        objc_msgSend(v9, "base64EncodedStringWithOptions:", 1);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "appendString:", v22);
        objc_msgSend(v21, "appendString:", CFSTR("\n-----END CERTIFICATE REQUEST-----\n"));
        if (a4)
        {
          v21 = objc_retainAutorelease(v21);
          v10 = 0;
          *a4 = v21;
        }
        else
        {
          v10 = 0;
        }
        goto LABEL_27;
      }
      v10 = 4294960568;
    }
    else
    {
      v10 = 4294960534;
    }
  }
LABEL_22:
  if (gLogCategory_SFAppleIDKeychainUtilities <= 90
    && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v22 = 0;
  v21 = 0;
LABEL_27:

  return v10;
}

uint64_t SFAppleIDCommonNameForCertificate(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;

  if (a1)
  {
    if (a2)
    {
      v3 = (void *)SecCertificateCopyCommonNames();
      if (v3)
      {
        v4 = v3;
        if (objc_msgSend(v3, "count"))
        {
          objc_msgSend(v4, "objectAtIndexedSubscript:", 0);
          v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v6 = 0;
          *a2 = v5;
        }
        else
        {
          v6 = 201208;
          if (gLogCategory_SFAppleIDKeychainUtilities <= 90
            && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v5 = 0;
        }
      }
      else
      {
        v6 = 201208;
        if (gLogCategory_SFAppleIDKeychainUtilities <= 90
          && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v5 = 0;
        v4 = 0;
      }
    }
    else
    {
      v5 = 0;
      v4 = 0;
      v6 = 0;
    }
  }
  else
  {
    v5 = 0;
    v4 = 0;
    v6 = 4294960591;
  }

  return v6;
}

uint64_t SFAppleIDCreationDateForKey(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  const __CFDictionary *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  CFTypeRef v13;
  _QWORD v14[3];
  _QWORD v15[4];

  v15[3] = *MEMORY[0x1E0C80C00];
  v13 = 0;
  if (!a1)
  {
    v7 = 0;
    v8 = 0;
    v4 = 0;
    v9 = 0;
    v6 = 4294960591;
    goto LABEL_12;
  }
  if (!a2)
  {
    v7 = 0;
    v8 = 0;
    v4 = 0;
    v9 = 0;
    v6 = 0;
    goto LABEL_12;
  }
  v3 = *MEMORY[0x1E0CD70E8];
  v14[0] = *MEMORY[0x1E0CD6C98];
  v14[1] = v3;
  v15[0] = *MEMORY[0x1E0CD6CC0];
  v15[1] = a1;
  v14[2] = *MEMORY[0x1E0CD7010];
  v15[2] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, v14, 3);
  v4 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v5 = SecItemCopyMatching(v4, &v13);
  if ((_DWORD)v5)
  {
    v6 = v5;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    goto LABEL_12;
  }
  v9 = (void *)v13;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v7 = 0;
    v8 = 0;
LABEL_11:
    v6 = 4294960569;
    goto LABEL_12;
  }
  v10 = v9;
  v7 = v10;
  if (!v10)
  {
    v8 = 0;
    v9 = 0;
    goto LABEL_11;
  }
  objc_msgSend(v10, "objectForKeyedSubscript:", *MEMORY[0x1E0CD6990]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    v8 = objc_retainAutorelease(v11);
    v6 = 0;
    *a2 = v8;
  }
  else
  {
    v8 = 0;
    v6 = 4294960569;
  }
  v9 = v7;
LABEL_12:

  return v6;
}

uint64_t SFAppleIDExpirationDateForCertificate(uint64_t a1, _QWORD *a2)
{
  void *v3;
  id v4;

  if (!a1)
    return 4294960591;
  if (!a2)
    return 0;
  SecCertificateNotValidAfter();
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = objc_retainAutorelease(v3);
    *a2 = v4;

    return 0;
  }
  return 4294960534;
}

uint64_t SFAppleIDSerialNumberForCertificate(__SecCertificate *a1, _QWORD *a2)
{
  CFDataRef v3;
  CFErrorRef v4;
  CFDataRef v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  CFErrorRef error;

  error = 0;
  if (a1)
  {
    if (a2)
    {
      v3 = SecCertificateCopySerialNumberData(a1, &error);
      v4 = error;
      if (v3)
      {
        v5 = v3;
        v6 = malloc_type_malloc((2 * -[__CFData length](v3, "length")) | 1, 0x100004077774924uLL);
        if (v6)
        {
          v7 = v6;
          v5 = objc_retainAutorelease(v5);
          -[__CFData bytes](v5, "bytes");
          -[__CFData length](v5, "length");
          DataToHexCStringEx();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = v8;
          if (v8)
          {
            v10 = 0;
            *a2 = objc_retainAutorelease(v8);
          }
          else
          {
            v10 = 4294960534;
          }
          free(v7);
        }
        else
        {
          v9 = 0;
          v10 = 4294960568;
        }
      }
      else
      {
        v10 = NSErrorToOSStatus();
        if (gLogCategory_SFAppleIDKeychainUtilities <= 60
          && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v5 = 0;
        v9 = 0;
      }
    }
    else
    {
      v5 = 0;
      v9 = 0;
      v4 = 0;
      v10 = 0;
    }
  }
  else
  {
    v5 = 0;
    v9 = 0;
    v4 = 0;
    v10 = 4294960591;
  }

  return v10;
}

id SFAppleIDParseValidationRecordDataSync(void *a1)
{
  int v1;
  id v2;
  void *v3;
  int v5;
  CFTypeRef cf;

  cf = 0;
  v5 = 0;
  v1 = parseValidationRecord(a1);
  v2 = 0;
  if (v1 || MEMORY[0x1A8588470](cf, &v5))
  {
    if (cf)
      CFRelease(cf);
    v3 = 0;
  }
  else
  {
    if (cf)
      CFRelease(cf);
    handleValidationRecordTrustResultSync(v2, v5);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v3;
}

uint64_t parseValidationRecord(void *a1)
{
  id v1;
  uint64_t AppleIDValidationRecordSigningPolicy;
  const void *v3;
  uint64_t v5;

  v1 = a1;
  if (v1)
  {
    AppleIDValidationRecordSigningPolicy = SecPolicyCreateAppleIDValidationRecordSigningPolicy();
    if (AppleIDValidationRecordSigningPolicy)
    {
      v3 = (const void *)AppleIDValidationRecordSigningPolicy;
      if (SecCMSVerifyCopyDataAndAttributes())
      {
        v5 = 201211;
        if (gLogCategory_SFAppleIDKeychainUtilities > 90
          || gLogCategory_SFAppleIDKeychainUtilities == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_21;
        }
      }
      else
      {
        v5 = 201211;
        if (gLogCategory_SFAppleIDKeychainUtilities > 90
          || gLogCategory_SFAppleIDKeychainUtilities == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_21;
        }
      }
      LogPrintF();
LABEL_21:
      CFRelease(v3);

      goto LABEL_5;
    }
    if (gLogCategory_SFAppleIDKeychainUtilities <= 90
      && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v5 = 4294960534;
  }
  else
  {
    v5 = 4294960591;
  }
LABEL_5:

  return v5;
}

id handleValidationRecordTrustResultSync(void *a1, int a2)
{
  id v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  void *v8;
  double v9;
  uint64_t v10;
  id v11;

  v3 = a1;
  if (a2 != 1 && a2 != 4)
  {
    if (gLogCategory_SFAppleIDKeychainUtilities > 60
      || gLogCategory_SFAppleIDKeychainUtilities == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_15;
    }
LABEL_13:
    LogPrintF();
LABEL_15:
    v11 = 0;
    v8 = 0;
    v7 = 0;
    v4 = 0;
    goto LABEL_16;
  }
  if ((unint64_t)(CFDictionaryGetInt64() - 101) <= 0xFFFFFFFFFFFFFF9BLL)
  {
    if (gLogCategory_SFAppleIDKeychainUtilities > 60
      || gLogCategory_SFAppleIDKeychainUtilities == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  CFDateGetTypeID();
  CFDictionaryGetTypedValue();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    CFDictionaryGetDouble();
    v6 = v5;
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "dateByAddingTimeInterval:", -86400.0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "compare:", v7) == -1)
    {
      v9 = 2592000.0;
      if (v6 != 0.0)
        v9 = v6;
      objc_msgSend(v4, "dateByAddingTimeInterval:", v9);
      v10 = objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v7, "compare:", v10) == -1)
        v11 = v3;
      else
        v11 = 0;
      v8 = (void *)v10;
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v11 = 0;
    v8 = 0;
    v7 = 0;
  }
LABEL_16:

  return v11;
}

void SFAppleIDParseValidationRecordData(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  int v11;
  id v12;
  void *v13;
  OSStatus v14;
  _QWORD v15[4];
  id v16;
  int v17;
  _QWORD result[4];
  id v19;
  id v20;
  uint64_t v21;
  __SecTrust *v22;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v22 = 0;
  if (v6)
  {
    v8 = v6;
  }
  else
  {
    dispatch_get_global_queue(0, 0);
    v8 = objc_claimAutoreleasedReturnValue();
  }
  v9 = v8;
  v10 = 201211;
  v21 = 0;
  v11 = parseValidationRecord(v5);
  v12 = 0;
  v13 = v12;
  if (!v11)
  {
    result[0] = MEMORY[0x1E0C809B0];
    result[1] = 3221225472;
    result[2] = __SFAppleIDParseValidationRecordData_block_invoke;
    result[3] = &unk_1E482D308;
    v19 = v12;
    v20 = v7;
    v14 = SecTrustEvaluateAsync(v22, v9, result);

    if (v14)
      v10 = 201214;
    else
      v10 = 0;
  }
  if (v22)
    CFRelease(v22);
  if (v7 && v10)
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __SFAppleIDParseValidationRecordData_block_invoke_2;
    v15[3] = &unk_1E482D2E0;
    v16 = v7;
    v17 = v10;
    dispatch_async(v9, v15);

  }
}

void SFAppleIDVerifyCertificateChain(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  const void *AppleIDAuthorityPolicy;
  const void *v12;
  __SecTrust *v13;
  OSStatus v14;
  int v15;
  _QWORD block[4];
  id v17;
  int v18;
  _QWORD result[4];
  id v20;
  SecTrustRef trust;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  trust = 0;
  if (v6)
  {
    v8 = v6;
  }
  else
  {
    dispatch_get_global_queue(0, 0);
    v8 = objc_claimAutoreleasedReturnValue();
  }
  v9 = v8;
  v10 = MEMORY[0x1E0C809B0];
  if (!v5)
  {
    v12 = 0;
    v15 = -6705;
    goto LABEL_11;
  }
  AppleIDAuthorityPolicy = (const void *)SecPolicyCreateAppleIDAuthorityPolicy();
  if (!AppleIDAuthorityPolicy)
  {
    if (gLogCategory_SFAppleIDKeychainUtilities <= 90
      && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v12 = 0;
    goto LABEL_32;
  }
  v12 = AppleIDAuthorityPolicy;
  if (SecTrustCreateWithCertificates(v5, AppleIDAuthorityPolicy, &trust))
  {
    if (gLogCategory_SFAppleIDKeychainUtilities > 90
      || gLogCategory_SFAppleIDKeychainUtilities == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_32;
    }
    goto LABEL_28;
  }
  v13 = trust;
  if (!trust)
  {
    if (gLogCategory_SFAppleIDKeychainUtilities > 90)
    {
      v15 = -6762;
LABEL_14:
      CFRelease(v12);
      goto LABEL_15;
    }
    if (gLogCategory_SFAppleIDKeychainUtilities == -1 && !_LogCategory_Initialize())
      goto LABEL_32;
LABEL_28:
    LogPrintF();
LABEL_32:
    v15 = -6762;
    goto LABEL_11;
  }
  result[0] = v10;
  result[1] = 3221225472;
  result[2] = __SFAppleIDVerifyCertificateChain_block_invoke;
  result[3] = &unk_1E482D330;
  v20 = v7;
  v14 = SecTrustEvaluateAsync(v13, v9, result);

  if (v14)
    v15 = 201219;
  else
    v15 = 0;
LABEL_11:
  if (trust)
    CFRelease(trust);
  if (v12)
    goto LABEL_14;
LABEL_15:
  if (v7 && v15)
  {
    block[0] = v10;
    block[1] = 3221225472;
    block[2] = __SFAppleIDVerifyCertificateChain_block_invoke_2;
    block[3] = &unk_1E482D2E0;
    v17 = v7;
    v18 = v15;
    dispatch_async(v9, block);

  }
}

uint64_t SFAppleIDVerifyCertificateChainSync(void *a1, int *a2)
{
  id v3;
  const void *AppleIDAuthorityPolicy;
  int v5;
  CFErrorRef v6;
  uint64_t v7;
  int v8;
  int v9;
  SecTrustRef trust;
  CFErrorRef error;

  v3 = a1;
  trust = 0;
  error = 0;
  if (v3)
  {
    AppleIDAuthorityPolicy = (const void *)SecPolicyCreateAppleIDAuthorityPolicy();
    if (AppleIDAuthorityPolicy)
    {
      if (SecTrustCreateWithCertificates(v3, AppleIDAuthorityPolicy, &trust))
      {
        if (gLogCategory_SFAppleIDKeychainUtilities > 90
          || gLogCategory_SFAppleIDKeychainUtilities == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_31;
        }
      }
      else
      {
        if (trust)
        {
          if (SecTrustEvaluateWithError(trust, &error))
          {
            v5 = 0;
            v6 = 0;
            v7 = 1;
          }
          else
          {
            v6 = error;
            if (gLogCategory_SFAppleIDKeychainUtilities <= 90
              && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v5 = NSErrorToOSStatus();
            v7 = 0;
          }
LABEL_7:
          if (trust)
            CFRelease(trust);
          if (!AppleIDAuthorityPolicy)
          {
LABEL_11:
            if (!a2)
              goto LABEL_19;
            goto LABEL_12;
          }
LABEL_10:
          CFRelease(AppleIDAuthorityPolicy);
          goto LABEL_11;
        }
        if (gLogCategory_SFAppleIDKeychainUtilities > 90)
        {
          v6 = 0;
          v7 = 0;
          v5 = -6762;
          goto LABEL_10;
        }
        if (gLogCategory_SFAppleIDKeychainUtilities == -1 && !_LogCategory_Initialize())
        {
LABEL_31:
          v6 = 0;
          v7 = 0;
          v5 = -6762;
          goto LABEL_7;
        }
      }
    }
    else if (gLogCategory_SFAppleIDKeychainUtilities > 90
           || gLogCategory_SFAppleIDKeychainUtilities == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_31;
    }
    LogPrintF();
    goto LABEL_31;
  }
  v6 = 0;
  v7 = 0;
  v5 = -6705;
  if (!a2)
    goto LABEL_19;
LABEL_12:
  if (v5)
    v8 = 1;
  else
    v8 = v7;
  if (v8)
    v9 = v5;
  else
    v9 = -6700;
  *a2 = v9;
LABEL_19:

  return v7;
}

uint64_t SFAppleIDSignedHashForData(void *a1, __SecKey *a2, const __CFData **a3)
{
  id v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  id v9;
  const __CFData *v10;
  const __CFData *v11;
  CFDataRef v12;
  const __CFData *v13;
  CFErrorRef v15;
  CFErrorRef error;

  v5 = a1;
  error = 0;
  v6 = 4294960591;
  if (v5 && a2)
  {
    if (a3)
    {
      v7 = (unsigned __int8 *)malloc_type_malloc(0x20uLL, 0xC7AA0D7AuLL);
      if (v7)
      {
        v8 = v7;
        v9 = objc_retainAutorelease(v5);
        if (CC_SHA256((const void *)objc_msgSend(v9, "bytes"), objc_msgSend(v9, "length"), v8))
        {
          objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v8, 32);
          v10 = (const __CFData *)objc_claimAutoreleasedReturnValue();
          if (v10)
          {
            v11 = v10;
            v12 = SecKeyCreateSignature(a2, (SecKeyAlgorithm)*MEMORY[0x1E0CD6E98], v10, &error);
            if (v12)
            {
              v13 = objc_retainAutorelease(v12);
              *a3 = v13;

              v6 = 0;
            }
            else
            {
              if (gLogCategory_SFAppleIDKeychainUtilities <= 90
                && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              v15 = error;
              v6 = NSErrorToOSStatus();

            }
          }
          else
          {
            v6 = 4294960568;
          }
        }
        else
        {
          if (gLogCategory_SFAppleIDKeychainUtilities <= 60
            && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v6 = 4294960534;
        }
        free(v8);
      }
      else
      {
        v6 = 4294960568;
      }
    }
    else
    {
      v6 = 0;
    }
  }

  return v6;
}

uint64_t SFAppleIDVerifySignedHashForData(void *a1, void *a2, __SecKey *a3)
{
  id v5;
  const __CFData *v6;
  const __CFData *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  id v11;
  const __CFData *v12;
  CFErrorRef v14;
  CFErrorRef error;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  error = 0;
  v8 = 4294960591;
  if (v5 && v6 && a3)
  {
    v9 = (unsigned __int8 *)malloc_type_malloc(0x20uLL, 0xA2EA4D0DuLL);
    if (v9)
    {
      v10 = v9;
      v11 = objc_retainAutorelease(v5);
      if (CC_SHA256((const void *)objc_msgSend(v11, "bytes"), objc_msgSend(v11, "length"), v10))
      {
        objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v10, 32);
        v12 = (const __CFData *)objc_claimAutoreleasedReturnValue();
        if (v12)
        {
          if (SecKeyVerifySignature(a3, (SecKeyAlgorithm)*MEMORY[0x1E0CD6E98], v12, v7, &error))
          {
            v8 = 0;
          }
          else
          {
            if (gLogCategory_SFAppleIDKeychainUtilities <= 90
              && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v14 = error;
            v8 = NSErrorToOSStatus();

          }
        }
        else
        {
          v8 = 4294960568;
        }
      }
      else
      {
        if (gLogCategory_SFAppleIDKeychainUtilities <= 60
          && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v12 = 0;
        v8 = 4294960534;
      }
      free(v10);

    }
    else
    {
      v8 = 4294960568;
    }
  }

  return v8;
}

uint64_t SFAppleIDCertificateAndKeyCounts(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v15;
  id v16;
  id v17;

  v17 = 0;
  v6 = SFAppleIDGetAllCertificatePersistentReferencesFromKeychain(&v17);
  v7 = v17;
  v8 = v7;
  if ((_DWORD)v6)
  {
    if (gLogCategory_SFAppleIDKeychainUtilities <= 60
      && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v10 = 0;
    v11 = 0;
  }
  else
  {
    v9 = objc_msgSend(v7, "count");
    v15 = 0;
    v16 = 0;
    v6 = SFAppleIDGetAllKeyPersistentReferencesFromKeychain((unint64_t)&v16, (unint64_t)&v15);
    v10 = v16;
    v11 = v15;
    if ((_DWORD)v6)
    {
      if (gLogCategory_SFAppleIDKeychainUtilities <= 60
        && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      v12 = objc_msgSend(v10, "count");
      v13 = objc_msgSend(v11, "count");
      if (a1)
        *a1 = v9;
      if (a2)
        *a2 = v12;
      v6 = 0;
      if (a3)
        *a3 = v13;
    }
  }

  return v6;
}

uint64_t SFAppleIDGetAllCertificatePersistentReferencesFromKeychain(_QWORD *a1)
{
  _QWORD *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFDictionary *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  CFTypeID v20;
  CFTypeRef v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v26;
  _QWORD *v27;
  const __CFDictionary *v28;
  void *v29;
  int v30;
  id v31;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  CFTypeRef result;
  _BYTE v38[128];
  _QWORD v39[4];
  _QWORD v40[6];

  v40[4] = *MEMORY[0x1E0C80C00];
  result = 0;
  if (!a1)
  {
    v11 = 0;
    v14 = 0;
    v16 = 0;
    v2 = 0;
    v7 = 0;
    v10 = 0;
    goto LABEL_46;
  }
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    v11 = 0;
    v14 = 0;
    v16 = 0;
    v7 = 0;
    v10 = 4294960568;
    goto LABEL_46;
  }
  if (gLogCategory_SFAppleIDKeychainUtilities <= 50
    && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v3 = *MEMORY[0x1E0CD6CA0];
  v4 = *MEMORY[0x1E0CD6F30];
  v39[0] = *MEMORY[0x1E0CD6C98];
  v39[1] = v4;
  v5 = *MEMORY[0x1E0CD6F38];
  v40[0] = v3;
  v40[1] = v5;
  v6 = *MEMORY[0x1E0CD7028];
  v39[2] = *MEMORY[0x1E0CD6898];
  v39[3] = v6;
  v40[2] = CFSTR("com.apple.sharing.appleidauthentication");
  v40[3] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v40, v39, 4);
  v7 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v8 = SecItemCopyMatching(v7, &result);
  if ((_DWORD)v8 == -25300)
  {
    v9 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
    result = v9;
  }
  else
  {
    v10 = v8;
    if ((_DWORD)v8)
    {
      if (gLogCategory_SFAppleIDKeychainUtilities <= 60
        && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v11 = 0;
      v14 = 0;
      v16 = 0;
      goto LABEL_46;
    }
    v9 = (void *)result;
  }
  if (!v9)
  {
    v11 = 0;
    v14 = 0;
    v16 = 0;
    v10 = 4294960534;
    goto LABEL_46;
  }
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v11 = v9;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
  if (!v12)
  {
    v14 = 0;
    v16 = 0;
    goto LABEL_41;
  }
  v13 = v12;
  v27 = v1;
  v28 = v7;
  v29 = v2;
  v30 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = *(_QWORD *)v34;
  do
  {
    for (i = 0; i != v13; ++i)
    {
      v19 = v15;
      if (*(_QWORD *)v34 != v17)
        objc_enumerationMutation(v11);
      v15 = *(id *)(*((_QWORD *)&v33 + 1) + 8 * i);

      result = v15;
      v20 = CFGetTypeID(v15);
      if (v20 == SecCertificateGetTypeID())
      {
        v21 = result;

        v32 = 0;
        v22 = SFAppleIDCommonNameForCertificate((uint64_t)v21, &v32);
        v23 = v32;
        v14 = v23;
        if ((_DWORD)v22)
        {
          if (gLogCategory_SFAppleIDKeychainUtilities <= 60
            && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
          {
            v26 = (void *)v22;
LABEL_22:
            LogPrintF();
            continue;
          }
        }
        else if (objc_msgSend(v23, "hasPrefix:", CFSTR("com.apple.idms.appleid.")))
        {

          v31 = 0;
          v24 = SFAppleIDCopyKeychainReferenceForCertificate((uint64_t)v21, &v31);
          v16 = v31;
          if ((_DWORD)v24)
          {
            if (gLogCategory_SFAppleIDKeychainUtilities <= 60
              && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
            {
              v26 = (void *)v24;
              goto LABEL_22;
            }
          }
          else
          {
            if (gLogCategory_SFAppleIDKeychainUtilities <= 50
              && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
            {
              v26 = v14;
              LogPrintF();
            }
            objc_msgSend(v29, "addObject:", v16, v26);
            ++v30;
          }
        }
      }
    }
    v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
  }
  while (v13);

  v7 = v28;
  v2 = v29;
  v1 = v27;
LABEL_41:

  if (gLogCategory_SFAppleIDKeychainUtilities <= 50
    && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = objc_retainAutorelease(v2);
  v10 = 0;
  *v1 = v2;
LABEL_46:

  return v10;
}

uint64_t SFAppleIDGetAllKeyPersistentReferencesFromKeychain(unint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFDictionary *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  CFTypeID v22;
  CFTypeRef v23;
  const __CFDictionary *v24;
  uint64_t v25;
  CFTypeID v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  const __CFDictionary *v38;
  void *v39;
  void *v40;
  int v41;
  int v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  id obj;
  id v48;
  id v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  CFTypeRef result;
  CFTypeRef cf;
  _BYTE v56[128];
  _QWORD v57[4];
  _QWORD v58[4];
  _QWORD v59[3];
  _QWORD v60[5];

  v60[3] = *MEMORY[0x1E0C80C00];
  result = 0;
  if (!(a1 | a2))
  {
    obj = 0;
    v15 = 0;
    v14 = 0;
    v43 = 0;
    v4 = 0;
    v5 = 0;
    v10 = 0;
    v13 = 0;
    goto LABEL_74;
  }
  v2 = (_QWORD *)a2;
  v3 = (_QWORD *)a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    obj = 0;
    v15 = 0;
    v14 = 0;
    v43 = 0;
    v5 = 0;
LABEL_78:
    v10 = 0;
    v13 = 4294960568;
    goto LABEL_74;
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    obj = 0;
    v15 = 0;
    v14 = 0;
    v43 = 0;
    goto LABEL_78;
  }
  if (gLogCategory_SFAppleIDKeychainUtilities <= 50
    && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v6 = *MEMORY[0x1E0CD6CC0];
  v7 = *MEMORY[0x1E0CD6F30];
  v46 = *MEMORY[0x1E0CD6C98];
  v57[0] = *MEMORY[0x1E0CD6C98];
  v57[1] = v7;
  v8 = *MEMORY[0x1E0CD6F38];
  v45 = v6;
  v58[0] = v6;
  v58[1] = v8;
  v9 = *MEMORY[0x1E0CD7028];
  v57[2] = *MEMORY[0x1E0CD6898];
  v57[3] = v9;
  v58[2] = CFSTR("com.apple.sharing.appleidauthentication");
  v58[3] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v58, v57, 4);
  v10 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v11 = SecItemCopyMatching(v10, &result);
  if ((_DWORD)v11 == -25300)
  {
    v12 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
    result = v12;
  }
  else
  {
    v13 = v11;
    if ((_DWORD)v11)
    {
      if (gLogCategory_SFAppleIDKeychainUtilities <= 60
        && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      obj = 0;
      v15 = 0;
      v14 = 0;
      v43 = 0;
      goto LABEL_74;
    }
    v12 = (void *)result;
  }
  if (!v12)
  {
    obj = 0;
    v15 = 0;
    v14 = 0;
    v43 = 0;
    v13 = 4294960534;
    goto LABEL_74;
  }
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  obj = v12;
  v14 = (void *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v56, 16);
  if (!v14)
  {
    v15 = 0;
    v43 = 0;
    goto LABEL_69;
  }
  v36 = v3;
  v37 = v2;
  v38 = v10;
  v39 = v5;
  v40 = v4;
  v41 = 0;
  v15 = 0;
  v44 = 0;
  v16 = 0;
  v42 = 0;
  v43 = 0;
  v17 = *(_QWORD *)v51;
  v18 = *MEMORY[0x1E0CD70E8];
  v19 = *MEMORY[0x1E0CD7010];
  do
  {
    v20 = 0;
    do
    {
      v21 = v16;
      if (*(_QWORD *)v51 != v17)
        objc_enumerationMutation(obj);
      v16 = *(id *)(*((_QWORD *)&v50 + 1) + 8 * (_QWORD)v20);

      result = v16;
      v22 = CFGetTypeID(v16);
      if (v22 == SecKeyGetTypeID())
      {
        v23 = result;

        cf = 0;
        if (v23)
        {
          v59[0] = v46;
          v59[1] = v18;
          v60[0] = v45;
          v60[1] = v23;
          v59[2] = v19;
          v60[2] = MEMORY[0x1E0C9AAB0];
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v60, v59, 3);
          v24 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
          v25 = SecItemCopyMatching(v24, &cf);
          if ((_DWORD)v25)
          {
            v28 = v25;
            if (gLogCategory_SFAppleIDKeychainUtilities <= 90
              && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
            {
              v35 = (void *)v28;
              LogPrintF();
            }
            goto LABEL_61;
          }
          if (cf)
          {
            v26 = CFGetTypeID(cf);
            if (v26 == CFDictionaryGetTypeID())
            {
              v27 = (id)cf;
              v28 = 0;
              cf = 0;
              goto LABEL_24;
            }
            v28 = 4294960540;
LABEL_61:
            if (cf)
              CFRelease(cf);
            v27 = 0;
          }
          else
          {
            v27 = 0;
            v28 = 4294960534;
          }
        }
        else
        {
          v27 = 0;
          v24 = 0;
          v28 = 4294960591;
        }
LABEL_24:

        v29 = v27;
        v15 = v29;
        if ((_DWORD)v28)
        {
          if (gLogCategory_SFAppleIDKeychainUtilities <= 60
            && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
          {
            v35 = (void *)v28;
            LogPrintF();
          }
          goto LABEL_53;
        }
        if (!v29)
          goto LABEL_53;
        CFStringGetTypeID();
        CFDictionaryGetTypedValue();
        v30 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v30, "length") && objc_msgSend(v30, "hasPrefix:", CFSTR("Apple ID ")))
        {
          if (!objc_msgSend(v30, "hasSuffix:", CFSTR(" private key")))
            goto LABEL_40;

          v49 = 0;
          v31 = SFAppleIDCopyKeychainReferenceForKey((uint64_t)v23, &v49);
          v43 = v49;
          v32 = gLogCategory_SFAppleIDKeychainUtilities;
          if ((_DWORD)v31)
          {
LABEL_42:
            if (v32 <= 60 && (v32 != -1 || _LogCategory_Initialize()))
            {
              v35 = (void *)v31;
              LogPrintF();
            }
          }
          else
          {
            if (gLogCategory_SFAppleIDKeychainUtilities <= 50
              && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
            {
              v35 = v30;
              LogPrintF();
            }
            objc_msgSend(v40, "addObject:", v43, v35);
            ++v42;
LABEL_40:
            if (objc_msgSend(v30, "hasSuffix:", CFSTR(" public key"), v35))
            {

              v48 = 0;
              v31 = SFAppleIDCopyKeychainReferenceForKey((uint64_t)v23, &v48);
              v43 = v48;
              v32 = gLogCategory_SFAppleIDKeychainUtilities;
              if ((_DWORD)v31)
                goto LABEL_42;
              if (gLogCategory_SFAppleIDKeychainUtilities <= 50
                && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
              {
                v35 = v30;
                LogPrintF();
              }
              objc_msgSend(v39, "addObject:", v43, v35);
              ++v41;
            }
          }
        }
        v44 = v30;
      }
LABEL_53:
      v20 = (char *)v20 + 1;
    }
    while (v14 != v20);
    v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v56, 16);
    v14 = (void *)v33;
  }
  while (v33);

  v5 = v39;
  v4 = v40;
  v2 = v37;
  v10 = v38;
  v3 = v36;
  v14 = v44;
LABEL_69:

  if (gLogCategory_SFAppleIDKeychainUtilities <= 50
    && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = objc_retainAutorelease(v4);
  *v3 = v4;
  v5 = objc_retainAutorelease(v5);
  v13 = 0;
  *v2 = v5;
LABEL_74:

  return v13;
}

uint64_t SFAppleIDRemoveAllCertificatesFromKeychain(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  id v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  id v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v18 = 0;
  v2 = SFAppleIDGetAllCertificatePersistentReferencesFromKeychain(&v18);
  v3 = v18;
  v4 = v3;
  if ((_DWORD)v2)
  {
    if (gLogCategory_SFAppleIDKeychainUtilities <= 60
      && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
    {
LABEL_18:
      LogPrintF();
    }
  }
  else
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
    if (!v6)
    {

      v2 = 0;
      goto LABEL_21;
    }
    v7 = v6;
    v8 = 0;
    v9 = 0;
    v10 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        v12 = v9;
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v5);
        v9 = *(id *)(*((_QWORD *)&v14 + 1) + 8 * i);

        v2 = SFAppleIDRemoveCertificateFromKeychain(v1, v9);
        if ((_DWORD)v2)
        {
          if (gLogCategory_SFAppleIDKeychainUtilities <= 60
            && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        else
        {
          ++v8;
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
    }
    while (v7);

    if (v8
      && gLogCategory_SFAppleIDKeychainUtilities <= 50
      && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_18;
    }
  }
LABEL_21:

  return v2;
}

uint64_t SFAppleIDRemoveAllKeysFromKeychain(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  id v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  id v17;
  uint64_t v18;
  uint64_t j;
  void *v20;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  id v31;
  id v32;
  _BYTE v33[128];
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v31 = 0;
  v32 = 0;
  v2 = SFAppleIDGetAllKeyPersistentReferencesFromKeychain((unint64_t)&v32, (unint64_t)&v31);
  v3 = v32;
  v4 = v31;
  if ((_DWORD)v2)
  {
    if (gLogCategory_SFAppleIDKeychainUtilities <= 60
      && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v27, v34, 16);
    v22 = v4;
    if (v6)
    {
      v7 = v6;
      v8 = 0;
      v9 = 0;
      v10 = *(_QWORD *)v28;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          v12 = v9;
          if (*(_QWORD *)v28 != v10)
            objc_enumerationMutation(v5);
          v9 = *(id *)(*((_QWORD *)&v27 + 1) + 8 * i);

          v2 = SFAppleIDRemoveKeyFromKeychain(v1, v9);
          if ((_DWORD)v2)
          {
            if (gLogCategory_SFAppleIDKeychainUtilities <= 60
              && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
          }
          else
          {
            ++v8;
          }
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v27, v34, 16);
      }
      while (v7);

      if (v8
        && gLogCategory_SFAppleIDKeychainUtilities <= 50
        && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v4 = v22;
    }
    else
    {

      v2 = 0;
    }
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v13 = v4;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
    if (v14)
    {
      v15 = v14;
      v16 = 0;
      v17 = 0;
      v18 = *(_QWORD *)v24;
      do
      {
        for (j = 0; j != v15; ++j)
        {
          v20 = v17;
          if (*(_QWORD *)v24 != v18)
            objc_enumerationMutation(v13);
          v17 = *(id *)(*((_QWORD *)&v23 + 1) + 8 * j);

          v2 = SFAppleIDRemoveKeyFromKeychain(v1, v17);
          if ((_DWORD)v2)
          {
            if (gLogCategory_SFAppleIDKeychainUtilities <= 60
              && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
          }
          else
          {
            ++v16;
          }
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
      }
      while (v15);

      if (v16
        && gLogCategory_SFAppleIDKeychainUtilities <= 50
        && (gLogCategory_SFAppleIDKeychainUtilities != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v4 = v22;
    }
    else
    {

    }
  }

  return v2;
}

const __CFString *SFAirDropTransferStateToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 8)
    return CFSTR("Unknown");
  else
    return off_1E482D350[a1 - 1];
}

void sub_1A2845B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location,os_activity_scope_state_s state)
{
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void NetworkNode::NetworkNode(NetworkNode *this, const __CFString *a2, const __CFString *a3)
{
  *((_QWORD *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_QWORD *)this + 11) = CFStringCreateCopy(0, a2);
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 32) = CFStringCreateCopy(0, a3);
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = CFSetCreateMutable(0, 0, &kSharingFastSetCallBacks);
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((_DWORD *)this + 106) = -1;
  *((_QWORD *)this + 54) = 0;
  *((_DWORD *)this + 110) = -1;
  *((_QWORD *)this + 56) = 0;
  *((_DWORD *)this + 114) = 0;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((_QWORD *)this + 65) = 0;
  *((_QWORD *)this + 58) = 850045863;
}

void NetworkNode::~NetworkNode(NetworkNode *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  const void *v48;

  NetworkNode::cancelResolve(this);
  NetworkNode::cancelEject(this);
  v2 = (const void *)*((_QWORD *)this + 34);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 32);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 22);
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 23);
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 38);
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 40);
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)this + 11);
  if (v8)
    CFRelease(v8);
  v9 = (const void *)*((_QWORD *)this + 9);
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)this + 24);
  if (v10)
    CFRelease(v10);
  v11 = (const void *)*((_QWORD *)this + 20);
  if (v11)
    CFRelease(v11);
  v12 = (const void *)*((_QWORD *)this + 35);
  if (v12)
    CFRelease(v12);
  v13 = (const void *)*((_QWORD *)this + 25);
  if (v13)
    CFRelease(v13);
  v14 = (const void *)*((_QWORD *)this + 10);
  if (v14)
    CFRelease(v14);
  v15 = (const void *)*((_QWORD *)this + 46);
  if (v15)
    CFRelease(v15);
  v16 = (const void *)*((_QWORD *)this + 42);
  if (v16)
    CFRelease(v16);
  v17 = (const void *)*((_QWORD *)this + 47);
  if (v17)
    CFRelease(v17);
  v18 = (const void *)*((_QWORD *)this + 33);
  if (v18)
    CFRelease(v18);
  v19 = (const void *)*((_QWORD *)this + 12);
  if (v19)
    CFRelease(v19);
  v20 = (const void *)*((_QWORD *)this + 43);
  if (v20)
    CFRelease(v20);
  v21 = (const void *)*((_QWORD *)this + 37);
  if (v21)
    CFRelease(v21);
  v22 = (const void *)*((_QWORD *)this + 45);
  if (v22)
    CFRelease(v22);
  v23 = (const void *)*((_QWORD *)this + 17);
  if (v23)
    CFRelease(v23);
  v24 = (const void *)*((_QWORD *)this + 29);
  if (v24)
    CFRelease(v24);
  if (*(_QWORD *)this)
    CFRelease(*(CFTypeRef *)this);
  v25 = (const void *)*((_QWORD *)this + 36);
  if (v25)
    CFRelease(v25);
  v26 = (const void *)*((_QWORD *)this + 28);
  if (v26)
    CFRelease(v26);
  v27 = (const void *)*((_QWORD *)this + 4);
  if (v27)
    CFRelease(v27);
  v28 = (const void *)*((_QWORD *)this + 5);
  if (v28)
    CFRelease(v28);
  v29 = (const void *)*((_QWORD *)this + 7);
  if (v29)
    CFRelease(v29);
  v30 = (const void *)*((_QWORD *)this + 48);
  if (v30)
    CFRelease(v30);
  v31 = (const void *)*((_QWORD *)this + 1);
  if (v31)
    CFRelease(v31);
  v32 = (const void *)*((_QWORD *)this + 2);
  if (v32)
    CFRelease(v32);
  v33 = (const void *)*((_QWORD *)this + 3);
  if (v33)
    CFRelease(v33);
  v34 = (const void *)*((_QWORD *)this + 13);
  if (v34)
    CFRelease(v34);
  v35 = (const void *)*((_QWORD *)this + 14);
  if (v35)
    CFRelease(v35);
  v36 = (const void *)*((_QWORD *)this + 18);
  if (v36)
    CFRelease(v36);
  v37 = (const void *)*((_QWORD *)this + 15);
  if (v37)
    CFRelease(v37);
  v38 = (const void *)*((_QWORD *)this + 16);
  if (v38)
    CFRelease(v38);
  v39 = (const void *)*((_QWORD *)this + 21);
  if (v39)
    CFRelease(v39);
  v40 = (const void *)*((_QWORD *)this + 8);
  if (v40)
    CFRelease(v40);
  v41 = (const void *)*((_QWORD *)this + 26);
  if (v41)
    CFRelease(v41);
  v42 = (const void *)*((_QWORD *)this + 27);
  if (v42)
    CFRelease(v42);
  v43 = (const void *)*((_QWORD *)this + 44);
  if (v43)
    CFRelease(v43);
  v44 = (const void *)*((_QWORD *)this + 39);
  if (v44)
    CFRelease(v44);
  v45 = (const void *)*((_QWORD *)this + 41);
  if (v45)
    CFRelease(v45);
  v46 = (const void *)*((_QWORD *)this + 30);
  if (v46)
    CFRelease(v46);
  v47 = (const void *)*((_QWORD *)this + 31);
  if (v47)
    CFRelease(v47);
  v48 = (const void *)*((_QWORD *)this + 19);
  if (v48)
    CFRelease(v48);
}

void NetworkNode::cancel(NetworkNode *this)
{
  NetworkNode::cancelResolve(this);
  NetworkNode::cancelEject(this);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void NetworkNode::clearCache(NetworkNode *this)
{
  const void *v2;
  const void *v3;

  *((_DWORD *)this + 110) = -1;
  v2 = (const void *)*((_QWORD *)this + 20);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 20) = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 35);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 35) = 0;
  }
  CFArrayRemoveAllValues(*((CFMutableArrayRef *)this + 46));
}

CFStringRef NetworkNode::setDisplayName(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 11);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 11) = result;
  }
  return result;
}

CFStringRef NetworkNode::setRealName(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 32);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 32) = result;
  }
  return result;
}

CFStringRef NetworkNode::setContactIdentifier(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 30);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 30) = result;
  }
  return result;
}

CFMutableSetRef NetworkNode::setContactIdentifiers(NetworkNode *this, CFSetRef theSet)
{
  CFMutableSetRef result;

  result = (CFMutableSetRef)*((_QWORD *)this + 31);
  if (result != theSet)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theSet)
      result = CFSetCreateMutableCopy(0, 0, theSet);
    *((_QWORD *)this + 31) = result;
  }
  return result;
}

CFDataRef NetworkNode::setMediaCapabilities(NetworkNode *this, CFDataRef theData)
{
  CFDataRef result;

  result = (CFDataRef)*((_QWORD *)this + 3);
  if (result != theData)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theData)
      result = CFDataCreateCopy(0, theData);
    *((_QWORD *)this + 3) = result;
  }
  return result;
}

void NetworkNode::setModel(NetworkNode *this, CFStringRef theString)
{
  const __CFString *v3;
  CFStringRef Copy;

  v3 = (const __CFString *)*((_QWORD *)this + 22);
  if (v3 != theString)
  {
    if (v3)
      CFRelease(v3);
    Copy = 0;
    if (theString)
      Copy = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 22) = Copy;
  }
  NetworkNode::clearCache(this);
}

void NetworkNode::setModelIdentifier(NetworkNode *this, CFStringRef theString)
{
  const __CFString *v3;
  CFStringRef Copy;

  v3 = (const __CFString *)*((_QWORD *)this + 23);
  if (v3 != theString)
  {
    if (v3)
      CFRelease(v3);
    Copy = 0;
    if (theString)
      Copy = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 23) = Copy;
  }
  NetworkNode::clearCache(this);
}

void NetworkNode::setColor(NetworkNode *this, CFArrayRef theArray)
{
  CFArrayRef v3;
  CFArrayRef Copy;

  v3 = (CFArrayRef)*((_QWORD *)this + 38);
  if (v3 != theArray)
  {
    if (v3)
      CFRelease(v3);
    Copy = 0;
    if (theArray)
      Copy = CFArrayCreateCopy(0, theArray);
    *((_QWORD *)this + 38) = Copy;
  }
  NetworkNode::clearCache(this);
}

CFArrayRef NetworkNode::setSiblingNodes(NetworkNode *this, CFArrayRef theArray)
{
  CFArrayRef result;

  result = (CFArrayRef)*((_QWORD *)this + 40);
  if (result != theArray)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theArray)
      result = CFArrayCreateCopy(0, theArray);
    *((_QWORD *)this + 40) = result;
  }
  return result;
}

CFStringRef NetworkNode::setParentIdentifier(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 25);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 25) = result;
  }
  return result;
}

CFStringRef NetworkNode::setDiskType(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 10);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 10) = result;
  }
  return result;
}

CFStringRef NetworkNode::setServiceName(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 34);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 34) = result;
  }
  return result;
}

CFStringRef NetworkNode::setNetbiosName(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 24);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 24) = result;
  }
  return result;
}

void NetworkNode::setBonjourProtocols(NetworkNode *this, CFBagRef theBag)
{
  CFBagRef v3;
  CFMutableBagRef MutableCopy;

  v3 = (CFBagRef)*((_QWORD *)this + 47);
  if (v3 != theBag)
  {
    if (v3)
      CFRelease(v3);
    MutableCopy = 0;
    if (theBag)
      MutableCopy = CFBagCreateMutableCopy(0, 0, theBag);
    *((_QWORD *)this + 47) = MutableCopy;
  }
  NetworkNode::clearCache(this);
}

void NetworkNode::setKinds(NetworkNode *this, CFSetRef theSet)
{
  CFSetRef v3;

  v3 = (CFSetRef)*((_QWORD *)this + 42);
  if (v3 != theSet)
  {
    if (v3)
      CFRelease(v3);
    *((_QWORD *)this + 42) = CFSetCreateMutableCopy(0, 0, theSet);
  }
  NetworkNode::clearCache(this);
}

CFStringRef NetworkNode::setSecondaryName(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 33);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 33) = result;
  }
  return result;
}

CFStringRef NetworkNode::setHostName(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 17);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 17) = result;
  }
  return result;
}

CFStringRef NetworkNode::setComputerName(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 9);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 9) = result;
  }
  return result;
}

CFStringRef NetworkNode::setDomain(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 12);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 12) = result;
  }
  return result;
}

CFMutableSetRef NetworkNode::setDomains(NetworkNode *this, CFSetRef theSet)
{
  CFMutableSetRef result;

  result = (CFMutableSetRef)*((_QWORD *)this + 43);
  if (result != theSet)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theSet)
      result = CFSetCreateMutableCopy(0, 0, theSet);
    *((_QWORD *)this + 43) = result;
  }
  return result;
}

CFStringRef NetworkNode::setWorkgroup(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 37);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 37) = result;
  }
  return result;
}

CFMutableSetRef NetworkNode::setWorkgroups(NetworkNode *this, CFSetRef theSet)
{
  CFMutableSetRef result;

  result = (CFMutableSetRef)*((_QWORD *)this + 45);
  if (result != theSet)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theSet)
      result = CFSetCreateMutableCopy(0, 0, theSet);
    *((_QWORD *)this + 45) = result;
  }
  return result;
}

CFStringRef NetworkNode::setPath(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 29);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 29) = result;
  }
  return result;
}

CFTypeRef NetworkNode::setMountPoint(NetworkNode *this, CFTypeRef cf)
{
  CFTypeRef result;

  result = (CFTypeRef)*((_QWORD *)this + 1);
  if (result != cf)
  {
    if (result)
      CFRelease(result);
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *((_QWORD *)this + 1) = result;
  }
  return result;
}

uint64_t NetworkNode::setConnectionState(uint64_t result, int a2)
{
  *(_DWORD *)(result + 456) = a2;
  return result;
}

uint64_t NetworkNode::setPortNumber(uint64_t this, int a2)
{
  *(_DWORD *)(this + 424) = a2;
  return this;
}

uint64_t NetworkNode::setSelectionReason(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 432) = a2;
  return this;
}

CFTypeRef NetworkNode::setAccessRights(NetworkNode *this, CFTypeRef cf)
{
  CFTypeRef result;

  result = (CFTypeRef)*((_QWORD *)this + 6);
  if (result != cf)
  {
    if (result)
      CFRelease(result);
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *((_QWORD *)this + 6) = result;
  }
  return result;
}

CFTypeRef NetworkNode::setRangingData(NetworkNode *this, CFTypeRef cf)
{
  CFTypeRef result;

  result = (CFTypeRef)*((_QWORD *)this + 7);
  if (result != cf)
  {
    if (result)
      CFRelease(result);
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *((_QWORD *)this + 7) = result;
  }
  return result;
}

void NetworkNode::setURL(CFURLRef *this, CFURLRef anURL)
{
  CFURLRef v4;
  const __CFURL *v5;
  CFStringRef v6;
  CFStringRef v7;

  v4 = *this;
  if (v4 != anURL)
  {
    if (v4)
      CFRelease(v4);
    if (anURL)
      v5 = (const __CFURL *)CFRetain(anURL);
    else
      v5 = 0;
    *this = v5;
  }
  if (anURL)
  {
    if (!this[48])
      this[48] = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v6 = CFURLCopyScheme(anURL);
    if (v6)
    {
      v7 = v6;
      CFDictionarySetValue(this[48], v6, anURL);
      CFRelease(v7);
    }
  }
}

CFMutableDictionaryRef NetworkNode::setURLs(NetworkNode *this, CFDictionaryRef theDict)
{
  CFMutableDictionaryRef result;

  result = (CFMutableDictionaryRef)*((_QWORD *)this + 48);
  if (result != theDict)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theDict)
      result = CFDictionaryCreateMutableCopy(0, 0, theDict);
    *((_QWORD *)this + 48) = result;
  }
  return result;
}

CFStringRef NetworkNode::setUserName(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 36);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 36) = result;
  }
  return result;
}

CFStringRef NetworkNode::setPassword(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 28);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 28) = result;
  }
  return result;
}

CFTypeRef NetworkNode::setFlags(NetworkNode *this, CFTypeRef cf)
{
  CFTypeRef result;

  result = (CFTypeRef)*((_QWORD *)this + 4);
  if (result != cf)
  {
    if (result)
      CFRelease(result);
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *((_QWORD *)this + 4) = result;
  }
  return result;
}

CFTypeRef NetworkNode::setRapportFlags(NetworkNode *this, CFTypeRef cf)
{
  CFTypeRef result;

  result = (CFTypeRef)*((_QWORD *)this + 5);
  if (result != cf)
  {
    if (result)
      CFRelease(result);
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *((_QWORD *)this + 5) = result;
  }
  return result;
}

uint64_t NetworkNode::setSupportedMedia(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 448) = a2;
  return this;
}

CFStringRef NetworkNode::setSharePointBrowserID(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 26);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 26) = result;
  }
  return result;
}

CFDataRef NetworkNode::setIconData(NetworkNode *this, CFDataRef theData)
{
  CFDataRef result;

  result = (CFDataRef)*((_QWORD *)this + 2);
  if (result != theData)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theData)
      result = CFDataCreateCopy(0, theData);
    *((_QWORD *)this + 2) = result;
  }
  return result;
}

CFStringRef NetworkNode::setEmailHash(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 13);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 13) = result;
  }
  return result;
}

CFStringRef NetworkNode::setPhoneHash(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 14);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 14) = result;
  }
  return result;
}

CFStringRef NetworkNode::setIconHash(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 18);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 18) = result;
  }
  return result;
}

CFStringRef NetworkNode::setNickName(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 15);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 15) = result;
  }
  return result;
}

CFStringRef NetworkNode::setFirstName(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 16);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 16) = result;
  }
  return result;
}

CFStringRef NetworkNode::setLastName(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 21);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 21) = result;
  }
  return result;
}

CFTypeRef NetworkNode::setAppleID(NetworkNode *this, CFTypeRef cf)
{
  CFTypeRef result;

  result = (CFTypeRef)*((_QWORD *)this + 8);
  if (result != cf)
  {
    if (result)
      CFRelease(result);
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *((_QWORD *)this + 8) = result;
  }
  return result;
}

CFTypeRef NetworkNode::setTransportBundleID(NetworkNode *this, CFTypeRef cf)
{
  CFTypeRef result;

  result = (CFTypeRef)*((_QWORD *)this + 27);
  if (result != cf)
  {
    if (result)
      CFRelease(result);
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *((_QWORD *)this + 27) = result;
  }
  return result;
}

CFMutableSetRef NetworkNode::setHandles(NetworkNode *this, CFSetRef theSet)
{
  CFMutableSetRef result;

  result = (CFMutableSetRef)*((_QWORD *)this + 44);
  if (result != theSet)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theSet)
      result = CFSetCreateMutableCopy(0, 0, theSet);
    *((_QWORD *)this + 44) = result;
  }
  return result;
}

CFStringRef NetworkNode::setIDSDeviceIdentifier(NetworkNode *this, CFStringRef theString)
{
  CFStringRef result;

  result = (CFStringRef)*((_QWORD *)this + 19);
  if (result != theString)
  {
    if (result)
      CFRelease(result);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    *((_QWORD *)this + 19) = result;
  }
  return result;
}

void NetworkNode::addBonjourProtocol(NetworkNode *this, const __CFString *value)
{
  __CFBag *Mutable;

  Mutable = (__CFBag *)*((_QWORD *)this + 47);
  if (!Mutable)
  {
    Mutable = CFBagCreateMutable(0, 0, MEMORY[0x1E0C9B388]);
    *((_QWORD *)this + 47) = Mutable;
  }
  CFBagAddValue(Mutable, value);
  NetworkNode::clearCache(this);
}

void NetworkNode::removeBonjourProtocol(NetworkNode *this, const __CFString *a2)
{
  __CFBag *v3;

  v3 = (__CFBag *)*((_QWORD *)this + 47);
  if (v3)
    CFBagRemoveValue(v3, a2);
  NetworkNode::clearCache(this);
}

void NetworkNode::addKind(CFMutableSetRef *this, const __CFString *a2)
{
  CFSetSetValue(this[42], a2);
  NetworkNode::clearCache((NetworkNode *)this);
}

void NetworkNode::removeKind(CFMutableSetRef *this, const __CFString *a2)
{
  CFSetRemoveValue(this[42], a2);
  NetworkNode::clearCache((NetworkNode *)this);
}

void NetworkNode::addDomain(NetworkNode *this, const __CFString *value)
{
  __CFSet *Mutable;

  Mutable = (__CFSet *)*((_QWORD *)this + 43);
  if (!Mutable)
  {
    Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9AEC0]);
    *((_QWORD *)this + 43) = Mutable;
  }
  CFSetSetValue(Mutable, value);
}

void NetworkNode::removeDomain(CFMutableSetRef *this, const __CFString *a2)
{
  CFSetRemoveValue(this[43], a2);
  if (!CFSetGetCount(this[43]))
  {
    CFRelease(this[43]);
    this[43] = 0;
  }
}

void NetworkNode::addWorkgroup(NetworkNode *this, const __CFString *value)
{
  __CFSet *Mutable;

  Mutable = (__CFSet *)*((_QWORD *)this + 45);
  if (!Mutable)
  {
    Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9AEC0]);
    *((_QWORD *)this + 45) = Mutable;
  }
  CFSetSetValue(Mutable, value);
}

void NetworkNode::removeWorkgroup(CFMutableSetRef *this, const __CFString *a2)
{
  CFSetRemoveValue(this[45], a2);
  if (!CFSetGetCount(this[45]))
  {
    CFRelease(this[45]);
    this[45] = 0;
  }
}

void NetworkNode::handleResolverCallBack(void (**this)(NetworkNode *, const void *, uint64_t, uint64_t, const void *), __SFOperation *a2, uint64_t a3, const __CFDictionary *a4)
{
  const void *v6;
  uint64_t Value;
  const __CFNumber *v8;
  const void *v9;
  uint64_t v10;
  uint64_t valuePtr;

  valuePtr = 0;
  v6 = SFOperationCopyProperty((uint64_t)a2, CFSTR("Node"));
  Value = (uint64_t)CFDictionaryGetValue(a4, CFSTR("Error"));
  v8 = (const __CFNumber *)CFDictionaryGetValue(a4, CFSTR("Flags"));
  v9 = CFDictionaryGetValue(a4, CFSTR("Protocol"));
  if (Value)
  {
    if (CFErrorGetCode((CFErrorRef)Value))
      Value = 0xFFFFFFFFLL;
    else
      Value = 0;
  }
  if (v8)
  {
    CFNumberGetValue(v8, kCFNumberLongType, &valuePtr);
    v10 = valuePtr;
  }
  else
  {
    v10 = 0;
  }
  this[52]((NetworkNode *)this, v9, v10, Value, v6);
  CFRelease(v6);
  NetworkNode::cancelResolve((NetworkNode *)this);
}

void NetworkNode::cancelResolve(NetworkNode *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 50);
  if (v2)
  {
    SFOperationCancel(v2);
    CFRelease(*((CFTypeRef *)this + 50));
    *((_QWORD *)this + 50) = 0;
  }
}

void NetworkNode::handleEjecterCallBack(void (**this)(NetworkNode *, const void *, uint64_t, uint64_t, const void *), __SFOperation *a2, uint64_t a3, const __CFDictionary *a4)
{
  const void *v6;
  uint64_t Value;
  const __CFNumber *v8;
  const void *v9;
  uint64_t v10;
  uint64_t valuePtr;

  valuePtr = 0;
  v6 = SFOperationCopyProperty((uint64_t)a2, CFSTR("Node"));
  Value = (uint64_t)CFDictionaryGetValue(a4, CFSTR("Error"));
  v8 = (const __CFNumber *)CFDictionaryGetValue(a4, CFSTR("Flags"));
  v9 = CFDictionaryGetValue(a4, CFSTR("Protocol"));
  if (Value)
  {
    if (CFErrorGetCode((CFErrorRef)Value))
      Value = 0xFFFFFFFFLL;
    else
      Value = 0;
  }
  if (v8)
  {
    CFNumberGetValue(v8, kCFNumberLongType, &valuePtr);
    v10 = valuePtr;
  }
  else
  {
    v10 = 0;
  }
  this[51]((NetworkNode *)this, v9, v10, Value, v6);
  CFRelease(v6);
  NetworkNode::cancelEject((NetworkNode *)this);
}

void NetworkNode::cancelEject(NetworkNode *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 49);
  if (v2)
  {
    SFOperationCancel(v2);
    CFRelease(*((CFTypeRef *)this + 49));
    *((_QWORD *)this + 49) = 0;
  }
}

uint64_t NetworkNode::resolve(uint64_t a1, const void *a2, uint64_t a3, const void *a4, const void *a5, uint64_t a6, const void *a7)
{
  pthread_mutex_t *v13;
  CFNumberRef v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t valuePtr;

  valuePtr = a3;
  if (*(_QWORD *)(a1 + 400))
    return 4294967293;
  *(_QWORD *)(a1 + 416) = a6;
  *(_QWORD *)&v15 = 0;
  *((_QWORD *)&v15 + 1) = a1;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v13 = (pthread_mutex_t *)SFOperationCreate(0, CFSTR("Resolver"));
  *(_QWORD *)(a1 + 400) = v13;
  SFOperationSetProperty(v13, CFSTR("RunLoop"), a4);
  SFOperationSetProperty(*(pthread_mutex_t **)(a1 + 400), CFSTR("Protocol"), a2);
  SFOperationSetProperty(*(pthread_mutex_t **)(a1 + 400), CFSTR("Node"), a7);
  SFOperationSetProperty(*(pthread_mutex_t **)(a1 + 400), CFSTR("RunLoopMode"), a5);
  v14 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  SFOperationSetProperty(*(pthread_mutex_t **)(a1 + 400), CFSTR("Flags"), v14);
  SFOperationSetClient(*(_QWORD *)(a1 + 400), (uint64_t)NetworkNode::resolverOperationCallBack, &v15);
  SFOperationResume(*(_QWORD *)(a1 + 400));
  CFRelease(v14);
  return 0;
}

void NetworkNode::resolverOperationCallBack(__SFOperation *this, __SFOperation *a2, __CFDictionary *a3, void (**a4)(NetworkNode *, const void *, uint64_t, uint64_t, const void *), void *a5)
{
  NetworkNode::handleResolverCallBack(a4, this, (uint64_t)a3, a3);
}

uint64_t NetworkNode::eject(uint64_t a1, const void *a2, uint64_t a3, const void *a4, const void *a5, uint64_t a6, const void *a7)
{
  pthread_mutex_t *v13;
  CFNumberRef v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t valuePtr;

  valuePtr = a3;
  if (*(_QWORD *)(a1 + 392))
    return 4294967293;
  *(_QWORD *)(a1 + 408) = a6;
  *(_QWORD *)&v15 = 0;
  *((_QWORD *)&v15 + 1) = a1;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v13 = (pthread_mutex_t *)SFOperationCreate(0, CFSTR("Ejecter"));
  *(_QWORD *)(a1 + 392) = v13;
  SFOperationSetProperty(v13, CFSTR("RunLoop"), a4);
  SFOperationSetProperty(*(pthread_mutex_t **)(a1 + 392), CFSTR("Protocol"), a2);
  SFOperationSetProperty(*(pthread_mutex_t **)(a1 + 392), CFSTR("Node"), a7);
  SFOperationSetProperty(*(pthread_mutex_t **)(a1 + 392), CFSTR("RunLoopMode"), a5);
  v14 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  SFOperationSetProperty(*(pthread_mutex_t **)(a1 + 392), CFSTR("Flags"), v14);
  SFOperationSetClient(*(_QWORD *)(a1 + 392), (uint64_t)NetworkNode::ejecterOperationCallBack, &v15);
  SFOperationResume(*(_QWORD *)(a1 + 392));
  CFRelease(v14);
  return 0;
}

void NetworkNode::ejecterOperationCallBack(__SFOperation *this, __SFOperation *a2, __CFDictionary *a3, void (**a4)(NetworkNode *, const void *, uint64_t, uint64_t, const void *), void *a5)
{
  NetworkNode::handleEjecterCallBack(a4, this, (uint64_t)a3, a3);
}

uint64_t NetworkNode::isRoot(CFSetRef *this)
{
  return CFSetContainsValue(this[42], CFSTR("Root"));
}

BOOL NetworkNode::isNeighborhood(CFSetRef *this)
{
  return CFSetContainsValue(this[42], CFSTR("Domain"))
      || CFSetContainsValue(this[42], CFSTR("Workgroup"))
      || CFSetContainsValue(this[42], CFSTR("Root")) != 0;
}

BOOL NetworkNode::isServer(CFSetRef *this)
{
  return CFSetContainsValue(this[42], CFSTR("Windows"))
      || CFSetContainsValue(this[42], CFSTR("Bonjour"))
      || CFSetContainsValue(this[42], CFSTR("Classroom"))
      || CFSetContainsValue(this[42], CFSTR("Connected"))
      || CFSetContainsValue(this[42], CFSTR("Recent"))
      || CFSetContainsValue(this[42], CFSTR("Managed")) != 0;
}

BOOL NetworkNode::isSharePoint(CFSetRef *this)
{
  return CFSetContainsValue(this[42], CFSTR("Printer")) || CFSetContainsValue(this[42], CFSTR("Volume")) != 0;
}

BOOL NetworkNode::isContainer(CFSetRef *this)
{
  return NetworkNode::isServer(this) || NetworkNode::isNeighborhood(this);
}

BOOL NetworkNode::isMounted(NetworkNode *this)
{
  return *((_QWORD *)this + 1) || CFSetContainsValue(*((CFSetRef *)this + 42), CFSTR("Connected")) != 0;
}

const __CFNumber *NetworkNode::isDropBox(NetworkNode *this)
{
  const __CFNumber *result;
  int valuePtr;

  result = (const __CFNumber *)*((_QWORD *)this + 6);
  if (result)
  {
    valuePtr = 0;
    return (const __CFNumber *)(CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr) && (valuePtr & 7) == 3);
  }
  return result;
}

uint64_t NetworkNode::isRemovable(CFSetRef *this)
{
  uint64_t result;

  result = CFSetContainsValue(this[42], CFSTR("Recent"));
  if ((_DWORD)result)
    return CFSetContainsValue(this[42], CFSTR("Connected")) == 0;
  return result;
}

uint64_t NetworkNode::isAirPortDisk(CFSetRef *this)
{
  return CFSetContainsValue(this[42], CFSTR("ADisk"));
}

CFIndex NetworkNode::supportsFileSharing(CFSetRef *this)
{
  const __CFArray *Protocols;
  CFIndex result;
  const void *ValueAtIndex;

  Protocols = NetworkNode::getProtocols(this);
  result = CFArrayGetCount(Protocols);
  if (result)
  {
    if (result == 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(Protocols, 0);
      return CFEqual(ValueAtIndex, CFSTR("vnc")) == 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

CFSetRef NetworkNode::getProtocols(CFSetRef *this)
{
  const __CFBag *v2;
  __CFSet *Mutable;
  CFStringRef v4;
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFRange v9;
  CFRange v10;

  if (!CFArrayGetCount(this[46]))
  {
    if (!CFSetContainsValue(this[42], CFSTR("Bonjour"))
      || (v2 = this[47]) == 0
      || (Mutable = createMutableSetFromBag(0, 0, v2)) == 0)
    {
      Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
    }
    if (CFSetContainsValue(this[42], CFSTR("Windows")))
      CFSetSetValue(Mutable, CFSTR("smb"));
    if (CFSetContainsValue(this[42], CFSTR("ODisk")))
      CFSetSetValue(Mutable, CFSTR("odisk"));
    if ((CFSetContainsValue(this[42], CFSTR("Volume"))
       || CFSetContainsValue(this[42], CFSTR("Printer"))
       || CFSetContainsValue(this[42], CFSTR("Recent"))
       || CFSetContainsValue(this[42], CFSTR("Connected"))
       || CFSetContainsValue(this[42], CFSTR("Managed")))
      && *this)
    {
      v4 = CFURLCopyScheme(*this);
      CFSetSetValue(Mutable, v4);
      CFRelease(v4);
    }
    v5 = copyValuesFromSet(0, Mutable);
    if (v5)
    {
      v6 = v5;
      Count = CFArrayGetCount(v5);
      v10.location = 0;
      v10.length = Count;
      CFArrayAppendArray(this[46], v6, v10);
      v9.location = 0;
      v9.length = Count;
      CFArraySortValues(this[46], v9, (CFComparatorFunction)NetworkNode::sortProtocols, this);
      NetworkNode::preferSMB2WhenAvailable(this);
      CFRelease(v6);
    }
    CFRelease(Mutable);
  }
  return this[46];
}

uint64_t NetworkNode::supportsScreenSharing(CFSetRef *this)
{
  const __CFArray *Protocols;
  CFRange v3;

  Protocols = NetworkNode::getProtocols(this);
  v3.length = CFArrayGetCount(Protocols);
  v3.location = 0;
  return CFArrayContainsValue(Protocols, v3, CFSTR("vnc"));
}

const __CFNumber *NetworkNode::supportsAskToUse(NetworkNode *this)
{
  const __CFNumber *result;
  unsigned int valuePtr;

  valuePtr = 0;
  result = (const __CFNumber *)*((_QWORD *)this + 4);
  if (result)
  {
    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    if ((_DWORD)result)
      return (const __CFNumber *)((valuePtr >> 9) & 1);
  }
  return result;
}

const __CFNumber *NetworkNode::supportsPasses(NetworkNode *this)
{
  const __CFNumber *result;
  int valuePtr;

  valuePtr = 0;
  result = (const __CFNumber *)*((_QWORD *)this + 4);
  if (result)
  {
    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    if ((_DWORD)result)
      return (const __CFNumber *)((valuePtr >> 4) & 1);
  }
  return result;
}

BOOL NetworkNode::supportsFMF(NetworkNode *this)
{
  const __CFNumber *v2;
  int valuePtr;

  valuePtr = 0;
  v2 = (const __CFNumber *)*((_QWORD *)this + 4);
  if (v2)
  {
    if (CFNumberGetValue(v2, kCFNumberSInt32Type, &valuePtr))
    {
      if ((valuePtr & 0x20) != 0)
        return 1;
    }
    else
    {
      valuePtr = 0;
    }
  }
  return NetworkNode::supportsMixedTypes(this) == 0;
}

const __CFNumber *NetworkNode::supportsMixedTypes(NetworkNode *this)
{
  const __CFNumber *result;
  int valuePtr;

  valuePtr = 0;
  result = (const __CFNumber *)*((_QWORD *)this + 4);
  if (result)
  {
    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    if ((_DWORD)result)
      return (const __CFNumber *)((valuePtr >> 3) & 1);
  }
  return result;
}

const __CFNumber *NetworkNode::supportsUWB(NetworkNode *this)
{
  const __CFNumber *result;
  unsigned int valuePtr;

  valuePtr = 0;
  result = (const __CFNumber *)*((_QWORD *)this + 4);
  if (result)
  {
    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    if ((_DWORD)result)
      return (const __CFNumber *)((valuePtr >> 10) & 1);
  }
  return result;
}

BOOL NetworkNode::supportsIris(NetworkNode *this)
{
  const __CFNumber *v2;
  int valuePtr;

  valuePtr = 0;
  v2 = (const __CFNumber *)*((_QWORD *)this + 4);
  if (v2)
  {
    if (CFNumberGetValue(v2, kCFNumberSInt32Type, &valuePtr))
    {
      if ((valuePtr & 0x40) != 0)
        return 1;
    }
    else
    {
      valuePtr = 0;
    }
  }
  return NetworkNode::supportsMixedTypes(this) == 0;
}

const __CFNumber *NetworkNode::supportsCredentials(NetworkNode *this)
{
  const __CFNumber *result;
  int valuePtr;

  valuePtr = 0;
  result = (const __CFNumber *)*((_QWORD *)this + 4);
  if (result)
  {
    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    if ((_DWORD)result)
      return (const __CFNumber *)(BYTE1(valuePtr) & 1);
  }
  return result;
}

BOOL NetworkNode::canAcceptDrop(NetworkNode *this)
{
  return *((_QWORD *)this + 47) && MEMORY[0x1A8587900]()
      || CFSetContainsValue(*((CFSetRef *)this + 42), CFSTR("Classroom")) != 0;
}

BOOL NetworkNode::sortProtocols(NetworkNode *this, const void *a2, const void *a3, void *a4)
{
  const __CFArray *OrderedProtocols;
  CFIndex Count;
  CFIndex FirstIndexOfValue;
  CFRange v10;
  CFRange v11;

  OrderedProtocols = (const __CFArray *)getOrderedProtocols();
  Count = CFArrayGetCount(OrderedProtocols);
  v10.location = 0;
  v10.length = Count;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(OrderedProtocols, v10, this);
  v11.location = 0;
  v11.length = Count;
  return FirstIndexOfValue > CFArrayGetFirstIndexOfValue(OrderedProtocols, v11, a2);
}

void NetworkNode::preferSMB2WhenAvailable(CFArrayRef *this)
{
  const void *ValueAtIndex;
  const void *v3;
  const __CFNumber *v4;
  int valuePtr;

  if (CFArrayGetCount(this[46]) >= 2)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(this[46], 0);
    v3 = CFArrayGetValueAtIndex(this[46], 1);
    if (CFEqual(ValueAtIndex, CFSTR("afp")))
    {
      if (CFEqual(v3, CFSTR("smb")))
      {
        valuePtr = 0;
        v4 = this[4];
        if (v4)
        {
          if (CFNumberGetValue(v4, kCFNumberSInt32Type, &valuePtr))
          {
            if (valuePtr >= 13)
            {
              CFArraySetValueAtIndex(this[46], 0, CFSTR("smb"));
              CFArraySetValueAtIndex(this[46], 1, CFSTR("afp"));
            }
          }
        }
      }
    }
  }
}

CFStringRef NetworkNode::loadCurrentInfo(NetworkNode *this)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  const __CFString *v5;
  const __CFString *v6;
  int v7;
  const __CFSet *v8;
  int v9;
  int v10;
  CFStringRef result;
  int v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  _BOOL4 isNeighborhood;
  const __CFSet *v17;
  const __CFString *v18;
  const __CFString *v19;

  v2 = (const void *)*((_QWORD *)this + 35);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 20);
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)this + 22);
  if (v4)
  {
    v5 = (const __CFString *)SFCopyTypeIdentifierForColorArrayAndModelCode(*((const __CFArray **)this + 38), v4);
    *((_QWORD *)this + 35) = v5;
    if (v5)
    {
      v6 = CFSTR("Mac");
      if (!UTTypeConformsTo(v5, CFSTR("com.apple.mac")))
      {
        if (UTTypeConformsTo(*((CFStringRef *)this + 35), CFSTR("com.apple.time-capsule")))
        {
          v6 = CFSTR("Time Capsule");
        }
        else if (UTTypeConformsTo(*((CFStringRef *)this + 35), CFSTR("com.apple.airport")))
        {
          v6 = CFSTR("AirPort Extreme");
        }
        else if (UTTypeConformsTo(*((CFStringRef *)this + 35), CFSTR("public.generic-pc")))
        {
          v6 = CFSTR("PC");
        }
        else if (UTTypeConformsTo(*((CFStringRef *)this + 35), CFSTR("com.apple.ipod")))
        {
          v6 = CFSTR("iPod");
        }
        else if (UTTypeConformsTo(*((CFStringRef *)this + 35), CFSTR("com.apple.ipad")))
        {
          v6 = CFSTR("iPad");
        }
        else if (UTTypeConformsTo(*((CFStringRef *)this + 35), CFSTR("com.apple.iphone")))
        {
          v6 = CFSTR("iPhone");
        }
        else if (UTTypeConformsTo(*((CFStringRef *)this + 35), CFSTR("com.apple.appletv")))
        {
          v6 = CFSTR("Apple TV");
        }
      }
    }
    else
    {
      *((_QWORD *)this + 35) = CFStringCreateCopy(0, CFSTR("com.apple.mac"));
      v6 = CFSTR("Mac");
    }
    v13 = v6;
    goto LABEL_19;
  }
  v7 = CFSetContainsValue(*((CFSetRef *)this + 42), CFSTR("Bonjour"));
  v8 = (const __CFSet *)*((_QWORD *)this + 42);
  if (!v7)
  {
    if (CFSetContainsValue(v8, CFSTR("Windows")))
    {
      *((_QWORD *)this + 20) = copyLocalizedStringForKey(CFSTR("PC"));
      v14 = CFSTR("public.generic-pc");
LABEL_24:
      result = CFStringCreateCopy(0, v14);
      *((_QWORD *)this + 35) = result;
      goto LABEL_20;
    }
    if (CFSetContainsValue(*((CFSetRef *)this + 42), CFSTR("AirDrop")))
    {
      *((_QWORD *)this + 35) = CFStringCreateCopy(0, CFSTR("com.apple.airdrop"));
      v15 = CFSTR("AirDrop");
      goto LABEL_30;
    }
    isNeighborhood = NetworkNode::isNeighborhood((CFSetRef *)this);
    v17 = (const __CFSet *)*((_QWORD *)this + 42);
    if (isNeighborhood)
    {
      if (!CFSetContainsValue(v17, CFSTR("Root")) || !CFEqual(*((CFTypeRef *)this + 32), CFSTR("Remote Disc")))
      {
        *((_QWORD *)this + 20) = copyLocalizedStringForKey(CFSTR("Neighborhood"));
        result = CFStringCreateCopy(0, CFSTR("com.apple.network-neighborhood"));
        *((_QWORD *)this + 35) = result;
        v12 = 10;
        goto LABEL_21;
      }
      *((_QWORD *)this + 20) = copyLocalizedStringForKey(CFSTR("Volume"));
      result = CFStringCreateCopy(0, CFSTR("public.optical-storage-media"));
      *((_QWORD *)this + 35) = result;
    }
    else
    {
      if (!CFSetContainsValue(v17, CFSTR("ODisk")))
      {
        if (CFSetContainsValue(*((CFSetRef *)this + 42), CFSTR("Volume"))
          || CFSetContainsValue(*((CFSetRef *)this + 42), CFSTR("Printer")))
        {
          if (NetworkNode::isDropBox(this))
            v19 = CFSTR("com.apple.drop-folder");
          else
            v19 = CFSTR("public.file-sharepoint");
          *((_QWORD *)this + 35) = CFStringCreateCopy(0, v19);
          result = copyLocalizedStringForKey(CFSTR("Sharepoint"));
          *((_QWORD *)this + 20) = result;
          v12 = 30;
          goto LABEL_21;
        }
        if (!CFSetContainsValue(*((CFSetRef *)this + 42), CFSTR("All")))
        {
          *((_QWORD *)this + 20) = copyLocalizedStringForKey(CFSTR("Server"));
          v14 = CFSTR("com.apple.mac");
          goto LABEL_24;
        }
        *((_QWORD *)this + 35) = CFStringCreateCopy(0, CFSTR("com.apple.network-neighborhood"));
        v15 = CFSTR("Neighborhood");
LABEL_30:
        result = copyLocalizedStringForKey(v15);
        *((_QWORD *)this + 20) = result;
        v12 = 99;
        goto LABEL_21;
      }
      if (*((_QWORD *)this + 10))
        v18 = (const __CFString *)*((_QWORD *)this + 10);
      else
        v18 = CFSTR("public.optical-storage-media");
      *((_QWORD *)this + 35) = CFStringCreateCopy(0, v18);
      result = copyLocalizedStringForKey(CFSTR("Remote Disc"));
      *((_QWORD *)this + 20) = result;
    }
    v12 = 25;
    goto LABEL_21;
  }
  if (!CFSetContainsValue(v8, CFSTR("Person")))
  {
    *((_QWORD *)this + 35) = CFStringCreateCopy(0, CFSTR("com.apple.mac"));
    v13 = CFSTR("Mac");
LABEL_19:
    result = copyLocalizedStringForKey(v13);
    *((_QWORD *)this + 20) = result;
LABEL_20:
    v12 = 20;
    goto LABEL_21;
  }
  v9 = CFSetContainsValue(*((CFSetRef *)this + 42), CFSTR("Me"));
  v10 = CFSetContainsValue(*((CFSetRef *)this + 42), CFSTR("Unknown"));
  *((_QWORD *)this + 35) = CFStringCreateCopy(0, CFSTR("com.apple.user"));
  result = copyLocalizedStringForKey(CFSTR("User"));
  *((_QWORD *)this + 20) = result;
  if (v10)
    v12 = 45;
  else
    v12 = 40;
  if (v9)
    v12 = 35;
LABEL_21:
  *((_DWORD *)this + 110) = v12;
  return result;
}

uint64_t NetworkNode::getKindString(NetworkNode *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 20);
  if (!result)
  {
    NetworkNode::loadCurrentInfo(this);
    return *((_QWORD *)this + 20);
  }
  return result;
}

uint64_t NetworkNode::getTypeIdentifier(NetworkNode *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 35);
  if (!result)
  {
    NetworkNode::loadCurrentInfo(this);
    return *((_QWORD *)this + 35);
  }
  return result;
}

uint64_t NetworkNode::getPriority(NetworkNode *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 110);
  if ((_DWORD)result == -1)
  {
    NetworkNode::loadCurrentInfo(this);
    return *((unsigned int *)this + 110);
  }
  return result;
}

CFStringRef NetworkNode::copyDisplayName(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 11);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyRealName(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 32);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyContactIdentifier(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 30);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFSetRef NetworkNode::copyContactIdentifiers(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFSet *v3;
  CFSetRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFSet *)*((_QWORD *)this + 31);
  if (v3)
    Copy = CFSetCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyModel(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 22);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyModelIdentifier(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 23);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFArrayRef NetworkNode::copyColor(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFArray *v3;
  CFArrayRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFArray *)*((_QWORD *)this + 38);
  if (v3)
    Copy = CFArrayCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFArrayRef NetworkNode::copySiblingNodes(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFArray *v3;
  CFArrayRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFArray *)*((_QWORD *)this + 40);
  if (v3)
    Copy = CFArrayCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyParentIdentifier(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 25);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyDiskType(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 10);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyServiceName(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 34);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyNetbiosName(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 24);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyHostName(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 17);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyComputerName(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 9);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copySecondaryName(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 33);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyDomain(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 12);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFSetRef NetworkNode::copyDomains(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFSet *v3;
  CFSetRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFSet *)*((_QWORD *)this + 43);
  if (v3)
    Copy = CFSetCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyWorkgroup(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 37);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFSetRef NetworkNode::copyWorkgroups(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFSet *v3;
  CFSetRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFSet *)*((_QWORD *)this + 45);
  if (v3)
    Copy = CFSetCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFBagRef NetworkNode::copyBonjourProtocols(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFBag *v3;
  CFBagRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFBag *)*((_QWORD *)this + 47);
  if (v3)
    Copy = CFBagCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFSetRef NetworkNode::copyKinds(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFSet *v3;
  CFSetRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFSet *)*((_QWORD *)this + 42);
  if (v3)
    Copy = CFSetCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyPath(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 29);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFTypeRef NetworkNode::copyAccessRights(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const void *v3;
  CFTypeRef v4;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const void *)*((_QWORD *)this + 6);
  if (v3)
    v4 = CFRetain(v3);
  else
    v4 = 0;
  pthread_mutex_unlock(v2);
  return v4;
}

CFTypeRef NetworkNode::copyRangingData(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const void *v3;
  CFTypeRef v4;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const void *)*((_QWORD *)this + 7);
  if (v3)
    v4 = CFRetain(v3);
  else
    v4 = 0;
  pthread_mutex_unlock(v2);
  return v4;
}

void *NetworkNode::copyURL(NetworkNode *this)
{
  pthread_mutex_t *v2;
  void *URL;
  CFStringRef v4;
  __CFString *v5;
  int v6;
  const __CFString *v7;
  _BOOL4 isNeighborhood;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  if (*(_QWORD *)this)
  {
    URL = (void *)CFRetain(*(CFTypeRef *)this);
  }
  else
  {
    if (NetworkNode::isNeighborhood((CFSetRef *)this))
    {
      v4 = CFStringCreateWithFormat(0, 0, CFSTR("domain-%@"), *((_QWORD *)this + 32));
    }
    else
    {
      if (!NetworkNode::isServer((CFSetRef *)this) && !NetworkNode::isSharePoint((CFSetRef *)this))
      {
        URL = 0;
        goto LABEL_12;
      }
      v4 = CFStringCreateWithFormat(0, 0, CFSTR("server-%@"), *((_QWORD *)this + 32));
    }
    v5 = (__CFString *)v4;
    v6 = *((_DWORD *)this + 106);
    if (NetworkNode::isSharePoint((CFSetRef *)this))
      v7 = (const __CFString *)*((_QWORD *)this + 29);
    else
      v7 = 0;
    isNeighborhood = NetworkNode::isNeighborhood((CFSetRef *)this);
    URL = createURL(CFSTR("nwnode"), 0, 0, v5, v6, v7, 0, isNeighborhood);
    CFRelease(v5);
  }
LABEL_12:
  pthread_mutex_unlock(v2);
  return URL;
}

CFDictionaryRef NetworkNode::copyURLs(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFDictionary *v3;
  CFDictionaryRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFDictionary *)*((_QWORD *)this + 48);
  if (v3)
    Copy = CFDictionaryCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

const void *NetworkNode::copyURLForProtocol(NetworkNode *this, const __CFString *a2)
{
  pthread_mutex_t *v4;
  const __CFDictionary *v5;
  const void *Value;
  const void *v7;

  v4 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v5 = (const __CFDictionary *)*((_QWORD *)this + 48);
  if (v5)
  {
    Value = CFDictionaryGetValue(v5, a2);
    v7 = Value;
    if (Value)
      CFRetain(Value);
  }
  else
  {
    v7 = 0;
  }
  pthread_mutex_unlock(v4);
  return v7;
}

CFStringRef NetworkNode::copyUserName(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 36);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyPassword(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 28);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFTypeRef NetworkNode::copyFlags(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const void *v3;
  CFTypeRef v4;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const void *)*((_QWORD *)this + 4);
  if (v3)
    v4 = CFRetain(v3);
  else
    v4 = 0;
  pthread_mutex_unlock(v2);
  return v4;
}

CFTypeRef NetworkNode::copyRapportFlags(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const void *v3;
  CFTypeRef v4;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const void *)*((_QWORD *)this + 5);
  if (v3)
    v4 = CFRetain(v3);
  else
    v4 = 0;
  pthread_mutex_unlock(v2);
  return v4;
}

CFTypeRef NetworkNode::copyMountPoint(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const void *v3;
  CFTypeRef v4;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
    v4 = CFRetain(v3);
  else
    v4 = 0;
  pthread_mutex_unlock(v2);
  return v4;
}

CFStringRef NetworkNode::copyKindString(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 20);
  if (!v3)
  {
    NetworkNode::loadCurrentInfo(this);
    v3 = (const __CFString *)*((_QWORD *)this + 20);
  }
  Copy = CFStringCreateCopy(0, v3);
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyTypeIdentifier(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 35);
  if (!v3)
  {
    NetworkNode::loadCurrentInfo(this);
    v3 = (const __CFString *)*((_QWORD *)this + 35);
  }
  Copy = CFStringCreateCopy(0, v3);
  pthread_mutex_unlock(v2);
  return Copy;
}

CFArrayRef NetworkNode::copyProtocols(CFSetRef *this)
{
  pthread_mutex_t *v2;
  const __CFArray *Protocols;
  CFArrayRef Copy;

  v2 = (pthread_mutex_t *)(this + 58);
  pthread_mutex_lock((pthread_mutex_t *)(this + 58));
  Protocols = NetworkNode::getProtocols(this);
  Copy = CFArrayCreateCopy(0, Protocols);
  pthread_mutex_unlock(v2);
  return Copy;
}

CFDataRef NetworkNode::copyIconData(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFData *v3;
  CFDataRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFData *)*((_QWORD *)this + 2);
  if (v3)
    Copy = CFDataCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFDataRef NetworkNode::copyMediaCapabilities(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFData *v3;
  CFDataRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFData *)*((_QWORD *)this + 3);
  if (v3)
    Copy = CFDataCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyEmailHash(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 13);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyPhoneHash(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 14);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyIconHash(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 18);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyNickName(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 15);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyFirstName(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 16);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyLastName(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 21);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyAppleID(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 8);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyTransportBundleID(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 27);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFSetRef NetworkNode::copyHandles(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFSet *v3;
  CFSetRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFSet *)*((_QWORD *)this + 44);
  if (v3)
    Copy = CFSetCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copySharePointBrowserID(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 26);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

CFStringRef NetworkNode::copyIDSDeviceIdentifier(NetworkNode *this)
{
  pthread_mutex_t *v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = (pthread_mutex_t *)((char *)this + 464);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 464));
  v3 = (const __CFString *)*((_QWORD *)this + 19);
  if (v3)
    Copy = CFStringCreateCopy(0, v3);
  else
    Copy = 0;
  pthread_mutex_unlock(v2);
  return Copy;
}

uint64_t SFBrowserGetTypeID()
{
  if (SFBrowserGetTypeID_once != -1)
    dispatch_once(&SFBrowserGetTypeID_once, &__block_literal_global);
  return _kSFBrowserTypeID;
}

uint64_t SFBrowserCreate(const __CFAllocator *a1, const void *a2)
{
  NSObject *v4;
  uint64_t Instance;
  uint64_t v6;
  CFStringRef v7;
  CFStringRef v8;
  const __CFString *v9;
  uint64_t v10;
  __CFString **v11;
  CFStringRef v12;
  const __CFString *v13;
  const __CFString *v14;
  uint64_t v15;
  const CFDictionaryKeyCallBacks *v16;
  const CFDictionaryValueCallBacks *v17;
  CFStringRef v19;
  const __CFString *v20;

  v4 = browser_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    SFBrowserCreate_cold_1();
  if (SFBrowserGetTypeID_once != -1)
    dispatch_once(&SFBrowserGetTypeID_once, &__block_literal_global);
  if (!_kSFBrowserTypeID)
    return 0;
  Instance = _CFRuntimeCreateInstance();
  v6 = Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 192) = 0u;
    *(_OWORD *)(Instance + 208) = 0u;
    *(_OWORD *)(Instance + 160) = 0u;
    *(_OWORD *)(Instance + 176) = 0u;
    *(_OWORD *)(Instance + 128) = 0u;
    *(_OWORD *)(Instance + 144) = 0u;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 112) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    pthread_mutex_init((pthread_mutex_t *)(Instance + 88), 0);
    *(_QWORD *)(v6 + 56) = CFRetain(a2);
    if (CFEqual(a2, CFSTR("Network")))
    {
      v7 = copyLocalizedStringForKey(CFSTR("Network"));
      v8 = v7;
      if (v7)
        v9 = v7;
      else
        v9 = CFSTR("Network");
      v10 = SFNodeCreate((uint64_t)a1, v9, CFSTR("Network"));
      SFNodeAddKind(v10, CFSTR("Domain"));
      v11 = kSFNodeKindWorkgroup;
    }
    else
    {
      if (!CFEqual(a2, CFSTR("AirDrop")))
      {
        if (!CFEqual(a2, CFSTR("Remote Disc")))
        {
          if (!CFEqual(a2, CFSTR("Printer")))
          {
            v10 = 0;
            goto LABEL_23;
          }
          v10 = SFNodeCreate((uint64_t)a1, CFSTR("Printer"), CFSTR("Printer"));
          if (!v10)
            goto LABEL_23;
LABEL_22:
          SFNodeAddKind(v10, CFSTR("Root"));
LABEL_23:
          *(_QWORD *)(v6 + 208) = v10;
          v16 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
          v17 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
          *(_QWORD *)(v6 + 48) = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          *(_QWORD *)(v6 + 40) = CFDictionaryCreateMutable(a1, 0, v16, v17);
          *(_QWORD *)(v6 + 32) = CFDictionaryCreateMutable(a1, 0, v16, v17);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v6 + 40), *(const void **)(v6 + 208), *(const void **)(v6 + 208));
          return v6;
        }
        v19 = copyLocalizedStringForKey(CFSTR("Remote Disc"));
        v8 = v19;
        if (v19)
          v20 = v19;
        else
          v20 = CFSTR("Remote Disc");
        v15 = SFNodeCreate((uint64_t)a1, v20, CFSTR("Remote Disc"));
        v10 = v15;
        v14 = CFSTR("Domain");
LABEL_19:
        SFNodeAddKind(v15, v14);
        SFNodeAddDomain(v10, CFSTR("local"));
        if (v8)
          CFRelease(v8);
        if (!v10)
          goto LABEL_23;
        goto LABEL_22;
      }
      v12 = copyLocalizedStringForKey(CFSTR("AirDrop"));
      v8 = v12;
      if (v12)
        v13 = v12;
      else
        v13 = CFSTR("AirDrop");
      v10 = SFNodeCreate((uint64_t)a1, v13, CFSTR("AirDrop"));
      SFNodeAddKind(v10, CFSTR("Domain"));
      v11 = kSFNodeKindAirDrop;
    }
    v14 = *v11;
    v15 = v10;
    goto LABEL_19;
  }
  return v6;
}

uint64_t SFBrowserSetClient(uint64_t a1, uint64_t a2, __int128 *a3)
{
  NSObject *v6;
  void (*v7)(void);
  __int128 v8;
  __int128 v9;
  uint64_t (*v10)(void);
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  __int128 *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = browser_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v12 = 134218496;
    v13 = a1;
    v14 = 2048;
    v15 = a2;
    v16 = 2048;
    v17 = a3;
    _os_log_debug_impl(&dword_1A2830000, v6, OS_LOG_TYPE_DEBUG, "SFBrowserSetClient (browser = %p, callback = %p, context = %p)", (uint8_t *)&v12, 0x20u);
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  if (*(_QWORD *)(a1 + 168))
  {
    v7 = *(void (**)(void))(a1 + 184);
    if (v7)
      v7();
  }
  *(_QWORD *)(a1 + 152) = a2;
  v8 = *a3;
  v9 = a3[1];
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(a1 + 160) = v8;
  *(_OWORD *)(a1 + 176) = v9;
  if (*(_QWORD *)(a1 + 168))
  {
    v10 = *(uint64_t (**)(void))(a1 + 176);
    if (v10)
      *(_QWORD *)(a1 + 168) = v10();
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 88));
}

uint64_t SFBrowserSetDispatchQueue(uint64_t a1, NSObject *a2)
{
  NSObject *v4;
  NSObject *v5;

  v4 = browser_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    SFBrowserSetDispatchQueue_cold_1();
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  v5 = *(NSObject **)(a1 + 80);
  if (v5 != a2)
  {
    if (v5)
      dispatch_release(v5);
    if (a2)
      dispatch_retain(a2);
    *(_QWORD *)(a1 + 80) = a2;
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 88));
}

uint64_t SFBrowserSetMode(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t Connection;
  NSObject *v6;
  xpc_object_t v7;
  os_activity_scope_state_s v9;

  v4 = browser_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    SFBrowserSetMode_cold_1();
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  if (*(_QWORD *)(a1 + 216)
    || (Connection = _SFBrowserCreateConnection(a1), (*(_QWORD *)(a1 + 216) = Connection) != 0))
  {
    v6 = _os_activity_create(&dword_1A2830000, "Sharing/SFBrowser/setMode", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
    v9.opaque[0] = 0;
    v9.opaque[1] = 0;
    os_activity_scope_enter(v6, &v9);
    os_release(v6);
    *(_QWORD *)(a1 + 200) = a2;
    v7 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v7, "Object", "Browser");
    xpc_dictionary_set_string(v7, "Function", "SetMode");
    xpc_dictionary_set_uint64(v7, "Mode", a2);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 216), v7);
    xpc_release(v7);
    os_activity_scope_leave(&v9);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 88));
}

_xpc_connection_s *_SFBrowserCreateConnection(_QWORD *a1)
{
  NSObject *v2;
  xpc_object_t v3;
  void *v4;
  xpc_object_t v5;
  NSObject *v6;
  _xpc_connection_s *mach_service;
  void *v8;
  _QWORD v10[6];
  os_activity_scope_state_s state;

  v2 = _os_activity_create(&dword_1A2830000, "Sharing/SFBrowser/createConnection", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v2, &state);
  os_release(v2);
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  v5 = _SFNodeXPCObjectCreate(a1[26]);
  xpc_dictionary_set_value(v3, "Kind", v4);
  xpc_dictionary_set_value(v3, "Node", v5);
  xpc_dictionary_set_string(v3, "Object", "Browser");
  xpc_dictionary_set_string(v3, "Function", "Create");
  if (a1[10])
    v6 = a1[10];
  else
    v6 = MEMORY[0x1E0C80D38];
  mach_service = xpc_connection_create_mach_service("com.apple.sharingd", v6, 0);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___SFBrowserCreateConnection_block_invoke;
  v10[3] = &__block_descriptor_tmp_57;
  v10[4] = a1;
  v10[5] = mach_service;
  xpc_connection_set_event_handler(mach_service, v10);
  xpc_connection_send_message(mach_service, v3);
  v8 = (void *)CFRetain(a1);
  xpc_connection_set_context(mach_service, v8);
  xpc_connection_set_finalizer_f(mach_service, (xpc_finalizer_t)MEMORY[0x1E0C98BC0]);
  xpc_connection_resume(mach_service);
  xpc_release(v4);
  xpc_release(v5);
  xpc_release(v3);
  os_activity_scope_leave(&state);
  return mach_service;
}

uint64_t SFBrowserSetOptions(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _xpc_connection_s *Connection;
  NSObject *v6;
  xpc_object_t v7;
  void *v8;
  os_activity_scope_state_s v10;

  v4 = browser_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    SFBrowserSetOptions_cold_1();
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  if (*(_QWORD *)(a1 + 216)
    || (Connection = _SFBrowserCreateConnection((_QWORD *)a1), (*(_QWORD *)(a1 + 216) = Connection) != 0))
  {
    v6 = _os_activity_create(&dword_1A2830000, "Sharing/SFBrowser/setOptions", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
    v10.opaque[0] = 0;
    v10.opaque[1] = 0;
    os_activity_scope_enter(v6, &v10);
    os_release(v6);
    *(_QWORD *)(a1 + 64) = a2;
    v7 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v7, "Object", "Browser");
    xpc_dictionary_set_string(v7, "Function", "SetOptions");
    v8 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    xpc_dictionary_set_value(v7, "Options", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 216), v7);
    xpc_release(v8);
    xpc_release(v7);
    os_activity_scope_leave(&v10);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 88));
}

void SFBrowserScheduleWithRunLoop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = browser_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v8 = 134218496;
    v9 = a1;
    v10 = 2048;
    v11 = a2;
    v12 = 2048;
    v13 = a3;
    _os_log_debug_impl(&dword_1A2830000, v6, OS_LOG_TYPE_DEBUG, "SFBrowserScheduleWithRunLoop (browser = %p, runLoop = %p, runLoopMode = %p)", (uint8_t *)&v8, 0x20u);
  }
  v7 = browser_log();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    SFBrowserScheduleWithRunLoop_cold_1();
}

uint64_t SFBrowserGetRootNode(uint64_t a1)
{
  NSObject *v2;
  pthread_mutex_t *v3;
  uint64_t v4;

  v2 = browser_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    SFBrowserGetRootNode_cold_1();
  v3 = (pthread_mutex_t *)(a1 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 208);
  pthread_mutex_unlock(v3);
  return v4;
}

const void *SFBrowserCopyChildren(uint64_t a1, const void *a2)
{
  NSObject *v4;
  pthread_mutex_t *v5;
  const void *Value;
  const void *Mutable;
  const void *v8;
  CFStringRef v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  int v14;
  CFStringRef v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = browser_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    SFBrowserCopyChildren_cold_2();
  v5 = (pthread_mutex_t *)(a1 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  if ((a2 || (a2 = *(const void **)(a1 + 208)) != 0)
    && (Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2)) != 0)
  {
    Mutable = CFRetain(Value);
  }
  else
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  }
  v8 = Mutable;
  v9 = CFCopyDescription(Mutable);
  v10 = CFEqual(*(CFTypeRef *)(a1 + 56), CFSTR("AirDrop"));
  v11 = browser_log();
  v12 = v11;
  if (v10)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 138412290;
      v15 = v9;
      _os_log_impl(&dword_1A2830000, v12, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&v14, 0xCu);
      if (!v9)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    SFBrowserCopyChildren_cold_1();
    if (!v9)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (v9)
LABEL_14:
    CFRelease(v9);
LABEL_15:
  pthread_mutex_unlock(v5);
  return v8;
}

const void *SFBrowserCopySidebarChildren(uint64_t a1)
{
  NSObject *v2;
  pthread_mutex_t *v3;
  const void *v4;
  CFStringRef v5;
  NSObject *v6;

  v2 = browser_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    SFBrowserCopySidebarChildren_cold_2();
  v3 = (pthread_mutex_t *)(a1 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  v4 = *(const void **)(a1 + 24);
  if (v4)
    CFRetain(v4);
  v5 = CFCopyDescription(v4);
  v6 = browser_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    SFBrowserCopyChildren_cold_1();
    if (!v5)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (v5)
LABEL_7:
    CFRelease(v5);
LABEL_8:
  pthread_mutex_unlock(v3);
  return v4;
}

uint64_t SFBrowserOpenNode(uint64_t a1, const void *a2, const void *a3, uint64_t a4)
{
  NSObject *v8;
  pthread_mutex_t *v9;
  uint64_t Connection;
  NSObject *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  void *v14;
  void *v15;
  __CFDictionary *Mutable;
  CFNumberRef v17;
  uint64_t v18;
  os_activity_scope_state_s state;
  uint64_t valuePtr;

  valuePtr = a4;
  v8 = browser_log();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    SFBrowserOpenNode_cold_1();
  v9 = (pthread_mutex_t *)(a1 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  if (*(_QWORD *)(a1 + 216)
    || (Connection = _SFBrowserCreateConnection(a1), (*(_QWORD *)(a1 + 216) = Connection) != 0))
  {
    v11 = _os_activity_create(&dword_1A2830000, "Sharing/SFBrowser/openNode", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[0] = 0;
    state.opaque[1] = 0;
    os_activity_scope_enter(v11, &state);
    os_release(v11);
    if (!a2)
      a2 = *(const void **)(a1 + 208);
    v12 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_uint64(v12, "Flags", a4);
    xpc_dictionary_set_string(v12, "Object", "Browser");
    xpc_dictionary_set_string(v12, "Function", "OpenNode");
    v13 = _SFNodeXPCObjectCreate((uint64_t)a2);
    if (v13)
    {
      v14 = v13;
      xpc_dictionary_set_value(v12, "Node", v13);
      xpc_release(v14);
    }
    if (a3)
    {
      v15 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      xpc_dictionary_set_value(v12, "Protocol", v15);
      xpc_release(v15);
    }
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("Node"), a2);
    v17 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
    CFDictionarySetValue(Mutable, CFSTR("Flags"), v17);
    if (a3)
      CFDictionarySetValue(Mutable, CFSTR("Protocol"), a3);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), a2, Mutable);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 216), v12);
    xpc_release(v12);
    CFRelease(Mutable);
    CFRelease(v17);
    os_activity_scope_leave(&state);
    v18 = 0;
  }
  else
  {
    v18 = 4294967293;
  }
  pthread_mutex_unlock(v9);
  return v18;
}

uint64_t SFBrowserAddNode(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _xpc_connection_s *Connection;
  uint64_t v6;
  xpc_object_t v7;
  void *v8;
  NSObject *v9;
  xpc_object_t v10;
  os_activity_scope_state_s v12;

  v4 = browser_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    SFBrowserAddNode_cold_1();
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  Connection = *(_xpc_connection_s **)(a1 + 216);
  if (!Connection)
  {
    Connection = _SFBrowserCreateConnection((_QWORD *)a1);
    *(_QWORD *)(a1 + 216) = Connection;
  }
  v6 = 4294967293;
  if (a2)
  {
    if (Connection)
    {
      v7 = _SFNodeXPCObjectCreate(a2);
      if (v7)
      {
        v8 = v7;
        v9 = _os_activity_create(&dword_1A2830000, "Sharing/SFBrowser/addNode", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
        v12.opaque[0] = 0;
        v12.opaque[1] = 0;
        os_activity_scope_enter(v9, &v12);
        os_release(v9);
        v10 = xpc_dictionary_create(0, 0, 0);
        xpc_dictionary_set_value(v10, "Node", v8);
        xpc_dictionary_set_string(v10, "Object", "Browser");
        xpc_dictionary_set_string(v10, "Function", "AddNode");
        xpc_connection_send_message(*(xpc_connection_t *)(a1 + 216), v10);
        xpc_release(v10);
        xpc_release(v8);
        os_activity_scope_leave(&v12);
        v6 = 0;
      }
    }
  }
  _SFBrowserCancelConnectionIfNeccesary(a1);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 88));
  return v6;
}

void _SFBrowserCancelConnectionIfNeccesary(uint64_t a1)
{
  _xpc_connection_s *v2;
  _QWORD barrier[5];

  if (*(_QWORD *)(a1 + 216))
  {
    if (!CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 48)))
    {
      v2 = *(_xpc_connection_s **)(a1 + 216);
      barrier[0] = MEMORY[0x1E0C809B0];
      barrier[1] = 0x40000000;
      barrier[2] = ___SFBrowserCancelConnectionIfNeccesary_block_invoke;
      barrier[3] = &__block_descriptor_tmp_61;
      barrier[4] = v2;
      xpc_connection_send_barrier(v2, barrier);
      *(_QWORD *)(a1 + 216) = 0;
    }
  }
}

uint64_t SFBrowserRemoveNode(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _xpc_connection_s *Connection;
  uint64_t v6;
  xpc_object_t v7;
  void *v8;
  NSObject *v9;
  xpc_object_t v10;
  os_activity_scope_state_s v12;

  v4 = browser_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    SFBrowserRemoveNode_cold_1();
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  Connection = *(_xpc_connection_s **)(a1 + 216);
  if (!Connection)
  {
    Connection = _SFBrowserCreateConnection((_QWORD *)a1);
    *(_QWORD *)(a1 + 216) = Connection;
  }
  v6 = 4294967293;
  if (a2)
  {
    if (Connection)
    {
      v7 = _SFNodeXPCObjectCreate(a2);
      if (v7)
      {
        v8 = v7;
        v9 = _os_activity_create(&dword_1A2830000, "Sharing/SFBrowser/removeNode", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
        v12.opaque[0] = 0;
        v12.opaque[1] = 0;
        os_activity_scope_enter(v9, &v12);
        os_release(v9);
        v10 = xpc_dictionary_create(0, 0, 0);
        xpc_dictionary_set_value(v10, "Node", v8);
        xpc_dictionary_set_string(v10, "Object", "Browser");
        xpc_dictionary_set_string(v10, "Function", "RemoveNode");
        xpc_connection_send_message(*(xpc_connection_t *)(a1 + 216), v10);
        xpc_release(v10);
        xpc_release(v8);
        os_activity_scope_leave(&v12);
        v6 = 0;
      }
    }
  }
  _SFBrowserCancelConnectionIfNeccesary(a1);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 88));
  return v6;
}

uint64_t SFBrowserCloseNode(uint64_t a1, const void *a2)
{
  NSObject *v4;
  NSObject *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  uint64_t v9;
  os_activity_scope_state_s v11;

  v4 = browser_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    SFBrowserCloseNode_cold_1();
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  if (*(_QWORD *)(a1 + 216))
  {
    v5 = _os_activity_create(&dword_1A2830000, "Sharing/SFBrowser/closeNode", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
    v11.opaque[0] = 0;
    v11.opaque[1] = 0;
    os_activity_scope_enter(v5, &v11);
    os_release(v5);
    if (!a2)
      a2 = *(const void **)(a1 + 208);
    v6 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v6, "Object", "Browser");
    xpc_dictionary_set_string(v6, "Function", "CloseNode");
    v7 = _SFNodeXPCObjectCreate((uint64_t)a2);
    if (v7)
    {
      v8 = v7;
      xpc_dictionary_set_value(v6, "Node", v7);
      xpc_release(v8);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 216), v6);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), a2);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), a2);
    xpc_release(v6);
    os_activity_scope_leave(&v11);
    v9 = 0;
  }
  else
  {
    v9 = 4294967293;
  }
  _SFBrowserCancelConnectionIfNeccesary(a1);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 88));
  return v9;
}

uint64_t SFBrowserInvalidate(uint64_t a1)
{
  NSObject *v2;
  _xpc_connection_s *v3;
  _QWORD barrier[5];

  v2 = browser_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    SFBrowserInvalidate_cold_1();
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  if (!*(_BYTE *)(a1 + 16))
  {
    *(_BYTE *)(a1 + 16) = 1;
    v3 = *(_xpc_connection_s **)(a1 + 216);
    if (v3)
    {
      barrier[0] = MEMORY[0x1E0C809B0];
      barrier[1] = 0x40000000;
      barrier[2] = __SFBrowserInvalidate_block_invoke;
      barrier[3] = &__block_descriptor_tmp_46;
      barrier[4] = v3;
      xpc_connection_send_barrier(v3, barrier);
      *(_QWORD *)(a1 + 216) = 0;
    }
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 88));
}

CFTypeRef SFBrowserCopyNodeForURL(uint64_t a1, const __CFURL *a2)
{
  NSObject *v4;
  pthread_mutex_t *v5;
  CFStringRef v6;
  const __CFString *v7;
  const __CFString *v8;
  int HasPrefix;
  int v10;
  int v11;
  const __CFAllocator *v12;
  CFStringRef v13;
  CFStringRef v14;
  const __CFAllocator *v15;
  const __CFArray *v16;
  CFIndex Count;
  CFIndex v18;
  uint64_t v19;
  const void *ValueAtIndex;
  CFStringRef v21;
  CFTypeRef v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  const __CFString *v28;
  CFRange v29;

  v4 = browser_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    SFBrowserCopyNodeForURL_cold_5();
  v5 = (pthread_mutex_t *)(a1 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  v6 = CFURLCopyScheme(a2);
  if (CFEqual(v6, CFSTR("nwnode")))
  {
    v7 = CFURLCopyHostName(a2);
    if (v7)
    {
      v8 = v7;
      HasPrefix = CFStringHasPrefix(v7, CFSTR("server-"));
      v10 = CFStringHasPrefix(v8, CFSTR("domain-"));
      if (HasPrefix | v10)
      {
        v11 = v10;
        v12 = CFGetAllocator((CFTypeRef)a1);
        v29.length = CFStringGetLength(v8) - 7;
        v29.location = 7;
        v13 = CFStringCreateWithSubstring(v12, v8, v29);
        if (v13)
        {
          v14 = v13;
          v28 = v6;
          v15 = CFGetAllocator((CFTypeRef)a1);
          v16 = copyValuesFromDictionary(v15, *(CFDictionaryRef *)(a1 + 40));
          Count = CFArrayGetCount(v16);
          if (Count < 1)
          {
            if (!v11)
              goto LABEL_40;
          }
          else
          {
            v18 = Count;
            v19 = 1;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v16, v19 - 1);
              v21 = SFNodeCopyRealName((uint64_t)ValueAtIndex);
              if ((HasPrefix && (SFNodeIsServer((uint64_t)ValueAtIndex) || SFNodeIsSharePoint((uint64_t)ValueAtIndex))
                 || v11 && SFNodeIsNeighborhood((uint64_t)ValueAtIndex))
                && CFEqual(v21, v14))
              {
                v22 = CFRetain(ValueAtIndex);
              }
              else
              {
                v22 = 0;
              }
              CFRelease(v21);
              if (v19 >= v18)
                break;
              ++v19;
            }
            while (!v22);
            v5 = (pthread_mutex_t *)(a1 + 88);
            if (v22 || !v11)
              goto LABEL_41;
          }
          if (CFEqual(*(CFTypeRef *)(a1 + 56), CFSTR("Network")) && CFEqual(v14, CFSTR("Network"))
            || CFEqual(*(CFTypeRef *)(a1 + 56), CFSTR("AirDrop")) && CFEqual(v14, CFSTR("AirDrop"))
            || CFEqual(*(CFTypeRef *)(a1 + 56), CFSTR("Remote Disc")) && CFEqual(v14, CFSTR("Remote Disc")))
          {
            v22 = CFRetain(*(CFTypeRef *)(a1 + 208));
LABEL_41:
            CFRelease(v16);
            CFRelease(v14);
            v6 = v28;
            goto LABEL_42;
          }
LABEL_40:
          v22 = 0;
          goto LABEL_41;
        }
        v26 = browser_log();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          SFBrowserCopyNodeForURL_cold_3();
      }
      else
      {
        v25 = browser_log();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          SFBrowserCopyNodeForURL_cold_4();
      }
      v22 = 0;
LABEL_42:
      CFRelease(v8);
      goto LABEL_43;
    }
    v24 = browser_log();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      SFBrowserCopyNodeForURL_cold_2();
  }
  else
  {
    v23 = browser_log();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      SFBrowserCopyNodeForURL_cold_1();
  }
  v22 = 0;
LABEL_43:
  CFRelease(v6);
  pthread_mutex_unlock(v5);
  return v22;
}

uint64_t _SFBrowserFinalize(uint64_t a1)
{
  pthread_mutex_t *v2;
  void (*v3)(void);
  const void *v4;
  const void *v5;
  NSObject *v6;

  v2 = (pthread_mutex_t *)(a1 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  if (*(_QWORD *)(a1 + 168))
  {
    v3 = *(void (**)(void))(a1 + 184);
    if (v3)
      v3();
  }
  CFRelease(*(CFTypeRef *)(a1 + 56));
  CFRelease(*(CFTypeRef *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  v4 = *(const void **)(a1 + 208);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 24);
  if (v5)
    CFRelease(v5);
  v6 = *(NSObject **)(a1 + 80);
  if (v6)
    dispatch_release(v6);
  pthread_mutex_unlock(v2);
  return pthread_mutex_destroy(v2);
}

BOOL _SFBrowserEqual(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)(a1 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 88));
  pthread_mutex_unlock(v4);
  pthread_mutex_unlock((pthread_mutex_t *)(a2 + 88));
  return a1 == a2;
}

uint64_t _SFBrowserHash(uint64_t a1)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)(a1 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  pthread_mutex_unlock(v2);
  return a1;
}

CFStringRef _SFBrowserCopyDebugDesc(uint64_t a1)
{
  pthread_mutex_t *v2;
  CFStringRef v3;

  v2 = (pthread_mutex_t *)(a1 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  v3 = CFStringCreateWithFormat(0, 0, CFSTR("<SFBrowser %p>{kind = %@}"), a1, *(_QWORD *)(a1 + 56));
  pthread_mutex_unlock(v2);
  return v3;
}

__CFArray *_SFBrowserCreateChildrenFromXPCNodes(void *a1)
{
  int64_t count;
  __CFArray *Mutable;
  size_t i;
  xpc_object_t value;
  const void *v6;
  const void *v7;

  count = xpc_array_get_count(a1);
  Mutable = CFArrayCreateMutable(0, count, MEMORY[0x1E0C9B378]);
  if (count >= 1)
  {
    for (i = 0; i != count; ++i)
    {
      value = xpc_array_get_value(a1, i);
      v6 = (const void *)_SFNodeCreateWithXPCObject(0, value);
      if (v6)
      {
        v7 = v6;
        CFArrayAppendValue(Mutable, v6);
        CFRelease(v7);
      }
    }
  }
  return Mutable;
}

void _SFBrowserUpdateCachedChildrenNodes(uint64_t a1, const void *a2, const __CFArray *a3, int a4)
{
  const __CFArray *Mutable;
  CFIndex Count;
  CFIndex v10;
  const void *ValueAtIndex;
  const void *Value;
  const void *v13;
  __CFArray *v14;
  const void *v15;
  const void *v16;
  CFIndex v17;
  int v18;
  NSObject *v19;
  CFIndex v20;
  CFIndex v21;
  CFIndex i;
  const void *v23;
  _DWORD v24[2];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (a3)
  {
    Count = CFArrayGetCount(a3);
    if (Count >= 1)
    {
      v10 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a3, v10);
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), ValueAtIndex);
        if (Value)
        {
          v13 = Value;
          _SFNodeUpdateCachedChildNode((uint64_t)Value, (uint64_t)ValueAtIndex);
          v14 = Mutable;
          v15 = v13;
        }
        else
        {
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), ValueAtIndex, ValueAtIndex);
          v14 = Mutable;
          v15 = ValueAtIndex;
        }
        CFArrayAppendValue(v14, v15);
        ++v10;
      }
      while (Count != v10);
    }
    if (a4)
      goto LABEL_9;
  }
  else
  {
    Count = 0;
    if (a4)
    {
LABEL_9:
      v16 = *(const void **)(a1 + 24);
      if (v16)
        CFRelease(v16);
      *(_QWORD *)(a1 + 24) = Mutable;
      return;
    }
  }
  if (CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 48)) == 1)
  {
    v17 = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 40));
    v18 = v17;
    if (Count || v17 < 2)
    {
      if (v17 >= 2001 && (double)v17 * 0.75 > (double)Count)
      {
        CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 40));
        v19 = browser_log();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          v24[0] = 67109120;
          v24[1] = v18;
          _os_log_impl(&dword_1A2830000, v19, OS_LOG_TYPE_DEFAULT, "Compacting NetworkBrowser cache (%d)", (uint8_t *)v24, 8u);
        }
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a2, a2);
        if (a3)
        {
          v20 = CFArrayGetCount(a3);
          if (v20 >= 1)
          {
            v21 = v20;
            for (i = 0; i != v21; ++i)
            {
              v23 = CFArrayGetValueAtIndex(Mutable, i);
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v23, v23);
            }
          }
        }
      }
    }
    else
    {
      CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 40));
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a2, a2);
    }
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, Mutable);
  CFRelease(Mutable);
}

void OUTLINED_FUNCTION_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t SFNodeGetTypeID()
{
  if (SFNodeGetTypeID::once != -1)
    dispatch_once(&SFNodeGetTypeID::once, &__block_literal_global_0);
  return _kSFNodeTypeID;
}

uint64_t SFNodeCreate(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t Instance;
  uint64_t v6;
  NetworkNode *v7;

  if (SFNodeGetTypeID::once != -1)
    dispatch_once(&SFNodeGetTypeID::once, &__block_literal_global_0);
  if (!_kSFNodeTypeID)
    return 0;
  Instance = _CFRuntimeCreateInstance();
  v6 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 112) = 0;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    v7 = (NetworkNode *)operator new();
    NetworkNode::NetworkNode(v7, a2, a3);
    *(_QWORD *)(v6 + 112) = v7;
  }
  return v6;
}

void sub_1A284BE64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A85886BC](v1, 0x10E0C404FAA399ELL);
  _Unwind_Resume(a1);
}

uint64_t SFNodeCreateCopy(uint64_t a1, uint64_t a2)
{
  uint64_t Instance;
  uint64_t v4;
  NetworkNode *v5;

  if (SFNodeGetTypeID::once != -1)
    dispatch_once(&SFNodeGetTypeID::once, &__block_literal_global_0);
  if (!_kSFNodeTypeID)
    return 0;
  Instance = _CFRuntimeCreateInstance();
  v4 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 112) = 0;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a2 + 112) + 464));
    v5 = (NetworkNode *)operator new();
    NetworkNode::NetworkNode(v5, *(const __CFString **)(*(_QWORD *)(a2 + 112) + 88), *(const __CFString **)(*(_QWORD *)(a2 + 112) + 256));
    *(_QWORD *)(v4 + 112) = v5;
    NetworkNode::setServiceName(v5, *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 272));
    NetworkNode::setComputerName(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 72));
    NetworkNode::setServiceName(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 272));
    NetworkNode::setNetbiosName(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 192));
    NetworkNode::setHostName(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 136));
    NetworkNode::setSecondaryName(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 264));
    NetworkNode::setDomain(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 96));
    NetworkNode::setWorkgroup(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 296));
    NetworkNode::setPath(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 232));
    NetworkNode::setModel(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 176));
    NetworkNode::setModelIdentifier(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 184));
    NetworkNode::setIDSDeviceIdentifier(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 152));
    NetworkNode::setColor(*(NetworkNode **)(v4 + 112), *(CFArrayRef *)(*(_QWORD *)(a2 + 112) + 304));
    NetworkNode::setSiblingNodes(*(NetworkNode **)(v4 + 112), *(CFArrayRef *)(*(_QWORD *)(a2 + 112) + 320));
    NetworkNode::setIconHash(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 144));
    NetworkNode::setUserName(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 288));
    NetworkNode::setPassword(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 224));
    NetworkNode::setNickName(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 120));
    NetworkNode::setContactIdentifier(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 240));
    NetworkNode::setContactIdentifiers(*(NetworkNode **)(v4 + 112), *(CFSetRef *)(*(_QWORD *)(a2 + 112) + 248));
    NetworkNode::setFirstName(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 128));
    NetworkNode::setLastName(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 168));
    NetworkNode::setAppleID(*(NetworkNode **)(v4 + 112), *(CFTypeRef *)(*(_QWORD *)(a2 + 112) + 64));
    NetworkNode::setTransportBundleID(*(NetworkNode **)(v4 + 112), *(CFTypeRef *)(*(_QWORD *)(a2 + 112) + 216));
    NetworkNode::setHandles(*(NetworkNode **)(v4 + 112), *(CFSetRef *)(*(_QWORD *)(a2 + 112) + 352));
    NetworkNode::setEmailHash(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 104));
    NetworkNode::setPhoneHash(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 112));
    NetworkNode::setDiskType(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 80));
    NetworkNode::setParentIdentifier(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 200));
    NetworkNode::setIconData(*(NetworkNode **)(v4 + 112), *(CFDataRef *)(*(_QWORD *)(a2 + 112) + 16));
    NetworkNode::setMediaCapabilities(*(NetworkNode **)(v4 + 112), *(CFDataRef *)(*(_QWORD *)(a2 + 112) + 24));
    NetworkNode::setFlags(*(NetworkNode **)(v4 + 112), *(CFTypeRef *)(*(_QWORD *)(a2 + 112) + 32));
    NetworkNode::setRapportFlags(*(NetworkNode **)(v4 + 112), *(CFTypeRef *)(*(_QWORD *)(a2 + 112) + 40));
    NetworkNode::setAccessRights(*(NetworkNode **)(v4 + 112), *(CFTypeRef *)(*(_QWORD *)(a2 + 112) + 48));
    NetworkNode::setRangingData(*(NetworkNode **)(v4 + 112), *(CFTypeRef *)(*(_QWORD *)(a2 + 112) + 56));
    NetworkNode::setURL(*(CFURLRef **)(v4 + 112), **(CFURLRef **)(a2 + 112));
    NetworkNode::setURLs(*(NetworkNode **)(v4 + 112), *(CFDictionaryRef *)(*(_QWORD *)(a2 + 112) + 384));
    NetworkNode::setMountPoint(*(NetworkNode **)(v4 + 112), *(CFTypeRef *)(*(_QWORD *)(a2 + 112) + 8));
    NetworkNode::setConnectionState(*(_QWORD *)(v4 + 112), *(_DWORD *)(*(_QWORD *)(a2 + 112) + 456));
    NetworkNode::setPortNumber(*(_QWORD *)(v4 + 112), *(_DWORD *)(*(_QWORD *)(a2 + 112) + 424));
    NetworkNode::setSelectionReason(*(_QWORD *)(v4 + 112), *(_QWORD *)(*(_QWORD *)(a2 + 112) + 432));
    NetworkNode::setSharePointBrowserID(*(NetworkNode **)(v4 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 208));
    NetworkNode::setSupportedMedia(*(_QWORD *)(v4 + 112), *(_QWORD *)(*(_QWORD *)(a2 + 112) + 448));
    NetworkNode::setDomains(*(NetworkNode **)(v4 + 112), *(CFSetRef *)(*(_QWORD *)(a2 + 112) + 344));
    NetworkNode::setKinds(*(NetworkNode **)(v4 + 112), *(CFSetRef *)(*(_QWORD *)(a2 + 112) + 336));
    NetworkNode::setWorkgroups(*(NetworkNode **)(v4 + 112), *(CFSetRef *)(*(_QWORD *)(a2 + 112) + 360));
    NetworkNode::setBonjourProtocols(*(NetworkNode **)(v4 + 112), *(CFBagRef *)(*(_QWORD *)(a2 + 112) + 376));
    pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a2 + 112) + 464));
  }
  return v4;
}

void sub_1A284C254(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A85886BC](v1, 0x10E0C404FAA399ELL);
  _Unwind_Resume(a1);
}

uint64_t _SFNodeUpdateCachedParentNode(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a2 + 112) + 464));
  NetworkNode::setUserName(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 288));
  NetworkNode::setWorkgroups(*(NetworkNode **)(a1 + 112), *(CFSetRef *)(*(_QWORD *)(a2 + 112) + 360));
  NetworkNode::setConnectionState(*(_QWORD *)(a1 + 112), *(_DWORD *)(*(_QWORD *)(a2 + 112) + 456));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a2 + 112) + 464));
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t _SFNodeUpdateCachedChildNode(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a2 + 112) + 464));
  NetworkNode::setDisplayName(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 88));
  NetworkNode::setRealName(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 256));
  NetworkNode::setServiceName(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 272));
  NetworkNode::setComputerName(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 72));
  NetworkNode::setServiceName(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 272));
  NetworkNode::setNetbiosName(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 192));
  NetworkNode::setHostName(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 136));
  NetworkNode::setSecondaryName(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 264));
  NetworkNode::setDomain(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 96));
  NetworkNode::setWorkgroup(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 296));
  NetworkNode::setPath(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 232));
  NetworkNode::setModel(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 176));
  NetworkNode::setModelIdentifier(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 184));
  NetworkNode::setIDSDeviceIdentifier(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 152));
  NetworkNode::setColor(*(NetworkNode **)(a1 + 112), *(CFArrayRef *)(*(_QWORD *)(a2 + 112) + 304));
  NetworkNode::setSiblingNodes(*(NetworkNode **)(a1 + 112), *(CFArrayRef *)(*(_QWORD *)(a2 + 112) + 320));
  NetworkNode::setIconHash(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 144));
  NetworkNode::setPassword(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 224));
  NetworkNode::setContactIdentifier(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 240));
  NetworkNode::setContactIdentifiers(*(NetworkNode **)(a1 + 112), *(CFSetRef *)(*(_QWORD *)(a2 + 112) + 248));
  NetworkNode::setNickName(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 120));
  NetworkNode::setFirstName(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 128));
  NetworkNode::setLastName(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 168));
  NetworkNode::setAppleID(*(NetworkNode **)(a1 + 112), *(CFTypeRef *)(*(_QWORD *)(a2 + 112) + 64));
  NetworkNode::setTransportBundleID(*(NetworkNode **)(a1 + 112), *(CFTypeRef *)(*(_QWORD *)(a2 + 112) + 216));
  NetworkNode::setHandles(*(NetworkNode **)(a1 + 112), *(CFSetRef *)(*(_QWORD *)(a2 + 112) + 352));
  NetworkNode::setEmailHash(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 104));
  NetworkNode::setPhoneHash(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 112));
  NetworkNode::setDiskType(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 80));
  NetworkNode::setParentIdentifier(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 200));
  NetworkNode::setIconData(*(NetworkNode **)(a1 + 112), *(CFDataRef *)(*(_QWORD *)(a2 + 112) + 16));
  NetworkNode::setMediaCapabilities(*(NetworkNode **)(a1 + 112), *(CFDataRef *)(*(_QWORD *)(a2 + 112) + 24));
  NetworkNode::setFlags(*(NetworkNode **)(a1 + 112), *(CFTypeRef *)(*(_QWORD *)(a2 + 112) + 32));
  NetworkNode::setRapportFlags(*(NetworkNode **)(a1 + 112), *(CFTypeRef *)(*(_QWORD *)(a2 + 112) + 40));
  NetworkNode::setAccessRights(*(NetworkNode **)(a1 + 112), *(CFTypeRef *)(*(_QWORD *)(a2 + 112) + 48));
  NetworkNode::setRangingData(*(NetworkNode **)(a1 + 112), *(CFTypeRef *)(*(_QWORD *)(a2 + 112) + 56));
  NetworkNode::setURL(*(CFURLRef **)(a1 + 112), **(CFURLRef **)(a2 + 112));
  NetworkNode::setURLs(*(NetworkNode **)(a1 + 112), *(CFDictionaryRef *)(*(_QWORD *)(a2 + 112) + 384));
  NetworkNode::setMountPoint(*(NetworkNode **)(a1 + 112), *(CFTypeRef *)(*(_QWORD *)(a2 + 112) + 8));
  NetworkNode::setPortNumber(*(_QWORD *)(a1 + 112), *(_DWORD *)(*(_QWORD *)(a2 + 112) + 424));
  NetworkNode::setSelectionReason(*(_QWORD *)(a1 + 112), *(_QWORD *)(*(_QWORD *)(a2 + 112) + 432));
  NetworkNode::setSharePointBrowserID(*(NetworkNode **)(a1 + 112), *(CFStringRef *)(*(_QWORD *)(a2 + 112) + 208));
  NetworkNode::setSupportedMedia(*(_QWORD *)(a1 + 112), *(_QWORD *)(*(_QWORD *)(a2 + 112) + 448));
  NetworkNode::setDomains(*(NetworkNode **)(a1 + 112), *(CFSetRef *)(*(_QWORD *)(a2 + 112) + 344));
  NetworkNode::setKinds(*(NetworkNode **)(a1 + 112), *(CFSetRef *)(*(_QWORD *)(a2 + 112) + 336));
  NetworkNode::setBonjourProtocols(*(NetworkNode **)(a1 + 112), *(CFBagRef *)(*(_QWORD *)(a2 + 112) + 376));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a2 + 112) + 464));
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t _SFNodeCreateWithXPCObject(uint64_t a1, void *a2)
{
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  uint64_t v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  const __CFString *v27;
  const __CFString *v28;
  const __CFString *v29;
  const __CFString *v30;
  const __CFString *v31;
  const __CFString *v32;
  const __CFString *v33;
  const __CFString *v34;
  const __CFArray *v35;
  const __CFArray *v36;
  __CFSet *SetFromArray;
  __CFSet *v38;
  const __CFString *v39;
  const __CFString *v40;
  const __CFString *v41;
  const __CFString *v42;
  const __CFString *v43;
  const __CFString *v44;
  const __CFString *v45;
  const __CFString *v46;
  const __CFString *v47;
  const __CFString *v48;
  const void *v49;
  const void *v50;
  const __CFString *v51;
  const __CFString *v52;
  const __CFString *v53;
  const __CFString *v54;
  const __CFString *v55;
  const __CFString *v56;
  const __CFString *v57;
  const __CFString *v58;
  const __CFString *v59;
  const __CFString *v60;
  const void *v61;
  const void *v62;
  const __CFData *v63;
  const __CFData *v64;
  const __CFData *v65;
  const __CFData *v66;
  const void *v67;
  const void *v68;
  const void *v69;
  const void *v70;
  const void *v71;
  const void *v72;
  const void *v73;
  const void *v74;
  const __CFURL *v75;
  const __CFURL *v76;
  const void *v77;
  const void *v78;
  NSObject *v79;
  const __CFArray *v80;
  const __CFArray *v81;
  __CFSet *v82;
  __CFSet *v83;
  const __CFArray *v84;
  const __CFArray *v85;
  __CFSet *v86;
  __CFSet *v87;
  const __CFArray *v88;
  const __CFArray *v89;
  __CFSet *v90;
  __CFSet *v91;
  const __CFArray *v92;
  const __CFArray *v93;
  __CFBag *BagFromArray;
  __CFBag *v95;
  const __CFArray *v96;
  const __CFArray *v97;
  xpc_object_t value;
  __CFArray *SFNodeArrayForXPCArray;
  xpc_object_t v100;
  __CFSet *SFNodeKindsFromXPCArray;
  __CFSet *v102;
  int int64;
  int64_t v104;
  int64_t v105;
  uint64_t uint64;
  const __CFDictionary *v108;
  const __CFDictionary *v109;
  CFTypeID v110;
  NSObject *v111;

  v4 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "RealName");
  if (!v4)
    return 0;
  v5 = v4;
  v6 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "DisplayName");
  if (!v6)
  {
    CFRelease(v5);
    return 0;
  }
  v7 = v6;
  v8 = SFNodeCreate(a1, v6, v5);
  CFRelease(v7);
  CFRelease(v5);
  if (v8)
  {
    v9 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "ComputerName");
    if (v9)
    {
      v10 = v9;
      NetworkNode::setComputerName(*(NetworkNode **)(v8 + 112), v9);
      CFRelease(v10);
    }
    v11 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "ServiceName");
    if (v11)
    {
      v12 = v11;
      NetworkNode::setServiceName(*(NetworkNode **)(v8 + 112), v11);
      CFRelease(v12);
    }
    v13 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "NetbiosName");
    if (v13)
    {
      v14 = v13;
      NetworkNode::setNetbiosName(*(NetworkNode **)(v8 + 112), v13);
      CFRelease(v14);
    }
    v15 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "HostName");
    if (v15)
    {
      v16 = v15;
      NetworkNode::setHostName(*(NetworkNode **)(v8 + 112), v15);
      CFRelease(v16);
    }
    v17 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "Comment");
    if (v17)
    {
      v18 = v17;
      NetworkNode::setSecondaryName(*(NetworkNode **)(v8 + 112), v17);
      CFRelease(v18);
    }
    v19 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "Domain");
    if (v19)
    {
      v20 = v19;
      NetworkNode::setDomain(*(NetworkNode **)(v8 + 112), v19);
      CFRelease(v20);
    }
    v21 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "Workgroup");
    if (v21)
    {
      v22 = v21;
      NetworkNode::setWorkgroup(*(NetworkNode **)(v8 + 112), v21);
      CFRelease(v22);
    }
    v23 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "Path");
    if (v23)
    {
      v24 = v23;
      NetworkNode::setPath(*(NetworkNode **)(v8 + 112), v23);
      CFRelease(v24);
    }
    v25 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "Model");
    if (v25)
    {
      v26 = v25;
      NetworkNode::setModel(*(NetworkNode **)(v8 + 112), v25);
      CFRelease(v26);
    }
    v27 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "ModelIdentifier");
    if (v27)
    {
      v28 = v27;
      NetworkNode::setModelIdentifier(*(NetworkNode **)(v8 + 112), v27);
      CFRelease(v28);
    }
    v29 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "IDSDeviceIdentifier");
    if (v29)
    {
      v30 = v29;
      NetworkNode::setIDSDeviceIdentifier(*(NetworkNode **)(v8 + 112), v29);
      CFRelease(v30);
    }
    v31 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "IconHash");
    if (v31)
    {
      v32 = v31;
      NetworkNode::setIconHash(*(NetworkNode **)(v8 + 112), v31);
      CFRelease(v32);
    }
    v33 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "ContactIdentifier");
    if (v33)
    {
      v34 = v33;
      NetworkNode::setContactIdentifier(*(NetworkNode **)(v8 + 112), v33);
      CFRelease(v34);
    }
    v35 = (const __CFArray *)xpcDictionaryCopyCFArrayForKey(a2, "ContactIdentifiers");
    if (v35)
    {
      v36 = v35;
      SetFromArray = createSetFromArray(0, v35);
      if (SetFromArray)
      {
        v38 = SetFromArray;
        NetworkNode::setContactIdentifiers(*(NetworkNode **)(v8 + 112), SetFromArray);
        CFRelease(v38);
      }
      CFRelease(v36);
    }
    v39 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "UserName");
    if (v39)
    {
      v40 = v39;
      NetworkNode::setUserName(*(NetworkNode **)(v8 + 112), v39);
      CFRelease(v40);
    }
    v41 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "Password");
    if (v41)
    {
      v42 = v41;
      NetworkNode::setPassword(*(NetworkNode **)(v8 + 112), v41);
      CFRelease(v42);
    }
    v43 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "NickName");
    if (v43)
    {
      v44 = v43;
      NetworkNode::setNickName(*(NetworkNode **)(v8 + 112), v43);
      CFRelease(v44);
    }
    v45 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "FirstName");
    if (v45)
    {
      v46 = v45;
      NetworkNode::setFirstName(*(NetworkNode **)(v8 + 112), v45);
      CFRelease(v46);
    }
    v47 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "LastName");
    if (v47)
    {
      v48 = v47;
      NetworkNode::setLastName(*(NetworkNode **)(v8 + 112), v47);
      CFRelease(v48);
    }
    v49 = xpcDictionaryCopyCFStringForKey(a2, "AppleID");
    if (v49)
    {
      v50 = v49;
      NetworkNode::setAppleID(*(NetworkNode **)(v8 + 112), v49);
      CFRelease(v50);
    }
    v51 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "EmailHash");
    if (v51)
    {
      v52 = v51;
      NetworkNode::setEmailHash(*(NetworkNode **)(v8 + 112), v51);
      CFRelease(v52);
    }
    v53 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "PhoneHash");
    if (v53)
    {
      v54 = v53;
      NetworkNode::setPhoneHash(*(NetworkNode **)(v8 + 112), v53);
      CFRelease(v54);
    }
    v55 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "ParentIdentifier");
    if (v55)
    {
      v56 = v55;
      NetworkNode::setParentIdentifier(*(NetworkNode **)(v8 + 112), v55);
      CFRelease(v56);
    }
    v57 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "DiskType");
    if (v57)
    {
      v58 = v57;
      NetworkNode::setDiskType(*(NetworkNode **)(v8 + 112), v57);
      CFRelease(v58);
    }
    v59 = (const __CFString *)xpcDictionaryCopyCFStringForKey(a2, "SharePointBrowserID");
    if (v59)
    {
      v60 = v59;
      NetworkNode::setSharePointBrowserID(*(NetworkNode **)(v8 + 112), v59);
      CFRelease(v60);
    }
    v61 = xpcDictionaryCopyCFStringForKey(a2, "TransportBundleID");
    if (v61)
    {
      v62 = v61;
      NetworkNode::setTransportBundleID(*(NetworkNode **)(v8 + 112), v61);
      CFRelease(v62);
    }
    v63 = (const __CFData *)xpcDictionaryCopyCFDataForKey(a2, "IconData");
    if (v63)
    {
      v64 = v63;
      NetworkNode::setIconData(*(NetworkNode **)(v8 + 112), v63);
      CFRelease(v64);
    }
    v65 = (const __CFData *)xpcDictionaryCopyCFDataForKey(a2, "MediaCapabilities");
    if (v65)
    {
      v66 = v65;
      NetworkNode::setMediaCapabilities(*(NetworkNode **)(v8 + 112), v65);
      CFRelease(v66);
    }
    v67 = xpcDictionaryCopyCFNumberForKey(a2, "Flags");
    if (v67)
    {
      v68 = v67;
      NetworkNode::setFlags(*(NetworkNode **)(v8 + 112), v67);
      CFRelease(v68);
    }
    v69 = xpcDictionaryCopyCFNumberForKey(a2, "RapportFlags");
    if (v69)
    {
      v70 = v69;
      NetworkNode::setRapportFlags(*(NetworkNode **)(v8 + 112), v69);
      CFRelease(v70);
    }
    v71 = xpcDictionaryCopyCFNumberForKey(a2, "AccessRights");
    if (v71)
    {
      v72 = v71;
      NetworkNode::setAccessRights(*(NetworkNode **)(v8 + 112), v71);
      CFRelease(v72);
    }
    v73 = xpcDictionaryCopyCFDataForKey(a2, "RangingData");
    if (v73)
    {
      v74 = v73;
      NetworkNode::setRangingData(*(NetworkNode **)(v8 + 112), v73);
      CFRelease(v74);
    }
    v75 = (const __CFURL *)xpcDictionaryCopyCFURLForKey(a2, "URL");
    if (v75)
    {
      v76 = v75;
      NetworkNode::setURL(*(CFURLRef **)(v8 + 112), v75);
      CFRelease(v76);
    }
    v77 = xpcDictionaryCopyCFURLForKey(a2, "MountPoint");
    if (v77)
    {
      v78 = v77;
      NetworkNode::setMountPoint(*(NetworkNode **)(v8 + 112), v77);
      CFRelease(v78);
    }
    if (MEMORY[0x1A8589904](a2) == MEMORY[0x1E0C812F8])
    {
      if (xpc_dictionary_get_value(a2, "URLs"))
      {
        v108 = (const __CFDictionary *)_CFXPCCreateCFObjectFromXPCObject();
        if (v108)
        {
          v109 = v108;
          v110 = CFGetTypeID(v108);
          if (v110 == CFDictionaryGetTypeID())
          {
            NetworkNode::setURLs(*(NetworkNode **)(v8 + 112), v109);
          }
          else
          {
            v111 = framework_log();
            if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
              _SFNodeCreateWithXPCObject_cold_1();
          }
          CFRelease(v109);
        }
      }
    }
    else
    {
      v79 = framework_log();
      if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        _SFNodeCreateWithXPCObject_cold_2();
    }
    v80 = (const __CFArray *)xpcDictionaryCopyCFArrayForKey(a2, "Domains");
    if (v80)
    {
      v81 = v80;
      v82 = createSetFromArray(0, v80);
      if (v82)
      {
        v83 = v82;
        NetworkNode::setDomains(*(NetworkNode **)(v8 + 112), v82);
        CFRelease(v83);
      }
      CFRelease(v81);
    }
    v84 = (const __CFArray *)xpcDictionaryCopyCFArrayForKey(a2, "Workgroups");
    if (v84)
    {
      v85 = v84;
      v86 = createSetFromArray(0, v84);
      if (v86)
      {
        v87 = v86;
        NetworkNode::setWorkgroups(*(NetworkNode **)(v8 + 112), v86);
        CFRelease(v87);
      }
      CFRelease(v85);
    }
    v88 = (const __CFArray *)xpcDictionaryCopyCFArrayForKey(a2, "Handles");
    if (v88)
    {
      v89 = v88;
      v90 = createSetFromArray(0, v88);
      if (v90)
      {
        v91 = v90;
        NetworkNode::setHandles(*(NetworkNode **)(v8 + 112), v90);
        CFRelease(v91);
      }
      CFRelease(v89);
    }
    v92 = (const __CFArray *)xpcDictionaryCopyCFArrayForKey(a2, "BonjourProtocols");
    if (v92)
    {
      v93 = v92;
      BagFromArray = createBagFromArray(0, v92);
      if (BagFromArray)
      {
        v95 = BagFromArray;
        NetworkNode::setBonjourProtocols(*(NetworkNode **)(v8 + 112), BagFromArray);
        CFRelease(v95);
      }
      CFRelease(v93);
    }
    v96 = (const __CFArray *)xpcDictionaryCopyCFArrayForKey(a2, "Color");
    if (v96)
    {
      v97 = v96;
      NetworkNode::setColor(*(NetworkNode **)(v8 + 112), v96);
      CFRelease(v97);
    }
    value = xpc_dictionary_get_value(a2, "SiblingNodes");
    if (value)
    {
      SFNodeArrayForXPCArray = createSFNodeArrayForXPCArray(value);
      NetworkNode::setSiblingNodes(*(NetworkNode **)(v8 + 112), SFNodeArrayForXPCArray);
      CFRelease(SFNodeArrayForXPCArray);
    }
    v100 = xpc_dictionary_get_value(a2, "Kinds");
    SFNodeKindsFromXPCArray = createSFNodeKindsFromXPCArray(0, v100);
    if (SFNodeKindsFromXPCArray)
    {
      v102 = SFNodeKindsFromXPCArray;
      NetworkNode::setKinds(*(NetworkNode **)(v8 + 112), SFNodeKindsFromXPCArray);
      CFRelease(v102);
    }
    int64 = xpc_dictionary_get_int64(a2, "ConnectionState");
    NetworkNode::setConnectionState(*(_QWORD *)(v8 + 112), int64);
    v104 = xpc_dictionary_get_int64(a2, "PortNumber");
    if (v104)
      NetworkNode::setPortNumber(*(_QWORD *)(v8 + 112), v104);
    v105 = xpc_dictionary_get_int64(a2, "SelectionReason");
    NetworkNode::setSelectionReason(*(_QWORD *)(v8 + 112), v105);
    uint64 = xpc_dictionary_get_uint64(a2, "SupportedMedia");
    if (uint64)
      NetworkNode::setSupportedMedia(*(_QWORD *)(v8 + 112), uint64);
  }
  return v8;
}

const void *xpcDictionaryCopyCFStringForKey(void *a1, const char *a2)
{
  NSObject *v4;
  const void *v5;
  const void *v7;
  CFTypeID v8;
  NSObject *v9;

  if (MEMORY[0x1A8589904]() != MEMORY[0x1E0C812F8])
  {
    v4 = framework_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      xpcDictionaryCopyCFStringForKey();
    return 0;
  }
  if (!xpc_dictionary_get_value(a1, a2))
    return 0;
  v7 = (const void *)_CFXPCCreateCFObjectFromXPCObject();
  v5 = v7;
  if (v7)
  {
    v8 = CFGetTypeID(v7);
    if (v8 != CFStringGetTypeID())
    {
      v9 = framework_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        xpcDictionaryCopyCFStringForKey();
      CFRelease(v5);
      return 0;
    }
  }
  return v5;
}

const void *xpcDictionaryCopyCFArrayForKey(void *a1, const char *a2)
{
  NSObject *v4;
  const void *v5;
  const void *v7;
  CFTypeID v8;
  NSObject *v9;

  if (MEMORY[0x1A8589904]() != MEMORY[0x1E0C812F8])
  {
    v4 = framework_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      xpcDictionaryCopyCFArrayForKey();
    return 0;
  }
  if (!xpc_dictionary_get_value(a1, a2))
    return 0;
  v7 = (const void *)_CFXPCCreateCFObjectFromXPCObject();
  v5 = v7;
  if (v7)
  {
    v8 = CFGetTypeID(v7);
    if (v8 != CFArrayGetTypeID())
    {
      v9 = framework_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        xpcDictionaryCopyCFArrayForKey();
      CFRelease(v5);
      return 0;
    }
  }
  return v5;
}

const void *xpcDictionaryCopyCFDataForKey(void *a1, const char *a2)
{
  NSObject *v4;
  const void *v5;
  const void *v7;
  CFTypeID v8;
  NSObject *v9;

  if (MEMORY[0x1A8589904]() != MEMORY[0x1E0C812F8])
  {
    v4 = framework_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      xpcDictionaryCopyCFDataForKey();
    return 0;
  }
  if (!xpc_dictionary_get_value(a1, a2))
    return 0;
  v7 = (const void *)_CFXPCCreateCFObjectFromXPCObject();
  v5 = v7;
  if (v7)
  {
    v8 = CFGetTypeID(v7);
    if (v8 != CFDataGetTypeID())
    {
      v9 = framework_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        xpcDictionaryCopyCFDataForKey();
      CFRelease(v5);
      return 0;
    }
  }
  return v5;
}

const void *xpcDictionaryCopyCFNumberForKey(void *a1, const char *a2)
{
  NSObject *v4;
  const void *v5;
  const void *v7;
  CFTypeID v8;
  NSObject *v9;

  if (MEMORY[0x1A8589904]() != MEMORY[0x1E0C812F8])
  {
    v4 = framework_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      xpcDictionaryCopyCFNumberForKey();
    return 0;
  }
  if (!xpc_dictionary_get_value(a1, a2))
    return 0;
  v7 = (const void *)_CFXPCCreateCFObjectFromXPCObject();
  v5 = v7;
  if (v7)
  {
    v8 = CFGetTypeID(v7);
    if (v8 != CFNumberGetTypeID())
    {
      v9 = framework_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        xpcDictionaryCopyCFNumberForKey();
      CFRelease(v5);
      return 0;
    }
  }
  return v5;
}

const void *xpcDictionaryCopyCFURLForKey(void *a1, const char *a2)
{
  NSObject *v4;
  const void *v5;
  const void *v7;
  CFTypeID v8;
  NSObject *v9;

  if (MEMORY[0x1A8589904]() != MEMORY[0x1E0C812F8])
  {
    v4 = framework_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      xpcDictionaryCopyCFURLForKey();
    return 0;
  }
  if (!xpc_dictionary_get_value(a1, a2))
    return 0;
  v7 = (const void *)_CFXPCCreateCFObjectFromXPCObject();
  v5 = v7;
  if (v7)
  {
    v8 = CFGetTypeID(v7);
    if (v8 != CFURLGetTypeID())
    {
      v9 = framework_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        xpcDictionaryCopyCFURLForKey();
      CFRelease(v5);
      return 0;
    }
  }
  return v5;
}

__CFArray *createSFNodeArrayForXPCArray(void *a1)
{
  int64_t count;
  __CFArray *Mutable;
  size_t i;
  xpc_object_t value;
  const void *v6;
  const void *v7;

  count = xpc_array_get_count(a1);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (count >= 1)
  {
    for (i = 0; i != count; ++i)
    {
      value = xpc_array_get_value(a1, i);
      v6 = (const void *)_SFNodeCreateWithXPCObject(0, value);
      if (v6)
      {
        v7 = v6;
        CFArrayAppendValue(Mutable, v6);
        CFRelease(v7);
      }
    }
  }
  return Mutable;
}

xpc_object_t createXPCArrayForSFNodeArray(const __CFArray *a1)
{
  CFIndex Count;
  xpc_object_t v3;
  CFIndex i;
  const void *ValueAtIndex;
  void *v6;
  void *v7;

  Count = CFArrayGetCount(a1);
  v3 = xpc_array_create(0, 0);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      v6 = (void *)_SFNodeXPCObjectCreate(ValueAtIndex);
      if (v6)
      {
        v7 = v6;
        xpc_array_append_value(v3, v6);
        xpc_release(v7);
      }
    }
  }
  return v3;
}

xpc_object_t _SFNodeXPCObjectCreate(uint64_t a1)
{
  xpc_object_t v2;
  uint64_t v3;
  const __CFArray *v4;
  xpc_object_t XPCArrayForSFNodeArray;
  xpc_object_t XPCArrayFromSFNodeKinds;
  void *v7;

  v2 = xpc_dictionary_create(0, 0, 0);
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  setValueForKeyInXPCDictionary(v2, "AccessRights", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 48));
  setValueForKeyInXPCDictionary(v2, "RangingData", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 56));
  setValueForKeyInXPCDictionary(v2, "AppleID", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 64));
  setValueForKeyInXPCDictionary(v2, "BonjourProtocols", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 376));
  setValueForKeyInXPCDictionary(v2, "ComputerName", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 72));
  setValueForKeyInXPCDictionary(v2, "DiskType", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 80));
  setValueForKeyInXPCDictionary(v2, "DisplayName", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 88));
  setValueForKeyInXPCDictionary(v2, "Domain", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 96));
  setValueForKeyInXPCDictionary(v2, "Domains", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 344));
  setValueForKeyInXPCDictionary(v2, "EmailHash", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 104));
  setValueForKeyInXPCDictionary(v2, "PhoneHash", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 112));
  setValueForKeyInXPCDictionary(v2, "ContactIdentifier", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 240));
  setValueForKeyInXPCDictionary(v2, "ContactIdentifiers", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 248));
  setValueForKeyInXPCDictionary(v2, "NickName", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 120));
  setValueForKeyInXPCDictionary(v2, "FirstName", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 128));
  setValueForKeyInXPCDictionary(v2, "Flags", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 32));
  setValueForKeyInXPCDictionary(v2, "RapportFlags", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 40));
  setValueForKeyInXPCDictionary(v2, "HostName", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 136));
  setValueForKeyInXPCDictionary(v2, "IconData", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 16));
  setValueForKeyInXPCDictionary(v2, "MediaCapabilities", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 24));
  setValueForKeyInXPCDictionary(v2, "IconHash", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 144));
  setValueForKeyInXPCDictionary(v2, "LastName", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 168));
  setValueForKeyInXPCDictionary(v2, "Model", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 176));
  setValueForKeyInXPCDictionary(v2, "ModelIdentifier", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 184));
  setValueForKeyInXPCDictionary(v2, "IDSDeviceIdentifier", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 152));
  setValueForKeyInXPCDictionary(v2, "Color", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 304));
  setValueForKeyInXPCDictionary(v2, "TransportBundleID", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 216));
  setValueForKeyInXPCDictionary(v2, "Handles", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 352));
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(const __CFArray **)(v3 + 320);
  if (v4)
  {
    XPCArrayForSFNodeArray = createXPCArrayForSFNodeArray(v4);
    xpc_dictionary_set_value(v2, "SiblingNodes", XPCArrayForSFNodeArray);
    xpc_release(XPCArrayForSFNodeArray);
    v3 = *(_QWORD *)(a1 + 112);
  }
  setValueForKeyInXPCDictionary(v2, "MountPoint", *(CFTypeRef *)(v3 + 8));
  setValueForKeyInXPCDictionary(v2, "NetbiosName", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 192));
  setValueForKeyInXPCDictionary(v2, "ParentIdentifier", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 200));
  setValueForKeyInXPCDictionary(v2, "Password", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 224));
  setValueForKeyInXPCDictionary(v2, "Path", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 232));
  setValueForKeyInXPCDictionary(v2, "RealName", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 256));
  setValueForKeyInXPCDictionary(v2, "Comment", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 264));
  setValueForKeyInXPCDictionary(v2, "ServiceName", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 272));
  setValueForKeyInXPCDictionary(v2, "SharePointBrowserID", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 208));
  setValueForKeyInXPCDictionary(v2, "URL", **(CFTypeRef **)(a1 + 112));
  setValueForKeyInXPCDictionary(v2, "URLs", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 384));
  setValueForKeyInXPCDictionary(v2, "UserName", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 288));
  setValueForKeyInXPCDictionary(v2, "Workgroup", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 296));
  setValueForKeyInXPCDictionary(v2, "Workgroups", *(CFTypeRef *)(*(_QWORD *)(a1 + 112) + 360));
  xpc_dictionary_set_int64(v2, "PortNumber", *(int *)(*(_QWORD *)(a1 + 112) + 424));
  xpc_dictionary_set_int64(v2, "SelectionReason", *(_QWORD *)(*(_QWORD *)(a1 + 112) + 432));
  xpc_dictionary_set_uint64(v2, "SupportedMedia", *(_QWORD *)(*(_QWORD *)(a1 + 112) + 448));
  xpc_dictionary_set_int64(v2, "ConnectionState", *(unsigned int *)(*(_QWORD *)(a1 + 112) + 456));
  XPCArrayFromSFNodeKinds = createXPCArrayFromSFNodeKinds(*(const __CFSet **)(*(_QWORD *)(a1 + 112) + 336));
  if (XPCArrayFromSFNodeKinds)
  {
    v7 = XPCArrayFromSFNodeKinds;
    xpc_dictionary_set_value(v2, "Kinds", XPCArrayFromSFNodeKinds);
    xpc_release(v7);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return v2;
}

void setValueForKeyInXPCDictionary(void *a1, const char *a2, CFTypeRef cf)
{
  CFTypeID v6;
  CFArrayRef v7;
  CFArrayRef v8;
  __CFSet *MutableSetFromBag;
  CFArrayRef v10;
  CFArrayRef v11;

  if (cf)
  {
    v6 = CFGetTypeID(cf);
    if (v6 == CFSetGetTypeID())
    {
      v7 = copyValuesFromSet(0, (CFSetRef)cf);
      if (v7)
      {
        v8 = v7;
        setSupportedCFTypeForKeyInXPCDictionary(a1, a2, v7);
LABEL_9:
        CFRelease(v8);
      }
    }
    else if (v6 == CFBagGetTypeID())
    {
      MutableSetFromBag = createMutableSetFromBag(0, 0, (const __CFBag *)cf);
      if (MutableSetFromBag)
      {
        v8 = MutableSetFromBag;
        v10 = copyValuesFromSet(0, MutableSetFromBag);
        if (v10)
        {
          v11 = v10;
          setSupportedCFTypeForKeyInXPCDictionary(a1, a2, v10);
          CFRelease(v11);
        }
        goto LABEL_9;
      }
    }
    else
    {
      setSupportedCFTypeForKeyInXPCDictionary(a1, a2, cf);
    }
  }
}

uint64_t SFNodeResolve(uint64_t a1, const void *a2, uint64_t a3, const void *a4, const void *a5, uint64_t a6, __int128 *a7)
{
  uint64_t v10;
  void (*v11)(void);
  __int128 v12;
  __int128 v13;
  void (*v14)(void);

  v10 = NetworkNode::resolve(*(_QWORD *)(a1 + 112), a2, a3, a4, a5, (uint64_t)_SFNodeResolveCallBack, (const void *)a1);
  if (!(_DWORD)v10)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      v11 = *(void (**)(void))(a1 + 56);
      if (v11)
        v11();
    }
    *(_QWORD *)(a1 + 16) = a6;
    v12 = *a7;
    v13 = a7[1];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a7 + 4);
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)(a1 + 48) = v13;
    if (*(_QWORD *)(a1 + 40))
    {
      v14 = *(void (**)(void))(a1 + 48);
      if (v14)
        v14();
    }
  }
  return v10;
}

uint64_t _SFNodeResolveCallBack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a5 + 16);
  if (v5)
    return v5(a5, a2, a3, a4, *(_QWORD *)(a5 + 40));
  return result;
}

uint64_t SFNodeEject(uint64_t a1, const void *a2, uint64_t a3, const void *a4, const void *a5, uint64_t a6, __int128 *a7)
{
  uint64_t v10;
  void (*v11)(void);
  __int128 v12;
  __int128 v13;
  void (*v14)(void);

  v10 = NetworkNode::eject(*(_QWORD *)(a1 + 112), a2, a3, a4, a5, (uint64_t)_SFNodeEjectCallBack, (const void *)a1);
  if (!(_DWORD)v10)
  {
    if (*(_QWORD *)(a1 + 80))
    {
      v11 = *(void (**)(void))(a1 + 96);
      if (v11)
        v11();
    }
    *(_QWORD *)(a1 + 24) = a6;
    v12 = *a7;
    v13 = a7[1];
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a7 + 4);
    *(_OWORD *)(a1 + 72) = v12;
    *(_OWORD *)(a1 + 88) = v13;
    if (*(_QWORD *)(a1 + 80))
    {
      v14 = *(void (**)(void))(a1 + 88);
      if (v14)
        v14();
    }
  }
  return v10;
}

uint64_t _SFNodeEjectCallBack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a5 + 24);
  if (v5)
    return v5(a5, a2, a3, a4, *(_QWORD *)(a5 + 80));
  return result;
}

void SFNodeCancel(uint64_t a1)
{
  NetworkNode::cancel(*(NetworkNode **)(a1 + 112));
}

uint64_t SFNodeSetDisplayName(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setDisplayName(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetRealName(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setRealName(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetContactIdentifier(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setContactIdentifier(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetContactIdentifiers(uint64_t a1, const __CFSet *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setContactIdentifiers(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetMediaCapabilities(uint64_t a1, const __CFData *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setMediaCapabilities(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetModel(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setModel(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetModelIdentifier(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setModelIdentifier(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetColor(uint64_t a1, const __CFArray *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setColor(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetSiblingNodes(uint64_t a1, const __CFArray *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setSiblingNodes(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetParentIdentifier(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setParentIdentifier(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetDiskType(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setDiskType(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetServiceName(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setServiceName(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetNetbiosName(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setNetbiosName(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetSecondaryName(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setSecondaryName(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetDomain(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setDomain(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeAddDomain(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::addDomain(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeRemoveDomain(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::removeDomain(*(CFMutableSetRef **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetWorkgroup(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setWorkgroup(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetWorkgroups(uint64_t a1, const __CFSet *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setWorkgroups(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeAddWorkgroup(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::addWorkgroup(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeRemoveWorkgroup(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::removeWorkgroup(*(CFMutableSetRef **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeAddKind(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::addKind(*(CFMutableSetRef **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetKinds(uint64_t a1, const __CFSet *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setKinds(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeRemoveKind(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::removeKind(*(CFMutableSetRef **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeAddBonjourProtocol(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::addBonjourProtocol(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeRemoveBonjourProtocol(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::removeBonjourProtocol(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetBonjourProtocols(uint64_t a1, const __CFBag *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setBonjourProtocols(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetHostName(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setHostName(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetComputerName(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setComputerName(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetPortNumber(uint64_t a1, int a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setPortNumber(*(_QWORD *)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetSelectionReason(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setSelectionReason(*(_QWORD *)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetAccessRights(uint64_t a1, const void *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setAccessRights(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetRangingData(uint64_t a1, const void *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setRangingData(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetPath(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setPath(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetURL(uint64_t a1, const __CFURL *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setURL(*(CFURLRef **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetUserName(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setUserName(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetPassword(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setPassword(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetFlags(uint64_t a1, const void *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setFlags(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetRapportFlags(uint64_t a1, const void *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setRapportFlags(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetAppleID(uint64_t a1, const void *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setAppleID(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetTransportBundleID(uint64_t a1, const void *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setTransportBundleID(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetHandles(uint64_t a1, const __CFSet *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setHandles(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetSupportedMedia(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setSupportedMedia(*(_QWORD *)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetConnectionState(uint64_t a1, int a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setConnectionState(*(_QWORD *)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetMountPoint(uint64_t a1, const void *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setMountPoint(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetSharePointBrowserID(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setSharePointBrowserID(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetIconData(uint64_t a1, const __CFData *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setIconData(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetIconHash(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setIconHash(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetEmailHash(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setEmailHash(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetPhoneHash(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setPhoneHash(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetNickName(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setNickName(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetFirstName(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setFirstName(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetLastName(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setLastName(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeSetIDSDeviceIdentifier(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  NetworkNode::setIDSDeviceIdentifier(*(NetworkNode **)(a1 + 112), a2);
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
}

uint64_t SFNodeIsRoot(uint64_t a1)
{
  uint64_t isRoot;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  isRoot = NetworkNode::isRoot(*(CFSetRef **)(a1 + 112));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return isRoot;
}

BOOL SFNodeIsNeighborhood(uint64_t a1)
{
  _BOOL8 isNeighborhood;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  isNeighborhood = NetworkNode::isNeighborhood(*(CFSetRef **)(a1 + 112));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return isNeighborhood;
}

BOOL SFNodeIsServer(uint64_t a1)
{
  _BOOL8 isServer;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  isServer = NetworkNode::isServer(*(CFSetRef **)(a1 + 112));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return isServer;
}

BOOL SFNodeIsSharePoint(uint64_t a1)
{
  _BOOL8 isSharePoint;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  isSharePoint = NetworkNode::isSharePoint(*(CFSetRef **)(a1 + 112));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return isSharePoint;
}

BOOL SFNodeIsContainer(uint64_t a1)
{
  _BOOL8 isContainer;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  isContainer = NetworkNode::isContainer(*(CFSetRef **)(a1 + 112));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return isContainer;
}

BOOL SFNodeIsMounted(uint64_t a1)
{
  _BOOL8 isMounted;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  isMounted = NetworkNode::isMounted(*(NetworkNode **)(a1 + 112));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return isMounted;
}

const __CFNumber *SFNodeIsDropBox(uint64_t a1)
{
  const __CFNumber *v2;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  v2 = NetworkNode::isDropBox(*(NetworkNode **)(a1 + 112));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return v2;
}

uint64_t SFNodeIsRemovable(uint64_t a1)
{
  uint64_t isRemovable;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  isRemovable = NetworkNode::isRemovable(*(CFSetRef **)(a1 + 112));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return isRemovable;
}

uint64_t SFNodeIsAutoFS()
{
  return 0;
}

CFIndex SFNodeSupportsFileSharing(uint64_t a1)
{
  CFIndex v2;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  v2 = NetworkNode::supportsFileSharing(*(CFSetRef **)(a1 + 112));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return v2;
}

uint64_t SFNodeSupportsScreenSharing(uint64_t a1)
{
  uint64_t v2;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  v2 = NetworkNode::supportsScreenSharing(*(CFSetRef **)(a1 + 112));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return v2;
}

const __CFNumber *SFNodeSupportsAskToUse(uint64_t a1)
{
  const __CFNumber *v2;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  v2 = NetworkNode::supportsAskToUse(*(NetworkNode **)(a1 + 112));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return v2;
}

const __CFNumber *SFNodeSupportsPasses(uint64_t a1)
{
  const __CFNumber *v2;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  v2 = NetworkNode::supportsPasses(*(NetworkNode **)(a1 + 112));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return v2;
}

BOOL SFNodeSupportsFMF(uint64_t a1)
{
  _BOOL8 v2;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  v2 = NetworkNode::supportsFMF(*(NetworkNode **)(a1 + 112));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return v2;
}

const __CFNumber *SFNodeSupportsUWB(uint64_t a1)
{
  const __CFNumber *v2;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  v2 = NetworkNode::supportsUWB(*(NetworkNode **)(a1 + 112));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return v2;
}

BOOL SFNodeSupportsIris(uint64_t a1)
{
  _BOOL8 v2;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  v2 = NetworkNode::supportsIris(*(NetworkNode **)(a1 + 112));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return v2;
}

const __CFNumber *SFNodeSupportsMixedTypes(uint64_t a1)
{
  const __CFNumber *v2;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  v2 = NetworkNode::supportsMixedTypes(*(NetworkNode **)(a1 + 112));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return v2;
}

const __CFNumber *SFNodeSupportsCredentials(uint64_t a1)
{
  const __CFNumber *v2;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  v2 = NetworkNode::supportsCredentials(*(NetworkNode **)(a1 + 112));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return v2;
}

BOOL SFNodeCanAcceptDrop(uint64_t a1)
{
  _BOOL8 canAcceptDrop;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  canAcceptDrop = NetworkNode::canAcceptDrop(*(NetworkNode **)(a1 + 112));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return canAcceptDrop;
}

uint64_t SFNodeGetConnectionState(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(unsigned int *)(v2 + 456);
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 464));
  return v3;
}

uint64_t SFNodeGetDisplayName(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(v2 + 88);
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 464));
  return v3;
}

uint64_t SFNodeGetPriority(uint64_t a1)
{
  uint64_t Priority;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  Priority = NetworkNode::getPriority(*(NetworkNode **)(a1 + 112));
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  return Priority;
}

uint64_t SFNodeGetPortNumber(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(unsigned int *)(v2 + 424);
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 464));
  return v3;
}

uint64_t SFNodeGetSelectionReason(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(v2 + 432);
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 464));
  return v3;
}

uint64_t SFNodeGetSupportedMedia(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 112) + 464));
  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(v2 + 448);
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 464));
  return v3;
}

const void *SFNodeCopyURLForProtocol(uint64_t a1, const __CFString *a2)
{
  return NetworkNode::copyURLForProtocol(*(NetworkNode **)(a1 + 112), a2);
}

CFStringRef SFNodeCopyDisplayName(uint64_t a1)
{
  return NetworkNode::copyDisplayName(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyKindString(uint64_t a1)
{
  return NetworkNode::copyKindString(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyDiskType(uint64_t a1)
{
  return NetworkNode::copyDiskType(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyTypeIdentifier(uint64_t a1)
{
  return NetworkNode::copyTypeIdentifier(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyParentIdentifier(uint64_t a1)
{
  return NetworkNode::copyParentIdentifier(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyPassword(uint64_t a1)
{
  return NetworkNode::copyPassword(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyModel(uint64_t a1)
{
  return NetworkNode::copyModel(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyModelIdentifier(uint64_t a1)
{
  return NetworkNode::copyModelIdentifier(*(NetworkNode **)(a1 + 112));
}

CFArrayRef SFNodeCopyColor(uint64_t a1)
{
  return NetworkNode::copyColor(*(NetworkNode **)(a1 + 112));
}

CFArrayRef SFNodeCopySiblingNodes(uint64_t a1)
{
  return NetworkNode::copySiblingNodes(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyContactIdentifier(uint64_t a1)
{
  return NetworkNode::copyContactIdentifier(*(NetworkNode **)(a1 + 112));
}

CFSetRef SFNodeCopyContactIdentifiers(uint64_t a1)
{
  return NetworkNode::copyContactIdentifiers(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyRealName(uint64_t a1)
{
  return NetworkNode::copyRealName(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyServiceName(uint64_t a1)
{
  return NetworkNode::copyServiceName(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyNetbiosName(uint64_t a1)
{
  return NetworkNode::copyNetbiosName(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopySecondaryName(uint64_t a1)
{
  return NetworkNode::copySecondaryName(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyDomain(uint64_t a1)
{
  return NetworkNode::copyDomain(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyWorkgroup(uint64_t a1)
{
  return NetworkNode::copyWorkgroup(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyHostName(uint64_t a1)
{
  return NetworkNode::copyHostName(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyComputerName(uint64_t a1)
{
  return NetworkNode::copyComputerName(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyUserName(uint64_t a1)
{
  return NetworkNode::copyUserName(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyEmailHash(uint64_t a1)
{
  return NetworkNode::copyEmailHash(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyPhoneHash(uint64_t a1)
{
  return NetworkNode::copyPhoneHash(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyIconHash(uint64_t a1)
{
  return NetworkNode::copyIconHash(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyNickName(uint64_t a1)
{
  return NetworkNode::copyNickName(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyFirstName(uint64_t a1)
{
  return NetworkNode::copyFirstName(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyLastName(uint64_t a1)
{
  return NetworkNode::copyLastName(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyPath(uint64_t a1)
{
  return NetworkNode::copyPath(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyAppleID(uint64_t a1)
{
  return NetworkNode::copyAppleID(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyTransportBundleID(uint64_t a1)
{
  return NetworkNode::copyTransportBundleID(*(NetworkNode **)(a1 + 112));
}

CFSetRef SFNodeCopyHandles(uint64_t a1)
{
  return NetworkNode::copyHandles(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopySharePointBrowserID(uint64_t a1)
{
  return NetworkNode::copySharePointBrowserID(*(NetworkNode **)(a1 + 112));
}

CFSetRef SFNodeCopyDomains(uint64_t a1)
{
  return NetworkNode::copyDomains(*(NetworkNode **)(a1 + 112));
}

CFSetRef SFNodeCopyWorkgroups(uint64_t a1)
{
  return NetworkNode::copyWorkgroups(*(NetworkNode **)(a1 + 112));
}

CFSetRef SFNodeCopyKinds(uint64_t a1)
{
  return NetworkNode::copyKinds(*(NetworkNode **)(a1 + 112));
}

CFBagRef SFNodeCopyBonjourProtocols(uint64_t a1)
{
  return NetworkNode::copyBonjourProtocols(*(NetworkNode **)(a1 + 112));
}

CFTypeRef SFNodeCopyFlags(uint64_t a1)
{
  return NetworkNode::copyFlags(*(NetworkNode **)(a1 + 112));
}

CFTypeRef SFNodeCopyRapportFlags(uint64_t a1)
{
  return NetworkNode::copyRapportFlags(*(NetworkNode **)(a1 + 112));
}

CFTypeRef SFNodeCopyAccessRights(uint64_t a1)
{
  return NetworkNode::copyAccessRights(*(NetworkNode **)(a1 + 112));
}

CFTypeRef SFNodeCopyRangingData(uint64_t a1)
{
  return NetworkNode::copyRangingData(*(NetworkNode **)(a1 + 112));
}

CFArrayRef SFNodeCopyProtocols(uint64_t a1)
{
  return NetworkNode::copyProtocols(*(CFSetRef **)(a1 + 112));
}

void *SFNodeCopyURL(uint64_t a1)
{
  return NetworkNode::copyURL(*(NetworkNode **)(a1 + 112));
}

CFDictionaryRef SFNodeCopyURLs(uint64_t a1)
{
  return NetworkNode::copyURLs(*(NetworkNode **)(a1 + 112));
}

CFTypeRef SFNodeCopyMountPoint(uint64_t a1)
{
  return NetworkNode::copyMountPoint(*(NetworkNode **)(a1 + 112));
}

uint64_t SFNodeGetIconData(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 112) + 16);
}

CFDataRef SFNodeCopyIconData(uint64_t a1)
{
  return NetworkNode::copyIconData(*(NetworkNode **)(a1 + 112));
}

CFDataRef SFNodeCopyMediaCapabilities(uint64_t a1)
{
  return NetworkNode::copyMediaCapabilities(*(NetworkNode **)(a1 + 112));
}

CFStringRef SFNodeCopyIDSDeviceIdentifier(uint64_t a1)
{
  return NetworkNode::copyIDSDeviceIdentifier(*(NetworkNode **)(a1 + 112));
}

NetworkNode *_SFNodeFinalize(__SFNode *a1)
{
  void (*v2)(void);
  void (*v3)(void);
  NetworkNode *result;

  pthread_mutex_lock((pthread_mutex_t *)(*((_QWORD *)a1 + 14) + 464));
  if (*((_QWORD *)a1 + 5))
  {
    v2 = (void (*)(void))*((_QWORD *)a1 + 7);
    if (v2)
      v2();
  }
  if (*((_QWORD *)a1 + 10))
  {
    v3 = (void (*)(void))*((_QWORD *)a1 + 12);
    if (v3)
      v3();
  }
  pthread_mutex_unlock((pthread_mutex_t *)(*((_QWORD *)a1 + 14) + 464));
  result = (NetworkNode *)*((_QWORD *)a1 + 14);
  if (result)
  {
    NetworkNode::~NetworkNode(result);
    JUMPOUT(0x1A85886BCLL);
  }
  return result;
}

uint64_t _SFNodeEqual(__SFNode *a1, __SFNode *a2)
{
  const __CFSet *v4;
  const __CFSet *v5;
  int v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  const void *v13;
  const void *v14;
  BOOL v15;
  const __CFSet *v16;
  const __CFSet *v17;

  pthread_mutex_lock((pthread_mutex_t *)(*((_QWORD *)a1 + 14) + 464));
  pthread_mutex_lock((pthread_mutex_t *)(*((_QWORD *)a2 + 14) + 464));
  if (!CFEqual(*(CFTypeRef *)(*((_QWORD *)a1 + 14) + 256), *(CFTypeRef *)(*((_QWORD *)a2 + 14) + 256)))
    goto LABEL_28;
  v4 = *(const __CFSet **)(*((_QWORD *)a1 + 14) + 336);
  v5 = *(const __CFSet **)(*((_QWORD *)a2 + 14) + 336);
  v6 = CFSetContainsValue(v4, CFSTR("Bonjour"));
  v7 = CFSetContainsValue(v5, CFSTR("Bonjour"));
  if (v6)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8
    || !CFEqual(*(CFTypeRef *)(*((_QWORD *)a1 + 14) + 272), *(CFTypeRef *)(*((_QWORD *)a2 + 14) + 272))
    || (v9 = CFEqual(*(CFTypeRef *)(*((_QWORD *)a1 + 14) + 96), *(CFTypeRef *)(*((_QWORD *)a2 + 14) + 96)),
        !(_DWORD)v9))
  {
    v10 = CFSetContainsValue(v4, CFSTR("Windows"));
    v11 = CFSetContainsValue(v5, CFSTR("Windows"));
    v12 = !v10 || v11 == 0;
    if (v12
      || !CFEqual(*(CFTypeRef *)(*((_QWORD *)a1 + 14) + 192), *(CFTypeRef *)(*((_QWORD *)a2 + 14) + 192))
      || (v9 = CFEqual(*(CFTypeRef *)(*((_QWORD *)a1 + 14) + 296), *(CFTypeRef *)(*((_QWORD *)a2 + 14) + 296)),
          !(_DWORD)v9))
    {
      if (CFSetContainsValue(v4, CFSTR("All")) && CFSetContainsValue(v5, CFSTR("All"))
        || CFSetContainsValue(v4, CFSTR("Root")) && CFSetContainsValue(v5, CFSTR("Root"))
        || CFSetContainsValue(v4, CFSTR("Domain")) && CFSetContainsValue(v5, CFSTR("Domain"))
        || CFSetContainsValue(v4, CFSTR("Workgroup")) && CFSetContainsValue(v5, CFSTR("Workgroup"))
        || CFSetContainsValue(v4, CFSTR("Classroom")) && CFSetContainsValue(v5, CFSTR("Classroom"))
        || CFSetContainsValue(v4, CFSTR("Suggestion")) && CFSetContainsValue(v5, CFSTR("Suggestion"))
        || CFSetContainsValue(v4, CFSTR("Rapport")) && CFSetContainsValue(v5, CFSTR("Rapport")))
      {
        goto LABEL_41;
      }
LABEL_28:
      v13 = (const void *)**((_QWORD **)a1 + 14);
      v14 = (const void *)**((_QWORD **)a2 + 14);
      if (v13)
        v15 = v14 == 0;
      else
        v15 = 1;
      if (!v15 && CFEqual(v13, v14))
      {
        v16 = *(const __CFSet **)(*((_QWORD *)a1 + 14) + 336);
        v17 = *(const __CFSet **)(*((_QWORD *)a2 + 14) + 336);
        if (CFSetContainsValue(v16, CFSTR("Connected")) && CFSetContainsValue(v17, CFSTR("Connected"))
          || CFSetContainsValue(v16, CFSTR("Managed")) && CFSetContainsValue(v17, CFSTR("Managed"))
          || CFSetContainsValue(v16, CFSTR("Printer")) && CFSetContainsValue(v17, CFSTR("Printer"))
          || CFSetContainsValue(v16, CFSTR("Recent")) && CFSetContainsValue(v17, CFSTR("Recent")))
        {
LABEL_41:
          v9 = 1;
          goto LABEL_45;
        }
        if (CFSetContainsValue(v16, CFSTR("Volume")))
        {
          v9 = CFSetContainsValue(v17, CFSTR("Volume")) != 0;
          goto LABEL_45;
        }
      }
      v9 = 0;
    }
  }
LABEL_45:
  pthread_mutex_unlock((pthread_mutex_t *)(*((_QWORD *)a2 + 14) + 464));
  pthread_mutex_unlock((pthread_mutex_t *)(*((_QWORD *)a1 + 14) + 464));
  return v9;
}

CFHashCode _SFNodeHash(__SFNode *a1)
{
  uint64_t v2;
  const __CFSet *v3;
  CFStringRef v4;
  const __CFAllocator *v5;
  CFStringRef v6;
  CFStringRef v7;
  CFHashCode v8;
  const __CFString *v10;
  const __CFURL *v11;
  CFStringRef v12;
  const __CFString *v13;

  pthread_mutex_lock((pthread_mutex_t *)(*((_QWORD *)a1 + 14) + 464));
  v2 = *((_QWORD *)a1 + 14);
  v3 = *(const __CFSet **)(v2 + 336);
  v4 = *(CFStringRef *)(v2 + 256);
  v5 = CFGetAllocator(a1);
  if (CFSetContainsValue(v3, CFSTR("Bonjour")))
  {
    v12 = *(CFStringRef *)(*((_QWORD *)a1 + 14) + 272);
    v13 = CFSTR("Bonjour");
LABEL_3:
    v6 = CFStringCreateWithFormat(v5, 0, CFSTR("%@%@"), v12, v13);
    goto LABEL_6;
  }
  if (CFSetContainsValue(v3, CFSTR("Windows")))
  {
    v6 = CFStringCreateWithFormat(v5, 0, CFSTR("%@%@%@"), *(_QWORD *)(*((_QWORD *)a1 + 14) + 192), *(_QWORD *)(*((_QWORD *)a1 + 14) + 296), CFSTR("Windows"));
  }
  else
  {
    v10 = CFSTR("Root");
    if (CFSetContainsValue(v3, CFSTR("Root"))
      || (v10 = CFSTR("Domain"), CFSetContainsValue(v3, CFSTR("Domain")))
      || (v10 = CFSTR("Workgroup"), CFSetContainsValue(v3, CFSTR("Workgroup"))))
    {
      v12 = v4;
      v13 = v10;
      goto LABEL_3;
    }
    v11 = (const __CFURL *)**((_QWORD **)a1 + 14);
    if (v11)
      v4 = CFURLGetString(v11);
    v6 = CFStringCreateWithFormat(v5, 0, CFSTR("%@"), v4);
  }
LABEL_6:
  v7 = v6;
  if (v6)
  {
    v8 = CFHash(v6);
    CFRelease(v7);
  }
  else
  {
    v8 = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(*((_QWORD *)a1 + 14) + 464));
  return v8;
}

CFStringRef _SFNodeCopyDebugDesc(__SFNode *a1)
{
  const __CFURL **v2;
  const __CFURL *v3;
  const __CFSet *v4;
  _BOOL4 isMounted;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFURL *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  const char *v17;
  CFStringRef v18;
  const char *v19;
  CFStringRef v20;
  const char *v21;
  CFStringRef v23;
  CFStringRef v24;
  uint64_t v25;
  CFMutableStringRef cf;

  pthread_mutex_lock((pthread_mutex_t *)(*((_QWORD *)a1 + 14) + 464));
  v2 = (const __CFURL **)*((_QWORD *)a1 + 14);
  v3 = *v2;
  v4 = v2[42];
  isMounted = NetworkNode::isMounted((NetworkNode *)v2);
  v6 = (_QWORD *)*((_QWORD *)a1 + 14);
  v7 = v6[12];
  v8 = v6[32];
  v9 = v6[33];
  v10 = (const __CFURL *)v6[1];
  if (v10)
  {
    v23 = CFURLGetString(v10);
    v6 = (_QWORD *)*((_QWORD *)a1 + 14);
  }
  else
  {
    v23 = 0;
  }
  v11 = v6[37];
  v25 = v6[11];
  if (v3)
    v24 = CFURLGetString(v3);
  else
    v24 = 0;
  v12 = CFSetContainsValue(v4, CFSTR("Person"));
  v13 = CFSetContainsValue(v4, CFSTR("Bonjour"));
  v14 = v13;
  if (v12)
  {
    v15 = CFSetContainsValue(v4, CFSTR("Rapport"));
    v16 = "Rapport";
    if (!v15)
      v16 = "?";
    if (v14)
      v17 = "Bonjour";
    else
      v17 = v16;
    cf = CFStringCreateMutable(0, 0);
    CFAppendPrintF();
    v18 = CFStringCreateWithFormat(0, 0, CFSTR("<SFNode {%@,id=%@,dev=%@,t=%s,sib=%@}>"), v25, v8, v9, v17, cf);
    CFRelease(cf);
  }
  else
  {
    if (v13)
    {
      v19 = "YES";
      if (!isMounted)
        v19 = "NO";
      v20 = CFStringCreateWithFormat(0, 0, CFSTR("<SFNode %p>{%@, domain = %@, mounted = %s}"), a1, v25, v7, v19);
    }
    else if (CFSetContainsValue(v4, CFSTR("Windows")))
    {
      v21 = "YES";
      if (!isMounted)
        v21 = "NO";
      v20 = CFStringCreateWithFormat(0, 0, CFSTR("<SFNode %p>{%@, workgroup = %@, comment = %@, mounted = %s}"), a1, v25, v11, v9, v21);
    }
    else if (CFSetContainsValue(v4, CFSTR("Domain")))
    {
      v20 = CFStringCreateWithFormat(0, 0, CFSTR("<SFNode %p>{domain = %@}"), a1, v8);
    }
    else if (CFSetContainsValue(v4, CFSTR("Workgroup")))
    {
      v20 = CFStringCreateWithFormat(0, 0, CFSTR("<SFNode %p>{workgroup = %@}"), a1, v25);
    }
    else if (CFSetContainsValue(v4, CFSTR("Volume")))
    {
      v20 = CFStringCreateWithFormat(0, 0, CFSTR("<SFNode %p>{volume = %@, url = %@, mount = %@}"), a1, v25, v24, v23);
    }
    else if (CFSetContainsValue(v4, CFSTR("Connected")))
    {
      v20 = CFStringCreateWithFormat(0, 0, CFSTR("<SFNode %p>{connected = %@, url = %@, mount = %@}"), a1, v25, v24, v23);
    }
    else if (CFSetContainsValue(v4, CFSTR("Printer")))
    {
      v20 = CFStringCreateWithFormat(0, 0, CFSTR("<SFNode %p>{printer = %@, url = %@}"), a1, v25, v24);
    }
    else if (CFSetContainsValue(v4, CFSTR("Recent")))
    {
      v20 = CFStringCreateWithFormat(0, 0, CFSTR("<SFNode %p>{recent = %@, url = %@}"), a1, v25, v24);
    }
    else if (CFSetContainsValue(v4, CFSTR("Managed")))
    {
      v20 = CFStringCreateWithFormat(0, 0, CFSTR("<SFNode %p>{managed = %@, url = %@}"), a1, v25, v24);
    }
    else
    {
      v20 = CFStringCreateWithFormat(0, 0, CFSTR("<SFNode %p>{unknown = %@}"), a1, v25);
    }
    v18 = v20;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(*((_QWORD *)a1 + 14) + 464));
  return v18;
}

void setSupportedCFTypeForKeyInXPCDictionary(void *a1, const char *a2, const void *a3)
{
  void *v5;
  void *v6;

  v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (v5)
  {
    v6 = v5;
    xpc_dictionary_set_value(a1, a2, v5);
    xpc_release(v6);
  }
}

void sub_1A284FD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A28504D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCKContainerIDClass_block_invoke(uint64_t a1)
{
  Class result;

  CloudKitLibrary();
  result = objc_getClass("CKContainerID");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCKContainerIDClass_block_invoke_cold_1();
  getCKContainerIDClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void CloudKitLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!CloudKitLibraryCore_frameworkLibrary)
  {
    v1 = xmmword_1E482D6A0;
    v2 = 0;
    CloudKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CloudKitLibraryCore_frameworkLibrary)
    CloudKitLibrary_cold_1(&v0);
}

Class __getCKShareClass_block_invoke(uint64_t a1)
{
  Class result;

  CloudKitLibrary();
  result = objc_getClass("CKShare");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCKShareClass_block_invoke_cold_1();
  getCKShareClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getCKContainerSetupInfoClass_block_invoke(uint64_t a1)
{
  Class result;

  CloudKitLibrary();
  result = objc_getClass("CKContainerSetupInfo");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCKContainerSetupInfoClass_block_invoke_cold_1();
  getCKContainerSetupInfoClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t SFOperationGetTypeID()
{
  if (SFOperationGetTypeID_once != -1)
    dispatch_once(&SFOperationGetTypeID_once, &__block_literal_global_1);
  return _kSFOperationTypeID;
}

_QWORD *SFOperationCreate(const __CFAllocator *a1, const void *a2)
{
  NSObject *v4;

  v4 = framework_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    SFOperationCreate_cold_1();
  return _SFOperationCreateInternal(a1, a2, 0);
}

_QWORD *_SFOperationCreateInternal(const __CFAllocator *a1, const void *a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t Instance;
  _QWORD *v8;
  _xpc_connection_s *Connection;

  v6 = framework_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    _SFOperationCreateInternal_cold_1();
  if (SFOperationGetTypeID_once != -1)
    dispatch_once(&SFOperationGetTypeID_once, &__block_literal_global_1);
  if (!_kSFOperationTypeID)
    return 0;
  Instance = _CFRuntimeCreateInstance();
  v8 = (_QWORD *)Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 160) = 0u;
    *(_OWORD *)(Instance + 176) = 0u;
    *(_OWORD *)(Instance + 128) = 0u;
    *(_OWORD *)(Instance + 144) = 0u;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 112) = 0u;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    pthread_mutex_init((pthread_mutex_t *)(Instance + 64), 0);
    v8[6] = CFRetain(a2);
    v8[4] = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (a3)
      Connection = _SFOperationCreateConnection(v8, a3);
    else
      Connection = 0;
    v8[23] = Connection;
  }
  return v8;
}

uint64_t SFOperationSetClient(uint64_t a1, uint64_t a2, __int128 *a3)
{
  NSObject *v6;
  void (*v7)(void);
  __int128 v8;
  __int128 v9;
  uint64_t (*v10)(void);
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  __int128 *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = framework_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v12 = 138412802;
    v13 = a1;
    v14 = 2048;
    v15 = a2;
    v16 = 2048;
    v17 = a3;
    _os_log_debug_impl(&dword_1A2830000, v6, OS_LOG_TYPE_DEBUG, "SFOperationSetClient (%@, callback = %p, context = %p)", (uint8_t *)&v12, 0x20u);
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 64));
  if (*(_QWORD *)(a1 + 144))
  {
    v7 = *(void (**)(void))(a1 + 160);
    if (v7)
      v7();
  }
  *(_QWORD *)(a1 + 128) = a2;
  v8 = *a3;
  v9 = a3[1];
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(a1 + 136) = v8;
  *(_OWORD *)(a1 + 152) = v9;
  if (*(_QWORD *)(a1 + 144))
  {
    v10 = *(uint64_t (**)(void))(a1 + 152);
    if (v10)
      *(_QWORD *)(a1 + 144) = v10();
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 64));
}

uint64_t SFOperationSetDispatchQueue(uint64_t a1, NSObject *a2)
{
  NSObject *v4;
  NSObject *v5;

  v4 = framework_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    SFOperationSetDispatchQueue_cold_1();
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 64));
  v5 = *(NSObject **)(a1 + 56);
  if (v5 != a2)
  {
    if (v5)
      dispatch_release(v5);
    if (a2)
      dispatch_retain(a2);
    *(_QWORD *)(a1 + 56) = a2;
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 64));
}

uint64_t SFOperationSetProperty(pthread_mutex_t *a1, const void *a2, const void *a3)
{
  NSObject *v6;
  int v8;
  pthread_mutex_t *v9;
  __int16 v10;
  const void *v11;
  __int16 v12;
  const void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = framework_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v8 = 138412802;
    v9 = a1;
    v10 = 2112;
    v11 = a2;
    v12 = 2112;
    v13 = a3;
    _os_log_debug_impl(&dword_1A2830000, v6, OS_LOG_TYPE_DEBUG, "SFOperationSetProperty (%@, name = %@, value = %@)", (uint8_t *)&v8, 0x20u);
  }
  pthread_mutex_lock(a1 + 1);
  _SFOperationSetProperty((uint64_t)a1, a2, a3);
  return pthread_mutex_unlock(a1 + 1);
}

uint64_t _SFOperationSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  NSObject *v6;
  xpc_object_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  __CFData *ImageDataWithSize;
  __CFDictionary *Mutable;
  const __CFAllocator *v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex i;
  const __CFURL *ValueAtIndex;
  const __CFAllocator *v19;
  os_activity_scope_state_s v20;

  setOrRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, a3);
  if (*(_QWORD *)(a1 + 184))
  {
    v6 = _os_activity_create(&dword_1A2830000, "Sharing/SFOperation/setProperty", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
    v20.opaque[0] = 0;
    v20.opaque[1] = 0;
    os_activity_scope_enter(v6, &v20);
    os_release(v6);
    v7 = xpc_dictionary_create(0, 0, 0);
    v8 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    xpc_dictionary_set_value(v7, "Name", v8);
    if (a3)
    {
      if (CFEqual(a2, CFSTR("Node")))
      {
        v9 = (uint64_t)_SFNodeXPCObjectCreate((uint64_t)a3);
        goto LABEL_5;
      }
      if (CFEqual(a2, CFSTR("FileIcon")) || CFEqual(a2, CFSTR("SmallFileIcon")))
      {
        ImageDataWithSize = createImageDataWithSize((uint64_t)a3, 0x20000);
        if (!ImageDataWithSize)
          goto LABEL_13;
        Mutable = ImageDataWithSize;
      }
      else if (CFEqual(a2, CFSTR("Items")))
      {
        v14 = CFGetAllocator((CFTypeRef)a1);
        Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(Mutable, CFSTR("Items"), a3);
        Count = CFArrayGetCount((CFArrayRef)a3);
        if (Count >= 1)
        {
          v16 = Count;
          for (i = 0; i != v16; ++i)
          {
            ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex((CFArrayRef)a3, i);
            if (_CFURLIsFileURL())
              _SFOperationAddSandboxExtensionForFileURL(ValueAtIndex, Mutable);
          }
        }
      }
      else
      {
        if (!CFEqual(a2, CFSTR("DestinationURL")))
        {
          v9 = _CFXPCCreateXPCObjectFromCFObject();
LABEL_5:
          v10 = (void *)v9;
          if (!v9)
            goto LABEL_13;
          goto LABEL_12;
        }
        v19 = CFGetAllocator((CFTypeRef)a1);
        Mutable = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(Mutable, CFSTR("DestinationURL"), a3);
        _SFOperationAddSandboxExtensionForFileURL((const __CFURL *)a3, Mutable);
      }
      v10 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      CFRelease(Mutable);
      if (v10)
      {
LABEL_12:
        xpc_dictionary_set_value(v7, "Value", v10);
        xpc_release(v10);
      }
    }
LABEL_13:
    xpc_dictionary_set_string(v7, "Object", "Operation");
    xpc_dictionary_set_string(v7, "Function", "SetProperty");
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 184), v7);
    xpc_release(v8);
    xpc_release(v7);
    os_activity_scope_leave(&v20);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 64));
}

const void *SFOperationCopyProperty(uint64_t a1, const void *a2)
{
  NSObject *v4;
  const void *Value;

  v4 = framework_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    SFOperationCopyProperty_cold_1();
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 64));
  if (!CFEqual(a2, CFSTR("Kind")))
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2);
    if (!Value)
      goto LABEL_6;
    goto LABEL_5;
  }
  Value = *(const void **)(a1 + 48);
  if (Value)
LABEL_5:
    CFRetain(Value);
LABEL_6:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 64));
  return Value;
}

uint64_t SFOperationResume(uint64_t a1)
{
  NSObject *v2;
  const __CFAllocator *v3;
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const void *ValueAtIndex;
  const void *Value;
  NSObject *v11;
  xpc_object_t v12;
  __CFRunLoop *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFAllocator *v16;
  CFAbsoluteTime Current;
  __CFRunLoopTimer *v18;
  os_activity_scope_state_s v20;
  CFRunLoopTimerContext context;

  v2 = framework_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    SFOperationResume_cold_1();
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 64));
  if (*(_QWORD *)(a1 + 184))
    goto LABEL_10;
  *(_QWORD *)(a1 + 184) = _SFOperationCreateConnection(a1, 0);
  v3 = CFGetAllocator((CFTypeRef)a1);
  v4 = copyKeysFromDictionary(v3, *(CFDictionaryRef *)(a1 + 32));
  if (v4)
  {
    v5 = v4;
    Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      v7 = Count;
      for (i = 0; i != v7; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), ValueAtIndex);
        _SFOperationSetProperty(a1, ValueAtIndex, Value);
      }
    }
    CFRelease(v5);
  }
  if (*(_QWORD *)(a1 + 184))
  {
LABEL_10:
    v11 = _os_activity_create(&dword_1A2830000, "Sharing/SFOperation/resume", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
    v20.opaque[0] = 0;
    v20.opaque[1] = 0;
    os_activity_scope_enter(v11, &v20);
    os_release(v11);
    v12 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v12, "Object", "Operation");
    xpc_dictionary_set_string(v12, "Function", "Resume");
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 184), v12);
    if (!*(_QWORD *)(a1 + 40))
    {
      v13 = (__CFRunLoop *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), CFSTR("RunLoop"));
      v14 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), CFSTR("RunLoopMode"));
      if (v13)
      {
        v15 = v14;
        if (v14)
        {
          context.version = 0;
          memset(&context.retain, 0, 24);
          context.info = (void *)a1;
          v16 = CFGetAllocator((CFTypeRef)a1);
          Current = CFAbsoluteTimeGetCurrent();
          v18 = CFRunLoopTimerCreate(v16, Current + 1.0e30, 1.0e30, 0, 0, (CFRunLoopTimerCallBack)dummyCallBack, &context);
          *(_QWORD *)(a1 + 40) = v18;
          CFRunLoopAddTimer(v13, v18, v15);
        }
      }
    }
    xpc_release(v12);
    os_activity_scope_leave(&v20);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 64));
}

_xpc_connection_s *_SFOperationCreateConnection(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  xpc_object_t v5;
  void *v6;
  void *v7;
  NSObject *v8;
  _xpc_connection_s *mach_service;
  void *v10;
  _QWORD v12[6];
  os_activity_scope_state_s state;

  v4 = _os_activity_create(&dword_1A2830000, "Sharing/SFOperation/createConnection", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v4, &state);
  os_release(v4);
  v5 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v5, "Object", "Operation");
  xpc_dictionary_set_string(v5, "Function", "Create");
  if (a2)
  {
    v6 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    xpc_dictionary_set_value(v5, "Operation", v6);
    xpc_release(v6);
  }
  v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  xpc_dictionary_set_value(v5, "Kind", v7);
  if (a1[7])
    v8 = a1[7];
  else
    v8 = MEMORY[0x1E0C80D38];
  mach_service = xpc_connection_create_mach_service("com.apple.sharingd", v8, 0);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___SFOperationCreateConnection_block_invoke;
  v12[3] = &__block_descriptor_tmp_215;
  v12[4] = a1;
  v12[5] = mach_service;
  xpc_connection_set_event_handler(mach_service, v12);
  xpc_connection_send_message(mach_service, v5);
  v10 = (void *)CFRetain(a1);
  xpc_connection_set_context(mach_service, v10);
  xpc_connection_set_finalizer_f(mach_service, (xpc_finalizer_t)MEMORY[0x1E0C98BC0]);
  xpc_connection_resume(mach_service);
  xpc_release(v7);
  xpc_release(v5);
  os_activity_scope_leave(&state);
  return mach_service;
}

uint64_t SFOperationCancel(uint64_t a1)
{
  NSObject *v2;
  __CFRunLoopTimer *v3;
  _xpc_connection_s *v4;
  _QWORD barrier[5];

  v2 = framework_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    SFOperationCancel_cold_1();
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 64));
  v3 = *(__CFRunLoopTimer **)(a1 + 40);
  if (v3)
  {
    CFRunLoopTimerInvalidate(v3);
    CFRelease(*(CFTypeRef *)(a1 + 40));
    *(_QWORD *)(a1 + 40) = 0;
  }
  if (!*(_BYTE *)(a1 + 16))
  {
    *(_BYTE *)(a1 + 16) = 1;
    v4 = *(_xpc_connection_s **)(a1 + 184);
    if (v4)
    {
      barrier[0] = MEMORY[0x1E0C809B0];
      barrier[1] = 0x40000000;
      barrier[2] = __SFOperationCancel_block_invoke;
      barrier[3] = &__block_descriptor_tmp_204;
      barrier[4] = v4;
      xpc_connection_send_barrier(v4, barrier);
      *(_QWORD *)(a1 + 184) = 0;
    }
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 64));
}

uint64_t _SFOperationFinalize(uint64_t a1)
{
  pthread_mutex_t *v2;
  void (*v3)(void);
  NSObject *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  v2 = (pthread_mutex_t *)(a1 + 64);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 64));
  if (*(_QWORD *)(a1 + 144))
  {
    v3 = *(void (**)(void))(a1 + 160);
    if (v3)
      v3();
  }
  v4 = *(NSObject **)(a1 + 56);
  if (v4)
    dispatch_release(v4);
  v5 = *(const void **)(a1 + 32);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 24);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 48);
  if (v7)
    CFRelease(v7);
  pthread_mutex_unlock(v2);
  return pthread_mutex_destroy(v2);
}

BOOL _SFOperationEqual(pthread_mutex_t *a1, pthread_mutex_t *a2)
{
  pthread_mutex_t *v4;

  v4 = a1 + 1;
  pthread_mutex_lock(a1 + 1);
  pthread_mutex_lock(a2 + 1);
  pthread_mutex_unlock(v4);
  pthread_mutex_unlock(a2 + 1);
  return a1 == a2;
}

pthread_mutex_t *_SFOperationHash(pthread_mutex_t *a1)
{
  pthread_mutex_t *v2;

  v2 = a1 + 1;
  pthread_mutex_lock(a1 + 1);
  pthread_mutex_unlock(v2);
  return a1;
}

CFStringRef _SFOperationCopyDebugDesc(uint64_t a1)
{
  pthread_mutex_t *v2;
  CFStringRef v3;

  v2 = (pthread_mutex_t *)(a1 + 64);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 64));
  v3 = CFStringCreateWithFormat(0, 0, CFSTR("<SFOperation %p>{kind = %@}"), a1, *(_QWORD *)(a1 + 48));
  pthread_mutex_unlock(v2);
  return v3;
}

void _SFOperationAddSandboxExtensionForFileURL(const __CFURL *a1, __CFDictionary *a2)
{
  const __CFString *v4;
  const __CFString *v5;
  int CString;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  char *v10;
  const __CFURL *v11;
  size_t v12;
  CFDataRef v13;
  CFStringRef v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  int v18;
  char *v19;
  char buffer[1024];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  bzero(buffer, 0x400uLL);
  v4 = CFURLCopyFileSystemPath(a1, kCFURLPOSIXPathStyle);
  if (v4)
  {
    v5 = v4;
    CString = CFStringGetCString(v4, buffer, 1024, 0x8000100u);
    v7 = framework_log();
    v8 = v7;
    if (CString)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v18 = 136315138;
        v19 = buffer;
        _os_log_impl(&dword_1A2830000, v8, OS_LOG_TYPE_DEFAULT, "Trying to issue sandbox extension for %s", (uint8_t *)&v18, 0xCu);
      }
      v9 = sandbox_extension_issue_file();
      if (v9)
      {
        v10 = (char *)v9;
        v11 = CFURLCopyAbsoluteURL(a1);
        v12 = strlen(v10);
        v13 = CFDataCreate(0, (const UInt8 *)v10, v12);
        v14 = CFURLGetString(v11);
        CFDictionaryAddValue(a2, v14, v13);
        CFRelease(v11);
        CFRelease(v13);
        free(v10);
        v15 = framework_log();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          v18 = 136315138;
          v19 = buffer;
          _os_log_impl(&dword_1A2830000, v15, OS_LOG_TYPE_DEFAULT, "Successfully issued sandbox extension for %s", (uint8_t *)&v18, 0xCu);
        }
      }
      else
      {
        v17 = framework_log();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          _SFOperationAddSandboxExtensionForFileURL_cold_3((uint64_t)buffer, v17);
      }
    }
    else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      _SFOperationAddSandboxExtensionForFileURL_cold_2();
    }
    CFRelease(v5);
  }
  else
  {
    v16 = framework_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      _SFOperationAddSandboxExtensionForFileURL_cold_1();
  }
}

uint64_t _SFOperationNotifyClient(uint64_t result, uint64_t a2, const __CFDictionary *cf2)
{
  uint64_t v5;
  CFStringRef v6;
  NSObject *v7;
  const __CFString *v8;
  const void *v9;
  CFDictionaryRef Copy;
  uint8_t buf[4];
  CFStringRef v12;
  __int16 v13;
  const __CFString *v14;
  __int16 v15;
  const __CFDictionary *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(result + 16))
  {
    v5 = result;
    if (*(_QWORD *)(result + 176) != a2 || (result = valuesChanged(*(CFTypeRef *)(result + 24), cf2), (_DWORD)result))
    {
      if (a2 != 7)
      {
        v6 = CFStringCreateWithFormat(0, 0, CFSTR("<SFOperation %p>{kind = %@}"), v5, *(_QWORD *)(v5 + 48));
        v7 = framework_log();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          if ((unint64_t)(a2 - 1) > 0xE)
            v8 = CFSTR("?");
          else
            v8 = off_1E482DA60[a2 - 1];
          *(_DWORD *)buf = 138412802;
          v12 = v6;
          v13 = 2112;
          v14 = v8;
          v15 = 2112;
          v16 = cf2;
          _os_log_impl(&dword_1A2830000, v7, OS_LOG_TYPE_INFO, "SFOperationCallBack (%@, event = %@, results = %@)", buf, 0x20u);
        }
        CFRelease(v6);
      }
      *(_QWORD *)(v5 + 176) = a2;
      v9 = *(const void **)(v5 + 24);
      if (v9)
        CFRelease(v9);
      Copy = 0;
      if (cf2)
        Copy = CFDictionaryCreateCopy(0, cf2);
      *(_QWORD *)(v5 + 24) = Copy;
      return (*(uint64_t (**)(uint64_t, uint64_t, const __CFDictionary *, _QWORD))(v5 + 128))(v5, a2, cf2, *(_QWORD *)(v5 + 144));
    }
  }
  return result;
}

void OUTLINED_FUNCTION_6_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1A2853D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A2853E58(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A28543D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A2854494(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A28545F0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

void sub_1A2854718(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A28547C8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A2854890(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A2854A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A2854C1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1A2854CE0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A2854E10(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A2854EF0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1A2854FA8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

Class initAFPreferences()
{
  Class result;

  if (AssistantServicesLibrary_sOnce != -1)
    dispatch_once(&AssistantServicesLibrary_sOnce, &__block_literal_global_2);
  result = objc_getClass("AFPreferences");
  classAFPreferences = (uint64_t)result;
  getAFPreferencesClass[0] = (uint64_t (*)())AFPreferencesFunction;
  return result;
}

id AFPreferencesFunction()
{
  return (id)classAFPreferences;
}

Class initVTPreferences()
{
  Class result;

  if (VoiceTriggerLibrary_sOnce != -1)
    dispatch_once(&VoiceTriggerLibrary_sOnce, &__block_literal_global_194);
  result = objc_getClass("VTPreferences");
  classVTPreferences = (uint64_t)result;
  getVTPreferencesClass[0] = (uint64_t (*)())VTPreferencesFunction;
  return result;
}

id VTPreferencesFunction()
{
  return (id)classVTPreferences;
}

Class initUNNotificationSettingsCenter()
{
  Class result;

  if (UserNotificationsSettingsLibrary_sOnce != -1)
    dispatch_once(&UserNotificationsSettingsLibrary_sOnce, &__block_literal_global_197);
  result = objc_getClass("UNNotificationSettingsCenter");
  classUNNotificationSettingsCenter = (uint64_t)result;
  getUNNotificationSettingsCenterClass[0] = (uint64_t (*)())UNNotificationSettingsCenterFunction;
  return result;
}

id UNNotificationSettingsCenterFunction()
{
  return (id)classUNNotificationSettingsCenter;
}

Class initUNMutableNotificationSystemSettings()
{
  Class result;

  if (UserNotificationsSettingsLibrary_sOnce != -1)
    dispatch_once(&UserNotificationsSettingsLibrary_sOnce, &__block_literal_global_197);
  result = objc_getClass("UNMutableNotificationSystemSettings");
  classUNMutableNotificationSystemSettings = (uint64_t)result;
  getUNMutableNotificationSystemSettingsClass[0] = (uint64_t (*)())UNMutableNotificationSystemSettingsFunction;
  return result;
}

id UNMutableNotificationSystemSettingsFunction()
{
  return (id)classUNMutableNotificationSystemSettings;
}

Class initTUUserConfiguration()
{
  Class result;

  if (TelephonyUtilitiesLibrary_sOnce != -1)
    dispatch_once(&TelephonyUtilitiesLibrary_sOnce, &__block_literal_global_201);
  result = objc_getClass("TUUserConfiguration");
  classTUUserConfiguration = (uint64_t)result;
  getTUUserConfigurationClass[0] = (uint64_t (*)())TUUserConfigurationFunction;
  return result;
}

id TUUserConfigurationFunction()
{
  return (id)classTUUserConfiguration;
}

uint64_t browserCallBack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return objc_msgSend(a6, "handleBrowserCallBack");
}

uint64_t operationCallBack(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "handleOperationCallback:event:withResults:", a1, a2, a3);
}

const __CFString *SFOperationEventToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xE)
    return CFSTR("?");
  else
    return off_1E482DEF8[a1 - 1];
}

void sub_1A285CECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A285DC70(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

uint64_t operationCallBack_0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "handleOperationCallback:event:withResults:", a1, a2, a3);
}

const __CFString *SFOperationEventToString_0(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xE)
    return CFSTR("?");
  else
    return off_1E482E200[a1 - 1];
}

void sub_1A285FCF4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 104));
  _Unwind_Resume(a1);
}

void sub_1A285FD4C()
{
  JUMPOUT(0x1A285FD34);
}

Class initTVLDisplayColorCalibrator()
{
  Class result;

  if (TVLatencyLibrary_sOnce != -1)
    dispatch_once(&TVLatencyLibrary_sOnce, &__block_literal_global_6);
  result = objc_getClass("TVLDisplayColorCalibrator");
  classTVLDisplayColorCalibrator = (uint64_t)result;
  getTVLDisplayColorCalibratorClass[0] = (uint64_t (*)())TVLDisplayColorCalibratorFunction;
  return result;
}

id TVLDisplayColorCalibratorFunction()
{
  return (id)classTVLDisplayColorCalibrator;
}

const __CFString *SFHotspotNetworkTypeString(unsigned int a1)
{
  if (a1 < 9 && ((0x1DFu >> a1) & 1) != 0)
    return off_1E482E440[(char)a1];
  if (SFRemoteHotspotNetworkTypeHSDPA == a1)
    return CFSTR("HSDPA");
  return CFSTR("Unknown");
}

uint64_t SFHotspotTypeStringToType(void *a1, _BYTE *a2)
{
  void *v3;
  void *v4;
  unsigned __int8 v5;
  int v6;

  objc_msgSend(a1, "lowercaseString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (a2)
    *a2 = 1;
  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("none")) & 1) != 0)
  {
    v5 = 0;
  }
  else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("1x")) & 1) != 0)
  {
    v5 = 1;
  }
  else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("gprs")) & 1) != 0)
  {
    v5 = 2;
  }
  else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("edge")) & 1) != 0)
  {
    v5 = 3;
  }
  else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("3g")) & 1) != 0)
  {
    v5 = 4;
  }
  else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("4g")) & 1) != 0)
  {
    v5 = 6;
  }
  else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("lte")) & 1) != 0)
  {
    v5 = 7;
  }
  else
  {
    v6 = objc_msgSend(v4, "isEqualToString:", CFSTR("5g"));
    if (v6)
      v5 = 8;
    else
      v5 = -1;
    if (a2 && (v6 & 1) == 0)
    {
      *a2 = 0;
      v5 = -1;
    }
  }

  return v5;
}

id SFHotspotResponseAdvertisementString(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v1 = BYTE3(a1);
  v2 = BYTE1(a1);
  v3 = (void *)MEMORY[0x1E0CB3940];
  v4 = a1;
  v5 = BYTE2(a1);
  v6 = BYTE5(a1);
  SFHotspotNetworkTypeString(BYTE4(a1));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("<version: %d, flags: %d battery life: %d, signal strength: %d, network type: %@, additional flags: %d>"), v4, v2, v5, v6, v7, v1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_1A2863648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state)
{
  _Unwind_Resume(exception_object);
}

void sub_1A2863BD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28642D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t getSharingFrameworkBundle()
{
  if (getSharingFrameworkBundle_sOnce != -1)
    dispatch_once(&getSharingFrameworkBundle_sOnce, &__block_literal_global_7);
  return getSharingFrameworkBundle_gBundleRef;
}

void __getSharingFrameworkBundle_block_invoke()
{
  const __CFURL *v0;
  const __CFURL *v1;

  getSharingFrameworkBundle_gBundleRef = (uint64_t)CFBundleGetBundleWithIdentifier(CFSTR("com.apple.Sharing"));
  if (!getSharingFrameworkBundle_gBundleRef)
  {
    v0 = CFURLCreateWithFileSystemPath(0, CFSTR("/System/Library/PrivateFrameworks/Sharing.framework"), kCFURLPOSIXPathStyle, 1u);
    if (v0)
    {
      v1 = v0;
      getSharingFrameworkBundle_gBundleRef = (uint64_t)CFBundleCreate(0, v0);
      CFRelease(v1);
    }
  }
}

CFStringRef copyLocalizedStringForKey(const __CFString *a1)
{
  return copyLocalizedStringForKeyInStringsFile(a1, CFSTR("Localizable"));
}

CFStringRef copyLocalizedStringForKeyInStringsFile(const __CFString *cf, CFStringRef tableName)
{
  const __CFAllocator *v5;

  if (getSharingFrameworkBundle_sOnce != -1)
    dispatch_once(&getSharingFrameworkBundle_sOnce, &__block_literal_global_7);
  if (getSharingFrameworkBundle_gBundleRef)
    return CFBundleCopyLocalizedString((CFBundleRef)getSharingFrameworkBundle_gBundleRef, cf, cf, tableName);
  v5 = CFGetAllocator(cf);
  return CFStringCreateCopy(v5, cf);
}

__CFSet *createMutableSetFromBag(const __CFAllocator *a1, CFIndex a2, const __CFBag *a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  const void **v9;
  __CFSet *Mutable;
  const void *v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 0;
  v6 = MEMORY[0x1A8587900](a3);
  if (!v6)
    return 0;
  v7 = v6;
  MEMORY[0x1E0C80A78](v6);
  v9 = (const void **)((char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v9, v8);
  CFBagGetValues(a3, v9);
  Mutable = CFSetCreateMutable(a1, a2, MEMORY[0x1E0C9B3B0]);
  if (v7 >= 1)
  {
    do
    {
      v11 = *v9++;
      CFSetSetValue(Mutable, v11);
      --v7;
    }
    while (v7);
  }
  return Mutable;
}

CFArrayRef copyValuesFromSet(const __CFAllocator *a1, CFSetRef theSet)
{
  CFArrayRef result;
  CFIndex v5;
  size_t v6;
  char *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  if (!theSet)
    return 0;
  result = (CFArrayRef)CFSetGetCount(theSet);
  if (result)
  {
    v5 = (CFIndex)result;
    MEMORY[0x1E0C80A78](result);
    v7 = (char *)v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v7, v6);
    CFSetGetValues(theSet, (const void **)v7);
    return CFArrayCreate(a1, (const void **)v7, v5, MEMORY[0x1E0C9B378]);
  }
  return result;
}

CFArrayRef copyValuesFromBag(const __CFAllocator *a1, const __CFBag *a2)
{
  CFArrayRef result;
  CFIndex v5;
  size_t v6;
  char *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  result = (CFArrayRef)MEMORY[0x1A8587900](a2);
  if (result)
  {
    v5 = (CFIndex)result;
    MEMORY[0x1E0C80A78](result);
    v7 = (char *)v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v7, v6);
    CFBagGetValues(a2, (const void **)v7);
    return CFArrayCreate(a1, (const void **)v7, v5, MEMORY[0x1E0C9B378]);
  }
  return result;
}

__CFBag *createBagFromArray(const __CFAllocator *a1, CFArrayRef theArray)
{
  uint64_t Count;
  __CFBag *Mutable;
  CFIndex i;
  const void *ValueAtIndex;

  if (!theArray)
    return 0;
  Count = CFArrayGetCount(theArray);
  Mutable = CFBagCreateMutable(a1, Count, MEMORY[0x1E0C9B388]);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      CFBagSetValue(Mutable, ValueAtIndex);
    }
  }
  return Mutable;
}

__CFSet *createSetFromArray(const __CFAllocator *a1, CFArrayRef theArray)
{
  uint64_t Count;
  __CFSet *Mutable;
  CFIndex i;
  const void *ValueAtIndex;

  if (!theArray)
    return 0;
  Count = CFArrayGetCount(theArray);
  Mutable = CFSetCreateMutable(a1, Count, MEMORY[0x1E0C9B3B0]);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      CFSetSetValue(Mutable, ValueAtIndex);
    }
  }
  return Mutable;
}

__CFSet *createSFNodeKindsFromXPCArray(const __CFAllocator *a1, xpc_object_t xarray)
{
  int64_t count;
  __CFSet *Mutable;
  size_t i;
  int64_t int64;
  const void *ValueAtIndex;

  if (!xarray)
    return 0;
  count = xpc_array_get_count(xarray);
  Mutable = CFSetCreateMutable(a1, count, &kSharingFastSetCallBacks);
  if (count >= 1)
  {
    for (i = 0; i != count; ++i)
    {
      int64 = xpc_array_get_int64(xarray, i);
      if (gKindMapOnce != -1)
        dispatch_once(&gKindMapOnce, &__block_literal_global_122);
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)gOrderedKinds, int64);
      CFSetSetValue(Mutable, ValueAtIndex);
    }
  }
  return Mutable;
}

xpc_object_t createXPCArrayFromSFNodeKinds(const __CFSet *a1)
{
  CFIndex Count;
  uint64_t v3;
  size_t v4;
  const void **v5;
  xpc_object_t v6;
  const void *v7;
  const void *Value;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  Count = CFSetGetCount(a1);
  if (!Count)
    return 0;
  v3 = Count;
  MEMORY[0x1E0C80A78](Count);
  v5 = (const void **)((char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v5, v4);
  v6 = xpc_array_create(0, 0);
  CFSetGetValues(a1, v5);
  if (v3 >= 1)
  {
    do
    {
      v7 = *v5;
      if (gKindMapOnce != -1)
        dispatch_once(&gKindMapOnce, &__block_literal_global_124);
      Value = CFDictionaryGetValue((CFDictionaryRef)gKindMap, v7);
      xpc_array_set_int64(v6, 0xFFFFFFFFFFFFFFFFLL, (int64_t)Value);
      ++v5;
      --v3;
    }
    while (v3);
  }
  return v6;
}

CFArrayRef copyKeysFromDictionary(const __CFAllocator *a1, CFDictionaryRef theDict)
{
  CFArrayRef result;
  CFIndex v5;
  size_t v6;
  char *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  if (!theDict)
    return 0;
  result = (CFArrayRef)CFDictionaryGetCount(theDict);
  if (result)
  {
    v5 = (CFIndex)result;
    MEMORY[0x1E0C80A78](result);
    v7 = (char *)v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v7, v6);
    CFDictionaryGetKeysAndValues(theDict, (const void **)v7, 0);
    return CFArrayCreate(a1, (const void **)v7, v5, MEMORY[0x1E0C9B378]);
  }
  return result;
}

CFArrayRef copyValuesFromDictionary(const __CFAllocator *a1, CFDictionaryRef theDict)
{
  CFArrayRef result;
  CFIndex v5;
  size_t v6;
  char *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  if (!theDict)
    return 0;
  result = (CFArrayRef)CFDictionaryGetCount(theDict);
  if (result)
  {
    v5 = (CFIndex)result;
    MEMORY[0x1E0C80A78](result);
    v7 = (char *)v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v7, v6);
    CFDictionaryGetKeysAndValues(theDict, 0, (const void **)v7);
    return CFArrayCreate(a1, (const void **)v7, v5, MEMORY[0x1E0C9B378]);
  }
  return result;
}

void setOrRemoveValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  if (value)
    CFDictionarySetValue(theDict, key, value);
  else
    CFDictionaryRemoveValue(theDict, key);
}

uint64_t copyBundleIdentifierForPID()
{
  return 0;
}

uint64_t defaultPortForProtocol(const void *a1)
{
  if (CFEqual(a1, CFSTR("afp")))
    return 548;
  if (CFEqual(a1, CFSTR("smb")))
    return 445;
  if (CFEqual(a1, CFSTR("vnc")))
    return 5900;
  if (CFEqual(a1, CFSTR("odisk")) || CFEqual(a1, CFSTR("webdav")))
    return 80;
  if (CFEqual(a1, CFSTR("webdavs")))
    return 443;
  if (CFEqual(a1, CFSTR("nfs")))
    return 2049;
  if (CFEqual(a1, CFSTR("ftp")))
    return 21;
  if (CFEqual(a1, CFSTR("ftps")))
    return 990;
  if (CFEqual(a1, CFSTR("http")))
    return 80;
  if (CFEqual(a1, CFSTR("https")))
    return 443;
  if (CFEqual(a1, CFSTR("adisk")))
    return 548;
  else
    return 0xFFFFFFFFLL;
}

const __CFString *createStringByAddingPercentEscapes(const __CFString *originalString, CFStringRef legalURLCharactersToBeEscaped)
{
  if (originalString)
    return CFURLCreateStringByAddingPercentEscapes(0, originalString, 0, legalURLCharactersToBeEscaped, 0x8000100u);
  return originalString;
}

const __CFURL *createURL(__CFString *a1, const __CFString *a2, const __CFString *a3, __CFString *MutableCopy, int a5, const __CFString *a6, const __CFDictionary *a7, int a8)
{
  __CFString **v16;
  __CFString *v17;
  int v18;
  CFIndex Length;
  CFMutableStringRef Mutable;
  int v21;
  const __CFString *v22;
  const __CFString *v23;
  CFStringRef v24;
  CFIndex Count;
  uint64_t v26;
  size_t v27;
  const void **v28;
  __CFString *v29;
  uint64_t v30;
  const void *v31;
  const void *Value;
  const __CFURL *v33;
  const __CFURL *v34;
  char v35;
  NSObject *v36;
  uint64_t v38;
  int v39;
  const __CFString *v40;
  int v41;
  CFErrorRef error[2];
  CFRange v43;
  CFRange v44;

  error[1] = *(CFErrorRef *)MEMORY[0x1E0C80C00];
  if (CFEqual(a1, CFSTR("webdav")) || CFEqual(a1, CFSTR("odisk")))
  {
    v16 = kSFNodeProtocolHTTP;
LABEL_4:
    v17 = *v16;
    goto LABEL_5;
  }
  CFEqual(a1, CFSTR("airdrop"));
  if (CFEqual(a1, CFSTR("webdavs")) || (v17 = a1, CFEqual(a1, CFSTR("airdrop"))))
  {
    v16 = kSFNodeProtocolHTTPS;
    goto LABEL_4;
  }
LABEL_5:
  v18 = defaultPortForProtocol(a1);
  if (a2)
    a2 = CFURLCreateStringByAddingPercentEscapes(0, a2, 0, CFSTR(";:@?/"), 0x8000100u);
  if (a3)
    a3 = CFURLCreateStringByAddingPercentEscapes(0, a3, 0, CFSTR(";:@?/"), 0x8000100u);
  if (CFStringHasPrefix(MutableCopy, CFSTR("[")) && CFStringHasSuffix(MutableCopy, CFSTR("]")))
  {
    Length = CFStringGetLength(MutableCopy);
    MutableCopy = CFStringCreateMutableCopy(0, Length, MutableCopy);
    v44.length = CFStringGetLength(MutableCopy);
    v44.location = 0;
    CFStringFindAndReplace(MutableCopy, CFSTR("%"), CFSTR("%25"), v44, 0);
  }
  else if (MutableCopy)
  {
    MutableCopy = (__CFString *)CFURLCreateStringByAddingPercentEscapes(0, MutableCopy, 0, CFSTR(";:@?/"),
                                  0x8000100u);
  }
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("%@://"), v17);
  if (!a2)
  {
    if (!a3)
    {
      v21 = 1;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  CFStringAppend(Mutable, a2);
  if (a3)
  {
LABEL_18:
    CFStringAppendFormat(Mutable, 0, CFSTR(":%@"), a3);
    v21 = 0;
    goto LABEL_19;
  }
  v21 = 1;
LABEL_19:
  CFStringAppend(Mutable, CFSTR("@"));
LABEL_20:
  CFStringAppend(Mutable, MutableCopy);
  if (a5 >= 1 && v18 != a5)
    CFStringAppendFormat(Mutable, 0, CFSTR(":%ld"), a5);
  if (a6)
  {
    if (CFStringHasPrefix(a6, CFSTR("/")))
    {
      v43.length = CFStringGetLength(a6) - 1;
      v43.location = 1;
      v22 = CFStringCreateWithSubstring(0, a6, v43);
    }
    else
    {
      v22 = (const __CFString *)CFRetain(a6);
    }
    v23 = v22;
    if (v22)
      v24 = CFURLCreateStringByAddingPercentEscapes(0, v22, 0, 0, 0x8000100u);
    else
      v24 = 0;
    CFStringAppendFormat(Mutable, 0, CFSTR("/%@"), v24);
    CFRelease(v23);
    CFRelease(v24);
  }
  if (a7)
  {
    Count = CFDictionaryGetCount(a7);
    if (Count)
    {
      v26 = Count;
      v39 = v21;
      v40 = a3;
      v41 = a8;
      v38 = (uint64_t)&v38;
      MEMORY[0x1E0C80A78](Count);
      v28 = (const void **)((char *)&v38 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
      bzero(v28, v27);
      v29 = CFStringCreateMutable(0, 0);
      CFDictionaryGetKeysAndValues(a7, v28, 0);
      v30 = v26 - 1;
      if (v26 >= 1)
      {
        while (1)
        {
          v31 = *v28;
          Value = CFDictionaryGetValue(a7, *v28);
          CFStringAppendFormat(v29, 0, CFSTR("%@=%@"), v31, Value);
          if (!v30)
            break;
          CFStringAppend(v29, CFSTR("&"));
          --v30;
          ++v28;
        }
      }
      CFStringAppendFormat(Mutable, 0, CFSTR("?%@"), v29);
      CFRelease(v29);
      a8 = v41;
      a3 = v40;
      LOBYTE(v21) = v39;
    }
  }
  v33 = CFURLCreateWithString(0, Mutable, 0);
  v34 = v33;
  if (a8)
  {
    error[0] = 0;
    if (!CFURLSetResourcePropertyForKey(v33, (CFStringRef)*MEMORY[0x1E0C9B4E0], (CFTypeRef)*MEMORY[0x1E0C9AE50], error))
    {
      v35 = v21;
      v36 = utilities_log();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        createURL_cold_1((uint64_t *)error, v36);
      CFRelease(error[0]);
      LOBYTE(v21) = v35;
    }
  }
  CFRelease(Mutable);
  CFRelease(MutableCopy);
  if (a2)
    CFRelease(a2);
  if ((v21 & 1) == 0)
    CFRelease(a3);
  return v34;
}

uint64_t disableAirDropTLS()
{
  return 0;
}

CGImageRef createCGImageWithURL(const __CFURL *a1)
{
  CGImageSource *v1;
  CGImageSource *v2;
  CGImageRef ImageAtIndex;
  NSObject *v4;
  NSObject *v5;

  v1 = CGImageSourceCreateWithURL(a1, 0);
  if (v1)
  {
    v2 = v1;
    if (CGImageSourceGetCount(v1))
    {
      ImageAtIndex = CGImageSourceCreateImageAtIndex(v2, 0, 0);
    }
    else
    {
      v5 = utilities_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        createCGImageWithURL_cold_2();
      ImageAtIndex = 0;
    }
    CFRelease(v2);
  }
  else
  {
    v4 = utilities_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      createCGImageWithURL_cold_1();
    return 0;
  }
  return ImageAtIndex;
}

CGImageRef createCGImageWithData(const __CFData *a1)
{
  return createCGImageWithDataInternal(a1, 0);
}

CGImageRef createCGImageWithDataInternal(const __CFData *a1, int a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  CGImageSource *v6;
  CGImageSource *v7;
  CFStringRef Type;
  CGImageRef ImageAtIndex;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = Mutable;
  if (a2)
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBD2A8], (const void *)*MEMORY[0x1E0CA5BB0]);
    CFDictionarySetValue(v5, (const void *)*MEMORY[0x1E0CBD1C8], (const void *)*MEMORY[0x1E0C9AE50]);
  }
  v6 = CGImageSourceCreateWithData(a1, v5);
  if (v6)
  {
    v7 = v6;
    if (!CGImageSourceGetCount(v6))
    {
      v12 = utilities_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        createCGImageWithDataInternal_cold_2();
      goto LABEL_20;
    }
    if (a2)
    {
      Type = CGImageSourceGetType(v7);
      if (!CFEqual(Type, (CFTypeRef)*MEMORY[0x1E0CA5BB0]))
      {
        v14 = utilities_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          createCGImageWithDataInternal_cold_3();
        goto LABEL_20;
      }
      ImageAtIndex = CGImageSourceCreateImageAtIndex(v7, 0, 0);
      if (!ImageAtIndex)
      {
        v10 = utilities_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          createCGImageWithDataInternal_cold_4();
LABEL_20:
        ImageAtIndex = 0;
      }
    }
    else
    {
      ImageAtIndex = CGImageSourceCreateImageAtIndex(v7, 0, 0);
      if (!ImageAtIndex)
      {
        v13 = utilities_log();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          createCGImageWithDataInternal_cold_5();
        goto LABEL_20;
      }
    }
    CFRelease(v7);
    goto LABEL_22;
  }
  v11 = utilities_log();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    createCGImageWithDataInternal_cold_1();
  ImageAtIndex = 0;
LABEL_22:
  CFRelease(v5);
  return ImageAtIndex;
}

CGImageRef createCGImageWithJPEG2000Data(const __CFData *a1)
{
  return createCGImageWithDataInternal(a1, 1);
}

CGImageRef createCGImageWithDataOrURL(const void *a1)
{
  CFTypeID v2;
  CGImageSource *v3;
  CGImageSource *v4;
  CGImageRef ImageAtIndex;
  NSObject *v6;
  NSObject *v7;

  v2 = CFGetTypeID(a1);
  if (v2 == CFURLGetTypeID())
  {
    v3 = CGImageSourceCreateWithURL((CFURLRef)a1, 0);
  }
  else
  {
    if (v2 != CFDataGetTypeID())
      goto LABEL_8;
    v3 = CGImageSourceCreateWithData((CFDataRef)a1, 0);
  }
  v4 = v3;
  if (v3)
  {
    if (CGImageSourceGetCount(v3))
    {
      ImageAtIndex = CGImageSourceCreateImageAtIndex(v4, 0, 0);
    }
    else
    {
      v7 = utilities_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        createCGImageWithDataOrURL_cold_2();
      ImageAtIndex = 0;
    }
    CFRelease(v4);
    return ImageAtIndex;
  }
LABEL_8:
  v6 = utilities_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    createCGImageWithDataOrURL_cold_1();
  return 0;
}

__CFData *copyImageData(void *a1, uint64_t a2)
{
  const __CFAllocator *v4;
  __CFData *Mutable;
  __CFDictionary *v6;
  CFNumberRef v7;
  const void **v8;
  CGImageDestination *v9;
  CGImageDestination *v10;
  NSObject *v11;
  NSObject *v12;
  int v14;
  uint64_t valuePtr;

  v4 = CFGetAllocator(a1);
  Mutable = CFDataCreateMutable(v4, 0);
  valuePtr = a2;
  v6 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a2)
  {
    v7 = CFNumberCreate(v4, kCFNumberLongType, &valuePtr);
    v8 = (const void **)MEMORY[0x1E0CBC7B8];
  }
  else
  {
    v14 = 1065353216;
    v7 = CFNumberCreate(v4, kCFNumberFloatType, &v14);
    v8 = (const void **)MEMORY[0x1E0CBC780];
  }
  CFDictionarySetValue(v6, *v8, v7);
  CFRelease(v7);
  v9 = CGImageDestinationCreateWithData(Mutable, (CFStringRef)*MEMORY[0x1E0CA5BB0], 1uLL, 0);
  if (v9)
  {
    v10 = v9;
    CGImageDestinationAddImage(v9, (CGImageRef)a1, v6);
    if (!CGImageDestinationFinalize(v10))
    {
      v11 = utilities_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        copyImageData_cold_2();
      CFRelease(Mutable);
      Mutable = 0;
    }
    CFRelease(v10);
  }
  else
  {
    v12 = utilities_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      copyImageData_cold_1();
  }
  CFRelease(v6);
  return Mutable;
}

__CFData *createImageDataWithSize(uint64_t a1, uint64_t a2)
{
  CGColorSpaceRef DeviceRGB;
  CGColorSpaceRef v4;
  CGImage *v5;
  CGImage *v6;
  size_t Width;
  size_t Height;
  void *Thumb;
  NSObject *v10;
  __CFData *v11;
  NSObject *v12;
  const void *v13;
  NSObject *v14;

  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  if (DeviceRGB)
  {
    v4 = DeviceRGB;
    v5 = (CGImage *)CGImageCreateByMatchingToColorSpace();
    if (v5)
    {
      v6 = v5;
      Width = CGImageGetWidth(v5);
      Height = CGImageGetHeight(v6);
      if (Width > 0x21C || Height >= 0x21D)
        Thumb = (void *)CGImageCreateThumb();
      else
        Thumb = (void *)CFRetain(v6);
      v13 = Thumb;
      if (Thumb)
      {
        v11 = copyImageData(Thumb, a2);
        CFRelease(v13);
      }
      else
      {
        v14 = utilities_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          createImageDataWithSize_cold_3();
        v11 = 0;
      }
      CFRelease(v6);
    }
    else
    {
      v12 = utilities_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        createImageDataWithSize_cold_2();
      v11 = 0;
    }
    CFRelease(v4);
  }
  else
  {
    v10 = utilities_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      createImageDataWithSize_cold_1();
    return 0;
  }
  return v11;
}

uint64_t browseAllInterfacesEnabled()
{
  const __CFBoolean *v0;
  uint64_t v1;
  int v2;
  const __CFBoolean **v3;

  v0 = (const __CFBoolean *)browseAllInterfacesEnabled_enabled;
  if (!browseAllInterfacesEnabled_enabled)
  {
    if (SFDeviceIsVirtualMachine())
      v1 = 1;
    else
      v1 = BOOLeanValueForPreference(CFSTR("EnableDemoMode"), 0);
    v2 = BOOLeanValueForPreference(CFSTR("BrowseAllInterfaces"), v1);
    v3 = (const __CFBoolean **)MEMORY[0x1E0C9AE50];
    if (!v2)
      v3 = (const __CFBoolean **)MEMORY[0x1E0C9AE40];
    v0 = *v3;
    browseAllInterfacesEnabled_enabled = (uint64_t)*v3;
  }
  return CFBooleanGetValue(v0);
}

uint64_t enableDemoMode()
{
  return BOOLeanValueForPreference(CFSTR("EnableDemoMode"), 0);
}

uint64_t forceOldMode()
{
  return BOOLeanValueForPreference(CFSTR("ForceOldMode"), 0);
}

uint64_t disableAirDrop()
{
  const __CFBoolean *v0;
  int v1;
  const __CFBoolean **v2;

  v0 = (const __CFBoolean *)disableAirDrop_disableAirDrop;
  if (!disableAirDrop_disableAirDrop)
  {
    v1 = BOOLeanValueForPreference(CFSTR("DisableAirDrop"), 0);
    v2 = (const __CFBoolean **)MEMORY[0x1E0C9AE50];
    if (!v1)
      v2 = (const __CFBoolean **)MEMORY[0x1E0C9AE40];
    v0 = *v2;
    disableAirDrop_disableAirDrop = (uint64_t)*v2;
  }
  return CFBooleanGetValue(v0);
}

uint64_t enableSimulator()
{
  const __CFBoolean *v0;
  int v1;
  const __CFBoolean **v2;

  v0 = (const __CFBoolean *)enableSimulator_enableSimulator;
  if (!enableSimulator_enableSimulator)
  {
    v1 = BOOLeanValueForPreference(CFSTR("EnableSimulator"), 0);
    v2 = (const __CFBoolean **)MEMORY[0x1E0C9AE50];
    if (!v1)
      v2 = (const __CFBoolean **)MEMORY[0x1E0C9AE40];
    v0 = *v2;
    enableSimulator_enableSimulator = (uint64_t)*v2;
  }
  return CFBooleanGetValue(v0);
}

uint64_t enableDeviceImages()
{
  const __CFBoolean *v0;
  int v1;
  const __CFBoolean **v2;

  v0 = (const __CFBoolean *)enableDeviceImages_enableDeviceImages;
  if (!enableDeviceImages_enableDeviceImages)
  {
    v1 = BOOLeanValueForPreference(CFSTR("EnableDeviceImages"), 0);
    v2 = (const __CFBoolean **)MEMORY[0x1E0C9AE50];
    if (!v1)
      v2 = (const __CFBoolean **)MEMORY[0x1E0C9AE40];
    v0 = *v2;
    enableDeviceImages_enableDeviceImages = (uint64_t)*v2;
  }
  return CFBooleanGetValue(v0);
}

uint64_t directIPEnabled()
{
  const __CFBoolean *v0;
  int v1;
  const __CFBoolean **v2;

  v0 = (const __CFBoolean *)directIPEnabled_enabled;
  if (!directIPEnabled_enabled)
  {
    v1 = BOOLeanValueForPreference(CFSTR("EnableDirectIP"), 0);
    v2 = (const __CFBoolean **)MEMORY[0x1E0C9AE50];
    if (!v1)
      v2 = (const __CFBoolean **)MEMORY[0x1E0C9AE40];
    v0 = *v2;
    directIPEnabled_enabled = (uint64_t)*v2;
  }
  return CFBooleanGetValue(v0);
}

BOOL valuesChanged(CFTypeRef cf1, CFTypeRef cf2)
{
  if (cf1 && cf2)
  {
    if (!CFEqual(cf1, cf2))
      return 1;
  }
  else if (cf1 && !cf2)
  {
    return 1;
  }
  return cf2 && cf1 == 0;
}

uint64_t longValueForPreference(const __CFString *a1, uint64_t a2)
{
  uint64_t v2;
  const __CFNumber *v3;
  const __CFNumber *v4;
  CFTypeID v5;
  CFTypeID v6;
  uint64_t valuePtr;

  v2 = a2;
  valuePtr = a2;
  v3 = (const __CFNumber *)copySharingPrefValue(a1);
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v4, kCFNumberLongType, &valuePtr);
    }
    else
    {
      v6 = CFGetTypeID(v4);
      if (v6 == CFStringGetTypeID())
        valuePtr = CFStringGetIntValue((CFStringRef)v4);
    }
    CFRelease(v4);
    return valuePtr;
  }
  return v2;
}

BOOL stringIsTrueString(const __CFString *a1)
{
  _BOOL8 v2;

  CFRetain(a1);
  if (CFEqual(a1, CFSTR("1")))
  {
    v2 = 1;
  }
  else
  {
    v2 = 1;
    if (CFStringCompare(a1, CFSTR("true"), 1uLL))
    {
      v2 = 1;
      if (CFStringCompare(a1, CFSTR("yes"), 1uLL))
      {
        v2 = 1;
        if (CFStringCompare(a1, CFSTR("y"), 1uLL))
          v2 = CFStringCompare(a1, CFSTR("on"), 1uLL) == kCFCompareEqualTo;
      }
    }
  }
  CFRelease(a1);
  return v2;
}

CFStringRef copyCurrentTime(const __CFAllocator *a1)
{
  timeval v3;
  tm v4;

  memset(&v4, 0, sizeof(v4));
  v3.tv_sec = 0;
  *(_QWORD *)&v3.tv_usec = 0;
  gettimeofday(&v3, 0);
  localtime_r(&v3.tv_sec, &v4);
  return CFStringCreateWithFormat(a1, 0, CFSTR("%02d:%02d:%02d.%03d"), v4.tm_hour, v4.tm_min, v4.tm_sec, (v3.tv_usec / 1000));
}

const __CFString *airDropServiceType()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  CFTypeID v2;
  const __CFString *v3;
  CFStringRef v4;
  CFTypeID v6;
  void *v7;
  const void *v8;
  CFStringRef v9;
  CFRange v10;

  v0 = (const __CFBoolean *)copySharingPrefValue(CFSTR("AlternateService"));
  if (v0)
  {
    v1 = v0;
    v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID())
    {
      if (CFBooleanGetValue(v1))
        v3 = CFSTR("_airdrop-alt._tcp.");
      else
        v3 = CFSTR("_airdrop._tcp.");
      goto LABEL_14;
    }
    v6 = CFGetTypeID(v1);
    if (v6 == CFStringGetTypeID())
    {
      if (CFEqual(v1, CFSTR("1")))
      {
        v3 = CFSTR("_airdrop-alt._tcp.");
LABEL_14:
        CFRelease(v1);
        return v3;
      }
      if (!CFEqual(v1, CFSTR("0")))
      {
        if (CFStringGetLength((CFStringRef)v1) < 8)
        {
          v7 = (void *)CFRetain(v1);
        }
        else
        {
          v10.location = 0;
          v10.length = 7;
          v7 = (void *)CFStringCreateWithSubstring(0, (CFStringRef)v1, v10);
        }
        v8 = v7;
        v9 = CFStringCreateWithFormat(0, 0, CFSTR("_airdrop-%@._tcp."), v7);
        v3 = (const __CFString *)CFAutorelease(v9);
        CFRelease(v8);
        goto LABEL_14;
      }
    }
    v3 = CFSTR("_airdrop._tcp.");
    goto LABEL_14;
  }
  if (BOOLeanValueForPreference(CFSTR("EnableDemoMode"), 0))
  {
    v4 = CFStringCreateWithFormat(0, 0, CFSTR("_airdrop-%@._tcp."), CFSTR("demo"));
    return (const __CFString *)CFAutorelease(v4);
  }
  return CFSTR("_airdrop._tcp.");
}

uint64_t getOrderedTypes()
{
  if (gArrayOnce != -1)
    dispatch_once(&gArrayOnce, &__block_literal_global_114);
  return gOrderedTypes;
}

CFArrayRef initArrays()
{
  const CFArrayCallBacks *v0;
  CFArrayRef result;
  void *values;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  void *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v13 = CFSTR("_adisk._tcp.");
  v14 = CFSTR("_afpovertcp._tcp.");
  v15 = CFSTR("_smb._tcp.");
  v16 = CFSTR("_rfb._tcp.");
  v17 = CFSTR("_odisk._tcp.");
  v18 = CFSTR("_http._tcp.");
  v19 = airDropServiceType();
  v20 = CFSTR("_file._tcp.");
  v21 = CFSTR("_netbios._udp.");
  v22 = CFSTR("_workgroups._udp.");
  v23 = CFSTR("_nwnode._tcp.");
  values = CFSTR("adisk");
  v3 = CFSTR("afp");
  v4 = CFSTR("smb");
  v5 = CFSTR("vnc");
  v6 = CFSTR("odisk");
  v7 = CFSTR("http");
  v8 = CFSTR("airdrop");
  v9 = CFSTR("file");
  v10 = CFSTR("netbios");
  v11 = CFSTR("workgroups");
  v12 = CFSTR("nwnode");
  if (BOOLeanValueForPreference(CFSTR("PreferSMBFileSharing"), 0))
  {
    v14 = CFSTR("_smb._tcp.");
    v15 = CFSTR("_afpovertcp._tcp.");
    v3 = CFSTR("smb");
    v4 = CFSTR("afp");
  }
  v0 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  gOrderedProtocols = (uint64_t)CFArrayCreate(0, (const void **)&values, 11, MEMORY[0x1E0C9B378]);
  result = CFArrayCreate(0, (const void **)&v13, 11, v0);
  gOrderedTypes = (uint64_t)result;
  return result;
}

uint64_t getOrderedProtocols()
{
  if (gArrayOnce != -1)
    dispatch_once(&gArrayOnce, &__block_literal_global_116);
  return gOrderedProtocols;
}

const void *getServiceTypeForProtocol(void *key)
{
  if (gDictionaryOnce != -1)
    dispatch_once(&gDictionaryOnce, &__block_literal_global_118);
  return CFDictionaryGetValue((CFDictionaryRef)gTypeForProtocol, key);
}

CFDictionaryRef initDictionaries()
{
  const __CFArray *v0;
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  size_t v4;
  char *v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  const __CFAllocator *v9;
  const CFDictionaryKeyCallBacks *v10;
  const CFDictionaryValueCallBacks *v11;
  CFDictionaryRef result;
  _QWORD v13[2];
  CFRange v14;
  CFRange v15;

  v13[1] = *MEMORY[0x1E0C80C00];
  if (gArrayOnce != -1)
    dispatch_once(&gArrayOnce, &__block_literal_global_114);
  v0 = (const __CFArray *)gOrderedTypes;
  v1 = (const __CFArray *)gOrderedProtocols;
  Count = CFArrayGetCount((CFArrayRef)gOrderedTypes);
  v3 = CFArrayGetCount(v1);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v5, v4);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v8, v7);
  v14.location = 0;
  v14.length = Count;
  CFArrayGetValues(v0, v14, (const void **)v5);
  v15.location = 0;
  v15.length = v3;
  CFArrayGetValues(v1, v15, (const void **)v8);
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v10 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9AEB8];
  v11 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  gTypeForProtocol = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v8, (const void **)v5, Count, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  result = CFDictionaryCreate(v9, (const void **)v5, (const void **)v8, v3, v10, v11);
  gProtocolForType = (uint64_t)result;
  return result;
}

const void *getProtocolForServiceType(void *key)
{
  if (gDictionaryOnce != -1)
    dispatch_once(&gDictionaryOnce, &__block_literal_global_120);
  return CFDictionaryGetValue((CFDictionaryRef)gProtocolForType, key);
}

uint64_t SharingFastSetRetain()
{
  return (*(uint64_t (**)(void))(MEMORY[0x1E0C9B3B0] + 8))();
}

uint64_t SharingFastSetRelease()
{
  return (*(uint64_t (**)(void))(MEMORY[0x1E0C9B3B0] + 16))();
}

uint64_t SharingFastSetCopyDescription()
{
  return (*(uint64_t (**)(void))(MEMORY[0x1E0C9B3B0] + 24))();
}

uint64_t SharingFastDictionaryKeyRetain()
{
  return (*(uint64_t (**)(void))(MEMORY[0x1E0C9B390] + 8))();
}

uint64_t SharingFastDictionaryKeyRelease()
{
  return (*(uint64_t (**)(void))(MEMORY[0x1E0C9B390] + 16))();
}

uint64_t SharingFastDictionaryKeyCopyDescription()
{
  return (*(uint64_t (**)(void))(MEMORY[0x1E0C9B390] + 24))();
}

CFDictionaryRef initKindMap()
{
  uint64_t v0;
  int64x2_t v1;
  int64x2_t v2;
  CFDictionaryRef result;
  _OWORD v4[12];
  void *values[25];

  v0 = 0;
  values[24] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("Root");
  values[1] = CFSTR("Bonjour");
  values[2] = CFSTR("Windows");
  values[3] = CFSTR("Domain");
  values[4] = CFSTR("Workgroup");
  values[5] = CFSTR("Volume");
  values[6] = CFSTR("Printer");
  values[7] = CFSTR("ADisk");
  values[8] = CFSTR("ODisk");
  values[9] = CFSTR("Person");
  values[10] = CFSTR("Me");
  values[11] = CFSTR("Disabled");
  values[12] = CFSTR("Unknown");
  values[13] = CFSTR("Monogram");
  values[14] = CFSTR("Recent");
  values[15] = CFSTR("Connected");
  values[16] = CFSTR("Managed");
  values[17] = CFSTR("AirDrop");
  values[18] = CFSTR("Classroom");
  values[19] = CFSTR("ClassroomGroup");
  values[20] = CFSTR("ClassroomCourse");
  values[21] = CFSTR("Suggestion");
  values[22] = CFSTR("Rapport");
  values[23] = CFSTR("All");
  memset(v4, 0, sizeof(v4));
  v1 = (int64x2_t)xmmword_1A2AF75F0;
  v2 = vdupq_n_s64(2uLL);
  do
  {
    v4[v0] = v1;
    v1 = vaddq_s64(v1, v2);
    ++v0;
  }
  while (v0 != 12);
  gOrderedKinds = (uint64_t)CFArrayCreate(0, (const void **)values, 24, MEMORY[0x1E0C9B378]);
  result = CFDictionaryCreate(0, (const void **)values, (const void **)v4, 24, &kSharingFastDictionaryKeyCallBacks, 0);
  gKindMap = (uint64_t)result;
  return result;
}

void sub_1A2867E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A286826C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1A28683F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1A2868584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1A2868710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1A2868E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1A2869954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A286A318(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1A286AD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A286C214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A286C598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A286C91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A286E64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A286E780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t SFNilEqual(unint64_t a1, uint64_t a2)
{
  if (a1 | a2)
    return objc_msgSend((id)a1, "isEqual:", a2);
  else
    return 1;
}

CFStringRef SFLocalizedStringForKey(const __CFString *a1)
{
  return (id)copyLocalizedStringForKey(a1);
}

CFStringRef SFLocalizedStringForKeyInStringsFileNamed(const __CFString *a1, const __CFString *a2)
{
  return (id)copyLocalizedStringForKeyInStringsFile(a1, a2);
}

id SFNonLocalizedString(void *a1)
{
  return a1;
}

id SFHexStringForBase64EncodedString(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;
  void *v4;

  v1 = (objc_class *)MEMORY[0x1E0C99D50];
  v2 = a1;
  v3 = (void *)objc_msgSend([v1 alloc], "initWithBase64EncodedString:options:", v2, 0);

  SFHexStringForDataEx(v3, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id SFHexStringForDataEx(void *a1, char a2)
{
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  id v9;
  void *v10;

  v3 = (void *)objc_msgSend(a1, "copy");
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_retainAutorelease(v3);
  v6 = objc_msgSend(v5, "bytes");
  if (objc_msgSend(v5, "length"))
  {
    v7 = 0;
    do
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%c%c"), a0123456789abcd[(unint64_t)*(unsigned __int8 *)(v6 + v7) >> 4], a0123456789abcd[*(_BYTE *)(v6 + v7) & 0xF]);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "appendString:", v8);

      ++v7;
    }
    while (v7 < objc_msgSend(v5, "length"));
  }
  if ((a2 & 1) != 0)
  {
    v9 = v4;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<%@>"), v4);
    v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  v10 = v9;

  return v10;
}

id SFHexStringForData(void *a1)
{
  return SFHexStringForDataEx(a1, 0);
}

id SFDataFromCGImage(void *a1)
{
  void (**v2)(_QWORD);
  CGColorSpace *ColorSpace;
  __CFString *v4;
  CGDataProvider *DataProvider;
  CFDataRef v6;
  __CFDictionary *v7;
  _BOOL4 ShouldInterpolate;
  const void **v9;
  void *DataMutable;
  _QWORD aBlock[5];

  CFRetain(a1);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __SFDataFromCGImage_block_invoke;
  aBlock[3] = &__block_descriptor_40_e5_v8__0l;
  aBlock[4] = a1;
  v2 = (void (**)(_QWORD))_Block_copy(aBlock);
  ColorSpace = CGImageGetColorSpace((CGImageRef)a1);
  v4 = (__CFString *)CGColorSpaceCopyName(ColorSpace);
  DataProvider = CGImageGetDataProvider((CGImageRef)a1);
  v6 = CGDataProviderCopyData(DataProvider);
  v7 = (__CFDictionary *)objc_opt_new();
  CGImageGetWidth((CGImageRef)a1);
  CFDictionarySetInt64();
  CGImageGetHeight((CGImageRef)a1);
  CFDictionarySetInt64();
  CGImageGetBitsPerComponent((CGImageRef)a1);
  CFDictionarySetInt64();
  CGImageGetBitsPerPixel((CGImageRef)a1);
  CFDictionarySetInt64();
  CGImageGetBytesPerRow((CGImageRef)a1);
  CFDictionarySetInt64();
  CGImageGetBitmapInfo((CGImageRef)a1);
  CFDictionarySetInt64();
  CGImageGetRenderingIntent((CGImageRef)a1);
  CFDictionarySetInt64();
  ShouldInterpolate = CGImageGetShouldInterpolate((CGImageRef)a1);
  v9 = (const void **)MEMORY[0x1E0C9AE50];
  if (!ShouldInterpolate)
    v9 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v7, CFSTR("si"), *v9);
  -[__CFDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v4, CFSTR("cn"));
  -[__CFDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v6, CFSTR("id"));
  DataMutable = (void *)OPACKEncoderCreateDataMutable();

  v2[2](v2);
  return DataMutable;
}

void sub_1A286EC58(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

CGImageRef SFCreateCGImageFromData(void *a1)
{
  id v1;
  void *v2;
  __CFString *v3;
  CGColorSpaceRef v4;
  uint64_t v5;
  CGDataProvider *v6;
  void (**v7)(_QWORD);
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  CGColorRenderingIntent intent;
  CGImageRef v14;
  const __CFData *v16;
  void *v17;
  size_t Int64;
  CGColorSpace *v19;
  void (**v20)(_QWORD);
  _QWORD v21[5];
  _QWORD aBlock[5];
  int v23;

  v1 = a1;
  v23 = 0;
  v2 = (void *)OPACKDecodeData();
  CFStringGetTypeID();
  CFDictionaryGetTypedValue();
  v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!v3)
    v3 = (__CFString *)(id)*MEMORY[0x1E0C9DA10];
  v4 = CGColorSpaceCreateWithName(v3);
  v5 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __SFCreateCGImageFromData_block_invoke;
  aBlock[3] = &__block_descriptor_40_e5_v8__0l;
  aBlock[4] = v4;
  v20 = (void (**)(_QWORD))_Block_copy(aBlock);
  CFDataGetTypeID();
  CFDictionaryGetTypedValue();
  v19 = v4;
  v16 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  v17 = v1;
  v6 = CGDataProviderCreateWithCFData(v16);
  v21[0] = v5;
  v21[1] = 3221225472;
  v21[2] = __SFCreateCGImageFromData_block_invoke_2;
  v21[3] = &__block_descriptor_40_e5_v8__0l;
  v21[4] = v6;
  v7 = (void (**)(_QWORD))_Block_copy(v21);
  Int64 = CFDictionaryGetInt64();
  v8 = CFDictionaryGetInt64();
  v9 = CFDictionaryGetInt64();
  v10 = CFDictionaryGetInt64();
  v11 = CFDictionaryGetInt64();
  LODWORD(v4) = CFDictionaryGetInt64Ranged();
  v12 = CFDictionaryGetInt64();
  intent = CFDictionaryGetInt64();
  v14 = CGImageCreate(Int64, v8, v9, v10, v11, v19, (CGBitmapInfo)v4, v6, 0, v12 != 0, intent);
  v7[2](v7);

  v20[2](v20);
  return v14;
}

void sub_1A286EF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  (*(void (**)(void))(a16 + 16))();
  _Unwind_Resume(a1);
}

id SFDataFromHexString(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  char v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  char v16;
  char v17;
  char v19;

  v1 = a1;
  v2 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR("$ <>:\n"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR("0123456789ABCDEFabcdef"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "invertedSet");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "componentsSeparatedByCharactersInSet:", v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "componentsJoinedByString:", &stru_1E483B8E8);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = objc_msgSend(v7, "rangeOfCharacterFromSet:", v5);
  if ((objc_msgSend(v7, "length") & 1) == 0 && v8 == 0x7FFFFFFFFFFFFFFFLL && objc_msgSend(v7, "length"))
  {
    v9 = 0;
    do
    {
      v10 = objc_msgSend(v7, "characterAtIndex:", v9);
      if ((v10 - 65) <= 5)
        v11 = v10 - 55;
      else
        v11 = 0;
      if ((v10 - 97) <= 5)
        v11 = v10 - 87;
      if ((v10 - 48) <= 9)
        v12 = v10 - 48;
      else
        v12 = v11;
      v13 = v9 + 1;
      v14 = objc_msgSend(v7, "characterAtIndex:", v13);
      v15 = v14 - 48;
      if ((v14 - 65) <= 5)
        v16 = v14 - 55;
      else
        v16 = 0;
      if ((v14 - 97) <= 5)
        v17 = v14 - 87;
      else
        v17 = v16;
      if (v15 > 9)
        LOBYTE(v15) = v17;
      v19 = v15 | (16 * v12);
      objc_msgSend(v2, "appendBytes:length:", &v19, 1);
      v9 = v13 + 1;
    }
    while (v9 < objc_msgSend(v7, "length"));
  }

  return v2;
}

id SFStringComponentsFromTimeInterval(int a1, double a2)
{
  void *v4;
  unint64_t v5;
  double v6;
  unint64_t v7;
  double v8;
  unint64_t v9;
  void *v10;
  void *v11;
  const __CFString *v12;
  int v13;
  const __CFString *v14;
  void *v15;
  void *v16;
  const __CFString *v17;
  int v18;
  const __CFString *v19;
  double v20;
  void *v21;
  void *v22;
  const __CFString *v23;
  int v24;
  const __CFString *v25;
  void *v26;
  void *v27;
  const __CFString *v28;
  int v29;
  const __CFString *v30;
  void *v31;
  void *v32;
  const __CFString *v33;
  int v34;
  const __CFString *v35;

  v4 = (void *)objc_opt_new();
  v5 = (unint64_t)(a2 / 86400.0);
  v6 = a2 - (double)(86400 * v5);
  v7 = (unint64_t)(v6 / 3600.0);
  v8 = v6 - (double)(3600 * v7);
  v9 = (unint64_t)(v8 / 60.0);
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("%ld"), v5);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (a1)
      v12 = CFSTR("d");
    else
      v12 = CFSTR(" day");
    objc_msgSend(v10, "appendString:", v12);
    if (v5 == 1)
      v13 = 1;
    else
      v13 = a1;
    if (v13)
      v14 = &stru_1E483B8E8;
    else
      v14 = CFSTR("s");
    objc_msgSend(v11, "appendString:", v14);
    objc_msgSend(v4, "addObject:", v11);

  }
  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("%ld"), v7);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v15;
    if (a1)
      v17 = CFSTR("h");
    else
      v17 = CFSTR(" hour");
    objc_msgSend(v15, "appendString:", v17);
    if (v7 == 1)
      v18 = 1;
    else
      v18 = a1;
    if (v18)
      v19 = &stru_1E483B8E8;
    else
      v19 = CFSTR("s");
    objc_msgSend(v16, "appendString:", v19);
    objc_msgSend(v4, "addObject:", v16);

  }
  v20 = v8 - (double)(60 * v9);
  if (v9)
  {
    objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("%ld"), v9);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v21;
    if (a1)
      v23 = CFSTR("m");
    else
      v23 = CFSTR(" minute");
    objc_msgSend(v21, "appendString:", v23);
    if (v9 == 1)
      v24 = 1;
    else
      v24 = a1;
    if (v24)
      v25 = &stru_1E483B8E8;
    else
      v25 = CFSTR("s");
    objc_msgSend(v22, "appendString:", v25);
    objc_msgSend(v4, "addObject:", v22);

  }
  if (v20 >= 1.0)
  {
    objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("%ld"), (uint64_t)v20);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = v26;
    if (a1)
      v28 = CFSTR("s");
    else
      v28 = CFSTR(" second");
    objc_msgSend(v26, "appendString:", v28);
    if (v20 == 1.0)
      v29 = 1;
    else
      v29 = a1;
    if (v29)
      v30 = &stru_1E483B8E8;
    else
      v30 = CFSTR("s");
    objc_msgSend(v27, "appendString:", v30);
    objc_msgSend(v4, "addObject:", v27);

  }
  if (!(v7 | v5 | v9) && v20 < 5.0)
  {
    objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("%ld"), (unint64_t)((v20 - (double)(uint64_t)v20) * 1000.0));
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = v31;
    if (a1)
      v33 = CFSTR("ms");
    else
      v33 = CFSTR(" millisecond");
    objc_msgSend(v31, "appendString:", v33);
    if ((unint64_t)((v20 - (double)(uint64_t)v20) * 1000.0) == 1)
      v34 = 1;
    else
      v34 = a1;
    if (v34)
      v35 = &stru_1E483B8E8;
    else
      v35 = CFSTR("s");
    objc_msgSend(v32, "appendString:", v35);
    objc_msgSend(v4, "addObject:", v32);

  }
  return v4;
}

id SFStringFromTimeInterval(int a1, double a2)
{
  __CFString *v4;
  __CFString *v5;
  void *v6;
  void *v7;

  v4 = CFSTR(", ");
  if (a1)
    v4 = &stru_1E483B8E8;
  v5 = v4;
  SFStringComponentsFromTimeInterval(a1, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "componentsJoinedByString:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

__CFString *SFAdvertisementDescriptionFromPayloadData(void *a1)
{
  if (!a1)
    return CFSTR("GOODBYE");
  SFHexStringForDataEx(a1, 0);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

id SFCompactStringFromCollection(void *a1)
{
  id v1;
  void *v2;
  int v3;
  void *v4;
  void *v5;

  v1 = a1;
  objc_msgSend(v1, "description");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v1, "conformsToProtocol:", &unk_1EE6D3790);

  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0CB38E8], "regularExpressionWithPattern:options:error:", CFSTR("((){4})|\\\\+n|\n"), 0, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringByReplacingMatchesInString:options:range:withTemplate:", v2, 0, 0, objc_msgSend(v2, "length"), &stru_1E483B8E8);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\\\""), CFSTR("\""));
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v2;
}

id SFNonBreakingStringFromDeviceName(void *a1)
{
  id v1;
  uint64_t i;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v19 = objc_msgSend(&unk_1E4891750, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v19)
  {
    v18 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v19; ++i)
      {
        if (*(_QWORD *)v21 != v18)
          objc_enumerationMutation(&unk_1E4891750);
        v3 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
        objc_msgSend(v3, "stringByAppendingString:", CFSTR(" "), v18);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(CFSTR(" "), "stringByAppendingString:", v3);
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "stringByAppendingString:", CFSTR(" "));
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), CFSTR(" "));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v1, "hasPrefix:", v4))
        {
          v8 = objc_msgSend(v1, "rangeOfString:", v4);
          objc_msgSend(v1, "stringByReplacingOccurrencesOfString:withString:options:range:", v3, v7, 0, v8, v9);
          v10 = objc_claimAutoreleasedReturnValue();

          v1 = (id)v10;
        }
        if (objc_msgSend(v1, "hasSuffix:", v5))
        {
          v11 = objc_msgSend(v1, "rangeOfString:options:", v5, 4);
          objc_msgSend(v1, "stringByReplacingOccurrencesOfString:withString:options:range:", v3, v7, 0, v11, v12);
          v13 = objc_claimAutoreleasedReturnValue();

          v1 = (id)v13;
        }
        v14 = v1;
        objc_msgSend(CFSTR(" "), "stringByAppendingString:", v7);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "stringByAppendingString:", CFSTR(" "));
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v1, "stringByReplacingOccurrencesOfString:withString:", v6, v16);
        v1 = (id)objc_claimAutoreleasedReturnValue();

      }
      v19 = objc_msgSend(&unk_1E4891750, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v19);
  }
  return v1;
}

uint64_t SFIsBluetoothEnabled()
{
  _BOOL8 v0;
  void *v1;
  id v2;
  NSObject *v3;
  id v5;

  if (SFDeviceIsVirtualMachine())
    return 1;
  v5 = 0;
  objc_msgSend(MEMORY[0x1E0C97740], "controllerInfoAndReturnError:", &v5);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v5;
  if (v2)
  {
    framework_log();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      SFIsBluetoothEnabled_cold_1();

    v0 = 0;
  }
  else
  {
    v0 = objc_msgSend(v1, "bluetoothState") == 5;
  }

  return v0;
}

BOOL SFDeviceIsVirtualMachine()
{
  if (SFDeviceIsVirtualMachine_onceToken[0] != -1)
    dispatch_once(SFDeviceIsVirtualMachine_onceToken, &__block_literal_global_201_0);
  return SFDeviceIsVirtualMachine_result && IsAppleInternalBuild() != 0;
}

uint64_t SFIsDeviceAppleTV()
{
  return 0;
}

uint64_t SFIsDeviceAudioAccessory()
{
  if (SFIsDeviceAudioAccessory_onceToken != -1)
    dispatch_once(&SFIsDeviceAudioAccessory_onceToken, &__block_literal_global_10);
  return SFIsDeviceAudioAccessory_result;
}

uint64_t SFIsGreenTeaDevice()
{
  if (SFIsGreenTeaDevice_onceToken != -1)
    dispatch_once(&SFIsGreenTeaDevice_onceToken, &__block_literal_global_179);
  return SFIsGreenTeaDevice_result;
}

uint64_t SFIsPureGreenTeaDevice()
{
  if (SFIsPureGreenTeaDevice_onceToken != -1)
    dispatch_once(&SFIsPureGreenTeaDevice_onceToken, &__block_literal_global_184);
  return SFIsPureGreenTeaDevice_result;
}

uint64_t SFDeviceSupportsForceTouch()
{
  if (SFDeviceSupportsForceTouch_onceToken != -1)
    dispatch_once(&SFDeviceSupportsForceTouch_onceToken, &__block_literal_global_185);
  return SFDeviceSupportsForceTouch_supportsForceTouch;
}

uint64_t SFIsDevicePhone()
{
  if (SFIsDevicePhone_onceToken != -1)
    dispatch_once(&SFIsDevicePhone_onceToken, &__block_literal_global_188);
  return SFIsDevicePhone_isPhone;
}

uint64_t SFIsFMFAllowed()
{
  if (SFIsFMFAllowed_onceToken != -1)
    dispatch_once(&SFIsFMFAllowed_onceToken, &__block_literal_global_189);
  return SFIsFMFAllowed_isFMFAllowed;
}

uint64_t SFIsRangingSupported()
{
  return objc_msgSend((Class)getPRRangingDeviceClass[0](), "isSupported");
}

id SFDeviceProductVersion()
{
  if (SFDeviceProductVersion_onceToken[0] != -1)
    dispatch_once(SFDeviceProductVersion_onceToken, &__block_literal_global_197_0);
  return (id)SFDeviceProductVersion_result;
}

BOOL SFIsiCloudDriveEnabled()
{
  void *v0;
  void *v1;
  _BOOL8 v2;

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "ubiquityIdentityToken");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1 != 0;

  return v2;
}

uint64_t SFDeviceSupportsRanging()
{
  return 1;
}

uint64_t SFDeviceSupportsAWDL()
{
  return 1;
}

uint64_t SFDeviceSupportsAirDrop()
{
  SFDeviceIsVirtualMachine();
  return 1;
}

uint64_t SFDeviceSupportsRapportOnlyAirDropDiscovery()
{
  return _os_feature_enabled_impl();
}

uint64_t SFDeviceSupportsLegacyAirDrop()
{
  uint64_t result;

  if (disableAirDrop())
    return 0;
  result = forceOldMode();
  if ((_DWORD)result)
    return IsAppleInternalBuild() != 0;
  return result;
}

uint64_t SFDeviceSupportsContinuity()
{
  return 1;
}

uint64_t SFDeviceSupportsRemoteDisc()
{
  return 0;
}

uint64_t SFDeviceSupportsAutoUnlock()
{
  if ((SFDeviceClassCodeGet() == 1 || SFDeviceClassCodeGet() == 8)
    && _os_feature_enabled_impl())
  {
    return MGGetBoolAnswer();
  }
  else
  {
    return 0;
  }
}

uint64_t SFDeviceIsRealityDevice()
{
  int v0;
  int v1;
  unsigned int v2;
  unsigned int v3;

  v0 = SFDeviceClassCodeGet();
  v1 = SFDeviceClassCodeGet();
  v2 = _os_feature_enabled_impl();
  if (v0 == 3)
    v3 = v2;
  else
    v3 = 0;
  if (v1 == 8)
    return 1;
  else
    return v3;
}

uint64_t SFDeviceSupportsSiriWatchAuth()
{
  int v0;
  int v1;

  v0 = SFDeviceClassCodeGet();
  v1 = SFDeviceClassCodeGet();
  if (v0 == 7 || v1 == 1)
    return SFDeviceSupportsAutoUnlock();
  else
    return 0;
}

BOOL SFDeviceSupportsNanoWallet()
{
  int v0;
  int v1;

  v0 = SFDeviceClassCodeGet();
  v1 = SFDeviceClassCodeGet();
  return v0 == 7 || v1 == 1;
}

uint64_t SFDeviceSupportsUnlockClassC()
{
  uint64_t result;

  result = SFDeviceIsRealityDevice();
  if ((_DWORD)result)
    return _os_feature_enabled_impl();
  return result;
}

uint64_t SFDeviceSupportsMacUnlockPhonePairing()
{
  int v0;
  int v1;

  v0 = SFDeviceClassCodeGet();
  v1 = SFDeviceClassCodeGet();
  if (v0 == 5 || v1 == 1)
    return _os_feature_enabled_impl();
  else
    return 0;
}

uint64_t SFDeviceSupportsTVAudio()
{
  int v0;
  uint64_t result;

  v0 = SFDeviceClassCodeGet();
  if (SFDeviceIsVirtualMachine() && v0 == 4)
    return 1;
  result = MGGetBoolAnswer();
  if ((_DWORD)result)
    return MGGetBoolAnswer();
  return result;
}

uint64_t SFDeviceSupportsUSBC()
{
  return MGGetBoolAnswer();
}

uint64_t SFLostMode()
{
  void *v0;
  uint64_t v1;

  objc_msgSend((Class)getFMDFMIPManagerClass[0](), "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "lostModeIsActive");

  return v1;
}

uint64_t SFManagedLostMode()
{
  void *v0;
  uint64_t v1;

  objc_msgSend((Class)getFMDFMIPManagerClass[0](), "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isManagedLostModeActive");

  return v1;
}

BOOL SFDeviceTimeLimitEveryoneMode()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("OverrideTimeLimitEveryoneMode"), CFSTR("com.apple.sharingd"), 0) == 0;
}

uint64_t SFIsRunningUnitTests()
{
  if (SFIsRunningUnitTests_onceToken != -1)
    dispatch_once(&SFIsRunningUnitTests_onceToken, &__block_literal_global_222);
  return SFIsRunningUnitTests_result;
}

id SFTruncateAirDropSenderNameForUI(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;

  v1 = a1;
  if ((unint64_t)objc_msgSend(v1, "length") <= 0x28)
  {
    v4 = v1;
  }
  else
  {
    v2 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v1, "substringToIndex:", 39);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "stringWithFormat:", CFSTR("%@…"), v3);
    v4 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v4;
}

id SFTruncateAirDropFilenameForUI(void *a1)
{
  id v1;
  unint64_t v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = a1;
  v2 = objc_msgSend(v1, "length");
  v3 = v1;
  v4 = v3;
  v5 = v3;
  if (v2 >= 0x1A)
  {
    v5 = v3;
    if ((unint64_t)objc_msgSend(v3, "length") >= 0x1A)
    {
      v6 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(v4, "substringToIndex:", 10);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "substringFromIndex:", objc_msgSend(v4, "length") - 14);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "stringWithFormat:", CFSTR("%@…%@"), v7, v8);
      v5 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }

  return v5;
}

id SFStringIsJSON(void *a1)
{
  void *v1;
  void *v2;
  id v3;
  BOOL v4;
  void *v5;
  id v6;
  id v8;

  if (a1)
  {
    objc_msgSend(a1, "dataUsingEncoding:", 4);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    if (v1)
    {
      v8 = 0;
      objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v1, 0, &v8);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v8;
    }
    else
    {
      v3 = 0;
      v2 = 0;
    }

  }
  else
  {
    v3 = 0;
    v2 = 0;
  }
  if (v3)
    v4 = 1;
  else
    v4 = v2 == 0;
  if (v4)
    v5 = 0;
  else
    v5 = v2;
  v6 = v5;

  return v6;
}

uint64_t SFPlaygroundsAppAvailable()
{
  return SFRemovableSystemAppAvailable((uint64_t)CFSTR("com.apple.Playgrounds"));
}

uint64_t SFRemovableSystemAppAvailable(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  objc_msgSend(MEMORY[0x1E0CA5860], "applicationProxyForIdentifier:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "appState");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "isInstalled"))
  {
    objc_msgSend(v1, "appState");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "isRestricted") ^ 1;

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t SFStoreDemoMode()
{
  if (SFStoreDemoMode_onceToken != -1)
    dispatch_once(&SFStoreDemoMode_onceToken, &__block_literal_global_234);
  return SFStoreDemoMode_result;
}

uint64_t SFFilesAppAvailable()
{
  return SFRemovableSystemAppAvailable((uint64_t)CFSTR("com.apple.DocumentsApp"));
}

uint64_t SFWalletAppAvailable()
{
  return SFRemovableSystemAppAvailable((uint64_t)CFSTR("com.apple.Passbook"));
}

uint64_t SFVoiceMemosAppAvailable()
{
  return SFRemovableSystemAppAvailable((uint64_t)CFSTR("com.apple.VoiceMemos"));
}

id SFCreateLivePhotoBundle(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  void *v20;
  id v21;
  NSObject *v22;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a4;
  v9 = a3;
  objc_msgSend(a2, "path");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "path");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = 0;
  if (v8 && v10 && v11)
  {
    airdrop_log();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v11, "lastPathComponent");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "lastPathComponent");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v26 = v14;
      v27 = 2112;
      v28 = v15;
      _os_log_impl(&dword_1A2830000, v13, OS_LOG_TYPE_DEFAULT, "Creating live photo bundle with image %@ and video %@", buf, 0x16u);

    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.pvt"), v8);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "URLByAppendingPathComponent:", v16);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    buf[0] = 0;
    objc_msgSend(v12, "path");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v17, "fileExistsAtPath:isDirectory:", v18, buf);

    if ((v19 & 1) != 0 || buf[0])
      objc_msgSend(v17, "removeItemAtURL:error:", v12, 0);
    v20 = (void *)objc_msgSend(objc_alloc((Class)getPFVideoComplementClass[0]()), "initWithPathToVideo:pathToImage:", v10, v11);
    v24 = 0;
    objc_msgSend(v20, "writeToBundleAtURL:error:", v12, &v24);
    v21 = v24;
    if (v21)
    {
      airdrop_log();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        SFCreateLivePhotoBundle_cold_1(v12, (uint64_t)v21, v22);

      v12 = 0;
    }

  }
  return v12;
}

uint64_t SFShouldShowRepairProxCard(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t Int64Ranged;
  SFHeadphoneProduct *v5;

  v1 = a1;
  if (SFShouldShowWirelessSplitterProxCard(v1))
  {
    v2 = 1;
  }
  else
  {
    Int64Ranged = CFDictionaryGetInt64Ranged();
    v2 = 1;
    if (((Int64Ranged - 8194) > 0xE || ((1 << (Int64Ranged - 2)) & 0x7B9B) == 0)
      && (_DWORD)Int64Ranged != 0x10000)
    {
      v5 = -[SFHeadphoneProduct initWithProductID:]([SFHeadphoneProduct alloc], "initWithProductID:", Int64Ranged);
      v2 = -[SFHeadphoneProduct supportsRepair](v5, "supportsRepair");

    }
  }

  return v2;
}

BOOL SFShouldShowWirelessSplitterProxCard(void *a1)
{
  id v1;
  _BOOL8 v2;

  v1 = a1;
  v2 = CFPrefs_GetInt64() != 0;

  return v2;
}

uint64_t MGDeviceClassFromSFDeviceClassCode(char a1)
{
  if ((a1 - 1) > 7u)
    return 0xFFFFFFFFLL;
  else
    return dword_1A2AF7678[(char)(a1 - 1)];
}

id SFGenerateTypeList(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  objc_class *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "appendString:", CFSTR("(\n"));
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        v8 = (objc_class *)objc_opt_class();
        NSStringFromClass(v8);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "appendFormat:", CFSTR("\t%@\n"), v9);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  objc_msgSend(v2, "appendString:", CFSTR(")"));
  return v2;
}

id SFFilterStringsFromList(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  objc_class *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "appendString:", CFSTR("(\n"));
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v7);
        v9 = (void *)objc_opt_class();
        if (objc_msgSend(v9, "isEqual:", objc_opt_class()))
        {
          v10 = (objc_class *)objc_opt_class();
          NSStringFromClass(v10);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "appendFormat:", CFSTR("\t%@\n"), v11);

        }
        else
        {
          objc_msgSend(v2, "appendFormat:", CFSTR("\t%@\n"), v8);
        }
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

  objc_msgSend(v2, "appendString:", CFSTR(")"));
  return v2;
}

uint64_t SFShouldLogSensitiveDescriptions()
{
  if (SFShouldLogSensitiveDescriptions_onceToken != -1)
    dispatch_once(&SFShouldLogSensitiveDescriptions_onceToken, &__block_literal_global_263);
  return SFShouldLogSensitiveDescriptions_shouldLog;
}

void SFFakeFilesAndItemsArrayForURLs(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  int v19;
  const __CFString *v20;
  void *v21;
  void *v22;
  void *v23;
  const __CFString *v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v37;
    v9 = CFSTR("file");
    do
    {
      v10 = 0;
      v35 = v7;
      do
      {
        if (*(_QWORD *)v37 != v8)
          objc_enumerationMutation(v5);
        v11 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * v10);
        objc_msgSend(v11, "scheme");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "isEqualToString:", v9);

        if (v13)
        {
          SFGenerateFileInfoForURL(v11);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "addObject:", v14);

        }
        else
        {
          objc_msgSend(v11, "scheme");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v15, "isEqualToString:", CFSTR("assets-library"));

          if (v16)
          {
            objc_msgSend(v11, "absoluteString");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "lowercaseString");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v19 = objc_msgSend(v18, "containsString:", CFSTR(".mov"));

            if (v19)
              v20 = CFSTR("/Some/fake/folder/%@.mov");
            else
              v20 = CFSTR("/Some/fake/folder/%@.jpg");
            v21 = (void *)MEMORY[0x1E0C99E98];
            v22 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "UUIDString");
            v24 = v9;
            v25 = v8;
            v26 = v4;
            v27 = v5;
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "stringWithFormat:", v20, v28);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "fileURLWithPath:", v29);
            v30 = (void *)objc_claimAutoreleasedReturnValue();

            v5 = v27;
            v4 = v26;
            v8 = v25;
            v9 = v24;

            v7 = v35;
            SFGenerateFileInfoForURL(v30);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "addObject:", v31);

          }
          else
          {
            objc_msgSend(v34, "addObject:", v11);
          }
        }
        ++v10;
      }
      while (v7 != v10);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
    }
    while (v7);
  }

  *a2 = (id)objc_msgSend(v4, "copy");
  *a3 = (id)objc_msgSend(v34, "copy");

}

id SFGenerateFileInfoForURL(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  __CFString *v5;
  __CFString *PreferredIdentifierForTag;

  v1 = (void *)MEMORY[0x1E0C99E08];
  v2 = a1;
  objc_msgSend(v1, "dictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "lastPathComponent");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v4, CFSTR("FileName"));
    objc_msgSend(v4, "pathExtension");
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
    PreferredIdentifierForTag = (__CFString *)UTTypeCreatePreferredIdentifierForTag((CFStringRef)*MEMORY[0x1E0CA5A88], v5, 0);
    if (PreferredIdentifierForTag)
      objc_msgSend(v3, "setObject:forKeyedSubscript:", PreferredIdentifierForTag, CFSTR("FileType"));

  }
  return v3;
}

id SFContentTypes(void *a1, void *a2, _QWORD *a3, _BYTE *a4, _BYTE *a5)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  __CFString *v10;
  const __CFString *v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  __CFString *v16;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  __CFString *v22;
  void *v23;
  __CFString *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v38;
  id obj;
  const __CFString *inConformsToUTI;
  uint64_t v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[128];
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v38 = a2;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  obj = v6;
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v55, 16);
  if (v8)
  {
    v9 = v8;
    v44 = *(_QWORD *)v51;
    inConformsToUTI = (const __CFString *)*MEMORY[0x1E0CA5BC0];
    v10 = (__CFString *)*MEMORY[0x1E0CA5B90];
    v11 = (const __CFString *)*MEMORY[0x1E0CA5BF8];
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v51 != v44)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * i);
        objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("FileName"));
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "pathExtension");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("FileType"));
        v16 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (UTTypeConformsTo(v16, inConformsToUTI))
          v17 = v10;
        else
          v17 = v16;
        v18 = v17;

        if (SFIsImage(v18))
          v19 = v10;
        else
          v19 = v18;
        v20 = v19;

        if (UTTypeConformsTo(v20, v11))
          v21 = (__CFString *)v11;
        else
          v21 = v20;
        v22 = v21;

        objc_msgSend(v45, "setObject:forKeyedSubscript:", v22, v15);
        if (objc_msgSend(v7, "count"))
        {
          objc_msgSend(v7, "objectForKeyedSubscript:", v22);
          v23 = (void *)objc_claimAutoreleasedReturnValue();

          if (v23)
          {
            objc_msgSend(v7, "objectForKeyedSubscript:", v22);
            v24 = (__CFString *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", -[__CFString integerValue](v24, "integerValue") + 1);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "setObject:forKeyedSubscript:", v25, v22);

          }
          else
          {
            objc_msgSend(v7, "allKeys");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "objectAtIndexedSubscript:", 0);
            v24 = (__CFString *)objc_claimAutoreleasedReturnValue();

            if (SFIsImage(v24) && UTTypeConformsTo(v22, v11) || UTTypeConformsTo(v24, v11) && SFIsImage(v22))
              objc_msgSend(v7, "setObject:forKeyedSubscript:", &unk_1E4890718, v22);
            else
              *a4 = 1;
          }

        }
        else
        {
          objc_msgSend(v7, "setObject:forKeyedSubscript:", &unk_1E4890718, v22);
        }

      }
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v55, 16);
    }
    while (v9);
  }

  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v27 = v38;
  v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
  if (v28)
  {
    v29 = v28;
    v30 = *(_QWORD *)v47;
    do
    {
      for (j = 0; j != v29; ++j)
      {
        if (*(_QWORD *)v47 != v30)
          objc_enumerationMutation(v27);
        v32 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * j);
        if ((objc_msgSend(v32, "isFileURL") & 1) == 0)
        {
          objc_msgSend(v32, "scheme");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v7, "count"))
          {
            objc_msgSend(v7, "objectForKeyedSubscript:", v33);
            v34 = (void *)objc_claimAutoreleasedReturnValue();

            if (v34)
            {
              objc_msgSend(v7, "objectForKeyedSubscript:", v33);
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v35, "integerValue") + 1);
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v7, "setObject:forKeyedSubscript:", v36, v33);

            }
            else
            {
              *a4 = 1;
            }
          }
          else
          {
            *a5 = 1;
            objc_msgSend(v7, "setObject:forKeyedSubscript:", &unk_1E4890718, v33);
          }

        }
      }
      v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
    }
    while (v29);
  }

  *a3 = (id)objc_msgSend(v45, "copy");
  return v7;
}

BOOL SFIsLivePhotos(const __CFString *a1)
{
  return UTTypeConformsTo(a1, (CFStringRef)*MEMORY[0x1E0CA5BC0]) != 0;
}

BOOL SFIsImage(void *a1)
{
  __CFString *v1;
  _BOOL8 v2;

  v1 = a1;
  if (UTTypeConformsTo(v1, (CFStringRef)*MEMORY[0x1E0CA5B90]))
    v2 = 1;
  else
    v2 = UTTypeConformsTo(v1, (CFStringRef)*MEMORY[0x1E0CA5BC0]) != 0;

  return v2;
}

BOOL SFIsVideo(const __CFString *a1)
{
  return UTTypeConformsTo(a1, (CFStringRef)*MEMORY[0x1E0CA5BF8]) != 0;
}

uint64_t SFUpTicksDiffFromNowToString()
{
  double v0;

  mach_absolute_time();
  UpTicksToSecondsF();
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%fms"), v0 * 1000.0);
}

id SFDateToStringRFC3339(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  SFRFC3339DateFormatter();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringFromDate:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id SFRFC3339DateFormatter()
{
  id v0;
  void *v1;
  void *v2;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DC8]), "initWithLocaleIdentifier:", CFSTR("en_US_POSIX"));
  objc_msgSend(v0, "setLocale:", v1);
  objc_msgSend(v0, "setDateFormat:", CFSTR("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'"));
  objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneForSecondsFromGMT:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setTimeZone:", v2);

  return v0;
}

id SFStringToDateRFC3339(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  SFRFC3339DateFormatter();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dateFromString:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

BOOL SFIsCoreType(void *a1)
{
  const __CFString *v1;
  __CFString *v2;
  const __CFURL *v3;
  const __CFURL *v4;
  CFStringRef v5;
  CFStringRef v6;
  _BOOL8 v7;

  v1 = a1;
  v2 = (__CFString *)v1;
  if (v1 && (v3 = UTTypeCopyDeclaringBundleURL(v1)) != 0)
  {
    v4 = v3;
    v5 = CFURLCopyFileSystemPath(v3, kCFURLPOSIXPathStyle);
    if (v5)
    {
      v6 = v5;
      v7 = CFEqual(v5, CFSTR("/System/Library/CoreServices/MobileCoreTypes.bundle"))
        || CFEqual(v6, CFSTR("/System/Library/CoreServices/CoreTypes.bundle"));
      CFRelease(v6);
    }
    else
    {
      v7 = 0;
    }
    CFRelease(v4);
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

uint64_t SFIsAppleApp(void *a1, const char *a2)
{
  return objc_msgSend(a1, "hasPrefix:", CFSTR("com.apple."));
}

uint64_t SFIsAppStoreLink(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.AppStore")) & 1) != 0)
    v2 = 1;
  else
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.TVAppStore"));

  return v2;
}

BOOL SFIsCalendarEvent(const __CFString *a1)
{
  return UTTypeConformsTo(a1, CFSTR("com.apple.ical.ics")) != 0;
}

uint64_t SFIsContact(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "isEqualToString:", *MEMORY[0x1E0CA5CB0]) & 1) != 0)
  {
    v5 = 1;
  }
  else if (objc_msgSend(v3, "isEqualToString:", *MEMORY[0x1E0CA5B20]))
  {
    v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("vcf"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t SFIsCredential(void *a1)
{
  void (__cdecl *v1)();
  id v2;
  void *v3;
  uint64_t v4;

  v1 = (void (__cdecl *)())getSFSharablePasswordURLSchemeForAirDrop[0];
  v2 = a1;
  v1();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "isEqual:", v3);

  return v4;
}

BOOL SFIsePub(const __CFString *a1)
{
  return UTTypeConformsTo(a1, (CFStringRef)*MEMORY[0x1E0CA5B38]) != 0;
}

uint64_t SFIsiCloudFamilyLink(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  NSObject *v5;
  _BOOL4 v6;
  void *v7;
  void *v8;
  void *v9;
  const __CFString *v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  id v15;

  v1 = a1;
  v15 = 0;
  objc_msgSend(MEMORY[0x1E0CA5838], "appLinksWithURL:limit:error:", v1, 1, &v15);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v15;
  objc_msgSend(v2, "firstObject");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  airdrop_log();
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    if (v6)
      SFIsiCloudFamilyLink_cold_3(v4);

    objc_msgSend(v4, "targetApplicationProxy");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "bundleIdentifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    v10 = CFSTR("com.apple.family");
  }
  else
  {
    if (v6)
      SFIsiCloudFamilyLink_cold_2((uint64_t)v1, v3, v5);

    objc_msgSend(MEMORY[0x1E0CA5878], "defaultWorkspace");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "URLOverrideForURL:", v1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    airdrop_log();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      SFIsiCloudFamilyLink_cold_1(v7);

    objc_msgSend(v7, "scheme");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    v10 = CFSTR("family");
  }
  v13 = objc_msgSend(v8, "isEqualToString:", v10);

  return v13;
}

uint64_t SFIsiBooksLink(void *a1, const char *a2)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.iBooks"));
}

uint64_t SFIsiTunesULink(void *a1, const char *a2)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.itunesu"));
}

uint64_t SFIsiWorkLink(void *a1, const char *a2)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.iWork.link"));
}

uint64_t SFIsSharediCloudDocumentsLink(void *a1, const char *a2)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.CloudKit.ShareBear"));
}

uint64_t SFIsFindMyFriendsLink(void *a1, const char *a2)
{
  return objc_msgSend(a1, "isEqual:", CFSTR("fmf1"));
}

BOOL SFIsPhotosAssetBundle(const __CFString *a1)
{
  return UTTypeConformsTo(a1, CFSTR("com.apple.photos.asset-bundle")) != 0;
}

BOOL SFIsHEIF(const __CFString *a1)
{
  return UTTypeConformsTo(a1, CFSTR("public.heif-standard")) != 0;
}

uint64_t SFIsManagedConfigurationType(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0D47230];
  v2 = a1;
  objc_msgSend(v1, "sharedConnection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "acceptedFileExtensions");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "containsObject:", v2);

  return v5;
}

uint64_t SFIsKeynoteLive(void *a1, const char *a2)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.keynote.live.link"));
}

uint64_t SFIsKeynoteLiveLink(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", a1, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "path");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "pathComponents");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if ((unint64_t)objc_msgSend(v3, "count") < 2)
  {
    v6 = 0;
  }
  else
  {
    objc_msgSend(v3, "objectAtIndexedSubscript:", 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "lowercaseString");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isEqual:", CFSTR("keynote-live"));

  }
  return v6;
}

uint64_t SFIsMapLink(void *a1, const char *a2)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.Maps"));
}

uint64_t SFIsMusicLink(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.Music")) & 1) != 0)
    v2 = 1;
  else
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.TVMusic"));

  return v2;
}

uint64_t SFIsMusicStoreLink(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.MobileStore")) & 1) != 0
    || (objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.TVShows")) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.TVMovies"));
  }

  return v2;
}

uint64_t SFIsNote(void *a1, const char *a2)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("notesairdropdocument"));
}

uint64_t SFIsNewsLink(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", a1, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "scheme");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "lowercaseString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "host");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "lowercaseString");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v3, "isEqualToString:", CFSTR("https")))
    v6 = objc_msgSend(v5, "isEqualToString:", CFSTR("apple.news"));
  else
    v6 = 0;

  return v6;
}

uint64_t SFIsPass(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.pkpass")) & 1) != 0
    || (objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.pkpass-data")) & 1) != 0)
  {
    v5 = 1;
  }
  else if (objc_msgSend(v3, "isEqualToString:", *MEMORY[0x1E0CA5B20]))
  {
    v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("pkpass"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t SFIsPeerPayment(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.pkpeerpayment")) & 1) != 0)
  {
    v5 = 1;
  }
  else if (objc_msgSend(v3, "isEqualToString:", *MEMORY[0x1E0CA5B20]))
  {
    v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("pkpeerpayment"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

BOOL SFIsPDF(const __CFString *a1)
{
  return UTTypeConformsTo(a1, (CFStringRef)*MEMORY[0x1E0CA5C00]) != 0;
}

uint64_t SFIsPlaygroundItem(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("playground")) & 1) != 0)
    v2 = 1;
  else
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("playgroundbook"));

  return v2;
}

uint64_t SFIsIPA(void *a1, const char *a2)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("ipa"));
}

uint64_t SFIsPhotosApp(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.mobileslideshow")) & 1) != 0
    || (objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.Photos")) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.camera"));
  }

  return v2;
}

BOOL SFIsPlainText(const __CFString *a1)
{
  return UTTypeConformsTo(a1, (CFStringRef)*MEMORY[0x1E0CA5C20]) != 0;
}

uint64_t SFIsPodcastsLink(void *a1, const char *a2)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.podcasts"));
}

uint64_t SFIsPhoneLink(void *a1, const char *a2)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.InCallService"));
}

BOOL SFIsVoiceMemo(const __CFString *a1)
{
  return UTTypeConformsTo(a1, CFSTR("com.apple.m4a-audio")) != 0;
}

uint64_t SFIsWebLink(void *a1, const char *a2)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.mobilesafari"));
}

uint64_t SFIsPasskeyCredentialLink(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  getSFSharablePasswordClass[0]();
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v2 = objc_msgSend((Class)getSFSharablePasswordClass[0](), "safariCredentialURLHasPasskey:", v1);
  else
    v2 = 0;

  return v2;
}

uint64_t SFIsAllowedAirDropCredentialClient(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;

  v1 = SFIsAllowedAirDropCredentialClient_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&SFIsAllowedAirDropCredentialClient_onceToken, &__block_literal_global_365);
  v3 = objc_msgSend((id)SFIsAllowedAirDropCredentialClient_allowedClients, "containsObject:", v2);

  return v3;
}

id SFSharediCloudDocumentsLinkToAppName(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", a1, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "path");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "pathComponents");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if ((unint64_t)objc_msgSend(v3, "count") < 2)
  {
    v4 = 0;
  }
  else
  {
    objc_msgSend(v3, "objectAtIndexedSubscript:", 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v4;
}

id SFSharablePasswordCreateAirDropURL(uint64_t a1, __SecKey *a2)
{
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  NSObject *v8;
  NSObject *v9;
  id v10;
  void *v11;
  void *v12;
  const __CFString *v13;
  id v14;
  void *v15;
  uint8_t buf[4];
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v14 = 0;
  objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", a1, 1, &v14);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v14;
  if (v4)
  {
    airdrop_log();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v17 = v4;
      _os_log_impl(&dword_1A2830000, v5, OS_LOG_TYPE_DEFAULT, "### Failed to archive credential with error: %@", buf, 0xCu);
    }
    v6 = 0;
  }
  else
  {
    if (a2)
    {
      SFEncryptData(a2, v3);
      v8 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v8 = v3;
    }
    v5 = v8;
    if (v8)
    {
      -[NSObject base64EncodedStringWithOptions:](v8, "base64EncodedStringWithOptions:", 0);
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = objc_alloc_init(MEMORY[0x1E0CB3998]);
      objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("dataBlob"), v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = v11;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v15, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setQueryItems:", v12);

      if (a2)
        v13 = CFSTR("EncryptedCredential");
      else
        v13 = CFSTR("safaricredential");
      objc_msgSend(v10, "setScheme:", v13);
      objc_msgSend(v10, "URL");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      airdrop_log();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A2830000, v9, OS_LOG_TYPE_DEFAULT, "### Failed to encrypt data", buf, 2u);
      }
      v6 = 0;
    }

  }
  return v6;
}

id SFEncryptData(__SecKey *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFString *v13;
  uint64_t i;
  const __CFData *v15;
  CFDataRef v16;
  NSObject *v17;
  CFErrorRef error;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = objc_msgSend(v3, "length");
    v6 = 0;
    if (a1 && v5)
    {
      SFSplitDataChunks(v4, 0x7CuLL);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v9 = v7;
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v21;
        v13 = (const __CFString *)*MEMORY[0x1E0CD6E40];
        while (2)
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v21 != v12)
              objc_enumerationMutation(v9);
            v15 = *(const __CFData **)(*((_QWORD *)&v20 + 1) + 8 * i);
            error = 0;
            v16 = SecKeyCreateEncryptedData(a1, v13, v15, &error);
            if (error)
            {
              airdrop_log();
              v17 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
                SFEncryptData_cold_1();

              if (error)
              {
                CFRelease(error);
                error = 0;
              }

              v6 = 0;
              goto LABEL_19;
            }
            objc_msgSend(v8, "addObject:", v16);

          }
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
          if (v11)
            continue;
          break;
        }
      }

      SFJoinDataChunks(v8);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_19:

    }
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

id SFSharablePasswordAirDropUnencryptedURL(uint64_t a1)
{
  return SFSharablePasswordCreateAirDropURL(a1, 0);
}

id SFSharablePasswordAirDropURLEncryptedString(uint64_t a1, __SecKey *a2)
{
  void *v2;
  void *v3;

  if (a2)
  {
    SFSharablePasswordCreateAirDropURL(a1, a2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "absoluteString");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id SFSharablePasswordForAirDropURL(uint64_t a1, __SecKey *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  uint8_t v15[16];

  if (!a1)
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", a1, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "queryItems");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "firstObject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "value");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    airdrop_log();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      SFSharablePasswordForAirDropURL_cold_1();
    v11 = 0;
    goto LABEL_24;
  }
  v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBase64EncodedString:options:", v6, 0);
  v8 = v7;
  if (!v7 || !-[NSObject length](v7, "length"))
  {
    airdrop_log();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      SFSharablePasswordForAirDropURL_cold_2();
    goto LABEL_12;
  }
  if (!a2)
  {
    v9 = v8;
    goto LABEL_17;
  }
  SFDecryptData(a2, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  if (v9)
  {
LABEL_17:
    objc_msgSend((Class)getSFSharablePasswordClass[0](), "sharablePasswordFromData:", v9);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v12;
    if (v12)
    {
      v13 = v12;
    }
    else
    {
      airdrop_log();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        SFSharablePasswordForAirDropURL_cold_3();

    }
    goto LABEL_23;
  }
  airdrop_log();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1A2830000, v9, OS_LOG_TYPE_DEFAULT, "### Failed to decrypt data", v15, 2u);
  }
LABEL_12:
  v11 = 0;
LABEL_23:

LABEL_24:
  return v11;
}

id SFDecryptData(__SecKey *a1, void *a2)
{
  id v3;
  void *v4;
  size_t BlockSize;
  void *v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v12;
  uint64_t i;
  const __CFData *v14;
  CFDataRef v15;
  void *v16;
  NSObject *v17;
  CFErrorRef error;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (!v3 || !objc_msgSend(v3, "length"))
  {
    airdrop_log();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      SFDecryptData_cold_1();
    goto LABEL_15;
  }
  if (!a1)
  {
    airdrop_log();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      SFDecryptData_cold_2();
LABEL_15:
    v16 = 0;
    goto LABEL_22;
  }
  BlockSize = SecKeyGetBlockSize(a1);
  SFSplitDataChunks(v4, BlockSize);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v8 = v6;
  v9 = -[NSObject countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v21;
    v12 = (const __CFString *)*MEMORY[0x1E0CD6E40];
    while (2)
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v21 != v11)
          objc_enumerationMutation(v8);
        v14 = *(const __CFData **)(*((_QWORD *)&v20 + 1) + 8 * i);
        error = 0;
        v15 = SecKeyCreateDecryptedData(a1, v12, v14, &error);
        if (error)
        {
          airdrop_log();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            SFDecryptData_cold_3();

          if (error)
          {
            CFRelease(error);
            error = 0;
          }

          v16 = 0;
          goto LABEL_21;
        }
        objc_msgSend(v7, "addObject:", v15);

      }
      v10 = -[NSObject countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      if (v10)
        continue;
      break;
    }
  }

  SFJoinDataChunks(v7);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_21:

LABEL_22:
  return v16;
}

id SFSharablePasswordForUnencryptedAirDropURL(uint64_t a1)
{
  return SFSharablePasswordForAirDropURL(a1, 0);
}

id SFSharablePasswordForURL(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  getSFSharablePasswordClass[0]();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend((Class)getSFSharablePasswordClass[0](), "sharablePasswordFromURL:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id SFSplitDataChunks(void *a1, unint64_t a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v5 = 0;
  if (v3 && a2)
  {
    if (objc_msgSend(v3, "length") <= a2)
    {
      v12[0] = v3;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 1);
      v5 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = (void *)objc_msgSend(v3, "mutableCopy");
      if (objc_msgSend(v6, "length"))
      {
        do
        {
          v7 = a2;
          if (objc_msgSend(v6, "length") <= a2)
            v7 = objc_msgSend(v6, "length");
          objc_msgSend(v6, "subdataWithRange:", 0, v7);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "addObject:", v8);
          objc_msgSend(v6, "subdataWithRange:", v7, objc_msgSend(v6, "length") - v7);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = (void *)objc_msgSend(v9, "mutableCopy");

          v6 = v10;
        }
        while (objc_msgSend(v10, "length"));
      }
      else
      {
        v10 = v6;
      }
      v5 = v4;

    }
  }

  return v5;
}

id SFJoinDataChunks(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DF0]);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(v2, "appendData:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v7++), (_QWORD)v9);
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

  return v2;
}

NSObject *SFFullTextFromRTIDataPayload(void *a1)
{
  Class (__cdecl *v1)();
  id v2;
  Class v3;
  void *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;

  if (a1)
  {
    v1 = (Class (__cdecl *)())getRTIInputSystemDataPayloadClass[0];
    v2 = a1;
    v3 = v1();
    objc_msgSend(v2, "data");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v2, "version");

    -[objc_class payloadWithData:version:](v3, "payloadWithData:version:", v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", &stru_1E483B8E8);
      objc_msgSend(v6, "documentState");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "documentState");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      if (v9)
      {
        objc_msgSend(v9, "contextBeforeInput");
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        if (v10)
        {
          objc_msgSend(v9, "contextBeforeInput");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSObject appendString:](v7, "appendString:", v11);

        }
        objc_msgSend(v9, "markedText");
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        if (v12)
        {
          objc_msgSend(v9, "markedText");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSObject appendString:](v7, "appendString:", v13);

        }
        objc_msgSend(v9, "contextAfterInput");
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        if (v14)
        {
          objc_msgSend(v9, "contextAfterInput");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSObject appendString:](v7, "appendString:", v15);

        }
        v16 = v7;
      }
      else
      {
        remote_log();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          SFFullTextFromRTIDataPayload_cold_2();

        v16 = 0;
      }

    }
    else
    {
      remote_log();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        SFFullTextFromRTIDataPayload_cold_1();
      v16 = 0;
    }

  }
  else
  {
    v16 = 0;
  }
  return v16;
}

uint64_t SFMinorWatchHardwareVersion(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;

  objc_msgSend(a1, "componentsSeparatedByString:", CFSTR(","));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend(v1, "count") < 2)
  {
    v3 = 0;
    goto LABEL_10;
  }
  objc_msgSend(v1, "objectAtIndexedSubscript:", 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v2, "length"))
    goto LABEL_7;
  v3 = objc_msgSend(v2, "intValue");
  if (!(_DWORD)v3)
  {
    auto_unlock_log();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      SFMinorWatchHardwareVersion_cold_1();

LABEL_7:
    v3 = 0;
  }

LABEL_10:
  return v3;
}

id SFSandboxExtensionDataByFileURLPathForURLs(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        if (objc_msgSend(v8, "isFileURL", (_QWORD)v13))
        {
          objc_msgSend(v8, "issueSandboxExtensionData");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "path");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, v10);

        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

  v11 = (void *)objc_msgSend(v2, "copy");
  return v11;
}

BOOL SFRemoteDeviceCanConnectOn5GHz(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  int v8;
  uint64_t v9;
  _BOOL8 v10;
  NSObject *v11;
  int v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "componentsSeparatedByString:", CFSTR(","));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend(v2, "count") < 2)
  {
    v6 = 0;
  }
  else
  {
    objc_msgSend(v2, "objectAtIndexedSubscript:", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "rangeOfString:", CFSTR("Watch"));
    if (v5)
    {
      objc_msgSend(v3, "substringFromIndex:", v4 + v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = 0;
    }

  }
  v7 = SFMinorWatchHardwareVersion(v1);
  if (!v6)
  {
    v10 = 1;
    goto LABEL_18;
  }
  v8 = v7;
  v9 = objc_msgSend(v6, "integerValue");
  v10 = v9 != 0;
  if (!v9)
  {
    tethering_log();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      SFRemoteDeviceCanConnectOn5GHz_cold_1();
    goto LABEL_17;
  }
  if (v9 >= 6 && (v9 != 6 || v8 < 10 || v8 >= 14))
  {
    tethering_log();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 138412290;
      v14 = v1;
      _os_log_impl(&dword_1A2830000, v11, OS_LOG_TYPE_DEFAULT, "Watch model %@ supports 5GHz.", (uint8_t *)&v13, 0xCu);
    }
LABEL_17:

    goto LABEL_18;
  }
  v10 = 0;
LABEL_18:

  return v10;
}

id SFRemoteTextInputPayloadFromLegacyAPI(int a1, void *a2)
{
  __CFString *v3;
  NSObject *v4;
  NSObject *v5;
  const __CFString *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  const __CFString *v10;
  NSObject *v11;
  id v12;
  Class v13;
  void *v14;
  void *v15;
  NSObject *v16;

  v3 = a2;
  switch(a1)
  {
    case 2:
      v4 = objc_alloc_init((Class)getRTITextOperationsClass[0]());
      v5 = v4;
      v6 = &stru_1E483B8E8;
      goto LABEL_13;
    case 3:
      v5 = objc_alloc_init((Class)getRTITextOperationsClass[0]());
      -[NSObject keyboardOutput](v5, "keyboardOutput");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setDeletionCount:", 1);
      goto LABEL_16;
    case 4:
      v8 = objc_alloc_init((Class)getRTITextOperationsClass[0]());
      v5 = v8;
      if (!v3)
      {
        remote_log();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          SFRemoteTextInputPayloadFromLegacyAPI_cold_3();
        goto LABEL_22;
      }
      -[NSObject keyboardOutput](v8, "keyboardOutput");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = v9;
      v10 = v3;
LABEL_15:
      objc_msgSend(v9, "setInsertionText:", v10);
LABEL_16:

      goto LABEL_17;
    case 5:
      v5 = objc_alloc_init((Class)getRTITextOperationsClass[0]());
      if (v3)
        goto LABEL_12;
      remote_log();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        SFRemoteTextInputPayloadFromLegacyAPI_cold_4();
      goto LABEL_22;
    case 8:
      v5 = objc_alloc_init((Class)getRTITextOperationsClass[0]());
      if (v3)
      {
LABEL_12:
        v4 = v5;
        v6 = v3;
LABEL_13:
        -[NSObject setTextToAssert:](v4, "setTextToAssert:", v6);
LABEL_17:
        v12 = objc_alloc_init((Class)getRTIInputSystemDataPayloadClass[0]());
        objc_msgSend(v12, "setTextOperations:", v5);
        v13 = (Class)getRTIDataPayloadClass[0]();
        objc_msgSend(v12, "data");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        -[objc_class payloadWithData:](v13, "payloadWithData:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        remote_log();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          SFRemoteTextInputPayloadFromLegacyAPI_cold_5();
LABEL_22:

LABEL_23:
        remote_log();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          SFRemoteTextInputPayloadFromLegacyAPI_cold_1();

        v15 = 0;
      }

      return v15;
    case 9:
      v5 = objc_alloc_init((Class)getRTITextOperationsClass[0]());
      -[NSObject keyboardOutput](v5, "keyboardOutput");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = v9;
      v10 = CFSTR("\n");
      goto LABEL_15;
    default:
      remote_log();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        SFRemoteTextInputPayloadFromLegacyAPI_cold_2(a1, v5);
      goto LABEL_23;
  }
}

void SFRemoteTextInputPayloadToLegacyAPI(void *a1, char *a2, _QWORD *a3)
{
  id v5;
  Class v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  uint8_t v23[16];

  v5 = a1;
  if (v5)
  {
    v6 = (Class)getRTIInputSystemDataPayloadClass[0]();
    objc_msgSend(v5, "data");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[objc_class payloadWithData:version:](v6, "payloadWithData:version:", v7, objc_msgSend(v5, "version"));
    v8 = objc_claimAutoreleasedReturnValue();

    -[NSObject textOperations](v8, "textOperations");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "keyboardOutput");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "insertionText");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11 && objc_msgSend(v11, "length") && !objc_msgSend(v11, "isEqualToString:", CFSTR("\n")))
    {
      v17 = 4;
      goto LABEL_15;
    }

    -[NSObject textOperations](v8, "textOperations");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "keyboardOutput");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "deletionCount");

    if (v14 == 1)
    {

      v15 = 3;
LABEL_20:
      *a2 = v15;
      goto LABEL_25;
    }
    -[NSObject textOperations](v8, "textOperations");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "textToAssert");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      if ((objc_msgSend(v11, "isEqual:", &stru_1E483B8E8) & 1) != 0)
      {

        v15 = 2;
        goto LABEL_20;
      }
      if (objc_msgSend(v11, "length"))
      {
        v17 = 5;
LABEL_15:
        v18 = (void *)objc_msgSend(v11, "copy");

        *a2 = v17;
        if (v18)
        {
          *a3 = (id)objc_msgSend(v18, "copy");

        }
        goto LABEL_25;
      }
    }

    -[NSObject textOperations](v8, "textOperations");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "keyboardOutput");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "insertionText");
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (v21 && (objc_msgSend(v21, "isEqualToString:", CFSTR("\n")) & 1) != 0)
    {

      v15 = 9;
      goto LABEL_20;
    }

  }
  else
  {
    remote_log();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_1A2830000, v8, OS_LOG_TYPE_DEFAULT, "### Cannot convert RTI payload: no payload", v23, 2u);
    }
  }

  *a2 = 0;
  remote_log();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    SFRemoteTextInputPayloadToLegacyAPI_cold_1();

LABEL_25:
}

id SFTextInputDataForRTIDataPayload(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v1, "version"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, CFSTR("v"));

    objc_msgSend(v1, "data");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      objc_msgSend(v1, "data");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v5, CFSTR("d"));

    }
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id SFRTIDataPayloadForData(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;

  v1 = a1;
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("d"));
  v2 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("v"));
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (v1 && v2 | v3)
  {
    objc_msgSend((Class)getRTIDataPayloadClass[0](), "payloadWithData:version:", v2, objc_msgSend((id)v3, "unsignedLongValue"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v6;
    if (v6)
    {
      v7 = v6;
    }
    else
    {
      remote_log();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        SFRTIDataPayloadForData_cold_1();

    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

__CFString *SFTextInputDataLogString(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  __CFString *v4;

  v1 = a1;
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("d"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("v"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%lu bytes, v=%lu"), objc_msgSend(v2, "length"), objc_msgSend(v3, "unsignedLongValue"));
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = CFSTR("No data");
  }

  return v4;
}

id SFSharediCloudDocumentsLinkToFileName(uint64_t a1)
{
  void *v1;
  void *v2;

  objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", a1, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "fragment");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t SFiTunesStoreLinkType(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", a1, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "path");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "pathComponents");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if ((unint64_t)objc_msgSend(v3, "count") < 3)
  {
    v5 = 0;
  }
  else
  {
    objc_msgSend(v3, "objectAtIndexedSubscript:", 2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "lowercaseString");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  if ((objc_msgSend(v5, "isEqual:", CFSTR("movie")) & 1) != 0)
  {
    v6 = 2;
  }
  else if ((objc_msgSend(v5, "isEqual:", CFSTR("tv-season")) & 1) != 0)
  {
    v6 = 3;
  }
  else if (objc_msgSend(v5, "isEqual:", CFSTR("audiobook")))
  {
    v6 = 4;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void _SFShimSetIsContentManaged(void *a1, uint64_t a2)
{
  id v3;

  v3 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "setIsContentManaged:", a2);
  else
    objc_msgSend(v3, "setSourceIsManaged:", a2);

}

void _SFShimSetUnderbarIsContentManaged(void *a1, uint64_t a2)
{
  id v3;

  v3 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "_setIsContentManaged:", a2);
  else
    objc_msgSend(v3, "_setSourceIsManaged:", a2);

}

id SFAirDropDownloadsURL()
{
  void *v0;
  void *v1;
  id v2;
  NSObject *v3;
  id v5;

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = 0;
  objc_msgSend(v0, "URLForDirectory:inDomain:appropriateForURL:create:error:", 15, 1, 0, 1, &v5);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v5;

  if (!v1)
  {
    framework_log();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      SFAirDropDownloadsURL_cold_1();

  }
  return v1;
}

id SFRealpathForFileURL(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  NSObject *v8;
  int *v9;
  _QWORD aBlock[5];
  uint8_t buf[24];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((objc_msgSend(v1, "isFileURL") & 1) == 0)
  {
    framework_log();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
      SFRealpathForFileURL_cold_4();
    goto LABEL_12;
  }
  v2 = (const char *)objc_msgSend(objc_retainAutorelease(v1), "fileSystemRepresentation");
  if (!v2)
  {
    framework_log();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
      SFRealpathForFileURL_cold_1();
    goto LABEL_12;
  }
  v3 = (uint64_t)v2;
  if (!*v2)
  {
    framework_log();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
      SFRealpathForFileURL_cold_2();
LABEL_12:
    v6 = 0;
    goto LABEL_13;
  }
  v4 = realpath_DARWIN_EXTSN(v2, 0);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __SFRealpathForFileURL_block_invoke;
  aBlock[3] = &__block_descriptor_40_e5_v8__0l;
  aBlock[4] = v4;
  v5 = (uint64_t)_Block_copy(aBlock);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    framework_log();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      v9 = __error();
      SFRealpathForFileURL_cold_3(v3, v9, buf, v8);
    }

    v6 = 0;
  }
  (*(void (**)(uint64_t))(v5 + 16))(v5);
LABEL_13:

  return v6;
}

void sub_1A2873E50(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

uint64_t SFCopyTypeIdentifierForColorArrayAndModelCode(const __CFArray *a1, uint64_t a2)
{
  CFIndex v4;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v6;
  CFTypeID v7;
  uint64_t v8;
  void *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  CFTypeID v12;
  void *v13;
  uint64_t v14;
  int v16;
  int valuePtr;
  __int16 v18;
  char v19;

  if (!a1)
    goto LABEL_16;
  if (CFArrayGetCount(a1) == 3)
  {
    v4 = 0;
    v19 = 0;
    v18 = 0;
    do
    {
      *((_BYTE *)&v18 + v4) = 0;
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, v4);
      if (ValueAtIndex)
      {
        v6 = ValueAtIndex;
        v7 = CFGetTypeID(ValueAtIndex);
        if (v7 == CFNumberGetTypeID())
        {
          valuePtr = 0;
          if (CFNumberGetValue(v6, kCFNumberIntType, &valuePtr))
            *((_BYTE *)&v18 + v4) = valuePtr;
        }
      }
      ++v4;
    }
    while (v4 != 3);
    v8 = _UTHardwareColorMakeWithRGBComponents();
    goto LABEL_10;
  }
  if (CFArrayGetCount(a1) != 1
    || (v10 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 0)) == 0
    || (v11 = v10, v12 = CFGetTypeID(v10), v12 != CFNumberGetTypeID())
    || (v16 = 0, !CFNumberGetValue(v11, kCFNumberSInt32Type, &v16)))
  {
LABEL_16:
    objc_msgSend(MEMORY[0x1E0CEC3F8], "_typeWithDeviceModelCode:", a2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_17;
  }
  v8 = _UTHardwareColorMakeWithIndex();
LABEL_10:
  objc_msgSend(MEMORY[0x1E0CEC3F8], "_typeWithDeviceModelCode:enclosureColor:", a2, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_17:
  v13 = v9;
  objc_msgSend(v9, "identifier");
  v14 = objc_claimAutoreleasedReturnValue();

  return v14;
}

uint64_t SFIsAnnounceCallsEnabled()
{
  return _os_feature_enabled_impl();
}

__CFString *SFShortHashArrayDescription(void *a1)
{
  id v1;
  void *v2;
  __CFString *v3;
  void *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  __CFString *v9;
  __CFString *v10;

  v1 = a1;
  v2 = v1;
  if (!v1 || !objc_msgSend(v1, "count"))
  {
    v3 = 0;
LABEL_14:
    v4 = 0;
    goto LABEL_15;
  }
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!v3 || !objc_msgSend(v2, "count"))
    goto LABEL_14;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = v4;
    objc_msgSend(v2, "objectAtIndexedSubscript:", v5);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if ((unint64_t)objc_msgSend(v4, "length") < 0xB)
    {
      -[__CFString appendString:](v3, "appendString:", v4);
    }
    else
    {
      objc_msgSend(v4, "substringWithRange:", 0, 5);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "substringFromIndex:", objc_msgSend(v4, "length") - 5);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[__CFString appendFormat:](v3, "appendFormat:", CFSTR("%@...%@"), v7, v8);

    }
    if (v5 < objc_msgSend(v2, "count") - 1)
      -[__CFString appendString:](v3, "appendString:", CFSTR(", "));
    ++v5;
  }
  while (v5 < objc_msgSend(v2, "count"));
LABEL_15:
  if (v3)
    v9 = v3;
  else
    v9 = CFSTR("<nil>");
  v10 = v9;

  return v10;
}

uint64_t SFCreateThumbnailForAirDropItem(void *a1, void *a2, unsigned int a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  BOOL v10;
  NSObject *v11;
  _BOOL4 v12;
  uint64_t v13;
  void *v14;
  dispatch_semaphore_t v15;
  NSObject *v16;
  NSObject *v17;
  dispatch_time_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  _QWORD block[4];
  id v26;
  NSObject *v27;
  __int128 *p_buf;
  uint8_t v29[4];
  uint64_t v30;
  __int128 buf;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  mach_absolute_time();
  objc_msgSend(v8, "pathExtension");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "length") == 0;
  airdrop_log();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_INFO);
  if (v10)
  {
    if (v12)
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v7;
      _os_log_impl(&dword_1A2830000, v11, OS_LOG_TYPE_INFO, "Genrating thumbnail for UTI: %@", (uint8_t *)&buf, 0xCu);
    }

    v13 = objc_msgSend(objc_alloc(MEMORY[0x1E0D3A820]), "initWithType:", v7);
  }
  else
  {
    if (v12)
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v9;
      _os_log_impl(&dword_1A2830000, v11, OS_LOG_TYPE_INFO, "Generating thumbnail for path extension: %@", (uint8_t *)&buf, 0xCu);
    }

    v13 = objc_msgSend(objc_alloc(MEMORY[0x1E0D3A820]), "initWithFileExtension:", v9);
  }
  v14 = (void *)v13;
  if (v13)
  {
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v32 = 0x2020000000;
    v33 = 0;
    v15 = dispatch_semaphore_create(0);
    dispatch_get_global_queue(a3, 0);
    v16 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __SFCreateThumbnailForAirDropItem_block_invoke;
    block[3] = &unk_1E482EFB8;
    v26 = v14;
    v17 = v15;
    v27 = v17;
    p_buf = &buf;
    dispatch_async(v16, block);

    v18 = dispatch_time(0, (uint64_t)(a4 * 1000000.0));
    if (dispatch_semaphore_wait(v17, v18))
    {
      airdrop_log();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        SFCreateThumbnailForAirDropItem_cold_2();

    }
    airdrop_log();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      mach_absolute_time();
      v21 = UpTicksToMilliseconds();
      *(_DWORD *)v29 = 134217984;
      v30 = v21;
      _os_log_impl(&dword_1A2830000, v20, OS_LOG_TYPE_DEFAULT, "Thumbnail generation took %ld ms", v29, 0xCu);
    }

    v22 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 24);
    _Block_object_dispose(&buf, 8);
  }
  else
  {
    airdrop_log();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      SFCreateThumbnailForAirDropItem_cold_1();

    v22 = 0;
  }

  return v22;
}

void sub_1A287448C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2874640(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

id SFCurrentAppName()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "localizedInfoDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = *MEMORY[0x1E0C9AAC8];
  objc_msgSend(v1, "objectForKey:", *MEMORY[0x1E0C9AAC8]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForInfoDictionaryKey:", v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v3)
    {
      objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "objectForInfoDictionaryKey:", CFSTR("CFBundleName"));
      v3 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  return v3;
}

void SFCurrentAppIconData(void *a1, double a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;

  v3 = a1;
  objc_msgSend(MEMORY[0x1E0D3A820], "applicationIcon");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D3A830]), "initWithSize:scale:", 40.0, 40.0, fmax(a2, 1.0));
  objc_msgSend(v4, "imageForDescriptor:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6 && (objc_msgSend(v6, "placeholder") & 1) == 0)
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __SFCurrentAppIconData_block_invoke;
    v13[3] = &unk_1E482E0F0;
    v8 = &v15;
    v15 = v3;
    v14 = v7;
    v10 = v3;
    sf_dispatch_on_main_queue(v13);

  }
  else
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __SFCurrentAppIconData_block_invoke_2;
    v11[3] = &unk_1E482EFE0;
    v8 = &v12;
    v12 = v3;
    v9 = v3;
    objc_msgSend(v4, "getImageForImageDescriptor:completion:", v5, v11);
  }

}

id SFSaveDataToTempFile(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  __CFString *v15;
  void *v16;
  void *v17;
  __CFString *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v9 = a3;
  v10 = a4;
  v11 = (void *)MEMORY[0x1E0CEC3F8];
  v12 = a1;
  objc_msgSend(v11, "_typeWithIdentifier:allowUndeclared:", a2, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "length"))
  {
    objc_msgSend(v9, "stringByAppendingPathExtensionForType:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (__CFString *)objc_msgSend(v14, "mutableCopy");

    -[__CFString replaceOccurrencesOfString:withString:options:range:](v15, "replaceOccurrencesOfString:withString:options:range:", CFSTR("/"), CFSTR("-"), 0, 0, -[__CFString length](v15, "length"));
    -[__CFString replaceOccurrencesOfString:withString:options:range:](v15, "replaceOccurrencesOfString:withString:options:range:", CFSTR(":"), CFSTR("-"), 0, 0, -[__CFString length](v15, "length"));
    if (a5)
    {
      -[__CFString pathExtension](v15, "pathExtension");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v16, "length"))
      {
        -[__CFString stringByDeletingPathExtension](v15, "stringByDeletingPathExtension");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%ld.%@"), v17, a5, v16);
        v18 = (__CFString *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%ld.%@"), v15, a5, v16);
        v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }

    }
    else
    {
      v18 = v15;
    }
  }
  else
  {
    objc_msgSend(v13, "preferredFilenameExtension");
    v19 = objc_claimAutoreleasedReturnValue();
    if (v19)
      v15 = (__CFString *)v19;
    else
      v15 = CFSTR("data");
    v20 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v13, "localizedDescription");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "stringWithFormat:", CFSTR("%@-%@-%ld.%@"), v21, v10, a5, v15);
    v18 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  NSTemporaryDirectory();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "stringByAppendingPathComponent:", v18);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "writeToFile:atomically:", v23, 1);

  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  return v24;
}

double SFSuggestedAirDropThumbnailSize(double a1)
{
  void *v2;
  void *v3;
  double v4;
  char v5;
  char v6;
  char v7;
  char v8;
  int v9;
  float v10;
  double v11;

  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "bundleIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.Passbook")) & 1) != 0)
  {
    v4 = 150.0;
  }
  else
  {
    v5 = objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.AppStore"));
    v4 = 150.0;
    if ((v5 & 1) == 0)
    {
      v6 = objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.MobileStore"), 150.0, 150.0);
      v4 = 150.0;
      if ((v6 & 1) == 0)
      {
        v7 = objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.Music"), 150.0, 150.0);
        v4 = 150.0;
        if ((v7 & 1) == 0)
        {
          v8 = objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.itunesu"), 150.0, 150.0);
          v4 = 150.0;
          if ((v8 & 1) == 0)
          {
            if ((objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.mobilephone"), 150.0, 150.0) & 1) != 0
              || (objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.MobileAddressBook")) & 1) != 0)
            {
              v4 = 40.0;
            }
            else
            {
              v9 = objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.VoiceMemos"));
              v4 = 270.0;
              if (v9)
                v4 = 166.0;
            }
          }
        }
      }
    }
  }
  v10 = 2.0 / a1;
  v11 = floor(v4 * v10);

  return v11;
}

__CFString *SFAirDropModelImageNameFromModelString(void *a1)
{
  id v1;
  __CFString *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  const __CFString *v10;
  const __CFString *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "hasPrefix:", CFSTR("iPhone")))
  {
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("iPhone8,4")) & 1) != 0)
    {
      v2 = CFSTR("iPhoneSE");
      goto LABEL_33;
    }
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("iPhone10,3")) & 1) != 0)
    {
      v2 = CFSTR("iPhoneX");
      goto LABEL_33;
    }
    v2 = CFSTR("iPhoneX");
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("iPhone10,6")) & 1) != 0)
      goto LABEL_33;
    objc_msgSend(v1, "stringByReplacingOccurrencesOfString:withString:", CFSTR("iPhone"), &stru_1E483B8E8);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "componentsSeparatedByString:", CFSTR(","));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "firstObject");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "integerValue");

    v10 = CFSTR("iPhone8");
    if ((unint64_t)(v9 - 15) >= 2)
      v11 = CFSTR("iPhoneX");
    else
      v11 = CFSTR("iPhone14Pro");
    if ((unint64_t)v9 >= 0xB)
      v10 = v11;
    if (v9 >= 7)
      v2 = (__CFString *)v10;
    else
      v2 = CFSTR("iPhoneSE");
LABEL_32:

    goto LABEL_33;
  }
  if (objc_msgSend(v1, "hasPrefix:", CFSTR("iPad")))
  {
    objc_msgSend(v1, "stringByReplacingOccurrencesOfString:withString:", CFSTR("iPad"), &stru_1E483B8E8);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "componentsSeparatedByString:", CFSTR(","));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "firstObject");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "integerValue");

    v2 = CFSTR("iPadPro");
    if (v6 != 8 && v6 <= 11)
    {
      if (objc_msgSend(&unk_1E4891768, "containsObject:", v1))
        v2 = CFSTR("iPadmini");
      else
        v2 = CFSTR("iPad");
    }
    goto LABEL_32;
  }
  if (objc_msgSend(v1, "hasPrefix:", CFSTR("MacPro")))
  {
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MacPro6,1")) & 1) != 0)
    {
      v2 = CFSTR("MacPro2");
      goto LABEL_33;
    }
    objc_msgSend(v1, "stringByReplacingOccurrencesOfString:withString:", CFSTR("MacPro"), &stru_1E483B8E8);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "componentsSeparatedByString:", CFSTR(","));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "firstObject");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "integerValue");

    if (v14 >= 6)
      v2 = CFSTR("MacPro3");
    else
      v2 = CFSTR("MacPro1");
    goto LABEL_32;
  }
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Mac14,13")) & 1) != 0
    || (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac14,14")) & 1) != 0
    || (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac13,1")) & 1) != 0
    || (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac13,2")) & 1) != 0)
  {
    v2 = CFSTR("MacStudio");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Mac14,2")) & 1) != 0
         || (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac14,15")) & 1) != 0
         || (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac15,12")) & 1) != 0
         || (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac15,13")) & 1) != 0)
  {
    v2 = CFSTR("MacBookAir2");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Mac14,7")) & 1) != 0
         || (objc_msgSend(v1, "isEqualToString:", CFSTR("MacBookPro17,1")) & 1) != 0)
  {
    v2 = CFSTR("MacBookPro2");
  }
  else
  {
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MacBookPro18,1")) & 1) != 0
      || (objc_msgSend(v1, "isEqualToString:", CFSTR("MacBookPro18,2")) & 1) != 0
      || (objc_msgSend(v1, "isEqualToString:", CFSTR("MacBookPro18,3")) & 1) != 0
      || (objc_msgSend(v1, "isEqualToString:", CFSTR("MacBookPro18,4")) & 1) != 0)
    {
      goto LABEL_46;
    }
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("iMac21,1")) & 1) != 0
      || (objc_msgSend(v1, "isEqualToString:", CFSTR("iMac21,2")) & 1) != 0
      || (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac15,4")) & 1) != 0
      || (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac15,5")) & 1) != 0)
    {
      v2 = CFSTR("iMac2");
      goto LABEL_33;
    }
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Macmini9,1")) & 1) != 0
      || (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac14,3")) & 1) != 0
      || (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac14,12")) & 1) != 0)
    {
      v2 = CFSTR("Macmini2");
      goto LABEL_33;
    }
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Mac14,5")) & 1) != 0
      || (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac14,6")) & 1) != 0
      || (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac14,9")) & 1) != 0
      || (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac14,10")) & 1) != 0
      || (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac15,3")) & 1) != 0)
    {
LABEL_46:
      v2 = CFSTR("MacBookPro3");
    }
    else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Mac15,6")) & 1) != 0
           || (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac15,8")) & 1) != 0
           || (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac15,10")) & 1) != 0
           || (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac15,7")) & 1) != 0
           || (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac15,9")) & 1) != 0
           || (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac15,11")) & 1) != 0)
    {
      v2 = CFSTR("MacBookProBlack");
    }
    else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Mac14,8")) & 1) != 0)
    {
      v2 = CFSTR("MacPro3");
    }
    else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("RealityDevice14,1")) & 1) != 0)
    {
      v2 = CFSTR("VisionPro");
    }
    else
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v16 = objc_msgSend(&unk_1E4891780, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      if (v16)
      {
        v17 = v16;
        v18 = *(_QWORD *)v23;
LABEL_74:
        v19 = 0;
        while (1)
        {
          if (*(_QWORD *)v23 != v18)
            objc_enumerationMutation(&unk_1E4891780);
          v20 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * v19);
          if ((objc_msgSend(v1, "hasPrefix:", v20) & 1) != 0)
            break;
          if (v17 == ++v19)
          {
            v17 = objc_msgSend(&unk_1E4891780, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
            if (v17)
              goto LABEL_74;
            goto LABEL_82;
          }
        }
        v2 = v20;
        if (v2)
          goto LABEL_33;
      }
LABEL_82:
      airdrop_log();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        SFAirDropModelImageNameFromModelString_cold_1();

      v2 = 0;
    }
  }
LABEL_33:

  return v2;
}

BOOL SFIsPencilHapticsEnabled()
{
  int AppBooleanValue;
  BOOL v1;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("effects-pencil-haptic"), CFSTR("com.apple.preferences.sounds"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v1 = AppBooleanValue == 0;
  else
    v1 = 0;
  return !v1;
}

Class initPRRangingDevice()
{
  Class result;

  if (ProximityLibrary_sOnce != -1)
    dispatch_once(&ProximityLibrary_sOnce, &__block_literal_global_611);
  result = objc_getClass("PRRangingDevice");
  classPRRangingDevice = (uint64_t)result;
  getPRRangingDeviceClass[0] = (uint64_t (*)())PRRangingDeviceFunction;
  return result;
}

id PRRangingDeviceFunction()
{
  return (id)classPRRangingDevice;
}

Class initFMDFMIPManager()
{
  Class result;

  if (FindMyDeviceLibrary_sOnce != -1)
    dispatch_once(&FindMyDeviceLibrary_sOnce, &__block_literal_global_614);
  result = objc_getClass("FMDFMIPManager");
  classFMDFMIPManager = (uint64_t)result;
  getFMDFMIPManagerClass[0] = (uint64_t (*)())FMDFMIPManagerFunction;
  return result;
}

id FMDFMIPManagerFunction()
{
  return (id)classFMDFMIPManager;
}

Class initPFVideoComplement()
{
  Class result;

  if (PhotosFormatsLibrary_sOnce != -1)
    dispatch_once(&PhotosFormatsLibrary_sOnce, &__block_literal_global_619);
  result = objc_getClass("PFVideoComplement");
  classPFVideoComplement = (uint64_t)result;
  getPFVideoComplementClass[0] = (uint64_t (*)())PFVideoComplementFunction;
  return result;
}

id PFVideoComplementFunction()
{
  return (id)classPFVideoComplement;
}

id initValSFSharablePasswordURLSchemeForAirDrop()
{
  id *v0;

  if (SafariFoundationLibrary_sOnce != -1)
    dispatch_once(&SafariFoundationLibrary_sOnce, &__block_literal_global_630);
  v0 = (id *)dlsym((void *)SafariFoundationLibrary_sLib, "SFSharablePasswordURLSchemeForAirDrop");
  if (v0)
    objc_storeStrong((id *)&constantValSFSharablePasswordURLSchemeForAirDrop, *v0);
  getSFSharablePasswordURLSchemeForAirDrop[0] = (uint64_t (*)())SFSharablePasswordURLSchemeForAirDropFunction;
  return (id)constantValSFSharablePasswordURLSchemeForAirDrop;
}

id SFSharablePasswordURLSchemeForAirDropFunction()
{
  return (id)constantValSFSharablePasswordURLSchemeForAirDrop;
}

Class initSFSharablePassword()
{
  Class result;

  if (SafariFoundationLibrary_sOnce != -1)
    dispatch_once(&SafariFoundationLibrary_sOnce, &__block_literal_global_630);
  result = objc_getClass("SFSharablePassword");
  classSFSharablePassword = (uint64_t)result;
  getSFSharablePasswordClass[0] = (uint64_t (*)())SFSharablePasswordFunction;
  return result;
}

id SFSharablePasswordFunction()
{
  return (id)classSFSharablePassword;
}

Class initRTIInputSystemDataPayload()
{
  Class result;

  if (RemoteTextInputLibrary_sOnce != -1)
    dispatch_once(&RemoteTextInputLibrary_sOnce, &__block_literal_global_634);
  result = objc_getClass("RTIInputSystemDataPayload");
  classRTIInputSystemDataPayload = (uint64_t)result;
  getRTIInputSystemDataPayloadClass[0] = (uint64_t (*)())RTIInputSystemDataPayloadFunction;
  return result;
}

id RTIInputSystemDataPayloadFunction()
{
  return (id)classRTIInputSystemDataPayload;
}

Class initRTITextOperations()
{
  Class result;

  if (RemoteTextInputLibrary_sOnce != -1)
    dispatch_once(&RemoteTextInputLibrary_sOnce, &__block_literal_global_634);
  result = objc_getClass("RTITextOperations");
  classRTITextOperations = (uint64_t)result;
  getRTITextOperationsClass[0] = (uint64_t (*)())RTITextOperationsFunction;
  return result;
}

id RTITextOperationsFunction()
{
  return (id)classRTITextOperations;
}

Class initRTIDataPayload()
{
  Class result;

  if (RemoteTextInputLibrary_sOnce != -1)
    dispatch_once(&RemoteTextInputLibrary_sOnce, &__block_literal_global_634);
  result = objc_getClass("RTIDataPayload");
  classRTIDataPayload = (uint64_t)result;
  getRTIDataPayloadClass[0] = (uint64_t (*)())RTIDataPayloadFunction;
  return result;
}

id RTIDataPayloadFunction()
{
  return (id)classRTIDataPayload;
}

void OUTLINED_FUNCTION_7_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

const __CFString *SFAirDropTransferUserResponseToString(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("Unknown");
  else
    return off_1E482F238[a1];
}

const __CFString *SFAirDropTransferFailureReasonToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("Unknown");
  else
    return off_1E482F258[a1 - 1];
}

void sub_1A287816C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFData *createTransferDataWithCGImage(uint64_t a1)
{
  return createImageDataWithSize(a1, 0);
}

void sub_1A2879FB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A287A378(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A287A6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  objc_sync_exit(v15);
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_1A287AA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A287B0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A287B594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1A287BB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A287BE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1A287C304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void SFAppleIDClientCopyCertificate(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  SFAppleIDClient *v9;
  SFAppleIDClient *v10;
  SFAppleIDClient *v11;
  int v12;
  _QWORD v13[4];
  SFAppleIDClient *v14;
  int v15;
  _QWORD v16[4];
  SFAppleIDClient *v17;
  id v18;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = v5;
  }
  else
  {
    SFMainQueue();
    v7 = objc_claimAutoreleasedReturnValue();
  }
  v8 = v7;
  if (!a1)
  {
    if (!v6)
      goto LABEL_9;
    v12 = 201201;
    goto LABEL_13;
  }
  if (v6)
  {
    v9 = objc_alloc_init(SFAppleIDClient);
    if (v9)
    {
      v10 = v9;
      -[SFAppleIDClient setDispatchQueue:](v9, "setDispatchQueue:", v8);
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = __SFAppleIDClientCopyCertificate_block_invoke;
      v16[3] = &unk_1E482F3F0;
      v17 = v10;
      v18 = v6;
      v11 = v10;
      -[SFAppleIDClient copyCertificateForAppleID:withCompletion:](v11, "copyCertificateForAppleID:withCompletion:", a1, v16);

LABEL_8:
      goto LABEL_9;
    }
    v12 = -6762;
LABEL_13:
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __SFAppleIDClientCopyCertificate_block_invoke_2;
    v13[3] = &unk_1E482D2E0;
    v14 = (SFAppleIDClient *)v6;
    v15 = v12;
    dispatch_async(v8, v13);
    v11 = v14;
    goto LABEL_8;
  }
LABEL_9:

}

void SFAppleIDClientCopyCertificateInfo(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  SFAppleIDClient *v9;
  SFAppleIDClient *v10;
  SFAppleIDClient *v11;
  int v12;
  _QWORD block[4];
  SFAppleIDClient *v14;
  int v15;
  _QWORD v16[4];
  SFAppleIDClient *v17;
  id v18;
  uint64_t v19;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = v5;
  }
  else
  {
    SFMainQueue();
    v7 = objc_claimAutoreleasedReturnValue();
  }
  v8 = v7;
  if (!a1)
  {
    if (!v6)
      goto LABEL_9;
    v12 = 201201;
    goto LABEL_13;
  }
  if (v6)
  {
    v9 = objc_alloc_init(SFAppleIDClient);
    if (v9)
    {
      v10 = v9;
      -[SFAppleIDClient setDispatchQueue:](v9, "setDispatchQueue:", v8);
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = __SFAppleIDClientCopyCertificateInfo_block_invoke;
      v16[3] = &unk_1E482F418;
      v19 = a1;
      v17 = v10;
      v18 = v6;
      v11 = v10;
      -[SFAppleIDClient myAccountWithCompletion:](v11, "myAccountWithCompletion:", v16);

LABEL_8:
      goto LABEL_9;
    }
    v12 = -6762;
LABEL_13:
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __SFAppleIDClientCopyCertificateInfo_block_invoke_2;
    block[3] = &unk_1E482D2E0;
    v14 = (SFAppleIDClient *)v6;
    v15 = v12;
    dispatch_async(v8, block);
    v11 = v14;
    goto LABEL_8;
  }
LABEL_9:

}

void SFAppleIDClientCopyIdentity(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  SFAppleIDClient *v9;
  SFAppleIDClient *v10;
  SFAppleIDClient *v11;
  int v12;
  _QWORD v13[4];
  SFAppleIDClient *v14;
  int v15;
  _QWORD v16[4];
  SFAppleIDClient *v17;
  id v18;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = v5;
  }
  else
  {
    SFMainQueue();
    v7 = objc_claimAutoreleasedReturnValue();
  }
  v8 = v7;
  if (!a1)
  {
    if (!v6)
      goto LABEL_9;
    v12 = 201201;
    goto LABEL_13;
  }
  if (v6)
  {
    v9 = objc_alloc_init(SFAppleIDClient);
    if (v9)
    {
      v10 = v9;
      -[SFAppleIDClient setDispatchQueue:](v9, "setDispatchQueue:", v8);
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = __SFAppleIDClientCopyIdentity_block_invoke;
      v16[3] = &unk_1E482F440;
      v17 = v10;
      v18 = v6;
      v11 = v10;
      -[SFAppleIDClient copyIdentityForAppleID:withCompletion:](v11, "copyIdentityForAppleID:withCompletion:", a1, v16);

LABEL_8:
      goto LABEL_9;
    }
    v12 = -6762;
LABEL_13:
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __SFAppleIDClientCopyIdentity_block_invoke_2;
    v13[3] = &unk_1E482D2E0;
    v14 = (SFAppleIDClient *)v6;
    v15 = v12;
    dispatch_async(v8, v13);
    v11 = v14;
    goto LABEL_8;
  }
LABEL_9:

}

void SFAppleIDClientCopyMyAccountInfo(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  SFAppleIDClient *v7;
  SFAppleIDClient *v8;
  SFAppleIDClient *v9;
  _QWORD v10[4];
  SFAppleIDClient *v11;
  int v12;
  _QWORD v13[4];
  SFAppleIDClient *v14;
  id v15;

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = v3;
  }
  else
  {
    SFMainQueue();
    v5 = objc_claimAutoreleasedReturnValue();
  }
  v6 = v5;
  if (v4)
  {
    v7 = objc_alloc_init(SFAppleIDClient);
    if (v7)
    {
      v8 = v7;
      -[SFAppleIDClient setDispatchQueue:](v7, "setDispatchQueue:", v6);
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = __SFAppleIDClientCopyMyAccountInfo_block_invoke;
      v13[3] = &unk_1E482F468;
      v14 = v8;
      v15 = v4;
      v9 = v8;
      -[SFAppleIDClient myAccountWithCompletion:](v9, "myAccountWithCompletion:", v13);

    }
    else
    {
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __SFAppleIDClientCopyMyAccountInfo_block_invoke_2;
      v10[3] = &unk_1E482D2E0;
      v11 = (SFAppleIDClient *)v4;
      v12 = -6762;
      dispatch_async(v6, v10);
      v9 = v11;
    }

  }
}

void SFAppleIDClientCopyMyAppleID(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  SFAppleIDClient *v7;
  SFAppleIDClient *v8;
  SFAppleIDClient *v9;
  _QWORD v10[4];
  SFAppleIDClient *v11;
  int v12;
  _QWORD v13[4];
  SFAppleIDClient *v14;
  id v15;

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = v3;
  }
  else
  {
    SFMainQueue();
    v5 = objc_claimAutoreleasedReturnValue();
  }
  v6 = v5;
  if (v4)
  {
    v7 = objc_alloc_init(SFAppleIDClient);
    if (v7)
    {
      v8 = v7;
      -[SFAppleIDClient setDispatchQueue:](v7, "setDispatchQueue:", v6);
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = __SFAppleIDClientCopyMyAppleID_block_invoke;
      v13[3] = &unk_1E482F468;
      v14 = v8;
      v15 = v4;
      v9 = v8;
      -[SFAppleIDClient myAccountWithCompletion:](v9, "myAccountWithCompletion:", v13);

    }
    else
    {
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __SFAppleIDClientCopyMyAppleID_block_invoke_2;
      v10[3] = &unk_1E482D2E0;
      v11 = (SFAppleIDClient *)v4;
      v12 = -6762;
      dispatch_async(v6, v10);
      v9 = v11;
    }

  }
}

void SFAppleIDClientCopyPersonInfo(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  SFAppleIDClient *v9;
  SFAppleIDClient *v10;
  SFAppleIDClient *v11;
  int v12;
  _QWORD v13[4];
  SFAppleIDClient *v14;
  int v15;
  _QWORD v16[4];
  SFAppleIDClient *v17;
  id v18;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = v5;
  }
  else
  {
    SFMainQueue();
    v7 = objc_claimAutoreleasedReturnValue();
  }
  v8 = v7;
  if (v6)
  {
    if (a1)
    {
      v9 = objc_alloc_init(SFAppleIDClient);
      if (v9)
      {
        v10 = v9;
        -[SFAppleIDClient setDispatchQueue:](v9, "setDispatchQueue:", v8);
        v16[0] = MEMORY[0x1E0C809B0];
        v16[1] = 3221225472;
        v16[2] = __SFAppleIDClientCopyPersonInfo_block_invoke;
        v16[3] = &unk_1E482F490;
        v17 = v10;
        v18 = v6;
        v11 = v10;
        -[SFAppleIDClient personInfoWithEmailOrPhone:completion:](v11, "personInfoWithEmailOrPhone:completion:", a1, v16);

LABEL_8:
        goto LABEL_9;
      }
      v12 = -6762;
    }
    else
    {
      v12 = -6705;
    }
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __SFAppleIDClientCopyPersonInfo_block_invoke_2;
    v13[3] = &unk_1E482D2E0;
    v14 = (SFAppleIDClient *)v6;
    v15 = v12;
    dispatch_async(v8, v13);
    v11 = v14;
    goto LABEL_8;
  }
LABEL_9:

}

void sub_1A287F1E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A287F3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A287F4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  void *v11;

  os_activity_scope_leave(&state);
  objc_sync_exit(v11);
  _Unwind_Resume(a1);
}

void sub_1A287F61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A287F8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  void *v17;

  objc_sync_exit(v17);
  _Unwind_Resume(a1);
}

void sub_1A28806E4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

Class initACAccountStore()
{
  Class result;

  if (AccountsLibrary_sOnce != -1)
    dispatch_once(&AccountsLibrary_sOnce, &__block_literal_global_13);
  result = objc_getClass("ACAccountStore");
  classACAccountStore = (uint64_t)result;
  getACAccountStoreClass[0] = (uint64_t (*)())ACAccountStoreFunction;
  return result;
}

id ACAccountStoreFunction()
{
  return (id)classACAccountStore;
}

Class initTRSetupCompanionAuthenticationRequest()
{
  Class result;

  if (TouchRemoteLibrary_sOnce != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce, &__block_literal_global_454);
  result = objc_getClass("TRSetupCompanionAuthenticationRequest");
  classTRSetupCompanionAuthenticationRequest = (uint64_t)result;
  getTRSetupCompanionAuthenticationRequestClass[0] = (uint64_t (*)())TRSetupCompanionAuthenticationRequestFunction;
  return result;
}

id TRSetupCompanionAuthenticationRequestFunction()
{
  return (id)classTRSetupCompanionAuthenticationRequest;
}

Class initTRSetupProxyDeviceRequest()
{
  Class result;

  if (TouchRemoteLibrary_sOnce != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce, &__block_literal_global_454);
  result = objc_getClass("TRSetupProxyDeviceRequest");
  classTRSetupProxyDeviceRequest = (uint64_t)result;
  getTRSetupProxyDeviceRequestClass[0] = (uint64_t (*)())TRSetupProxyDeviceRequestFunction;
  return result;
}

id TRSetupProxyDeviceRequestFunction()
{
  return (id)classTRSetupProxyDeviceRequest;
}

Class initTRSetupProxyAuthenticationRequest()
{
  Class result;

  if (TouchRemoteLibrary_sOnce != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce, &__block_literal_global_454);
  result = objc_getClass("TRSetupProxyAuthenticationRequest");
  classTRSetupProxyAuthenticationRequest = (uint64_t)result;
  getTRSetupProxyAuthenticationRequestClass[0] = (uint64_t (*)())TRSetupProxyAuthenticationRequestFunction;
  return result;
}

id TRSetupProxyAuthenticationRequestFunction()
{
  return (id)classTRSetupProxyAuthenticationRequest;
}

Class initHMDeviceSetupOperationHandler()
{
  Class result;

  if (HomeKitLibrary_sOnce != -1)
    dispatch_once(&HomeKitLibrary_sOnce, &__block_literal_global_459);
  result = objc_getClass("HMDeviceSetupOperationHandler");
  classHMDeviceSetupOperationHandler = (uint64_t)result;
  getHMDeviceSetupOperationHandlerClass[0] = (uint64_t (*)())HMDeviceSetupOperationHandlerFunction;
  return result;
}

id HMDeviceSetupOperationHandlerFunction()
{
  return (id)classHMDeviceSetupOperationHandler;
}

Class initTRAnisetteDataProvider()
{
  Class result;

  if (TouchRemoteLibrary_sOnce != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce, &__block_literal_global_454);
  result = objc_getClass("TRAnisetteDataProvider");
  classTRAnisetteDataProvider = (uint64_t)result;
  getTRAnisetteDataProviderClass[0] = (uint64_t (*)())TRAnisetteDataProviderFunction;
  return result;
}

id TRAnisetteDataProviderFunction()
{
  return (id)classTRAnisetteDataProvider;
}

Class initTRSetupAuthenticationResponse()
{
  Class result;

  if (TouchRemoteLibrary_sOnce != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce, &__block_literal_global_454);
  result = objc_getClass("TRSetupAuthenticationResponse");
  classTRSetupAuthenticationResponse = (uint64_t)result;
  getTRSetupAuthenticationResponseClass[0] = (uint64_t (*)())TRSetupAuthenticationResponseFunction;
  return result;
}

id TRSetupAuthenticationResponseFunction()
{
  return (id)classTRSetupAuthenticationResponse;
}

Class initAKDevice()
{
  Class result;

  if (AuthKitLibrary_sOnce != -1)
    dispatch_once(&AuthKitLibrary_sOnce, &__block_literal_global_468);
  result = objc_getClass("AKDevice");
  classAKDevice = (uint64_t)result;
  getAKDeviceClass[0] = (uint64_t (*)())AKDeviceFunction;
  return result;
}

id AKDeviceFunction()
{
  return (id)classAKDevice;
}

Class initTRSetupProxyDeviceResponse()
{
  Class result;

  if (TouchRemoteLibrary_sOnce != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce, &__block_literal_global_454);
  result = objc_getClass("TRSetupProxyDeviceResponse");
  classTRSetupProxyDeviceResponse = (uint64_t)result;
  getTRSetupProxyDeviceResponseClass[0] = (uint64_t (*)())TRSetupProxyDeviceResponseFunction;
  return result;
}

id TRSetupProxyDeviceResponseFunction()
{
  return (id)classTRSetupProxyDeviceResponse;
}

Class initAKAppleIDAuthenticationContext()
{
  Class result;

  if (AuthKitLibrary_sOnce != -1)
    dispatch_once(&AuthKitLibrary_sOnce, &__block_literal_global_468);
  result = objc_getClass("AKAppleIDAuthenticationContext");
  classAKAppleIDAuthenticationContext = (uint64_t)result;
  getAKAppleIDAuthenticationContextClass[0] = (uint64_t (*)())AKAppleIDAuthenticationContextFunction;
  return result;
}

id AKAppleIDAuthenticationContextFunction()
{
  return (id)classAKAppleIDAuthenticationContext;
}

Class initAKAppleIDAuthenticationController()
{
  Class result;

  if (AuthKitLibrary_sOnce != -1)
    dispatch_once(&AuthKitLibrary_sOnce, &__block_literal_global_468);
  result = objc_getClass("AKAppleIDAuthenticationController");
  classAKAppleIDAuthenticationController = (uint64_t)result;
  getAKAppleIDAuthenticationControllerClass[0] = (uint64_t (*)())AKAppleIDAuthenticationControllerFunction;
  return result;
}

id AKAppleIDAuthenticationControllerFunction()
{
  return (id)classAKAppleIDAuthenticationController;
}

id initValSSServerErrorDomain()
{
  id *v0;

  if (StoreServicesLibrary_sOnce != -1)
    dispatch_once(&StoreServicesLibrary_sOnce, &__block_literal_global_474);
  v0 = (id *)dlsym((void *)StoreServicesLibrary_sLib, "SSServerErrorDomain");
  if (v0)
    objc_storeStrong((id *)&constantValSSServerErrorDomain, *v0);
  getSSServerErrorDomain[0] = (uint64_t (*)())SSServerErrorDomainFunction;
  return (id)constantValSSServerErrorDomain;
}

id SSServerErrorDomainFunction()
{
  return (id)constantValSSServerErrorDomain;
}

id initValAKAuthenticationAlternateDSIDKey()
{
  id *v0;

  if (AuthKitLibrary_sOnce != -1)
    dispatch_once(&AuthKitLibrary_sOnce, &__block_literal_global_468);
  v0 = (id *)dlsym((void *)AuthKitLibrary_sLib, "AKAuthenticationAlternateDSIDKey");
  if (v0)
    objc_storeStrong((id *)&constantValAKAuthenticationAlternateDSIDKey, *v0);
  getAKAuthenticationAlternateDSIDKey[0] = (uint64_t (*)())AKAuthenticationAlternateDSIDKeyFunction;
  return (id)constantValAKAuthenticationAlternateDSIDKey;
}

id AKAuthenticationAlternateDSIDKeyFunction()
{
  return (id)constantValAKAuthenticationAlternateDSIDKey;
}

id initValAKAuthenticationUsernameKey()
{
  id *v0;

  if (AuthKitLibrary_sOnce != -1)
    dispatch_once(&AuthKitLibrary_sOnce, &__block_literal_global_468);
  v0 = (id *)dlsym((void *)AuthKitLibrary_sLib, "AKAuthenticationUsernameKey");
  if (v0)
    objc_storeStrong((id *)&constantValAKAuthenticationUsernameKey, *v0);
  getAKAuthenticationUsernameKey[0] = (uint64_t (*)())AKAuthenticationUsernameKeyFunction;
  return (id)constantValAKAuthenticationUsernameKey;
}

id AKAuthenticationUsernameKeyFunction()
{
  return (id)constantValAKAuthenticationUsernameKey;
}

id initValAASignInErrorDomain()
{
  id *v0;

  if (AppleAccountLibrary_sOnce != -1)
    dispatch_once(&AppleAccountLibrary_sOnce, &__block_literal_global_479);
  v0 = (id *)dlsym((void *)AppleAccountLibrary_sLib, "AASignInErrorDomain");
  if (v0)
    objc_storeStrong((id *)&constantValAASignInErrorDomain, *v0);
  getAASignInErrorDomain[0] = (uint64_t (*)())AASignInErrorDomainFunction;
  return (id)constantValAASignInErrorDomain;
}

id AASignInErrorDomainFunction()
{
  return (id)constantValAASignInErrorDomain;
}

id initValAKAuthenticationPasswordKey()
{
  id *v0;

  if (AuthKitLibrary_sOnce != -1)
    dispatch_once(&AuthKitLibrary_sOnce, &__block_literal_global_468);
  v0 = (id *)dlsym((void *)AuthKitLibrary_sLib, "AKAuthenticationPasswordKey");
  if (v0)
    objc_storeStrong((id *)&constantValAKAuthenticationPasswordKey, *v0);
  getAKAuthenticationPasswordKey[0] = (uint64_t (*)())AKAuthenticationPasswordKeyFunction;
  return (id)constantValAKAuthenticationPasswordKey;
}

id AKAuthenticationPasswordKeyFunction()
{
  return (id)constantValAKAuthenticationPasswordKey;
}

Class initSSMutableAuthenticationContext()
{
  Class result;

  if (StoreServicesLibrary_sOnce != -1)
    dispatch_once(&StoreServicesLibrary_sOnce, &__block_literal_global_474);
  result = objc_getClass("SSMutableAuthenticationContext");
  classSSMutableAuthenticationContext = (uint64_t)result;
  getSSMutableAuthenticationContextClass[0] = (uint64_t (*)())SSMutableAuthenticationContextFunction;
  return result;
}

id SSMutableAuthenticationContextFunction()
{
  return (id)classSSMutableAuthenticationContext;
}

Class initSSAccountStore()
{
  Class result;

  if (StoreServicesLibrary_sOnce != -1)
    dispatch_once(&StoreServicesLibrary_sOnce, &__block_literal_global_474);
  result = objc_getClass("SSAccountStore");
  classSSAccountStore = (uint64_t)result;
  getSSAccountStoreClass[0] = (uint64_t (*)())SSAccountStoreFunction;
  return result;
}

id SSAccountStoreFunction()
{
  return (id)classSSAccountStore;
}

Class initSSAuthenticateRequest()
{
  Class result;

  if (StoreServicesLibrary_sOnce != -1)
    dispatch_once(&StoreServicesLibrary_sOnce, &__block_literal_global_474);
  result = objc_getClass("SSAuthenticateRequest");
  classSSAuthenticateRequest = (uint64_t)result;
  getSSAuthenticateRequestClass[0] = (uint64_t (*)())SSAuthenticateRequestFunction;
  return result;
}

id SSAuthenticateRequestFunction()
{
  return (id)classSSAuthenticateRequest;
}

id SFAirDropTransferTypesToString(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)objc_opt_new();
  v3 = v2;
  if ((a1 & 2) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("Unclassified"));
    if ((a1 & 0x20) == 0)
    {
LABEL_3:
      if ((a1 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((a1 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  objc_msgSend(v3, "addObject:", CFSTR("Files"));
  if ((a1 & 0x40) == 0)
  {
LABEL_4:
    if ((a1 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  objc_msgSend(v3, "addObject:", CFSTR("CalendarEvents"));
  if ((a1 & 0x80) == 0)
  {
LABEL_5:
    if ((a1 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  objc_msgSend(v3, "addObject:", CFSTR("Contacts"));
  if ((a1 & 0x100) == 0)
  {
LABEL_6:
    if ((a1 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  objc_msgSend(v3, "addObject:", CFSTR("Notes"));
  if ((a1 & 0x200) == 0)
  {
LABEL_7:
    if ((a1 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  objc_msgSend(v3, "addObject:", CFSTR("PhotosAndVideos"));
  if ((a1 & 0x10000) == 0)
  {
LABEL_8:
    if ((a1 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  objc_msgSend(v3, "addObject:", CFSTR("PlaygroundItems"));
  if ((a1 & 0x400) == 0)
  {
LABEL_9:
    if ((a1 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  objc_msgSend(v3, "addObject:", CFSTR("Profiles"));
  if ((a1 & 0x800) == 0)
  {
LABEL_10:
    if ((a1 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  objc_msgSend(v3, "addObject:", CFSTR("VoiceMails"));
  if ((a1 & 0x1000) == 0)
  {
LABEL_11:
    if ((a1 & 0x2000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  objc_msgSend(v3, "addObject:", CFSTR("VoiceMemos"));
  if ((a1 & 0x2000) == 0)
  {
LABEL_12:
    if ((a1 & 0x4000) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  objc_msgSend(v3, "addObject:", CFSTR("WalletItems"));
  if ((a1 & 0x4000) == 0)
  {
LABEL_13:
    if ((a1 & 0x40000) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  objc_msgSend(v3, "addObject:", CFSTR("PDFs"));
  if ((a1 & 0x40000) == 0)
  {
LABEL_14:
    if ((a1 & 0x1000000) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  objc_msgSend(v3, "addObject:", CFSTR("Credentials"));
  if ((a1 & 0x1000000) == 0)
  {
LABEL_15:
    if ((a1 & 0x2000000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  objc_msgSend(v3, "addObject:", CFSTR("GenericFiles"));
  if ((a1 & 0x2000000) == 0)
  {
LABEL_16:
    if ((a1 & 0x4000000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  objc_msgSend(v3, "addObject:", CFSTR("Links"));
  if ((a1 & 0x4000000) == 0)
  {
LABEL_17:
    if ((a1 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  objc_msgSend(v3, "addObject:", CFSTR("AppLinks"));
  if ((a1 & 0x8000000) == 0)
  {
LABEL_18:
    if ((a1 & 0x10000000) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  objc_msgSend(v3, "addObject:", CFSTR("FindMyFriendsLinks"));
  if ((a1 & 0x10000000) == 0)
  {
LABEL_19:
    if ((a1 & 0x20000000) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  objc_msgSend(v3, "addObject:", CFSTR("iWorkLinks"));
  if ((a1 & 0x20000000) == 0)
  {
LABEL_20:
    if ((a1 & 0x40000000) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  objc_msgSend(v3, "addObject:", CFSTR("KeynoteLiveLinks"));
  if ((a1 & 0x40000000) == 0)
  {
LABEL_21:
    if ((a1 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  objc_msgSend(v3, "addObject:", CFSTR("SharediCloudDocumentsLinks"));
  if ((a1 & 0x80000000) == 0)
  {
LABEL_22:
    if ((a1 & 0x100000000) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  objc_msgSend(v3, "addObject:", CFSTR("MapsLinks"));
  if ((a1 & 0x100000000) == 0)
  {
LABEL_23:
    if ((a1 & 0x200000000) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  objc_msgSend(v3, "addObject:", CFSTR("AppStoreLinks"));
  if ((a1 & 0x200000000) == 0)
  {
LABEL_24:
    if ((a1 & 0x400000000) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  objc_msgSend(v3, "addObject:", CFSTR("PhoneLinks"));
  if ((a1 & 0x400000000) == 0)
  {
LABEL_25:
    if ((a1 & 0x800000000) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  objc_msgSend(v3, "addObject:", CFSTR("BooksLinks"));
  if ((a1 & 0x800000000) == 0)
  {
LABEL_26:
    if ((a1 & 0x1000000000) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  objc_msgSend(v3, "addObject:", CFSTR("iTunesULinks"));
  if ((a1 & 0x1000000000) == 0)
  {
LABEL_27:
    if ((a1 & 0x2000000000) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  objc_msgSend(v3, "addObject:", CFSTR("iTunesStoreLinks"));
  if ((a1 & 0x2000000000) == 0)
  {
LABEL_28:
    if ((a1 & 0x4000000000) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  objc_msgSend(v3, "addObject:", CFSTR("iLifeLinks"));
  if ((a1 & 0x4000000000) == 0)
  {
LABEL_29:
    if ((a1 & 0x10000000000) == 0)
      goto LABEL_30;
LABEL_61:
    objc_msgSend(v3, "addObject:", CFSTR("NewsLinks"));
    if ((a1 & 0x8000000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
LABEL_60:
  objc_msgSend(v3, "addObject:", CFSTR("PodcastsLinks"));
  if ((a1 & 0x10000000000) != 0)
    goto LABEL_61;
LABEL_30:
  if ((a1 & 0x8000000000) != 0)
LABEL_31:
    objc_msgSend(v3, "addObject:", CFSTR("WebLinks"));
LABEL_32:
  objc_msgSend(v3, "componentsJoinedByString:", CFSTR(", "));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id SFActivityScanTypesToString(uint64_t a1)
{
  void *v2;
  void *v3;
  const __CFString *v4;
  void *v5;

  v2 = (void *)objc_opt_new();
  v3 = v2;
  if (!a1)
  {
    v4 = CFSTR("None");
LABEL_10:
    objc_msgSend(v3, "addObject:", v4);
    goto LABEL_11;
  }
  if ((a1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("Handoff"));
    if ((a1 & 2) == 0)
    {
LABEL_4:
      if ((a1 & 4) == 0)
        goto LABEL_11;
      goto LABEL_9;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("CopyPaste"));
  if ((a1 & 4) != 0)
  {
LABEL_9:
    v4 = CFSTR("Boosted");
    goto LABEL_10;
  }
LABEL_11:
  objc_msgSend(v3, "componentsJoinedByString:", CFSTR(", "));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1A28878C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A2887B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A2888EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void sub_1A288A0A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A288A124(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A288D804(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A288D95C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A288DAB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A288DB34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A288DB9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A288DD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A288DF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A288E190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A288E354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A288E6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1A288E7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_2_0(void *a1, const char *a2)
{
  return objc_msgSend(a1, "copy");
}

const __CFString *SFAirDropTransferChangeStateDescription(unint64_t a1)
{
  if (a1 > 7)
    return &stru_1E483B8E8;
  else
    return off_1E482FC28[a1];
}

void sub_1A28905F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A28909EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void _SF_MyersDiff(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9)
{
  id v16;
  id v17;
  void *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  void *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  id v40;

  v40 = a7;
  v16 = a8;
  v17 = a9;
  v18 = v17;
  if (!(_DWORD)a5)
  {
    v34 = (int)a4;
    v35 = (int)a6;
LABEL_29:
    objc_msgSend(v17, "addIndexesInRange:", v34, v35);
    goto LABEL_30;
  }
  if (!(_DWORD)a6)
  {
    v34 = (int)a3;
    v35 = (int)a5;
    v17 = v16;
    goto LABEL_29;
  }
  v19 = _SF_MiddleSnake(a1, a2, a5, a6, v40);
  if (v20 << 16 >= 1)
  {
    v21 = v19;
    v39 = v20 << 16;
    v36 = HIWORD(v19);
    v37 = HIDWORD(v19);
    v22 = SWORD2(v19);
    v38 = (__int16)v19;
    v23 = SWORD2(v19) - (__int16)v19;
    v24 = ((int)v19 >> 16);
    v25 = SHIWORD(v19) - ((int)v19 >> 16);
    v26 = v23 <= v25;
    if (v23 <= v25)
      v27 = a4;
    else
      v27 = a3;
    if (v26)
      v22 = SHIWORD(v19);
    if (v26)
      v28 = (int)v19 >> 16;
    else
      v28 = (__int16)v19;
    if (v26)
      v29 = v18;
    else
      v29 = v16;
    v30 = v22 - 1;
    if ((((_BYTE)a5 - (_BYTE)a6) & 1) != 0)
      v31 = v28;
    else
      v31 = v30;
    objc_msgSend(v29, "addIndex:", v31 + v27);
    _SF_MyersDiff(a1, a2, a3, a4, v38, v24, v40, v16, v18);
    if (v39 != 0x10000)
    {
      if ((int)a5 <= (__int16)v37)
        v32 = 0;
      else
        v32 = a1 + 8 * (__int16)v37;
      if ((int)a6 <= (__int16)v36)
        v33 = 0;
      else
        v33 = a2 + 8 * (v21 >> 48);
      _SF_MyersDiff(v32, v33, (__int16)(v37 + a3), (__int16)(v36 + a4), (__int16)(a5 - v37), (__int16)(a6 - v36), v40, v16, v18);
    }
  }
LABEL_30:

}

unint64_t _SF_MiddleSnake(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  unsigned int (**v10)(_QWORD, _QWORD, _QWORD);
  int v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  __int16 v34;
  BOOL v35;
  __int16 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v42;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  unsigned __int16 v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  _WORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v9 = a5;
  v10 = (unsigned int (**)(_QWORD, _QWORD, _QWORD))v9;
  v49 = (uint64_t)&v49;
  v11 = a4 + a3;
  v12 = a4 + a3 + 1;
  LODWORD(v13) = a4 + a3 + 2;
  if ((int)a4 + (int)a3 >= -1)
    v13 = (v11 + 1);
  else
    v13 = v13;
  v66 = v13;
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v49 - ((2 * v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v14, 2 * v12);
  MEMORY[0x1E0C80A78](v15);
  v64 = v14;
  bzero(v14, 2 * v12);
  v59 = v14;
  bzero(v14, 2 * v12);
  v16 = a3;
  v52 = a4 + a3;
  if ((v11 & 0x80000000) == 0)
  {
    v17 = v12;
    v18 = v64;
    do
    {
      *v18++ = a3;
      --v17;
    }
    while (v17);
  }
  v19 = v52;
  if (v52 >= -2)
  {
    v24 = 0;
    LOWORD(v23) = 0;
    v25 = 0;
    LOWORD(v22) = 0;
    LOWORD(v21) = 0;
    v20 = 0;
    v26 = (uint64_t)(int)v66 >> 1;
    v27 = (int)v16 - (int)a4;
    v62 = -v52;
    v66 = (int)v16;
    v65 = (int)a4;
    v63 = v26 - v27;
    v56 = v26;
    v57 = v16;
    v28 = v59;
    v55 = v27;
    v58 = a4;
    while (1)
    {
      v29 = (__int16)v25;
      v30 = -(__int16)v25;
      v31 = (__int16)-(__int16)v25;
      v50 = v24;
      v51 = v25;
      v60 = v30;
      v61 = (__int16)v25;
      if (v31 <= (__int16)v25)
        break;
LABEL_32:
      v37 = v27 - v29;
      v38 = v50 + v27;
      if (v50 + v27 >= (__int16)(v27 - v29))
      {
        v53 = v37;
        v54 = v50 + v27;
        v39 = (__int16)v37;
        while (1)
        {
          v40 = (__int16)v37;
          if ((__int16)v37 >= v62 && (__int16)v37 <= (int)v19)
          {
            v42 = (__int16)v37 - 1;
            v23 = (__int16)v64[v63 + v42];
            if (v39 != v38 && ((LODWORD(v21) = (__int16)v64[v63 + 1 + (__int16)v37], v39 == v53) || v23 >= (int)v21))
            {
              v20 = (v21 - ((__int16)v37 + 1));
              LOWORD(v23) = v21 - 1;
            }
            else
            {
              v20 = (v23 - v42);
              LOWORD(v21) = v64[v63 + v42];
            }
            v22 = (__int16)(v23 - v37);
            if ((__int16)v23 >= 1 && v22 >= 1)
            {
              v44 = (unsigned __int16)v23;
              v45 = (unsigned __int16)(v23 - v37);
              while (v10[2](v10, *(_QWORD *)(a1 + 8 * (v44 - 1)), *(_QWORD *)(a2 + 8 * (v45 - 1))))
              {
                LOWORD(v23) = v44 - 1;
                v46 = v45 - 1;
                if (v44 >= 2)
                {
                  --v44;
                  v35 = v45-- <= 1;
                  if (!v35)
                    continue;
                }
                goto LABEL_55;
              }
              v46 = v45;
              LOWORD(v23) = v44;
LABEL_55:
              LOWORD(v22) = v46;
              LODWORD(v16) = v57;
              LODWORD(a4) = v58;
              v19 = v52;
              v28 = v59;
              v27 = v55;
              v26 = v56;
              v30 = v60;
              v29 = v61;
              v38 = v54;
            }
            v64[v39 + v63] = v23;
            if (v40 >= v30 && v40 <= v29 && (v27 & 1) == 0 && *(__int16 *)&v28[2 * v39 + 2 * v26] >= (__int16)v23)
              goto LABEL_62;
          }
          LOWORD(v37) = v40 + 2;
          v39 = (__int16)(v40 + 2);
          if (v38 < v39)
            break;
        }
      }
      v25 = (v51 + 1);
      v24 = (__int16)(v51 + 1);
      if (v24 > v26)
        goto LABEL_62;
    }
    v53 = v27 + (__int16)v25 - 1;
    v54 = v27 - ((__int16)v25 - 1);
    v32 = -(__int16)v25;
    while (1)
    {
      v33 = v31 + 1;
      LODWORD(v21) = *(__int16 *)&v28[2 * v31 + 2 + 2 * (int)v26];
      if (v31 != v30 && ((v23 = *(__int16 *)&v28[2 * v31 - 2 + 2 * (int)v26], v31 == v29) || (int)v21 <= v23))
      {
        LOWORD(v22) = v23 - (v31 - 1);
        LOWORD(v21) = v23 + 1;
      }
      else
      {
        LOWORD(v22) = v21 - v33;
        LOWORD(v23) = *(_WORD *)&v28[2 * v33 + 2 * (int)v26];
      }
      v34 = v32;
      v20 = (__int16)(v21 - v32);
      v35 = (int)v16 > (__int16)v21 && (int)v20 < (int)a4;
      if (v35)
      {
        a4 = v19;
        v36 = v22;
        v21 = (__int16)v21;
        v20 = (__int16)(v21 - v32);
        do
        {
          if (!v10[2](v10, *(_QWORD *)(a1 + 8 * v21), *(_QWORD *)(a2 + 8 * v20)))
            break;
          ++v21;
          ++v20;
          if (v21 >= v66)
            break;
        }
        while (v20 < v65);
        v26 = v56;
        LODWORD(v16) = v57;
        v27 = v55;
        v30 = v60;
        v29 = v61;
        LOWORD(v22) = v36;
        v19 = a4;
        LODWORD(a4) = v58;
        v28 = v59;
      }
      *(_WORD *)&v28[2 * v26 + 2 * v34] = v21;
      if ((v27 & 1) != 0 && v34 >= v54 && v34 <= v53 && (__int16)v64[v34 + v63] <= (__int16)v21)
        break;
      LOWORD(v32) = v31 + 2;
      v31 = (__int16)(v31 + 2);
      if (v31 > v29)
        goto LABEL_32;
    }
  }
  else
  {
    v20 = 0;
    LOWORD(v21) = 0;
    LOWORD(v22) = 0;
    LOWORD(v23) = 0;
  }
LABEL_62:
  v47 = v22;

  return (v20 << 48) | ((unint64_t)(unsigned __int16)v21 << 32) | ((unint64_t)v47 << 16) | (unsigned __int16)v23;
}

void sub_1A2891A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  (*(void (**)(uint64_t))(v14 + 16))(v14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void sub_1A289339C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A28935C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A2893E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A28946E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A2895164(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

Class __getSLCollaborationFooterViewModelClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!SocialLayerLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E482FEA8;
    v5 = 0;
    SocialLayerLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SocialLayerLibraryCore_frameworkLibrary)
    __getSLCollaborationFooterViewModelClass_block_invoke_cold_1(&v3);
  result = objc_getClass("SLCollaborationFooterViewModel");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSLCollaborationFooterViewModelClass_block_invoke_cold_2();
  getSLCollaborationFooterViewModelClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1A2898794(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A2898848(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28989CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2898C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;

  if (a2 == 1)
  {
    v20 = objc_begin_catch(exception_object);
    if (v18)
    {
      v21 = (void *)MEMORY[0x1E0CB35C8];
      a18 = *MEMORY[0x1E0CB2D50];
      *(_QWORD *)(v19 - 64) = CFSTR("Could not deserialize stream information from property list");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19 - 64, &a18, 1);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2FE0], 94, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, _QWORD, void *))(v18 + 16))(v18, 0, 0, v23);

    }
    objc_end_catch();
    JUMPOUT(0x1A2898C04);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A2898FC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28990F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A2899EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A289AEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void sub_1A289CCB0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1A289E208(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1A289E78C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1A289EA90(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

Class initHMHomeManagerConfiguration()
{
  Class result;

  if (HomeKitLibrary_sOnce_0 != -1)
    dispatch_once(&HomeKitLibrary_sOnce_0, &__block_literal_global_21);
  result = objc_getClass("HMHomeManagerConfiguration");
  classHMHomeManagerConfiguration = (uint64_t)result;
  getHMHomeManagerConfigurationClass[0] = (uint64_t (*)())HMHomeManagerConfigurationFunction;
  return result;
}

id HMHomeManagerConfigurationFunction()
{
  return (id)classHMHomeManagerConfiguration;
}

Class initHMHomeManager()
{
  Class result;

  if (HomeKitLibrary_sOnce_0 != -1)
    dispatch_once(&HomeKitLibrary_sOnce_0, &__block_literal_global_21);
  result = objc_getClass("HMHomeManager");
  classHMHomeManager = (uint64_t)result;
  getHMHomeManagerClass[0] = (uint64_t (*)())HMHomeManagerFunction;
  return result;
}

id HMHomeManagerFunction()
{
  return (id)classHMHomeManager;
}

Class initVTPreferences_0()
{
  Class result;

  if (VoiceTriggerLibrary_sOnce_0 != -1)
    dispatch_once(&VoiceTriggerLibrary_sOnce_0, &__block_literal_global_387);
  result = objc_getClass("VTPreferences");
  classVTPreferences_0 = (uint64_t)result;
  getVTPreferencesClass_0[0] = (uint64_t (*)())VTPreferencesFunction_0;
  return result;
}

id VTPreferencesFunction_0()
{
  return (id)classVTPreferences_0;
}

Class initTROperationQueue()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_0 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_0, &__block_literal_global_390);
  result = objc_getClass("TROperationQueue");
  classTROperationQueue = (uint64_t)result;
  getTROperationQueueClass[0] = (uint64_t (*)())TROperationQueueFunction;
  return result;
}

id TROperationQueueFunction()
{
  return (id)classTROperationQueue;
}

Class initTRAuthenticationOperation()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_0 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_0, &__block_literal_global_390);
  result = objc_getClass("TRAuthenticationOperation");
  classTRAuthenticationOperation = (uint64_t)result;
  getTRAuthenticationOperationClass[0] = (uint64_t (*)())TRAuthenticationOperationFunction;
  return result;
}

id TRAuthenticationOperationFunction()
{
  return (id)classTRAuthenticationOperation;
}

id initValTRAuthenticationOperationUnauthenticatedServicesKey()
{
  id *v0;

  if (TouchRemoteLibrary_sOnce_0 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_0, &__block_literal_global_390);
  v0 = (id *)dlsym((void *)TouchRemoteLibrary_sLib_0, "TRAuthenticationOperationUnauthenticatedServicesKey");
  if (v0)
    objc_storeStrong((id *)&constantValTRAuthenticationOperationUnauthenticatedServicesKey, *v0);
  getTRAuthenticationOperationUnauthenticatedServicesKey[0] = (uint64_t (*)())TRAuthenticationOperationUnauthenticatedServicesKeyFunction;
  return (id)constantValTRAuthenticationOperationUnauthenticatedServicesKey;
}

id TRAuthenticationOperationUnauthenticatedServicesKeyFunction()
{
  return (id)constantValTRAuthenticationOperationUnauthenticatedServicesKey;
}

id initValTRAuthenticationOperationErrorKey()
{
  id *v0;

  if (TouchRemoteLibrary_sOnce_0 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_0, &__block_literal_global_390);
  v0 = (id *)dlsym((void *)TouchRemoteLibrary_sLib_0, "TRAuthenticationOperationErrorKey");
  if (v0)
    objc_storeStrong((id *)&constantValTRAuthenticationOperationErrorKey, *v0);
  getTRAuthenticationOperationErrorKey[0] = (uint64_t (*)())TRAuthenticationOperationErrorKeyFunction;
  return (id)constantValTRAuthenticationOperationErrorKey;
}

id TRAuthenticationOperationErrorKeyFunction()
{
  return (id)constantValTRAuthenticationOperationErrorKey;
}

Class initAAUIGenericTermsRemoteUI()
{
  Class result;

  if (AppleAccountUILibrary_sOnce != -1)
    dispatch_once(&AppleAccountUILibrary_sOnce, &__block_literal_global_396);
  result = objc_getClass("AAUIGenericTermsRemoteUI");
  classAAUIGenericTermsRemoteUI = (uint64_t)result;
  getAAUIGenericTermsRemoteUIClass[0] = (uint64_t (*)())AAUIGenericTermsRemoteUIFunction;
  return result;
}

id AAUIGenericTermsRemoteUIFunction()
{
  return (id)classAAUIGenericTermsRemoteUI;
}

id airdrop_log()
{
  if (airdrop_log_onceToken != -1)
    dispatch_once(&airdrop_log_onceToken, &__block_literal_global_22);
  return (id)airdrop_log___logger;
}

void __airdrop_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "AirDrop");
  v1 = (void *)airdrop_log___logger;
  airdrop_log___logger = (uint64_t)v0;

}

id airdrop_ui_log()
{
  if (airdrop_ui_log_onceToken != -1)
    dispatch_once(&airdrop_ui_log_onceToken, &__block_literal_global_82);
  return (id)airdrop_ui_log___logger;
}

void __airdrop_ui_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "AirDropUI");
  v1 = (void *)airdrop_ui_log___logger;
  airdrop_ui_log___logger = (uint64_t)v0;

}

id airdrop_nw_log()
{
  if (airdrop_nw_log_onceToken[0] != -1)
    dispatch_once(airdrop_nw_log_onceToken, &__block_literal_global_84);
  return (id)airdrop_nw_log___logger;
}

void __airdrop_nw_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "AirDropNW");
  v1 = (void *)airdrop_nw_log___logger;
  airdrop_nw_log___logger = (uint64_t)v0;

}

id asset_log()
{
  if (asset_log_onceToken != -1)
    dispatch_once(&asset_log_onceToken, &__block_literal_global_86);
  return (id)asset_log___logger;
}

void __asset_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "Asset");
  v1 = (void *)asset_log___logger;
  asset_log___logger = (uint64_t)v0;

}

id asset_metadata_log()
{
  if (asset_metadata_log_onceToken != -1)
    dispatch_once(&asset_metadata_log_onceToken, &__block_literal_global_88);
  return (id)asset_metadata_log___logger;
}

void __asset_metadata_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "Asset-Metadata");
  v1 = (void *)asset_metadata_log___logger;
  asset_metadata_log___logger = (uint64_t)v0;

}

id authenticate_accounts_log()
{
  if (authenticate_accounts_log_onceToken != -1)
    dispatch_once(&authenticate_accounts_log_onceToken, &__block_literal_global_90_0);
  return (id)authenticate_accounts_log___logger;
}

void __authenticate_accounts_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "SFAuthenticateAccounts");
  v1 = (void *)authenticate_accounts_log___logger;
  authenticate_accounts_log___logger = (uint64_t)v0;

}

id auto_unlock_log()
{
  if (auto_unlock_log_onceToken != -1)
    dispatch_once(&auto_unlock_log_onceToken, &__block_literal_global_92);
  return (id)auto_unlock_log___logger;
}

void __auto_unlock_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "AutoUnlock");
  v1 = (void *)auto_unlock_log___logger;
  auto_unlock_log___logger = (uint64_t)v0;

}

id authentications_log()
{
  if (authentications_log_onceToken != -1)
    dispatch_once(&authentications_log_onceToken, &__block_literal_global_94_0);
  return (id)authentications_log___logger;
}

void __authentications_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "Authentications");
  v1 = (void *)authentications_log___logger;
  authentications_log___logger = (uint64_t)v0;

}

id sharing_persistent_log()
{
  if (sharing_persistent_log_onceToken != -1)
    dispatch_once(&sharing_persistent_log_onceToken, &__block_literal_global_96);
  return (id)sharing_persistent_log___logger;
}

void __sharing_persistent_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "Persistent");
  v1 = (void *)sharing_persistent_log___logger;
  sharing_persistent_log___logger = (uint64_t)v0;

}

id b332_log()
{
  if (b332_log_onceToken != -1)
    dispatch_once(&b332_log_onceToken, &__block_literal_global_98);
  return (id)b332_log___logger;
}

void __b332_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "B332Pairing");
  v1 = (void *)b332_log___logger;
  b332_log___logger = (uint64_t)v0;

}

id b389_log()
{
  if (b389_log_onceToken != -1)
    dispatch_once(&b389_log_onceToken, &__block_literal_global_100);
  return (id)b389_log___logger;
}

void __b389_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "B389Setup");
  v1 = (void *)b389_log___logger;
  b389_log___logger = (uint64_t)v0;

}

id browser_log()
{
  if (browser_log_onceToken != -1)
    dispatch_once(&browser_log_onceToken, &__block_literal_global_102);
  return (id)browser_log___logger;
}

void __browser_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "Browser");
  v1 = (void *)browser_log___logger;
  browser_log___logger = (uint64_t)v0;

}

id charging_log()
{
  if (charging_log_onceToken != -1)
    dispatch_once(&charging_log_onceToken, &__block_literal_global_104);
  return (id)charging_log___logger;
}

void __charging_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "Charging");
  v1 = (void *)charging_log___logger;
  charging_log___logger = (uint64_t)v0;

}

id charging_events_log()
{
  if (charging_events_log_onceToken != -1)
    dispatch_once(&charging_events_log_onceToken, &__block_literal_global_106);
  return (id)charging_events_log___logger;
}

void __charging_events_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "Charging-Events");
  v1 = (void *)charging_events_log___logger;
  charging_events_log___logger = (uint64_t)v0;

}

void __daemon_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "Daemon");
  v1 = (void *)daemon_log___logger;
  daemon_log___logger = (uint64_t)v0;

}

id framework_log()
{
  if (framework_log_onceToken != -1)
    dispatch_once(&framework_log_onceToken, &__block_literal_global_110);
  return (id)framework_log___logger;
}

void __framework_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "Framework");
  v1 = (void *)framework_log___logger;
  framework_log___logger = (uint64_t)v0;

}

id handoff_log()
{
  if (handoff_log_onceToken[0] != -1)
    dispatch_once(handoff_log_onceToken, &__block_literal_global_112);
  return (id)handoff_log___logger;
}

void __handoff_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "Handoff");
  v1 = (void *)handoff_log___logger;
  handoff_log___logger = (uint64_t)v0;

}

id log_submit_log()
{
  if (log_submit_log_onceToken != -1)
    dispatch_once(&log_submit_log_onceToken, &__block_literal_global_114_0);
  return (id)log_submit_log___logger;
}

void __log_submit_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "LogSubmit");
  v1 = (void *)log_submit_log___logger;
  log_submit_log___logger = (uint64_t)v0;

}

id magic_head_log()
{
  if (magic_head_log_onceToken != -1)
    dispatch_once(&magic_head_log_onceToken, &__block_literal_global_116_0);
  return (id)magic_head_log___logger;
}

void __magic_head_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "MagicHead");
  v1 = (void *)magic_head_log___logger;
  magic_head_log___logger = (uint64_t)v0;

}

void __paired_unlock_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "PairedUnlock");
  v1 = (void *)paired_unlock_log___logger;
  paired_unlock_log___logger = (uint64_t)v0;

}

id people_ui_log()
{
  if (people_ui_log_onceToken != -1)
    dispatch_once(&people_ui_log_onceToken, &__block_literal_global_120_0);
  return (id)people_ui_log___logger;
}

void __people_ui_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "PeopleUI");
  v1 = (void *)people_ui_log___logger;
  people_ui_log___logger = (uint64_t)v0;

}

id remote_log()
{
  if (remote_log_onceToken != -1)
    dispatch_once(&remote_log_onceToken, &__block_literal_global_122_0);
  return (id)remote_log___logger;
}

void __remote_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "Remote");
  v1 = (void *)remote_log___logger;
  remote_log___logger = (uint64_t)v0;

}

id share_sheet_log()
{
  if (share_sheet_log_onceToken != -1)
    dispatch_once(&share_sheet_log_onceToken, &__block_literal_global_124_0);
  return (id)share_sheet_log___logger;
}

void __share_sheet_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.ShareSheet", "ShareSheet");
  v1 = (void *)share_sheet_log___logger;
  share_sheet_log___logger = (uint64_t)v0;

}

id gelato_sharing_log()
{
  if (gelato_sharing_log_onceToken != -1)
    dispatch_once(&gelato_sharing_log_onceToken, &__block_literal_global_127);
  return (id)gelato_sharing_log___logger;
}

void __gelato_sharing_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "GelatoSharingLog");
  v1 = (void *)gelato_sharing_log___logger;
  gelato_sharing_log___logger = (uint64_t)v0;

}

id sharing_ui_log()
{
  if (sharing_ui_log_onceToken[0] != -1)
    dispatch_once(sharing_ui_log_onceToken, &__block_literal_global_129);
  return (id)sharing_ui_log___logger;
}

void __sharing_ui_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.SharingUI", "SharingUI");
  v1 = (void *)sharing_ui_log___logger;
  sharing_ui_log___logger = (uint64_t)v0;

}

id streams_log()
{
  if (streams_log_onceToken != -1)
    dispatch_once(&streams_log_onceToken, &__block_literal_global_132);
  return (id)streams_log___logger;
}

void __streams_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "Streams");
  v1 = (void *)streams_log___logger;
  streams_log___logger = (uint64_t)v0;

}

id tethering_log()
{
  if (tethering_log_onceToken != -1)
    dispatch_once(&tethering_log_onceToken, &__block_literal_global_134);
  return (id)tethering_log___logger;
}

void __tethering_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "Tethering");
  v1 = (void *)tethering_log___logger;
  tethering_log___logger = (uint64_t)v0;

}

id utilities_log()
{
  if (utilities_log_onceToken[0] != -1)
    dispatch_once(utilities_log_onceToken, &__block_literal_global_136);
  return (id)utilities_log___logger;
}

void __utilities_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "Utilities");
  v1 = (void *)utilities_log___logger;
  utilities_log___logger = (uint64_t)v0;

}

id sharingXPCHelperLog()
{
  if (sharingXPCHelperLog_onceToken != -1)
    dispatch_once(&sharingXPCHelperLog_onceToken, &__block_literal_global_138);
  return (id)sharingXPCHelperLog___logger;
}

void __sharingXPCHelperLog_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "SharingXPCHelper");
  v1 = (void *)sharingXPCHelperLog___logger;
  sharingXPCHelperLog___logger = (uint64_t)v0;

}

id sharingHUDLog()
{
  if (sharingHUDLog_onceToken != -1)
    dispatch_once(&sharingHUDLog_onceToken, &__block_literal_global_140);
  return (id)sharingHUDLog___logger;
}

void __sharingHUDLog_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.sharing", "SharingHUD");
  v1 = (void *)sharingHUDLog___logger;
  sharingHUDLog___logger = (uint64_t)v0;

}

void SFDashboardLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  SFDashboardClient();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "logv:args:", a1, &a9);

}

id SFDashboardClient()
{
  if (SFDashboardClient_onceToken != -1)
    dispatch_once(&SFDashboardClient_onceToken, &__block_literal_global_155);
  return (id)SFDashboardClient_client;
}

void SFDashboardLogJSON(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  SFDashboardClient();
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "logJSON:", v1);

}

void SFMetricsLogUnexpectedEvent(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  unint64_t v6;
  uint64_t v7;
  __CFString *v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  void *v12;
  void *v13;
  _QWORD v14[3];
  _QWORD v15[4];

  v15[3] = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = objc_msgSend(v5, "length");
  if (v6 >= 0x1F4)
    v7 = 500;
  else
    v7 = v6;
  objc_msgSend(v5, "substringToIndex:", v7);
  v8 = (__CFString *)objc_claimAutoreleasedReturnValue();

  v14[0] = CFSTR("event");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)v9;
  v11 = &stru_1E483B8E8;
  if (v8)
    v11 = v8;
  v15[0] = v9;
  v15[1] = v11;
  v14[1] = CFSTR("contextString");
  v14[2] = CFSTR("contextInt");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a2);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15[2] = v12;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, v14, 3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  SFMetricsLog(CFSTR("com.apple.sharing.UnexpectedEvent"), v13);

}

void SFMetricsLog(void *a1, void *a2)
{
  id v3;
  id v4;

  v4 = a1;
  v3 = a2;
  if (gLogCategory_Metrics <= 30 && (gLogCategory_Metrics != -1 || _LogCategory_Initialize()))
    LogPrintF();
  ((void (*)(void *, void *))softLinkAnalyticsSendEvent[0])(v4, v3);

}

void initAnalyticsSendEvent(void *a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;

  v3 = CoreAnalyticsLibrary_sOnce;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&CoreAnalyticsLibrary_sOnce, &__block_literal_global_158);
  softLinkAnalyticsSendEvent[0] = (uint64_t (*)())dlsym((void *)CoreAnalyticsLibrary_sLib, "AnalyticsSendEvent");
  ((void (*)(id, id))softLinkAnalyticsSendEvent[0])(v5, v4);

}

const __CFString *SFAuthenticationTypeToString(unint64_t a1)
{
  if (a1 > 8)
    return CFSTR("Unknown");
  else
    return off_1E48307F0[a1];
}

const __CFString *SFAuthenticationErrorToString(int a1)
{
  if ((a1 - 1) > 0x24)
    return CFSTR("Unknown");
  else
    return (const __CFString *)*((_QWORD *)&off_1E48306A0 + a1 - 1);
}

void sub_1A28A274C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void sub_1A28A7194(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;
  id *v5;

  v5 = v1;
  objc_destroyWeak(v5);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1A28A75BC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v1);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

Class initTVLDisplayColorCalibrator_0()
{
  Class result;

  if (TVLatencyLibrary_sOnce_0 != -1)
    dispatch_once(&TVLatencyLibrary_sOnce_0, &__block_literal_global_278);
  result = objc_getClass("TVLDisplayColorCalibrator");
  classTVLDisplayColorCalibrator_0 = (uint64_t)result;
  getTVLDisplayColorCalibratorClass_0[0] = (uint64_t (*)())TVLDisplayColorCalibratorFunction_0;
  return result;
}

id TVLDisplayColorCalibratorFunction_0()
{
  return (id)classTVLDisplayColorCalibrator_0;
}

void sub_1A28A805C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A28A86C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1A28A8C20(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1A28A8DF0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

void sub_1A28A8E98(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void SFDeviceAssetAddKeyValuePairsForStrictMatch(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  __CFString *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v9 = a1;
  v3 = a2;
  objc_msgSend(v9, "color");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v9, "color");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    SFDeviceAssetAddKeyValuePair(CFSTR("CL"), v5, v3);

  }
  objc_msgSend(v9, "additionalQueryParameters", v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __SFDeviceAssetAddKeyValuePairsForStrictMatch_block_invoke;
  v11[3] = &unk_1E4830CE0;
  v7 = v3;
  v12 = v7;
  objc_msgSend(v6, "enumerateKeysAndObjectsUsingBlock:", v11);

  if (objc_msgSend(v10, "legacyAsset"))
  {
    if (objc_msgSend(v10, "h264"))
      v8 = CFSTR("YES");
    else
      v8 = CFSTR("NO");
    SFDeviceAssetAddKeyValuePair(CFSTR("H264"), v8, v7);
  }

}

uint64_t SFDeviceAssetProcessCanAccessURL(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  int v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    if (!a2)
      goto LABEL_7;
    v7 = (void *)MEMORY[0x1E0CB35C8];
    v8 = *MEMORY[0x1E0CB2FE0];
    v14 = *MEMORY[0x1E0CB2D50];
    v9 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(0, "path");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "stringWithFormat:", CFSTR("Process cannot access URL %@"), v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = v11;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, &v14, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "errorWithDomain:code:userInfo:", v8, 1, v12);
    *(_QWORD *)a2 = (id)objc_claimAutoreleasedReturnValue();

LABEL_6:
    a2 = 0;
    goto LABEL_7;
  }
  objc_msgSend(v3, "path");
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v6 = open((const char *)objc_msgSend(v5, "UTF8String"), 0);

  if (v6 == -1)
    goto LABEL_6;
  close(v6);
  a2 = 1;
LABEL_7:

  return a2;
}

void sub_1A28AB3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1A28ABA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void SFDeviceAssetAddKeyValuePair(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  id v12;
  __int16 v13;
  id v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  objc_msgSend(v6, "description");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v7, "addKeyValuePair:with:", v5, v8);

  if (v9 == 1)
  {
    asset_log();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = 138412802;
      v12 = v6;
      v13 = 2112;
      v14 = v5;
      v15 = 2112;
      v16 = v7;
      _os_log_error_impl(&dword_1A2830000, v10, OS_LOG_TYPE_ERROR, "Failed to add %@ for key %@ to query %@", (uint8_t *)&v11, 0x20u);
    }

  }
}

Class initNEConfigurationManager()
{
  Class result;

  if (NetworkExtensionLibrary_sOnce != -1)
    dispatch_once(&NetworkExtensionLibrary_sOnce, &__block_literal_global_694);
  result = objc_getClass("NEConfigurationManager");
  classNEConfigurationManager = (uint64_t)result;
  getNEConfigurationManagerClass[0] = (uint64_t (*)())NEConfigurationManagerFunction;
  return result;
}

id NEConfigurationManagerFunction()
{
  return (id)classNEConfigurationManager;
}

Class initMADownloadOptions()
{
  Class result;

  if (MobileAssetLibrary_sOnce != -1)
    dispatch_once(&MobileAssetLibrary_sOnce, &__block_literal_global_697);
  result = objc_getClass("MADownloadOptions");
  classMADownloadOptions = (uint64_t)result;
  getMADownloadOptionsClass[0] = (uint64_t (*)())MADownloadOptionsFunction;
  return result;
}

id MADownloadOptionsFunction()
{
  return (id)classMADownloadOptions;
}

Class initMAAsset()
{
  Class result;

  if (MobileAssetLibrary_sOnce != -1)
    dispatch_once(&MobileAssetLibrary_sOnce, &__block_literal_global_697);
  result = objc_getClass("MAAsset");
  classMAAsset = (uint64_t)result;
  getMAAssetClass[0] = (uint64_t (*)())MAAssetFunction;
  return result;
}

id MAAssetFunction()
{
  return (id)classMAAsset;
}

id initValASAttributeContentVersion()
{
  id *v0;

  if (MobileAssetLibrary_sOnce != -1)
    dispatch_once(&MobileAssetLibrary_sOnce, &__block_literal_global_697);
  v0 = (id *)dlsym((void *)MobileAssetLibrary_sLib, "ASAttributeContentVersion");
  if (v0)
    objc_storeStrong((id *)&constantValASAttributeContentVersion, *v0);
  getASAttributeContentVersion[0] = (uint64_t (*)())ASAttributeContentVersionFunction;
  return (id)constantValASAttributeContentVersion;
}

id ASAttributeContentVersionFunction()
{
  return (id)constantValASAttributeContentVersion;
}

Class initMAAssetQuery()
{
  Class result;

  if (MobileAssetLibrary_sOnce != -1)
    dispatch_once(&MobileAssetLibrary_sOnce, &__block_literal_global_697);
  result = objc_getClass("MAAssetQuery");
  classMAAssetQuery = (uint64_t)result;
  getMAAssetQueryClass[0] = (uint64_t (*)())MAAssetQueryFunction;
  return result;
}

id MAAssetQueryFunction()
{
  return (id)classMAAssetQuery;
}

uint64_t initMKBDeviceUnlockedSinceBoot()
{
  if (MobileKeyBagLibrary_sOnce != -1)
    dispatch_once(&MobileKeyBagLibrary_sOnce, &__block_literal_global_703);
  softLinkMKBDeviceUnlockedSinceBoot[0] = (uint64_t (*)())dlsym((void *)MobileKeyBagLibrary_sLib, "MKBDeviceUnlockedSinceBoot");
  return softLinkMKBDeviceUnlockedSinceBoot[0]();
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void OUTLINED_FUNCTION_8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 8u);
}

uint64_t SFAirDropUrlSchemeIsSupported(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (SFAirDropUrlSchemeIsSupported_onceToken != -1)
    dispatch_once(&SFAirDropUrlSchemeIsSupported_onceToken, &__block_literal_global_27);
  if (objc_msgSend(v1, "length"))
  {
    v2 = (void *)SFAirDropUrlSchemeIsSupported_urlSchemeDenylist;
    objc_msgSend(v1, "lowercaseString");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v2) = objc_msgSend(v2, "containsObject:", v3);

    if (!(_DWORD)v2)
    {
      v5 = 1;
      goto LABEL_10;
    }
    airdrop_log();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v7 = 138412290;
      v8 = v1;
      _os_log_impl(&dword_1A2830000, v4, OS_LOG_TYPE_DEFAULT, "%@ url scheme is not supported.", (uint8_t *)&v7, 0xCu);
    }

  }
  v5 = 0;
LABEL_10:

  return v5;
}

BOOL SFAirDropDeviceNameIsSuspicious(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = a1;
  v2 = v1;
  if (v1 && (unint64_t)objc_msgSend(v1, "length") >= 0x20)
  {
    v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v2);
    if (v4)
    {
      v5 = (void *)v4;
      v3 = 1;
    }
    else
    {
      objc_msgSend(v2, "componentsSeparatedByString:", CFSTR(":"));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "firstObject");
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v7);
      v3 = v5 != 0;

    }
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1A28B370C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1A28B37B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1A28B758C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id callbackRoutingDict()
{
  if (callbackRoutingDict_onceToken != -1)
    dispatch_once(&callbackRoutingDict_onceToken, &__block_literal_global_357);
  return (id)callbackRoutingDict_routingDict;
}

void notificationResponseHandler(uint64_t a1, uint64_t a2)
{
  _QWORD v4[6];

  if (notificationQueue_onceToken != -1)
    dispatch_once(&notificationQueue_onceToken, &__block_literal_global_28);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __notificationResponseHandler_block_invoke;
  v4[3] = &__block_descriptor_48_e5_v8__0l;
  v4[4] = a1;
  v4[5] = a2;
  dispatch_async((dispatch_queue_t)notificationQueue___queue, v4);
}

void __notificationResponseHandler_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  NSObject *v6;
  __CFRunLoopSource *v7;
  const __CFString *v8;
  __CFRunLoop *Main;
  uint64_t v10;
  uint64_t v11;
  _QWORD block[7];

  callbackRoutingDict();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *(_QWORD *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", 0, v3);
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v5, "dispatchQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (__CFRunLoopSource *)v5[4];
    if (v7)
    {
      v8 = (const __CFString *)*MEMORY[0x1E0C9B280];
      Main = CFRunLoopGetMain();
      CFRunLoopRemoveSource(Main, v7, v8);
      CFRelease(v7);
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __notificationResponseHandler_block_invoke_2;
    block[3] = &unk_1E4830E70;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    block[4] = v5;
    block[5] = v10;
    block[6] = v11;
    dispatch_async(v6, block);

  }
  else if (gLogCategory_SFUserAlert <= 50
         && (gLogCategory_SFUserAlert != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }

}

uint64_t __notificationResponseHandler_block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleResponseForNotification:flags:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __notificationQueue_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("SFUserAlert-queue", 0);
  v1 = (void *)notificationQueue___queue;
  notificationQueue___queue = (uint64_t)v0;

}

void __callbackRoutingDict_block_invoke()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)callbackRoutingDict_routingDict;
  callbackRoutingDict_routingDict = v0;

}

void sub_1A28BA3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

Class initRTIInputSystemService()
{
  Class result;

  if (RemoteTextInputLibrary_sOnce_0 != -1)
    dispatch_once(&RemoteTextInputLibrary_sOnce_0, &__block_literal_global_29);
  result = objc_getClass("RTIInputSystemService");
  classRTIInputSystemService = (uint64_t)result;
  getRTIInputSystemServiceClass[0] = (uint64_t (*)())RTIInputSystemServiceFunction;
  return result;
}

id RTIInputSystemServiceFunction()
{
  return (id)classRTIInputSystemService;
}

id initValRTIServiceSharingName()
{
  id *v0;

  if (RemoteTextInputLibrary_sOnce_0 != -1)
    dispatch_once(&RemoteTextInputLibrary_sOnce_0, &__block_literal_global_29);
  v0 = (id *)dlsym((void *)RemoteTextInputLibrary_sLib_0, "RTIServiceSharingName");
  if (v0)
    objc_storeStrong((id *)&constantValRTIServiceSharingName, *v0);
  getRTIServiceSharingName[0] = (uint64_t (*)())RTIServiceSharingNameFunction;
  return (id)constantValRTIServiceSharingName;
}

id RTIServiceSharingNameFunction()
{
  return (id)constantValRTIServiceSharingName;
}

Class initRTIInputSystemSourceSession()
{
  Class result;

  if (RemoteTextInputLibrary_sOnce_0 != -1)
    dispatch_once(&RemoteTextInputLibrary_sOnce_0, &__block_literal_global_29);
  result = objc_getClass("RTIInputSystemSourceSession");
  classRTIInputSystemSourceSession = (uint64_t)result;
  getRTIInputSystemSourceSessionClass[0] = (uint64_t (*)())RTIInputSystemSourceSessionFunction;
  return result;
}

id RTIInputSystemSourceSessionFunction()
{
  return (id)classRTIInputSystemSourceSession;
}

id initValTIKeyboardOutputInfoTypeUsernameStr()
{
  id *v0;

  if (TextInputLibrary_sOnce != -1)
    dispatch_once(&TextInputLibrary_sOnce, &__block_literal_global_296_1);
  v0 = (id *)dlsym((void *)TextInputLibrary_sLib, "TIKeyboardOutputInfoTypeUsernameStr");
  if (v0)
    objc_storeStrong((id *)&constantValTIKeyboardOutputInfoTypeUsernameStr, *v0);
  getTIKeyboardOutputInfoTypeUsernameStr[0] = (uint64_t (*)())TIKeyboardOutputInfoTypeUsernameStrFunction;
  return (id)constantValTIKeyboardOutputInfoTypeUsernameStr;
}

id TIKeyboardOutputInfoTypeUsernameStrFunction()
{
  return (id)constantValTIKeyboardOutputInfoTypeUsernameStr;
}

id initValTIKeyboardOutputInfoTypePasswordStr()
{
  id *v0;

  if (TextInputLibrary_sOnce != -1)
    dispatch_once(&TextInputLibrary_sOnce, &__block_literal_global_296_1);
  v0 = (id *)dlsym((void *)TextInputLibrary_sLib, "TIKeyboardOutputInfoTypePasswordStr");
  if (v0)
    objc_storeStrong((id *)&constantValTIKeyboardOutputInfoTypePasswordStr, *v0);
  getTIKeyboardOutputInfoTypePasswordStr[0] = (uint64_t (*)())TIKeyboardOutputInfoTypePasswordStrFunction;
  return (id)constantValTIKeyboardOutputInfoTypePasswordStr;
}

id TIKeyboardOutputInfoTypePasswordStrFunction()
{
  return (id)constantValTIKeyboardOutputInfoTypePasswordStr;
}

void sub_1A28BBEB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28BC114(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28BC2E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28BC8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1A28BCB08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28BCCA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28BE9A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28BEA78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28BEC4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28BEE40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28BF034(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28BF254(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28BF44C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28BF66C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28BF8C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28BFABC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28BFD44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28BFF40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28C0178(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28C0378(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28C05B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28C07F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28C0A40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28C0CA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28C0F04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28C118C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28C13E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28C14D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28C15AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28C1780(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28C1974(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28C1B68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28C1D88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28C203C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

Class initWPAWDL()
{
  Class result;

  if (WirelessProximityLibrary_sOnce != -1)
    dispatch_once(&WirelessProximityLibrary_sOnce, &__block_literal_global_232);
  result = objc_getClass("WPAWDL");
  classWPAWDL = (uint64_t)result;
  getWPAWDLClass[0] = (uint64_t (*)())WPAWDLFunction;
  return result;
}

id WPAWDLFunction()
{
  return (id)classWPAWDL;
}

Class initWPNearby()
{
  Class result;

  if (WirelessProximityLibrary_sOnce != -1)
    dispatch_once(&WirelessProximityLibrary_sOnce, &__block_literal_global_232);
  result = objc_getClass("WPNearby");
  classWPNearby = (uint64_t)result;
  getWPNearbyClass[0] = (uint64_t (*)())WPNearbyFunction;
  return result;
}

id WPNearbyFunction()
{
  return (id)classWPNearby;
}

Class initWPPairing()
{
  Class result;

  if (WirelessProximityLibrary_sOnce != -1)
    dispatch_once(&WirelessProximityLibrary_sOnce, &__block_literal_global_232);
  result = objc_getClass("WPPairing");
  classWPPairing = (uint64_t)result;
  getWPPairingClass[0] = (uint64_t (*)())WPPairingFunction;
  return result;
}

id WPPairingFunction()
{
  return (id)classWPPairing;
}

void sub_1A28C2704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1A28C34DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28C3558(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id initValWPNearbyKeyConnectLatencyCritical()
{
  id *v0;

  if (WirelessProximityLibrary_sOnce_0 != -1)
    dispatch_once(&WirelessProximityLibrary_sOnce_0, &__block_literal_global_31);
  v0 = (id *)dlsym((void *)WirelessProximityLibrary_sLib_0, "WPNearbyKeyConnectLatencyCritical");
  if (v0)
    objc_storeStrong((id *)&constantValWPNearbyKeyConnectLatencyCritical, *v0);
  getWPNearbyKeyConnectLatencyCritical[0] = (uint64_t (*)())WPNearbyKeyConnectLatencyCriticalFunction;
  return (id)constantValWPNearbyKeyConnectLatencyCritical;
}

id WPNearbyKeyConnectLatencyCriticalFunction()
{
  return (id)constantValWPNearbyKeyConnectLatencyCritical;
}

id initValWPNearbyLEPipeCapable()
{
  id *v0;

  if (WirelessProximityLibrary_sOnce_0 != -1)
    dispatch_once(&WirelessProximityLibrary_sOnce_0, &__block_literal_global_31);
  v0 = (id *)dlsym((void *)WirelessProximityLibrary_sLib_0, "WPNearbyLEPipeCapable");
  if (v0)
    objc_storeStrong((id *)&constantValWPNearbyLEPipeCapable, *v0);
  getWPNearbyLEPipeCapable[0] = (uint64_t (*)())WPNearbyLEPipeCapableFunction;
  return (id)constantValWPNearbyLEPipeCapable;
}

id WPNearbyLEPipeCapableFunction()
{
  return (id)constantValWPNearbyLEPipeCapable;
}

id initValWPNearbyKeyUseCaseList()
{
  id *v0;

  if (WirelessProximityLibrary_sOnce_0 != -1)
    dispatch_once(&WirelessProximityLibrary_sOnce_0, &__block_literal_global_31);
  v0 = (id *)dlsym((void *)WirelessProximityLibrary_sLib_0, "WPNearbyKeyUseCaseList");
  if (v0)
    objc_storeStrong((id *)&constantValWPNearbyKeyUseCaseList, *v0);
  getWPNearbyKeyUseCaseList[0] = (uint64_t (*)())WPNearbyKeyUseCaseListFunction;
  return (id)constantValWPNearbyKeyUseCaseList;
}

id WPNearbyKeyUseCaseListFunction()
{
  return (id)constantValWPNearbyKeyUseCaseList;
}

uint64_t _QSortCmpInt8(char *a1, char *a2)
{
  int v2;
  int v3;
  BOOL v4;
  _BOOL4 v5;
  int v6;

  v2 = *a1;
  v3 = *a2;
  v4 = v2 < v3;
  v5 = v2 > v3;
  v6 = v4;
  return (v5 - v6);
}

void sub_1A28C4B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1A28C51E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28C5260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1A28C665C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

Class initCBCentralManager()
{
  Class result;

  if (CoreBluetoothLibrary_sOnce != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce, &__block_literal_global_32);
  result = objc_getClass("CBCentralManager");
  classCBCentralManager = (uint64_t)result;
  getCBCentralManagerClass[0] = (uint64_t (*)())CBCentralManagerFunction;
  return result;
}

id CBCentralManagerFunction()
{
  return (id)classCBCentralManager;
}

Class initCBScalablePipeManager()
{
  Class result;

  if (CoreBluetoothLibrary_sOnce != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce, &__block_literal_global_32);
  result = objc_getClass("CBScalablePipeManager");
  classCBScalablePipeManager = (uint64_t)result;
  getCBScalablePipeManagerClass[0] = (uint64_t (*)())CBScalablePipeManagerFunction;
  return result;
}

id CBScalablePipeManagerFunction()
{
  return (id)classCBScalablePipeManager;
}

id initValCBScalablePipeOptionTransport()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce, &__block_literal_global_32);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib, "CBScalablePipeOptionTransport");
  if (v0)
    objc_storeStrong((id *)&constantValCBScalablePipeOptionTransport, *v0);
  getCBScalablePipeOptionTransport[0] = (uint64_t (*)())CBScalablePipeOptionTransportFunction;
  return (id)constantValCBScalablePipeOptionTransport;
}

id CBScalablePipeOptionTransportFunction()
{
  return (id)constantValCBScalablePipeOptionTransport;
}

Class initIDSService()
{
  Class result;

  if (IDSLibrary_sOnce != -1)
    dispatch_once(&IDSLibrary_sOnce, &__block_literal_global_347);
  result = objc_getClass("IDSService");
  classIDSService = (uint64_t)result;
  getIDSServiceClass[0] = (uint64_t (*)())IDSServiceFunction;
  return result;
}

id IDSServiceFunction()
{
  return (id)classIDSService;
}

const char *SFBLEPayloadTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) > 0x12)
    return "?";
  else
    return off_1E4831390[a1 + 1];
}

const char *SFScanRateToString(uint64_t a1)
{
  const char *result;

  if (a1 > 19)
  {
    if (a1 > 39)
    {
      if (a1 == 40)
        return "High";
      if (a1 == 50)
        return "Aggressive";
    }
    else
    {
      if (a1 == 20)
        return "Normal";
      if (a1 == 30)
        return "HighNormal";
    }
    return "?";
  }
  else
  {
    result = "Invalid";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "BackgroundOld";
        break;
      case 2:
        result = "NormalOld";
        break;
      case 3:
        result = "HighOld";
        break;
      case 4:
        result = "AggressiveOld";
        break;
      case 10:
        result = "Background";
        break;
      default:
        return "?";
    }
  }
  return result;
}

void _btSessionEventHandler(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  id v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t (*v15)();

  v6 = a4;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v6 + 38));
  switch(a2)
  {
    case 0:
      v7 = **((_DWORD **)v6 + 18);
      if (v7 <= 30 && (v7 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      *((_QWORD *)v6 + 2) = a1;
      goto LABEL_35;
    case 1:
      v9 = **((_DWORD **)v6 + 18);
      if (v9 > 30 || v9 == -1 && !_LogCategory_Initialize())
        goto LABEL_34;
      goto LABEL_33;
    case 2:
      v10 = *((_QWORD *)v6 + 18);
      v11 = *(_DWORD *)v10;
      if (!*((_QWORD *)v6 + 2))
      {
        if (v11 > 60 || v11 == -1 && !_LogCategory_Initialize())
          goto LABEL_34;
LABEL_33:
        LogPrintF();
LABEL_34:
        CFRelease(v6);
        goto LABEL_35;
      }
      if (v11 <= 60)
      {
        if (v11 != -1 || (v13 = _LogCategory_Initialize(), v10 = *((_QWORD *)v6 + 18), v13))
        {
          LogPrintF();
          v10 = *((_QWORD *)v6 + 18);
        }
      }
      *((_QWORD *)v6 + 2) = 0;
      v15 = _btSessionEventHandler;
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t, void *))softLinkBTSessionAttachWithQueue[0])(*(_QWORD *)(v10 + 24), (uint64_t)&v15, (uint64_t)v6, *((void **)v6 + 38)))
      {
        v14 = **((_DWORD **)v6 + 18);
        if (v14 > 60 || v14 == -1 && !_LogCategory_Initialize())
          goto LABEL_34;
        goto LABEL_33;
      }
LABEL_35:

      return;
    case 3:
      v12 = **((_DWORD **)v6 + 18);
      if (v12 <= 60 && (v12 != -1 || _LogCategory_Initialize()))
        goto LABEL_17;
      goto LABEL_35;
    default:
      v8 = **((_DWORD **)v6 + 18);
      if (v8 <= 40 && (v8 != -1 || _LogCategory_Initialize()))
LABEL_17:
        LogPrintF();
      goto LABEL_35;
  }
}

uint64_t BluetoothProductIDSupportsOBCState(uint64_t a1)
{
  SFHeadphoneProduct *v2;
  uint64_t v3;

  if (a1 >> 1 == 4103)
    return 1;
  v2 = -[SFHeadphoneProduct initWithProductID:]([SFHeadphoneProduct alloc], "initWithProductID:", a1);
  v3 = -[SFHeadphoneProduct supportsOptimizedBatteryCharging](v2, "supportsOptimizedBatteryCharging");

  return v3;
}

Class initCBCentralManager_0()
{
  Class result;

  if (CoreBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_0, &__block_literal_global_830);
  result = objc_getClass("CBCentralManager");
  classCBCentralManager_0 = (uint64_t)result;
  getCBCentralManagerClass_0[0] = (uint64_t (*)())CBCentralManagerFunction_0;
  return result;
}

id CBCentralManagerFunction_0()
{
  return (id)classCBCentralManager_0;
}

Class initCBUUID()
{
  Class result;

  if (CoreBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_0, &__block_literal_global_830);
  result = objc_getClass("CBUUID");
  classCBUUID = (uint64_t)result;
  getCBUUIDClass[0] = (uint64_t (*)())CBUUIDFunction;
  return result;
}

id CBUUIDFunction()
{
  return (id)classCBUUID;
}

id initValCBCentralManagerScanOptionActive()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_0, &__block_literal_global_830);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_0, "CBCentralManagerScanOptionActive");
  if (v0)
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionActive, *v0);
  getCBCentralManagerScanOptionActive[0] = (uint64_t (*)())CBCentralManagerScanOptionActiveFunction;
  return (id)constantValCBCentralManagerScanOptionActive;
}

id CBCentralManagerScanOptionActiveFunction()
{
  return (id)constantValCBCentralManagerScanOptionActive;
}

id initValCBCentralManagerScanOptionAllowDuplicatesKey()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_0, &__block_literal_global_830);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_0, "CBCentralManagerScanOptionAllowDuplicatesKey");
  if (v0)
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionAllowDuplicatesKey, *v0);
  getCBCentralManagerScanOptionAllowDuplicatesKey[0] = (uint64_t (*)())CBCentralManagerScanOptionAllowDuplicatesKeyFunction;
  return (id)constantValCBCentralManagerScanOptionAllowDuplicatesKey;
}

id CBCentralManagerScanOptionAllowDuplicatesKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionAllowDuplicatesKey;
}

id initValCBCentralManagerScanOptionIsPrivilegedDaemonKey()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_0, &__block_literal_global_830);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_0, "CBCentralManagerScanOptionIsPrivilegedDaemonKey");
  if (v0)
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionIsPrivilegedDaemonKey, *v0);
  getCBCentralManagerScanOptionIsPrivilegedDaemonKey[0] = (uint64_t (*)())CBCentralManagerScanOptionIsPrivilegedDaemonKeyFunction;
  return (id)constantValCBCentralManagerScanOptionIsPrivilegedDaemonKey;
}

id CBCentralManagerScanOptionIsPrivilegedDaemonKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionIsPrivilegedDaemonKey;
}

id initValCBCentralManagerScanOptionScanInterval()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_0, &__block_literal_global_830);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_0, "CBCentralManagerScanOptionScanInterval");
  if (v0)
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionScanInterval, *v0);
  getCBCentralManagerScanOptionScanInterval[0] = (uint64_t (*)())CBCentralManagerScanOptionScanIntervalFunction;
  return (id)constantValCBCentralManagerScanOptionScanInterval;
}

id CBCentralManagerScanOptionScanIntervalFunction()
{
  return (id)constantValCBCentralManagerScanOptionScanInterval;
}

id initValCBCentralManagerScanOptionScanWindow()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_0, &__block_literal_global_830);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_0, "CBCentralManagerScanOptionScanWindow");
  if (v0)
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionScanWindow, *v0);
  getCBCentralManagerScanOptionScanWindow[0] = (uint64_t (*)())CBCentralManagerScanOptionScanWindowFunction;
  return (id)constantValCBCentralManagerScanOptionScanWindow;
}

id CBCentralManagerScanOptionScanWindowFunction()
{
  return (id)constantValCBCentralManagerScanOptionScanWindow;
}

id initValCBAdvertisementDataChannel()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_0, &__block_literal_global_830);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_0, "CBAdvertisementDataChannel");
  if (v0)
    objc_storeStrong((id *)&constantValCBAdvertisementDataChannel, *v0);
  getCBAdvertisementDataChannel[0] = (uint64_t (*)())CBAdvertisementDataChannelFunction;
  return (id)constantValCBAdvertisementDataChannel;
}

id CBAdvertisementDataChannelFunction()
{
  return (id)constantValCBAdvertisementDataChannel;
}

id initValCBAdvertisementDataDeviceAddress()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_0, &__block_literal_global_830);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_0, "CBAdvertisementDataDeviceAddress");
  if (v0)
    objc_storeStrong((id *)&constantValCBAdvertisementDataDeviceAddress, *v0);
  getCBAdvertisementDataDeviceAddress[0] = (uint64_t (*)())CBAdvertisementDataDeviceAddressFunction;
  return (id)constantValCBAdvertisementDataDeviceAddress;
}

id CBAdvertisementDataDeviceAddressFunction()
{
  return (id)constantValCBAdvertisementDataDeviceAddress;
}

id initValCBAdvertisementDataManufacturerDataKey()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_0, &__block_literal_global_830);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_0, "CBAdvertisementDataManufacturerDataKey");
  if (v0)
    objc_storeStrong((id *)&constantValCBAdvertisementDataManufacturerDataKey, *v0);
  getCBAdvertisementDataManufacturerDataKey[0] = (uint64_t (*)())CBAdvertisementDataManufacturerDataKeyFunction;
  return (id)constantValCBAdvertisementDataManufacturerDataKey;
}

id CBAdvertisementDataManufacturerDataKeyFunction()
{
  return (id)constantValCBAdvertisementDataManufacturerDataKey;
}

id initValCBAdvertisementDataServiceDataKey()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_0, &__block_literal_global_830);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_0, "CBAdvertisementDataServiceDataKey");
  if (v0)
    objc_storeStrong((id *)&constantValCBAdvertisementDataServiceDataKey, *v0);
  getCBAdvertisementDataServiceDataKey[0] = (uint64_t (*)())CBAdvertisementDataServiceDataKeyFunction;
  return (id)constantValCBAdvertisementDataServiceDataKey;
}

id CBAdvertisementDataServiceDataKeyFunction()
{
  return (id)constantValCBAdvertisementDataServiceDataKey;
}

id initValCBAdvertisementDataLocalNameKey()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_0, &__block_literal_global_830);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_0, "CBAdvertisementDataLocalNameKey");
  if (v0)
    objc_storeStrong((id *)&constantValCBAdvertisementDataLocalNameKey, *v0);
  getCBAdvertisementDataLocalNameKey[0] = (uint64_t (*)())CBAdvertisementDataLocalNameKeyFunction;
  return (id)constantValCBAdvertisementDataLocalNameKey;
}

id CBAdvertisementDataLocalNameKeyFunction()
{
  return (id)constantValCBAdvertisementDataLocalNameKey;
}

id initValCBAdvertisementDataSaturated()
{
  id *v0;

  if (CoreBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&CoreBluetoothLibrary_sOnce_0, &__block_literal_global_830);
  v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_0, "CBAdvertisementDataSaturated");
  if (v0)
    objc_storeStrong((id *)&constantValCBAdvertisementDataSaturated, *v0);
  getCBAdvertisementDataSaturated[0] = (uint64_t (*)())CBAdvertisementDataSaturatedFunction;
  return (id)constantValCBAdvertisementDataSaturated;
}

id CBAdvertisementDataSaturatedFunction()
{
  return (id)constantValCBAdvertisementDataSaturated;
}

Class initWatchSetupAdvertisementIdentifier()
{
  Class result;

  if (NanoRegistryLibrary_sOnce != -1)
    dispatch_once(&NanoRegistryLibrary_sOnce, &__block_literal_global_968);
  result = objc_getClass("WatchSetupAdvertisementIdentifier");
  classWatchSetupAdvertisementIdentifier = (uint64_t)result;
  getWatchSetupAdvertisementIdentifierClass = (uint64_t (*)())WatchSetupAdvertisementIdentifierFunction;
  return result;
}

id WatchSetupAdvertisementIdentifierFunction()
{
  return (id)classWatchSetupAdvertisementIdentifier;
}

uint64_t initBTSessionAttachWithQueue(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  id v8;
  uint64_t v9;

  v7 = MobileBluetoothLibrary_sOnce;
  v8 = a4;
  if (v7 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_971);
  softLinkBTSessionAttachWithQueue[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTSessionAttachWithQueue");
  v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, id))softLinkBTSessionAttachWithQueue[0])(a1, a2, a3, v8);

  return v9;
}

uint64_t initBTSessionDetachWithQueue(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_971);
  softLinkBTSessionDetachWithQueue[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTSessionDetachWithQueue");
  return ((uint64_t (*)(uint64_t))softLinkBTSessionDetachWithQueue[0])(a1);
}

id initValWPNearbyKeyRSSI()
{
  id *v0;

  if (WirelessProximityLibrary_sOnce_1 != -1)
    dispatch_once(&WirelessProximityLibrary_sOnce_1, &__block_literal_global_982);
  v0 = (id *)dlsym((void *)WirelessProximityLibrary_sLib_1, "WPNearbyKeyRSSI");
  if (v0)
    objc_storeStrong((id *)&constantValWPNearbyKeyRSSI, *v0);
  getWPNearbyKeyRSSI[0] = (uint64_t (*)())WPNearbyKeyRSSIFunction;
  return (id)constantValWPNearbyKeyRSSI;
}

id initValWPNearbyKeyManufacturerData()
{
  id *v0;

  if (WirelessProximityLibrary_sOnce_1 != -1)
    dispatch_once(&WirelessProximityLibrary_sOnce_1, &__block_literal_global_982);
  v0 = (id *)dlsym((void *)WirelessProximityLibrary_sLib_1, "WPNearbyKeyManufacturerData");
  if (v0)
    objc_storeStrong((id *)&constantValWPNearbyKeyManufacturerData, *v0);
  getWPNearbyKeyManufacturerData[0] = (uint64_t (*)())WPNearbyKeyManufacturerDataFunction;
  return (id)constantValWPNearbyKeyManufacturerData;
}

id initValWPNearbyKeyDeviceAddress()
{
  id *v0;

  if (WirelessProximityLibrary_sOnce_1 != -1)
    dispatch_once(&WirelessProximityLibrary_sOnce_1, &__block_literal_global_982);
  v0 = (id *)dlsym((void *)WirelessProximityLibrary_sLib_1, "WPNearbyKeyDeviceAddress");
  if (v0)
    objc_storeStrong((id *)&constantValWPNearbyKeyDeviceAddress, *v0);
  getWPNearbyKeyDeviceAddress[0] = (uint64_t (*)())WPNearbyKeyDeviceAddressFunction;
  return (id)constantValWPNearbyKeyDeviceAddress;
}

id initValWPNearbyKeyPaired()
{
  id *v0;

  if (WirelessProximityLibrary_sOnce_1 != -1)
    dispatch_once(&WirelessProximityLibrary_sOnce_1, &__block_literal_global_982);
  v0 = (id *)dlsym((void *)WirelessProximityLibrary_sLib_1, "WPNearbyKeyPaired");
  if (v0)
    objc_storeStrong((id *)&constantValWPNearbyKeyPaired, *v0);
  getWPNearbyKeyPaired[0] = (uint64_t (*)())WPNearbyKeyPairedFunction;
  return (id)constantValWPNearbyKeyPaired;
}

id initValWPPairingKeyAdvertisingChannel()
{
  id *v0;

  if (WirelessProximityLibrary_sOnce_1 != -1)
    dispatch_once(&WirelessProximityLibrary_sOnce_1, &__block_literal_global_982);
  v0 = (id *)dlsym((void *)WirelessProximityLibrary_sLib_1, "WPPairingKeyAdvertisingChannel");
  if (v0)
    objc_storeStrong((id *)&constantValWPPairingKeyAdvertisingChannel, *v0);
  getWPPairingKeyAdvertisingChannel[0] = (uint64_t (*)())WPPairingKeyAdvertisingChannelFunction;
  return (id)constantValWPPairingKeyAdvertisingChannel;
}

id WPPairingKeyAdvertisingChannelFunction()
{
  return (id)constantValWPPairingKeyAdvertisingChannel;
}

id initValWPPairingKeyDeviceAddress()
{
  id *v0;

  if (WirelessProximityLibrary_sOnce_1 != -1)
    dispatch_once(&WirelessProximityLibrary_sOnce_1, &__block_literal_global_982);
  v0 = (id *)dlsym((void *)WirelessProximityLibrary_sLib_1, "WPPairingKeyDeviceAddress");
  if (v0)
    objc_storeStrong((id *)&constantValWPPairingKeyDeviceAddress, *v0);
  getWPPairingKeyDeviceAddress[0] = (uint64_t (*)())WPPairingKeyDeviceAddressFunction;
  return (id)constantValWPPairingKeyDeviceAddress;
}

id WPPairingKeyDeviceAddressFunction()
{
  return (id)constantValWPPairingKeyDeviceAddress;
}

id initValWPPairingKeyAccessoryStatusDecrypted()
{
  id *v0;

  if (WirelessProximityLibrary_sOnce_1 != -1)
    dispatch_once(&WirelessProximityLibrary_sOnce_1, &__block_literal_global_982);
  v0 = (id *)dlsym((void *)WirelessProximityLibrary_sLib_1, "WPPairingKeyAccessoryStatusDecrypted");
  if (v0)
    objc_storeStrong((id *)&constantValWPPairingKeyAccessoryStatusDecrypted, *v0);
  getWPPairingKeyAccessoryStatusDecrypted[0] = (uint64_t (*)())WPPairingKeyAccessoryStatusDecryptedFunction;
  return (id)constantValWPPairingKeyAccessoryStatusDecrypted;
}

id WPPairingKeyAccessoryStatusDecryptedFunction()
{
  return (id)constantValWPPairingKeyAccessoryStatusDecrypted;
}

uint64_t initBTDeviceFromIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_971);
  softLinkBTDeviceFromIdentifier = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceFromIdentifier");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceFromIdentifier)(a1, a2, a3);
}

uint64_t initBTDeviceGetName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_971);
  softLinkBTDeviceGetName[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceGetName");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetName[0])(a1, a2, a3);
}

uint64_t initBTDeviceGetPairingStatus(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_971);
  softLinkBTDeviceGetPairingStatus[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceGetPairingStatus");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceGetPairingStatus[0])(a1, a2);
}

uint64_t initBTDeviceIsTemporaryPaired(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_971);
  softLinkBTDeviceIsTemporaryPaired[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceIsTemporaryPaired");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceIsTemporaryPaired[0])(a1, a2);
}

uint64_t initBTDeviceGetConnectedServices(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_971);
  softLinkBTDeviceGetConnectedServices[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceGetConnectedServices");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceGetConnectedServices[0])(a1, a2);
}

uint64_t initBTDeviceGetAddressString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_971);
  softLinkBTDeviceGetAddressString[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceGetAddressString");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetAddressString[0])(a1, a2, a3);
}

uint64_t initBTDeviceAddressFromString(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_971);
  softLinkBTDeviceAddressFromString[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceAddressFromString");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceAddressFromString[0])(a1, a2);
}

id getFPItemManagerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getFPItemManagerClass_softClass;
  v7 = getFPItemManagerClass_softClass;
  if (!getFPItemManagerClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getFPItemManagerClass_block_invoke;
    v3[3] = &unk_1E482D680;
    v3[4] = &v4;
    __getFPItemManagerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1A28CF19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SharedWithYouCoreLibrary()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!SharedWithYouCoreLibraryCore_frameworkLibrary)
  {
    v2 = xmmword_1E4831B18;
    v3 = 0;
    SharedWithYouCoreLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SharedWithYouCoreLibraryCore_frameworkLibrary)
    SharedWithYouCoreLibrary_cold_1(&v1);
  return SharedWithYouCoreLibraryCore_frameworkLibrary;
}

void sub_1A28CF550(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id get_CKCloudKitPreShareType()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)get_CKCloudKitPreShareTypeSymbolLoc_ptr;
  v6 = get_CKCloudKitPreShareTypeSymbolLoc_ptr;
  if (!get_CKCloudKitPreShareTypeSymbolLoc_ptr)
  {
    v1 = (void *)CloudKitLibrary_0();
    v0 = (id *)dlsym(v1, "_CKCloudKitPreShareType");
    v4[3] = (uint64_t)v0;
    get_CKCloudKitPreShareTypeSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    get_CKCloudKitPreShareType_cold_1();
  return *v0;
}

void sub_1A28CF908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id get_CKCloudKitPostShareType()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)get_CKCloudKitPostShareTypeSymbolLoc_ptr;
  v6 = get_CKCloudKitPostShareTypeSymbolLoc_ptr;
  if (!get_CKCloudKitPostShareTypeSymbolLoc_ptr)
  {
    v1 = (void *)CloudKitLibrary_0();
    v0 = (id *)dlsym(v1, "_CKCloudKitPostShareType");
    v4[3] = (uint64_t)v0;
    get_CKCloudKitPostShareTypeSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    get_CKCloudKitPostShareType_cold_1();
  return *v0;
}

void sub_1A28CF9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_1A28CFC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t soft_CKSharingAccessTypeFromOptionsGroups(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v1 = a1;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = getCKSharingAccessTypeFromOptionsGroupsSymbolLoc_ptr;
  v9 = getCKSharingAccessTypeFromOptionsGroupsSymbolLoc_ptr;
  if (!getCKSharingAccessTypeFromOptionsGroupsSymbolLoc_ptr)
  {
    v3 = (void *)CloudKitLibrary_0();
    v2 = dlsym(v3, "CKSharingAccessTypeFromOptionsGroups");
    v7[3] = (uint64_t)v2;
    getCKSharingAccessTypeFromOptionsGroupsSymbolLoc_ptr = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
    soft_CKSharingAccessTypeFromOptionsGroups_cold_1();
  v4 = ((uint64_t (*)(id))v2)(v1);

  return v4;
}

void sub_1A28CFCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getCKAllowedSharingOptionsClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCKAllowedSharingOptionsClass_softClass;
  v7 = getCKAllowedSharingOptionsClass_softClass;
  if (!getCKAllowedSharingOptionsClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getCKAllowedSharingOptionsClass_block_invoke;
    v3[3] = &unk_1E482D680;
    v3[4] = &v4;
    __getCKAllowedSharingOptionsClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1A28CFFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getCloudSharingClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCloudSharingClass_softClass;
  v7 = getCloudSharingClass_softClass;
  if (!getCloudSharingClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getCloudSharingClass_block_invoke;
    v3[3] = &unk_1E482D680;
    v3[4] = &v4;
    __getCloudSharingClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1A28D0158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getCKPostSharingContextClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCKPostSharingContextClass_softClass;
  v7 = getCKPostSharingContextClass_softClass;
  if (!getCKPostSharingContextClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getCKPostSharingContextClass_block_invoke;
    v3[3] = &unk_1E482D680;
    v3[4] = &v4;
    __getCKPostSharingContextClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1A28D07F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getCKPreSharingContextClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCKPreSharingContextClass_softClass;
  v7 = getCKPreSharingContextClass_softClass;
  if (!getCKPreSharingContextClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getCKPreSharingContextClass_block_invoke;
    v3[3] = &unk_1E482D680;
    v3[4] = &v4;
    __getCKPreSharingContextClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1A28D09D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A28D0FF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1A28D11AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A28D1434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void sub_1A28D1B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getCKShareTitleKey()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getCKShareTitleKeySymbolLoc_ptr;
  v6 = getCKShareTitleKeySymbolLoc_ptr;
  if (!getCKShareTitleKeySymbolLoc_ptr)
  {
    v1 = (void *)CloudKitLibrary_0();
    v0 = (id *)dlsym(v1, "CKShareTitleKey");
    v4[3] = (uint64_t)v0;
    getCKShareTitleKeySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getCKShareTitleKey_cold_1();
  return *v0;
}

void sub_1A28D1BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_1A28D20D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A28D2B5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1A28D3100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A28D3A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id get_SWPendingCollaborationTypeIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)get_SWPendingCollaborationTypeIdentifierSymbolLoc_ptr;
  v6 = get_SWPendingCollaborationTypeIdentifierSymbolLoc_ptr;
  if (!get_SWPendingCollaborationTypeIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)SharedWithYouCoreLibrary();
    v0 = (id *)dlsym(v1, "_SWPendingCollaborationTypeIdentifier");
    v4[3] = (uint64_t)v0;
    get_SWPendingCollaborationTypeIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    get_SWPendingCollaborationTypeIdentifier_cold_1();
  return *v0;
}

void sub_1A28D3B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getUTCollaborationOptionsTypeIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getUTCollaborationOptionsTypeIdentifierSymbolLoc_ptr;
  v6 = getUTCollaborationOptionsTypeIdentifierSymbolLoc_ptr;
  if (!getUTCollaborationOptionsTypeIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)SharedWithYouCoreLibrary();
    v0 = (id *)dlsym(v1, "UTCollaborationOptionsTypeIdentifier");
    v4[3] = (uint64_t)v0;
    getUTCollaborationOptionsTypeIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getUTCollaborationOptionsTypeIdentifier_cold_1();
  return *v0;
}

void sub_1A28D3E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_1A28D4E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A28D51D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A28D591C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A28D5B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id getCKErrorDomain()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getCKErrorDomainSymbolLoc_ptr;
  v6 = getCKErrorDomainSymbolLoc_ptr;
  if (!getCKErrorDomainSymbolLoc_ptr)
  {
    v1 = (void *)CloudKitLibrary_0();
    v0 = (id *)dlsym(v1, "CKErrorDomain");
    v4[3] = (uint64_t)v0;
    getCKErrorDomainSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getCKErrorDomain_cold_1();
  return *v0;
}

void sub_1A28D5D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_1A28D8E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

Class __getFPItemManagerClass_block_invoke(uint64_t a1)
{
  Class result;

  FileProviderLibrary();
  result = objc_getClass("FPItemManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getFPItemManagerClass_block_invoke_cold_1();
  getFPItemManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void FileProviderLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!FileProviderLibraryCore_frameworkLibrary)
  {
    v1 = xmmword_1E4831B00;
    v2 = 0;
    FileProviderLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!FileProviderLibraryCore_frameworkLibrary)
    FileProviderLibrary_cold_1(&v0);
}

void initSWCollaborationMetadataForDocumentURL(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v5 = a1;
  v4 = (void *)SharedWithYouCoreLibrary();
  softLinkSWCollaborationMetadataForDocumentURL[0] = (uint64_t (*)())dlsym(v4, "SWCollaborationMetadataForDocumentURL");
  ((void (*)(id, id))softLinkSWCollaborationMetadataForDocumentURL[0])(v5, v3);

}

uint64_t CloudKitLibrary_0()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!CloudKitLibraryCore_frameworkLibrary_0)
  {
    v2 = xmmword_1E4831B30;
    v3 = 0;
    CloudKitLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!CloudKitLibraryCore_frameworkLibrary_0)
    CloudKitLibrary_cold_1_0(&v1);
  return CloudKitLibraryCore_frameworkLibrary_0;
}

Class __getCKAllowedSharingOptionsClass_block_invoke(uint64_t a1)
{
  Class result;

  CloudKitLibrary_0();
  result = objc_getClass("CKAllowedSharingOptions");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCKAllowedSharingOptionsClass_block_invoke_cold_1();
  getCKAllowedSharingOptionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getCloudSharingClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!CloudSharingLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E4831B48;
    v5 = 0;
    CloudSharingLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CloudSharingLibraryCore_frameworkLibrary)
    __getCloudSharingClass_block_invoke_cold_1(&v3);
  result = objc_getClass("CloudSharing");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCloudSharingClass_block_invoke_cold_2();
  getCloudSharingClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getCKPostSharingContextClass_block_invoke(uint64_t a1)
{
  Class result;

  CloudKitLibrary_0();
  result = objc_getClass("CKPostSharingContext");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCKPostSharingContextClass_block_invoke_cold_1();
  getCKPostSharingContextClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getCKPreSharingContextClass_block_invoke(uint64_t a1)
{
  Class result;

  CloudKitLibrary_0();
  result = objc_getClass("CKPreSharingContext");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCKPreSharingContextClass_block_invoke_cold_1();
  getCKPreSharingContextClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getCKContainerSetupInfoClass_block_invoke_0(uint64_t a1)
{
  Class result;

  CloudKitLibrary_0();
  result = objc_getClass("CKContainerSetupInfo");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCKContainerSetupInfoClass_block_invoke_cold_1_0();
  getCKContainerSetupInfoClass_softClass_0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getLPiCloudSharingMetadataClass_block_invoke(uint64_t a1)
{
  Class result;

  LinkPresentationLibrary();
  result = objc_getClass("LPiCloudSharingMetadata");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getLPiCloudSharingMetadataClass_block_invoke_cold_1();
  getLPiCloudSharingMetadataClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void LinkPresentationLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!LinkPresentationLibraryCore_frameworkLibrary)
  {
    v1 = xmmword_1E4831B60;
    v2 = 0;
    LinkPresentationLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!LinkPresentationLibraryCore_frameworkLibrary)
    LinkPresentationLibrary_cold_1(&v0);
}

Class __getLPImageClass_block_invoke(uint64_t a1)
{
  Class result;

  LinkPresentationLibrary();
  result = objc_getClass("LPImage");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getLPImageClass_block_invoke_cold_1();
  getLPImageClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getLPSharedObjectMetadataClass_block_invoke(uint64_t a1)
{
  Class result;

  LinkPresentationLibrary();
  result = objc_getClass("LPSharedObjectMetadata");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getLPSharedObjectMetadataClass_block_invoke_cold_1();
  getLPSharedObjectMetadataClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getLPLinkMetadataClass_block_invoke(uint64_t a1)
{
  Class result;

  LinkPresentationLibrary();
  result = objc_getClass("LPLinkMetadata");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getLPLinkMetadataClass_block_invoke_cold_1();
  getLPLinkMetadataClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getFPProviderDomainClass_block_invoke(uint64_t a1)
{
  Class result;

  FileProviderLibrary();
  result = objc_getClass("FPProviderDomain");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getFPProviderDomainClass_block_invoke_cold_1();
  getFPProviderDomainClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void initSWPerformActionForDocumentURL(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;

  v5 = a3;
  v6 = a2;
  v8 = a1;
  v7 = (void *)SharedWithYouCoreLibrary();
  softLinkSWPerformActionForDocumentURL[0] = (uint64_t (*)())dlsym(v7, "SWPerformActionForDocumentURL");
  ((void (*)(id, id, id))softLinkSWPerformActionForDocumentURL[0])(v8, v6, v5);

}

void OUTLINED_FUNCTION_2_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

char *OUTLINED_FUNCTION_7_1()
{
  return dlerror();
}

void OUTLINED_FUNCTION_13(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void _btSessionEventHandler_0(uint64_t a1, int a2, int a3, void *a4)
{
  void *v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;

  v8 = (void *)MEMORY[0x1A8588E24]();
  v9 = a4;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v9 + 23));
  switch(a2)
  {
    case 0:
      v10 = **((_DWORD **)v9 + 17);
      if (v10 <= 30 && (v10 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      *((_QWORD *)v9 + 10) = a1;
      v9[89] = 0;
      if (v9[90])
        objc_msgSend(v9, "_btEnsureStarted");
      else
        objc_msgSend(v9, "_btEnsureStopped");
      goto LABEL_38;
    case 1:
      v12 = **((_DWORD **)v9 + 17);
      if (v12 <= 30 && (v12 != -1 || _LogCategory_Initialize()))
      {
        v17 = (a3 + 310000);
        LogPrintF();
      }
      *((_QWORD *)v9 + 10) = 0;
      v9[89] = 0;
      objc_msgSend(v9, "_btEnsureStopped", v17);
      if (!v9[96] || v9[91])
        goto LABEL_37;
      v15 = **((_DWORD **)v9 + 17);
      if (v15 <= 30 && (v15 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      v9[96] = 0;
      objc_msgSend(v9, "_btEnsureStopped");
      goto LABEL_36;
    case 2:
      v13 = **((_DWORD **)v9 + 17);
      if (v13 <= 60 && (v13 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      *((_QWORD *)v9 + 10) = 0;
      v9[89] = 0;
      v16 = v9[90];
      objc_msgSend(v9, "_btEnsureStopped");
      if (v16)
LABEL_36:
        objc_msgSend(v9, "_btEnsureStarted");
LABEL_37:
      CFRelease(v9);
      goto LABEL_38;
    case 3:
      v14 = **((_DWORD **)v9 + 17);
      if (v14 <= 60 && (v14 != -1 || _LogCategory_Initialize()))
        goto LABEL_16;
      goto LABEL_38;
    default:
      v11 = **((_DWORD **)v9 + 17);
      if (v11 <= 40 && (v11 != -1 || _LogCategory_Initialize()))
LABEL_16:
        LogPrintF();
LABEL_38:

      objc_autoreleasePoolPop(v8);
      return;
  }
}

void _btServiceEventHandler(uint64_t a1, _OWORD *a2, int a3, uint64_t a4, int a5, void *a6)
{
  void *v12;
  unsigned int *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  void *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  void *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  const char *v36;
  const char *v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _OWORD v51[15];
  uint64_t v52;
  char __s1[16];
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v12 = (void *)MEMORY[0x1A8588E24]();
  v13 = a6;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v13 + 23));
  if (!*((_BYTE *)v13 + 88))
    goto LABEL_81;
  if (a3 == 2)
  {
    v15 = **((_DWORD **)v13 + 17);
    if (v15 > 30 || v15 == -1 && !_LogCategory_Initialize())
      goto LABEL_81;
    goto LABEL_16;
  }
  if (a3 == 1)
  {
    v16 = **((_DWORD **)v13 + 17);
    if (v16 > 30 || v16 == -1 && !_LogCategory_Initialize())
      goto LABEL_81;
    goto LABEL_16;
  }
  if (a3)
  {
    v17 = **((_DWORD **)v13 + 17);
    if (v17 > 30 || v17 == -1 && !_LogCategory_Initialize())
      goto LABEL_81;
LABEL_16:
    BTServiceSpecificEventToString(a4);
    goto LABEL_17;
  }
  v14 = **((_DWORD **)v13 + 17);
  if (v14 <= 30 && (v14 != -1 || _LogCategory_Initialize()))
  {
    v44 = BTServiceSpecificEventToString(a4);
    v45 = (a5 + 310000);
    v42 = (const char *)&unk_1A2AF7C00;
    v43 = a4;
    v41 = (unint64_t)a2;
    LogPrintF();
  }
  if ((_DWORD)a4 != 11)
    goto LABEL_81;
  *(_OWORD *)__s1 = 0u;
  v54 = 0u;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetAddressString_0[0])(a1, (uint64_t)__s1, 32))
  {
    v39 = **((_DWORD **)v13 + 17);
    if (v39 > 90 || v39 == -1 && !_LogCategory_Initialize())
      goto LABEL_81;
LABEL_17:
    LogPrintF();
    goto LABEL_81;
  }
  if (strcmp(__s1, (const char *)v13 + 8))
  {
    v40 = **((_DWORD **)v13 + 17);
    if (v40 > 30 || v40 == -1 && !_LogCategory_Initialize())
      goto LABEL_81;
    goto LABEL_17;
  }
  if (!a5)
  {
    v52 = 0;
    memset(v51, 0, sizeof(v51));
    if (!a1)
      goto LABEL_75;
    ((void (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetName_0[0])(a1, (uint64_t)v51, 248);
    if (LOBYTE(v51[0]))
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v51);
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = (void *)*((_QWORD *)v13 + 26);
      *((_QWORD *)v13 + 26) = v19;

    }
    v50 = 0;
    v49 = 0;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetDeviceId[0])(a1, (uint64_t)&v50 + 4, (uint64_t)&v50, (uint64_t)&v49, (uint64_t)(v13 + 40));
    v48 = 0;
    v21 = ((uint64_t (*)(uint64_t, uint64_t))softLinkBTAccessoryManagerGetDefault[0])(*((_QWORD *)v13 + 10), (uint64_t)&v48);
    if (v21)
    {
      v22 = v21;
      v23 = **((_DWORD **)v13 + 17);
      if (v23 <= 60 && (v23 != -1 || _LogCategory_Initialize()))
      {
        v41 = (v22 + 310000);
        LogPrintF();
      }
    }
    if (!v48)
      goto LABEL_75;
    v47 = 0;
    v27 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetFeatureCapability[0])(v48, a1, 1, (uint64_t)&v47);
    if (v27)
    {
      v28 = v27;
      v29 = **((_DWORD **)v13 + 17);
      if (v29 <= 60 && (v29 != -1 || _LogCategory_Initialize()))
      {
        v41 = (v28 + 310000);
        LogPrintF();
      }
      v30 = 0;
      v47 = 0;
    }
    else
    {
      v30 = v47 != 0;
    }
    *((_BYTE *)v13 + 157) = v30;
    v46 = 0;
    v31 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetFeatureCapability[0])(v48, a1, 26, (uint64_t)&v46);
    if (v31)
    {
      v32 = v31;
      v33 = **((_DWORD **)v13 + 17);
      if (v33 <= 60 && (v33 != -1 || _LogCategory_Initialize()))
      {
        v41 = (v32 + 310000);
        LogPrintF();
      }
      v34 = 0;
      v46 = 0;
    }
    else
    {
      v34 = v46 != 0;
    }
    *((_BYTE *)v13 + 158) = v34;
    v35 = **((_DWORD **)v13 + 17);
    if (v35 > 30)
      goto LABEL_75;
    if (v35 == -1)
    {
      if (!_LogCategory_Initialize())
      {
LABEL_75:
        v38 = **((_DWORD **)v13 + 17);
        if (v38 <= 30 && (v38 != -1 || _LogCategory_Initialize()))
        {
          v41 = (unint64_t)v51;
          v42 = (const char *)v13[40];
          LogPrintF();
        }
        *((_BYTE *)v13 + 41) = 0;
        v25 = v13;
        v26 = 0;
        goto LABEL_80;
      }
      v34 = *((unsigned __int8 *)v13 + 158);
    }
    if (*((_BYTE *)v13 + 157))
      v36 = "yes";
    else
      v36 = "no";
    if (v34)
      v37 = "yes";
    else
      v37 = "no";
    v41 = (unint64_t)v36;
    v42 = v37;
    LogPrintF();
    goto LABEL_75;
  }
  if (*((_BYTE *)v13 + 153))
  {
    v18 = **((_DWORD **)v13 + 17);
    if (v18 <= 60 && (v18 != -1 || _LogCategory_Initialize()))
    {
      v41 = (a5 + 310000);
      LogPrintF();
    }
    *((_BYTE *)v13 + 41) = 0;
    v25 = v13;
    v26 = (a5 + 310000);
LABEL_80:
    objc_msgSend(v25, "_completed:", v26, v41, v42, v43, v44, v45);
    goto LABEL_81;
  }
  v24 = **((_DWORD **)v13 + 17);
  if (v24 <= 60 && (v24 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if ((a5 - 151) <= 0xF && ((1 << (a5 + 105)) & 0x8081) != 0)
    objc_msgSend(v13, "_btDeletePairingAndRetry");
LABEL_81:

  objc_autoreleasePoolPop(v12);
}

void _btPairingAgentStatusHandler(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v7;
  id v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v7 = (void *)MEMORY[0x1A8588E24]();
  v8 = a5;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v8 + 23));
  switch(a2)
  {
    case 0:
      v9 = **((_DWORD **)v8 + 17);
      if (v9 <= 30 && (v9 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      if (*((_BYTE *)v8 + 90))
      {
        *((_BYTE *)v8 + 72) = 1;
        objc_msgSend(v8, "_btEnsureStarted");
      }
      break;
    case 1:
      v11 = **((_DWORD **)v8 + 17);
      if (v11 <= 30 && (v11 != -1 || _LogCategory_Initialize()))
        goto LABEL_16;
      break;
    case 2:
      v12 = **((_DWORD **)v8 + 17);
      if (v12 <= 30 && (v12 != -1 || _LogCategory_Initialize()))
        goto LABEL_16;
      break;
    case 3:
      v13 = **((_DWORD **)v8 + 17);
      if (v13 <= 30 && (v13 != -1 || _LogCategory_Initialize()))
        goto LABEL_16;
      break;
    default:
      v10 = **((_DWORD **)v8 + 17);
      if (v10 <= 30 && (v10 != -1 || _LogCategory_Initialize()))
LABEL_16:
        LogPrintF();
      break;
  }

  objc_autoreleasePoolPop(v7);
}

void _btPairingAgentUserConfirmationHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v8;
  id v9;
  int v10;
  int v11;
  int v12;
  char __s1;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[15];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v8 = (void *)MEMORY[0x1A8588E24]();
  v9 = a5;
  v15 = 0;
  v14 = 0;
  memset(v16, 0, sizeof(v16));
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v9 + 23));
  __s1 = 0;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetAddressString_0[0])(a2, (uint64_t)&__s1, 32))
  {
    v12 = **((_DWORD **)v9 + 17);
    if (v12 > 90 || v12 == -1 && !_LogCategory_Initialize())
      goto LABEL_8;
LABEL_14:
    LogPrintF();
    goto LABEL_8;
  }
  v10 = strcmp(&__s1, (const char *)v9 + 8);
  v11 = **((_DWORD **)v9 + 17);
  if (v10)
  {
    if (v11 > 30 || v11 == -1 && !_LogCategory_Initialize())
      goto LABEL_8;
    goto LABEL_14;
  }
  if (v11 <= 30 && (v11 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  ((void (*)(uint64_t, uint64_t, uint64_t))softLinkBTPairingAgentAcceptSSP[0])(a1, a2, 0);
LABEL_8:

  objc_autoreleasePoolPop(v8);
}

Class initWPClient()
{
  Class result;

  if (WirelessProximityLibrary_sOnce_2 != -1)
    dispatch_once(&WirelessProximityLibrary_sOnce_2, &__block_literal_global_34);
  result = objc_getClass("WPClient");
  classWPClient = (uint64_t)result;
  getWPClientClass[0] = (uint64_t (*)())WPClientFunction;
  return result;
}

id WPClientFunction()
{
  return (id)classWPClient;
}

uint64_t initBTSessionAttachWithQueue_0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  id v8;
  uint64_t v9;

  v7 = MobileBluetoothLibrary_sOnce_0;
  v8 = a4;
  if (v7 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTSessionAttachWithQueue_0[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTSessionAttachWithQueue");
  v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, id))softLinkBTSessionAttachWithQueue_0[0])(a1, a2, a3, v8);

  return v9;
}

uint64_t initBTServiceAddCallbacks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTServiceAddCallbacks[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTServiceAddCallbacks");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTServiceAddCallbacks[0])(a1, a2, a3);
}

uint64_t initBTDeviceAddressFromString_0(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTDeviceAddressFromString_0[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTDeviceAddressFromString");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceAddressFromString_0[0])(a1, a2);
}

uint64_t initBTDeviceFromAddress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTDeviceFromAddress[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTDeviceFromAddress");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceFromAddress[0])(a1, a2, a3);
}

uint64_t initBTDeviceGetAddressString_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTDeviceGetAddressString_0[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTDeviceGetAddressString");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetAddressString_0[0])(a1, a2, a3);
}

uint64_t initBTDeviceGetPairingStatus_0(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTDeviceGetPairingStatus_0[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTDeviceGetPairingStatus");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceGetPairingStatus_0[0])(a1, a2);
}

uint64_t initBTDeviceGetName_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTDeviceGetName_0[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTDeviceGetName");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetName_0[0])(a1, a2, a3);
}

uint64_t initBTDeviceGetDeviceId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTDeviceGetDeviceId[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTDeviceGetDeviceId");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetDeviceId[0])(a1, a2, a3, a4, a5);
}

uint64_t initBTAccessoryManagerGetDefault(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTAccessoryManagerGetDefault[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTAccessoryManagerGetDefault");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTAccessoryManagerGetDefault[0])(a1, a2);
}

uint64_t initBTAccessoryManagerGetFeatureCapability(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTAccessoryManagerGetFeatureCapability[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTAccessoryManagerGetFeatureCapability");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetFeatureCapability[0])(a1, a2, a3, a4);
}

uint64_t initBTPairingAgentCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTPairingAgentCreate[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTPairingAgentCreate");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTPairingAgentCreate[0])(a1, a2, a3, a4);
}

uint64_t initBTPairingAgentStart(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTPairingAgentStart[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTPairingAgentStart");
  return ((uint64_t (*)(uint64_t))softLinkBTPairingAgentStart[0])(a1);
}

uint64_t initBTDeviceConfigureLinkKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTDeviceConfigureLinkKey[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTDeviceConfigureLinkKey");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTDeviceConfigureLinkKey[0])(a1, a2, a3, a4);
}

uint64_t initBTDeviceConnectServicesWithParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTDeviceConnectServicesWithParameters[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTDeviceConnectServicesWithParameters");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTDeviceConnectServicesWithParameters[0])(a1, a2, a3, a4);
}

uint64_t initBTDeviceConnectServices(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTDeviceConnectServices[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTDeviceConnectServices");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceConnectServices[0])(a1, a2);
}

uint64_t initBTDeviceDisconnect(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTDeviceDisconnect[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTDeviceDisconnect");
  return ((uint64_t (*)(uint64_t))softLinkBTDeviceDisconnect[0])(a1);
}

uint64_t initBTPairingAgentDeletePairedDevice(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTPairingAgentDeletePairedDevice[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTPairingAgentDeletePairedDevice");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTPairingAgentDeletePairedDevice[0])(a1, a2);
}

uint64_t initBTPairingAgentCancelPairing(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTPairingAgentCancelPairing[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTPairingAgentCancelPairing");
  return ((uint64_t (*)(uint64_t))softLinkBTPairingAgentCancelPairing[0])(a1);
}

uint64_t initBTPairingAgentStop(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTPairingAgentStop[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTPairingAgentStop");
  return ((uint64_t (*)(uint64_t))softLinkBTPairingAgentStop[0])(a1);
}

uint64_t initBTPairingAgentDestroy(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTPairingAgentDestroy[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTPairingAgentDestroy");
  return ((uint64_t (*)(uint64_t))softLinkBTPairingAgentDestroy[0])(a1);
}

uint64_t initBTServiceRemoveCallbacks(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTServiceRemoveCallbacks[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTServiceRemoveCallbacks");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTServiceRemoveCallbacks[0])(a1, a2);
}

uint64_t initBTSessionDetachWithQueue_0(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTSessionDetachWithQueue_0[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTSessionDetachWithQueue");
  return ((uint64_t (*)(uint64_t))softLinkBTSessionDetachWithQueue_0[0])(a1);
}

uint64_t initBTPairingAgentAcceptSSP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_0 != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce_0, &__block_literal_global_307);
  softLinkBTPairingAgentAcceptSSP[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib_0, "BTPairingAgentAcceptSSP");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTPairingAgentAcceptSSP[0])(a1, a2, a3);
}

const char *BTServiceSpecificEventToString(int a1)
{
  const char *result;

  if (a1 <= 500)
  {
    if (a1 <= 100)
    {
      if (a1 <= 1)
      {
        if (!a1)
          return "BT_SERVICE_SDP";
        if (a1 == 1)
          return "BT_SERVICE_CONNECTION_ATTEMPT";
      }
      else
      {
        switch(a1)
        {
          case 2:
            return "BT_SERVICE_DISCONNECTION_ATTEMPT";
          case 11:
            return "BT_SERVICE_CONNECTION_RESULT";
          case 12:
            return "BT_SERVICE_DISCONNECTION_RESULT";
        }
      }
    }
    else
    {
      if (a1 <= 201)
      {
        switch(a1)
        {
          case 'e':
            result = "BT_SERVICE_HANDSFREE_AUDIO_CONNECTED";
            break;
          case 'f':
            result = "BT_SERVICE_HANDSFREE_AUDIO_DISCONNECTED";
            break;
          case 'g':
            result = "BT_SERVICE_HANDSFREE_START_VOICE_COMMAND";
            break;
          case 'h':
            result = "BT_SERVICE_HANDSFREE_END_VOICE_COMMAND";
            break;
          default:
            if (a1 != 201)
              return "?";
            result = "BT_SERVICE_A2DP_AUDIO_CONNECTED";
            break;
        }
        return result;
      }
      if (a1 > 301)
      {
        if (a1 == 302)
          return "BT_SERVICE_PHONE_BOOK_SEND_COMPLETE";
        if (a1 == 303)
          return "BT_SERVICE_PHONE_BOOK_SYNC_SUPPORTED";
      }
      else
      {
        if (a1 == 202)
          return "BT_SERVICE_A2DP_AUDIO_DISCONNECTED";
        if (a1 == 301)
          return "BT_SERVICE_PHONE_BOOK_SEND_INITIATED";
      }
    }
    return "?";
  }
  switch(a1)
  {
    case 501:
      result = "BT_SERVICE_REMOTE_PLAY";
      break;
    case 502:
      result = "BT_SERVICE_REMOTE_PAUSE";
      break;
    case 503:
      result = "BT_SERVICE_REMOTE_STOP";
      break;
    case 504:
      result = "BT_SERVICE_REMOTE_PREVIOUS";
      break;
    case 505:
      result = "BT_SERVICE_REMOTE_NEXT";
      break;
    case 506:
      result = "BT_SERVICE_REMOTE_VOL_UP";
      break;
    case 507:
      result = "BT_SERVICE_REMOTE_VOL_DOWN";
      break;
    case 508:
      result = "BT_SERVICE_REMOTE_MUTE";
      break;
    case 509:
      result = "BT_SERVICE_REMOTE_FASTFORWARD_START";
      break;
    case 510:
      result = "BT_SERVICE_REMOTE_FASTFORWARD_STOP";
      break;
    case 511:
      result = "BT_SERVICE_REMOTE_REWIND_START";
      break;
    case 512:
      result = "BT_SERVICE_REMOTE_REWIND_STOP";
      break;
    default:
      if (a1 == 601)
      {
        result = "BT_SERVICE_SENSOR_RSSI";
      }
      else
      {
        if (a1 != 701)
          return "?";
        result = "BT_SERVICE_LMP_NAME_CHANGED";
      }
      break;
  }
  return result;
}

void sub_1A28DF464(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28E0478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A28E0658(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A28E1ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  objc_sync_exit(v15);
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

BOOL NSStringLooksLikeBTAddress(void *a1)
{
  id v1;
  _BOOL8 v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((unint64_t)objc_msgSend(v1, "length") >= 0xC)
  {
    objc_msgSend(v1, "componentsSeparatedByString:", CFSTR(":"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (v3)
    {
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v5 = v3;
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v12;
        while (2)
        {
          v9 = 0;
          do
          {
            if (*(_QWORD *)v12 != v8)
              objc_enumerationMutation(v5);
            if ((unint64_t)objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v9), "length", (_QWORD)v11) < 2)
            {

              goto LABEL_14;
            }
            ++v9;
          }
          while (v7 != v9);
          v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
          if (v7)
            continue;
          break;
        }
      }

      v2 = objc_msgSend(v5, "count") == 6;
    }
    else
    {
LABEL_14:
      v2 = 0;
    }

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t RPCompanionLinkDeviceIsEqualToSFDevice(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  char v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v3 = a1;
  v4 = a2;
  objc_msgSend(v4, "rapportIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend(v3, "homeKitIdentifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "UUIDString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isEqualToString:", v5);

    if ((v8 & 1) != 0)
      goto LABEL_7;
  }

  objc_msgSend(v4, "idsIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend(v3, "idsDeviceIdentifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "isEqualToString:", v5);

    if ((v10 & 1) != 0)
      goto LABEL_7;
  }

  objc_msgSend(v4, "identifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "UUIDString");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
    goto LABEL_8;
  objc_msgSend(v3, "effectiveIdentifier");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "isEqualToString:", v5);

  if ((v13 & 1) != 0)
  {
LABEL_7:
    LOBYTE(v14) = 1;
  }
  else
  {
LABEL_8:

    objc_msgSend(v3, "publicIdentifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      objc_msgSend(v4, "bleDevice");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "advertisementFields");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("bdAddr"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      if (v17 && NSStringLooksLikeBTAddress(v5))
      {
        SFDataFromHexString(v5);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        if (v18)
          v14 = (int)(objc_msgSend(v17, "isEqualToData:", v18) << 31) >> 31;
        else
          LOBYTE(v14) = 0;

      }
      else
      {
        LOBYTE(v14) = 0;
      }

    }
    else
    {
      LOBYTE(v14) = 0;
    }
  }

  return v14 & 1;
}

id SFAddSuffixForCurrentDeviceClass(void *a1)
{
  id v1;
  unsigned int v2;
  const __CFString *v3;
  void *v4;

  v1 = a1;
  if (SFDeviceClassCodeGet_sOnce != -1)
    dispatch_once(&SFDeviceClassCodeGet_sOnce, &__block_literal_global_36);
  v2 = SFDeviceClassCodeGet_sResult - 1;
  if (v2 > 6)
    v3 = CFSTR("_IPHONE");
  else
    v3 = off_1E4831ED8[(char)v2];
  objc_msgSend(v1, "stringByAppendingString:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t SFAddSuffixForDeviceClass(void *a1, const char *a2)
{
  const __CFString *v2;

  if (((_DWORD)a2 - 1) > 6)
    v2 = CFSTR("_IPHONE");
  else
    v2 = off_1E4831ED8[(char)((_BYTE)a2 - 1)];
  return objc_msgSend(a1, "stringByAppendingString:", v2);
}

id NSDataFromHexString(void *a1)
{
  id v1;
  unint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  unint64_t v9;
  char __str[2];
  char v11;

  v1 = a1;
  v2 = objc_msgSend(v1, "length");
  objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithCapacity:", v2 >> 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = 0;
  v4 = objc_retainAutorelease(v1);
  v5 = objc_msgSend(v4, "UTF8String");
  v9 = 0;
  if (v2)
  {
    v6 = v5;
    for (i = 0; i < v2; i += 2)
    {
      *(_WORD *)__str = *(_WORD *)(v6 + i);
      v9 = strtoul(__str, 0, 16);
      objc_msgSend(v3, "appendBytes:length:", &v9, 1);
    }
  }

  return v3;
}

uint64_t SFDeviceColorCodeGet()
{
  if (SFDeviceColorCodeGet_sOnce != -1)
    dispatch_once(&SFDeviceColorCodeGet_sOnce, &__block_literal_global_360);
  return SFDeviceColorCodeGet_sResult;
}

uint64_t SFDeviceHomeButtonType()
{
  if (SFDeviceHomeButtonType_sOnce != -1)
    dispatch_once(&SFDeviceHomeButtonType_sOnce, &__block_literal_global_363);
  return SFDeviceHomeButtonType_sType;
}

id SFDeviceToRPCompanionLinkDevice(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v4)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v6 = v4;
    v7 = (id)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v13;
      while (2)
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v13 != v8)
            objc_enumerationMutation(v6);
          v10 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
          if ((RPCompanionLinkDeviceIsEqualToSFDevice(v10, v3) & 1) != 0)
          {
            v7 = v10;
            goto LABEL_12;
          }
        }
        v7 = (id)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        if (v7)
          continue;
        break;
      }
    }
LABEL_12:

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

uint64_t SFDeviceModelCodeGet()
{
  if (SFDeviceModelCodeGet_sOnce != -1)
    dispatch_once(&SFDeviceModelCodeGet_sOnce, &__block_literal_global_366);
  return SFDeviceModelCodeGet_sResult;
}

void SFDispatchTimerSet(void *a1, double a2, double a3, double a4)
{
  unint64_t v6;
  dispatch_time_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *source;

  v6 = (unint64_t)(a2 * 1000000000.0);
  source = a1;
  v7 = dispatch_time(0x8000000000000000, v6);
  if (a4 <= -10.0)
  {
    v8 = v6 / 0xA;
  }
  else if (a4 <= -4.0)
  {
    v8 = v6 >> 2;
  }
  else
  {
    v8 = (unint64_t)(a4 * 1000000000.0);
  }
  if (a3 < 0.0)
    v9 = -1;
  else
    v9 = (unint64_t)(a3 * 1000000000.0);
  dispatch_source_set_timer(source, v7, v9, v8);

}

id SFErrorF()
{
  void *v0;

  NSErrorV();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v0)
  {
    NSErrorF();
    v0 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v0;
}

id SFNestedErrorF()
{
  void *v0;

  NSErrorNestedV();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v0)
  {
    NSErrorF();
    v0 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v0;
}

id SFHighPriorityQueue()
{
  uint64_t v1;

  if (SFHighPriorityQueue_sOnce != -1)
    dispatch_once(&SFHighPriorityQueue_sOnce, &__block_literal_global_520);
  if (SFHighPriorityQueue_sQueue)
    return (id)SFHighPriorityQueue_sQueue;
  v1 = FatalErrorF();
  return (id)__SFHighPriorityQueue_block_invoke(v1);
}

id SFHomePodDisplayNameForDeviceName(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v1 = a1;
  SFLocalizedStringForKey(CFSTR("HOMEPOD_HANDOFF_HEADER_DEFAULT"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v1;
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    objc_msgSend(v5, "lowercaseString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v6, "hasSuffix:", CFSTR("homepod")) & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "stringByTrimmingCharactersInSet:", v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@"), v8, v2);
      v9 = objc_claimAutoreleasedReturnValue();

      v5 = (id)v9;
    }

  }
  else
  {
    v5 = v2;
  }

  return v5;
}

id SFLocalizedNameForBluetoothProductID(uint64_t a1)
{
  BOOL v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  char v10;
  SFHeadphoneProduct *v11;
  _BOOL4 v12;
  const __CFString *v13;
  SFHeadphoneProduct *v15;
  _BOOL4 v16;

  v2 = (a1 - 8194) > 0xE || ((1 << (a1 - 2)) & 0x7F9B) == 0;
  if (!v2
    || (_DWORD)a1 == 0x10000
    || (v15 = -[SFHeadphoneProduct initWithProductID:]([SFHeadphoneProduct alloc], "initWithProductID:", a1), v16 = -[SFHeadphoneProduct supportsMobileAsset](v15, "supportsMobileAsset"), v15, v16))
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.Sharing"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Localizable-PID_%u"), a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("PRODUCT_NAME_PID_%u"), a1);
    SFLocalizedStringEx(v3, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v5;
    v8 = v6;
    v9 = v8;
    if (v7 == v8)
    {

    }
    else
    {
      if ((v7 == 0) == (v8 != 0))
      {

LABEL_18:
        return v9;
      }
      v10 = objc_msgSend(v7, "isEqual:", v8);

      if ((v10 & 1) == 0)
        goto LABEL_18;
    }

  }
  if ((a1 - 8194) <= 0xD && ((1 << (a1 - 2)) & 0x3001) != 0
    || (_DWORD)a1 == 0x10000
    || (v11 = -[SFHeadphoneProduct initWithProductID:]([SFHeadphoneProduct alloc], "initWithProductID:", a1), v12 = -[SFHeadphoneProduct isAirPods](v11, "isAirPods"), v11, v12))
  {
    v13 = CFSTR("AIRPODS");
  }
  else
  {
    switch((int)a1)
    {
      case 8195:
        v13 = CFSTR("POWERBEATS3_WIRELESS");
        break;
      case 8197:
        v13 = CFSTR("BEATSX");
        break;
      case 8198:
        v13 = CFSTR("BEATS_SOLO3_WIRELESS");
        break;
      case 8201:
        v13 = CFSTR("BEATS_STUDIO3_WIRELESS");
        break;
      default:
        v13 = CFSTR("AUDIO_ACCESSORY");
        break;
    }
  }
  SFLocalizedStringForKey(v13);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  return v9;
}

id SFLocalizedStringEx(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (SFIsGreenTeaDevice())
  {
    objc_msgSend(v7, "stringByAppendingString:", CFSTR("_GT"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "localizedStringForKey:value:table:", v8, CFSTR("_GT"), v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (!objc_msgSend(v9, "isEqual:", CFSTR("_GT")))
      goto LABEL_5;

  }
  v9 = 0;
LABEL_5:
  if (!objc_msgSend(v9, "length"))
  {
    objc_msgSend(v5, "localizedStringForKey:value:table:", v7, &stru_1E483B8E8, v6);
    v10 = objc_claimAutoreleasedReturnValue();

    v9 = (void *)v10;
  }
  if (v9)
    v11 = v9;
  else
    v11 = v7;
  v12 = v11;

  return v12;
}

id SFLocalizePhoneNumber(void *a1)
{
  id v1;
  void *active;
  void *String;
  const void *v4;
  void *v5;
  id v6;

  v1 = a1;
  active = (void *)CPPhoneNumberCopyActiveCountryCode();
  String = (void *)PNCopyBestGuessNormalizedNumberForCountry();
  if (String)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", String);
    v4 = (const void *)CFPhoneNumberCreate();
    free(String);
    if (v4)
    {
      String = (void *)CFPhoneNumberCreateString();
      CFRelease(v4);
    }
    else
    {
      String = 0;
    }
  }
  if (String)
    v5 = String;
  else
    v5 = v1;
  v6 = v5;

  return v6;
}

double SFMeasureCPUDuration(void *a1)
{
  void (**v1)(_QWORD);
  double v2;
  rusage v4;

  memset(&v4, 0, sizeof(v4));
  v1 = a1;
  getrusage(0, &v4);
  v2 = (double)v4.ru_utime.tv_sec
     + (double)v4.ru_utime.tv_usec * 0.000001
     + (double)v4.ru_stime.tv_sec
     + (double)v4.ru_stime.tv_usec * 0.000001;
  v1[2](v1);

  memset(&v4, 0, sizeof(v4));
  getrusage(0, &v4);
  return (double)v4.ru_utime.tv_sec
       + (double)v4.ru_utime.tv_usec * 0.000001
       + (double)v4.ru_stime.tv_sec
       + (double)v4.ru_stime.tv_usec * 0.000001
       - v2;
}

id SFMyAltDSID()
{
  id v0;
  void *v1;
  void *v2;

  v0 = objc_alloc_init((Class)getACAccountStoreClass_0[0]());
  objc_msgSend(v0, "aa_primaryAppleAccount");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "aa_altDSID");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id SFNormalizedUserIdentifiersForContactIdentifier(void *a1, int a2, _BYTE *a3)
{
  return SFNormalizedUserIdentifiersForContactIdentifierEx(a1, a2, 0, a3);
}

id SFNormalizedUserIdentifiersForContactIdentifierEx(void *a1, int a2, id *a3, _BYTE *a4)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  Class v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t k;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  id *v38;
  void *v39;
  char v40;
  id v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _QWORD v61[5];
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t);
  void (*v66)(uint64_t);
  id v67;
  _BYTE v68[128];
  _BYTE v69[128];
  _BYTE v70[128];
  id v71;
  void *v72;
  _QWORD v73[6];

  v73[3] = *MEMORY[0x1E0C80C00];
  v44 = a1;
  v62 = 0;
  v63 = &v62;
  v64 = 0x3032000000;
  v65 = __Block_byref_object_copy__9;
  v66 = __Block_byref_object_dispose__9;
  v67 = 0;
  v45 = objc_alloc_init((Class)getCNContactStoreClass[0]());
  getCNContactEmailAddressesKey[0]();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v73[0] = v5;
  getCNContactInstantMessageAddressesKey[0]();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v73[1] = v6;
  getCNContactPhoneNumbersKey[0]();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v73[2] = v7;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v73, 3);
  v47 = (void *)objc_claimAutoreleasedReturnValue();

  if (a3)
  {
    objc_msgSend((Class)getCNContactFormatterClass[0](), "descriptorForRequiredKeysForStyle:", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v72 = v8;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v72, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      objc_msgSend(v47, "arrayByAddingObjectsFromArray:", v9);
      v10 = objc_claimAutoreleasedReturnValue();

      v47 = (void *)v10;
    }

  }
  v46 = (void *)objc_msgSend(objc_alloc((Class)getCNContactFetchRequestClass[0]()), "initWithKeysToFetch:", v47);
  v11 = (Class)getCNContactClass[0]();
  v71 = v44;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v71, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[objc_class predicateForContactsWithIdentifiers:](v11, "predicateForContactsWithIdentifiers:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "setPredicate:", v13);

  v61[0] = MEMORY[0x1E0C809B0];
  v61[1] = 3221225472;
  v61[2] = __SFNormalizedUserIdentifiersForContactIdentifierEx_block_invoke;
  v61[3] = &unk_1E4831D58;
  v61[4] = &v62;
  objc_msgSend(v45, "enumerateContactsWithFetchRequest:error:usingBlock:", v46, 0, v61);
  if (v63[5])
  {
    v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    objc_msgSend((id)v63[5], "emailAddresses");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v57, v70, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v58;
      do
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v58 != v17)
            objc_enumerationMutation(v15);
          objc_msgSend(*(id *)(*((_QWORD *)&v57 + 1) + 8 * i), "value");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          SFNormalizeEmailAddress(v19, a2);
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          if ((objc_msgSend(v14, "containsObject:", v20) & 1) == 0)
            objc_msgSend(v14, "addObject:", v20);

        }
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v57, v70, 16);
      }
      while (v16);
    }

    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    objc_msgSend((id)v63[5], "instantMessageAddresses");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v53, v69, 16);
    if (v22)
    {
      v23 = *(_QWORD *)v54;
      do
      {
        for (j = 0; j != v22; ++j)
        {
          if (*(_QWORD *)v54 != v23)
            objc_enumerationMutation(v21);
          objc_msgSend(*(id *)(*((_QWORD *)&v53 + 1) + 8 * j), "value");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "username");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "rangeOfString:", CFSTR("@"));
          if (v27)
          {
            SFNormalizeEmailAddress(v26, a2);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend(v14, "containsObject:", v28) & 1) == 0)
              objc_msgSend(v14, "addObject:", v28);

          }
        }
        v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v53, v69, 16);
      }
      while (v22);
    }

    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    objc_msgSend((id)v63[5], "phoneNumbers");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v49, v68, 16);
    if (v30)
    {
      v31 = *(_QWORD *)v50;
      do
      {
        for (k = 0; k != v30; ++k)
        {
          if (*(_QWORD *)v50 != v31)
            objc_enumerationMutation(v29);
          objc_msgSend(*(id *)(*((_QWORD *)&v49 + 1) + 8 * k), "value");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "stringValue");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          SFNormalizePhoneNumber(v34);
          v35 = (void *)objc_claimAutoreleasedReturnValue();

          if (v35 && (objc_msgSend(v14, "containsObject:", v35) & 1) == 0)
            objc_msgSend(v14, "addObject:", v35);

        }
        v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v49, v68, 16);
      }
      while (v30);
    }

    v48 = 0;
    objc_msgSend(v45, "_crossPlatformUnifiedMeContactWithKeysToFetch:error:", v47, &v48);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = v48;
    v38 = a3;
    if (a4 && !v37 && v36)
    {
      objc_msgSend(v36, "identifier");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v40 = objc_msgSend(v39, "isEqualToString:", v44);

      v38 = a3;
      *a4 = v40;
    }
    if (v38)
      objc_storeStrong(v38, (id)v63[5]);

  }
  else
  {
    v14 = 0;
  }

  _Block_object_dispose(&v62, 8);
  return v14;
}

void sub_1A28E57FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

id SFNormalizeEmailAddress(void *a1, int a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  objc_msgSend(a1, "lowercaseString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (a2
    && ((objc_msgSend(v3, "hasSuffix:", CFSTR("@me.com")) & 1) != 0
     || objc_msgSend(v4, "hasSuffix:", CFSTR("@mac.com"))))
  {
    objc_msgSend(v4, "componentsSeparatedByString:", CFSTR("@"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "count"))
    {
      v6 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "stringWithFormat:", CFSTR("%@@icloud.com"), v7);
      v8 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v8 = v4;
    }

  }
  else
  {
    v8 = v4;
  }

  return v8;
}

id SFNormalizePhoneNumber(void *a1)
{
  id v1;
  void *active;
  void *v3;
  const void *v4;
  void *String;
  void *v6;
  void *v7;
  id v8;

  v1 = a1;
  active = (void *)CPPhoneNumberCopyActiveCountryCode();
  v3 = (void *)PNCopyBestGuessNormalizedNumberForCountry();
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v3);
    v4 = (const void *)CFPhoneNumberCreate();
    free(v3);
    if (v4 && (String = (void *)CFPhoneNumberCreateString(), CFRelease(v4), String))
    {
      objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR("+"));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(String, "stringByTrimmingCharactersInSet:", v6);
      v3 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v3 = 0;
    }
  }
  if (v3)
    v7 = v3;
  else
    v7 = v1;
  v8 = v7;

  return v8;
}

const __CFArray *SFShareablePasswordForSSID(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  void (**v4)(_QWORD);
  uint64_t v5;
  const __CFArray *v6;
  void (**v7)(_QWORD);
  CFIndex i;
  const void *ValueAtIndex;
  const void *SSID;
  CFTypeRef v11;
  _QWORD v13[5];
  _QWORD aBlock[5];

  v1 = a1;
  v2 = WiFiManagerClientCreate();
  if (v2)
  {
    v3 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __SFShareablePasswordForSSID_block_invoke;
    aBlock[3] = &__block_descriptor_40_e5_v8__0l;
    aBlock[4] = v2;
    v4 = (void (**)(_QWORD))_Block_copy(aBlock);
    v5 = WiFiManagerClientCopyNetworks();
    v6 = (const __CFArray *)v5;
    if (v5)
    {
      v13[0] = v3;
      v13[1] = 3221225472;
      v13[2] = __SFShareablePasswordForSSID_block_invoke_2;
      v13[3] = &__block_descriptor_40_e5_v8__0l;
      v13[4] = v5;
      v7 = (void (**)(_QWORD))_Block_copy(v13);
      for (i = 0; ; ++i)
      {
        if (i >= CFArrayGetCount(v6))
          goto LABEL_12;
        ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
        SSID = (const void *)WiFiNetworkGetSSID();
        if (SSID)
        {
          if (CFEqual(v1, SSID))
            break;
        }
      }
      v11 = CFRetain(ValueAtIndex);
      if (!v11)
      {
LABEL_12:
        v6 = 0;
        goto LABEL_15;
      }
      if (WiFiNetworkGetShareMode() == 3)
      {
        WiFiNetworkCopyShareablePassword();
        v6 = (const __CFArray *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v6 = 0;
      }
      CFRelease(v11);
LABEL_15:
      v7[2](v7);

    }
    v4[2](v4);

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_1A28E5C20(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 16))(v2);
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

BOOL SFStringContainsOnlyPhoneNumberCharacters(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = (void *)MEMORY[0x1E0CB3780];
  v2 = a1;
  objc_msgSend(v1, "decimalDigitCharacterSet");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR("()+-#* "));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "formUnionWithCharacterSet:", v4);

  objc_msgSend(v3, "invertedSet");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v2, "rangeOfCharacterFromSet:", v5);

  return v6 == 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t SFWiFiChannelToIndex(unsigned int a1)
{
  if (a1 > 0xA5)
    return 0;
  else
    return SFWiFiChannelToIndexMap[a1];
}

uint64_t SFWiFiIndexToChannel(unsigned int a1)
{
  if (a1 > 0x26)
    return 0;
  else
    return SFWiFiIndexToChannelMap[a1];
}

id SFBase64StringFromHexString(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  NSDataFromHexString(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "base64EncodedStringWithOptions:", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id SFCombinedHashFromArray(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t i;
  void *v6;
  void *v7;

  v1 = a1;
  v2 = objc_msgSend(v1, "count");
  if (v2)
  {
    v3 = v2;
    v4 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
    for (i = 0; i != v3; ++i)
    {
      objc_msgSend(v1, "objectAtIndexedSubscript:", i);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      SFBase64StringFromHexString(v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (v7)
        objc_msgSend(v4, "appendString:", v7);
      if (v3 - 1 != i)
        objc_msgSend(v4, "appendString:", CFSTR(","));

    }
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t SFTestFlagsFromString(void *a1)
{
  uint64_t v1;

  strlen((const char *)objc_msgSend(objc_retainAutorelease(a1), "UTF8String"));
  v1 = 1;
  while (TextSep())
  {
    if (strnicmpx())
    {
      if (strnicmpx())
      {
        if (strnicmpx())
        {
          if (strnicmpx())
          {
            if (strnicmpx())
            {
              if (strnicmpx())
              {
                if (strnicmpx())
                {
                  if (strnicmpx())
                  {
                    if (strnicmpx())
                    {
                      if (strnicmpx())
                      {
                        if (strnicmpx())
                        {
                          if (strnicmpx())
                          {
                            if (strnicmpx())
                            {
                              if (strnicmpx())
                              {
                                if (strnicmpx())
                                {
                                  if (strnicmpx())
                                  {
                                    if (strnicmpx())
                                    {
                                      if (strnicmpx())
                                      {
                                        if (strnicmpx())
                                        {
                                          if (strnicmpx())
                                          {
                                            if (strnicmpx())
                                            {
                                              if (strnicmpx())
                                              {
                                                if (strnicmpx())
                                                {
                                                  if (strnicmpx())
                                                  {
                                                    if (strnicmpx())
                                                    {
                                                      if (strnicmp_prefix())
                                                      {
                                                        if (strnicmp_prefix())
                                                        {
                                                          if (strnicmp_prefix())
                                                          {
                                                            if (strnicmp_prefix())
                                                            {
                                                              if (strnicmp_prefix())
                                                              {
                                                                if (strnicmp_prefix())
                                                                {
                                                                  if (strnicmp_prefix())
                                                                  {
                                                                    if (strnicmpx())
                                                                    {
                                                                      if (strnicmpx())
                                                                      {
                                                                        if (strnicmpx())
                                                                        {
                                                                          if (strnicmpx())
                                                                          {
                                                                            if (strnicmpx())
                                                                            {
                                                                              if (strnicmpx())
                                                                              {
                                                                                if (strnicmpx())
                                                                                {
                                                                                  if (strnicmpx())
                                                                                  {
                                                                                    if (!strnicmpx())
                                                                                      v1 |= 0x10000000000uLL;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    v1 |= 0x8000000000uLL;
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  v1 |= 0x4000000000uLL;
                                                                                }
                                                                              }
                                                                              else
                                                                              {
                                                                                v1 |= 0x2000000000uLL;
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              v1 |= 0x1000000000uLL;
                                                                            }
                                                                          }
                                                                          else
                                                                          {
                                                                            v1 |= 0x800000000uLL;
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          v1 |= 0x400000000uLL;
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        v1 |= 0x200000000uLL;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      v1 |= 0x100000000uLL;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    v1 |= 0x80000000uLL;
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  v1 |= 0x20000000uLL;
                                                                }
                                                              }
                                                              else
                                                              {
                                                                v1 |= 0x10000000uLL;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              v1 |= 0x8000000uLL;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            v1 |= 0x4000000uLL;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          v1 |= 0x40000000uLL;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        v1 |= 0x2000000uLL;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      v1 |= 0x1000000uLL;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    v1 |= 0x800000uLL;
                                                  }
                                                }
                                                else
                                                {
                                                  v1 |= 0x400000uLL;
                                                }
                                              }
                                              else
                                              {
                                                v1 |= 0x200000uLL;
                                              }
                                            }
                                            else
                                            {
                                              v1 |= 0x100000uLL;
                                            }
                                          }
                                          else
                                          {
                                            v1 |= 0x80000uLL;
                                          }
                                        }
                                        else
                                        {
                                          v1 |= 0x20000000000uLL;
                                        }
                                      }
                                      else
                                      {
                                        v1 |= 0x40000uLL;
                                      }
                                    }
                                    else
                                    {
                                      v1 |= 0x20000uLL;
                                    }
                                  }
                                  else
                                  {
                                    v1 |= 0x10000uLL;
                                  }
                                }
                                else
                                {
                                  v1 |= 0x8000uLL;
                                }
                              }
                              else
                              {
                                v1 |= 0x4000uLL;
                              }
                            }
                            else
                            {
                              v1 |= 0x2000uLL;
                            }
                          }
                          else
                          {
                            v1 |= 0x1000uLL;
                          }
                        }
                        else
                        {
                          v1 |= 0x800uLL;
                        }
                      }
                      else
                      {
                        v1 |= 0x400uLL;
                      }
                    }
                    else
                    {
                      v1 |= 0x200uLL;
                    }
                  }
                  else
                  {
                    v1 |= 0x100uLL;
                  }
                }
                else
                {
                  v1 |= 0x80uLL;
                }
              }
              else
              {
                v1 |= 0x40uLL;
              }
            }
            else
            {
              v1 |= 0x20uLL;
            }
          }
          else
          {
            v1 |= 0x10uLL;
          }
        }
        else
        {
          v1 |= 8uLL;
        }
      }
      else
      {
        v1 |= 4uLL;
      }
    }
    else
    {
      v1 |= 2uLL;
    }
  }
  return v1;
}

void SFAWDEnsureInitialized()
{
  if (SFAWDEnsureInitialized_sOnce != -1)
    dispatch_once(&SFAWDEnsureInitialized_sOnce, &__block_literal_global_613);
}

void SFAWDSubmit(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void (**v8)(void);

  v8 = a2;
  v3 = (void *)MEMORY[0x1A8588E24]();
  if (SFAWDEnsureInitialized_sOnce != -1)
    dispatch_once(&SFAWDEnsureInitialized_sOnce, &__block_literal_global_613);
  if (!gSFAWDServerConnection)
  {
    if (gLogCategory_Report > 20 || gLogCategory_Report == -1 && !_LogCategory_Initialize())
      goto LABEL_29;
LABEL_22:
    LogPrintF();
LABEL_29:
    v5 = 0;
LABEL_30:
    v7 = 0;
    goto LABEL_16;
  }
  v4 = objc_msgSend((id)gSFAWDServerConnection, "newMetricContainerWithIdentifier:", a1);
  if (!v4)
  {
    if (gLogCategory_Report > 20 || gLogCategory_Report == -1 && !_LogCategory_Initialize())
      goto LABEL_29;
    goto LABEL_22;
  }
  v5 = (void *)v4;
  v8[2]();
  v6 = objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    if (gLogCategory_Report <= 50 && (gLogCategory_Report != -1 || _LogCategory_Initialize()))
      LogPrintF();
    goto LABEL_30;
  }
  v7 = (void *)v6;
  objc_msgSend(v5, "setMetric:", v6);
  if (objc_msgSend((id)gSFAWDServerConnection, "submitMetric:", v5))
  {
    if (gLogCategory_Report <= 40 && (gLogCategory_Report != -1 || _LogCategory_Initialize()))
LABEL_12:
      LogPrintF();
  }
  else if (gLogCategory_Report <= 40 && (gLogCategory_Report != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_12;
  }
LABEL_16:

  objc_autoreleasePoolPop(v3);
}

void SFPowerLogEvent(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  _QWORD block[4];
  id v9;
  id v10;

  v3 = a1;
  v4 = a2;
  if (gLogCategory_Report <= 20 && (gLogCategory_Report != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (SFPowerLogEvent_sOnce != -1)
    dispatch_once(&SFPowerLogEvent_sOnce, &__block_literal_global_622);
  v5 = SFPowerLogEvent_sPowerLogQueue;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __SFPowerLogEvent_block_invoke_2;
  block[3] = &unk_1E482D3A0;
  v9 = v3;
  v10 = v4;
  v6 = v4;
  v7 = v3;
  dispatch_async(v5, block);

}

void SFPowerLogTimeSensitiveEvent(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  _QWORD block[4];
  id v9;
  id v10;

  v3 = a1;
  v4 = a2;
  if (gLogCategory_Report <= 20 && (gLogCategory_Report != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (SFPowerLogTimeSensitiveEvent_sOnce != -1)
    dispatch_once(&SFPowerLogTimeSensitiveEvent_sOnce, &__block_literal_global_624);
  v5 = SFPowerLogTimeSensitiveEvent_sPowerLogQueue;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __SFPowerLogTimeSensitiveEvent_block_invoke_2;
  block[3] = &unk_1E482D3A0;
  v9 = v3;
  v10 = v4;
  v6 = v4;
  v7 = v3;
  dispatch_async(v5, block);

}

Class initACAccountStore_0()
{
  Class result;

  if (AccountsLibrary_sOnce_0 != -1)
    dispatch_once(&AccountsLibrary_sOnce_0, &__block_literal_global_664);
  result = objc_getClass("ACAccountStore");
  classACAccountStore_0 = (uint64_t)result;
  getACAccountStoreClass_0[0] = (uint64_t (*)())ACAccountStoreFunction_0;
  return result;
}

id ACAccountStoreFunction_0()
{
  return (id)classACAccountStore_0;
}

Class initCNContactStore()
{
  Class result;

  if (ContactsLibrary_sOnce != -1)
    dispatch_once(&ContactsLibrary_sOnce, &__block_literal_global_667);
  result = objc_getClass("CNContactStore");
  classCNContactStore = (uint64_t)result;
  getCNContactStoreClass[0] = (uint64_t (*)())CNContactStoreFunction;
  return result;
}

id CNContactStoreFunction()
{
  return (id)classCNContactStore;
}

id initValCNContactEmailAddressesKey()
{
  id *v0;

  if (ContactsLibrary_sOnce != -1)
    dispatch_once(&ContactsLibrary_sOnce, &__block_literal_global_667);
  v0 = (id *)dlsym((void *)ContactsLibrary_sLib, "CNContactEmailAddressesKey");
  if (v0)
    objc_storeStrong((id *)&constantValCNContactEmailAddressesKey, *v0);
  getCNContactEmailAddressesKey[0] = (uint64_t (*)())CNContactEmailAddressesKeyFunction;
  return (id)constantValCNContactEmailAddressesKey;
}

id CNContactEmailAddressesKeyFunction()
{
  return (id)constantValCNContactEmailAddressesKey;
}

id initValCNContactInstantMessageAddressesKey()
{
  id *v0;

  if (ContactsLibrary_sOnce != -1)
    dispatch_once(&ContactsLibrary_sOnce, &__block_literal_global_667);
  v0 = (id *)dlsym((void *)ContactsLibrary_sLib, "CNContactInstantMessageAddressesKey");
  if (v0)
    objc_storeStrong((id *)&constantValCNContactInstantMessageAddressesKey, *v0);
  getCNContactInstantMessageAddressesKey[0] = (uint64_t (*)())CNContactInstantMessageAddressesKeyFunction;
  return (id)constantValCNContactInstantMessageAddressesKey;
}

id CNContactInstantMessageAddressesKeyFunction()
{
  return (id)constantValCNContactInstantMessageAddressesKey;
}

id initValCNContactPhoneNumbersKey()
{
  id *v0;

  if (ContactsLibrary_sOnce != -1)
    dispatch_once(&ContactsLibrary_sOnce, &__block_literal_global_667);
  v0 = (id *)dlsym((void *)ContactsLibrary_sLib, "CNContactPhoneNumbersKey");
  if (v0)
    objc_storeStrong((id *)&constantValCNContactPhoneNumbersKey, *v0);
  getCNContactPhoneNumbersKey[0] = (uint64_t (*)())CNContactPhoneNumbersKeyFunction;
  return (id)constantValCNContactPhoneNumbersKey;
}

id CNContactPhoneNumbersKeyFunction()
{
  return (id)constantValCNContactPhoneNumbersKey;
}

Class initCNContactFormatter()
{
  Class result;

  if (ContactsLibrary_sOnce != -1)
    dispatch_once(&ContactsLibrary_sOnce, &__block_literal_global_667);
  result = objc_getClass("CNContactFormatter");
  classCNContactFormatter = (uint64_t)result;
  getCNContactFormatterClass[0] = (uint64_t (*)())CNContactFormatterFunction;
  return result;
}

id CNContactFormatterFunction()
{
  return (id)classCNContactFormatter;
}

Class initCNContactFetchRequest()
{
  Class result;

  if (ContactsLibrary_sOnce != -1)
    dispatch_once(&ContactsLibrary_sOnce, &__block_literal_global_667);
  result = objc_getClass("CNContactFetchRequest");
  classCNContactFetchRequest = (uint64_t)result;
  getCNContactFetchRequestClass[0] = (uint64_t (*)())CNContactFetchRequestFunction;
  return result;
}

id CNContactFetchRequestFunction()
{
  return (id)classCNContactFetchRequest;
}

Class initCNContact()
{
  Class result;

  if (ContactsLibrary_sOnce != -1)
    dispatch_once(&ContactsLibrary_sOnce, &__block_literal_global_667);
  result = objc_getClass("CNContact");
  classCNContact = (uint64_t)result;
  getCNContactClass[0] = (uint64_t (*)())CNContactFunction;
  return result;
}

id CNContactFunction()
{
  return (id)classCNContact;
}

Class initAWDServerConnection()
{
  Class result;

  if (WirelessDiagnosticsLibrary_sOnce != -1)
    dispatch_once(&WirelessDiagnosticsLibrary_sOnce, &__block_literal_global_676);
  result = objc_getClass("AWDServerConnection");
  classAWDServerConnection = (uint64_t)result;
  getAWDServerConnectionClass[0] = (uint64_t (*)())AWDServerConnectionFunction;
  return result;
}

id AWDServerConnectionFunction()
{
  return (id)classAWDServerConnection;
}

uint64_t initPLLogRegisteredEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (PowerLogLibrary_sOnce != -1)
    dispatch_once(&PowerLogLibrary_sOnce, &__block_literal_global_679);
  softLinkPLLogRegisteredEvent[0] = (uint64_t (*)())dlsym((void *)PowerLogLibrary_sLib, "PLLogRegisteredEvent");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkPLLogRegisteredEvent[0])(a1, a2, a3, a4);
}

uint64_t initPLLogTimeSensitiveRegisteredEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (PowerLogLibrary_sOnce != -1)
    dispatch_once(&PowerLogLibrary_sOnce, &__block_literal_global_679);
  softLinkPLLogTimeSensitiveRegisteredEvent[0] = (uint64_t (*)())dlsym((void *)PowerLogLibrary_sLib, "PLLogTimeSensitiveRegisteredEvent");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkPLLogTimeSensitiveRegisteredEvent[0])(a1, a2, a3, a4);
}

void sub_1A28EAC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1A28EAF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A28EB700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCNContactClass_block_invoke(uint64_t a1)
{
  Class result;

  ContactsLibrary();
  result = objc_getClass("CNContact");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCNContactClass_block_invoke_cold_1();
  getCNContactClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void ContactsLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!ContactsLibraryCore_frameworkLibrary)
  {
    v1 = xmmword_1E48321A8;
    v2 = 0;
    ContactsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!ContactsLibraryCore_frameworkLibrary)
    ContactsLibrary_cold_1(&v0);
}

Class __getCNMutableContactClass_block_invoke(uint64_t a1)
{
  Class result;

  ContactsLibrary();
  result = objc_getClass("CNMutableContact");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCNMutableContactClass_block_invoke_cold_1();
  getCNMutableContactClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getINImageClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!IntentsLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E48321C0;
    v5 = 0;
    IntentsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!IntentsLibraryCore_frameworkLibrary)
    __getINImageClass_block_invoke_cold_1(&v3);
  result = objc_getClass("INImage");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getINImageClass_block_invoke_cold_2();
  getINImageClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1A28EC5A8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v2);
  objc_destroyWeak(v3);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_1A28ECB18(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1A28ECD58(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A28ED6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A28EE030(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1A28EE66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class initACAccountStore_1()
{
  Class result;

  if (AccountsLibrary_sOnce_1 != -1)
    dispatch_once(&AccountsLibrary_sOnce_1, &__block_literal_global_40);
  result = objc_getClass("ACAccountStore");
  classACAccountStore_1 = (uint64_t)result;
  getACAccountStoreClass_1[0] = (uint64_t (*)())ACAccountStoreFunction_1;
  return result;
}

id ACAccountStoreFunction_1()
{
  return (id)classACAccountStore_1;
}

Class initTRSetupCompanionAuthenticationRequest_0()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_1 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_1, &__block_literal_global_270);
  result = objc_getClass("TRSetupCompanionAuthenticationRequest");
  classTRSetupCompanionAuthenticationRequest_0 = (uint64_t)result;
  getTRSetupCompanionAuthenticationRequestClass_0[0] = (uint64_t (*)())TRSetupCompanionAuthenticationRequestFunction_0;
  return result;
}

id TRSetupCompanionAuthenticationRequestFunction_0()
{
  return (id)classTRSetupCompanionAuthenticationRequest_0;
}

Class initTRSetupProxyDeviceRequest_0()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_1 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_1, &__block_literal_global_270);
  result = objc_getClass("TRSetupProxyDeviceRequest");
  classTRSetupProxyDeviceRequest_0 = (uint64_t)result;
  getTRSetupProxyDeviceRequestClass_0[0] = (uint64_t (*)())TRSetupProxyDeviceRequestFunction_0;
  return result;
}

id TRSetupProxyDeviceRequestFunction_0()
{
  return (id)classTRSetupProxyDeviceRequest_0;
}

Class initTRSetupProxyAuthenticationRequest_0()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_1 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_1, &__block_literal_global_270);
  result = objc_getClass("TRSetupProxyAuthenticationRequest");
  classTRSetupProxyAuthenticationRequest_0 = (uint64_t)result;
  getTRSetupProxyAuthenticationRequestClass_0[0] = (uint64_t (*)())TRSetupProxyAuthenticationRequestFunction_0;
  return result;
}

id TRSetupProxyAuthenticationRequestFunction_0()
{
  return (id)classTRSetupProxyAuthenticationRequest_0;
}

Class initTRAnisetteDataProvider_0()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_1 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_1, &__block_literal_global_270);
  result = objc_getClass("TRAnisetteDataProvider");
  classTRAnisetteDataProvider_0 = (uint64_t)result;
  getTRAnisetteDataProviderClass_0[0] = (uint64_t (*)())TRAnisetteDataProviderFunction_0;
  return result;
}

id TRAnisetteDataProviderFunction_0()
{
  return (id)classTRAnisetteDataProvider_0;
}

Class initTRSetupAuthenticationResponse_0()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_1 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_1, &__block_literal_global_270);
  result = objc_getClass("TRSetupAuthenticationResponse");
  classTRSetupAuthenticationResponse_0 = (uint64_t)result;
  getTRSetupAuthenticationResponseClass_0[0] = (uint64_t (*)())TRSetupAuthenticationResponseFunction_0;
  return result;
}

id TRSetupAuthenticationResponseFunction_0()
{
  return (id)classTRSetupAuthenticationResponse_0;
}

Class initAKDevice_0()
{
  Class result;

  if (AuthKitLibrary_sOnce_0 != -1)
    dispatch_once(&AuthKitLibrary_sOnce_0, &__block_literal_global_277);
  result = objc_getClass("AKDevice");
  classAKDevice_0 = (uint64_t)result;
  getAKDeviceClass_0[0] = (uint64_t (*)())AKDeviceFunction_0;
  return result;
}

id AKDeviceFunction_0()
{
  return (id)classAKDevice_0;
}

Class initTRSetupProxyDeviceResponse_0()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_1 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_1, &__block_literal_global_270);
  result = objc_getClass("TRSetupProxyDeviceResponse");
  classTRSetupProxyDeviceResponse_0 = (uint64_t)result;
  getTRSetupProxyDeviceResponseClass_0[0] = (uint64_t (*)())TRSetupProxyDeviceResponseFunction_0;
  return result;
}

id TRSetupProxyDeviceResponseFunction_0()
{
  return (id)classTRSetupProxyDeviceResponse_0;
}

Class initAKAppleIDAuthenticationContext_0()
{
  Class result;

  if (AuthKitLibrary_sOnce_0 != -1)
    dispatch_once(&AuthKitLibrary_sOnce_0, &__block_literal_global_277);
  result = objc_getClass("AKAppleIDAuthenticationContext");
  classAKAppleIDAuthenticationContext_0 = (uint64_t)result;
  getAKAppleIDAuthenticationContextClass_0[0] = (uint64_t (*)())AKAppleIDAuthenticationContextFunction_0;
  return result;
}

id AKAppleIDAuthenticationContextFunction_0()
{
  return (id)classAKAppleIDAuthenticationContext_0;
}

Class initAKAppleIDAuthenticationController_0()
{
  Class result;

  if (AuthKitLibrary_sOnce_0 != -1)
    dispatch_once(&AuthKitLibrary_sOnce_0, &__block_literal_global_277);
  result = objc_getClass("AKAppleIDAuthenticationController");
  classAKAppleIDAuthenticationController_0 = (uint64_t)result;
  getAKAppleIDAuthenticationControllerClass_0[0] = (uint64_t (*)())AKAppleIDAuthenticationControllerFunction_0;
  return result;
}

id AKAppleIDAuthenticationControllerFunction_0()
{
  return (id)classAKAppleIDAuthenticationController_0;
}

id initValAKAuthenticationAlternateDSIDKey_0()
{
  id *v0;

  if (AuthKitLibrary_sOnce_0 != -1)
    dispatch_once(&AuthKitLibrary_sOnce_0, &__block_literal_global_277);
  v0 = (id *)dlsym((void *)AuthKitLibrary_sLib_0, "AKAuthenticationAlternateDSIDKey");
  if (v0)
    objc_storeStrong((id *)&constantValAKAuthenticationAlternateDSIDKey_0, *v0);
  getAKAuthenticationAlternateDSIDKey_0[0] = (uint64_t (*)())AKAuthenticationAlternateDSIDKeyFunction_0;
  return (id)constantValAKAuthenticationAlternateDSIDKey_0;
}

id AKAuthenticationAlternateDSIDKeyFunction_0()
{
  return (id)constantValAKAuthenticationAlternateDSIDKey_0;
}

id initValAKAuthenticationUsernameKey_0()
{
  id *v0;

  if (AuthKitLibrary_sOnce_0 != -1)
    dispatch_once(&AuthKitLibrary_sOnce_0, &__block_literal_global_277);
  v0 = (id *)dlsym((void *)AuthKitLibrary_sLib_0, "AKAuthenticationUsernameKey");
  if (v0)
    objc_storeStrong((id *)&constantValAKAuthenticationUsernameKey_0, *v0);
  getAKAuthenticationUsernameKey_0[0] = (uint64_t (*)())AKAuthenticationUsernameKeyFunction_0;
  return (id)constantValAKAuthenticationUsernameKey_0;
}

id AKAuthenticationUsernameKeyFunction_0()
{
  return (id)constantValAKAuthenticationUsernameKey_0;
}

id initValAKAuthenticationPasswordKey_0()
{
  id *v0;

  if (AuthKitLibrary_sOnce_0 != -1)
    dispatch_once(&AuthKitLibrary_sOnce_0, &__block_literal_global_277);
  v0 = (id *)dlsym((void *)AuthKitLibrary_sLib_0, "AKAuthenticationPasswordKey");
  if (v0)
    objc_storeStrong((id *)&constantValAKAuthenticationPasswordKey_0, *v0);
  getAKAuthenticationPasswordKey_0[0] = (uint64_t (*)())AKAuthenticationPasswordKeyFunction_0;
  return (id)constantValAKAuthenticationPasswordKey_0;
}

id AKAuthenticationPasswordKeyFunction_0()
{
  return (id)constantValAKAuthenticationPasswordKey_0;
}

id initValAAAccountClassPrimary()
{
  id *v0;

  if (AppleAccountLibrary_sOnce_0 != -1)
    dispatch_once(&AppleAccountLibrary_sOnce_0, &__block_literal_global_286);
  v0 = (id *)dlsym((void *)AppleAccountLibrary_sLib_0, "AAAccountClassPrimary");
  if (v0)
    objc_storeStrong((id *)&constantValAAAccountClassPrimary, *v0);
  getAAAccountClassPrimary = (uint64_t)AAAccountClassPrimaryFunction;
  return (id)constantValAAAccountClassPrimary;
}

id AAAccountClassPrimaryFunction()
{
  return (id)constantValAAAccountClassPrimary;
}

id initValAAAccountClassFull()
{
  id *v0;

  if (AppleAccountLibrary_sOnce_0 != -1)
    dispatch_once(&AppleAccountLibrary_sOnce_0, &__block_literal_global_286);
  v0 = (id *)dlsym((void *)AppleAccountLibrary_sLib_0, "AAAccountClassFull");
  if (v0)
    objc_storeStrong((id *)&constantValAAAccountClassFull, *v0);
  getAAAccountClassFull = (uint64_t)AAAccountClassFullFunction;
  return (id)constantValAAAccountClassFull;
}

id AAAccountClassFullFunction()
{
  return (id)constantValAAAccountClassFull;
}

Class initSSMutableAuthenticationContext_0()
{
  Class result;

  if (StoreServicesLibrary_sOnce_0 != -1)
    dispatch_once(&StoreServicesLibrary_sOnce_0, &__block_literal_global_290_0);
  result = objc_getClass("SSMutableAuthenticationContext");
  classSSMutableAuthenticationContext_0 = (uint64_t)result;
  getSSMutableAuthenticationContextClass_0[0] = (uint64_t (*)())SSMutableAuthenticationContextFunction_0;
  return result;
}

id SSMutableAuthenticationContextFunction_0()
{
  return (id)classSSMutableAuthenticationContext_0;
}

Class initSSAccountStore_0()
{
  Class result;

  if (StoreServicesLibrary_sOnce_0 != -1)
    dispatch_once(&StoreServicesLibrary_sOnce_0, &__block_literal_global_290_0);
  result = objc_getClass("SSAccountStore");
  classSSAccountStore_0 = (uint64_t)result;
  getSSAccountStoreClass_0[0] = (uint64_t (*)())SSAccountStoreFunction_0;
  return result;
}

id SSAccountStoreFunction_0()
{
  return (id)classSSAccountStore_0;
}

Class initSSAuthenticateRequest_0()
{
  Class result;

  if (StoreServicesLibrary_sOnce_0 != -1)
    dispatch_once(&StoreServicesLibrary_sOnce_0, &__block_literal_global_290_0);
  result = objc_getClass("SSAuthenticateRequest");
  classSSAuthenticateRequest_0 = (uint64_t)result;
  getSSAuthenticateRequestClass_0[0] = (uint64_t (*)())SSAuthenticateRequestFunction_0;
  return result;
}

id SSAuthenticateRequestFunction_0()
{
  return (id)classSSAuthenticateRequest_0;
}

_TtC7Sharing30AskToAirDropReceiverController *SFCreateAskToAirDropReceiverController(void *a1)
{
  id v1;
  _TtC7Sharing30AskToAirDropReceiverController *v2;

  v1 = a1;
  v2 = -[AskToAirDropReceiverController initWithQueue:]([_TtC7Sharing30AskToAirDropReceiverController alloc], "initWithQueue:", v1);

  return v2;
}

id SFAskToAirDropSubtitleForConnectionState(void *a1)
{
  if ((unint64_t)a1 <= 3)
  {
    SFLocalizedStringForKey(*((const __CFString **)&off_1E4832358 + (_QWORD)a1));
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

CFStringRef SFAskToAirDropTitleString()
{
  return SFLocalizedStringForKey(CFSTR("AirDrop"));
}

void sub_1A28F0280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1A28F0A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A28F1BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A28F2124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

id SFDeviceSetupHomeKitRMVEnabledForAllHomes(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v15 = v1;
  objc_msgSend(v1, "homes");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v17 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        objc_msgSend(v8, "uniqueIdentifier", v14);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "UUIDString");
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v10, "length"))
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", _SFDeviceSetupHomeKitRMVEnabledForHome(v8));
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "setObject:forKeyedSubscript:", v11, v10);

        }
        else if (gLogCategory_SFDeviceSetupUtilities <= 90
               && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
        {
          v14 = v10;
          LogPrintF();
        }

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v5);
  }

  v12 = (void *)objc_msgSend(v2, "copy");
  return v12;
}

uint64_t _SFDeviceSetupHomeKitRMVEnabledForHome(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v1 = a1;
  objc_msgSend(v1, "currentUser");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "userSettingsForHome:", v1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "settings");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      objc_msgSend(v5, "rootGroup");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      _SFHomeKitSettingWithKeyPath(v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (v7)
      {
        objc_msgSend(v7, "value");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "BOOLValue");

        if (gLogCategory_SFDeviceSetupUtilities <= 50
          && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      else
      {
        if (gLogCategory_SFDeviceSetupUtilities <= 50
          && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v9 = 0;
      }

    }
    else
    {
      if (gLogCategory_SFDeviceSetupUtilities <= 50
        && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v9 = 0;
    }

  }
  else
  {
    if (gLogCategory_SFDeviceSetupUtilities <= 50
      && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v9 = 0;
  }

  return v9;
}

id SFDeviceSetupHomeKitInfo(void *a1)
{
  id v1;
  void *v2;
  __objc2_meth_list **p_class_meths;
  __objc2_class **p_superclass;
  uint64_t v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  int v44;
  void *v45;
  int v46;
  void *v47;
  id v48;
  uint64_t j;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  int v55;
  int v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  id v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  int v72;
  int v73;
  id v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  id v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  id v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  id v97;
  id obj;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  id v107;
  void *v108;
  void *v109;
  id v110;
  void *v111;
  id v112;
  void *v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  id v121;
  id v122;
  void *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  id v127;
  id v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  _BYTE v141[128];
  _BYTE v142[128];
  _BYTE v143[128];
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "homes");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "count"))
  {
    v96 = v1;
    v97 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v129 = 0u;
    v130 = 0u;
    v131 = 0u;
    v132 = 0u;
    obj = v2;
    v95 = v2;
    v101 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v129, v141, 16);
    if (v101)
    {
      v100 = *(_QWORD *)v130;
      p_class_meths = &OBJC_PROTOCOL___SFAccessibilityInterface.class_meths;
      p_superclass = &OBJC_METACLASS____TtC7Sharing30AskToAirDropReceiverController.superclass;
      do
      {
        v5 = 0;
        do
        {
          if (*(_QWORD *)v130 != v100)
            objc_enumerationMutation(obj);
          v102 = v5;
          v6 = *(void **)(*((_QWORD *)&v129 + 1) + 8 * v5);
          objc_msgSend(v6, "name", v92, v94);
          v103 = (void *)objc_claimAutoreleasedReturnValue();
          v7 = *((_DWORD *)p_class_meths + 92);
          if (v7 <= 30 && (v7 != -1 || _LogCategory_Initialize()))
          {
            v93 = v103;
            LogPrintF();
          }
          objc_msgSend(v6, "uniqueIdentifier", v93);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "UUIDString");
          v9 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v103, "length") && objc_msgSend(v9, "length"))
          {
            v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
            objc_msgSend(v10, "setObject:forKey:", v103, CFSTR("name"));
            v99 = v9;
            objc_msgSend(v10, "setObject:forKey:", v9, CFSTR("id"));
            v115 = v6;
            objc_msgSend(v115, "mediaSystems");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            v106 = v10;
            if (objc_msgSend(v11, "count"))
            {
              v12 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
              v137 = 0u;
              v138 = 0u;
              v139 = 0u;
              v140 = 0u;
              v113 = v11;
              v121 = v11;
              v13 = objc_msgSend(v121, "countByEnumeratingWithState:objects:count:", &v137, v143, 16);
              if (v13)
              {
                v14 = v13;
                v15 = *(_QWORD *)v138;
                v111 = v12;
                v117 = *(_QWORD *)v138;
                do
                {
                  v16 = 0;
                  v119 = v14;
                  do
                  {
                    if (*(_QWORD *)v138 != v15)
                      objc_enumerationMutation(v121);
                    v17 = *(void **)(*((_QWORD *)&v137 + 1) + 8 * v16);
                    objc_msgSend(v17, "configuredName", v92);
                    v18 = (void *)objc_claimAutoreleasedReturnValue();
                    if (objc_msgSend(v18, "length"))
                      objc_msgSend(v17, "configuredName");
                    else
                      objc_msgSend(v17, "name");
                    v19 = (void *)objc_claimAutoreleasedReturnValue();

                    objc_msgSend(v17, "uniqueIdentifier");
                    v20 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v20, "UUIDString");
                    v21 = (void *)objc_claimAutoreleasedReturnValue();

                    v22 = v21;
                    if (objc_msgSend(v19, "length") && objc_msgSend(v21, "length"))
                    {
                      v23 = objc_alloc_init(MEMORY[0x1E0C99E08]);
                      objc_msgSend(v23, "setObject:forKey:", v19, CFSTR("name"));
                      v125 = v22;
                      objc_msgSend(v23, "setObject:forKey:", v22, CFSTR("id"));
                      v24 = objc_msgSend(v17, "supportsAudioDestination");
                      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v24);
                      v25 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v23, "setObject:forKey:", v25, CFSTR("hksad"));

                      if ((_DWORD)v24)
                      {
                        objc_msgSend(v17, "audioDestinationIdentifier");
                        v26 = (void *)objc_claimAutoreleasedReturnValue();
                        if (v26)
                          objc_msgSend(v23, "setObject:forKey:", v26, CFSTR("hkadi"));

                      }
                      v123 = v23;
                      v127 = v19;
                      v27 = objc_alloc_init(MEMORY[0x1E0C99E20]);
                      v133 = 0u;
                      v134 = 0u;
                      v135 = 0u;
                      v136 = 0u;
                      objc_msgSend(v17, "components");
                      v28 = (void *)objc_claimAutoreleasedReturnValue();
                      v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v133, v142, 16);
                      if (v29)
                      {
                        v30 = v29;
                        v31 = *(_QWORD *)v134;
                        do
                        {
                          for (i = 0; i != v30; ++i)
                          {
                            if (*(_QWORD *)v134 != v31)
                              objc_enumerationMutation(v28);
                            objc_msgSend(*(id *)(*((_QWORD *)&v133 + 1) + 8 * i), "mediaProfile");
                            v33 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v33, "accessory");
                            v34 = (void *)objc_claimAutoreleasedReturnValue();

                            objc_msgSend(v34, "uniqueIdentifier");
                            v35 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v35, "UUIDString");
                            v36 = (void *)objc_claimAutoreleasedReturnValue();

                            if (objc_msgSend(v36, "length"))
                              objc_msgSend(v27, "addObject:", v36);

                          }
                          v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v133, v142, 16);
                        }
                        while (v30);
                      }

                      objc_msgSend(v17, "components");
                      v37 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v37, "firstObject");
                      v38 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v38, "mediaProfile");
                      v39 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v39, "accessory");
                      v40 = (void *)objc_claimAutoreleasedReturnValue();

                      v41 = objc_msgSend(v40, "homePodVariant");
                      if ((unint64_t)(v41 - 1) < 3)
                        v42 = v41;
                      else
                        v42 = 0;
                      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v42);
                      v43 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v123, "setObject:forKey:", v43, CFSTR("hkhpv"));

                      p_class_meths = &OBJC_PROTOCOL___SFAccessibilityInterface.class_meths;
                      v19 = v127;
                      if (gLogCategory_SFDeviceSetupUtilities <= 30
                        && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
                      {
                        objc_msgSend(v115, "name");
                        v94 = (void *)objc_claimAutoreleasedReturnValue();
                        v92 = v127;
                        LogPrintF();

                      }
                      objc_msgSend(v27, "allObjects", v92);
                      v45 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v123, "setObject:forKey:", v45, CFSTR("hkais"));

                      objc_msgSend(v111, "addObject:", v123);
                      v12 = v111;

                      p_superclass = (__objc2_class **)(&OBJC_METACLASS____TtC7Sharing30AskToAirDropReceiverController
                                                      + 8);
                      v15 = v117;
                      v14 = v119;
                      v22 = v125;
                    }
                    else
                    {
                      v44 = *((_DWORD *)p_class_meths + 92);
                      if (v44 <= 90 && (v44 != -1 || _LogCategory_Initialize()))
                      {
                        v92 = v19;
                        v94 = v21;
                        LogPrintF();
                      }
                    }

                    ++v16;
                  }
                  while (v16 != v14);
                  v14 = objc_msgSend(v121, "countByEnumeratingWithState:objects:count:", &v137, v143, 16);
                }
                while (v14);
              }

              v11 = v113;
              v10 = v106;
            }
            else
            {
              v12 = 0;
            }

            if (objc_msgSend(v12, "count"))
              objc_msgSend(v10, "setObject:forKey:", v12, CFSTR("hkms"));
            v104 = v115;
            objc_msgSend(v104, "rooms");
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v47, "count"))
            {
              v48 = v10;
              v107 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
              v133 = 0u;
              v134 = 0u;
              v135 = 0u;
              v136 = 0u;
              v110 = v47;
              v116 = objc_msgSend(v110, "countByEnumeratingWithState:objects:count:", &v133, v142, 16);
              if (v116)
              {
                v112 = v12;
                v114 = *(_QWORD *)v134;
                v105 = v47;
                do
                {
                  for (j = 0; j != v116; j = v57 + 1)
                  {
                    if (*(_QWORD *)v134 != v114)
                      objc_enumerationMutation(v110);
                    v118 = j;
                    v50 = *(void **)(*((_QWORD *)&v133 + 1) + 8 * j);
                    objc_msgSend(v50, "name", v92);
                    v51 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v50, "uniqueIdentifier");
                    v52 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v52, "UUIDString");
                    v53 = (void *)objc_claimAutoreleasedReturnValue();

                    v54 = v51;
                    if (objc_msgSend(v51, "length") && objc_msgSend(v53, "length"))
                    {
                      v55 = *((_DWORD *)p_class_meths + 92);
                      if (v55 <= 30 && (v55 != -1 || _LogCategory_Initialize()))
                      {
                        objc_msgSend(v104, "name");
                        v92 = v51;
                        v94 = (void *)objc_claimAutoreleasedReturnValue();
                        LogPrintF();

                        v54 = v51;
                      }
                      v58 = objc_alloc_init(MEMORY[0x1E0C99E08]);
                      objc_msgSend(v58, "setObject:forKey:", v54, CFSTR("name"));
                      objc_msgSend(v58, "setObject:forKey:", v53, CFSTR("id"));
                      v120 = v50;
                      objc_msgSend(v120, "accessories");
                      v59 = (void *)objc_claimAutoreleasedReturnValue();
                      if (objc_msgSend(v59, "count"))
                      {
                        v109 = v54;
                        v122 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                        v137 = 0u;
                        v138 = 0u;
                        v139 = 0u;
                        v140 = 0u;
                        v108 = v59;
                        v128 = v59;
                        v60 = objc_msgSend(v128, "countByEnumeratingWithState:objects:count:", &v137, v143, 16);
                        if (v60)
                        {
                          v61 = v60;
                          v62 = *(_QWORD *)v138;
                          v124 = *(_QWORD *)v138;
                          do
                          {
                            v63 = 0;
                            v126 = v61;
                            do
                            {
                              if (*(_QWORD *)v138 != v62)
                                objc_enumerationMutation(v128);
                              v64 = *(void **)(*((_QWORD *)&v137 + 1) + 8 * v63);
                              objc_msgSend(v64, "category", v92);
                              v65 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend(v65, "categoryType");
                              v66 = (void *)objc_claimAutoreleasedReturnValue();

                              if (objc_msgSend(v66, "isEqualToString:", ((uint64_t (__cdecl *)())p_superclass[68])()))
                              {
                                v67 = v58;
                                v68 = v53;
                                objc_msgSend(v64, "name");
                                v69 = (void *)objc_claimAutoreleasedReturnValue();
                                objc_msgSend(v64, "uniqueIdentifier");
                                v70 = (void *)objc_claimAutoreleasedReturnValue();
                                objc_msgSend(v70, "UUIDString");
                                v71 = (void *)objc_claimAutoreleasedReturnValue();

                                if (objc_msgSend(v69, "length") && objc_msgSend(v71, "length"))
                                {
                                  v72 = *((_DWORD *)p_class_meths + 92);
                                  if (v72 <= 30 && (v72 != -1 || _LogCategory_Initialize()))
                                  {
                                    objc_msgSend(v120, "name");
                                    v92 = v69;
                                    v94 = (void *)objc_claimAutoreleasedReturnValue();
                                    LogPrintF();

                                  }
                                  v74 = objc_alloc_init(MEMORY[0x1E0C99E08]);
                                  objc_msgSend(v74, "setObject:forKey:", v69, CFSTR("name"));
                                  objc_msgSend(v74, "setObject:forKey:", v71, CFSTR("id"));
                                  objc_msgSend(v74, "setObject:forKey:", v66, CFSTR("hkac"));
                                  v75 = objc_msgSend(v64, "supportsAudioDestination");
                                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v75);
                                  v76 = (void *)objc_claimAutoreleasedReturnValue();
                                  objc_msgSend(v74, "setObject:forKey:", v76, CFSTR("hksad"));

                                  if ((_DWORD)v75)
                                  {
                                    objc_msgSend(v64, "audioDestinationIdentifier");
                                    v77 = (void *)objc_claimAutoreleasedReturnValue();
                                    if (v77)
                                      objc_msgSend(v74, "setObject:forKey:", v77, CFSTR("hkadi"));

                                  }
                                  v78 = objc_msgSend(v64, "homePodVariant", v92);
                                  if ((unint64_t)(v78 - 1) < 3)
                                    v79 = v78;
                                  else
                                    v79 = 0;
                                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v79);
                                  v80 = (void *)objc_claimAutoreleasedReturnValue();
                                  objc_msgSend(v74, "setObject:forKey:", v80, CFSTR("hkhpv"));

                                  objc_msgSend(v122, "addObject:", v74);
                                  p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___SFAccessibilityInterface + 32);
                                  p_superclass = (__objc2_class **)(&OBJC_METACLASS____TtC7Sharing30AskToAirDropReceiverController
                                                                  + 8);
                                }
                                else
                                {
                                  v73 = *((_DWORD *)p_class_meths + 92);
                                  if (v73 <= 90 && (v73 != -1 || _LogCategory_Initialize()))
                                  {
                                    v92 = v69;
                                    v94 = v71;
                                    LogPrintF();
                                  }
                                }

                                v53 = v68;
                                v58 = v67;
                                v62 = v124;
                                v61 = v126;
                              }

                              ++v63;
                            }
                            while (v61 != v63);
                            v61 = objc_msgSend(v128, "countByEnumeratingWithState:objects:count:", &v137, v143, 16);
                          }
                          while (v61);
                        }

                        v47 = v105;
                        v48 = v106;
                        v12 = v112;
                        v59 = v108;
                        v54 = v109;
                        v81 = v122;
                      }
                      else
                      {
                        v81 = 0;
                      }

                      v57 = v118;
                      if (objc_msgSend(v81, "count"))
                        objc_msgSend(v58, "setObject:forKey:", v81, CFSTR("hkas"));
                      objc_msgSend(v107, "addObject:", v58, v92);

                    }
                    else
                    {
                      v56 = *((_DWORD *)p_class_meths + 92);
                      v57 = v118;
                      if (v56 <= 90 && (v56 != -1 || _LogCategory_Initialize()))
                      {
                        v92 = v51;
                        v94 = v53;
                        LogPrintF();
                      }
                    }

                  }
                  v116 = objc_msgSend(v110, "countByEnumeratingWithState:objects:count:", &v133, v142, 16);
                }
                while (v116);
              }

              v82 = (void *)objc_msgSend(v107, "copy");
              v10 = v48;
            }
            else
            {
              v82 = 0;
            }

            if (objc_msgSend(v82, "count"))
              objc_msgSend(v10, "setObject:forKey:", v82, CFSTR("hkrs"));
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", _SFDeviceSetupHomeKitRMVEnabledForHome(v104));
            v83 = v10;
            v84 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v83, "setObject:forKey:", v84, CFSTR("hkrmve"));

            objc_msgSend(v97, "addObject:", v83);
            v9 = v99;
          }
          else
          {
            v46 = *((_DWORD *)p_class_meths + 92);
            if (v46 <= 90 && (v46 != -1 || _LogCategory_Initialize()))
            {
              v92 = v103;
              v94 = v9;
              LogPrintF();
            }
          }

          v5 = v102 + 1;
        }
        while (v102 + 1 != v101);
        v101 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v129, v141, 16);
      }
      while (v101);
    }

    v85 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v85, "setObject:forKey:", v97, CFSTR("hkhs"));
    objc_msgSend(v96, "currentHome");
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v86, "uniqueIdentifier");
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v87, "UUIDString");
    v88 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v88, "length"))
      objc_msgSend(v85, "setObject:forKey:", v88, CFSTR("hkci"));
    _SFDeviceSetupHomeKitCurrentUserInfoFromAllHomes(obj);
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v89, "count"))
      objc_msgSend(v85, "setObject:forKey:", v89, CFSTR("hkcuis"));
    v90 = (void *)objc_msgSend(v85, "copy", v92);

    v2 = v95;
    v1 = v96;
  }
  else
  {
    if (gLogCategory_SFDeviceSetupUtilities <= 50
      && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v90 = (void *)MEMORY[0x1E0C9AA70];
  }

  return v90;
}

id _SFDeviceSetupHomeKitCurrentUserInfoFromAllHomes(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v20;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v20 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v7);
        objc_msgSend(v8, "currentUser", v17);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (v9)
        {
          objc_msgSend(v8, "uniqueIdentifier");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "UUIDString");
          v11 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v9, "uniqueIdentifier");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "UUIDString");
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          if (gLogCategory_SFDeviceSetupUtilities <= 30
            && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
          {
            v17 = v11;
            v18 = v13;
            LogPrintF();
          }
          objc_msgSend(v2, "setObject:forKeyedSubscript:", v13, v11, v17, v18, (_QWORD)v19);

        }
        else if (gLogCategory_SFDeviceSetupUtilities <= 50
               && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
        {
          v17 = v8;
          LogPrintF();
        }

        ++v7;
      }
      while (v5 != v7);
      v14 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      v5 = v14;
    }
    while (v14);
  }

  v15 = (void *)objc_msgSend(v2, "copy");
  return v15;
}

id SFDeviceSetupHomeKitCurrentUserIdentifiers(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  objc_msgSend(v1, "homes");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "count"))
  {
    _SFDeviceSetupHomeKitCurrentUserInfoFromAllHomes(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (gLogCategory_SFDeviceSetupUtilities <= 50
      && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v3 = (void *)MEMORY[0x1E0C9AA70];
  }

  return v3;
}

id SFDeviceSetupDeviceInfo()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v7;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", SFDeviceClassCodeGet());
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setObject:forKeyedSubscript:", v1, CFSTR("dclass"));

  v2 = (void *)GestaltCopyAnswer();
  if (v2)
  {
    objc_msgSend(v0, "setObject:forKeyedSubscript:", v2, CFSTR("dname"));
  }
  else if (gLogCategory_SFDeviceSetupUtilities <= 60
         && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
  {
    v7 = 0;
    LogPrintF();
  }
  v3 = (void *)GestaltCopyAnswer();

  if (v3)
  {
    objc_msgSend(v0, "setObject:forKeyedSubscript:", v3, CFSTR("model"));
  }
  else if (gLogCategory_SFDeviceSetupUtilities <= 60
         && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
  {
    v7 = 0;
    LogPrintF();
  }
  v4 = (void *)GestaltCopyAnswer();

  if (v4)
  {
    objc_msgSend(v0, "setObject:forKeyedSubscript:", v4, CFSTR("osBuild"));
  }
  else if (gLogCategory_SFDeviceSetupUtilities <= 60
         && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
  {
    v7 = 0;
    LogPrintF();
  }
  v5 = (void *)objc_msgSend(v0, "copy", v7);

  return v5;
}

id SFDeviceSetupSiriInfo(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  int v9;
  void *v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v1, "languageCode");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, CFSTR("siriLL"));
  }
  else if (gLogCategory_SFDeviceSetupUtilities <= 60
         && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  objc_msgSend(v1, "outputVoice");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "languageCode");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v5, CFSTR("siriVL"));
  }
  else if (gLogCategory_SFDeviceSetupUtilities <= 60
         && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v6 = objc_msgSend(v4, "gender");
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v7, CFSTR("siriVG"));

  }
  else if (gLogCategory_SFDeviceSetupUtilities <= 60
         && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v8 = objc_msgSend(v1, "suppressAssistantOptIn");
  v9 = objc_msgSend(v1, "assistantIsEnabled");
  if ((v9 & 1) != 0 || v8)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v9 ^ 1u);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, CFSTR("siriD"));

  }
  else if (gLogCategory_SFDeviceSetupUtilities <= 40
         && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
  {
    v22 = 0;
    v24 = 0;
    LogPrintF();
  }
  v11 = objc_msgSend(v1, "suppressDictationOptIn", v22, v24);
  v12 = objc_msgSend(v1, "dictationIsEnabled");
  if ((v12 & 1) != 0 || v11)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v13, CFSTR("siriDE"));

  }
  else if (gLogCategory_SFDeviceSetupUtilities <= 40
         && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
  {
    v23 = 0;
    v25 = 0;
    LogPrintF();
  }
  v14 = objc_msgSend(v1, "siriDataSharingOptInStatus", v23, v25);
  if (v14 == 2)
  {
    v15 = MEMORY[0x1E0C9AAA0];
    goto LABEL_35;
  }
  if (v14 == 1)
  {
    v15 = MEMORY[0x1E0C9AAB0];
LABEL_35:
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v15, CFSTR("siriDS"));
    goto LABEL_36;
  }
  if (gLogCategory_SFDeviceSetupUtilities <= 40
    && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_36:
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", softLinkAFPreferencesTypeToSiriEnabled[0]());
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v16, CFSTR("siriTTS"));

  objc_msgSend((Class)getVTPreferencesClass_1[0](), "sharedPreferences");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "voiceTriggerEnabled");

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v19, CFSTR("siriVP"));

  v20 = (void *)objc_msgSend(v2, "copy");
  return v20;
}

id SFDeviceSetupAppleTVLocationAuthorizationInfo()
{
  id v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (SFDeviceSetupAppleTVLocationAuthorizationInfo_onceToken != -1)
    dispatch_once(&SFDeviceSetupAppleTVLocationAuthorizationInfo_onceToken, &__block_literal_global_42);
  v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v1 = (void *)softLinkCLCopyAppsUsingLocation[0]();
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v2 = (id)SFDeviceSetupAppleTVLocationAuthorizationInfo_kLocationServicesIdentifiers;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v16 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_msgSend(v1, "objectForKey:", v7, v14);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
        {
          v9 = objc_msgSend((Class)getCLLocationManagerClass[0](), "entityAuthorizationForLocationDictionary:", v8);
          v10 = v9 & 1;
          if ((v9 & 2) != 0)
            v10 = 2;
          if ((v9 & 4) != 0)
            v11 = 3;
          else
            v11 = v10;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v11);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v0, "setObject:forKey:", v12, v7);

        }
        else if (gLogCategory_SFDeviceSetupUtilities <= 90
               && (gLogCategory_SFDeviceSetupUtilities != -1 || _LogCategory_Initialize()))
        {
          v14 = v7;
          LogPrintF();
        }

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v4);
  }

  return v0;
}

uint64_t _SFHomePodVariantForHMHomePodVariant(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3)
    return result;
  else
    return 0;
}

id _SFHomeKitSettingWithKeyPath(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  objc_msgSend(v1, "settings");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v22;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v22 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
        objc_msgSend(v7, "keyPath");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "isEqualToString:", CFSTR("root.siri.identifyVoice"));

        if ((v9 & 1) != 0)
        {
          v14 = v7;
          goto LABEL_19;
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
      if (v4)
        continue;
      break;
    }
  }

  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  objc_msgSend(v1, "groups", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v18;
LABEL_11:
    v13 = 0;
    while (1)
    {
      if (*(_QWORD *)v18 != v12)
        objc_enumerationMutation(v2);
      _SFHomeKitSettingWithKeyPath(*(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v13));
      v14 = (id)objc_claimAutoreleasedReturnValue();
      if (v14)
        break;
      if (v11 == ++v13)
      {
        v11 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
        if (v11)
          goto LABEL_11;
        goto LABEL_17;
      }
    }
LABEL_19:
    v15 = v14;
  }
  else
  {
LABEL_17:
    v15 = 0;
  }

  return v15;
}

uint64_t initAFPreferencesTypeToSiriEnabled()
{
  if (AssistantServicesLibrary_sOnce_0 != -1)
    dispatch_once(&AssistantServicesLibrary_sOnce_0, &__block_literal_global_159);
  softLinkAFPreferencesTypeToSiriEnabled[0] = (uint64_t (*)())dlsym((void *)AssistantServicesLibrary_sLib_0, "AFPreferencesTypeToSiriEnabled");
  return softLinkAFPreferencesTypeToSiriEnabled[0]();
}

Class initVTPreferences_1()
{
  Class result;

  if (VoiceTriggerLibrary_sOnce_1 != -1)
    dispatch_once(&VoiceTriggerLibrary_sOnce_1, &__block_literal_global_162);
  result = objc_getClass("VTPreferences");
  classVTPreferences_1 = (uint64_t)result;
  getVTPreferencesClass_1[0] = (uint64_t (*)())VTPreferencesFunction_1;
  return result;
}

id VTPreferencesFunction_1()
{
  return (id)classVTPreferences_1;
}

uint64_t initCLCopyAppsUsingLocation()
{
  if (CoreLocationLibrary_sOnce != -1)
    dispatch_once(&CoreLocationLibrary_sOnce, &__block_literal_global_165_0);
  softLinkCLCopyAppsUsingLocation[0] = (uint64_t (*)())dlsym((void *)CoreLocationLibrary_sLib, "CLCopyAppsUsingLocation");
  return softLinkCLCopyAppsUsingLocation[0]();
}

Class initCLLocationManager()
{
  Class result;

  if (CoreLocationLibrary_sOnce != -1)
    dispatch_once(&CoreLocationLibrary_sOnce, &__block_literal_global_165_0);
  result = objc_getClass("CLLocationManager");
  classCLLocationManager = (uint64_t)result;
  getCLLocationManagerClass[0] = (uint64_t (*)())CLLocationManagerFunction;
  return result;
}

id CLLocationManagerFunction()
{
  return (id)classCLLocationManager;
}

uint64_t initValHMAccessoryCategoryTypeHomePod()
{
  uint64_t *v0;
  uint64_t result;

  if (HomeKitLibrary_sOnce_1 != -1)
    dispatch_once(&HomeKitLibrary_sOnce_1, &__block_literal_global_183);
  v0 = (uint64_t *)dlsym((void *)HomeKitLibrary_sLib_1, "HMAccessoryCategoryTypeHomePod");
  if (v0)
  {
    result = *v0;
    constantValHMAccessoryCategoryTypeHomePod = result;
  }
  else
  {
    result = constantValHMAccessoryCategoryTypeHomePod;
  }
  getHMAccessoryCategoryTypeHomePod[0] = HMAccessoryCategoryTypeHomePodFunction;
  return result;
}

uint64_t HMAccessoryCategoryTypeHomePodFunction()
{
  return constantValHMAccessoryCategoryTypeHomePod;
}

Class initACAccountStore_2()
{
  Class result;

  if (AccountsLibrary_sOnce_2 != -1)
    dispatch_once(&AccountsLibrary_sOnce_2, &__block_literal_global_43);
  result = objc_getClass("ACAccountStore");
  classACAccountStore_2 = (uint64_t)result;
  getACAccountStoreClass_2[0] = (uint64_t (*)())ACAccountStoreFunction_2;
  return result;
}

id ACAccountStoreFunction_2()
{
  return (id)classACAccountStore_2;
}

Class initCDPContext()
{
  Class result;

  if (CoreCDPLibrary_sOnce != -1)
    dispatch_once(&CoreCDPLibrary_sOnce, &__block_literal_global_327_0);
  result = objc_getClass("CDPContext");
  classCDPContext = (uint64_t)result;
  getCDPContextClass[0] = (uint64_t (*)())CDPContextFunction;
  return result;
}

id CDPContextFunction()
{
  return (id)classCDPContext;
}

Class initCDPStateController()
{
  Class result;

  if (CoreCDPLibrary_sOnce != -1)
    dispatch_once(&CoreCDPLibrary_sOnce, &__block_literal_global_327_0);
  result = objc_getClass("CDPStateController");
  classCDPStateController = (uint64_t)result;
  getCDPStateControllerClass[0] = (uint64_t (*)())CDPStateControllerFunction;
  return result;
}

id CDPStateControllerFunction()
{
  return (id)classCDPStateController;
}

Class initCDPUIController()
{
  Class result;

  if (CoreCDPUILibrary_sOnce != -1)
    dispatch_once(&CoreCDPUILibrary_sOnce, &__block_literal_global_331);
  result = objc_getClass("CDPUIController");
  classCDPUIController = (uint64_t)result;
  getCDPUIControllerClass[0] = (uint64_t (*)())CDPUIControllerFunction;
  return result;
}

id CDPUIControllerFunction()
{
  return (id)classCDPUIController;
}

void sub_1A28FA26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose(&a38, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

Class initTROperationQueue_0()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_2 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_2, &__block_literal_global_724);
  result = objc_getClass("TROperationQueue");
  classTROperationQueue_0 = (uint64_t)result;
  getTROperationQueueClass_0[0] = (uint64_t (*)())TROperationQueueFunction_0;
  return result;
}

id TROperationQueueFunction_0()
{
  return (id)classTROperationQueue_0;
}

Class initHMMutableHomeManagerConfiguration()
{
  Class result;

  if (HomeKitLibrary_sOnce_2 != -1)
    dispatch_once(&HomeKitLibrary_sOnce_2, &__block_literal_global_727);
  result = objc_getClass("HMMutableHomeManagerConfiguration");
  classHMMutableHomeManagerConfiguration = (uint64_t)result;
  getHMMutableHomeManagerConfigurationClass = (uint64_t (*)())HMMutableHomeManagerConfigurationFunction;
  return result;
}

id HMMutableHomeManagerConfigurationFunction()
{
  return (id)classHMMutableHomeManagerConfiguration;
}

Class initHMHomeManager_0()
{
  Class result;

  if (HomeKitLibrary_sOnce_2 != -1)
    dispatch_once(&HomeKitLibrary_sOnce_2, &__block_literal_global_727);
  result = objc_getClass("HMHomeManager");
  classHMHomeManager_0 = (uint64_t)result;
  getHMHomeManagerClass_0[0] = (uint64_t (*)())HMHomeManagerFunction_0;
  return result;
}

id HMHomeManagerFunction_0()
{
  return (id)classHMHomeManager_0;
}

Class initHMAccessoryBrowser()
{
  Class result;

  if (HomeKitLibrary_sOnce_2 != -1)
    dispatch_once(&HomeKitLibrary_sOnce_2, &__block_literal_global_727);
  result = objc_getClass("HMAccessoryBrowser");
  classHMAccessoryBrowser = (uint64_t)result;
  getHMAccessoryBrowserClass[0] = (uint64_t (*)())HMAccessoryBrowserFunction;
  return result;
}

id HMAccessoryBrowserFunction()
{
  return (id)classHMAccessoryBrowser;
}

Class initHMDeviceSetupOperation()
{
  Class result;

  if (HomeKitLibrary_sOnce_2 != -1)
    dispatch_once(&HomeKitLibrary_sOnce_2, &__block_literal_global_727);
  result = objc_getClass("HMDeviceSetupOperation");
  classHMDeviceSetupOperation = (uint64_t)result;
  getHMDeviceSetupOperationClass[0] = (uint64_t (*)())HMDeviceSetupOperationFunction;
  return result;
}

id HMDeviceSetupOperationFunction()
{
  return (id)classHMDeviceSetupOperation;
}

Class initHMMediaSystemBuilder()
{
  Class result;

  if (HomeKitLibrary_sOnce_2 != -1)
    dispatch_once(&HomeKitLibrary_sOnce_2, &__block_literal_global_727);
  result = objc_getClass("HMMediaSystemBuilder");
  classHMMediaSystemBuilder = (uint64_t)result;
  getHMMediaSystemBuilderClass[0] = (uint64_t (*)())HMMediaSystemBuilderFunction;
  return result;
}

id HMMediaSystemBuilderFunction()
{
  return (id)classHMMediaSystemBuilder;
}

Class initHMMediaSystemRole()
{
  Class result;

  if (HomeKitLibrary_sOnce_2 != -1)
    dispatch_once(&HomeKitLibrary_sOnce_2, &__block_literal_global_727);
  result = objc_getClass("HMMediaSystemRole");
  classHMMediaSystemRole = (uint64_t)result;
  getHMMediaSystemRoleClass[0] = (uint64_t (*)())HMMediaSystemRoleFunction;
  return result;
}

id HMMediaSystemRoleFunction()
{
  return (id)classHMMediaSystemRole;
}

Class initHMMediaSystemComponent()
{
  Class result;

  if (HomeKitLibrary_sOnce_2 != -1)
    dispatch_once(&HomeKitLibrary_sOnce_2, &__block_literal_global_727);
  result = objc_getClass("HMMediaSystemComponent");
  classHMMediaSystemComponent = (uint64_t)result;
  getHMMediaSystemComponentClass[0] = (uint64_t (*)())HMMediaSystemComponentFunction;
  return result;
}

id HMMediaSystemComponentFunction()
{
  return (id)classHMMediaSystemComponent;
}

id initValHMAccessoryCategoryTypeHomePod_0()
{
  id *v0;

  if (HomeKitLibrary_sOnce_2 != -1)
    dispatch_once(&HomeKitLibrary_sOnce_2, &__block_literal_global_727);
  v0 = (id *)dlsym((void *)HomeKitLibrary_sLib_2, "HMAccessoryCategoryTypeHomePod");
  if (v0)
    objc_storeStrong((id *)&constantValHMAccessoryCategoryTypeHomePod_0, *v0);
  getHMAccessoryCategoryTypeHomePod_0[0] = (uint64_t (*)())HMAccessoryCategoryTypeHomePodFunction_0;
  return (id)constantValHMAccessoryCategoryTypeHomePod_0;
}

id HMAccessoryCategoryTypeHomePodFunction_0()
{
  return (id)constantValHMAccessoryCategoryTypeHomePod_0;
}

id initValHMAccessoryCategoryTypeAppleTV()
{
  id *v0;

  if (HomeKitLibrary_sOnce_2 != -1)
    dispatch_once(&HomeKitLibrary_sOnce_2, &__block_literal_global_727);
  v0 = (id *)dlsym((void *)HomeKitLibrary_sLib_2, "HMAccessoryCategoryTypeAppleTV");
  if (v0)
    objc_storeStrong((id *)&constantValHMAccessoryCategoryTypeAppleTV, *v0);
  getHMAccessoryCategoryTypeAppleTV[0] = (uint64_t (*)())HMAccessoryCategoryTypeAppleTVFunction;
  return (id)constantValHMAccessoryCategoryTypeAppleTV;
}

id HMAccessoryCategoryTypeAppleTVFunction()
{
  return (id)constantValHMAccessoryCategoryTypeAppleTV;
}

Class initASDSystemAppRequest()
{
  Class result;

  if (AppStoreDaemonLibrary_sOnce != -1)
    dispatch_once(&AppStoreDaemonLibrary_sOnce, &__block_literal_global_738);
  result = objc_getClass("ASDSystemAppRequest");
  classASDSystemAppRequest = (uint64_t)result;
  getASDSystemAppRequestClass[0] = (uint64_t (*)())ASDSystemAppRequestFunction;
  return result;
}

id ASDSystemAppRequestFunction()
{
  return (id)classASDSystemAppRequest;
}

const char *WiFiSetupStateToString(int a1)
{
  if ((a1 - 11) > 0xB)
    return "?";
  else
    return off_1E4832918[a1 - 11];
}

uint64_t initVTIsHardwareDecodeSupported(uint64_t a1)
{
  if (VideoToolboxLibrary_sOnce != -1)
    dispatch_once(&VideoToolboxLibrary_sOnce, &__block_literal_global_193);
  softLinkVTIsHardwareDecodeSupported[0] = (uint64_t (*)())dlsym((void *)VideoToolboxLibrary_sLib, "VTIsHardwareDecodeSupported");
  return ((uint64_t (*)(uint64_t))softLinkVTIsHardwareDecodeSupported[0])(a1);
}

Class initHMDeviceSetupOperationHandler_0()
{
  Class result;

  if (HomeKitLibrary_sOnce_3 != -1)
    dispatch_once(&HomeKitLibrary_sOnce_3, &__block_literal_global_297_0);
  result = objc_getClass("HMDeviceSetupOperationHandler");
  classHMDeviceSetupOperationHandler_0 = (uint64_t)result;
  getHMDeviceSetupOperationHandlerClass_0[0] = (uint64_t (*)())HMDeviceSetupOperationHandlerFunction_0;
  return result;
}

id HMDeviceSetupOperationHandlerFunction_0()
{
  return (id)classHMDeviceSetupOperationHandler_0;
}

Class initAISRepairController()
{
  Class result;

  if (AppleIDSetupLibrary_sOnce != -1)
    dispatch_once(&AppleIDSetupLibrary_sOnce, &__block_literal_global_300_0);
  result = objc_getClass("AISRepairController");
  classAISRepairController = (uint64_t)result;
  getAISRepairControllerClass[0] = (uint64_t (*)())AISRepairControllerFunction;
  return result;
}

id AISRepairControllerFunction()
{
  return (id)classAISRepairController;
}

Class initAISRepairContext()
{
  Class result;

  if (AppleIDSetupLibrary_sOnce != -1)
    dispatch_once(&AppleIDSetupLibrary_sOnce, &__block_literal_global_300_0);
  result = objc_getClass("AISRepairContext");
  classAISRepairContext = (uint64_t)result;
  getAISRepairContextClass[0] = (uint64_t (*)())AISRepairContextFunction;
  return result;
}

id AISRepairContextFunction()
{
  return (id)classAISRepairContext;
}

Class initAKAccountManager()
{
  Class result;

  if (AuthKitLibrary_sOnce_1 != -1)
    dispatch_once(&AuthKitLibrary_sOnce_1, &__block_literal_global_304);
  result = objc_getClass("AKAccountManager");
  classAKAccountManager = (uint64_t)result;
  getAKAccountManagerClass[0] = (uint64_t (*)())AKAccountManagerFunction;
  return result;
}

id AKAccountManagerFunction()
{
  return (id)classAKAccountManager;
}

Class initACAccountStore_3()
{
  Class result;

  if (AccountsLibrary_sOnce_3 != -1)
    dispatch_once(&AccountsLibrary_sOnce_3, &__block_literal_global_307_0);
  result = objc_getClass("ACAccountStore");
  classACAccountStore_3 = (uint64_t)result;
  getACAccountStoreClass_3[0] = (uint64_t (*)())ACAccountStoreFunction_3;
  return result;
}

id ACAccountStoreFunction_3()
{
  return (id)classACAccountStore_3;
}

uint64_t initIDSCopyLocalDeviceUniqueID()
{
  if (IDSLibrary_sOnce_0 != -1)
    dispatch_once(&IDSLibrary_sOnce_0, &__block_literal_global_310);
  softLinkIDSCopyLocalDeviceUniqueID[0] = (uint64_t (*)())dlsym((void *)IDSLibrary_sLib_0, "IDSCopyLocalDeviceUniqueID");
  return softLinkIDSCopyLocalDeviceUniqueID[0]();
}

Class initFLFollowUpController()
{
  Class result;

  if (CoreFollowUpLibrary_sOnce != -1)
    dispatch_once(&CoreFollowUpLibrary_sOnce, &__block_literal_global_313);
  result = objc_getClass("FLFollowUpController");
  classFLFollowUpController = (uint64_t)result;
  getFLFollowUpControllerClass[0] = (uint64_t (*)())FLFollowUpControllerFunction;
  return result;
}

id FLFollowUpControllerFunction()
{
  return (id)classFLFollowUpController;
}

Class initTROperationQueue_1()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_3 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_3, &__block_literal_global_47);
  result = objc_getClass("TROperationQueue");
  classTROperationQueue_1 = (uint64_t)result;
  getTROperationQueueClass_1[0] = (uint64_t (*)())TROperationQueueFunction_1;
  return result;
}

id TROperationQueueFunction_1()
{
  return (id)classTROperationQueue_1;
}

Class initTRAuthenticationOperation_0()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_3 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_3, &__block_literal_global_47);
  result = objc_getClass("TRAuthenticationOperation");
  classTRAuthenticationOperation_0 = (uint64_t)result;
  getTRAuthenticationOperationClass_0[0] = (uint64_t (*)())TRAuthenticationOperationFunction_0;
  return result;
}

id TRAuthenticationOperationFunction_0()
{
  return (id)classTRAuthenticationOperation_0;
}

id initValTRAuthenticationOperationUnauthenticatedServicesKey_0()
{
  id *v0;

  if (TouchRemoteLibrary_sOnce_3 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_3, &__block_literal_global_47);
  v0 = (id *)dlsym((void *)TouchRemoteLibrary_sLib_3, "TRAuthenticationOperationUnauthenticatedServicesKey");
  if (v0)
    objc_storeStrong((id *)&constantValTRAuthenticationOperationUnauthenticatedServicesKey_0, *v0);
  getTRAuthenticationOperationUnauthenticatedServicesKey_0[0] = (uint64_t (*)())TRAuthenticationOperationUnauthenticatedServicesKeyFunction_0;
  return (id)constantValTRAuthenticationOperationUnauthenticatedServicesKey_0;
}

id TRAuthenticationOperationUnauthenticatedServicesKeyFunction_0()
{
  return (id)constantValTRAuthenticationOperationUnauthenticatedServicesKey_0;
}

id initValTRAuthenticationOperationErrorKey_0()
{
  id *v0;

  if (TouchRemoteLibrary_sOnce_3 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_3, &__block_literal_global_47);
  v0 = (id *)dlsym((void *)TouchRemoteLibrary_sLib_3, "TRAuthenticationOperationErrorKey");
  if (v0)
    objc_storeStrong((id *)&constantValTRAuthenticationOperationErrorKey_0, *v0);
  getTRAuthenticationOperationErrorKey_0[0] = (uint64_t (*)())TRAuthenticationOperationErrorKeyFunction_0;
  return (id)constantValTRAuthenticationOperationErrorKey_0;
}

id TRAuthenticationOperationErrorKeyFunction_0()
{
  return (id)constantValTRAuthenticationOperationErrorKey_0;
}

Class initAISRepairContext_0()
{
  Class result;

  if (AppleIDSetupLibrary_sOnce_0 != -1)
    dispatch_once(&AppleIDSetupLibrary_sOnce_0, &__block_literal_global_371);
  result = objc_getClass("AISRepairContext");
  classAISRepairContext_0 = (uint64_t)result;
  getAISRepairContextClass_0[0] = (uint64_t (*)())AISRepairContextFunction_0;
  return result;
}

id AISRepairContextFunction_0()
{
  return (id)classAISRepairContext_0;
}

Class initAISRepairController_0()
{
  Class result;

  if (AppleIDSetupLibrary_sOnce_0 != -1)
    dispatch_once(&AppleIDSetupLibrary_sOnce_0, &__block_literal_global_371);
  result = objc_getClass("AISRepairController");
  classAISRepairController_0 = (uint64_t)result;
  getAISRepairControllerClass_0[0] = (uint64_t (*)())AISRepairControllerFunction_0;
  return result;
}

id AISRepairControllerFunction_0()
{
  return (id)classAISRepairController_0;
}

Class initHMDeviceSetupOperationHandler_1()
{
  Class result;

  if (HomeKitLibrary_sOnce_4 != -1)
    dispatch_once(&HomeKitLibrary_sOnce_4, &__block_literal_global_48);
  result = objc_getClass("HMDeviceSetupOperationHandler");
  classHMDeviceSetupOperationHandler_1 = (uint64_t)result;
  getHMDeviceSetupOperationHandlerClass_1[0] = (uint64_t (*)())HMDeviceSetupOperationHandlerFunction_1;
  return result;
}

id HMDeviceSetupOperationHandlerFunction_1()
{
  return (id)classHMDeviceSetupOperationHandler_1;
}

Class initTVLAudioLatencyEstimator()
{
  Class result;

  if (TVLatencyLibrary_sOnce_1 != -1)
    dispatch_once(&TVLatencyLibrary_sOnce_1, &__block_literal_global_400);
  result = objc_getClass("TVLAudioLatencyEstimator");
  classTVLAudioLatencyEstimator = (uint64_t)result;
  getTVLAudioLatencyEstimatorClass[0] = (uint64_t (*)())TVLAudioLatencyEstimatorFunction;
  return result;
}

id TVLAudioLatencyEstimatorFunction()
{
  return (id)classTVLAudioLatencyEstimator;
}

uint64_t initValTMSourceProxBuddy()
{
  uint64_t *v0;
  uint64_t result;

  if (CoreTimeLibrary_sOnce != -1)
    dispatch_once(&CoreTimeLibrary_sOnce, &__block_literal_global_403);
  v0 = (uint64_t *)dlsym((void *)CoreTimeLibrary_sLib, "TMSourceProxBuddy");
  if (v0)
  {
    result = *v0;
    constantValTMSourceProxBuddy = result;
  }
  else
  {
    result = constantValTMSourceProxBuddy;
  }
  getTMSourceProxBuddy[0] = type metadata for ;
  return result;
}

uint64_t type metadata for ()
{
  return constantValTMSourceProxBuddy;
}

uint64_t initTMSetSourceTime(uint64_t a1, double a2, double a3)
{
  if (CoreTimeLibrary_sOnce != -1)
    dispatch_once(&CoreTimeLibrary_sOnce, &__block_literal_global_403);
  softLinkTMSetSourceTime[0] = (uint64_t (*)())dlsym((void *)CoreTimeLibrary_sLib, "TMSetSourceTime");
  return ((uint64_t (*)(uint64_t, double, double))softLinkTMSetSourceTime[0])(a1, a2, a3);
}

Class initAISSetupContext()
{
  Class result;

  if (AppleIDSetupLibrary_sOnce_1 != -1)
    dispatch_once(&AppleIDSetupLibrary_sOnce_1, &__block_literal_global_407);
  result = objc_getClass("AISSetupContext");
  classAISSetupContext = (uint64_t)result;
  getAISSetupContextClass[0] = (uint64_t (*)())AISSetupContextFunction;
  return result;
}

id AISSetupContextFunction()
{
  return (id)classAISSetupContext;
}

Class initAISSetupController()
{
  Class result;

  if (AppleIDSetupLibrary_sOnce_1 != -1)
    dispatch_once(&AppleIDSetupLibrary_sOnce_1, &__block_literal_global_407);
  result = objc_getClass("AISSetupController");
  classAISSetupController = (uint64_t)result;
  getAISSetupControllerClass[0] = (uint64_t (*)())AISSetupControllerFunction;
  return result;
}

id AISSetupControllerFunction()
{
  return (id)classAISSetupController;
}

void sub_1A2915DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

Class initHMHomeManagerConfiguration_0()
{
  Class result;

  if (HomeKitLibrary_sOnce_5 != -1)
    dispatch_once(&HomeKitLibrary_sOnce_5, &__block_literal_global_49);
  result = objc_getClass("HMHomeManagerConfiguration");
  classHMHomeManagerConfiguration_0 = (uint64_t)result;
  getHMHomeManagerConfigurationClass_0[0] = (uint64_t (*)())HMHomeManagerConfigurationFunction_0;
  return result;
}

id HMHomeManagerConfigurationFunction_0()
{
  return (id)classHMHomeManagerConfiguration_0;
}

Class initHMHomeManager_1()
{
  Class result;

  if (HomeKitLibrary_sOnce_5 != -1)
    dispatch_once(&HomeKitLibrary_sOnce_5, &__block_literal_global_49);
  result = objc_getClass("HMHomeManager");
  classHMHomeManager_1 = (uint64_t)result;
  getHMHomeManagerClass_1[0] = (uint64_t (*)())HMHomeManagerFunction_1;
  return result;
}

id HMHomeManagerFunction_1()
{
  return (id)classHMHomeManager_1;
}

Class initSSAccountStore_1()
{
  Class result;

  if (StoreServicesLibrary_sOnce_1 != -1)
    dispatch_once(&StoreServicesLibrary_sOnce_1, &__block_literal_global_1039);
  result = objc_getClass("SSAccountStore");
  classSSAccountStore_1 = (uint64_t)result;
  getSSAccountStoreClass_1[0] = (uint64_t (*)())SSAccountStoreFunction_1;
  return result;
}

id SSAccountStoreFunction_1()
{
  return (id)classSSAccountStore_1;
}

Class initACAccountStore_4()
{
  Class result;

  if (AccountsLibrary_sOnce_4 != -1)
    dispatch_once(&AccountsLibrary_sOnce_4, &__block_literal_global_1042);
  result = objc_getClass("ACAccountStore");
  classACAccountStore_4 = (uint64_t)result;
  getACAccountStoreClass_4[0] = (uint64_t (*)())ACAccountStoreFunction_4;
  return result;
}

id ACAccountStoreFunction_4()
{
  return (id)classACAccountStore_4;
}

uint64_t init_AXSVoiceOverTouchEnabled()
{
  if (AccessibilityLibrary_sOnce != -1)
    dispatch_once(&AccessibilityLibrary_sOnce, &__block_literal_global_1045);
  softLink_AXSVoiceOverTouchEnabled[0] = (uint64_t (*)())dlsym((void *)AccessibilityLibrary_sLib, "_AXSVoiceOverTouchEnabled");
  return softLink_AXSVoiceOverTouchEnabled[0]();
}

uint64_t init_AXSVoiceOverTouchSpeakingRate()
{
  if (AccessibilityLibrary_sOnce != -1)
    dispatch_once(&AccessibilityLibrary_sOnce, &__block_literal_global_1045);
  softLink_AXSVoiceOverTouchSpeakingRate = (uint64_t (*)())dlsym((void *)AccessibilityLibrary_sLib, "_AXSVoiceOverTouchSpeakingRate");
  return softLink_AXSVoiceOverTouchSpeakingRate();
}

Class initAXSettings()
{
  Class result;

  if (AccessibilityUtilitiesLibrary_sOnce != -1)
    dispatch_once(&AccessibilityUtilitiesLibrary_sOnce, &__block_literal_global_1049);
  result = objc_getClass("AXSettings");
  classAXSettings = (uint64_t)result;
  getAXSettingsClass[0] = (uint64_t (*)())AXSettingsFunction;
  return result;
}

id AXSettingsFunction()
{
  return (id)classAXSettings;
}

Class initCLLocationManager_0()
{
  Class result;

  if (CoreLocationLibrary_sOnce_0 != -1)
    dispatch_once(&CoreLocationLibrary_sOnce_0, &__block_literal_global_1052);
  result = objc_getClass("CLLocationManager");
  classCLLocationManager_0 = (uint64_t)result;
  getCLLocationManagerClass_0[0] = (uint64_t (*)())CLLocationManagerFunction_0;
  return result;
}

id CLLocationManagerFunction_0()
{
  return (id)classCLLocationManager_0;
}

Class initOBBundle()
{
  Class result;

  if (OnBoardingKitLibrary_sOnce != -1)
    dispatch_once(&OnBoardingKitLibrary_sOnce, &__block_literal_global_1055);
  result = objc_getClass("OBBundle");
  classOBBundle = (uint64_t)result;
  getOBBundleClass[0] = (uint64_t (*)())OBBundleFunction;
  return result;
}

id OBBundleFunction()
{
  return (id)classOBBundle;
}

uint64_t initValOBPrivacyPrivacyPaneIdentifier()
{
  uint64_t *v0;
  uint64_t result;

  if (OnBoardingKitLibrary_sOnce != -1)
    dispatch_once(&OnBoardingKitLibrary_sOnce, &__block_literal_global_1055);
  v0 = (uint64_t *)dlsym((void *)OnBoardingKitLibrary_sLib, "OBPrivacyPrivacyPaneIdentifier");
  if (v0)
  {
    result = *v0;
    constantValOBPrivacyPrivacyPaneIdentifier = result;
  }
  else
  {
    result = constantValOBPrivacyPrivacyPaneIdentifier;
  }
  getOBPrivacyPrivacyPaneIdentifier[0] = OBPrivacyPrivacyPaneIdentifierFunction;
  return result;
}

uint64_t OBPrivacyPrivacyPaneIdentifierFunction()
{
  return constantValOBPrivacyPrivacyPaneIdentifier;
}

Class initAFPreferences_0()
{
  Class result;

  if (AssistantServicesLibrary_sOnce_1 != -1)
    dispatch_once(&AssistantServicesLibrary_sOnce_1, &__block_literal_global_1059);
  result = objc_getClass("AFPreferences");
  classAFPreferences_0 = (uint64_t)result;
  getAFPreferencesClass_0[0] = (uint64_t (*)())AFPreferencesFunction_0;
  return result;
}

id AFPreferencesFunction_0()
{
  return (id)classAFPreferences_0;
}

uint64_t initTMIsAutomaticTimeEnabled()
{
  if (CoreTimeLibrary_sOnce_0 != -1)
    dispatch_once(&CoreTimeLibrary_sOnce_0, &__block_literal_global_1062);
  softLinkTMIsAutomaticTimeEnabled[0] = (uint64_t (*)())dlsym((void *)CoreTimeLibrary_sLib_0, "TMIsAutomaticTimeEnabled");
  return softLinkTMIsAutomaticTimeEnabled[0]();
}

uint64_t initTMIsAutomaticTimeZoneEnabled()
{
  if (CoreTimeLibrary_sOnce_0 != -1)
    dispatch_once(&CoreTimeLibrary_sOnce_0, &__block_literal_global_1062);
  softLinkTMIsAutomaticTimeZoneEnabled[0] = (uint64_t (*)())dlsym((void *)CoreTimeLibrary_sLib_0, "TMIsAutomaticTimeZoneEnabled");
  return softLinkTMIsAutomaticTimeZoneEnabled[0]();
}

Class initTROperationQueue_2()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_4 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_4, &__block_literal_global_1066);
  result = objc_getClass("TROperationQueue");
  classTROperationQueue_2 = (uint64_t)result;
  getTROperationQueueClass_2[0] = (uint64_t (*)())TROperationQueueFunction_2;
  return result;
}

id TROperationQueueFunction_2()
{
  return (id)classTROperationQueue_2;
}

Class initTRNearbyDevice()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_4 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_4, &__block_literal_global_1066);
  result = objc_getClass("TRNearbyDevice");
  classTRNearbyDevice = (uint64_t)result;
  getTRNearbyDeviceClass[0] = (uint64_t (*)())TRNearbyDeviceFunction;
  return result;
}

id TRNearbyDeviceFunction()
{
  return (id)classTRNearbyDevice;
}

Class initTRSession()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_4 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_4, &__block_literal_global_1066);
  result = objc_getClass("TRSession");
  classTRSession = (uint64_t)result;
  getTRSessionClass[0] = (uint64_t (*)())TRSessionFunction;
  return result;
}

id TRSessionFunction()
{
  return (id)classTRSession;
}

Class initTRNearbyDeviceScanner()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_4 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_4, &__block_literal_global_1066);
  result = objc_getClass("TRNearbyDeviceScanner");
  classTRNearbyDeviceScanner = (uint64_t)result;
  getTRNearbyDeviceScannerClass[0] = (uint64_t (*)())TRNearbyDeviceScannerFunction;
  return result;
}

id TRNearbyDeviceScannerFunction()
{
  return (id)classTRNearbyDeviceScanner;
}

Class initTRSetupConfigurationOperation()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_4 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_4, &__block_literal_global_1066);
  result = objc_getClass("TRSetupConfigurationOperation");
  classTRSetupConfigurationOperation = (uint64_t)result;
  getTRSetupConfigurationOperationClass[0] = (uint64_t (*)())TRSetupConfigurationOperationFunction;
  return result;
}

id TRSetupConfigurationOperationFunction()
{
  return (id)classTRSetupConfigurationOperation;
}

id initValTRSetupConfigurationOperationNeedsNetworkKey()
{
  id *v0;

  if (TouchRemoteLibrary_sOnce_4 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_4, &__block_literal_global_1066);
  v0 = (id *)dlsym((void *)TouchRemoteLibrary_sLib_4, "TRSetupConfigurationOperationNeedsNetworkKey");
  if (v0)
    objc_storeStrong((id *)&constantValTRSetupConfigurationOperationNeedsNetworkKey, *v0);
  getTRSetupConfigurationOperationNeedsNetworkKey[0] = (uint64_t (*)())TRSetupConfigurationOperationNeedsNetworkKeyFunction;
  return (id)constantValTRSetupConfigurationOperationNeedsNetworkKey;
}

id TRSetupConfigurationOperationNeedsNetworkKeyFunction()
{
  return (id)constantValTRSetupConfigurationOperationNeedsNetworkKey;
}

id initValTRSetupConfigurationOperationUnauthenticatedServicesKey()
{
  id *v0;

  if (TouchRemoteLibrary_sOnce_4 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_4, &__block_literal_global_1066);
  v0 = (id *)dlsym((void *)TouchRemoteLibrary_sLib_4, "TRSetupConfigurationOperationUnauthenticatedServicesKey");
  if (v0)
    objc_storeStrong((id *)&constantValTRSetupConfigurationOperationUnauthenticatedServicesKey, *v0);
  getTRSetupConfigurationOperationUnauthenticatedServicesKey[0] = (uint64_t (*)())TRSetupConfigurationOperationUnauthenticatedServicesKeyFunction;
  return (id)constantValTRSetupConfigurationOperationUnauthenticatedServicesKey;
}

id TRSetupConfigurationOperationUnauthenticatedServicesKeyFunction()
{
  return (id)constantValTRSetupConfigurationOperationUnauthenticatedServicesKey;
}

Class initTRNetworkOperation()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_4 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_4, &__block_literal_global_1066);
  result = objc_getClass("TRNetworkOperation");
  classTRNetworkOperation = (uint64_t)result;
  getTRNetworkOperationClass[0] = (uint64_t (*)())TRNetworkOperationFunction;
  return result;
}

id TRNetworkOperationFunction()
{
  return (id)classTRNetworkOperation;
}

id initValTRNetworkOperationHasNetworkKey()
{
  id *v0;

  if (TouchRemoteLibrary_sOnce_4 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_4, &__block_literal_global_1066);
  v0 = (id *)dlsym((void *)TouchRemoteLibrary_sLib_4, "TRNetworkOperationHasNetworkKey");
  if (v0)
    objc_storeStrong((id *)&constantValTRNetworkOperationHasNetworkKey, *v0);
  getTRNetworkOperationHasNetworkKey[0] = (uint64_t (*)())TRNetworkOperationHasNetworkKeyFunction;
  return (id)constantValTRNetworkOperationHasNetworkKey;
}

id TRNetworkOperationHasNetworkKeyFunction()
{
  return (id)constantValTRNetworkOperationHasNetworkKey;
}

Class initTRActivationOperation()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_4 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_4, &__block_literal_global_1066);
  result = objc_getClass("TRActivationOperation");
  classTRActivationOperation = (uint64_t)result;
  getTRActivationOperationClass[0] = (uint64_t (*)())TRActivationOperationFunction;
  return result;
}

id TRActivationOperationFunction()
{
  return (id)classTRActivationOperation;
}

id initValTRActivationOperationIsActivatedKey()
{
  id *v0;

  if (TouchRemoteLibrary_sOnce_4 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_4, &__block_literal_global_1066);
  v0 = (id *)dlsym((void *)TouchRemoteLibrary_sLib_4, "TRActivationOperationIsActivatedKey");
  if (v0)
    objc_storeStrong((id *)&constantValTRActivationOperationIsActivatedKey, *v0);
  getTRActivationOperationIsActivatedKey[0] = (uint64_t (*)())TRActivationOperationIsActivatedKeyFunction;
  return (id)constantValTRActivationOperationIsActivatedKey;
}

id TRActivationOperationIsActivatedKeyFunction()
{
  return (id)constantValTRActivationOperationIsActivatedKey;
}

Class initTRAuthenticationOperation_1()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_4 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_4, &__block_literal_global_1066);
  result = objc_getClass("TRAuthenticationOperation");
  classTRAuthenticationOperation_1 = (uint64_t)result;
  getTRAuthenticationOperationClass_1[0] = (uint64_t (*)())TRAuthenticationOperationFunction_1;
  return result;
}

id TRAuthenticationOperationFunction_1()
{
  return (id)classTRAuthenticationOperation_1;
}

Class initAISSetupContext_0()
{
  Class result;

  if (AppleIDSetupLibrary_sOnce_2 != -1)
    dispatch_once(&AppleIDSetupLibrary_sOnce_2, &__block_literal_global_1088);
  result = objc_getClass("AISSetupContext");
  classAISSetupContext_0 = (uint64_t)result;
  getAISSetupContextClass_0[0] = (uint64_t (*)())AISSetupContextFunction_0;
  return result;
}

id AISSetupContextFunction_0()
{
  return (id)classAISSetupContext_0;
}

Class initAISSetupViewController()
{
  Class result;

  if (AppleIDSetupUILibrary_sOnce != -1)
    dispatch_once(&AppleIDSetupUILibrary_sOnce, &__block_literal_global_1091);
  result = objc_getClass("AISSetupViewController");
  classAISSetupViewController = (uint64_t)result;
  getAISSetupViewControllerClass[0] = (uint64_t (*)())AISSetupViewControllerFunction;
  return result;
}

id AISSetupViewControllerFunction()
{
  return (id)classAISSetupViewController;
}

Class initUINavigationController()
{
  Class result;

  if (UIKitLibrary_sOnce != -1)
    dispatch_once(&UIKitLibrary_sOnce, &__block_literal_global_1094);
  result = objc_getClass("UINavigationController");
  classUINavigationController = (uint64_t)result;
  getUINavigationControllerClass[0] = (uint64_t (*)())UINavigationControllerFunction;
  return result;
}

id UINavigationControllerFunction()
{
  return (id)classUINavigationController;
}

Class initAISSetupController_0()
{
  Class result;

  if (AppleIDSetupLibrary_sOnce_2 != -1)
    dispatch_once(&AppleIDSetupLibrary_sOnce_2, &__block_literal_global_1088);
  result = objc_getClass("AISSetupController");
  classAISSetupController_0 = (uint64_t)result;
  getAISSetupControllerClass_0[0] = (uint64_t (*)())AISSetupControllerFunction_0;
  return result;
}

id AISSetupControllerFunction_0()
{
  return (id)classAISSetupController_0;
}

Class initTVLAudioLatencyEstimator_0()
{
  Class result;

  if (TVLatencyLibrary_sOnce_2 != -1)
    dispatch_once(&TVLatencyLibrary_sOnce_2, &__block_literal_global_1098);
  result = objc_getClass("TVLAudioLatencyEstimator");
  classTVLAudioLatencyEstimator_0 = (uint64_t)result;
  getTVLAudioLatencyEstimatorClass_0[0] = (uint64_t (*)())TVLAudioLatencyEstimatorFunction_0;
  return result;
}

id TVLAudioLatencyEstimatorFunction_0()
{
  return (id)classTVLAudioLatencyEstimator_0;
}

Class initTRCompletionOperation()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_4 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_4, &__block_literal_global_1066);
  result = objc_getClass("TRCompletionOperation");
  classTRCompletionOperation = (uint64_t)result;
  getTRCompletionOperationClass[0] = (uint64_t (*)())TRCompletionOperationFunction;
  return result;
}

id TRCompletionOperationFunction()
{
  return (id)classTRCompletionOperation;
}

Class initVSAccountSerializationCenter()
{
  Class result;

  if (VideoSubscriberAccountLibrary_sOnce != -1)
    dispatch_once(&VideoSubscriberAccountLibrary_sOnce, &__block_literal_global_1102);
  result = objc_getClass("VSAccountSerializationCenter");
  classVSAccountSerializationCenter = (uint64_t)result;
  getVSAccountSerializationCenterClass[0] = (uint64_t (*)())VSAccountSerializationCenterFunction;
  return result;
}

id VSAccountSerializationCenterFunction()
{
  return (id)classVSAccountSerializationCenter;
}

id initValHMAccessoryCategoryTypeHomePod_1()
{
  id *v0;

  if (HomeKitLibrary_sOnce_5 != -1)
    dispatch_once(&HomeKitLibrary_sOnce_5, &__block_literal_global_49);
  v0 = (id *)dlsym((void *)HomeKitLibrary_sLib_5, "HMAccessoryCategoryTypeHomePod");
  if (v0)
    objc_storeStrong((id *)&constantValHMAccessoryCategoryTypeHomePod_1, *v0);
  getHMAccessoryCategoryTypeHomePod_1[0] = (uint64_t (*)())HMAccessoryCategoryTypeHomePodFunction_1;
  return (id)constantValHMAccessoryCategoryTypeHomePod_1;
}

id HMAccessoryCategoryTypeHomePodFunction_1()
{
  return (id)constantValHMAccessoryCategoryTypeHomePod_1;
}

id initValHMAccessoryCategoryTypeAppleTV_0()
{
  id *v0;

  if (HomeKitLibrary_sOnce_5 != -1)
    dispatch_once(&HomeKitLibrary_sOnce_5, &__block_literal_global_49);
  v0 = (id *)dlsym((void *)HomeKitLibrary_sLib_5, "HMAccessoryCategoryTypeAppleTV");
  if (v0)
    objc_storeStrong((id *)&constantValHMAccessoryCategoryTypeAppleTV_0, *v0);
  getHMAccessoryCategoryTypeAppleTV_0[0] = (uint64_t (*)())HMAccessoryCategoryTypeAppleTVFunction_0;
  return (id)constantValHMAccessoryCategoryTypeAppleTV_0;
}

id HMAccessoryCategoryTypeAppleTVFunction_0()
{
  return (id)constantValHMAccessoryCategoryTypeAppleTV_0;
}

void sub_1A2918D9C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  id *v6;
  id *v7;
  uint64_t v8;

  objc_destroyWeak(v7);
  objc_destroyWeak(v6);
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v8 - 104));
  _Unwind_Resume(a1);
}

void sub_1A2918E08()
{
  JUMPOUT(0x1A2918DE8);
}

void sub_1A2918E10()
{
  JUMPOUT(0x1A2918DF0);
}

void sub_1A2919A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  void *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  objc_sync_exit(v21);
  _Unwind_Resume(a1);
}

void sub_1A2919DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  void *v19;

  objc_sync_exit(v19);
  _Unwind_Resume(a1);
}

void sub_1A291A100(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A291A240(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A291A4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A291AA94(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void sub_1A291B234(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1A291EBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,char a21)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  _Block_object_dispose(&a21, 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

void sub_1A291F930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A29207D4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  id *v6;
  uint64_t v7;

  objc_destroyWeak(v6);
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v2);
  objc_destroyWeak(v3);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v7 - 120));
  objc_destroyWeak((id *)(v7 - 112));
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_6_2(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x20u);
}

void sub_1A29229C8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1A2923B74(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1A2923F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class initSKDevice()
{
  Class result;

  if (SetupKitLibrary_sOnce != -1)
    dispatch_once(&SetupKitLibrary_sOnce, &__block_literal_global_241);
  result = objc_getClass("SKDevice");
  classSKDevice = (uint64_t)result;
  getSKDeviceClass[0] = (uint64_t (*)())SKDeviceFunction;
  return result;
}

id SKDeviceFunction()
{
  return (id)classSKDevice;
}

Class initSKSetupCaptiveNetworkJoinClient()
{
  Class result;

  if (SetupKitLibrary_sOnce != -1)
    dispatch_once(&SetupKitLibrary_sOnce, &__block_literal_global_241);
  result = objc_getClass("SKSetupCaptiveNetworkJoinClient");
  classSKSetupCaptiveNetworkJoinClient = (uint64_t)result;
  getSKSetupCaptiveNetworkJoinClientClass[0] = (uint64_t (*)())SKSetupCaptiveNetworkJoinClientFunction;
  return result;
}

id SKSetupCaptiveNetworkJoinClientFunction()
{
  return (id)classSKSetupCaptiveNetworkJoinClient;
}

Class initWSWebSheetViewController()
{
  Class result;

  if (WebSheetLibrary_sOnce != -1)
    dispatch_once(&WebSheetLibrary_sOnce, &__block_literal_global_245);
  result = objc_getClass("WSWebSheetViewController");
  classWSWebSheetViewController = (uint64_t)result;
  getWSWebSheetViewControllerClass[0] = (uint64_t (*)())WSWebSheetViewControllerFunction;
  return result;
}

id WSWebSheetViewControllerFunction()
{
  return (id)classWSWebSheetViewController;
}

Class initSKSetupCaptiveNetworkJoinServer()
{
  Class result;

  if (SetupKitLibrary_sOnce != -1)
    dispatch_once(&SetupKitLibrary_sOnce, &__block_literal_global_241);
  result = objc_getClass("SKSetupCaptiveNetworkJoinServer");
  classSKSetupCaptiveNetworkJoinServer = (uint64_t)result;
  getSKSetupCaptiveNetworkJoinServerClass[0] = (uint64_t (*)())SKSetupCaptiveNetworkJoinServerFunction;
  return result;
}

id SKSetupCaptiveNetworkJoinServerFunction()
{
  return (id)classSKSetupCaptiveNetworkJoinServer;
}

void sub_1A2926BBC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1A2926F58(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

Class initTSCellularPlanProximityTransferController()
{
  Class result;

  if (SIMSetupSupportLibrary_sOnce != -1)
    dispatch_once(&SIMSetupSupportLibrary_sOnce, &__block_literal_global_540);
  result = objc_getClass("TSCellularPlanProximityTransferController");
  classTSCellularPlanProximityTransferController = (uint64_t)result;
  getTSCellularPlanProximityTransferControllerClass[0] = (uint64_t (*)())__C;
  return result;
}

id __C()
{
  return (id)classTSCellularPlanProximityTransferController;
}

Class initCoreTelephonyClient()
{
  Class result;

  if (CoreTelephonyLibrary_sOnce != -1)
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_543);
  result = objc_getClass("CoreTelephonyClient");
  classCoreTelephonyClient = (uint64_t)result;
  getCoreTelephonyClientClass[0] = (uint64_t (*)())CoreTelephonyClientFunction;
  return result;
}

id CoreTelephonyClientFunction()
{
  return (id)classCoreTelephonyClient;
}

Class initIMOneTimeCodeAccelerator()
{
  Class result;

  if (IMCoreLibrary_sOnce != -1)
    dispatch_once(&IMCoreLibrary_sOnce, &__block_literal_global_546);
  result = objc_getClass("IMOneTimeCodeAccelerator");
  classIMOneTimeCodeAccelerator = (uint64_t)result;
  getIMOneTimeCodeAcceleratorClass[0] = (uint64_t (*)())IMOneTimeCodeAcceleratorFunction;
  return result;
}

id IMOneTimeCodeAcceleratorFunction()
{
  return (id)classIMOneTimeCodeAccelerator;
}

Class initPRXCardContentViewController()
{
  Class result;

  if (ProxCardKitLibrary_sOnce != -1)
    dispatch_once(&ProxCardKitLibrary_sOnce, &__block_literal_global_549);
  result = objc_getClass("PRXCardContentViewController");
  classPRXCardContentViewController = (uint64_t)result;
  getPRXCardContentViewControllerClass[0] = (uint64_t (*)())PRXCardContentViewControllerFunction;
  return result;
}

id PRXCardContentViewControllerFunction()
{
  return (id)classPRXCardContentViewController;
}

Class initPASUIGuardianViewPresenter()
{
  Class result;

  if (ProximityAppleIDSetupUILibrary_sOnce != -1)
    dispatch_once(&ProximityAppleIDSetupUILibrary_sOnce, &__block_literal_global_552);
  result = objc_getClass("PASUIGuardianViewPresenter");
  classPASUIGuardianViewPresenter = (uint64_t)result;
  getPASUIGuardianViewPresenterClass[0] = (uint64_t (*)())PASUIGuardianViewPresenterFunction;
  return result;
}

id PASUIGuardianViewPresenterFunction()
{
  return (id)classPASUIGuardianViewPresenter;
}

Class initCDPContext_0()
{
  Class result;

  if (CoreCDPLibrary_sOnce_0 != -1)
    dispatch_once(&CoreCDPLibrary_sOnce_0, &__block_literal_global_555);
  result = objc_getClass("CDPContext");
  classCDPContext_0 = (uint64_t)result;
  getCDPContextClass_0[0] = (uint64_t (*)())CDPContextFunction_0;
  return result;
}

id CDPContextFunction_0()
{
  return (id)classCDPContext_0;
}

Class initCDPStateController_0()
{
  Class result;

  if (CoreCDPLibrary_sOnce_0 != -1)
    dispatch_once(&CoreCDPLibrary_sOnce_0, &__block_literal_global_555);
  result = objc_getClass("CDPStateController");
  classCDPStateController_0 = (uint64_t)result;
  getCDPStateControllerClass_0[0] = (uint64_t (*)())CDPStateControllerFunction_0;
  return result;
}

id CDPStateControllerFunction_0()
{
  return (id)classCDPStateController_0;
}

Class initACAccountStore_5()
{
  Class result;

  if (AccountsLibrary_sOnce_5 != -1)
    dispatch_once(&AccountsLibrary_sOnce_5, &__block_literal_global_559);
  result = objc_getClass("ACAccountStore");
  classACAccountStore_5 = (uint64_t)result;
  getACAccountStoreClass_5[0] = (uint64_t (*)())ACAccountStoreFunction_5;
  return result;
}

id ACAccountStoreFunction_5()
{
  return (id)classACAccountStore_5;
}

uint64_t init_AXSCopySettingsDataBlobForBuddy()
{
  if (AccessibilityLibrary_sOnce_0 != -1)
    dispatch_once(&AccessibilityLibrary_sOnce_0, &__block_literal_global_561);
  softLink_AXSCopySettingsDataBlobForBuddy[0] = (uint64_t (*)())dlsym((void *)AccessibilityLibrary_sLib_0, "_AXSCopySettingsDataBlobForBuddy");
  return softLink_AXSCopySettingsDataBlobForBuddy[0]();
}

Class initBYDeviceSetupSourceSession()
{
  Class result;

  if (SetupAssistantLibrary_sOnce != -1)
    dispatch_once(&SetupAssistantLibrary_sOnce, &__block_literal_global_564);
  result = objc_getClass("BYDeviceSetupSourceSession");
  classBYDeviceSetupSourceSession = (uint64_t)result;
  getBYDeviceSetupSourceSessionClass[0] = (uint64_t (*)())BYDeviceSetupSourceSessionFunction;
  return result;
}

id BYDeviceSetupSourceSessionFunction()
{
  return (id)classBYDeviceSetupSourceSession;
}

void sub_1A292A620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A292A704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A292A80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A292A914(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 48));
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

uint64_t OUTLINED_FUNCTION_3_0()
{
  return objc_opt_class();
}

Class initTVLAudioLatencyEstimator_1()
{
  Class result;

  if (TVLatencyLibrary_sOnce_3 != -1)
    dispatch_once(&TVLatencyLibrary_sOnce_3, &__block_literal_global_278_0);
  result = objc_getClass("TVLAudioLatencyEstimator");
  classTVLAudioLatencyEstimator_1 = (uint64_t)result;
  getTVLAudioLatencyEstimatorClass_1[0] = (uint64_t (*)())TVLAudioLatencyEstimatorFunction_1;
  return result;
}

id TVLAudioLatencyEstimatorFunction_1()
{
  return (id)classTVLAudioLatencyEstimator_1;
}

Class initTVLAudioLatencyEstimator_2()
{
  Class result;

  if (TVLatencyLibrary_sOnce_4 != -1)
    dispatch_once(&TVLatencyLibrary_sOnce_4, &__block_literal_global_56);
  result = objc_getClass("TVLAudioLatencyEstimator");
  classTVLAudioLatencyEstimator_2 = (uint64_t)result;
  getTVLAudioLatencyEstimatorClass_2[0] = (uint64_t (*)())TVLAudioLatencyEstimatorFunction_2;
  return result;
}

id TVLAudioLatencyEstimatorFunction_2()
{
  return (id)classTVLAudioLatencyEstimator_2;
}

Class initHMDeviceSetupOperationHandler_2()
{
  Class result;

  if (HomeKitLibrary_sOnce_6 != -1)
    dispatch_once(&HomeKitLibrary_sOnce_6, &__block_literal_global_57);
  result = objc_getClass("HMDeviceSetupOperationHandler");
  classHMDeviceSetupOperationHandler_2 = (uint64_t)result;
  getHMDeviceSetupOperationHandlerClass_2[0] = (uint64_t (*)())HMDeviceSetupOperationHandlerFunction_2;
  return result;
}

id HMDeviceSetupOperationHandlerFunction_2()
{
  return (id)classHMDeviceSetupOperationHandler_2;
}

Class initCDPStateController_1()
{
  Class result;

  if (CoreCDPLibrary_sOnce_1 != -1)
    dispatch_once(&CoreCDPLibrary_sOnce_1, &__block_literal_global_193_0);
  result = objc_getClass("CDPStateController");
  classCDPStateController_1 = (uint64_t)result;
  getCDPStateControllerClass_1[0] = (uint64_t (*)())CDPStateControllerFunction_1;
  return result;
}

id CDPStateControllerFunction_1()
{
  return (id)classCDPStateController_1;
}

void sub_1A29304F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

Class initTROperationQueue_3()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_5 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_5, &__block_literal_global_58);
  result = objc_getClass("TROperationQueue");
  classTROperationQueue_3 = (uint64_t)result;
  getTROperationQueueClass_3[0] = (uint64_t (*)())TROperationQueueFunction_3;
  return result;
}

id TROperationQueueFunction_3()
{
  return (id)classTROperationQueue_3;
}

Class initTRSetupConfigurationOperation_0()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_5 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_5, &__block_literal_global_58);
  result = objc_getClass("TRSetupConfigurationOperation");
  classTRSetupConfigurationOperation_0 = (uint64_t)result;
  getTRSetupConfigurationOperationClass_0[0] = (uint64_t (*)())TRSetupConfigurationOperationFunction_0;
  return result;
}

id TRSetupConfigurationOperationFunction_0()
{
  return (id)classTRSetupConfigurationOperation_0;
}

id initValTRSetupConfigurationOperationUnauthenticatedServicesKey_0()
{
  id *v0;

  if (TouchRemoteLibrary_sOnce_5 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_5, &__block_literal_global_58);
  v0 = (id *)dlsym((void *)TouchRemoteLibrary_sLib_5, "TRSetupConfigurationOperationUnauthenticatedServicesKey");
  if (v0)
    objc_storeStrong((id *)&constantValTRSetupConfigurationOperationUnauthenticatedServicesKey_0, *v0);
  getTRSetupConfigurationOperationUnauthenticatedServicesKey_0[0] = (uint64_t (*)())TRSetupConfigurationOperationUnauthenticatedServicesKeyFunction_0;
  return (id)constantValTRSetupConfigurationOperationUnauthenticatedServicesKey_0;
}

id TRSetupConfigurationOperationUnauthenticatedServicesKeyFunction_0()
{
  return (id)constantValTRSetupConfigurationOperationUnauthenticatedServicesKey_0;
}

Class initTRAuthenticationOperation_2()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_5 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_5, &__block_literal_global_58);
  result = objc_getClass("TRAuthenticationOperation");
  classTRAuthenticationOperation_2 = (uint64_t)result;
  getTRAuthenticationOperationClass_2[0] = (uint64_t (*)())TRAuthenticationOperationFunction_2;
  return result;
}

id TRAuthenticationOperationFunction_2()
{
  return (id)classTRAuthenticationOperation_2;
}

id getCKShareClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCKShareClass_softClass_0;
  v7 = getCKShareClass_softClass_0;
  if (!getCKShareClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getCKShareClass_block_invoke_0;
    v3[3] = &unk_1E482D680;
    v3[4] = &v4;
    __getCKShareClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1A2933614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2933D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

Class __getCKShareClass_block_invoke_0(uint64_t a1)
{
  Class result;

  CloudKitLibrary_1();
  result = objc_getClass("CKShare");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCKShareClass_block_invoke_cold_1_0();
  getCKShareClass_softClass_0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void CloudKitLibrary_1()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!CloudKitLibraryCore_frameworkLibrary_1)
  {
    v1 = xmmword_1E48338C8;
    v2 = 0;
    CloudKitLibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  if (!CloudKitLibraryCore_frameworkLibrary_1)
    CloudKitLibrary_cold_1_1(&v0);
}

Class __getCKContainerSetupInfoClass_block_invoke_1(uint64_t a1)
{
  Class result;

  CloudKitLibrary_1();
  result = objc_getClass("CKContainerSetupInfo");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCKContainerSetupInfoClass_block_invoke_cold_1_1();
  getCKContainerSetupInfoClass_softClass_1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1A2934E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A2935158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A2935698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sf_dispatch_on_main_queue(void *a1)
{
  void (**v1)(void);
  void (**block)(void);

  v1 = a1;
  if (v1)
  {
    block = v1;
    if (objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread"))
      block[2]();
    else
      dispatch_async(MEMORY[0x1E0C80D38], block);
    v1 = block;
  }

}

void sub_1A29365C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A29375B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t _clientPairSetupPromptForPIN(uint64_t a1, uint64_t a2, void *a3)
{
  _BYTE *v5;
  uint64_t v6;

  v5 = a3;
  if (gLogCategory_SFPINPairSession <= 30
    && (gLogCategory_SFPINPairSession != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v5[64] = 1;
  v6 = *((_QWORD *)v5 + 18);
  if (v6)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v6, a1, a2);

  return 0;
}

uint64_t _handleServerPairSetupShowPIN(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  uint64_t v12;

  v7 = a4;
  if (a3 < 5)
  {
    v12 = 4294960553;
  }
  else
  {
    RandomString();
    v8 = v7[19];
    if (v8)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = (void *)v9;
      if (v9)
        v11 = (const __CFString *)v9;
      else
        v11 = CFSTR("?");
      (*(void (**)(uint64_t, uint64_t, const __CFString *))(v8 + 16))(v8, a1, v11);

    }
    v12 = 0;
  }

  return v12;
}

uint64_t _handleServerPairSetupHidePIN(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 160);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1A293DE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{

}

void sub_1A293E1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A293E5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A293E8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A293ECB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A294028C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1A294072C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A2940BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1A29417D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

Class initRTIInputSystemDataPayload_0()
{
  Class result;

  if (RemoteTextInputLibrary_sOnce_1 != -1)
    dispatch_once(&RemoteTextInputLibrary_sOnce_1, &__block_literal_global_401);
  result = objc_getClass("RTIInputSystemDataPayload");
  classRTIInputSystemDataPayload_0 = (uint64_t)result;
  getRTIInputSystemDataPayloadClass_0[0] = (uint64_t (*)())RTIInputSystemDataPayloadFunction_0;
  return result;
}

id RTIInputSystemDataPayloadFunction_0()
{
  return (id)classRTIInputSystemDataPayload_0;
}

void sub_1A2944000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A29440FC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

const char *SFNearbyBLEServiceTypeToString(int a1)
{
  const char *result;

  result = "Invalid";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = "ContinuityRemote";
      break;
    case 2:
      result = "iOSSetup";
      break;
    case 3:
      result = "Repair";
      break;
    case 4:
      result = "Setup2";
      break;
    case 5:
      result = "AudioTuning";
      break;
    case 6:
      result = "PasswordGranting";
      break;
    case 7:
      result = "PasswordSharing";
      break;
    case 8:
      result = "System";
      break;
    case 9:
      result = "AutoUnlock";
      break;
    case 10:
      result = "WHASetup";
      break;
    case 11:
      result = "AppleTVSetup";
      break;
    case 12:
      result = "DeviceDiagnostics";
      break;
    case 13:
      result = "RemoteAutoFill";
      break;
    case 14:
      result = "ApplePay";
      break;
    case 15:
      result = "CompanionLinkProx";
      break;
    case 16:
      result = "RemoteManagement";
      break;
    case 17:
      result = "RemoteAutoFillPong";
      break;
    case 18:
      result = "RemoteDisplay";
      break;
    case 19:
      result = "ContinuityKeyboard";
      break;
    case 20:
      result = "PhoneCallHandoff";
      break;
    case 21:
      result = "ShareAudio";
      break;
    case 22:
      result = "AuthenticateAccounts";
      break;
    case 23:
      goto LABEL_5;
    case 24:
      result = "HasInvitations";
      break;
    case 25:
      result = "AcceptedInvitation";
      break;
    default:
      if (a1 == 127)
        result = "Debug";
      else
LABEL_5:
        result = "?";
      break;
  }
  return result;
}

const char *SFDeviceActionTypeToString(int a1)
{
  const char *result;

  if (a1 > 99)
  {
    switch(a1)
    {
      case 'd':
        return "B238SetupAfterWiFi";
      case 'e':
        return "B389SetupFromFindMy";
      case 'f':
        return "B389SetupDone";
      default:
        return "?";
    }
  }
  else
  {
    result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "ATVSetup";
        break;
      case 4:
        result = "MobileBackup";
        break;
      case 5:
        result = "WatchSetup";
        break;
      case 6:
        result = "ATVPair";
        break;
      case 7:
        result = "InternetRelay";
        break;
      case 8:
        result = "WiFiPassword";
        break;
      case 9:
        result = "iOSSetup";
        break;
      case 10:
        result = "Repair";
        break;
      case 11:
        result = "LegacyHomePodSetup";
        break;
      case 12:
        result = "ApplePay";
        break;
      case 13:
        result = "WHASetup";
        break;
      case 14:
        result = "DevToolsPair";
        break;
      case 17:
        result = "DDPing";
        break;
      case 18:
        result = "DDPong";
        break;
      case 19:
        result = "RemoteAutoFill";
        break;
      case 20:
        result = "CompanionLinkProx";
        break;
      case 21:
        result = "RemoteManagement";
        break;
      case 22:
        result = "RemoteAutoFillPong";
        break;
      case 24:
        result = "AccessorySetup";
        break;
      case 25:
        result = "TVLS";
        break;
      case 27:
        result = "ShareAudio";
        break;
      case 28:
        result = "AppSignIn";
        break;
      case 29:
        result = "Fitness";
        break;
      case 30:
        result = "TVCCS";
        break;
      case 31:
        result = "TVSA";
        break;
      case 32:
        result = "AuthenticateAccounts";
        break;
      case 33:
        result = "HomePodSetup";
        break;
      case 34:
        result = "CompanionAuthentication";
        break;
      case 36:
        result = "dovePeace";
        break;
      case 43:
        result = "AuthenticateAccountsV2";
        break;
      case 50:
        result = "NeedsRDLink";
        break;
      case 51:
        result = "NeedsCLink";
        break;
      case 52:
        result = "Goodbye";
        break;
      case 53:
        result = "PointToShare";
        break;
      case 55:
        result = "AUAction";
        break;
      case 56:
        result = "AcceptedInvitations";
        break;
      case 84:
        result = "HasInvitations";
        break;
      default:
        return "?";
    }
  }
  return result;
}

void sub_1A29461F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t SFServiceIdentifierToType(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.ApplePay")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.AppleTVSetup")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.AudioTuning")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.AutoUnlock")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.CompanionLinkProx")) & 1) != 0)
  {
    v2 = 15;
  }
  else
  {
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.Configurator")) & 1) != 0)
      goto LABEL_12;
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.ContinuityRemote")) & 1) != 0)
    {
      v2 = 1;
      goto LABEL_53;
    }
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.DeviceDiagnostics")) & 1) != 0)
    {
      v2 = 12;
      goto LABEL_53;
    }
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.Debug")) & 1) != 0)
    {
      v2 = 127;
      goto LABEL_53;
    }
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.iOSSetup")) & 1) != 0)
    {
      v2 = 2;
      goto LABEL_53;
    }
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.dovePeace")) & 1) != 0)
    {
      v2 = 23;
      goto LABEL_53;
    }
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.PasswordGranting")) & 1) != 0)
    {
      v2 = 6;
      goto LABEL_53;
    }
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.PasswordSharing")) & 1) != 0)
    {
      v2 = 7;
      goto LABEL_53;
    }
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.ProxHandoff")) & 1) != 0)
    {
      v2 = 20;
      goto LABEL_53;
    }
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.RemoteAutoFill")) & 1) != 0)
    {
      v2 = 13;
      goto LABEL_53;
    }
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.RemoteAutoFillPong")) & 1) != 0)
    {
      v2 = 17;
      goto LABEL_53;
    }
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.RemoteDisplay")) & 1) != 0)
    {
      v2 = 18;
      goto LABEL_53;
    }
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.RemoteManagement")) & 1) != 0)
    {
LABEL_12:
      v2 = 16;
    }
    else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.Repair")) & 1) != 0)
    {
      v2 = 3;
    }
    else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.Setup2")) & 1) != 0)
    {
      v2 = 4;
    }
    else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.ShareAudio")) & 1) != 0)
    {
      v2 = 21;
    }
    else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.System")) & 1) != 0)
    {
      v2 = 8;
    }
    else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.WHASetup")) & 1) != 0)
    {
      v2 = 10;
    }
    else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.AuthenticateAccounts")) & 1) != 0)
    {
      v2 = 22;
    }
    else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.HasInvitations")) & 1) != 0)
    {
      v2 = 24;
    }
    else if (objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.sharing.AcceptedInvitation")))
    {
      v2 = 25;
    }
    else
    {
      v2 = 0;
    }
  }
LABEL_53:

  return v2;
}

id SFServiceTypeToUUID(int a1)
{
  __int128 v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v2 = xmmword_1A2AF8FDF;
  LOBYTE(v2) = a1;
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", &v2);
}

id SFServiceIdentifierToUUID(void *a1, int *a2)
{
  id v3;
  _QWORD *v4;
  void *v5;
  int v6;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v8[0] = 0;
  v8[1] = 0;
  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.sharing.AirPlay")) & 1) != 0)
  {
    v4 = &unk_1A2AF8F57;
  }
  else if ((objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.sharing.ApplePayLegacy")) & 1) != 0)
  {
    v4 = &unk_1A2AF8F68;
  }
  else if ((objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.sharing.AutoUnlock")) & 1) != 0)
  {
    v4 = &unk_1A2AF8F79;
  }
  else if ((objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.sharing.Control")) & 1) != 0)
  {
    v4 = &unk_1A2AF8F8A;
  }
  else if ((objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.sharing.InternetRelay")) & 1) != 0)
  {
    v4 = &unk_1A2AF8F9B;
  }
  else if ((objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.sharing.PINPair")) & 1) != 0)
  {
    v4 = &unk_1A2AF8FAC;
  }
  else if ((objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.sharing.RemoteApp")) & 1) != 0)
  {
    v4 = &unk_1A2AF8FBD;
  }
  else if ((objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.sharing.Setup")) & 1) != 0)
  {
    v4 = &unk_1A2AF8FCE;
  }
  else
  {
    objc_msgSend(objc_retainAutorelease(v3), "UTF8String");
    v4 = v8;
    if (StringToUUIDEx())
    {
      v5 = 0;
      v6 = -6742;
      goto LABEL_22;
    }
  }
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", v4);
  if (v5)
    v6 = 0;
  else
    v6 = -6700;
LABEL_22:
  if (a2)
    *a2 = v6;

  return v5;
}

void sub_1A2946C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A29473C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A29475C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A2947790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A294793C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A2947DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

const char *SFNearbyBLEFrameTypeToString(unsigned int a1)
{
  if (a1 > 0x41)
    return "?";
  else
    return off_1E4833CF0[(char)a1];
}

void sub_1A2947FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A294E6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  id *v17;

  objc_destroyWeak(v17);
  _Block_object_dispose(&a17, 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{

}

void sub_1A294EC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A294EE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_1A294F194(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

const char *SFNearbyBLEServiceTypeToString_0(int a1)
{
  const char *result;

  result = "Invalid";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = "ContinuityRemote";
      break;
    case 2:
      result = "iOSSetup";
      break;
    case 3:
      result = "Repair";
      break;
    case 4:
      result = "Setup2";
      break;
    case 5:
      result = "AudioTuning";
      break;
    case 6:
      result = "PasswordGranting";
      break;
    case 7:
      result = "PasswordSharing";
      break;
    case 8:
      result = "System";
      break;
    case 9:
      result = "AutoUnlock";
      break;
    case 10:
      result = "WHASetup";
      break;
    case 11:
      result = "AppleTVSetup";
      break;
    case 12:
      result = "DeviceDiagnostics";
      break;
    case 13:
      result = "RemoteAutoFill";
      break;
    case 14:
      result = "ApplePay";
      break;
    case 15:
      result = "CompanionLinkProx";
      break;
    case 16:
      result = "RemoteManagement";
      break;
    case 17:
      result = "RemoteAutoFillPong";
      break;
    case 18:
      result = "RemoteDisplay";
      break;
    case 19:
      result = "ContinuityKeyboard";
      break;
    case 20:
      result = "PhoneCallHandoff";
      break;
    case 21:
      result = "ShareAudio";
      break;
    case 22:
      result = "AuthenticateAccounts";
      break;
    case 23:
      goto LABEL_5;
    case 24:
      result = "HasInvitations";
      break;
    case 25:
      result = "AcceptedInvitation";
      break;
    default:
      if (a1 == 127)
        result = "Debug";
      else
LABEL_5:
        result = "?";
      break;
  }
  return result;
}

void sub_1A295082C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A295171C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A2955154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A2955324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A29554D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A2955664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1A295595C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

const char *SFNearbyBLEFrameTypeToString_0(unsigned int a1)
{
  if (a1 > 0x41)
    return "?";
  else
    return off_1E4834238[(char)a1];
}

void sub_1A295604C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1A2959FF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Block_object_dispose((const void *)(v2 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17(uint64_t a1)
{

}

Class initCNContactFormatter_0()
{
  Class result;

  if (ContactsLibrary_sOnce_0 != -1)
    dispatch_once(&ContactsLibrary_sOnce_0, &__block_literal_global_66);
  result = objc_getClass("CNContactFormatter");
  classCNContactFormatter_0 = (uint64_t)result;
  getCNContactFormatterClass_0[0] = (uint64_t (*)())CNContactFormatterFunction_0;
  return result;
}

id CNContactFormatterFunction_0()
{
  return (id)classCNContactFormatter_0;
}

Class initSVXClientServiceManager()
{
  Class result;

  if (SiriVOXLibrary_sOnce != -1)
    dispatch_once(&SiriVOXLibrary_sOnce, &__block_literal_global_67);
  result = objc_getClass("SVXClientServiceManager");
  classSVXClientServiceManager = (uint64_t)result;
  getSVXClientServiceManagerClass[0] = (uint64_t (*)())SVXClientServiceManagerFunction;
  return result;
}

id SVXClientServiceManagerFunction()
{
  return (id)classSVXClientServiceManager;
}

Class initSVXSystemEvent()
{
  Class result;

  if (SiriVOXLibrary_sOnce != -1)
    dispatch_once(&SiriVOXLibrary_sOnce, &__block_literal_global_67);
  result = objc_getClass("SVXSystemEvent");
  classSVXSystemEvent = (uint64_t)result;
  getSVXSystemEventClass[0] = (uint64_t (*)())SVXSystemEventFunction;
  return result;
}

id SVXSystemEventFunction()
{
  return (id)classSVXSystemEvent;
}

Class initVSSpeechSynthesizer()
{
  Class result;

  if (VoiceServicesLibrary_sOnce != -1)
    dispatch_once(&VoiceServicesLibrary_sOnce, &__block_literal_global_497);
  result = objc_getClass("VSSpeechSynthesizer");
  classVSSpeechSynthesizer = (uint64_t)result;
  getVSSpeechSynthesizerClass[0] = (uint64_t (*)())VSSpeechSynthesizerFunction;
  return result;
}

id VSSpeechSynthesizerFunction()
{
  return (id)classVSSpeechSynthesizer;
}

uint64_t initVSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences()
{
  if (VoiceServicesLibrary_sOnce != -1)
    dispatch_once(&VoiceServicesLibrary_sOnce, &__block_literal_global_497);
  softLinkVSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences[0] = (uint64_t (*)())dlsym((void *)VoiceServicesLibrary_sLib, "VSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences");
  return softLinkVSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences[0]();
}

Class initVSSpeechRequest()
{
  Class result;

  if (VoiceServicesLibrary_sOnce != -1)
    dispatch_once(&VoiceServicesLibrary_sOnce, &__block_literal_global_497);
  result = objc_getClass("VSSpeechRequest");
  classVSSpeechRequest = (uint64_t)result;
  getVSSpeechRequestClass[0] = (uint64_t (*)())VSSpeechRequestFunction;
  return result;
}

id VSSpeechRequestFunction()
{
  return (id)classVSSpeechRequest;
}

Class initSVXDeviceSetupContext()
{
  Class result;

  if (SiriVOXLibrary_sOnce != -1)
    dispatch_once(&SiriVOXLibrary_sOnce, &__block_literal_global_67);
  result = objc_getClass("SVXDeviceSetupContext");
  classSVXDeviceSetupContext = (uint64_t)result;
  getSVXDeviceSetupContextClass[0] = (uint64_t (*)())SVXDeviceSetupContextFunction;
  return result;
}

id SVXDeviceSetupContextFunction()
{
  return (id)classSVXDeviceSetupContext;
}

Class initSVXDeviceSetupFlowSceneBuilder()
{
  Class result;

  if (SiriVOXLibrary_sOnce != -1)
    dispatch_once(&SiriVOXLibrary_sOnce, &__block_literal_global_67);
  result = objc_getClass("SVXDeviceSetupFlowSceneBuilder");
  classSVXDeviceSetupFlowSceneBuilder = (uint64_t)result;
  getSVXDeviceSetupFlowSceneBuilderClass[0] = (uint64_t (*)())SVXDeviceSetupFlowSceneBuilderFunction;
  return result;
}

id SVXDeviceSetupFlowSceneBuilderFunction()
{
  return (id)classSVXDeviceSetupFlowSceneBuilder;
}

Class initTRAnisetteDataHandler()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_6 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_6, &__block_literal_global_69);
  result = objc_getClass("TRAnisetteDataHandler");
  classTRAnisetteDataHandler = (uint64_t)result;
  getTRAnisetteDataHandlerClass[0] = (uint64_t (*)())TRAnisetteDataHandlerFunction;
  return result;
}

id TRAnisetteDataHandlerFunction()
{
  return (id)classTRAnisetteDataHandler;
}

Class initTREventMessage()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_6 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_6, &__block_literal_global_69);
  result = objc_getClass("TREventMessage");
  classTREventMessage = (uint64_t)result;
  getTREventMessageClass[0] = (uint64_t (*)())TREventMessageFunction;
  return result;
}

id TREventMessageFunction()
{
  return (id)classTREventMessage;
}

Class initTRRequestMessage()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_6 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_6, &__block_literal_global_69);
  result = objc_getClass("TRRequestMessage");
  classTRRequestMessage = (uint64_t)result;
  getTRRequestMessageClass[0] = (uint64_t (*)())TRRequestMessageFunction;
  return result;
}

id TRRequestMessageFunction()
{
  return (id)classTRRequestMessage;
}

Class initTRResponseMessage()
{
  Class result;

  if (TouchRemoteLibrary_sOnce_6 != -1)
    dispatch_once(&TouchRemoteLibrary_sOnce_6, &__block_literal_global_69);
  result = objc_getClass("TRResponseMessage");
  classTRResponseMessage = (uint64_t)result;
  getTRResponseMessageClass[0] = (uint64_t (*)())TRResponseMessageFunction;
  return result;
}

id TRResponseMessageFunction()
{
  return (id)classTRResponseMessage;
}

void _wifiDeviceAttached(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v3;
  NSObject *v4;
  _QWORD *v5;
  _QWORD block[4];
  id v7;

  v3 = a3;
  v4 = v3[14];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___wifiDeviceAttached_block_invoke;
  block[3] = &unk_1E482DF78;
  v7 = v3;
  v5 = v3;
  dispatch_async(v4, block);

}

void _wifiServerRestarted(uint64_t a1, void *a2)
{
  _QWORD *v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD block[4];
  id v6;

  v2 = a2;
  v3 = v2[14];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___wifiServerRestarted_block_invoke;
  block[3] = &unk_1E482DF78;
  v6 = v2;
  v4 = v2;
  dispatch_async(v3, block);

}

void _wifiAutoJoinNotification(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v4;
  id v5;
  NSObject *v6;
  id v7;
  _QWORD *v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v4 = a3;
  v5 = a2;
  v6 = v4[14];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___wifiAutoJoinNotification_block_invoke;
  v9[3] = &unk_1E482D3A0;
  v10 = v4;
  v11 = v5;
  v7 = v5;
  v8 = v4;
  dispatch_async(v6, v9);

}

void _wifiDeviceDetached(uint64_t a1, void *a2)
{
  _QWORD *v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD block[4];
  id v6;

  v2 = a2;
  v3 = v2[14];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___wifiDeviceDetached_block_invoke;
  block[3] = &unk_1E482DF78;
  v6 = v2;
  v4 = v2;
  dispatch_async(v3, block);

}

_BYTE *___wifiAutoJoinNotification_block_invoke(uint64_t a1)
{
  _BYTE *result;

  result = *(_BYTE **)(a1 + 32);
  if (!result[8])
    return (_BYTE *)objc_msgSend(result, "_wifiAutoJoinNotification:", *(_QWORD *)(a1 + 40));
  return result;
}

uint64_t ___wifiDeviceAttached_block_invoke(uint64_t result)
{
  uint64_t v1;

  if (!*(_BYTE *)(*(_QWORD *)(result + 32) + 8))
  {
    v1 = result;
    if (gLogCategory_SFWiFiHealthMonitor <= 30
      && (gLogCategory_SFWiFiHealthMonitor != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return objc_msgSend(*(id *)(v1 + 32), "_update");
  }
  return result;
}

uint64_t ___wifiDeviceDetached_block_invoke(uint64_t result)
{
  uint64_t v1;

  if (!*(_BYTE *)(*(_QWORD *)(result + 32) + 8))
  {
    v1 = result;
    if (gLogCategory_SFWiFiHealthMonitor <= 30
      && (gLogCategory_SFWiFiHealthMonitor != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)(*(_QWORD *)(v1 + 32) + 32) = 0;
    *(_QWORD *)(*(_QWORD *)(v1 + 32) + 24) = 0;
    return objc_msgSend(*(id *)(v1 + 32), "_update");
  }
  return result;
}

uint64_t ___wifiServerRestarted_block_invoke(uint64_t result)
{
  uint64_t v1;

  if (!*(_BYTE *)(*(_QWORD *)(result + 32) + 8))
  {
    v1 = result;
    if (gLogCategory_SFWiFiHealthMonitor <= 60
      && (gLogCategory_SFWiFiHealthMonitor != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    objc_msgSend(*(id *)(v1 + 32), "_wifiEnsureStopped");
    return objc_msgSend(*(id *)(v1 + 32), "_wifiEnsureStarted");
  }
  return result;
}

uint64_t sub_1A2965C3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1A2AE31D8();
  __swift_allocate_value_buffer(v0, qword_1EE67AA08);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EE67AA08);
  if (qword_1EE67AA50 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_1EE67CA80);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t SFUserDefault.key.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t SFUserDefault.keyString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *SFUserDefault.__allocating_init(userDefaults:key:featureFlagsDomain:defaultValue:prefsChangedLibNotifyName:override:processesToKill:)(void *a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, __int16 a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v14 = sub_1A296E2DC(a1, a2, a3, a4, a5, a6, a7 & 0x1FF, a8, a9, a10, a11, a12);
  v15 = *(_QWORD *)(v12 + 80);
  v16 = sub_1A2AE39F4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a11, v16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a8, v15);
  return v14;
}

_QWORD *SFUserDefault.init(userDefaults:key:featureFlagsDomain:defaultValue:prefsChangedLibNotifyName:override:processesToKill:)(void *a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, __int16 a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v12;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v14 = *v12;
  v15 = sub_1A296DFEC(a1, a2, a3, a4, a5, a6, a7 & 0x1FF, a8, a9, a10, a11, a12);
  v16 = *(_QWORD *)(v14 + 80);
  v17 = sub_1A2AE39F4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a11, v17);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a8, v16);
  return v15;
}

uint64_t SFUserDefault.runtimeOverride.getter()
{
  return sub_1A2AE3244();
}

uint64_t sub_1A2965E38()
{
  return SFUserDefault.runtimeOverride.getter();
}

uint64_t sub_1A2965E58(uint64_t a1)
{
  return sub_1A296E38C(a1);
}

uint64_t SFUserDefault.runtimeOverride.setter(uint64_t a1)
{
  uint64_t v2;

  sub_1A296E38C(a1);
  v2 = sub_1A2AE39F4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

void (*SFUserDefault.runtimeOverride.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1A2AE39F4();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  sub_1A2AE3244();
  return sub_1A2965F50;
}

void sub_1A2965F50(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    sub_1A296E38C((uint64_t)v3);
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    sub_1A296E38C(*(_QWORD *)(*(_QWORD *)a1 + 32));
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

BOOL SFUserDefault.hasRuntimeOverride.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v2 = sub_1A2AE39F4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - v4;
  sub_1A2AE3244();
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(v5, 1, v1) != 1;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v6;
}

Swift::Void __swiftcall SFUserDefault.clearRuntimeOverride()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v2 = sub_1A2AE39F4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v6 - v4;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))((char *)&v6 - v4, 1, 1, v1);
  sub_1A296E38C((uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t SFUserDefault.hasValueOnDisk.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  v1 = *(void **)(v0 + 56);
  if (!v1)
  {
    v8 = 0u;
    v9 = 0u;
LABEL_8:
    v5 = 0;
    goto LABEL_9;
  }
  v2 = v1;
  v3 = (void *)sub_1A2AE340C();
  v4 = objc_msgSend(v2, sel_objectForKey_, v3);

  if (v4)
  {
    sub_1A2AE3A90();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_1A296E450((uint64_t)v7, (uint64_t)&v8);
  if (!*((_QWORD *)&v9 + 1))
    goto LABEL_8;
  v5 = 1;
LABEL_9:
  sub_1A296F108((uint64_t)&v8, &qword_1ECEFB8A0);
  return v5;
}

Swift::Void __swiftcall SFUserDefault.clearValueOnDisk()()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;

  v1 = *(void **)(v0 + 56);
  if (v1)
  {
    v2 = v1;
    v3 = (id)sub_1A2AE340C();
    objc_msgSend(v2, sel_removeObjectForKey_, v3);

  }
}

uint64_t SFUserDefault.hasFeatureFlag.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;
  unsigned __int8 v5;

  if ((v4[81] & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    type metadata accessor for SFUserDefault.FFKey(0, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)v4 + 88), a4);
    v5 = sub_1A29662F8();
  }
  return v5 & 1;
}

id sub_1A29662F8()
{
  uint64_t v0;
  id result;

  result = (id)objc_opt_self();
  if (!*(_QWORD *)v0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (((*(_BYTE *)(v0 + 40) | *(_BYTE *)(v0 + 16)) & 1) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(v0 + 24))
    return objc_msgSend(result, sel_featureEnabledForDomain_feature_);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t SFUserDefault.value.getter@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  char *v31;
  char v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  void (*v35)(char *, char *, uint64_t);
  void (*v37)(char *, char *, uint64_t);
  char v38;
  char v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  unsigned int (*v61)(char *, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD v69[2];
  __int128 v70;
  char v71;
  __int128 v72;
  char v73;

  v2 = v1;
  v4 = *(_QWORD *)v1;
  v5 = *(_QWORD *)(v4 + 80);
  v6 = sub_1A2AE39F4();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v65 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v66 = (char *)&v61 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v61 - v13;
  v15 = *(_QWORD *)(v5 - 8);
  v16 = MEMORY[0x1E0C80A78](v12);
  v64 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v61 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v61 - v21;
  v67 = v4;
  sub_1A2AE3244();
  v23 = v15;
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v24(v14, 1, v5) != 1)
  {
    v37 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v37(v22, v14, v5);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v37)(a1, v22, v5);
  }
  v61 = v24;
  v63 = a1;
  v25 = *(void (**)(char *, uint64_t))(v7 + 8);
  v25(v14, v6);
  v27 = (void *)*((_QWORD *)v2 + 7);
  if (!v27)
    goto LABEL_8;
  v62 = v23;
  v28 = v27;
  v29 = (void *)sub_1A2AE340C();
  v30 = objc_msgSend(v28, sel_objectForKey_, v29);

  if (!v30)
  {

    v23 = v62;
LABEL_8:
    if ((v2[81] & 1) != 0 || v5 != MEMORY[0x1E0DEAFA0])
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 16))(v63, &v2[*(_QWORD *)(*(_QWORD *)v2 + 128)], v5);
    v38 = v2[80];
    v39 = v2[32];
    v40 = *(_QWORD *)(v67 + 88);
    v70 = *((_OWORD *)v2 + 4);
    v71 = v38;
    v72 = *((_OWORD *)v2 + 1);
    v73 = v39;
    type metadata accessor for SFUserDefault.FFKey(0, MEMORY[0x1E0DEAFA0], v40, v26);
    LOBYTE(v69[0]) = sub_1A29662F8() & 1;
    return swift_dynamicCast();
  }
  sub_1A2AE3A90();
  swift_unknownObjectRelease();
  sub_1A296E4A4(v69, &v70);
  sub_1A296E4B4((uint64_t)&v70, (uint64_t)v69);
  v31 = v66;
  v32 = swift_dynamicCast();
  v33 = v62;
  v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56);
  if ((v32 & 1) != 0)
  {
    v34(v31, 0, 1, v5);

    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v70);
    v35 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    v35(v20, v31, v5);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v35)(v63, v20, v5);
  }
  v34(v31, 1, 1, v5);
  v25(v31, v6);
  v41 = (void *)sub_1A2AE340C();
  v42 = objc_msgSend(v28, sel_stringForKey_, v41);

  if (!v42)
  {
    if (qword_1EE67AA00 != -1)
      swift_once();
    v56 = sub_1A2AE31D8();
    __swift_project_value_buffer(v56, (uint64_t)qword_1EE67AA08);
    swift_retain_n();
    v48 = sub_1A2AE31C0();
    v49 = sub_1A2AE394C();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc();
      v51 = v28;
      v52 = swift_slowAlloc();
      *(_DWORD *)v50 = 136315138;
      *(_QWORD *)&v69[0] = v52;
      v57 = sub_1A2AE3B38();
      v68 = sub_1A296DA00(v57, v58, (uint64_t *)v69);
      sub_1A2AE3A60();
      swift_release_n();
      swift_bridgeObjectRelease();
      v55 = "Failed to cast value or get string from stored UserDefault. Returning default value {key: %s}";
      goto LABEL_22;
    }
LABEL_23:
    swift_release_n();

    goto LABEL_24;
  }
  v43 = sub_1A2AE343C();
  v45 = v44;

  v46 = v65;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 + 88) + 16))(v43, v45, v5);
  if (v61(v46, 1, v5) == 1)
  {
    v25(v46, v6);
    if (qword_1EE67AA00 != -1)
      swift_once();
    v47 = sub_1A2AE31D8();
    __swift_project_value_buffer(v47, (uint64_t)qword_1EE67AA08);
    swift_retain_n();
    v48 = sub_1A2AE31C0();
    v49 = sub_1A2AE394C();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc();
      v51 = v28;
      v52 = swift_slowAlloc();
      *(_DWORD *)v50 = 136315138;
      *(_QWORD *)&v69[0] = v52;
      v53 = sub_1A2AE3B38();
      v68 = sub_1A296DA00(v53, v54, (uint64_t *)v69);
      sub_1A2AE3A60();
      swift_release_n();
      swift_bridgeObjectRelease();
      v55 = "Failed to create value from stored UserDefault. Returning default value {key: %s}";
LABEL_22:
      _os_log_impl(&dword_1A2830000, v48, v49, v55, v50, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v52, -1, -1);
      MEMORY[0x1A85896E8](v50, -1, -1);

LABEL_24:
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v70);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v62 + 16))(v63, &v2[*(_QWORD *)(*(_QWORD *)v2 + 128)], v5);
    }
    goto LABEL_23;
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v70);

  v59 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
  v60 = v64;
  v59(v64, v46, v5);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v59)(v63, v60, v5);
}

uint64_t sub_1A2966A2C@<X0>(uint64_t a1@<X8>)
{
  return SFUserDefault.value.getter(a1);
}

uint64_t sub_1A2966A4C(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  MEMORY[0x1E0C80A78](a1);
  v2 = (char *)&v5 - v1;
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - v1);
  return SFUserDefault.value.setter((uint64_t)v2);
}

uint64_t SFUserDefault.value.setter(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  char *v14;
  _QWORD v16[6];

  v2 = v1;
  v4 = *v1;
  v5 = sub_1A2AE3130();
  v16[1] = *(_QWORD *)(v5 - 8);
  v16[2] = v5;
  MEMORY[0x1E0C80A78](v5);
  v16[0] = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A2AE30C4();
  MEMORY[0x1E0C80A78](v7);
  v8 = type metadata accessor for SFUserDefaultsRepresentation();
  MEMORY[0x1E0C80A78](v8);
  v9 = (void *)v2[7];
  if (v9)
  {
    v11 = *(_QWORD *)(v4 + 80);
    v10 = *(_QWORD *)(v4 + 88);
    v12 = a1;
    v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v16[3] = v9;
    v16[4] = v11;
    v16[5] = v12;
    v13(v11, v10);
    v14 = (char *)&loc_1A2966BF4 + 4 * byte_1A2AF9380[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 80) - 8) + 8))(a1);
}

void sub_1A2966C5C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *v0;
  v3 = (void *)sub_1A2AE340C();
  v4 = *(void **)(v1 - 120);
  objc_msgSend(v4, sel_setInteger_forKey_, v2, v3);

  JUMPOUT(0x1A2966E78);
}

void sub_1A2966D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v2, v3, v1);
  v5 = (void *)sub_1A2AE2FE0();
  v6 = (void *)sub_1A2AE340C();
  v7 = *(void **)(v4 - 120);
  objc_msgSend(v7, sel_setObject_forKey_, v5, v6);

  (*(void (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v4 - 112) - 8) + 8))(*(_QWORD *)(v4 - 104));
  JUMPOUT(0x1A2966E84);
}

void sub_1A2966DC0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v1 - 136) + 32))(*(_QWORD *)(v1 - 144), v0, *(_QWORD *)(v1 - 128));
  _s7Sharing9SFAirDropO18TransferIdentifierV11stringValueSSvg_0();
  v2 = (void *)sub_1A2AE340C();
  swift_bridgeObjectRelease();
  v3 = (void *)sub_1A2AE340C();
  v4 = *(void **)(v1 - 120);
  objc_msgSend(v4, sel_setObject_forKey_, v2, v3);

  (*(void (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v1 - 112) - 8) + 8))(*(_QWORD *)(v1 - 104));
  JUMPOUT(0x1A2966E84);
}

void sub_1A2966E4C()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 - 120), sel_removeObjectForKey_, sub_1A2AE340C());
  JUMPOUT(0x1A2966E70);
}

void (*SFUserDefault.value.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v7 = malloc(v6);
  v3[4] = v7;
  SFUserDefault.value.getter((uint64_t)v7);
  return sub_1A2966F2C;
}

void sub_1A2966F2C(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    v5 = v2[1];
    v6 = v2[2];
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    SFUserDefault.value.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    SFUserDefault.value.setter(*(_QWORD *)(*(_QWORD *)a1 + 32));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t SFUserDefault.values.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v0 = sub_1A2AE370C();
  MEMORY[0x1E0C80A78](v0);
  *(uint64_t *)((char *)&v4 - v1) = 1;
  (*(void (**)(char *, _QWORD))(v2 + 104))((char *)&v4 - v1, *MEMORY[0x1E0DF07A8]);
  return sub_1A2AE3754();
}

uint64_t sub_1A2967060(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD v28[2];
  void (*v29)(char *, uint64_t, uint64_t);
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = *a2;
  v4 = *(_QWORD *)(v32 + 80);
  v5 = sub_1A2AE3730();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v28 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1A2AE36E8();
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v30(v12, 1, 1, v13);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v34 = a1;
  v29 = v14;
  v14(v9, a1, v5);
  v15 = *(unsigned __int8 *)(v6 + 80);
  v31 = v7;
  v28[1] = v15 | 7;
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = 0;
  *((_QWORD *)v16 + 3) = 0;
  v33 = v4;
  *((_QWORD *)v16 + 4) = v4;
  v17 = *(_QWORD *)(v32 + 88);
  *((_QWORD *)v16 + 5) = v17;
  *((_QWORD *)v16 + 6) = a2;
  v18 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v18(&v16[(v15 + 56) & ~v15], v9, v5);
  swift_retain();
  v32 = sub_1A2974504((uint64_t)v12, (uint64_t)&unk_1EE67AFA8, (uint64_t)v16);
  v19 = (uint64_t *)((char *)a2 + *(_QWORD *)(*a2 + 144));
  v20 = v19[1];
  if (v20)
  {
    v28[0] = *v19;
    v30(v12, 1, 1, v13);
    v29(v9, v34, v5);
    v21 = v17;
    v22 = (char *)swift_allocObject();
    *((_QWORD *)v22 + 2) = 0;
    *((_QWORD *)v22 + 3) = 0;
    v23 = v33;
    *((_QWORD *)v22 + 4) = v33;
    *((_QWORD *)v22 + 5) = v21;
    *((_QWORD *)v22 + 6) = v28[0];
    *((_QWORD *)v22 + 7) = v20;
    *((_QWORD *)v22 + 8) = a2;
    v18(&v22[(v15 + 72) & ~v15], v9, v5);
    swift_retain();
    swift_bridgeObjectRetain();
    v24 = (uint64_t)v22;
    v17 = v21;
    v25 = sub_1A2974504((uint64_t)v12, (uint64_t)&unk_1EE67AFB8, v24);
  }
  else
  {
    v25 = 0;
    v23 = v33;
  }
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = v23;
  v26[3] = v17;
  v26[4] = v32;
  v26[5] = v25;
  return sub_1A2AE3700();
}

uint64_t sub_1A29672F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[3] = a4;
  v5[4] = a5;
  v6 = *(_QWORD *)(*(_QWORD *)a4 + 80);
  v5[5] = v6;
  v7 = sub_1A2AE36F4();
  v5[6] = v7;
  v5[7] = *(_QWORD *)(v7 - 8);
  v5[8] = swift_task_alloc();
  v5[9] = *(_QWORD *)(v6 - 8);
  v5[10] = swift_task_alloc();
  v5[11] = swift_task_alloc();
  v5[12] = sub_1A2AE39F4();
  v8 = sub_1A2AE39F4();
  v5[13] = v8;
  v5[14] = *(_QWORD *)(v8 - 8);
  v5[15] = swift_task_alloc();
  v9 = sub_1A2AE325C();
  v5[16] = v9;
  v5[17] = MEMORY[0x1A85895EC](MEMORY[0x1E0C95FB8], v9);
  v10 = sub_1A2AE3220();
  v5[18] = v10;
  v5[19] = *(_QWORD *)(v10 - 8);
  v5[20] = swift_task_alloc();
  v11 = sub_1A2AE3214();
  v5[21] = v11;
  v5[22] = *(_QWORD *)(v11 - 8);
  v5[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A296746C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[19];
  v1 = v0[20];
  v3 = v0[17];
  v4 = v0[18];
  v5 = v0[16];
  v0[2] = *(_QWORD *)(v0[3] + *(_QWORD *)(*(_QWORD *)v0[3] + 136));
  MEMORY[0x1A8586964](v5, v3);
  sub_1A2AE31FC();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  v6 = v0[21];
  v7 = (_QWORD *)swift_task_alloc();
  v0[24] = v7;
  MEMORY[0x1A85895EC](MEMORY[0x1E0C95E78], v6);
  *v7 = v0;
  v7[1] = sub_1A2967544;
  return sub_1A2AE36D0();
}

uint64_t sub_1A2967544()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2967598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 120);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 96) - 8) + 48))(v1, 1) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 112);
    v13 = *(_QWORD *)(v0 + 104);
    v4 = *(_QWORD *)(v0 + 80);
    v3 = *(_QWORD *)(v0 + 88);
    v6 = *(_QWORD *)(v0 + 64);
    v5 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 56);
    v11 = *(_QWORD *)(v0 + 48);
    v8 = *(_QWORD *)(v0 + 40);
    SFUserDefault.value.getter(v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v8);
    sub_1A2AE3730();
    sub_1A2AE3718();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v11);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v8);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v13);
    v9 = *(_QWORD *)(v0 + 168);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 192) = v10;
    MEMORY[0x1A85895EC](MEMORY[0x1E0C95E78], v9);
    *v10 = v0;
    v10[1] = sub_1A2967544;
    return sub_1A2AE36D0();
  }
}

uint64_t sub_1A2967754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v8 = *(_QWORD *)(*(_QWORD *)a6 + 80);
  v7[6] = v8;
  v9 = sub_1A2AE36F4();
  v7[7] = v9;
  v7[8] = *(_QWORD *)(v9 - 8);
  v7[9] = swift_task_alloc();
  v7[10] = *(_QWORD *)(v8 - 8);
  v7[11] = swift_task_alloc();
  v7[12] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67AFC0);
  v7[13] = v10;
  v7[14] = *(_QWORD *)(v10 - 8);
  v7[15] = swift_task_alloc();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67AFC8);
  v7[16] = v11;
  v7[17] = *(_QWORD *)(v11 - 8);
  v7[18] = swift_task_alloc();
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE67AFD0);
  v7[19] = v12;
  v7[20] = *(_QWORD *)(v12 - 8);
  v7[21] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2967878()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = v0[17];
  v1 = v0[18];
  v4 = (_QWORD *)v0[15];
  v3 = v0[16];
  v5 = v0[13];
  v6 = v0[14];
  v8 = v0[2];
  v7 = v0[3];
  *v4 = 1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v4, *MEMORY[0x1E0DF07A8], v5);
  v9 = swift_task_alloc();
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  sub_1A2AE3754();
  swift_task_dealloc();
  sub_1A2AE373C();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v10 = (_QWORD *)swift_task_alloc();
  v0[22] = v10;
  *v10 = v0;
  v10[1] = sub_1A296798C;
  return sub_1A2AE3748();
}

uint64_t sub_1A296798C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A29679E0()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if ((*(_BYTE *)(v0 + 196) & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 88);
    v2 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 56);
    v6 = *(_QWORD *)(v0 + 64);
    v8 = *(_QWORD *)(v0 + 48);
    SFUserDefault.value.getter(v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v8);
    sub_1A2AE3730();
    sub_1A2AE3718();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v7);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v8);
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v9;
    *v9 = v0;
    v9[1] = sub_1A2967B54;
    return sub_1A2AE3748();
  }
}

uint64_t sub_1A2967B54()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2967BA8()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (*(_BYTE *)(v0 + 196) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 88);
    v2 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 56);
    v6 = *(_QWORD *)(v0 + 64);
    v8 = *(_QWORD *)(v0 + 48);
    SFUserDefault.value.getter(v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v8);
    sub_1A2AE3730();
    sub_1A2AE3718();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v7);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v8);
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v9;
    *v9 = v0;
    v9[1] = sub_1A2967B54;
    return sub_1A2AE3748();
  }
}

uint64_t sub_1A2967D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = sub_1A2AE376C();
  if (a3)
    return sub_1A2AE376C();
  return result;
}

_QWORD *SFUserDefault.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  unint64_t v22;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (SFUserDefault.hasRuntimeOverride.getter())
  {
    v6 = sub_1A296CFB4(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v8 = v6[2];
    v7 = v6[3];
    if (v8 >= v7 >> 1)
      v6 = sub_1A296CFB4((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
    v6[2] = v8 + 1;
    v9 = &v6[2 * v8];
    v9[4] = 0x4F656D69746E7572;
    v9[5] = 0xEF65646972726576;
  }
  else
  {
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  isUniquelyReferenced_nonNull_native = SFUserDefault.hasValueOnDisk.getter();
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A296CFB4(0, v6[2] + 1, 1, v6);
      v6 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v15 = v6[2];
    v14 = v6[3];
    if (v15 >= v14 >> 1)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A296CFB4((_QWORD *)(v14 > 1), v15 + 1, 1, v6);
      v6 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v6[2] = v15 + 1;
    v16 = &v6[2 * v15];
    v16[4] = 0x446E4F65756C6176;
    v16[5] = 0xEB000000006B7369;
  }
  if ((SFUserDefault.hasFeatureFlag.getter(isUniquelyReferenced_nonNull_native, v11, v12, v13) & 1) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = sub_1A296CFB4(0, v6[2] + 1, 1, v6);
    v18 = v6[2];
    v17 = v6[3];
    if (v18 >= v17 >> 1)
      v6 = sub_1A296CFB4((_QWORD *)(v17 > 1), v18 + 1, 1, v6);
    v6[2] = v18 + 1;
    v19 = &v6[2 * v18];
    v19[4] = 0x4665727574616566;
    v19[5] = 0xEB0000000067616CLL;
  }
  else if (!v6[2])
  {
    swift_bridgeObjectRelease();
    v21 = 0;
    v22 = 0xE000000000000000;
    sub_1A2AE3B38();
    sub_1A2AE34F0();
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v21 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6764B8);
  sub_1A296E5E4((unint64_t *)&qword_1EE67AAD0, &qword_1EE6764B8, MEMORY[0x1E0DEAF20]);
  sub_1A2AE33AC();
  swift_bridgeObjectRelease();
  v21 = 0;
  v22 = 0xE000000000000000;
  sub_1A2AE3B38();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
LABEL_20:
  sub_1A2AE34F0();
  SFUserDefault.value.getter((uint64_t)v5);
  sub_1A2AE3EBC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v21;
}

uint64_t SFUserDefault.userDefaultDescription.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;

  v4 = *(_QWORD *)(*v2 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (uint64_t)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v4 == MEMORY[0x1E0DEAFA0];
  v10 = v2[5];
  v9 = v2[6];
  v20 = 0;
  v21 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  SFUserDefault.value.getter(v7);
  sub_1A2AE3EBC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  v11 = v20;
  v12 = v21;
  LOBYTE(v4) = SFUserDefault.hasRuntimeOverride.getter();
  v13 = SFUserDefault.hasValueOnDisk.getter();
  LOBYTE(v7) = v13;
  v17 = SFUserDefault.hasFeatureFlag.getter(v13, v14, v15, v16);
  v18 = *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 152));
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 24) = v12;
  *(_BYTE *)(a2 + 32) = v4 & 1;
  *(_BYTE *)(a2 + 33) = v7 & 1;
  *(_BYTE *)(a2 + 34) = v17 & 1;
  *(_BYTE *)(a2 + 35) = 0;
  *(_BYTE *)(a2 + 36) = v8;
  *(_QWORD *)(a2 + 40) = v18;
  return swift_bridgeObjectRetain();
}

id *SFUserDefault.deinit()
{
  id *v0;
  _QWORD *v1;

  v1 = *v0;
  swift_bridgeObjectRelease();

  (*(void (**)(char *))(*(_QWORD *)(v1[10] - 8) + 8))((char *)v0 + *((_QWORD *)*v0 + 16));
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SFUserDefault.__deallocating_deinit()
{
  SFUserDefault.deinit();
  return swift_deallocClassInstance();
}

uint64_t SFAnyUserDefault.key.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAnyUserDefault.processesToKill.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A29682C8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[6];
  v3 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 + 152));
  *a2 = a1[5];
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = sub_1A2971B80;
  a2[4] = a1;
  a2[5] = sub_1A2971B9C;
  a2[6] = a1;
  a2[7] = j___s7Sharing13SFUserDefaultC04userC11DescriptionAA0bcE0Vvg;
  a2[8] = a1;
  swift_retain_n();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A2968330@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *boxed_opaque_existential_0;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v27 = a3;
  v28 = a4;
  v6 = *a3;
  v7 = *(_QWORD *)(*a3 + 80);
  v8 = sub_1A2AE39F4();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v25 - v11;
  v26 = *(_QWORD *)(v7 - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v25 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v25 - v15;
  v17 = *(_QWORD *)(v6 + 88);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 16);
  swift_bridgeObjectRetain();
  v18(a1, a2, v7, v17);
  v29 = 0;
  v30 = 0xE000000000000000;
  sub_1A2AE3B20();
  sub_1A2AE34F0();
  sub_1A2AE34F0();
  sub_1A2AE34F0();
  sub_1A2AE412C();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  v19 = v31;
  Optional.tryUnwrap(_:file:line:)(v29, v30, 0xD00000000000004CLL, 0x80000001A2B44880, 235, v8, (uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if (v19)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = (uint64_t)v25;
  v22 = v26;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v25, v16, v7);
  SFUserDefault.value.setter(v21);
  v23 = v28;
  v28[3] = v7;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v23);
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_0, v16, v7);
}

uint64_t SFAnyUserDefault.userDefaultDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t SFAnyUserDefault.update(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

Swift::Bool __swiftcall SFAnyUserDefault.clearValueOnDisk()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 40))() & 1;
}

uint64_t sub_1A29685E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for SFUserDefaultsRegistry();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6763D0);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 24) = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE676408);
  swift_allocObject();
  result = sub_1A2AE4114();
  qword_1EE6ADD00 = result;
  return result;
}

uint64_t sub_1A2968670()
{
  uint64_t v0;
  _QWORD *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = (_QWORD *)swift_retain();
  sub_1A29682C8(v1, v5);
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 24) + 16);
  os_unfair_lock_lock(v2);
  sub_1A29686D4(v3, v0, (uint64_t)v5);
  os_unfair_lock_unlock(v2);
  return sub_1A2971B1C((uint64_t)v5);
}

uint64_t sub_1A29686D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v5 = (_QWORD *)(a2 + 16);
  swift_beginAccess();
  v6 = *(_QWORD **)(a2 + 16);
  sub_1A2971AB4(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 16) = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v6 = sub_1A296D0C0(0, v6[2] + 1, 1, v6);
    *v5 = v6;
  }
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    v6 = sub_1A296D0C0((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
    *v5 = v6;
  }
  v6[2] = v9 + 1;
  v10 = &v6[9 * v9];
  *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
  v11 = *(_OWORD *)(a3 + 16);
  v12 = *(_OWORD *)(a3 + 32);
  v13 = *(_OWORD *)(a3 + 48);
  v10[12] = *(_QWORD *)(a3 + 64);
  *((_OWORD *)v10 + 4) = v12;
  *((_OWORD *)v10 + 5) = v13;
  *((_OWORD *)v10 + 3) = v11;
  return swift_endAccess();
}

uint64_t sub_1A29687D4@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  swift_beginAccess();
  *a2 = *(_QWORD *)(a1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t SFUserDefaultsRegistry.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t SFUserDefaultsRegistry.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t SFUserDefaultDescription.key.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFUserDefaultDescription.resolvedValueDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFUserDefaultDescription.hasRuntimeOverride.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t SFUserDefaultDescription.hasValueOnDisk.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t SFUserDefaultDescription.hasFeatureFlag.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 34);
}

uint64_t SFUserDefaultDescription.untracked.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 35);
}

uint64_t SFUserDefaultDescription.isBool.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 36);
}

uint64_t SFUserDefaultDescription.processesToKill.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SFUserDefaultDescription.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 33);
  v3 = *((unsigned __int8 *)v0 + 34);
  v4 = *((unsigned __int8 *)v0 + 35);
  if (*((_BYTE *)v0 + 32) != 1)
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (!*((_BYTE *)v0 + 33))
      goto LABEL_12;
    goto LABEL_7;
  }
  v5 = sub_1A296CFB4(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = sub_1A296CFB4((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v8 = &v5[2 * v7];
  v8[4] = 0x4F656D69746E7572;
  v8[5] = 0xEF65646972726576;
  if (v2)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = sub_1A296CFB4(0, v5[2] + 1, 1, v5);
    v10 = v5[2];
    v9 = v5[3];
    if (v10 >= v9 >> 1)
      v5 = sub_1A296CFB4((_QWORD *)(v9 > 1), v10 + 1, 1, v5);
    v5[2] = v10 + 1;
    v11 = &v5[2 * v10];
    v11[4] = 0x446E4F65756C6176;
    v11[5] = 0xEB000000006B7369;
  }
LABEL_12:
  if (v3)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = sub_1A296CFB4(0, v5[2] + 1, 1, v5);
    v16 = v5[2];
    v15 = v5[3];
    if (v16 >= v15 >> 1)
      v5 = sub_1A296CFB4((_QWORD *)(v15 > 1), v16 + 1, 1, v5);
    v5[2] = v16 + 1;
    v17 = &v5[2 * v16];
    v17[4] = 0x4665727574616566;
    v17[5] = 0xEB0000000067616CLL;
    if (v4)
      goto LABEL_14;
  }
  else if (v4)
  {
LABEL_14:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = sub_1A296CFB4(0, v5[2] + 1, 1, v5);
    v13 = v5[2];
    v12 = v5[3];
    if (v13 >= v12 >> 1)
      v5 = sub_1A296CFB4((_QWORD *)(v12 > 1), v13 + 1, 1, v5);
    v5[2] = v13 + 1;
    v14 = &v5[2 * v13];
    v14[4] = 0x656B636172746E75;
    v14[5] = 0xE900000000000064;
    goto LABEL_25;
  }
  if (!v5[2])
  {
    swift_bridgeObjectRelease();
    v19 = v1;
    swift_bridgeObjectRetain();
    goto LABEL_26;
  }
LABEL_25:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6764B8);
  sub_1A296E5E4((unint64_t *)&qword_1EE67AAD0, &qword_1EE6764B8, MEMORY[0x1E0DEAF20]);
  sub_1A2AE33AC();
  swift_bridgeObjectRelease();
  v19 = v1;
  swift_bridgeObjectRetain();
  sub_1A2AE34F0();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
LABEL_26:
  sub_1A2AE34F0();
  swift_bridgeObjectRetain();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t SFUserDefaultDescription.oneLineValueDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];
  _QWORD v7[2];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v7[0] = 10;
  v7[1] = 0xE100000000000000;
  v6[2] = v7;
  swift_bridgeObjectRetain_n();
  v3 = sub_1A296C9C0(0x7FFFFFFFFFFFFFFFLL, 1, sub_1A296E590, (uint64_t)v6, v1, v2);
  swift_bridgeObjectRelease();
  v7[0] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67AAD8);
  sub_1A296E5E4(&qword_1EE67AAE0, &qword_1EE67AAD8, MEMORY[0x1E0DEAF38]);
  sub_1A296E624();
  v4 = sub_1A2AE35BC();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1A2968D60(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A2968D8C + 4 * byte_1A2AF9388[a1]))(7955819, 0xE300000000000000);
}

unint64_t sub_1A2968D8C()
{
  return 0xD000000000000018;
}

unint64_t sub_1A2968DAC()
{
  return 0xD000000000000012;
}

uint64_t sub_1A2968DC8()
{
  return 0x65756C6156736168;
}

uint64_t sub_1A2968DEC()
{
  return 0x7574616546736168;
}

uint64_t sub_1A2968E10()
{
  return 0x656B636172746E75;
}

uint64_t sub_1A2968E2C()
{
  return 0x6C6F6F427369;
}

uint64_t sub_1A2968E40()
{
  return 0x65737365636F7270;
}

BOOL sub_1A2968E64(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1A2968E7C()
{
  return sub_1A2AE4018();
}

uint64_t sub_1A2968EA8()
{
  unsigned __int8 *v0;

  return sub_1A2968D60(*v0);
}

uint64_t sub_1A2968EB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2970EF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A2968ED4()
{
  return 0;
}

void sub_1A2968EE0(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_1A2968EEC()
{
  sub_1A296E68C();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2968F14()
{
  sub_1A296E68C();
  return sub_1A2AE4108();
}

uint64_t SFUserDefaultDescription.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67AAF0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = *(_QWORD *)(v1 + 16);
  v19 = *(_QWORD *)(v1 + 24);
  v20 = v7;
  LODWORD(v7) = *(unsigned __int8 *)(v1 + 32);
  v17 = *(unsigned __int8 *)(v1 + 33);
  v18 = v7;
  LODWORD(v7) = *(unsigned __int8 *)(v1 + 34);
  v15 = *(unsigned __int8 *)(v1 + 35);
  v16 = v7;
  v14 = *(unsigned __int8 *)(v1 + 36);
  v13 = *(_QWORD *)(v1 + 40);
  v8 = a1[3];
  v9 = a1;
  v10 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v9, v8);
  sub_1A296E68C();
  sub_1A2AE40E4();
  LOBYTE(v22) = 0;
  sub_1A2AE3DF0();
  if (!v2)
  {
    LOBYTE(v22) = 1;
    sub_1A2AE3DF0();
    LOBYTE(v22) = 2;
    sub_1A2AE3DFC();
    LOBYTE(v22) = 3;
    sub_1A2AE3DFC();
    LOBYTE(v22) = 4;
    sub_1A2AE3DFC();
    LOBYTE(v22) = 5;
    sub_1A2AE3DFC();
    LOBYTE(v22) = 6;
    sub_1A2AE3DFC();
    v22 = v13;
    v21 = 7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6764B8);
    sub_1A296E6F0(&qword_1EE675DD0, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1A2AE3E2C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
}

uint64_t SFUserDefaultDescription.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE67AB08);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A296E68C();
  sub_1A2AE40C0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  LOBYTE(v32) = 0;
  v9 = sub_1A2AE3D3C();
  v11 = v10;
  v30 = v9;
  LOBYTE(v32) = 1;
  swift_bridgeObjectRetain();
  v12 = sub_1A2AE3D3C();
  v14 = v13;
  v28 = v12;
  v29 = v11;
  LOBYTE(v32) = 2;
  swift_bridgeObjectRetain();
  v15 = v14;
  v27 = sub_1A2AE3D48();
  LOBYTE(v32) = 3;
  v26 = sub_1A2AE3D48();
  LOBYTE(v32) = 4;
  v17 = sub_1A2AE3D48();
  LOBYTE(v32) = 5;
  v25 = sub_1A2AE3D48();
  LOBYTE(v32) = 6;
  v24 = sub_1A2AE3D48();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6764B8);
  v31 = 7;
  sub_1A296E6F0(&qword_1EE675D90, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
  sub_1A2AE3D78();
  v26 &= 1u;
  v27 &= 1u;
  v23 = v17 & 1;
  LOBYTE(v17) = v25 & 1;
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19 = v24 & 1;
  v18(v8, v5);
  v20 = v32;
  v21 = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v30;
  *(_QWORD *)(a2 + 8) = v21;
  *(_QWORD *)(a2 + 16) = v28;
  *(_QWORD *)(a2 + 24) = v15;
  *(_BYTE *)(a2 + 32) = v27;
  *(_BYTE *)(a2 + 33) = v26;
  *(_BYTE *)(a2 + 34) = v23;
  *(_BYTE *)(a2 + 35) = v17;
  *(_BYTE *)(a2 + 36) = v19;
  *(_QWORD *)(a2 + 40) = v20;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A29695C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFUserDefaultDescription.init(from:)(a1, a2);
}

uint64_t sub_1A29695DC(_QWORD *a1)
{
  return SFUserDefaultDescription.encode(to:)(a1);
}

uint64_t sub_1A29695F4()
{
  return 1;
}

uint64_t sub_1A2969604()
{
  return 12383;
}

void sub_1A2969614(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1A2969620()
{
  sub_1A296E9F4();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2969648()
{
  sub_1A296E9F4();
  return sub_1A2AE4108();
}

uint64_t _s7Sharing17SFNWInterfaceTypeO9hashValueSivg_0()
{
  sub_1A2AE400C();
  sub_1A2AE4018();
  return sub_1A2AE4030();
}

uint64_t sub_1A29696B4()
{
  sub_1A2AE400C();
  sub_1A2AE4018();
  return sub_1A2AE4030();
}

uint64_t sub_1A29696F4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A296971C + 4 * byte_1A2AF9390[*v0]))(1819242338, 0xE400000000000000);
}

uint64_t sub_1A296971C()
{
  return 7630441;
}

uint64_t sub_1A296972C()
{
  return 0x3233746E6975;
}

uint64_t sub_1A2969740()
{
  return 0x656C62756F64;
}

uint64_t sub_1A2969754()
{
  return 0x676E69727473;
}

uint64_t sub_1A2969768()
{
  return 1702125924;
}

uint64_t sub_1A2969774()
{
  return 1684632949;
}

uint64_t sub_1A2969780()
{
  return 1701736302;
}

uint64_t sub_1A296978C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2971290(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A29697B0()
{
  sub_1A296E750();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29697D8()
{
  sub_1A296E750();
  return sub_1A2AE4108();
}

uint64_t sub_1A2969800()
{
  sub_1A296E860();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2969828()
{
  sub_1A296E860();
  return sub_1A2AE4108();
}

uint64_t sub_1A2969850()
{
  sub_1A296E928();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2969878()
{
  sub_1A296E928();
  return sub_1A2AE4108();
}

uint64_t sub_1A29698A0()
{
  return sub_1A2AE4018();
}

uint64_t sub_1A29698C4()
{
  sub_1A296E9B0();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29698EC()
{
  sub_1A296E9B0();
  return sub_1A2AE4108();
}

uint64_t sub_1A2969914()
{
  return 0;
}

uint64_t sub_1A2969920@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_1A296994C()
{
  sub_1A296E7D8();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2969974()
{
  sub_1A296E7D8();
  return sub_1A2AE4108();
}

uint64_t sub_1A296999C()
{
  sub_1A296E8E4();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29699C4()
{
  sub_1A296E8E4();
  return sub_1A2AE4108();
}

uint64_t sub_1A29699EC()
{
  sub_1A296E96C();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2969A14()
{
  sub_1A296E96C();
  return sub_1A2AE4108();
}

uint64_t sub_1A2969A3C()
{
  sub_1A2AE400C();
  sub_1A2AE4018();
  return sub_1A2AE4030();
}

uint64_t sub_1A2969A7C()
{
  sub_1A2AE400C();
  sub_1A2AE4018();
  return sub_1A2AE4030();
}

uint64_t sub_1A2969AB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1A2AE3EE0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1A2969B34()
{
  sub_1A296E81C();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2969B5C()
{
  sub_1A296E81C();
  return sub_1A2AE4108();
}

void SFUserDefaultsRepresentation.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _QWORD v18[2];
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;

  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67AB18);
  v36 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v35 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67AB20);
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  MEMORY[0x1E0C80A78](v3);
  v40 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_1A2AE3130();
  v39 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v37 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67AB28);
  v32 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v31 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_1A2AE30C4();
  v30 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v29 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67AB30);
  v27 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v26 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67AB38);
  v24 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v23 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67AB40);
  v21 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v20 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67AB48);
  v18[1] = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67AB50);
  v18[0] = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v12 = type metadata accessor for SFUserDefaultsRepresentation();
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67AB58);
  v44 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v16 = (char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A296E750();
  v45 = v16;
  sub_1A2AE40E4();
  sub_1A296E794(v47, (uint64_t)v14);
  v17 = (char *)sub_1A2969F5C + 4 * byte_1A2AF9398[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A2969F5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v2 - 96) = 0;
  sub_1A296E9F4();
  v4 = *(_QWORD *)(v2 - 128);
  v3 = *(_QWORD *)(v2 - 120);
  sub_1A2AE3DB4();
  sub_1A2AE3DFC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 352) + 8))(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 136) + 8))(v4, v3);
}

uint64_t SFUserDefaultsRepresentation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD v43[10];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;

  v69 = a2;
  v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67ABB8);
  v52 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68);
  v61 = (char *)v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67ABC0);
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  MEMORY[0x1E0C80A78](v4);
  v63 = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67ABC8);
  v53 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54);
  v62 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67ABD0);
  v51 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v67 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67ABD8);
  v48 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v60 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67ABE0);
  v46 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v59 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67ABE8);
  v45 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65);
  v58 = (char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67ABF0);
  v43[8] = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44);
  v57 = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67ABF8);
  v64 = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71);
  v13 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for SFUserDefaultsRepresentation();
  v14 = MEMORY[0x1E0C80A78](v70);
  v43[9] = (char *)v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v43[7] = (char *)v43 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v43[6] = (char *)v43 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)v43 - v21;
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)v43 - v24;
  v26 = MEMORY[0x1E0C80A78](v23);
  v28 = (char *)v43 - v27;
  v29 = MEMORY[0x1E0C80A78](v26);
  v31 = (char *)v43 - v30;
  MEMORY[0x1E0C80A78](v29);
  v33 = (char *)v43 - v32;
  v34 = a1[3];
  v72 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v34);
  sub_1A296E750();
  v66 = v13;
  v35 = v73;
  sub_1A2AE40C0();
  if (!v35)
  {
    v43[1] = v31;
    v43[2] = v28;
    v73 = v25;
    v43[3] = v22;
    v43[5] = 0;
    v43[4] = v33;
    v36 = v66;
    v37 = sub_1A2AE3D9C();
    if (*(_QWORD *)(v37 + 16) == 1)
    {
      v43[0] = v37;
      __asm { BR              X10 }
    }
    v38 = sub_1A2AE3B5C();
    swift_allocError();
    v40 = v39;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE67AC00);
    v41 = v71;
    *v40 = v70;
    sub_1A2AE3CF4();
    sub_1A2AE3B50();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v40, *MEMORY[0x1E0DEC450], v38);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v36, v41);
  }
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v72);
}

uint64_t sub_1A296B130@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFUserDefaultsRepresentation.init(from:)(a1, a2);
}

void sub_1A296B144(_QWORD *a1)
{
  SFUserDefaultsRepresentation.encode(to:)(a1);
}

uint64_t Optional<A>.userDefaultsRepresentation.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v9, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    type metadata accessor for SFUserDefaultsRepresentation();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
    (*(void (**)(uint64_t, uint64_t))(a2 + 8))(v3, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
}

uint64_t Optional<A>.init(userDefaultsString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v24 = a5;
  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A2AE39F4();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v23 - v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(a1, a2, a3, a4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v16, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    v19 = 1;
  }
  else
  {
    v20 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v20(v11, v16, a3);
    v20(v18, v11, a3);
    v19 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v18, v19, 1, a3);
  v21 = v24;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v24, v18, v12);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v21, 0, 1, v12);
}

uint64_t sub_1A296B404(uint64_t a1, uint64_t a2)
{
  return Optional<A>.userDefaultsRepresentation.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t sub_1A296B40C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Optional<A>.init(userDefaultsString:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), a5);
}

uint64_t String.userDefaultsRepresentation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for SFUserDefaultsRepresentation();
  swift_storeEnumTagMultiPayload();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A296B45C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = v1[1];
  *a1 = v3;
  a1[1] = v4;
  type metadata accessor for SFUserDefaultsRepresentation();
  swift_storeEnumTagMultiPayload();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A296B49C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Bool.userDefaultsRepresentation.getter@<X0>(char a1@<W0>, _BYTE *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for SFUserDefaultsRepresentation();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1A296B4DC@<X0>(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
  type metadata accessor for SFUserDefaultsRepresentation();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1A296B514@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _sSb7SharingE18userDefaultsStringSbSgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t Int.userDefaultsRepresentation.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for SFUserDefaultsRepresentation();
  return swift_storeEnumTagMultiPayload();
}

Swift::Int_optional __swiftcall Int.init(userDefaultsString:)(Swift::String userDefaultsString)
{
  Swift::Int v1;
  char v2;
  Swift::Bool v3;
  Swift::Int_optional result;

  v1 = sub_1A296EE28(userDefaultsString._countAndFlagsBits, (unint64_t)userDefaultsString._object);
  v3 = v2 & 1;
  result.value = v1;
  result.is_nil = v3;
  return result;
}

uint64_t sub_1A296B584@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  type metadata accessor for SFUserDefaultsRepresentation();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1A296B5BC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v5;

  result = sub_1A296EE28(a1, a2);
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = v5 & 1;
  return result;
}

uint64_t UInt32.userDefaultsRepresentation.getter@<X0>(int a1@<W0>, _DWORD *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for SFUserDefaultsRepresentation();
  return swift_storeEnumTagMultiPayload();
}

Swift::UInt32_optional __swiftcall UInt32.init(userDefaultsString:)(Swift::String userDefaultsString)
{
  uint64_t v1;

  v1 = sub_1A296EB50(userDefaultsString._countAndFlagsBits, (unint64_t)userDefaultsString._object);
  return (Swift::UInt32_optional)(v1 | ((unint64_t)(BYTE4(v1) & 1) << 32));
}

uint64_t sub_1A296B644@<X0>(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
  type metadata accessor for SFUserDefaultsRepresentation();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1A296B67C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = sub_1A296EB50(a1, a2);
  *(_DWORD *)a3 = result;
  *(_BYTE *)(a3 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t Double.userDefaultsRepresentation.getter@<X0>(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
  type metadata accessor for SFUserDefaultsRepresentation();
  return swift_storeEnumTagMultiPayload();
}

Swift::Double_optional __swiftcall Double.init(userDefaultsString:)(Swift::String userDefaultsString)
{
  _BYTE *v1;
  int v2;
  double v3;
  _BYTE *v4;
  Swift::Bool v5;
  _QWORD v6[3];
  _BOOL8 v7;
  Swift::Double_optional result;

  v7 = 0;
  if (((uint64_t)userDefaultsString._object & 0x1000000000000000) != 0
    || !((uint64_t)userDefaultsString._object & 0x2000000000000000 | userDefaultsString._countAndFlagsBits & 0x1000000000000000))
  {
    sub_1A2AE3B14();
    swift_bridgeObjectRelease();
    v2 = LOBYTE(v6[0]);
  }
  else if (((uint64_t)userDefaultsString._object & 0x2000000000000000) != 0)
  {
    v6[0] = userDefaultsString._countAndFlagsBits;
    v6[1] = (uint64_t)userDefaultsString._object & 0xFFFFFFFFFFFFFFLL;
    v2 = (LOBYTE(userDefaultsString._countAndFlagsBits) > 0x20u
       || ((0x100003E01uLL >> SLOBYTE(userDefaultsString._countAndFlagsBits)) & 1) == 0)
      && (v4 = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0
      && *v4 == 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((userDefaultsString._countAndFlagsBits & 0x1000000000000000) != 0)
      v1 = (_BYTE *)(((uint64_t)userDefaultsString._object & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v1 = (_BYTE *)sub_1A2AE3B8C();
    sub_1A296F0F4(v1, (BOOL *)v6);
    v2 = LOBYTE(v6[0]);
    swift_bridgeObjectRelease();
  }
  if (v2)
    v5 = v7;
  else
    v5 = 0;
  result.value = v3;
  result.is_nil = v5;
  return result;
}

uint64_t sub_1A296B80C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  type metadata accessor for SFUserDefaultsRepresentation();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1A296B844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  uint64_t v8;

  v8 = 0;
  v7[2] = &v8;
  v4 = sub_1A296C1D4((void (*)(char *__return_ptr, _QWORD *))sub_1A296F0F4, (uint64_t)v7, a1, a2);
  result = swift_bridgeObjectRelease();
  v6 = v8;
  if ((v4 & 1) == 0)
    v6 = 0;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 8) = (v4 & 1) == 0;
  return result;
}

uint64_t Date.userDefaultsRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A296BC34((uint64_t (*)(_QWORD))MEMORY[0x1E0CB0870], a1);
}

uint64_t Date.init(userDefaultsString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v6 = sub_1A2AE2FD4();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0670];
  MEMORY[0x1E0C80A78](v6);
  v8 = sub_1A2AE30C4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[4] = a1;
  v14[5] = a2;
  v12 = swift_bridgeObjectRetain();
  MEMORY[0x1A85864F0](v12);
  sub_1A296E8A4((unint64_t *)&unk_1EE67AC18, v7, MEMORY[0x1E0CB0668]);
  sub_1A2AE30D0();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a3, v11, v8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(a3, 0, 1, v8);
}

uint64_t sub_1A296BC18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1A296BD8C(a1, a2);
}

uint64_t UUID.userDefaultsRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A296BC34((uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998], a1);
}

uint64_t sub_1A296BC34@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v2, v4);
  type metadata accessor for SFUserDefaultsRepresentation();
  return swift_storeEnumTagMultiPayload();
}

uint64_t UUID.init(userDefaultsString:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6745C8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2AE30DC();
  swift_bridgeObjectRelease();
  v5 = sub_1A2AE3130();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1A296F108((uint64_t)v4, &qword_1EE6745C8);
    v7 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v4, v5);
    v7 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a1, v7, 1, v5);
}

uint64_t sub_1A296BD84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1A296BD8C(a1, a2);
}

uint64_t sub_1A296BD8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
  type metadata accessor for SFUserDefaultsRepresentation();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1A296BDD8@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6745C8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2AE30DC();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, a1) == 1)
  {
    sub_1A296F108((uint64_t)v6, &qword_1EE6745C8);
    v8 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a2, v6, a1);
    v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v8, 1, a1);
}

uint64_t RawRepresentable<>.userDefaultsRepresentation.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = (char *)&v9 - v6;
  sub_1A2AE35C8();
  (*(void (**)(uint64_t, uint64_t))(a3 + 8))(AssociatedTypeWitness, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
}

uint64_t RawRepresentable<>.init(userDefaultsString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a2;
  v35 = a6;
  v10 = sub_1A2AE39F4();
  v30 = *(_QWORD *)(v10 - 8);
  v31 = v10;
  MEMORY[0x1E0C80A78](v10);
  v33 = (char *)&v29 - v11;
  v32 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = sub_1A2AE39F4();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v29 - v16;
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x1E0C80A78](v15);
  v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v29 - v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 16))(a1, v34, AssociatedTypeWitness, a5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    v24 = *(_QWORD *)(a3 - 8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v17, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, AssociatedTypeWitness);
    v25 = v33;
    sub_1A2AE35D4();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, AssociatedTypeWitness);
    v24 = *(_QWORD *)(a3 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v25, 1, a3))
    {
      v27 = v35;
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35, v25, a3);
      v26 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v27, v26, 1, a3);
    }
    (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v31);
  }
  v26 = 1;
  v27 = v35;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v27, v26, 1, a3);
}

uint64_t sub_1A296C1D4(void (*a1)(char *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  char v7;
  char v9;
  _QWORD v10[2];
  char v11;

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    sub_1A2AE3B14();
    if (!v4)
      v7 = v11;
  }
  else if ((a4 & 0x2000000000000000) != 0)
  {
    v10[0] = a3;
    v10[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    a1(&v9, v10);
    if (!v4)
      v7 = v9;
  }
  else
  {
    if ((a3 & 0x1000000000000000) != 0)
      v6 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v6 = sub_1A2AE3B8C();
    a1((char *)v10, (_QWORD *)v6);
    if (!v4)
      v7 = v10[0];
  }
  return v7 & 1;
}

uint64_t sub_1A296C2B0(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD v7[2];

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
    return sub_1A2AE3B14();
  if ((a4 & 0x2000000000000000) != 0)
  {
    v7[0] = a3;
    v7[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v5 = v7;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v5 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v5 = (_QWORD *)sub_1A2AE3B8C();
  }
  return a1(v5);
}

void sub_1A296C36C()
{
  __asm { BR              X12 }
}

uint64_t sub_1A296C3AC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *v1 = 0x636972656E6567;
  v1[1] = a1;
  type metadata accessor for SFUserDefaultsRepresentation();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1A296C438@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.init(rawValue:)(&v3);
  *a1 = v3;
  return result;
}

void sub_1A296C46C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1A296C474@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1A296C484(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1A296C490(uint64_t a1, uint64_t a2)
{
  return sub_1A296C808(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

uint64_t sub_1A296C49C(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_1A2AE3424();
  *a2 = 0;
  return result;
}

uint64_t sub_1A296C510(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_1A2AE3430();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1A296C58C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1A2AE343C();
  v2 = sub_1A2AE340C();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1A296C5CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1A85895EC](&unk_1A2AFA298, a3);
  return sub_1A2AE316C();
}

void sub_1A296C618(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_QWORD *sub_1A296C624@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1A296C630@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1A2AE340C();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1A296C674@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1A2AE343C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A296C69C()
{
  sub_1A296E8A4(&qword_1EE67AF50, (uint64_t (*)(uint64_t))type metadata accessor for NSExceptionName, (uint64_t)&unk_1A2AFA154);
  sub_1A296E8A4((unint64_t *)&unk_1EE67AF58, (uint64_t (*)(uint64_t))type metadata accessor for NSExceptionName, (uint64_t)&unk_1A2AFA0F4);
  return sub_1A2AE3CB8();
}

uint64_t sub_1A296C720(uint64_t a1)
{
  MEMORY[0x1A85895EC](&unk_1A2AFA298, a1);
  return sub_1A2AE3184();
}

uint64_t sub_1A296C75C()
{
  MEMORY[0x1A85895EC](&unk_1A2AFA298);
  return sub_1A2AE3178();
}

uint64_t sub_1A296C7A4(uint64_t a1, uint64_t a2)
{
  sub_1A2AE400C();
  MEMORY[0x1A85895EC](&unk_1A2AFA298, a2);
  sub_1A2AE3178();
  return sub_1A2AE4030();
}

uint64_t sub_1A296C7FC(uint64_t a1, uint64_t a2)
{
  return sub_1A296C808(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t sub_1A296C808(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1A2AE343C();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1A296C844()
{
  sub_1A2AE343C();
  sub_1A2AE34C0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A296C884()
{
  uint64_t v0;

  sub_1A2AE343C();
  sub_1A2AE400C();
  sub_1A2AE34C0();
  v0 = sub_1A2AE4030();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1A296C8F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1A2AE343C();
  v2 = v1;
  if (v0 == sub_1A2AE343C() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1A2AE3EE0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1A296C97C(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1A296C98C(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_1A296C9C0(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  _QWORD v50[4];

  v50[3] = a4;
  if (a1 < 0)
    goto LABEL_42;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x1E0DEE9D8];
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v30 = 11;
    sub_1A296CE5C(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    v13 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  v42 = a1;
  v43 = v10;
  v48 = 4 * v12;
  v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = 15;
  v15 = 15;
  v16 = 15;
  while (1)
  {
    v50[0] = sub_1A2AE355C();
    v50[1] = v17;
    v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      break;
    v14 = sub_1A2AE34D8();
LABEL_9:
    if (v48 == v14 >> 14)
      goto LABEL_29;
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    v14 = sub_1A2AE34D8();
    *(_QWORD *)(v47 + 16) = v14;
    v15 = v14;
    v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14)
    goto LABEL_41;
  v20 = sub_1A2AE3574();
  v44 = v21;
  v45 = v20;
  v23 = v22;
  v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = sub_1A296D1E8(0, v13[2] + 1, 1, v13);
  v27 = v13[2];
  v26 = v13[3];
  if (v27 >= v26 >> 1)
    v13 = sub_1A296D1E8((_QWORD *)(v26 > 1), v27 + 1, 1, v13);
  v13[2] = v27 + 1;
  v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(_QWORD *)(v43 + 16) = v13;
  v29 = sub_1A2AE34D8();
  v14 = v29;
  *(_QWORD *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    v15 = v29;
    v16 = v29;
    goto LABEL_9;
  }
  v16 = v29;
  v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    v31 = sub_1A2AE3574();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_1A296D1E8(0, v13[2] + 1, 1, v13);
    v39 = v13[2];
    v38 = v13[3];
    if (v39 >= v38 >> 1)
      v13 = sub_1A296D1E8((_QWORD *)(v38 > 1), v39 + 1, 1, v13);
    v13[2] = v39 + 1;
    v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(_QWORD *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  sub_1A2AE3C4C();
  __break(1u);
LABEL_42:
  result = sub_1A2AE3C4C();
  __break(1u);
  return result;
}

uint64_t sub_1A296CE5C(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = sub_1A2AE3574();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = sub_1A296D1E8(0, v14[2] + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = sub_1A296D1E8((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  result = sub_1A2AE3C4C();
  __break(1u);
  return result;
}

_QWORD *sub_1A296CFB4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6763F0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1A2970C20(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1A296D0C0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE6763E0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4])
          memmove(v12, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1A2970D10(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1A296D1E8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67AF98);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1A2970E04(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A296D2F4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1A296D428(a1, a2, a3, a4, &qword_1EE67AF90, (uint64_t (*)(_QWORD))MEMORY[0x1E0CAFFF8]);
}

_QWORD *sub_1A296D308(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_1EE6751A0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1A2971570(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A296D414(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1A296D428(a1, a2, a3, a4, &qword_1EE67AF88, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Item);
}

uint64_t sub_1A296D428(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_1A2AE3C4C();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1A29717BC(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *sub_1A296D634(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67AF80);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1A29718D4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1A296D740(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67AF78);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1A29716C8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1A296D864(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE67AF68);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1A29719C4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A296D970(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1A296D990(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  sub_1A296DA00(v6, v7, a3);
  v8 = *a1 + 8;
  sub_1A2AE3A60();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_1A296DA00(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1A296DAD0(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1A296E4B4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1A296E4B4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v12);
  return v7;
}

uint64_t sub_1A296DAD0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1A2AE3A6C();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1A296DC88(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1A2AE3B8C();
  if (!v8)
  {
    sub_1A2AE3C4C();
    __break(1u);
LABEL_17:
    result = sub_1A2AE3C88();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1A296DC88(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1A296DD1C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1A296DE90(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1A296DE90(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1A296DD1C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1A2AD1C98(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1A2AE3B2C();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1A2AE3C4C();
      __break(1u);
LABEL_10:
      v2 = sub_1A2AE34FC();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1A2AE3C88();
    __break(1u);
LABEL_14:
    result = sub_1A2AE3C4C();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1A296DE90(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE676748);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1A2AE3C88();
  __break(1u);
  return result;
}

_BYTE **sub_1A296DFDC(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

_QWORD *sub_1A296DFEC(void *a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, __int16 a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  id v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52[16];
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;

  v13 = v12;
  v45 = a5;
  v46 = a6;
  v44 = a4;
  v51 = a12;
  v49 = a8;
  v50 = a11;
  v47 = a9;
  v48 = a10;
  v18 = *v12;
  v19 = *(_QWORD *)(v18 + 80);
  v20 = sub_1A2AE39F4();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v42 - v22;
  v43 = a1;
  v55 = a1;
  v24 = *(_QWORD *)(v18 + 88);
  v53 = v19;
  v54 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67AFE0);
  v26 = type metadata accessor for SFUserDefault.SendableUserDefaultsBox(0, v19, v24, v25);
  sub_1A29ED710((void (*)(char *, char *))sub_1A2971F4C, (uint64_t)v52, MEMORY[0x1E0DEDCE8], v26, v27, (uint64_t)&v56);
  v28 = v56;
  v13[2] = a2;
  v13[3] = a3;
  LOBYTE(a1) = v44;
  *((_BYTE *)v13 + 32) = v44;
  v29 = v45;
  v13[7] = v28;
  v13[8] = v29;
  v13[9] = v46;
  *((_BYTE *)v13 + 80) = a7;
  *((_BYTE *)v13 + 81) = HIBYTE(a7) & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))((char *)v13 + *(_QWORD *)(*v13 + 128), v49, v19);
  v30 = (_QWORD *)((char *)v13 + *(_QWORD *)(*v13 + 144));
  v31 = v48;
  *v30 = v47;
  v30[1] = v31;
  sub_1A2AE325C();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v50, v20);
  *(_QWORD *)((char *)v13 + *(_QWORD *)(*v13 + 136)) = sub_1A2AE3268();
  v32 = *(_QWORD *)(*v13 + 152);
  v33 = v51;
  *(_QWORD *)((char *)v13 + v32) = v51;
  if ((a1 & 1) == 0)
  {
    if (a2)
      goto LABEL_11;
    __break(1u);
    goto LABEL_13;
  }
  v32 = HIDWORD(a2);
  if (HIDWORD(a2))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  LODWORD(v32) = a2 >> 11;
  if (a2 >> 11 == 27)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  LODWORD(v32) = WORD1(a2);
  if (WORD1(a2) > 0x10u)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    v33 = (a2 & 0x3F) << 8;
    if (a2 < 0x800)
    {
      v39 = v33 | (a2 >> 6);
      v40 = 33217;
LABEL_17:
      v34 = v39 + v40;
      goto LABEL_10;
    }
LABEL_20:
    v41 = (v33 | (a2 >> 6) & 0x3F) << 8;
    if (!(_DWORD)v32)
    {
      v34 = (v41 | (a2 >> 12)) + 8487393;
      goto LABEL_10;
    }
    v39 = ((v41 | (a2 >> 12) & 0x3F) << 8) | (a2 >> 18);
    v40 = -2122219023;
    goto LABEL_17;
  }
  if ((a2 & 0xFFFFFF80) != 0)
    goto LABEL_15;
  if (a2 > 0xFF)
  {
    __break(1u);
    goto LABEL_19;
  }
  v34 = (a2 + 1);
LABEL_10:
  v56 = (v34 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v34) >> 3)) & 7)));
LABEL_11:
  v35 = sub_1A2AE34A8();
  v37 = v36;

  v13[5] = v35;
  v13[6] = v37;
  return v13;
}

_QWORD *sub_1A296E2DC(void *a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, __int16 a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  swift_allocObject();
  return sub_1A296DFEC(a1, a2, a3, a4, a5, a6, a7 & 0x1FF, a8, a9, a10, a11, a12);
}

uint64_t sub_1A296E38C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = sub_1A2AE39F4();
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t))(v3 + 16))((char *)&v6 - v4, a1);
  return sub_1A2AE3250();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1A85895D4]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1A296E450(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB8A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SFUserDefault.FFKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SFUserDefault.FFKey);
}

_OWORD *sub_1A296E4A4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1A296E4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t type metadata accessor for SFUserDefaultsRepresentation()
{
  uint64_t result;

  result = qword_1EE67AC28;
  if (!qword_1EE67AC28)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A296E544(uint64_t a1)
{
  uint64_t *v1;

  return sub_1A2967060(a1, v1);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1A85895E0](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1A296E590(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return sub_1A2AE3EE0() & 1;
}

uint64_t sub_1A296E5E4(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1A85895EC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A296E624()
{
  unint64_t result;

  result = qword_1EE67AAE8;
  if (!qword_1EE67AAE8)
  {
    result = MEMORY[0x1A85895EC](MEMORY[0x1E0DEBB28], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&qword_1EE67AAE8);
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_1A296E68C()
{
  unint64_t result;

  result = qword_1EE67AAF8;
  if (!qword_1EE67AAF8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFA594, &type metadata for SFUserDefaultDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AAF8);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1A296E6F0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE6764B8);
    v8 = a2;
    result = MEMORY[0x1A85895EC](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A296E750()
{
  unint64_t result;

  result = qword_1EE67AB60;
  if (!qword_1EE67AB60)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFA544, &type metadata for SFUserDefaultsRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AB60);
  }
  return result;
}

uint64_t sub_1A296E794(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SFUserDefaultsRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1A296E7D8()
{
  unint64_t result;

  result = qword_1EE67AB68;
  if (!qword_1EE67AB68)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFA4F4, &type metadata for SFUserDefaultsRepresentation.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AB68);
  }
  return result;
}

unint64_t sub_1A296E81C()
{
  unint64_t result;

  result = qword_1EE67AB70;
  if (!qword_1EE67AB70)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFA4A4, &type metadata for SFUserDefaultsRepresentation.UuidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AB70);
  }
  return result;
}

unint64_t sub_1A296E860()
{
  unint64_t result;

  result = qword_1EE67AB80;
  if (!qword_1EE67AB80)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFA454, &type metadata for SFUserDefaultsRepresentation.DateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AB80);
  }
  return result;
}

uint64_t sub_1A296E8A4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1A85895EC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A296E8E4()
{
  unint64_t result;

  result = qword_1EE67AB90;
  if (!qword_1EE67AB90)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFA404, &type metadata for SFUserDefaultsRepresentation.StringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AB90);
  }
  return result;
}

unint64_t sub_1A296E928()
{
  unint64_t result;

  result = qword_1EE67AB98;
  if (!qword_1EE67AB98)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFA3B4, &type metadata for SFUserDefaultsRepresentation.DoubleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AB98);
  }
  return result;
}

unint64_t sub_1A296E96C()
{
  unint64_t result;

  result = qword_1EE67ABA0;
  if (!qword_1EE67ABA0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFA364, &type metadata for SFUserDefaultsRepresentation.Uint32CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67ABA0);
  }
  return result;
}

unint64_t sub_1A296E9B0()
{
  unint64_t result;

  result = qword_1EE67ABA8;
  if (!qword_1EE67ABA8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFA314, &type metadata for SFUserDefaultsRepresentation.IntCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67ABA8);
  }
  return result;
}

unint64_t sub_1A296E9F4()
{
  unint64_t result;

  result = qword_1EE67ABB0;
  if (!qword_1EE67ABB0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFA2C4, &type metadata for SFUserDefaultsRepresentation.BoolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67ABB0);
  }
  return result;
}

uint64_t sub_1A296EA38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SFUserDefaultsRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _sSb7SharingE18userDefaultsStringSbSgSS_tcfC_0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = sub_1A2AE3478();
  v2 = sub_1A2A9C0A4(v0, v1, qword_1E4824780);
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    return v2 & 1;
  }
  v3 = sub_1A2AE3478();
  v5 = v4;
  swift_bridgeObjectRelease();
  LOBYTE(v3) = sub_1A2A9C0A4(v3, v5, qword_1E4824710);
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  if ((v3 & 1) != 0)
    return v2 & 1;
  return 2;
}

uint64_t sub_1A296EB50(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  char v9;
  unsigned __int8 v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD v29[2];
  char v30;

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease();
    v18 = 0;
    LOBYTE(v17) = 1;
    return v18 | ((unint64_t)v17 << 32);
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v8 = sub_1A2AD1F4C(result, a2, 10);
    swift_bridgeObjectRelease();
    v17 = HIDWORD(v8) & 1;
LABEL_38:
    v18 = v8;
    if ((_DWORD)v17)
      v18 = 0;
    return v18 | ((unint64_t)v17 << 32);
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v6 = (unsigned __int8 *)sub_1A2AE3B8C();
    v7 = sub_1A2AD1D88(v6, v4, 10);
    LODWORD(v8) = (_DWORD)v7;
    v30 = BYTE4(v7) & 1;
    v9 = BYTE4(v7) & 1;
    goto LABEL_37;
  }
  v29[0] = result;
  v29[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v3)
    {
      if (v3 != 1)
      {
        LODWORD(v8) = (BYTE1(result) - 48);
        if (v8 <= 9)
        {
          if (v3 == 2)
            goto LABEL_36;
          if ((BYTE2(result) - 48) <= 9u)
          {
            LODWORD(v8) = 10 * v8 + (BYTE2(result) - 48);
            v13 = v3 - 3;
            if (v13)
            {
              v14 = (unsigned __int8 *)v29 + 3;
              while (1)
              {
                v15 = *v14 - 48;
                if (v15 > 9)
                  goto LABEL_33;
                v16 = 10 * v8;
                if ((v16 & 0xFFFFFFFF00000000) != 0)
                  goto LABEL_33;
                LODWORD(v8) = v16 + v15;
                if (__CFADD__((_DWORD)v16, v15))
                  goto LABEL_33;
                v9 = 0;
                ++v14;
                if (!--v13)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
        }
      }
      goto LABEL_33;
    }
  }
  else
  {
    if (result != 45)
    {
      if (v3)
      {
        LODWORD(v8) = (result - 48);
        if (v8 <= 9)
        {
          if (v3 == 1)
            goto LABEL_36;
          if ((BYTE1(result) - 48) <= 9u)
          {
            LODWORD(v8) = 10 * v8 + (BYTE1(result) - 48);
            v19 = v3 - 2;
            if (v19)
            {
              v20 = (unsigned __int8 *)v29 + 2;
              while (1)
              {
                v21 = *v20 - 48;
                if (v21 > 9)
                  goto LABEL_33;
                v22 = 10 * v8;
                if ((v22 & 0xFFFFFFFF00000000) != 0)
                  goto LABEL_33;
                LODWORD(v8) = v22 + v21;
                if (__CFADD__((_DWORD)v22, v21))
                  goto LABEL_33;
                v9 = 0;
                ++v20;
                if (!--v19)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
        }
      }
LABEL_33:
      LODWORD(v8) = 0;
LABEL_34:
      v9 = 1;
      goto LABEL_37;
    }
    if (v3)
    {
      if (v3 != 1)
      {
        v10 = BYTE1(result) - 48;
        if ((BYTE1(result) - 48) <= 9u)
        {
          LODWORD(v8) = 0;
          v11 = v10 == 0;
          v12 = -v10;
          if (!v11)
            goto LABEL_34;
          if (v3 == 2)
          {
            v9 = 0;
            LODWORD(v8) = v12;
LABEL_37:
            swift_bridgeObjectRelease();
            LODWORD(v17) = v9 & 1;
            goto LABEL_38;
          }
          v23 = BYTE2(result) - 48;
          if ((BYTE2(result) - 48) <= 9u)
          {
            v24 = 10 * v12;
            if ((v24 & 0xFFFFFFFF00000000) == 0)
            {
              LODWORD(v8) = v24 - v23;
              if (v24 >= v23)
              {
                v25 = v3 - 3;
                if (v25)
                {
                  v26 = (unsigned __int8 *)v29 + 3;
                  while (1)
                  {
                    v27 = *v26 - 48;
                    if (v27 > 9)
                      goto LABEL_33;
                    v28 = 10 * v8;
                    if ((v28 & 0xFFFFFFFF00000000) != 0)
                      goto LABEL_33;
                    LODWORD(v8) = v28 - v27;
                    if (v28 < v27)
                      goto LABEL_33;
                    v9 = 0;
                    ++v26;
                    if (!--v25)
                      goto LABEL_37;
                  }
                }
LABEL_36:
                v9 = 0;
                goto LABEL_37;
              }
            }
          }
        }
      }
      goto LABEL_33;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A296EE28(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)sub_1A2AE3B8C();
      v7 = (uint64_t)sub_1A2AD1D74(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_44;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3)
        goto LABEL_57;
      if (v3 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_31;
      v7 = (BYTE1(result) - 48);
      if (v3 != 2)
      {
        if ((BYTE2(result) - 48) > 9u)
          goto LABEL_31;
        v7 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
        v10 = v3 - 3;
        if (v10)
        {
          v11 = (unsigned __int8 *)v23 + 3;
          while (1)
          {
            v12 = *v11 - 48;
            if (v12 > 9)
              goto LABEL_31;
            v13 = 10 * v7;
            if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
              goto LABEL_31;
            v7 = v13 + v12;
            if (__OFADD__(v13, v12))
              goto LABEL_31;
            v9 = 0;
            ++v11;
            if (!--v10)
              goto LABEL_44;
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            if (v3 == 2)
            {
              v9 = 0;
              v7 = -(uint64_t)(BYTE1(result) - 48);
              goto LABEL_44;
            }
            if ((BYTE2(result) - 48) <= 9u)
            {
              v7 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
              v18 = v3 - 3;
              if (!v18)
                goto LABEL_43;
              v19 = (unsigned __int8 *)v23 + 3;
              while (1)
              {
                v20 = *v19 - 48;
                if (v20 > 9)
                  break;
                v21 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  break;
                v7 = v21 - v20;
                if (__OFSUB__(v21, v20))
                  break;
                v9 = 0;
                ++v19;
                if (!--v18)
                  goto LABEL_44;
              }
            }
          }
LABEL_31:
          v7 = 0;
          v9 = 1;
          goto LABEL_44;
        }
        __break(1u);
LABEL_57:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u)
        goto LABEL_31;
      v7 = (result - 48);
      if (v3 != 1)
      {
        if ((BYTE1(result) - 48) > 9u)
          goto LABEL_31;
        v7 = 10 * (result - 48) + (BYTE1(result) - 48);
        v14 = v3 - 2;
        if (v14)
        {
          v15 = (unsigned __int8 *)v23 + 2;
          while (1)
          {
            v16 = *v15 - 48;
            if (v16 > 9)
              goto LABEL_31;
            v17 = 10 * v7;
            if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
              goto LABEL_31;
            v7 = v17 + v16;
            if (__OFADD__(v17, v16))
              goto LABEL_31;
            v9 = 0;
            ++v15;
            if (!--v14)
              goto LABEL_44;
          }
        }
      }
    }
LABEL_43:
    v9 = 0;
    goto LABEL_44;
  }
  v7 = (uint64_t)sub_1A2AD1D9C(result, a2, 10);
  v9 = v22;
LABEL_44:
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
    return 0;
  else
    return v7;
}

_BYTE *sub_1A296F0F4@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1A297165C(a1, a2);
}

uint64_t sub_1A296F108(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1A296F144()
{
  return 16;
}

__n128 sub_1A296F150(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A296F15C()
{
  return 16;
}

__n128 sub_1A296F168(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A296F178()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for SFUserDefault(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SFUserDefault);
}

uint64_t method lookup function for SFUserDefault()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SFUserDefault.__allocating_init(userDefaults:key:featureFlagsDomain:defaultValue:prefsChangedLibNotifyName:override:processesToKill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 a7)
{
  uint64_t v7;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v7 + 160))(a1, a2, a3, a4, a5, a6, a7 & 0x1FF);
}

uint64_t destroy for SFAnyUserDefault()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for SFAnyUserDefault(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v4 = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for SFAnyUserDefault(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[4];
  a1[3] = a2[3];
  a1[4] = v4;
  swift_retain();
  swift_release();
  v5 = a2[6];
  a1[5] = a2[5];
  a1[6] = v5;
  swift_retain();
  swift_release();
  v6 = a2[8];
  a1[7] = a2[7];
  a1[8] = v6;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SFAnyUserDefault(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SFAnyUserDefault(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SFAnyUserDefault(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SFAnyUserDefault()
{
  return &type metadata for SFAnyUserDefault;
}

uint64_t type metadata accessor for SFUserDefaultsRegistry()
{
  return objc_opt_self();
}

uint64_t method lookup function for SFUserDefaultsRegistry()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SFUserDefaultDescriptionProviding.userDefaultDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t destroy for SFUserDefaultDescription()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SFUserDefaultDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SFUserDefaultDescription(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SFUserDefaultDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SFUserDefaultDescription(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SFUserDefaultDescription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SFUserDefaultDescription()
{
  return &type metadata for SFUserDefaultDescription;
}

uint64_t dispatch thunk of SFUserDefaultstRepresentable.userDefaultsRepresentation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SFUserDefaultstRepresentable.init(userDefaultsString:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t *initializeBufferWithCopyOfBuffer for SFUserDefaultsRepresentation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 6:
        v10 = sub_1A2AE3130();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
        break;
      case 5:
        v11 = sub_1A2AE30C4();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        swift_storeEnumTagMultiPayload();
        break;
      case 4:
        v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for SFUserDefaultsRepresentation(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 6:
      v3 = sub_1A2AE3130();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    case 5:
      v3 = sub_1A2AE30C4();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    case 4:
      return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for SFUserDefaultsRepresentation(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 6:
      v8 = sub_1A2AE3130();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
      break;
    case 5:
      v9 = sub_1A2AE30C4();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
      break;
    case 4:
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for SFUserDefaultsRepresentation(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_1A296FB64((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 6:
        v7 = sub_1A2AE3130();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      case 5:
        v8 = sub_1A2AE30C4();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        swift_storeEnumTagMultiPayload();
        break;
      case 4:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1A296FB64(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SFUserDefaultsRepresentation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for SFUserDefaultsRepresentation(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 6)
  {
    v8 = sub_1A2AE3130();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 5)
  {
    v7 = sub_1A2AE30C4();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for SFUserDefaultsRepresentation(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_1A296FB64((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 6)
    {
      v8 = sub_1A2AE3130();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 5)
    {
      v7 = sub_1A2AE30C4();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SFUserDefaultsRepresentation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for SFUserDefaultsRepresentation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_1A296FD60()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1A296FD70()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1A2AE30C4();
  if (v1 <= 0x3F)
  {
    result = sub_1A2AE3130();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1A296FE34(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1A296FE54(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for os_activity_scope_state_s(uint64_t a1)
{
  sub_1A2971FE0(a1, &qword_1EE67AD00);
}

void type metadata accessor for SFAirDropMapsLinkType(uint64_t a1)
{
  sub_1A2971FE0(a1, &qword_1EE67AD08);
}

void type metadata accessor for SFAirDropMusicAppLinkType(uint64_t a1)
{
  sub_1A2971FE0(a1, &qword_1EE67AD10);
}

void type metadata accessor for SFAirDropiTunesStoreLinkType(uint64_t a1)
{
  sub_1A2971FE0(a1, qword_1EE67AD18);
}

uint64_t sub_1A296FECC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for SFUserDefault.SendableUserDefaultsBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SFUserDefault.SendableUserDefaultsBox);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1A2971FE0(a1, &qword_1EE6763B0);
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A296FF00(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1A296FF20(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_1A2971FE0(a1, &qword_1EE67ADA8);
}

void type metadata accessor for NSExceptionName(uint64_t a1)
{
  sub_1A2971FE0(a1, qword_1EE67ADB0);
}

void type metadata accessor for CGImage(uint64_t a1)
{
  sub_1A2971FE0(a1, &qword_1EE675CF8);
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for SFUserDefaultsRepresentation.CodingKeys()
{
  return &type metadata for SFUserDefaultsRepresentation.CodingKeys;
}

ValueMetadata *type metadata accessor for SFUserDefaultsRepresentation.BoolCodingKeys()
{
  return &type metadata for SFUserDefaultsRepresentation.BoolCodingKeys;
}

ValueMetadata *type metadata accessor for SFUserDefaultsRepresentation.IntCodingKeys()
{
  return &type metadata for SFUserDefaultsRepresentation.IntCodingKeys;
}

ValueMetadata *type metadata accessor for SFUserDefaultsRepresentation.Uint32CodingKeys()
{
  return &type metadata for SFUserDefaultsRepresentation.Uint32CodingKeys;
}

ValueMetadata *type metadata accessor for SFUserDefaultsRepresentation.DoubleCodingKeys()
{
  return &type metadata for SFUserDefaultsRepresentation.DoubleCodingKeys;
}

ValueMetadata *type metadata accessor for SFUserDefaultsRepresentation.StringCodingKeys()
{
  return &type metadata for SFUserDefaultsRepresentation.StringCodingKeys;
}

ValueMetadata *type metadata accessor for SFUserDefaultsRepresentation.DateCodingKeys()
{
  return &type metadata for SFUserDefaultsRepresentation.DateCodingKeys;
}

uint64_t getEnumTagSinglePayload for SFTempPairingSenderStateUpdate.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s7Sharing28SFUserDefaultsRepresentationO14BoolCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A29700A8 + 4 * byte_1A2AF93B6[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A29700C8 + 4 * byte_1A2AF93BB[v4]))();
}

_BYTE *sub_1A29700A8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A29700C8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A29700D0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A29700D8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A29700E0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A29700E8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SFUserDefaultsRepresentation.UuidCodingKeys()
{
  return &type metadata for SFUserDefaultsRepresentation.UuidCodingKeys;
}

ValueMetadata *type metadata accessor for SFUserDefaultsRepresentation.NoneCodingKeys()
{
  return &type metadata for SFUserDefaultsRepresentation.NoneCodingKeys;
}

uint64_t getEnumTagSinglePayload for SFAirDropUserDefaults.Process(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s7Sharing28SFUserDefaultsRepresentationO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1A29701F0 + 4 * byte_1A2AF93C5[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1A2970224 + 4 * byte_1A2AF93C0[v4]))();
}

uint64_t sub_1A2970224(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A297022C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A2970234);
  return result;
}

uint64_t sub_1A2970240(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A2970248);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1A297024C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2970254(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2970260(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1A2970268(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SFUserDefaultDescription.CodingKeys()
{
  return &type metadata for SFUserDefaultDescription.CodingKeys;
}

uint64_t _s11ContactInfoVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1A29702C4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1A29702E4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 41) = v3;
  return result;
}

unint64_t sub_1A2970320()
{
  unint64_t result;

  result = qword_1EE67AE40;
  if (!qword_1EE67AE40)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF99C8, &type metadata for SFUserDefaultDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AE40);
  }
  return result;
}

unint64_t sub_1A2970368()
{
  unint64_t result;

  result = qword_1EE67AE48;
  if (!qword_1EE67AE48)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9AD0, &type metadata for SFUserDefaultsRepresentation.UuidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AE48);
  }
  return result;
}

unint64_t sub_1A29703B0()
{
  unint64_t result;

  result = qword_1EE67AE50;
  if (!qword_1EE67AE50)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9B88, &type metadata for SFUserDefaultsRepresentation.DateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AE50);
  }
  return result;
}

unint64_t sub_1A29703F8()
{
  unint64_t result;

  result = qword_1EE67AE58;
  if (!qword_1EE67AE58)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9C40, &type metadata for SFUserDefaultsRepresentation.StringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AE58);
  }
  return result;
}

unint64_t sub_1A2970440()
{
  unint64_t result;

  result = qword_1EE67AE60;
  if (!qword_1EE67AE60)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9CF8, &type metadata for SFUserDefaultsRepresentation.DoubleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AE60);
  }
  return result;
}

unint64_t sub_1A2970488()
{
  unint64_t result;

  result = qword_1EE67AE68;
  if (!qword_1EE67AE68)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9DB0, &type metadata for SFUserDefaultsRepresentation.Uint32CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AE68);
  }
  return result;
}

unint64_t sub_1A29704D0()
{
  unint64_t result;

  result = qword_1EE67AE70;
  if (!qword_1EE67AE70)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9E68, &type metadata for SFUserDefaultsRepresentation.IntCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AE70);
  }
  return result;
}

unint64_t sub_1A2970518()
{
  unint64_t result;

  result = qword_1EE67AE78;
  if (!qword_1EE67AE78)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9F20, &type metadata for SFUserDefaultsRepresentation.BoolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AE78);
  }
  return result;
}

unint64_t sub_1A2970560()
{
  unint64_t result;

  result = qword_1EE67AE80;
  if (!qword_1EE67AE80)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9FD8, &type metadata for SFUserDefaultsRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AE80);
  }
  return result;
}

uint64_t sub_1A29705A4()
{
  return sub_1A296E8A4((unint64_t *)&unk_1EE675CE8, (uint64_t (*)(uint64_t))type metadata accessor for CGImage, (uint64_t)&unk_1A2AFA010);
}

uint64_t sub_1A29705D0()
{
  return sub_1A296E8A4(&qword_1EE67AE90, (uint64_t (*)(uint64_t))type metadata accessor for NSExceptionName, (uint64_t)&unk_1A2AFA0B8);
}

uint64_t sub_1A29705FC()
{
  return sub_1A296E8A4(&qword_1EE67AE98, (uint64_t (*)(uint64_t))type metadata accessor for NSExceptionName, (uint64_t)&unk_1A2AFA08C);
}

uint64_t sub_1A2970628()
{
  return sub_1A296E8A4((unint64_t *)&unk_1EE67AEA0, (uint64_t (*)(uint64_t))type metadata accessor for NSExceptionName, (uint64_t)&unk_1A2AFA128);
}

uint64_t sub_1A2970654()
{
  return sub_1A296E8A4((unint64_t *)&unk_1EE675CD8, (uint64_t (*)(uint64_t))type metadata accessor for CGImage, (uint64_t)&unk_1A2AFA03C);
}

unint64_t sub_1A2970684()
{
  unint64_t result;

  result = qword_1EE67AEB0;
  if (!qword_1EE67AEB0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9E90, &type metadata for SFUserDefaultsRepresentation.BoolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AEB0);
  }
  return result;
}

unint64_t sub_1A29706CC()
{
  unint64_t result;

  result = qword_1EE67AEB8;
  if (!qword_1EE67AEB8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9EB8, &type metadata for SFUserDefaultsRepresentation.BoolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AEB8);
  }
  return result;
}

unint64_t sub_1A2970714()
{
  unint64_t result;

  result = qword_1EE67AEC0;
  if (!qword_1EE67AEC0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9DD8, &type metadata for SFUserDefaultsRepresentation.IntCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AEC0);
  }
  return result;
}

unint64_t sub_1A297075C()
{
  unint64_t result;

  result = qword_1EE67AEC8;
  if (!qword_1EE67AEC8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9E00, &type metadata for SFUserDefaultsRepresentation.IntCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AEC8);
  }
  return result;
}

unint64_t sub_1A29707A4()
{
  unint64_t result;

  result = qword_1EE67AED0;
  if (!qword_1EE67AED0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9D20, &type metadata for SFUserDefaultsRepresentation.Uint32CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AED0);
  }
  return result;
}

unint64_t sub_1A29707EC()
{
  unint64_t result;

  result = qword_1EE67AED8;
  if (!qword_1EE67AED8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9D48, &type metadata for SFUserDefaultsRepresentation.Uint32CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AED8);
  }
  return result;
}

unint64_t sub_1A2970834()
{
  unint64_t result;

  result = qword_1EE67AEE0;
  if (!qword_1EE67AEE0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9C68, &type metadata for SFUserDefaultsRepresentation.DoubleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AEE0);
  }
  return result;
}

unint64_t sub_1A297087C()
{
  unint64_t result;

  result = qword_1EE67AEE8;
  if (!qword_1EE67AEE8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9C90, &type metadata for SFUserDefaultsRepresentation.DoubleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AEE8);
  }
  return result;
}

unint64_t sub_1A29708C4()
{
  unint64_t result;

  result = qword_1EE67AEF0;
  if (!qword_1EE67AEF0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9BB0, &type metadata for SFUserDefaultsRepresentation.StringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AEF0);
  }
  return result;
}

unint64_t sub_1A297090C()
{
  unint64_t result;

  result = qword_1EE67AEF8;
  if (!qword_1EE67AEF8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9BD8, &type metadata for SFUserDefaultsRepresentation.StringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AEF8);
  }
  return result;
}

unint64_t sub_1A2970954()
{
  unint64_t result;

  result = qword_1EE67AF00;
  if (!qword_1EE67AF00)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9AF8, &type metadata for SFUserDefaultsRepresentation.DateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AF00);
  }
  return result;
}

unint64_t sub_1A297099C()
{
  unint64_t result;

  result = qword_1EE67AF08;
  if (!qword_1EE67AF08)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9B20, &type metadata for SFUserDefaultsRepresentation.DateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AF08);
  }
  return result;
}

unint64_t sub_1A29709E4()
{
  unint64_t result;

  result = qword_1EE67AF10;
  if (!qword_1EE67AF10)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9A40, &type metadata for SFUserDefaultsRepresentation.UuidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AF10);
  }
  return result;
}

unint64_t sub_1A2970A2C()
{
  unint64_t result;

  result = qword_1EE67AF18;
  if (!qword_1EE67AF18)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9A68, &type metadata for SFUserDefaultsRepresentation.UuidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AF18);
  }
  return result;
}

unint64_t sub_1A2970A74()
{
  unint64_t result;

  result = qword_1EE67AF20;
  if (!qword_1EE67AF20)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF99F0, &type metadata for SFUserDefaultsRepresentation.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AF20);
  }
  return result;
}

unint64_t sub_1A2970ABC()
{
  unint64_t result;

  result = qword_1EE67AF28;
  if (!qword_1EE67AF28)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9A18, &type metadata for SFUserDefaultsRepresentation.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AF28);
  }
  return result;
}

unint64_t sub_1A2970B04()
{
  unint64_t result;

  result = qword_1EE67AF30;
  if (!qword_1EE67AF30)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9F48, &type metadata for SFUserDefaultsRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AF30);
  }
  return result;
}

unint64_t sub_1A2970B4C()
{
  unint64_t result;

  result = qword_1EE67AF38;
  if (!qword_1EE67AF38)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9F70, &type metadata for SFUserDefaultsRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AF38);
  }
  return result;
}

unint64_t sub_1A2970B94()
{
  unint64_t result;

  result = qword_1EE67AF40;
  if (!qword_1EE67AF40)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9938, &type metadata for SFUserDefaultDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AF40);
  }
  return result;
}

unint64_t sub_1A2970BDC()
{
  unint64_t result;

  result = qword_1EE67AF48;
  if (!qword_1EE67AF48)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AF9960, &type metadata for SFUserDefaultDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67AF48);
  }
  return result;
}

uint64_t sub_1A2970C20(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1A2AE3C88();
  __break(1u);
  return result;
}

uint64_t sub_1A2970D10(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 72 * a1 + 32;
    v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1A2AE3C88();
  __break(1u);
  return result;
}

uint64_t sub_1A2970E04(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1A2AE3C88();
  __break(1u);
  return result;
}

uint64_t sub_1A2970EF4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7955819 && a2 == 0xE300000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001A2B44750 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001A2B44770 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65756C6156736168 && a2 == 0xEE006B7369446E4FLL || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7574616546736168 && a2 == 0xEE0067616C466572 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656B636172746E75 && a2 == 0xE900000000000064 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6C6F6F427369 && a2 == 0xE600000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x65737365636F7270 && a2 == 0xEF6C6C694B6F5473)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_1A2971290(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1819242338 && a2 == 0xE400000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7630441 && a2 == 0xE300000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x3233746E6975 && a2 == 0xE600000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C62756F64 && a2 == 0xE600000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x676E69727473 && a2 == 0xE600000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 1684632949 && a2 == 0xE400000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 1701736302 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

char *sub_1A2971570(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1A2AE3C88();
  __break(1u);
  return result;
}

_BYTE *sub_1A297165C@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1A29716C8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1A2AE3C88();
  __break(1u);
  return result;
}

uint64_t sub_1A29717BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_1A2AE3C88();
  __break(1u);
  return result;
}

uint64_t sub_1A29718D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1A2AE3C88();
  __break(1u);
  return result;
}

uint64_t sub_1A29719C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1A2AE3C88();
  __break(1u);
  return result;
}

uint64_t sub_1A2971AB4(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1A2971B1C(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A2971B80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;

  return sub_1A2968330(a1, a2, v3, a3);
}

uint64_t sub_1A2971B9C()
{
  char v0;

  v0 = SFUserDefault.hasValueOnDisk.getter();
  if ((v0 & 1) != 0)
    SFUserDefault.clearValueOnDisk()();
  return v0 & 1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1A2971C04()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A2971C28()
{
  return swift_deallocObject();
}

uint64_t sub_1A2971C38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A2AE3730();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1A2971CB8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A2AE3730() - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[6];
  v8 = (uint64_t)v1 + ((v4 + 56) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1A2972038;
  return sub_1A29672F4(a1, v5, v6, v7, v8);
}

uint64_t sub_1A2971D50()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A2971D7C(uint64_t a1)
{
  uint64_t v1;

  return sub_1A2967D20(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1A2971D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A2AE3730();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1A2971E10(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A2AE3730() - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = (uint64_t)v1 + ((v4 + 72) & ~v4);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1A2971EBC;
  return sub_1A2967754(a1, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1A2971EBC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A2971F04(uint64_t a1)
{
  uint64_t v1;

  return sub_1A2A763EC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

id sub_1A2971F4C@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = *a1;
  return v2;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1A8589544](a1, v6, a5);
}

void type metadata accessor for SFDeviceSetupProgressEvent(uint64_t a1)
{
  sub_1A2971FE0(a1, &qword_1EE67AFE8);
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1A2971FE0(a1, &qword_1EE67AFF0);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_1A2971FE0(a1, &qword_1EE67AFF8);
}

void sub_1A2971FE0(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t SFAirDrop.ContactInfo.Handle.description.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1A297208C();
  return v1;
}

uint64_t sub_1A297208C()
{
  return swift_bridgeObjectRetain();
}

BOOL sub_1A2972098(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1A29720B0()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C69616D65;
  else
    return 0x656E6F6870;
}

uint64_t sub_1A29720DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2974228(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A2972100(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1A297210C()
{
  sub_1A2973458();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2972134()
{
  sub_1A2973458();
  return sub_1A2AE4108();
}

uint64_t sub_1A297215C()
{
  sub_1A297349C();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2972184()
{
  sub_1A297349C();
  return sub_1A2AE4108();
}

uint64_t sub_1A29721AC()
{
  sub_1A29734E0();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29721D4()
{
  sub_1A29734E0();
  return sub_1A2AE4108();
}

uint64_t SFAirDrop.ContactInfo.Handle.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B060);
  v19 = *(_QWORD *)(v3 - 8);
  v20 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B068);
  v17 = *(_QWORD *)(v6 - 8);
  v18 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B070);
  v23 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  v21 = v1[1];
  v22 = v12;
  v13 = *((_BYTE *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2973458();
  sub_1A2AE40E4();
  if ((v13 & 1) != 0)
  {
    v25 = 1;
    sub_1A297349C();
    sub_1A2AE3DB4();
    v14 = v20;
    sub_1A2AE3DF0();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v14);
  }
  else
  {
    v24 = 0;
    sub_1A29734E0();
    sub_1A2AE3DB4();
    v15 = v18;
    sub_1A2AE3DF0();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v11, v9);
}

uint64_t SFAirDrop.ContactInfo.Handle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  char v39;
  char v40;

  v32 = a2;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B090);
  v33 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v34 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B098);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B0A0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v36 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_1A2973458();
  v13 = v37;
  sub_1A2AE40C0();
  if (v13)
    goto LABEL_6;
  v31 = v5;
  v14 = v4;
  v16 = v34;
  v15 = v35;
  v37 = v9;
  v17 = sub_1A2AE3D9C();
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v18 = sub_1A2AE3B5C();
    swift_allocError();
    v19 = v11;
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE67AC00);
    *v21 = &type metadata for SFAirDrop.ContactInfo.Handle;
    sub_1A2AE3CF4();
    sub_1A2AE3B50();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v21, *MEMORY[0x1E0DEC450], v18);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v8);
LABEL_6:
    v22 = (uint64_t)v36;
    return __swift_destroy_boxed_opaque_existential_0Tm(v22);
  }
  v38 = *(unsigned __int8 *)(v17 + 32);
  if ((v38 & 1) != 0)
  {
    v31 = v17;
    v40 = 1;
    sub_1A297349C();
    sub_1A2AE3CE8();
    v25 = sub_1A2AE3D3C();
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v15);
  }
  else
  {
    v39 = 0;
    sub_1A29734E0();
    v24 = v7;
    sub_1A2AE3CE8();
    v25 = sub_1A2AE3D3C();
    v27 = v28;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v24, v14);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v8);
  v22 = (uint64_t)v36;
  v29 = v32;
  *v32 = v25;
  v29[1] = v27;
  *((_BYTE *)v29 + 16) = v38;
  return __swift_destroy_boxed_opaque_existential_0Tm(v22);
}

uint64_t sub_1A29727D8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return SFAirDrop.ContactInfo.Handle.init(from:)(a1, a2);
}

uint64_t sub_1A29727EC(_QWORD *a1)
{
  return SFAirDrop.ContactInfo.Handle.encode(to:)(a1);
}

uint64_t sub_1A2972804()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1A297208C();
  return v1;
}

uint64_t SFAirDrop.ContactInfo.givenName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDrop.ContactInfo.fullName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDrop.ContactInfo.handle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_BYTE *)(v1 + 48);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  return sub_1A297208C();
}

uint64_t SFAirDrop.ContactInfo.vcard.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  sub_1A2973524(v1, *(_QWORD *)(v0 + 64));
  return v1;
}

__n128 SFAirDrop.ContactInfo.init(givenName:fullName:handle:vcard:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, __n128 *a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, __n128 *a8@<X8>)
{
  unsigned __int8 v8;
  __n128 result;

  v8 = a5[1].n128_u8[0];
  a8->n128_u64[0] = a1;
  a8->n128_u64[1] = a2;
  a8[1].n128_u64[0] = a3;
  a8[1].n128_u64[1] = a4;
  result = *a5;
  a8[2] = *a5;
  a8[3].n128_u8[0] = v8;
  a8[3].n128_u64[1] = a6;
  a8[4].n128_u64[0] = a7;
  return result;
}

uint64_t SFAirDrop.ContactInfo.description.getter()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + 8))
    swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1A2AE3B20();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  sub_1A297208C();
  sub_1A2AE34F0();
  sub_1A2973568();
  sub_1A2AE34F0();
  return 0x49746361746E6F43;
}

uint64_t sub_1A2972A0C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A2972A40 + 4 * byte_1A2AFA61C[*v0]))(0x6D614E6E65766967, 0xE900000000000065);
}

uint64_t sub_1A2972A40()
{
  return 0x656D614E6C6C7566;
}

uint64_t sub_1A2972A58()
{
  return 0x656C646E6168;
}

uint64_t sub_1A2972A6C()
{
  return 0x6472616376;
}

uint64_t sub_1A2972A80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2974308(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A2972AA4(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1A2972AB0()
{
  sub_1A2973570();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2972AD8()
{
  sub_1A2973570();
  return sub_1A2AE4108();
}

uint64_t SFAirDrop.ContactInfo.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  char v27;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B0A8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v20 = *(_QWORD *)(v1 + 24);
  v21 = v7;
  v8 = *(_QWORD *)(v1 + 32);
  v18 = *(_QWORD *)(v1 + 40);
  v19 = v8;
  v26 = *(unsigned __int8 *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v16 = *(_QWORD *)(v1 + 64);
  v17 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2973570();
  sub_1A2AE40E4();
  LOBYTE(v23) = 0;
  v10 = v22;
  sub_1A2AE3DC0();
  if (!v10)
  {
    v11 = v26;
    v13 = v18;
    v12 = v19;
    v14 = v17;
    LOBYTE(v23) = 1;
    sub_1A2AE3DF0();
    v23 = v12;
    v24 = v13;
    v25 = v11;
    v27 = 2;
    sub_1A29735B4();
    sub_1A2AE3E2C();
    v23 = v14;
    v24 = v16;
    v27 = 3;
    sub_1A29735F8();
    sub_1A2AE3E2C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t SFAirDrop.ContactInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  char v35;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B0C8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2973570();
  sub_1A2AE40C0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  LOBYTE(v31) = 0;
  v9 = sub_1A2AE3D00();
  v11 = v10;
  v29 = v9;
  LOBYTE(v31) = 1;
  swift_bridgeObjectRetain();
  v12 = sub_1A2AE3D3C();
  v30 = v13;
  v28 = v12;
  v35 = 2;
  sub_1A297363C();
  swift_bridgeObjectRetain();
  sub_1A2AE3D78();
  v34 = v33;
  v35 = 3;
  v26 = v32;
  v27 = v31;
  v25 = v33;
  sub_1A297208C();
  sub_1A2973680();
  sub_1A2AE3D78();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = v32;
  v23 = v32;
  v24 = v31;
  swift_bridgeObjectRetain();
  v15 = v30;
  swift_bridgeObjectRetain();
  v17 = v26;
  v16 = v27;
  v18 = v25;
  sub_1A297208C();
  sub_1A2973524(v24, v14);
  sub_1A2973568();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v29;
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v28;
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 40) = v17;
  *(_BYTE *)(a2 + 48) = v18;
  v19 = v23;
  v20 = v24;
  *(_QWORD *)(a2 + 56) = v24;
  *(_QWORD *)(a2 + 64) = v19;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A2973568();
  return sub_1A29736C4(v20, v19);
}

uint64_t sub_1A2973044@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFAirDrop.ContactInfo.init(from:)(a1, a2);
}

uint64_t sub_1A2973058(_QWORD *a1)
{
  return SFAirDrop.ContactInfo.encode(to:)(a1);
}

uint64_t SFAirDrop.ContactInfo.accountHandle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_1A297208C();
  return v1;
}

void _s7Sharing9SFAirDropO11ContactInfoV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_BYTE *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_BYTE *)(a2 + 48);
  if (!v3)
  {
    if (v9)
      return;
LABEL_8:
    if ((v4 != v10 || v5 != v12) && (sub_1A2AE3EE0() & 1) == 0)
      return;
    if ((v8 & 1) != 0)
    {
      if ((v14 & 1) != 0)
      {
        if (v6 != v11 || v7 != v13)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    else if ((v14 & 1) == 0)
    {
      if (v6 != v11 || v7 != v13)
      {
LABEL_22:
        v15 = sub_1A2AE3EE0();
        sub_1A297208C();
        sub_1A297208C();
        sub_1A2973568();
        sub_1A2973568();
        if ((v15 & 1) == 0)
          return;
        goto LABEL_23;
      }
LABEL_21:
      sub_1A297208C();
      sub_1A297208C();
      sub_1A2973568();
      sub_1A2973568();
LABEL_23:
      sub_1A2A10E0C(v17, v16);
      return;
    }
    sub_1A297208C();
    sub_1A297208C();
    sub_1A2973568();
    sub_1A2973568();
    return;
  }
  if (v9 && (*(_QWORD *)a1 == *(_QWORD *)a2 && v3 == v9 || (sub_1A2AE3EE0() & 1) != 0))
    goto LABEL_8;
}

uint64_t _s7Sharing9SFAirDropO11ContactInfoV6HandleO2eeoiySbAG_AGtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  if ((a1[2] & 1) != 0)
  {
    if ((a2[2] & 1) != 0)
    {
      if (v2 != v4 || v3 != v5)
      {
LABEL_15:
        v7 = sub_1A2AE3EE0();
        goto LABEL_17;
      }
LABEL_16:
      v7 = 1;
      goto LABEL_17;
    }
  }
  else if ((a2[2] & 1) == 0)
  {
    if (v2 != v4 || v3 != v5)
      goto LABEL_15;
    goto LABEL_16;
  }
  v7 = 0;
LABEL_17:
  sub_1A297208C();
  sub_1A297208C();
  sub_1A2973568();
  sub_1A2973568();
  return v7 & 1;
}

unint64_t sub_1A2973458()
{
  unint64_t result;

  result = qword_1EE67B078;
  if (!qword_1EE67B078)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFABAC, &_s11ContactInfoV6HandleO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B078);
  }
  return result;
}

unint64_t sub_1A297349C()
{
  unint64_t result;

  result = qword_1EE67B080;
  if (!qword_1EE67B080)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFAB5C, &_s11ContactInfoV6HandleO15EmailCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B080);
  }
  return result;
}

unint64_t sub_1A29734E0()
{
  unint64_t result;

  result = qword_1EE67B088;
  if (!qword_1EE67B088)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFAB0C, &_s11ContactInfoV6HandleO15PhoneCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B088);
  }
  return result;
}

uint64_t sub_1A2973524(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1A2973568()
{
  return swift_bridgeObjectRelease();
}

unint64_t sub_1A2973570()
{
  unint64_t result;

  result = qword_1EE67B0B0;
  if (!qword_1EE67B0B0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFAABC, &_s11ContactInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B0B0);
  }
  return result;
}

unint64_t sub_1A29735B4()
{
  unint64_t result;

  result = qword_1EE67B0B8;
  if (!qword_1EE67B0B8)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDrop.ContactInfo.Handle, &type metadata for SFAirDrop.ContactInfo.Handle);
    atomic_store(result, (unint64_t *)&qword_1EE67B0B8);
  }
  return result;
}

unint64_t sub_1A29735F8()
{
  unint64_t result;

  result = qword_1EE67B0C0;
  if (!qword_1EE67B0C0)
  {
    result = MEMORY[0x1A85895EC](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EE67B0C0);
  }
  return result;
}

unint64_t sub_1A297363C()
{
  unint64_t result;

  result = qword_1EE67B0D0;
  if (!qword_1EE67B0D0)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDrop.ContactInfo.Handle, &type metadata for SFAirDrop.ContactInfo.Handle);
    atomic_store(result, (unint64_t *)&qword_1EE67B0D0);
  }
  return result;
}

unint64_t sub_1A2973680()
{
  unint64_t result;

  result = qword_1EE67B0D8;
  if (!qword_1EE67B0D8)
  {
    result = MEMORY[0x1A85895EC](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EE67B0D8);
  }
  return result;
}

uint64_t sub_1A29736C4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t _s11ContactInfoVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A2973568();
  return sub_1A29736C4(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

uint64_t _s11ContactInfoVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1A297208C();
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = v8;
  v10 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  sub_1A2973524(v10, v9);
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v9;
  return a1;
}

uint64_t _s11ContactInfoVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_BYTE *)(a2 + 48);
  sub_1A297208C();
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = v6;
  sub_1A2973568();
  v8 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  sub_1A2973524(v8, v7);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v7;
  sub_1A29736C4(v9, v10);
  return a1;
}

uint64_t _s11ContactInfoVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = v6;
  sub_1A2973568();
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_1A29736C4(v7, v8);
  return a1;
}

uint64_t _s11ContactInfoVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s11ContactInfoVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SFAirDrop.ContactInfo()
{
  return &type metadata for SFAirDrop.ContactInfo;
}

uint64_t _s11ContactInfoV6HandleOwxx()
{
  return sub_1A2973568();
}

uint64_t _s11ContactInfoV6HandleOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_1A297208C();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s11ContactInfoV6HandleOwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_1A297208C();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1A2973568();
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t _s11ContactInfoV6HandleOwta(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1A2973568();
  return a1;
}

uint64_t _s11ContactInfoV6HandleOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s11ContactInfoV6HandleOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1A2973B30(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1A2973B38(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SFAirDrop.ContactInfo.Handle()
{
  return &type metadata for SFAirDrop.ContactInfo.Handle;
}

uint64_t _s11ContactInfoV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s11ContactInfoV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A2973C30 + 4 * byte_1A2AFA625[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A2973C64 + 4 * byte_1A2AFA620[v4]))();
}

uint64_t sub_1A2973C64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2973C6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A2973C74);
  return result;
}

uint64_t sub_1A2973C80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A2973C88);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A2973C8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2973C94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s11ContactInfoV10CodingKeysOMa()
{
  return &_s11ContactInfoV10CodingKeysON;
}

uint64_t _s11ContactInfoV6HandleO10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s11ContactInfoV6HandleO10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A2973D8C + 4 * byte_1A2AFA62F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A2973DC0 + 4 * byte_1A2AFA62A[v4]))();
}

uint64_t sub_1A2973DC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2973DC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A2973DD0);
  return result;
}

uint64_t sub_1A2973DDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A2973DE4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A2973DE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2973DF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1A2973DFC(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *_s11ContactInfoV6HandleO10CodingKeysOMa()
{
  return &_s11ContactInfoV6HandleO10CodingKeysON;
}

ValueMetadata *_s11ContactInfoV6HandleO15PhoneCodingKeysOMa()
{
  return &_s11ContactInfoV6HandleO15PhoneCodingKeysON;
}

uint64_t _s11ContactInfoV6HandleO15PhoneCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A2973E6C + 4 * byte_1A2AFA634[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A2973E8C + 4 * byte_1A2AFA639[v4]))();
}

_BYTE *sub_1A2973E6C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A2973E8C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A2973E94(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A2973E9C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A2973EA4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A2973EAC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s11ContactInfoV6HandleO15EmailCodingKeysOMa()
{
  return &_s11ContactInfoV6HandleO15EmailCodingKeysON;
}

unint64_t sub_1A2973ECC()
{
  unint64_t result;

  result = qword_1EE67B0E0;
  if (!qword_1EE67B0E0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFA86C, &_s11ContactInfoV6HandleO15EmailCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B0E0);
  }
  return result;
}

unint64_t sub_1A2973F14()
{
  unint64_t result;

  result = qword_1EE67B0E8;
  if (!qword_1EE67B0E8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFA924, &_s11ContactInfoV6HandleO15PhoneCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B0E8);
  }
  return result;
}

unint64_t sub_1A2973F5C()
{
  unint64_t result;

  result = qword_1EE67B0F0;
  if (!qword_1EE67B0F0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFA9DC, &_s11ContactInfoV6HandleO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B0F0);
  }
  return result;
}

unint64_t sub_1A2973FA4()
{
  unint64_t result;

  result = qword_1EE67B0F8;
  if (!qword_1EE67B0F8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFAA94, &_s11ContactInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B0F8);
  }
  return result;
}

unint64_t sub_1A2973FEC()
{
  unint64_t result;

  result = qword_1EE67B100;
  if (!qword_1EE67B100)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFAA04, &_s11ContactInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B100);
  }
  return result;
}

unint64_t sub_1A2974034()
{
  unint64_t result;

  result = qword_1EE67B108;
  if (!qword_1EE67B108)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFAA2C, &_s11ContactInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B108);
  }
  return result;
}

unint64_t sub_1A297407C()
{
  unint64_t result;

  result = qword_1EE67B110;
  if (!qword_1EE67B110)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFA894, &_s11ContactInfoV6HandleO15PhoneCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B110);
  }
  return result;
}

unint64_t sub_1A29740C4()
{
  unint64_t result;

  result = qword_1EE67B118;
  if (!qword_1EE67B118)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFA8BC, &_s11ContactInfoV6HandleO15PhoneCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B118);
  }
  return result;
}

unint64_t sub_1A297410C()
{
  unint64_t result;

  result = qword_1EE67B120;
  if (!qword_1EE67B120)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFA7DC, &_s11ContactInfoV6HandleO15EmailCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B120);
  }
  return result;
}

unint64_t sub_1A2974154()
{
  unint64_t result;

  result = qword_1EE67B128;
  if (!qword_1EE67B128)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFA804, &_s11ContactInfoV6HandleO15EmailCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B128);
  }
  return result;
}

unint64_t sub_1A297419C()
{
  unint64_t result;

  result = qword_1EE67B130;
  if (!qword_1EE67B130)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFA94C, &_s11ContactInfoV6HandleO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B130);
  }
  return result;
}

unint64_t sub_1A29741E4()
{
  unint64_t result;

  result = qword_1EE67B138;
  if (!qword_1EE67B138)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFA974, &_s11ContactInfoV6HandleO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B138);
  }
  return result;
}

uint64_t sub_1A2974228(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656E6F6870 && a2 == 0xE500000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C69616D65 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A2974308(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6D614E6E65766967 && a2 == 0xE900000000000065;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E6C6C7566 && a2 == 0xE800000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C646E6168 && a2 == 0xE600000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6472616376 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t AirDropMachServiceName.getter()
{
  return 0xD000000000000021;
}

unint64_t AirDropID.getter()
{
  return 0xD000000000000011;
}

ValueMetadata *type metadata accessor for SFAirDrop()
{
  return &type metadata for SFAirDrop;
}

uint64_t sub_1A2974504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1A2AE36E8();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1A2AE36DC();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1A296F108(a1, &qword_1ECEFB6D0);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1A2AE3688();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1A2974654()
{
  return 1684632949;
}

uint64_t sub_1A2974664@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2976D58(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_1A2974690@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_1A2976E08(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A29695F4, a2);
}

uint64_t sub_1A297469C(uint64_t a1)
{
  MEMORY[0x1A85895EC](&unk_1A2AFAF98, a1);
  return sub_1A2AE40FC();
}

uint64_t sub_1A29746D0(uint64_t a1)
{
  MEMORY[0x1A85895EC](&unk_1A2AFAF98, a1);
  return sub_1A2AE4108();
}

uint64_t SFXPCBlock.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return sub_1A2976F0C(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for SFXPCBlock);
}

void type metadata accessor for SFXPCBlock()
{
  JUMPOUT(0x1A8589544);
}

uint64_t SFXPCBlock.dynamicallyCall(withArguments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[9] = a3;
  v4[10] = v3;
  v4[7] = a1;
  v4[8] = a2;
  v5 = *(_QWORD *)(a3 + 16);
  v4[11] = v5;
  v6 = sub_1A2AE39F4();
  v4[12] = v6;
  v4[13] = *(_QWORD *)(v6 - 8);
  v4[14] = swift_task_alloc();
  v4[15] = *(_QWORD *)(v5 - 8);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A29747E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t (*v15)(_QWORD, _QWORD);

  if ((ValueMetadata *)v0[11] == &type metadata for VoidParameters)
  {
    v4 = v0[17];
    v0[5] = &type metadata for VoidParameters;
    tryCast<A>(_:as:description:file:line:)((uint64_t)(v0 + 2), (uint64_t)&type metadata for VoidParameters, 0, 0, 0xD00000000000004CLL, 0x80000001A2B44FE0, 31, (uint64_t)&type metadata for VoidParameters, v4);
    v10 = v0[17];
    v9 = v0[18];
    v11 = v0[15];
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 2));
    (*(void (**)(uint64_t, uint64_t, ValueMetadata *))(v11 + 32))(v9, v10, &type metadata for VoidParameters);
  }
  else
  {
    v0[6] = v0[8];
    v1 = v0[16];
    v2 = v0[12];
    v3 = sub_1A2AE3670();
    MEMORY[0x1A85895EC](MEMORY[0x1E0DEAF50], v3);
    sub_1A2AE38E0();
    Optional.tryUnwrap(_:file:line:)(0xD000000000000021, 0x80000001A2B44FB0, 0xD00000000000004CLL, 0x80000001A2B44FE0, 33, v2, v1);
    v5 = v0[18];
    v7 = v0[15];
    v6 = v0[16];
    v8 = v0[11];
    (*(void (**)(_QWORD, _QWORD))(v0[13] + 8))(v0[14], v0[12]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v5, v6, v8);
  }
  v12 = (_QWORD *)(v0[10] + *(int *)(v0[9] + 68));
  v15 = (uint64_t (*)(_QWORD, _QWORD))(*(int *)*v12 + *v12);
  v13 = (_QWORD *)swift_task_alloc();
  v0[19] = v13;
  *v13 = v0;
  v13[1] = sub_1A2974A14;
  return v15(v0[7], v0[18]);
}

uint64_t sub_1A2974A14()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2974A78()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 88));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2974AE8()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 88));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2974B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1A2974D14(a1, a2, a3, a4, a5, a6, &qword_1EE676768, 0xD000000000000012, 0x80000001A2B452C0);
}

uint64_t sub_1A2974B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD), uint64_t a8, uint64_t a9)
{
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  sub_1A296E4B4(a1, (uint64_t)&v20);
  a7(0);
  if ((swift_dynamicCast() & 1) != 0)
    return v22;
  v20 = 0;
  v21 = 0xE000000000000000;
  sub_1A2AE3BF8();
  v17 = v20;
  v18 = v21;
  sub_1A297AFB8();
  swift_allocError();
  *(_QWORD *)v19 = v17;
  *(_QWORD *)(v19 + 8) = v18;
  *(_QWORD *)(v19 + 16) = a8;
  *(_QWORD *)(v19 + 24) = a9;
  *(_QWORD *)(v19 + 32) = a2;
  *(_QWORD *)(v19 + 40) = a3;
  *(_QWORD *)(v19 + 48) = a4;
  *(_QWORD *)(v19 + 56) = a5;
  *(_QWORD *)(v19 + 64) = a6;
  *(_OWORD *)(v19 + 72) = xmmword_1A2AFAC10;
  *(_QWORD *)(v19 + 88) = 0;
  *(_QWORD *)(v19 + 96) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t sub_1A2974CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1A2974D14(a1, a2, a3, a4, a5, a6, &qword_1EE676770, 0xD000000000000017, 0x80000001A2B44BA0);
}

uint64_t sub_1A2974D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  sub_1A296E4B4(a1, (uint64_t)&v20);
  __swift_instantiateConcreteTypeFromMangledName(a7);
  if ((swift_dynamicCast() & 1) != 0)
    return v22;
  v20 = 0;
  v21 = 0xE000000000000000;
  sub_1A2AE3BF8();
  v17 = v20;
  v18 = v21;
  sub_1A297AFB8();
  swift_allocError();
  *(_QWORD *)v19 = v17;
  *(_QWORD *)(v19 + 8) = v18;
  *(_QWORD *)(v19 + 16) = a8;
  *(_QWORD *)(v19 + 24) = a9;
  *(_QWORD *)(v19 + 32) = a2;
  *(_QWORD *)(v19 + 40) = a3;
  *(_QWORD *)(v19 + 48) = a4;
  *(_QWORD *)(v19 + 56) = a5;
  *(_QWORD *)(v19 + 64) = a6;
  *(_OWORD *)(v19 + 72) = xmmword_1A2AFAC10;
  *(_QWORD *)(v19 + 88) = 0;
  *(_QWORD *)(v19 + 96) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t sub_1A2974E50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  __int128 v14;
  uint64_t v15;
  __int128 v16[2];
  uint64_t v17;
  _BYTE v18[32];

  sub_1A296E4B4(a1, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B320);
  if ((swift_dynamicCast() & 1) != 0)
    return sub_1A297CC20(v16, a7);
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  sub_1A296F108((uint64_t)v16, &qword_1EE67B328);
  *(_QWORD *)&v16[0] = 0;
  *((_QWORD *)&v16[0] + 1) = 0xE000000000000000;
  sub_1A2AE3BF8();
  v14 = v16[0];
  sub_1A297AFB8();
  swift_allocError();
  *(_OWORD *)v15 = v14;
  *(_QWORD *)(v15 + 16) = 0xD00000000000001ELL;
  *(_QWORD *)(v15 + 24) = 0x80000001A2B45150;
  *(_QWORD *)(v15 + 32) = a2;
  *(_QWORD *)(v15 + 40) = a3;
  *(_QWORD *)(v15 + 48) = a4;
  *(_QWORD *)(v15 + 56) = a5;
  *(_QWORD *)(v15 + 64) = a6;
  *(_OWORD *)(v15 + 72) = xmmword_1A2AFAC10;
  *(_QWORD *)(v15 + 88) = 0;
  *(_QWORD *)(v15 + 96) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t sub_1A2974FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  __int128 v14;
  uint64_t v15;
  __int128 v16[2];
  uint64_t v17;
  _BYTE v18[32];

  sub_1A296E4B4(a1, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE676700);
  if ((swift_dynamicCast() & 1) != 0)
    return sub_1A297CC20(v16, a7);
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  sub_1A296F108((uint64_t)v16, &qword_1EE67B330);
  *(_QWORD *)&v16[0] = 0;
  *((_QWORD *)&v16[0] + 1) = 0xE000000000000000;
  sub_1A2AE3BF8();
  v14 = v16[0];
  sub_1A297AFB8();
  swift_allocError();
  *(_OWORD *)v15 = v14;
  *(_QWORD *)(v15 + 16) = 0xD00000000000001FLL;
  *(_QWORD *)(v15 + 24) = 0x80000001A2B45170;
  *(_QWORD *)(v15 + 32) = a2;
  *(_QWORD *)(v15 + 40) = a3;
  *(_QWORD *)(v15 + 48) = a4;
  *(_QWORD *)(v15 + 56) = a5;
  *(_QWORD *)(v15 + 64) = a6;
  *(_OWORD *)(v15 + 72) = xmmword_1A2AFAC10;
  *(_QWORD *)(v15 + 88) = 0;
  *(_QWORD *)(v15 + 96) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

void SFXPCBlock.encode(to:)()
{
  type metadata accessor for SFXPCBlock.CodingKeys();
}

uint64_t sub_1A2975184(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  char v16;
  _BYTE v17[80];

  *(_QWORD *)(v2 - 216) = MEMORY[0x1A85895EC](&unk_1A2AFAF98, a1);
  v3 = sub_1A2AE3E50();
  *(_QWORD *)(v2 - 152) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 - 144) = v3;
  MEMORY[0x1E0C80A78](v3);
  *(_QWORD *)(v2 - 160) = &v17[-v4];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  MEMORY[0x1E0C80A78](v5);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_1A2AE3C40();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  v12 = sub_1A2AE40B4();
  sub_1A2AE3C34();
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v11, v7, v8);
    if (*(_QWORD *)(v12 + 16))
    {
      v14 = sub_1A297AF68((uint64_t)v11);
      v15 = *(_QWORD *)(v2 - 72);
      if ((v16 & 1) != 0)
      {
        sub_1A296E4B4(*(_QWORD *)(v12 + 56) + 32 * v14, v2 - 128);
      }
      else
      {
        *(_OWORD *)(v2 - 128) = 0u;
        *(_OWORD *)(v2 - 112) = 0u;
      }
    }
    else
    {
      *(_OWORD *)(v2 - 128) = 0u;
      *(_OWORD *)(v2 - 112) = 0u;
      v15 = *(_QWORD *)(v2 - 72);
    }
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
    sub_1A2975510(v2 - 128, 0, 0, 0xD00000000000004CLL, 0x80000001A2B44FE0, 39, (void (*)(_QWORD))type metadata accessor for _SFXPCBlockContainer, &qword_1EE6766F8, 0xD000000000000014, 0x80000001A2AFAD30);
    result = sub_1A296F108(v2 - 128, &qword_1ECEFB8A0);
    if (!v15)
      sub_1A29759B0();
  }
  return result;
}

void type metadata accessor for SFXPCBlock.CodingKeys()
{
  JUMPOUT(0x1A8589544);
}

void (*sub_1A2975480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(_QWORD)
{
  return sub_1A2975510(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD))type metadata accessor for _SFXPCBlockContainer, &qword_1EE6766F8, 0xD000000000000014, 0x80000001A2AFAD30);
}

void (*sub_1A29754C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(_QWORD)
{
  return sub_1A2975510(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD))type metadata accessor for _SFXPCAsyncSequenceContainer, qword_1EE676630, 0xD00000000000001CLL, 0x80000001A2B451E0);
}

void (*sub_1A2975510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD), uint64_t *a8, uint64_t a9, uint64_t a10))(_QWORD)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v26 = a5;
  v27 = a6;
  v24 = a3;
  v25 = a4;
  v14 = sub_1A2AE406C();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = ((uint64_t (*)(_QWORD))a7)(0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(a8);
  *(_QWORD *)&v30 = v18;
  sub_1A2AE403C();
  *(_QWORD *)&v28 = 0x2874736143797274;
  *((_QWORD *)&v28 + 1) = 0xE800000000000000;
  sub_1A2AE4048();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  v19 = v28;
  sub_1A297CDE4(a1, (uint64_t)&v28, &qword_1ECEFB8A0);
  if (v29)
  {
    sub_1A296E4A4(&v28, &v30);
    swift_bridgeObjectRelease();
    v20 = v32;
    v21 = sub_1A2974B98((uint64_t)&v30, a2, v24, v25, v26, v27, a7, a9, a10);
    if (!v20)
      a7 = (void (*)(_QWORD))v21;
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v30);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  else
  {
    sub_1A296F108((uint64_t)&v28, &qword_1ECEFB8A0);
    sub_1A297AFB8();
    swift_allocError();
    *(_OWORD *)v22 = v19;
    *(_QWORD *)(v22 + 16) = 0xD000000000000046;
    *(_QWORD *)(v22 + 24) = 0x80000001A2B45190;
    *(_QWORD *)(v22 + 32) = 132;
    *(_OWORD *)(v22 + 40) = 0u;
    *(_OWORD *)(v22 + 56) = 0u;
    *(_QWORD *)(v22 + 72) = 0;
    *(_QWORD *)(v22 + 80) = 0x2000000000000000;
    *(_QWORD *)(v22 + 88) = 0;
    *(_QWORD *)(v22 + 96) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    swift_bridgeObjectRelease();
  }
  return a7;
}

uint64_t sub_1A2975750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v22 = a5;
  v23 = a6;
  v21 = a4;
  v9 = sub_1A2AE406C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE676770);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B338);
  *(_QWORD *)&v26 = v13;
  sub_1A2AE403C();
  *(_QWORD *)&v24 = 0x2874736143797274;
  *((_QWORD *)&v24 + 1) = 0xE800000000000000;
  sub_1A2AE4048();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  v14 = *((_QWORD *)&v24 + 1);
  v15 = v24;
  sub_1A297CDE4(a1, (uint64_t)&v24, &qword_1ECEFB8A0);
  if (v25)
  {
    sub_1A296E4A4(&v24, &v26);
    swift_bridgeObjectRelease();
    v16 = v28;
    v17 = sub_1A2974D14((uint64_t)&v26, a2, a3, v21, v22, v23, &qword_1EE676770, 0xD000000000000017, 0x80000001A2B44BA0);
    if (!v16)
      v14 = v17;
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v26);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    sub_1A296F108((uint64_t)&v24, &qword_1ECEFB8A0);
    sub_1A297AFB8();
    swift_allocError();
    *(_QWORD *)v18 = v15;
    *(_QWORD *)(v18 + 8) = v14;
    *(_QWORD *)(v18 + 16) = 0xD000000000000046;
    *(_QWORD *)(v18 + 24) = 0x80000001A2B45190;
    *(_QWORD *)(v18 + 32) = 132;
    *(_OWORD *)(v18 + 40) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_QWORD *)(v18 + 72) = 0;
    *(_QWORD *)(v18 + 80) = 0x2000000000000000;
    *(_QWORD *)(v18 + 88) = 0;
    *(_QWORD *)(v18 + 96) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_bridgeObjectRelease();
  }
  return v14;
}

void sub_1A29759B0()
{
  type metadata accessor for SFXPCBlock();
}

uint64_t sub_1A29759FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  _BYTE v20[96];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v20[-v6];
  v8 = sub_1A2AE3130();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, v1, v8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v1, a1);
  v12 = (*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v13 = (char *)swift_allocObject();
  v14 = *(_QWORD *)(v3 - 184);
  *((_QWORD *)v13 + 2) = v2;
  *((_QWORD *)v13 + 3) = v14;
  v15 = *(_QWORD *)(v3 - 168);
  *((_QWORD *)v13 + 4) = *(_QWORD *)(v3 - 176);
  *((_QWORD *)v13 + 5) = v15;
  v16 = *(_QWORD *)(v3 - 152);
  *((_QWORD *)v13 + 6) = *(_QWORD *)(v3 - 160);
  *((_QWORD *)v13 + 7) = v16;
  (*(void (**)(char *, _BYTE *, uint64_t))(v5 + 32))(&v13[v12], v7, a1);
  v17 = (_QWORD *)(*(_QWORD *)(v3 - 144) + OBJC_IVAR____SFXPCBlockContainer_registeredAsyncBlocks);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 - 136) = *v17;
  *v17 = 0x8000000000000000;
  sub_1A2A22D9C((uint64_t)&unk_1EE67B390, (uint64_t)v13, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
  *v17 = *(_QWORD *)(v3 - 136);
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  return swift_endAccess();
}

void SFXPCBlock.init(from:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[15];
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v19 = a5;
  v20 = a6;
  v16[11] = a7;
  v17 = sub_1A2AE3130();
  v16[4] = *(_QWORD *)(v17 - 8);
  v13 = MEMORY[0x1E0C80A78](v17);
  v16[6] = (char *)v16 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[5] = v14;
  MEMORY[0x1E0C80A78](v13);
  v18 = (char *)v16 - v15;
  v21 = a1;
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a5;
  v26 = a6;
  type metadata accessor for SFXPCBlock.CodingKeys();
}

void sub_1A2975C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v15 = MEMORY[0x1A85895EC](&unk_1A2AFAF98, a1);
  *(_QWORD *)(v13 - 320) = a1;
  *(_QWORD *)(v13 - 328) = v15;
  v16 = sub_1A2AE3DA8();
  *(_QWORD *)(v13 - 352) = v16;
  *(_QWORD *)(v13 - 360) = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  *(_QWORD *)(v13 - 312) = (char *)&a9 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v19 = MEMORY[0x1E0C80A78](v18);
  *(_QWORD *)(v13 - 280) = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v21 = sub_1A2AE3C40();
  v22 = MEMORY[0x1E0C80A78](v21);
  *(_QWORD *)(v13 - 304) = (char *)&a9 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  *(_QWORD *)(v13 - 408) = v9;
  *(_QWORD *)(v13 - 136) = v9;
  *(_QWORD *)(v13 - 128) = v10;
  *(_QWORD *)(v13 - 400) = v10;
  *(_QWORD *)(v13 - 392) = v12;
  *(_QWORD *)(v13 - 120) = v12;
  *(_QWORD *)(v13 - 112) = v11;
  *(_QWORD *)(v13 - 384) = v11;
  v24 = *(_QWORD *)(v13 - 248);
  *(_QWORD *)(v13 - 104) = *(_QWORD *)(v13 - 256);
  *(_QWORD *)(v13 - 96) = v24;
  type metadata accessor for SFXPCBlock();
}

uint64_t sub_1A2975DD0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  unint64_t v14;
  char v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;

  *(_QWORD *)(v6 - 440) = a1;
  *(_QWORD *)(v6 - 448) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v6 - 368) = (char *)&v45 - v7;
  v9 = v1[3];
  v8 = v1[4];
  *(_QWORD *)(v6 - 264) = v1;
  __swift_project_boxed_opaque_existential_1(v1, v9);
  *(_QWORD *)(v6 - 288) = v8;
  v10 = sub_1A2AE40B4();
  sub_1A2AE3C34();
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v4[6];
  *(_QWORD *)(v6 - 296) = v11;
  result = v11(v3, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v13 = (void (*)(uint64_t, uint64_t, uint64_t))v4[4];
    v13(v2, v3, v5);
    if (*(_QWORD *)(v10 + 16) && (v14 = sub_1A297AF68(v2), (v15 & 1) != 0))
    {
      sub_1A296E4B4(*(_QWORD *)(v10 + 56) + 32 * v14, v6 - 176);
    }
    else
    {
      *(_OWORD *)(v6 - 176) = 0u;
      *(_OWORD *)(v6 - 160) = 0u;
    }
    swift_bridgeObjectRelease();
    v16 = (void (*)(uint64_t, uint64_t))v4[1];
    v16(v2, v5);
    sub_1A297CDE4(v6 - 176, v6 - 208, &qword_1ECEFB8A0);
    if (!*(_QWORD *)(v6 - 184))
    {
      sub_1A296F108(v6 - 208, &qword_1ECEFB8A0);
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v19 = 0xD000000000000011;
      *(_QWORD *)(v19 + 8) = 0x80000001A2B45050;
      *(_QWORD *)(v19 + 16) = 0xD00000000000004CLL;
      *(_QWORD *)(v19 + 24) = 0x80000001A2B44FE0;
      *(_QWORD *)(v19 + 32) = 48;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_QWORD *)(v19 + 72) = 0;
      *(_QWORD *)(v19 + 80) = 0x2000000000000000;
      *(_QWORD *)(v19 + 88) = 0;
      *(_QWORD *)(v19 + 96) = 0;
      swift_willThrow();
      sub_1A296F108(v6 - 176, &qword_1ECEFB8A0);
      goto LABEL_10;
    }
    sub_1A296E4A4((_OWORD *)(v6 - 208), (_OWORD *)(v6 - 136));
    sub_1A296F108(v6 - 176, &qword_1ECEFB8A0);
    v17 = *(_QWORD *)(v6 - 272);
    v18 = sub_1A2974D14(v6 - 136, 0, 0, 0xD00000000000004CLL, 0x80000001A2B44FE0, 49, &qword_1EE676768, 0xD000000000000012, 0x80000001A2B452C0);
    if (v17)
    {
      __swift_destroy_boxed_opaque_existential_0Tm(v6 - 136);
LABEL_10:
      v20 = *(_QWORD **)(v6 - 264);
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v20);
    }
    *(_QWORD *)(v6 - 456) = v18;
    *(_QWORD *)(v6 - 272) = 0;
    v21 = sub_1A2AE40B4();
    v22 = *(_QWORD *)(v6 - 280);
    sub_1A2AE3C34();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 - 296))(v22, 1, v5);
    if ((_DWORD)result != 1)
    {
      v23 = *(_QWORD *)(v6 - 304);
      v13(v23, v22, v5);
      if (*(_QWORD *)(v21 + 16) && (v24 = sub_1A297AF68(v23), (v25 & 1) != 0))
      {
        sub_1A296E4B4(*(_QWORD *)(v21 + 56) + 32 * v24, v6 - 176);
      }
      else
      {
        *(_OWORD *)(v6 - 176) = 0u;
        *(_OWORD *)(v6 - 160) = 0u;
      }
      swift_bridgeObjectRelease();
      v16(v23, v5);
      sub_1A297CDE4(v6 - 176, v6 - 240, &qword_1ECEFB8A0);
      if (*(_QWORD *)(v6 - 216))
      {
        sub_1A296E4A4((_OWORD *)(v6 - 240), (_OWORD *)(v6 - 208));
        v26 = *(_QWORD *)(v6 - 272);
        v27 = sub_1A2974B98(v6 - 208, 0, 0, 0xD00000000000004CLL, 0x80000001A2B44FE0, 54, (void (*)(_QWORD))type metadata accessor for _SFXPCContainerRegistry, 0xD000000000000017, 0x80000001A2B452A0);
        v20 = *(_QWORD **)(v6 - 264);
        if (v26)
        {
          swift_unknownObjectRelease();
          __swift_destroy_boxed_opaque_existential_0Tm(v6 - 208);
          goto LABEL_24;
        }
        v28 = v27;
        *(_QWORD *)(v6 - 272) = 0;
        __swift_destroy_boxed_opaque_existential_0Tm(v6 - 208);
      }
      else
      {
        sub_1A296F108(v6 - 240, &qword_1ECEFB8A0);
        v28 = 0;
        v20 = *(_QWORD **)(v6 - 264);
      }
      __swift_project_boxed_opaque_existential_1(v20, v20[3]);
      v29 = *(_QWORD *)(v6 - 272);
      sub_1A2AE40C0();
      if (!v29)
      {
        sub_1A297CC38(&qword_1EE676788, MEMORY[0x1E0CB09E0]);
        v30 = *(_QWORD *)(v6 - 336);
        v31 = *(_QWORD *)(v6 - 344);
        v32 = *(_QWORD *)(v6 - 352);
        sub_1A2AE3D78();
        v33 = *(_QWORD *)(v6 - 432);
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v33 + 16))(*(_QWORD *)(v6 - 368), v30, v31);
        *(_QWORD *)(v6 - 208) = 0x6B636F6C42637078;
        *(_QWORD *)(v6 - 200) = 0xEA0000000000203ALL;
        __swift_project_boxed_opaque_existential_1(v20, v20[3]);
        v34 = sub_1A2AE409C();
        v35 = sub_1A2976514(v34);
        *(_QWORD *)(v6 - 272) = 0;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v6 - 240) = v35;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6764B8);
        sub_1A297AFFC();
        sub_1A2AE33AC();
        swift_bridgeObjectRelease();
        sub_1A2AE34F0();
        swift_bridgeObjectRelease();
        v36 = *(_QWORD *)(v6 - 208);
        *(_QWORD *)(v6 - 264) = *(_QWORD *)(v6 - 200);
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v6 - 360) + 8))(*(_QWORD *)(v6 - 312), v32);
        sub_1A296F108(v6 - 176, &qword_1ECEFB8A0);
        __swift_destroy_boxed_opaque_existential_0Tm(v6 - 136);
        v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32);
        v38 = *(_QWORD *)(v6 - 416);
        v37(v38, *(_QWORD *)(v6 - 336), v31);
        v39 = (*(unsigned __int8 *)(v33 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
        v40 = (_QWORD *)swift_allocObject();
        v41 = *(_QWORD *)(v6 - 400);
        v40[2] = *(_QWORD *)(v6 - 408);
        v40[3] = v41;
        v42 = *(_QWORD *)(v6 - 384);
        v40[4] = *(_QWORD *)(v6 - 392);
        v40[5] = v42;
        v43 = *(_QWORD *)(v6 - 248);
        v40[6] = *(_QWORD *)(v6 - 256);
        v40[7] = v43;
        v40[8] = *(_QWORD *)(v6 - 456);
        v40[9] = v36;
        v40[10] = *(_QWORD *)(v6 - 264);
        v40[11] = v28;
        v37((uint64_t)v40 + v39, v38, v31);
        v44 = (_QWORD *)(*(_QWORD *)(v6 - 368) + *(int *)(*(_QWORD *)(v6 - 440) + 68));
        *v44 = &unk_1EE67B158;
        v44[1] = v40;
        (*(void (**)(_QWORD))(*(_QWORD *)(v6 - 448) + 32))(*(_QWORD *)(v6 - 376));
        return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v20);
      }
      swift_unknownObjectRelease();
      swift_release();
LABEL_24:
      sub_1A296F108(v6 - 176, &qword_1ECEFB8A0);
      __swift_destroy_boxed_opaque_existential_0Tm(v6 - 136);
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v20);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A2976514(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    sub_1A29BE308(0, v1, 0);
    v2 = v12;
    v4 = (_QWORD *)(a1 + 32);
    do
    {
      __swift_project_boxed_opaque_existential_1(v4, v4[3]);
      v5 = sub_1A2AE40F0();
      v7 = v6;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_1A29BE308(0, *(_QWORD *)(v12 + 16) + 1, 1);
      v9 = *(_QWORD *)(v12 + 16);
      v8 = *(_QWORD *)(v12 + 24);
      if (v9 >= v8 >> 1)
        sub_1A29BE308(v8 > 1, v9 + 1, 1);
      *(_QWORD *)(v12 + 16) = v9 + 1;
      v10 = v12 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v5;
      *(_QWORD *)(v10 + 40) = v7;
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1A297662C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  *(_QWORD *)(v8 + 112) = v16;
  *(_OWORD *)(v8 + 80) = v14;
  *(_OWORD *)(v8 + 96) = v15;
  *(_QWORD *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 72) = a8;
  *(_QWORD *)(v8 + 48) = a5;
  *(_QWORD *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v10 = sub_1A2AE3130();
  *(_QWORD *)(v8 + 120) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 128) = v11;
  *(_QWORD *)(v8 + 136) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 144) = swift_task_alloc();
  v12 = *(_QWORD *)(a8 - 8);
  *(_QWORD *)(v8 + 152) = v12;
  *(_QWORD *)(v8 + 160) = *(_QWORD *)(v12 + 64);
  *(_QWORD *)(v8 + 168) = swift_task_alloc();
  swift_retain();
  return swift_task_switch();
}

uint64_t sub_1A29766E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 128);
  v20 = v4;
  v6 = *(_QWORD *)(v0 + 120);
  v19 = v6;
  v7 = *(_QWORD *)(v0 + 64);
  v22 = *(_QWORD *)(v0 + 48);
  v23 = *(_QWORD *)(v0 + 56);
  v21 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 24);
  ObjectType = swift_getObjectType();
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B380);
  v16 = *(_OWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 72);
  v17 = *(_OWORD *)(v0 + 104);
  v18 = *(_OWORD *)(v0 + 88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
  v10 = (*(unsigned __int8 *)(v3 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v11 = (v1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (*(unsigned __int8 *)(v5 + 80) + v11 + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v13 = swift_allocObject();
  *(_QWORD *)(v0 + 176) = v13;
  *(_OWORD *)(v13 + 16) = v16;
  *(_OWORD *)(v13 + 32) = v18;
  *(_OWORD *)(v13 + 48) = v17;
  *(_QWORD *)(v13 + 64) = v21;
  *(_QWORD *)(v13 + 72) = v22;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v13 + v10, v2, v9);
  *(_QWORD *)(v13 + v11) = v23;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v13 + v12, v20, v19);
  swift_bridgeObjectRetain();
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 184) = v14;
  *v14 = v0;
  v14[1] = sub_1A297689C;
  return sub_1A29FBCF0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), v24, (uint64_t)sub_1A297D0FC, v13, ObjectType, v24);
}

uint64_t sub_1A297689C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 192) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A2976928()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1A2976970(objc_class **a1, unint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  objc_class *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  objc_class *v56;
  _QWORD aBlock[7];
  uint64_t v58;

  v50 = a7;
  v56 = a3;
  v52 = a2;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v55 = a9;
  v18 = sub_1A2AE36AC();
  v53 = *(_QWORD *)(v18 - 8);
  v54 = v18;
  v19 = MEMORY[0x1E0C80A78](v18);
  v51 = (char *)&v44 - v20;
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v22, a5, a8);
  swift_retain();
  swift_bridgeObjectRetain();
  v25 = v58;
  v26 = sub_1A29FB5B0(v56, a4, (uint64_t)v22, a6, a8, a10, a11);
  if (!v25)
  {
    v30 = v27;
    v56 = v23;
    v45 = a12;
    v46 = a13;
    v58 = v26;
    v47 = v28;
    v48 = v29;
    v50 = sub_1A2AE30F4();
    v49 = sub_1A2AE2F74();
    v31 = v53;
    v32 = v51;
    v33 = v54;
    (*(void (**)(char *, unint64_t, uint64_t))(v53 + 16))(v51, v52, v54);
    v34 = *(unsigned __int8 *)(v31 + 80);
    v52 = v30;
    v35 = (v34 + 64) & ~v34;
    v36 = (char *)swift_allocObject();
    v37 = v55;
    *((_QWORD *)v36 + 2) = a8;
    *((_QWORD *)v36 + 3) = v37;
    *((_QWORD *)v36 + 4) = a10;
    *((_QWORD *)v36 + 5) = a11;
    v38 = v46;
    *((_QWORD *)v36 + 6) = v45;
    *((_QWORD *)v36 + 7) = v38;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(&v36[v35], v32, v33);
    aBlock[4] = sub_1A297D244;
    aBlock[5] = v36;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = &block_descriptor_61;
    v39 = _Block_copy(aBlock);
    v40 = v47;
    v41 = v48;
    swift_release();
    v43 = (void *)v49;
    v42 = (void *)v50;
    -[objc_class invoke:parametersData:parametersAsyncSequenceContainer:parametersBlocksContainer:sync:completion:](v56, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v50, v49, v40, v41, 0, v39);
    _Block_release(v39);

    sub_1A29736C4(v58, v52);
  }
}

uint64_t sub_1A2976C30(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v15 = type metadata accessor for SFXPCConnection.PerformedInvocation(0, a8, a11, a12);
  v21 = *(_QWORD *)(v15 - 8);
  v22 = v15;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v21 - v16;
  sub_1A297CF68(a1, a2);
  v18 = a5;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A29FBC3C(a1, a2, a5, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v19 = sub_1A2AE36AC();
  sub_1A29B32D8((uint64_t)v17, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v17, v22);
}

uint64_t sub_1A2976D58(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 1684632949 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1A2976DCC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_1A2978730(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))SFXPCBlock.init(from:));
}

void sub_1A2976DE8()
{
  SFXPCBlock.encode(to:)();
}

uint64_t sub_1A2976DFC@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_1A2976E08(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A297D4F0, a2);
}

uint64_t sub_1A2976E08@<X0>(_QWORD *a1@<X1>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = a2(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1A2976E44(uint64_t a1)
{
  MEMORY[0x1A85895EC](&unk_1A2AFAF48, a1);
  return sub_1A2AE40FC();
}

uint64_t sub_1A2976E78(uint64_t a1)
{
  MEMORY[0x1A85895EC](&unk_1A2AFAF48, a1);
  return sub_1A2AE4108();
}

uint64_t _s7Sharing10SFXPCBlockV4bodyyq_xYaKcvg_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 68));
  swift_retain();
  return v2;
}

uint64_t SFXPCSyncBlock.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return sub_1A2976F0C(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for SFXPCSyncBlock);
}

uint64_t sub_1A2976F0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t (*a10)(_QWORD, _QWORD *))
{
  uint64_t result;
  _QWORD *v20;
  _QWORD v21[6];

  sub_1A2AE3124();
  v21[0] = a3;
  v21[1] = a4;
  v21[2] = a5;
  v21[3] = a6;
  v21[4] = a7;
  v21[5] = a8;
  result = a10(0, v21);
  v20 = (_QWORD *)(a9 + *(int *)(result + 68));
  *v20 = a1;
  v20[1] = a2;
  return result;
}

uint64_t SFXPCSyncBlock.dynamicallyCall(withArguments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  void (**v21)(char *, char *, ValueMetadata *);
  uint64_t v22;
  void (**Description)(char *, char *, ValueMetadata *);
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[6];

  v24 = a2;
  v26[5] = a3;
  v5 = *(ValueMetadata **)(a2 + 16);
  v6 = sub_1A2AE39F4();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v22 - v9;
  Description = (void (**)(char *, char *, ValueMetadata *))v5[-1].Description;
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v22 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v22 - v17;
  if (v5 == &type metadata for VoidParameters)
  {
    v26[3] = &type metadata for VoidParameters;
    tryCast<A>(_:as:description:file:line:)((uint64_t)v26, (uint64_t)&type metadata for VoidParameters, 0, 0, 0xD00000000000004CLL, 0x80000001A2B44FE0, 92, (uint64_t)&type metadata for VoidParameters, (uint64_t)v16);
    result = __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v26);
    if (v3)
      return result;
    v21 = Description;
    Description[4](v18, v16, &type metadata for VoidParameters);
  }
  else
  {
    v26[0] = a1;
    v19 = sub_1A2AE3670();
    MEMORY[0x1A85895EC](MEMORY[0x1E0DEAF50], v19);
    sub_1A2AE38E0();
    Optional.tryUnwrap(_:file:line:)(0xD000000000000025, 0x80000001A2B45090, 0xD00000000000004CLL, 0x80000001A2B44FE0, 94, v6, (uint64_t)v13);
    if (v3)
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v21 = Description;
    Description[4](v18, v13, v5);
  }
  (*(void (**)(char *))(v25 + *(int *)(v24 + 68)))(v18);
  return ((uint64_t (*)(char *, ValueMetadata *))v21[1])(v18, v5);
}

void SFXPCSyncBlock.encode(to:)()
{
  type metadata accessor for SFXPCSyncBlock.CodingKeys();
}

uint64_t sub_1A2977274(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[80];

  *(_QWORD *)(v2 - 288) = MEMORY[0x1A85895EC](&unk_1A2AFAF48, a1);
  v3 = sub_1A2AE3E50();
  *(_QWORD *)(v2 - 224) = v3;
  *(_QWORD *)(v2 - 296) = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  *(_QWORD *)(v2 - 232) = &v18[-v4];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  MEMORY[0x1E0C80A78](v5);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_1A2AE3C40();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  v12 = sub_1A2AE40B4();
  sub_1A2AE3C34();
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v11, v7, v8);
    if (*(_QWORD *)(v12 + 16) && (v14 = sub_1A297AF68((uint64_t)v11), (v15 & 1) != 0))
    {
      sub_1A296E4B4(*(_QWORD *)(v12 + 56) + 32 * v14, v2 - 176);
    }
    else
    {
      *(_OWORD *)(v2 - 176) = 0u;
      *(_OWORD *)(v2 - 160) = 0u;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
    sub_1A297CDE4(v2 - 176, v2 - 208, &qword_1ECEFB8A0);
    if (*(_QWORD *)(v2 - 184))
    {
      sub_1A296E4A4((_OWORD *)(v2 - 208), (_OWORD *)(v2 - 136));
      sub_1A296F108(v2 - 176, &qword_1ECEFB8A0);
      v16 = *(_QWORD *)(v2 - 72);
      sub_1A2974B98(v2 - 136, 0, 0, 0xD00000000000004CLL, 0x80000001A2B44FE0, 101, (void (*)(_QWORD))type metadata accessor for _SFXPCBlockContainer, 0xD000000000000014, 0x80000001A2AFAD30);
      if (!v16)
        sub_1A2977630();
      return __swift_destroy_boxed_opaque_existential_0Tm(v2 - 136);
    }
    else
    {
      sub_1A296F108(v2 - 208, &qword_1ECEFB8A0);
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v17 = 0xD000000000000011;
      *(_QWORD *)(v17 + 8) = 0x80000001A2B45050;
      *(_QWORD *)(v17 + 16) = 0xD00000000000004CLL;
      *(_QWORD *)(v17 + 24) = 0x80000001A2B44FE0;
      *(_QWORD *)(v17 + 32) = 100;
      *(_OWORD *)(v17 + 40) = 0u;
      *(_OWORD *)(v17 + 56) = 0u;
      *(_QWORD *)(v17 + 72) = 0;
      *(_QWORD *)(v17 + 80) = 0x2000000000000000;
      *(_QWORD *)(v17 + 88) = 0;
      *(_QWORD *)(v17 + 96) = 0;
      swift_willThrow();
      return sub_1A296F108(v2 - 176, &qword_1ECEFB8A0);
    }
  }
  return result;
}

void sub_1A2977630()
{
  type metadata accessor for SFXPCSyncBlock();
}

uint64_t sub_1A297767C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  _BYTE v20[96];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v20[-v6];
  v8 = sub_1A2AE3130();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, v1, v8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v1, a1);
  v12 = (*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v13 = (char *)swift_allocObject();
  v14 = *(_QWORD *)(v3 - 184);
  *((_QWORD *)v13 + 2) = v2;
  *((_QWORD *)v13 + 3) = v14;
  v15 = *(_QWORD *)(v3 - 168);
  *((_QWORD *)v13 + 4) = *(_QWORD *)(v3 - 176);
  *((_QWORD *)v13 + 5) = v15;
  v16 = *(_QWORD *)(v3 - 152);
  *((_QWORD *)v13 + 6) = *(_QWORD *)(v3 - 160);
  *((_QWORD *)v13 + 7) = v16;
  (*(void (**)(char *, _BYTE *, uint64_t))(v5 + 32))(&v13[v12], v7, a1);
  v17 = (_QWORD *)(*(_QWORD *)(v3 - 144) + OBJC_IVAR____SFXPCBlockContainer_registeredSyncBlocks);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 - 136) = *v17;
  *v17 = 0x8000000000000000;
  sub_1A2A22F24((uint64_t)sub_1A297CF88, (uint64_t)v13, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
  *v17 = *(_QWORD *)(v3 - 136);
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  return swift_endAccess();
}

void SFXPCSyncBlock.init(from:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[14];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a6;
  v18 = a5;
  v16[11] = a7;
  v17 = sub_1A2AE3130();
  v16[4] = *(_QWORD *)(v17 - 8);
  v13 = MEMORY[0x1E0C80A78](v17);
  v16[6] = (char *)v16 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[5] = v14;
  MEMORY[0x1E0C80A78](v13);
  v16[13] = (char *)v16 - v15;
  v19 = a1;
  v20 = a2;
  v21 = a3;
  v22 = a4;
  v23 = a5;
  v24 = a6;
  type metadata accessor for SFXPCSyncBlock.CodingKeys();
}

void sub_1A29778E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v15 = MEMORY[0x1A85895EC](&unk_1A2AFAF48, a1);
  *(_QWORD *)(v13 - 320) = a1;
  *(_QWORD *)(v13 - 328) = v15;
  v16 = sub_1A2AE3DA8();
  *(_QWORD *)(v13 - 304) = v16;
  *(_QWORD *)(v13 - 352) = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  *(_QWORD *)(v13 - 312) = (char *)&a9 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v19 = MEMORY[0x1E0C80A78](v18);
  *(_QWORD *)(v13 - 256) = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v21 = sub_1A2AE3C40();
  v22 = MEMORY[0x1E0C80A78](v21);
  *(_QWORD *)(v13 - 296) = (char *)&a9 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  *(_QWORD *)(v13 - 392) = v9;
  *(_QWORD *)(v13 - 136) = v9;
  *(_QWORD *)(v13 - 128) = v10;
  *(_QWORD *)(v13 - 384) = v10;
  *(_QWORD *)(v13 - 376) = v12;
  *(_QWORD *)(v13 - 120) = v12;
  *(_QWORD *)(v13 - 112) = v11;
  *(_QWORD *)(v13 - 368) = v11;
  v24 = *(_QWORD *)(v13 - 72);
  *(_QWORD *)(v13 - 104) = *(_QWORD *)(v13 - 248);
  *(_QWORD *)(v13 - 96) = v24;
  type metadata accessor for SFXPCSyncBlock();
}

uint64_t sub_1A2977A50(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(unint64_t, uint64_t, uint64_t);
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double (**v45)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v46;

  *(_QWORD *)(v6 - 424) = a1;
  *(_QWORD *)(v6 - 432) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v6 - 440) = (char *)&v46 - v7;
  v8 = v2[3];
  v9 = v2[4];
  *(_QWORD *)(v6 - 264) = v2;
  __swift_project_boxed_opaque_existential_1(v2, v8);
  *(_QWORD *)(v6 - 280) = v9;
  v10 = sub_1A2AE40B4();
  sub_1A2AE3C34();
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v1[6];
  *(_QWORD *)(v6 - 288) = v11;
  result = v11(v4, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v13 = (void (*)(uint64_t, uint64_t, uint64_t))v1[4];
    v14 = v5;
    v13(v3, v4, v5);
    if (*(_QWORD *)(v10 + 16))
    {
      v15 = sub_1A297AF68(v3);
      v16 = *(_QWORD *)(v6 - 256);
      if ((v17 & 1) != 0)
      {
        sub_1A296E4B4(*(_QWORD *)(v10 + 56) + 32 * v15, v6 - 176);
      }
      else
      {
        *(_OWORD *)(v6 - 176) = 0u;
        *(_OWORD *)(v6 - 160) = 0u;
      }
    }
    else
    {
      *(_OWORD *)(v6 - 176) = 0u;
      *(_OWORD *)(v6 - 160) = 0u;
      v16 = *(_QWORD *)(v6 - 256);
    }
    swift_bridgeObjectRelease();
    v18 = (void (*)(uint64_t, uint64_t))v1[1];
    v18(v3, v14);
    sub_1A297CDE4(v6 - 176, v6 - 208, &qword_1ECEFB8A0);
    if (!*(_QWORD *)(v6 - 184))
    {
      sub_1A296F108(v6 - 208, &qword_1ECEFB8A0);
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v21 = 0xD000000000000011;
      *(_QWORD *)(v21 + 8) = 0x80000001A2B45050;
      *(_QWORD *)(v21 + 16) = 0xD00000000000004CLL;
      *(_QWORD *)(v21 + 24) = 0x80000001A2B44FE0;
      *(_QWORD *)(v21 + 32) = 110;
      *(_OWORD *)(v21 + 40) = 0u;
      *(_OWORD *)(v21 + 56) = 0u;
      *(_QWORD *)(v21 + 72) = 0;
      *(_QWORD *)(v21 + 80) = 0x2000000000000000;
      *(_QWORD *)(v21 + 88) = 0;
      *(_QWORD *)(v21 + 96) = 0;
      swift_willThrow();
      sub_1A296F108(v6 - 176, &qword_1ECEFB8A0);
      goto LABEL_11;
    }
    sub_1A296E4A4((_OWORD *)(v6 - 208), (_OWORD *)(v6 - 136));
    sub_1A296F108(v6 - 176, &qword_1ECEFB8A0);
    v19 = *(_QWORD *)(v6 - 272);
    v20 = sub_1A2974D14(v6 - 136, 0, 0, 0xD00000000000004CLL, 0x80000001A2B44FE0, 111, &qword_1EE676768, 0xD000000000000012, 0x80000001A2B452C0);
    if (v19)
    {
      __swift_destroy_boxed_opaque_existential_0Tm(v6 - 136);
LABEL_11:
      v22 = *(_QWORD **)(v6 - 264);
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v22);
    }
    *(_QWORD *)(v6 - 272) = "sed to SFXPCBlock";
    *(_QWORD *)(v6 - 256) = v20;
    v23 = sub_1A2AE40B4();
    sub_1A2AE3C34();
    v24 = v14;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 - 288))(v16, 1, v14);
    if ((_DWORD)result != 1)
    {
      v25 = *(_QWORD *)(v6 - 296);
      v13(v25, v16, v14);
      if (*(_QWORD *)(v23 + 16))
      {
        v26 = sub_1A297AF68(v25);
        v27 = *(_QWORD *)(v6 - 304);
        v28 = *(_QWORD *)(v6 - 312);
        if ((v29 & 1) != 0)
        {
          sub_1A296E4B4(*(_QWORD *)(v23 + 56) + 32 * v26, v6 - 176);
        }
        else
        {
          *(_OWORD *)(v6 - 176) = 0u;
          *(_OWORD *)(v6 - 160) = 0u;
        }
      }
      else
      {
        *(_OWORD *)(v6 - 176) = 0u;
        *(_OWORD *)(v6 - 160) = 0u;
        v27 = *(_QWORD *)(v6 - 304);
        v28 = *(_QWORD *)(v6 - 312);
      }
      swift_bridgeObjectRelease();
      v18(v25, v24);
      sub_1A297CDE4(v6 - 176, v6 - 240, &qword_1ECEFB8A0);
      if (*(_QWORD *)(v6 - 216))
      {
        sub_1A296E4A4((_OWORD *)(v6 - 240), (_OWORD *)(v6 - 208));
        v30 = sub_1A2974B98(v6 - 208, 0, 0, 0xD00000000000004CLL, *(_QWORD *)(v6 - 272) | 0x8000000000000000, 116, (void (*)(_QWORD))type metadata accessor for _SFXPCContainerRegistry, 0xD000000000000017, 0x80000001A2B452A0);
        v22 = *(_QWORD **)(v6 - 264);
        v31 = v30;
        __swift_destroy_boxed_opaque_existential_0Tm(v6 - 208);
      }
      else
      {
        sub_1A296F108(v6 - 240, &qword_1ECEFB8A0);
        v31 = 0;
        v22 = *(_QWORD **)(v6 - 264);
      }
      __swift_project_boxed_opaque_existential_1(v22, v22[3]);
      sub_1A2AE40C0();
      sub_1A297CC38(&qword_1EE676788, MEMORY[0x1E0CB09E0]);
      v32 = *(_QWORD *)(v6 - 344);
      v33 = *(_QWORD *)(v6 - 336);
      sub_1A2AE3D78();
      v34 = *(_QWORD *)(v6 - 416);
      v35 = *(_QWORD *)(v6 - 440);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v35, v32, v33);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 352) + 8))(v28, v27);
      sub_1A296F108(v6 - 176, &qword_1ECEFB8A0);
      __swift_destroy_boxed_opaque_existential_0Tm(v6 - 136);
      v36 = v33;
      v37 = *(void (**)(unint64_t, uint64_t, uint64_t))(v34 + 32);
      v38 = *(_QWORD *)(v6 - 400);
      v37(v38, v32, v36);
      v39 = (*(unsigned __int8 *)(v34 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
      v40 = swift_allocObject();
      v41 = *(_QWORD *)(v6 - 384);
      *(_QWORD *)(v40 + 16) = *(_QWORD *)(v6 - 392);
      *(_QWORD *)(v40 + 24) = v41;
      v42 = *(_QWORD *)(v6 - 368);
      *(_QWORD *)(v40 + 32) = *(_QWORD *)(v6 - 376);
      *(_QWORD *)(v40 + 40) = v42;
      v43 = *(_QWORD *)(v6 - 256);
      v44 = *(_QWORD *)(v6 - 72);
      *(_QWORD *)(v40 + 48) = *(_QWORD *)(v6 - 248);
      *(_QWORD *)(v40 + 56) = v44;
      *(_QWORD *)(v40 + 64) = v43;
      strcpy((char *)(v40 + 72), "SFXPCSyncBlock");
      *(_BYTE *)(v40 + 87) = -18;
      *(_QWORD *)(v40 + 88) = v31;
      v37(v40 + v39, v38, v36);
      v45 = (double (**)@<D0>(uint64_t@<X0>, uint64_t@<X8>))(v35 + *(int *)(*(_QWORD *)(v6 - 424) + 68));
      *v45 = sub_1A297B1C8;
      v45[1] = (double (*)@<D0>(uint64_t@<X0>, uint64_t@<X8>))v40;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v6 - 432) + 32))(*(_QWORD *)(v6 - 360), v35);
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v22);
    }
  }
  __break(1u);
  return result;
}

__n128 sub_1A29780E4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, __int128 a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  __n128 result;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  swift_getObjectType();
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B380);
  v22 = a6;
  v23 = a7;
  v24 = a9;
  v25 = a10;
  v26 = a11;
  v27 = a2;
  v28 = a3;
  v29 = a1;
  v30 = a4;
  v31 = a5;
  sub_1A29FBF20(a2, a3, (void (*)(uint64_t))sub_1A297CEBC, (uint64_t)v21, v17, a7, a8);
  return result;
}

void sub_1A29781BC(id *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  objc_class *v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const void *v46;
  id v47;
  id v48;
  void *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id *v73;
  uint64_t v74;
  objc_class *v75;
  id v76;
  _QWORD aBlock[7];
  uint64_t v78;

  v75 = (objc_class *)a2;
  v66 = a6;
  v73 = a1;
  v74 = a4;
  v69 = a9;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v17 = sub_1A2AE4084();
  v64 = *(_QWORD *)(v17 - 8);
  v65 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v60 - v18;
  v70 = a8;
  v67 = a12;
  v68 = a13;
  v20 = type metadata accessor for SFXPCConnection.PerformedInvocation(0, a8, a12, a13);
  v21 = *(_QWORD *)(v20 - 8);
  v71 = v20;
  v72 = v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v60 - v23;
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v60 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = (id *)*v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v26, v74, a7);
  swift_retain();
  swift_bridgeObjectRetain();
  v28 = v75;
  v29 = v76;
  v75 = (objc_class *)a10;
  v30 = sub_1A29FB5B0(v28, a3, (uint64_t)v26, a5, a7, a10, a11);
  if (!v29)
  {
    v34 = v30;
    v35 = v31;
    v74 = 0;
    v61 = v24;
    v62 = v19;
    v63 = v32;
    v36 = v71;
    v76 = v33;
    sub_1A2AE39F4();
    v37 = (void *)swift_allocBox();
    v39 = v38;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v38, 1, 1, v36);
    v66 = sub_1A2AE30F4();
    v40 = (void *)sub_1A2AE2F74();
    v41 = (_QWORD *)swift_allocObject();
    v42 = v70;
    v41[2] = a7;
    v41[3] = v42;
    v41[4] = v75;
    v41[5] = a11;
    v43 = v39;
    v44 = v68;
    v41[6] = v67;
    v41[7] = v44;
    v41[8] = v37;
    aBlock[4] = sub_1A297CF1C;
    aBlock[5] = v41;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = &block_descriptor;
    v45 = _Block_copy(aBlock);
    v75 = (objc_class *)v35;
    v46 = v45;
    v68 = v34;
    v47 = v63;
    v48 = v76;
    v76 = v37;
    swift_retain();
    swift_release();
    v49 = (void *)v66;
    objc_msgSend(v73, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v66, v40, v47, v48, 1, v46);
    _Block_release(v46);

    swift_beginAccess();
    v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v43, 1, v36);
    v51 = v42;
    if (v50)
    {
      sub_1A29736C4(v68, (unint64_t)v75);

      v52 = 1;
      v53 = v69;
LABEL_4:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v53, v52, 1, v51);
      swift_release();
      return;
    }
    v54 = v68;
    v55 = (unint64_t)v75;
    v56 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v61, v43, v71);
    v57 = v56;
    v58 = v65;
    (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v62, v57, v65);
    v53 = v69;
    v59 = v74;
    sub_1A29FBE8C(v58, (uint64_t)&v78, v69);
    if (!v59)
    {
      sub_1A29736C4(v54, v55);

      v52 = 0;
      goto LABEL_4;
    }
    sub_1A29736C4(v54, v55);
    swift_release();

  }
}

uint64_t sub_1A29785CC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v22 = a8;
  v15 = type metadata accessor for SFXPCConnection.PerformedInvocation(255, a8, a11, a12);
  v16 = sub_1A2AE39F4();
  v23 = *(_QWORD *)(v16 - 8);
  v24 = v16;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v22 - v17;
  v19 = swift_projectBox();
  sub_1A297CF68(a1, a2);
  v20 = a5;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A29FBC3C(a1, a2, a5, (uint64_t)v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v18, 0, 1, v15);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 40))(v19, v18, v24);
}

uint64_t sub_1A2978714(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_1A2978730(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))SFXPCSyncBlock.init(from:));
}

uint64_t sub_1A2978730(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a4(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7]);
}

void sub_1A2978758()
{
  SFXPCSyncBlock.encode(to:)();
}

unint64_t sub_1A297876C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC6F0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE676738);
  v6 = sub_1A2AE3C7C();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1A297CDE4(v12, (uint64_t)v5, &qword_1ECEFC6F0);
    result = sub_1A297AF04((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_1A2AE3130();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    *(_QWORD *)(v7[7] + 8 * v16) = *(_QWORD *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A2978900(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC6F8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = sub_1A2AE3C7C();
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v9;
  }
  v11 = *(int *)(v4 + 48);
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v24[1] = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v5 + 72);
  swift_retain();
  while (1)
  {
    sub_1A297CDE4(v14, (uint64_t)v7, &qword_1ECEFC6F8);
    result = sub_1A297AF04((uint64_t)v7);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = v9[6];
    v20 = sub_1A2AE3130();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v7, v20);
    *(_OWORD *)(v9[7] + 16 * v18) = *(_OWORD *)&v7[v11];
    v21 = v9[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v9[2] = v23;
    v14 += v15;
    if (!--v10)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A2978A90(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6745B8);
  v2 = (_QWORD *)sub_1A2AE3C7C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_1A297B374(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_BYTE *)(v2[7] + result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A2978BA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B350);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B358);
  v6 = sub_1A2AE3C7C();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = &v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1A297CDE4(v12, (uint64_t)v5, &qword_1EE67B350);
    result = sub_1A297AF04((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_1A2AE3130();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    v19 = (_QWORD *)(v7[7] + 16 * v16);
    v20 = *((_QWORD *)v9 + 1);
    *v19 = *(_QWORD *)v9;
    v19[1] = v20;
    v21 = v7[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A2978D3C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B340);
  v2 = sub_1A2AE3C7C();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1A297CDE4(v6, (uint64_t)&v15, &qword_1EE67B348);
    v7 = v15;
    v8 = v16;
    result = sub_1A297B374(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_1A296E4A4(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id _SFXPCBlockContainer.__deallocating_deinit()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  objc_super v15;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = sub_1A2AE3130();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)&v0[OBJC_IVAR____SFXPCBlockContainer_containerRegistry];
  if (v9)
  {
    v10 = &v0[OBJC_IVAR____SFXPCBlockContainer_uuid];
    v11 = sub_1A2AE36E8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v10, v2);
    v12 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v13 = (char *)swift_allocObject();
    *((_QWORD *)v13 + 2) = 0;
    *((_QWORD *)v13 + 3) = 0;
    *((_QWORD *)v13 + 4) = v9;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(&v13[v12], v5, v2);
    swift_retain_n();
    sub_1A2974504((uint64_t)v8, (uint64_t)&unk_1EE67B160, (uint64_t)v13);
    swift_release();
    swift_release();
  }
  v15.receiver = v0;
  v15.super_class = ObjectType;
  return objc_msgSendSuper2(&v15, sel_dealloc);
}

uint64_t sub_1A29790B0(uint64_t a1, _OWORD *a2, _QWORD *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v8 + 240) = v21;
  *(_QWORD *)(v8 + 248) = v22;
  *(_OWORD *)(v8 + 224) = v20;
  *(_QWORD *)(v8 + 208) = a8;
  *(_QWORD *)(v8 + 216) = v19;
  *(_QWORD *)(v8 + 192) = a1;
  *(_QWORD *)(v8 + 200) = a7;
  *(_QWORD *)(v8 + 256) = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(v8 + 264) = swift_task_alloc();
  *(_QWORD *)(v8 + 272) = *(_QWORD *)(a8 - 8);
  *(_QWORD *)(v8 + 280) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  *(_QWORD *)(v8 + 288) = swift_task_alloc();
  *(_QWORD *)(v8 + 296) = swift_task_alloc();
  *(_QWORD *)(v8 + 304) = swift_task_alloc();
  *(_QWORD *)(v8 + 312) = swift_task_alloc();
  v15 = sub_1A2AE3C40();
  *(_QWORD *)(v8 + 320) = v15;
  *(_QWORD *)(v8 + 328) = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v8 + 336) = swift_task_alloc();
  *(_QWORD *)(v8 + 344) = swift_task_alloc();
  *(_QWORD *)(v8 + 352) = swift_task_alloc();
  *(_QWORD *)(v8 + 360) = swift_task_alloc();
  *(_OWORD *)(v8 + 368) = *a2;
  v16 = *a4;
  *(_QWORD *)(v8 + 384) = *a3;
  *(_QWORD *)(v8 + 392) = v16;
  v17 = *a6;
  *(_QWORD *)(v8 + 400) = *a5;
  *(_QWORD *)(v8 + 408) = v17;
  return swift_task_switch();
}

uint64_t sub_1A2979220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, _QWORD);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 312);
  sub_1A2AE2E00();
  swift_allocObject();
  *(_QWORD *)(v0 + 416) = sub_1A2AE2DF4();
  sub_1A2AE3C34();
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(_QWORD *)(v0 + 424) = v4;
  result = v4(v3, 1, v1);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 384);
    v7 = *(_QWORD *)(v0 + 360);
    v8 = *(_QWORD *)(v0 + 320);
    v9 = *(_QWORD *)(v0 + 312);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 328) + 32);
    *(_QWORD *)(v0 + 432) = v10;
    v10(v7, v9, v8);
    if (v6)
    {
      v11 = *(_QWORD *)(v0 + 384);
      *((_QWORD *)&v23 + 1) = swift_getObjectType();
      *(_QWORD *)&v22 = v11;
    }
    else
    {
      v22 = 0u;
      v23 = 0u;
    }
    v12 = *(_QWORD *)(v0 + 360);
    v13 = *(_QWORD *)(v0 + 320);
    v14 = *(_QWORD *)(v0 + 304);
    swift_unknownObjectRetain();
    v15 = (void (*)(uint64_t, _QWORD))sub_1A2AE2DE8();
    sub_1A29B3438((uint64_t)&v22, v12);
    v15(v0 + 64, 0);
    sub_1A2AE3C34();
    result = v4(v14, 1, v13);
    if ((_DWORD)result != 1)
    {
      v16 = *(_QWORD *)(v0 + 392);
      v10(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 320));
      if (v16)
      {
        v17 = *(_QWORD *)(v0 + 392);
        *((_QWORD *)&v23 + 1) = swift_getObjectType();
        *(_QWORD *)&v22 = v17;
      }
      else
      {
        v22 = 0u;
        v23 = 0u;
      }
      v18 = *(_QWORD *)(v0 + 352);
      swift_unknownObjectRetain();
      v19 = (void (*)(uint64_t, _QWORD))sub_1A2AE2DE8();
      sub_1A29B3438((uint64_t)&v22, v18);
      v19(v0 + 96, 0);
      sub_1A2AE2DDC();
      v20 = *(_OWORD *)(v0 + 224);
      *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 208);
      v21 = *(_OWORD *)(v0 + 240);
      *(_OWORD *)(v0 + 32) = v20;
      *(_OWORD *)(v0 + 48) = v21;
      type metadata accessor for SFXPCBlock();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A297954C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 448) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A29795B0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void (*v11)(uint64_t, _QWORD);
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  void (*v16)(uint64_t, _QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;

  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 296);
  sub_1A2AE2E30();
  swift_allocObject();
  sub_1A2AE2E24();
  sub_1A2AE3C34();
  result = v1(v3, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_8;
  }
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
  v6 = *(void **)(v0 + 400);
  v7 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 320);
  v9 = *(_QWORD *)(v0 + 288);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 432))(v7, *(_QWORD *)(v0 + 296), v8);
  v35 = type metadata accessor for _SFXPCAsyncSequenceContainer(0);
  v34[0] = v6;
  v10 = v6;
  v11 = (void (*)(uint64_t, _QWORD))sub_1A2AE2E18();
  sub_1A29B3438((uint64_t)v34, v7);
  v11(v0 + 128, 0);
  sub_1A2AE3C34();
  result = v5(v9, 1, v8);
  if ((_DWORD)result == 1)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v12 = *(_QWORD *)(v0 + 448);
  v13 = *(void **)(v0 + 408);
  v14 = *(_QWORD *)(v0 + 336);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 432))(v14, *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 320));
  v35 = type metadata accessor for _SFXPCBlockContainer();
  v34[0] = v13;
  v15 = v13;
  v16 = (void (*)(uint64_t, _QWORD))sub_1A2AE2E18();
  sub_1A29B3438((uint64_t)v34, v14);
  v16(v0 + 160, 0);
  v17 = sub_1A2AE2E0C();
  if (v12)
  {
    v20 = *(_QWORD *)(v0 + 272);
    v19 = *(_QWORD *)(v0 + 280);
    v22 = *(_QWORD *)(v0 + 256);
    v21 = *(_QWORD *)(v0 + 264);
    v24 = *(_QWORD *)(v0 + 208);
    v23 = *(_QWORD *)(v0 + 216);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v24);
  }
  else
  {
    v25 = v17;
    v26 = v18;
    v27 = *(_QWORD *)(v0 + 264);
    v32 = *(_QWORD *)(v0 + 272);
    v33 = *(_QWORD *)(v0 + 280);
    v28 = *(_QWORD *)(v0 + 256);
    v30 = *(_QWORD *)(v0 + 208);
    v29 = *(_QWORD *)(v0 + 216);
    v31 = *(uint64_t **)(v0 + 192);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v30);
    *v31 = v25;
    v31[1] = v26;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A297991C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 272);
  v1 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 208);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29799F4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void (*a4)(char *, char *, uint64_t)@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, __int128 a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  void (*v43)(_BYTE *, _QWORD);
  void (*v44)(_BYTE *, _QWORD);
  uint64_t v45;
  uint64_t v46;
  _QWORD v48[13];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[40];
  _QWORD *v61;

  v48[11] = a6;
  v61 = a5;
  v54 = a4;
  v48[1] = a8;
  v49 = a7;
  v48[4] = *(_QWORD *)(a7 - 8);
  v14 = MEMORY[0x1E0C80A78](a1);
  v48[12] = (char *)v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = v16;
  v48[10] = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v14);
  v55 = (char *)v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v19 = MEMORY[0x1E0C80A78](v18);
  v48[7] = (char *)v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v48[9] = (char *)v48 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)v48 - v24;
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)v48 - v26;
  v28 = sub_1A2AE3C40();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = MEMORY[0x1E0C80A78](v28);
  v48[3] = (char *)v48 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x1E0C80A78](v30);
  v48[6] = (char *)v48 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v36 = (char *)v48 - v35;
  MEMORY[0x1E0C80A78](v34);
  v38 = (char *)v48 - v37;
  v39 = *a1;
  v50 = a1[1];
  v51 = v39;
  v40 = *a2;
  v41 = *a3;
  v48[5] = *(_QWORD *)v54;
  v48[2] = *v61;
  sub_1A2AE2E00();
  swift_allocObject();
  v61 = (_QWORD *)sub_1A2AE2DF4();
  v48[8] = "rProtocol>\"24@\"_SFXPCError\"32";
  sub_1A2AE3C34();
  v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v42(v27, 1, v28) == 1)
  {
    __break(1u);
    goto LABEL_13;
  }
  v54 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
  v54(v38, v27, v28);
  if (v40)
  {
    *((_QWORD *)&v57 + 1) = swift_getObjectType();
    *(_QWORD *)&v56 = v40;
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  swift_unknownObjectRetain();
  v43 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
  sub_1A29B3438((uint64_t)&v56, (uint64_t)v38);
  v43(v60, 0);
  sub_1A2AE3C34();
  if (v42(v25, 1, v28) == 1)
  {
LABEL_13:
    __break(1u);
    JUMPOUT(0x1A297A06CLL);
  }
  v54(v36, v25, v28);
  if (v41)
  {
    *((_QWORD *)&v57 + 1) = swift_getObjectType();
    *(_QWORD *)&v56 = v41;
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  swift_unknownObjectRetain();
  v44 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
  sub_1A29B3438((uint64_t)&v56, (uint64_t)v36);
  v44(v60, 0);
  v45 = v52;
  v46 = v53;
  sub_1A2AE2DDC();
  if (!v45)
  {
    *(_QWORD *)&v56 = v46;
    *((_QWORD *)&v56 + 1) = v49;
    v57 = a9;
    v58 = a10;
    v59 = a11;
    type metadata accessor for SFXPCSyncBlock();
  }
  return swift_release();
}

void _SFXPCBlockContainer.invoke(_:parametersData:parametersAsyncSequenceContainer:parametersBlocksContainer:sync:completion:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, void (*a7)(uint64_t, unint64_t, id, void *, _QWORD), uint64_t a8)
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(_BYTE *, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  objc_class *v39;
  id v40;
  id v41;
  id v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  void (*v47)(uint64_t *__return_ptr, _QWORD *, uint64_t *, uint64_t *, id *, id *);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  _BYTE *v59;
  void *v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  void *v65;
  char *v66;
  uint64_t v67;
  id v68;
  id v69;
  id v70;
  void (*v71)(uint64_t, unint64_t, id, void *, _QWORD);
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  unint64_t v82;
  id v83;
  id v84;
  _BYTE v85[4];
  int v86;
  void (*v87)(_BYTE *, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, unint64_t, id, void *, _QWORD);
  Class v93;
  uint64_t v94;
  uint64_t ObjectType;
  id v96;
  uint64_t v97;
  _BYTE *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  unint64_t v104;
  id v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD v109[3];
  objc_super v110;

  v9 = v8;
  v97 = a8;
  v92 = (void (*)(uint64_t, unint64_t, id, void *, _QWORD))a7;
  LODWORD(v10) = a6;
  v91 = a5;
  v100 = a4;
  v90 = a3;
  v89 = a2;
  v96 = a1;
  ObjectType = swift_getObjectType();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v11);
  v102 = &v85[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_1A2AE3130();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x1E0C80A78](v13);
  v17 = &v85[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v16);
  v19 = &v85[-v18];
  v20 = *(_QWORD *)&v9[OBJC_IVAR____SFXPCBlockContainer_name];
  v21 = *(_QWORD *)&v9[OBJC_IVAR____SFXPCBlockContainer_name + 8];
  v99 = v9;
  v22 = *(_QWORD *)&v9[OBJC_IVAR____SFXPCBlockContainer_containerRegistry];
  v93 = (Class)type metadata accessor for _SFXPCAsyncSequenceContainer(0);
  v23 = objc_allocWithZone(v93);
  swift_retain();
  swift_bridgeObjectRetain();
  v24 = (char *)v23;
  sub_1A2AE3124();
  v25 = *(void (**)(_QWORD, _QWORD, _QWORD))(v14 + 16);
  v101 = v13;
  v26 = v13;
  v27 = (void (*)(_BYTE *, uint64_t, uint64_t))v25;
  v25(&v24[OBJC_IVAR____SFXPCAsyncSequenceContainer_uuid], v19, v26);
  v28 = &v24[OBJC_IVAR____SFXPCAsyncSequenceContainer_name];
  v94 = v20;
  *(_QWORD *)v28 = v20;
  *((_QWORD *)v28 + 1) = v21;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v24[OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences] = sub_1A297876C(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v24[OBJC_IVAR____SFXPCAsyncSequenceContainer_containerRegistry] = v22;
  swift_retain();

  v98 = v17;
  v88 = v15;
  v87 = v27;
  if (v22)
  {
    v29 = sub_1A2AE36E8();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v102, 1, 1, v29);
    v86 = v10;
    v10 = v101;
    v27(v17, (uint64_t)v19, v101);
    v30 = (*(unsigned __int8 *)(v14 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v31 = (v15 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    v32 = (char *)swift_allocObject();
    *((_QWORD *)v32 + 2) = 0;
    *((_QWORD *)v32 + 3) = 0;
    *((_QWORD *)v32 + 4) = v22;
    (*(void (**)(char *, _BYTE *, uint64_t))(v14 + 32))(&v32[v30], v17, v10);
    v33 = (uint64_t *)&v32[v31];
    v34 = v94;
    *v33 = v94;
    v33[1] = v21;
    swift_retain_n();
    swift_bridgeObjectRetain();
    v35 = v102;
    sub_1A2974504((uint64_t)v102, (uint64_t)&unk_1EE67B188, (uint64_t)v32);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v36 = v14;
    v37 = v10;
    LOBYTE(v10) = v86;
    (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v19, v37);
    v39 = (objc_class *)ObjectType;
    v38 = (uint64_t)v96;
  }
  else
  {
    v36 = v14;
    (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v19, v101);
    swift_bridgeObjectRelease();
    v39 = (objc_class *)ObjectType;
    v38 = (uint64_t)v96;
    v35 = v102;
    v34 = v94;
  }
  v110.receiver = v24;
  v110.super_class = v93;
  v40 = objc_msgSendSuper2(&v110, sel_init);
  swift_release();
  v41 = objc_allocWithZone(v39);
  swift_bridgeObjectRetain();
  swift_retain();
  v42 = sub_1A297B80C(v34, v21, v22);
  swift_release();
  if ((v10 & 1) != 0)
  {
    v43 = &v99[OBJC_IVAR____SFXPCBlockContainer_registeredSyncBlocks];
    swift_beginAccess();
    v44 = *(_QWORD *)v43;
    if (*(_QWORD *)(v44 + 16) && (v45 = sub_1A297AF04(v38), (v46 & 1) != 0))
    {
      v47 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t *, uint64_t *, id *, id *))(*(_QWORD *)(v44 + 56) + 16 * v45);
      swift_retain();
    }
    else
    {
      v47 = 0;
    }
    v71 = v92;
    swift_endAccess();
    strcpy((char *)v109, "no body for ");
    BYTE5(v109[1]) = 0;
    HIWORD(v109[1]) = -5120;
    sub_1A297CC38(&qword_1EE67B180, MEMORY[0x1E0CB09F0]);
    sub_1A2AE3E5C();
    sub_1A2AE34F0();
    swift_bridgeObjectRelease();
    v72 = v109[1];
    if (v47)
    {
      swift_bridgeObjectRelease();
      v109[0] = v89;
      v109[1] = v90;
      v107 = v91;
      v108 = v100;
      v105 = v42;
      v106 = v40;
      v47(&v103, v109, &v108, &v107, &v106, &v105);
      v73 = v42;
      sub_1A297CC78((uint64_t)v47);
      v81 = v103;
      v82 = v104;
      sub_1A2973524(v103, v104);
      v83 = v40;
      v84 = v73;
      v71(v81, v82, v40, v73, 0);

      sub_1A29736C4(v81, v82);
      sub_1A29736C4(v81, v82);
    }
    else
    {
      v74 = v109[0];
      sub_1A297AFB8();
      v75 = v42;
      v76 = (void *)swift_allocError();
      *(_QWORD *)v77 = v74;
      *(_QWORD *)(v77 + 8) = v72;
      *(_QWORD *)(v77 + 16) = 0xD00000000000004CLL;
      *(_QWORD *)(v77 + 24) = 0x80000001A2B44FE0;
      *(_QWORD *)(v77 + 32) = 203;
      *(_OWORD *)(v77 + 40) = 0u;
      *(_OWORD *)(v77 + 56) = 0u;
      *(_QWORD *)(v77 + 72) = 0;
      *(_QWORD *)(v77 + 80) = 0x2000000000000000;
      *(_QWORD *)(v77 + 88) = 0;
      *(_QWORD *)(v77 + 96) = 0;
      swift_willThrow();

      v78 = objc_allocWithZone((Class)type metadata accessor for _SFXPCError());
      v79 = v76;
      v80 = sub_1A2AB6180(v76);

      v71(0, 0xF000000000000000, 0, 0, v80);
    }
  }
  else
  {
    v48 = sub_1A2AE36E8();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v35, 1, 1, v48);
    v96 = v40;
    v49 = v101;
    v87(v98, v38, v101);
    v50 = v36;
    v51 = (*(unsigned __int8 *)(v36 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
    ObjectType = (uint64_t)v42;
    v52 = (v88 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
    v53 = (v52 + 23) & 0xFFFFFFFFFFFFFFF8;
    v54 = (v53 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = (v54 + 15) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v55 + 15) & 0xFFFFFFFFFFFFFFF8;
    v57 = (char *)swift_allocObject();
    *((_QWORD *)v57 + 2) = 0;
    *((_QWORD *)v57 + 3) = 0;
    v58 = v49;
    v59 = v98;
    v60 = v99;
    *((_QWORD *)v57 + 4) = v99;
    (*(void (**)(char *, _BYTE *, uint64_t))(v50 + 32))(&v57[v51], v59, v58);
    v61 = (uint64_t *)&v57[v52];
    v62 = v89;
    v63 = v90;
    *v61 = v89;
    v61[1] = v63;
    *(_QWORD *)&v57[v53] = v100;
    *(_QWORD *)&v57[v54] = v91;
    v65 = (void *)ObjectType;
    v64 = v96;
    *(_QWORD *)&v57[v55] = v96;
    *(_QWORD *)&v57[v56] = v65;
    v66 = &v57[(v56 + 15) & 0xFFFFFFFFFFFFFFF8];
    v67 = v97;
    *(_QWORD *)v66 = v92;
    *((_QWORD *)v66 + 1) = v67;
    v68 = v64;
    v69 = v65;
    v70 = v60;
    sub_1A2973524(v62, v63);
    swift_unknownObjectRetain();
    swift_retain();
    swift_unknownObjectRetain();
    sub_1A297AC0C((uint64_t)v102, (uint64_t)&unk_1EE67B178, (uint64_t)v57);

    swift_release();
  }
}

uint64_t sub_1A297A804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  *(_QWORD *)(v8 + 176) = v12;
  *(_OWORD *)(v8 + 144) = v10;
  *(_OWORD *)(v8 + 160) = v11;
  *(_QWORD *)(v8 + 128) = a7;
  *(_QWORD *)(v8 + 136) = a8;
  *(_QWORD *)(v8 + 112) = a5;
  *(_QWORD *)(v8 + 120) = a6;
  *(_QWORD *)(v8 + 104) = a4;
  return swift_task_switch();
}

uint64_t sub_1A297A838()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[2];

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 104) + OBJC_IVAR____SFXPCBlockContainer_registeredAsyncBlocks);
  swift_beginAccess();
  v2 = *v1;
  if (*(_QWORD *)(v2 + 16) && (v3 = sub_1A297AF04(*(_QWORD *)(v0 + 112)), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(v2 + 56) + 16 * v3;
    v7 = *(int **)v5;
    v6 = *(_QWORD *)(v5 + 8);
    swift_retain();
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *(_QWORD *)(v0 + 184) = v7;
  *(_QWORD *)(v0 + 192) = v6;
  swift_endAccess();
  strcpy((char *)v17, "no body for ");
  BYTE5(v17[1]) = 0;
  HIWORD(v17[1]) = -5120;
  sub_1A2AE3130();
  sub_1A297CC38(&qword_1EE67B180, MEMORY[0x1E0CB09F0]);
  sub_1A2AE3E5C();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  v8 = v17[1];
  if (v7)
  {
    v9 = *(_QWORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 144);
    v12 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 128);
    v16 = *(_OWORD *)(v0 + 152);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 40) = v12;
    *(_QWORD *)(v0 + 48) = v11;
    *(_QWORD *)(v0 + 72) = v9;
    *(_QWORD *)(v0 + 96) = v10;
    *(_OWORD *)(v0 + 80) = v16;
    *(_QWORD *)&v16 = (char *)v7 + *v7;
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 200) = v13;
    *v13 = v0;
    v13[1] = sub_1A297AA7C;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v16)(v0 + 56, v0 + 40, v0 + 72, v0 + 96, v0 + 80, v0 + 88);
  }
  else
  {
    sub_1A297AFB8();
    swift_allocError();
    *(_QWORD *)v15 = v17[0];
    *(_QWORD *)(v15 + 8) = v8;
    *(_QWORD *)(v15 + 16) = 0xD00000000000004CLL;
    *(_QWORD *)(v15 + 24) = 0x80000001A2B44FE0;
    *(_QWORD *)(v15 + 32) = 208;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_OWORD *)(v15 + 56) = 0u;
    *(_QWORD *)(v15 + 72) = 0;
    *(_QWORD *)(v15 + 80) = 0x2000000000000000;
    *(_QWORD *)(v15 + 88) = 0;
    *(_QWORD *)(v15 + 96) = 0;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A297AA7C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 208) = v0;
  swift_task_dealloc();
  sub_1A297CC78(*(_QWORD *)(v2 + 184));
  if (!v0)
    *(_OWORD *)(v2 + 216) = *(_OWORD *)(v2 + 56);
  return swift_task_switch();
}

uint64_t sub_1A297AAF0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, unint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 216);
  v1 = *(_QWORD *)(v0 + 224);
  v3 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, _QWORD))(v0 + 168);
  v5 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);
  sub_1A2973524(v2, v1);
  v3(v2, v1, v5, v4, 0);
  sub_1A29736C4(v2, v1);
  sub_1A29736C4(v2, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A297AB74()
{
  uint64_t v0;
  void *v1;
  void (*v2)(_QWORD, unint64_t, _QWORD, _QWORD, id);
  id v3;
  id v4;
  id v5;

  v1 = *(void **)(v0 + 208);
  v2 = *(void (**)(_QWORD, unint64_t, _QWORD, _QWORD, id))(v0 + 168);
  v3 = objc_allocWithZone((Class)type metadata accessor for _SFXPCError());
  v4 = v1;
  v5 = sub_1A2AB6180(v1);

  v2(0, 0xF000000000000000, 0, 0, v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A297AC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_1A2AE36E8();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_1A2AE36DC();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_1A296F108(a1, &qword_1ECEFB6D0);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1A2AE3688();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

id _SFXPCBlockContainer.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void _SFXPCBlockContainer.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t sub_1A297AF04(uint64_t a1)
{
  uint64_t v2;

  sub_1A2AE3130();
  sub_1A297CC38(&qword_1EE6766E0, MEMORY[0x1E0CB09C8]);
  v2 = sub_1A2AE3388();
  return sub_1A297B408(a1, v2);
}

unint64_t sub_1A297AF68(uint64_t a1)
{
  uint64_t v2;

  sub_1A2AE3C40();
  v2 = sub_1A2AE3388();
  return sub_1A297B540(a1, v2);
}

unint64_t sub_1A297AFB8()
{
  unint64_t result;

  result = qword_1EE67B148;
  if (!qword_1EE67B148)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFError, &type metadata for SFError);
    atomic_store(result, &qword_1EE67B148);
  }
  return result;
}

unint64_t sub_1A297AFFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE67AAD0;
  if (!qword_1EE67AAD0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE6764B8);
    result = MEMORY[0x1A85895EC](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1EE67AAD0);
  }
  return result;
}

uint64_t sub_1A297B04C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v6 = v2[2];
  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A2AE3130() - 8) + 80);
  v8 = v2[8];
  v9 = v2[9];
  v10 = v2[10];
  v11 = v2[11];
  v12 = (uint64_t)v2 + ((v7 + 96) & ~v7);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v13;
  *v13 = v3;
  v13[1] = sub_1A2971EBC;
  return sub_1A297662C(a1, a2, v8, v9, v10, v11, v12, v6);
}

void type metadata accessor for SFXPCSyncBlock()
{
  JUMPOUT(0x1A8589544);
}

void type metadata accessor for SFXPCSyncBlock.CodingKeys()
{
  JUMPOUT(0x1A8589544);
}

uint64_t objectdestroyTm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A2AE3130();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

double sub_1A297B1C8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  __int128 v11;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v11 = *(_OWORD *)(v2 + 32);
  v7 = *(_QWORD *)(v2 + 48);
  v8 = *(_QWORD *)(v2 + 56);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A2AE3130() - 8) + 80);
  *(_QWORD *)&result = sub_1A29780E4(a1, *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), v2 + ((v9 + 96) & (unint64_t)~v9), v5, v6, a2, v11, v7, v8).n128_u64[0];
  return result;
}

uint64_t sub_1A297B264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A2AE3130();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1A297B2E0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A2AE3130() - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1A2971EBC;
  return sub_1A29ED570(a1, v5, v6, v7, v8);
}

unint64_t sub_1A297B374(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A2AE400C();
  sub_1A2AE34C0();
  v4 = sub_1A2AE4030();
  return sub_1A297B668(a1, a2, v4);
}

unint64_t sub_1A297B3D8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A2AE3AE4();
  return sub_1A297B748(a1, v2);
}

unint64_t sub_1A297B408(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_1A2AE3130();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_1A297CC38(&qword_1EE675F50, MEMORY[0x1E0CB09D0]);
      v14 = sub_1A2AE33DC();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_1A297B540(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_1A2AE3C40();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_1A2AE33DC();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_1A297B668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1A2AE3EE0() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1A2AE3EE0() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1A297B748(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1A297C29C(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x1A8587198](v9, a1);
      sub_1A297C2D8((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

id sub_1A297B80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  objc_class *ObjectType;
  uint64_t v29;
  objc_super v30;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v8);
  v29 = (uint64_t)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A2AE3130();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v26 - v15;
  v17 = v4;
  sub_1A2AE3124();
  v18 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v18(&v17[OBJC_IVAR____SFXPCBlockContainer_uuid], v16, v10);
  v19 = &v17[OBJC_IVAR____SFXPCBlockContainer_name];
  v27 = a1;
  *(_QWORD *)v19 = a1;
  *((_QWORD *)v19 + 1) = a2;
  swift_bridgeObjectRetain();
  v20 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v17[OBJC_IVAR____SFXPCBlockContainer_registeredAsyncBlocks] = sub_1A2978900(MEMORY[0x1E0DEE9D8], &qword_1EE67B370);
  *(_QWORD *)&v17[OBJC_IVAR____SFXPCBlockContainer_registeredSyncBlocks] = sub_1A2978900(v20, &qword_1EE67B368);
  *(_QWORD *)&v17[OBJC_IVAR____SFXPCBlockContainer_containerRegistry] = a3;
  swift_retain();

  if (a3)
  {
    v21 = sub_1A2AE36E8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v29, 1, 1, v21);
    v18(v14, v16, v10);
    v22 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v23 = (char *)swift_allocObject();
    *((_QWORD *)v23 + 2) = 0;
    *((_QWORD *)v23 + 3) = 0;
    *((_QWORD *)v23 + 4) = a3;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v23[v22], v14, v10);
    v24 = &v23[(v12 + v22 + 7) & 0xFFFFFFFFFFFFFFF8];
    *(_QWORD *)v24 = v27;
    *((_QWORD *)v24 + 1) = a2;
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_1A2974504(v29, (uint64_t)&unk_1EE67B360, (uint64_t)v23);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    swift_bridgeObjectRelease();
  }
  v30.receiver = v17;
  v30.super_class = ObjectType;
  return objc_msgSendSuper2(&v30, sel_init);
}

uint64_t sub_1A297BAB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v21;

  v2 = *(_QWORD *)(sub_1A2AE3130() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)(v0 + 32);
  v10 = v0 + v3;
  v11 = (uint64_t *)(v0 + v4);
  v12 = *v11;
  v13 = v11[1];
  v14 = *(_QWORD *)(v0 + v5);
  v15 = *(_QWORD *)(v0 + v6);
  v16 = *(_QWORD *)(v0 + v7);
  v17 = *(_QWORD *)(v0 + v8);
  v18 = swift_task_alloc();
  v19 = *(_OWORD *)(v0 + v9);
  *(_QWORD *)(v1 + 16) = v18;
  *(_QWORD *)v18 = v1;
  *(_QWORD *)(v18 + 8) = sub_1A2972038;
  *(_OWORD *)(v18 + 168) = v19;
  *(_QWORD *)(v18 + 152) = v16;
  *(_QWORD *)(v18 + 160) = v17;
  *(_QWORD *)(v18 + 136) = v14;
  *(_QWORD *)(v18 + 144) = v15;
  *(_QWORD *)(v18 + 120) = v12;
  *(_QWORD *)(v18 + 128) = v13;
  *(_QWORD *)(v18 + 104) = v21;
  *(_QWORD *)(v18 + 112) = v10;
  return swift_task_switch();
}

uint64_t sub_1A297BBC4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(sub_1A2AE3130() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_1A2972038;
  return sub_1A29ED2D0(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1A297BC80()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1A297BCA4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A297BCB4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A297BCC4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A2AE3130();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A297BD38(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_1A2AE3130();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 68);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
  }
  swift_retain();
  return a1;
}

uint64_t sub_1A297BDC8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t sub_1A297BE10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 68);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  return a1;
}

uint64_t sub_1A297BE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 68);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1A297BEEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 68)) = *(_OWORD *)(a2 + *(int *)(a3 + 68));
  return a1;
}

uint64_t sub_1A297BF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 68)) = *(_OWORD *)(a2 + *(int *)(a3 + 68));
  swift_release();
  return a1;
}

uint64_t sub_1A297BFB0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1A2AE3130();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 68));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1A297C03C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1A2AE3130();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 68)) = (a2 - 1);
  return result;
}

uint64_t sub_1A297C0C4()
{
  return type metadata accessor for _SFXPCBlockContainer();
}

uint64_t type metadata accessor for _SFXPCBlockContainer()
{
  uint64_t result;

  result = qword_1ECEFC808;
  if (!qword_1ECEFC808)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A297C108()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A2AE3130();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for _SFXPCBlockContainer()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1A297C1A4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1A297C1B0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A297C1F0 + 4 * byte_1A2AFAC30[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A297C210 + 4 * byte_1A2AFAC35[v4]))();
}

_BYTE *sub_1A297C1F0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A297C210(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A297C218(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A297C220(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A297C228(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A297C230(_DWORD *result)
{
  *result = 0;
  return result;
}

void sub_1A297C23C()
{
  JUMPOUT(0x1A85895ECLL);
}

void sub_1A297C24C()
{
  JUMPOUT(0x1A85895ECLL);
}

void sub_1A297C25C()
{
  JUMPOUT(0x1A85895ECLL);
}

void sub_1A297C26C()
{
  JUMPOUT(0x1A85895ECLL);
}

void sub_1A297C27C()
{
  JUMPOUT(0x1A85895ECLL);
}

void sub_1A297C28C()
{
  JUMPOUT(0x1A85895ECLL);
}

uint64_t sub_1A297C29C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1A297C2D8(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

uint64_t sub_1A297C30C(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, char *a7, const void *a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t *v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  id v42;
  id v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  void (*v48)(_QWORD *__return_ptr, _QWORD *, uint64_t *, uint64_t *, id *, id *);
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  void *v63;
  void (**v64)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  id v66;
  id v67;
  char *v68;
  void (**v69)(const void *, void *, id, id, _QWORD);
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  id v74;
  id v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  id v79;
  id v80;
  void *v81;
  char *v83;
  void (**v84)(const void *, void *, id, id, _QWORD);
  void (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  Class v93;
  id v94;
  id v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  _QWORD v100[2];
  id v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[3];
  objc_super v106;

  LODWORD(v94) = a6;
  v89 = a5;
  v90 = a4;
  v88 = a3;
  v87 = a2;
  v95 = a1;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v10);
  v96 = (uint64_t)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A2AE3130();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = MEMORY[0x1E0C80A78](v12);
  v98 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v83 - v16;
  v92 = swift_allocObject();
  *(_QWORD *)(v92 + 16) = a8;
  v19 = *(_QWORD *)&a7[OBJC_IVAR____SFXPCBlockContainer_name];
  v18 = *(_QWORD *)&a7[OBJC_IVAR____SFXPCBlockContainer_name + 8];
  v97 = a7;
  v20 = *(_QWORD *)&a7[OBJC_IVAR____SFXPCBlockContainer_containerRegistry];
  v93 = (Class)type metadata accessor for _SFXPCAsyncSequenceContainer(0);
  v21 = objc_allocWithZone(v93);
  _Block_copy(a8);
  swift_retain();
  swift_bridgeObjectRetain();
  v22 = (char *)v21;
  sub_1A2AE3124();
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v99 = v12;
  v24 = v12;
  v25 = v19;
  v26 = v23;
  v23(&v22[OBJC_IVAR____SFXPCAsyncSequenceContainer_uuid], (uint64_t)v17, v24);
  v27 = (uint64_t *)&v22[OBJC_IVAR____SFXPCAsyncSequenceContainer_name];
  *v27 = v25;
  v27[1] = v18;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v22[OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences] = sub_1A297876C(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v22[OBJC_IVAR____SFXPCAsyncSequenceContainer_containerRegistry] = v20;
  swift_retain();

  v84 = (void (**)(const void *, void *, id, id, _QWORD))a8;
  v86 = v14;
  v85 = v26;
  if (v20)
  {
    v28 = sub_1A2AE36E8();
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
    v91 = v25;
    v30 = v96;
    v29(v96, 1, 1, v28);
    v31 = v98;
    v83 = v17;
    v32 = (void (*)(char *, char *, uint64_t))v26;
    v33 = v99;
    v32(v98, v17, v99);
    v34 = (*(unsigned __int8 *)(v13 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v35 = (v14 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    v36 = (char *)swift_allocObject();
    *((_QWORD *)v36 + 2) = 0;
    *((_QWORD *)v36 + 3) = 0;
    *((_QWORD *)v36 + 4) = v20;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v36[v34], v31, v33);
    v37 = (uint64_t *)&v36[v35];
    *v37 = v91;
    v37[1] = v18;
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_1A2974504(v30, (uint64_t)&unk_1EE67B318, (uint64_t)v36);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v38 = v13;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v83, v33);
    v39 = (uint64_t)v95;
    v40 = v30;
    v25 = v91;
  }
  else
  {
    v38 = v13;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v99);
    swift_bridgeObjectRelease();
    v39 = (uint64_t)v95;
    v40 = v96;
  }
  v41 = (char)v94;
  v106.receiver = v22;
  v106.super_class = v93;
  v42 = objc_msgSendSuper2(&v106, sel_init);
  swift_release();
  objc_allocWithZone((Class)type metadata accessor for _SFXPCBlockContainer());
  swift_bridgeObjectRetain();
  swift_retain();
  v43 = sub_1A297B80C(v25, v18, v20);
  swift_release();
  if ((v41 & 1) != 0)
  {
    v44 = &v97[OBJC_IVAR____SFXPCBlockContainer_registeredSyncBlocks];
    swift_beginAccess();
    v45 = *(_QWORD *)v44;
    if (*(_QWORD *)(v45 + 16) && (v46 = sub_1A297AF04(v39), (v47 & 1) != 0))
    {
      v48 = *(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t *, uint64_t *, id *, id *))(*(_QWORD *)(v45 + 56) + 16 * v46);
      swift_retain();
    }
    else
    {
      v48 = 0;
    }
    v69 = v84;
    swift_endAccess();
    strcpy((char *)v105, "no body for ");
    BYTE5(v105[1]) = 0;
    HIWORD(v105[1]) = -5120;
    sub_1A297CC38(&qword_1EE67B180, MEMORY[0x1E0CB09F0]);
    sub_1A2AE3E5C();
    sub_1A2AE34F0();
    swift_bridgeObjectRelease();
    v70 = v105[1];
    if (v48)
    {
      swift_bridgeObjectRelease();
      v105[0] = v87;
      v105[1] = v88;
      v103 = v89;
      v104 = v90;
      v101 = v43;
      v102 = v42;
      v48(v100, v105, &v104, &v103, &v102, &v101);
      sub_1A297CC78((uint64_t)v48);
      v77 = v100[0];
      v78 = v100[1];
      v79 = v42;
      v80 = v43;
      sub_1A2973524(v77, v78);
      v81 = (void *)sub_1A2AE2F74();
      v69[2](v69, v81, v79, v80, 0);

      sub_1A29736C4(v77, v78);
      sub_1A29736C4(v77, v78);
    }
    else
    {
      v71 = v105[0];
      sub_1A297AFB8();
      v72 = (void *)swift_allocError();
      *(_QWORD *)v73 = v71;
      *(_QWORD *)(v73 + 8) = v70;
      *(_QWORD *)(v73 + 16) = 0xD00000000000004CLL;
      *(_QWORD *)(v73 + 24) = 0x80000001A2B44FE0;
      *(_QWORD *)(v73 + 32) = 203;
      *(_OWORD *)(v73 + 40) = 0u;
      *(_OWORD *)(v73 + 56) = 0u;
      *(_QWORD *)(v73 + 72) = 0;
      *(_QWORD *)(v73 + 80) = 0x2000000000000000;
      *(_QWORD *)(v73 + 88) = 0;
      *(_QWORD *)(v73 + 96) = 0;
      swift_willThrow();

      v74 = objc_allocWithZone((Class)type metadata accessor for _SFXPCError());
      v75 = v72;
      v76 = sub_1A2AB6180(v72);

      ((void (**)(const void *, void *, id, id, id))v69)[2](v69, 0, 0, 0, v76);
    }
  }
  else
  {
    v49 = sub_1A2AE36E8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v40, 1, 1, v49);
    v95 = v43;
    v50 = v99;
    v85(v98, v39, v99);
    v51 = (*(unsigned __int8 *)(v38 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
    v52 = (v86 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
    v53 = (v52 + 23) & 0xFFFFFFFFFFFFFFF8;
    v54 = (v53 + 15) & 0xFFFFFFFFFFFFFFF8;
    v94 = v42;
    v55 = (v54 + 15) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v55 + 15) & 0xFFFFFFFFFFFFFFF8;
    v57 = (char *)swift_allocObject();
    *((_QWORD *)v57 + 2) = 0;
    *((_QWORD *)v57 + 3) = 0;
    v58 = v98;
    *((_QWORD *)v57 + 4) = v97;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(&v57[v51], v58, v50);
    v59 = (uint64_t *)&v57[v52];
    v60 = v87;
    v61 = v88;
    *v59 = v87;
    v59[1] = v61;
    *(_QWORD *)&v57[v53] = v90;
    *(_QWORD *)&v57[v54] = v89;
    v62 = v94;
    v63 = v95;
    *(_QWORD *)&v57[v55] = v94;
    *(_QWORD *)&v57[v56] = v63;
    v64 = (void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))&v57[(v56 + 15) & 0xFFFFFFFFFFFFFFF8];
    v65 = v92;
    *v64 = sub_1A297CB10;
    v64[1] = (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))v65;
    v66 = v62;
    v67 = v63;
    v68 = v97;
    sub_1A2973524(v60, v61);
    swift_unknownObjectRetain();
    swift_retain();
    swift_unknownObjectRetain();
    sub_1A297AC0C(v96, (uint64_t)&unk_1EE67B310, (uint64_t)v57);
    swift_release();

  }
  return swift_release();
}

uint64_t sub_1A297CAEC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_1A297CB10(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  sub_1A2AB14B4(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16));
}

uint64_t objectdestroy_12Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = sub_1A2AE3130();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (((((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  sub_1A29736C4(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A297CC20(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1A297CC38(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1A2AE3130();
    result = MEMORY[0x1A85895EC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A297CC78(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t objectdestroy_16Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A2AE3130();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A297CD28(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(sub_1A2AE3130() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_1A2972038;
  return sub_1A29ED180(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1A297CDE4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1A297CE28()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A297CE4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A2972038;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EE67E588 + dword_1EE67E588))(a1, v4);
}

void sub_1A297CEBC(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1A29781BC(a1, *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_1A297CEF8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A297CF1C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t *v5;

  return sub_1A29785CC(a1, a2, a3, a4, a5, v5[8], v5[2], v5[3], v5[4], v5[5], v5[6], v5[7]);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_1A297CF68(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1A2973524(a1, a2);
  return a1;
}

void sub_1A297CF7C()
{
  objectdestroy_49Tm((void (*)(_QWORD, _OWORD *))type metadata accessor for SFXPCSyncBlock);
}

void sub_1A297CF88()
{
  type metadata accessor for SFXPCSyncBlock();
}

uint64_t sub_1A297CFDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t *v12;
  uint64_t *v13;
  void (*v14)(char *, char *, uint64_t);
  _QWORD *v15;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  *(_QWORD *)&v11 = v3;
  *((_QWORD *)&v11 + 1) = v4;
  return sub_1A29799F4(v7, v12, v13, v14, v15, v2 + ((v9 + 64) & ~v9), v1, v8, v11, v5, v6);
}

uint64_t sub_1A297D034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = sub_1A2AE3130();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

__n128 sub_1A297D0FC(objc_class **a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v5 = *(_QWORD *)(v2 + 16);
  v12 = *(_OWORD *)(v2 + 40);
  v13 = *(_OWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A2AE3130() - 8) + 80);
  sub_1A2976970(a1, a2, *(objc_class **)(v2 + 64), *(_QWORD *)(v2 + 72), v2 + v8, *(_QWORD *)(v2 + v9), v2 + ((v9 + v10 + 8) & ~v10), v5, v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v6);
  return result;
}

uint64_t sub_1A297D1C4()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v1 = sub_1A2AE36AC();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_1A297D244(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;

  v11 = *(_QWORD *)(v5 + 16);
  v12 = *(_QWORD *)(v5 + 24);
  v17 = *(_OWORD *)(v5 + 32);
  v13 = *(_QWORD *)(v5 + 48);
  v14 = *(_QWORD *)(v5 + 56);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v15 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A2AE36AC() - 8) + 80);
  return sub_1A2976C30(a1, a2, a3, a4, a5, v5 + ((v15 + 64) & ~v15), v11, v12, v17, *((uint64_t *)&v17 + 1), v13, v14);
}

void sub_1A297D30C()
{
  objectdestroy_49Tm((void (*)(_QWORD, _OWORD *))type metadata accessor for SFXPCBlock);
}

void objectdestroy_49Tm(void (*a1)(_QWORD, _OWORD *))
{
  _OWORD *v1;
  __int128 v2;
  _OWORD v3[3];

  v2 = v1[2];
  v3[0] = v1[1];
  v3[1] = v2;
  v3[2] = v1[3];
  a1(0, v3);
  JUMPOUT(0x1A297D350);
}

void sub_1A297D3C8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v5 = v0[6];
  v6 = v0[7];
  v1[2] = v0[2];
  v1[3] = v2;
  v1[4] = v3;
  v1[5] = v4;
  v1[6] = v5;
  v1[7] = v6;
  type metadata accessor for SFXPCBlock();
}

uint64_t sub_1A297D428(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;

  v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v13 = v2 + ((v12 + 64) & ~v12);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 64) = v14;
  *v14 = v4;
  v14[1] = sub_1A297D4A8;
  *(_QWORD *)(v11 + 40) = v5;
  *(_QWORD *)(v11 + 48) = v6;
  *(_QWORD *)(v11 + 24) = v1;
  *(_QWORD *)(v11 + 32) = v3;
  *(_QWORD *)(v11 + 16) = v10;
  return sub_1A29790B0(v8, v7, v16, v17, v18, *(uint64_t **)(v11 + 56), v13, v9);
}

uint64_t sub_1A297D4A8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void SFAirDropReceive.Transfer.State.sfTransferState.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for SFAirDropReceive.Failure();
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  MEMORY[0x1E0C80A78](v2);
  sub_1A2990388(v0, (uint64_t)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v5 = (char *)sub_1A297D5D4 + 4 * (unsigned __int16)aDjx[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A297D5D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
  swift_bridgeObjectRelease();
  sub_1A296F108(v0 + *(int *)(v1 + 64), &qword_1EE67B3C0);
  sub_1A297DA3C(v0, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.ItemDestination);
  return 5;
}

uint64_t type metadata accessor for SFAirDropReceive.Transfer.State(uint64_t a1)
{
  return sub_1A29903E0(a1, (uint64_t *)&unk_1EE6747B8);
}

uint64_t sub_1A297DA3C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *sub_1A297DA78(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = a1[9];
  v3 = a1[10];
  v4 = a1[11];
  v5 = a1[12];
  v6 = a1[13];
  v7 = a1[14];
  v8 = a1[15];
  v9 = a1[16];
  v10 = a1[17];
  sub_1A297DB18(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8]);
  sub_1A297DB18(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t sub_1A297DB18(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t result;

  if (a4 >= 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1A2973568();
    return sub_1A29736C4(a8, a9);
  }
  return result;
}

uint64_t sub_1A297DB90(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 62 == 1)
    return swift_bridgeObjectRelease();
  return result;
}

void SFAirDropReceive.Transfer.State.permissionRequest.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
  MEMORY[0x1E0C80A78](v4);
  sub_1A2990388(v0, (uint64_t)v3, type metadata accessor for SFAirDropReceive.Transfer.State);
  v5 = (char *)sub_1A297DC84 + 4 * byte_1A2AFB02C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A297DC84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1A2990414(v2, v3, &qword_1EE67B3C0);
  sub_1A2990414(v3, v0, &qword_1EE67B3C0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v0, 0, 1, v1);
}

uint64_t SFAirDropReceive.Transfer.State.contactResponsePermissionRequest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int EnumCaseMultiPayload;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v4 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2990388(v2, (uint64_t)v6, type metadata accessor for SFAirDropReceive.Transfer.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v18 = v7;
    v19 = a1;
    v12 = (uint64_t *)&unk_1EE67B3F8;
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 13)
  {
    v18 = v7;
    v19 = a1;
    v12 = (uint64_t *)&unk_1EE67B3A8;
LABEL_5:
    v14 = *((_QWORD *)v6 + 7);
    v13 = *((_QWORD *)v6 + 8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1A2973568();
    sub_1A29736C4(v14, v13);
    v15 = __swift_instantiateConcreteTypeFromMangledName(v12);
    sub_1A2990414((uint64_t)&v6[*(int *)(v15 + 48)], (uint64_t)v10, &qword_1EE67B3B0);
    v16 = v19;
    sub_1A2990414((uint64_t)v10, v19, &qword_1EE67B3B0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v16, 0, 1, v18);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, 1, 1, v7);
  return sub_1A297DA3C((uint64_t)v6, type metadata accessor for SFAirDropReceive.Transfer.State);
}

uint64_t SFAirDropReceive.Transfer.State.cancelAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD);
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v2 = v1;
  v74 = a1;
  v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
  v3 = MEMORY[0x1E0C80A78](v70);
  v66 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v65 = (char *)&v61 - v5;
  v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
  v6 = MEMORY[0x1E0C80A78](v69);
  v68 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v67 = (uint64_t)&v61 - v8;
  v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
  v9 = MEMORY[0x1E0C80A78](v71);
  v63 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v61 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v61 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v64 = (uint64_t)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v61 - v20;
  v22 = MEMORY[0x1E0C80A78](v19);
  v62 = (uint64_t)&v61 - v23;
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v61 - v24;
  v26 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for SFAirDrop.DeclineAction();
  v72 = *(_QWORD *)(v29 - 8);
  v73 = v29;
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v61 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2990388(v2, (uint64_t)v28, type metadata accessor for SFAirDropReceive.Transfer.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      sub_1A2990414((uint64_t)v28, (uint64_t)v25, &qword_1EE67B3C0);
      sub_1A297CDE4((uint64_t)&v25[*(int *)(v16 + 60)], (uint64_t)v15, &qword_1EE67B408);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v74, 1, 1, v73);
        sub_1A296F108((uint64_t)v15, &qword_1EE67B408);
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418);
        v57 = v74;
        sub_1A297EB48((uint64_t)&v15[*(int *)(v56 + 80)], v74, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.DeclineAction);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v72 + 56))(v57, 0, 1, v73);
      }
      v51 = &qword_1EE67B3C0;
      v58 = (uint64_t)v25;
      return sub_1A296F108(v58, v51);
    case 1u:
      v37 = *((_QWORD *)v28 + 7);
      v38 = *((_QWORD *)v28 + 8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1A2973568();
      sub_1A29736C4(v37, v38);
      v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F8);
      v40 = v67;
      sub_1A2990414((uint64_t)&v28[*(int *)(v39 + 48)], v67, &qword_1EE67B3B0);
      v41 = v40 + *(int *)(v69 + 60);
      v42 = (uint64_t)v65;
      goto LABEL_15;
    case 2u:
      v40 = v62;
      sub_1A2990414((uint64_t)v28, v62, &qword_1EE67B3C0);
      sub_1A297CDE4(v40 + *(int *)(v16 + 60), (uint64_t)v13, &qword_1EE67B408);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v74, 1, 1, v73);
        v43 = (uint64_t)v13;
        goto LABEL_22;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v59 = (uint64_t)&v13[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80)];
      goto LABEL_27;
    case 3u:
      v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F0);
      sub_1A297DB90(*(_QWORD *)&v28[*(int *)(v44 + 48)], *(_QWORD *)&v28[*(int *)(v44 + 48) + 8], *(_QWORD *)&v28[*(int *)(v44 + 48) + 16]);
      goto LABEL_13;
    case 4u:
      v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E8);
LABEL_13:
      swift_bridgeObjectRelease();
      sub_1A297EB48((uint64_t)&v28[*(int *)(v44 + 80)], (uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.DeclineAction);
      sub_1A297DA3C((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.ItemDestination);
      v45 = v74;
      sub_1A297EB48((uint64_t)v31, v74, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.DeclineAction);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v72 + 56))(v45, 0, 1, v73);
    case 5u:
    case 6u:
      v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
      swift_bridgeObjectRelease();
      v33 = *(int *)(v32 + 64);
      goto LABEL_4;
    case 8u:
    case 9u:
      v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v33 = *(int *)(v34 + 80);
LABEL_4:
      sub_1A2990414((uint64_t)&v28[v33], (uint64_t)v21, &qword_1EE67B3C0);
      sub_1A297EA08(v74);
      sub_1A296F108((uint64_t)v21, &qword_1EE67B3C0);
      v35 = (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.ItemDestination;
      return sub_1A297DA3C((uint64_t)v28, v35);
    case 0xBu:
      v52 = *((_QWORD *)v28 + 7);
      v53 = *((_QWORD *)v28 + 8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1A2973568();
      sub_1A29736C4(v52, v53);
      v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B8);
      v40 = v64;
      sub_1A2990414((uint64_t)&v28[*(int *)(v54 + 48)], v64, &qword_1EE67B3C0);
      v55 = v63;
      sub_1A297CDE4(v40 + *(int *)(v16 + 60), v63, &qword_1EE67B408);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v74, 1, 1, v73);
        v43 = v55;
LABEL_22:
        sub_1A296F108(v43, &qword_1EE67B408);
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v59 = v55 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
LABEL_27:
        v60 = v74;
        sub_1A297EB48(v59, v74, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.DeclineAction);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v72 + 56))(v60, 0, 1, v73);
      }
      v51 = &qword_1EE67B3C0;
LABEL_29:
      v58 = v40;
      return sub_1A296F108(v58, v51);
    case 0xDu:
      v46 = *((_QWORD *)v28 + 7);
      v47 = *((_QWORD *)v28 + 8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1A2973568();
      sub_1A29736C4(v46, v47);
      v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A8);
      v40 = v68;
      sub_1A2990414((uint64_t)&v28[*(int *)(v48 + 48)], v68, &qword_1EE67B3B0);
      v41 = v40 + *(int *)(v69 + 60);
      v42 = (uint64_t)v66;
LABEL_15:
      sub_1A297CDE4(v41, v42, &qword_1EE67B400);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v74, 1, 1, v73);
        sub_1A296F108(v42, &qword_1EE67B400);
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v49 = v42 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
        v50 = v74;
        sub_1A297EB48(v49, v74, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.DeclineAction);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v72 + 56))(v50, 0, 1, v73);
      }
      v51 = &qword_1EE67B3B0;
      goto LABEL_29;
    default:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v74, 1, 1, v73);
      v35 = type metadata accessor for SFAirDropReceive.Transfer.State;
      return sub_1A297DA3C((uint64_t)v28, v35);
  }
}

uint64_t sub_1A297EA08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
  sub_1A297CDE4(v1 + *(int *)(v6 + 60), (uint64_t)v5, &qword_1EE67B408);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for SFAirDrop.DeclineAction();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, 1, 1, v7);
    return sub_1A296F108((uint64_t)v5, &qword_1EE67B408);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418);
    sub_1A297EB48((uint64_t)&v5[*(int *)(v9 + 80)], a1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.DeclineAction);
    v10 = type metadata accessor for SFAirDrop.DeclineAction();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 0, 1, v10);
  }
}

uint64_t sub_1A297EB48(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void SFAirDropReceive.Transfer.State.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD);
  char *v12;
  _QWORD v13[26];

  v1 = type metadata accessor for SFAirDropReceive.Failure();
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
  MEMORY[0x1E0C80A78](v2);
  v13[1] = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A2AE3148();
  MEMORY[0x1E0C80A78](v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B420);
  MEMORY[0x1E0C80A78](v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
  MEMORY[0x1E0C80A78](v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
  MEMORY[0x1E0C80A78](v7);
  v13[2] = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  MEMORY[0x1E0C80A78](v9);
  sub_1A2990388(v0, (uint64_t)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v12 = (char *)sub_1A297ED94 + 4 * word_1A2AFB050[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A297ED94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 - 288);
  sub_1A2990414(v0, v2, &qword_1EE67B3C0);
  *(_QWORD *)(v1 - 256) = 0;
  *(_QWORD *)(v1 - 248) = 0xE000000000000000;
  sub_1A2AE3B20();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 - 256) = 0xD000000000000017;
  *(_QWORD *)(v1 - 248) = 0x80000001A2B455C0;
  sub_1A298BC84();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  v3 = *(_QWORD *)(v1 - 256);
  sub_1A296F108(v2, &qword_1EE67B3C0);
  return v3;
}

void SFAirDropReceive.Transfer.State.shortDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  char *v7;
  uint64_t v8;

  v1 = type metadata accessor for SFAirDropReceive.Failure();
  MEMORY[0x1E0C80A78](v1);
  v2 = sub_1A2AE3148();
  MEMORY[0x1E0C80A78](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B420);
  MEMORY[0x1E0C80A78](v3);
  v4 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  MEMORY[0x1E0C80A78](v4);
  sub_1A2990388(v0, (uint64_t)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v7 = (char *)sub_1A297FBBC + 4 * word_1A2AFB07C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

unint64_t sub_1A297FBBC()
{
  uint64_t v0;

  sub_1A296F108(v0, &qword_1EE67B3C0);
  return 0xD000000000000016;
}

BOOL SFAirDropReceive.Transfer.State.isProgressComplete.getter()
{
  uint64_t v0;

  SFAirDropReceive.Transfer.State.currentProgressCount.getter();
  return v0 == 1000;
}

uint64_t SFAirDropReceive.Transfer.State.totalProgressCount.getter()
{
  return 1000;
}

void SFAirDropReceive.Transfer.State.currentProgressCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  MEMORY[0x1E0C80A78](v1);
  sub_1A2990388(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)&loc_1A29805E8 + dword_1A2980B04[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A29805F8()
{
  uint64_t v0;

  sub_1A296F108(v0, &qword_1EE67B3C0);
  return 0;
}

uint64_t sub_1A2980B60(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A2980B94 + 4 * byte_1A2AFB0A8[a1]))(0x64657461657263, 0xE700000000000000);
}

uint64_t sub_1A2980B94()
{
  return 0x656363416F747561;
}

unint64_t sub_1A2980BB4()
{
  return 0xD000000000000011;
}

uint64_t sub_1A2980D98()
{
  sub_1A299016C();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2980DC0()
{
  sub_1A299016C();
  return sub_1A2AE4108();
}

uint64_t sub_1A2980DE8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A2980E20 + 4 * byte_1A2AFB0BE[*v0]))(0x74616E6974736564, 0xEB000000006E6F69);
}

uint64_t sub_1A2980E20()
{
  return 0x726566736E617274;
}

uint64_t sub_1A2980E44()
{
  return 0x73736572676F7270;
}

uint64_t sub_1A2980E5C()
{
  return 0x63416C65636E6163;
}

uint64_t sub_1A2980E7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29B1284(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A2980EA0()
{
  sub_1A298FFD4();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2980EC8()
{
  sub_1A298FFD4();
  return sub_1A2AE4108();
}

uint64_t sub_1A2980EF0()
{
  sub_1A29901B0();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2980F18()
{
  sub_1A29901B0();
  return sub_1A2AE4108();
}

uint64_t sub_1A2980F40()
{
  unsigned __int8 *v0;

  return sub_1A2980B60(*v0);
}

uint64_t sub_1A2980F48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29B1490(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A2980F6C(_BYTE *a1@<X8>)
{
  *a1 = 22;
}

uint64_t sub_1A2980F78()
{
  sub_1A298FB50();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2980FA0()
{
  sub_1A298FB50();
  return sub_1A2AE4108();
}

uint64_t sub_1A2980FC8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A2980FF8 + 4 * byte_1A2AFB0C2[*v0]))(0x7363697274656DLL, 0xE700000000000000);
}

uint64_t sub_1A2980FF8()
{
  return 0x74616E6974736564;
}

unint64_t sub_1A2981018()
{
  return 0xD000000000000017;
}

uint64_t sub_1A2981034()
{
  return 0x726566736E617274;
}

uint64_t sub_1A2981058()
{
  return 0x646574726F706D69;
}

uint64_t sub_1A2981078()
{
  return 0x525564656E65706FLL;
}

uint64_t sub_1A2981094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29B1CE8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A29810B8(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1A29810C4()
{
  sub_1A298FC1C();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29810EC()
{
  sub_1A298FC1C();
  return sub_1A2AE4108();
}

uint64_t sub_1A2981114()
{
  sub_1A29901F4();
  return sub_1A2AE40FC();
}

uint64_t sub_1A298113C()
{
  sub_1A29901F4();
  return sub_1A2AE4108();
}

uint64_t sub_1A2981164()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x726566736E617274;
  if (*v0 != 1)
    v1 = 0x73736572676F7270;
  if (*v0)
    return v1;
  else
    return 0x74616E6974736564;
}

uint64_t sub_1A29811D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29B1FC0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A29811F8(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1A2981204()
{
  sub_1A298FF08();
  return sub_1A2AE40FC();
}

uint64_t sub_1A298122C()
{
  sub_1A298FF08();
  return sub_1A2AE4108();
}

uint64_t sub_1A2981254()
{
  return 0x6F437265646E6573;
}

uint64_t sub_1A2981278@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6F437265646E6573 && a2 == 0xED0000746361746ELL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1A2AE3EE0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1A2981330()
{
  sub_1A298FD70();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2981358()
{
  sub_1A298FD70();
  return sub_1A2AE4108();
}

uint64_t sub_1A2981380()
{
  sub_1A298FB94();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29813A8()
{
  sub_1A298FB94();
  return sub_1A2AE4108();
}

uint64_t sub_1A29813D0()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x726566736E617274;
  if (*v0 != 1)
    v1 = 0x646574726F706D69;
  if (*v0)
    return v1;
  else
    return 0x74616E6974736564;
}

uint64_t sub_1A2981448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29B2150(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A298146C()
{
  sub_1A298FE3C();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2981494()
{
  sub_1A298FE3C();
  return sub_1A2AE4108();
}

uint64_t sub_1A29814BC()
{
  _BYTE *v0;

  if (*v0)
    return 0x7265766965636572;
  else
    return 0x6F437265646E6573;
}

uint64_t sub_1A2981510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29B22F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A2981534()
{
  sub_1A298FC60();
  return sub_1A2AE40FC();
}

uint64_t sub_1A298155C()
{
  sub_1A298FC60();
  return sub_1A2AE4108();
}

uint64_t sub_1A2981584()
{
  _BYTE *v0;

  if (*v0)
    return 0x6572756C696166;
  else
    return 0x7363697274656DLL;
}

uint64_t sub_1A29815B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29B2430(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A29815DC()
{
  sub_1A298FBD8();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2981604()
{
  sub_1A298FBD8();
  return sub_1A2AE4108();
}

uint64_t sub_1A298162C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A2981664 + 4 * byte_1A2AFB0C8[*v0]))(0x74616E6974736564, 0xEB000000006E6F69);
}

uint64_t sub_1A2981664()
{
  return 0x73736572676F7270;
}

unint64_t sub_1A298167C()
{
  return 0xD000000000000013;
}

uint64_t sub_1A2981698()
{
  return 0x63416C65636E6163;
}

uint64_t sub_1A29816B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29B2520(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A29816DC()
{
  sub_1A2990018();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2981704()
{
  sub_1A2990018();
  return sub_1A2AE4108();
}

uint64_t sub_1A298172C()
{
  return 0x74736575716572;
}

uint64_t sub_1A2981748()
{
  sub_1A2990128();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2981770()
{
  sub_1A2990128();
  return sub_1A2AE4108();
}

uint64_t sub_1A2981798()
{
  sub_1A298FDF8();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29817C0()
{
  sub_1A298FDF8();
  return sub_1A2AE4108();
}

uint64_t sub_1A29817E8()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000011;
  else
    return 0x7265766965636572;
}

uint64_t sub_1A2981834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29B2700(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A2981858()
{
  sub_1A298FCE8();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2981880()
{
  sub_1A298FCE8();
  return sub_1A2AE4108();
}

uint64_t sub_1A29818A8()
{
  sub_1A298FE80();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29818D0()
{
  sub_1A298FE80();
  return sub_1A2AE4108();
}

uint64_t sub_1A29818F8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A2981930 + 4 * byte_1A2AFB0CC[*v0]))(0x74616E6974736564, 0xEB000000006E6F69);
}

uint64_t sub_1A2981930()
{
  return 0x726566736E617274;
}

uint64_t sub_1A2981954()
{
  return 0x646574726F706D69;
}

uint64_t sub_1A2981974()
{
  return 0x74736575716572;
}

uint64_t sub_1A298198C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29B2810(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A29819B0()
{
  sub_1A298FEC4();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29819D8()
{
  sub_1A298FEC4();
  return sub_1A2AE4108();
}

uint64_t sub_1A2981A00()
{
  sub_1A298FF4C();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2981A28()
{
  sub_1A298FF4C();
  return sub_1A2AE4108();
}

uint64_t sub_1A2981A50()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x726566736E617274;
  if (*v0 != 1)
    v1 = 0x74736575716572;
  if (*v0)
    return v1;
  else
    return 0x74616E6974736564;
}

uint64_t sub_1A2981AC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29B2A1C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A2981AE4()
{
  sub_1A298FF90();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2981B0C()
{
  sub_1A298FF90();
  return sub_1A2AE4108();
}

uint64_t sub_1A2981B34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x74736575716572 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1A2AE3EE0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1A2981BC8()
{
  sub_1A29900A0();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2981BF0()
{
  sub_1A29900A0();
  return sub_1A2AE4108();
}

uint64_t sub_1A2981C18()
{
  _BYTE *v0;

  if (*v0)
    return 0x74736575716572;
  else
    return 0x7265766965636572;
}

uint64_t sub_1A2981C60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29B2BAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A2981C84()
{
  sub_1A29900E4();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2981CAC()
{
  sub_1A29900E4();
  return sub_1A2AE4108();
}

uint64_t sub_1A2981CD4()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000011;
  else
    return 0x6F437265646E6573;
}

uint64_t sub_1A2981D20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29B2CC0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A2981D44()
{
  sub_1A298FDB4();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2981D6C()
{
  sub_1A298FDB4();
  return sub_1A2AE4108();
}

void SFAirDropReceive.Transfer.State.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;

  v136 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B438);
  v88 = *(_QWORD *)(v136 - 8);
  MEMORY[0x1E0C80A78](v136);
  v134 = (char *)&v70 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B440);
  v90 = *(_QWORD *)(v142 - 8);
  MEMORY[0x1E0C80A78](v142);
  v141 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for SFAirDropReceive.Failure();
  MEMORY[0x1E0C80A78](v71);
  v140 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B448);
  v73 = *(_QWORD *)(v144 - 8);
  MEMORY[0x1E0C80A78](v144);
  v143 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
  v6 = MEMORY[0x1E0C80A78](v159);
  v138 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v145 = (char *)&v70 - v8;
  v139 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B450);
  v89 = *(_QWORD *)(v139 - 8);
  MEMORY[0x1E0C80A78](v139);
  v137 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B458);
  v87 = *(_QWORD *)(v135 - 8);
  MEMORY[0x1E0C80A78](v135);
  v133 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B460);
  v85 = *(_QWORD *)(v123 - 8);
  MEMORY[0x1E0C80A78](v123);
  v122 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B468);
  v86 = *(_QWORD *)(v132 - 8);
  MEMORY[0x1E0C80A78](v132);
  v131 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B470);
  v109 = *(_QWORD *)(v110 - 8);
  MEMORY[0x1E0C80A78](v110);
  v108 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B478);
  v81 = *(_QWORD *)(v127 - 8);
  MEMORY[0x1E0C80A78](v127);
  v124 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B480);
  v77 = *(_QWORD *)(v130 - 8);
  MEMORY[0x1E0C80A78](v130);
  v129 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B488);
  v76 = *(_QWORD *)(v128 - 8);
  MEMORY[0x1E0C80A78](v128);
  v125 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B490);
  v80 = *(_QWORD *)(v121 - 8);
  MEMORY[0x1E0C80A78](v121);
  v118 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B498);
  v79 = *(_QWORD *)(v120 - 8);
  MEMORY[0x1E0C80A78](v120);
  v117 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B4A0);
  v78 = *(_QWORD *)(v115 - 8);
  MEMORY[0x1E0C80A78](v115);
  v112 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B4A8);
  v74 = *(_QWORD *)(v116 - 8);
  MEMORY[0x1E0C80A78](v116);
  v113 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B4B0);
  v75 = *(_QWORD *)(v119 - 8);
  MEMORY[0x1E0C80A78](v119);
  v114 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for SFAirDrop.DeclineAction();
  v22 = MEMORY[0x1E0C80A78](v70);
  v111 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v152 = (char *)&v70 - v24;
  v161 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v25 = MEMORY[0x1E0C80A78](v161);
  v126 = (char *)&v70 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v148 = (char *)&v70 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v151 = (char *)&v70 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v150 = (char *)&v70 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v105 = (char *)&v70 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v107 = (char *)&v70 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v106 = (char *)&v70 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v155 = (char *)&v70 - v40;
  MEMORY[0x1E0C80A78](v39);
  v149 = (char *)&v70 - v41;
  v102 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B4B8);
  v83 = *(_QWORD *)(v102 - 8);
  MEMORY[0x1E0C80A78](v102);
  v101 = (char *)&v70 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B4C0);
  v84 = *(_QWORD *)(v104 - 8);
  MEMORY[0x1E0C80A78](v104);
  v103 = (char *)&v70 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
  v44 = MEMORY[0x1E0C80A78](v72);
  v158 = (char *)&v70 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v44);
  v157 = (char *)&v70 - v46;
  v100 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B4C8);
  v82 = *(_QWORD *)(v100 - 8);
  MEMORY[0x1E0C80A78](v100);
  v99 = (char *)&v70 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
  v48 = MEMORY[0x1E0C80A78](v160);
  v156 = (char *)&v70 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = MEMORY[0x1E0C80A78](v48);
  v147 = (char *)&v70 - v51;
  v52 = MEMORY[0x1E0C80A78](v50);
  v146 = (char *)&v70 - v53;
  v54 = MEMORY[0x1E0C80A78](v52);
  v154 = (char *)&v70 - v55;
  v56 = MEMORY[0x1E0C80A78](v54);
  v153 = (char *)&v70 - v57;
  v58 = MEMORY[0x1E0C80A78](v56);
  v98 = (char *)&v70 - v59;
  MEMORY[0x1E0C80A78](v58);
  v97 = (char *)&v70 - v60;
  v96 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B4D0);
  v95 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96);
  v94 = (char *)&v70 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B4D8);
  v92 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93);
  v91 = (char *)&v70 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B4E0);
  MEMORY[0x1E0C80A78](v63);
  v64 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  MEMORY[0x1E0C80A78](v64);
  v66 = (char *)&v70 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B4E8);
  v162 = *(_QWORD *)(v165 - 8);
  MEMORY[0x1E0C80A78](v165);
  v68 = (char *)&v70 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A298FB50();
  v164 = v68;
  sub_1A2AE40E4();
  sub_1A2990388(v163, (uint64_t)v66, type metadata accessor for SFAirDropReceive.Transfer.State);
  v69 = (char *)sub_1A2982968 + 4 * word_1A2AFB0D0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A2982968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 - 728);
  sub_1A2990414(v0, v2, &qword_1EE67B3C0);
  *(_BYTE *)(v1 - 168) = 3;
  sub_1A2990128();
  v3 = *(_QWORD *)(v1 - 712);
  v5 = *(_QWORD *)(v1 - 184);
  v4 = *(_QWORD *)(v1 - 176);
  sub_1A2AE3DB4();
  sub_1A296E5E4(&qword_1EE67B568, &qword_1EE67B3C0, (uint64_t)&protocol conformance descriptor for SFAirDrop.PermissionRequest<A>);
  v6 = *(_QWORD *)(v1 - 704);
  sub_1A2AE3E2C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 848) + 8))(v3, v6);
  sub_1A296F108(v2, &qword_1EE67B3C0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 208) + 8))(v5, v4);
}

uint64_t SFAirDropReceive.Transfer.State.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  _QWORD v78[26];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  char *v145;

  v134 = a2;
  v103 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B5F8);
  v78[23] = *(_QWORD *)(v103 - 8);
  MEMORY[0x1E0C80A78](v103);
  v139 = (char *)v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B600);
  v78[24] = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105);
  v132 = (char *)v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B608);
  v78[12] = *(_QWORD *)(v106 - 8);
  MEMORY[0x1E0C80A78](v106);
  v133 = (char *)v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B610);
  v137 = *(_QWORD *)(v104 - 8);
  MEMORY[0x1E0C80A78](v104);
  v138 = (char *)v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B618);
  v78[22] = *(_QWORD *)(v109 - 8);
  MEMORY[0x1E0C80A78](v109);
  v131 = (char *)v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B620);
  v78[20] = *(_QWORD *)(v99 - 8);
  MEMORY[0x1E0C80A78](v99);
  v124 = (char *)v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B628);
  v78[21] = *(_QWORD *)(v108 - 8);
  MEMORY[0x1E0C80A78](v108);
  v130 = (char *)v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B630);
  v92 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93);
  v119 = (char *)v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B638);
  v78[14] = *(_QWORD *)(v100 - 8);
  MEMORY[0x1E0C80A78](v100);
  v125 = (char *)v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B640);
  v78[16] = *(_QWORD *)(v102 - 8);
  MEMORY[0x1E0C80A78](v102);
  v127 = (char *)v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B648);
  v78[15] = *(_QWORD *)(v101 - 8);
  MEMORY[0x1E0C80A78](v101);
  v126 = (char *)v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B650);
  v78[19] = *(_QWORD *)(v97 - 8);
  MEMORY[0x1E0C80A78](v97);
  v122 = (char *)v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B658);
  v135 = *(_QWORD *)(v98 - 8);
  MEMORY[0x1E0C80A78](v98);
  v123 = (char *)v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B660);
  v78[13] = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95);
  v128 = (char *)v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B668);
  v78[11] = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96);
  v121 = (char *)v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B670);
  v78[10] = *(_QWORD *)(v94 - 8);
  MEMORY[0x1E0C80A78](v94);
  v120 = (char *)v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B678);
  v78[18] = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90);
  v118 = (char *)v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B680);
  v136 = *(_QWORD *)(v91 - 8);
  MEMORY[0x1E0C80A78](v91);
  v129 = (char *)v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B688);
  v78[17] = *(_QWORD *)(v89 - 8);
  MEMORY[0x1E0C80A78](v89);
  v117 = (char *)v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B690);
  v83 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84);
  v116 = (char *)v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B698);
  v80 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81);
  v115 = (char *)v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B6A0);
  v78[25] = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79);
  v114 = (char *)v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B6A8);
  v141 = *(_QWORD *)(v142 - 8);
  MEMORY[0x1E0C80A78](v142);
  v145 = (char *)v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  v26 = MEMORY[0x1E0C80A78](v140);
  v78[9] = (char *)v78 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26);
  v87 = (char *)v78 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v110 = (char *)v78 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v78[7] = (char *)v78 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v85 = (char *)v78 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v78[8] = (char *)v78 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v82 = (char *)v78 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v88 = (char *)v78 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v112 = (char *)v78 - v43;
  v44 = MEMORY[0x1E0C80A78](v42);
  v111 = (char *)v78 - v45;
  v46 = MEMORY[0x1E0C80A78](v44);
  v107 = (char *)v78 - v47;
  v48 = MEMORY[0x1E0C80A78](v46);
  v113 = (char *)v78 - v49;
  v50 = MEMORY[0x1E0C80A78](v48);
  v86 = (char *)v78 - v51;
  v52 = MEMORY[0x1E0C80A78](v50);
  v54 = (char *)v78 - v53;
  v55 = MEMORY[0x1E0C80A78](v52);
  v57 = (char *)v78 - v56;
  v58 = MEMORY[0x1E0C80A78](v55);
  v60 = (char *)v78 - v59;
  v61 = MEMORY[0x1E0C80A78](v58);
  v63 = (char *)v78 - v62;
  v64 = MEMORY[0x1E0C80A78](v61);
  v66 = (char *)v78 - v65;
  MEMORY[0x1E0C80A78](v64);
  v68 = (char *)v78 - v67;
  v69 = a1[3];
  v143 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v69);
  sub_1A298FB50();
  v70 = v144;
  sub_1A2AE40C0();
  if (!v70)
  {
    v78[1] = v66;
    v78[2] = v60;
    v78[3] = v63;
    v78[4] = v54;
    v78[5] = v57;
    v144 = 0;
    v78[6] = v68;
    v71 = v142;
    v72 = v145;
    v73 = sub_1A2AE3D9C();
    if (*(_QWORD *)(v73 + 16) == 1)
      __asm { BR              X10 }
    v74 = sub_1A2AE3B5C();
    swift_allocError();
    v76 = v75;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE67AC00);
    *v76 = v140;
    sub_1A2AE3CF4();
    sub_1A2AE3B50();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v74 - 8) + 104))(v76, *MEMORY[0x1E0DEC450], v74);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v141 + 8))(v72, v71);
  }
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v143);
}

uint64_t sub_1A2988C50@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFAirDropReceive.Transfer.State.init(from:)(a1, a2);
}

void sub_1A2988C64(_QWORD *a1)
{
  SFAirDropReceive.Transfer.State.encode(to:)(a1);
}

uint64_t SFAirDropReceive.Transfer.presenter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A2990388(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
}

uint64_t SFAirDropReceive.Transfer.receiveID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SFAirDropReceive.Transfer(0) + 20);
  v4 = sub_1A2AE3130();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SFAirDropReceive.Transfer.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SFAirDropReceive.Transfer(0);
  return sub_1A2990388(v1 + *(int *)(v3 + 24), a1, type metadata accessor for SFAirDropReceive.Transfer.State);
}

uint64_t SFAirDropReceive.Transfer.displayPriority.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SFAirDropReceive.Transfer(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t SFAirDropReceive.Transfer.askRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A2989A50(type metadata accessor for SFAirDropReceive.AskRequest, a1);
}

uint64_t SFAirDropReceive.Transfer.askResponse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SFAirDropReceive.Transfer(0);
  return sub_1A297CDE4(v1 + *(int *)(v3 + 36), a1, &qword_1EE67B6F8);
}

uint64_t SFAirDropReceive.Transfer.startDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SFAirDropReceive.Transfer(0) + 40);
  v4 = sub_1A2AE30C4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SFAirDropReceive.Transfer.isPreviewSensitive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.Transfer(0) + 44));
}

uint64_t SFAirDropReceive.Transfer.didAutoAccept.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.Transfer(0) + 48));
}

uint64_t SFAirDropReceive.Transfer.cancelAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SFAirDropReceive.Transfer(0);
  return sub_1A297CDE4(v1 + *(int *)(v3 + 52), a1, &qword_1EE67B700);
}

uint64_t SFAirDropReceive.Transfer.activeInterfaceType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SFAirDropReceive.Transfer(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 56));
  return result;
}

uint64_t SFAirDropReceive.Transfer.init(receiveID:startDate:state:displayPriority:askRequest:isPreviewSensitive:askResponse:didAutoAccept:cancelAction:activeInterfaceType:presenter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char *a11, uint64_t a12)
{
  char v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  char v26;

  v18 = *a4;
  v26 = *a11;
  sub_1A297EB48(a12, a9, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
  v19 = (int *)type metadata accessor for SFAirDropReceive.Transfer(0);
  v20 = a9 + v19[5];
  v21 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20, a1, v21);
  v22 = a9 + v19[10];
  v23 = sub_1A2AE30C4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22, a2, v23);
  sub_1A297EB48(a3, a9 + v19[6], type metadata accessor for SFAirDropReceive.Transfer.State);
  *(_BYTE *)(a9 + v19[7]) = v18;
  sub_1A297EB48(a5, a9 + v19[8], type metadata accessor for SFAirDropReceive.AskRequest);
  sub_1A2990414(a7, a9 + v19[9], &qword_1EE67B6F8);
  *(_BYTE *)(a9 + v19[11]) = a6;
  *(_BYTE *)(a9 + v19[12]) = a8;
  result = sub_1A2990414(a10, a9 + v19[13], &qword_1EE67B700);
  *(_BYTE *)(a9 + v19[14]) = v26;
  return result;
}

uint64_t SFAirDropReceive.Transfer.update(state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t result;
  uint64_t v26;

  v5 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v26 - v9;
  v11 = (int *)type metadata accessor for SFAirDropReceive.Transfer(0);
  v12 = *(_BYTE *)(v2 + v11[12]);
  sub_1A2990388(a1, (uint64_t)v10, type metadata accessor for SFAirDropReceive.Transfer.State);
  if ((v12 & 1) != 0)
  {
    v13 = 1;
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    _s7Sharing16SFAirDropReceiveO8TransferV5StateO2eeoiySbAG_AGtFZ_0((uint64_t)v10, (uint64_t)v8);
    v13 = v14;
    sub_1A297DA3C((uint64_t)v8, type metadata accessor for SFAirDropReceive.Transfer.State);
  }
  sub_1A297DA3C((uint64_t)v10, type metadata accessor for SFAirDropReceive.Transfer.State);
  v15 = v11[5];
  v16 = v2 + v15;
  v17 = a2 + v15;
  v18 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v17, v16, v18);
  v19 = v11[10];
  v20 = v2 + v19;
  v21 = a2 + v19;
  v22 = sub_1A2AE30C4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, v20, v22);
  sub_1A2990388(a1, a2 + v11[6], type metadata accessor for SFAirDropReceive.Transfer.State);
  v23 = *(_BYTE *)(v2 + v11[7]);
  sub_1A2990388(v2 + v11[8], a2 + v11[8], type metadata accessor for SFAirDropReceive.AskRequest);
  LOBYTE(v20) = *(_BYTE *)(v2 + v11[11]);
  sub_1A297CDE4(v2 + v11[9], a2 + v11[9], &qword_1EE67B6F8);
  sub_1A297CDE4(v2 + v11[13], a2 + v11[13], &qword_1EE67B700);
  v24 = *(_BYTE *)(v2 + v11[14]);
  result = sub_1A2990388(v2, a2, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
  *(_BYTE *)(a2 + v11[7]) = v23;
  *(_BYTE *)(a2 + v11[11]) = v20;
  *(_BYTE *)(a2 + v11[12]) = v13 & 1;
  *(_BYTE *)(a2 + v11[14]) = v24;
  return result;
}

uint64_t SFAirDropReceive.Transfer.update(displayPriority:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t result;

  v3 = v2;
  v5 = *a1;
  v6 = (int *)type metadata accessor for SFAirDropReceive.Transfer(0);
  v7 = v6[5];
  v8 = v3 + v7;
  v9 = a2 + v7;
  v10 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, v8, v10);
  v11 = v6[10];
  v12 = v3 + v11;
  v13 = a2 + v11;
  v14 = sub_1A2AE30C4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v13, v12, v14);
  sub_1A2990388(v3 + v6[6], a2 + v6[6], type metadata accessor for SFAirDropReceive.Transfer.State);
  sub_1A2990388(v3 + v6[8], a2 + v6[8], type metadata accessor for SFAirDropReceive.AskRequest);
  LOBYTE(v12) = *(_BYTE *)(v3 + v6[11]);
  sub_1A297CDE4(v3 + v6[9], a2 + v6[9], &qword_1EE67B6F8);
  LOBYTE(v13) = *(_BYTE *)(v3 + v6[12]);
  sub_1A297CDE4(v3 + v6[13], a2 + v6[13], &qword_1EE67B700);
  v15 = *(_BYTE *)(v3 + v6[14]);
  result = sub_1A2990388(v3, a2, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
  *(_BYTE *)(a2 + v6[7]) = v5;
  *(_BYTE *)(a2 + v6[11]) = v12;
  *(_BYTE *)(a2 + v6[12]) = v13;
  *(_BYTE *)(a2 + v6[14]) = v15;
  return result;
}

uint64_t SFAirDropReceive.Transfer.update(cancelAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v3 = v2;
  v6 = (int *)type metadata accessor for SFAirDropReceive.Transfer(0);
  v7 = v6[5];
  v8 = v3 + v7;
  v9 = a2 + v7;
  v10 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, v8, v10);
  v11 = v6[10];
  v12 = v3 + v11;
  v13 = a2 + v11;
  v14 = sub_1A2AE30C4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v13, v12, v14);
  sub_1A2990388(v3 + v6[6], a2 + v6[6], type metadata accessor for SFAirDropReceive.Transfer.State);
  LOBYTE(v13) = *(_BYTE *)(v3 + v6[7]);
  sub_1A2990388(v3 + v6[8], a2 + v6[8], type metadata accessor for SFAirDropReceive.AskRequest);
  v15 = *(_BYTE *)(v3 + v6[11]);
  sub_1A297CDE4(v3 + v6[9], a2 + v6[9], &qword_1EE67B6F8);
  v16 = *(_BYTE *)(v3 + v6[12]);
  v17 = a2 + v6[13];
  sub_1A2990388(a1, v17, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.DeclineAction);
  v18 = type metadata accessor for SFAirDrop.DeclineAction();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 0, 1, v18);
  LOBYTE(a1) = *(_BYTE *)(v3 + v6[14]);
  result = sub_1A2990388(v3, a2, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
  *(_BYTE *)(a2 + v6[7]) = v13;
  *(_BYTE *)(a2 + v6[11]) = v15;
  *(_BYTE *)(a2 + v6[12]) = v16;
  *(_BYTE *)(a2 + v6[14]) = a1;
  return result;
}

uint64_t SFAirDropReceive.Transfer.update(activeInterfaceType:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t result;

  v3 = v2;
  v5 = *a1;
  v6 = (int *)type metadata accessor for SFAirDropReceive.Transfer(0);
  v7 = v6[5];
  v8 = v3 + v7;
  v9 = a2 + v7;
  v10 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, v8, v10);
  v11 = v6[10];
  v12 = v3 + v11;
  v13 = a2 + v11;
  v14 = sub_1A2AE30C4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v13, v12, v14);
  sub_1A2990388(v3 + v6[6], a2 + v6[6], type metadata accessor for SFAirDropReceive.Transfer.State);
  LOBYTE(v12) = *(_BYTE *)(v3 + v6[7]);
  sub_1A2990388(v3 + v6[8], a2 + v6[8], type metadata accessor for SFAirDropReceive.AskRequest);
  LOBYTE(v13) = *(_BYTE *)(v3 + v6[11]);
  sub_1A297CDE4(v3 + v6[9], a2 + v6[9], &qword_1EE67B6F8);
  v15 = *(_BYTE *)(v3 + v6[12]);
  sub_1A297CDE4(v3 + v6[13], a2 + v6[13], &qword_1EE67B700);
  result = sub_1A2990388(v3, a2, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
  *(_BYTE *)(a2 + v6[7]) = v12;
  *(_BYTE *)(a2 + v6[11]) = v13;
  *(_BYTE *)(a2 + v6[12]) = v15;
  *(_BYTE *)(a2 + v6[14]) = v5;
  return result;
}

uint64_t SFAirDropReceive.Transfer.update(askResponse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t result;
  uint64_t v23;

  v3 = v2;
  v6 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SFAirDropReceive.AskResponse();
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1, 1, v9);
  v11 = (int *)type metadata accessor for SFAirDropReceive.Transfer(0);
  if (v10 == 1)
    sub_1A2990388(v3 + v11[6], (uint64_t)v8, type metadata accessor for SFAirDropReceive.Transfer.State);
  else
    SFAirDropReceive.Transfer.State.answeredPermissionRequest()((uint64_t)v8);
  type metadata accessor for SFAirDropReceive.Transfer(0);
  v12 = v11[5];
  v13 = v3 + v12;
  v14 = a2 + v12;
  v15 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v14, v13, v15);
  v16 = v11[10];
  v17 = v3 + v16;
  v18 = a2 + v16;
  v19 = sub_1A2AE30C4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v18, v17, v19);
  LOBYTE(v17) = *(_BYTE *)(v3 + v11[7]);
  sub_1A2990388(v3 + v11[8], a2 + v11[8], type metadata accessor for SFAirDropReceive.AskRequest);
  LOBYTE(v18) = *(_BYTE *)(v3 + v11[11]);
  sub_1A297CDE4(a1, a2 + v11[9], &qword_1EE67B6F8);
  v20 = *(_BYTE *)(v3 + v11[12]);
  sub_1A297CDE4(v3 + v11[13], a2 + v11[13], &qword_1EE67B700);
  v21 = *(_BYTE *)(v3 + v11[14]);
  sub_1A2990388(v3, a2, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
  result = sub_1A297EB48((uint64_t)v8, a2 + v11[6], type metadata accessor for SFAirDropReceive.Transfer.State);
  *(_BYTE *)(a2 + v11[7]) = v17;
  *(_BYTE *)(a2 + v11[11]) = v18;
  *(_BYTE *)(a2 + v11[12]) = v20;
  *(_BYTE *)(a2 + v11[14]) = v21;
  return result;
}

uint64_t SFAirDropReceive.Transfer.State.answeredPermissionRequest()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2990388(v1, (uint64_t)v8, v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 2 && EnumCaseMultiPayload)
  {
    sub_1A2990388(v1, a1, type metadata accessor for SFAirDropReceive.Transfer.State);
    return sub_1A297DA3C((uint64_t)v8, type metadata accessor for SFAirDropReceive.Transfer.State);
  }
  else
  {
    sub_1A2990414((uint64_t)v8, (uint64_t)v5, &qword_1EE67B3C0);
    v11 = sub_1A2AE3130();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, v5, v11);
    v12 = v3[14];
    v13 = &v5[v12];
    v14 = a1 + v12;
    v15 = sub_1A2AE30C4();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v14, v13, v15);
    sub_1A297CDE4((uint64_t)&v5[v3[15]], a1 + v3[15], &qword_1EE67B408);
    *(_BYTE *)(a1 + v3[13]) = 1;
    sub_1A296F108((uint64_t)v5, &qword_1EE67B3C0);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t SFAirDropReceive.Transfer.id.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A2989A50((uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier, a1);
}

uint64_t sub_1A2989A50@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = type metadata accessor for SFAirDropReceive.Transfer(0);
  return sub_1A2990388(v2 + *(int *)(v5 + 32), a2, a1);
}

uint64_t sub_1A2989A94(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A2989AD0 + 4 * byte_1A2AFB128[a1]))(0x65746E6573657270, 0xE900000000000072);
}

uint64_t sub_1A2989AD0()
{
  return 0x4965766965636572;
}

uint64_t sub_1A2989AEC()
{
  return 0x6574617473;
}

uint64_t sub_1A2989B00()
{
  return 0x5079616C70736964;
}

uint64_t sub_1A2989B24()
{
  return 0x65757165526B7361;
}

uint64_t sub_1A2989B40()
{
  return 0x6F707365526B7361;
}

uint64_t sub_1A2989B60()
{
  return 0x7461447472617473;
}

unint64_t sub_1A2989B78()
{
  return 0xD000000000000012;
}

uint64_t sub_1A2989B94()
{
  return 0x63416C65636E6163;
}

unint64_t sub_1A2989BB4()
{
  return 0xD000000000000013;
}

uint64_t sub_1A2989BD4()
{
  return 0x416F747541646964;
}

uint64_t sub_1A2989BF8()
{
  unsigned __int8 *v0;

  return sub_1A2989A94(*v0);
}

uint64_t sub_1A2989C00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29B2DD0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A2989C24(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_1A2989C30()
{
  sub_1A2990458();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2989C58()
{
  sub_1A2990458();
  return sub_1A2AE4108();
}

uint64_t SFAirDropReceive.Transfer.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B708);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2990458();
  sub_1A2AE40E4();
  v11[15] = 0;
  type metadata accessor for SFAirDropClient.Identifier();
  sub_1A296E8A4(&qword_1EE67B718, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropClient.Identifier, (uint64_t)&protocol conformance descriptor for SFAirDropClient.Identifier);
  sub_1A2AE3E2C();
  if (!v2)
  {
    v9 = type metadata accessor for SFAirDropReceive.Transfer(0);
    v11[14] = 1;
    sub_1A2AE3130();
    sub_1A296E8A4(&qword_1EE6766D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
    sub_1A2AE3E2C();
    v11[13] = 2;
    type metadata accessor for SFAirDropReceive.Transfer.State(0);
    sub_1A296E8A4(&qword_1EE67B720, type metadata accessor for SFAirDropReceive.Transfer.State, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Transfer.State);
    sub_1A2AE3E2C();
    v11[12] = *(_BYTE *)(v3 + *(int *)(v9 + 28));
    v11[11] = 3;
    sub_1A299049C();
    sub_1A2AE3E2C();
    v11[10] = 4;
    type metadata accessor for SFAirDropReceive.AskRequest(0);
    sub_1A296E8A4(&qword_1EE67B730, type metadata accessor for SFAirDropReceive.AskRequest, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest);
    sub_1A2AE3E2C();
    v11[9] = 5;
    type metadata accessor for SFAirDropReceive.AskResponse();
    sub_1A296E8A4(&qword_1EE67B738, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropReceive.AskResponse, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskResponse);
    sub_1A2AE3DE4();
    v11[8] = 6;
    sub_1A2AE30C4();
    sub_1A296E8A4(&qword_1EE67AB88, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
    sub_1A2AE3E2C();
    v11[7] = 7;
    sub_1A2AE3DFC();
    v11[6] = 8;
    sub_1A2AE3DFC();
    v11[5] = 9;
    type metadata accessor for SFAirDrop.DeclineAction();
    sub_1A296E8A4(&qword_1EE67B5B0, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDrop.DeclineAction, (uint64_t)&protocol conformance descriptor for SFAirDrop.DeclineAction);
    sub_1A2AE3DE4();
    v11[4] = *(_BYTE *)(v3 + *(int *)(v9 + 56));
    v11[3] = 10;
    sub_1A29904E0();
    sub_1A2AE3DE4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t SFAirDropReceive.Transfer.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;

  v32 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B700);
  MEMORY[0x1E0C80A78](v3);
  v33 = (uint64_t)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_1A2AE30C4();
  v34 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v35 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B6F8);
  MEMORY[0x1E0C80A78](v6);
  v37 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  MEMORY[0x1E0C80A78](v39);
  v38 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  MEMORY[0x1E0C80A78](v40);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A2AE3130();
  v43 = *(_QWORD *)(v11 - 8);
  v44 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SFAirDropClient.Identifier();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B748);
  v17 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = (int *)type metadata accessor for SFAirDropReceive.Transfer(0);
  MEMORY[0x1E0C80A78](v47);
  v48 = (uint64_t)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1[3];
  v45 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v21);
  sub_1A2990458();
  v42 = v19;
  v22 = v46;
  sub_1A2AE40C0();
  if (v22)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v45);
  v46 = v17;
  v61 = 0;
  sub_1A296E8A4(&qword_1EE67B750, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropClient.Identifier, (uint64_t)&protocol conformance descriptor for SFAirDropClient.Identifier);
  sub_1A2AE3D78();
  v23 = v48;
  sub_1A297EB48((uint64_t)v16, v48, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
  v60 = 1;
  sub_1A296E8A4(&qword_1EE676788, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
  v24 = v44;
  sub_1A2AE3D78();
  v25 = v47;
  (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v23 + v47[5], v13, v24);
  v59 = 2;
  sub_1A296E8A4(&qword_1EE67B758, type metadata accessor for SFAirDropReceive.Transfer.State, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Transfer.State);
  sub_1A2AE3D78();
  sub_1A297EB48((uint64_t)v10, v23 + v25[6], type metadata accessor for SFAirDropReceive.Transfer.State);
  v57 = 3;
  sub_1A2990524();
  sub_1A2AE3D78();
  *(_BYTE *)(v23 + v25[7]) = v58;
  v56 = 4;
  sub_1A296E8A4(&qword_1EE67B768, type metadata accessor for SFAirDropReceive.AskRequest, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest);
  v26 = (uint64_t)v38;
  sub_1A2AE3D78();
  sub_1A297EB48(v26, v23 + v25[8], type metadata accessor for SFAirDropReceive.AskRequest);
  type metadata accessor for SFAirDropReceive.AskResponse();
  v55 = 5;
  sub_1A296E8A4(&qword_1EE67B770, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropReceive.AskResponse, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskResponse);
  v27 = (uint64_t)v37;
  sub_1A2AE3D30();
  sub_1A2990414(v27, v23 + v25[9], &qword_1EE67B6F8);
  v54 = 6;
  sub_1A296E8A4(&qword_1EE67AC10, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
  v28 = v35;
  v29 = v36;
  sub_1A2AE3D78();
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v23 + v25[10], v28, v29);
  v53 = 7;
  *(_BYTE *)(v23 + v25[11]) = sub_1A2AE3D48() & 1;
  v52 = 8;
  *(_BYTE *)(v23 + v25[12]) = sub_1A2AE3D48() & 1;
  type metadata accessor for SFAirDrop.DeclineAction();
  v51 = 9;
  sub_1A296E8A4(&qword_1EE67B6E8, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDrop.DeclineAction, (uint64_t)&protocol conformance descriptor for SFAirDrop.DeclineAction);
  sub_1A2AE3D30();
  sub_1A2990414(v33, v48 + v47[13], &qword_1EE67B700);
  v49 = 10;
  sub_1A2990568();
  sub_1A2AE3D30();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v42, v41);
  v30 = v48;
  *(_BYTE *)(v48 + v47[14]) = v50;
  sub_1A2990388(v30, v32, type metadata accessor for SFAirDropReceive.Transfer);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v45);
  return sub_1A297DA3C(v30, type metadata accessor for SFAirDropReceive.Transfer);
}

uint64_t sub_1A298A9E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFAirDropReceive.Transfer.init(from:)(a1, a2);
}

uint64_t sub_1A298A9F8(_QWORD *a1)
{
  return SFAirDropReceive.Transfer.encode(to:)(a1);
}

uint64_t sub_1A298AA0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1A2990388(v2 + *(int *)(a1 + 32), a2, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
}

BOOL SFAirDropReceive.Transfer.State.completedSuccessfully.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  char *v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v8;

  v1 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  v2 = type metadata accessor for SFAirDropReceive.Transfer.State;
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2990388(v0, (uint64_t)v4, type metadata accessor for SFAirDropReceive.Transfer.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 15)
  {
    v6 = (uint64_t)&v4[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A0) + 48)];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1A297DA3C(v6, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.ItemDestination);
    v2 = type metadata accessor for SFAirDropReceive.Transfer.Metrics;
  }
  sub_1A297DA3C((uint64_t)v4, v2);
  return EnumCaseMultiPayload == 15;
}

void SFAirDropReceive.Transfer.State.sameCase(as:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t (*v40)(_QWORD);
  char *v41;
  _QWORD v42[14];
  char *v43;

  v43 = (char *)a1;
  v1 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  v2 = MEMORY[0x1E0C80A78](v1);
  v42[9] = (char *)v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x1E0C80A78](v2);
  v42[10] = (char *)v42 - v5;
  v6 = MEMORY[0x1E0C80A78](v4);
  v42[13] = (char *)v42 - v7;
  v8 = MEMORY[0x1E0C80A78](v6);
  v42[8] = (char *)v42 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v42[12] = (char *)v42 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v42[5] = (char *)v42 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v42[11] = (char *)v42 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v42[1] = (char *)v42 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v42[7] = (char *)v42 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v42[4] = (char *)v42 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v42[6] = (char *)v42 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v42[3] = (char *)v42 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v27 = MEMORY[0x1E0C80A78](v26);
  v42[0] = (char *)v42 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v30 = MEMORY[0x1E0C80A78](v29);
  v42[2] = (char *)v42 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v33 = MEMORY[0x1E0C80A78](v32);
  v34 = MEMORY[0x1E0C80A78](v33);
  v35 = MEMORY[0x1E0C80A78](v34);
  v36 = MEMORY[0x1E0C80A78](v35);
  v37 = MEMORY[0x1E0C80A78](v36);
  MEMORY[0x1E0C80A78](v37);
  v39 = (char *)v42 - v38;
  sub_1A2990388((uint64_t)v43, (uint64_t)v42 - v38, v40);
  v43 = v39;
  v41 = (char *)sub_1A298AE78 + 4 * word_1A2AFB134[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A298AE78()
{
  uint64_t v0;
  uint64_t v1;

  sub_1A2990388(*(_QWORD *)(v1 - 96), v0, type metadata accessor for SFAirDropReceive.Transfer.State);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_1A297DA3C(v0, type metadata accessor for SFAirDropReceive.Transfer.State);
    sub_1A296F108(*(_QWORD *)(v1 - 88), &qword_1EE67B3C0);
    return 0;
  }
  else
  {
    sub_1A296F108(v0, &qword_1EE67B3C0);
    sub_1A296F108(*(_QWORD *)(v1 - 88), &qword_1EE67B3C0);
    return 1;
  }
}

uint64_t sub_1A298B9F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int EnumCaseMultiPayload;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
  sub_1A297CDE4(v0 + *(int *)(v4 + 60), (uint64_t)v3, &qword_1EE67B400);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = &v3[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80)];
    strcpy((char *)v12, "prompt: ");
    BYTE1(v12[1]) = 0;
    WORD1(v12[1]) = 0;
    HIDWORD(v12[1]) = -402653184;
    sub_1A2AE34F0();
    swift_bridgeObjectRelease();
    v10 = v12[0];
    v7 = (uint64_t)v6;
LABEL_6:
    sub_1A297DA3C(v7, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.DeclineAction);
    return v10;
  }
  if (EnumCaseMultiPayload != 1)
  {
    swift_bridgeObjectRelease();
    v8 = &v3[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80)];
    strcpy((char *)v12, "alert: ");
    v12[1] = 0xE700000000000000;
    sub_1A2AE34F0();
    swift_bridgeObjectRelease();
    sub_1A2AE34F0();
    sub_1A2AE34F0();
    swift_bridgeObjectRelease();
    sub_1A2AE34F0();
    v10 = v12[0];
    v7 = (uint64_t)v8;
    goto LABEL_6;
  }
  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  sub_1A2AE3B20();
  swift_bridgeObjectRelease();
  strcpy((char *)v12, "intervention: ");
  HIBYTE(v12[1]) = -18;
  v9 = (uint64_t)&v3[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A8) + 48)];
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  v10 = v12[0];
  sub_1A296F108(v9, &qword_1EE67B7B0);
  return v10;
}

uint64_t sub_1A298BC84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int EnumCaseMultiPayload;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
  sub_1A297CDE4(v0 + *(int *)(v4 + 60), (uint64_t)v3, &qword_1EE67B408);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = &v3[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80)];
    strcpy((char *)v12, "prompt: ");
    BYTE1(v12[1]) = 0;
    WORD1(v12[1]) = 0;
    HIDWORD(v12[1]) = -402653184;
    sub_1A2AE34F0();
    swift_bridgeObjectRelease();
    v10 = v12[0];
    v7 = (uint64_t)v6;
LABEL_6:
    sub_1A297DA3C(v7, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.DeclineAction);
    return v10;
  }
  if (EnumCaseMultiPayload != 1)
  {
    swift_bridgeObjectRelease();
    v8 = &v3[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80)];
    strcpy((char *)v12, "alert: ");
    v12[1] = 0xE700000000000000;
    sub_1A2AE34F0();
    swift_bridgeObjectRelease();
    sub_1A2AE34F0();
    sub_1A2AE34F0();
    swift_bridgeObjectRelease();
    sub_1A2AE34F0();
    v10 = v12[0];
    v7 = (uint64_t)v8;
    goto LABEL_6;
  }
  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  sub_1A2AE3B20();
  swift_bridgeObjectRelease();
  strcpy((char *)v12, "intervention: ");
  HIBYTE(v12[1]) = -18;
  v9 = (uint64_t)&v3[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48)];
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  v10 = v12[0];
  sub_1A296F108(v9, &qword_1EE67B798);
  return v10;
}

uint64_t sub_1A298BF10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int EnumCaseMultiPayload;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BA30);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BA38);
  sub_1A297CDE4(v0 + *(int *)(v4 + 60), (uint64_t)v3, &qword_1EE67BA30);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = &v3[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BA40) + 80)];
    strcpy((char *)v12, "prompt: ");
    BYTE1(v12[1]) = 0;
    WORD1(v12[1]) = 0;
    HIDWORD(v12[1]) = -402653184;
    sub_1A2AE34F0();
    swift_bridgeObjectRelease();
    v10 = v12[0];
    v7 = (uint64_t)v6;
LABEL_6:
    sub_1A297DA3C(v7, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.DeclineAction);
    return v10;
  }
  if (EnumCaseMultiPayload != 1)
  {
    swift_bridgeObjectRelease();
    v8 = &v3[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BA40) + 80)];
    strcpy((char *)v12, "alert: ");
    v12[1] = 0xE700000000000000;
    sub_1A2AE34F0();
    swift_bridgeObjectRelease();
    sub_1A2AE34F0();
    sub_1A2AE34F0();
    swift_bridgeObjectRelease();
    sub_1A2AE34F0();
    v10 = v12[0];
    v7 = (uint64_t)v8;
    goto LABEL_6;
  }
  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  sub_1A2AE3B20();
  swift_bridgeObjectRelease();
  strcpy((char *)v12, "intervention: ");
  HIBYTE(v12[1]) = -18;
  v9 = (uint64_t)&v3[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BA48) + 48)];
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  v10 = v12[0];
  sub_1A296F108(v9, &qword_1EE67BA50);
  return v10;
}

uint64_t sub_1A298C19C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int EnumCaseMultiPayload;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BA08);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BA10);
  sub_1A297CDE4(v0 + *(int *)(v4 + 60), (uint64_t)v3, &qword_1EE67BA08);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = &v3[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BA18) + 80)];
    strcpy((char *)v12, "prompt: ");
    BYTE1(v12[1]) = 0;
    WORD1(v12[1]) = 0;
    HIDWORD(v12[1]) = -402653184;
    sub_1A2AE34F0();
    swift_bridgeObjectRelease();
    v10 = v12[0];
    v7 = (uint64_t)v6;
LABEL_6:
    sub_1A297DA3C(v7, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.DeclineAction);
    return v10;
  }
  if (EnumCaseMultiPayload != 1)
  {
    swift_bridgeObjectRelease();
    v8 = &v3[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BA18) + 80)];
    strcpy((char *)v12, "alert: ");
    v12[1] = 0xE700000000000000;
    sub_1A2AE34F0();
    swift_bridgeObjectRelease();
    sub_1A2AE34F0();
    sub_1A2AE34F0();
    swift_bridgeObjectRelease();
    sub_1A2AE34F0();
    v10 = v12[0];
    v7 = (uint64_t)v8;
    goto LABEL_6;
  }
  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  sub_1A2AE3B20();
  swift_bridgeObjectRelease();
  strcpy((char *)v12, "intervention: ");
  HIBYTE(v12[1]) = -18;
  v9 = (uint64_t)&v3[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BA20) + 48)];
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  v10 = v12[0];
  sub_1A296F108(v9, &qword_1EE67BA28);
  return v10;
}

unint64_t sub_1A298C428()
{
  unint64_t result;

  result = qword_1EE67B428;
  if (!qword_1EE67B428)
  {
    result = MEMORY[0x1A85895EC](MEMORY[0x1E0DEB078], MEMORY[0x1E0DEB070]);
    atomic_store(result, (unint64_t *)&qword_1EE67B428);
  }
  return result;
}

void _s7Sharing16SFAirDropReceiveO8TransferV5StateO2eeoiySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  _QWORD v105[2];
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;

  v154 = a2;
  v153 = a1;
  v2 = type metadata accessor for SFAirDropReceive.Failure();
  v3 = MEMORY[0x1E0C80A78](v2);
  v122 = (char *)v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v123 = (char *)v105 - v5;
  v6 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v121 = (char *)v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v129 = (char *)v105 - v9;
  v10 = type metadata accessor for SFAirDrop.DeclineAction();
  v11 = MEMORY[0x1E0C80A78](v10);
  v120 = (char *)v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v124 = (char *)v105 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v133 = (char *)v105 - v16;
  MEMORY[0x1E0C80A78](v15);
  v131 = (char *)v105 - v17;
  v18 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v19 = MEMORY[0x1E0C80A78](v18);
  v126 = (char *)v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v127 = (char *)v105 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v116 = (char *)v105 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v125 = (char *)v105 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v108 = (char *)v105 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v115 = (char *)v105 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v119 = (char *)v105 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v118 = (char *)v105 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v117 = (char *)v105 - v36;
  MEMORY[0x1E0C80A78](v35);
  v132 = (char *)v105 - v37;
  v106 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
  v38 = MEMORY[0x1E0C80A78](v106);
  v151 = (char *)v105 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x1E0C80A78](v38);
  v149 = (char *)v105 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v150 = (char *)v105 - v43;
  MEMORY[0x1E0C80A78](v42);
  v148 = (char *)v105 - v44;
  v152 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
  v45 = MEMORY[0x1E0C80A78](v152);
  v146 = (char *)v105 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = MEMORY[0x1E0C80A78](v45);
  v147 = (char *)v105 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v114 = (char *)v105 - v50;
  v51 = MEMORY[0x1E0C80A78](v49);
  v130 = (char *)v105 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v107 = (char *)v105 - v54;
  v55 = MEMORY[0x1E0C80A78](v53);
  v128 = (char *)v105 - v56;
  v57 = MEMORY[0x1E0C80A78](v55);
  v112 = (char *)v105 - v58;
  v59 = MEMORY[0x1E0C80A78](v57);
  v113 = (char *)v105 - v60;
  v61 = MEMORY[0x1E0C80A78](v59);
  v110 = (char *)v105 - v62;
  v63 = MEMORY[0x1E0C80A78](v61);
  v111 = (char *)v105 - v64;
  v65 = MEMORY[0x1E0C80A78](v63);
  v109 = (char *)v105 - v66;
  MEMORY[0x1E0C80A78](v65);
  v105[1] = (char *)v105 - v67;
  v68 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  v69 = MEMORY[0x1E0C80A78](v68);
  v142 = (char *)v105 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = MEMORY[0x1E0C80A78](v69);
  v144 = (char *)v105 - v72;
  v73 = MEMORY[0x1E0C80A78](v71);
  v145 = (char *)v105 - v74;
  v75 = MEMORY[0x1E0C80A78](v73);
  v76 = MEMORY[0x1E0C80A78](v75);
  v140 = (char *)v105 - v77;
  v78 = MEMORY[0x1E0C80A78](v76);
  v79 = MEMORY[0x1E0C80A78](v78);
  v80 = MEMORY[0x1E0C80A78](v79);
  v141 = (char *)v105 - v81;
  v82 = MEMORY[0x1E0C80A78](v80);
  v143 = (char *)v105 - v83;
  v84 = MEMORY[0x1E0C80A78](v82);
  v134 = (char *)v105 - v85;
  v86 = MEMORY[0x1E0C80A78](v84);
  v136 = (char *)v105 - v87;
  v88 = MEMORY[0x1E0C80A78](v86);
  v139 = (char *)v105 - v89;
  v90 = MEMORY[0x1E0C80A78](v88);
  v137 = (char *)v105 - v91;
  v92 = MEMORY[0x1E0C80A78](v90);
  v135 = (char *)v105 - v93;
  v94 = MEMORY[0x1E0C80A78](v92);
  v138 = (char *)v105 - v95;
  v96 = MEMORY[0x1E0C80A78](v94);
  v97 = MEMORY[0x1E0C80A78](v96);
  MEMORY[0x1E0C80A78](v97);
  v98 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BA58);
  v99 = MEMORY[0x1E0C80A78](v98);
  v101 = (char *)v105 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = (uint64_t)&v101[*(int *)(v99 + 48)];
  sub_1A2990388(v153, (uint64_t)v101, type metadata accessor for SFAirDropReceive.Transfer.State);
  v103 = v154;
  v154 = v102;
  sub_1A2990388(v103, v102, type metadata accessor for SFAirDropReceive.Transfer.State);
  v155 = v101;
  v153 = v68;
  v104 = (char *)sub_1A298CD2C + 4 * word_1A2AFB160[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A298CD2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 - 256);
  sub_1A2990388(v2, v0, type metadata accessor for SFAirDropReceive.Transfer.State);
  v3 = *(_QWORD *)(v1 - 272);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_1A296F108(v0, &qword_1EE67B3C0);
    sub_1A296F108(v2, &qword_1EE67BA58);
LABEL_9:
    v4 = 0;
    return v4 & 1;
  }
  v5 = *(_QWORD *)(v1 - 664);
  sub_1A2990414(v3, v5, &qword_1EE67B3C0);
  if ((_s7Sharing9SFAirDropO17PermissionRequestV18InterventionActionV2eeoiySbAGy_x_G_AItFZ_0() & 1) == 0
    || (v6 = *(int *)(*(_QWORD *)(v1 - 288) + 52), *(unsigned __int8 *)(v0 + v6) != *(unsigned __int8 *)(v5 + v6))
    || (sub_1A2AE3088() & 1) == 0
    || (v7 = *(int *)(*(_QWORD *)(v1 - 288) + 60), (sub_1A2A7AEB8(v0 + v7, v5 + v7) & 1) == 0))
  {
    sub_1A296F108(v5, &qword_1EE67B3C0);
    sub_1A296F108(v0, &qword_1EE67B3C0);
    sub_1A297DA3C(v2, type metadata accessor for SFAirDropReceive.Transfer.State);
    goto LABEL_9;
  }
  sub_1A296F108(v5, &qword_1EE67B3C0);
  sub_1A296F108(v0, &qword_1EE67B3C0);
  sub_1A297DA3C(v2, type metadata accessor for SFAirDropReceive.Transfer.State);
  v4 = 1;
  return v4 & 1;
}

unint64_t sub_1A298FB50()
{
  unint64_t result;

  result = qword_1EE67B4F0;
  if (!qword_1EE67B4F0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFD0A0, &_s8TransferV5StateO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B4F0);
  }
  return result;
}

unint64_t sub_1A298FB94()
{
  unint64_t result;

  result = qword_1EE67B4F8;
  if (!qword_1EE67B4F8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFD050, &_s8TransferV5StateO29LegacyTransferStateCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B4F8);
  }
  return result;
}

unint64_t sub_1A298FBD8()
{
  unint64_t result;

  result = qword_1EE67B500;
  if (!qword_1EE67B500)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFD000, &_s8TransferV5StateO24TransferFailedCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B500);
  }
  return result;
}

unint64_t sub_1A298FC1C()
{
  unint64_t result;

  result = qword_1EE67B518;
  if (!qword_1EE67B518)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFCFB0, &_s8TransferV5StateO31CompletedSuccessfullyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B518);
  }
  return result;
}

unint64_t sub_1A298FC60()
{
  unint64_t result;

  result = qword_1EE67B538;
  if (!qword_1EE67B538)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFCF60, &_s8TransferV5StateO28SharingContactBackCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B538);
  }
  return result;
}

unint64_t sub_1A298FCA4()
{
  unint64_t result;

  result = qword_1EE674F38;
  if (!qword_1EE674F38)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDrop.ContactRequest, &type metadata for SFAirDrop.ContactRequest);
    atomic_store(result, (unint64_t *)&qword_1EE674F38);
  }
  return result;
}

unint64_t sub_1A298FCE8()
{
  unint64_t result;

  result = qword_1EE67B540;
  if (!qword_1EE67B540)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFCF10, &_s8TransferV5StateO44WaitingForContactShareBackResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B540);
  }
  return result;
}

unint64_t sub_1A298FD2C()
{
  unint64_t result;

  result = qword_1EE67B548;
  if (!qword_1EE67B548)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDrop.ContactInfo, &type metadata for SFAirDrop.ContactInfo);
    atomic_store(result, (unint64_t *)&qword_1EE67B548);
  }
  return result;
}

unint64_t sub_1A298FD70()
{
  unint64_t result;

  result = qword_1EE67B558;
  if (!qword_1EE67B558)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFCEC0, &_s8TransferV5StateO34ImportingReceivedContactCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B558);
  }
  return result;
}

unint64_t sub_1A298FDB4()
{
  unint64_t result;

  result = qword_1EE67B560;
  if (!qword_1EE67B560)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFCE70, &_s8TransferV5StateO47WaitingForShouldImportContactResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B560);
  }
  return result;
}

unint64_t sub_1A298FDF8()
{
  unint64_t result;

  result = qword_1EE67B570;
  if (!qword_1EE67B570)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFCE20, &_s8TransferV5StateO42WaitingForContactExchangeRequestCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B570);
  }
  return result;
}

unint64_t sub_1A298FE3C()
{
  unint64_t result;

  result = qword_1EE67B578;
  if (!qword_1EE67B578)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFCDD0, &_s8TransferV5StateO17OpeningCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B578);
  }
  return result;
}

unint64_t sub_1A298FE80()
{
  unint64_t result;

  result = qword_1EE67B580;
  if (!qword_1EE67B580)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFCD80, &_s8TransferV5StateO43WaitingForOpenDestinationResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B580);
  }
  return result;
}

unint64_t sub_1A298FEC4()
{
  unint64_t result;

  result = qword_1EE67B588;
  if (!qword_1EE67B588)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFCD30, &_s8TransferV5StateO32WaitingForOpenResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B588);
  }
  return result;
}

unint64_t sub_1A298FF08()
{
  unint64_t result;

  result = qword_1EE67B590;
  if (!qword_1EE67B590)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFCCE0, &_s8TransferV5StateO19ImportingCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B590);
  }
  return result;
}

unint64_t sub_1A298FF4C()
{
  unint64_t result;

  result = qword_1EE67B598;
  if (!qword_1EE67B598)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFCC90, &_s8TransferV5StateO48WaitingForSensitiveContentInterventionCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B598);
  }
  return result;
}

unint64_t sub_1A298FF90()
{
  unint64_t result;

  result = qword_1EE67B5A0;
  if (!qword_1EE67B5A0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFCC40, &_s8TransferV5StateO44WaitingForSensitiveContentResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B5A0);
  }
  return result;
}

unint64_t sub_1A298FFD4()
{
  unint64_t result;

  result = qword_1EE67B5A8;
  if (!qword_1EE67B5A8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFCBF0, &_s8TransferV5StateO30AnalyzingFullContentCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B5A8);
  }
  return result;
}

unint64_t sub_1A2990018()
{
  unint64_t result;

  result = qword_1EE67B5B8;
  if (!qword_1EE67B5B8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFCBA0, &_s8TransferV5StateO22TransferringCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B5B8);
  }
  return result;
}

unint64_t sub_1A299005C()
{
  unint64_t result;

  result = qword_1EE67B5C0;
  if (!qword_1EE67B5C0)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDrop.Progress, &type metadata for SFAirDrop.Progress);
    atomic_store(result, (unint64_t *)&qword_1EE67B5C0);
  }
  return result;
}

unint64_t sub_1A29900A0()
{
  unint64_t result;

  result = qword_1EE67B5C8;
  if (!qword_1EE67B5C8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFCB50, &_s8TransferV5StateO48WaitingForSensitivePreviewInterventionCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B5C8);
  }
  return result;
}

unint64_t sub_1A29900E4()
{
  unint64_t result;

  result = qword_1EE67B5D0;
  if (!qword_1EE67B5D0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFCB00, &_s8TransferV5StateO50WaitingForShareContactPermissionResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B5D0);
  }
  return result;
}

unint64_t sub_1A2990128()
{
  unint64_t result;

  result = qword_1EE67B5D8;
  if (!qword_1EE67B5D8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFCAB0, &_s8TransferV5StateO31WaitingForAskResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B5D8);
  }
  return result;
}

unint64_t sub_1A299016C()
{
  unint64_t result;

  result = qword_1EE67B5E0;
  if (!qword_1EE67B5E0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFCA60, &_s8TransferV5StateO27AnalyizingPreviewCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B5E0);
  }
  return result;
}

unint64_t sub_1A29901B0()
{
  unint64_t result;

  result = qword_1EE67B5E8;
  if (!qword_1EE67B5E8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFCA10, &_s8TransferV5StateO22AutoAcceptedCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B5E8);
  }
  return result;
}

unint64_t sub_1A29901F4()
{
  unint64_t result;

  result = qword_1EE67B5F0;
  if (!qword_1EE67B5F0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC9C0, &_s8TransferV5StateO17CreatedCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B5F0);
  }
  return result;
}

uint64_t sub_1A2990238(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE67B520);
    v10 = sub_1A296E8A4(a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], a3);
    result = MEMORY[0x1A85895EC](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A29902BC()
{
  unint64_t result;

  result = qword_1EE674F48[0];
  if (!qword_1EE674F48[0])
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDrop.ContactRequest, &type metadata for SFAirDrop.ContactRequest);
    atomic_store(result, qword_1EE674F48);
  }
  return result;
}

unint64_t sub_1A2990300()
{
  unint64_t result;

  result = qword_1EE67B6D0;
  if (!qword_1EE67B6D0)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDrop.ContactInfo, &type metadata for SFAirDrop.ContactInfo);
    atomic_store(result, (unint64_t *)&qword_1EE67B6D0);
  }
  return result;
}

unint64_t sub_1A2990344()
{
  unint64_t result;

  result = qword_1EE67B6F0;
  if (!qword_1EE67B6F0)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDrop.Progress, &type metadata for SFAirDrop.Progress);
    atomic_store(result, (unint64_t *)&qword_1EE67B6F0);
  }
  return result;
}

uint64_t sub_1A2990388(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for SFAirDropReceive.Transfer(uint64_t a1)
{
  return sub_1A29903E0(a1, (uint64_t *)&unk_1EE6747F0);
}

uint64_t sub_1A29903E0(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A2990414(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1A2990458()
{
  unint64_t result;

  result = qword_1EE67B710;
  if (!qword_1EE67B710)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC970, &_s8TransferV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B710);
  }
  return result;
}

unint64_t sub_1A299049C()
{
  unint64_t result;

  result = qword_1EE67B728;
  if (!qword_1EE67B728)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDrop.DisplayPriority, &type metadata for SFAirDrop.DisplayPriority);
    atomic_store(result, (unint64_t *)&qword_1EE67B728);
  }
  return result;
}

unint64_t sub_1A29904E0()
{
  unint64_t result;

  result = qword_1EE67B740;
  if (!qword_1EE67B740)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFNWInterfaceType, &type metadata for SFNWInterfaceType);
    atomic_store(result, (unint64_t *)&qword_1EE67B740);
  }
  return result;
}

unint64_t sub_1A2990524()
{
  unint64_t result;

  result = qword_1EE67B760;
  if (!qword_1EE67B760)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDrop.DisplayPriority, &type metadata for SFAirDrop.DisplayPriority);
    atomic_store(result, (unint64_t *)&qword_1EE67B760);
  }
  return result;
}

unint64_t sub_1A2990568()
{
  unint64_t result;

  result = qword_1EE67B778;
  if (!qword_1EE67B778)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFNWInterfaceType, &type metadata for SFNWInterfaceType);
    atomic_store(result, (unint64_t *)&qword_1EE67B778);
  }
  return result;
}

uint64_t sub_1A29905AC()
{
  return sub_1A296E8A4(&qword_1EE67B780, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
}

_QWORD *_s8TransferVwCP(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v3;
  int v5;
  int *v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  int *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, char *, uint64_t);
  char v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  int *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  int v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(char *, char *, uint64_t);
  char v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  int *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  void (*v177)(char *, char *, uint64_t);
  int *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void (*v186)(char *, char *, uint64_t);
  int *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  unsigned __int8 v235;
  uint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned __int8 v249;
  uint64_t v250;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  unsigned __int8 v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unsigned __int8 v280;
  uint64_t v281;
  char *v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  unsigned __int8 v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unsigned __int8 v309;
  uint64_t v310;
  char *v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  _QWORD *v325;
  unsigned __int8 v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  _QWORD *v341;
  unsigned __int8 v342;
  uint64_t v343;
  char *v344;
  char *v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  char *v366;
  uint64_t v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  char *v371;
  uint64_t v372;
  uint64_t v373;
  int *v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  char *v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  char *v388;
  char *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  char *v397;
  char *v398;
  uint64_t v399;
  char *v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  int *v404;
  uint64_t v405;
  char *v406;
  char *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unsigned __int8 v413;
  uint64_t v414;
  char *v415;
  char *v416;
  char *v417;
  uint64_t v418;
  char *v419;
  char *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  char *v425;
  char *v426;
  int *v427;
  uint64_t v428;
  char *v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  uint64_t v434;
  char *v435;
  char *v436;
  char *v437;
  uint64_t v438;
  char *v439;
  char *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  char *v445;
  char *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  _QWORD *v452;
  unsigned __int8 v453;
  uint64_t v454;
  char *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  char *v459;
  char *v460;
  int *v461;
  uint64_t v462;
  char *v463;
  char *v464;
  uint64_t v465;
  uint64_t v466;
  int v467;
  uint64_t v468;
  char *v469;
  char *v470;
  char *v471;
  uint64_t v472;
  char *v473;
  char *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  char *v479;
  char *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  _QWORD *v486;
  unsigned __int8 v487;
  uint64_t v488;
  char *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  int *v493;
  uint64_t v494;
  char *v495;
  char *v496;
  int *v497;
  uint64_t v498;
  char *v499;
  char *v500;
  uint64_t v501;
  uint64_t v502;
  int v503;
  uint64_t v504;
  char *v505;
  char *v506;
  char *v507;
  uint64_t v508;
  char *v509;
  char *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  char *v515;
  char *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  _QWORD *v522;
  unsigned __int8 v523;
  uint64_t v524;
  char *v525;
  uint64_t v526;
  int *v527;
  uint64_t v528;
  char *v529;
  char *v530;
  int *v531;
  uint64_t v532;
  char *v533;
  char *v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  uint64_t v538;
  char *v539;
  char *v540;
  char *v541;
  uint64_t v542;
  char *v543;
  char *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  char *v549;
  char *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  _QWORD *v556;
  unsigned __int8 v557;
  uint64_t v558;
  char *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  char *v563;
  char *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unsigned __int8 v570;
  uint64_t v571;
  char *v572;
  char *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  int *v580;
  uint64_t v581;
  uint64_t *v582;
  uint64_t *v583;
  uint64_t v584;
  int v585;
  uint64_t v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  char *v591;
  char *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  char *v597;
  char *v598;
  uint64_t v599;
  int v600;
  uint64_t v601;
  uint64_t v602;
  char *v603;
  char *v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  char *v609;
  char *v610;
  int *v611;
  uint64_t v612;
  char *v613;
  char *v614;
  uint64_t v615;
  uint64_t v616;
  unsigned __int8 v617;
  uint64_t v618;
  char *v619;
  char *v620;
  uint64_t v621;
  char *v622;
  char *v623;
  uint64_t v624;
  char *v625;
  char *v626;
  uint64_t v627;
  char *v628;
  char *v629;
  uint64_t v630;
  char *v631;
  char *v632;
  uint64_t v633;
  char *v634;
  char *v635;
  uint64_t v636;
  char *v637;
  char *v638;
  uint64_t v639;
  char *v640;
  char *v641;
  uint64_t v642;
  char *v643;
  char *v644;
  uint64_t v645;
  uint64_t v646;
  char *v647;
  char *v648;
  uint64_t v649;
  uint64_t v650;
  void *v651;
  uint64_t v652;
  void *v653;
  uint64_t v654;
  void *v655;
  uint64_t v656;
  char *v657;
  char *v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  id v662;
  id v663;
  id v664;
  uint64_t v665;
  _QWORD *v666;
  char *v667;
  uint64_t v668;
  char *v669;
  uint64_t *v670;
  unint64_t v671;
  uint64_t v672;
  int *v673;
  uint64_t v674;
  unint64_t *v675;
  unint64_t *v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  int v683;
  uint64_t v684;
  unint64_t v685;
  unint64_t v686;
  unint64_t v687;
  uint64_t v688;
  char *v689;
  char *v690;
  _OWORD *v691;
  uint64_t *v692;
  unint64_t v693;
  uint64_t v694;
  uint64_t v695;
  char *v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  _QWORD *v701;
  unsigned __int8 *v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  unsigned __int8 v711;
  uint64_t v712;
  char *v713;
  unsigned __int8 *v714;
  uint64_t v715;
  char *v716;
  char *v717;
  uint64_t v718;
  void (*v719)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v721;
  unsigned int (*v722)(char *, uint64_t, uint64_t);
  char *v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  char *__dst;
  char *v731;
  char *v732;
  uint64_t v733;
  uint64_t v734;
  _QWORD *v735;
  void (*v736)(char *, char *, uint64_t);
  _QWORD *v737;
  int *v738;

  v3 = a2;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    v11 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = type metadata accessor for SFAirDropClient.Identifier();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v12 = v3[1];
      *a1 = *v3;
      a1[1] = v12;
      a1[2] = v3[2];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, v3, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v9 = sub_1A2AE3130();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, v3, v9);
      swift_storeEnumTagMultiPayload();
    }
    v13 = v6[5];
    v14 = (char *)a1 + v13;
    v15 = (char *)v3 + v13;
    v16 = sub_1A2AE3130();
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    v18 = v6[6];
    v19 = (char *)a1 + v18;
    v20 = (char *)v3 + v18;
    v21 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
    v737 = v3;
    v738 = v6;
    v721 = v16;
    v736 = v17;
    v735 = a1;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v17(v19, v20, v16);
        v22 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        v19[v22[13]] = v20[v22[13]];
        v23 = v22[14];
        v24 = &v19[v23];
        v25 = &v20[v23];
        v26 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
        v27 = v22[15];
        v28 = &v19[v27];
        v29 = &v20[v27];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v30 = swift_getEnumCaseMultiPayload();
        if (v30 == 2)
        {
          v224 = *((_QWORD *)v29 + 1);
          *(_QWORD *)v28 = *(_QWORD *)v29;
          *((_QWORD *)v28 + 1) = v224;
          v225 = *((_QWORD *)v29 + 3);
          *((_QWORD *)v28 + 2) = *((_QWORD *)v29 + 2);
          *((_QWORD *)v28 + 3) = v225;
          *((_QWORD *)v28 + 4) = *((_QWORD *)v29 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v226 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v227 = &v28[v226];
          v228 = &v29[v226];
          v229 = *(_QWORD *)&v29[v226 + 8];
          *(_QWORD *)v227 = *(_QWORD *)&v29[v226];
          *((_QWORD *)v227 + 1) = v229;
          v230 = *(_QWORD *)&v29[v226 + 16];
          v231 = *(_QWORD *)&v29[v226 + 24];
          v232 = *(_QWORD *)&v29[v226 + 32];
          v233 = *(_QWORD *)&v29[v226 + 40];
          v234 = a1;
          v235 = v228[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v230, v231, v232, v233, v235);
          *((_QWORD *)v227 + 2) = v230;
          *((_QWORD *)v227 + 3) = v231;
          *((_QWORD *)v227 + 4) = v232;
          *((_QWORD *)v227 + 5) = v233;
          v227[48] = v235;
          a1 = v234;
          v16 = v721;
          v227[49] = v228[49];
          v236 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v237 = &v227[v236];
          v37 = &v228[v236];
          v17 = v736;
          v736(&v227[v236], &v228[v236], v721);
          v38 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v39 = &v237[v38];
          goto LABEL_80;
        }
        if (v30 == 1)
        {
          *v28 = *v29;
          v31 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v32 = &v28[v31];
          v33 = &v29[v31];
          v34 = &v29[v31];
          v17 = v736;
          v736(&v28[v31], v34, v16);
          v35 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v36 = &v32[v35];
          v37 = &v33[v35];
          v736(v36, v37, v16);
          v38 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v39 = &v36[v38];
LABEL_80:
          v238 = &v37[v38];
          v6 = v738;
          goto LABEL_88;
        }
        v239 = *((_QWORD *)v29 + 1);
        *(_QWORD *)v28 = *(_QWORD *)v29;
        *((_QWORD *)v28 + 1) = v239;
        v240 = *((_QWORD *)v29 + 3);
        *((_QWORD *)v28 + 2) = *((_QWORD *)v29 + 2);
        *((_QWORD *)v28 + 3) = v240;
        *((_QWORD *)v28 + 4) = *((_QWORD *)v29 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v241 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v242 = &v28[v241];
        v243 = &v29[v241];
        v244 = *(_QWORD *)&v29[v241 + 8];
        *(_QWORD *)v242 = *(_QWORD *)&v29[v241];
        *((_QWORD *)v242 + 1) = v244;
        v245 = *(_QWORD *)&v29[v241 + 16];
        v246 = *(_QWORD *)&v29[v241 + 24];
        v247 = *(_QWORD *)&v29[v241 + 32];
        v248 = *(_QWORD *)&v29[v241 + 40];
        v249 = v243[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v245, v246, v247, v248, v249);
        *((_QWORD *)v242 + 2) = v245;
        *((_QWORD *)v242 + 3) = v246;
        *((_QWORD *)v242 + 4) = v247;
        *((_QWORD *)v242 + 5) = v248;
        v242[48] = v249;
        v242[49] = v243[49];
        v250 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v251 = &v242[v250];
        v252 = &v243[v250];
        v17 = v736;
        v736(&v242[v250], &v243[v250], v16);
        v253 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v39 = &v251[v253];
        v238 = &v252[v253];
        a1 = v735;
        v6 = v738;
        goto LABEL_88;
      case 1u:
        v40 = *((_QWORD *)v20 + 1);
        *(_QWORD *)v19 = *(_QWORD *)v20;
        *((_QWORD *)v19 + 1) = v40;
        v41 = *((_QWORD *)v20 + 3);
        *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
        *((_QWORD *)v19 + 3) = v41;
        v42 = *((_QWORD *)v20 + 4);
        v43 = *((_QWORD *)v20 + 5);
        v44 = v17;
        v45 = v20[48];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        *((_QWORD *)v19 + 4) = v42;
        *((_QWORD *)v19 + 5) = v43;
        v19[48] = v45;
        v46 = *((_QWORD *)v20 + 7);
        v47 = *((_QWORD *)v20 + 8);
        sub_1A2973524(v46, v47);
        *((_QWORD *)v19 + 7) = v46;
        *((_QWORD *)v19 + 8) = v47;
        v48 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F8) + 48);
        v49 = &v19[v48];
        v50 = &v20[v48];
        v44(&v19[v48], &v20[v48], v16);
        v51 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
        v49[v51[13]] = v50[v51[13]];
        v52 = v51[14];
        v53 = &v49[v52];
        v54 = &v50[v52];
        v55 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
        v56 = v51[15];
        v57 = &v49[v56];
        v58 = &v50[v56];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
        v59 = swift_getEnumCaseMultiPayload();
        if (v59 == 2)
        {
          v254 = *((_QWORD *)v58 + 1);
          *(_QWORD *)v57 = *(_QWORD *)v58;
          *((_QWORD *)v57 + 1) = v254;
          v255 = *((_QWORD *)v58 + 3);
          *((_QWORD *)v57 + 2) = *((_QWORD *)v58 + 2);
          *((_QWORD *)v57 + 3) = v255;
          *((_QWORD *)v57 + 4) = *((_QWORD *)v58 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v256 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
          v257 = &v57[v256];
          v258 = &v58[v256];
          v259 = *(_QWORD *)&v58[v256 + 8];
          *(_QWORD *)v257 = *(_QWORD *)&v58[v256];
          *((_QWORD *)v257 + 1) = v259;
          v260 = *(_QWORD *)&v58[v256 + 16];
          v261 = *(_QWORD *)&v58[v256 + 24];
          v262 = *(_QWORD *)&v58[v256 + 32];
          v263 = *(_QWORD *)&v58[v256 + 40];
          v264 = a1;
          v265 = v258[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v260, v261, v262, v263, v265);
          *((_QWORD *)v257 + 2) = v260;
          *((_QWORD *)v257 + 3) = v261;
          *((_QWORD *)v257 + 4) = v262;
          *((_QWORD *)v257 + 5) = v263;
          v257[48] = v265;
          a1 = v264;
          v16 = v721;
          v257[49] = v258[49];
          v266 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v267 = &v257[v266];
          v268 = &v258[v266];
          v17 = v736;
          v3 = v737;
          v736(&v257[v266], v268, v721);
          v269 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v68 = &v267[v269];
          v69 = &v268[v269];
        }
        else
        {
          if (v59 != 1)
            goto LABEL_84;
          *v57 = *v58;
          v60 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A8) + 48);
          v61 = &v57[v60];
          v62 = &v58[v60];
          v63 = &v58[v60];
          v17 = v736;
          v736(&v57[v60], v63, v16);
          v64 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B0) + 52);
          v65 = &v61[v64];
          v66 = &v62[v64];
          v736(v65, v66, v16);
          v67 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v68 = &v65[v67];
          v69 = &v66[v67];
        }
        v6 = v738;
        goto LABEL_175;
      case 2u:
        v17(v19, v20, v16);
        v70 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        v19[v70[13]] = v20[v70[13]];
        v71 = v70[14];
        v72 = &v19[v71];
        v73 = &v20[v71];
        v74 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v72, v73, v74);
        v75 = v70[15];
        v76 = &v19[v75];
        v77 = &v20[v75];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v78 = swift_getEnumCaseMultiPayload();
        if (v78 == 2)
        {
          v285 = *((_QWORD *)v77 + 1);
          *(_QWORD *)v76 = *(_QWORD *)v77;
          *((_QWORD *)v76 + 1) = v285;
          v286 = *((_QWORD *)v77 + 3);
          *((_QWORD *)v76 + 2) = *((_QWORD *)v77 + 2);
          *((_QWORD *)v76 + 3) = v286;
          *((_QWORD *)v76 + 4) = *((_QWORD *)v77 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v287 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v288 = &v76[v287];
          v289 = &v77[v287];
          v290 = *(_QWORD *)&v77[v287 + 8];
          *(_QWORD *)v288 = *(_QWORD *)&v77[v287];
          *((_QWORD *)v288 + 1) = v290;
          v291 = *(_QWORD *)&v77[v287 + 16];
          v292 = *(_QWORD *)&v77[v287 + 24];
          v293 = *(_QWORD *)&v77[v287 + 32];
          v294 = *(_QWORD *)&v77[v287 + 40];
          v295 = a1;
          v296 = v289[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v291, v292, v293, v294, v296);
          *((_QWORD *)v288 + 2) = v291;
          *((_QWORD *)v288 + 3) = v292;
          *((_QWORD *)v288 + 4) = v293;
          *((_QWORD *)v288 + 5) = v294;
          v288[48] = v296;
          a1 = v295;
          v16 = v721;
          v288[49] = v289[49];
          v297 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v298 = &v288[v297];
          v85 = &v289[v297];
          v17 = v736;
          v736(&v288[v297], &v289[v297], v721);
          v86 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v39 = &v298[v86];
          goto LABEL_86;
        }
        if (v78 == 1)
        {
          *v76 = *v77;
          v79 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v80 = &v76[v79];
          v81 = &v77[v79];
          v82 = &v77[v79];
          v17 = v736;
          v736(&v76[v79], v82, v16);
          v83 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v84 = &v80[v83];
          v85 = &v81[v83];
          v736(v84, v85, v16);
          v86 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v39 = &v84[v86];
LABEL_86:
          v238 = &v85[v86];
          v6 = v738;
          goto LABEL_88;
        }
        v299 = *((_QWORD *)v77 + 1);
        *(_QWORD *)v76 = *(_QWORD *)v77;
        *((_QWORD *)v76 + 1) = v299;
        v300 = *((_QWORD *)v77 + 3);
        *((_QWORD *)v76 + 2) = *((_QWORD *)v77 + 2);
        *((_QWORD *)v76 + 3) = v300;
        *((_QWORD *)v76 + 4) = *((_QWORD *)v77 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v301 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v302 = &v76[v301];
        v303 = &v77[v301];
        v304 = *(_QWORD *)&v77[v301 + 8];
        *(_QWORD *)v302 = *(_QWORD *)&v77[v301];
        *((_QWORD *)v302 + 1) = v304;
        v305 = *(_QWORD *)&v77[v301 + 16];
        v306 = *(_QWORD *)&v77[v301 + 24];
        v307 = *(_QWORD *)&v77[v301 + 32];
        v308 = *(_QWORD *)&v77[v301 + 40];
        v309 = v303[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v305, v306, v307, v308, v309);
        *((_QWORD *)v302 + 2) = v305;
        *((_QWORD *)v302 + 3) = v306;
        *((_QWORD *)v302 + 4) = v307;
        *((_QWORD *)v302 + 5) = v308;
        v302[48] = v309;
        v302[49] = v303[49];
        v310 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v311 = &v302[v310];
        v312 = &v303[v310];
        v17 = v736;
        v736(&v302[v310], &v303[v310], v16);
        v313 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v39 = &v311[v313];
        v238 = &v312[v313];
        a1 = v735;
        v6 = v738;
LABEL_88:
        v314 = *((_QWORD *)v238 + 1);
        *(_QWORD *)v39 = *(_QWORD *)v238;
        *((_QWORD *)v39 + 1) = v314;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        v3 = v737;
        goto LABEL_206;
      case 3u:
        v87 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v88 = swift_getEnumCaseMultiPayload();
        if (v88 == 2)
        {
          v347 = *((_QWORD *)v20 + 1);
          if (v347 >> 60 == 15)
          {
            *(_OWORD *)v19 = *(_OWORD *)v20;
          }
          else
          {
            v373 = *(_QWORD *)v20;
            sub_1A2973524(*(_QWORD *)v20, *((_QWORD *)v20 + 1));
            *(_QWORD *)v19 = v373;
            *((_QWORD *)v19 + 1) = v347;
          }
        }
        else if (v88 == 1)
        {
          v348 = *((_QWORD *)v20 + 1);
          *(_QWORD *)v19 = *(_QWORD *)v20;
          *((_QWORD *)v19 + 1) = v348;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v88)
          {
            memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
            goto LABEL_135;
          }
          v89 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v19, v20, v89);
        }
        swift_storeEnumTagMultiPayload();
LABEL_135:
        v374 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F0);
        v375 = v374[12];
        v376 = (uint64_t *)&v19[v375];
        v377 = (uint64_t *)&v20[v375];
        v378 = *v377;
        v379 = v377[1];
        v380 = v377[2];
        v381 = v377[3];
        v382 = v377[4];
        sub_1A2993E5C(*v377, v379, v380);
        *v376 = v378;
        v376[1] = v379;
        v376[2] = v380;
        v376[3] = v381;
        v376[4] = v382;
        v383 = v374[16];
        v384 = &v19[v383];
        v385 = &v20[v383];
        v386 = *((_QWORD *)v385 + 1);
        *(_QWORD *)v384 = *(_QWORD *)v385;
        *((_QWORD *)v384 + 1) = v386;
        v387 = v374[20];
        v388 = &v19[v387];
        v389 = &v20[v387];
        v390 = *(_QWORD *)&v20[v387 + 8];
        *(_QWORD *)v388 = *(_QWORD *)&v20[v387];
        *((_QWORD *)v388 + 1) = v390;
        v391 = *(_QWORD *)&v20[v387 + 16];
        v392 = *(_QWORD *)&v20[v387 + 24];
        v393 = *(_QWORD *)&v20[v387 + 32];
        v394 = *(_QWORD *)&v20[v387 + 40];
        LOBYTE(v381) = v389[48];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A2993E10(v391, v392, v393, v394, v381);
        *((_QWORD *)v388 + 2) = v391;
        *((_QWORD *)v388 + 3) = v392;
        *((_QWORD *)v388 + 4) = v393;
        *((_QWORD *)v388 + 5) = v394;
        v388[48] = v381;
        v388[49] = v389[49];
        v395 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v396 = &v388[v395];
        v397 = &v389[v395];
        v398 = &v389[v395];
        v16 = v721;
        v17 = v736;
        v736(&v388[v395], v398, v721);
        v399 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v400 = &v396[v399];
        v401 = &v397[v399];
        v402 = *((_QWORD *)v401 + 1);
        *(_QWORD *)v400 = *(_QWORD *)v401;
        *((_QWORD *)v400 + 1) = v402;
        swift_retain();
        goto LABEL_139;
      case 4u:
        v90 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v91 = swift_getEnumCaseMultiPayload();
        if (v91 == 2)
        {
          v349 = *((_QWORD *)v20 + 1);
          if (v349 >> 60 == 15)
          {
            *(_OWORD *)v19 = *(_OWORD *)v20;
          }
          else
          {
            v403 = *(_QWORD *)v20;
            sub_1A2973524(*(_QWORD *)v20, *((_QWORD *)v20 + 1));
            *(_QWORD *)v19 = v403;
            *((_QWORD *)v19 + 1) = v349;
          }
        }
        else if (v91 == 1)
        {
          v350 = *((_QWORD *)v20 + 1);
          *(_QWORD *)v19 = *(_QWORD *)v20;
          *((_QWORD *)v19 + 1) = v350;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v91)
          {
            memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
            goto LABEL_138;
          }
          v92 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v19, v20, v92);
        }
        swift_storeEnumTagMultiPayload();
LABEL_138:
        v404 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E8);
        *(_QWORD *)&v19[v404[12]] = *(_QWORD *)&v20[v404[12]];
        *(_QWORD *)&v19[v404[16]] = *(_QWORD *)&v20[v404[16]];
        v405 = v404[20];
        v406 = &v19[v405];
        v407 = &v20[v405];
        v408 = *(_QWORD *)&v20[v405 + 8];
        *(_QWORD *)v406 = *(_QWORD *)&v20[v405];
        *((_QWORD *)v406 + 1) = v408;
        v409 = *(_QWORD *)&v20[v405 + 16];
        v410 = *(_QWORD *)&v20[v405 + 24];
        v411 = *(_QWORD *)&v20[v405 + 32];
        v412 = *(_QWORD *)&v20[v405 + 40];
        v413 = v407[48];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A2993E10(v409, v410, v411, v412, v413);
        *((_QWORD *)v406 + 2) = v409;
        *((_QWORD *)v406 + 3) = v410;
        *((_QWORD *)v406 + 4) = v411;
        *((_QWORD *)v406 + 5) = v412;
        v406[48] = v413;
        v406[49] = v407[49];
        v414 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v415 = &v406[v414];
        v416 = &v407[v414];
        v417 = &v407[v414];
        v16 = v721;
        v17 = v736;
        v736(&v406[v414], v417, v721);
        v418 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v419 = &v415[v418];
        v420 = &v416[v418];
        v421 = *((_QWORD *)v420 + 1);
        *(_QWORD *)v419 = *(_QWORD *)v420;
        *((_QWORD *)v419 + 1) = v421;
        swift_retain();
LABEL_139:
        swift_storeEnumTagMultiPayload();
        v3 = v737;
        v6 = v738;
        goto LABEL_206;
      case 5u:
        v93 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v94 = swift_getEnumCaseMultiPayload();
        if (v94 == 2)
        {
          v351 = *((_QWORD *)v20 + 1);
          if (v351 >> 60 == 15)
          {
            *(_OWORD *)v19 = *(_OWORD *)v20;
          }
          else
          {
            v422 = *(_QWORD *)v20;
            sub_1A2973524(*(_QWORD *)v20, *((_QWORD *)v20 + 1));
            *(_QWORD *)v19 = v422;
            *((_QWORD *)v19 + 1) = v351;
          }
        }
        else if (v94 == 1)
        {
          v352 = *((_QWORD *)v20 + 1);
          *(_QWORD *)v19 = *(_QWORD *)v20;
          *((_QWORD *)v19 + 1) = v352;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v94)
          {
            memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
            goto LABEL_142;
          }
          v95 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(v19, v20, v95);
        }
        swift_storeEnumTagMultiPayload();
LABEL_142:
        v423 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
        *(_QWORD *)&v19[*(int *)(v423 + 48)] = *(_QWORD *)&v20[*(int *)(v423 + 48)];
        v424 = *(int *)(v423 + 64);
        v425 = &v19[v424];
        v426 = &v20[v424];
        swift_bridgeObjectRetain();
        v17(v425, v426, v16);
        v427 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        v425[v427[13]] = v426[v427[13]];
        v428 = v427[14];
        v429 = &v425[v428];
        v430 = &v426[v428];
        v431 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v431 - 8) + 16))(v429, v430, v431);
        v432 = v427[15];
        v128 = &v425[v432];
        v129 = &v426[v432];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v433 = swift_getEnumCaseMultiPayload();
        if (v433 == 2)
        {
          v442 = *((_QWORD *)v129 + 1);
          *(_QWORD *)v128 = *(_QWORD *)v129;
          *((_QWORD *)v128 + 1) = v442;
          v443 = *((_QWORD *)v129 + 3);
          *((_QWORD *)v128 + 2) = *((_QWORD *)v129 + 2);
          *((_QWORD *)v128 + 3) = v443;
          *((_QWORD *)v128 + 4) = *((_QWORD *)v129 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v444 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v445 = &v128[v444];
          v446 = &v129[v444];
          v447 = *(_QWORD *)&v129[v444 + 8];
          *(_QWORD *)v445 = *(_QWORD *)&v129[v444];
          *((_QWORD *)v445 + 1) = v447;
          v448 = *(_QWORD *)&v129[v444 + 16];
          v449 = *(_QWORD *)&v129[v444 + 24];
          v450 = *(_QWORD *)&v129[v444 + 32];
          v451 = *(_QWORD *)&v129[v444 + 40];
          v452 = a1;
          v453 = v446[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v448, v449, v450, v451, v453);
          *((_QWORD *)v445 + 2) = v448;
          *((_QWORD *)v445 + 3) = v449;
          *((_QWORD *)v445 + 4) = v450;
          *((_QWORD *)v445 + 5) = v451;
          v445[48] = v453;
          a1 = v452;
          v16 = v721;
          v445[49] = v446[49];
          v454 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v455 = &v445[v454];
          v440 = &v446[v454];
          v17 = v736;
          v3 = v737;
          v736(&v445[v454], v440, v721);
          v441 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v68 = &v455[v441];
        }
        else
        {
          if (v433 != 1)
            goto LABEL_174;
          *v128 = *v129;
          v434 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v435 = &v128[v434];
          v436 = &v129[v434];
          v437 = &v129[v434];
          v17 = v736;
          v736(&v128[v434], v437, v16);
          v438 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v439 = &v435[v438];
          v440 = &v436[v438];
          v736(v439, v440, v16);
          v441 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v68 = &v439[v441];
        }
        v69 = &v440[v441];
        v6 = v738;
        goto LABEL_175;
      case 6u:
        v96 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v97 = swift_getEnumCaseMultiPayload();
        if (v97 == 2)
        {
          v353 = *((_QWORD *)v20 + 1);
          if (v353 >> 60 == 15)
          {
            *(_OWORD *)v19 = *(_OWORD *)v20;
          }
          else
          {
            v456 = *(_QWORD *)v20;
            sub_1A2973524(*(_QWORD *)v20, *((_QWORD *)v20 + 1));
            *(_QWORD *)v19 = v456;
            *((_QWORD *)v19 + 1) = v353;
          }
        }
        else if (v97 == 1)
        {
          v354 = *((_QWORD *)v20 + 1);
          *(_QWORD *)v19 = *(_QWORD *)v20;
          *((_QWORD *)v19 + 1) = v354;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v97)
          {
            memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
            goto LABEL_150;
          }
          v98 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 16))(v19, v20, v98);
        }
        swift_storeEnumTagMultiPayload();
LABEL_150:
        v457 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
        *(_QWORD *)&v19[*(int *)(v457 + 48)] = *(_QWORD *)&v20[*(int *)(v457 + 48)];
        v458 = *(int *)(v457 + 64);
        v459 = &v19[v458];
        v460 = &v20[v458];
        swift_bridgeObjectRetain();
        v17(v459, v460, v16);
        v461 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        v459[v461[13]] = v460[v461[13]];
        v462 = v461[14];
        v463 = &v459[v462];
        v464 = &v460[v462];
        v465 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v465 - 8) + 16))(v463, v464, v465);
        v466 = v461[15];
        v128 = &v459[v466];
        v129 = &v460[v466];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v467 = swift_getEnumCaseMultiPayload();
        if (v467 == 2)
        {
          v476 = *((_QWORD *)v129 + 1);
          *(_QWORD *)v128 = *(_QWORD *)v129;
          *((_QWORD *)v128 + 1) = v476;
          v477 = *((_QWORD *)v129 + 3);
          *((_QWORD *)v128 + 2) = *((_QWORD *)v129 + 2);
          *((_QWORD *)v128 + 3) = v477;
          *((_QWORD *)v128 + 4) = *((_QWORD *)v129 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v478 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v479 = &v128[v478];
          v480 = &v129[v478];
          v481 = *(_QWORD *)&v129[v478 + 8];
          *(_QWORD *)v479 = *(_QWORD *)&v129[v478];
          *((_QWORD *)v479 + 1) = v481;
          v482 = *(_QWORD *)&v129[v478 + 16];
          v483 = *(_QWORD *)&v129[v478 + 24];
          v484 = *(_QWORD *)&v129[v478 + 32];
          v485 = *(_QWORD *)&v129[v478 + 40];
          v486 = a1;
          v487 = v480[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v482, v483, v484, v485, v487);
          *((_QWORD *)v479 + 2) = v482;
          *((_QWORD *)v479 + 3) = v483;
          *((_QWORD *)v479 + 4) = v484;
          *((_QWORD *)v479 + 5) = v485;
          v479[48] = v487;
          a1 = v486;
          v16 = v721;
          v479[49] = v480[49];
          v488 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v489 = &v479[v488];
          v474 = &v480[v488];
          v17 = v736;
          v3 = v737;
          v736(&v479[v488], v474, v721);
          v475 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v68 = &v489[v475];
        }
        else
        {
          if (v467 != 1)
            goto LABEL_174;
          *v128 = *v129;
          v468 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v469 = &v128[v468];
          v470 = &v129[v468];
          v471 = &v129[v468];
          v17 = v736;
          v736(&v128[v468], v471, v16);
          v472 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v473 = &v469[v472];
          v474 = &v470[v472];
          v736(v473, v474, v16);
          v475 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v68 = &v473[v475];
        }
        v69 = &v474[v475];
        v6 = v738;
        goto LABEL_175;
      case 7u:
        v99 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v100 = swift_getEnumCaseMultiPayload();
        if (v100 == 2)
        {
          v355 = *((_QWORD *)v20 + 1);
          if (v355 >> 60 == 15)
          {
            *(_OWORD *)v19 = *(_OWORD *)v20;
          }
          else
          {
            v490 = *(_QWORD *)v20;
            sub_1A2973524(*(_QWORD *)v20, *((_QWORD *)v20 + 1));
            *(_QWORD *)v19 = v490;
            *((_QWORD *)v19 + 1) = v355;
            v6 = v738;
          }
        }
        else if (v100 == 1)
        {
          v356 = *((_QWORD *)v20 + 1);
          *(_QWORD *)v19 = *(_QWORD *)v20;
          *((_QWORD *)v19 + 1) = v356;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v100)
          {
            memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
            goto LABEL_158;
          }
          v101 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(v19, v20, v101);
        }
        swift_storeEnumTagMultiPayload();
LABEL_158:
        v491 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D8);
        *(_QWORD *)&v19[*(int *)(v491 + 48)] = *(_QWORD *)&v20[*(int *)(v491 + 48)];
        *(_QWORD *)&v19[*(int *)(v491 + 64)] = *(_QWORD *)&v20[*(int *)(v491 + 64)];
        swift_bridgeObjectRetain();
        goto LABEL_205;
      case 8u:
        v102 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v103 = swift_getEnumCaseMultiPayload();
        if (v103 == 2)
        {
          v357 = *((_QWORD *)v20 + 1);
          if (v357 >> 60 == 15)
          {
            *(_OWORD *)v19 = *(_OWORD *)v20;
          }
          else
          {
            v492 = *(_QWORD *)v20;
            sub_1A2973524(*(_QWORD *)v20, *((_QWORD *)v20 + 1));
            *(_QWORD *)v19 = v492;
            *((_QWORD *)v19 + 1) = v357;
          }
        }
        else if (v103 == 1)
        {
          v358 = *((_QWORD *)v20 + 1);
          *(_QWORD *)v19 = *(_QWORD *)v20;
          *((_QWORD *)v19 + 1) = v358;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v103)
          {
            memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
            goto LABEL_161;
          }
          v104 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v19, v20, v104);
        }
        swift_storeEnumTagMultiPayload();
LABEL_161:
        v493 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
        *(_QWORD *)&v19[v493[12]] = *(_QWORD *)&v20[v493[12]];
        *(_QWORD *)&v19[v493[16]] = *(_QWORD *)&v20[v493[16]];
        v494 = v493[20];
        v495 = &v19[v494];
        v496 = &v20[v494];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v17(v495, v496, v16);
        v497 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        v495[v497[13]] = v496[v497[13]];
        v498 = v497[14];
        v499 = &v495[v498];
        v500 = &v496[v498];
        v501 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v501 - 8) + 16))(v499, v500, v501);
        v502 = v497[15];
        v128 = &v495[v502];
        v129 = &v496[v502];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v503 = swift_getEnumCaseMultiPayload();
        if (v503 == 2)
        {
          v512 = *((_QWORD *)v129 + 1);
          *(_QWORD *)v128 = *(_QWORD *)v129;
          *((_QWORD *)v128 + 1) = v512;
          v513 = *((_QWORD *)v129 + 3);
          *((_QWORD *)v128 + 2) = *((_QWORD *)v129 + 2);
          *((_QWORD *)v128 + 3) = v513;
          *((_QWORD *)v128 + 4) = *((_QWORD *)v129 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v514 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v515 = &v128[v514];
          v516 = &v129[v514];
          v517 = *(_QWORD *)&v129[v514 + 8];
          *(_QWORD *)v515 = *(_QWORD *)&v129[v514];
          *((_QWORD *)v515 + 1) = v517;
          v518 = *(_QWORD *)&v129[v514 + 16];
          v519 = *(_QWORD *)&v129[v514 + 24];
          v520 = *(_QWORD *)&v129[v514 + 32];
          v521 = *(_QWORD *)&v129[v514 + 40];
          v522 = a1;
          v523 = v516[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v518, v519, v520, v521, v523);
          *((_QWORD *)v515 + 2) = v518;
          *((_QWORD *)v515 + 3) = v519;
          *((_QWORD *)v515 + 4) = v520;
          *((_QWORD *)v515 + 5) = v521;
          v515[48] = v523;
          a1 = v522;
          v16 = v721;
          v515[49] = v516[49];
          v524 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v525 = &v515[v524];
          v510 = &v516[v524];
          v17 = v736;
          v3 = v737;
          v736(&v515[v524], v510, v721);
          v511 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v68 = &v525[v511];
        }
        else
        {
          if (v503 != 1)
            goto LABEL_174;
          *v128 = *v129;
          v504 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v505 = &v128[v504];
          v506 = &v129[v504];
          v507 = &v129[v504];
          v17 = v736;
          v736(&v128[v504], v507, v16);
          v508 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v509 = &v505[v508];
          v510 = &v506[v508];
          v736(v509, v510, v16);
          v511 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v68 = &v509[v511];
        }
        v69 = &v510[v511];
        v6 = v738;
        goto LABEL_175;
      case 9u:
        v105 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v106 = swift_getEnumCaseMultiPayload();
        if (v106 == 2)
        {
          v359 = *((_QWORD *)v20 + 1);
          if (v359 >> 60 == 15)
          {
            *(_OWORD *)v19 = *(_OWORD *)v20;
          }
          else
          {
            v526 = *(_QWORD *)v20;
            sub_1A2973524(*(_QWORD *)v20, *((_QWORD *)v20 + 1));
            *(_QWORD *)v19 = v526;
            *((_QWORD *)v19 + 1) = v359;
          }
        }
        else if (v106 == 1)
        {
          v360 = *((_QWORD *)v20 + 1);
          *(_QWORD *)v19 = *(_QWORD *)v20;
          *((_QWORD *)v19 + 1) = v360;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v106)
          {
            memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
            goto LABEL_169;
          }
          v107 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v19, v20, v107);
        }
        swift_storeEnumTagMultiPayload();
LABEL_169:
        v527 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
        *(_QWORD *)&v19[v527[12]] = *(_QWORD *)&v20[v527[12]];
        *(_QWORD *)&v19[v527[16]] = *(_QWORD *)&v20[v527[16]];
        v528 = v527[20];
        v529 = &v19[v528];
        v530 = &v20[v528];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v17(v529, v530, v16);
        v531 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        v529[v531[13]] = v530[v531[13]];
        v532 = v531[14];
        v533 = &v529[v532];
        v534 = &v530[v532];
        v535 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v535 - 8) + 16))(v533, v534, v535);
        v536 = v531[15];
        v128 = &v529[v536];
        v129 = &v530[v536];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v537 = swift_getEnumCaseMultiPayload();
        if (v537 == 2)
        {
          v546 = *((_QWORD *)v129 + 1);
          *(_QWORD *)v128 = *(_QWORD *)v129;
          *((_QWORD *)v128 + 1) = v546;
          v547 = *((_QWORD *)v129 + 3);
          *((_QWORD *)v128 + 2) = *((_QWORD *)v129 + 2);
          *((_QWORD *)v128 + 3) = v547;
          *((_QWORD *)v128 + 4) = *((_QWORD *)v129 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v548 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v549 = &v128[v548];
          v550 = &v129[v548];
          v551 = *(_QWORD *)&v129[v548 + 8];
          *(_QWORD *)v549 = *(_QWORD *)&v129[v548];
          *((_QWORD *)v549 + 1) = v551;
          v552 = *(_QWORD *)&v129[v548 + 16];
          v553 = *(_QWORD *)&v129[v548 + 24];
          v554 = *(_QWORD *)&v129[v548 + 32];
          v555 = *(_QWORD *)&v129[v548 + 40];
          v556 = a1;
          v557 = v550[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v552, v553, v554, v555, v557);
          *((_QWORD *)v549 + 2) = v552;
          *((_QWORD *)v549 + 3) = v553;
          *((_QWORD *)v549 + 4) = v554;
          *((_QWORD *)v549 + 5) = v555;
          v549[48] = v557;
          a1 = v556;
          v16 = v721;
          v549[49] = v550[49];
          v558 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v559 = &v549[v558];
          v544 = &v550[v558];
          v17 = v736;
          v3 = v737;
          v736(&v549[v558], v544, v721);
          v545 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v68 = &v559[v545];
        }
        else
        {
          if (v537 != 1)
            goto LABEL_174;
          *v128 = *v129;
          v538 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v539 = &v128[v538];
          v540 = &v129[v538];
          v541 = &v129[v538];
          v17 = v736;
          v736(&v128[v538], v541, v16);
          v542 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v543 = &v539[v542];
          v544 = &v540[v542];
          v736(v543, v544, v16);
          v545 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v68 = &v543[v545];
        }
        v69 = &v544[v545];
        v6 = v738;
        goto LABEL_175;
      case 0xAu:
        v108 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v109 = swift_getEnumCaseMultiPayload();
        if (v109 == 2)
        {
          v361 = *((_QWORD *)v20 + 1);
          if (v361 >> 60 == 15)
          {
            *(_OWORD *)v19 = *(_OWORD *)v20;
          }
          else
          {
            v576 = *(_QWORD *)v20;
            sub_1A2973524(*(_QWORD *)v20, *((_QWORD *)v20 + 1));
            *(_QWORD *)v19 = v576;
            *((_QWORD *)v19 + 1) = v361;
            v6 = v738;
          }
        }
        else if (v109 == 1)
        {
          v362 = *((_QWORD *)v20 + 1);
          *(_QWORD *)v19 = *(_QWORD *)v20;
          *((_QWORD *)v19 + 1) = v362;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v109)
          {
            memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
            goto LABEL_178;
          }
          v110 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 16))(v19, v20, v110);
        }
        swift_storeEnumTagMultiPayload();
LABEL_178:
        v577 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C8);
        *(_QWORD *)&v19[*(int *)(v577 + 48)] = *(_QWORD *)&v20[*(int *)(v577 + 48)];
        *(_QWORD *)&v19[*(int *)(v577 + 64)] = *(_QWORD *)&v20[*(int *)(v577 + 64)];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_205;
      case 0xBu:
        v111 = *((_QWORD *)v20 + 1);
        *(_QWORD *)v19 = *(_QWORD *)v20;
        *((_QWORD *)v19 + 1) = v111;
        v112 = *((_QWORD *)v20 + 3);
        *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
        *((_QWORD *)v19 + 3) = v112;
        v113 = *((_QWORD *)v20 + 4);
        v114 = *((_QWORD *)v20 + 5);
        v115 = v17;
        v116 = v20[48];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        *((_QWORD *)v19 + 4) = v113;
        *((_QWORD *)v19 + 5) = v114;
        v19[48] = v116;
        v117 = *((_QWORD *)v20 + 7);
        v118 = *((_QWORD *)v20 + 8);
        sub_1A2973524(v117, v118);
        *((_QWORD *)v19 + 7) = v117;
        *((_QWORD *)v19 + 8) = v118;
        v119 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B8) + 48);
        v120 = &v19[v119];
        v121 = &v20[v119];
        v115(&v19[v119], &v20[v119], v16);
        v122 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        v120[v122[13]] = v121[v122[13]];
        v123 = v122[14];
        v124 = &v120[v123];
        v125 = &v121[v123];
        v126 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 16))(v124, v125, v126);
        v127 = v122[15];
        v128 = &v120[v127];
        v129 = &v121[v127];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v130 = swift_getEnumCaseMultiPayload();
        if (v130 == 2)
        {
          v315 = *((_QWORD *)v129 + 1);
          *(_QWORD *)v128 = *(_QWORD *)v129;
          *((_QWORD *)v128 + 1) = v315;
          v316 = *((_QWORD *)v129 + 3);
          *((_QWORD *)v128 + 2) = *((_QWORD *)v129 + 2);
          *((_QWORD *)v128 + 3) = v316;
          *((_QWORD *)v128 + 4) = *((_QWORD *)v129 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v317 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v318 = &v128[v317];
          v319 = &v129[v317];
          v320 = *(_QWORD *)&v129[v317 + 8];
          *(_QWORD *)v318 = *(_QWORD *)&v129[v317];
          *((_QWORD *)v318 + 1) = v320;
          v321 = *(_QWORD *)&v129[v317 + 16];
          v322 = *(_QWORD *)&v129[v317 + 24];
          v323 = *(_QWORD *)&v129[v317 + 32];
          v324 = *(_QWORD *)&v129[v317 + 40];
          v325 = a1;
          v326 = v319[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v321, v322, v323, v324, v326);
          *((_QWORD *)v318 + 2) = v321;
          *((_QWORD *)v318 + 3) = v322;
          *((_QWORD *)v318 + 4) = v323;
          *((_QWORD *)v318 + 5) = v324;
          v318[48] = v326;
          a1 = v325;
          v16 = v721;
          v318[49] = v319[49];
          v327 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v328 = &v318[v327];
          v329 = &v319[v327];
          v17 = v736;
          v3 = v737;
          v736(&v318[v327], v329, v721);
          v330 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v68 = &v328[v330];
          v69 = &v329[v330];
          goto LABEL_90;
        }
        if (v130 == 1)
        {
          *v128 = *v129;
          v131 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v132 = &v128[v131];
          v133 = &v129[v131];
          v134 = &v129[v131];
          v17 = v736;
          v736(&v128[v131], v134, v16);
          v135 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v136 = &v132[v135];
          v137 = &v133[v135];
          v736(v136, v137, v16);
          v138 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v68 = &v136[v138];
          v69 = &v137[v138];
LABEL_90:
          v6 = v738;
          goto LABEL_175;
        }
LABEL_174:
        v560 = *((_QWORD *)v129 + 1);
        *(_QWORD *)v128 = *(_QWORD *)v129;
        *((_QWORD *)v128 + 1) = v560;
        v561 = *((_QWORD *)v129 + 3);
        *((_QWORD *)v128 + 2) = *((_QWORD *)v129 + 2);
        *((_QWORD *)v128 + 3) = v561;
        *((_QWORD *)v128 + 4) = *((_QWORD *)v129 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v562 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v563 = &v128[v562];
        v564 = &v129[v562];
        v565 = *(_QWORD *)&v129[v562 + 8];
        *(_QWORD *)v563 = *(_QWORD *)&v129[v562];
        *((_QWORD *)v563 + 1) = v565;
        v566 = *(_QWORD *)&v129[v562 + 16];
        v567 = *(_QWORD *)&v129[v562 + 24];
        v568 = *(_QWORD *)&v129[v562 + 32];
        v569 = *(_QWORD *)&v129[v562 + 40];
        v570 = v564[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v566, v567, v568, v569, v570);
        *((_QWORD *)v563 + 2) = v566;
        *((_QWORD *)v563 + 3) = v567;
        *((_QWORD *)v563 + 4) = v568;
        *((_QWORD *)v563 + 5) = v569;
        v563[48] = v570;
        v563[49] = v564[49];
        v571 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v572 = &v563[v571];
        v573 = &v564[v571];
        v17 = v736;
        v736(&v563[v571], &v564[v571], v16);
        v574 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v68 = &v572[v574];
        v69 = &v573[v574];
        a1 = v735;
        v3 = v737;
        v6 = v738;
LABEL_175:
        v575 = *((_QWORD *)v69 + 1);
        *(_QWORD *)v68 = *(_QWORD *)v69;
        *((_QWORD *)v68 + 1) = v575;
        swift_retain();
        swift_storeEnumTagMultiPayload();
LABEL_205:
        swift_storeEnumTagMultiPayload();
LABEL_206:
        v608 = v6[8];
        *((_BYTE *)a1 + v6[7]) = *((_BYTE *)v3 + v6[7]);
        v609 = (char *)a1 + v608;
        v610 = (char *)v3 + v608;
        v17((char *)a1 + v608, (char *)v3 + v608, v16);
        v611 = (int *)type metadata accessor for SFAirDropReceive.AskRequest(0);
        v612 = v611[5];
        v613 = &v609[v612];
        v614 = &v610[v612];
        v615 = *(_QWORD *)v614;
        v616 = *((_QWORD *)v614 + 1);
        v617 = v614[16];
        sub_1A2993E70(*(_QWORD *)v614, v616, v617);
        *(_QWORD *)v613 = v615;
        *((_QWORD *)v613 + 1) = v616;
        v613[16] = v617;
        *(_QWORD *)&v609[v611[6]] = *(_QWORD *)&v610[v611[6]];
        v609[v611[7]] = v610[v611[7]];
        v609[v611[8]] = v610[v611[8]];
        v609[v611[9]] = v610[v611[9]];
        v618 = v611[10];
        v619 = &v609[v618];
        v620 = &v610[v618];
        v734 = *((_QWORD *)v620 + 1);
        *(_QWORD *)v619 = *(_QWORD *)v620;
        *((_QWORD *)v619 + 1) = v734;
        v621 = v611[11];
        v622 = &v609[v621];
        v623 = &v610[v621];
        v733 = *((_QWORD *)v623 + 1);
        *(_QWORD *)v622 = *(_QWORD *)v623;
        *((_QWORD *)v622 + 1) = v733;
        v624 = v611[12];
        v625 = &v609[v624];
        v626 = &v610[v624];
        v729 = *((_QWORD *)v626 + 1);
        *(_QWORD *)v625 = *(_QWORD *)v626;
        *((_QWORD *)v625 + 1) = v729;
        v627 = v611[13];
        v628 = &v609[v627];
        v629 = &v610[v627];
        v728 = *((_QWORD *)v629 + 1);
        *(_QWORD *)v628 = *(_QWORD *)v629;
        *((_QWORD *)v628 + 1) = v728;
        v630 = v611[14];
        v631 = &v609[v630];
        v632 = &v610[v630];
        v727 = *((_QWORD *)v632 + 1);
        *(_QWORD *)v631 = *(_QWORD *)v632;
        *((_QWORD *)v631 + 1) = v727;
        v633 = v611[15];
        v634 = &v609[v633];
        v635 = &v610[v633];
        v726 = *((_QWORD *)v635 + 1);
        *(_QWORD *)v634 = *(_QWORD *)v635;
        *((_QWORD *)v634 + 1) = v726;
        v636 = v611[16];
        v637 = &v609[v636];
        v638 = &v610[v636];
        v725 = *((_QWORD *)v638 + 1);
        *(_QWORD *)v637 = *(_QWORD *)v638;
        *((_QWORD *)v637 + 1) = v725;
        v639 = v611[17];
        v640 = &v609[v639];
        v641 = &v610[v639];
        v724 = *((_QWORD *)v641 + 1);
        *(_QWORD *)v640 = *(_QWORD *)v641;
        *((_QWORD *)v640 + 1) = v724;
        v642 = v611[18];
        v643 = &v609[v642];
        v644 = &v610[v642];
        v645 = *((_QWORD *)v644 + 1);
        *(_QWORD *)v643 = *(_QWORD *)v644;
        *((_QWORD *)v643 + 1) = v645;
        v646 = v611[19];
        v647 = &v609[v646];
        v648 = &v610[v646];
        v649 = *((_QWORD *)v648 + 1);
        *(_QWORD *)v647 = *(_QWORD *)v648;
        *((_QWORD *)v647 + 1) = v649;
        v650 = v611[20];
        v651 = *(void **)&v610[v650];
        *(_QWORD *)&v609[v650] = v651;
        v652 = v611[21];
        v653 = *(void **)&v610[v652];
        *(_QWORD *)&v609[v652] = v653;
        v654 = v611[22];
        v655 = *(void **)&v610[v654];
        *(_QWORD *)&v609[v654] = v655;
        v656 = v611[23];
        v657 = &v609[v656];
        v658 = &v610[v656];
        v659 = *((_QWORD *)v658 + 1);
        *(_QWORD *)v657 = *(_QWORD *)v658;
        *((_QWORD *)v657 + 1) = v659;
        v660 = v611[24];
        __dst = &v609[v660];
        v723 = &v610[v660];
        v661 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
        v722 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v661 - 8) + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v662 = v651;
        v663 = v653;
        v664 = v655;
        swift_bridgeObjectRetain();
        if (!v722(v723, 1, v661))
        {
          v667 = (char *)&loc_1A2993988 + 4 * byte_1A2AFB1AE[swift_getEnumCaseMultiPayload()];
          __asm { BR              X10 }
        }
        v665 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D8);
        memcpy(__dst, v723, *(_QWORD *)(*(_QWORD *)(v665 - 8) + 64));
        v11 = v735;
        v666 = v737;
        *(_QWORD *)&v609[v611[25]] = *(_QWORD *)&v610[v611[25]];
        *(_QWORD *)&v609[v611[26]] = *(_QWORD *)&v610[v611[26]];
        v668 = v611[27];
        v669 = &v609[v668];
        v670 = (uint64_t *)&v610[v668];
        v671 = *(_QWORD *)&v610[v668 + 8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v671 >> 60 == 15)
        {
          *(_OWORD *)v669 = *(_OWORD *)v670;
        }
        else
        {
          v672 = *v670;
          sub_1A2973524(*v670, v671);
          *(_QWORD *)v669 = v672;
          *((_QWORD *)v669 + 1) = v671;
        }
        v673 = v738;
        v674 = v738[9];
        v675 = (_QWORD *)((char *)v735 + v674);
        v676 = (_QWORD *)((char *)v737 + v674);
        v677 = type metadata accessor for SFAirDropReceive.AskResponse();
        v678 = *(_QWORD *)(v677 - 8);
        if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v678 + 48))(v676, 1, v677))
        {
          v679 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B6F8);
          memcpy(v675, v676, *(_QWORD *)(*(_QWORD *)(v679 - 8) + 64));
          goto LABEL_231;
        }
        v680 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
        v681 = *(_QWORD *)(v680 - 8);
        if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v681 + 48))(v676, 3, v680))
        {
          memcpy(v675, v676, *(_QWORD *)(v678 + 64));
          goto LABEL_230;
        }
        v682 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v683 = swift_getEnumCaseMultiPayload();
        if (v683 == 2)
        {
          v685 = v676[1];
          if (v685 >> 60 == 15)
          {
            *(_OWORD *)v675 = *(_OWORD *)v676;
          }
          else
          {
            v687 = *v676;
            sub_1A2973524(*v676, v676[1]);
            *v675 = v687;
            v675[1] = v685;
          }
        }
        else if (v683 == 1)
        {
          v686 = v676[1];
          *v675 = *v676;
          v675[1] = v686;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v683)
          {
            memcpy(v675, v676, *(_QWORD *)(*(_QWORD *)(v682 - 8) + 64));
            goto LABEL_226;
          }
          v684 = sub_1A2AE2F44();
          (*(void (**)(unint64_t *, unint64_t *, uint64_t))(*(_QWORD *)(v684 - 8) + 16))(v675, v676, v684);
        }
        swift_storeEnumTagMultiPayload();
LABEL_226:
        v688 = *(int *)(v680 + 48);
        v689 = (char *)v675 + v688;
        v690 = (char *)v676 + v688;
        *((_BYTE *)v675 + v688) = *((_BYTE *)v676 + v688);
        v691 = (_OWORD *)((char *)v675 + v688 + 8);
        v692 = (uint64_t *)((char *)v676 + v688 + 8);
        v693 = *((_QWORD *)v690 + 2);
        if (v693 >> 60 == 15)
        {
          *v691 = *(_OWORD *)v692;
        }
        else
        {
          v694 = *v692;
          sub_1A2973524(*v692, v693);
          *((_QWORD *)v689 + 1) = v694;
          *((_QWORD *)v689 + 2) = v693;
        }
        v673 = v738;
        (*(void (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(v681 + 56))(v675, 0, 3, v680);
LABEL_230:
        (*(void (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(v678 + 56))(v675, 0, 1, v677);
        v666 = v737;
LABEL_231:
        v695 = v673[10];
        v696 = (char *)v735 + v695;
        v697 = (uint64_t)v666 + v695;
        v698 = sub_1A2AE30C4();
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v698 - 8) + 16))(v696, v697, v698);
        v699 = v673[12];
        *((_BYTE *)v735 + v673[11]) = *((_BYTE *)v666 + v673[11]);
        *((_BYTE *)v735 + v699) = *((_BYTE *)v666 + v699);
        v700 = v673[13];
        v701 = (_QWORD *)((char *)v735 + v700);
        v702 = (unsigned __int8 *)v666 + v700;
        v703 = type metadata accessor for SFAirDrop.DeclineAction();
        v704 = *(_QWORD *)(v703 - 8);
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v704 + 48))(v702, 1, v703))
        {
          v705 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B700);
          memcpy(v701, v702, *(_QWORD *)(*(_QWORD *)(v705 - 8) + 64));
        }
        else
        {
          v706 = *((_QWORD *)v702 + 1);
          *v701 = *(_QWORD *)v702;
          v701[1] = v706;
          v707 = *((_QWORD *)v702 + 2);
          v708 = *((_QWORD *)v702 + 3);
          v709 = *((_QWORD *)v702 + 4);
          v710 = *((_QWORD *)v702 + 5);
          v711 = v702[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v707, v708, v709, v710, v711);
          v701[2] = v707;
          v701[3] = v708;
          v701[4] = v709;
          v701[5] = v710;
          *((_BYTE *)v701 + 48) = v711;
          *((_BYTE *)v701 + 49) = v702[49];
          v712 = *(int *)(v703 + 28);
          v713 = (char *)v701 + v712;
          v714 = &v702[v712];
          v666 = v737;
          v736((char *)v701 + v712, (char *)v714, v721);
          v715 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v716 = &v713[v715];
          v673 = v738;
          v717 = (char *)&v714[v715];
          v718 = *((_QWORD *)v717 + 1);
          *(_QWORD *)v716 = *(_QWORD *)v717;
          *((_QWORD *)v716 + 1) = v718;
          v719 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v704 + 56);
          swift_retain();
          v719(v701, 0, 1, v703);
        }
        *((_BYTE *)v735 + v673[14]) = *((_BYTE *)v666 + v673[14]);
        break;
      case 0xCu:
        v139 = *((_QWORD *)v20 + 1);
        *(_QWORD *)v19 = *(_QWORD *)v20;
        *((_QWORD *)v19 + 1) = v139;
        v140 = *((_QWORD *)v20 + 3);
        *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
        *((_QWORD *)v19 + 3) = v140;
        v141 = *((_QWORD *)v20 + 4);
        v142 = *((_QWORD *)v20 + 5);
        v143 = v20[48];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        *((_QWORD *)v19 + 4) = v141;
        *((_QWORD *)v19 + 5) = v142;
        v6 = v738;
        v19[48] = v143;
        v17 = v736;
        v144 = *((_QWORD *)v20 + 7);
        v145 = *((_QWORD *)v20 + 8);
        sub_1A2973524(v144, v145);
        *((_QWORD *)v19 + 7) = v144;
        *((_QWORD *)v19 + 8) = v145;
        goto LABEL_205;
      case 0xDu:
        v146 = *((_QWORD *)v20 + 1);
        *(_QWORD *)v19 = *(_QWORD *)v20;
        *((_QWORD *)v19 + 1) = v146;
        v147 = *((_QWORD *)v20 + 3);
        *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
        *((_QWORD *)v19 + 3) = v147;
        v148 = *((_QWORD *)v20 + 4);
        v149 = *((_QWORD *)v20 + 5);
        v150 = v17;
        v151 = v20[48];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        *((_QWORD *)v19 + 4) = v148;
        *((_QWORD *)v19 + 5) = v149;
        v19[48] = v151;
        v152 = *((_QWORD *)v20 + 7);
        v153 = *((_QWORD *)v20 + 8);
        sub_1A2973524(v152, v153);
        *((_QWORD *)v19 + 7) = v152;
        *((_QWORD *)v19 + 8) = v153;
        v154 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A8) + 48);
        v155 = &v19[v154];
        v156 = &v20[v154];
        v150(&v19[v154], &v20[v154], v16);
        v157 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
        v155[v157[13]] = v156[v157[13]];
        v158 = v157[14];
        v159 = &v155[v158];
        v160 = &v156[v158];
        v161 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v161 - 8) + 16))(v159, v160, v161);
        v162 = v157[15];
        v57 = &v155[v162];
        v58 = &v156[v162];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
        v163 = swift_getEnumCaseMultiPayload();
        if (v163 == 2)
        {
          v331 = *((_QWORD *)v58 + 1);
          *(_QWORD *)v57 = *(_QWORD *)v58;
          *((_QWORD *)v57 + 1) = v331;
          v332 = *((_QWORD *)v58 + 3);
          *((_QWORD *)v57 + 2) = *((_QWORD *)v58 + 2);
          *((_QWORD *)v57 + 3) = v332;
          *((_QWORD *)v57 + 4) = *((_QWORD *)v58 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v333 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
          v334 = &v57[v333];
          v335 = &v58[v333];
          v336 = *(_QWORD *)&v58[v333 + 8];
          *(_QWORD *)v334 = *(_QWORD *)&v58[v333];
          *((_QWORD *)v334 + 1) = v336;
          v337 = *(_QWORD *)&v58[v333 + 16];
          v338 = *(_QWORD *)&v58[v333 + 24];
          v339 = *(_QWORD *)&v58[v333 + 32];
          v340 = *(_QWORD *)&v58[v333 + 40];
          v341 = a1;
          v342 = v335[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v337, v338, v339, v340, v342);
          *((_QWORD *)v334 + 2) = v337;
          *((_QWORD *)v334 + 3) = v338;
          *((_QWORD *)v334 + 4) = v339;
          *((_QWORD *)v334 + 5) = v340;
          v334[48] = v342;
          a1 = v341;
          v16 = v721;
          v334[49] = v335[49];
          v343 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v344 = &v334[v343];
          v345 = &v335[v343];
          v17 = v736;
          v3 = v737;
          v736(&v334[v343], v345, v721);
          v346 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v68 = &v344[v346];
          v69 = &v345[v346];
        }
        else
        {
          if (v163 != 1)
          {
LABEL_84:
            v270 = *((_QWORD *)v58 + 1);
            *(_QWORD *)v57 = *(_QWORD *)v58;
            *((_QWORD *)v57 + 1) = v270;
            v271 = *((_QWORD *)v58 + 3);
            *((_QWORD *)v57 + 2) = *((_QWORD *)v58 + 2);
            *((_QWORD *)v57 + 3) = v271;
            *((_QWORD *)v57 + 4) = *((_QWORD *)v58 + 4);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v272 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
            v273 = &v57[v272];
            v274 = &v58[v272];
            v275 = *(_QWORD *)&v58[v272 + 8];
            *(_QWORD *)v273 = *(_QWORD *)&v58[v272];
            *((_QWORD *)v273 + 1) = v275;
            v276 = *(_QWORD *)&v58[v272 + 16];
            v277 = *(_QWORD *)&v58[v272 + 24];
            v278 = *(_QWORD *)&v58[v272 + 32];
            v279 = *(_QWORD *)&v58[v272 + 40];
            v280 = v274[48];
            swift_bridgeObjectRetain();
            sub_1A2993E10(v276, v277, v278, v279, v280);
            *((_QWORD *)v273 + 2) = v276;
            *((_QWORD *)v273 + 3) = v277;
            *((_QWORD *)v273 + 4) = v278;
            *((_QWORD *)v273 + 5) = v279;
            v273[48] = v280;
            v273[49] = v274[49];
            v281 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
            v282 = &v273[v281];
            v283 = &v274[v281];
            v17 = v736;
            v736(&v273[v281], &v274[v281], v16);
            v284 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
            v68 = &v282[v284];
            v69 = &v283[v284];
            a1 = v735;
            v3 = v737;
            v6 = v738;
            goto LABEL_175;
          }
          *v57 = *v58;
          v164 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A8) + 48);
          v165 = &v57[v164];
          v166 = &v58[v164];
          v167 = &v58[v164];
          v17 = v736;
          v736(&v57[v164], v167, v16);
          v168 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B0) + 52);
          v169 = &v165[v168];
          v170 = &v166[v168];
          v736(v169, v170, v16);
          v171 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v68 = &v169[v171];
          v69 = &v170[v171];
        }
        v6 = v738;
        goto LABEL_175;
      case 0xEu:
        v172 = *((_QWORD *)v20 + 3);
        if (v172 >= 2)
        {
          v193 = *((_QWORD *)v20 + 1);
          *(_QWORD *)v19 = *(_QWORD *)v20;
          *((_QWORD *)v19 + 1) = v193;
          *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
          *((_QWORD *)v19 + 3) = v172;
          v194 = *((_QWORD *)v20 + 4);
          v195 = *((_QWORD *)v20 + 5);
          v196 = v20[48];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1A297208C();
          *((_QWORD *)v19 + 4) = v194;
          *((_QWORD *)v19 + 5) = v195;
          v19[48] = v196;
          v197 = *((_QWORD *)v20 + 7);
          v198 = *((_QWORD *)v20 + 8);
          sub_1A2973524(v197, v198);
          *((_QWORD *)v19 + 7) = v197;
          *((_QWORD *)v19 + 8) = v198;
        }
        else
        {
          v173 = *((_OWORD *)v20 + 3);
          *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
          *((_OWORD *)v19 + 3) = v173;
          *((_QWORD *)v19 + 8) = *((_QWORD *)v20 + 8);
          v174 = *((_OWORD *)v20 + 1);
          *(_OWORD *)v19 = *(_OWORD *)v20;
          *((_OWORD *)v19 + 1) = v174;
        }
        v199 = *((_QWORD *)v20 + 12);
        if (v199 >= 2)
        {
          v202 = *((_QWORD *)v20 + 10);
          *((_QWORD *)v19 + 9) = *((_QWORD *)v20 + 9);
          *((_QWORD *)v19 + 10) = v202;
          *((_QWORD *)v19 + 11) = *((_QWORD *)v20 + 11);
          *((_QWORD *)v19 + 12) = v199;
          v203 = *((_QWORD *)v20 + 13);
          v204 = *((_QWORD *)v20 + 14);
          v205 = v20[120];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1A297208C();
          *((_QWORD *)v19 + 13) = v203;
          *((_QWORD *)v19 + 14) = v204;
          v19[120] = v205;
          v206 = *((_QWORD *)v20 + 16);
          v207 = *((_QWORD *)v20 + 17);
          sub_1A2973524(v206, v207);
          *((_QWORD *)v19 + 16) = v206;
          *((_QWORD *)v19 + 17) = v207;
        }
        else
        {
          v200 = *(_OWORD *)(v20 + 120);
          *(_OWORD *)(v19 + 104) = *(_OWORD *)(v20 + 104);
          *(_OWORD *)(v19 + 120) = v200;
          *((_QWORD *)v19 + 17) = *((_QWORD *)v20 + 17);
          v201 = *(_OWORD *)(v20 + 88);
          *(_OWORD *)(v19 + 72) = *(_OWORD *)(v20 + 72);
          *(_OWORD *)(v19 + 88) = v201;
        }
        v6 = v738;
        v17 = v736;
        goto LABEL_205;
      case 0xFu:
        v175 = sub_1A2AE30C4();
        v176 = *(_QWORD *)(v175 - 8);
        v177 = *(void (**)(char *, char *, uint64_t))(v176 + 16);
        v177(v19, v20, v175);
        v178 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
        v179 = v178[5];
        v180 = &v19[v179];
        v181 = &v20[v179];
        v182 = a1;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v176 + 48))(&v20[v179], 1, v175))
        {
          v183 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
          memcpy(v180, v181, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
        }
        else
        {
          v177(v180, v181, v175);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v176 + 56))(v180, 0, 1, v175);
        }
        v19[v178[6]] = v20[v178[6]];
        v208 = v178[7];
        v209 = &v19[v208];
        v210 = &v20[v208];
        v211 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
        v212 = *(_QWORD *)(v211 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v212 + 48))(v210, 1, v211))
        {
          v213 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
          memcpy(v209, v210, *(_QWORD *)(*(_QWORD *)(v213 - 8) + 64));
          a1 = v182;
        }
        else
        {
          v220 = type metadata accessor for SFAirDropReceive.Failure();
          v221 = *(_QWORD *)(v220 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v221 + 48))(v210, 1, v220))
          {
            memcpy(v209, v210, *(_QWORD *)(v212 + 64));
          }
          else
          {
            v363 = swift_getEnumCaseMultiPayload();
            if (v363 == 1)
            {
              v578 = *((_QWORD *)v210 + 1);
              *(_QWORD *)v209 = *(_QWORD *)v210;
              *((_QWORD *)v209 + 1) = v578;
              *((_OWORD *)v209 + 1) = *((_OWORD *)v210 + 1);
              v579 = *((_QWORD *)v210 + 5);
              *((_QWORD *)v209 + 4) = *((_QWORD *)v210 + 4);
              *((_QWORD *)v209 + 5) = v579;
              *((_QWORD *)v209 + 6) = *((_QWORD *)v210 + 6);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_storeEnumTagMultiPayload();
            }
            else if (v363)
            {
              memcpy(v209, v210, *(_QWORD *)(v221 + 64));
            }
            else
            {
              v364 = *((_QWORD *)v210 + 1);
              *(_QWORD *)v209 = *(_QWORD *)v210;
              *((_QWORD *)v209 + 1) = v364;
              swift_bridgeObjectRetain();
              v365 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
              v731 = &v209[v365];
              v366 = &v210[v365];
              v367 = sub_1A2AE2F44();
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v367 - 8) + 16))(v731, v366, v367);
              swift_storeEnumTagMultiPayload();
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v221 + 56))(v209, 0, 1, v220);
          }
          a1 = v182;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v212 + 56))(v209, 0, 1, v211);
        }
        v580 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A0);
        v581 = v580[12];
        v582 = (uint64_t *)&v19[v581];
        v583 = (uint64_t *)&v20[v581];
        v584 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v585 = swift_getEnumCaseMultiPayload();
        v3 = v737;
        v16 = v721;
        if (v585 == 2)
        {
          v587 = v583[1];
          if (v587 >> 60 == 15)
          {
            *(_OWORD *)v582 = *(_OWORD *)v583;
          }
          else
          {
            v589 = *v583;
            sub_1A2973524(v589, v587);
            *v582 = v589;
            v582[1] = v587;
          }
          v3 = v737;
        }
        else if (v585 == 1)
        {
          v588 = v583[1];
          *v582 = *v583;
          v582[1] = v588;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v585)
          {
            memcpy(v582, v583, *(_QWORD *)(*(_QWORD *)(v584 - 8) + 64));
            goto LABEL_194;
          }
          v586 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v586 - 8) + 16))(v582, v583, v586);
        }
        swift_storeEnumTagMultiPayload();
LABEL_194:
        v590 = v580[16];
        v591 = &v19[v590];
        v592 = &v20[v590];
        v593 = *((_QWORD *)v592 + 1);
        *(_QWORD *)v591 = *(_QWORD *)v592;
        *((_QWORD *)v591 + 1) = v593;
        *(_QWORD *)&v19[v580[20]] = *(_QWORD *)&v20[v580[20]];
        *(_QWORD *)&v19[v580[24]] = *(_QWORD *)&v20[v580[24]];
        *(_QWORD *)&v19[v580[28]] = *(_QWORD *)&v20[v580[28]];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        v6 = v738;
        v17 = v736;
        goto LABEL_206;
      case 0x10u:
        v184 = sub_1A2AE30C4();
        v185 = *(_QWORD *)(v184 - 8);
        v186 = *(void (**)(char *, char *, uint64_t))(v185 + 16);
        v186(v19, v20, v184);
        v187 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
        v188 = v187[5];
        v189 = &v19[v188];
        v190 = &v20[v188];
        v191 = a1;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v185 + 48))(&v20[v188], 1, v184))
        {
          v192 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
          memcpy(v189, v190, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
        }
        else
        {
          v186(v189, v190, v184);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v185 + 56))(v189, 0, 1, v184);
        }
        v19[v187[6]] = v20[v187[6]];
        v214 = v187[7];
        v215 = &v19[v214];
        v216 = &v20[v214];
        v217 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
        v218 = *(_QWORD *)(v217 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v218 + 48))(v216, 1, v217))
        {
          v219 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
          memcpy(v215, v216, *(_QWORD *)(*(_QWORD *)(v219 - 8) + 64));
          a1 = v191;
        }
        else
        {
          v222 = type metadata accessor for SFAirDropReceive.Failure();
          v223 = *(_QWORD *)(v222 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v223 + 48))(v216, 1, v222))
          {
            memcpy(v215, v216, *(_QWORD *)(v218 + 64));
          }
          else
          {
            v368 = swift_getEnumCaseMultiPayload();
            if (v368 == 1)
            {
              v594 = *((_QWORD *)v216 + 1);
              *(_QWORD *)v215 = *(_QWORD *)v216;
              *((_QWORD *)v215 + 1) = v594;
              *((_OWORD *)v215 + 1) = *((_OWORD *)v216 + 1);
              v595 = *((_QWORD *)v216 + 5);
              *((_QWORD *)v215 + 4) = *((_QWORD *)v216 + 4);
              *((_QWORD *)v215 + 5) = v595;
              *((_QWORD *)v215 + 6) = *((_QWORD *)v216 + 6);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_storeEnumTagMultiPayload();
            }
            else if (v368)
            {
              memcpy(v215, v216, *(_QWORD *)(v223 + 64));
            }
            else
            {
              v369 = *((_QWORD *)v216 + 1);
              *(_QWORD *)v215 = *(_QWORD *)v216;
              *((_QWORD *)v215 + 1) = v369;
              swift_bridgeObjectRetain();
              v370 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
              v732 = &v215[v370];
              v371 = &v216[v370];
              v372 = sub_1A2AE2F44();
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v372 - 8) + 16))(v732, v371, v372);
              swift_storeEnumTagMultiPayload();
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v223 + 56))(v215, 0, 1, v222);
          }
          a1 = v191;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v218 + 56))(v215, 0, 1, v217);
        }
        v596 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B398) + 48);
        v597 = &v19[v596];
        v598 = &v20[v596];
        v599 = type metadata accessor for SFAirDropReceive.Failure();
        v600 = swift_getEnumCaseMultiPayload();
        v3 = v737;
        v16 = v721;
        if (v600 == 1)
        {
          v606 = *((_QWORD *)v598 + 1);
          *(_QWORD *)v597 = *(_QWORD *)v598;
          *((_QWORD *)v597 + 1) = v606;
          *((_OWORD *)v597 + 1) = *((_OWORD *)v598 + 1);
          v607 = *((_QWORD *)v598 + 5);
          *((_QWORD *)v597 + 4) = *((_QWORD *)v598 + 4);
          *((_QWORD *)v597 + 5) = v607;
          *((_QWORD *)v597 + 6) = *((_QWORD *)v598 + 6);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
        }
        else if (v600)
        {
          memcpy(v597, v598, *(_QWORD *)(*(_QWORD *)(v599 - 8) + 64));
        }
        else
        {
          v601 = *((_QWORD *)v598 + 1);
          *(_QWORD *)v597 = *(_QWORD *)v598;
          *((_QWORD *)v597 + 1) = v601;
          swift_bridgeObjectRetain();
          v602 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
          v603 = &v597[v602];
          v604 = &v598[v602];
          v605 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v605 - 8) + 16))(v603, v604, v605);
          swift_storeEnumTagMultiPayload();
        }
        v6 = v738;
        v17 = v736;
        goto LABEL_205;
      default:
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
        goto LABEL_206;
    }
  }
  return v11;
}

uint64_t sub_1A2993E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 >= 2u)
  {
    if (a5 != 2)
      return result;
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A2993E5C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 62 == 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1A2993E70(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t _s8TransferVwxx(uint64_t a1, int *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t *, uint64_t);
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t *, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t result;
  int v98;
  char *v99;
  uint64_t v100;
  int v101;
  char *v102;
  uint64_t v103;

  type metadata accessor for SFAirDropClient.Identifier();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
  }
  else if (!EnumCaseMultiPayload)
  {
    v5 = sub_1A2AE3130();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  v6 = a1 + a2[5];
  v7 = sub_1A2AE3130();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = (uint64_t *)(a1 + a2[6]);
  type metadata accessor for SFAirDropReceive.Transfer.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 2u:
      goto LABEL_71;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1A2973568();
      sub_1A29736C4(v9[7], v9[8]);
      v10 = (char *)v9 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F8) + 48);
      v8((uint64_t)v10, v7);
      v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
      v12 = &v10[*(int *)(v11 + 56)];
      v13 = sub_1A2AE30C4();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
      v9 = (uint64_t *)&v10[*(int *)(v11 + 60)];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
      v14 = swift_getEnumCaseMultiPayload();
      if (v14 == 2)
        goto LABEL_44;
      if (v14 == 1)
        goto LABEL_8;
      goto LABEL_43;
    case 3u:
      type metadata accessor for SFAirDropReceive.ItemDestination();
      v17 = swift_getEnumCaseMultiPayload();
      switch(v17)
      {
        case 2:
          v69 = v9[1];
          if (v69 >> 60 != 15)
            sub_1A29736C4(*v9, v69);
          break;
        case 1:
          swift_bridgeObjectRelease();
          break;
        case 0:
          v18 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v9, v18);
          break;
      }
      v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F0);
      sub_1A297DB90(*(uint64_t *)((char *)v9 + *(int *)(v70 + 48)), *(uint64_t *)((char *)v9 + *(int *)(v70 + 48) + 8), *(uint64_t *)((char *)v9 + *(int *)(v70 + 48) + 16));
      goto LABEL_87;
    case 4u:
      type metadata accessor for SFAirDropReceive.ItemDestination();
      v19 = swift_getEnumCaseMultiPayload();
      switch(v19)
      {
        case 2:
          v71 = v9[1];
          if (v71 >> 60 != 15)
            sub_1A29736C4(*v9, v71);
          break;
        case 1:
          swift_bridgeObjectRelease();
          break;
        case 0:
          v20 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v9, v20);
          break;
      }
      v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E8);
LABEL_87:
      swift_bridgeObjectRelease();
      v66 = *(int *)(v70 + 80);
      goto LABEL_88;
    case 5u:
      type metadata accessor for SFAirDropReceive.ItemDestination();
      v21 = swift_getEnumCaseMultiPayload();
      if (v21 == 2)
        goto LABEL_64;
      if (v21 == 1)
        goto LABEL_19;
      goto LABEL_22;
    case 6u:
      type metadata accessor for SFAirDropReceive.ItemDestination();
      v21 = swift_getEnumCaseMultiPayload();
      if (v21 == 2)
      {
LABEL_64:
        v58 = v9[1];
        if (v58 >> 60 != 15)
          sub_1A29736C4(*v9, v58);
      }
      else if (v21 == 1)
      {
LABEL_19:
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_22:
        if (!v21)
        {
          v22 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v9, v22);
        }
      }
      v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
      swift_bridgeObjectRelease();
      v29 = *(int *)(v59 + 64);
      goto LABEL_70;
    case 7u:
      type metadata accessor for SFAirDropReceive.ItemDestination();
      v23 = swift_getEnumCaseMultiPayload();
      switch(v23)
      {
        case 2:
          v74 = v9[1];
          if (v74 >> 60 != 15)
            sub_1A29736C4(*v9, v74);
          break;
        case 1:
          swift_bridgeObjectRelease();
          break;
        case 0:
          v24 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v9, v24);
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D8);
      goto LABEL_102;
    case 8u:
      type metadata accessor for SFAirDropReceive.ItemDestination();
      v25 = swift_getEnumCaseMultiPayload();
      if (v25 == 2)
        goto LABEL_67;
      if (v25 == 1)
        goto LABEL_30;
      goto LABEL_33;
    case 9u:
      type metadata accessor for SFAirDropReceive.ItemDestination();
      v25 = swift_getEnumCaseMultiPayload();
      if (v25 == 2)
      {
LABEL_67:
        v60 = v9[1];
        if (v60 >> 60 != 15)
          sub_1A29736C4(*v9, v60);
      }
      else if (v25 == 1)
      {
LABEL_30:
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_33:
        if (!v25)
        {
          v26 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v9, v26);
        }
      }
      v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = *(int *)(v61 + 80);
LABEL_70:
      v9 = (uint64_t *)((char *)v9 + v29);
LABEL_71:
      v8((uint64_t)v9, v7);
      v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      v63 = (char *)v9 + *(int *)(v62 + 56);
      v64 = sub_1A2AE30C4();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v64 - 8) + 8))(v63, v64);
      v9 = (uint64_t *)((char *)v9 + *(int *)(v62 + 60));
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v65 = swift_getEnumCaseMultiPayload();
      if (v65 == 2)
        goto LABEL_74;
      if (v65 == 1)
      {
        v15 = (char *)v9 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
        v8((uint64_t)v15, v7);
        v16 = &qword_1EE67B798;
        goto LABEL_77;
      }
      if (v65)
        goto LABEL_103;
LABEL_74:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v34 = &qword_1EE67B418;
      goto LABEL_75;
    case 0xAu:
      type metadata accessor for SFAirDropReceive.ItemDestination();
      v27 = swift_getEnumCaseMultiPayload();
      switch(v27)
      {
        case 2:
          v75 = v9[1];
          if (v75 >> 60 != 15)
            sub_1A29736C4(*v9, v75);
          break;
        case 1:
          swift_bridgeObjectRelease();
          break;
        case 0:
          v28 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v9, v28);
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C8);
      swift_bridgeObjectRelease();
      goto LABEL_102;
    case 0xBu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1A2973568();
      sub_1A29736C4(v9[7], v9[8]);
      v29 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B8) + 48);
      goto LABEL_70;
    case 0xCu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1A2973568();
      sub_1A29736C4(v9[7], v9[8]);
      goto LABEL_103;
    case 0xDu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1A2973568();
      sub_1A29736C4(v9[7], v9[8]);
      v30 = (char *)v9 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A8) + 48);
      v8((uint64_t)v30, v7);
      v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
      v32 = &v30[*(int *)(v31 + 56)];
      v33 = sub_1A2AE30C4();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
      v9 = (uint64_t *)&v30[*(int *)(v31 + 60)];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
      v14 = swift_getEnumCaseMultiPayload();
      if (v14 == 2)
        goto LABEL_44;
      if (v14 == 1)
      {
LABEL_8:
        v15 = (char *)v9 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A8) + 48);
        v8((uint64_t)v15, v7);
        v16 = &qword_1EE67B7B0;
LABEL_77:
        v67 = __swift_instantiateConcreteTypeFromMangledName(v16);
        v8((uint64_t)&v15[*(int *)(v67 + 52)], v7);
        v68 = &qword_1EE67B7A0;
      }
      else
      {
LABEL_43:
        if (v14)
          goto LABEL_103;
LABEL_44:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v34 = &qword_1EE67B410;
LABEL_75:
        v66 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v34) + 80);
LABEL_88:
        v72 = (char *)v9 + v66;
        swift_bridgeObjectRelease();
        sub_1A2994DD4(*((_QWORD *)v72 + 2), *((_QWORD *)v72 + 3), *((_QWORD *)v72 + 4), *((_QWORD *)v72 + 5), v72[48]);
        v73 = type metadata accessor for SFAirDrop.DeclineAction();
        v8((uint64_t)&v72[*(int *)(v73 + 28)], v7);
        v68 = &qword_1EE67B788;
      }
      __swift_instantiateConcreteTypeFromMangledName(v68);
      swift_release();
LABEL_103:
      v77 = a1 + a2[8];
      v8(v77, v7);
      v78 = (int *)type metadata accessor for SFAirDropReceive.AskRequest(0);
      sub_1A2994E20(*(_QWORD *)(v77 + v78[5]), *(_QWORD *)(v77 + v78[5] + 8), *(_BYTE *)(v77 + v78[5] + 16));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      v79 = v77 + v78[24];
      v80 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 48))(v79, 1, v80))
      {
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
            swift_bridgeObjectRelease();
            break;
          case 1u:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v88 = v79 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D0) + 64);
            v89 = sub_1A2AE30C4();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 8))(v88, v89);
            break;
          default:
            break;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v81 = (uint64_t *)(v77 + v78[27]);
      v82 = v81[1];
      if (v82 >> 60 != 15)
        sub_1A29736C4(*v81, v82);
      v83 = (uint64_t *)(a1 + a2[9]);
      v84 = type metadata accessor for SFAirDropReceive.AskResponse();
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 48))(v83, 1, v84))
      {
        v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
        if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 48))(v83, 3, v85))
        {
          type metadata accessor for SFAirDropReceive.ItemDestination();
          v86 = swift_getEnumCaseMultiPayload();
          switch(v86)
          {
            case 2:
              v90 = v83[1];
              if (v90 >> 60 != 15)
                sub_1A29736C4(*v83, v90);
              break;
            case 1:
              swift_bridgeObjectRelease();
              break;
            case 0:
              v87 = sub_1A2AE2F44();
              (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v87 - 8) + 8))(v83, v87);
              break;
          }
          v91 = (char *)v83 + *(int *)(v85 + 48);
          v92 = *((_QWORD *)v91 + 2);
          if (v92 >> 60 != 15)
            sub_1A29736C4(*((_QWORD *)v91 + 1), v92);
        }
      }
      v93 = a1 + a2[10];
      v94 = sub_1A2AE30C4();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 8))(v93, v94);
      v95 = a1 + a2[13];
      v96 = type metadata accessor for SFAirDrop.DeclineAction();
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 48))(v95, 1, v96);
      if (!(_DWORD)result)
      {
        swift_bridgeObjectRelease();
        sub_1A2994DD4(*(_QWORD *)(v95 + 16), *(_QWORD *)(v95 + 24), *(_QWORD *)(v95 + 32), *(_QWORD *)(v95 + 40), *(_BYTE *)(v95 + 48));
        v8(v95 + *(int *)(v96 + 28), v7);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788);
        return swift_release();
      }
      return result;
    case 0xEu:
      if ((unint64_t)v9[3] >= 2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1A2973568();
        sub_1A29736C4(v9[7], v9[8]);
      }
      if ((unint64_t)v9[12] >= 2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1A2973568();
        sub_1A29736C4(v9[16], v9[17]);
      }
      goto LABEL_103;
    case 0xFu:
      v35 = sub_1A2AE30C4();
      v36 = *(_QWORD *)(v35 - 8);
      v37 = *(void (**)(uint64_t *, uint64_t))(v36 + 8);
      v37(v9, v35);
      v38 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
      v39 = (char *)v9 + *(int *)(v38 + 20);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v39, 1, v35))
        v37((uint64_t *)v39, v35);
      v40 = (char *)v9 + *(int *)(v38 + 28);
      v41 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v40, 1, v41))
      {
        v42 = type metadata accessor for SFAirDropReceive.Failure();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 48))(v40, 1, v42))
        {
          v101 = swift_getEnumCaseMultiPayload();
          if (v101 == 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else if (!v101)
          {
            swift_bridgeObjectRelease();
            v102 = &v40[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48)];
            v103 = sub_1A2AE2F44();
            (*(void (**)(char *, uint64_t))(*(_QWORD *)(v103 - 8) + 8))(v102, v103);
          }
        }
      }
      v43 = (uint64_t *)((char *)v9 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A0) + 48));
      type metadata accessor for SFAirDropReceive.ItemDestination();
      v44 = swift_getEnumCaseMultiPayload();
      switch(v44)
      {
        case 2:
          v76 = v43[1];
          if (v76 >> 60 != 15)
            sub_1A29736C4(*v43, v76);
          break;
        case 1:
          swift_bridgeObjectRelease();
          break;
        case 0:
          v45 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v43, v45);
          break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_102;
    case 0x10u:
      v46 = sub_1A2AE30C4();
      v47 = *(_QWORD *)(v46 - 8);
      v48 = *(void (**)(uint64_t *, uint64_t))(v47 + 8);
      v48(v9, v46);
      v49 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
      v50 = (char *)v9 + *(int *)(v49 + 20);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v50, 1, v46))
        v48((uint64_t *)v50, v46);
      v51 = (char *)v9 + *(int *)(v49 + 28);
      v52 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 48))(v51, 1, v52))
      {
        v53 = type metadata accessor for SFAirDropReceive.Failure();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 48))(v51, 1, v53))
        {
          v98 = swift_getEnumCaseMultiPayload();
          if (v98 == 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else if (!v98)
          {
            swift_bridgeObjectRelease();
            v99 = &v51[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48)];
            v100 = sub_1A2AE2F44();
            (*(void (**)(char *, uint64_t))(*(_QWORD *)(v100 - 8) + 8))(v99, v100);
          }
        }
      }
      v54 = (char *)v9 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B398) + 48);
      type metadata accessor for SFAirDropReceive.Failure();
      v55 = swift_getEnumCaseMultiPayload();
      if (v55 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_102:
        swift_bridgeObjectRelease();
      }
      else if (!v55)
      {
        swift_bridgeObjectRelease();
        v56 = &v54[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48)];
        v57 = sub_1A2AE2F44();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v57 - 8) + 8))(v56, v57);
      }
      goto LABEL_103;
    default:
      goto LABEL_103;
  }
}

uint64_t sub_1A2994DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 >= 2u)
  {
    if (a5 != 2)
      return result;
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A2994E20(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRelease();
  return result;
}

_QWORD *_s8TransferVwcp(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  int *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  int v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(char *, char *, uint64_t);
  char v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  int *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  int v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(char *, char *, uint64_t);
  char v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  int *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(char *, char *, uint64_t);
  int *v175;
  uint64_t v176;
  char *v177;
  char *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(char *, char *, uint64_t);
  int *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  unsigned __int8 v232;
  uint64_t v233;
  char *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned __int8 v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  unsigned __int8 v262;
  uint64_t v263;
  char *v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unsigned __int8 v277;
  uint64_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  unsigned __int8 v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unsigned __int8 v306;
  uint64_t v307;
  char *v308;
  char *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  unsigned __int8 v323;
  uint64_t v324;
  char *v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  char *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _QWORD *v338;
  unsigned __int8 v339;
  uint64_t v340;
  char *v341;
  char *v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  char *v363;
  uint64_t v364;
  int v365;
  uint64_t v366;
  uint64_t v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  int *v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t *v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  char *v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  char *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  char *v393;
  char *v394;
  char *v395;
  uint64_t v396;
  char *v397;
  char *v398;
  uint64_t v399;
  uint64_t v400;
  int *v401;
  uint64_t v402;
  char *v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unsigned __int8 v410;
  uint64_t v411;
  char *v412;
  char *v413;
  char *v414;
  uint64_t v415;
  char *v416;
  char *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  char *v423;
  int *v424;
  uint64_t v425;
  char *v426;
  char *v427;
  uint64_t v428;
  uint64_t v429;
  int v430;
  uint64_t v431;
  char *v432;
  char *v433;
  char *v434;
  uint64_t v435;
  char *v436;
  char *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  char *v442;
  char *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  _QWORD *v449;
  unsigned __int8 v450;
  uint64_t v451;
  char *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  char *v456;
  char *v457;
  int *v458;
  uint64_t v459;
  char *v460;
  char *v461;
  uint64_t v462;
  uint64_t v463;
  int v464;
  uint64_t v465;
  char *v466;
  char *v467;
  char *v468;
  uint64_t v469;
  char *v470;
  char *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  char *v476;
  char *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  _QWORD *v483;
  unsigned __int8 v484;
  uint64_t v485;
  char *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  int *v490;
  uint64_t v491;
  char *v492;
  char *v493;
  int *v494;
  uint64_t v495;
  char *v496;
  char *v497;
  uint64_t v498;
  uint64_t v499;
  int v500;
  uint64_t v501;
  char *v502;
  char *v503;
  char *v504;
  uint64_t v505;
  char *v506;
  char *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  char *v512;
  char *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  _QWORD *v519;
  unsigned __int8 v520;
  uint64_t v521;
  char *v522;
  uint64_t v523;
  int *v524;
  uint64_t v525;
  char *v526;
  char *v527;
  int *v528;
  uint64_t v529;
  char *v530;
  char *v531;
  uint64_t v532;
  uint64_t v533;
  int v534;
  uint64_t v535;
  char *v536;
  char *v537;
  char *v538;
  uint64_t v539;
  char *v540;
  char *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  char *v546;
  char *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  _QWORD *v553;
  unsigned __int8 v554;
  uint64_t v555;
  char *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  char *v560;
  char *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  unsigned __int8 v567;
  uint64_t v568;
  char *v569;
  char *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  int *v577;
  uint64_t v578;
  uint64_t *v579;
  uint64_t *v580;
  uint64_t v581;
  int v582;
  uint64_t v583;
  unint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  char *v588;
  char *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  char *v594;
  char *v595;
  uint64_t v596;
  int v597;
  uint64_t v598;
  uint64_t v599;
  char *v600;
  char *v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  char *v606;
  char *v607;
  int *v608;
  uint64_t v609;
  char *v610;
  char *v611;
  uint64_t v612;
  uint64_t v613;
  unsigned __int8 v614;
  uint64_t v615;
  char *v616;
  char *v617;
  uint64_t v618;
  char *v619;
  char *v620;
  uint64_t v621;
  char *v622;
  char *v623;
  uint64_t v624;
  char *v625;
  char *v626;
  uint64_t v627;
  char *v628;
  char *v629;
  uint64_t v630;
  char *v631;
  char *v632;
  uint64_t v633;
  char *v634;
  char *v635;
  uint64_t v636;
  char *v637;
  char *v638;
  uint64_t v639;
  char *v640;
  char *v641;
  uint64_t v642;
  uint64_t v643;
  char *v644;
  char *v645;
  uint64_t v646;
  uint64_t v647;
  void *v648;
  uint64_t v649;
  void *v650;
  uint64_t v651;
  void *v652;
  uint64_t v653;
  char *v654;
  char *v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  id v659;
  id v660;
  id v661;
  uint64_t v662;
  _QWORD *v663;
  char *v664;
  uint64_t v665;
  char *v666;
  uint64_t *v667;
  unint64_t v668;
  uint64_t v669;
  int *v670;
  uint64_t v671;
  unint64_t *v672;
  unint64_t *v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  int v680;
  uint64_t v681;
  unint64_t v682;
  unint64_t v683;
  unint64_t v684;
  uint64_t v685;
  char *v686;
  char *v687;
  _OWORD *v688;
  uint64_t *v689;
  unint64_t v690;
  uint64_t v691;
  uint64_t v692;
  char *v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  _QWORD *v698;
  unsigned __int8 *v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  unsigned __int8 v708;
  uint64_t v709;
  char *v710;
  unsigned __int8 *v711;
  uint64_t v712;
  char *v713;
  char *v714;
  uint64_t v715;
  void (*v716)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v718;
  unsigned int (*v719)(char *, uint64_t, uint64_t);
  char *v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  char *__dst;
  char *v728;
  char *v729;
  uint64_t v730;
  uint64_t v731;
  _QWORD *v732;
  void (*v733)(char *, char *, uint64_t);
  _QWORD *v734;
  int *v735;

  v6 = type metadata accessor for SFAirDropClient.Identifier();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v8 = sub_1A2AE3130();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_1A2AE3130();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  v14(v11, v12, v13);
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  v734 = a2;
  v735 = a3;
  v718 = v13;
  v733 = v14;
  v732 = a1;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v14(v16, v17, v13);
      v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      v16[v19[13]] = v17[v19[13]];
      v20 = v19[14];
      v21 = &v16[v20];
      v22 = &v17[v20];
      v23 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
      v24 = v19[15];
      v25 = &v16[v24];
      v26 = &v17[v24];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v27 = swift_getEnumCaseMultiPayload();
      if (v27 == 2)
      {
        v221 = *((_QWORD *)v26 + 1);
        *(_QWORD *)v25 = *(_QWORD *)v26;
        *((_QWORD *)v25 + 1) = v221;
        v222 = *((_QWORD *)v26 + 3);
        *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
        *((_QWORD *)v25 + 3) = v222;
        *((_QWORD *)v25 + 4) = *((_QWORD *)v26 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v223 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v224 = &v25[v223];
        v225 = &v26[v223];
        v226 = *(_QWORD *)&v26[v223 + 8];
        *(_QWORD *)v224 = *(_QWORD *)&v26[v223];
        *((_QWORD *)v224 + 1) = v226;
        v227 = *(_QWORD *)&v26[v223 + 16];
        v228 = *(_QWORD *)&v26[v223 + 24];
        v229 = *(_QWORD *)&v26[v223 + 32];
        v230 = *(_QWORD *)&v26[v223 + 40];
        v231 = a1;
        v232 = v225[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v227, v228, v229, v230, v232);
        *((_QWORD *)v224 + 2) = v227;
        *((_QWORD *)v224 + 3) = v228;
        *((_QWORD *)v224 + 4) = v229;
        *((_QWORD *)v224 + 5) = v230;
        v224[48] = v232;
        a1 = v231;
        v13 = v718;
        v224[49] = v225[49];
        v233 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v234 = &v224[v233];
        v34 = &v225[v233];
        v14 = v733;
        v733(&v224[v233], &v225[v233], v718);
        v35 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v36 = &v234[v35];
        goto LABEL_78;
      }
      if (v27 == 1)
      {
        *v25 = *v26;
        v28 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
        v29 = &v25[v28];
        v30 = &v26[v28];
        v31 = &v26[v28];
        v14 = v733;
        v733(&v25[v28], v31, v13);
        v32 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
        v33 = &v29[v32];
        v34 = &v30[v32];
        v733(v33, v34, v13);
        v35 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
        v36 = &v33[v35];
LABEL_78:
        v235 = &v34[v35];
        a3 = v735;
        goto LABEL_86;
      }
      v236 = *((_QWORD *)v26 + 1);
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *((_QWORD *)v25 + 1) = v236;
      v237 = *((_QWORD *)v26 + 3);
      *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
      *((_QWORD *)v25 + 3) = v237;
      *((_QWORD *)v25 + 4) = *((_QWORD *)v26 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v238 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
      v239 = &v25[v238];
      v240 = &v26[v238];
      v241 = *(_QWORD *)&v26[v238 + 8];
      *(_QWORD *)v239 = *(_QWORD *)&v26[v238];
      *((_QWORD *)v239 + 1) = v241;
      v242 = *(_QWORD *)&v26[v238 + 16];
      v243 = *(_QWORD *)&v26[v238 + 24];
      v244 = *(_QWORD *)&v26[v238 + 32];
      v245 = *(_QWORD *)&v26[v238 + 40];
      v246 = v240[48];
      swift_bridgeObjectRetain();
      sub_1A2993E10(v242, v243, v244, v245, v246);
      *((_QWORD *)v239 + 2) = v242;
      *((_QWORD *)v239 + 3) = v243;
      *((_QWORD *)v239 + 4) = v244;
      *((_QWORD *)v239 + 5) = v245;
      v239[48] = v246;
      v239[49] = v240[49];
      v247 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
      v248 = &v239[v247];
      v249 = &v240[v247];
      v14 = v733;
      v733(&v239[v247], &v240[v247], v13);
      v250 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
      v36 = &v248[v250];
      v235 = &v249[v250];
      a1 = v732;
      a3 = v735;
      goto LABEL_86;
    case 1u:
      v37 = *((_QWORD *)v17 + 1);
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *((_QWORD *)v16 + 1) = v37;
      v38 = *((_QWORD *)v17 + 3);
      *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
      *((_QWORD *)v16 + 3) = v38;
      v39 = *((_QWORD *)v17 + 4);
      v40 = *((_QWORD *)v17 + 5);
      v41 = v14;
      v42 = v17[48];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1A297208C();
      *((_QWORD *)v16 + 4) = v39;
      *((_QWORD *)v16 + 5) = v40;
      v16[48] = v42;
      v43 = *((_QWORD *)v17 + 7);
      v44 = *((_QWORD *)v17 + 8);
      sub_1A2973524(v43, v44);
      *((_QWORD *)v16 + 7) = v43;
      *((_QWORD *)v16 + 8) = v44;
      v45 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F8) + 48);
      v46 = &v16[v45];
      v47 = &v17[v45];
      v41(&v16[v45], &v17[v45], v13);
      v48 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
      v46[v48[13]] = v47[v48[13]];
      v49 = v48[14];
      v50 = &v46[v49];
      v51 = &v47[v49];
      v52 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
      v53 = v48[15];
      v54 = &v46[v53];
      v55 = &v47[v53];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
      v56 = swift_getEnumCaseMultiPayload();
      if (v56 == 2)
      {
        v251 = *((_QWORD *)v55 + 1);
        *(_QWORD *)v54 = *(_QWORD *)v55;
        *((_QWORD *)v54 + 1) = v251;
        v252 = *((_QWORD *)v55 + 3);
        *((_QWORD *)v54 + 2) = *((_QWORD *)v55 + 2);
        *((_QWORD *)v54 + 3) = v252;
        *((_QWORD *)v54 + 4) = *((_QWORD *)v55 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v253 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
        v254 = &v54[v253];
        v255 = &v55[v253];
        v256 = *(_QWORD *)&v55[v253 + 8];
        *(_QWORD *)v254 = *(_QWORD *)&v55[v253];
        *((_QWORD *)v254 + 1) = v256;
        v257 = *(_QWORD *)&v55[v253 + 16];
        v258 = *(_QWORD *)&v55[v253 + 24];
        v259 = *(_QWORD *)&v55[v253 + 32];
        v260 = *(_QWORD *)&v55[v253 + 40];
        v261 = a1;
        v262 = v255[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v257, v258, v259, v260, v262);
        *((_QWORD *)v254 + 2) = v257;
        *((_QWORD *)v254 + 3) = v258;
        *((_QWORD *)v254 + 4) = v259;
        *((_QWORD *)v254 + 5) = v260;
        v254[48] = v262;
        a1 = v261;
        v13 = v718;
        v254[49] = v255[49];
        v263 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v264 = &v254[v263];
        v265 = &v255[v263];
        v14 = v733;
        a2 = v734;
        v733(&v254[v263], v265, v718);
        v266 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v65 = &v264[v266];
        v66 = &v265[v266];
      }
      else
      {
        if (v56 != 1)
          goto LABEL_82;
        *v54 = *v55;
        v57 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A8) + 48);
        v58 = &v54[v57];
        v59 = &v55[v57];
        v60 = &v55[v57];
        v14 = v733;
        v733(&v54[v57], v60, v13);
        v61 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B0) + 52);
        v62 = &v58[v61];
        v63 = &v59[v61];
        v733(v62, v63, v13);
        v64 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
        v65 = &v62[v64];
        v66 = &v63[v64];
      }
      a3 = v735;
      goto LABEL_173;
    case 2u:
      v14(v16, v17, v13);
      v67 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      v16[v67[13]] = v17[v67[13]];
      v68 = v67[14];
      v69 = &v16[v68];
      v70 = &v17[v68];
      v71 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v69, v70, v71);
      v72 = v67[15];
      v73 = &v16[v72];
      v74 = &v17[v72];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v75 = swift_getEnumCaseMultiPayload();
      if (v75 == 2)
      {
        v282 = *((_QWORD *)v74 + 1);
        *(_QWORD *)v73 = *(_QWORD *)v74;
        *((_QWORD *)v73 + 1) = v282;
        v283 = *((_QWORD *)v74 + 3);
        *((_QWORD *)v73 + 2) = *((_QWORD *)v74 + 2);
        *((_QWORD *)v73 + 3) = v283;
        *((_QWORD *)v73 + 4) = *((_QWORD *)v74 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v284 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v285 = &v73[v284];
        v286 = &v74[v284];
        v287 = *(_QWORD *)&v74[v284 + 8];
        *(_QWORD *)v285 = *(_QWORD *)&v74[v284];
        *((_QWORD *)v285 + 1) = v287;
        v288 = *(_QWORD *)&v74[v284 + 16];
        v289 = *(_QWORD *)&v74[v284 + 24];
        v290 = *(_QWORD *)&v74[v284 + 32];
        v291 = *(_QWORD *)&v74[v284 + 40];
        v292 = a1;
        v293 = v286[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v288, v289, v290, v291, v293);
        *((_QWORD *)v285 + 2) = v288;
        *((_QWORD *)v285 + 3) = v289;
        *((_QWORD *)v285 + 4) = v290;
        *((_QWORD *)v285 + 5) = v291;
        v285[48] = v293;
        a1 = v292;
        v13 = v718;
        v285[49] = v286[49];
        v294 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v295 = &v285[v294];
        v82 = &v286[v294];
        v14 = v733;
        v733(&v285[v294], &v286[v294], v718);
        v83 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v36 = &v295[v83];
        goto LABEL_84;
      }
      if (v75 == 1)
      {
        *v73 = *v74;
        v76 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
        v77 = &v73[v76];
        v78 = &v74[v76];
        v79 = &v74[v76];
        v14 = v733;
        v733(&v73[v76], v79, v13);
        v80 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
        v81 = &v77[v80];
        v82 = &v78[v80];
        v733(v81, v82, v13);
        v83 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
        v36 = &v81[v83];
LABEL_84:
        v235 = &v82[v83];
        a3 = v735;
        goto LABEL_86;
      }
      v296 = *((_QWORD *)v74 + 1);
      *(_QWORD *)v73 = *(_QWORD *)v74;
      *((_QWORD *)v73 + 1) = v296;
      v297 = *((_QWORD *)v74 + 3);
      *((_QWORD *)v73 + 2) = *((_QWORD *)v74 + 2);
      *((_QWORD *)v73 + 3) = v297;
      *((_QWORD *)v73 + 4) = *((_QWORD *)v74 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v298 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
      v299 = &v73[v298];
      v300 = &v74[v298];
      v301 = *(_QWORD *)&v74[v298 + 8];
      *(_QWORD *)v299 = *(_QWORD *)&v74[v298];
      *((_QWORD *)v299 + 1) = v301;
      v302 = *(_QWORD *)&v74[v298 + 16];
      v303 = *(_QWORD *)&v74[v298 + 24];
      v304 = *(_QWORD *)&v74[v298 + 32];
      v305 = *(_QWORD *)&v74[v298 + 40];
      v306 = v300[48];
      swift_bridgeObjectRetain();
      sub_1A2993E10(v302, v303, v304, v305, v306);
      *((_QWORD *)v299 + 2) = v302;
      *((_QWORD *)v299 + 3) = v303;
      *((_QWORD *)v299 + 4) = v304;
      *((_QWORD *)v299 + 5) = v305;
      v299[48] = v306;
      v299[49] = v300[49];
      v307 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
      v308 = &v299[v307];
      v309 = &v300[v307];
      v14 = v733;
      v733(&v299[v307], &v300[v307], v13);
      v310 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
      v36 = &v308[v310];
      v235 = &v309[v310];
      a1 = v732;
      a3 = v735;
LABEL_86:
      v311 = *((_QWORD *)v235 + 1);
      *(_QWORD *)v36 = *(_QWORD *)v235;
      *((_QWORD *)v36 + 1) = v311;
      swift_retain();
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      a2 = v734;
      goto LABEL_204;
    case 3u:
      v84 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v85 = swift_getEnumCaseMultiPayload();
      if (v85 == 2)
      {
        v344 = *((_QWORD *)v17 + 1);
        if (v344 >> 60 == 15)
        {
          *(_OWORD *)v16 = *(_OWORD *)v17;
        }
        else
        {
          v370 = *(_QWORD *)v17;
          sub_1A2973524(*(_QWORD *)v17, *((_QWORD *)v17 + 1));
          *(_QWORD *)v16 = v370;
          *((_QWORD *)v16 + 1) = v344;
        }
      }
      else if (v85 == 1)
      {
        v345 = *((_QWORD *)v17 + 1);
        *(_QWORD *)v16 = *(_QWORD *)v17;
        *((_QWORD *)v16 + 1) = v345;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v85)
        {
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
          goto LABEL_133;
        }
        v86 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 16))(v16, v17, v86);
      }
      swift_storeEnumTagMultiPayload();
LABEL_133:
      v371 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F0);
      v372 = v371[12];
      v373 = (uint64_t *)&v16[v372];
      v374 = (uint64_t *)&v17[v372];
      v375 = *v374;
      v376 = v374[1];
      v377 = v374[2];
      v378 = v374[3];
      v379 = v374[4];
      sub_1A2993E5C(*v374, v376, v377);
      *v373 = v375;
      v373[1] = v376;
      v373[2] = v377;
      v373[3] = v378;
      v373[4] = v379;
      v380 = v371[16];
      v381 = &v16[v380];
      v382 = &v17[v380];
      v383 = *((_QWORD *)v382 + 1);
      *(_QWORD *)v381 = *(_QWORD *)v382;
      *((_QWORD *)v381 + 1) = v383;
      v384 = v371[20];
      v385 = &v16[v384];
      v386 = &v17[v384];
      v387 = *(_QWORD *)&v17[v384 + 8];
      *(_QWORD *)v385 = *(_QWORD *)&v17[v384];
      *((_QWORD *)v385 + 1) = v387;
      v388 = *(_QWORD *)&v17[v384 + 16];
      v389 = *(_QWORD *)&v17[v384 + 24];
      v390 = *(_QWORD *)&v17[v384 + 32];
      v391 = *(_QWORD *)&v17[v384 + 40];
      LOBYTE(v378) = v386[48];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1A2993E10(v388, v389, v390, v391, v378);
      *((_QWORD *)v385 + 2) = v388;
      *((_QWORD *)v385 + 3) = v389;
      *((_QWORD *)v385 + 4) = v390;
      *((_QWORD *)v385 + 5) = v391;
      v385[48] = v378;
      v385[49] = v386[49];
      v392 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
      v393 = &v385[v392];
      v394 = &v386[v392];
      v395 = &v386[v392];
      v13 = v718;
      v14 = v733;
      v733(&v385[v392], v395, v718);
      v396 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
      v397 = &v393[v396];
      v398 = &v394[v396];
      v399 = *((_QWORD *)v398 + 1);
      *(_QWORD *)v397 = *(_QWORD *)v398;
      *((_QWORD *)v397 + 1) = v399;
      swift_retain();
      goto LABEL_137;
    case 4u:
      v87 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v88 = swift_getEnumCaseMultiPayload();
      if (v88 == 2)
      {
        v346 = *((_QWORD *)v17 + 1);
        if (v346 >> 60 == 15)
        {
          *(_OWORD *)v16 = *(_OWORD *)v17;
        }
        else
        {
          v400 = *(_QWORD *)v17;
          sub_1A2973524(*(_QWORD *)v17, *((_QWORD *)v17 + 1));
          *(_QWORD *)v16 = v400;
          *((_QWORD *)v16 + 1) = v346;
        }
      }
      else if (v88 == 1)
      {
        v347 = *((_QWORD *)v17 + 1);
        *(_QWORD *)v16 = *(_QWORD *)v17;
        *((_QWORD *)v16 + 1) = v347;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v88)
        {
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
          goto LABEL_136;
        }
        v89 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v16, v17, v89);
      }
      swift_storeEnumTagMultiPayload();
LABEL_136:
      v401 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E8);
      *(_QWORD *)&v16[v401[12]] = *(_QWORD *)&v17[v401[12]];
      *(_QWORD *)&v16[v401[16]] = *(_QWORD *)&v17[v401[16]];
      v402 = v401[20];
      v403 = &v16[v402];
      v404 = &v17[v402];
      v405 = *(_QWORD *)&v17[v402 + 8];
      *(_QWORD *)v403 = *(_QWORD *)&v17[v402];
      *((_QWORD *)v403 + 1) = v405;
      v406 = *(_QWORD *)&v17[v402 + 16];
      v407 = *(_QWORD *)&v17[v402 + 24];
      v408 = *(_QWORD *)&v17[v402 + 32];
      v409 = *(_QWORD *)&v17[v402 + 40];
      v410 = v404[48];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1A2993E10(v406, v407, v408, v409, v410);
      *((_QWORD *)v403 + 2) = v406;
      *((_QWORD *)v403 + 3) = v407;
      *((_QWORD *)v403 + 4) = v408;
      *((_QWORD *)v403 + 5) = v409;
      v403[48] = v410;
      v403[49] = v404[49];
      v411 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
      v412 = &v403[v411];
      v413 = &v404[v411];
      v414 = &v404[v411];
      v13 = v718;
      v14 = v733;
      v733(&v403[v411], v414, v718);
      v415 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
      v416 = &v412[v415];
      v417 = &v413[v415];
      v418 = *((_QWORD *)v417 + 1);
      *(_QWORD *)v416 = *(_QWORD *)v417;
      *((_QWORD *)v416 + 1) = v418;
      swift_retain();
LABEL_137:
      swift_storeEnumTagMultiPayload();
      a2 = v734;
      a3 = v735;
      goto LABEL_204;
    case 5u:
      v90 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v91 = swift_getEnumCaseMultiPayload();
      if (v91 == 2)
      {
        v348 = *((_QWORD *)v17 + 1);
        if (v348 >> 60 == 15)
        {
          *(_OWORD *)v16 = *(_OWORD *)v17;
        }
        else
        {
          v419 = *(_QWORD *)v17;
          sub_1A2973524(*(_QWORD *)v17, *((_QWORD *)v17 + 1));
          *(_QWORD *)v16 = v419;
          *((_QWORD *)v16 + 1) = v348;
        }
      }
      else if (v91 == 1)
      {
        v349 = *((_QWORD *)v17 + 1);
        *(_QWORD *)v16 = *(_QWORD *)v17;
        *((_QWORD *)v16 + 1) = v349;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v91)
        {
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
          goto LABEL_140;
        }
        v92 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v16, v17, v92);
      }
      swift_storeEnumTagMultiPayload();
LABEL_140:
      v420 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
      *(_QWORD *)&v16[*(int *)(v420 + 48)] = *(_QWORD *)&v17[*(int *)(v420 + 48)];
      v421 = *(int *)(v420 + 64);
      v422 = &v16[v421];
      v423 = &v17[v421];
      swift_bridgeObjectRetain();
      v14(v422, v423, v13);
      v424 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      v422[v424[13]] = v423[v424[13]];
      v425 = v424[14];
      v426 = &v422[v425];
      v427 = &v423[v425];
      v428 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v428 - 8) + 16))(v426, v427, v428);
      v429 = v424[15];
      v125 = &v422[v429];
      v126 = &v423[v429];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v430 = swift_getEnumCaseMultiPayload();
      if (v430 == 2)
      {
        v439 = *((_QWORD *)v126 + 1);
        *(_QWORD *)v125 = *(_QWORD *)v126;
        *((_QWORD *)v125 + 1) = v439;
        v440 = *((_QWORD *)v126 + 3);
        *((_QWORD *)v125 + 2) = *((_QWORD *)v126 + 2);
        *((_QWORD *)v125 + 3) = v440;
        *((_QWORD *)v125 + 4) = *((_QWORD *)v126 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v441 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v442 = &v125[v441];
        v443 = &v126[v441];
        v444 = *(_QWORD *)&v126[v441 + 8];
        *(_QWORD *)v442 = *(_QWORD *)&v126[v441];
        *((_QWORD *)v442 + 1) = v444;
        v445 = *(_QWORD *)&v126[v441 + 16];
        v446 = *(_QWORD *)&v126[v441 + 24];
        v447 = *(_QWORD *)&v126[v441 + 32];
        v448 = *(_QWORD *)&v126[v441 + 40];
        v449 = a1;
        v450 = v443[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v445, v446, v447, v448, v450);
        *((_QWORD *)v442 + 2) = v445;
        *((_QWORD *)v442 + 3) = v446;
        *((_QWORD *)v442 + 4) = v447;
        *((_QWORD *)v442 + 5) = v448;
        v442[48] = v450;
        a1 = v449;
        v13 = v718;
        v442[49] = v443[49];
        v451 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v452 = &v442[v451];
        v437 = &v443[v451];
        v14 = v733;
        a2 = v734;
        v733(&v442[v451], v437, v718);
        v438 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v65 = &v452[v438];
      }
      else
      {
        if (v430 != 1)
          goto LABEL_172;
        *v125 = *v126;
        v431 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
        v432 = &v125[v431];
        v433 = &v126[v431];
        v434 = &v126[v431];
        v14 = v733;
        v733(&v125[v431], v434, v13);
        v435 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
        v436 = &v432[v435];
        v437 = &v433[v435];
        v733(v436, v437, v13);
        v438 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
        v65 = &v436[v438];
      }
      v66 = &v437[v438];
      a3 = v735;
      goto LABEL_173;
    case 6u:
      v93 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v94 = swift_getEnumCaseMultiPayload();
      if (v94 == 2)
      {
        v350 = *((_QWORD *)v17 + 1);
        if (v350 >> 60 == 15)
        {
          *(_OWORD *)v16 = *(_OWORD *)v17;
        }
        else
        {
          v453 = *(_QWORD *)v17;
          sub_1A2973524(*(_QWORD *)v17, *((_QWORD *)v17 + 1));
          *(_QWORD *)v16 = v453;
          *((_QWORD *)v16 + 1) = v350;
        }
      }
      else if (v94 == 1)
      {
        v351 = *((_QWORD *)v17 + 1);
        *(_QWORD *)v16 = *(_QWORD *)v17;
        *((_QWORD *)v16 + 1) = v351;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v94)
        {
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
          goto LABEL_148;
        }
        v95 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(v16, v17, v95);
      }
      swift_storeEnumTagMultiPayload();
LABEL_148:
      v454 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
      *(_QWORD *)&v16[*(int *)(v454 + 48)] = *(_QWORD *)&v17[*(int *)(v454 + 48)];
      v455 = *(int *)(v454 + 64);
      v456 = &v16[v455];
      v457 = &v17[v455];
      swift_bridgeObjectRetain();
      v14(v456, v457, v13);
      v458 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      v456[v458[13]] = v457[v458[13]];
      v459 = v458[14];
      v460 = &v456[v459];
      v461 = &v457[v459];
      v462 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v462 - 8) + 16))(v460, v461, v462);
      v463 = v458[15];
      v125 = &v456[v463];
      v126 = &v457[v463];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v464 = swift_getEnumCaseMultiPayload();
      if (v464 == 2)
      {
        v473 = *((_QWORD *)v126 + 1);
        *(_QWORD *)v125 = *(_QWORD *)v126;
        *((_QWORD *)v125 + 1) = v473;
        v474 = *((_QWORD *)v126 + 3);
        *((_QWORD *)v125 + 2) = *((_QWORD *)v126 + 2);
        *((_QWORD *)v125 + 3) = v474;
        *((_QWORD *)v125 + 4) = *((_QWORD *)v126 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v475 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v476 = &v125[v475];
        v477 = &v126[v475];
        v478 = *(_QWORD *)&v126[v475 + 8];
        *(_QWORD *)v476 = *(_QWORD *)&v126[v475];
        *((_QWORD *)v476 + 1) = v478;
        v479 = *(_QWORD *)&v126[v475 + 16];
        v480 = *(_QWORD *)&v126[v475 + 24];
        v481 = *(_QWORD *)&v126[v475 + 32];
        v482 = *(_QWORD *)&v126[v475 + 40];
        v483 = a1;
        v484 = v477[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v479, v480, v481, v482, v484);
        *((_QWORD *)v476 + 2) = v479;
        *((_QWORD *)v476 + 3) = v480;
        *((_QWORD *)v476 + 4) = v481;
        *((_QWORD *)v476 + 5) = v482;
        v476[48] = v484;
        a1 = v483;
        v13 = v718;
        v476[49] = v477[49];
        v485 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v486 = &v476[v485];
        v471 = &v477[v485];
        v14 = v733;
        a2 = v734;
        v733(&v476[v485], v471, v718);
        v472 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v65 = &v486[v472];
      }
      else
      {
        if (v464 != 1)
          goto LABEL_172;
        *v125 = *v126;
        v465 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
        v466 = &v125[v465];
        v467 = &v126[v465];
        v468 = &v126[v465];
        v14 = v733;
        v733(&v125[v465], v468, v13);
        v469 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
        v470 = &v466[v469];
        v471 = &v467[v469];
        v733(v470, v471, v13);
        v472 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
        v65 = &v470[v472];
      }
      v66 = &v471[v472];
      a3 = v735;
      goto LABEL_173;
    case 7u:
      v96 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v97 = swift_getEnumCaseMultiPayload();
      if (v97 == 2)
      {
        v352 = *((_QWORD *)v17 + 1);
        if (v352 >> 60 == 15)
        {
          *(_OWORD *)v16 = *(_OWORD *)v17;
        }
        else
        {
          v487 = *(_QWORD *)v17;
          sub_1A2973524(*(_QWORD *)v17, *((_QWORD *)v17 + 1));
          *(_QWORD *)v16 = v487;
          *((_QWORD *)v16 + 1) = v352;
          a3 = v735;
        }
      }
      else if (v97 == 1)
      {
        v353 = *((_QWORD *)v17 + 1);
        *(_QWORD *)v16 = *(_QWORD *)v17;
        *((_QWORD *)v16 + 1) = v353;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v97)
        {
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
          goto LABEL_156;
        }
        v98 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 16))(v16, v17, v98);
      }
      swift_storeEnumTagMultiPayload();
LABEL_156:
      v488 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D8);
      *(_QWORD *)&v16[*(int *)(v488 + 48)] = *(_QWORD *)&v17[*(int *)(v488 + 48)];
      *(_QWORD *)&v16[*(int *)(v488 + 64)] = *(_QWORD *)&v17[*(int *)(v488 + 64)];
      swift_bridgeObjectRetain();
      goto LABEL_203;
    case 8u:
      v99 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v100 = swift_getEnumCaseMultiPayload();
      if (v100 == 2)
      {
        v354 = *((_QWORD *)v17 + 1);
        if (v354 >> 60 == 15)
        {
          *(_OWORD *)v16 = *(_OWORD *)v17;
        }
        else
        {
          v489 = *(_QWORD *)v17;
          sub_1A2973524(*(_QWORD *)v17, *((_QWORD *)v17 + 1));
          *(_QWORD *)v16 = v489;
          *((_QWORD *)v16 + 1) = v354;
        }
      }
      else if (v100 == 1)
      {
        v355 = *((_QWORD *)v17 + 1);
        *(_QWORD *)v16 = *(_QWORD *)v17;
        *((_QWORD *)v16 + 1) = v355;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v100)
        {
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
          goto LABEL_159;
        }
        v101 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(v16, v17, v101);
      }
      swift_storeEnumTagMultiPayload();
LABEL_159:
      v490 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
      *(_QWORD *)&v16[v490[12]] = *(_QWORD *)&v17[v490[12]];
      *(_QWORD *)&v16[v490[16]] = *(_QWORD *)&v17[v490[16]];
      v491 = v490[20];
      v492 = &v16[v491];
      v493 = &v17[v491];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14(v492, v493, v13);
      v494 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      v492[v494[13]] = v493[v494[13]];
      v495 = v494[14];
      v496 = &v492[v495];
      v497 = &v493[v495];
      v498 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v498 - 8) + 16))(v496, v497, v498);
      v499 = v494[15];
      v125 = &v492[v499];
      v126 = &v493[v499];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v500 = swift_getEnumCaseMultiPayload();
      if (v500 == 2)
      {
        v509 = *((_QWORD *)v126 + 1);
        *(_QWORD *)v125 = *(_QWORD *)v126;
        *((_QWORD *)v125 + 1) = v509;
        v510 = *((_QWORD *)v126 + 3);
        *((_QWORD *)v125 + 2) = *((_QWORD *)v126 + 2);
        *((_QWORD *)v125 + 3) = v510;
        *((_QWORD *)v125 + 4) = *((_QWORD *)v126 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v511 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v512 = &v125[v511];
        v513 = &v126[v511];
        v514 = *(_QWORD *)&v126[v511 + 8];
        *(_QWORD *)v512 = *(_QWORD *)&v126[v511];
        *((_QWORD *)v512 + 1) = v514;
        v515 = *(_QWORD *)&v126[v511 + 16];
        v516 = *(_QWORD *)&v126[v511 + 24];
        v517 = *(_QWORD *)&v126[v511 + 32];
        v518 = *(_QWORD *)&v126[v511 + 40];
        v519 = a1;
        v520 = v513[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v515, v516, v517, v518, v520);
        *((_QWORD *)v512 + 2) = v515;
        *((_QWORD *)v512 + 3) = v516;
        *((_QWORD *)v512 + 4) = v517;
        *((_QWORD *)v512 + 5) = v518;
        v512[48] = v520;
        a1 = v519;
        v13 = v718;
        v512[49] = v513[49];
        v521 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v522 = &v512[v521];
        v507 = &v513[v521];
        v14 = v733;
        a2 = v734;
        v733(&v512[v521], v507, v718);
        v508 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v65 = &v522[v508];
      }
      else
      {
        if (v500 != 1)
          goto LABEL_172;
        *v125 = *v126;
        v501 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
        v502 = &v125[v501];
        v503 = &v126[v501];
        v504 = &v126[v501];
        v14 = v733;
        v733(&v125[v501], v504, v13);
        v505 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
        v506 = &v502[v505];
        v507 = &v503[v505];
        v733(v506, v507, v13);
        v508 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
        v65 = &v506[v508];
      }
      v66 = &v507[v508];
      a3 = v735;
      goto LABEL_173;
    case 9u:
      v102 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v103 = swift_getEnumCaseMultiPayload();
      if (v103 == 2)
      {
        v356 = *((_QWORD *)v17 + 1);
        if (v356 >> 60 == 15)
        {
          *(_OWORD *)v16 = *(_OWORD *)v17;
        }
        else
        {
          v523 = *(_QWORD *)v17;
          sub_1A2973524(*(_QWORD *)v17, *((_QWORD *)v17 + 1));
          *(_QWORD *)v16 = v523;
          *((_QWORD *)v16 + 1) = v356;
        }
      }
      else if (v103 == 1)
      {
        v357 = *((_QWORD *)v17 + 1);
        *(_QWORD *)v16 = *(_QWORD *)v17;
        *((_QWORD *)v16 + 1) = v357;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v103)
        {
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
          goto LABEL_167;
        }
        v104 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v16, v17, v104);
      }
      swift_storeEnumTagMultiPayload();
LABEL_167:
      v524 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
      *(_QWORD *)&v16[v524[12]] = *(_QWORD *)&v17[v524[12]];
      *(_QWORD *)&v16[v524[16]] = *(_QWORD *)&v17[v524[16]];
      v525 = v524[20];
      v526 = &v16[v525];
      v527 = &v17[v525];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14(v526, v527, v13);
      v528 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      v526[v528[13]] = v527[v528[13]];
      v529 = v528[14];
      v530 = &v526[v529];
      v531 = &v527[v529];
      v532 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v532 - 8) + 16))(v530, v531, v532);
      v533 = v528[15];
      v125 = &v526[v533];
      v126 = &v527[v533];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v534 = swift_getEnumCaseMultiPayload();
      if (v534 == 2)
      {
        v543 = *((_QWORD *)v126 + 1);
        *(_QWORD *)v125 = *(_QWORD *)v126;
        *((_QWORD *)v125 + 1) = v543;
        v544 = *((_QWORD *)v126 + 3);
        *((_QWORD *)v125 + 2) = *((_QWORD *)v126 + 2);
        *((_QWORD *)v125 + 3) = v544;
        *((_QWORD *)v125 + 4) = *((_QWORD *)v126 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v545 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v546 = &v125[v545];
        v547 = &v126[v545];
        v548 = *(_QWORD *)&v126[v545 + 8];
        *(_QWORD *)v546 = *(_QWORD *)&v126[v545];
        *((_QWORD *)v546 + 1) = v548;
        v549 = *(_QWORD *)&v126[v545 + 16];
        v550 = *(_QWORD *)&v126[v545 + 24];
        v551 = *(_QWORD *)&v126[v545 + 32];
        v552 = *(_QWORD *)&v126[v545 + 40];
        v553 = a1;
        v554 = v547[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v549, v550, v551, v552, v554);
        *((_QWORD *)v546 + 2) = v549;
        *((_QWORD *)v546 + 3) = v550;
        *((_QWORD *)v546 + 4) = v551;
        *((_QWORD *)v546 + 5) = v552;
        v546[48] = v554;
        a1 = v553;
        v13 = v718;
        v546[49] = v547[49];
        v555 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v556 = &v546[v555];
        v541 = &v547[v555];
        v14 = v733;
        a2 = v734;
        v733(&v546[v555], v541, v718);
        v542 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v65 = &v556[v542];
      }
      else
      {
        if (v534 != 1)
          goto LABEL_172;
        *v125 = *v126;
        v535 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
        v536 = &v125[v535];
        v537 = &v126[v535];
        v538 = &v126[v535];
        v14 = v733;
        v733(&v125[v535], v538, v13);
        v539 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
        v540 = &v536[v539];
        v541 = &v537[v539];
        v733(v540, v541, v13);
        v542 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
        v65 = &v540[v542];
      }
      v66 = &v541[v542];
      a3 = v735;
      goto LABEL_173;
    case 0xAu:
      v105 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v106 = swift_getEnumCaseMultiPayload();
      if (v106 == 2)
      {
        v358 = *((_QWORD *)v17 + 1);
        if (v358 >> 60 == 15)
        {
          *(_OWORD *)v16 = *(_OWORD *)v17;
        }
        else
        {
          v573 = *(_QWORD *)v17;
          sub_1A2973524(*(_QWORD *)v17, *((_QWORD *)v17 + 1));
          *(_QWORD *)v16 = v573;
          *((_QWORD *)v16 + 1) = v358;
          a3 = v735;
        }
      }
      else if (v106 == 1)
      {
        v359 = *((_QWORD *)v17 + 1);
        *(_QWORD *)v16 = *(_QWORD *)v17;
        *((_QWORD *)v16 + 1) = v359;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v106)
        {
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
          goto LABEL_176;
        }
        v107 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v16, v17, v107);
      }
      swift_storeEnumTagMultiPayload();
LABEL_176:
      v574 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C8);
      *(_QWORD *)&v16[*(int *)(v574 + 48)] = *(_QWORD *)&v17[*(int *)(v574 + 48)];
      *(_QWORD *)&v16[*(int *)(v574 + 64)] = *(_QWORD *)&v17[*(int *)(v574 + 64)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_203;
    case 0xBu:
      v108 = *((_QWORD *)v17 + 1);
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *((_QWORD *)v16 + 1) = v108;
      v109 = *((_QWORD *)v17 + 3);
      *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
      *((_QWORD *)v16 + 3) = v109;
      v110 = *((_QWORD *)v17 + 4);
      v111 = *((_QWORD *)v17 + 5);
      v112 = v14;
      v113 = v17[48];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1A297208C();
      *((_QWORD *)v16 + 4) = v110;
      *((_QWORD *)v16 + 5) = v111;
      v16[48] = v113;
      v114 = *((_QWORD *)v17 + 7);
      v115 = *((_QWORD *)v17 + 8);
      sub_1A2973524(v114, v115);
      *((_QWORD *)v16 + 7) = v114;
      *((_QWORD *)v16 + 8) = v115;
      v116 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B8) + 48);
      v117 = &v16[v116];
      v118 = &v17[v116];
      v112(&v16[v116], &v17[v116], v13);
      v119 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      v117[v119[13]] = v118[v119[13]];
      v120 = v119[14];
      v121 = &v117[v120];
      v122 = &v118[v120];
      v123 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v123 - 8) + 16))(v121, v122, v123);
      v124 = v119[15];
      v125 = &v117[v124];
      v126 = &v118[v124];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v127 = swift_getEnumCaseMultiPayload();
      if (v127 == 2)
      {
        v312 = *((_QWORD *)v126 + 1);
        *(_QWORD *)v125 = *(_QWORD *)v126;
        *((_QWORD *)v125 + 1) = v312;
        v313 = *((_QWORD *)v126 + 3);
        *((_QWORD *)v125 + 2) = *((_QWORD *)v126 + 2);
        *((_QWORD *)v125 + 3) = v313;
        *((_QWORD *)v125 + 4) = *((_QWORD *)v126 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v314 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v315 = &v125[v314];
        v316 = &v126[v314];
        v317 = *(_QWORD *)&v126[v314 + 8];
        *(_QWORD *)v315 = *(_QWORD *)&v126[v314];
        *((_QWORD *)v315 + 1) = v317;
        v318 = *(_QWORD *)&v126[v314 + 16];
        v319 = *(_QWORD *)&v126[v314 + 24];
        v320 = *(_QWORD *)&v126[v314 + 32];
        v321 = *(_QWORD *)&v126[v314 + 40];
        v322 = a1;
        v323 = v316[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v318, v319, v320, v321, v323);
        *((_QWORD *)v315 + 2) = v318;
        *((_QWORD *)v315 + 3) = v319;
        *((_QWORD *)v315 + 4) = v320;
        *((_QWORD *)v315 + 5) = v321;
        v315[48] = v323;
        a1 = v322;
        v13 = v718;
        v315[49] = v316[49];
        v324 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v325 = &v315[v324];
        v326 = &v316[v324];
        v14 = v733;
        a2 = v734;
        v733(&v315[v324], v326, v718);
        v327 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v65 = &v325[v327];
        v66 = &v326[v327];
        goto LABEL_88;
      }
      if (v127 == 1)
      {
        *v125 = *v126;
        v128 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
        v129 = &v125[v128];
        v130 = &v126[v128];
        v131 = &v126[v128];
        v14 = v733;
        v733(&v125[v128], v131, v13);
        v132 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
        v133 = &v129[v132];
        v134 = &v130[v132];
        v733(v133, v134, v13);
        v135 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
        v65 = &v133[v135];
        v66 = &v134[v135];
LABEL_88:
        a3 = v735;
        goto LABEL_173;
      }
LABEL_172:
      v557 = *((_QWORD *)v126 + 1);
      *(_QWORD *)v125 = *(_QWORD *)v126;
      *((_QWORD *)v125 + 1) = v557;
      v558 = *((_QWORD *)v126 + 3);
      *((_QWORD *)v125 + 2) = *((_QWORD *)v126 + 2);
      *((_QWORD *)v125 + 3) = v558;
      *((_QWORD *)v125 + 4) = *((_QWORD *)v126 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v559 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
      v560 = &v125[v559];
      v561 = &v126[v559];
      v562 = *(_QWORD *)&v126[v559 + 8];
      *(_QWORD *)v560 = *(_QWORD *)&v126[v559];
      *((_QWORD *)v560 + 1) = v562;
      v563 = *(_QWORD *)&v126[v559 + 16];
      v564 = *(_QWORD *)&v126[v559 + 24];
      v565 = *(_QWORD *)&v126[v559 + 32];
      v566 = *(_QWORD *)&v126[v559 + 40];
      v567 = v561[48];
      swift_bridgeObjectRetain();
      sub_1A2993E10(v563, v564, v565, v566, v567);
      *((_QWORD *)v560 + 2) = v563;
      *((_QWORD *)v560 + 3) = v564;
      *((_QWORD *)v560 + 4) = v565;
      *((_QWORD *)v560 + 5) = v566;
      v560[48] = v567;
      v560[49] = v561[49];
      v568 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
      v569 = &v560[v568];
      v570 = &v561[v568];
      v14 = v733;
      v733(&v560[v568], &v561[v568], v13);
      v571 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
      v65 = &v569[v571];
      v66 = &v570[v571];
      a1 = v732;
      a2 = v734;
      a3 = v735;
LABEL_173:
      v572 = *((_QWORD *)v66 + 1);
      *(_QWORD *)v65 = *(_QWORD *)v66;
      *((_QWORD *)v65 + 1) = v572;
      swift_retain();
      swift_storeEnumTagMultiPayload();
LABEL_203:
      swift_storeEnumTagMultiPayload();
LABEL_204:
      v605 = a3[8];
      *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
      v606 = (char *)a1 + v605;
      v607 = (char *)a2 + v605;
      v14((char *)a1 + v605, (char *)a2 + v605, v13);
      v608 = (int *)type metadata accessor for SFAirDropReceive.AskRequest(0);
      v609 = v608[5];
      v610 = &v606[v609];
      v611 = &v607[v609];
      v612 = *(_QWORD *)v611;
      v613 = *((_QWORD *)v611 + 1);
      v614 = v611[16];
      sub_1A2993E70(*(_QWORD *)v611, v613, v614);
      *(_QWORD *)v610 = v612;
      *((_QWORD *)v610 + 1) = v613;
      v610[16] = v614;
      *(_QWORD *)&v606[v608[6]] = *(_QWORD *)&v607[v608[6]];
      v606[v608[7]] = v607[v608[7]];
      v606[v608[8]] = v607[v608[8]];
      v606[v608[9]] = v607[v608[9]];
      v615 = v608[10];
      v616 = &v606[v615];
      v617 = &v607[v615];
      v731 = *((_QWORD *)v617 + 1);
      *(_QWORD *)v616 = *(_QWORD *)v617;
      *((_QWORD *)v616 + 1) = v731;
      v618 = v608[11];
      v619 = &v606[v618];
      v620 = &v607[v618];
      v730 = *((_QWORD *)v620 + 1);
      *(_QWORD *)v619 = *(_QWORD *)v620;
      *((_QWORD *)v619 + 1) = v730;
      v621 = v608[12];
      v622 = &v606[v621];
      v623 = &v607[v621];
      v726 = *((_QWORD *)v623 + 1);
      *(_QWORD *)v622 = *(_QWORD *)v623;
      *((_QWORD *)v622 + 1) = v726;
      v624 = v608[13];
      v625 = &v606[v624];
      v626 = &v607[v624];
      v725 = *((_QWORD *)v626 + 1);
      *(_QWORD *)v625 = *(_QWORD *)v626;
      *((_QWORD *)v625 + 1) = v725;
      v627 = v608[14];
      v628 = &v606[v627];
      v629 = &v607[v627];
      v724 = *((_QWORD *)v629 + 1);
      *(_QWORD *)v628 = *(_QWORD *)v629;
      *((_QWORD *)v628 + 1) = v724;
      v630 = v608[15];
      v631 = &v606[v630];
      v632 = &v607[v630];
      v723 = *((_QWORD *)v632 + 1);
      *(_QWORD *)v631 = *(_QWORD *)v632;
      *((_QWORD *)v631 + 1) = v723;
      v633 = v608[16];
      v634 = &v606[v633];
      v635 = &v607[v633];
      v722 = *((_QWORD *)v635 + 1);
      *(_QWORD *)v634 = *(_QWORD *)v635;
      *((_QWORD *)v634 + 1) = v722;
      v636 = v608[17];
      v637 = &v606[v636];
      v638 = &v607[v636];
      v721 = *((_QWORD *)v638 + 1);
      *(_QWORD *)v637 = *(_QWORD *)v638;
      *((_QWORD *)v637 + 1) = v721;
      v639 = v608[18];
      v640 = &v606[v639];
      v641 = &v607[v639];
      v642 = *((_QWORD *)v641 + 1);
      *(_QWORD *)v640 = *(_QWORD *)v641;
      *((_QWORD *)v640 + 1) = v642;
      v643 = v608[19];
      v644 = &v606[v643];
      v645 = &v607[v643];
      v646 = *((_QWORD *)v645 + 1);
      *(_QWORD *)v644 = *(_QWORD *)v645;
      *((_QWORD *)v644 + 1) = v646;
      v647 = v608[20];
      v648 = *(void **)&v607[v647];
      *(_QWORD *)&v606[v647] = v648;
      v649 = v608[21];
      v650 = *(void **)&v607[v649];
      *(_QWORD *)&v606[v649] = v650;
      v651 = v608[22];
      v652 = *(void **)&v607[v651];
      *(_QWORD *)&v606[v651] = v652;
      v653 = v608[23];
      v654 = &v606[v653];
      v655 = &v607[v653];
      v656 = *((_QWORD *)v655 + 1);
      *(_QWORD *)v654 = *(_QWORD *)v655;
      *((_QWORD *)v654 + 1) = v656;
      v657 = v608[24];
      __dst = &v606[v657];
      v720 = &v607[v657];
      v658 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
      v719 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v658 - 8) + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v659 = v648;
      v660 = v650;
      v661 = v652;
      swift_bridgeObjectRetain();
      if (!v719(v720, 1, v658))
      {
        v664 = (char *)&loc_1A29981BC + 4 * byte_1A2AFB202[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v662 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D8);
      memcpy(__dst, v720, *(_QWORD *)(*(_QWORD *)(v662 - 8) + 64));
      v663 = v734;
      *(_QWORD *)&v606[v608[25]] = *(_QWORD *)&v607[v608[25]];
      *(_QWORD *)&v606[v608[26]] = *(_QWORD *)&v607[v608[26]];
      v665 = v608[27];
      v666 = &v606[v665];
      v667 = (uint64_t *)&v607[v665];
      v668 = *(_QWORD *)&v607[v665 + 8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v668 >> 60 == 15)
      {
        *(_OWORD *)v666 = *(_OWORD *)v667;
      }
      else
      {
        v669 = *v667;
        sub_1A2973524(*v667, v668);
        *(_QWORD *)v666 = v669;
        *((_QWORD *)v666 + 1) = v668;
      }
      v670 = v735;
      v671 = v735[9];
      v672 = (_QWORD *)((char *)v732 + v671);
      v673 = (_QWORD *)((char *)v734 + v671);
      v674 = type metadata accessor for SFAirDropReceive.AskResponse();
      v675 = *(_QWORD *)(v674 - 8);
      if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v675 + 48))(v673, 1, v674))
      {
        v676 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B6F8);
        memcpy(v672, v673, *(_QWORD *)(*(_QWORD *)(v676 - 8) + 64));
        goto LABEL_229;
      }
      v677 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
      v678 = *(_QWORD *)(v677 - 8);
      if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v678 + 48))(v673, 3, v677))
      {
        memcpy(v672, v673, *(_QWORD *)(v675 + 64));
        goto LABEL_228;
      }
      v679 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v680 = swift_getEnumCaseMultiPayload();
      if (v680 == 2)
      {
        v682 = v673[1];
        if (v682 >> 60 == 15)
        {
          *(_OWORD *)v672 = *(_OWORD *)v673;
        }
        else
        {
          v684 = *v673;
          sub_1A2973524(*v673, v673[1]);
          *v672 = v684;
          v672[1] = v682;
        }
      }
      else if (v680 == 1)
      {
        v683 = v673[1];
        *v672 = *v673;
        v672[1] = v683;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v680)
        {
          memcpy(v672, v673, *(_QWORD *)(*(_QWORD *)(v679 - 8) + 64));
          goto LABEL_224;
        }
        v681 = sub_1A2AE2F44();
        (*(void (**)(unint64_t *, unint64_t *, uint64_t))(*(_QWORD *)(v681 - 8) + 16))(v672, v673, v681);
      }
      swift_storeEnumTagMultiPayload();
LABEL_224:
      v685 = *(int *)(v677 + 48);
      v686 = (char *)v672 + v685;
      v687 = (char *)v673 + v685;
      *((_BYTE *)v672 + v685) = *((_BYTE *)v673 + v685);
      v688 = (_OWORD *)((char *)v672 + v685 + 8);
      v689 = (uint64_t *)((char *)v673 + v685 + 8);
      v690 = *((_QWORD *)v687 + 2);
      if (v690 >> 60 == 15)
      {
        *v688 = *(_OWORD *)v689;
      }
      else
      {
        v691 = *v689;
        sub_1A2973524(*v689, v690);
        *((_QWORD *)v686 + 1) = v691;
        *((_QWORD *)v686 + 2) = v690;
      }
      v670 = v735;
      (*(void (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(v678 + 56))(v672, 0, 3, v677);
LABEL_228:
      (*(void (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(v675 + 56))(v672, 0, 1, v674);
      v663 = v734;
LABEL_229:
      v692 = v670[10];
      v693 = (char *)v732 + v692;
      v694 = (uint64_t)v663 + v692;
      v695 = sub_1A2AE30C4();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v695 - 8) + 16))(v693, v694, v695);
      v696 = v670[12];
      *((_BYTE *)v732 + v670[11]) = *((_BYTE *)v663 + v670[11]);
      *((_BYTE *)v732 + v696) = *((_BYTE *)v663 + v696);
      v697 = v670[13];
      v698 = (_QWORD *)((char *)v732 + v697);
      v699 = (unsigned __int8 *)v663 + v697;
      v700 = type metadata accessor for SFAirDrop.DeclineAction();
      v701 = *(_QWORD *)(v700 - 8);
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v701 + 48))(v699, 1, v700))
      {
        v702 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B700);
        memcpy(v698, v699, *(_QWORD *)(*(_QWORD *)(v702 - 8) + 64));
      }
      else
      {
        v703 = *((_QWORD *)v699 + 1);
        *v698 = *(_QWORD *)v699;
        v698[1] = v703;
        v704 = *((_QWORD *)v699 + 2);
        v705 = *((_QWORD *)v699 + 3);
        v706 = *((_QWORD *)v699 + 4);
        v707 = *((_QWORD *)v699 + 5);
        v708 = v699[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v704, v705, v706, v707, v708);
        v698[2] = v704;
        v698[3] = v705;
        v698[4] = v706;
        v698[5] = v707;
        *((_BYTE *)v698 + 48) = v708;
        *((_BYTE *)v698 + 49) = v699[49];
        v709 = *(int *)(v700 + 28);
        v710 = (char *)v698 + v709;
        v711 = &v699[v709];
        v663 = v734;
        v733((char *)v698 + v709, (char *)v711, v718);
        v712 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v713 = &v710[v712];
        v670 = v735;
        v714 = (char *)&v711[v712];
        v715 = *((_QWORD *)v714 + 1);
        *(_QWORD *)v713 = *(_QWORD *)v714;
        *((_QWORD *)v713 + 1) = v715;
        v716 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v701 + 56);
        swift_retain();
        v716(v698, 0, 1, v700);
      }
      *((_BYTE *)v732 + v670[14]) = *((_BYTE *)v663 + v670[14]);
      return v732;
    case 0xCu:
      v136 = *((_QWORD *)v17 + 1);
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *((_QWORD *)v16 + 1) = v136;
      v137 = *((_QWORD *)v17 + 3);
      *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
      *((_QWORD *)v16 + 3) = v137;
      v138 = *((_QWORD *)v17 + 4);
      v139 = *((_QWORD *)v17 + 5);
      v140 = v17[48];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1A297208C();
      *((_QWORD *)v16 + 4) = v138;
      *((_QWORD *)v16 + 5) = v139;
      a3 = v735;
      v16[48] = v140;
      v14 = v733;
      v141 = *((_QWORD *)v17 + 7);
      v142 = *((_QWORD *)v17 + 8);
      sub_1A2973524(v141, v142);
      *((_QWORD *)v16 + 7) = v141;
      *((_QWORD *)v16 + 8) = v142;
      goto LABEL_203;
    case 0xDu:
      v143 = *((_QWORD *)v17 + 1);
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *((_QWORD *)v16 + 1) = v143;
      v144 = *((_QWORD *)v17 + 3);
      *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
      *((_QWORD *)v16 + 3) = v144;
      v145 = *((_QWORD *)v17 + 4);
      v146 = *((_QWORD *)v17 + 5);
      v147 = v14;
      v148 = v17[48];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1A297208C();
      *((_QWORD *)v16 + 4) = v145;
      *((_QWORD *)v16 + 5) = v146;
      v16[48] = v148;
      v149 = *((_QWORD *)v17 + 7);
      v150 = *((_QWORD *)v17 + 8);
      sub_1A2973524(v149, v150);
      *((_QWORD *)v16 + 7) = v149;
      *((_QWORD *)v16 + 8) = v150;
      v151 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A8) + 48);
      v152 = &v16[v151];
      v153 = &v17[v151];
      v147(&v16[v151], &v17[v151], v13);
      v154 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
      v152[v154[13]] = v153[v154[13]];
      v155 = v154[14];
      v156 = &v152[v155];
      v157 = &v153[v155];
      v158 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v158 - 8) + 16))(v156, v157, v158);
      v159 = v154[15];
      v54 = &v152[v159];
      v55 = &v153[v159];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
      v160 = swift_getEnumCaseMultiPayload();
      if (v160 == 2)
      {
        v328 = *((_QWORD *)v55 + 1);
        *(_QWORD *)v54 = *(_QWORD *)v55;
        *((_QWORD *)v54 + 1) = v328;
        v329 = *((_QWORD *)v55 + 3);
        *((_QWORD *)v54 + 2) = *((_QWORD *)v55 + 2);
        *((_QWORD *)v54 + 3) = v329;
        *((_QWORD *)v54 + 4) = *((_QWORD *)v55 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v330 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
        v331 = &v54[v330];
        v332 = &v55[v330];
        v333 = *(_QWORD *)&v55[v330 + 8];
        *(_QWORD *)v331 = *(_QWORD *)&v55[v330];
        *((_QWORD *)v331 + 1) = v333;
        v334 = *(_QWORD *)&v55[v330 + 16];
        v335 = *(_QWORD *)&v55[v330 + 24];
        v336 = *(_QWORD *)&v55[v330 + 32];
        v337 = *(_QWORD *)&v55[v330 + 40];
        v338 = a1;
        v339 = v332[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v334, v335, v336, v337, v339);
        *((_QWORD *)v331 + 2) = v334;
        *((_QWORD *)v331 + 3) = v335;
        *((_QWORD *)v331 + 4) = v336;
        *((_QWORD *)v331 + 5) = v337;
        v331[48] = v339;
        a1 = v338;
        v13 = v718;
        v331[49] = v332[49];
        v340 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v341 = &v331[v340];
        v342 = &v332[v340];
        v14 = v733;
        a2 = v734;
        v733(&v331[v340], v342, v718);
        v343 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v65 = &v341[v343];
        v66 = &v342[v343];
      }
      else
      {
        if (v160 != 1)
        {
LABEL_82:
          v267 = *((_QWORD *)v55 + 1);
          *(_QWORD *)v54 = *(_QWORD *)v55;
          *((_QWORD *)v54 + 1) = v267;
          v268 = *((_QWORD *)v55 + 3);
          *((_QWORD *)v54 + 2) = *((_QWORD *)v55 + 2);
          *((_QWORD *)v54 + 3) = v268;
          *((_QWORD *)v54 + 4) = *((_QWORD *)v55 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v269 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
          v270 = &v54[v269];
          v271 = &v55[v269];
          v272 = *(_QWORD *)&v55[v269 + 8];
          *(_QWORD *)v270 = *(_QWORD *)&v55[v269];
          *((_QWORD *)v270 + 1) = v272;
          v273 = *(_QWORD *)&v55[v269 + 16];
          v274 = *(_QWORD *)&v55[v269 + 24];
          v275 = *(_QWORD *)&v55[v269 + 32];
          v276 = *(_QWORD *)&v55[v269 + 40];
          v277 = v271[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v273, v274, v275, v276, v277);
          *((_QWORD *)v270 + 2) = v273;
          *((_QWORD *)v270 + 3) = v274;
          *((_QWORD *)v270 + 4) = v275;
          *((_QWORD *)v270 + 5) = v276;
          v270[48] = v277;
          v270[49] = v271[49];
          v278 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v279 = &v270[v278];
          v280 = &v271[v278];
          v14 = v733;
          v733(&v270[v278], &v271[v278], v13);
          v281 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v65 = &v279[v281];
          v66 = &v280[v281];
          a1 = v732;
          a2 = v734;
          a3 = v735;
          goto LABEL_173;
        }
        *v54 = *v55;
        v161 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A8) + 48);
        v162 = &v54[v161];
        v163 = &v55[v161];
        v164 = &v55[v161];
        v14 = v733;
        v733(&v54[v161], v164, v13);
        v165 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B0) + 52);
        v166 = &v162[v165];
        v167 = &v163[v165];
        v733(v166, v167, v13);
        v168 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
        v65 = &v166[v168];
        v66 = &v167[v168];
      }
      a3 = v735;
      goto LABEL_173;
    case 0xEu:
      v169 = *((_QWORD *)v17 + 3);
      if (v169 >= 2)
      {
        v190 = *((_QWORD *)v17 + 1);
        *(_QWORD *)v16 = *(_QWORD *)v17;
        *((_QWORD *)v16 + 1) = v190;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
        *((_QWORD *)v16 + 3) = v169;
        v191 = *((_QWORD *)v17 + 4);
        v192 = *((_QWORD *)v17 + 5);
        v193 = v17[48];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        *((_QWORD *)v16 + 4) = v191;
        *((_QWORD *)v16 + 5) = v192;
        v16[48] = v193;
        v194 = *((_QWORD *)v17 + 7);
        v195 = *((_QWORD *)v17 + 8);
        sub_1A2973524(v194, v195);
        *((_QWORD *)v16 + 7) = v194;
        *((_QWORD *)v16 + 8) = v195;
      }
      else
      {
        v170 = *((_OWORD *)v17 + 3);
        *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
        *((_OWORD *)v16 + 3) = v170;
        *((_QWORD *)v16 + 8) = *((_QWORD *)v17 + 8);
        v171 = *((_OWORD *)v17 + 1);
        *(_OWORD *)v16 = *(_OWORD *)v17;
        *((_OWORD *)v16 + 1) = v171;
      }
      v196 = *((_QWORD *)v17 + 12);
      if (v196 >= 2)
      {
        v199 = *((_QWORD *)v17 + 10);
        *((_QWORD *)v16 + 9) = *((_QWORD *)v17 + 9);
        *((_QWORD *)v16 + 10) = v199;
        *((_QWORD *)v16 + 11) = *((_QWORD *)v17 + 11);
        *((_QWORD *)v16 + 12) = v196;
        v200 = *((_QWORD *)v17 + 13);
        v201 = *((_QWORD *)v17 + 14);
        v202 = v17[120];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        *((_QWORD *)v16 + 13) = v200;
        *((_QWORD *)v16 + 14) = v201;
        v16[120] = v202;
        v203 = *((_QWORD *)v17 + 16);
        v204 = *((_QWORD *)v17 + 17);
        sub_1A2973524(v203, v204);
        *((_QWORD *)v16 + 16) = v203;
        *((_QWORD *)v16 + 17) = v204;
      }
      else
      {
        v197 = *(_OWORD *)(v17 + 120);
        *(_OWORD *)(v16 + 104) = *(_OWORD *)(v17 + 104);
        *(_OWORD *)(v16 + 120) = v197;
        *((_QWORD *)v16 + 17) = *((_QWORD *)v17 + 17);
        v198 = *(_OWORD *)(v17 + 88);
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(v17 + 72);
        *(_OWORD *)(v16 + 88) = v198;
      }
      a3 = v735;
      v14 = v733;
      goto LABEL_203;
    case 0xFu:
      v172 = sub_1A2AE30C4();
      v173 = *(_QWORD *)(v172 - 8);
      v174 = *(void (**)(char *, char *, uint64_t))(v173 + 16);
      v174(v16, v17, v172);
      v175 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
      v176 = v175[5];
      v177 = &v16[v176];
      v178 = &v17[v176];
      v179 = a1;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v173 + 48))(&v17[v176], 1, v172))
      {
        v180 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
        memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v180 - 8) + 64));
      }
      else
      {
        v174(v177, v178, v172);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v173 + 56))(v177, 0, 1, v172);
      }
      v16[v175[6]] = v17[v175[6]];
      v205 = v175[7];
      v206 = &v16[v205];
      v207 = &v17[v205];
      v208 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
      v209 = *(_QWORD *)(v208 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v207, 1, v208))
      {
        v210 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
        memcpy(v206, v207, *(_QWORD *)(*(_QWORD *)(v210 - 8) + 64));
        a1 = v179;
      }
      else
      {
        v217 = type metadata accessor for SFAirDropReceive.Failure();
        v218 = *(_QWORD *)(v217 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v218 + 48))(v207, 1, v217))
        {
          memcpy(v206, v207, *(_QWORD *)(v209 + 64));
        }
        else
        {
          v360 = swift_getEnumCaseMultiPayload();
          if (v360 == 1)
          {
            v575 = *((_QWORD *)v207 + 1);
            *(_QWORD *)v206 = *(_QWORD *)v207;
            *((_QWORD *)v206 + 1) = v575;
            *((_OWORD *)v206 + 1) = *((_OWORD *)v207 + 1);
            v576 = *((_QWORD *)v207 + 5);
            *((_QWORD *)v206 + 4) = *((_QWORD *)v207 + 4);
            *((_QWORD *)v206 + 5) = v576;
            *((_QWORD *)v206 + 6) = *((_QWORD *)v207 + 6);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_storeEnumTagMultiPayload();
          }
          else if (v360)
          {
            memcpy(v206, v207, *(_QWORD *)(v218 + 64));
          }
          else
          {
            v361 = *((_QWORD *)v207 + 1);
            *(_QWORD *)v206 = *(_QWORD *)v207;
            *((_QWORD *)v206 + 1) = v361;
            swift_bridgeObjectRetain();
            v362 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
            v728 = &v206[v362];
            v363 = &v207[v362];
            v364 = sub_1A2AE2F44();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v364 - 8) + 16))(v728, v363, v364);
            swift_storeEnumTagMultiPayload();
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v218 + 56))(v206, 0, 1, v217);
        }
        a1 = v179;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v209 + 56))(v206, 0, 1, v208);
      }
      v577 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A0);
      v578 = v577[12];
      v579 = (uint64_t *)&v16[v578];
      v580 = (uint64_t *)&v17[v578];
      v581 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v582 = swift_getEnumCaseMultiPayload();
      a2 = v734;
      v13 = v718;
      if (v582 == 2)
      {
        v584 = v580[1];
        if (v584 >> 60 == 15)
        {
          *(_OWORD *)v579 = *(_OWORD *)v580;
        }
        else
        {
          v586 = *v580;
          sub_1A2973524(v586, v584);
          *v579 = v586;
          v579[1] = v584;
        }
        a2 = v734;
      }
      else if (v582 == 1)
      {
        v585 = v580[1];
        *v579 = *v580;
        v579[1] = v585;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v582)
        {
          memcpy(v579, v580, *(_QWORD *)(*(_QWORD *)(v581 - 8) + 64));
          goto LABEL_192;
        }
        v583 = sub_1A2AE2F44();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v583 - 8) + 16))(v579, v580, v583);
      }
      swift_storeEnumTagMultiPayload();
LABEL_192:
      v587 = v577[16];
      v588 = &v16[v587];
      v589 = &v17[v587];
      v590 = *((_QWORD *)v589 + 1);
      *(_QWORD *)v588 = *(_QWORD *)v589;
      *((_QWORD *)v588 + 1) = v590;
      *(_QWORD *)&v16[v577[20]] = *(_QWORD *)&v17[v577[20]];
      *(_QWORD *)&v16[v577[24]] = *(_QWORD *)&v17[v577[24]];
      *(_QWORD *)&v16[v577[28]] = *(_QWORD *)&v17[v577[28]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      a3 = v735;
      v14 = v733;
      goto LABEL_204;
    case 0x10u:
      v181 = sub_1A2AE30C4();
      v182 = *(_QWORD *)(v181 - 8);
      v183 = *(void (**)(char *, char *, uint64_t))(v182 + 16);
      v183(v16, v17, v181);
      v184 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
      v185 = v184[5];
      v186 = &v16[v185];
      v187 = &v17[v185];
      v188 = a1;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v182 + 48))(&v17[v185], 1, v181))
      {
        v189 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
        memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v189 - 8) + 64));
      }
      else
      {
        v183(v186, v187, v181);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v182 + 56))(v186, 0, 1, v181);
      }
      v16[v184[6]] = v17[v184[6]];
      v211 = v184[7];
      v212 = &v16[v211];
      v213 = &v17[v211];
      v214 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
      v215 = *(_QWORD *)(v214 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v215 + 48))(v213, 1, v214))
      {
        v216 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
        memcpy(v212, v213, *(_QWORD *)(*(_QWORD *)(v216 - 8) + 64));
        a1 = v188;
      }
      else
      {
        v219 = type metadata accessor for SFAirDropReceive.Failure();
        v220 = *(_QWORD *)(v219 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v220 + 48))(v213, 1, v219))
        {
          memcpy(v212, v213, *(_QWORD *)(v215 + 64));
        }
        else
        {
          v365 = swift_getEnumCaseMultiPayload();
          if (v365 == 1)
          {
            v591 = *((_QWORD *)v213 + 1);
            *(_QWORD *)v212 = *(_QWORD *)v213;
            *((_QWORD *)v212 + 1) = v591;
            *((_OWORD *)v212 + 1) = *((_OWORD *)v213 + 1);
            v592 = *((_QWORD *)v213 + 5);
            *((_QWORD *)v212 + 4) = *((_QWORD *)v213 + 4);
            *((_QWORD *)v212 + 5) = v592;
            *((_QWORD *)v212 + 6) = *((_QWORD *)v213 + 6);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_storeEnumTagMultiPayload();
          }
          else if (v365)
          {
            memcpy(v212, v213, *(_QWORD *)(v220 + 64));
          }
          else
          {
            v366 = *((_QWORD *)v213 + 1);
            *(_QWORD *)v212 = *(_QWORD *)v213;
            *((_QWORD *)v212 + 1) = v366;
            swift_bridgeObjectRetain();
            v367 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
            v729 = &v212[v367];
            v368 = &v213[v367];
            v369 = sub_1A2AE2F44();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v369 - 8) + 16))(v729, v368, v369);
            swift_storeEnumTagMultiPayload();
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v220 + 56))(v212, 0, 1, v219);
        }
        a1 = v188;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v215 + 56))(v212, 0, 1, v214);
      }
      v593 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B398) + 48);
      v594 = &v16[v593];
      v595 = &v17[v593];
      v596 = type metadata accessor for SFAirDropReceive.Failure();
      v597 = swift_getEnumCaseMultiPayload();
      a2 = v734;
      v13 = v718;
      if (v597 == 1)
      {
        v603 = *((_QWORD *)v595 + 1);
        *(_QWORD *)v594 = *(_QWORD *)v595;
        *((_QWORD *)v594 + 1) = v603;
        *((_OWORD *)v594 + 1) = *((_OWORD *)v595 + 1);
        v604 = *((_QWORD *)v595 + 5);
        *((_QWORD *)v594 + 4) = *((_QWORD *)v595 + 4);
        *((_QWORD *)v594 + 5) = v604;
        *((_QWORD *)v594 + 6) = *((_QWORD *)v595 + 6);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      else if (v597)
      {
        memcpy(v594, v595, *(_QWORD *)(*(_QWORD *)(v596 - 8) + 64));
      }
      else
      {
        v598 = *((_QWORD *)v595 + 1);
        *(_QWORD *)v594 = *(_QWORD *)v595;
        *((_QWORD *)v594 + 1) = v598;
        swift_bridgeObjectRetain();
        v599 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
        v600 = &v594[v599];
        v601 = &v595[v599];
        v602 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v602 - 8) + 16))(v600, v601, v602);
        swift_storeEnumTagMultiPayload();
      }
      a3 = v735;
      v14 = v733;
      goto LABEL_203;
    default:
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      goto LABEL_204;
  }
}

_QWORD *_s8TransferVwca(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  int *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  void (*v104)(char *, char *, uint64_t);
  int *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  int v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  void (*v135)(char *, char *, uint64_t);
  int *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  int v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  void (*v155)(char *, char *, uint64_t);
  uint64_t v156;
  uint64_t v157;
  void (*v158)(uint64_t *, char *, uint64_t);
  int *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t *v164;
  void (*v165)(char *, char *, uint64_t);
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(uint64_t *, char *, uint64_t);
  int *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  unint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned __int8 v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned __int8 v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  unsigned __int8 v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned __int8 v250;
  uint64_t v251;
  char *v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned __int8 v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned __int8 v275;
  uint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unsigned __int8 v287;
  uint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  int v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  char *v304;
  int v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  int *v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t *v314;
  uint64_t *v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  char *v323;
  uint64_t v324;
  char *v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  char *v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  int *v339;
  uint64_t v340;
  char *v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unsigned __int8 v347;
  uint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  char *v352;
  char *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  char *v359;
  int *v360;
  uint64_t v361;
  char *v362;
  char *v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  char *v368;
  char *v369;
  uint64_t v370;
  char *v371;
  char *v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  char *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unsigned __int8 v381;
  uint64_t v382;
  char *v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  char *v389;
  char *v390;
  int *v391;
  uint64_t v392;
  char *v393;
  char *v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  uint64_t v398;
  char *v399;
  char *v400;
  uint64_t v401;
  char *v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  char *v406;
  char *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unsigned __int8 v412;
  uint64_t v413;
  char *v414;
  char *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  int *v420;
  uint64_t v421;
  char *v422;
  char *v423;
  int *v424;
  uint64_t v425;
  char *v426;
  char *v427;
  uint64_t v428;
  uint64_t v429;
  int v430;
  uint64_t v431;
  char *v432;
  char *v433;
  uint64_t v434;
  char *v435;
  char *v436;
  uint64_t v437;
  uint64_t v438;
  char *v439;
  char *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unsigned __int8 v445;
  uint64_t v446;
  char *v447;
  char *v448;
  uint64_t v449;
  uint64_t v450;
  int *v451;
  uint64_t v452;
  char *v453;
  char *v454;
  int *v455;
  uint64_t v456;
  char *v457;
  char *v458;
  uint64_t v459;
  uint64_t v460;
  int v461;
  uint64_t v462;
  char *v463;
  char *v464;
  uint64_t v465;
  char *v466;
  char *v467;
  uint64_t v468;
  uint64_t v469;
  char *v470;
  char *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  unsigned __int8 v476;
  uint64_t v477;
  char *v478;
  char *v479;
  uint64_t v480;
  uint64_t v481;
  char *v482;
  char *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  unsigned __int8 v488;
  uint64_t v489;
  char *v490;
  char *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  char *v495;
  char *v496;
  int *v497;
  uint64_t v498;
  char *v499;
  char *v500;
  uint64_t v501;
  uint64_t v502;
  unsigned __int8 v503;
  uint64_t v504;
  uint64_t v505;
  unsigned __int8 v506;
  uint64_t v507;
  char *v508;
  char *v509;
  uint64_t v510;
  char *v511;
  char *v512;
  uint64_t v513;
  char *v514;
  char *v515;
  uint64_t v516;
  char *v517;
  char *v518;
  uint64_t v519;
  char *v520;
  char *v521;
  uint64_t v522;
  char *v523;
  char *v524;
  uint64_t v525;
  char *v526;
  char *v527;
  uint64_t v528;
  char *v529;
  char *v530;
  uint64_t v531;
  char *v532;
  char *v533;
  uint64_t v534;
  char *v535;
  char *v536;
  uint64_t v537;
  void *v538;
  void *v539;
  id v540;
  uint64_t v541;
  void *v542;
  void *v543;
  id v544;
  uint64_t v545;
  void *v546;
  void *v547;
  id v548;
  uint64_t v549;
  char *v550;
  char *v551;
  uint64_t v552;
  char *v553;
  char *v554;
  uint64_t v555;
  uint64_t (*v556)(char *, uint64_t, uint64_t);
  int v557;
  char *v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t *v561;
  char *v562;
  unint64_t v563;
  unint64_t v564;
  int *v565;
  _QWORD *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  uint64_t v571;
  unint64_t *v572;
  unint64_t *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t (*v576)(unint64_t *, uint64_t, uint64_t);
  int v577;
  int v578;
  uint64_t v579;
  uint64_t v580;
  size_t v581;
  char *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t (*v585)(unint64_t *, uint64_t, uint64_t);
  int v586;
  int v587;
  uint64_t v588;
  int v589;
  uint64_t v590;
  uint64_t v591;
  int v592;
  uint64_t v593;
  unint64_t v594;
  uint64_t v595;
  int v596;
  uint64_t v597;
  unint64_t v598;
  uint64_t v599;
  char *v600;
  char *v601;
  _OWORD *v602;
  uint64_t *v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  char *v607;
  char *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  char *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t (*v615)(uint64_t, uint64_t, uint64_t);
  int v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  unsigned __int8 v621;
  uint64_t v622;
  uint64_t v623;
  char *v624;
  uint64_t v625;
  _QWORD *v626;
  char *v627;
  uint64_t v628;
  void (*v629)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v630;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  unsigned __int8 v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  unsigned __int8 v641;
  uint64_t v642;
  uint64_t v643;
  char *v644;
  uint64_t v645;
  _QWORD *v646;
  char *v647;
  uint64_t v648;
  unint64_t v649;
  uint64_t v650;
  uint64_t v651;
  unint64_t v652;
  uint64_t v653;
  char *v654;
  char *v655;
  _OWORD *v656;
  uint64_t *v657;
  unint64_t v658;
  uint64_t v659;
  unint64_t v660;
  int *v661;
  uint64_t v662;
  _QWORD *v663;
  char *v664;
  uint64_t v665;
  int v666;
  uint64_t v667;
  unint64_t v668;
  uint64_t v669;
  uint64_t v670;
  _QWORD *v671;
  char *v672;
  uint64_t v673;
  _QWORD *v674;
  char *v675;
  uint64_t v676;
  int v677;
  uint64_t v678;
  char *v679;
  char *v680;
  uint64_t v681;
  unint64_t v682;
  uint64_t v683;
  char *v684;
  char *v685;
  uint64_t *v686;
  unint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  unint64_t v691;
  void (*v692)(uint64_t *, char *, uint64_t);
  void (*v693)(char *, char *, uint64_t);
  void (*v694)(char *, char *, uint64_t);
  void (*v695)(char *, char *, uint64_t);
  void (*v696)(char *, char *, uint64_t);
  void (*v697)(char *, char *, uint64_t);
  void (*v698)(char *, char *, uint64_t);
  void (*v699)(char *, char *, uint64_t);
  void (*v700)(char *, char *, uint64_t);
  char *v701;
  char *v702;
  uint64_t *v703;
  uint64_t *v704;
  uint64_t *v705;
  uint64_t *v706;
  uint64_t *v707;
  void (*v708)(char *, char *, uint64_t);
  uint64_t v709;
  uint64_t v710;
  _QWORD *v711;
  int *v712;

  v4 = a2;
  if (a1 != a2)
  {
    sub_1A297DA3C((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
    v6 = type metadata accessor for SFAirDropClient.Identifier();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *v4;
      a1[1] = v4[1];
      a1[2] = v4[2];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, v4, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v8 = sub_1A2AE3130();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, v4, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  v9 = a3[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)v4 + v9;
  v12 = sub_1A2AE3130();
  v709 = *(_QWORD *)(v12 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v709 + 24);
  v13(v10, v11, v12);
  v711 = v4;
  v712 = a3;
  v710 = v12;
  v708 = v13;
  if (a1 != v4)
  {
    v14 = a3[6];
    v15 = (_QWORD *)((char *)a1 + v14);
    v16 = (char *)v4 + v14;
    sub_1A297DA3C((uint64_t)a1 + v14, type metadata accessor for SFAirDropReceive.Transfer.State);
    v17 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v692 = *(void (**)(uint64_t *, char *, uint64_t))(v709 + 16);
        v692(v15, v16, v12);
        v18 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *((_BYTE *)v15 + v18[13]) = v16[v18[13]];
        v19 = v18[14];
        v703 = v15;
        v20 = (char *)v15 + v19;
        v21 = &v16[v19];
        v22 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
        v23 = v18[15];
        v24 = (uint64_t *)((char *)v703 + v23);
        v25 = &v16[v23];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v26 = swift_getEnumCaseMultiPayload();
        if (v26 == 2)
          goto LABEL_84;
        if (v26 != 1)
          goto LABEL_85;
        goto LABEL_18;
      case 1u:
        *v15 = *(_QWORD *)v16;
        v15[1] = *((_QWORD *)v16 + 1);
        v15[2] = *((_QWORD *)v16 + 2);
        v15[3] = *((_QWORD *)v16 + 3);
        v27 = v15;
        v28 = *((_QWORD *)v16 + 4);
        v29 = *((_QWORD *)v16 + 5);
        v30 = v16[48];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        v27[4] = v28;
        v27[5] = v29;
        *((_BYTE *)v27 + 48) = v30;
        v31 = *((_QWORD *)v16 + 7);
        v32 = *((_QWORD *)v16 + 8);
        sub_1A2973524(v31, v32);
        v27[7] = v31;
        v27[8] = v32;
        v33 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F8) + 48);
        v34 = (char *)v27 + v33;
        v35 = &v16[v33];
        v36 = *(void (**)(char *, char *, uint64_t))(v709 + 16);
        v36((char *)v27 + v33, &v16[v33], v12);
        v37 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
        v34[v37[13]] = v35[v37[13]];
        v38 = v37[14];
        v39 = &v34[v38];
        v40 = &v35[v38];
        v41 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
        v42 = v37[15];
        v43 = &v34[v42];
        v44 = &v35[v42];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
        v45 = swift_getEnumCaseMultiPayload();
        if (v45 == 2)
        {
          *(_QWORD *)v43 = *(_QWORD *)v44;
          *((_QWORD *)v43 + 1) = *((_QWORD *)v44 + 1);
          *((_QWORD *)v43 + 2) = *((_QWORD *)v44 + 2);
          *((_QWORD *)v43 + 3) = *((_QWORD *)v44 + 3);
          *((_QWORD *)v43 + 4) = *((_QWORD *)v44 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v206 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
          v207 = &v43[v206];
          v208 = &v44[v206];
          *(_QWORD *)v207 = *(_QWORD *)&v44[v206];
          *((_QWORD *)v207 + 1) = *(_QWORD *)&v44[v206 + 8];
          v209 = *(_QWORD *)&v44[v206 + 16];
          v210 = *((_QWORD *)v208 + 3);
          v211 = *((_QWORD *)v208 + 4);
          v212 = *((_QWORD *)v208 + 5);
          v213 = v208[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v209, v210, v211, v212, v213);
          *((_QWORD *)v207 + 2) = v209;
          *((_QWORD *)v207 + 3) = v210;
          *((_QWORD *)v207 + 4) = v211;
          *((_QWORD *)v207 + 5) = v212;
          v207[48] = v213;
          v12 = v710;
          v207[49] = v208[49];
          v214 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v215 = &v207[v214];
          v216 = &v208[v214];
          v36(&v207[v214], &v208[v214], v710);
          v217 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v53 = &v215[v217];
          v54 = &v216[v217];
          goto LABEL_82;
        }
        if (v45 == 1)
        {
          *v43 = *v44;
          v46 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A8) + 48);
          v47 = &v43[v46];
          v48 = &v44[v46];
          v36(&v43[v46], v48, v12);
          v49 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B0) + 52);
          v50 = &v47[v49];
          v51 = &v48[v49];
          v36(v50, v51, v12);
          v52 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v53 = &v50[v52];
          v54 = &v51[v52];
LABEL_82:
          v4 = v711;
          a3 = v712;
          v13 = v708;
          goto LABEL_173;
        }
        *(_QWORD *)v43 = *(_QWORD *)v44;
        *((_QWORD *)v43 + 1) = *((_QWORD *)v44 + 1);
        *((_QWORD *)v43 + 2) = *((_QWORD *)v44 + 2);
        *((_QWORD *)v43 + 3) = *((_QWORD *)v44 + 3);
        *((_QWORD *)v43 + 4) = *((_QWORD *)v44 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v218 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
        v219 = &v43[v218];
        v220 = &v44[v218];
        *(_QWORD *)v219 = *(_QWORD *)&v44[v218];
        *((_QWORD *)v219 + 1) = *(_QWORD *)&v44[v218 + 8];
        v221 = *(_QWORD *)&v44[v218 + 16];
        v222 = *((_QWORD *)v220 + 3);
        v224 = *((_QWORD *)v220 + 4);
        v223 = *((_QWORD *)v220 + 5);
        v225 = v220[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v221, v222, v224, v223, v225);
        *((_QWORD *)v219 + 2) = v221;
        *((_QWORD *)v219 + 3) = v222;
        *((_QWORD *)v219 + 4) = v224;
        *((_QWORD *)v219 + 5) = v223;
        v219[48] = v225;
        v219[49] = v220[49];
        v226 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v227 = &v219[v226];
        v228 = &v220[v226];
        v12 = v710;
        v36(&v219[v226], &v220[v226], v710);
        v229 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v53 = &v227[v229];
        v54 = &v228[v229];
        v4 = v711;
        a3 = v712;
        v13 = v708;
        goto LABEL_173;
      case 2u:
        v692 = *(void (**)(uint64_t *, char *, uint64_t))(v709 + 16);
        v692(v15, v16, v12);
        v55 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *((_BYTE *)v15 + v55[13]) = v16[v55[13]];
        v56 = v55[14];
        v704 = v15;
        v57 = (char *)v15 + v56;
        v58 = &v16[v56];
        v59 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
        v60 = v55[15];
        v24 = (uint64_t *)((char *)v704 + v60);
        v25 = &v16[v60];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v61 = swift_getEnumCaseMultiPayload();
        if (v61 == 2)
        {
LABEL_84:
          *v24 = *(_QWORD *)v25;
          v24[1] = *((_QWORD *)v25 + 1);
          v24[2] = *((_QWORD *)v25 + 2);
          v24[3] = *((_QWORD *)v25 + 3);
          v24[4] = *((_QWORD *)v25 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v230 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v231 = (char *)v24 + v230;
          v232 = &v25[v230];
          *(_QWORD *)v231 = *(_QWORD *)&v25[v230];
          *((_QWORD *)v231 + 1) = *(_QWORD *)&v25[v230 + 8];
          v233 = *(_QWORD *)&v25[v230 + 16];
          v234 = *((_QWORD *)v232 + 3);
          v235 = v4;
          v236 = *((_QWORD *)v232 + 4);
          v237 = *((_QWORD *)v232 + 5);
          v238 = v232[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v233, v234, v236, v237, v238);
          *((_QWORD *)v231 + 2) = v233;
          *((_QWORD *)v231 + 3) = v234;
          *((_QWORD *)v231 + 4) = v236;
          *((_QWORD *)v231 + 5) = v237;
          v4 = v235;
          v13 = v708;
          v231[48] = v238;
          v12 = v710;
          v231[49] = v232[49];
          v239 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v240 = &v231[v239];
          v241 = &v232[v239];
          v692((uint64_t *)&v231[v239], &v232[v239], v710);
          v242 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v69 = &v240[v242];
          v70 = &v241[v242];
        }
        else if (v61 == 1)
        {
LABEL_18:
          *(_BYTE *)v24 = *v25;
          v62 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v63 = (char *)v24 + v62;
          v64 = &v25[v62];
          v692((_QWORD *)((char *)v24 + v62), v64, v12);
          v65 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v66 = &v63[v65];
          v67 = &v64[v65];
          v692((uint64_t *)v66, v67, v12);
          v68 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v69 = &v66[v68];
          v70 = &v67[v68];
        }
        else
        {
LABEL_85:
          *v24 = *(_QWORD *)v25;
          v24[1] = *((_QWORD *)v25 + 1);
          v24[2] = *((_QWORD *)v25 + 2);
          v24[3] = *((_QWORD *)v25 + 3);
          v24[4] = *((_QWORD *)v25 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v243 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v244 = (char *)v24 + v243;
          v245 = &v25[v243];
          *(_QWORD *)v244 = *(_QWORD *)&v25[v243];
          *((_QWORD *)v244 + 1) = *(_QWORD *)&v25[v243 + 8];
          v246 = *(_QWORD *)&v25[v243 + 16];
          v247 = *((_QWORD *)v245 + 3);
          v249 = *((_QWORD *)v245 + 4);
          v248 = *((_QWORD *)v245 + 5);
          v250 = v245[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v246, v247, v249, v248, v250);
          *((_QWORD *)v244 + 2) = v246;
          *((_QWORD *)v244 + 3) = v247;
          *((_QWORD *)v244 + 4) = v249;
          *((_QWORD *)v244 + 5) = v248;
          v244[48] = v250;
          v244[49] = v245[49];
          v251 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v252 = &v244[v251];
          v253 = &v245[v251];
          v12 = v710;
          v692((uint64_t *)&v244[v251], &v245[v251], v710);
          v254 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v69 = &v252[v254];
          v70 = &v253[v254];
          v4 = v711;
        }
        v255 = *((_QWORD *)v70 + 1);
        *(_QWORD *)v69 = *(_QWORD *)v70;
        *((_QWORD *)v69 + 1) = v255;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        a3 = v712;
        break;
      case 3u:
        v71 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v72 = swift_getEnumCaseMultiPayload();
        if (v72 == 2)
        {
          v292 = *((_QWORD *)v16 + 1);
          if (v292 >> 60 == 15)
          {
            *(_OWORD *)v15 = *(_OWORD *)v16;
          }
          else
          {
            v309 = v15;
            v310 = *(_QWORD *)v16;
            sub_1A2973524(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
            *v309 = v310;
            v309[1] = v292;
            v15 = v309;
          }
        }
        else if (v72 == 1)
        {
          *v15 = *(_QWORD *)v16;
          v15[1] = *((_QWORD *)v16 + 1);
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v72)
          {
            memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
            goto LABEL_133;
          }
          v73 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v15, v16, v73);
        }
        swift_storeEnumTagMultiPayload();
LABEL_133:
        v311 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F0);
        v312 = v311[12];
        v313 = (uint64_t *)((char *)v15 + v312);
        v314 = (uint64_t *)&v16[v312];
        v315 = v15;
        v316 = *v314;
        v317 = v314[1];
        v318 = v314[2];
        v319 = v314[3];
        v320 = v314[4];
        sub_1A2993E5C(*v314, v317, v318);
        *v313 = v316;
        v313[1] = v317;
        v313[2] = v318;
        v313[3] = v319;
        v313[4] = v320;
        v321 = v311[16];
        v322 = (uint64_t *)((char *)v315 + v321);
        v323 = &v16[v321];
        *v322 = *(_QWORD *)v323;
        v322[1] = *((_QWORD *)v323 + 1);
        v324 = v311[20];
        v325 = (char *)v315 + v324;
        v326 = &v16[v324];
        *(_QWORD *)v325 = *(_QWORD *)&v16[v324];
        *((_QWORD *)v325 + 1) = *(_QWORD *)&v16[v324 + 8];
        v327 = *(_QWORD *)&v16[v324 + 16];
        v328 = *(_QWORD *)&v16[v324 + 24];
        v329 = *(_QWORD *)&v16[v324 + 32];
        v330 = *((_QWORD *)v326 + 5);
        LOBYTE(v318) = v326[48];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A2993E10(v327, v328, v329, v330, v318);
        *((_QWORD *)v325 + 2) = v327;
        *((_QWORD *)v325 + 3) = v328;
        *((_QWORD *)v325 + 4) = v329;
        *((_QWORD *)v325 + 5) = v330;
        v325[48] = v318;
        v325[49] = v326[49];
        v331 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v332 = &v325[v331];
        v333 = &v326[v331];
        v12 = v710;
        (*(void (**)(char *, char *, uint64_t))(v709 + 16))(&v325[v331], &v326[v331], v710);
        v334 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v335 = &v332[v334];
        v336 = &v333[v334];
        v337 = *((_QWORD *)v336 + 1);
        *(_QWORD *)v335 = *(_QWORD *)v336;
        *((_QWORD *)v335 + 1) = v337;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        v4 = v711;
        goto LABEL_137;
      case 4u:
        v74 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v75 = swift_getEnumCaseMultiPayload();
        if (v75 == 2)
        {
          v293 = *((_QWORD *)v16 + 1);
          if (v293 >> 60 == 15)
          {
            *(_OWORD *)v15 = *(_OWORD *)v16;
          }
          else
          {
            v338 = *(_QWORD *)v16;
            sub_1A2973524(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
            *v15 = v338;
            v15[1] = v293;
          }
        }
        else if (v75 == 1)
        {
          *v15 = *(_QWORD *)v16;
          v15[1] = *((_QWORD *)v16 + 1);
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v75)
          {
            memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
            goto LABEL_136;
          }
          v76 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v15, v16, v76);
        }
        swift_storeEnumTagMultiPayload();
LABEL_136:
        v339 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E8);
        *(uint64_t *)((char *)v15 + v339[12]) = *(_QWORD *)&v16[v339[12]];
        *(uint64_t *)((char *)v15 + v339[16]) = *(_QWORD *)&v16[v339[16]];
        v340 = v339[20];
        v341 = (char *)v15 + v340;
        v342 = &v16[v340];
        *(_QWORD *)v341 = *(_QWORD *)&v16[v340];
        *((_QWORD *)v341 + 1) = *(_QWORD *)&v16[v340 + 8];
        v343 = *(_QWORD *)&v16[v340 + 16];
        v344 = *(_QWORD *)&v16[v340 + 24];
        v345 = *(_QWORD *)&v16[v340 + 32];
        v346 = *((_QWORD *)v342 + 5);
        v347 = v342[48];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A2993E10(v343, v344, v345, v346, v347);
        *((_QWORD *)v341 + 2) = v343;
        *((_QWORD *)v341 + 3) = v344;
        *((_QWORD *)v341 + 4) = v345;
        *((_QWORD *)v341 + 5) = v346;
        v341[48] = v347;
        v341[49] = v342[49];
        v348 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v349 = &v341[v348];
        v350 = &v342[v348];
        (*(void (**)(char *, char *, uint64_t))(v709 + 16))(&v341[v348], &v342[v348], v12);
        v351 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v352 = &v349[v351];
        v353 = &v350[v351];
        v354 = *((_QWORD *)v353 + 1);
        *(_QWORD *)v352 = *(_QWORD *)v353;
        *((_QWORD *)v352 + 1) = v354;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        v4 = v711;
LABEL_137:
        a3 = v712;
        v13 = v708;
        break;
      case 5u:
        v77 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v78 = swift_getEnumCaseMultiPayload();
        if (v78 == 2)
        {
          v294 = *((_QWORD *)v16 + 1);
          if (v294 >> 60 == 15)
          {
            *(_OWORD *)v15 = *(_OWORD *)v16;
          }
          else
          {
            v355 = *(_QWORD *)v16;
            sub_1A2973524(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
            *v15 = v355;
            v15[1] = v294;
          }
        }
        else if (v78 == 1)
        {
          *v15 = *(_QWORD *)v16;
          v15[1] = *((_QWORD *)v16 + 1);
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v78)
          {
            memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
            goto LABEL_140;
          }
          v79 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v15, v16, v79);
        }
        swift_storeEnumTagMultiPayload();
LABEL_140:
        v356 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
        *(uint64_t *)((char *)v15 + *(int *)(v356 + 48)) = *(_QWORD *)&v16[*(int *)(v356 + 48)];
        v357 = *(int *)(v356 + 64);
        v358 = (char *)v15 + v357;
        v359 = &v16[v357];
        v104 = *(void (**)(char *, char *, uint64_t))(v709 + 16);
        swift_bridgeObjectRetain();
        v104(v358, v359, v12);
        v360 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        v358[v360[13]] = v359[v360[13]];
        v361 = v360[14];
        v362 = &v358[v361];
        v363 = &v359[v361];
        v364 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v364 - 8) + 16))(v362, v363, v364);
        v365 = v360[15];
        v111 = &v358[v365];
        v112 = &v359[v365];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v366 = swift_getEnumCaseMultiPayload();
        if (v366 == 2)
        {
          *(_QWORD *)v111 = *(_QWORD *)v112;
          *((_QWORD *)v111 + 1) = *((_QWORD *)v112 + 1);
          *((_QWORD *)v111 + 2) = *((_QWORD *)v112 + 2);
          *((_QWORD *)v111 + 3) = *((_QWORD *)v112 + 3);
          *((_QWORD *)v111 + 4) = *((_QWORD *)v112 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v374 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v696 = v104;
          v375 = &v111[v374];
          v376 = &v112[v374];
          *(_QWORD *)v375 = *(_QWORD *)&v112[v374];
          *((_QWORD *)v375 + 1) = *(_QWORD *)&v112[v374 + 8];
          v377 = *(_QWORD *)&v112[v374 + 16];
          v378 = *((_QWORD *)v376 + 3);
          v379 = *((_QWORD *)v376 + 4);
          v380 = *((_QWORD *)v376 + 5);
          v381 = v376[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v377, v378, v379, v380, v381);
          *((_QWORD *)v375 + 2) = v377;
          *((_QWORD *)v375 + 3) = v378;
          *((_QWORD *)v375 + 4) = v379;
          *((_QWORD *)v375 + 5) = v380;
          v375[48] = v381;
          v12 = v710;
          v375[49] = v376[49];
          v382 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v383 = &v375[v382];
          v384 = &v376[v382];
          v13 = v708;
          v696(&v375[v382], v384, v710);
          v385 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v53 = &v383[v385];
          v54 = &v384[v385];
        }
        else
        {
          if (v366 != 1)
            goto LABEL_172;
          *v111 = *v112;
          v367 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v368 = &v111[v367];
          v369 = &v112[v367];
          v104(&v111[v367], v369, v12);
          v370 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v371 = &v368[v370];
          v372 = &v369[v370];
          v104(v371, v372, v12);
          v373 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v53 = &v371[v373];
          v54 = &v372[v373];
        }
        a3 = v712;
        goto LABEL_173;
      case 6u:
        v80 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v81 = swift_getEnumCaseMultiPayload();
        if (v81 == 2)
        {
          v295 = *((_QWORD *)v16 + 1);
          if (v295 >> 60 == 15)
          {
            *(_OWORD *)v15 = *(_OWORD *)v16;
          }
          else
          {
            v386 = *(_QWORD *)v16;
            sub_1A2973524(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
            *v15 = v386;
            v15[1] = v295;
          }
        }
        else if (v81 == 1)
        {
          *v15 = *(_QWORD *)v16;
          v15[1] = *((_QWORD *)v16 + 1);
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v81)
          {
            memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
            goto LABEL_148;
          }
          v82 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v15, v16, v82);
        }
        swift_storeEnumTagMultiPayload();
LABEL_148:
        v387 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
        *(uint64_t *)((char *)v15 + *(int *)(v387 + 48)) = *(_QWORD *)&v16[*(int *)(v387 + 48)];
        v388 = *(int *)(v387 + 64);
        v389 = (char *)v15 + v388;
        v390 = &v16[v388];
        v104 = *(void (**)(char *, char *, uint64_t))(v709 + 16);
        swift_bridgeObjectRetain();
        v104(v389, v390, v12);
        v391 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        v389[v391[13]] = v390[v391[13]];
        v392 = v391[14];
        v393 = &v389[v392];
        v394 = &v390[v392];
        v395 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v395 - 8) + 16))(v393, v394, v395);
        v396 = v391[15];
        v111 = &v389[v396];
        v112 = &v390[v396];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v397 = swift_getEnumCaseMultiPayload();
        if (v397 == 2)
        {
          *(_QWORD *)v111 = *(_QWORD *)v112;
          *((_QWORD *)v111 + 1) = *((_QWORD *)v112 + 1);
          *((_QWORD *)v111 + 2) = *((_QWORD *)v112 + 2);
          *((_QWORD *)v111 + 3) = *((_QWORD *)v112 + 3);
          *((_QWORD *)v111 + 4) = *((_QWORD *)v112 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v405 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v697 = v104;
          v406 = &v111[v405];
          v407 = &v112[v405];
          *(_QWORD *)v406 = *(_QWORD *)&v112[v405];
          *((_QWORD *)v406 + 1) = *(_QWORD *)&v112[v405 + 8];
          v408 = *(_QWORD *)&v112[v405 + 16];
          v409 = *((_QWORD *)v407 + 3);
          v410 = *((_QWORD *)v407 + 4);
          v411 = *((_QWORD *)v407 + 5);
          v412 = v407[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v408, v409, v410, v411, v412);
          *((_QWORD *)v406 + 2) = v408;
          *((_QWORD *)v406 + 3) = v409;
          *((_QWORD *)v406 + 4) = v410;
          *((_QWORD *)v406 + 5) = v411;
          v406[48] = v412;
          v12 = v710;
          v406[49] = v407[49];
          v413 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v414 = &v406[v413];
          v415 = &v407[v413];
          v13 = v708;
          v697(&v406[v413], v415, v710);
          v416 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v53 = &v414[v416];
          v54 = &v415[v416];
        }
        else
        {
          if (v397 != 1)
            goto LABEL_172;
          *v111 = *v112;
          v398 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v399 = &v111[v398];
          v400 = &v112[v398];
          v104(&v111[v398], v400, v12);
          v401 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v402 = &v399[v401];
          v403 = &v400[v401];
          v104(v402, v403, v12);
          v404 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v53 = &v402[v404];
          v54 = &v403[v404];
        }
        a3 = v712;
        goto LABEL_173;
      case 7u:
        v83 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v84 = swift_getEnumCaseMultiPayload();
        if (v84 == 2)
        {
          v296 = *((_QWORD *)v16 + 1);
          if (v296 >> 60 == 15)
          {
            *(_OWORD *)v15 = *(_OWORD *)v16;
          }
          else
          {
            v417 = *(_QWORD *)v16;
            sub_1A2973524(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
            *v15 = v417;
            v15[1] = v296;
          }
        }
        else if (v84 == 1)
        {
          *v15 = *(_QWORD *)v16;
          v15[1] = *((_QWORD *)v16 + 1);
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v84)
          {
            memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
            goto LABEL_156;
          }
          v85 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 16))(v15, v16, v85);
        }
        swift_storeEnumTagMultiPayload();
LABEL_156:
        v418 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D8);
        *(uint64_t *)((char *)v15 + *(int *)(v418 + 48)) = *(_QWORD *)&v16[*(int *)(v418 + 48)];
        *(uint64_t *)((char *)v15 + *(int *)(v418 + 64)) = *(_QWORD *)&v16[*(int *)(v418 + 64)];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        v86 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v87 = swift_getEnumCaseMultiPayload();
        if (v87 == 2)
        {
          v297 = *((_QWORD *)v16 + 1);
          if (v297 >> 60 == 15)
          {
            *(_OWORD *)v15 = *(_OWORD *)v16;
          }
          else
          {
            v419 = *(_QWORD *)v16;
            sub_1A2973524(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
            *v15 = v419;
            v15[1] = v297;
          }
        }
        else if (v87 == 1)
        {
          *v15 = *(_QWORD *)v16;
          v15[1] = *((_QWORD *)v16 + 1);
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v87)
          {
            memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
            goto LABEL_159;
          }
          v88 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v15, v16, v88);
        }
        swift_storeEnumTagMultiPayload();
LABEL_159:
        v420 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
        *(uint64_t *)((char *)v15 + v420[12]) = *(_QWORD *)&v16[v420[12]];
        *(uint64_t *)((char *)v15 + v420[16]) = *(_QWORD *)&v16[v420[16]];
        v421 = v420[20];
        v422 = (char *)v15 + v421;
        v423 = &v16[v421];
        v104 = *(void (**)(char *, char *, uint64_t))(v709 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v104(v422, v423, v12);
        v424 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        v422[v424[13]] = v423[v424[13]];
        v425 = v424[14];
        v426 = &v422[v425];
        v427 = &v423[v425];
        v428 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v428 - 8) + 16))(v426, v427, v428);
        v429 = v424[15];
        v111 = &v422[v429];
        v112 = &v423[v429];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v430 = swift_getEnumCaseMultiPayload();
        if (v430 == 2)
        {
          *(_QWORD *)v111 = *(_QWORD *)v112;
          *((_QWORD *)v111 + 1) = *((_QWORD *)v112 + 1);
          *((_QWORD *)v111 + 2) = *((_QWORD *)v112 + 2);
          *((_QWORD *)v111 + 3) = *((_QWORD *)v112 + 3);
          *((_QWORD *)v111 + 4) = *((_QWORD *)v112 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v438 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v698 = v104;
          v439 = &v111[v438];
          v440 = &v112[v438];
          *(_QWORD *)v439 = *(_QWORD *)&v112[v438];
          *((_QWORD *)v439 + 1) = *(_QWORD *)&v112[v438 + 8];
          v441 = *(_QWORD *)&v112[v438 + 16];
          v442 = *((_QWORD *)v440 + 3);
          v443 = *((_QWORD *)v440 + 4);
          v444 = *((_QWORD *)v440 + 5);
          v445 = v440[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v441, v442, v443, v444, v445);
          *((_QWORD *)v439 + 2) = v441;
          *((_QWORD *)v439 + 3) = v442;
          *((_QWORD *)v439 + 4) = v443;
          *((_QWORD *)v439 + 5) = v444;
          v439[48] = v445;
          v12 = v710;
          v439[49] = v440[49];
          v446 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v447 = &v439[v446];
          v448 = &v440[v446];
          v13 = v708;
          v698(&v439[v446], v448, v710);
          v449 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v53 = &v447[v449];
          v54 = &v448[v449];
        }
        else
        {
          if (v430 != 1)
            goto LABEL_172;
          *v111 = *v112;
          v431 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v432 = &v111[v431];
          v433 = &v112[v431];
          v104(&v111[v431], v433, v12);
          v434 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v435 = &v432[v434];
          v436 = &v433[v434];
          v104(v435, v436, v12);
          v437 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v53 = &v435[v437];
          v54 = &v436[v437];
        }
        a3 = v712;
        goto LABEL_173;
      case 9u:
        v89 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v90 = swift_getEnumCaseMultiPayload();
        if (v90 == 2)
        {
          v298 = *((_QWORD *)v16 + 1);
          if (v298 >> 60 == 15)
          {
            *(_OWORD *)v15 = *(_OWORD *)v16;
          }
          else
          {
            v450 = *(_QWORD *)v16;
            sub_1A2973524(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
            *v15 = v450;
            v15[1] = v298;
          }
        }
        else if (v90 == 1)
        {
          *v15 = *(_QWORD *)v16;
          v15[1] = *((_QWORD *)v16 + 1);
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v90)
          {
            memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
            goto LABEL_167;
          }
          v91 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 16))(v15, v16, v91);
        }
        swift_storeEnumTagMultiPayload();
LABEL_167:
        v451 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
        *(uint64_t *)((char *)v15 + v451[12]) = *(_QWORD *)&v16[v451[12]];
        *(uint64_t *)((char *)v15 + v451[16]) = *(_QWORD *)&v16[v451[16]];
        v452 = v451[20];
        v453 = (char *)v15 + v452;
        v454 = &v16[v452];
        v104 = *(void (**)(char *, char *, uint64_t))(v709 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v104(v453, v454, v12);
        v455 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        v453[v455[13]] = v454[v455[13]];
        v456 = v455[14];
        v457 = &v453[v456];
        v458 = &v454[v456];
        v459 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v459 - 8) + 16))(v457, v458, v459);
        v460 = v455[15];
        v111 = &v453[v460];
        v112 = &v454[v460];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v461 = swift_getEnumCaseMultiPayload();
        if (v461 == 2)
        {
          *(_QWORD *)v111 = *(_QWORD *)v112;
          *((_QWORD *)v111 + 1) = *((_QWORD *)v112 + 1);
          *((_QWORD *)v111 + 2) = *((_QWORD *)v112 + 2);
          *((_QWORD *)v111 + 3) = *((_QWORD *)v112 + 3);
          *((_QWORD *)v111 + 4) = *((_QWORD *)v112 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v469 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v699 = v104;
          v470 = &v111[v469];
          v471 = &v112[v469];
          *(_QWORD *)v470 = *(_QWORD *)&v112[v469];
          *((_QWORD *)v470 + 1) = *(_QWORD *)&v112[v469 + 8];
          v472 = *(_QWORD *)&v112[v469 + 16];
          v473 = *((_QWORD *)v471 + 3);
          v474 = *((_QWORD *)v471 + 4);
          v475 = *((_QWORD *)v471 + 5);
          v476 = v471[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v472, v473, v474, v475, v476);
          *((_QWORD *)v470 + 2) = v472;
          *((_QWORD *)v470 + 3) = v473;
          *((_QWORD *)v470 + 4) = v474;
          *((_QWORD *)v470 + 5) = v475;
          v470[48] = v476;
          v12 = v710;
          v470[49] = v471[49];
          v477 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v478 = &v470[v477];
          v479 = &v471[v477];
          v13 = v708;
          v699(&v470[v477], v479, v710);
          v480 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v53 = &v478[v480];
          v54 = &v479[v480];
        }
        else
        {
          if (v461 != 1)
            goto LABEL_172;
          *v111 = *v112;
          v462 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v463 = &v111[v462];
          v464 = &v112[v462];
          v104(&v111[v462], v464, v12);
          v465 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v466 = &v463[v465];
          v467 = &v464[v465];
          v104(v466, v467, v12);
          v468 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v53 = &v466[v468];
          v54 = &v467[v468];
        }
        a3 = v712;
        goto LABEL_173;
      case 0xAu:
        v92 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v93 = swift_getEnumCaseMultiPayload();
        if (v93 == 2)
        {
          v299 = *((_QWORD *)v16 + 1);
          if (v299 >> 60 == 15)
          {
            *(_OWORD *)v15 = *(_OWORD *)v16;
          }
          else
          {
            v650 = *(_QWORD *)v16;
            sub_1A2973524(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
            *v15 = v650;
            v15[1] = v299;
          }
        }
        else if (v93 == 1)
        {
          *v15 = *(_QWORD *)v16;
          v15[1] = *((_QWORD *)v16 + 1);
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v93)
          {
            memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
            goto LABEL_240;
          }
          v94 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(v15, v16, v94);
        }
        swift_storeEnumTagMultiPayload();
LABEL_240:
        v651 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C8);
        *(uint64_t *)((char *)v15 + *(int *)(v651 + 48)) = *(_QWORD *)&v16[*(int *)(v651 + 48)];
        *(uint64_t *)((char *)v15 + *(int *)(v651 + 64)) = *(_QWORD *)&v16[*(int *)(v651 + 64)];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 0xBu:
        *v15 = *(_QWORD *)v16;
        v15[1] = *((_QWORD *)v16 + 1);
        v15[2] = *((_QWORD *)v16 + 2);
        v15[3] = *((_QWORD *)v16 + 3);
        v95 = v15;
        v96 = *((_QWORD *)v16 + 4);
        v97 = *((_QWORD *)v16 + 5);
        v98 = v16[48];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        v95[4] = v96;
        v95[5] = v97;
        *((_BYTE *)v95 + 48) = v98;
        v99 = *((_QWORD *)v16 + 7);
        v100 = *((_QWORD *)v16 + 8);
        sub_1A2973524(v99, v100);
        v95[7] = v99;
        v95[8] = v100;
        v101 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B8) + 48);
        v102 = (char *)v95 + v101;
        v103 = &v16[v101];
        v104 = *(void (**)(char *, char *, uint64_t))(v709 + 16);
        v104(v102, &v16[v101], v12);
        v105 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        v102[v105[13]] = v103[v105[13]];
        v106 = v105[14];
        v107 = &v102[v106];
        v108 = &v103[v106];
        v109 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v109 - 8) + 16))(v107, v108, v109);
        v110 = v105[15];
        v111 = &v102[v110];
        v112 = &v103[v110];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v113 = swift_getEnumCaseMultiPayload();
        if (v113 == 2)
        {
          *(_QWORD *)v111 = *(_QWORD *)v112;
          *((_QWORD *)v111 + 1) = *((_QWORD *)v112 + 1);
          *((_QWORD *)v111 + 2) = *((_QWORD *)v112 + 2);
          *((_QWORD *)v111 + 3) = *((_QWORD *)v112 + 3);
          *((_QWORD *)v111 + 4) = *((_QWORD *)v112 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v256 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v693 = v104;
          v257 = &v111[v256];
          v258 = &v112[v256];
          *(_QWORD *)v257 = *(_QWORD *)&v112[v256];
          *((_QWORD *)v257 + 1) = *(_QWORD *)&v112[v256 + 8];
          v259 = *(_QWORD *)&v112[v256 + 16];
          v260 = *((_QWORD *)v258 + 3);
          v261 = *((_QWORD *)v258 + 4);
          v262 = *((_QWORD *)v258 + 5);
          v263 = v258[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v259, v260, v261, v262, v263);
          *((_QWORD *)v257 + 2) = v259;
          *((_QWORD *)v257 + 3) = v260;
          *((_QWORD *)v257 + 4) = v261;
          *((_QWORD *)v257 + 5) = v262;
          v257[48] = v263;
          v12 = v710;
          v257[49] = v258[49];
          v264 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v265 = &v257[v264];
          v266 = &v258[v264];
          v13 = v708;
          v693(&v257[v264], v266, v710);
          v267 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v53 = &v265[v267];
          v54 = &v266[v267];
          goto LABEL_88;
        }
        if (v113 == 1)
        {
          *v111 = *v112;
          v114 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v115 = &v111[v114];
          v116 = &v112[v114];
          v104(&v111[v114], v116, v12);
          v117 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v118 = &v115[v117];
          v119 = &v116[v117];
          v104(v118, v119, v12);
          v120 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v53 = &v118[v120];
          v54 = &v119[v120];
LABEL_88:
          a3 = v712;
          goto LABEL_173;
        }
LABEL_172:
        v700 = v104;
        *(_QWORD *)v111 = *(_QWORD *)v112;
        *((_QWORD *)v111 + 1) = *((_QWORD *)v112 + 1);
        *((_QWORD *)v111 + 2) = *((_QWORD *)v112 + 2);
        *((_QWORD *)v111 + 3) = *((_QWORD *)v112 + 3);
        *((_QWORD *)v111 + 4) = *((_QWORD *)v112 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v481 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v482 = &v111[v481];
        v483 = &v112[v481];
        *(_QWORD *)v482 = *(_QWORD *)&v112[v481];
        *((_QWORD *)v482 + 1) = *(_QWORD *)&v112[v481 + 8];
        v484 = *(_QWORD *)&v112[v481 + 16];
        v485 = *((_QWORD *)v483 + 3);
        v486 = *((_QWORD *)v483 + 4);
        v487 = *((_QWORD *)v483 + 5);
        v488 = v483[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v484, v485, v486, v487, v488);
        *((_QWORD *)v482 + 2) = v484;
        *((_QWORD *)v482 + 3) = v485;
        *((_QWORD *)v482 + 4) = v486;
        *((_QWORD *)v482 + 5) = v487;
        v482[48] = v488;
        v482[49] = v483[49];
        v489 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v490 = &v482[v489];
        v491 = &v483[v489];
        v12 = v710;
        v700(&v482[v489], &v483[v489], v710);
        v492 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v53 = &v490[v492];
        v54 = &v491[v492];
        a3 = v712;
        v13 = v708;
        goto LABEL_173;
      case 0xCu:
        *v15 = *(_QWORD *)v16;
        v15[1] = *((_QWORD *)v16 + 1);
        v15[2] = *((_QWORD *)v16 + 2);
        v15[3] = *((_QWORD *)v16 + 3);
        v122 = *((_QWORD *)v16 + 4);
        v121 = *((_QWORD *)v16 + 5);
        v123 = v16[48];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        v15[4] = v122;
        v15[5] = v121;
        *((_BYTE *)v15 + 48) = v123;
        a3 = v712;
        v124 = *((_QWORD *)v16 + 7);
        v125 = *((_QWORD *)v16 + 8);
        sub_1A2973524(v124, v125);
        v15[7] = v124;
        v15[8] = v125;
        swift_storeEnumTagMultiPayload();
        break;
      case 0xDu:
        *v15 = *(_QWORD *)v16;
        v15[1] = *((_QWORD *)v16 + 1);
        v15[2] = *((_QWORD *)v16 + 2);
        v15[3] = *((_QWORD *)v16 + 3);
        v126 = v15;
        v127 = *((_QWORD *)v16 + 4);
        v128 = *((_QWORD *)v16 + 5);
        v129 = v16[48];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        v126[4] = v127;
        v126[5] = v128;
        *((_BYTE *)v126 + 48) = v129;
        v130 = *((_QWORD *)v16 + 7);
        v131 = *((_QWORD *)v16 + 8);
        sub_1A2973524(v130, v131);
        v126[7] = v130;
        v126[8] = v131;
        v132 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A8) + 48);
        v133 = (char *)v126 + v132;
        v134 = &v16[v132];
        v135 = *(void (**)(char *, char *, uint64_t))(v709 + 16);
        v135(v133, &v16[v132], v12);
        v136 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
        v133[v136[13]] = v134[v136[13]];
        v137 = v136[14];
        v138 = &v133[v137];
        v139 = &v134[v137];
        v140 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 16))(v138, v139, v140);
        v141 = v136[15];
        v142 = &v133[v141];
        v143 = &v134[v141];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
        v144 = swift_getEnumCaseMultiPayload();
        if (v144 == 2)
        {
          *(_QWORD *)v142 = *(_QWORD *)v143;
          *((_QWORD *)v142 + 1) = *((_QWORD *)v143 + 1);
          *((_QWORD *)v142 + 2) = *((_QWORD *)v143 + 2);
          *((_QWORD *)v142 + 3) = *((_QWORD *)v143 + 3);
          *((_QWORD *)v142 + 4) = *((_QWORD *)v143 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v268 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
          v694 = v135;
          v269 = &v142[v268];
          v270 = &v143[v268];
          *(_QWORD *)v269 = *(_QWORD *)&v143[v268];
          *((_QWORD *)v269 + 1) = *(_QWORD *)&v143[v268 + 8];
          v271 = *(_QWORD *)&v143[v268 + 16];
          v272 = *((_QWORD *)v270 + 3);
          v273 = *((_QWORD *)v270 + 4);
          v274 = *((_QWORD *)v270 + 5);
          v275 = v270[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v271, v272, v273, v274, v275);
          *((_QWORD *)v269 + 2) = v271;
          *((_QWORD *)v269 + 3) = v272;
          *((_QWORD *)v269 + 4) = v273;
          *((_QWORD *)v269 + 5) = v274;
          v269[48] = v275;
          v12 = v710;
          v269[49] = v270[49];
          v276 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v277 = &v269[v276];
          v278 = &v270[v276];
          v13 = v708;
          v694(&v269[v276], v278, v710);
          v279 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v53 = &v277[v279];
          v54 = &v278[v279];
          goto LABEL_91;
        }
        if (v144 == 1)
        {
          *v142 = *v143;
          v145 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A8) + 48);
          v146 = &v142[v145];
          v147 = &v143[v145];
          v135(&v142[v145], v147, v12);
          v148 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B0) + 52);
          v149 = &v146[v148];
          v150 = &v147[v148];
          v135(v149, v150, v12);
          v151 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v53 = &v149[v151];
          v54 = &v150[v151];
LABEL_91:
          a3 = v712;
          goto LABEL_173;
        }
        v695 = v135;
        *(_QWORD *)v142 = *(_QWORD *)v143;
        *((_QWORD *)v142 + 1) = *((_QWORD *)v143 + 1);
        *((_QWORD *)v142 + 2) = *((_QWORD *)v143 + 2);
        *((_QWORD *)v142 + 3) = *((_QWORD *)v143 + 3);
        *((_QWORD *)v142 + 4) = *((_QWORD *)v143 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v280 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
        v281 = &v142[v280];
        v282 = &v143[v280];
        *(_QWORD *)v281 = *(_QWORD *)&v143[v280];
        *((_QWORD *)v281 + 1) = *(_QWORD *)&v143[v280 + 8];
        v283 = *(_QWORD *)&v143[v280 + 16];
        v284 = *((_QWORD *)v282 + 3);
        v285 = *((_QWORD *)v282 + 4);
        v286 = *((_QWORD *)v282 + 5);
        v287 = v282[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v283, v284, v285, v286, v287);
        *((_QWORD *)v281 + 2) = v283;
        *((_QWORD *)v281 + 3) = v284;
        *((_QWORD *)v281 + 4) = v285;
        *((_QWORD *)v281 + 5) = v286;
        v281[48] = v287;
        v281[49] = v282[49];
        v288 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v289 = &v281[v288];
        v290 = &v282[v288];
        v12 = v710;
        v695(&v281[v288], &v282[v288], v710);
        v291 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v53 = &v289[v291];
        v54 = &v290[v291];
        a3 = v712;
        v13 = v708;
LABEL_173:
        v493 = *((_QWORD *)v54 + 1);
        *(_QWORD *)v53 = *(_QWORD *)v54;
        *((_QWORD *)v53 + 1) = v493;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        break;
      case 0xEu:
        if (*((_QWORD *)v16 + 3) >= 2uLL)
        {
          *v15 = *(_QWORD *)v16;
          v15[1] = *((_QWORD *)v16 + 1);
          v15[2] = *((_QWORD *)v16 + 2);
          v15[3] = *((_QWORD *)v16 + 3);
          v175 = v15;
          v176 = *((_QWORD *)v16 + 4);
          v177 = *((_QWORD *)v16 + 5);
          v178 = v16[48];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1A297208C();
          v175[4] = v176;
          v175[5] = v177;
          v15 = v175;
          *((_BYTE *)v175 + 48) = v178;
          v179 = *((_QWORD *)v16 + 7);
          v180 = *((_QWORD *)v16 + 8);
          sub_1A2973524(v179, v180);
          v175[7] = v179;
          v175[8] = v180;
        }
        else
        {
          *(_OWORD *)v15 = *(_OWORD *)v16;
          v152 = *((_OWORD *)v16 + 1);
          v153 = *((_OWORD *)v16 + 2);
          v154 = *((_OWORD *)v16 + 3);
          v15[8] = *((_QWORD *)v16 + 8);
          *((_OWORD *)v15 + 2) = v153;
          *((_OWORD *)v15 + 3) = v154;
          *((_OWORD *)v15 + 1) = v152;
        }
        if (*((_QWORD *)v16 + 12) >= 2uLL)
        {
          v15[9] = *((_QWORD *)v16 + 9);
          v15[10] = *((_QWORD *)v16 + 10);
          v15[11] = *((_QWORD *)v16 + 11);
          v15[12] = *((_QWORD *)v16 + 12);
          v184 = v15;
          v185 = *((_QWORD *)v16 + 13);
          v186 = *((_QWORD *)v16 + 14);
          v187 = v16[120];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1A297208C();
          v184[13] = v185;
          v184[14] = v186;
          *((_BYTE *)v184 + 120) = v187;
          v188 = *((_QWORD *)v16 + 16);
          v189 = *((_QWORD *)v16 + 17);
          sub_1A2973524(v188, v189);
          v184[16] = v188;
          v184[17] = v189;
        }
        else
        {
          *(_OWORD *)(v15 + 9) = *(_OWORD *)(v16 + 72);
          v181 = *(_OWORD *)(v16 + 88);
          v182 = *(_OWORD *)(v16 + 104);
          v183 = *(_OWORD *)(v16 + 120);
          v15[17] = *((_QWORD *)v16 + 17);
          *(_OWORD *)(v15 + 13) = v182;
          *(_OWORD *)(v15 + 15) = v183;
          *(_OWORD *)(v15 + 11) = v181;
        }
        goto LABEL_68;
      case 0xFu:
        v155 = v13;
        v156 = sub_1A2AE30C4();
        v157 = *(_QWORD *)(v156 - 8);
        v158 = *(void (**)(uint64_t *, char *, uint64_t))(v157 + 16);
        v158(v15, v16, v156);
        v159 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
        v160 = v159[5];
        v161 = (char *)v15 + v160;
        v162 = &v16[v160];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v157 + 48))(&v16[v160], 1, v156))
        {
          v163 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
          memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
        }
        else
        {
          v158((uint64_t *)v161, v162, v156);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v157 + 56))(v161, 0, 1, v156);
        }
        *((_BYTE *)v15 + v159[6]) = v16[v159[6]];
        v190 = v159[7];
        v191 = (uint64_t *)((char *)v15 + v190);
        v192 = &v16[v190];
        v193 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
        v194 = *(_QWORD *)(v193 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v194 + 48))(v192, 1, v193))
        {
          v13 = v155;
          v195 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
          memcpy(v191, v192, *(_QWORD *)(*(_QWORD *)(v195 - 8) + 64));
        }
        else
        {
          v202 = type metadata accessor for SFAirDropReceive.Failure();
          v203 = *(_QWORD *)(v202 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v203 + 48))(v192, 1, v202))
          {
            memcpy(v191, v192, *(_QWORD *)(v194 + 64));
          }
          else
          {
            v300 = swift_getEnumCaseMultiPayload();
            if (v300 == 1)
            {
              *v191 = *(_QWORD *)v192;
              v191[1] = *((_QWORD *)v192 + 1);
              v191[2] = *((_QWORD *)v192 + 2);
              v191[3] = *((_QWORD *)v192 + 3);
              v191[4] = *((_QWORD *)v192 + 4);
              v191[5] = *((_QWORD *)v192 + 5);
              v191[6] = *((_QWORD *)v192 + 6);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_storeEnumTagMultiPayload();
            }
            else if (v300)
            {
              memcpy(v191, v192, *(_QWORD *)(v203 + 64));
            }
            else
            {
              *v191 = *(_QWORD *)v192;
              v191[1] = *((_QWORD *)v192 + 1);
              swift_bridgeObjectRetain();
              v301 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
              v701 = (char *)v191 + v301;
              v706 = v15;
              v302 = &v192[v301];
              v303 = sub_1A2AE2F44();
              v304 = v302;
              v15 = v706;
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v303 - 8) + 16))(v701, v304, v303);
              swift_storeEnumTagMultiPayload();
            }
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v203 + 56))(v191, 0, 1, v202);
          }
          v13 = v155;
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v194 + 56))(v191, 0, 1, v193);
        }
        v661 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A0);
        v662 = v661[12];
        v663 = (uint64_t *)((char *)v15 + v662);
        v664 = &v16[v662];
        v665 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v666 = swift_getEnumCaseMultiPayload();
        if (v666 == 2)
        {
          v707 = v15;
          v668 = *((_QWORD *)v664 + 1);
          if (v668 >> 60 == 15)
          {
            *(_OWORD *)v663 = *(_OWORD *)v664;
          }
          else
          {
            v669 = *(_QWORD *)v664;
            sub_1A2973524(*(_QWORD *)v664, *((_QWORD *)v664 + 1));
            *v663 = v669;
            v663[1] = v668;
          }
          swift_storeEnumTagMultiPayload();
          v4 = v711;
          a3 = v712;
          v12 = v710;
          v15 = v707;
        }
        else
        {
          if (v666 == 1)
          {
            *v663 = *(_QWORD *)v664;
            v663[1] = *((_QWORD *)v664 + 1);
            swift_bridgeObjectRetain();
            swift_storeEnumTagMultiPayload();
          }
          else if (v666)
          {
            memcpy(v663, v664, *(_QWORD *)(*(_QWORD *)(v665 - 8) + 64));
          }
          else
          {
            v667 = sub_1A2AE2F44();
            (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v667 - 8) + 16))(v663, v664, v667);
            swift_storeEnumTagMultiPayload();
          }
          v4 = v711;
          a3 = v712;
          v12 = v710;
        }
        v670 = v661[16];
        v671 = (uint64_t *)((char *)v15 + v670);
        v672 = &v16[v670];
        *v671 = *(_QWORD *)v672;
        v671[1] = *((_QWORD *)v672 + 1);
        *(uint64_t *)((char *)v15 + v661[20]) = *(_QWORD *)&v16[v661[20]];
        *(uint64_t *)((char *)v15 + v661[24]) = *(_QWORD *)&v16[v661[24]];
        *(uint64_t *)((char *)v15 + v661[28]) = *(_QWORD *)&v16[v661[28]];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 0x10u:
        v164 = v15;
        v165 = v13;
        v166 = v4;
        v167 = sub_1A2AE30C4();
        v168 = *(_QWORD *)(v167 - 8);
        v169 = *(void (**)(uint64_t *, char *, uint64_t))(v168 + 16);
        v169(v164, v16, v167);
        v170 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
        v171 = v170[5];
        v705 = v164;
        v172 = (char *)v164 + v171;
        v173 = &v16[v171];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v168 + 48))(&v16[v171], 1, v167))
        {
          v174 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
          memcpy(v172, v173, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
        }
        else
        {
          v169((uint64_t *)v172, v173, v167);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v168 + 56))(v172, 0, 1, v167);
        }
        *((_BYTE *)v705 + v170[6]) = v16[v170[6]];
        v196 = v170[7];
        v197 = (uint64_t *)((char *)v705 + v196);
        v198 = &v16[v196];
        v199 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
        v200 = *(_QWORD *)(v199 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v200 + 48))(v198, 1, v199))
        {
          v13 = v165;
          v201 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
          memcpy(v197, v198, *(_QWORD *)(*(_QWORD *)(v201 - 8) + 64));
          v12 = v710;
        }
        else
        {
          v204 = type metadata accessor for SFAirDropReceive.Failure();
          v205 = *(_QWORD *)(v204 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v205 + 48))(v198, 1, v204))
          {
            memcpy(v197, v198, *(_QWORD *)(v200 + 64));
            v12 = v710;
          }
          else
          {
            v305 = swift_getEnumCaseMultiPayload();
            if (v305 == 1)
            {
              *v197 = *(_QWORD *)v198;
              v197[1] = *((_QWORD *)v198 + 1);
              v197[2] = *((_QWORD *)v198 + 2);
              v197[3] = *((_QWORD *)v198 + 3);
              v197[4] = *((_QWORD *)v198 + 4);
              v197[5] = *((_QWORD *)v198 + 5);
              v197[6] = *((_QWORD *)v198 + 6);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_storeEnumTagMultiPayload();
            }
            else if (v305)
            {
              memcpy(v197, v198, *(_QWORD *)(v205 + 64));
            }
            else
            {
              *v197 = *(_QWORD *)v198;
              v197[1] = *((_QWORD *)v198 + 1);
              swift_bridgeObjectRetain();
              v306 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
              v702 = (char *)v197 + v306;
              v307 = &v198[v306];
              v308 = sub_1A2AE2F44();
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v308 - 8) + 16))(v702, v307, v308);
              swift_storeEnumTagMultiPayload();
            }
            v12 = v710;
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v205 + 56))(v197, 0, 1, v204);
          }
          v13 = v165;
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v200 + 56))(v197, 0, 1, v199);
        }
        v673 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B398) + 48);
        v674 = (uint64_t *)((char *)v705 + v673);
        v675 = &v16[v673];
        v676 = type metadata accessor for SFAirDropReceive.Failure();
        v677 = swift_getEnumCaseMultiPayload();
        v4 = v166;
        if (v677 == 1)
        {
          *v674 = *(_QWORD *)v675;
          v674[1] = *((_QWORD *)v675 + 1);
          v674[2] = *((_QWORD *)v675 + 2);
          v674[3] = *((_QWORD *)v675 + 3);
          v674[4] = *((_QWORD *)v675 + 4);
          v674[5] = *((_QWORD *)v675 + 5);
          v674[6] = *((_QWORD *)v675 + 6);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
        }
        else if (v677)
        {
          memcpy(v674, v675, *(_QWORD *)(*(_QWORD *)(v676 - 8) + 64));
        }
        else
        {
          *v674 = *(_QWORD *)v675;
          v674[1] = *((_QWORD *)v675 + 1);
          swift_bridgeObjectRetain();
          v678 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
          v679 = (char *)v674 + v678;
          v680 = &v675[v678];
          v681 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v681 - 8) + 16))(v679, v680, v681);
          swift_storeEnumTagMultiPayload();
        }
LABEL_68:
        a3 = v712;
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        break;
    }
  }
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)v4 + a3[7]);
  v494 = a3[8];
  v495 = (char *)a1 + v494;
  v496 = (char *)v4 + v494;
  v13((char *)a1 + v494, (char *)v4 + v494, v12);
  v497 = (int *)type metadata accessor for SFAirDropReceive.AskRequest(0);
  v498 = v497[5];
  v499 = &v495[v498];
  v500 = &v496[v498];
  v501 = *(_QWORD *)v500;
  v502 = *((_QWORD *)v500 + 1);
  v503 = v500[16];
  sub_1A2993E70(*(_QWORD *)v500, v502, v503);
  v504 = *(_QWORD *)v499;
  v505 = *((_QWORD *)v499 + 1);
  *(_QWORD *)v499 = v501;
  *((_QWORD *)v499 + 1) = v502;
  v506 = v499[16];
  v499[16] = v503;
  sub_1A2994E20(v504, v505, v506);
  *(_QWORD *)&v495[v497[6]] = *(_QWORD *)&v496[v497[6]];
  v495[v497[7]] = v496[v497[7]];
  v495[v497[8]] = v496[v497[8]];
  v495[v497[9]] = v496[v497[9]];
  v507 = v497[10];
  v508 = &v495[v507];
  v509 = &v496[v507];
  *(_QWORD *)v508 = *(_QWORD *)v509;
  *((_QWORD *)v508 + 1) = *((_QWORD *)v509 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v510 = v497[11];
  v511 = &v495[v510];
  v512 = &v496[v510];
  *(_QWORD *)v511 = *(_QWORD *)v512;
  *((_QWORD *)v511 + 1) = *((_QWORD *)v512 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v513 = v497[12];
  v514 = &v495[v513];
  v515 = &v496[v513];
  *(_QWORD *)v514 = *(_QWORD *)v515;
  *((_QWORD *)v514 + 1) = *((_QWORD *)v515 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v516 = v497[13];
  v517 = &v495[v516];
  v518 = &v496[v516];
  *(_QWORD *)v517 = *(_QWORD *)v518;
  *((_QWORD *)v517 + 1) = *((_QWORD *)v518 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v519 = v497[14];
  v520 = &v495[v519];
  v521 = &v496[v519];
  *(_QWORD *)v520 = *(_QWORD *)v521;
  *((_QWORD *)v520 + 1) = *((_QWORD *)v521 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v522 = v497[15];
  v523 = &v495[v522];
  v524 = &v496[v522];
  *(_QWORD *)v523 = *(_QWORD *)v524;
  *((_QWORD *)v523 + 1) = *((_QWORD *)v524 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v525 = v497[16];
  v526 = &v495[v525];
  v527 = &v496[v525];
  *(_QWORD *)v526 = *(_QWORD *)v527;
  *((_QWORD *)v526 + 1) = *((_QWORD *)v527 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v528 = v497[17];
  v529 = &v495[v528];
  v530 = &v496[v528];
  *(_QWORD *)v529 = *(_QWORD *)v530;
  *((_QWORD *)v529 + 1) = *((_QWORD *)v530 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v531 = v497[18];
  v532 = &v495[v531];
  v533 = &v496[v531];
  *(_QWORD *)v532 = *(_QWORD *)v533;
  *((_QWORD *)v532 + 1) = *((_QWORD *)v533 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v534 = v497[19];
  v535 = &v495[v534];
  v536 = &v496[v534];
  *(_QWORD *)v535 = *(_QWORD *)v536;
  *((_QWORD *)v535 + 1) = *((_QWORD *)v536 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v537 = v497[20];
  v538 = *(void **)&v495[v537];
  v539 = *(void **)&v496[v537];
  *(_QWORD *)&v495[v537] = v539;
  v540 = v539;

  v541 = v497[21];
  v542 = *(void **)&v495[v541];
  v543 = *(void **)&v496[v541];
  *(_QWORD *)&v495[v541] = v543;
  v544 = v543;

  v545 = v497[22];
  v546 = *(void **)&v495[v545];
  v547 = *(void **)&v496[v545];
  *(_QWORD *)&v495[v545] = v547;
  v548 = v547;

  v549 = v497[23];
  v550 = &v495[v549];
  v551 = &v496[v549];
  *(_QWORD *)v550 = *(_QWORD *)v551;
  *((_QWORD *)v550 + 1) = *((_QWORD *)v551 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v552 = v497[24];
  v553 = &v495[v552];
  v554 = &v496[v552];
  v555 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
  v556 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v555 - 8) + 48);
  LODWORD(v501) = v556(v553, 1, v555);
  v557 = v556(v554, 1, v555);
  if ((_DWORD)v501)
  {
    if (!v557)
    {
      v558 = (char *)&loc_1A299B98C + 4 * word_1A2AFB22C[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    goto LABEL_179;
  }
  if (v557)
  {
    sub_1A297DA3C((uint64_t)v553, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
LABEL_179:
    v559 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D8);
    memcpy(v553, v554, *(_QWORD *)(*(_QWORD *)(v559 - 8) + 64));
    goto LABEL_180;
  }
  if (a1 != v711)
  {
    sub_1A297DA3C((uint64_t)v553, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
    v582 = (char *)&loc_1A299BBCC + 4 * byte_1A2AFB23A[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
LABEL_180:
  *(_QWORD *)&v495[v497[25]] = *(_QWORD *)&v496[v497[25]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v495[v497[26]] = *(_QWORD *)&v496[v497[26]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v560 = v497[27];
  v561 = (uint64_t *)&v495[v560];
  v562 = &v496[v560];
  v563 = *(_QWORD *)&v495[v560 + 8];
  v564 = *((_QWORD *)v562 + 1);
  if (v563 >> 60 == 15)
  {
    v566 = v711;
    v565 = v712;
    if (v564 >> 60 != 15)
    {
      v567 = *(_QWORD *)v562;
      sub_1A2973524(*(_QWORD *)v562, *((_QWORD *)v562 + 1));
      *v561 = v567;
      v561[1] = v564;
      goto LABEL_187;
    }
    goto LABEL_185;
  }
  v566 = v711;
  v565 = v712;
  if (v564 >> 60 == 15)
  {
    sub_1A299C970((uint64_t)v561);
LABEL_185:
    *(_OWORD *)v561 = *(_OWORD *)v562;
    goto LABEL_187;
  }
  v568 = *(_QWORD *)v562;
  sub_1A2973524(*(_QWORD *)v562, *((_QWORD *)v562 + 1));
  v569 = *v561;
  v570 = v561[1];
  *v561 = v568;
  v561[1] = v564;
  sub_1A29736C4(v569, v570);
LABEL_187:
  v571 = v565[9];
  v572 = (_QWORD *)((char *)a1 + v571);
  v573 = (_QWORD *)((char *)v566 + v571);
  v574 = type metadata accessor for SFAirDropReceive.AskResponse();
  v575 = *(_QWORD *)(v574 - 8);
  v576 = *(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v575 + 48);
  v577 = v576(v572, 1, v574);
  v578 = v576(v573, 1, v574);
  if (v577)
  {
    if (!v578)
    {
      v579 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
      v580 = *(_QWORD *)(v579 - 8);
      if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v580 + 48))(v573, 3, v579))
      {
        memcpy(v572, v573, *(_QWORD *)(v575 + 64));
LABEL_225:
        v565 = v712;
        (*(void (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(v575 + 56))(v572, 0, 1, v574);
        goto LABEL_226;
      }
      v591 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v592 = swift_getEnumCaseMultiPayload();
      if (v592 == 2)
      {
        v594 = v573[1];
        if (v594 >> 60 == 15)
        {
          *(_OWORD *)v572 = *(_OWORD *)v573;
        }
        else
        {
          v598 = *v573;
          sub_1A2973524(*v573, v573[1]);
          *v572 = v598;
          v572[1] = v594;
        }
      }
      else if (v592 == 1)
      {
        *v572 = *v573;
        v572[1] = v573[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v592)
        {
          memcpy(v572, v573, *(_QWORD *)(*(_QWORD *)(v591 - 8) + 64));
LABEL_221:
          v599 = *(int *)(v579 + 48);
          v600 = (char *)v572 + v599;
          v601 = (char *)v573 + v599;
          *((_BYTE *)v572 + v599) = *((_BYTE *)v573 + v599);
          v602 = (_OWORD *)((char *)v572 + v599 + 8);
          v603 = (uint64_t *)((char *)v573 + v599 + 8);
          v604 = *((_QWORD *)v601 + 2);
          if (v604 >> 60 == 15)
          {
            *v602 = *(_OWORD *)v603;
          }
          else
          {
            v605 = *v603;
            sub_1A2973524(*v603, v604);
            *((_QWORD *)v600 + 1) = v605;
            *((_QWORD *)v600 + 2) = v604;
          }
          v566 = v711;
          (*(void (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(v580 + 56))(v572, 0, 3, v579);
          goto LABEL_225;
        }
        v593 = sub_1A2AE2F44();
        (*(void (**)(unint64_t *, unint64_t *, uint64_t))(*(_QWORD *)(v593 - 8) + 16))(v572, v573, v593);
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_221;
    }
    goto LABEL_193;
  }
  if (v578)
  {
    sub_1A297DA3C((uint64_t)v572, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.AskResponse);
LABEL_193:
    v581 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B6F8) - 8) + 64);
LABEL_194:
    memcpy(v572, v573, v581);
    goto LABEL_226;
  }
  v583 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
  v584 = *(_QWORD *)(v583 - 8);
  v585 = *(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v584 + 48);
  v586 = v585(v572, 3, v583);
  v587 = v585(v573, 3, v583);
  if (!v586)
  {
    if (v587)
    {
      sub_1A296F108((uint64_t)v572, &qword_1EE67B7E0);
      goto LABEL_209;
    }
    if (a1 != v566)
    {
      sub_1A297DA3C((uint64_t)v572, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.ItemDestination);
      v595 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v596 = swift_getEnumCaseMultiPayload();
      if (v596 == 2)
      {
        v660 = v573[1];
        if (v660 >> 60 == 15)
        {
          *(_OWORD *)v572 = *(_OWORD *)v573;
        }
        else
        {
          v682 = *v573;
          sub_1A2973524(*v573, v573[1]);
          *v572 = v682;
          v572[1] = v660;
        }
        v565 = v712;
      }
      else if (v596 == 1)
      {
        *v572 = *v573;
        v572[1] = v573[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v596)
        {
          memcpy(v572, v573, *(_QWORD *)(*(_QWORD *)(v595 - 8) + 64));
          goto LABEL_279;
        }
        v597 = sub_1A2AE2F44();
        (*(void (**)(unint64_t *, unint64_t *, uint64_t))(*(_QWORD *)(v597 - 8) + 16))(v572, v573, v597);
      }
      swift_storeEnumTagMultiPayload();
    }
LABEL_279:
    v683 = *(int *)(v583 + 48);
    v684 = (char *)v572 + v683;
    v685 = (char *)v573 + v683;
    *v684 = *v685;
    v686 = (uint64_t *)(v685 + 8);
    v687 = *((_QWORD *)v685 + 2);
    if (*((_QWORD *)v684 + 2) >> 60 == 15)
    {
      if (v687 >> 60 != 15)
      {
        v688 = *v686;
        sub_1A2973524(v688, v687);
        *((_QWORD *)v684 + 1) = v688;
        *((_QWORD *)v684 + 2) = v687;
        goto LABEL_226;
      }
    }
    else
    {
      if (v687 >> 60 != 15)
      {
        v689 = *v686;
        sub_1A2973524(v689, v687);
        v690 = *((_QWORD *)v684 + 1);
        v691 = *((_QWORD *)v684 + 2);
        *((_QWORD *)v684 + 1) = v689;
        *((_QWORD *)v684 + 2) = v687;
        sub_1A29736C4(v690, v691);
        goto LABEL_226;
      }
      sub_1A299C970((uint64_t)(v684 + 8));
    }
    *(_OWORD *)(v684 + 8) = *(_OWORD *)v686;
    goto LABEL_226;
  }
  if (v587)
  {
LABEL_209:
    v581 = *(_QWORD *)(v575 + 64);
    goto LABEL_194;
  }
  v588 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v589 = swift_getEnumCaseMultiPayload();
  switch(v589)
  {
    case 2:
      v649 = v573[1];
      if (v649 >> 60 == 15)
      {
        *(_OWORD *)v572 = *(_OWORD *)v573;
      }
      else
      {
        v652 = *v573;
        sub_1A2973524(*v573, v573[1]);
        *v572 = v652;
        v572[1] = v649;
      }
      goto LABEL_242;
    case 1:
      *v572 = *v573;
      v572[1] = v573[1];
      swift_bridgeObjectRetain();
      goto LABEL_242;
    case 0:
      v590 = sub_1A2AE2F44();
      (*(void (**)(unint64_t *, unint64_t *, uint64_t))(*(_QWORD *)(v590 - 8) + 16))(v572, v573, v590);
LABEL_242:
      swift_storeEnumTagMultiPayload();
      goto LABEL_243;
  }
  memcpy(v572, v573, *(_QWORD *)(*(_QWORD *)(v588 - 8) + 64));
LABEL_243:
  v653 = *(int *)(v583 + 48);
  v654 = (char *)v572 + v653;
  v655 = (char *)v573 + v653;
  *((_BYTE *)v572 + v653) = *((_BYTE *)v573 + v653);
  v656 = (_OWORD *)((char *)v572 + v653 + 8);
  v657 = (uint64_t *)((char *)v573 + v653 + 8);
  v658 = *((_QWORD *)v655 + 2);
  if (v658 >> 60 == 15)
  {
    *v656 = *(_OWORD *)v657;
  }
  else
  {
    v659 = *v657;
    sub_1A2973524(*v657, v658);
    *((_QWORD *)v654 + 1) = v659;
    *((_QWORD *)v654 + 2) = v658;
  }
  v565 = v712;
  (*(void (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(v584 + 56))(v572, 0, 3, v583);
LABEL_226:
  v606 = v565[10];
  v607 = (char *)a1 + v606;
  v608 = (char *)v566 + v606;
  v609 = sub_1A2AE30C4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v609 - 8) + 24))(v607, v608, v609);
  *((_BYTE *)a1 + v565[11]) = *((_BYTE *)v566 + v565[11]);
  *((_BYTE *)a1 + v565[12]) = *((_BYTE *)v566 + v565[12]);
  v610 = v565[13];
  v611 = (uint64_t)a1 + v610;
  v612 = (char *)v566 + v610;
  v613 = type metadata accessor for SFAirDrop.DeclineAction();
  v614 = *(_QWORD *)(v613 - 8);
  v615 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v614 + 48);
  LODWORD(v607) = v615(v611, 1, v613);
  v616 = v615((uint64_t)v612, 1, v613);
  if (!(_DWORD)v607)
  {
    if (!v616)
    {
      *(_QWORD *)v611 = *(_QWORD *)v612;
      *(_QWORD *)(v611 + 8) = *((_QWORD *)v612 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v632 = *((_QWORD *)v612 + 2);
      v633 = *((_QWORD *)v612 + 3);
      v634 = *((_QWORD *)v612 + 4);
      v635 = *((_QWORD *)v612 + 5);
      v636 = v612[48];
      sub_1A2993E10(v632, v633, v634, v635, v636);
      v637 = *(_QWORD *)(v611 + 16);
      v638 = *(_QWORD *)(v611 + 24);
      v639 = *(_QWORD *)(v611 + 32);
      v640 = *(_QWORD *)(v611 + 40);
      *(_QWORD *)(v611 + 16) = v632;
      *(_QWORD *)(v611 + 24) = v633;
      *(_QWORD *)(v611 + 32) = v634;
      *(_QWORD *)(v611 + 40) = v635;
      v566 = v711;
      v565 = v712;
      v641 = *(_BYTE *)(v611 + 48);
      *(_BYTE *)(v611 + 48) = v636;
      sub_1A2994DD4(v637, v638, v639, v640, v641);
      *(_BYTE *)(v611 + 49) = v612[49];
      v642 = *(int *)(v613 + 28);
      v643 = v611 + v642;
      v644 = &v612[v642];
      v708((char *)(v611 + v642), &v612[v642], v710);
      v645 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
      v646 = (_QWORD *)(v643 + v645);
      v647 = &v644[v645];
      v648 = *((_QWORD *)v647 + 1);
      *v646 = *(_QWORD *)v647;
      v646[1] = v648;
      swift_retain();
      swift_release();
      goto LABEL_232;
    }
    sub_1A297DA3C(v611, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.DeclineAction);
    goto LABEL_231;
  }
  if (v616)
  {
LABEL_231:
    v630 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B700);
    memcpy((void *)v611, v612, *(_QWORD *)(*(_QWORD *)(v630 - 8) + 64));
    goto LABEL_232;
  }
  *(_QWORD *)v611 = *(_QWORD *)v612;
  *(_QWORD *)(v611 + 8) = *((_QWORD *)v612 + 1);
  v617 = *((_QWORD *)v612 + 2);
  v618 = *((_QWORD *)v612 + 3);
  v619 = *((_QWORD *)v612 + 4);
  v620 = *((_QWORD *)v612 + 5);
  v621 = v612[48];
  swift_bridgeObjectRetain();
  sub_1A2993E10(v617, v618, v619, v620, v621);
  *(_QWORD *)(v611 + 16) = v617;
  *(_QWORD *)(v611 + 24) = v618;
  *(_QWORD *)(v611 + 32) = v619;
  *(_QWORD *)(v611 + 40) = v620;
  v566 = v711;
  v565 = v712;
  *(_BYTE *)(v611 + 48) = v621;
  *(_BYTE *)(v611 + 49) = v612[49];
  v622 = *(int *)(v613 + 28);
  v623 = v611 + v622;
  v624 = &v612[v622];
  (*(void (**)(uint64_t, char *, uint64_t))(v709 + 16))(v611 + v622, &v612[v622], v710);
  v625 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
  v626 = (_QWORD *)(v623 + v625);
  v627 = &v624[v625];
  v628 = *((_QWORD *)v627 + 1);
  *v626 = *(_QWORD *)v627;
  v626[1] = v628;
  v629 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v614 + 56);
  swift_retain();
  v629(v611, 0, 1, v613);
LABEL_232:
  *((_BYTE *)a1 + v565[14]) = *((_BYTE *)v566 + v565[14]);
  return a1;
}

uint64_t sub_1A299C970(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CB0338] - 8) + 8))();
  return a1;
}

char *_s8TransferVwtk(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int EnumCaseMultiPayload;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  char *v92;
  char *v93;
  int *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, char *, uint64_t);
  int *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, char *, uint64_t);
  int *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  int *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  __int128 v124;
  uint64_t v125;
  char *v126;
  char *v127;
  __int128 v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  int *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  __int128 v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  int *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  int *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  int *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  int *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  int *v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  __int128 v222;
  uint64_t v223;
  char *v224;
  char *v225;
  __int128 v226;
  uint64_t v227;
  char *v228;
  char *v229;
  char *v230;
  uint64_t v231;
  char *v232;
  __int128 v233;
  uint64_t v234;
  char *v235;
  char *v236;
  __int128 v237;
  uint64_t v238;
  char *v239;
  char *v240;
  char *v241;
  char *v242;
  uint64_t v243;
  __int128 v244;
  uint64_t v245;
  char *v246;
  char *v247;
  __int128 v248;
  uint64_t v249;
  char *v250;
  char *v251;
  __int128 v252;
  uint64_t v253;
  char *v254;
  char *v255;
  __int128 v256;
  uint64_t v257;
  char *v258;
  char *v259;
  __int128 v260;
  uint64_t v261;
  char *v262;
  char *v263;
  __int128 v264;
  uint64_t v265;
  __int128 v266;
  uint64_t v267;
  char *v268;
  char *v269;
  __int128 v270;
  uint64_t v271;
  char *v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  char *v277;
  int *v278;
  uint64_t v279;
  char *v280;
  char *v281;
  uint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  __int128 v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  char *v292;
  uint64_t v293;
  char *v294;
  int *v295;
  uint64_t v296;
  char *v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  char *v308;
  uint64_t v309;
  char *v310;
  char *v311;
  char *v312;
  uint64_t v313;
  char *v314;
  char *v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  __int128 v323;
  uint64_t v324;
  char *v325;
  char *v326;
  uint64_t v327;
  __int128 v328;
  uint64_t v330;
  char *v331;
  uint64_t v332;
  int *v333;
  uint64_t v334;
  char *v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  char *v343;
  char *v344;
  uint64_t v345;
  uint64_t v346;
  char *v347;
  char *v348;
  uint64_t v349;
  char *v350;
  char *v351;
  char *v352;
  char *v353;
  uint64_t v354;
  char *v355;
  void (*v356)(char *, char *, uint64_t);
  int *v357;

  v6 = type metadata accessor for SFAirDropClient.Identifier();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = sub_1A2AE3130();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_1A2AE3130();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  v354 = v11;
  v356 = v12;
  v357 = a3;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v12(v14, v15, v11);
      v17 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      v14[v17[13]] = v15[v17[13]];
      v18 = v17[14];
      v19 = &v14[v18];
      v20 = &v15[v18];
      v21 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      v22 = v17[15];
      v23 = &v14[v22];
      v24 = &v15[v22];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
        goto LABEL_75;
      if (EnumCaseMultiPayload != 1)
        goto LABEL_76;
      goto LABEL_7;
    case 1u:
      v36 = a2;
      v37 = *((_OWORD *)v15 + 3);
      *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
      *((_OWORD *)v14 + 3) = v37;
      *((_QWORD *)v14 + 8) = *((_QWORD *)v15 + 8);
      v38 = *((_OWORD *)v15 + 1);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v38;
      v39 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F8) + 48);
      v40 = &v14[v39];
      v41 = &v15[v39];
      v12(&v14[v39], &v15[v39], v11);
      v42 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
      v40[v42[13]] = v41[v42[13]];
      v43 = v42[14];
      v44 = &v40[v43];
      v45 = &v41[v43];
      v46 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
      v47 = v42[15];
      v48 = &v40[v47];
      v49 = &v41[v47];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
      v50 = swift_getEnumCaseMultiPayload();
      if (v50 == 2)
        goto LABEL_78;
      if (v50 == 1)
        goto LABEL_10;
      goto LABEL_79;
    case 2u:
      v12(v14, v15, v11);
      v60 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      v14[v60[13]] = v15[v60[13]];
      v61 = v60[14];
      v62 = &v14[v61];
      v63 = &v15[v61];
      v64 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v62, v63, v64);
      v65 = v60[15];
      v23 = &v14[v65];
      v24 = &v15[v65];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v66 = swift_getEnumCaseMultiPayload();
      if (v66 == 2)
      {
LABEL_75:
        v222 = *((_OWORD *)v24 + 1);
        *(_OWORD *)v23 = *(_OWORD *)v24;
        *((_OWORD *)v23 + 1) = v222;
        *((_QWORD *)v23 + 4) = *((_QWORD *)v24 + 4);
        v223 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v224 = &v23[v223];
        v225 = &v24[v223];
        *((_WORD *)v224 + 24) = *(_WORD *)&v24[v223 + 48];
        v226 = *(_OWORD *)&v24[v223 + 16];
        *(_OWORD *)v224 = *(_OWORD *)&v24[v223];
        *((_OWORD *)v224 + 1) = v226;
        *((_OWORD *)v224 + 2) = *(_OWORD *)&v24[v223 + 32];
        v227 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v228 = &v224[v227];
        v229 = a2;
        v230 = &v225[v227];
        v11 = v354;
        v356(v228, v230, v354);
        v231 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v34 = &v228[v231];
        v35 = &v230[v231];
        a2 = v229;
        v12 = v356;
      }
      else if (v66 == 1)
      {
LABEL_7:
        *v23 = *v24;
        v26 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
        v27 = a2;
        v28 = &v23[v26];
        v29 = &v24[v26];
        v356(&v23[v26], v29, v11);
        v30 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
        v31 = &v28[v30];
        v32 = &v29[v30];
        v356(v31, v32, v11);
        v33 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
        v34 = &v31[v33];
        a2 = v27;
        v12 = v356;
        v35 = &v32[v33];
      }
      else
      {
LABEL_76:
        v232 = a2;
        v233 = *((_OWORD *)v24 + 1);
        *(_OWORD *)v23 = *(_OWORD *)v24;
        *((_OWORD *)v23 + 1) = v233;
        *((_QWORD *)v23 + 4) = *((_QWORD *)v24 + 4);
        v234 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v235 = &v23[v234];
        v236 = &v24[v234];
        *((_WORD *)v235 + 24) = *(_WORD *)&v24[v234 + 48];
        v237 = *(_OWORD *)&v24[v234 + 16];
        *(_OWORD *)v235 = *(_OWORD *)&v24[v234];
        *((_OWORD *)v235 + 1) = v237;
        *((_OWORD *)v235 + 2) = *(_OWORD *)&v24[v234 + 32];
        v238 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v239 = &v235[v238];
        v240 = &v236[v238];
        v241 = &v235[v238];
        v242 = &v236[v238];
        v11 = v354;
        v12 = v356;
        v356(v241, v242, v354);
        v243 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v34 = &v239[v243];
        v35 = &v240[v243];
        a2 = v232;
      }
      *(_OWORD *)v34 = *(_OWORD *)v35;
      swift_storeEnumTagMultiPayload();
      goto LABEL_96;
    case 3u:
      v67 = type metadata accessor for SFAirDropReceive.ItemDestination();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
      }
      else
      {
        v119 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v119 - 8) + 32))(v14, v15, v119);
        swift_storeEnumTagMultiPayload();
      }
      v120 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F0);
      v121 = v120[12];
      v122 = &v14[v121];
      v123 = &v15[v121];
      v124 = *((_OWORD *)v123 + 1);
      *(_OWORD *)v122 = *(_OWORD *)v123;
      *((_OWORD *)v122 + 1) = v124;
      *((_QWORD *)v122 + 4) = *((_QWORD *)v123 + 4);
      *(_OWORD *)&v14[v120[16]] = *(_OWORD *)&v15[v120[16]];
      v125 = v120[20];
      v126 = &v14[v125];
      v127 = &v15[v125];
      v128 = *(_OWORD *)&v15[v125 + 16];
      *(_OWORD *)v126 = *(_OWORD *)&v15[v125];
      *((_OWORD *)v126 + 1) = v128;
      *((_OWORD *)v126 + 2) = *(_OWORD *)&v15[v125 + 32];
      v126[48] = v15[v125 + 48];
      v126[49] = v15[v125 + 49];
      v129 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
      v130 = &v126[v129];
      v131 = &v127[v129];
      v132 = &v126[v129];
      v133 = &v127[v129];
      v11 = v354;
      v12 = v356;
      v356(v132, v133, v354);
      v134 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788);
      *(_OWORD *)&v130[*(int *)(v134 + 68)] = *(_OWORD *)&v131[*(int *)(v134 + 68)];
      swift_storeEnumTagMultiPayload();
      goto LABEL_97;
    case 4u:
      v68 = type metadata accessor for SFAirDropReceive.ItemDestination();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
      }
      else
      {
        v135 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 32))(v14, v15, v135);
        swift_storeEnumTagMultiPayload();
      }
      v136 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E8);
      *(_QWORD *)&v14[v136[12]] = *(_QWORD *)&v15[v136[12]];
      *(_QWORD *)&v14[v136[16]] = *(_QWORD *)&v15[v136[16]];
      v137 = v136[20];
      v138 = &v14[v137];
      v139 = &v15[v137];
      *((_WORD *)v138 + 24) = *(_WORD *)&v15[v137 + 48];
      v140 = *(_OWORD *)&v15[v137 + 16];
      *(_OWORD *)v138 = *(_OWORD *)&v15[v137];
      *((_OWORD *)v138 + 1) = v140;
      *((_OWORD *)v138 + 2) = *(_OWORD *)&v15[v137 + 32];
      v141 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
      v142 = &v138[v141];
      v143 = &v139[v141];
      v144 = &v138[v141];
      v145 = &v139[v141];
      v11 = v354;
      v12 = v356;
      v356(v144, v145, v354);
      v146 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788);
      *(_OWORD *)&v142[*(int *)(v146 + 68)] = *(_OWORD *)&v143[*(int *)(v146 + 68)];
      swift_storeEnumTagMultiPayload();
      goto LABEL_97;
    case 5u:
      v69 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v36 = a2;
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        v147 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v147 - 8) + 32))(v14, v15, v147);
        swift_storeEnumTagMultiPayload();
      }
      v148 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
      *(_QWORD *)&v14[*(int *)(v148 + 48)] = *(_QWORD *)&v15[*(int *)(v148 + 48)];
      v149 = *(int *)(v148 + 64);
      v150 = &v14[v149];
      v151 = &v15[v149];
      v12(&v14[v149], &v15[v149], v11);
      v152 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      v150[v152[13]] = v151[v152[13]];
      v153 = v152[14];
      v154 = &v150[v153];
      v155 = &v151[v153];
      v156 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v156 - 8) + 32))(v154, v155, v156);
      v157 = v152[15];
      v86 = &v150[v157];
      v87 = &v151[v157];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v158 = swift_getEnumCaseMultiPayload();
      if (v158 == 2)
        goto LABEL_88;
      if (v158 == 1)
        goto LABEL_58;
      goto LABEL_93;
    case 6u:
      v70 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v36 = a2;
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
      }
      else
      {
        v159 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 32))(v14, v15, v159);
        swift_storeEnumTagMultiPayload();
      }
      v160 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
      *(_QWORD *)&v14[*(int *)(v160 + 48)] = *(_QWORD *)&v15[*(int *)(v160 + 48)];
      v161 = *(int *)(v160 + 64);
      v162 = &v14[v161];
      v163 = &v15[v161];
      v12(&v14[v161], &v15[v161], v11);
      v164 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      v162[v164[13]] = v163[v164[13]];
      v165 = v164[14];
      v166 = &v162[v165];
      v167 = &v163[v165];
      v168 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v168 - 8) + 32))(v166, v167, v168);
      v169 = v164[15];
      v86 = &v162[v169];
      v87 = &v163[v169];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v170 = swift_getEnumCaseMultiPayload();
      if (v170 == 2)
        goto LABEL_88;
      if (v170 == 1)
        goto LABEL_58;
      goto LABEL_93;
    case 7u:
      v71 = type metadata accessor for SFAirDropReceive.ItemDestination();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
      }
      else
      {
        v171 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v171 - 8) + 32))(v14, v15, v171);
        swift_storeEnumTagMultiPayload();
      }
      v172 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D8);
      *(_QWORD *)&v14[*(int *)(v172 + 48)] = *(_QWORD *)&v15[*(int *)(v172 + 48)];
      *(_QWORD *)&v14[*(int *)(v172 + 64)] = *(_QWORD *)&v15[*(int *)(v172 + 64)];
      swift_storeEnumTagMultiPayload();
      goto LABEL_97;
    case 8u:
      v72 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v36 = a2;
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      }
      else
      {
        v173 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v173 - 8) + 32))(v14, v15, v173);
        swift_storeEnumTagMultiPayload();
      }
      v174 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
      *(_QWORD *)&v14[v174[12]] = *(_QWORD *)&v15[v174[12]];
      *(_QWORD *)&v14[v174[16]] = *(_QWORD *)&v15[v174[16]];
      v175 = v174[20];
      v176 = &v14[v175];
      v177 = &v15[v175];
      v12(&v14[v175], &v15[v175], v11);
      v178 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      v176[v178[13]] = v177[v178[13]];
      v179 = v178[14];
      v180 = &v176[v179];
      v181 = &v177[v179];
      v182 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v182 - 8) + 32))(v180, v181, v182);
      v183 = v178[15];
      v86 = &v176[v183];
      v87 = &v177[v183];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v184 = swift_getEnumCaseMultiPayload();
      if (v184 == 2)
        goto LABEL_88;
      if (v184 == 1)
        goto LABEL_58;
      goto LABEL_93;
    case 9u:
      v73 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v36 = a2;
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      }
      else
      {
        v192 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v192 - 8) + 32))(v14, v15, v192);
        swift_storeEnumTagMultiPayload();
      }
      v193 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
      *(_QWORD *)&v14[v193[12]] = *(_QWORD *)&v15[v193[12]];
      *(_QWORD *)&v14[v193[16]] = *(_QWORD *)&v15[v193[16]];
      v194 = v193[20];
      v195 = &v14[v194];
      v196 = &v15[v194];
      v12(&v14[v194], &v15[v194], v11);
      v197 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      v195[v197[13]] = v196[v197[13]];
      v198 = v197[14];
      v199 = &v195[v198];
      v200 = &v196[v198];
      v201 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v201 - 8) + 32))(v199, v200, v201);
      v202 = v197[15];
      v86 = &v195[v202];
      v87 = &v196[v202];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v203 = swift_getEnumCaseMultiPayload();
      if (v203 == 2)
        goto LABEL_88;
      if (v203 == 1)
        goto LABEL_58;
      goto LABEL_93;
    case 0xAu:
      v74 = type metadata accessor for SFAirDropReceive.ItemDestination();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
      }
      else
      {
        v204 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v204 - 8) + 32))(v14, v15, v204);
        swift_storeEnumTagMultiPayload();
      }
      v205 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C8);
      *(_QWORD *)&v14[*(int *)(v205 + 48)] = *(_QWORD *)&v15[*(int *)(v205 + 48)];
      *(_QWORD *)&v14[*(int *)(v205 + 64)] = *(_QWORD *)&v15[*(int *)(v205 + 64)];
      swift_storeEnumTagMultiPayload();
      goto LABEL_97;
    case 0xBu:
      v36 = a2;
      v75 = *((_OWORD *)v15 + 3);
      *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
      *((_OWORD *)v14 + 3) = v75;
      *((_QWORD *)v14 + 8) = *((_QWORD *)v15 + 8);
      v76 = *((_OWORD *)v15 + 1);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v76;
      v77 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B8) + 48);
      v78 = &v14[v77];
      v79 = &v15[v77];
      v12(&v14[v77], &v15[v77], v11);
      v80 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      v78[v80[13]] = v79[v80[13]];
      v81 = v80[14];
      v82 = &v78[v81];
      v83 = &v79[v81];
      v84 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 32))(v82, v83, v84);
      v85 = v80[15];
      v86 = &v78[v85];
      v87 = &v79[v85];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v88 = swift_getEnumCaseMultiPayload();
      if (v88 == 2)
      {
LABEL_88:
        v260 = *((_OWORD *)v87 + 1);
        *(_OWORD *)v86 = *(_OWORD *)v87;
        *((_OWORD *)v86 + 1) = v260;
        *((_QWORD *)v86 + 4) = *((_QWORD *)v87 + 4);
        v261 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v262 = &v86[v261];
        v263 = &v87[v261];
        *((_WORD *)v262 + 24) = *(_WORD *)&v87[v261 + 48];
        v264 = *(_OWORD *)&v87[v261 + 16];
        *(_OWORD *)v262 = *(_OWORD *)&v87[v261];
        *((_OWORD *)v262 + 1) = v264;
        *((_OWORD *)v262 + 2) = *(_OWORD *)&v87[v261 + 32];
        v265 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v250 = &v262[v265];
        v12 = v356;
        v251 = &v263[v265];
        v11 = v354;
        v356(v250, v251, v354);
      }
      else
      {
        if (v88 == 1)
        {
LABEL_58:
          *v86 = *v87;
          v185 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v186 = &v86[v185];
          v187 = &v87[v185];
          v12(&v86[v185], v187, v11);
          v188 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v189 = &v186[v188];
          v190 = &v187[v188];
          v12(v189, v190, v11);
          v191 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v58 = &v189[v191];
          v59 = &v190[v191];
          goto LABEL_95;
        }
LABEL_93:
        v266 = *((_OWORD *)v87 + 1);
        *(_OWORD *)v86 = *(_OWORD *)v87;
        *((_OWORD *)v86 + 1) = v266;
        *((_QWORD *)v86 + 4) = *((_QWORD *)v87 + 4);
        v267 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v268 = &v86[v267];
        v269 = &v87[v267];
        *((_WORD *)v268 + 24) = *(_WORD *)&v87[v267 + 48];
        v270 = *(_OWORD *)&v87[v267 + 16];
        *(_OWORD *)v268 = *(_OWORD *)&v87[v267];
        *((_OWORD *)v268 + 1) = v270;
        *((_OWORD *)v268 + 2) = *(_OWORD *)&v87[v267 + 32];
        v271 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v250 = &v268[v271];
        v251 = &v269[v271];
        v272 = &v268[v271];
        v273 = &v269[v271];
        v11 = v354;
        v12 = v356;
        v356(v272, v273, v354);
      }
      goto LABEL_94;
    case 0xDu:
      v36 = a2;
      v89 = *((_OWORD *)v15 + 3);
      *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
      *((_OWORD *)v14 + 3) = v89;
      *((_QWORD *)v14 + 8) = *((_QWORD *)v15 + 8);
      v90 = *((_OWORD *)v15 + 1);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v90;
      v91 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A8) + 48);
      v92 = &v14[v91];
      v93 = &v15[v91];
      v12(&v14[v91], &v15[v91], v11);
      v94 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
      v92[v94[13]] = v93[v94[13]];
      v95 = v94[14];
      v96 = &v92[v95];
      v97 = &v93[v95];
      v98 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 32))(v96, v97, v98);
      v99 = v94[15];
      v48 = &v92[v99];
      v49 = &v93[v99];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
      v100 = swift_getEnumCaseMultiPayload();
      if (v100 == 2)
      {
LABEL_78:
        v244 = *((_OWORD *)v49 + 1);
        *(_OWORD *)v48 = *(_OWORD *)v49;
        *((_OWORD *)v48 + 1) = v244;
        *((_QWORD *)v48 + 4) = *((_QWORD *)v49 + 4);
        v245 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
        v246 = &v48[v245];
        v247 = &v49[v245];
        *((_WORD *)v246 + 24) = *(_WORD *)&v49[v245 + 48];
        v248 = *(_OWORD *)&v49[v245 + 16];
        *(_OWORD *)v246 = *(_OWORD *)&v49[v245];
        *((_OWORD *)v246 + 1) = v248;
        *((_OWORD *)v246 + 2) = *(_OWORD *)&v49[v245 + 32];
        v249 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v250 = &v246[v249];
        v12 = v356;
        v251 = &v247[v249];
        v11 = v354;
        v356(v250, v251, v354);
      }
      else
      {
        if (v100 == 1)
        {
LABEL_10:
          *v48 = *v49;
          v51 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A8) + 48);
          v52 = &v48[v51];
          v53 = &v49[v51];
          v12(&v48[v51], v53, v11);
          v54 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B0) + 52);
          v55 = &v52[v54];
          v56 = &v53[v54];
          v12(v55, v56, v11);
          v57 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v58 = &v55[v57];
          v59 = &v56[v57];
          goto LABEL_95;
        }
LABEL_79:
        v252 = *((_OWORD *)v49 + 1);
        *(_OWORD *)v48 = *(_OWORD *)v49;
        *((_OWORD *)v48 + 1) = v252;
        *((_QWORD *)v48 + 4) = *((_QWORD *)v49 + 4);
        v253 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
        v254 = &v48[v253];
        v255 = &v49[v253];
        *((_WORD *)v254 + 24) = *(_WORD *)&v49[v253 + 48];
        v256 = *(_OWORD *)&v49[v253 + 16];
        *(_OWORD *)v254 = *(_OWORD *)&v49[v253];
        *((_OWORD *)v254 + 1) = v256;
        *((_OWORD *)v254 + 2) = *(_OWORD *)&v49[v253 + 32];
        v257 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v250 = &v254[v257];
        v251 = &v255[v257];
        v258 = &v254[v257];
        v259 = &v255[v257];
        v11 = v354;
        v12 = v356;
        v356(v258, v259, v354);
      }
LABEL_94:
      v274 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
      v58 = &v250[v274];
      v59 = &v251[v274];
LABEL_95:
      a2 = v36;
      *(_OWORD *)v58 = *(_OWORD *)v59;
      swift_storeEnumTagMultiPayload();
LABEL_96:
      swift_storeEnumTagMultiPayload();
      a3 = v357;
LABEL_97:
      v275 = a3[8];
      a1[a3[7]] = a2[a3[7]];
      v276 = &a1[v275];
      v355 = a2;
      v277 = &a2[v275];
      v12(&a1[v275], &a2[v275], v11);
      v278 = (int *)type metadata accessor for SFAirDropReceive.AskRequest(0);
      v279 = v278[5];
      v280 = &v276[v279];
      v281 = &v277[v279];
      *(_OWORD *)v280 = *(_OWORD *)v281;
      v280[16] = v281[16];
      *(_QWORD *)&v276[v278[6]] = *(_QWORD *)&v277[v278[6]];
      v276[v278[7]] = v277[v278[7]];
      v276[v278[8]] = v277[v278[8]];
      v276[v278[9]] = v277[v278[9]];
      *(_OWORD *)&v276[v278[10]] = *(_OWORD *)&v277[v278[10]];
      *(_OWORD *)&v276[v278[11]] = *(_OWORD *)&v277[v278[11]];
      *(_OWORD *)&v276[v278[12]] = *(_OWORD *)&v277[v278[12]];
      *(_OWORD *)&v276[v278[13]] = *(_OWORD *)&v277[v278[13]];
      *(_OWORD *)&v276[v278[14]] = *(_OWORD *)&v277[v278[14]];
      *(_OWORD *)&v276[v278[15]] = *(_OWORD *)&v277[v278[15]];
      *(_OWORD *)&v276[v278[16]] = *(_OWORD *)&v277[v278[16]];
      *(_OWORD *)&v276[v278[17]] = *(_OWORD *)&v277[v278[17]];
      *(_OWORD *)&v276[v278[18]] = *(_OWORD *)&v277[v278[18]];
      *(_OWORD *)&v276[v278[19]] = *(_OWORD *)&v277[v278[19]];
      *(_QWORD *)&v276[v278[20]] = *(_QWORD *)&v277[v278[20]];
      *(_QWORD *)&v276[v278[21]] = *(_QWORD *)&v277[v278[21]];
      *(_QWORD *)&v276[v278[22]] = *(_QWORD *)&v277[v278[22]];
      *(_OWORD *)&v276[v278[23]] = *(_OWORD *)&v277[v278[23]];
      v282 = v278[24];
      v283 = &v276[v282];
      v284 = &v277[v282];
      v285 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
      v286 = *(_QWORD *)(v285 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v286 + 48))(v284, 1, v285))
      {
        v287 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D8);
        memcpy(v283, v284, *(_QWORD *)(*(_QWORD *)(v287 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v288 = *((_OWORD *)v284 + 1);
          *(_OWORD *)v283 = *(_OWORD *)v284;
          *((_OWORD *)v283 + 1) = v288;
          v289 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D0);
          v290 = *(int *)(v289 + 64);
          v351 = a1;
          v291 = &v283[v290];
          v292 = &v284[v290];
          v293 = sub_1A2AE30C4();
          v294 = v291;
          a1 = v351;
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v293 - 8) + 32))(v294, v292, v293);
          v283[*(int *)(v289 + 80)] = v284[*(int *)(v289 + 80)];
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v283, v284, *(_QWORD *)(v286 + 64));
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v286 + 56))(v283, 0, 1, v285);
      }
      *(_QWORD *)&v276[v278[25]] = *(_QWORD *)&v277[v278[25]];
      *(_QWORD *)&v276[v278[26]] = *(_QWORD *)&v277[v278[26]];
      *(_OWORD *)&v276[v278[27]] = *(_OWORD *)&v277[v278[27]];
      v295 = v357;
      v296 = v357[9];
      v297 = &a1[v296];
      v298 = &v355[v296];
      v299 = type metadata accessor for SFAirDropReceive.AskResponse();
      v300 = *(_QWORD *)(v299 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v300 + 48))(v298, 1, v299))
      {
        v301 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B6F8);
        memcpy(v297, v298, *(_QWORD *)(*(_QWORD *)(v301 - 8) + 64));
      }
      else
      {
        v302 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
        v303 = *(_QWORD *)(v302 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v303 + 48))(v298, 3, v302))
        {
          memcpy(v297, v298, *(_QWORD *)(v300 + 64));
        }
        else
        {
          v304 = type metadata accessor for SFAirDropReceive.ItemDestination();
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v297, v298, *(_QWORD *)(*(_QWORD *)(v304 - 8) + 64));
          }
          else
          {
            v305 = sub_1A2AE2F44();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v305 - 8) + 32))(v297, v298, v305);
            swift_storeEnumTagMultiPayload();
          }
          v306 = *(int *)(v302 + 48);
          v307 = &v297[v306];
          v308 = &v298[v306];
          *(_OWORD *)v307 = *(_OWORD *)v308;
          *((_QWORD *)v307 + 2) = *((_QWORD *)v308 + 2);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v303 + 56))(v297, 0, 3, v302);
          v295 = v357;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v300 + 56))(v297, 0, 1, v299);
      }
      v309 = v295[10];
      v310 = &a1[v309];
      v311 = a1;
      v312 = &v355[v309];
      v313 = sub_1A2AE30C4();
      v314 = v312;
      v315 = v311;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v313 - 8) + 32))(v310, v314, v313);
      v316 = v295[12];
      v311[v295[11]] = v355[v295[11]];
      v311[v316] = v355[v316];
      v317 = v295[13];
      v318 = &v311[v317];
      v319 = &v355[v317];
      v320 = type metadata accessor for SFAirDrop.DeclineAction();
      v321 = *(_QWORD *)(v320 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v321 + 48))(v319, 1, v320))
      {
        v322 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B700);
        memcpy(v318, v319, *(_QWORD *)(*(_QWORD *)(v322 - 8) + 64));
      }
      else
      {
        v323 = *((_OWORD *)v319 + 1);
        *(_OWORD *)v318 = *(_OWORD *)v319;
        *((_OWORD *)v318 + 1) = v323;
        *((_OWORD *)v318 + 2) = *((_OWORD *)v319 + 2);
        *((_WORD *)v318 + 24) = *((_WORD *)v319 + 24);
        v324 = *(int *)(v320 + 28);
        v325 = &v318[v324];
        v326 = &v319[v324];
        v356(&v318[v324], &v319[v324], v354);
        v327 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v328 = *(_OWORD *)&v326[v327];
        v315 = v311;
        *(_OWORD *)&v325[v327] = v328;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v321 + 56))(v318, 0, 1, v320);
      }
      v315[v295[14]] = v355[v295[14]];
      return v315;
    case 0xFu:
      v101 = a2;
      v102 = sub_1A2AE30C4();
      v103 = *(_QWORD *)(v102 - 8);
      v104 = *(void (**)(char *, char *, uint64_t))(v103 + 32);
      v104(v14, v15, v102);
      v105 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
      v106 = v105[5];
      v107 = &v14[v106];
      v108 = &v15[v106];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(&v15[v106], 1, v102))
      {
        v109 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
        memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
      }
      else
      {
        v104(v107, v108, v102);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v103 + 56))(v107, 0, 1, v102);
      }
      v12 = v356;
      v14[v105[6]] = v15[v105[6]];
      v206 = v105[7];
      v207 = &v14[v206];
      v208 = &v15[v206];
      v209 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
      v210 = *(_QWORD *)(v209 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v210 + 48))(v208, 1, v209))
      {
        v211 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
        memcpy(v207, v208, *(_QWORD *)(*(_QWORD *)(v211 - 8) + 64));
      }
      else
      {
        v218 = type metadata accessor for SFAirDropReceive.Failure();
        v219 = *(_QWORD *)(v218 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v219 + 48))(v208, 1, v218))
        {
          memcpy(v207, v208, *(_QWORD *)(v210 + 64));
        }
        else
        {
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v207, v208, *(_QWORD *)(v219 + 64));
          }
          else
          {
            *(_OWORD *)v207 = *(_OWORD *)v208;
            v330 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
            v352 = &v207[v330];
            v331 = &v208[v330];
            v332 = sub_1A2AE2F44();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v332 - 8) + 32))(v352, v331, v332);
            swift_storeEnumTagMultiPayload();
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v219 + 56))(v207, 0, 1, v218);
        }
        v12 = v356;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v210 + 56))(v207, 0, 1, v209);
      }
      v11 = v354;
      v333 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A0);
      v334 = v333[12];
      v335 = &v14[v334];
      v336 = &v15[v334];
      v337 = type metadata accessor for SFAirDropReceive.ItemDestination();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v335, v336, *(_QWORD *)(*(_QWORD *)(v337 - 8) + 64));
      }
      else
      {
        v338 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v338 - 8) + 32))(v335, v336, v338);
        swift_storeEnumTagMultiPayload();
      }
      a2 = v101;
      a3 = v357;
      *(_OWORD *)&v14[v333[16]] = *(_OWORD *)&v15[v333[16]];
      *(_QWORD *)&v14[v333[20]] = *(_QWORD *)&v15[v333[20]];
      *(_QWORD *)&v14[v333[24]] = *(_QWORD *)&v15[v333[24]];
      *(_QWORD *)&v14[v333[28]] = *(_QWORD *)&v15[v333[28]];
      swift_storeEnumTagMultiPayload();
      goto LABEL_97;
    case 0x10u:
      v110 = a2;
      v111 = sub_1A2AE30C4();
      v112 = *(_QWORD *)(v111 - 8);
      v113 = *(void (**)(char *, char *, uint64_t))(v112 + 32);
      v113(v14, v15, v111);
      v114 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
      v115 = v114[5];
      v116 = &v14[v115];
      v117 = &v15[v115];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(&v15[v115], 1, v111))
      {
        v118 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
        memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
      }
      else
      {
        v113(v116, v117, v111);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v116, 0, 1, v111);
      }
      v12 = v356;
      v14[v114[6]] = v15[v114[6]];
      v212 = v114[7];
      v213 = &v14[v212];
      v214 = &v15[v212];
      v215 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
      v216 = *(_QWORD *)(v215 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v216 + 48))(v214, 1, v215))
      {
        v217 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
        memcpy(v213, v214, *(_QWORD *)(*(_QWORD *)(v217 - 8) + 64));
        a2 = v110;
      }
      else
      {
        v220 = type metadata accessor for SFAirDropReceive.Failure();
        v221 = *(_QWORD *)(v220 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v221 + 48))(v214, 1, v220))
        {
          memcpy(v213, v214, *(_QWORD *)(v216 + 64));
        }
        else
        {
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v213, v214, *(_QWORD *)(v221 + 64));
          }
          else
          {
            *(_OWORD *)v213 = *(_OWORD *)v214;
            v339 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
            v353 = &v213[v339];
            v340 = &v214[v339];
            v341 = sub_1A2AE2F44();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v341 - 8) + 32))(v353, v340, v341);
            swift_storeEnumTagMultiPayload();
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v221 + 56))(v213, 0, 1, v220);
        }
        a2 = v110;
        v12 = v356;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v213, 0, 1, v215);
      }
      a3 = v357;
      v11 = v354;
      v342 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B398) + 48);
      v343 = &v14[v342];
      v344 = &v15[v342];
      v345 = type metadata accessor for SFAirDropReceive.Failure();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v343, v344, *(_QWORD *)(*(_QWORD *)(v345 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v343 = *(_OWORD *)v344;
        v346 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
        v347 = &v343[v346];
        v348 = &v344[v346];
        v349 = sub_1A2AE2F44();
        v350 = v347;
        a3 = v357;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v349 - 8) + 32))(v350, v348, v349);
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_97;
    default:
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      goto LABEL_97;
  }
}

char *_s8TransferVwta(uint64_t a1, char *a2, int *a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  int *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  int v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  char *v94;
  char *v95;
  int *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, char *, uint64_t);
  int *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  void (*v113)(char *, char *, uint64_t);
  char *v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, char *, uint64_t);
  int *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  int *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  __int128 v128;
  uint64_t v129;
  char *v130;
  char *v131;
  __int128 v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  int *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  __int128 v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  int *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  int *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  int *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  int *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  int *v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  __int128 v222;
  uint64_t v223;
  char *v224;
  char *v225;
  __int128 v226;
  uint64_t v227;
  char *v228;
  char *v229;
  char *v230;
  uint64_t v231;
  char *v232;
  __int128 v233;
  uint64_t v234;
  char *v235;
  char *v236;
  __int128 v237;
  uint64_t v238;
  char *v239;
  char *v240;
  char *v241;
  uint64_t v242;
  __int128 v243;
  uint64_t v244;
  char *v245;
  char *v246;
  __int128 v247;
  uint64_t v248;
  char *v249;
  char *v250;
  char *v251;
  char *v252;
  __int128 v253;
  uint64_t v254;
  char *v255;
  char *v256;
  __int128 v257;
  uint64_t v258;
  __int128 v259;
  uint64_t v260;
  char *v261;
  char *v262;
  __int128 v263;
  uint64_t v264;
  __int128 v265;
  uint64_t v266;
  char *v267;
  char *v268;
  __int128 v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  char *v274;
  int *v275;
  uint64_t v276;
  char *v277;
  char *v278;
  char v279;
  uint64_t v280;
  uint64_t v281;
  unsigned __int8 v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  char *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  char *v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  char *v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  void *v334;
  uint64_t v335;
  void *v336;
  uint64_t v337;
  void *v338;
  uint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t (*v349)(char *, uint64_t, uint64_t);
  int v350;
  int v351;
  __int128 v352;
  uint64_t v353;
  uint64_t v354;
  char *v355;
  char *v356;
  uint64_t v357;
  size_t v358;
  __int128 v359;
  uint64_t v360;
  uint64_t v361;
  char *v362;
  char *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  char *v367;
  unint64_t v368;
  unint64_t v369;
  uint64_t v370;
  char *v371;
  int *v372;
  uint64_t v373;
  char *v374;
  char *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t (*v378)(char *, uint64_t, uint64_t);
  int v379;
  int v380;
  uint64_t v381;
  uint64_t v382;
  size_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t (*v386)(char *, uint64_t, uint64_t);
  int v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  char *v393;
  char *v394;
  uint64_t v395;
  char *v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  char *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t (*v405)(uint64_t, uint64_t, uint64_t);
  int v406;
  __int128 v407;
  uint64_t v408;
  uint64_t v409;
  char *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v414;
  char v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  __int128 v420;
  unsigned __int8 v421;
  uint64_t v422;
  uint64_t v423;
  char *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  char *v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  char *v433;
  char *v434;
  _OWORD *v435;
  _QWORD *v436;
  unint64_t v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  char *v441;
  uint64_t v442;
  int *v443;
  uint64_t v444;
  char *v445;
  char *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  char *v450;
  uint64_t v451;
  uint64_t v452;
  char *v453;
  char *v454;
  uint64_t v455;
  uint64_t v456;
  char *v457;
  char *v458;
  uint64_t v459;
  char *v460;
  char *v461;
  char *v462;
  void (*v463)(char *, char *, uint64_t);
  uint64_t v464;
  uint64_t v465;
  char *v466;
  char *v467;
  int *v468;

  v4 = a2;
  v5 = (char *)a1;
  if ((char *)a1 != a2)
  {
    sub_1A297DA3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
    v6 = type metadata accessor for SFAirDropClient.Identifier();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v5, v4, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v7 = sub_1A2AE3130();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v4, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  v8 = a3[5];
  v9 = &v5[v8];
  v10 = &v4[v8];
  v11 = sub_1A2AE3130();
  v464 = *(_QWORD *)(v11 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v464 + 40);
  v12(v9, v10, v11);
  v465 = v11;
  v467 = v4;
  v468 = a3;
  v463 = v12;
  if (v5 != v4)
  {
    v13 = a3[6];
    v14 = &v5[v13];
    v15 = &v4[v13];
    sub_1A297DA3C((uint64_t)&v5[v13], type metadata accessor for SFAirDropReceive.Transfer.State);
    v16 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v17 = *(void (**)(char *, char *, uint64_t))(v464 + 32);
        v17(v14, v15, v11);
        v18 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        v14[v18[13]] = v15[v18[13]];
        v19 = v18[14];
        v20 = &v14[v19];
        v21 = &v15[v19];
        v22 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
        v23 = v18[15];
        v24 = &v14[v23];
        v25 = &v15[v23];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
          goto LABEL_77;
        if (EnumCaseMultiPayload != 1)
          goto LABEL_78;
        goto LABEL_9;
      case 1u:
        v37 = v5;
        v38 = *((_OWORD *)v15 + 3);
        *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
        *((_OWORD *)v14 + 3) = v38;
        *((_QWORD *)v14 + 8) = *((_QWORD *)v15 + 8);
        v39 = *((_OWORD *)v15 + 1);
        *(_OWORD *)v14 = *(_OWORD *)v15;
        *((_OWORD *)v14 + 1) = v39;
        v40 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F8) + 48);
        v41 = &v14[v40];
        v42 = &v15[v40];
        v43 = *(void (**)(char *, char *, uint64_t))(v464 + 32);
        v43(&v14[v40], &v15[v40], v11);
        v44 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
        v41[v44[13]] = v42[v44[13]];
        v45 = v44[14];
        v46 = &v41[v45];
        v47 = &v42[v45];
        v48 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v46, v47, v48);
        v49 = v44[15];
        v50 = &v41[v49];
        v51 = &v42[v49];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
        v52 = swift_getEnumCaseMultiPayload();
        if (v52 == 2)
          goto LABEL_80;
        if (v52 == 1)
          goto LABEL_12;
        goto LABEL_81;
      case 2u:
        v17 = *(void (**)(char *, char *, uint64_t))(v464 + 32);
        v17(v14, v15, v11);
        v62 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        v14[v62[13]] = v15[v62[13]];
        v63 = v62[14];
        v64 = &v14[v63];
        v65 = &v15[v63];
        v66 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v64, v65, v66);
        v67 = v62[15];
        v24 = &v14[v67];
        v25 = &v15[v67];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v68 = swift_getEnumCaseMultiPayload();
        if (v68 == 2)
        {
LABEL_77:
          v222 = *((_OWORD *)v25 + 1);
          *(_OWORD *)v24 = *(_OWORD *)v25;
          *((_OWORD *)v24 + 1) = v222;
          *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
          v223 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v224 = &v24[v223];
          v225 = &v25[v223];
          *((_WORD *)v224 + 24) = *(_WORD *)&v25[v223 + 48];
          v226 = *(_OWORD *)&v25[v223 + 16];
          *(_OWORD *)v224 = *(_OWORD *)&v25[v223];
          *((_OWORD *)v224 + 1) = v226;
          *((_OWORD *)v224 + 2) = *(_OWORD *)&v25[v223 + 32];
          v227 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v228 = &v224[v227];
          v229 = v5;
          v230 = &v225[v227];
          v17(v228, &v225[v227], v465);
          v231 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v35 = &v228[v231];
          v36 = &v230[v231];
          v5 = v229;
          v11 = v465;
        }
        else if (v68 == 1)
        {
LABEL_9:
          *v24 = *v25;
          v27 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v28 = v5;
          v29 = &v24[v27];
          v30 = &v25[v27];
          v17(&v24[v27], v30, v465);
          v31 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v32 = &v29[v31];
          v33 = &v30[v31];
          v17(v32, v33, v465);
          v34 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v35 = &v32[v34];
          v5 = v28;
          v11 = v465;
          v36 = &v33[v34];
        }
        else
        {
LABEL_78:
          v232 = v5;
          v233 = *((_OWORD *)v25 + 1);
          *(_OWORD *)v24 = *(_OWORD *)v25;
          *((_OWORD *)v24 + 1) = v233;
          *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
          v234 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v235 = &v24[v234];
          v236 = &v25[v234];
          *((_WORD *)v235 + 24) = *(_WORD *)&v25[v234 + 48];
          v237 = *(_OWORD *)&v25[v234 + 16];
          *(_OWORD *)v235 = *(_OWORD *)&v25[v234];
          *((_OWORD *)v235 + 1) = v237;
          *((_OWORD *)v235 + 2) = *(_OWORD *)&v25[v234 + 32];
          v238 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v239 = &v235[v238];
          v240 = &v236[v238];
          v241 = &v235[v238];
          v11 = v465;
          v17(v241, &v236[v238], v465);
          v242 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v35 = &v239[v242];
          v36 = &v240[v242];
          v5 = v232;
        }
        *(_OWORD *)v35 = *(_OWORD *)v36;
        swift_storeEnumTagMultiPayload();
        goto LABEL_98;
      case 3u:
        v69 = type metadata accessor for SFAirDropReceive.ItemDestination();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
        }
        else
        {
          v123 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v123 - 8) + 32))(v14, v15, v123);
          swift_storeEnumTagMultiPayload();
        }
        v124 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F0);
        v125 = v124[12];
        v126 = &v14[v125];
        v127 = &v15[v125];
        v128 = *((_OWORD *)v127 + 1);
        *(_OWORD *)v126 = *(_OWORD *)v127;
        *((_OWORD *)v126 + 1) = v128;
        *((_QWORD *)v126 + 4) = *((_QWORD *)v127 + 4);
        *(_OWORD *)&v14[v124[16]] = *(_OWORD *)&v15[v124[16]];
        v129 = v124[20];
        v130 = &v14[v129];
        v131 = &v15[v129];
        v132 = *(_OWORD *)&v15[v129 + 16];
        *(_OWORD *)v130 = *(_OWORD *)&v15[v129];
        *((_OWORD *)v130 + 1) = v132;
        *((_OWORD *)v130 + 2) = *(_OWORD *)&v15[v129 + 32];
        v130[48] = v15[v129 + 48];
        v130[49] = v15[v129 + 49];
        v133 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v134 = &v130[v133];
        v135 = &v131[v133];
        v11 = v465;
        (*(void (**)(char *, char *, uint64_t))(v464 + 32))(v134, &v131[v133], v465);
        v136 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788);
        *(_OWORD *)&v134[*(int *)(v136 + 68)] = *(_OWORD *)&v135[*(int *)(v136 + 68)];
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        v70 = type metadata accessor for SFAirDropReceive.ItemDestination();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
        }
        else
        {
          v137 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 32))(v14, v15, v137);
          swift_storeEnumTagMultiPayload();
        }
        v138 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E8);
        *(_QWORD *)&v14[v138[12]] = *(_QWORD *)&v15[v138[12]];
        *(_QWORD *)&v14[v138[16]] = *(_QWORD *)&v15[v138[16]];
        v139 = v138[20];
        v140 = &v14[v139];
        v141 = &v15[v139];
        *((_WORD *)v140 + 24) = *(_WORD *)&v15[v139 + 48];
        v142 = *(_OWORD *)&v15[v139 + 16];
        *(_OWORD *)v140 = *(_OWORD *)&v15[v139];
        *((_OWORD *)v140 + 1) = v142;
        *((_OWORD *)v140 + 2) = *(_OWORD *)&v15[v139 + 32];
        v143 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v144 = &v140[v143];
        v145 = &v141[v143];
        v11 = v465;
        (*(void (**)(char *, char *, uint64_t))(v464 + 32))(v144, &v141[v143], v465);
        v146 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788);
        *(_OWORD *)&v144[*(int *)(v146 + 68)] = *(_OWORD *)&v145[*(int *)(v146 + 68)];
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        v71 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v37 = v5;
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
        }
        else
        {
          v147 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v147 - 8) + 32))(v14, v15, v147);
          swift_storeEnumTagMultiPayload();
        }
        v148 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
        *(_QWORD *)&v14[*(int *)(v148 + 48)] = *(_QWORD *)&v15[*(int *)(v148 + 48)];
        v149 = *(int *)(v148 + 64);
        v150 = &v14[v149];
        v151 = &v15[v149];
        v43 = *(void (**)(char *, char *, uint64_t))(v464 + 32);
        v43(&v14[v149], &v15[v149], v11);
        v152 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        v150[v152[13]] = v151[v152[13]];
        v153 = v152[14];
        v154 = &v150[v153];
        v155 = &v151[v153];
        v156 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v156 - 8) + 32))(v154, v155, v156);
        v157 = v152[15];
        v88 = &v150[v157];
        v89 = &v151[v157];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v158 = swift_getEnumCaseMultiPayload();
        if (v158 == 2)
          goto LABEL_90;
        if (v158 == 1)
          goto LABEL_60;
        goto LABEL_95;
      case 6u:
        v72 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v37 = v5;
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
        }
        else
        {
          v159 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 32))(v14, v15, v159);
          swift_storeEnumTagMultiPayload();
        }
        v160 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
        *(_QWORD *)&v14[*(int *)(v160 + 48)] = *(_QWORD *)&v15[*(int *)(v160 + 48)];
        v161 = *(int *)(v160 + 64);
        v162 = &v14[v161];
        v163 = &v15[v161];
        v43 = *(void (**)(char *, char *, uint64_t))(v464 + 32);
        v43(&v14[v161], &v15[v161], v11);
        v164 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        v162[v164[13]] = v163[v164[13]];
        v165 = v164[14];
        v166 = &v162[v165];
        v167 = &v163[v165];
        v168 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v168 - 8) + 32))(v166, v167, v168);
        v169 = v164[15];
        v88 = &v162[v169];
        v89 = &v163[v169];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v170 = swift_getEnumCaseMultiPayload();
        if (v170 == 2)
          goto LABEL_90;
        if (v170 == 1)
          goto LABEL_60;
        goto LABEL_95;
      case 7u:
        v73 = type metadata accessor for SFAirDropReceive.ItemDestination();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
        }
        else
        {
          v171 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v171 - 8) + 32))(v14, v15, v171);
          swift_storeEnumTagMultiPayload();
        }
        v172 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D8);
        *(_QWORD *)&v14[*(int *)(v172 + 48)] = *(_QWORD *)&v15[*(int *)(v172 + 48)];
        *(_QWORD *)&v14[*(int *)(v172 + 64)] = *(_QWORD *)&v15[*(int *)(v172 + 64)];
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        v74 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v37 = v5;
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
        }
        else
        {
          v173 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v173 - 8) + 32))(v14, v15, v173);
          swift_storeEnumTagMultiPayload();
        }
        v174 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
        *(_QWORD *)&v14[v174[12]] = *(_QWORD *)&v15[v174[12]];
        *(_QWORD *)&v14[v174[16]] = *(_QWORD *)&v15[v174[16]];
        v175 = v174[20];
        v176 = &v14[v175];
        v177 = &v15[v175];
        v43 = *(void (**)(char *, char *, uint64_t))(v464 + 32);
        v43(&v14[v175], &v15[v175], v11);
        v178 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        v176[v178[13]] = v177[v178[13]];
        v179 = v178[14];
        v180 = &v176[v179];
        v181 = &v177[v179];
        v182 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v182 - 8) + 32))(v180, v181, v182);
        v183 = v178[15];
        v88 = &v176[v183];
        v89 = &v177[v183];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v184 = swift_getEnumCaseMultiPayload();
        if (v184 == 2)
          goto LABEL_90;
        if (v184 == 1)
          goto LABEL_60;
        goto LABEL_95;
      case 9u:
        v75 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v37 = v5;
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
        }
        else
        {
          v192 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v192 - 8) + 32))(v14, v15, v192);
          swift_storeEnumTagMultiPayload();
        }
        v193 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
        *(_QWORD *)&v14[v193[12]] = *(_QWORD *)&v15[v193[12]];
        *(_QWORD *)&v14[v193[16]] = *(_QWORD *)&v15[v193[16]];
        v194 = v193[20];
        v195 = &v14[v194];
        v196 = &v15[v194];
        v43 = *(void (**)(char *, char *, uint64_t))(v464 + 32);
        v43(&v14[v194], &v15[v194], v11);
        v197 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        v195[v197[13]] = v196[v197[13]];
        v198 = v197[14];
        v199 = &v195[v198];
        v200 = &v196[v198];
        v201 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v201 - 8) + 32))(v199, v200, v201);
        v202 = v197[15];
        v88 = &v195[v202];
        v89 = &v196[v202];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v203 = swift_getEnumCaseMultiPayload();
        if (v203 == 2)
          goto LABEL_90;
        if (v203 == 1)
          goto LABEL_60;
        goto LABEL_95;
      case 0xAu:
        v76 = type metadata accessor for SFAirDropReceive.ItemDestination();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
        }
        else
        {
          v204 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v204 - 8) + 32))(v14, v15, v204);
          swift_storeEnumTagMultiPayload();
        }
        v205 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C8);
        *(_QWORD *)&v14[*(int *)(v205 + 48)] = *(_QWORD *)&v15[*(int *)(v205 + 48)];
        *(_QWORD *)&v14[*(int *)(v205 + 64)] = *(_QWORD *)&v15[*(int *)(v205 + 64)];
        swift_storeEnumTagMultiPayload();
        break;
      case 0xBu:
        v37 = v5;
        v77 = *((_OWORD *)v15 + 3);
        *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
        *((_OWORD *)v14 + 3) = v77;
        *((_QWORD *)v14 + 8) = *((_QWORD *)v15 + 8);
        v78 = *((_OWORD *)v15 + 1);
        *(_OWORD *)v14 = *(_OWORD *)v15;
        *((_OWORD *)v14 + 1) = v78;
        v79 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B8) + 48);
        v80 = &v14[v79];
        v81 = &v15[v79];
        v43 = *(void (**)(char *, char *, uint64_t))(v464 + 32);
        v43(&v14[v79], &v15[v79], v11);
        v82 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        v80[v82[13]] = v81[v82[13]];
        v83 = v82[14];
        v84 = &v80[v83];
        v85 = &v81[v83];
        v86 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 32))(v84, v85, v86);
        v87 = v82[15];
        v88 = &v80[v87];
        v89 = &v81[v87];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v90 = swift_getEnumCaseMultiPayload();
        if (v90 == 2)
        {
LABEL_90:
          v259 = *((_OWORD *)v89 + 1);
          *(_OWORD *)v88 = *(_OWORD *)v89;
          *((_OWORD *)v88 + 1) = v259;
          *((_QWORD *)v88 + 4) = *((_QWORD *)v89 + 4);
          v260 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v261 = &v88[v260];
          v262 = &v89[v260];
          *((_WORD *)v261 + 24) = *(_WORD *)&v89[v260 + 48];
          v263 = *(_OWORD *)&v89[v260 + 16];
          *(_OWORD *)v261 = *(_OWORD *)&v89[v260];
          *((_OWORD *)v261 + 1) = v263;
          *((_OWORD *)v261 + 2) = *(_OWORD *)&v89[v260 + 32];
          v264 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v249 = &v261[v264];
          v11 = v465;
          v250 = &v262[v264];
          v251 = v249;
          v252 = &v262[v264];
        }
        else
        {
          if (v90 == 1)
          {
LABEL_60:
            *v88 = *v89;
            v185 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
            v186 = &v88[v185];
            v187 = &v89[v185];
            v43(&v88[v185], v187, v11);
            v188 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
            v189 = &v186[v188];
            v190 = &v187[v188];
            v43(v189, v190, v11);
            v191 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
            v60 = &v189[v191];
            v61 = &v190[v191];
            goto LABEL_97;
          }
LABEL_95:
          v265 = *((_OWORD *)v89 + 1);
          *(_OWORD *)v88 = *(_OWORD *)v89;
          *((_OWORD *)v88 + 1) = v265;
          *((_QWORD *)v88 + 4) = *((_QWORD *)v89 + 4);
          v266 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v267 = &v88[v266];
          v268 = &v89[v266];
          *((_WORD *)v267 + 24) = *(_WORD *)&v89[v266 + 48];
          v269 = *(_OWORD *)&v89[v266 + 16];
          *(_OWORD *)v267 = *(_OWORD *)&v89[v266];
          *((_OWORD *)v267 + 1) = v269;
          *((_OWORD *)v267 + 2) = *(_OWORD *)&v89[v266 + 32];
          v270 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v249 = &v267[v270];
          v250 = &v268[v270];
          v251 = &v267[v270];
          v252 = &v268[v270];
          v11 = v465;
        }
        goto LABEL_96;
      case 0xDu:
        v37 = v5;
        v91 = *((_OWORD *)v15 + 3);
        *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
        *((_OWORD *)v14 + 3) = v91;
        *((_QWORD *)v14 + 8) = *((_QWORD *)v15 + 8);
        v92 = *((_OWORD *)v15 + 1);
        *(_OWORD *)v14 = *(_OWORD *)v15;
        *((_OWORD *)v14 + 1) = v92;
        v93 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A8) + 48);
        v94 = &v14[v93];
        v95 = &v15[v93];
        v43 = *(void (**)(char *, char *, uint64_t))(v464 + 32);
        v43(&v14[v93], &v15[v93], v11);
        v96 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
        v94[v96[13]] = v95[v96[13]];
        v97 = v96[14];
        v98 = &v94[v97];
        v99 = &v95[v97];
        v100 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 32))(v98, v99, v100);
        v101 = v96[15];
        v50 = &v94[v101];
        v51 = &v95[v101];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
        v102 = swift_getEnumCaseMultiPayload();
        if (v102 == 2)
        {
LABEL_80:
          v243 = *((_OWORD *)v51 + 1);
          *(_OWORD *)v50 = *(_OWORD *)v51;
          *((_OWORD *)v50 + 1) = v243;
          *((_QWORD *)v50 + 4) = *((_QWORD *)v51 + 4);
          v244 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
          v245 = &v50[v244];
          v246 = &v51[v244];
          *((_WORD *)v245 + 24) = *(_WORD *)&v51[v244 + 48];
          v247 = *(_OWORD *)&v51[v244 + 16];
          *(_OWORD *)v245 = *(_OWORD *)&v51[v244];
          *((_OWORD *)v245 + 1) = v247;
          *((_OWORD *)v245 + 2) = *(_OWORD *)&v51[v244 + 32];
          v248 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v249 = &v245[v248];
          v11 = v465;
          v250 = &v246[v248];
          v251 = v249;
          v252 = &v246[v248];
        }
        else
        {
          if (v102 == 1)
          {
LABEL_12:
            *v50 = *v51;
            v53 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A8) + 48);
            v54 = &v50[v53];
            v55 = &v51[v53];
            v43(&v50[v53], v55, v11);
            v56 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B0) + 52);
            v57 = &v54[v56];
            v58 = &v55[v56];
            v43(v57, v58, v11);
            v59 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
            v60 = &v57[v59];
            v61 = &v58[v59];
            goto LABEL_97;
          }
LABEL_81:
          v253 = *((_OWORD *)v51 + 1);
          *(_OWORD *)v50 = *(_OWORD *)v51;
          *((_OWORD *)v50 + 1) = v253;
          *((_QWORD *)v50 + 4) = *((_QWORD *)v51 + 4);
          v254 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
          v255 = &v50[v254];
          v256 = &v51[v254];
          *((_WORD *)v255 + 24) = *(_WORD *)&v51[v254 + 48];
          v257 = *(_OWORD *)&v51[v254 + 16];
          *(_OWORD *)v255 = *(_OWORD *)&v51[v254];
          *((_OWORD *)v255 + 1) = v257;
          *((_OWORD *)v255 + 2) = *(_OWORD *)&v51[v254 + 32];
          v258 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v249 = &v255[v258];
          v250 = &v256[v258];
          v251 = &v255[v258];
          v252 = &v256[v258];
          v11 = v465;
        }
LABEL_96:
        v43(v251, v252, v11);
        v271 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v60 = &v249[v271];
        v61 = &v250[v271];
LABEL_97:
        v5 = v37;
        *(_OWORD *)v60 = *(_OWORD *)v61;
        swift_storeEnumTagMultiPayload();
LABEL_98:
        swift_storeEnumTagMultiPayload();
        v4 = v467;
        a3 = v468;
        v12 = v463;
        break;
      case 0xFu:
        v103 = v4;
        v104 = v5;
        v105 = sub_1A2AE30C4();
        v106 = *(_QWORD *)(v105 - 8);
        v107 = *(void (**)(char *, char *, uint64_t))(v106 + 32);
        v107(v14, v15, v105);
        v108 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
        v109 = v108[5];
        v110 = &v14[v109];
        v111 = &v15[v109];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(&v15[v109], 1, v105))
        {
          v112 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
          memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
        }
        else
        {
          v107(v110, v111, v105);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v110, 0, 1, v105);
        }
        v11 = v465;
        v14[v108[6]] = v15[v108[6]];
        v206 = v108[7];
        v207 = &v14[v206];
        v208 = &v15[v206];
        v209 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
        v210 = *(_QWORD *)(v209 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v210 + 48))(v208, 1, v209))
        {
          v211 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
          memcpy(v207, v208, *(_QWORD *)(*(_QWORD *)(v211 - 8) + 64));
        }
        else
        {
          v218 = type metadata accessor for SFAirDropReceive.Failure();
          v219 = *(_QWORD *)(v218 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v219 + 48))(v208, 1, v218))
          {
            memcpy(v207, v208, *(_QWORD *)(v210 + 64));
          }
          else
          {
            if (swift_getEnumCaseMultiPayload())
            {
              memcpy(v207, v208, *(_QWORD *)(v219 + 64));
            }
            else
            {
              *(_OWORD *)v207 = *(_OWORD *)v208;
              v440 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
              v461 = &v207[v440];
              v441 = &v208[v440];
              v442 = sub_1A2AE2F44();
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v442 - 8) + 32))(v461, v441, v442);
              swift_storeEnumTagMultiPayload();
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v219 + 56))(v207, 0, 1, v218);
          }
          v11 = v465;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v210 + 56))(v207, 0, 1, v209);
        }
        v443 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A0);
        v444 = v443[12];
        v445 = &v14[v444];
        v446 = &v15[v444];
        v447 = type metadata accessor for SFAirDropReceive.ItemDestination();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v445, v446, *(_QWORD *)(*(_QWORD *)(v447 - 8) + 64));
        }
        else
        {
          v448 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v448 - 8) + 32))(v445, v446, v448);
          swift_storeEnumTagMultiPayload();
        }
        v5 = v104;
        v4 = v103;
        a3 = v468;
        v12 = v463;
        *(_OWORD *)&v14[v443[16]] = *(_OWORD *)&v15[v443[16]];
        *(_QWORD *)&v14[v443[20]] = *(_QWORD *)&v15[v443[20]];
        *(_QWORD *)&v14[v443[24]] = *(_QWORD *)&v15[v443[24]];
        *(_QWORD *)&v14[v443[28]] = *(_QWORD *)&v15[v443[28]];
        swift_storeEnumTagMultiPayload();
        break;
      case 0x10u:
        v113 = v12;
        v114 = v5;
        v115 = sub_1A2AE30C4();
        v116 = *(_QWORD *)(v115 - 8);
        v117 = *(void (**)(char *, char *, uint64_t))(v116 + 32);
        v117(v14, v15, v115);
        v118 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
        v119 = v118[5];
        v120 = &v14[v119];
        v121 = &v15[v119];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(&v15[v119], 1, v115))
        {
          v122 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
          memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
        }
        else
        {
          v117(v120, v121, v115);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v120, 0, 1, v115);
        }
        v11 = v465;
        v14[v118[6]] = v15[v118[6]];
        v212 = v118[7];
        v213 = &v14[v212];
        v214 = &v15[v212];
        v215 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
        v216 = *(_QWORD *)(v215 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v216 + 48))(v214, 1, v215))
        {
          v217 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
          memcpy(v213, v214, *(_QWORD *)(*(_QWORD *)(v217 - 8) + 64));
          v5 = v114;
        }
        else
        {
          v220 = type metadata accessor for SFAirDropReceive.Failure();
          v221 = *(_QWORD *)(v220 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v221 + 48))(v214, 1, v220))
          {
            memcpy(v213, v214, *(_QWORD *)(v216 + 64));
          }
          else
          {
            if (swift_getEnumCaseMultiPayload())
            {
              memcpy(v213, v214, *(_QWORD *)(v221 + 64));
            }
            else
            {
              *(_OWORD *)v213 = *(_OWORD *)v214;
              v449 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
              v462 = &v213[v449];
              v450 = &v214[v449];
              v451 = sub_1A2AE2F44();
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v451 - 8) + 32))(v462, v450, v451);
              swift_storeEnumTagMultiPayload();
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v221 + 56))(v213, 0, 1, v220);
          }
          v5 = v114;
          v11 = v465;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v213, 0, 1, v215);
        }
        v4 = v467;
        v12 = v113;
        v452 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B398) + 48);
        v453 = &v14[v452];
        v454 = &v15[v452];
        v455 = type metadata accessor for SFAirDropReceive.Failure();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v453, v454, *(_QWORD *)(*(_QWORD *)(v455 - 8) + 64));
        }
        else
        {
          *(_OWORD *)v453 = *(_OWORD *)v454;
          v456 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
          v457 = &v453[v456];
          v458 = &v454[v456];
          v459 = sub_1A2AE2F44();
          v460 = v457;
          v12 = v113;
          v4 = v467;
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v459 - 8) + 32))(v460, v458, v459);
          swift_storeEnumTagMultiPayload();
        }
        a3 = v468;
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        break;
    }
  }
  v272 = a3[8];
  v5[a3[7]] = v4[a3[7]];
  v466 = v5;
  v273 = &v5[v272];
  v274 = &v4[v272];
  v12(&v5[v272], &v4[v272], v11);
  v275 = (int *)type metadata accessor for SFAirDropReceive.AskRequest(0);
  v276 = v275[5];
  v277 = &v273[v276];
  v278 = &v274[v276];
  v279 = v278[16];
  v280 = *(_QWORD *)v277;
  v281 = *((_QWORD *)v277 + 1);
  *(_OWORD *)v277 = *(_OWORD *)v278;
  v282 = v277[16];
  v277[16] = v279;
  sub_1A2994E20(v280, v281, v282);
  *(_QWORD *)&v273[v275[6]] = *(_QWORD *)&v274[v275[6]];
  v273[v275[7]] = v274[v275[7]];
  v273[v275[8]] = v274[v275[8]];
  v273[v275[9]] = v274[v275[9]];
  v283 = v275[10];
  v284 = &v273[v283];
  v285 = &v274[v283];
  v287 = *(_QWORD *)v285;
  v286 = *((_QWORD *)v285 + 1);
  *(_QWORD *)v284 = v287;
  *((_QWORD *)v284 + 1) = v286;
  swift_bridgeObjectRelease();
  v288 = v275[11];
  v289 = &v273[v288];
  v290 = &v274[v288];
  v292 = *(_QWORD *)v290;
  v291 = *((_QWORD *)v290 + 1);
  *(_QWORD *)v289 = v292;
  *((_QWORD *)v289 + 1) = v291;
  swift_bridgeObjectRelease();
  v293 = v275[12];
  v294 = &v273[v293];
  v295 = &v274[v293];
  v297 = *(_QWORD *)v295;
  v296 = *((_QWORD *)v295 + 1);
  *(_QWORD *)v294 = v297;
  *((_QWORD *)v294 + 1) = v296;
  swift_bridgeObjectRelease();
  v298 = v275[13];
  v299 = &v273[v298];
  v300 = &v274[v298];
  v302 = *(_QWORD *)v300;
  v301 = *((_QWORD *)v300 + 1);
  *(_QWORD *)v299 = v302;
  *((_QWORD *)v299 + 1) = v301;
  swift_bridgeObjectRelease();
  v303 = v275[14];
  v304 = &v273[v303];
  v305 = &v274[v303];
  v307 = *(_QWORD *)v305;
  v306 = *((_QWORD *)v305 + 1);
  *(_QWORD *)v304 = v307;
  *((_QWORD *)v304 + 1) = v306;
  swift_bridgeObjectRelease();
  v308 = v275[15];
  v309 = &v273[v308];
  v310 = &v274[v308];
  v312 = *(_QWORD *)v310;
  v311 = *((_QWORD *)v310 + 1);
  *(_QWORD *)v309 = v312;
  *((_QWORD *)v309 + 1) = v311;
  swift_bridgeObjectRelease();
  v313 = v275[16];
  v314 = &v273[v313];
  v315 = &v274[v313];
  v317 = *(_QWORD *)v315;
  v316 = *((_QWORD *)v315 + 1);
  *(_QWORD *)v314 = v317;
  *((_QWORD *)v314 + 1) = v316;
  swift_bridgeObjectRelease();
  v318 = v275[17];
  v319 = &v273[v318];
  v320 = &v274[v318];
  v322 = *(_QWORD *)v320;
  v321 = *((_QWORD *)v320 + 1);
  *(_QWORD *)v319 = v322;
  *((_QWORD *)v319 + 1) = v321;
  swift_bridgeObjectRelease();
  v323 = v275[18];
  v324 = &v273[v323];
  v325 = &v274[v323];
  v327 = *(_QWORD *)v325;
  v326 = *((_QWORD *)v325 + 1);
  *(_QWORD *)v324 = v327;
  *((_QWORD *)v324 + 1) = v326;
  swift_bridgeObjectRelease();
  v328 = v275[19];
  v329 = &v273[v328];
  v330 = &v274[v328];
  v332 = *(_QWORD *)v330;
  v331 = *((_QWORD *)v330 + 1);
  *(_QWORD *)v329 = v332;
  *((_QWORD *)v329 + 1) = v331;
  swift_bridgeObjectRelease();
  v333 = v275[20];
  v334 = *(void **)&v273[v333];
  *(_QWORD *)&v273[v333] = *(_QWORD *)&v274[v333];

  v335 = v275[21];
  v336 = *(void **)&v273[v335];
  *(_QWORD *)&v273[v335] = *(_QWORD *)&v274[v335];

  v337 = v275[22];
  v338 = *(void **)&v273[v337];
  *(_QWORD *)&v273[v337] = *(_QWORD *)&v274[v337];

  v339 = v275[23];
  v340 = &v273[v339];
  v341 = &v274[v339];
  v343 = *(_QWORD *)v341;
  v342 = *((_QWORD *)v341 + 1);
  *(_QWORD *)v340 = v343;
  *((_QWORD *)v340 + 1) = v342;
  swift_bridgeObjectRelease();
  v344 = v275[24];
  v345 = &v273[v344];
  v346 = &v274[v344];
  v347 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
  v348 = *(_QWORD *)(v347 - 8);
  v349 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v348 + 48);
  v350 = v349(v345, 1, v347);
  v351 = v349(v346, 1, v347);
  if (!v350)
  {
    if (!v351)
    {
      if (v466 == v467)
        goto LABEL_112;
      sub_1A297DA3C((uint64_t)v345, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v359 = *((_OWORD *)v346 + 1);
        *(_OWORD *)v345 = *(_OWORD *)v346;
        *((_OWORD *)v345 + 1) = v359;
        v360 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D0);
        v361 = *(int *)(v360 + 64);
        v362 = &v345[v361];
        v363 = &v346[v361];
        v364 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v364 - 8) + 32))(v362, v363, v364);
        v345[*(int *)(v360 + 80)] = v346[*(int *)(v360 + 80)];
        swift_storeEnumTagMultiPayload();
        goto LABEL_112;
      }
      v358 = *(_QWORD *)(v348 + 64);
LABEL_106:
      memcpy(v345, v346, v358);
      goto LABEL_112;
    }
    sub_1A297DA3C((uint64_t)v345, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
LABEL_105:
    v358 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D8) - 8) + 64);
    goto LABEL_106;
  }
  if (v351)
    goto LABEL_105;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v352 = *((_OWORD *)v346 + 1);
    *(_OWORD *)v345 = *(_OWORD *)v346;
    *((_OWORD *)v345 + 1) = v352;
    v353 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D0);
    v354 = *(int *)(v353 + 64);
    v355 = &v345[v354];
    v356 = &v346[v354];
    v357 = sub_1A2AE30C4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v357 - 8) + 32))(v355, v356, v357);
    v345[*(int *)(v353 + 80)] = v346[*(int *)(v353 + 80)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v345, v346, *(_QWORD *)(v348 + 64));
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v348 + 56))(v345, 0, 1, v347);
LABEL_112:
  *(_QWORD *)&v273[v275[25]] = *(_QWORD *)&v274[v275[25]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v273[v275[26]] = *(_QWORD *)&v274[v275[26]];
  swift_bridgeObjectRelease();
  v365 = v275[27];
  v366 = (uint64_t)&v273[v365];
  v367 = &v274[v365];
  v368 = *(_QWORD *)(v366 + 8);
  if (v368 >> 60 == 15)
  {
LABEL_115:
    *(_OWORD *)v366 = *(_OWORD *)v367;
    goto LABEL_117;
  }
  v369 = *((_QWORD *)v367 + 1);
  if (v369 >> 60 == 15)
  {
    sub_1A299C970(v366);
    goto LABEL_115;
  }
  v370 = *(_QWORD *)v366;
  *(_QWORD *)v366 = *(_QWORD *)v367;
  *(_QWORD *)(v366 + 8) = v369;
  sub_1A29736C4(v370, v368);
LABEL_117:
  v371 = v467;
  v372 = v468;
  v373 = v468[9];
  v374 = &v466[v373];
  v375 = &v467[v373];
  v376 = type metadata accessor for SFAirDropReceive.AskResponse();
  v377 = *(_QWORD *)(v376 - 8);
  v378 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v377 + 48);
  v379 = v378(v374, 1, v376);
  v380 = v378(v375, 1, v376);
  if (!v379)
  {
    if (!v380)
    {
      v384 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
      v385 = *(_QWORD *)(v384 - 8);
      v386 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v385 + 48);
      v387 = v386(v374, 3, v384);
      v388 = v386(v375, 3, v384);
      if (v387)
      {
        if (!v388)
        {
          v389 = type metadata accessor for SFAirDropReceive.ItemDestination();
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v374, v375, *(_QWORD *)(*(_QWORD *)(v389 - 8) + 64));
          }
          else
          {
            v427 = sub_1A2AE2F44();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v427 - 8) + 32))(v374, v375, v427);
            swift_storeEnumTagMultiPayload();
          }
          v428 = *(int *)(v384 + 48);
          v429 = &v374[v428];
          v430 = &v375[v428];
          *(_OWORD *)v429 = *(_OWORD *)v430;
          *((_QWORD *)v429 + 2) = *((_QWORD *)v430 + 2);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v385 + 56))(v374, 0, 3, v384);
          v372 = v468;
          goto LABEL_138;
        }
      }
      else
      {
        if (!v388)
        {
          if (v466 != v467)
          {
            sub_1A297DA3C((uint64_t)v374, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.ItemDestination);
            v426 = type metadata accessor for SFAirDropReceive.ItemDestination();
            if (swift_getEnumCaseMultiPayload())
            {
              memcpy(v374, v375, *(_QWORD *)(*(_QWORD *)(v426 - 8) + 64));
            }
            else
            {
              v431 = sub_1A2AE2F44();
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v431 - 8) + 32))(v374, v375, v431);
              swift_storeEnumTagMultiPayload();
            }
            v372 = v468;
          }
          v432 = *(int *)(v384 + 48);
          v433 = &v374[v432];
          v434 = &v375[v432];
          *v433 = *v434;
          v435 = v433 + 8;
          v436 = v434 + 8;
          v437 = *((_QWORD *)v433 + 2);
          if (v437 >> 60 != 15)
          {
            v438 = *((_QWORD *)v434 + 2);
            if (v438 >> 60 != 15)
            {
              v439 = *((_QWORD *)v433 + 1);
              *((_QWORD *)v433 + 1) = *v436;
              *((_QWORD *)v433 + 2) = v438;
              sub_1A29736C4(v439, v437);
              goto LABEL_138;
            }
            sub_1A299C970((uint64_t)(v433 + 8));
          }
          *v435 = *(_OWORD *)v436;
          goto LABEL_138;
        }
        sub_1A296F108((uint64_t)v374, &qword_1EE67B7E0);
      }
      v383 = *(_QWORD *)(v377 + 64);
LABEL_124:
      memcpy(v374, v375, v383);
      goto LABEL_138;
    }
    sub_1A297DA3C((uint64_t)v374, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.AskResponse);
LABEL_123:
    v383 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B6F8) - 8) + 64);
    goto LABEL_124;
  }
  if (v380)
    goto LABEL_123;
  v381 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
  v382 = *(_QWORD *)(v381 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v382 + 48))(v375, 3, v381))
  {
    memcpy(v374, v375, *(_QWORD *)(v377 + 64));
  }
  else
  {
    v390 = type metadata accessor for SFAirDropReceive.ItemDestination();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v374, v375, *(_QWORD *)(*(_QWORD *)(v390 - 8) + 64));
    }
    else
    {
      v391 = sub_1A2AE2F44();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v391 - 8) + 32))(v374, v375, v391);
      swift_storeEnumTagMultiPayload();
    }
    v392 = *(int *)(v381 + 48);
    v393 = &v374[v392];
    v394 = &v375[v392];
    *(_OWORD *)v393 = *(_OWORD *)v394;
    *((_QWORD *)v393 + 2) = *((_QWORD *)v394 + 2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v382 + 56))(v374, 0, 3, v381);
    v371 = v467;
  }
  v372 = v468;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v377 + 56))(v374, 0, 1, v376);
LABEL_138:
  v395 = v372[10];
  v396 = &v466[v395];
  v397 = &v371[v395];
  v398 = sub_1A2AE30C4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v398 - 8) + 40))(v396, v397, v398);
  v399 = v372[12];
  v466[v372[11]] = v371[v372[11]];
  v466[v399] = v371[v399];
  v400 = v372[13];
  v401 = (uint64_t)&v466[v400];
  v402 = &v371[v400];
  v403 = type metadata accessor for SFAirDrop.DeclineAction();
  v404 = *(_QWORD *)(v403 - 8);
  v405 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v404 + 48);
  LODWORD(v396) = v405(v401, 1, v403);
  v406 = v405((uint64_t)v402, 1, v403);
  if (!(_DWORD)v396)
  {
    if (!v406)
    {
      v414 = *((_QWORD *)v402 + 1);
      *(_QWORD *)v401 = *(_QWORD *)v402;
      *(_QWORD *)(v401 + 8) = v414;
      swift_bridgeObjectRelease();
      v415 = v402[48];
      v416 = *(_QWORD *)(v401 + 16);
      v417 = *(_QWORD *)(v401 + 24);
      v418 = *(_QWORD *)(v401 + 32);
      v419 = *(_QWORD *)(v401 + 40);
      v420 = *((_OWORD *)v402 + 2);
      *(_OWORD *)(v401 + 16) = *((_OWORD *)v402 + 1);
      *(_OWORD *)(v401 + 32) = v420;
      v421 = *(_BYTE *)(v401 + 48);
      *(_BYTE *)(v401 + 48) = v415;
      sub_1A2994DD4(v416, v417, v418, v419, v421);
      *(_BYTE *)(v401 + 49) = v402[49];
      v422 = *(int *)(v403 + 28);
      v423 = v401 + v422;
      v424 = &v402[v422];
      v463((char *)(v401 + v422), &v402[v422], v465);
      v425 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788);
      *(_OWORD *)(v423 + *(int *)(v425 + 68)) = *(_OWORD *)&v424[*(int *)(v425 + 68)];
      swift_release();
      goto LABEL_144;
    }
    sub_1A297DA3C(v401, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.DeclineAction);
    goto LABEL_143;
  }
  if (v406)
  {
LABEL_143:
    v412 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B700);
    memcpy((void *)v401, v402, *(_QWORD *)(*(_QWORD *)(v412 - 8) + 64));
    goto LABEL_144;
  }
  v407 = *((_OWORD *)v402 + 1);
  *(_OWORD *)v401 = *(_OWORD *)v402;
  *(_OWORD *)(v401 + 16) = v407;
  *(_OWORD *)(v401 + 32) = *((_OWORD *)v402 + 2);
  *(_WORD *)(v401 + 48) = *((_WORD *)v402 + 24);
  v408 = *(int *)(v403 + 28);
  v409 = v401 + v408;
  v410 = &v402[v408];
  (*(void (**)(uint64_t, char *, uint64_t))(v464 + 32))(v401 + v408, &v402[v408], v465);
  v411 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788);
  *(_OWORD *)(v409 + *(int *)(v411 + 68)) = *(_OWORD *)&v410[*(int *)(v411 + 68)];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v404 + 56))(v401, 0, 1, v403);
LABEL_144:
  v466[v372[14]] = v371[v372[14]];
  return v466;
}

uint64_t _s8TransferVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A29A1A10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for SFAirDropClient.Identifier();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = sub_1A2AE3130();
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  v10 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v13;
    v12 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 254)
  {
    v15 = type metadata accessor for SFAirDropReceive.AskRequest(0);
    v10 = *(_QWORD *)(v15 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v15;
      v12 = a3[8];
    }
    else
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B6F8);
      v10 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
      {
        v11 = v16;
        v12 = a3[9];
      }
      else
      {
        v17 = sub_1A2AE30C4();
        v10 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
        {
          v11 = v17;
          v12 = a3[10];
        }
        else
        {
          v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B700);
          v10 = *(_QWORD *)(v11 - 8);
          v12 = a3[13];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v14 = *(unsigned __int8 *)(a1 + a3[7]);
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

uint64_t _s8TransferVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A29A1B78(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = type metadata accessor for SFAirDropClient.Identifier();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_1A2AE3130();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      result = type metadata accessor for SFAirDropReceive.Transfer.State(0);
      v14 = *(_QWORD *)(result - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = result;
        v15 = a4[6];
      }
      else
      {
        if (a3 == 254)
        {
          *(_BYTE *)(a1 + a4[7]) = a2 + 1;
          return result;
        }
        v17 = type metadata accessor for SFAirDropReceive.AskRequest(0);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[8];
        }
        else
        {
          v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B6F8);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[9];
          }
          else
          {
            v19 = sub_1A2AE30C4();
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[10];
            }
            else
            {
              v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B700);
              v14 = *(_QWORD *)(v10 - 8);
              v15 = a4[13];
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1A29A1CD4()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  type metadata accessor for SFAirDropClient.Identifier();
  if (v0 <= 0x3F)
  {
    sub_1A2AE3130();
    if (v1 <= 0x3F)
    {
      type metadata accessor for SFAirDropReceive.Transfer.State(319);
      if (v2 <= 0x3F)
      {
        type metadata accessor for SFAirDropReceive.AskRequest(319);
        if (v3 <= 0x3F)
        {
          sub_1A29A1E18(319, (unint64_t *)&unk_1EE675240, (void (*)(uint64_t))type metadata accessor for SFAirDropReceive.AskResponse);
          if (v4 <= 0x3F)
          {
            sub_1A2AE30C4();
            if (v5 <= 0x3F)
            {
              sub_1A29A1E18(319, &qword_1EE674F30, (void (*)(uint64_t))type metadata accessor for SFAirDrop.DeclineAction);
              if (v6 <= 0x3F)
                swift_initStructMetadata();
            }
          }
        }
      }
    }
  }
}

void sub_1A29A1E18(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1A2AE39F4();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t _s8TransferV5StateOwCP(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t, uint64_t);
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t *v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t, uint64_t);
  int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  unint64_t v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(unint64_t, uint64_t, uint64_t);
  int *v137;
  uint64_t v138;
  void *v139;
  const void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(unint64_t, uint64_t, uint64_t);
  int *v145;
  uint64_t v146;
  void *v147;
  const void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned __int8 v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned __int8 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned __int8 v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unsigned __int8 v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  int *v267;
  uint64_t v268;
  uint64_t *v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  int *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned __int8 v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  _QWORD *v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  int *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  int *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  int *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  int v354;
  uint64_t v355;
  char *v356;
  char *v357;
  uint64_t v358;
  uint64_t v359;
  int *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  int *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  char *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unsigned __int8 v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  char *v387;
  char *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unsigned __int8 v394;
  uint64_t v395;
  char *v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  int *v404;
  uint64_t v405;
  uint64_t *v406;
  uint64_t *v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  _QWORD *v415;
  _QWORD *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  _QWORD *v421;
  _QWORD *v422;
  uint64_t v423;
  int v424;
  uint64_t v425;
  uint64_t v426;
  char *v427;
  char *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  void (*v432)(char *, char *, uint64_t);
  void (*v433)(char *, char *, uint64_t);
  void (*v434)(char *, char *, uint64_t);
  void (*v435)(char *, char *, uint64_t);
  void (*v436)(char *, char *, uint64_t);
  void (*v437)(char *, char *, uint64_t);
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v18 + ((v6 + 16) & ~(unint64_t)v6);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = sub_1A2AE3130();
        v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
        v8(a1, a2, v7);
        v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(a1 + v9[13]) = *(_BYTE *)(a2 + v9[13]);
        v10 = v9[14];
        v11 = a1 + v10;
        v12 = a2 + v10;
        v13 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
        v14 = v9[15];
        v15 = (_QWORD *)(a1 + v14);
        v16 = (_QWORD *)(a2 + v14);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
          goto LABEL_79;
        if (EnumCaseMultiPayload != 1)
          goto LABEL_76;
        goto LABEL_14;
      case 1u:
        v20 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v20;
        v21 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = v21;
        v22 = *(_QWORD *)(a2 + 32);
        v23 = *(_QWORD *)(a2 + 40);
        v24 = *(_BYTE *)(a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        *(_QWORD *)(a1 + 32) = v22;
        *(_QWORD *)(a1 + 40) = v23;
        *(_BYTE *)(a1 + 48) = v24;
        v25 = *(_QWORD *)(a2 + 56);
        v26 = *(_QWORD *)(a2 + 64);
        sub_1A2973524(v25, v26);
        *(_QWORD *)(a1 + 56) = v25;
        *(_QWORD *)(a1 + 64) = v26;
        v27 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F8) + 48);
        v28 = a1 + v27;
        v29 = a2 + v27;
        v30 = sub_1A2AE3130();
        v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
        v31(v28, v29, v30);
        v32 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
        *(_BYTE *)(v28 + v32[13]) = *(_BYTE *)(v29 + v32[13]);
        v33 = v32[14];
        v34 = v28 + v33;
        v35 = v29 + v33;
        v36 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
        v37 = v32[15];
        v38 = (_QWORD *)(v28 + v37);
        v39 = (_QWORD *)(v29 + v37);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
        v40 = swift_getEnumCaseMultiPayload();
        if (v40 == 2)
          goto LABEL_77;
        if (v40 == 1)
          goto LABEL_11;
        goto LABEL_78;
      case 2u:
        v7 = sub_1A2AE3130();
        v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
        v8(a1, a2, v7);
        v48 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(a1 + v48[13]) = *(_BYTE *)(a2 + v48[13]);
        v49 = v48[14];
        v50 = a1 + v49;
        v51 = a2 + v49;
        v52 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
        v53 = v48[15];
        v15 = (_QWORD *)(a1 + v53);
        v16 = (_QWORD *)(a2 + v53);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v54 = swift_getEnumCaseMultiPayload();
        if (v54 == 2)
        {
LABEL_79:
          v225 = v16[1];
          *v15 = *v16;
          v15[1] = v225;
          v226 = v16[3];
          v15[2] = v16[2];
          v15[3] = v226;
          v441 = v7;
          v15[4] = v16[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v227 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v228 = (char *)v15 + v227;
          v229 = (char *)v16 + v227;
          v230 = *(_QWORD *)((char *)v16 + v227 + 8);
          *(_QWORD *)v228 = *(_QWORD *)((char *)v16 + v227);
          *((_QWORD *)v228 + 1) = v230;
          v231 = *(_QWORD *)((char *)v16 + v227 + 16);
          v232 = *(_QWORD *)((char *)v16 + v227 + 24);
          v435 = (void (*)(char *, char *, uint64_t))v8;
          v233 = *((_QWORD *)v229 + 4);
          v234 = *((_QWORD *)v229 + 5);
          v235 = v229[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v231, v232, v233, v234, v235);
          *((_QWORD *)v228 + 2) = v231;
          *((_QWORD *)v228 + 3) = v232;
          *((_QWORD *)v228 + 4) = v233;
          *((_QWORD *)v228 + 5) = v234;
          v228[48] = v235;
          v228[49] = v229[49];
          v236 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v59 = &v228[v236];
          v60 = &v229[v236];
          v435(&v228[v236], &v229[v236], v441);
          v61 = &qword_1EE67B788;
        }
        else
        {
          if (v54 != 1)
          {
LABEL_76:
            v432 = (void (*)(char *, char *, uint64_t))v8;
            v438 = v7;
            v181 = v16[1];
            *v15 = *v16;
            v15[1] = v181;
            v182 = v16[3];
            v15[2] = v16[2];
            v15[3] = v182;
            v15[4] = v16[4];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v183 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
            v184 = (char *)v15 + v183;
            v185 = (char *)v16 + v183;
            v186 = *(_QWORD *)((char *)v16 + v183 + 8);
            *(_QWORD *)v184 = *(_QWORD *)((char *)v16 + v183);
            *((_QWORD *)v184 + 1) = v186;
            v187 = *(_QWORD *)((char *)v16 + v183 + 16);
            v188 = *((_QWORD *)v185 + 3);
            v189 = *((_QWORD *)v185 + 4);
            v190 = *((_QWORD *)v185 + 5);
            v191 = v185[48];
            swift_bridgeObjectRetain();
            sub_1A2993E10(v187, v188, v189, v190, v191);
            *((_QWORD *)v184 + 2) = v187;
            *((_QWORD *)v184 + 3) = v188;
            *((_QWORD *)v184 + 4) = v189;
            *((_QWORD *)v184 + 5) = v190;
            v184[48] = v191;
            v184[49] = v185[49];
            v192 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
            v193 = &v184[v192];
            v194 = &v185[v192];
            v432(&v184[v192], &v185[v192], v438);
            v195 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
            v196 = &v193[v195];
            v197 = &v194[v195];
            goto LABEL_162;
          }
LABEL_14:
          *(_BYTE *)v15 = *(_BYTE *)v16;
          v55 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v56 = (char *)v15 + v55;
          v57 = (char *)v16 + v55;
          v8((unint64_t)v15 + v55, (uint64_t)v57, v7);
          v58 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v59 = &v56[v58];
          v60 = &v57[v58];
          v8((unint64_t)v59, (uint64_t)v60, v7);
          v61 = &qword_1EE67B7A0;
        }
        v237 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v61) + 68);
        v196 = &v59[v237];
        v197 = &v60[v237];
        goto LABEL_162;
      case 3u:
        v62 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v63 = swift_getEnumCaseMultiPayload();
        if (v63 == 2)
        {
          v238 = *(_QWORD *)(a2 + 8);
          if (v238 >> 60 == 15)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
          }
          else
          {
            v266 = *(_QWORD *)a2;
            sub_1A2973524(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
            *(_QWORD *)a1 = v266;
            *(_QWORD *)(a1 + 8) = v238;
          }
        }
        else if (v63 == 1)
        {
          v239 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = v239;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v63)
          {
            memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
            goto LABEL_126;
          }
          v64 = sub_1A2AE2F44();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(a1, a2, v64);
        }
        swift_storeEnumTagMultiPayload();
LABEL_126:
        v267 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F0);
        v268 = v267[12];
        v269 = (uint64_t *)(a1 + v268);
        v270 = (uint64_t *)(a2 + v268);
        v271 = *v270;
        v272 = v270[1];
        v273 = v270[2];
        v274 = v270[3];
        v275 = v270[4];
        sub_1A2993E5C(*v270, v272, v273);
        *v269 = v271;
        v269[1] = v272;
        v269[2] = v273;
        v269[3] = v274;
        v269[4] = v275;
        v276 = v267[16];
        v277 = (_QWORD *)(a1 + v276);
        v278 = (_QWORD *)(a2 + v276);
        v279 = v278[1];
        *v277 = *v278;
        v277[1] = v279;
        v280 = v267[20];
        v281 = a1 + v280;
        v282 = a2 + v280;
        v283 = *(_QWORD *)(a2 + v280);
        v284 = *(_QWORD *)(v282 + 8);
        *(_QWORD *)v281 = v283;
        *(_QWORD *)(v281 + 8) = v284;
        v285 = *(_QWORD *)(v282 + 16);
        v286 = *(_QWORD *)(v282 + 24);
        v287 = *(_QWORD *)(v282 + 32);
        v288 = *(_QWORD *)(v282 + 40);
        LOBYTE(v274) = *(_BYTE *)(v282 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A2993E10(v285, v286, v287, v288, v274);
        *(_QWORD *)(v281 + 16) = v285;
        *(_QWORD *)(v281 + 24) = v286;
        *(_QWORD *)(v281 + 32) = v287;
        *(_QWORD *)(v281 + 40) = v288;
        *(_BYTE *)(v281 + 48) = v274;
        *(_BYTE *)(v281 + 49) = *(_BYTE *)(v282 + 49);
        v289 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v290 = v281 + v289;
        v291 = v282 + v289;
        v292 = sub_1A2AE3130();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v292 - 8) + 16))(v290, v291, v292);
        v293 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v294 = (_QWORD *)(v290 + v293);
        v295 = (_QWORD *)(v291 + v293);
        v296 = v295[1];
        *v294 = *v295;
        v294[1] = v296;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 4u:
        v65 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v66 = swift_getEnumCaseMultiPayload();
        if (v66 == 2)
        {
          v240 = *(_QWORD *)(a2 + 8);
          if (v240 >> 60 == 15)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
          }
          else
          {
            v297 = *(_QWORD *)a2;
            sub_1A2973524(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
            *(_QWORD *)a1 = v297;
            *(_QWORD *)(a1 + 8) = v240;
          }
        }
        else if (v66 == 1)
        {
          v241 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = v241;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v66)
          {
            memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
            goto LABEL_129;
          }
          v67 = sub_1A2AE2F44();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(a1, a2, v67);
        }
        swift_storeEnumTagMultiPayload();
LABEL_129:
        v298 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E8);
        *(_QWORD *)(a1 + v298[12]) = *(_QWORD *)(a2 + v298[12]);
        *(_QWORD *)(a1 + v298[16]) = *(_QWORD *)(a2 + v298[16]);
        v299 = v298[20];
        v300 = a1 + v299;
        v301 = a2 + v299;
        v302 = *(_QWORD *)(a2 + v299);
        v303 = *(_QWORD *)(v301 + 8);
        *(_QWORD *)v300 = v302;
        *(_QWORD *)(v300 + 8) = v303;
        v304 = *(_QWORD *)(v301 + 16);
        v305 = *(_QWORD *)(v301 + 24);
        v306 = *(_QWORD *)(v301 + 32);
        v307 = *(_QWORD *)(v301 + 40);
        v308 = *(_BYTE *)(v301 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A2993E10(v304, v305, v306, v307, v308);
        *(_QWORD *)(v300 + 16) = v304;
        *(_QWORD *)(v300 + 24) = v305;
        *(_QWORD *)(v300 + 32) = v306;
        *(_QWORD *)(v300 + 40) = v307;
        *(_BYTE *)(v300 + 48) = v308;
        *(_BYTE *)(v300 + 49) = *(_BYTE *)(v301 + 49);
        v309 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v310 = v300 + v309;
        v311 = v301 + v309;
        v312 = sub_1A2AE3130();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v312 - 8) + 16))(v310, v311, v312);
        v313 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v314 = (_QWORD *)(v310 + v313);
        v315 = (_QWORD *)(v311 + v313);
        v316 = v315[1];
        *v314 = *v315;
        v314[1] = v316;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 5u:
        v68 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v69 = swift_getEnumCaseMultiPayload();
        if (v69 == 2)
        {
          v242 = *(_QWORD *)(a2 + 8);
          if (v242 >> 60 == 15)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
          }
          else
          {
            v317 = *(_QWORD *)a2;
            sub_1A2973524(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
            *(_QWORD *)a1 = v317;
            *(_QWORD *)(a1 + 8) = v242;
          }
        }
        else if (v69 == 1)
        {
          v243 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = v243;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v69)
          {
            memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
            goto LABEL_132;
          }
          v70 = sub_1A2AE2F44();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(a1, a2, v70);
        }
        swift_storeEnumTagMultiPayload();
LABEL_132:
        v318 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
        *(_QWORD *)(a1 + *(int *)(v318 + 48)) = *(_QWORD *)(a2 + *(int *)(v318 + 48));
        v319 = *(int *)(v318 + 64);
        v320 = a1 + v319;
        v321 = a2 + v319;
        v96 = sub_1A2AE3130();
        v97 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 16);
        swift_bridgeObjectRetain();
        v97(v320, v321, v96);
        v322 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(v320 + v322[13]) = *(_BYTE *)(v321 + v322[13]);
        v323 = v322[14];
        v324 = v320 + v323;
        v325 = v321 + v323;
        v326 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v326 - 8) + 16))(v324, v325, v326);
        v327 = v322[15];
        v104 = (_QWORD *)(v320 + v327);
        v105 = (_QWORD *)(v321 + v327);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v328 = swift_getEnumCaseMultiPayload();
        if (v328 == 2)
          goto LABEL_159;
        if (v328 == 1)
          goto LABEL_151;
        goto LABEL_161;
      case 6u:
        v71 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v72 = swift_getEnumCaseMultiPayload();
        if (v72 == 2)
        {
          v244 = *(_QWORD *)(a2 + 8);
          if (v244 >> 60 == 15)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
          }
          else
          {
            v329 = *(_QWORD *)a2;
            sub_1A2973524(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
            *(_QWORD *)a1 = v329;
            *(_QWORD *)(a1 + 8) = v244;
          }
        }
        else if (v72 == 1)
        {
          v245 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = v245;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v72)
          {
            memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
            goto LABEL_139;
          }
          v73 = sub_1A2AE2F44();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(a1, a2, v73);
        }
        swift_storeEnumTagMultiPayload();
LABEL_139:
        v330 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
        *(_QWORD *)(a1 + *(int *)(v330 + 48)) = *(_QWORD *)(a2 + *(int *)(v330 + 48));
        v331 = *(int *)(v330 + 64);
        v332 = a1 + v331;
        v333 = a2 + v331;
        v96 = sub_1A2AE3130();
        v97 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 16);
        swift_bridgeObjectRetain();
        v97(v332, v333, v96);
        v334 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(v332 + v334[13]) = *(_BYTE *)(v333 + v334[13]);
        v335 = v334[14];
        v336 = v332 + v335;
        v337 = v333 + v335;
        v338 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v338 - 8) + 16))(v336, v337, v338);
        v339 = v334[15];
        v104 = (_QWORD *)(v332 + v339);
        v105 = (_QWORD *)(v333 + v339);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v340 = swift_getEnumCaseMultiPayload();
        if (v340 == 2)
          goto LABEL_159;
        if (v340 == 1)
          goto LABEL_151;
        goto LABEL_161;
      case 7u:
        v74 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v75 = swift_getEnumCaseMultiPayload();
        if (v75 == 2)
        {
          v246 = *(_QWORD *)(a2 + 8);
          if (v246 >> 60 == 15)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
          }
          else
          {
            v341 = *(_QWORD *)a2;
            sub_1A2973524(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
            *(_QWORD *)a1 = v341;
            *(_QWORD *)(a1 + 8) = v246;
          }
        }
        else if (v75 == 1)
        {
          v247 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = v247;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v75)
          {
            memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
            goto LABEL_146;
          }
          v76 = sub_1A2AE2F44();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(a1, a2, v76);
        }
        swift_storeEnumTagMultiPayload();
LABEL_146:
        v342 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D8);
        *(_QWORD *)(a1 + *(int *)(v342 + 48)) = *(_QWORD *)(a2 + *(int *)(v342 + 48));
        *(_QWORD *)(a1 + *(int *)(v342 + 64)) = *(_QWORD *)(a2 + *(int *)(v342 + 64));
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 8u:
        v77 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v78 = swift_getEnumCaseMultiPayload();
        if (v78 == 2)
        {
          v248 = *(_QWORD *)(a2 + 8);
          if (v248 >> 60 == 15)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
          }
          else
          {
            v343 = *(_QWORD *)a2;
            sub_1A2973524(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
            *(_QWORD *)a1 = v343;
            *(_QWORD *)(a1 + 8) = v248;
          }
        }
        else if (v78 == 1)
        {
          v249 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = v249;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v78)
          {
            memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
            goto LABEL_149;
          }
          v79 = sub_1A2AE2F44();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(a1, a2, v79);
        }
        swift_storeEnumTagMultiPayload();
LABEL_149:
        v344 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
        *(_QWORD *)(a1 + v344[12]) = *(_QWORD *)(a2 + v344[12]);
        *(_QWORD *)(a1 + v344[16]) = *(_QWORD *)(a2 + v344[16]);
        v345 = v344[20];
        v346 = a1 + v345;
        v347 = a2 + v345;
        v96 = sub_1A2AE3130();
        v97 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v97(v346, v347, v96);
        v348 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(v346 + v348[13]) = *(_BYTE *)(v347 + v348[13]);
        v349 = v348[14];
        v350 = v346 + v349;
        v351 = v347 + v349;
        v352 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v352 - 8) + 16))(v350, v351, v352);
        v353 = v348[15];
        v104 = (_QWORD *)(v346 + v353);
        v105 = (_QWORD *)(v347 + v353);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v354 = swift_getEnumCaseMultiPayload();
        if (v354 == 2)
          goto LABEL_159;
        if (v354 == 1)
          goto LABEL_151;
        goto LABEL_161;
      case 9u:
        v80 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v81 = swift_getEnumCaseMultiPayload();
        if (v81 == 2)
        {
          v250 = *(_QWORD *)(a2 + 8);
          if (v250 >> 60 == 15)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
          }
          else
          {
            v359 = *(_QWORD *)a2;
            sub_1A2973524(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
            *(_QWORD *)a1 = v359;
            *(_QWORD *)(a1 + 8) = v250;
          }
        }
        else if (v81 == 1)
        {
          v251 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = v251;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v81)
          {
            memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
            goto LABEL_156;
          }
          v82 = sub_1A2AE2F44();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(a1, a2, v82);
        }
        swift_storeEnumTagMultiPayload();
LABEL_156:
        v360 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
        *(_QWORD *)(a1 + v360[12]) = *(_QWORD *)(a2 + v360[12]);
        *(_QWORD *)(a1 + v360[16]) = *(_QWORD *)(a2 + v360[16]);
        v361 = v360[20];
        v362 = a1 + v361;
        v363 = a2 + v361;
        v96 = sub_1A2AE3130();
        v97 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v97(v362, v363, v96);
        v364 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(v362 + v364[13]) = *(_BYTE *)(v363 + v364[13]);
        v365 = v364[14];
        v366 = v362 + v365;
        v367 = v363 + v365;
        v368 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v368 - 8) + 16))(v366, v367, v368);
        v369 = v364[15];
        v104 = (_QWORD *)(v362 + v369);
        v105 = (_QWORD *)(v363 + v369);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v370 = swift_getEnumCaseMultiPayload();
        if (v370 == 2)
        {
LABEL_159:
          v371 = v105[1];
          *v104 = *v105;
          v104[1] = v371;
          v372 = v105[3];
          v104[2] = v105[2];
          v104[3] = v372;
          v104[4] = v105[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v373 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v374 = (char *)v104 + v373;
          v375 = (char *)v105 + v373;
          v376 = *(_QWORD *)((char *)v105 + v373 + 8);
          *(_QWORD *)v374 = *(_QWORD *)((char *)v105 + v373);
          *((_QWORD *)v374 + 1) = v376;
          v377 = *(_QWORD *)((char *)v105 + v373 + 16);
          v378 = *(_QWORD *)((char *)v105 + v373 + 24);
          v436 = (void (*)(char *, char *, uint64_t))v97;
          v442 = v96;
          v379 = *((_QWORD *)v375 + 4);
          v380 = *((_QWORD *)v375 + 5);
          v381 = v375[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v377, v378, v379, v380, v381);
          *((_QWORD *)v374 + 2) = v377;
          *((_QWORD *)v374 + 3) = v378;
          *((_QWORD *)v374 + 4) = v379;
          *((_QWORD *)v374 + 5) = v380;
          v374[48] = v381;
          v374[49] = v375[49];
          v382 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v45 = &v374[v382];
          v46 = &v375[v382];
          v436(&v374[v382], &v375[v382], v442);
          v47 = &qword_1EE67B788;
          goto LABEL_160;
        }
        if (v370 == 1)
        {
LABEL_151:
          *(_BYTE *)v104 = *(_BYTE *)v105;
          v355 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v356 = (char *)v104 + v355;
          v357 = (char *)v105 + v355;
          v97((uint64_t)v104 + v355, (uint64_t)v357, v96);
          v358 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v45 = &v356[v358];
          v46 = &v357[v358];
          v97((uint64_t)v45, (uint64_t)v46, v96);
          v47 = &qword_1EE67B7A0;
          goto LABEL_160;
        }
LABEL_161:
        v437 = (void (*)(char *, char *, uint64_t))v97;
        v443 = v96;
        v384 = v105[1];
        *v104 = *v105;
        v104[1] = v384;
        v385 = v105[3];
        v104[2] = v105[2];
        v104[3] = v385;
        v104[4] = v105[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v386 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v387 = (char *)v104 + v386;
        v388 = (char *)v105 + v386;
        v389 = *(_QWORD *)((char *)v105 + v386 + 8);
        *(_QWORD *)v387 = *(_QWORD *)((char *)v105 + v386);
        *((_QWORD *)v387 + 1) = v389;
        v390 = *(_QWORD *)((char *)v105 + v386 + 16);
        v391 = *((_QWORD *)v388 + 3);
        v392 = *((_QWORD *)v388 + 4);
        v393 = *((_QWORD *)v388 + 5);
        v394 = v388[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v390, v391, v392, v393, v394);
        *((_QWORD *)v387 + 2) = v390;
        *((_QWORD *)v387 + 3) = v391;
        *((_QWORD *)v387 + 4) = v392;
        *((_QWORD *)v387 + 5) = v393;
        v387[48] = v394;
        v387[49] = v388[49];
        v395 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v396 = &v387[v395];
        v397 = &v388[v395];
        v437(&v387[v395], &v388[v395], v443);
        v398 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v196 = &v396[v398];
        v197 = &v397[v398];
        goto LABEL_162;
      case 0xAu:
        v83 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v84 = swift_getEnumCaseMultiPayload();
        if (v84 == 2)
        {
          v252 = *(_QWORD *)(a2 + 8);
          if (v252 >> 60 == 15)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
          }
          else
          {
            v400 = *(_QWORD *)a2;
            sub_1A2973524(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
            *(_QWORD *)a1 = v400;
            *(_QWORD *)(a1 + 8) = v252;
          }
        }
        else if (v84 == 1)
        {
          v253 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = v253;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v84)
          {
            memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
            goto LABEL_165;
          }
          v85 = sub_1A2AE2F44();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 16))(a1, a2, v85);
        }
        swift_storeEnumTagMultiPayload();
LABEL_165:
        v401 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C8);
        *(_QWORD *)(a1 + *(int *)(v401 + 48)) = *(_QWORD *)(a2 + *(int *)(v401 + 48));
        *(_QWORD *)(a1 + *(int *)(v401 + 64)) = *(_QWORD *)(a2 + *(int *)(v401 + 64));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xBu:
        v86 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v86;
        v87 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = v87;
        v88 = *(_QWORD *)(a2 + 32);
        v89 = *(_QWORD *)(a2 + 40);
        v90 = *(_BYTE *)(a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        *(_QWORD *)(a1 + 32) = v88;
        *(_QWORD *)(a1 + 40) = v89;
        *(_BYTE *)(a1 + 48) = v90;
        v91 = *(_QWORD *)(a2 + 56);
        v92 = *(_QWORD *)(a2 + 64);
        sub_1A2973524(v91, v92);
        *(_QWORD *)(a1 + 56) = v91;
        *(_QWORD *)(a1 + 64) = v92;
        v93 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B8) + 48);
        v94 = a1 + v93;
        v95 = a2 + v93;
        v96 = sub_1A2AE3130();
        v97 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 16);
        v97(v94, v95, v96);
        v98 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(v94 + v98[13]) = *(_BYTE *)(v95 + v98[13]);
        v99 = v98[14];
        v100 = v94 + v99;
        v101 = v95 + v99;
        v102 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 16))(v100, v101, v102);
        v103 = v98[15];
        v104 = (_QWORD *)(v94 + v103);
        v105 = (_QWORD *)(v95 + v103);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v106 = swift_getEnumCaseMultiPayload();
        if (v106 == 2)
          goto LABEL_159;
        if (v106 == 1)
          goto LABEL_151;
        goto LABEL_161;
      case 0xCu:
        v107 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v107;
        v108 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = v108;
        v109 = *(_QWORD *)(a2 + 32);
        v110 = *(_QWORD *)(a2 + 40);
        v111 = *(_BYTE *)(a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        *(_QWORD *)(a1 + 32) = v109;
        *(_QWORD *)(a1 + 40) = v110;
        *(_BYTE *)(a1 + 48) = v111;
        v113 = *(_QWORD *)(a2 + 56);
        v112 = *(_QWORD *)(a2 + 64);
        sub_1A2973524(v113, v112);
        *(_QWORD *)(a1 + 56) = v113;
        *(_QWORD *)(a1 + 64) = v112;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xDu:
        v114 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v114;
        v115 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = v115;
        v116 = *(_QWORD *)(a2 + 32);
        v117 = *(_QWORD *)(a2 + 40);
        v118 = *(_BYTE *)(a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        *(_QWORD *)(a1 + 32) = v116;
        *(_QWORD *)(a1 + 40) = v117;
        *(_BYTE *)(a1 + 48) = v118;
        v119 = *(_QWORD *)(a2 + 56);
        v120 = *(_QWORD *)(a2 + 64);
        sub_1A2973524(v119, v120);
        *(_QWORD *)(a1 + 56) = v119;
        *(_QWORD *)(a1 + 64) = v120;
        v121 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A8) + 48);
        v122 = a1 + v121;
        v123 = a2 + v121;
        v30 = sub_1A2AE3130();
        v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
        v31(v122, v123, v30);
        v124 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
        *(_BYTE *)(v122 + v124[13]) = *(_BYTE *)(v123 + v124[13]);
        v125 = v124[14];
        v126 = v122 + v125;
        v127 = v123 + v125;
        v128 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 16))(v126, v127, v128);
        v129 = v124[15];
        v38 = (_QWORD *)(v122 + v129);
        v39 = (_QWORD *)(v123 + v129);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
        v130 = swift_getEnumCaseMultiPayload();
        if (v130 == 2)
        {
LABEL_77:
          v198 = v39[1];
          *v38 = *v39;
          v38[1] = v198;
          v199 = v39[3];
          v38[2] = v39[2];
          v38[3] = v199;
          v38[4] = v39[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v200 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
          v201 = (char *)v38 + v200;
          v202 = (char *)v39 + v200;
          v203 = *(_QWORD *)((char *)v39 + v200 + 8);
          *(_QWORD *)v201 = *(_QWORD *)((char *)v39 + v200);
          *((_QWORD *)v201 + 1) = v203;
          v204 = *(_QWORD *)((char *)v39 + v200 + 16);
          v205 = *(_QWORD *)((char *)v39 + v200 + 24);
          v433 = (void (*)(char *, char *, uint64_t))v31;
          v439 = v30;
          v206 = *((_QWORD *)v202 + 4);
          v207 = *((_QWORD *)v202 + 5);
          v208 = v202[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v204, v205, v206, v207, v208);
          *((_QWORD *)v201 + 2) = v204;
          *((_QWORD *)v201 + 3) = v205;
          *((_QWORD *)v201 + 4) = v206;
          *((_QWORD *)v201 + 5) = v207;
          v201[48] = v208;
          v201[49] = v202[49];
          v209 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v45 = &v201[v209];
          v46 = &v202[v209];
          v433(&v201[v209], &v202[v209], v439);
          v47 = &qword_1EE67B788;
        }
        else
        {
          if (v130 != 1)
          {
LABEL_78:
            v434 = (void (*)(char *, char *, uint64_t))v31;
            v440 = v30;
            v210 = v39[1];
            *v38 = *v39;
            v38[1] = v210;
            v211 = v39[3];
            v38[2] = v39[2];
            v38[3] = v211;
            v38[4] = v39[4];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v212 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
            v213 = (char *)v38 + v212;
            v214 = (char *)v39 + v212;
            v215 = *(_QWORD *)((char *)v39 + v212 + 8);
            *(_QWORD *)v213 = *(_QWORD *)((char *)v39 + v212);
            *((_QWORD *)v213 + 1) = v215;
            v216 = *(_QWORD *)((char *)v39 + v212 + 16);
            v217 = *((_QWORD *)v214 + 3);
            v218 = *((_QWORD *)v214 + 4);
            v219 = *((_QWORD *)v214 + 5);
            v220 = v214[48];
            swift_bridgeObjectRetain();
            sub_1A2993E10(v216, v217, v218, v219, v220);
            *((_QWORD *)v213 + 2) = v216;
            *((_QWORD *)v213 + 3) = v217;
            *((_QWORD *)v213 + 4) = v218;
            *((_QWORD *)v213 + 5) = v219;
            v213[48] = v220;
            v213[49] = v214[49];
            v221 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
            v222 = &v213[v221];
            v223 = &v214[v221];
            v434(&v213[v221], &v214[v221], v440);
            v224 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
            v196 = &v222[v224];
            v197 = &v223[v224];
            goto LABEL_162;
          }
LABEL_11:
          *(_BYTE *)v38 = *(_BYTE *)v39;
          v41 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A8) + 48);
          v42 = (char *)v38 + v41;
          v43 = (char *)v39 + v41;
          v31((uint64_t)v38 + v41, (uint64_t)v43, v30);
          v44 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B0) + 52);
          v45 = &v42[v44];
          v46 = &v43[v44];
          v31((uint64_t)v45, (uint64_t)v46, v30);
          v47 = &qword_1EE67B7A0;
        }
LABEL_160:
        v383 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v47) + 68);
        v196 = &v45[v383];
        v197 = &v46[v383];
LABEL_162:
        v399 = *((_QWORD *)v197 + 1);
        *(_QWORD *)v196 = *(_QWORD *)v197;
        *((_QWORD *)v196 + 1) = v399;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xEu:
        v131 = *(_QWORD *)(a2 + 24);
        if (v131 >= 2)
        {
          v150 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = v150;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a1 + 24) = v131;
          v151 = *(_QWORD *)(a2 + 32);
          v152 = *(_QWORD *)(a2 + 40);
          v153 = *(_BYTE *)(a2 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1A297208C();
          *(_QWORD *)(a1 + 32) = v151;
          *(_QWORD *)(a1 + 40) = v152;
          *(_BYTE *)(a1 + 48) = v153;
          v154 = *(_QWORD *)(a2 + 56);
          v155 = *(_QWORD *)(a2 + 64);
          sub_1A2973524(v154, v155);
          *(_QWORD *)(a1 + 56) = v154;
          *(_QWORD *)(a1 + 64) = v155;
        }
        else
        {
          v132 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 48) = v132;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
          v133 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v133;
        }
        v156 = *(_QWORD *)(a2 + 96);
        if (v156 >= 2)
        {
          v159 = *(_QWORD *)(a2 + 80);
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
          *(_QWORD *)(a1 + 80) = v159;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
          *(_QWORD *)(a1 + 96) = v156;
          v160 = *(_QWORD *)(a2 + 104);
          v161 = *(_QWORD *)(a2 + 112);
          v162 = *(_BYTE *)(a2 + 120);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1A297208C();
          *(_QWORD *)(a1 + 104) = v160;
          *(_QWORD *)(a1 + 112) = v161;
          *(_BYTE *)(a1 + 120) = v162;
          v164 = *(_QWORD *)(a2 + 128);
          v163 = *(_QWORD *)(a2 + 136);
          sub_1A2973524(v164, v163);
          *(_QWORD *)(a1 + 128) = v164;
          *(_QWORD *)(a1 + 136) = v163;
        }
        else
        {
          v157 = *(_OWORD *)(a2 + 120);
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
          *(_OWORD *)(a1 + 120) = v157;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
          v158 = *(_OWORD *)(a2 + 88);
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
          *(_OWORD *)(a1 + 88) = v158;
        }
        goto LABEL_64;
      case 0xFu:
        v134 = sub_1A2AE30C4();
        v135 = *(_QWORD *)(v134 - 8);
        v136 = *(void (**)(unint64_t, uint64_t, uint64_t))(v135 + 16);
        v136(a1, a2, v134);
        v137 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
        v138 = v137[5];
        v139 = (void *)(a1 + v138);
        v140 = (const void *)(a2 + v138);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(a2 + v138, 1, v134))
        {
          v141 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
          memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
        }
        else
        {
          v136((unint64_t)v139, (uint64_t)v140, v134);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v139, 0, 1, v134);
        }
        *(_BYTE *)(a1 + v137[6]) = *(_BYTE *)(a2 + v137[6]);
        v165 = v137[7];
        v166 = (_QWORD *)(a1 + v165);
        v167 = (_QWORD *)(a2 + v165);
        v168 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
        v169 = *(_QWORD *)(v168 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v169 + 48))(v167, 1, v168))
        {
          v170 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
          memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
        }
        else
        {
          v177 = type metadata accessor for SFAirDropReceive.Failure();
          v178 = *(_QWORD *)(v177 - 8);
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v178 + 48))(v167, 1, v177))
          {
            memcpy(v166, v167, *(_QWORD *)(v169 + 64));
          }
          else
          {
            v254 = swift_getEnumCaseMultiPayload();
            if (v254 == 1)
            {
              v402 = v167[1];
              *v166 = *v167;
              v166[1] = v402;
              *((_OWORD *)v166 + 1) = *((_OWORD *)v167 + 1);
              v403 = v167[5];
              v166[4] = v167[4];
              v166[5] = v403;
              v166[6] = v167[6];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_storeEnumTagMultiPayload();
            }
            else if (v254)
            {
              memcpy(v166, v167, *(_QWORD *)(v178 + 64));
            }
            else
            {
              v255 = v167[1];
              *v166 = *v167;
              v166[1] = v255;
              swift_bridgeObjectRetain();
              v256 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
              v257 = (char *)v166 + v256;
              v258 = (char *)v167 + v256;
              v259 = sub_1A2AE2F44();
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v259 - 8) + 16))(v257, v258, v259);
              swift_storeEnumTagMultiPayload();
            }
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v178 + 56))(v166, 0, 1, v177);
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v169 + 56))(v166, 0, 1, v168);
        }
        v404 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A0);
        v405 = v404[12];
        v406 = (uint64_t *)(a1 + v405);
        v407 = (uint64_t *)(a2 + v405);
        v408 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v409 = swift_getEnumCaseMultiPayload();
        if (v409 == 2)
        {
          v411 = v407[1];
          if (v411 >> 60 == 15)
          {
            *(_OWORD *)v406 = *(_OWORD *)v407;
          }
          else
          {
            v413 = *v407;
            sub_1A2973524(v413, v411);
            *v406 = v413;
            v406[1] = v411;
          }
        }
        else if (v409 == 1)
        {
          v412 = v407[1];
          *v406 = *v407;
          v406[1] = v412;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v409)
          {
            memcpy(v406, v407, *(_QWORD *)(*(_QWORD *)(v408 - 8) + 64));
            goto LABEL_180;
          }
          v410 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v410 - 8) + 16))(v406, v407, v410);
        }
        swift_storeEnumTagMultiPayload();
LABEL_180:
        v414 = v404[16];
        v415 = (_QWORD *)(a1 + v414);
        v416 = (_QWORD *)(a2 + v414);
        v417 = v416[1];
        *v415 = *v416;
        v415[1] = v417;
        *(_QWORD *)(a1 + v404[20]) = *(_QWORD *)(a2 + v404[20]);
        *(_QWORD *)(a1 + v404[24]) = *(_QWORD *)(a2 + v404[24]);
        *(_QWORD *)(a1 + v404[28]) = *(_QWORD *)(a2 + v404[28]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 0x10u:
        v142 = sub_1A2AE30C4();
        v143 = *(_QWORD *)(v142 - 8);
        v144 = *(void (**)(unint64_t, uint64_t, uint64_t))(v143 + 16);
        v144(a1, a2, v142);
        v145 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
        v146 = v145[5];
        v147 = (void *)(a1 + v146);
        v148 = (const void *)(a2 + v146);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v143 + 48))(a2 + v146, 1, v142))
        {
          v149 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
          memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
        }
        else
        {
          v144((unint64_t)v147, (uint64_t)v148, v142);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v143 + 56))(v147, 0, 1, v142);
        }
        *(_BYTE *)(a1 + v145[6]) = *(_BYTE *)(a2 + v145[6]);
        v171 = v145[7];
        v172 = (_QWORD *)(a1 + v171);
        v173 = (_QWORD *)(a2 + v171);
        v174 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
        v175 = *(_QWORD *)(v174 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v175 + 48))(v173, 1, v174))
        {
          v176 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
          memcpy(v172, v173, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
        }
        else
        {
          v179 = type metadata accessor for SFAirDropReceive.Failure();
          v180 = *(_QWORD *)(v179 - 8);
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v180 + 48))(v173, 1, v179))
          {
            memcpy(v172, v173, *(_QWORD *)(v175 + 64));
          }
          else
          {
            v260 = swift_getEnumCaseMultiPayload();
            if (v260 == 1)
            {
              v418 = v173[1];
              *v172 = *v173;
              v172[1] = v418;
              *((_OWORD *)v172 + 1) = *((_OWORD *)v173 + 1);
              v419 = v173[5];
              v172[4] = v173[4];
              v172[5] = v419;
              v172[6] = v173[6];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_storeEnumTagMultiPayload();
            }
            else if (v260)
            {
              memcpy(v172, v173, *(_QWORD *)(v180 + 64));
            }
            else
            {
              v261 = v173[1];
              *v172 = *v173;
              v172[1] = v261;
              swift_bridgeObjectRetain();
              v262 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
              v263 = (char *)v172 + v262;
              v264 = (char *)v173 + v262;
              v265 = sub_1A2AE2F44();
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v265 - 8) + 16))(v263, v264, v265);
              swift_storeEnumTagMultiPayload();
            }
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v180 + 56))(v172, 0, 1, v179);
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v175 + 56))(v172, 0, 1, v174);
        }
        v420 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B398) + 48);
        v421 = (_QWORD *)(a1 + v420);
        v422 = (_QWORD *)(a2 + v420);
        v423 = type metadata accessor for SFAirDropReceive.Failure();
        v424 = swift_getEnumCaseMultiPayload();
        if (v424 == 1)
        {
          v430 = v422[1];
          *v421 = *v422;
          v421[1] = v430;
          *((_OWORD *)v421 + 1) = *((_OWORD *)v422 + 1);
          v431 = v422[5];
          v421[4] = v422[4];
          v421[5] = v431;
          v421[6] = v422[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
        }
        else if (v424)
        {
          memcpy(v421, v422, *(_QWORD *)(*(_QWORD *)(v423 - 8) + 64));
        }
        else
        {
          v425 = v422[1];
          *v421 = *v422;
          v421[1] = v425;
          swift_bridgeObjectRetain();
          v426 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
          v427 = (char *)v421 + v426;
          v428 = (char *)v422 + v426;
          v429 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v429 - 8) + 16))(v427, v428, v429);
          swift_storeEnumTagMultiPayload();
        }
LABEL_64:
        swift_storeEnumTagMultiPayload();
        return a1;
      default:
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(v5 + 64));
        return a1;
    }
  }
  return a1;
}

uint64_t _s8TransferV5StateOwxx(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  void (*v4)(uint64_t *, uint64_t);
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t *, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  char *v89;
  uint64_t v90;
  int v91;
  char *v92;
  uint64_t v93;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      v3 = sub_1A2AE3130();
      v4 = *(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
      v4(a1, v3);
      v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      v6 = (char *)a1 + *(int *)(v5 + 56);
      v7 = sub_1A2AE30C4();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      v8 = (char *)a1 + *(int *)(v5 + 60);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      result = swift_getEnumCaseMultiPayload();
      if ((_DWORD)result == 2)
        goto LABEL_11;
      if ((_DWORD)result != 1)
        goto LABEL_10;
      goto LABEL_4;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1A2973568();
      sub_1A29736C4(a1[7], a1[8]);
      v12 = (char *)a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F8) + 48);
      v13 = sub_1A2AE3130();
      v14 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
      v14(v12, v13);
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
      v16 = &v12[*(int *)(v15 + 56)];
      v17 = sub_1A2AE30C4();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
      v18 = &v12[*(int *)(v15 + 60)];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
      result = swift_getEnumCaseMultiPayload();
      if ((_DWORD)result == 2)
        goto LABEL_47;
      if ((_DWORD)result == 1)
        goto LABEL_7;
      goto LABEL_46;
    case 2:
      v3 = sub_1A2AE3130();
      v4 = *(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
      v4(a1, v3);
      v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      v22 = (char *)a1 + *(int *)(v21 + 56);
      v23 = sub_1A2AE30C4();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
      v8 = (char *)a1 + *(int *)(v21 + 60);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      result = swift_getEnumCaseMultiPayload();
      if ((_DWORD)result == 2)
        goto LABEL_11;
      if ((_DWORD)result == 1)
      {
LABEL_4:
        v9 = &v8[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48)];
        v4((uint64_t *)v9, v3);
        v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798);
        v4((uint64_t *)&v9[*(int *)(v10 + 52)], v3);
        v11 = &qword_1EE67B7A0;
        goto LABEL_93;
      }
LABEL_10:
      if ((_DWORD)result)
        return result;
LABEL_11:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = &v8[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80)];
      swift_bridgeObjectRelease();
      sub_1A2994DD4(*((_QWORD *)v24 + 2), *((_QWORD *)v24 + 3), *((_QWORD *)v24 + 4), *((_QWORD *)v24 + 5), v24[48]);
      v25 = type metadata accessor for SFAirDrop.DeclineAction();
      v4((uint64_t *)&v24[*(int *)(v25 + 28)], v3);
LABEL_92:
      v11 = &qword_1EE67B788;
      goto LABEL_93;
    case 3:
      type metadata accessor for SFAirDropReceive.ItemDestination();
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      switch(EnumCaseMultiPayload)
      {
        case 2:
          v79 = a1[1];
          if (v79 >> 60 != 15)
            sub_1A29736C4(*a1, v79);
          break;
        case 1:
          swift_bridgeObjectRelease();
          break;
        case 0:
          v27 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(a1, v27);
          break;
      }
      v80 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F0);
      sub_1A297DB90(*(uint64_t *)((char *)a1 + *(int *)(v80 + 48)), *(uint64_t *)((char *)a1 + *(int *)(v80 + 48) + 8), *(uint64_t *)((char *)a1 + *(int *)(v80 + 48) + 16));
      goto LABEL_91;
    case 4:
      type metadata accessor for SFAirDropReceive.ItemDestination();
      v28 = swift_getEnumCaseMultiPayload();
      switch(v28)
      {
        case 2:
          v81 = a1[1];
          if (v81 >> 60 != 15)
            sub_1A29736C4(*a1, v81);
          break;
        case 1:
          swift_bridgeObjectRelease();
          break;
        case 0:
          v29 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(a1, v29);
          break;
      }
      v80 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E8);
LABEL_91:
      swift_bridgeObjectRelease();
      v82 = (char *)a1 + *(int *)(v80 + 80);
      swift_bridgeObjectRelease();
      sub_1A2994DD4(*((_QWORD *)v82 + 2), *((_QWORD *)v82 + 3), *((_QWORD *)v82 + 4), *((_QWORD *)v82 + 5), v82[48]);
      v83 = &v82[*(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28)];
      v84 = sub_1A2AE3130();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v84 - 8) + 8))(v83, v84);
      goto LABEL_92;
    case 5:
      type metadata accessor for SFAirDropReceive.ItemDestination();
      v30 = swift_getEnumCaseMultiPayload();
      if (v30 == 2)
        goto LABEL_68;
      if (v30 == 1)
        goto LABEL_22;
      goto LABEL_25;
    case 6:
      type metadata accessor for SFAirDropReceive.ItemDestination();
      v30 = swift_getEnumCaseMultiPayload();
      if (v30 == 2)
      {
LABEL_68:
        v68 = a1[1];
        if (v68 >> 60 != 15)
          sub_1A29736C4(*a1, v68);
      }
      else if (v30 == 1)
      {
LABEL_22:
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_25:
        if (!v30)
        {
          v31 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(a1, v31);
        }
      }
      v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
      swift_bridgeObjectRelease();
      v38 = *(int *)(v69 + 64);
      goto LABEL_74;
    case 7:
      type metadata accessor for SFAirDropReceive.ItemDestination();
      v32 = swift_getEnumCaseMultiPayload();
      switch(v32)
      {
        case 2:
          v85 = a1[1];
          if (v85 >> 60 != 15)
            sub_1A29736C4(*a1, v85);
          break;
        case 1:
          swift_bridgeObjectRelease();
          break;
        case 0:
          v33 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(a1, v33);
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D8);
      return swift_bridgeObjectRelease();
    case 8:
      type metadata accessor for SFAirDropReceive.ItemDestination();
      v34 = swift_getEnumCaseMultiPayload();
      if (v34 == 2)
        goto LABEL_71;
      if (v34 == 1)
        goto LABEL_33;
      goto LABEL_36;
    case 9:
      type metadata accessor for SFAirDropReceive.ItemDestination();
      v34 = swift_getEnumCaseMultiPayload();
      if (v34 == 2)
      {
LABEL_71:
        v70 = a1[1];
        if (v70 >> 60 != 15)
          sub_1A29736C4(*a1, v70);
      }
      else if (v34 == 1)
      {
LABEL_33:
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_36:
        if (!v34)
        {
          v35 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(a1, v35);
        }
      }
      v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v38 = *(int *)(v71 + 80);
LABEL_74:
      v72 = (char *)a1 + v38;
      v13 = sub_1A2AE3130();
      v14 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
      v14(v72, v13);
      v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      v74 = &v72[*(int *)(v73 + 56)];
      v75 = sub_1A2AE30C4();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v75 - 8) + 8))(v74, v75);
      v18 = &v72[*(int *)(v73 + 60)];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      result = swift_getEnumCaseMultiPayload();
      if ((_DWORD)result == 2)
        goto LABEL_77;
      if ((_DWORD)result == 1)
      {
        v19 = &v18[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48)];
        v14(v19, v13);
        v20 = &qword_1EE67B798;
        goto LABEL_81;
      }
      if ((_DWORD)result)
        return result;
LABEL_77:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v45 = &qword_1EE67B418;
      goto LABEL_78;
    case 10:
      type metadata accessor for SFAirDropReceive.ItemDestination();
      v36 = swift_getEnumCaseMultiPayload();
      switch(v36)
      {
        case 2:
          v86 = a1[1];
          if (v86 >> 60 != 15)
            sub_1A29736C4(*a1, v86);
          break;
        case 1:
          swift_bridgeObjectRelease();
          break;
        case 0:
          v37 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(a1, v37);
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C8);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 11:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1A2973568();
      sub_1A29736C4(a1[7], a1[8]);
      v38 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B8) + 48);
      goto LABEL_74;
    case 12:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1A2973568();
      v39 = a1[7];
      v40 = a1[8];
      return sub_1A29736C4(v39, v40);
    case 13:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1A2973568();
      sub_1A29736C4(a1[7], a1[8]);
      v41 = (char *)a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A8) + 48);
      v13 = sub_1A2AE3130();
      v14 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
      v14(v41, v13);
      v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
      v43 = &v41[*(int *)(v42 + 56)];
      v44 = sub_1A2AE30C4();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v43, v44);
      v18 = &v41[*(int *)(v42 + 60)];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
      result = swift_getEnumCaseMultiPayload();
      if ((_DWORD)result == 2)
        goto LABEL_47;
      if ((_DWORD)result == 1)
      {
LABEL_7:
        v19 = &v18[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A8) + 48)];
        v14(v19, v13);
        v20 = &qword_1EE67B7B0;
LABEL_81:
        v78 = __swift_instantiateConcreteTypeFromMangledName(v20);
        v14(&v19[*(int *)(v78 + 52)], v13);
        v11 = &qword_1EE67B7A0;
      }
      else
      {
LABEL_46:
        if ((_DWORD)result)
          return result;
LABEL_47:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v45 = &qword_1EE67B410;
LABEL_78:
        v76 = &v18[*(int *)(__swift_instantiateConcreteTypeFromMangledName(v45) + 80)];
        swift_bridgeObjectRelease();
        sub_1A2994DD4(*((_QWORD *)v76 + 2), *((_QWORD *)v76 + 3), *((_QWORD *)v76 + 4), *((_QWORD *)v76 + 5), v76[48]);
        v77 = type metadata accessor for SFAirDrop.DeclineAction();
        v14(&v76[*(int *)(v77 + 28)], v13);
        v11 = &qword_1EE67B788;
      }
LABEL_93:
      __swift_instantiateConcreteTypeFromMangledName(v11);
      return swift_release();
    case 14:
      if ((unint64_t)a1[3] >= 2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1A2973568();
        result = sub_1A29736C4(a1[7], a1[8]);
      }
      if ((unint64_t)a1[12] < 2)
        return result;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1A2973568();
      v39 = a1[16];
      v40 = a1[17];
      return sub_1A29736C4(v39, v40);
    case 15:
      v46 = sub_1A2AE30C4();
      v47 = *(_QWORD *)(v46 - 8);
      v48 = *(void (**)(uint64_t *, uint64_t))(v47 + 8);
      v48(a1, v46);
      v49 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
      v50 = (char *)a1 + *(int *)(v49 + 20);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v50, 1, v46))
        v48((uint64_t *)v50, v46);
      v51 = (char *)a1 + *(int *)(v49 + 28);
      v52 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 48))(v51, 1, v52))
      {
        v53 = type metadata accessor for SFAirDropReceive.Failure();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 48))(v51, 1, v53))
        {
          v91 = swift_getEnumCaseMultiPayload();
          if (v91 == 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else if (!v91)
          {
            swift_bridgeObjectRelease();
            v92 = &v51[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48)];
            v93 = sub_1A2AE2F44();
            (*(void (**)(char *, uint64_t))(*(_QWORD *)(v93 - 8) + 8))(v92, v93);
          }
        }
      }
      v54 = (uint64_t *)((char *)a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A0) + 48));
      type metadata accessor for SFAirDropReceive.ItemDestination();
      v55 = swift_getEnumCaseMultiPayload();
      switch(v55)
      {
        case 2:
          v87 = v54[1];
          if (v87 >> 60 != 15)
            sub_1A29736C4(*v54, v87);
          break;
        case 1:
          swift_bridgeObjectRelease();
          break;
        case 0:
          v56 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v54, v56);
          break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 16:
      v57 = sub_1A2AE30C4();
      v58 = *(_QWORD *)(v57 - 8);
      v59 = *(void (**)(uint64_t *, uint64_t))(v58 + 8);
      v59(a1, v57);
      v60 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
      v61 = (char *)a1 + *(int *)(v60 + 20);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v61, 1, v57))
        v59((uint64_t *)v61, v57);
      v62 = (char *)a1 + *(int *)(v60 + 28);
      v63 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 48))(v62, 1, v63))
      {
        v64 = type metadata accessor for SFAirDropReceive.Failure();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 48))(v62, 1, v64))
        {
          v88 = swift_getEnumCaseMultiPayload();
          if (v88 == 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else if (!v88)
          {
            swift_bridgeObjectRelease();
            v89 = &v62[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48)];
            v90 = sub_1A2AE2F44();
            (*(void (**)(char *, uint64_t))(*(_QWORD *)(v90 - 8) + 8))(v89, v90);
          }
        }
      }
      v65 = (char *)a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B398) + 48);
      type metadata accessor for SFAirDropReceive.Failure();
      result = swift_getEnumCaseMultiPayload();
      if ((_DWORD)result == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      else if (!(_DWORD)result)
      {
        swift_bridgeObjectRelease();
        v66 = &v65[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48)];
        v67 = sub_1A2AE2F44();
        return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v67 - 8) + 8))(v66, v67);
      }
      return result;
    default:
      return result;
  }
}

uint64_t _s8TransferV5StateOwcp(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t *, uint64_t);
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, uint64_t);
  int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t *, uint64_t);
  int *v131;
  uint64_t v132;
  void *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(uint64_t, uint64_t *, uint64_t);
  int *v139;
  uint64_t v140;
  void *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned __int8 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned __int8 v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned __int8 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned __int8 v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned __int8 v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  int *v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  _QWORD *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  _QWORD *v302;
  uint64_t v303;
  uint64_t v304;
  int *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unsigned __int8 v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  _QWORD *v320;
  _QWORD *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  int *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  int *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  int *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  char *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unsigned __int8 v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  uint64_t v386;
  char *v387;
  char *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  char *v393;
  char *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unsigned __int8 v400;
  uint64_t v401;
  char *v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int *v410;
  uint64_t v411;
  uint64_t *v412;
  uint64_t *v413;
  uint64_t v414;
  int v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  _QWORD *v421;
  _QWORD *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  _QWORD *v427;
  _QWORD *v428;
  uint64_t v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  char *v433;
  char *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  void (*v439)(char *, char *, uint64_t);
  void (*v440)(char *, char *, uint64_t);
  void (*v441)(char *, char *, uint64_t);
  void (*v442)(char *, char *, uint64_t);
  void (*v443)(char *, char *, uint64_t);
  void (*v444)(char *, char *, uint64_t);
  void (*v445)(char *, char *, uint64_t);

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = sub_1A2AE3130();
      v7 = *(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
      v7(a1, a2, v6);
      v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      *(_BYTE *)(a1 + v8[13]) = *((_BYTE *)a2 + v8[13]);
      v9 = v8[14];
      v10 = a1 + v9;
      v11 = (uint64_t)a2 + v9;
      v12 = sub_1A2AE30C4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      v13 = v8[15];
      v14 = (_QWORD *)(a1 + v13);
      v15 = (uint64_t *)((char *)a2 + v13);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
        goto LABEL_71;
      if (EnumCaseMultiPayload == 1)
        goto LABEL_4;
      v440 = (void (*)(char *, char *, uint64_t))v7;
      v187 = v15[1];
      *v14 = *v15;
      v14[1] = v187;
      v188 = v15[3];
      v14[2] = v15[2];
      v14[3] = v188;
      v14[4] = v15[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v189 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
      v190 = (char *)v14 + v189;
      v191 = (char *)v15 + v189;
      v192 = *(_QWORD *)((char *)v15 + v189 + 8);
      *(_QWORD *)v190 = *(_QWORD *)((char *)v15 + v189);
      *((_QWORD *)v190 + 1) = v192;
      v193 = *(_QWORD *)((char *)v15 + v189 + 16);
      v194 = *((_QWORD *)v191 + 3);
      v195 = *((_QWORD *)v191 + 4);
      v196 = *((_QWORD *)v191 + 5);
      v197 = v191[48];
      swift_bridgeObjectRetain();
      sub_1A2993E10(v193, v194, v195, v196, v197);
      *((_QWORD *)v190 + 2) = v193;
      *((_QWORD *)v190 + 3) = v194;
      *((_QWORD *)v190 + 4) = v195;
      *((_QWORD *)v190 + 5) = v196;
      v190[48] = v197;
      v190[49] = v191[49];
      v198 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
      v199 = &v190[v198];
      v200 = &v191[v198];
      v440(&v190[v198], &v191[v198], v6);
      v201 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
      v202 = &v199[v201];
      v203 = &v200[v201];
      goto LABEL_157;
    case 1u:
      v24 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v24;
      v25 = a2[3];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v25;
      v26 = a2[4];
      v27 = a2[5];
      v28 = *((_BYTE *)a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1A297208C();
      *(_QWORD *)(a1 + 32) = v26;
      *(_QWORD *)(a1 + 40) = v27;
      *(_BYTE *)(a1 + 48) = v28;
      v29 = a2[7];
      v30 = a2[8];
      sub_1A2973524(v29, v30);
      *(_QWORD *)(a1 + 56) = v29;
      *(_QWORD *)(a1 + 64) = v30;
      v31 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F8) + 48);
      v32 = a1 + v31;
      v33 = (uint64_t)a2 + v31;
      v34 = sub_1A2AE3130();
      v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
      v35(v32, v33, v34);
      v36 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
      *(_BYTE *)(v32 + v36[13]) = *(_BYTE *)(v33 + v36[13]);
      v37 = v36[14];
      v38 = v32 + v37;
      v39 = v33 + v37;
      v40 = sub_1A2AE30C4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
      v41 = v36[15];
      v42 = (_QWORD *)(v32 + v41);
      v43 = (_QWORD *)(v33 + v41);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
      v44 = swift_getEnumCaseMultiPayload();
      if (v44 == 2)
        goto LABEL_73;
      if (v44 == 1)
        goto LABEL_8;
      goto LABEL_74;
    case 2u:
      v6 = sub_1A2AE3130();
      v7 = *(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
      v7(a1, a2, v6);
      v49 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      *(_BYTE *)(a1 + v49[13]) = *((_BYTE *)a2 + v49[13]);
      v50 = v49[14];
      v51 = a1 + v50;
      v52 = (uint64_t)a2 + v50;
      v53 = sub_1A2AE30C4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
      v54 = v49[15];
      v14 = (_QWORD *)(a1 + v54);
      v15 = (uint64_t *)((char *)a2 + v54);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v55 = swift_getEnumCaseMultiPayload();
      if (v55 == 2)
      {
LABEL_71:
        v175 = v15[1];
        *v14 = *v15;
        v14[1] = v175;
        v176 = v15[3];
        v14[2] = v15[2];
        v14[3] = v176;
        v439 = (void (*)(char *, char *, uint64_t))v7;
        v14[4] = v15[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v177 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v178 = (char *)v14 + v177;
        v179 = (char *)v15 + v177;
        v180 = *(_QWORD *)((char *)v15 + v177 + 8);
        *(_QWORD *)v178 = *(_QWORD *)((char *)v15 + v177);
        *((_QWORD *)v178 + 1) = v180;
        v181 = *(_QWORD *)((char *)v15 + v177 + 16);
        v182 = *(_QWORD *)((char *)v15 + v177 + 24);
        v183 = *((_QWORD *)v179 + 4);
        v184 = *((_QWORD *)v179 + 5);
        v185 = v179[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v181, v182, v183, v184, v185);
        *((_QWORD *)v178 + 2) = v181;
        *((_QWORD *)v178 + 3) = v182;
        *((_QWORD *)v178 + 4) = v183;
        *((_QWORD *)v178 + 5) = v184;
        v178[48] = v185;
        v178[49] = v179[49];
        v186 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v21 = &v178[v186];
        v22 = &v179[v186];
        v439(&v178[v186], &v179[v186], v6);
        v23 = &qword_1EE67B788;
        goto LABEL_148;
      }
      if (v55 == 1)
      {
LABEL_4:
        *(_BYTE *)v14 = *(_BYTE *)v15;
        v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
        v18 = (char *)v14 + v17;
        v19 = (char *)v15 + v17;
        v7((uint64_t)v14 + v17, (uint64_t *)v19, v6);
        v20 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
        v21 = &v18[v20];
        v22 = &v19[v20];
        v7((uint64_t)v21, (uint64_t *)v22, v6);
        v23 = &qword_1EE67B7A0;
        goto LABEL_148;
      }
      v443 = (void (*)(char *, char *, uint64_t))v7;
      v231 = v15[1];
      *v14 = *v15;
      v14[1] = v231;
      v232 = v15[3];
      v14[2] = v15[2];
      v14[3] = v232;
      v14[4] = v15[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v233 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
      v234 = (char *)v14 + v233;
      v235 = (char *)v15 + v233;
      v236 = *(_QWORD *)((char *)v15 + v233 + 8);
      *(_QWORD *)v234 = *(_QWORD *)((char *)v15 + v233);
      *((_QWORD *)v234 + 1) = v236;
      v237 = *(_QWORD *)((char *)v15 + v233 + 16);
      v238 = *(_QWORD *)((char *)v15 + v233 + 24);
      v239 = *((_QWORD *)v235 + 4);
      v240 = *((_QWORD *)v235 + 5);
      v241 = v235[48];
      swift_bridgeObjectRetain();
      sub_1A2993E10(v237, v238, v239, v240, v241);
      *((_QWORD *)v234 + 2) = v237;
      *((_QWORD *)v234 + 3) = v238;
      *((_QWORD *)v234 + 4) = v239;
      *((_QWORD *)v234 + 5) = v240;
      v234[48] = v241;
      v234[49] = v235[49];
      v242 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
      v243 = &v234[v242];
      v244 = &v235[v242];
      v443(&v234[v242], &v235[v242], v6);
      v245 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
      v202 = &v243[v245];
      v203 = &v244[v245];
      goto LABEL_157;
    case 3u:
      v56 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v57 = swift_getEnumCaseMultiPayload();
      if (v57 == 2)
      {
        v246 = a2[1];
        if (v246 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v274 = *a2;
          sub_1A2973524(*a2, a2[1]);
          *(_QWORD *)a1 = v274;
          *(_QWORD *)(a1 + 8) = v246;
        }
      }
      else if (v57 == 1)
      {
        v247 = a2[1];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v247;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v57)
        {
          memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
          goto LABEL_121;
        }
        v58 = sub_1A2AE2F44();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(a1, a2, v58);
      }
      swift_storeEnumTagMultiPayload();
LABEL_121:
      v275 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F0);
      v276 = v275[12];
      v277 = (uint64_t *)(a1 + v276);
      v278 = (uint64_t *)((char *)a2 + v276);
      v279 = *v278;
      v280 = v278[1];
      v281 = v278[2];
      v282 = v278[3];
      v283 = v278[4];
      sub_1A2993E5C(*v278, v280, v281);
      *v277 = v279;
      v277[1] = v280;
      v277[2] = v281;
      v277[3] = v282;
      v277[4] = v283;
      v284 = v275[16];
      v285 = (_QWORD *)(a1 + v284);
      v286 = (uint64_t *)((char *)a2 + v284);
      v287 = v286[1];
      *v285 = *v286;
      v285[1] = v287;
      v288 = v275[20];
      v289 = a1 + v288;
      v290 = (uint64_t)a2 + v288;
      v291 = *(uint64_t *)((char *)a2 + v288 + 8);
      *(_QWORD *)v289 = *(uint64_t *)((char *)a2 + v288);
      *(_QWORD *)(v289 + 8) = v291;
      v292 = *(uint64_t *)((char *)a2 + v288 + 16);
      v293 = *(_QWORD *)(v290 + 24);
      v294 = *(_QWORD *)(v290 + 32);
      v295 = *(_QWORD *)(v290 + 40);
      LOBYTE(v282) = *(_BYTE *)(v290 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1A2993E10(v292, v293, v294, v295, v282);
      *(_QWORD *)(v289 + 16) = v292;
      *(_QWORD *)(v289 + 24) = v293;
      *(_QWORD *)(v289 + 32) = v294;
      *(_QWORD *)(v289 + 40) = v295;
      *(_BYTE *)(v289 + 48) = v282;
      *(_BYTE *)(v289 + 49) = *(_BYTE *)(v290 + 49);
      v296 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
      v297 = v289 + v296;
      v298 = v290 + v296;
      v299 = sub_1A2AE3130();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v299 - 8) + 16))(v297, v298, v299);
      v300 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
      v301 = (_QWORD *)(v297 + v300);
      v302 = (_QWORD *)(v298 + v300);
      v303 = v302[1];
      *v301 = *v302;
      v301[1] = v303;
      swift_retain();
      goto LABEL_185;
    case 4u:
      v59 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v60 = swift_getEnumCaseMultiPayload();
      if (v60 == 2)
      {
        v248 = a2[1];
        if (v248 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v304 = *a2;
          sub_1A2973524(*a2, a2[1]);
          *(_QWORD *)a1 = v304;
          *(_QWORD *)(a1 + 8) = v248;
        }
      }
      else if (v60 == 1)
      {
        v249 = a2[1];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v249;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v60)
        {
          memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
          goto LABEL_124;
        }
        v61 = sub_1A2AE2F44();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(a1, a2, v61);
      }
      swift_storeEnumTagMultiPayload();
LABEL_124:
      v305 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E8);
      *(_QWORD *)(a1 + v305[12]) = *(uint64_t *)((char *)a2 + v305[12]);
      *(_QWORD *)(a1 + v305[16]) = *(uint64_t *)((char *)a2 + v305[16]);
      v306 = v305[20];
      v307 = a1 + v306;
      v308 = (uint64_t)a2 + v306;
      v309 = *(uint64_t *)((char *)a2 + v306 + 8);
      *(_QWORD *)v307 = *(uint64_t *)((char *)a2 + v306);
      *(_QWORD *)(v307 + 8) = v309;
      v310 = *(uint64_t *)((char *)a2 + v306 + 16);
      v311 = *(_QWORD *)(v308 + 24);
      v312 = *(_QWORD *)(v308 + 32);
      v313 = *(_QWORD *)(v308 + 40);
      v314 = *(_BYTE *)(v308 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1A2993E10(v310, v311, v312, v313, v314);
      *(_QWORD *)(v307 + 16) = v310;
      *(_QWORD *)(v307 + 24) = v311;
      *(_QWORD *)(v307 + 32) = v312;
      *(_QWORD *)(v307 + 40) = v313;
      *(_BYTE *)(v307 + 48) = v314;
      *(_BYTE *)(v307 + 49) = *(_BYTE *)(v308 + 49);
      v315 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
      v316 = v307 + v315;
      v317 = v308 + v315;
      v318 = sub_1A2AE3130();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v318 - 8) + 16))(v316, v317, v318);
      v319 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
      v320 = (_QWORD *)(v316 + v319);
      v321 = (_QWORD *)(v317 + v319);
      v322 = v321[1];
      *v320 = *v321;
      v320[1] = v322;
      swift_retain();
      goto LABEL_185;
    case 5u:
      v62 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v63 = swift_getEnumCaseMultiPayload();
      if (v63 == 2)
      {
        v250 = a2[1];
        if (v250 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v323 = *a2;
          sub_1A2973524(*a2, a2[1]);
          *(_QWORD *)a1 = v323;
          *(_QWORD *)(a1 + 8) = v250;
        }
      }
      else if (v63 == 1)
      {
        v251 = a2[1];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v251;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v63)
        {
          memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
          goto LABEL_127;
        }
        v64 = sub_1A2AE2F44();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(a1, a2, v64);
      }
      swift_storeEnumTagMultiPayload();
LABEL_127:
      v324 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
      *(_QWORD *)(a1 + *(int *)(v324 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v324 + 48));
      v325 = *(int *)(v324 + 64);
      v326 = a1 + v325;
      v327 = (uint64_t)a2 + v325;
      v90 = sub_1A2AE3130();
      v91 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 16);
      swift_bridgeObjectRetain();
      v91(v326, v327, v90);
      v328 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      *(_BYTE *)(v326 + v328[13]) = *(_BYTE *)(v327 + v328[13]);
      v329 = v328[14];
      v330 = v326 + v329;
      v331 = v327 + v329;
      v332 = sub_1A2AE30C4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v332 - 8) + 16))(v330, v331, v332);
      v333 = v328[15];
      v98 = (_QWORD *)(v326 + v333);
      v99 = (_QWORD *)(v327 + v333);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v334 = swift_getEnumCaseMultiPayload();
      if (v334 == 2)
        goto LABEL_147;
      if (v334 == 1)
        goto LABEL_154;
      goto LABEL_156;
    case 6u:
      v65 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v66 = swift_getEnumCaseMultiPayload();
      if (v66 == 2)
      {
        v252 = a2[1];
        if (v252 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v335 = *a2;
          sub_1A2973524(*a2, a2[1]);
          *(_QWORD *)a1 = v335;
          *(_QWORD *)(a1 + 8) = v252;
        }
      }
      else if (v66 == 1)
      {
        v253 = a2[1];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v253;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v66)
        {
          memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
          goto LABEL_134;
        }
        v67 = sub_1A2AE2F44();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(a1, a2, v67);
      }
      swift_storeEnumTagMultiPayload();
LABEL_134:
      v336 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
      *(_QWORD *)(a1 + *(int *)(v336 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v336 + 48));
      v337 = *(int *)(v336 + 64);
      v338 = a1 + v337;
      v339 = (uint64_t)a2 + v337;
      v90 = sub_1A2AE3130();
      v91 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 16);
      swift_bridgeObjectRetain();
      v91(v338, v339, v90);
      v340 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      *(_BYTE *)(v338 + v340[13]) = *(_BYTE *)(v339 + v340[13]);
      v341 = v340[14];
      v342 = v338 + v341;
      v343 = v339 + v341;
      v344 = sub_1A2AE30C4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v344 - 8) + 16))(v342, v343, v344);
      v345 = v340[15];
      v98 = (_QWORD *)(v338 + v345);
      v99 = (_QWORD *)(v339 + v345);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v346 = swift_getEnumCaseMultiPayload();
      if (v346 == 2)
        goto LABEL_147;
      if (v346 == 1)
        goto LABEL_154;
      goto LABEL_156;
    case 7u:
      v68 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v69 = swift_getEnumCaseMultiPayload();
      if (v69 == 2)
      {
        v254 = a2[1];
        if (v254 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v347 = *a2;
          sub_1A2973524(*a2, a2[1]);
          *(_QWORD *)a1 = v347;
          *(_QWORD *)(a1 + 8) = v254;
        }
      }
      else if (v69 == 1)
      {
        v255 = a2[1];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v255;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v69)
        {
          memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
          goto LABEL_141;
        }
        v70 = sub_1A2AE2F44();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(a1, a2, v70);
      }
      swift_storeEnumTagMultiPayload();
LABEL_141:
      v348 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D8);
      *(_QWORD *)(a1 + *(int *)(v348 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v348 + 48));
      *(_QWORD *)(a1 + *(int *)(v348 + 64)) = *(uint64_t *)((char *)a2 + *(int *)(v348 + 64));
      swift_bridgeObjectRetain();
      goto LABEL_185;
    case 8u:
      v71 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v72 = swift_getEnumCaseMultiPayload();
      if (v72 == 2)
      {
        v256 = a2[1];
        if (v256 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v349 = *a2;
          sub_1A2973524(*a2, a2[1]);
          *(_QWORD *)a1 = v349;
          *(_QWORD *)(a1 + 8) = v256;
        }
      }
      else if (v72 == 1)
      {
        v257 = a2[1];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v257;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v72)
        {
          memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
          goto LABEL_144;
        }
        v73 = sub_1A2AE2F44();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(a1, a2, v73);
      }
      swift_storeEnumTagMultiPayload();
LABEL_144:
      v350 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
      *(_QWORD *)(a1 + v350[12]) = *(uint64_t *)((char *)a2 + v350[12]);
      *(_QWORD *)(a1 + v350[16]) = *(uint64_t *)((char *)a2 + v350[16]);
      v351 = v350[20];
      v352 = a1 + v351;
      v353 = (uint64_t)a2 + v351;
      v90 = sub_1A2AE3130();
      v91 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v91(v352, v353, v90);
      v354 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      *(_BYTE *)(v352 + v354[13]) = *(_BYTE *)(v353 + v354[13]);
      v355 = v354[14];
      v356 = v352 + v355;
      v357 = v353 + v355;
      v358 = sub_1A2AE30C4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v358 - 8) + 16))(v356, v357, v358);
      v359 = v354[15];
      v98 = (_QWORD *)(v352 + v359);
      v99 = (_QWORD *)(v353 + v359);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v360 = swift_getEnumCaseMultiPayload();
      if (v360 == 2)
        goto LABEL_147;
      if (v360 == 1)
        goto LABEL_154;
      goto LABEL_156;
    case 9u:
      v74 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v75 = swift_getEnumCaseMultiPayload();
      if (v75 == 2)
      {
        v258 = a2[1];
        if (v258 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v374 = *a2;
          sub_1A2973524(*a2, a2[1]);
          *(_QWORD *)a1 = v374;
          *(_QWORD *)(a1 + 8) = v258;
        }
      }
      else if (v75 == 1)
      {
        v259 = a2[1];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v259;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v75)
        {
          memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
          goto LABEL_152;
        }
        v76 = sub_1A2AE2F44();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(a1, a2, v76);
      }
      swift_storeEnumTagMultiPayload();
LABEL_152:
      v375 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
      *(_QWORD *)(a1 + v375[12]) = *(uint64_t *)((char *)a2 + v375[12]);
      *(_QWORD *)(a1 + v375[16]) = *(uint64_t *)((char *)a2 + v375[16]);
      v376 = v375[20];
      v377 = a1 + v376;
      v378 = (uint64_t)a2 + v376;
      v90 = sub_1A2AE3130();
      v91 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v91(v377, v378, v90);
      v379 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      *(_BYTE *)(v377 + v379[13]) = *(_BYTE *)(v378 + v379[13]);
      v380 = v379[14];
      v381 = v377 + v380;
      v382 = v378 + v380;
      v383 = sub_1A2AE30C4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v383 - 8) + 16))(v381, v382, v383);
      v384 = v379[15];
      v98 = (_QWORD *)(v377 + v384);
      v99 = (_QWORD *)(v378 + v384);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v385 = swift_getEnumCaseMultiPayload();
      if (v385 == 2)
      {
LABEL_147:
        v361 = v99[1];
        *v98 = *v99;
        v98[1] = v361;
        v362 = v99[3];
        v98[2] = v99[2];
        v98[3] = v362;
        v444 = (void (*)(char *, char *, uint64_t))v91;
        v98[4] = v99[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v363 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v364 = (char *)v98 + v363;
        v365 = (char *)v99 + v363;
        v366 = *(_QWORD *)((char *)v99 + v363 + 8);
        *(_QWORD *)v364 = *(_QWORD *)((char *)v99 + v363);
        *((_QWORD *)v364 + 1) = v366;
        v367 = *(_QWORD *)((char *)v99 + v363 + 16);
        v368 = *(_QWORD *)((char *)v99 + v363 + 24);
        v369 = *((_QWORD *)v365 + 4);
        v370 = *((_QWORD *)v365 + 5);
        v371 = v365[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v367, v368, v369, v370, v371);
        *((_QWORD *)v364 + 2) = v367;
        *((_QWORD *)v364 + 3) = v368;
        *((_QWORD *)v364 + 4) = v369;
        *((_QWORD *)v364 + 5) = v370;
        v364[48] = v371;
        v364[49] = v365[49];
        v372 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v21 = &v364[v372];
        v22 = &v365[v372];
        v444(&v364[v372], &v365[v372], v90);
        v23 = &qword_1EE67B788;
        goto LABEL_148;
      }
      if (v385 == 1)
      {
LABEL_154:
        *(_BYTE *)v98 = *(_BYTE *)v99;
        v386 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
        v387 = (char *)v98 + v386;
        v388 = (char *)v99 + v386;
        v91((uint64_t)v98 + v386, (uint64_t)v388, v90);
        v389 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
        v21 = &v387[v389];
        v22 = &v388[v389];
        v91((uint64_t)v21, (uint64_t)v22, v90);
        v23 = &qword_1EE67B7A0;
        goto LABEL_148;
      }
LABEL_156:
      v445 = (void (*)(char *, char *, uint64_t))v91;
      v390 = v99[1];
      *v98 = *v99;
      v98[1] = v390;
      v391 = v99[3];
      v98[2] = v99[2];
      v98[3] = v391;
      v98[4] = v99[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v392 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
      v393 = (char *)v98 + v392;
      v394 = (char *)v99 + v392;
      v395 = *(_QWORD *)((char *)v99 + v392 + 8);
      *(_QWORD *)v393 = *(_QWORD *)((char *)v99 + v392);
      *((_QWORD *)v393 + 1) = v395;
      v396 = *(_QWORD *)((char *)v99 + v392 + 16);
      v397 = *(_QWORD *)((char *)v99 + v392 + 24);
      v398 = *((_QWORD *)v394 + 4);
      v399 = *((_QWORD *)v394 + 5);
      v400 = v394[48];
      swift_bridgeObjectRetain();
      sub_1A2993E10(v396, v397, v398, v399, v400);
      *((_QWORD *)v393 + 2) = v396;
      *((_QWORD *)v393 + 3) = v397;
      *((_QWORD *)v393 + 4) = v398;
      *((_QWORD *)v393 + 5) = v399;
      v393[48] = v400;
      v393[49] = v394[49];
      v401 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
      v402 = &v393[v401];
      v403 = &v394[v401];
      v445(&v393[v401], &v394[v401], v90);
      v404 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
      v202 = &v402[v404];
      v203 = &v403[v404];
      goto LABEL_157;
    case 0xAu:
      v77 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v78 = swift_getEnumCaseMultiPayload();
      if (v78 == 2)
      {
        v260 = a2[1];
        if (v260 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v406 = *a2;
          sub_1A2973524(*a2, a2[1]);
          *(_QWORD *)a1 = v406;
          *(_QWORD *)(a1 + 8) = v260;
        }
      }
      else if (v78 == 1)
      {
        v261 = a2[1];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v261;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v78)
        {
          memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
          goto LABEL_160;
        }
        v79 = sub_1A2AE2F44();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(a1, a2, v79);
      }
      swift_storeEnumTagMultiPayload();
LABEL_160:
      v407 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C8);
      *(_QWORD *)(a1 + *(int *)(v407 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v407 + 48));
      *(_QWORD *)(a1 + *(int *)(v407 + 64)) = *(uint64_t *)((char *)a2 + *(int *)(v407 + 64));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_185;
    case 0xBu:
      v80 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v80;
      v81 = a2[3];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v81;
      v82 = a2[4];
      v83 = a2[5];
      v84 = *((_BYTE *)a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1A297208C();
      *(_QWORD *)(a1 + 32) = v82;
      *(_QWORD *)(a1 + 40) = v83;
      *(_BYTE *)(a1 + 48) = v84;
      v85 = a2[7];
      v86 = a2[8];
      sub_1A2973524(v85, v86);
      *(_QWORD *)(a1 + 56) = v85;
      *(_QWORD *)(a1 + 64) = v86;
      v87 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B8) + 48);
      v88 = a1 + v87;
      v89 = (uint64_t)a2 + v87;
      v90 = sub_1A2AE3130();
      v91 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 16);
      v91(v88, v89, v90);
      v92 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      *(_BYTE *)(v88 + v92[13]) = *(_BYTE *)(v89 + v92[13]);
      v93 = v92[14];
      v94 = v88 + v93;
      v95 = v89 + v93;
      v96 = sub_1A2AE30C4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v94, v95, v96);
      v97 = v92[15];
      v98 = (_QWORD *)(v88 + v97);
      v99 = (_QWORD *)(v89 + v97);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      v100 = swift_getEnumCaseMultiPayload();
      if (v100 == 2)
        goto LABEL_147;
      if (v100 == 1)
        goto LABEL_154;
      goto LABEL_156;
    case 0xCu:
      v101 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v101;
      v102 = a2[3];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v102;
      v103 = a2[4];
      v104 = a2[5];
      v105 = *((_BYTE *)a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1A297208C();
      *(_QWORD *)(a1 + 32) = v103;
      *(_QWORD *)(a1 + 40) = v104;
      *(_BYTE *)(a1 + 48) = v105;
      v106 = a2[7];
      v107 = a2[8];
      sub_1A2973524(v106, v107);
      *(_QWORD *)(a1 + 56) = v106;
      *(_QWORD *)(a1 + 64) = v107;
      goto LABEL_185;
    case 0xDu:
      v108 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v108;
      v109 = a2[3];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v109;
      v110 = a2[4];
      v111 = a2[5];
      v112 = *((_BYTE *)a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1A297208C();
      *(_QWORD *)(a1 + 32) = v110;
      *(_QWORD *)(a1 + 40) = v111;
      *(_BYTE *)(a1 + 48) = v112;
      v113 = a2[7];
      v114 = a2[8];
      sub_1A2973524(v113, v114);
      *(_QWORD *)(a1 + 56) = v113;
      *(_QWORD *)(a1 + 64) = v114;
      v115 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A8) + 48);
      v116 = a1 + v115;
      v117 = (uint64_t)a2 + v115;
      v34 = sub_1A2AE3130();
      v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
      v35(v116, v117, v34);
      v118 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
      *(_BYTE *)(v116 + v118[13]) = *(_BYTE *)(v117 + v118[13]);
      v119 = v118[14];
      v120 = v116 + v119;
      v121 = v117 + v119;
      v122 = sub_1A2AE30C4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v120, v121, v122);
      v123 = v118[15];
      v42 = (_QWORD *)(v116 + v123);
      v43 = (_QWORD *)(v117 + v123);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
      v124 = swift_getEnumCaseMultiPayload();
      if (v124 == 2)
      {
LABEL_73:
        v204 = v43[1];
        *v42 = *v43;
        v42[1] = v204;
        v205 = v43[3];
        v42[2] = v43[2];
        v42[3] = v205;
        v441 = (void (*)(char *, char *, uint64_t))v35;
        v42[4] = v43[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v206 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
        v207 = (char *)v42 + v206;
        v208 = (char *)v43 + v206;
        v209 = *(_QWORD *)((char *)v43 + v206 + 8);
        *(_QWORD *)v207 = *(_QWORD *)((char *)v43 + v206);
        *((_QWORD *)v207 + 1) = v209;
        v210 = *(_QWORD *)((char *)v43 + v206 + 16);
        v211 = *(_QWORD *)((char *)v43 + v206 + 24);
        v212 = *((_QWORD *)v208 + 4);
        v213 = *((_QWORD *)v208 + 5);
        v214 = v208[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v210, v211, v212, v213, v214);
        *((_QWORD *)v207 + 2) = v210;
        *((_QWORD *)v207 + 3) = v211;
        *((_QWORD *)v207 + 4) = v212;
        *((_QWORD *)v207 + 5) = v213;
        v207[48] = v214;
        v207[49] = v208[49];
        v215 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v21 = &v207[v215];
        v22 = &v208[v215];
        v441(&v207[v215], &v208[v215], v34);
        v23 = &qword_1EE67B788;
      }
      else
      {
        if (v124 != 1)
        {
LABEL_74:
          v442 = (void (*)(char *, char *, uint64_t))v35;
          v216 = v43[1];
          *v42 = *v43;
          v42[1] = v216;
          v217 = v43[3];
          v42[2] = v43[2];
          v42[3] = v217;
          v42[4] = v43[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v218 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
          v219 = (char *)v42 + v218;
          v220 = (char *)v43 + v218;
          v221 = *(_QWORD *)((char *)v43 + v218 + 8);
          *(_QWORD *)v219 = *(_QWORD *)((char *)v43 + v218);
          *((_QWORD *)v219 + 1) = v221;
          v222 = *(_QWORD *)((char *)v43 + v218 + 16);
          v223 = *(_QWORD *)((char *)v43 + v218 + 24);
          v224 = *((_QWORD *)v220 + 4);
          v225 = *((_QWORD *)v220 + 5);
          v226 = v220[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v222, v223, v224, v225, v226);
          *((_QWORD *)v219 + 2) = v222;
          *((_QWORD *)v219 + 3) = v223;
          *((_QWORD *)v219 + 4) = v224;
          *((_QWORD *)v219 + 5) = v225;
          v219[48] = v226;
          v219[49] = v220[49];
          v227 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v228 = &v219[v227];
          v229 = &v220[v227];
          v442(&v219[v227], &v220[v227], v34);
          v230 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v202 = &v228[v230];
          v203 = &v229[v230];
          goto LABEL_157;
        }
LABEL_8:
        *(_BYTE *)v42 = *(_BYTE *)v43;
        v45 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A8) + 48);
        v46 = (char *)v42 + v45;
        v47 = (char *)v43 + v45;
        v35((uint64_t)v42 + v45, (uint64_t)v47, v34);
        v48 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B0) + 52);
        v21 = &v46[v48];
        v22 = &v47[v48];
        v35((uint64_t)v21, (uint64_t)v22, v34);
        v23 = &qword_1EE67B7A0;
      }
LABEL_148:
      v373 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v23) + 68);
      v202 = &v21[v373];
      v203 = &v22[v373];
LABEL_157:
      v405 = *((_QWORD *)v203 + 1);
      *(_QWORD *)v202 = *(_QWORD *)v203;
      *((_QWORD *)v202 + 1) = v405;
      swift_retain();
      swift_storeEnumTagMultiPayload();
      goto LABEL_185;
    case 0xEu:
      v125 = a2[3];
      if (v125 >= 2)
      {
        v144 = a2[1];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v144;
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = v125;
        v145 = a2[4];
        v146 = a2[5];
        v147 = *((_BYTE *)a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        *(_QWORD *)(a1 + 32) = v145;
        *(_QWORD *)(a1 + 40) = v146;
        *(_BYTE *)(a1 + 48) = v147;
        v148 = a2[7];
        v149 = a2[8];
        sub_1A2973524(v148, v149);
        *(_QWORD *)(a1 + 56) = v148;
        *(_QWORD *)(a1 + 64) = v149;
      }
      else
      {
        v126 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
        *(_OWORD *)(a1 + 48) = v126;
        *(_QWORD *)(a1 + 64) = a2[8];
        v127 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v127;
      }
      v150 = a2[12];
      if (v150 >= 2)
      {
        v153 = a2[10];
        *(_QWORD *)(a1 + 72) = a2[9];
        *(_QWORD *)(a1 + 80) = v153;
        *(_QWORD *)(a1 + 88) = a2[11];
        *(_QWORD *)(a1 + 96) = v150;
        v154 = a2[13];
        v155 = a2[14];
        v156 = *((_BYTE *)a2 + 120);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        *(_QWORD *)(a1 + 104) = v154;
        *(_QWORD *)(a1 + 112) = v155;
        *(_BYTE *)(a1 + 120) = v156;
        v157 = a2[16];
        v158 = a2[17];
        sub_1A2973524(v157, v158);
        *(_QWORD *)(a1 + 128) = v157;
        *(_QWORD *)(a1 + 136) = v158;
      }
      else
      {
        v151 = *(_OWORD *)(a2 + 15);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
        *(_OWORD *)(a1 + 120) = v151;
        *(_QWORD *)(a1 + 136) = a2[17];
        v152 = *(_OWORD *)(a2 + 11);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
        *(_OWORD *)(a1 + 88) = v152;
      }
      goto LABEL_185;
    case 0xFu:
      v128 = sub_1A2AE30C4();
      v129 = *(_QWORD *)(v128 - 8);
      v130 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v129 + 16);
      v130(a1, a2, v128);
      v131 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
      v132 = v131[5];
      v133 = (void *)(a1 + v132);
      v134 = (char *)a2 + v132;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v129 + 48))((uint64_t)a2 + v132, 1, v128))
      {
        v135 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
        memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
      }
      else
      {
        v130((uint64_t)v133, (uint64_t *)v134, v128);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v133, 0, 1, v128);
      }
      *(_BYTE *)(a1 + v131[6]) = *((_BYTE *)a2 + v131[6]);
      v159 = v131[7];
      v160 = (_QWORD *)(a1 + v159);
      v161 = (uint64_t *)((char *)a2 + v159);
      v162 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
      v163 = *(_QWORD *)(v162 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v163 + 48))(v161, 1, v162))
      {
        v164 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
        memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
      }
      else
      {
        v171 = type metadata accessor for SFAirDropReceive.Failure();
        v172 = *(_QWORD *)(v171 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v172 + 48))(v161, 1, v171))
        {
          memcpy(v160, v161, *(_QWORD *)(v163 + 64));
        }
        else
        {
          v262 = swift_getEnumCaseMultiPayload();
          if (v262 == 1)
          {
            v408 = v161[1];
            *v160 = *v161;
            v160[1] = v408;
            *((_OWORD *)v160 + 1) = *((_OWORD *)v161 + 1);
            v409 = v161[5];
            v160[4] = v161[4];
            v160[5] = v409;
            v160[6] = v161[6];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_storeEnumTagMultiPayload();
          }
          else if (v262)
          {
            memcpy(v160, v161, *(_QWORD *)(v172 + 64));
          }
          else
          {
            v263 = v161[1];
            *v160 = *v161;
            v160[1] = v263;
            swift_bridgeObjectRetain();
            v264 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
            v265 = (char *)v160 + v264;
            v266 = (char *)v161 + v264;
            v267 = sub_1A2AE2F44();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v267 - 8) + 16))(v265, v266, v267);
            swift_storeEnumTagMultiPayload();
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v172 + 56))(v160, 0, 1, v171);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v163 + 56))(v160, 0, 1, v162);
      }
      v410 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A0);
      v411 = v410[12];
      v412 = (uint64_t *)(a1 + v411);
      v413 = (uint64_t *)((char *)a2 + v411);
      v414 = type metadata accessor for SFAirDropReceive.ItemDestination();
      v415 = swift_getEnumCaseMultiPayload();
      if (v415 == 2)
      {
        v417 = v413[1];
        if (v417 >> 60 == 15)
        {
          *(_OWORD *)v412 = *(_OWORD *)v413;
        }
        else
        {
          v419 = *v413;
          sub_1A2973524(*v413, v413[1]);
          *v412 = v419;
          v412[1] = v417;
        }
      }
      else if (v415 == 1)
      {
        v418 = v413[1];
        *v412 = *v413;
        v412[1] = v418;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v415)
        {
          memcpy(v412, v413, *(_QWORD *)(*(_QWORD *)(v414 - 8) + 64));
          goto LABEL_175;
        }
        v416 = sub_1A2AE2F44();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v416 - 8) + 16))(v412, v413, v416);
      }
      swift_storeEnumTagMultiPayload();
LABEL_175:
      v420 = v410[16];
      v421 = (_QWORD *)(a1 + v420);
      v422 = (uint64_t *)((char *)a2 + v420);
      v423 = v422[1];
      *v421 = *v422;
      v421[1] = v423;
      *(_QWORD *)(a1 + v410[20]) = *(uint64_t *)((char *)a2 + v410[20]);
      *(_QWORD *)(a1 + v410[24]) = *(uint64_t *)((char *)a2 + v410[24]);
      *(_QWORD *)(a1 + v410[28]) = *(uint64_t *)((char *)a2 + v410[28]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_185:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0x10u:
      v136 = sub_1A2AE30C4();
      v137 = *(_QWORD *)(v136 - 8);
      v138 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v137 + 16);
      v138(a1, a2, v136);
      v139 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
      v140 = v139[5];
      v141 = (void *)(a1 + v140);
      v142 = (char *)a2 + v140;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v137 + 48))((uint64_t)a2 + v140, 1, v136))
      {
        v143 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
        memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
      }
      else
      {
        v138((uint64_t)v141, (uint64_t *)v142, v136);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v141, 0, 1, v136);
      }
      *(_BYTE *)(a1 + v139[6]) = *((_BYTE *)a2 + v139[6]);
      v165 = v139[7];
      v166 = (_QWORD *)(a1 + v165);
      v167 = (uint64_t *)((char *)a2 + v165);
      v168 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
      v169 = *(_QWORD *)(v168 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v169 + 48))(v167, 1, v168))
      {
        v170 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
        memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
      }
      else
      {
        v173 = type metadata accessor for SFAirDropReceive.Failure();
        v174 = *(_QWORD *)(v173 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v174 + 48))(v167, 1, v173))
        {
          memcpy(v166, v167, *(_QWORD *)(v169 + 64));
        }
        else
        {
          v268 = swift_getEnumCaseMultiPayload();
          if (v268 == 1)
          {
            v424 = v167[1];
            *v166 = *v167;
            v166[1] = v424;
            *((_OWORD *)v166 + 1) = *((_OWORD *)v167 + 1);
            v425 = v167[5];
            v166[4] = v167[4];
            v166[5] = v425;
            v166[6] = v167[6];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_storeEnumTagMultiPayload();
          }
          else if (v268)
          {
            memcpy(v166, v167, *(_QWORD *)(v174 + 64));
          }
          else
          {
            v269 = v167[1];
            *v166 = *v167;
            v166[1] = v269;
            swift_bridgeObjectRetain();
            v270 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
            v271 = (char *)v166 + v270;
            v272 = (char *)v167 + v270;
            v273 = sub_1A2AE2F44();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v273 - 8) + 16))(v271, v272, v273);
            swift_storeEnumTagMultiPayload();
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v174 + 56))(v166, 0, 1, v173);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v169 + 56))(v166, 0, 1, v168);
      }
      v426 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B398) + 48);
      v427 = (_QWORD *)(a1 + v426);
      v428 = (uint64_t *)((char *)a2 + v426);
      v429 = type metadata accessor for SFAirDropReceive.Failure();
      v430 = swift_getEnumCaseMultiPayload();
      if (v430 == 1)
      {
        v436 = v428[1];
        *v427 = *v428;
        v427[1] = v436;
        *((_OWORD *)v427 + 1) = *((_OWORD *)v428 + 1);
        v437 = v428[5];
        v427[4] = v428[4];
        v427[5] = v437;
        v427[6] = v428[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      else if (v430)
      {
        memcpy(v427, v428, *(_QWORD *)(*(_QWORD *)(v429 - 8) + 64));
      }
      else
      {
        v431 = v428[1];
        *v427 = *v428;
        v427[1] = v431;
        swift_bridgeObjectRetain();
        v432 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
        v433 = (char *)v427 + v432;
        v434 = (char *)v428 + v432;
        v435 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v435 - 8) + 16))(v433, v434, v435);
        swift_storeEnumTagMultiPayload();
      }
      goto LABEL_185;
    default:
      memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
  }
}

uint64_t _s8TransferV5StateOwca(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t *, uint64_t);
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t);
  int *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t *, uint64_t);
  int *v126;
  uint64_t v127;
  void *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(uint64_t, uint64_t *, uint64_t);
  int *v134;
  uint64_t v135;
  void *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  unint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned __int8 v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned __int8 v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned __int8 v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned __int8 v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  int v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  int *v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t v259;
  int *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned __int8 v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  _QWORD *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  int *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  uint64_t v315;
  char *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  int *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  int *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned __int8 v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  char *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unsigned __int8 v348;
  uint64_t v349;
  char *v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int *v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t *v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  _QWORD *v367;
  uint64_t v368;
  _QWORD *v369;
  _QWORD *v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  char *v374;
  char *v375;
  uint64_t v376;
  void (*v378)(char *, char *, uint64_t);
  void (*v379)(char *, char *, uint64_t);
  void (*v380)(char *, char *, uint64_t);
  void (*v381)(char *, char *, uint64_t);
  void (*v382)(char *, char *, uint64_t);
  void (*v383)(char *, char *, uint64_t);

  if ((uint64_t *)a1 != a2)
  {
    sub_1A297DA3C(a1, type metadata accessor for SFAirDropReceive.Transfer.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = sub_1A2AE3130();
        v7 = *(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
        v7(a1, a2, v6);
        v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(a1 + v8[13]) = *((_BYTE *)a2 + v8[13]);
        v9 = v8[14];
        v10 = a1 + v9;
        v11 = (uint64_t)a2 + v9;
        v12 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
        v13 = v8[15];
        v14 = (_QWORD *)(a1 + v13);
        v15 = (uint64_t *)((char *)a2 + v13);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
          goto LABEL_76;
        if (EnumCaseMultiPayload != 1)
          goto LABEL_73;
        goto LABEL_12;
      case 1u:
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = a2[1];
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = a2[3];
        v17 = a2[4];
        v18 = a2[5];
        v19 = *((_BYTE *)a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        *(_QWORD *)(a1 + 32) = v17;
        *(_QWORD *)(a1 + 40) = v18;
        *(_BYTE *)(a1 + 48) = v19;
        v20 = a2[7];
        v21 = a2[8];
        sub_1A2973524(v20, v21);
        *(_QWORD *)(a1 + 56) = v20;
        *(_QWORD *)(a1 + 64) = v21;
        v22 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F8) + 48);
        v23 = a1 + v22;
        v24 = (uint64_t)a2 + v22;
        v25 = sub_1A2AE3130();
        v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
        v26(v23, v24, v25);
        v27 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
        *(_BYTE *)(v23 + v27[13]) = *(_BYTE *)(v24 + v27[13]);
        v28 = v27[14];
        v29 = v23 + v28;
        v30 = v24 + v28;
        v31 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
        v32 = v27[15];
        v33 = (_QWORD *)(v23 + v32);
        v34 = (_QWORD *)(v24 + v32);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
        v35 = swift_getEnumCaseMultiPayload();
        if (v35 == 2)
          goto LABEL_74;
        if (v35 == 1)
          goto LABEL_9;
        goto LABEL_75;
      case 2u:
        v6 = sub_1A2AE3130();
        v7 = *(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
        v7(a1, a2, v6);
        v43 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(a1 + v43[13]) = *((_BYTE *)a2 + v43[13]);
        v44 = v43[14];
        v45 = a1 + v44;
        v46 = (uint64_t)a2 + v44;
        v47 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
        v48 = v43[15];
        v14 = (_QWORD *)(a1 + v48);
        v15 = (uint64_t *)((char *)a2 + v48);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v49 = swift_getEnumCaseMultiPayload();
        if (v49 == 2)
        {
LABEL_76:
          *v14 = *v15;
          v14[1] = v15[1];
          v14[2] = v15[2];
          v14[3] = v15[3];
          v381 = (void (*)(char *, char *, uint64_t))v7;
          v14[4] = v15[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v203 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v204 = (char *)v14 + v203;
          v205 = (char *)v15 + v203;
          *(_QWORD *)v204 = *(_QWORD *)((char *)v15 + v203);
          *((_QWORD *)v204 + 1) = *(_QWORD *)((char *)v15 + v203 + 8);
          v206 = *(_QWORD *)((char *)v15 + v203 + 16);
          v207 = *(_QWORD *)((char *)v15 + v203 + 24);
          v208 = *((_QWORD *)v205 + 4);
          v209 = *((_QWORD *)v205 + 5);
          v210 = v205[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v206, v207, v208, v209, v210);
          *((_QWORD *)v204 + 2) = v206;
          *((_QWORD *)v204 + 3) = v207;
          *((_QWORD *)v204 + 4) = v208;
          *((_QWORD *)v204 + 5) = v209;
          v204[48] = v210;
          v204[49] = v205[49];
          v211 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v54 = &v204[v211];
          v55 = &v205[v211];
          v381(&v204[v211], &v205[v211], v6);
          v56 = &qword_1EE67B788;
        }
        else
        {
          if (v49 != 1)
          {
LABEL_73:
            v378 = (void (*)(char *, char *, uint64_t))v7;
            *v14 = *v15;
            v14[1] = v15[1];
            v14[2] = v15[2];
            v14[3] = v15[3];
            v14[4] = v15[4];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v168 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
            v169 = (char *)v14 + v168;
            v170 = (char *)v15 + v168;
            *(_QWORD *)v169 = *(_QWORD *)((char *)v15 + v168);
            *((_QWORD *)v169 + 1) = *(_QWORD *)((char *)v15 + v168 + 8);
            v171 = *(_QWORD *)((char *)v15 + v168 + 16);
            v172 = *((_QWORD *)v170 + 3);
            v173 = *((_QWORD *)v170 + 4);
            v174 = *((_QWORD *)v170 + 5);
            v175 = v170[48];
            swift_bridgeObjectRetain();
            sub_1A2993E10(v171, v172, v173, v174, v175);
            *((_QWORD *)v169 + 2) = v171;
            *((_QWORD *)v169 + 3) = v172;
            *((_QWORD *)v169 + 4) = v173;
            *((_QWORD *)v169 + 5) = v174;
            v169[48] = v175;
            v169[49] = v170[49];
            v176 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
            v177 = &v169[v176];
            v178 = &v170[v176];
            v378(&v169[v176], &v170[v176], v6);
            v179 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
            v180 = &v177[v179];
            v181 = &v178[v179];
            goto LABEL_159;
          }
LABEL_12:
          *(_BYTE *)v14 = *(_BYTE *)v15;
          v50 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v51 = (char *)v14 + v50;
          v52 = (char *)v15 + v50;
          v7((uint64_t)v14 + v50, (uint64_t *)v52, v6);
          v53 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v54 = &v51[v53];
          v55 = &v52[v53];
          v7((uint64_t)v54, (uint64_t *)v55, v6);
          v56 = &qword_1EE67B7A0;
        }
        v212 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v56) + 68);
        v180 = &v54[v212];
        v181 = &v55[v212];
        goto LABEL_159;
      case 3u:
        v57 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v58 = swift_getEnumCaseMultiPayload();
        if (v58 == 2)
        {
          v213 = a2[1];
          if (v213 >> 60 == 15)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
          }
          else
          {
            v231 = *a2;
            sub_1A2973524(*a2, a2[1]);
            *(_QWORD *)a1 = v231;
            *(_QWORD *)(a1 + 8) = v213;
          }
        }
        else if (v58 == 1)
        {
          *(_QWORD *)a1 = *a2;
          *(_QWORD *)(a1 + 8) = a2[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v58)
          {
            memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
            goto LABEL_123;
          }
          v59 = sub_1A2AE2F44();
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(a1, a2, v59);
        }
        swift_storeEnumTagMultiPayload();
LABEL_123:
        v232 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F0);
        v233 = v232[12];
        v234 = (uint64_t *)(a1 + v233);
        v235 = (uint64_t *)((char *)a2 + v233);
        v236 = *v235;
        v237 = v235[1];
        v238 = v235[2];
        v239 = v235[3];
        v240 = v235[4];
        sub_1A2993E5C(*v235, v237, v238);
        *v234 = v236;
        v234[1] = v237;
        v234[2] = v238;
        v234[3] = v239;
        v234[4] = v240;
        v241 = v232[16];
        v242 = (_QWORD *)(a1 + v241);
        v243 = (uint64_t *)((char *)a2 + v241);
        *v242 = *v243;
        v242[1] = v243[1];
        v244 = v232[20];
        v245 = a1 + v244;
        v246 = (uint64_t)a2 + v244;
        *(_QWORD *)v245 = *(uint64_t *)((char *)a2 + v244);
        *(_QWORD *)(v245 + 8) = *(uint64_t *)((char *)a2 + v244 + 8);
        v247 = *(uint64_t *)((char *)a2 + v244 + 16);
        v248 = *(uint64_t *)((char *)a2 + v244 + 24);
        v249 = *(uint64_t *)((char *)a2 + v244 + 32);
        v250 = *(uint64_t *)((char *)a2 + v244 + 40);
        LOBYTE(v239) = *((_BYTE *)a2 + v244 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A2993E10(v247, v248, v249, v250, v239);
        *(_QWORD *)(v245 + 16) = v247;
        *(_QWORD *)(v245 + 24) = v248;
        *(_QWORD *)(v245 + 32) = v249;
        *(_QWORD *)(v245 + 40) = v250;
        *(_BYTE *)(v245 + 48) = v239;
        *(_BYTE *)(v245 + 49) = *(_BYTE *)(v246 + 49);
        v251 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v252 = v245 + v251;
        v253 = v246 + v251;
        v254 = sub_1A2AE3130();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v254 - 8) + 16))(v252, v253, v254);
        v255 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v256 = (_QWORD *)(v252 + v255);
        v257 = (_QWORD *)(v253 + v255);
        v258 = v257[1];
        *v256 = *v257;
        v256[1] = v258;
        swift_retain();
        goto LABEL_187;
      case 4u:
        v60 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v61 = swift_getEnumCaseMultiPayload();
        if (v61 == 2)
        {
          v214 = a2[1];
          if (v214 >> 60 == 15)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
          }
          else
          {
            v259 = *a2;
            sub_1A2973524(*a2, a2[1]);
            *(_QWORD *)a1 = v259;
            *(_QWORD *)(a1 + 8) = v214;
          }
        }
        else if (v61 == 1)
        {
          *(_QWORD *)a1 = *a2;
          *(_QWORD *)(a1 + 8) = a2[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v61)
          {
            memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
            goto LABEL_126;
          }
          v62 = sub_1A2AE2F44();
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(a1, a2, v62);
        }
        swift_storeEnumTagMultiPayload();
LABEL_126:
        v260 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E8);
        *(_QWORD *)(a1 + v260[12]) = *(uint64_t *)((char *)a2 + v260[12]);
        *(_QWORD *)(a1 + v260[16]) = *(uint64_t *)((char *)a2 + v260[16]);
        v261 = v260[20];
        v262 = a1 + v261;
        v263 = (uint64_t)a2 + v261;
        *(_QWORD *)v262 = *(uint64_t *)((char *)a2 + v261);
        *(_QWORD *)(v262 + 8) = *(uint64_t *)((char *)a2 + v261 + 8);
        v264 = *(uint64_t *)((char *)a2 + v261 + 16);
        v265 = *(uint64_t *)((char *)a2 + v261 + 24);
        v266 = *(uint64_t *)((char *)a2 + v261 + 32);
        v267 = *(uint64_t *)((char *)a2 + v261 + 40);
        v268 = *((_BYTE *)a2 + v261 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A2993E10(v264, v265, v266, v267, v268);
        *(_QWORD *)(v262 + 16) = v264;
        *(_QWORD *)(v262 + 24) = v265;
        *(_QWORD *)(v262 + 32) = v266;
        *(_QWORD *)(v262 + 40) = v267;
        *(_BYTE *)(v262 + 48) = v268;
        *(_BYTE *)(v262 + 49) = *(_BYTE *)(v263 + 49);
        v269 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v270 = v262 + v269;
        v271 = v263 + v269;
        v272 = sub_1A2AE3130();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v272 - 8) + 16))(v270, v271, v272);
        v273 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v274 = (_QWORD *)(v270 + v273);
        v275 = (_QWORD *)(v271 + v273);
        v276 = v275[1];
        *v274 = *v275;
        v274[1] = v276;
        swift_retain();
        goto LABEL_187;
      case 5u:
        v63 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v64 = swift_getEnumCaseMultiPayload();
        if (v64 == 2)
        {
          v215 = a2[1];
          if (v215 >> 60 == 15)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
          }
          else
          {
            v277 = *a2;
            sub_1A2973524(*a2, a2[1]);
            *(_QWORD *)a1 = v277;
            *(_QWORD *)(a1 + 8) = v215;
          }
        }
        else if (v64 == 1)
        {
          *(_QWORD *)a1 = *a2;
          *(_QWORD *)(a1 + 8) = a2[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v64)
          {
            memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
            goto LABEL_129;
          }
          v65 = sub_1A2AE2F44();
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(a1, a2, v65);
        }
        swift_storeEnumTagMultiPayload();
LABEL_129:
        v278 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
        *(_QWORD *)(a1 + *(int *)(v278 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v278 + 48));
        v279 = *(int *)(v278 + 64);
        v280 = a1 + v279;
        v281 = (uint64_t)a2 + v279;
        v89 = sub_1A2AE3130();
        v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 16);
        swift_bridgeObjectRetain();
        v90(v280, v281, v89);
        v282 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(v280 + v282[13]) = *(_BYTE *)(v281 + v282[13]);
        v283 = v282[14];
        v284 = v280 + v283;
        v285 = v281 + v283;
        v286 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v286 - 8) + 16))(v284, v285, v286);
        v287 = v282[15];
        v97 = (_QWORD *)(v280 + v287);
        v98 = (_QWORD *)(v281 + v287);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v288 = swift_getEnumCaseMultiPayload();
        if (v288 == 2)
          goto LABEL_156;
        if (v288 == 1)
          goto LABEL_148;
        goto LABEL_158;
      case 6u:
        v66 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v67 = swift_getEnumCaseMultiPayload();
        if (v67 == 2)
        {
          v216 = a2[1];
          if (v216 >> 60 == 15)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
          }
          else
          {
            v289 = *a2;
            sub_1A2973524(*a2, a2[1]);
            *(_QWORD *)a1 = v289;
            *(_QWORD *)(a1 + 8) = v216;
          }
        }
        else if (v67 == 1)
        {
          *(_QWORD *)a1 = *a2;
          *(_QWORD *)(a1 + 8) = a2[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v67)
          {
            memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
            goto LABEL_136;
          }
          v68 = sub_1A2AE2F44();
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(a1, a2, v68);
        }
        swift_storeEnumTagMultiPayload();
LABEL_136:
        v290 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
        *(_QWORD *)(a1 + *(int *)(v290 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v290 + 48));
        v291 = *(int *)(v290 + 64);
        v292 = a1 + v291;
        v293 = (uint64_t)a2 + v291;
        v89 = sub_1A2AE3130();
        v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 16);
        swift_bridgeObjectRetain();
        v90(v292, v293, v89);
        v294 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(v292 + v294[13]) = *(_BYTE *)(v293 + v294[13]);
        v295 = v294[14];
        v296 = v292 + v295;
        v297 = v293 + v295;
        v298 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v298 - 8) + 16))(v296, v297, v298);
        v299 = v294[15];
        v97 = (_QWORD *)(v292 + v299);
        v98 = (_QWORD *)(v293 + v299);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v300 = swift_getEnumCaseMultiPayload();
        if (v300 == 2)
          goto LABEL_156;
        if (v300 == 1)
          goto LABEL_148;
        goto LABEL_158;
      case 7u:
        v69 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v70 = swift_getEnumCaseMultiPayload();
        if (v70 == 2)
        {
          v217 = a2[1];
          if (v217 >> 60 == 15)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
          }
          else
          {
            v301 = *a2;
            sub_1A2973524(*a2, a2[1]);
            *(_QWORD *)a1 = v301;
            *(_QWORD *)(a1 + 8) = v217;
          }
        }
        else if (v70 == 1)
        {
          *(_QWORD *)a1 = *a2;
          *(_QWORD *)(a1 + 8) = a2[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v70)
          {
            memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
            goto LABEL_143;
          }
          v71 = sub_1A2AE2F44();
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(a1, a2, v71);
        }
        swift_storeEnumTagMultiPayload();
LABEL_143:
        v302 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D8);
        *(_QWORD *)(a1 + *(int *)(v302 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v302 + 48));
        *(_QWORD *)(a1 + *(int *)(v302 + 64)) = *(uint64_t *)((char *)a2 + *(int *)(v302 + 64));
        swift_bridgeObjectRetain();
        goto LABEL_187;
      case 8u:
        v72 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v73 = swift_getEnumCaseMultiPayload();
        if (v73 == 2)
        {
          v218 = a2[1];
          if (v218 >> 60 == 15)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
          }
          else
          {
            v303 = *a2;
            sub_1A2973524(*a2, a2[1]);
            *(_QWORD *)a1 = v303;
            *(_QWORD *)(a1 + 8) = v218;
          }
        }
        else if (v73 == 1)
        {
          *(_QWORD *)a1 = *a2;
          *(_QWORD *)(a1 + 8) = a2[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v73)
          {
            memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
            goto LABEL_146;
          }
          v74 = sub_1A2AE2F44();
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(a1, a2, v74);
        }
        swift_storeEnumTagMultiPayload();
LABEL_146:
        v304 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
        *(_QWORD *)(a1 + v304[12]) = *(uint64_t *)((char *)a2 + v304[12]);
        *(_QWORD *)(a1 + v304[16]) = *(uint64_t *)((char *)a2 + v304[16]);
        v305 = v304[20];
        v306 = a1 + v305;
        v307 = (uint64_t)a2 + v305;
        v89 = sub_1A2AE3130();
        v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v90(v306, v307, v89);
        v308 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(v306 + v308[13]) = *(_BYTE *)(v307 + v308[13]);
        v309 = v308[14];
        v310 = v306 + v309;
        v311 = v307 + v309;
        v312 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v312 - 8) + 16))(v310, v311, v312);
        v313 = v308[15];
        v97 = (_QWORD *)(v306 + v313);
        v98 = (_QWORD *)(v307 + v313);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v314 = swift_getEnumCaseMultiPayload();
        if (v314 == 2)
          goto LABEL_156;
        if (v314 == 1)
          goto LABEL_148;
        goto LABEL_158;
      case 9u:
        v75 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v76 = swift_getEnumCaseMultiPayload();
        if (v76 == 2)
        {
          v219 = a2[1];
          if (v219 >> 60 == 15)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
          }
          else
          {
            v319 = *a2;
            sub_1A2973524(*a2, a2[1]);
            *(_QWORD *)a1 = v319;
            *(_QWORD *)(a1 + 8) = v219;
          }
        }
        else if (v76 == 1)
        {
          *(_QWORD *)a1 = *a2;
          *(_QWORD *)(a1 + 8) = a2[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v76)
          {
            memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
            goto LABEL_153;
          }
          v77 = sub_1A2AE2F44();
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(a1, a2, v77);
        }
        swift_storeEnumTagMultiPayload();
LABEL_153:
        v320 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
        *(_QWORD *)(a1 + v320[12]) = *(uint64_t *)((char *)a2 + v320[12]);
        *(_QWORD *)(a1 + v320[16]) = *(uint64_t *)((char *)a2 + v320[16]);
        v321 = v320[20];
        v322 = a1 + v321;
        v323 = (uint64_t)a2 + v321;
        v89 = sub_1A2AE3130();
        v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v90(v322, v323, v89);
        v324 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(v322 + v324[13]) = *(_BYTE *)(v323 + v324[13]);
        v325 = v324[14];
        v326 = v322 + v325;
        v327 = v323 + v325;
        v328 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v328 - 8) + 16))(v326, v327, v328);
        v329 = v324[15];
        v97 = (_QWORD *)(v322 + v329);
        v98 = (_QWORD *)(v323 + v329);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v330 = swift_getEnumCaseMultiPayload();
        if (v330 == 2)
        {
LABEL_156:
          *v97 = *v98;
          v97[1] = v98[1];
          v97[2] = v98[2];
          v97[3] = v98[3];
          v97[4] = v98[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v331 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v332 = (char *)v97 + v331;
          v333 = (char *)v98 + v331;
          *(_QWORD *)v332 = *(_QWORD *)((char *)v98 + v331);
          *((_QWORD *)v332 + 1) = *(_QWORD *)((char *)v98 + v331 + 8);
          v334 = *(_QWORD *)((char *)v98 + v331 + 16);
          v335 = *(_QWORD *)((char *)v98 + v331 + 24);
          v382 = (void (*)(char *, char *, uint64_t))v90;
          v336 = *((_QWORD *)v333 + 4);
          v337 = *((_QWORD *)v333 + 5);
          v338 = v333[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v334, v335, v336, v337, v338);
          *((_QWORD *)v332 + 2) = v334;
          *((_QWORD *)v332 + 3) = v335;
          *((_QWORD *)v332 + 4) = v336;
          *((_QWORD *)v332 + 5) = v337;
          v332[48] = v338;
          v332[49] = v333[49];
          v339 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v40 = &v332[v339];
          v41 = &v333[v339];
          v382(&v332[v339], &v333[v339], v89);
          v42 = &qword_1EE67B788;
          goto LABEL_157;
        }
        if (v330 == 1)
        {
LABEL_148:
          *(_BYTE *)v97 = *(_BYTE *)v98;
          v315 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v316 = (char *)v97 + v315;
          v317 = (char *)v98 + v315;
          v90((uint64_t)v97 + v315, (uint64_t)v317, v89);
          v318 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v40 = &v316[v318];
          v41 = &v317[v318];
          v90((uint64_t)v40, (uint64_t)v41, v89);
          v42 = &qword_1EE67B7A0;
          goto LABEL_157;
        }
LABEL_158:
        v383 = (void (*)(char *, char *, uint64_t))v90;
        *v97 = *v98;
        v97[1] = v98[1];
        v97[2] = v98[2];
        v97[3] = v98[3];
        v97[4] = v98[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v341 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v342 = (char *)v97 + v341;
        v343 = (char *)v98 + v341;
        *(_QWORD *)v342 = *(_QWORD *)((char *)v98 + v341);
        *((_QWORD *)v342 + 1) = *(_QWORD *)((char *)v98 + v341 + 8);
        v344 = *(_QWORD *)((char *)v98 + v341 + 16);
        v345 = *((_QWORD *)v343 + 3);
        v346 = *((_QWORD *)v343 + 4);
        v347 = *((_QWORD *)v343 + 5);
        v348 = v343[48];
        swift_bridgeObjectRetain();
        sub_1A2993E10(v344, v345, v346, v347, v348);
        *((_QWORD *)v342 + 2) = v344;
        *((_QWORD *)v342 + 3) = v345;
        *((_QWORD *)v342 + 4) = v346;
        *((_QWORD *)v342 + 5) = v347;
        v342[48] = v348;
        v342[49] = v343[49];
        v349 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v350 = &v342[v349];
        v351 = &v343[v349];
        v383(&v342[v349], &v343[v349], v89);
        v352 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v180 = &v350[v352];
        v181 = &v351[v352];
        goto LABEL_159;
      case 0xAu:
        v78 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v79 = swift_getEnumCaseMultiPayload();
        if (v79 == 2)
        {
          v220 = a2[1];
          if (v220 >> 60 == 15)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
          }
          else
          {
            v354 = *a2;
            sub_1A2973524(*a2, a2[1]);
            *(_QWORD *)a1 = v354;
            *(_QWORD *)(a1 + 8) = v220;
          }
        }
        else if (v79 == 1)
        {
          *(_QWORD *)a1 = *a2;
          *(_QWORD *)(a1 + 8) = a2[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v79)
          {
            memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
            goto LABEL_162;
          }
          v80 = sub_1A2AE2F44();
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(a1, a2, v80);
        }
        swift_storeEnumTagMultiPayload();
LABEL_162:
        v355 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C8);
        *(_QWORD *)(a1 + *(int *)(v355 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v355 + 48));
        *(_QWORD *)(a1 + *(int *)(v355 + 64)) = *(uint64_t *)((char *)a2 + *(int *)(v355 + 64));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_187;
      case 0xBu:
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = a2[1];
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = a2[3];
        v81 = a2[4];
        v82 = a2[5];
        v83 = *((_BYTE *)a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        *(_QWORD *)(a1 + 32) = v81;
        *(_QWORD *)(a1 + 40) = v82;
        *(_BYTE *)(a1 + 48) = v83;
        v84 = a2[7];
        v85 = a2[8];
        sub_1A2973524(v84, v85);
        *(_QWORD *)(a1 + 56) = v84;
        *(_QWORD *)(a1 + 64) = v85;
        v86 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B8) + 48);
        v87 = a1 + v86;
        v88 = (uint64_t)a2 + v86;
        v89 = sub_1A2AE3130();
        v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 16);
        v90(v87, v88, v89);
        v91 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(v87 + v91[13]) = *(_BYTE *)(v88 + v91[13]);
        v92 = v91[14];
        v93 = v87 + v92;
        v94 = v88 + v92;
        v95 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(v93, v94, v95);
        v96 = v91[15];
        v97 = (_QWORD *)(v87 + v96);
        v98 = (_QWORD *)(v88 + v96);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        v99 = swift_getEnumCaseMultiPayload();
        if (v99 == 2)
          goto LABEL_156;
        if (v99 == 1)
          goto LABEL_148;
        goto LABEL_158;
      case 0xCu:
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = a2[1];
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = a2[3];
        v100 = a2[4];
        v101 = a2[5];
        v102 = *((_BYTE *)a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        *(_QWORD *)(a1 + 32) = v100;
        *(_QWORD *)(a1 + 40) = v101;
        *(_BYTE *)(a1 + 48) = v102;
        v104 = a2[7];
        v103 = a2[8];
        sub_1A2973524(v104, v103);
        *(_QWORD *)(a1 + 56) = v104;
        *(_QWORD *)(a1 + 64) = v103;
        goto LABEL_187;
      case 0xDu:
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = a2[1];
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = a2[3];
        v105 = a2[4];
        v106 = a2[5];
        v107 = *((_BYTE *)a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297208C();
        *(_QWORD *)(a1 + 32) = v105;
        *(_QWORD *)(a1 + 40) = v106;
        *(_BYTE *)(a1 + 48) = v107;
        v108 = a2[7];
        v109 = a2[8];
        sub_1A2973524(v108, v109);
        *(_QWORD *)(a1 + 56) = v108;
        *(_QWORD *)(a1 + 64) = v109;
        v110 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A8) + 48);
        v111 = a1 + v110;
        v112 = (uint64_t)a2 + v110;
        v25 = sub_1A2AE3130();
        v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
        v26(v111, v112, v25);
        v113 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
        *(_BYTE *)(v111 + v113[13]) = *(_BYTE *)(v112 + v113[13]);
        v114 = v113[14];
        v115 = v111 + v114;
        v116 = v112 + v114;
        v117 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 16))(v115, v116, v117);
        v118 = v113[15];
        v33 = (_QWORD *)(v111 + v118);
        v34 = (_QWORD *)(v112 + v118);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
        v119 = swift_getEnumCaseMultiPayload();
        if (v119 == 2)
        {
LABEL_74:
          *v33 = *v34;
          v33[1] = v34[1];
          v33[2] = v34[2];
          v33[3] = v34[3];
          v33[4] = v34[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v182 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
          v183 = (char *)v33 + v182;
          v184 = (char *)v34 + v182;
          *(_QWORD *)v183 = *(_QWORD *)((char *)v34 + v182);
          *((_QWORD *)v183 + 1) = *(_QWORD *)((char *)v34 + v182 + 8);
          v185 = *(_QWORD *)((char *)v34 + v182 + 16);
          v186 = *(_QWORD *)((char *)v34 + v182 + 24);
          v379 = (void (*)(char *, char *, uint64_t))v26;
          v187 = *((_QWORD *)v184 + 4);
          v188 = *((_QWORD *)v184 + 5);
          v189 = v184[48];
          swift_bridgeObjectRetain();
          sub_1A2993E10(v185, v186, v187, v188, v189);
          *((_QWORD *)v183 + 2) = v185;
          *((_QWORD *)v183 + 3) = v186;
          *((_QWORD *)v183 + 4) = v187;
          *((_QWORD *)v183 + 5) = v188;
          v183[48] = v189;
          v183[49] = v184[49];
          v190 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v40 = &v183[v190];
          v41 = &v184[v190];
          v379(&v183[v190], &v184[v190], v25);
          v42 = &qword_1EE67B788;
        }
        else
        {
          if (v119 != 1)
          {
LABEL_75:
            v380 = (void (*)(char *, char *, uint64_t))v26;
            *v33 = *v34;
            v33[1] = v34[1];
            v33[2] = v34[2];
            v33[3] = v34[3];
            v33[4] = v34[4];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v191 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
            v192 = (char *)v33 + v191;
            v193 = (char *)v34 + v191;
            *(_QWORD *)v192 = *(_QWORD *)((char *)v34 + v191);
            *((_QWORD *)v192 + 1) = *(_QWORD *)((char *)v34 + v191 + 8);
            v194 = *(_QWORD *)((char *)v34 + v191 + 16);
            v195 = *((_QWORD *)v193 + 3);
            v196 = *((_QWORD *)v193 + 4);
            v197 = *((_QWORD *)v193 + 5);
            v198 = v193[48];
            swift_bridgeObjectRetain();
            sub_1A2993E10(v194, v195, v196, v197, v198);
            *((_QWORD *)v192 + 2) = v194;
            *((_QWORD *)v192 + 3) = v195;
            *((_QWORD *)v192 + 4) = v196;
            *((_QWORD *)v192 + 5) = v197;
            v192[48] = v198;
            v192[49] = v193[49];
            v199 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
            v200 = &v192[v199];
            v201 = &v193[v199];
            v380(&v192[v199], &v193[v199], v25);
            v202 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
            v180 = &v200[v202];
            v181 = &v201[v202];
            goto LABEL_159;
          }
LABEL_9:
          *(_BYTE *)v33 = *(_BYTE *)v34;
          v36 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A8) + 48);
          v37 = (char *)v33 + v36;
          v38 = (char *)v34 + v36;
          v26((uint64_t)v33 + v36, (uint64_t)v38, v25);
          v39 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B0) + 52);
          v40 = &v37[v39];
          v41 = &v38[v39];
          v26((uint64_t)v40, (uint64_t)v41, v25);
          v42 = &qword_1EE67B7A0;
        }
LABEL_157:
        v340 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v42) + 68);
        v180 = &v40[v340];
        v181 = &v41[v340];
LABEL_159:
        v353 = *((_QWORD *)v181 + 1);
        *(_QWORD *)v180 = *(_QWORD *)v181;
        *((_QWORD *)v180 + 1) = v353;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        goto LABEL_187;
      case 0xEu:
        if ((unint64_t)a2[3] >= 2)
        {
          *(_QWORD *)a1 = *a2;
          *(_QWORD *)(a1 + 8) = a2[1];
          *(_QWORD *)(a1 + 16) = a2[2];
          *(_QWORD *)(a1 + 24) = a2[3];
          v139 = a2[4];
          v140 = a2[5];
          v141 = *((_BYTE *)a2 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1A297208C();
          *(_QWORD *)(a1 + 32) = v139;
          *(_QWORD *)(a1 + 40) = v140;
          *(_BYTE *)(a1 + 48) = v141;
          v142 = a2[7];
          v143 = a2[8];
          sub_1A2973524(v142, v143);
          *(_QWORD *)(a1 + 56) = v142;
          *(_QWORD *)(a1 + 64) = v143;
        }
        else
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v120 = *((_OWORD *)a2 + 1);
          v121 = *((_OWORD *)a2 + 2);
          v122 = *((_OWORD *)a2 + 3);
          *(_QWORD *)(a1 + 64) = a2[8];
          *(_OWORD *)(a1 + 32) = v121;
          *(_OWORD *)(a1 + 48) = v122;
          *(_OWORD *)(a1 + 16) = v120;
        }
        if ((unint64_t)a2[12] >= 2)
        {
          *(_QWORD *)(a1 + 72) = a2[9];
          *(_QWORD *)(a1 + 80) = a2[10];
          *(_QWORD *)(a1 + 88) = a2[11];
          *(_QWORD *)(a1 + 96) = a2[12];
          v147 = a2[13];
          v148 = a2[14];
          v149 = *((_BYTE *)a2 + 120);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1A297208C();
          *(_QWORD *)(a1 + 104) = v147;
          *(_QWORD *)(a1 + 112) = v148;
          *(_BYTE *)(a1 + 120) = v149;
          v151 = a2[16];
          v150 = a2[17];
          sub_1A2973524(v151, v150);
          *(_QWORD *)(a1 + 128) = v151;
          *(_QWORD *)(a1 + 136) = v150;
        }
        else
        {
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
          v144 = *(_OWORD *)(a2 + 11);
          v145 = *(_OWORD *)(a2 + 13);
          v146 = *(_OWORD *)(a2 + 15);
          *(_QWORD *)(a1 + 136) = a2[17];
          *(_OWORD *)(a1 + 104) = v145;
          *(_OWORD *)(a1 + 120) = v146;
          *(_OWORD *)(a1 + 88) = v144;
        }
        goto LABEL_187;
      case 0xFu:
        v123 = sub_1A2AE30C4();
        v124 = *(_QWORD *)(v123 - 8);
        v125 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v124 + 16);
        v125(a1, a2, v123);
        v126 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
        v127 = v126[5];
        v128 = (void *)(a1 + v127);
        v129 = (char *)a2 + v127;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48))((uint64_t)a2 + v127, 1, v123))
        {
          v130 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
          memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
        }
        else
        {
          v125((uint64_t)v128, (uint64_t *)v129, v123);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v128, 0, 1, v123);
        }
        *(_BYTE *)(a1 + v126[6]) = *((_BYTE *)a2 + v126[6]);
        v152 = v126[7];
        v153 = (_QWORD *)(a1 + v152);
        v154 = (uint64_t *)((char *)a2 + v152);
        v155 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
        v156 = *(_QWORD *)(v155 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v156 + 48))(v154, 1, v155))
        {
          v157 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
          memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
        }
        else
        {
          v164 = type metadata accessor for SFAirDropReceive.Failure();
          v165 = *(_QWORD *)(v164 - 8);
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v165 + 48))(v154, 1, v164))
          {
            memcpy(v153, v154, *(_QWORD *)(v156 + 64));
          }
          else
          {
            v221 = swift_getEnumCaseMultiPayload();
            if (v221 == 1)
            {
              *v153 = *v154;
              v153[1] = v154[1];
              v153[2] = v154[2];
              v153[3] = v154[3];
              v153[4] = v154[4];
              v153[5] = v154[5];
              v153[6] = v154[6];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_storeEnumTagMultiPayload();
            }
            else if (v221)
            {
              memcpy(v153, v154, *(_QWORD *)(v165 + 64));
            }
            else
            {
              *v153 = *v154;
              v153[1] = v154[1];
              swift_bridgeObjectRetain();
              v222 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
              v223 = (char *)v153 + v222;
              v224 = (char *)v154 + v222;
              v225 = sub_1A2AE2F44();
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v225 - 8) + 16))(v223, v224, v225);
              swift_storeEnumTagMultiPayload();
            }
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v165 + 56))(v153, 0, 1, v164);
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v156 + 56))(v153, 0, 1, v155);
        }
        v356 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A0);
        v357 = v356[12];
        v358 = (uint64_t *)(a1 + v357);
        v359 = (uint64_t *)((char *)a2 + v357);
        v360 = type metadata accessor for SFAirDropReceive.ItemDestination();
        v361 = swift_getEnumCaseMultiPayload();
        if (v361 == 2)
        {
          v363 = v359[1];
          if (v363 >> 60 == 15)
          {
            *(_OWORD *)v358 = *(_OWORD *)v359;
          }
          else
          {
            v364 = *v359;
            sub_1A2973524(v364, v363);
            *v358 = v364;
            v358[1] = v363;
          }
        }
        else if (v361 == 1)
        {
          *v358 = *v359;
          v358[1] = v359[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v361)
          {
            memcpy(v358, v359, *(_QWORD *)(*(_QWORD *)(v360 - 8) + 64));
            goto LABEL_177;
          }
          v362 = sub_1A2AE2F44();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v362 - 8) + 16))(v358, v359, v362);
        }
        swift_storeEnumTagMultiPayload();
LABEL_177:
        v365 = v356[16];
        v366 = (_QWORD *)(a1 + v365);
        v367 = (uint64_t *)((char *)a2 + v365);
        *v366 = *v367;
        v366[1] = v367[1];
        *(_QWORD *)(a1 + v356[20]) = *(uint64_t *)((char *)a2 + v356[20]);
        *(_QWORD *)(a1 + v356[24]) = *(uint64_t *)((char *)a2 + v356[24]);
        *(_QWORD *)(a1 + v356[28]) = *(uint64_t *)((char *)a2 + v356[28]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_187:
        swift_storeEnumTagMultiPayload();
        break;
      case 0x10u:
        v131 = sub_1A2AE30C4();
        v132 = *(_QWORD *)(v131 - 8);
        v133 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v132 + 16);
        v133(a1, a2, v131);
        v134 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
        v135 = v134[5];
        v136 = (void *)(a1 + v135);
        v137 = (char *)a2 + v135;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v132 + 48))((uint64_t)a2 + v135, 1, v131))
        {
          v138 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
          memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
        }
        else
        {
          v133((uint64_t)v136, (uint64_t *)v137, v131);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v132 + 56))(v136, 0, 1, v131);
        }
        *(_BYTE *)(a1 + v134[6]) = *((_BYTE *)a2 + v134[6]);
        v158 = v134[7];
        v159 = (_QWORD *)(a1 + v158);
        v160 = (uint64_t *)((char *)a2 + v158);
        v161 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
        v162 = *(_QWORD *)(v161 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v162 + 48))(v160, 1, v161))
        {
          v163 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
          memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
        }
        else
        {
          v166 = type metadata accessor for SFAirDropReceive.Failure();
          v167 = *(_QWORD *)(v166 - 8);
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v167 + 48))(v160, 1, v166))
          {
            memcpy(v159, v160, *(_QWORD *)(v162 + 64));
          }
          else
          {
            v226 = swift_getEnumCaseMultiPayload();
            if (v226 == 1)
            {
              *v159 = *v160;
              v159[1] = v160[1];
              v159[2] = v160[2];
              v159[3] = v160[3];
              v159[4] = v160[4];
              v159[5] = v160[5];
              v159[6] = v160[6];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_storeEnumTagMultiPayload();
            }
            else if (v226)
            {
              memcpy(v159, v160, *(_QWORD *)(v167 + 64));
            }
            else
            {
              *v159 = *v160;
              v159[1] = v160[1];
              swift_bridgeObjectRetain();
              v227 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
              v228 = (char *)v159 + v227;
              v229 = (char *)v160 + v227;
              v230 = sub_1A2AE2F44();
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v230 - 8) + 16))(v228, v229, v230);
              swift_storeEnumTagMultiPayload();
            }
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v167 + 56))(v159, 0, 1, v166);
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v162 + 56))(v159, 0, 1, v161);
        }
        v368 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B398) + 48);
        v369 = (_QWORD *)(a1 + v368);
        v370 = (uint64_t *)((char *)a2 + v368);
        v371 = type metadata accessor for SFAirDropReceive.Failure();
        v372 = swift_getEnumCaseMultiPayload();
        if (v372 == 1)
        {
          *v369 = *v370;
          v369[1] = v370[1];
          v369[2] = v370[2];
          v369[3] = v370[3];
          v369[4] = v370[4];
          v369[5] = v370[5];
          v369[6] = v370[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
        }
        else if (v372)
        {
          memcpy(v369, v370, *(_QWORD *)(*(_QWORD *)(v371 - 8) + 64));
        }
        else
        {
          *v369 = *v370;
          v369[1] = v370[1];
          swift_bridgeObjectRetain();
          v373 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
          v374 = (char *)v369 + v373;
          v375 = (char *)v370 + v373;
          v376 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v376 - 8) + 16))(v374, v375, v376);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_187;
      default:
        memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
    }
  }
  return a1;
}

uint64_t _s8TransferV5StateOwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t, uint64_t);
  int *v90;
  uint64_t v91;
  void *v92;
  const void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t, uint64_t);
  int *v98;
  uint64_t v99;
  void *v100;
  const void *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _OWORD *v212;
  _OWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _OWORD *v218;
  _OWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  int *v231;
  uint64_t v232;
  void *v233;
  const void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  _OWORD *v242;
  _OWORD *v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = sub_1A2AE3130();
      v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      *(_BYTE *)(a1 + v8[13]) = *(_BYTE *)(a2 + v8[13]);
      v9 = v8[14];
      v10 = a1 + v9;
      v11 = a2 + v9;
      v12 = sub_1A2AE30C4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      v13 = v8[15];
      v14 = a1 + v13;
      v15 = a2 + v13;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      if (swift_getEnumCaseMultiPayload() != 1)
        goto LABEL_33;
      goto LABEL_7;
    case 1u:
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v16;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v17;
      v18 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F8) + 48);
      v19 = a1 + v18;
      v20 = a2 + v18;
      v21 = sub_1A2AE3130();
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
      v22(v19, v20, v21);
      v23 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
      *(_BYTE *)(v19 + v23[13]) = *(_BYTE *)(v20 + v23[13]);
      v24 = v23[14];
      v25 = v19 + v24;
      v26 = v20 + v24;
      v27 = sub_1A2AE30C4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
      v28 = v23[15];
      v29 = v19 + v28;
      v30 = v20 + v28;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
      if (swift_getEnumCaseMultiPayload() == 1)
        goto LABEL_28;
      goto LABEL_34;
    case 2u:
      v6 = sub_1A2AE3130();
      v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      v31 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      *(_BYTE *)(a1 + v31[13]) = *(_BYTE *)(a2 + v31[13]);
      v32 = v31[14];
      v33 = a1 + v32;
      v34 = a2 + v32;
      v35 = sub_1A2AE30C4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
      v36 = v31[15];
      v14 = a1 + v36;
      v15 = a2 + v36;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
LABEL_7:
        *(_BYTE *)v14 = *(_BYTE *)v15;
        v37 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
        v38 = v14 + v37;
        v39 = v15 + v37;
        v7(v14 + v37, v39, v6);
        v40 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
        v41 = v38 + v40;
        v42 = v39 + v40;
        v7(v41, v42, v6);
        v43 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
        v44 = (_OWORD *)(v41 + v43);
        v45 = (_OWORD *)(v42 + v43);
      }
      else
      {
LABEL_33:
        v103 = *(_OWORD *)(v15 + 16);
        *(_OWORD *)v14 = *(_OWORD *)v15;
        *(_OWORD *)(v14 + 16) = v103;
        *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
        v104 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v105 = v14 + v104;
        v106 = v15 + v104;
        *(_WORD *)(v105 + 48) = *(_WORD *)(v15 + v104 + 48);
        v107 = *(_OWORD *)(v15 + v104 + 16);
        *(_OWORD *)v105 = *(_OWORD *)(v15 + v104);
        *(_OWORD *)(v105 + 16) = v107;
        *(_OWORD *)(v105 + 32) = *(_OWORD *)(v15 + v104 + 32);
        v108 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v109 = v105 + v108;
        v110 = v106 + v108;
        v7(v109, v106 + v108, v6);
        v111 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v44 = (_OWORD *)(v109 + v111);
        v45 = (_OWORD *)(v110 + v111);
      }
      goto LABEL_57;
    case 3u:
      v46 = type metadata accessor for SFAirDropReceive.ItemDestination();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        v121 = sub_1A2AE2F44();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 32))(a1, a2, v121);
        swift_storeEnumTagMultiPayload();
      }
      v122 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F0);
      v123 = v122[12];
      v124 = a1 + v123;
      v125 = a2 + v123;
      v126 = *(_OWORD *)(v125 + 16);
      *(_OWORD *)v124 = *(_OWORD *)v125;
      *(_OWORD *)(v124 + 16) = v126;
      *(_QWORD *)(v124 + 32) = *(_QWORD *)(v125 + 32);
      *(_OWORD *)(a1 + v122[16]) = *(_OWORD *)(a2 + v122[16]);
      v127 = v122[20];
      v128 = a1 + v127;
      v129 = a2 + v127;
      v130 = *(_OWORD *)(a2 + v127 + 16);
      *(_OWORD *)v128 = *(_OWORD *)(a2 + v127);
      *(_OWORD *)(v128 + 16) = v130;
      *(_OWORD *)(v128 + 32) = *(_OWORD *)(a2 + v127 + 32);
      *(_BYTE *)(v128 + 48) = *(_BYTE *)(a2 + v127 + 48);
      *(_BYTE *)(v128 + 49) = *(_BYTE *)(a2 + v127 + 49);
      v131 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
      v132 = v128 + v131;
      v133 = v129 + v131;
      v134 = sub_1A2AE3130();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v134 - 8) + 32))(v132, v133, v134);
      v135 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788);
      *(_OWORD *)(v132 + *(int *)(v135 + 68)) = *(_OWORD *)(v133 + *(int *)(v135 + 68));
      goto LABEL_87;
    case 4u:
      v47 = type metadata accessor for SFAirDropReceive.ItemDestination();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        v136 = sub_1A2AE2F44();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 32))(a1, a2, v136);
        swift_storeEnumTagMultiPayload();
      }
      v137 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E8);
      *(_QWORD *)(a1 + v137[12]) = *(_QWORD *)(a2 + v137[12]);
      *(_QWORD *)(a1 + v137[16]) = *(_QWORD *)(a2 + v137[16]);
      v138 = v137[20];
      v139 = a1 + v138;
      v140 = a2 + v138;
      *(_WORD *)(v139 + 48) = *(_WORD *)(a2 + v138 + 48);
      v141 = *(_OWORD *)(a2 + v138 + 16);
      *(_OWORD *)v139 = *(_OWORD *)(a2 + v138);
      *(_OWORD *)(v139 + 16) = v141;
      *(_OWORD *)(v139 + 32) = *(_OWORD *)(a2 + v138 + 32);
      v142 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
      v143 = v139 + v142;
      v144 = v140 + v142;
      v145 = sub_1A2AE3130();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v143, v144, v145);
      v146 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788);
      *(_OWORD *)(v143 + *(int *)(v146 + 68)) = *(_OWORD *)(v144 + *(int *)(v146 + 68));
      goto LABEL_87;
    case 5u:
      v48 = type metadata accessor for SFAirDropReceive.ItemDestination();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        v147 = sub_1A2AE2F44();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v147 - 8) + 32))(a1, a2, v147);
        swift_storeEnumTagMultiPayload();
      }
      v148 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
      *(_QWORD *)(a1 + *(int *)(v148 + 48)) = *(_QWORD *)(a2 + *(int *)(v148 + 48));
      v149 = *(int *)(v148 + 64);
      v150 = a1 + v149;
      v151 = a2 + v149;
      v59 = sub_1A2AE3130();
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 32);
      v60(v150, v151, v59);
      v152 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      *(_BYTE *)(v150 + v152[13]) = *(_BYTE *)(v151 + v152[13]);
      v153 = v152[14];
      v154 = v150 + v153;
      v155 = v151 + v153;
      v156 = sub_1A2AE30C4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v156 - 8) + 32))(v154, v155, v156);
      v157 = v152[15];
      v67 = v150 + v157;
      v68 = v151 + v157;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      if (swift_getEnumCaseMultiPayload() != 1)
        goto LABEL_56;
      goto LABEL_55;
    case 6u:
      v49 = type metadata accessor for SFAirDropReceive.ItemDestination();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        v158 = sub_1A2AE2F44();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v158 - 8) + 32))(a1, a2, v158);
        swift_storeEnumTagMultiPayload();
      }
      v159 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
      *(_QWORD *)(a1 + *(int *)(v159 + 48)) = *(_QWORD *)(a2 + *(int *)(v159 + 48));
      v160 = *(int *)(v159 + 64);
      v161 = a1 + v160;
      v162 = a2 + v160;
      v59 = sub_1A2AE3130();
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 32);
      v60(v161, v162, v59);
      v163 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      *(_BYTE *)(v161 + v163[13]) = *(_BYTE *)(v162 + v163[13]);
      v164 = v163[14];
      v165 = v161 + v164;
      v166 = v162 + v164;
      v167 = sub_1A2AE30C4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v167 - 8) + 32))(v165, v166, v167);
      v168 = v163[15];
      v67 = v161 + v168;
      v68 = v162 + v168;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      if (swift_getEnumCaseMultiPayload() != 1)
        goto LABEL_56;
      goto LABEL_55;
    case 7u:
      v50 = type metadata accessor for SFAirDropReceive.ItemDestination();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
        v169 = sub_1A2AE2F44();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v169 - 8) + 32))(a1, a2, v169);
        swift_storeEnumTagMultiPayload();
      }
      v170 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D8);
      *(_QWORD *)(a1 + *(int *)(v170 + 48)) = *(_QWORD *)(a2 + *(int *)(v170 + 48));
      *(_QWORD *)(a1 + *(int *)(v170 + 64)) = *(_QWORD *)(a2 + *(int *)(v170 + 64));
      goto LABEL_87;
    case 8u:
      v51 = type metadata accessor for SFAirDropReceive.ItemDestination();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      }
      else
      {
        v171 = sub_1A2AE2F44();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v171 - 8) + 32))(a1, a2, v171);
        swift_storeEnumTagMultiPayload();
      }
      v172 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
      *(_QWORD *)(a1 + v172[12]) = *(_QWORD *)(a2 + v172[12]);
      *(_QWORD *)(a1 + v172[16]) = *(_QWORD *)(a2 + v172[16]);
      v173 = v172[20];
      v174 = a1 + v173;
      v175 = a2 + v173;
      v59 = sub_1A2AE3130();
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 32);
      v60(v174, v175, v59);
      v176 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      *(_BYTE *)(v174 + v176[13]) = *(_BYTE *)(v175 + v176[13]);
      v177 = v176[14];
      v178 = v174 + v177;
      v179 = v175 + v177;
      v180 = sub_1A2AE30C4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v180 - 8) + 32))(v178, v179, v180);
      v181 = v176[15];
      v67 = v174 + v181;
      v68 = v175 + v181;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      if (swift_getEnumCaseMultiPayload() != 1)
        goto LABEL_56;
      goto LABEL_55;
    case 9u:
      v52 = type metadata accessor for SFAirDropReceive.ItemDestination();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        v182 = sub_1A2AE2F44();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v182 - 8) + 32))(a1, a2, v182);
        swift_storeEnumTagMultiPayload();
      }
      v183 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
      *(_QWORD *)(a1 + v183[12]) = *(_QWORD *)(a2 + v183[12]);
      *(_QWORD *)(a1 + v183[16]) = *(_QWORD *)(a2 + v183[16]);
      v184 = v183[20];
      v185 = a1 + v184;
      v186 = a2 + v184;
      v59 = sub_1A2AE3130();
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 32);
      v60(v185, v186, v59);
      v187 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      *(_BYTE *)(v185 + v187[13]) = *(_BYTE *)(v186 + v187[13]);
      v188 = v187[14];
      v189 = v185 + v188;
      v190 = v186 + v188;
      v191 = sub_1A2AE30C4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v191 - 8) + 32))(v189, v190, v191);
      v192 = v187[15];
      v67 = v185 + v192;
      v68 = v186 + v192;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      if (swift_getEnumCaseMultiPayload() == 1)
        goto LABEL_55;
      goto LABEL_56;
    case 0xAu:
      v53 = type metadata accessor for SFAirDropReceive.ItemDestination();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        v209 = sub_1A2AE2F44();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v209 - 8) + 32))(a1, a2, v209);
        swift_storeEnumTagMultiPayload();
      }
      v210 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C8);
      *(_QWORD *)(a1 + *(int *)(v210 + 48)) = *(_QWORD *)(a2 + *(int *)(v210 + 48));
      *(_QWORD *)(a1 + *(int *)(v210 + 64)) = *(_QWORD *)(a2 + *(int *)(v210 + 64));
      goto LABEL_87;
    case 0xBu:
      v54 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v54;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v55 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v55;
      v56 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B8) + 48);
      v57 = a1 + v56;
      v58 = a2 + v56;
      v59 = sub_1A2AE3130();
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 32);
      v60(v57, v58, v59);
      v61 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
      *(_BYTE *)(v57 + v61[13]) = *(_BYTE *)(v58 + v61[13]);
      v62 = v61[14];
      v63 = v57 + v62;
      v64 = v58 + v62;
      v65 = sub_1A2AE30C4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v63, v64, v65);
      v66 = v61[15];
      v67 = v57 + v66;
      v68 = v58 + v66;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
LABEL_55:
        *(_BYTE *)v67 = *(_BYTE *)v68;
        v193 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
        v194 = v67 + v193;
        v195 = v68 + v193;
        v60(v67 + v193, v195, v59);
        v196 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
        v197 = v194 + v196;
        v198 = v195 + v196;
        v60(v197, v198, v59);
        v199 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
        v44 = (_OWORD *)(v197 + v199);
        v45 = (_OWORD *)(v198 + v199);
      }
      else
      {
LABEL_56:
        v200 = *(_OWORD *)(v68 + 16);
        *(_OWORD *)v67 = *(_OWORD *)v68;
        *(_OWORD *)(v67 + 16) = v200;
        *(_QWORD *)(v67 + 32) = *(_QWORD *)(v68 + 32);
        v201 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
        v202 = v67 + v201;
        v203 = v68 + v201;
        *(_WORD *)(v202 + 48) = *(_WORD *)(v68 + v201 + 48);
        v204 = *(_OWORD *)(v68 + v201 + 16);
        *(_OWORD *)v202 = *(_OWORD *)(v68 + v201);
        *(_OWORD *)(v202 + 16) = v204;
        *(_OWORD *)(v202 + 32) = *(_OWORD *)(v68 + v201 + 32);
        v205 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v206 = v202 + v205;
        v207 = v203 + v205;
        v60(v206, v203 + v205, v59);
        v208 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v44 = (_OWORD *)(v206 + v208);
        v45 = (_OWORD *)(v207 + v208);
      }
      goto LABEL_57;
    case 0xDu:
      v69 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v69;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v70 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v70;
      v71 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A8) + 48);
      v72 = a1 + v71;
      v73 = a2 + v71;
      v21 = sub_1A2AE3130();
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
      v22(v72, v73, v21);
      v74 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
      *(_BYTE *)(v72 + v74[13]) = *(_BYTE *)(v73 + v74[13]);
      v75 = v74[14];
      v76 = v72 + v75;
      v77 = v73 + v75;
      v78 = sub_1A2AE30C4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 32))(v76, v77, v78);
      v79 = v74[15];
      v29 = v72 + v79;
      v30 = v73 + v79;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
LABEL_28:
        *(_BYTE *)v29 = *(_BYTE *)v30;
        v80 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A8) + 48);
        v81 = v29 + v80;
        v82 = v30 + v80;
        v22(v29 + v80, v82, v21);
        v83 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B0) + 52);
        v84 = v81 + v83;
        v85 = v82 + v83;
        v22(v84, v85, v21);
        v86 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
        v44 = (_OWORD *)(v84 + v86);
        v45 = (_OWORD *)(v85 + v86);
      }
      else
      {
LABEL_34:
        v112 = *(_OWORD *)(v30 + 16);
        *(_OWORD *)v29 = *(_OWORD *)v30;
        *(_OWORD *)(v29 + 16) = v112;
        *(_QWORD *)(v29 + 32) = *(_QWORD *)(v30 + 32);
        v113 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
        v114 = v29 + v113;
        v115 = v30 + v113;
        *(_WORD *)(v114 + 48) = *(_WORD *)(v30 + v113 + 48);
        v116 = *(_OWORD *)(v30 + v113 + 16);
        *(_OWORD *)v114 = *(_OWORD *)(v30 + v113);
        *(_OWORD *)(v114 + 16) = v116;
        *(_OWORD *)(v114 + 32) = *(_OWORD *)(v30 + v113 + 32);
        v117 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v118 = v114 + v117;
        v119 = v115 + v117;
        v22(v118, v115 + v117, v21);
        v120 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
        v44 = (_OWORD *)(v118 + v120);
        v45 = (_OWORD *)(v119 + v120);
      }
LABEL_57:
      *v44 = *v45;
      swift_storeEnumTagMultiPayload();
      goto LABEL_87;
    case 0xFu:
      v87 = sub_1A2AE30C4();
      v88 = *(_QWORD *)(v87 - 8);
      v89 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 32);
      v89(a1, a2, v87);
      v90 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
      v91 = v90[5];
      v92 = (void *)(a1 + v91);
      v93 = (const void *)(a2 + v91);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(a2 + v91, 1, v87))
      {
        v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
        memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
      }
      else
      {
        v89((uint64_t)v92, (uint64_t)v93, v87);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v92, 0, 1, v87);
      }
      *(_BYTE *)(a1 + v90[6]) = *(_BYTE *)(a2 + v90[6]);
      v211 = v90[7];
      v212 = (_OWORD *)(a1 + v211);
      v213 = (_OWORD *)(a2 + v211);
      v214 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
      v215 = *(_QWORD *)(v214 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v215 + 48))(v213, 1, v214))
      {
        v216 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
        memcpy(v212, v213, *(_QWORD *)(*(_QWORD *)(v216 - 8) + 64));
      }
      else
      {
        v223 = type metadata accessor for SFAirDropReceive.Failure();
        v224 = *(_QWORD *)(v223 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v224 + 48))(v213, 1, v223))
        {
          memcpy(v212, v213, *(_QWORD *)(v215 + 64));
        }
        else
        {
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v212, v213, *(_QWORD *)(v224 + 64));
          }
          else
          {
            *v212 = *v213;
            v227 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
            v228 = (char *)v212 + v227;
            v229 = (char *)v213 + v227;
            v230 = sub_1A2AE2F44();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v230 - 8) + 32))(v228, v229, v230);
            swift_storeEnumTagMultiPayload();
          }
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v224 + 56))(v212, 0, 1, v223);
        }
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v215 + 56))(v212, 0, 1, v214);
      }
      v231 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A0);
      v232 = v231[12];
      v233 = (void *)(a1 + v232);
      v234 = (const void *)(a2 + v232);
      v235 = type metadata accessor for SFAirDropReceive.ItemDestination();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v233, v234, *(_QWORD *)(*(_QWORD *)(v235 - 8) + 64));
      }
      else
      {
        v236 = sub_1A2AE2F44();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v236 - 8) + 32))(v233, v234, v236);
        swift_storeEnumTagMultiPayload();
      }
      *(_OWORD *)(a1 + v231[16]) = *(_OWORD *)(a2 + v231[16]);
      *(_QWORD *)(a1 + v231[20]) = *(_QWORD *)(a2 + v231[20]);
      *(_QWORD *)(a1 + v231[24]) = *(_QWORD *)(a2 + v231[24]);
      *(_QWORD *)(a1 + v231[28]) = *(_QWORD *)(a2 + v231[28]);
      goto LABEL_87;
    case 0x10u:
      v95 = sub_1A2AE30C4();
      v96 = *(_QWORD *)(v95 - 8);
      v97 = *(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 32);
      v97(a1, a2, v95);
      v98 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
      v99 = v98[5];
      v100 = (void *)(a1 + v99);
      v101 = (const void *)(a2 + v99);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(a2 + v99, 1, v95))
      {
        v102 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
        memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
      }
      else
      {
        v97((uint64_t)v100, (uint64_t)v101, v95);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v100, 0, 1, v95);
      }
      *(_BYTE *)(a1 + v98[6]) = *(_BYTE *)(a2 + v98[6]);
      v217 = v98[7];
      v218 = (_OWORD *)(a1 + v217);
      v219 = (_OWORD *)(a2 + v217);
      v220 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
      v221 = *(_QWORD *)(v220 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v221 + 48))(v219, 1, v220))
      {
        v222 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
        memcpy(v218, v219, *(_QWORD *)(*(_QWORD *)(v222 - 8) + 64));
      }
      else
      {
        v225 = type metadata accessor for SFAirDropReceive.Failure();
        v226 = *(_QWORD *)(v225 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v226 + 48))(v219, 1, v225))
        {
          memcpy(v218, v219, *(_QWORD *)(v221 + 64));
        }
        else
        {
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v218, v219, *(_QWORD *)(v226 + 64));
          }
          else
          {
            *v218 = *v219;
            v237 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
            v238 = (char *)v218 + v237;
            v239 = (char *)v219 + v237;
            v240 = sub_1A2AE2F44();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v240 - 8) + 32))(v238, v239, v240);
            swift_storeEnumTagMultiPayload();
          }
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v226 + 56))(v218, 0, 1, v225);
        }
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v221 + 56))(v218, 0, 1, v220);
      }
      v241 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B398) + 48);
      v242 = (_OWORD *)(a1 + v241);
      v243 = (_OWORD *)(a2 + v241);
      v244 = type metadata accessor for SFAirDropReceive.Failure();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v242, v243, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
      }
      else
      {
        *v242 = *v243;
        v245 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
        v246 = (char *)v242 + v245;
        v247 = (char *)v243 + v245;
        v248 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v248 - 8) + 32))(v246, v247, v248);
        swift_storeEnumTagMultiPayload();
      }
LABEL_87:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t _s8TransferV5StateOwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t, uint64_t);
  int *v90;
  uint64_t v91;
  void *v92;
  const void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t, uint64_t);
  int *v98;
  uint64_t v99;
  void *v100;
  const void *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _OWORD *v212;
  _OWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _OWORD *v218;
  _OWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  int *v231;
  uint64_t v232;
  void *v233;
  const void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  _OWORD *v242;
  _OWORD *v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;

  if (a1 != a2)
  {
    sub_1A297DA3C(a1, type metadata accessor for SFAirDropReceive.Transfer.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = sub_1A2AE3130();
        v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
        v7(a1, a2, v6);
        v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(a1 + v8[13]) = *(_BYTE *)(a2 + v8[13]);
        v9 = v8[14];
        v10 = a1 + v9;
        v11 = a2 + v9;
        v12 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
        v13 = v8[15];
        v14 = a1 + v13;
        v15 = a2 + v13;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        if (swift_getEnumCaseMultiPayload() != 1)
          goto LABEL_34;
        goto LABEL_8;
      case 1u:
        v16 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v16;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        v17 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v17;
        v18 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F8) + 48);
        v19 = a1 + v18;
        v20 = a2 + v18;
        v21 = sub_1A2AE3130();
        v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
        v22(v19, v20, v21);
        v23 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
        *(_BYTE *)(v19 + v23[13]) = *(_BYTE *)(v20 + v23[13]);
        v24 = v23[14];
        v25 = v19 + v24;
        v26 = v20 + v24;
        v27 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
        v28 = v23[15];
        v29 = v19 + v28;
        v30 = v20 + v28;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
        if (swift_getEnumCaseMultiPayload() == 1)
          goto LABEL_29;
        goto LABEL_35;
      case 2u:
        v6 = sub_1A2AE3130();
        v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
        v7(a1, a2, v6);
        v31 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(a1 + v31[13]) = *(_BYTE *)(a2 + v31[13]);
        v32 = v31[14];
        v33 = a1 + v32;
        v34 = a2 + v32;
        v35 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
        v36 = v31[15];
        v14 = a1 + v36;
        v15 = a2 + v36;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
LABEL_8:
          *(_BYTE *)v14 = *(_BYTE *)v15;
          v37 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v38 = v14 + v37;
          v39 = v15 + v37;
          v7(v14 + v37, v39, v6);
          v40 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v41 = v38 + v40;
          v42 = v39 + v40;
          v7(v41, v42, v6);
          v43 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v44 = (_OWORD *)(v41 + v43);
          v45 = (_OWORD *)(v42 + v43);
        }
        else
        {
LABEL_34:
          v103 = *(_OWORD *)(v15 + 16);
          *(_OWORD *)v14 = *(_OWORD *)v15;
          *(_OWORD *)(v14 + 16) = v103;
          *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
          v104 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v105 = v14 + v104;
          v106 = v15 + v104;
          *(_WORD *)(v105 + 48) = *(_WORD *)(v15 + v104 + 48);
          v107 = *(_OWORD *)(v15 + v104 + 16);
          *(_OWORD *)v105 = *(_OWORD *)(v15 + v104);
          *(_OWORD *)(v105 + 16) = v107;
          *(_OWORD *)(v105 + 32) = *(_OWORD *)(v15 + v104 + 32);
          v108 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v109 = v105 + v108;
          v110 = v106 + v108;
          v7(v109, v106 + v108, v6);
          v111 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v44 = (_OWORD *)(v109 + v111);
          v45 = (_OWORD *)(v110 + v111);
        }
        goto LABEL_58;
      case 3u:
        v46 = type metadata accessor for SFAirDropReceive.ItemDestination();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
        }
        else
        {
          v121 = sub_1A2AE2F44();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 32))(a1, a2, v121);
          swift_storeEnumTagMultiPayload();
        }
        v122 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3F0);
        v123 = v122[12];
        v124 = a1 + v123;
        v125 = a2 + v123;
        v126 = *(_OWORD *)(v125 + 16);
        *(_OWORD *)v124 = *(_OWORD *)v125;
        *(_OWORD *)(v124 + 16) = v126;
        *(_QWORD *)(v124 + 32) = *(_QWORD *)(v125 + 32);
        *(_OWORD *)(a1 + v122[16]) = *(_OWORD *)(a2 + v122[16]);
        v127 = v122[20];
        v128 = a1 + v127;
        v129 = a2 + v127;
        v130 = *(_OWORD *)(a2 + v127 + 16);
        *(_OWORD *)v128 = *(_OWORD *)(a2 + v127);
        *(_OWORD *)(v128 + 16) = v130;
        *(_OWORD *)(v128 + 32) = *(_OWORD *)(a2 + v127 + 32);
        *(_BYTE *)(v128 + 48) = *(_BYTE *)(a2 + v127 + 48);
        *(_BYTE *)(v128 + 49) = *(_BYTE *)(a2 + v127 + 49);
        v131 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v132 = v128 + v131;
        v133 = v129 + v131;
        v134 = sub_1A2AE3130();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v134 - 8) + 32))(v132, v133, v134);
        v135 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788);
        *(_OWORD *)(v132 + *(int *)(v135 + 68)) = *(_OWORD *)(v133 + *(int *)(v135 + 68));
        goto LABEL_88;
      case 4u:
        v47 = type metadata accessor for SFAirDropReceive.ItemDestination();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
        }
        else
        {
          v136 = sub_1A2AE2F44();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 32))(a1, a2, v136);
          swift_storeEnumTagMultiPayload();
        }
        v137 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E8);
        *(_QWORD *)(a1 + v137[12]) = *(_QWORD *)(a2 + v137[12]);
        *(_QWORD *)(a1 + v137[16]) = *(_QWORD *)(a2 + v137[16]);
        v138 = v137[20];
        v139 = a1 + v138;
        v140 = a2 + v138;
        *(_WORD *)(v139 + 48) = *(_WORD *)(a2 + v138 + 48);
        v141 = *(_OWORD *)(a2 + v138 + 16);
        *(_OWORD *)v139 = *(_OWORD *)(a2 + v138);
        *(_OWORD *)(v139 + 16) = v141;
        *(_OWORD *)(v139 + 32) = *(_OWORD *)(a2 + v138 + 32);
        v142 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
        v143 = v139 + v142;
        v144 = v140 + v142;
        v145 = sub_1A2AE3130();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v143, v144, v145);
        v146 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788);
        *(_OWORD *)(v143 + *(int *)(v146 + 68)) = *(_OWORD *)(v144 + *(int *)(v146 + 68));
        goto LABEL_88;
      case 5u:
        v48 = type metadata accessor for SFAirDropReceive.ItemDestination();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        }
        else
        {
          v147 = sub_1A2AE2F44();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v147 - 8) + 32))(a1, a2, v147);
          swift_storeEnumTagMultiPayload();
        }
        v148 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
        *(_QWORD *)(a1 + *(int *)(v148 + 48)) = *(_QWORD *)(a2 + *(int *)(v148 + 48));
        v149 = *(int *)(v148 + 64);
        v150 = a1 + v149;
        v151 = a2 + v149;
        v59 = sub_1A2AE3130();
        v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 32);
        v60(v150, v151, v59);
        v152 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(v150 + v152[13]) = *(_BYTE *)(v151 + v152[13]);
        v153 = v152[14];
        v154 = v150 + v153;
        v155 = v151 + v153;
        v156 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v156 - 8) + 32))(v154, v155, v156);
        v157 = v152[15];
        v67 = v150 + v157;
        v68 = v151 + v157;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        if (swift_getEnumCaseMultiPayload() != 1)
          goto LABEL_57;
        goto LABEL_56;
      case 6u:
        v49 = type metadata accessor for SFAirDropReceive.ItemDestination();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
        }
        else
        {
          v158 = sub_1A2AE2F44();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v158 - 8) + 32))(a1, a2, v158);
          swift_storeEnumTagMultiPayload();
        }
        v159 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3E0);
        *(_QWORD *)(a1 + *(int *)(v159 + 48)) = *(_QWORD *)(a2 + *(int *)(v159 + 48));
        v160 = *(int *)(v159 + 64);
        v161 = a1 + v160;
        v162 = a2 + v160;
        v59 = sub_1A2AE3130();
        v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 32);
        v60(v161, v162, v59);
        v163 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(v161 + v163[13]) = *(_BYTE *)(v162 + v163[13]);
        v164 = v163[14];
        v165 = v161 + v164;
        v166 = v162 + v164;
        v167 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v167 - 8) + 32))(v165, v166, v167);
        v168 = v163[15];
        v67 = v161 + v168;
        v68 = v162 + v168;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        if (swift_getEnumCaseMultiPayload() != 1)
          goto LABEL_57;
        goto LABEL_56;
      case 7u:
        v50 = type metadata accessor for SFAirDropReceive.ItemDestination();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
        }
        else
        {
          v169 = sub_1A2AE2F44();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v169 - 8) + 32))(a1, a2, v169);
          swift_storeEnumTagMultiPayload();
        }
        v170 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D8);
        *(_QWORD *)(a1 + *(int *)(v170 + 48)) = *(_QWORD *)(a2 + *(int *)(v170 + 48));
        *(_QWORD *)(a1 + *(int *)(v170 + 64)) = *(_QWORD *)(a2 + *(int *)(v170 + 64));
        goto LABEL_88;
      case 8u:
        v51 = type metadata accessor for SFAirDropReceive.ItemDestination();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
        }
        else
        {
          v171 = sub_1A2AE2F44();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v171 - 8) + 32))(a1, a2, v171);
          swift_storeEnumTagMultiPayload();
        }
        v172 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
        *(_QWORD *)(a1 + v172[12]) = *(_QWORD *)(a2 + v172[12]);
        *(_QWORD *)(a1 + v172[16]) = *(_QWORD *)(a2 + v172[16]);
        v173 = v172[20];
        v174 = a1 + v173;
        v175 = a2 + v173;
        v59 = sub_1A2AE3130();
        v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 32);
        v60(v174, v175, v59);
        v176 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(v174 + v176[13]) = *(_BYTE *)(v175 + v176[13]);
        v177 = v176[14];
        v178 = v174 + v177;
        v179 = v175 + v177;
        v180 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v180 - 8) + 32))(v178, v179, v180);
        v181 = v176[15];
        v67 = v174 + v181;
        v68 = v175 + v181;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        if (swift_getEnumCaseMultiPayload() != 1)
          goto LABEL_57;
        goto LABEL_56;
      case 9u:
        v52 = type metadata accessor for SFAirDropReceive.ItemDestination();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
        }
        else
        {
          v182 = sub_1A2AE2F44();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v182 - 8) + 32))(a1, a2, v182);
          swift_storeEnumTagMultiPayload();
        }
        v183 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3D0);
        *(_QWORD *)(a1 + v183[12]) = *(_QWORD *)(a2 + v183[12]);
        *(_QWORD *)(a1 + v183[16]) = *(_QWORD *)(a2 + v183[16]);
        v184 = v183[20];
        v185 = a1 + v184;
        v186 = a2 + v184;
        v59 = sub_1A2AE3130();
        v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 32);
        v60(v185, v186, v59);
        v187 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(v185 + v187[13]) = *(_BYTE *)(v186 + v187[13]);
        v188 = v187[14];
        v189 = v185 + v188;
        v190 = v186 + v188;
        v191 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v191 - 8) + 32))(v189, v190, v191);
        v192 = v187[15];
        v67 = v185 + v192;
        v68 = v186 + v192;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        if (swift_getEnumCaseMultiPayload() == 1)
          goto LABEL_56;
        goto LABEL_57;
      case 0xAu:
        v53 = type metadata accessor for SFAirDropReceive.ItemDestination();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
        }
        else
        {
          v209 = sub_1A2AE2F44();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v209 - 8) + 32))(a1, a2, v209);
          swift_storeEnumTagMultiPayload();
        }
        v210 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C8);
        *(_QWORD *)(a1 + *(int *)(v210 + 48)) = *(_QWORD *)(a2 + *(int *)(v210 + 48));
        *(_QWORD *)(a1 + *(int *)(v210 + 64)) = *(_QWORD *)(a2 + *(int *)(v210 + 64));
        goto LABEL_88;
      case 0xBu:
        v54 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v54;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        v55 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v55;
        v56 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B8) + 48);
        v57 = a1 + v56;
        v58 = a2 + v56;
        v59 = sub_1A2AE3130();
        v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 32);
        v60(v57, v58, v59);
        v61 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
        *(_BYTE *)(v57 + v61[13]) = *(_BYTE *)(v58 + v61[13]);
        v62 = v61[14];
        v63 = v57 + v62;
        v64 = v58 + v62;
        v65 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v63, v64, v65);
        v66 = v61[15];
        v67 = v57 + v66;
        v68 = v58 + v66;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
LABEL_56:
          *(_BYTE *)v67 = *(_BYTE *)v68;
          v193 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
          v194 = v67 + v193;
          v195 = v68 + v193;
          v60(v67 + v193, v195, v59);
          v196 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
          v197 = v194 + v196;
          v198 = v195 + v196;
          v60(v197, v198, v59);
          v199 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v44 = (_OWORD *)(v197 + v199);
          v45 = (_OWORD *)(v198 + v199);
        }
        else
        {
LABEL_57:
          v200 = *(_OWORD *)(v68 + 16);
          *(_OWORD *)v67 = *(_OWORD *)v68;
          *(_OWORD *)(v67 + 16) = v200;
          *(_QWORD *)(v67 + 32) = *(_QWORD *)(v68 + 32);
          v201 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
          v202 = v67 + v201;
          v203 = v68 + v201;
          *(_WORD *)(v202 + 48) = *(_WORD *)(v68 + v201 + 48);
          v204 = *(_OWORD *)(v68 + v201 + 16);
          *(_OWORD *)v202 = *(_OWORD *)(v68 + v201);
          *(_OWORD *)(v202 + 16) = v204;
          *(_OWORD *)(v202 + 32) = *(_OWORD *)(v68 + v201 + 32);
          v205 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v206 = v202 + v205;
          v207 = v203 + v205;
          v60(v206, v203 + v205, v59);
          v208 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v44 = (_OWORD *)(v206 + v208);
          v45 = (_OWORD *)(v207 + v208);
        }
        goto LABEL_58;
      case 0xDu:
        v69 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v69;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        v70 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v70;
        v71 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A8) + 48);
        v72 = a1 + v71;
        v73 = a2 + v71;
        v21 = sub_1A2AE3130();
        v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
        v22(v72, v73, v21);
        v74 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3B0);
        *(_BYTE *)(v72 + v74[13]) = *(_BYTE *)(v73 + v74[13]);
        v75 = v74[14];
        v76 = v72 + v75;
        v77 = v73 + v75;
        v78 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 32))(v76, v77, v78);
        v79 = v74[15];
        v29 = v72 + v79;
        v30 = v73 + v79;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B400);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
LABEL_29:
          *(_BYTE *)v29 = *(_BYTE *)v30;
          v80 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A8) + 48);
          v81 = v29 + v80;
          v82 = v30 + v80;
          v22(v29 + v80, v82, v21);
          v83 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B0) + 52);
          v84 = v81 + v83;
          v85 = v82 + v83;
          v22(v84, v85, v21);
          v86 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7A0) + 68);
          v44 = (_OWORD *)(v84 + v86);
          v45 = (_OWORD *)(v85 + v86);
        }
        else
        {
LABEL_35:
          v112 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)v29 = *(_OWORD *)v30;
          *(_OWORD *)(v29 + 16) = v112;
          *(_QWORD *)(v29 + 32) = *(_QWORD *)(v30 + 32);
          v113 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B410) + 80);
          v114 = v29 + v113;
          v115 = v30 + v113;
          *(_WORD *)(v114 + 48) = *(_WORD *)(v30 + v113 + 48);
          v116 = *(_OWORD *)(v30 + v113 + 16);
          *(_OWORD *)v114 = *(_OWORD *)(v30 + v113);
          *(_OWORD *)(v114 + 16) = v116;
          *(_OWORD *)(v114 + 32) = *(_OWORD *)(v30 + v113 + 32);
          v117 = *(int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
          v118 = v114 + v117;
          v119 = v115 + v117;
          v22(v118, v115 + v117, v21);
          v120 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B788) + 68);
          v44 = (_OWORD *)(v118 + v120);
          v45 = (_OWORD *)(v119 + v120);
        }
LABEL_58:
        *v44 = *v45;
        swift_storeEnumTagMultiPayload();
        goto LABEL_88;
      case 0xFu:
        v87 = sub_1A2AE30C4();
        v88 = *(_QWORD *)(v87 - 8);
        v89 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 32);
        v89(a1, a2, v87);
        v90 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
        v91 = v90[5];
        v92 = (void *)(a1 + v91);
        v93 = (const void *)(a2 + v91);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(a2 + v91, 1, v87))
        {
          v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
          memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
        }
        else
        {
          v89((uint64_t)v92, (uint64_t)v93, v87);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v92, 0, 1, v87);
        }
        *(_BYTE *)(a1 + v90[6]) = *(_BYTE *)(a2 + v90[6]);
        v211 = v90[7];
        v212 = (_OWORD *)(a1 + v211);
        v213 = (_OWORD *)(a2 + v211);
        v214 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
        v215 = *(_QWORD *)(v214 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v215 + 48))(v213, 1, v214))
        {
          v216 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
          memcpy(v212, v213, *(_QWORD *)(*(_QWORD *)(v216 - 8) + 64));
        }
        else
        {
          v223 = type metadata accessor for SFAirDropReceive.Failure();
          v224 = *(_QWORD *)(v223 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v224 + 48))(v213, 1, v223))
          {
            memcpy(v212, v213, *(_QWORD *)(v215 + 64));
          }
          else
          {
            if (swift_getEnumCaseMultiPayload())
            {
              memcpy(v212, v213, *(_QWORD *)(v224 + 64));
            }
            else
            {
              *v212 = *v213;
              v227 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
              v228 = (char *)v212 + v227;
              v229 = (char *)v213 + v227;
              v230 = sub_1A2AE2F44();
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v230 - 8) + 32))(v228, v229, v230);
              swift_storeEnumTagMultiPayload();
            }
            (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v224 + 56))(v212, 0, 1, v223);
          }
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v215 + 56))(v212, 0, 1, v214);
        }
        v231 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3A0);
        v232 = v231[12];
        v233 = (void *)(a1 + v232);
        v234 = (const void *)(a2 + v232);
        v235 = type metadata accessor for SFAirDropReceive.ItemDestination();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v233, v234, *(_QWORD *)(*(_QWORD *)(v235 - 8) + 64));
        }
        else
        {
          v236 = sub_1A2AE2F44();
          (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v236 - 8) + 32))(v233, v234, v236);
          swift_storeEnumTagMultiPayload();
        }
        *(_OWORD *)(a1 + v231[16]) = *(_OWORD *)(a2 + v231[16]);
        *(_QWORD *)(a1 + v231[20]) = *(_QWORD *)(a2 + v231[20]);
        *(_QWORD *)(a1 + v231[24]) = *(_QWORD *)(a2 + v231[24]);
        *(_QWORD *)(a1 + v231[28]) = *(_QWORD *)(a2 + v231[28]);
        goto LABEL_88;
      case 0x10u:
        v95 = sub_1A2AE30C4();
        v96 = *(_QWORD *)(v95 - 8);
        v97 = *(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 32);
        v97(a1, a2, v95);
        v98 = (int *)type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
        v99 = v98[5];
        v100 = (void *)(a1 + v99);
        v101 = (const void *)(a2 + v99);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(a2 + v99, 1, v95))
        {
          v102 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
          memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
        }
        else
        {
          v97((uint64_t)v100, (uint64_t)v101, v95);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v100, 0, 1, v95);
        }
        *(_BYTE *)(a1 + v98[6]) = *(_BYTE *)(a2 + v98[6]);
        v217 = v98[7];
        v218 = (_OWORD *)(a1 + v217);
        v219 = (_OWORD *)(a2 + v217);
        v220 = type metadata accessor for SFAirDropReceive.Transfer.Metrics.TransferResult(0);
        v221 = *(_QWORD *)(v220 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v221 + 48))(v219, 1, v220))
        {
          v222 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C8);
          memcpy(v218, v219, *(_QWORD *)(*(_QWORD *)(v222 - 8) + 64));
        }
        else
        {
          v225 = type metadata accessor for SFAirDropReceive.Failure();
          v226 = *(_QWORD *)(v225 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v226 + 48))(v219, 1, v225))
          {
            memcpy(v218, v219, *(_QWORD *)(v221 + 64));
          }
          else
          {
            if (swift_getEnumCaseMultiPayload())
            {
              memcpy(v218, v219, *(_QWORD *)(v226 + 64));
            }
            else
            {
              *v218 = *v219;
              v237 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
              v238 = (char *)v218 + v237;
              v239 = (char *)v219 + v237;
              v240 = sub_1A2AE2F44();
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v240 - 8) + 32))(v238, v239, v240);
              swift_storeEnumTagMultiPayload();
            }
            (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v226 + 56))(v218, 0, 1, v225);
          }
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v221 + 56))(v218, 0, 1, v220);
        }
        v241 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B398) + 48);
        v242 = (_OWORD *)(a1 + v241);
        v243 = (_OWORD *)(a2 + v241);
        v244 = type metadata accessor for SFAirDropReceive.Failure();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v242, v243, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
        }
        else
        {
          *v242 = *v243;
          v245 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7C0) + 48);
          v246 = (char *)v242 + v245;
          v247 = (char *)v243 + v245;
          v248 = sub_1A2AE2F44();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v248 - 8) + 32))(v246, v247, v248);
          swift_storeEnumTagMultiPayload();
        }
LABEL_88:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1A29AF238()
{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  const char *v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;

  result = sub_1A29AF500();
  if (v1 <= 0x3F)
  {
    v2 = *(_QWORD *)(result - 8) + 64;
    v30 = v2;
    result = sub_1A29AF5D0();
    if (v3 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v31 = &v29;
      v32 = v2;
      result = type metadata accessor for SFAirDropReceive.ItemDestination();
      if (v4 <= 0x3F)
      {
        v5 = *(_QWORD *)(result - 8) + 64;
        v12 = v5;
        v13 = &unk_1A2AFB578;
        v14 = &unk_1A2AFB590;
        result = type metadata accessor for SFAirDrop.DeclineAction();
        if (v6 <= 0x3F)
        {
          swift_getTupleTypeLayout();
          v33 = &v28;
          v7 = MEMORY[0x1E0DE9D18] + 64;
          v8 = MEMORY[0x1E0DE9D38];
          swift_getTupleTypeLayout();
          v34 = &v27;
          swift_getTupleTypeLayout3();
          v35 = &v26;
          swift_getTupleTypeLayout3();
          v36 = &v25;
          swift_getTupleTypeLayout3();
          v37 = &v24;
          swift_getTupleTypeLayout();
          v38 = &v23;
          v12 = v5;
          v13 = (void *)v7;
          v14 = (void *)v7;
          v15 = v2;
          swift_getTupleTypeLayout();
          v39 = &v22;
          swift_getTupleTypeLayout3();
          v40 = &v21;
          swift_getTupleTypeLayout2();
          v41 = &v20;
          v42 = "H";
          swift_getTupleTypeLayout2();
          v43 = &v19;
          v44 = &unk_1A2AFB5A8;
          result = type metadata accessor for SFAirDropReceive.Transfer.Metrics(319);
          if (v9 <= 0x3F)
          {
            v12 = *(_QWORD *)(result - 8) + 64;
            v13 = (void *)v5;
            v14 = &unk_1A2AFB5C0;
            v15 = v7;
            v16 = v7;
            v17 = v7;
            swift_getTupleTypeLayout();
            v45 = &v18;
            result = type metadata accessor for SFAirDropReceive.Failure();
            if (v10 <= 0x3F)
            {
              swift_getTupleTypeLayout2();
              v46 = &v11;
              v47 = v8 + 64;
              swift_initEnumMetadataMultiPayload();
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1A29AF500()
{
  uint64_t result;

  result = qword_1EE6750D0;
  if (!qword_1EE6750D0)
  {
    type metadata accessor for SFAirDropReceive.ItemDestination();
    sub_1A296E8A4(&qword_1EE674790, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    sub_1A296E8A4(&qword_1EE674780, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    sub_1A296E8A4(&qword_1EE674788, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    type metadata accessor for SFAirDrop.PermissionRequest();
  }
  return result;
}

uint64_t sub_1A29AF5D0()
{
  uint64_t result;

  result = qword_1EE6750E0;
  if (!qword_1EE6750E0)
  {
    sub_1A29902BC();
    sub_1A298FCA4();
    sub_1A29AF650();
    type metadata accessor for SFAirDrop.PermissionRequest();
  }
  return result;
}

unint64_t sub_1A29AF650()
{
  unint64_t result;

  result = qword_1EE674F40;
  if (!qword_1EE674F40)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDrop.ContactRequest, &type metadata for SFAirDrop.ContactRequest);
    atomic_store(result, (unint64_t *)&qword_1EE674F40);
  }
  return result;
}

uint64_t _s8TransferV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s8TransferV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1A29AF770 + 4 * byte_1A2AFB357[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1A29AF7A4 + 4 * byte_1A2AFB352[v4]))();
}

uint64_t sub_1A29AF7A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29AF7AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A29AF7B4);
  return result;
}

uint64_t sub_1A29AF7C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A29AF7C8);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1A29AF7CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29AF7D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8TransferV10CodingKeysOMa()
{
  return &_s8TransferV10CodingKeysON;
}

uint64_t _s8TransferV5StateO10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEB)
    goto LABEL_17;
  if (a2 + 21 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 21) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 21;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 21;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 21;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x16;
  v8 = v6 - 22;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s8TransferV5StateO10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 21 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 21) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEA)
    return ((uint64_t (*)(void))((char *)&loc_1A29AF8CC + 4 * byte_1A2AFB361[v4]))();
  *a1 = a2 + 21;
  return ((uint64_t (*)(void))((char *)sub_1A29AF900 + 4 * byte_1A2AFB35C[v4]))();
}

uint64_t sub_1A29AF900(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29AF908(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A29AF910);
  return result;
}

uint64_t sub_1A29AF91C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A29AF924);
  *(_BYTE *)result = a2 + 21;
  return result;
}

uint64_t sub_1A29AF928(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29AF930(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8TransferV5StateO10CodingKeysOMa()
{
  return &_s8TransferV5StateO10CodingKeysON;
}

ValueMetadata *_s8TransferV5StateO17CreatedCodingKeysOMa()
{
  return &_s8TransferV5StateO17CreatedCodingKeysON;
}

ValueMetadata *_s8TransferV5StateO22AutoAcceptedCodingKeysOMa()
{
  return &_s8TransferV5StateO22AutoAcceptedCodingKeysON;
}

ValueMetadata *_s8TransferV5StateO27AnalyizingPreviewCodingKeysOMa()
{
  return &_s8TransferV5StateO27AnalyizingPreviewCodingKeysON;
}

ValueMetadata *_s8TransferV5StateO31WaitingForAskResponseCodingKeysOMa()
{
  return &_s8TransferV5StateO31WaitingForAskResponseCodingKeysON;
}

ValueMetadata *_s8TransferV5StateO50WaitingForShareContactPermissionResponseCodingKeysOMa()
{
  return &_s8TransferV5StateO50WaitingForShareContactPermissionResponseCodingKeysON;
}

ValueMetadata *_s8TransferV5StateO48WaitingForSensitivePreviewInterventionCodingKeysOMa()
{
  return &_s8TransferV5StateO48WaitingForSensitivePreviewInterventionCodingKeysON;
}

ValueMetadata *_s8TransferV5StateO22TransferringCodingKeysOMa()
{
  return &_s8TransferV5StateO22TransferringCodingKeysON;
}

ValueMetadata *_s8TransferV5StateO30AnalyzingFullContentCodingKeysOMa()
{
  return &_s8TransferV5StateO30AnalyzingFullContentCodingKeysON;
}

ValueMetadata *_s8TransferV5StateO44WaitingForSensitiveContentResponseCodingKeysOMa()
{
  return &_s8TransferV5StateO44WaitingForSensitiveContentResponseCodingKeysON;
}

ValueMetadata *_s8TransferV5StateO48WaitingForSensitiveContentInterventionCodingKeysOMa()
{
  return &_s8TransferV5StateO48WaitingForSensitiveContentInterventionCodingKeysON;
}

ValueMetadata *_s8TransferV5StateO19ImportingCodingKeysOMa()
{
  return &_s8TransferV5StateO19ImportingCodingKeysON;
}

ValueMetadata *_s8TransferV5StateO32WaitingForOpenResponseCodingKeysOMa()
{
  return &_s8TransferV5StateO32WaitingForOpenResponseCodingKeysON;
}

uint64_t _s8TransferV5StateO22TransferringCodingKeysOwst_1(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A29AFA74 + 4 * byte_1A2AFB36B[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A29AFAA8 + 4 * byte_1A2AFB366[v4]))();
}

uint64_t sub_1A29AFAA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29AFAB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A29AFAB8);
  return result;
}

uint64_t sub_1A29AFAC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A29AFACCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A29AFAD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29AFAD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8TransferV5StateO43WaitingForOpenDestinationResponseCodingKeysOMa()
{
  return &_s8TransferV5StateO43WaitingForOpenDestinationResponseCodingKeysON;
}

uint64_t getEnumTagSinglePayload for SFInterventionWorkflow(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s8TransferV5StateO44WaitingForSensitiveContentResponseCodingKeysOwst_1(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A29AFBD0 + 4 * byte_1A2AFB375[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A29AFC04 + 4 * byte_1A2AFB370[v4]))();
}

uint64_t sub_1A29AFC04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29AFC0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A29AFC14);
  return result;
}

uint64_t sub_1A29AFC20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A29AFC28);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A29AFC2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29AFC34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8TransferV5StateO17OpeningCodingKeysOMa()
{
  return &_s8TransferV5StateO17OpeningCodingKeysON;
}

ValueMetadata *_s8TransferV5StateO42WaitingForContactExchangeRequestCodingKeysOMa()
{
  return &_s8TransferV5StateO42WaitingForContactExchangeRequestCodingKeysON;
}

ValueMetadata *_s8TransferV5StateO47WaitingForShouldImportContactResponseCodingKeysOMa()
{
  return &_s8TransferV5StateO47WaitingForShouldImportContactResponseCodingKeysON;
}

ValueMetadata *_s8TransferV5StateO34ImportingReceivedContactCodingKeysOMa()
{
  return &_s8TransferV5StateO34ImportingReceivedContactCodingKeysON;
}

ValueMetadata *_s8TransferV5StateO44WaitingForContactShareBackResponseCodingKeysOMa()
{
  return &_s8TransferV5StateO44WaitingForContactShareBackResponseCodingKeysON;
}

ValueMetadata *_s8TransferV5StateO28SharingContactBackCodingKeysOMa()
{
  return &_s8TransferV5StateO28SharingContactBackCodingKeysON;
}

uint64_t _s8TransferV5StateO31CompletedSuccessfullyCodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s8TransferV5StateO31CompletedSuccessfullyCodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1A29AFD7C + 4 * byte_1A2AFB37F[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1A29AFDB0 + 4 * byte_1A2AFB37A[v4]))();
}

uint64_t sub_1A29AFDB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29AFDB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A29AFDC0);
  return result;
}

uint64_t sub_1A29AFDCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A29AFDD4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1A29AFDD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29AFDE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8TransferV5StateO31CompletedSuccessfullyCodingKeysOMa()
{
  return &_s8TransferV5StateO31CompletedSuccessfullyCodingKeysON;
}

uint64_t _s8TransferV5StateO50WaitingForShareContactPermissionResponseCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A29AFE48 + 4 * byte_1A2AFB389[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A29AFE7C + 4 * byte_1A2AFB384[v4]))();
}

uint64_t sub_1A29AFE7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29AFE84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A29AFE8CLL);
  return result;
}

uint64_t sub_1A29AFE98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A29AFEA0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A29AFEA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29AFEAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8TransferV5StateO24TransferFailedCodingKeysOMa()
{
  return &_s8TransferV5StateO24TransferFailedCodingKeysON;
}

uint64_t _s8TransferV5StateO31WaitingForAskResponseCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A29AFF08 + 4 * byte_1A2AFB38E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A29AFF28 + 4 * byte_1A2AFB393[v4]))();
}

_BYTE *sub_1A29AFF08(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A29AFF28(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A29AFF30(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A29AFF38(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A29AFF40(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A29AFF48(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s8TransferV5StateO29LegacyTransferStateCodingKeysOMa()
{
  return &_s8TransferV5StateO29LegacyTransferStateCodingKeysON;
}

unint64_t sub_1A29AFF68()
{
  unint64_t result;

  result = qword_1EE67B7E8;
  if (!qword_1EE67B7E8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBA60, &_s8TransferV5StateO29LegacyTransferStateCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B7E8);
  }
  return result;
}

unint64_t sub_1A29AFFB0()
{
  unint64_t result;

  result = qword_1EE67B7F0;
  if (!qword_1EE67B7F0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBB18, &_s8TransferV5StateO24TransferFailedCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B7F0);
  }
  return result;
}

unint64_t sub_1A29AFFF8()
{
  unint64_t result;

  result = qword_1EE67B7F8;
  if (!qword_1EE67B7F8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBBD0, &_s8TransferV5StateO31CompletedSuccessfullyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B7F8);
  }
  return result;
}

unint64_t sub_1A29B0040()
{
  unint64_t result;

  result = qword_1EE67B800;
  if (!qword_1EE67B800)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBC88, &_s8TransferV5StateO28SharingContactBackCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B800);
  }
  return result;
}

unint64_t sub_1A29B0088()
{
  unint64_t result;

  result = qword_1EE67B808;
  if (!qword_1EE67B808)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBD40, &_s8TransferV5StateO44WaitingForContactShareBackResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B808);
  }
  return result;
}

unint64_t sub_1A29B00D0()
{
  unint64_t result;

  result = qword_1EE67B810;
  if (!qword_1EE67B810)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBDF8, &_s8TransferV5StateO34ImportingReceivedContactCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B810);
  }
  return result;
}

unint64_t sub_1A29B0118()
{
  unint64_t result;

  result = qword_1EE67B818;
  if (!qword_1EE67B818)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBEB0, &_s8TransferV5StateO47WaitingForShouldImportContactResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B818);
  }
  return result;
}

unint64_t sub_1A29B0160()
{
  unint64_t result;

  result = qword_1EE67B820;
  if (!qword_1EE67B820)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBFB8, &_s8TransferV5StateO17OpeningCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B820);
  }
  return result;
}

unint64_t sub_1A29B01A8()
{
  unint64_t result;

  result = qword_1EE67B828;
  if (!qword_1EE67B828)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC070, &_s8TransferV5StateO43WaitingForOpenDestinationResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B828);
  }
  return result;
}

unint64_t sub_1A29B01F0()
{
  unint64_t result;

  result = qword_1EE67B830;
  if (!qword_1EE67B830)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC128, &_s8TransferV5StateO32WaitingForOpenResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B830);
  }
  return result;
}

unint64_t sub_1A29B0238()
{
  unint64_t result;

  result = qword_1EE67B838;
  if (!qword_1EE67B838)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC1E0, &_s8TransferV5StateO19ImportingCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B838);
  }
  return result;
}

unint64_t sub_1A29B0280()
{
  unint64_t result;

  result = qword_1EE67B840;
  if (!qword_1EE67B840)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC298, &_s8TransferV5StateO48WaitingForSensitiveContentInterventionCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B840);
  }
  return result;
}

unint64_t sub_1A29B02C8()
{
  unint64_t result;

  result = qword_1EE67B848;
  if (!qword_1EE67B848)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC350, &_s8TransferV5StateO44WaitingForSensitiveContentResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B848);
  }
  return result;
}

unint64_t sub_1A29B0310()
{
  unint64_t result;

  result = qword_1EE67B850;
  if (!qword_1EE67B850)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC408, &_s8TransferV5StateO30AnalyzingFullContentCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B850);
  }
  return result;
}

unint64_t sub_1A29B0358()
{
  unint64_t result;

  result = qword_1EE67B858;
  if (!qword_1EE67B858)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC4C0, &_s8TransferV5StateO22TransferringCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B858);
  }
  return result;
}

unint64_t sub_1A29B03A0()
{
  unint64_t result;

  result = qword_1EE67B860;
  if (!qword_1EE67B860)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC578, &_s8TransferV5StateO48WaitingForSensitivePreviewInterventionCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B860);
  }
  return result;
}

unint64_t sub_1A29B03E8()
{
  unint64_t result;

  result = qword_1EE67B868;
  if (!qword_1EE67B868)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC630, &_s8TransferV5StateO50WaitingForShareContactPermissionResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B868);
  }
  return result;
}

unint64_t sub_1A29B0430()
{
  unint64_t result;

  result = qword_1EE67B870;
  if (!qword_1EE67B870)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC6E8, &_s8TransferV5StateO31WaitingForAskResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B870);
  }
  return result;
}

unint64_t sub_1A29B0478()
{
  unint64_t result;

  result = qword_1EE67B878;
  if (!qword_1EE67B878)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC890, &_s8TransferV5StateO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B878);
  }
  return result;
}

unint64_t sub_1A29B04C0()
{
  unint64_t result;

  result = qword_1EE67B880;
  if (!qword_1EE67B880)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC948, &_s8TransferV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B880);
  }
  return result;
}

unint64_t sub_1A29B0508()
{
  unint64_t result;

  result = qword_1EE67B888;
  if (!qword_1EE67B888)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC8B8, &_s8TransferV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B888);
  }
  return result;
}

unint64_t sub_1A29B0550()
{
  unint64_t result;

  result = qword_1EE67B890;
  if (!qword_1EE67B890)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC8E0, &_s8TransferV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B890);
  }
  return result;
}

unint64_t sub_1A29B0598()
{
  unint64_t result;

  result = qword_1EE67B898;
  if (!qword_1EE67B898)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC7B0, &_s8TransferV5StateO17CreatedCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B898);
  }
  return result;
}

unint64_t sub_1A29B05E0()
{
  unint64_t result;

  result = qword_1EE67B8A0;
  if (!qword_1EE67B8A0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC7D8, &_s8TransferV5StateO17CreatedCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B8A0);
  }
  return result;
}

unint64_t sub_1A29B0628()
{
  unint64_t result;

  result = qword_1EE67B8A8;
  if (!qword_1EE67B8A8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC760, &_s8TransferV5StateO22AutoAcceptedCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B8A8);
  }
  return result;
}

unint64_t sub_1A29B0670()
{
  unint64_t result;

  result = qword_1EE67B8B0;
  if (!qword_1EE67B8B0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC788, &_s8TransferV5StateO22AutoAcceptedCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B8B0);
  }
  return result;
}

unint64_t sub_1A29B06B8()
{
  unint64_t result;

  result = qword_1EE67B8B8;
  if (!qword_1EE67B8B8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC710, &_s8TransferV5StateO27AnalyizingPreviewCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B8B8);
  }
  return result;
}

unint64_t sub_1A29B0700()
{
  unint64_t result;

  result = qword_1EE67B8C0;
  if (!qword_1EE67B8C0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC738, &_s8TransferV5StateO27AnalyizingPreviewCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B8C0);
  }
  return result;
}

unint64_t sub_1A29B0748()
{
  unint64_t result;

  result = qword_1EE67B8C8;
  if (!qword_1EE67B8C8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC658, &_s8TransferV5StateO31WaitingForAskResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B8C8);
  }
  return result;
}

unint64_t sub_1A29B0790()
{
  unint64_t result;

  result = qword_1EE67B8D0;
  if (!qword_1EE67B8D0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC680, &_s8TransferV5StateO31WaitingForAskResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B8D0);
  }
  return result;
}

unint64_t sub_1A29B07D8()
{
  unint64_t result;

  result = qword_1EE67B8D8;
  if (!qword_1EE67B8D8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC5A0, &_s8TransferV5StateO50WaitingForShareContactPermissionResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B8D8);
  }
  return result;
}

unint64_t sub_1A29B0820()
{
  unint64_t result;

  result = qword_1EE67B8E0;
  if (!qword_1EE67B8E0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC5C8, &_s8TransferV5StateO50WaitingForShareContactPermissionResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B8E0);
  }
  return result;
}

unint64_t sub_1A29B0868()
{
  unint64_t result;

  result = qword_1EE67B8E8;
  if (!qword_1EE67B8E8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC4E8, &_s8TransferV5StateO48WaitingForSensitivePreviewInterventionCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B8E8);
  }
  return result;
}

unint64_t sub_1A29B08B0()
{
  unint64_t result;

  result = qword_1EE67B8F0;
  if (!qword_1EE67B8F0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC510, &_s8TransferV5StateO48WaitingForSensitivePreviewInterventionCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B8F0);
  }
  return result;
}

unint64_t sub_1A29B08F8()
{
  unint64_t result;

  result = qword_1EE67B8F8;
  if (!qword_1EE67B8F8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC430, &_s8TransferV5StateO22TransferringCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B8F8);
  }
  return result;
}

unint64_t sub_1A29B0940()
{
  unint64_t result;

  result = qword_1EE67B900;
  if (!qword_1EE67B900)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC458, &_s8TransferV5StateO22TransferringCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B900);
  }
  return result;
}

unint64_t sub_1A29B0988()
{
  unint64_t result;

  result = qword_1EE67B908;
  if (!qword_1EE67B908)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC378, &_s8TransferV5StateO30AnalyzingFullContentCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B908);
  }
  return result;
}

unint64_t sub_1A29B09D0()
{
  unint64_t result;

  result = qword_1EE67B910;
  if (!qword_1EE67B910)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC3A0, &_s8TransferV5StateO30AnalyzingFullContentCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B910);
  }
  return result;
}

unint64_t sub_1A29B0A18()
{
  unint64_t result;

  result = qword_1EE67B918;
  if (!qword_1EE67B918)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC2C0, &_s8TransferV5StateO44WaitingForSensitiveContentResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B918);
  }
  return result;
}

unint64_t sub_1A29B0A60()
{
  unint64_t result;

  result = qword_1EE67B920;
  if (!qword_1EE67B920)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC2E8, &_s8TransferV5StateO44WaitingForSensitiveContentResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B920);
  }
  return result;
}

unint64_t sub_1A29B0AA8()
{
  unint64_t result;

  result = qword_1EE67B928;
  if (!qword_1EE67B928)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC208, &_s8TransferV5StateO48WaitingForSensitiveContentInterventionCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B928);
  }
  return result;
}

unint64_t sub_1A29B0AF0()
{
  unint64_t result;

  result = qword_1EE67B930;
  if (!qword_1EE67B930)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC230, &_s8TransferV5StateO48WaitingForSensitiveContentInterventionCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B930);
  }
  return result;
}

unint64_t sub_1A29B0B38()
{
  unint64_t result;

  result = qword_1EE67B938;
  if (!qword_1EE67B938)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC150, &_s8TransferV5StateO19ImportingCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B938);
  }
  return result;
}

unint64_t sub_1A29B0B80()
{
  unint64_t result;

  result = qword_1EE67B940;
  if (!qword_1EE67B940)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC178, &_s8TransferV5StateO19ImportingCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B940);
  }
  return result;
}

unint64_t sub_1A29B0BC8()
{
  unint64_t result;

  result = qword_1EE67B948;
  if (!qword_1EE67B948)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC098, &_s8TransferV5StateO32WaitingForOpenResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B948);
  }
  return result;
}

unint64_t sub_1A29B0C10()
{
  unint64_t result;

  result = qword_1EE67B950;
  if (!qword_1EE67B950)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC0C0, &_s8TransferV5StateO32WaitingForOpenResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B950);
  }
  return result;
}

unint64_t sub_1A29B0C58()
{
  unint64_t result;

  result = qword_1EE67B958;
  if (!qword_1EE67B958)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBFE0, &_s8TransferV5StateO43WaitingForOpenDestinationResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B958);
  }
  return result;
}

unint64_t sub_1A29B0CA0()
{
  unint64_t result;

  result = qword_1EE67B960;
  if (!qword_1EE67B960)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC008, &_s8TransferV5StateO43WaitingForOpenDestinationResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B960);
  }
  return result;
}

unint64_t sub_1A29B0CE8()
{
  unint64_t result;

  result = qword_1EE67B968;
  if (!qword_1EE67B968)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBF28, &_s8TransferV5StateO17OpeningCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B968);
  }
  return result;
}

unint64_t sub_1A29B0D30()
{
  unint64_t result;

  result = qword_1EE67B970;
  if (!qword_1EE67B970)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBF50, &_s8TransferV5StateO17OpeningCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B970);
  }
  return result;
}

unint64_t sub_1A29B0D78()
{
  unint64_t result;

  result = qword_1EE67B978;
  if (!qword_1EE67B978)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBED8, &_s8TransferV5StateO42WaitingForContactExchangeRequestCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B978);
  }
  return result;
}

unint64_t sub_1A29B0DC0()
{
  unint64_t result;

  result = qword_1EE67B980;
  if (!qword_1EE67B980)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBF00, &_s8TransferV5StateO42WaitingForContactExchangeRequestCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B980);
  }
  return result;
}

unint64_t sub_1A29B0E08()
{
  unint64_t result;

  result = qword_1EE67B988;
  if (!qword_1EE67B988)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBE20, &_s8TransferV5StateO47WaitingForShouldImportContactResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B988);
  }
  return result;
}

unint64_t sub_1A29B0E50()
{
  unint64_t result;

  result = qword_1EE67B990;
  if (!qword_1EE67B990)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBE48, &_s8TransferV5StateO47WaitingForShouldImportContactResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B990);
  }
  return result;
}

unint64_t sub_1A29B0E98()
{
  unint64_t result;

  result = qword_1EE67B998;
  if (!qword_1EE67B998)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBD68, &_s8TransferV5StateO34ImportingReceivedContactCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B998);
  }
  return result;
}

unint64_t sub_1A29B0EE0()
{
  unint64_t result;

  result = qword_1EE67B9A0;
  if (!qword_1EE67B9A0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBD90, &_s8TransferV5StateO34ImportingReceivedContactCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B9A0);
  }
  return result;
}

unint64_t sub_1A29B0F28()
{
  unint64_t result;

  result = qword_1EE67B9A8;
  if (!qword_1EE67B9A8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBCB0, &_s8TransferV5StateO44WaitingForContactShareBackResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B9A8);
  }
  return result;
}

unint64_t sub_1A29B0F70()
{
  unint64_t result;

  result = qword_1EE67B9B0;
  if (!qword_1EE67B9B0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBCD8, &_s8TransferV5StateO44WaitingForContactShareBackResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B9B0);
  }
  return result;
}

unint64_t sub_1A29B0FB8()
{
  unint64_t result;

  result = qword_1EE67B9B8;
  if (!qword_1EE67B9B8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBBF8, &_s8TransferV5StateO28SharingContactBackCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B9B8);
  }
  return result;
}

unint64_t sub_1A29B1000()
{
  unint64_t result;

  result = qword_1EE67B9C0;
  if (!qword_1EE67B9C0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBC20, &_s8TransferV5StateO28SharingContactBackCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B9C0);
  }
  return result;
}

unint64_t sub_1A29B1048()
{
  unint64_t result;

  result = qword_1EE67B9C8;
  if (!qword_1EE67B9C8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBB40, &_s8TransferV5StateO31CompletedSuccessfullyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B9C8);
  }
  return result;
}

unint64_t sub_1A29B1090()
{
  unint64_t result;

  result = qword_1EE67B9D0;
  if (!qword_1EE67B9D0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBB68, &_s8TransferV5StateO31CompletedSuccessfullyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B9D0);
  }
  return result;
}

unint64_t sub_1A29B10D8()
{
  unint64_t result;

  result = qword_1EE67B9D8;
  if (!qword_1EE67B9D8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBA88, &_s8TransferV5StateO24TransferFailedCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B9D8);
  }
  return result;
}

unint64_t sub_1A29B1120()
{
  unint64_t result;

  result = qword_1EE67B9E0;
  if (!qword_1EE67B9E0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFBAB0, &_s8TransferV5StateO24TransferFailedCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B9E0);
  }
  return result;
}

unint64_t sub_1A29B1168()
{
  unint64_t result;

  result = qword_1EE67B9E8;
  if (!qword_1EE67B9E8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFB9D0, &_s8TransferV5StateO29LegacyTransferStateCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B9E8);
  }
  return result;
}

unint64_t sub_1A29B11B0()
{
  unint64_t result;

  result = qword_1EE67B9F0;
  if (!qword_1EE67B9F0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFB9F8, &_s8TransferV5StateO29LegacyTransferStateCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B9F0);
  }
  return result;
}

unint64_t sub_1A29B11F8()
{
  unint64_t result;

  result = qword_1EE67B9F8;
  if (!qword_1EE67B9F8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC800, &_s8TransferV5StateO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67B9F8);
  }
  return result;
}

unint64_t sub_1A29B1240()
{
  unint64_t result;

  result = qword_1EE67BA00;
  if (!qword_1EE67BA00)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFC828, &_s8TransferV5StateO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67BA00);
  }
  return result;
}

uint64_t sub_1A29B1284(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726566736E617274 && a2 == 0xEF734C5255646572 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73736572676F7270 && a2 == 0xE800000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x63416C65636E6163 && a2 == 0xEC0000006E6F6974)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1A29B1490(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x64657461657263 && a2 == 0xE700000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656363416F747561 && a2 == 0xEC00000064657470 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001A2B457B0 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001A2B457D0 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000028 && a2 == 0x80000001A2B457F0 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000026 && a2 == 0x80000001A2B45820 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x726566736E617274 && a2 == 0xEC000000676E6972 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001A2B45850 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x80000001A2B45870 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000026 && a2 == 0x80000001A2B458A0 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6E6974726F706D69 && a2 == 0xE900000000000067 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001A2B458D0 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x80000001A2B458F0 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x676E696E65706FLL && a2 == 0xE700000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000020 && a2 == 0x80000001A2B45920 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000025 && a2 == 0x80000001A2B45950 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001A2B45980 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x80000001A2B459A0 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001A2B459D0 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001A2B459F0 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0x726566736E617274 && a2 == 0xEE0064656C696146 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001A2B45A10)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 21;
    else
      return 22;
  }
}

uint64_t sub_1A29B1CE8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7363697274656DLL && a2 == 0xE700000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001A2B45A30 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x726566736E617274 && a2 == 0xEF734C5255646572 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x646574726F706D69 && a2 == 0xEC000000734C5255 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x525564656E65706FLL && a2 == 0xEA0000000000734CLL)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1A29B1FC0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726566736E617274 && a2 == 0xEF734C5255646572 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73736572676F7270 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1A29B2150(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726566736E617274 && a2 == 0xEF734C5255646572 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646574726F706D69 && a2 == 0xEC000000734C5255)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1A29B22F8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F437265646E6573 && a2 == 0xED0000746361746ELL;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7265766965636572 && a2 == 0xEF746361746E6F43)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A29B2430(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7363697274656DLL && a2 == 0xE700000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6572756C696166 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A29B2520(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73736572676F7270 && a2 == 0xE800000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001A2B45A70 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x63416C65636E6163 && a2 == 0xEC0000006E6F6974)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1A29B2700(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7265766965636572 && a2 == 0xEF746361746E6F43;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001A2B45A50)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A29B2810(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726566736E617274 && a2 == 0xEF734C5255646572 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646574726F706D69 && a2 == 0xEC000000734C5255 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x74736575716572 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1A29B2A1C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726566736E617274 && a2 == 0xEF734C5255646572 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74736575716572 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1A29B2BAC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7265766965636572 && a2 == 0xEF746361746E6F43;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74736575716572 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A29B2CC0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F437265646E6573 && a2 == 0xED0000746361746ELL;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001A2B45A50)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A29B2DD0(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0x65746E6573657270 && a2 == 0xE900000000000072 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4965766965636572 && a2 == 0xE900000000000044 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x5079616C70736964 && a2 == 0xEF797469726F6972 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65757165526B7361 && a2 == 0xEA00000000007473 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F707365526B7361 && a2 == 0xEB0000000065736ELL || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7461447472617473 && a2 == 0xE900000000000065 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001A2B45A90 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x416F747541646964 && a2 == 0xED00007470656363 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x63416C65636E6163 && a2 == 0xEC0000006E6F6974 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001A2B45AB0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    v5 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_1A29B32D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v5);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1A2AE4084();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v18 - v14, a1, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    return sub_1A2AE3694();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v15, v3);
    return sub_1A2AE36A0();
  }
}

uint64_t sub_1A29B3438(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1A296E4A4((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v2;
    *v2 = 0x8000000000000000;
    sub_1A2A22DA8(v9, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v8;
    swift_bridgeObjectRelease();
    v5 = sub_1A2AE3C40();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_1A29B84DC(a1);
    sub_1A29B7AD8(a2, v9);
    v7 = sub_1A2AE3C40();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
    return sub_1A29B84DC((uint64_t)v9);
  }
}

id _SFXPCAsyncSequenceContainer.__allocating_init(name:containerRegistry:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  objc_class *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  id v25;
  objc_class *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  objc_super v31;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v8);
  v30 = (uint64_t)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A2AE3130();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x1E0C80A78](v10);
  v29 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v27 - v14;
  v16 = (char *)objc_allocWithZone(v4);
  sub_1A2AE3124();
  v17 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v17(&v16[OBJC_IVAR____SFXPCAsyncSequenceContainer_uuid], v15, v10);
  v18 = &v16[OBJC_IVAR____SFXPCAsyncSequenceContainer_name];
  v28 = a1;
  *(_QWORD *)v18 = a1;
  *((_QWORD *)v18 + 1) = a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v16[OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences] = sub_1A297876C(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v16[OBJC_IVAR____SFXPCAsyncSequenceContainer_containerRegistry] = a3;
  swift_retain();

  if (a3)
  {
    v19 = sub_1A2AE36E8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v30, 1, 1, v19);
    v20 = v29;
    v17(v29, v15, v10);
    v21 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v27 = v4;
    v22 = (v12 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    v23 = (char *)swift_allocObject();
    *((_QWORD *)v23 + 2) = 0;
    *((_QWORD *)v23 + 3) = 0;
    *((_QWORD *)v23 + 4) = a3;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v23[v21], v20, v10);
    v24 = &v23[v22];
    v4 = v27;
    *(_QWORD *)v24 = v28;
    *((_QWORD *)v24 + 1) = a2;
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_1A2974504(v30, (uint64_t)&unk_1EE67B188, (uint64_t)v23);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
    swift_bridgeObjectRelease();
  }
  v31.receiver = v16;
  v31.super_class = v4;
  v25 = objc_msgSendSuper2(&v31, sel_init);
  swift_release();
  return v25;
}

uint64_t AsyncSequence<>.xpc.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;

  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v12, v5, a1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return SFXPCAsyncSequence.init<A>(_:)((uint64_t)v12, AssociatedTypeWitness, a1, a3, a4, a2, a5);
}

uint64_t SFXPCAsyncSequence.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t result;

  v14 = *(_QWORD *)(a3 - 8);
  v15 = (*(unsigned __int8 *)(v14 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = a2;
  *((_QWORD *)v16 + 3) = a3;
  *((_QWORD *)v16 + 4) = a4;
  *((_QWORD *)v16 + 5) = a5;
  *((_QWORD *)v16 + 6) = a6;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 32))(&v16[v15], a1, a3);
  *a7 = sub_1A29B84AC;
  a7[1] = v16;
  return result;
}

uint64_t sub_1A29B3910@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1A29695F4();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1A29B3944(uint64_t a1)
{
  MEMORY[0x1A85895EC](&unk_1A2AFD458, a1);
  return sub_1A2AE40FC();
}

uint64_t sub_1A29B3978(uint64_t a1)
{
  MEMORY[0x1A85895EC](&unk_1A2AFD458, a1);
  return sub_1A2AE4108();
}

_QWORD *sub_1A29B39AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = a5;
  v13 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  v16 = swift_allocBox();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a3);
  sub_1A2AE37CC();
  result = (_QWORD *)swift_allocObject();
  result[2] = a2;
  result[3] = a3;
  v18 = v20;
  result[4] = a4;
  result[5] = v18;
  result[6] = a6;
  result[7] = v16;
  *a7 = &unk_1EE67BB18;
  a7[1] = result;
  return result;
}

uint64_t sub_1A29B3AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[6] = a4;
  v7[7] = a7;
  v7[5] = a1;
  v7[8] = swift_getAssociatedTypeWitness();
  v7[9] = swift_projectBox();
  return swift_task_switch();
}

uint64_t sub_1A29B3B24()
{
  uint64_t v0;
  _QWORD *v1;

  swift_beginAccess();
  swift_getAssociatedConformanceWitness();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v1;
  *v1 = v0;
  v1[1] = sub_1A29B3BC0;
  return sub_1A2AE36C4();
}

uint64_t sub_1A29B3BC0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_endAccess();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A29B3C34()
{
  uint64_t v0;

  swift_endAccess();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SFXPCAsyncSequence.encode(to:)(_QWORD *a1, _QWORD *a2)
{
  __int128 *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v35;
  unint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  void (*v40)(_QWORD);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  void (*v47)(_QWORD);
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  void (*v52)(_BYTE *, _QWORD);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void (*v56)(_QWORD);
  void (*v57)(_BYTE *, _QWORD);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _QWORD v66[2];
  __int128 v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  void (*v80)(char *, char *, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  _QWORD *v85;
  _BYTE v86[32];
  __int128 v87;
  __int128 v88;
  uint64_t v89;

  v74 = sub_1A2AE3130();
  v73 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74);
  v72 = (uint64_t)v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v7 = MEMORY[0x1E0C80A78](v6);
  v76 = (char *)v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v77 = (char *)v66 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v79 = (char *)v66 - v12;
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v66 - v13;
  v89 = sub_1A2AE3C40();
  v85 = *(_QWORD **)(v89 - 8);
  v15 = MEMORY[0x1E0C80A78](v89);
  v68 = (char *)v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v75 = (char *)v66 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v78 = (char *)v66 - v20;
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)v66 - v21;
  v23 = a2[2];
  v24 = a2[3];
  v71 = a2;
  v25 = a2[4];
  v70 = v24;
  v69 = v25;
  v26 = type metadata accessor for SFXPCAsyncSequence.CodingKeys(255, v23, v24, v25);
  MEMORY[0x1A85895EC](&unk_1A2AFD458, v26);
  v27 = sub_1A2AE3E50();
  v82 = *(_QWORD *)(v27 - 8);
  v83 = v27;
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)v66 - v28;
  v67 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v81 = v29;
  v30 = v85;
  sub_1A2AE40E4();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v31 = v89;
  v32 = sub_1A2AE40B4();
  sub_1A2AE3C34();
  v33 = (uint64_t (*)(char *, uint64_t, uint64_t))v30[6];
  result = v33(v14, 1, v31);
  if ((_DWORD)result == 1)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v80 = (void (*)(char *, char *, uint64_t))v30[4];
  v80(v22, v14, v31);
  v35 = *(_QWORD *)(v32 + 16);
  v66[1] = "rProtocol>\"24@\"_SFXPCError\"32";
  if (v35 && (v36 = sub_1A297AF68((uint64_t)v22), (v37 & 1) != 0))
  {
    sub_1A296E4B4(*(_QWORD *)(v32 + 56) + 32 * v36, (uint64_t)&v87);
  }
  else
  {
    v87 = 0u;
    v88 = 0u;
  }
  swift_bridgeObjectRelease();
  v38 = (void (*)(char *, uint64_t))v30[1];
  v38(v22, v31);
  v39 = v84;
  v40 = sub_1A29754C8((uint64_t)&v87, 0, 0, 0xD000000000000054, 0x80000001A2B45AD0, 43);
  if (v39)
  {
    sub_1A29B84DC((uint64_t)&v87);
    return (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v81, v83);
  }
  v85 = v40;
  sub_1A29B84DC((uint64_t)&v87);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v41 = v89;
  v42 = sub_1A2AE40B4();
  v84 = "amework/XPC/SFXPCBlock.swift";
  v43 = v79;
  sub_1A2AE3C34();
  result = v33(v43, 1, v41);
  if ((_DWORD)result == 1)
    goto LABEL_18;
  v44 = (uint64_t)v78;
  v80(v78, v43, v41);
  if (*(_QWORD *)(v42 + 16) && (v45 = sub_1A297AF68(v44), (v46 & 1) != 0))
  {
    sub_1A296E4B4(*(_QWORD *)(v42 + 56) + 32 * v45, (uint64_t)&v87);
  }
  else
  {
    v87 = 0u;
    v88 = 0u;
  }
  swift_bridgeObjectRelease();
  v38((char *)v44, v41);
  v47 = sub_1A2975480((uint64_t)&v87, 0, 0, 0xD000000000000054, 0x80000001A2B45AD0, 44);
  sub_1A29B84DC((uint64_t)&v87);
  sub_1A2AE2E30();
  swift_allocObject();
  v48 = (_QWORD *)sub_1A2AE2E24();
  v49 = v77;
  sub_1A2AE3C34();
  result = v33(v49, 1, v41);
  if ((_DWORD)result == 1)
    goto LABEL_19;
  v50 = (uint64_t)v75;
  v51 = v80;
  v80(v75, v49, v41);
  *((_QWORD *)&v88 + 1) = type metadata accessor for _SFXPCAsyncSequenceContainer(0);
  *(_QWORD *)&v87 = v85;
  v79 = v85;
  v85 = v48;
  v52 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
  sub_1A29B3438((uint64_t)&v87, v50);
  v52(v86, 0);
  v53 = v89;
  v54 = v76;
  sub_1A2AE3C34();
  result = v33(v54, 1, v53);
  if ((_DWORD)result != 1)
  {
    v55 = (uint64_t)v68;
    v51(v68, v54, v53);
    *((_QWORD *)&v88 + 1) = type metadata accessor for _SFXPCBlockContainer();
    *(_QWORD *)&v87 = v47;
    v56 = v47;
    v57 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
    sub_1A29B3438((uint64_t)&v87, v55);
    v57(v86, 0);
    type metadata accessor for _SFEncodedDataAsyncSequence();
    v87 = v67;
    swift_retain();
    v58 = (uint64_t)v71;
    v59 = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFXPCAsyncSequence<A>, v71);
    v60 = swift_allocObject();
    sub_1A29B7570((uint64_t)&v87, v58, v59, v70, v69);
    v61 = v72;
    v62 = v79;
    sub_1A29B4410(v60, v72);
    sub_1A297CC38(&qword_1EE6766D8, MEMORY[0x1E0CB09B8]);
    v63 = v83;
    v64 = v74;
    v65 = v81;
    sub_1A2AE3E2C();

    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v61, v64);
    return (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v65, v63);
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1A29B43A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = swift_allocObject();
  sub_1A29B7570(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t sub_1A29B4410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;

  v5 = sub_1A2AE3130();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2AE3124();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  v9 = (uint64_t *)(v2 + OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences);
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *v9;
  *v9 = 0x8000000000000000;
  sub_1A2A230A4(a1, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  *v9 = v12;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_endAccess();
}

uint64_t SFXPCAsyncSequence.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t result;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[2];
  _QWORD *v63;

  v55 = a5;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  MEMORY[0x1E0C80A78](v9);
  v51 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A2AE3C40();
  v53 = *(_QWORD *)(v11 - 8);
  v54 = v11;
  MEMORY[0x1E0C80A78](v11);
  v52 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_1A2AE3130();
  v50 = *(_QWORD *)(v57 - 8);
  v13 = *(_QWORD *)(v50 + 64);
  v14 = MEMORY[0x1E0C80A78](v57);
  v49 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v56 = (char *)&v42 - v15;
  v46 = a2;
  v48 = a3;
  v47 = a4;
  v16 = type metadata accessor for SFXPCAsyncSequence.CodingKeys(255, a2, a3, a4);
  MEMORY[0x1A85895EC](&unk_1A2AFD458, v16);
  v17 = sub_1A2AE3DA8();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v42 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v21 = v63;
  sub_1A2AE40C0();
  if (v21)
    goto LABEL_3;
  v45 = v18;
  v44 = v13;
  v63 = a1;
  v22 = v55;
  sub_1A297CC38(&qword_1EE676788, MEMORY[0x1E0CB09E0]);
  sub_1A2AE3D78();
  v42 = v20;
  v43 = v17;
  __swift_project_boxed_opaque_existential_1(v63, v63[3]);
  v25 = sub_1A2AE40B4();
  v26 = v51;
  sub_1A2AE3C34();
  v28 = v53;
  v27 = v54;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48))(v26, 1, v54);
  if ((_DWORD)result != 1)
  {
    v29 = (uint64_t)v52;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v52, v26, v27);
    v30 = v22;
    v31 = v48;
    v32 = v50;
    v33 = v49;
    if (*(_QWORD *)(v25 + 16))
    {
      v34 = sub_1A297AF68(v29);
      v35 = v45;
      if ((v36 & 1) != 0)
      {
        sub_1A296E4B4(*(_QWORD *)(v25 + 56) + 32 * v34, (uint64_t)&v60);
      }
      else
      {
        v60 = 0u;
        v61 = 0u;
      }
    }
    else
    {
      v60 = 0u;
      v61 = 0u;
      v35 = v45;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v54);
    sub_1A29B8550((uint64_t)&v60, (uint64_t)&v58);
    if (v59)
    {
      sub_1A296E4A4(&v58, v62);
      sub_1A29B84DC((uint64_t)&v60);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v42, v43);
      sub_1A296E4A4(v62, &v60);
      v37 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
      v38 = v57;
      v37(v33, v56, v57);
      v39 = (*(unsigned __int8 *)(v32 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
      v40 = swift_allocObject();
      *(_QWORD *)(v40 + 16) = v46;
      *(_QWORD *)(v40 + 24) = v31;
      *(_QWORD *)(v40 + 32) = v47;
      sub_1A296E4A4(&v60, (_OWORD *)(v40 + 40));
      v37((char *)(v40 + v39), v33, v38);
      *v30 = sub_1A29B860C;
      v30[1] = v40;
      v23 = v63;
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v23);
    }
    sub_1A29B84DC((uint64_t)&v58);
    sub_1A297AFB8();
    swift_allocError();
    *(_QWORD *)v41 = 0xD00000000000001FLL;
    *(_QWORD *)(v41 + 8) = 0x80000001A2B45B30;
    *(_QWORD *)(v41 + 16) = 0xD000000000000054;
    *(_QWORD *)(v41 + 24) = 0x80000001A2B45AD0;
    *(_QWORD *)(v41 + 32) = 56;
    *(_OWORD *)(v41 + 40) = 0u;
    *(_OWORD *)(v41 + 56) = 0u;
    *(_QWORD *)(v41 + 72) = 0;
    *(_QWORD *)(v41 + 80) = 0x2000000000000000;
    *(_QWORD *)(v41 + 88) = 0;
    *(_QWORD *)(v41 + 96) = 0;
    swift_willThrow();
    sub_1A29B84DC((uint64_t)&v60);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v56, v57);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v42, v43);
    a1 = v63;
LABEL_3:
    v23 = a1;
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v23);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A29B4A24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  void *v18;
  _QWORD v19[4];
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  sub_1A296E4B4(a1, (uint64_t)&v22);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE676768);
  if (swift_dynamicCast())
  {
    v21 = a5;
    swift_getObjectType();
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE676760);
    MEMORY[0x1E0C80A78](v11);
    v19[2] = a2;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE676750);
    sub_1A29FBF20(0xD000000000000020, 0x80000001A2B45C50, (void (*)(uint64_t))sub_1A29B99F0, (uint64_t)v19, v11, v12, (uint64_t)&v22);
    swift_unknownObjectRelease();
    v20 = v22;
    v16 = v23;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = a3;
    *(_QWORD *)(result + 24) = a4;
    *(_QWORD *)(result + 32) = v21;
    *(_OWORD *)(result + 40) = v20;
    v18 = &unk_1EE67BAE8;
    *(_QWORD *)(result + 56) = v16;
  }
  else
  {
    *(_QWORD *)&v22 = 0;
    *((_QWORD *)&v22 + 1) = 0xE000000000000000;
    sub_1A2AE3BF8();
    v13 = v22;
    sub_1A297AFB8();
    v14 = swift_allocError();
    *(_OWORD *)v15 = v13;
    *(_QWORD *)(v15 + 16) = 0xD000000000000012;
    *(_QWORD *)(v15 + 24) = 0x80000001A2B452C0;
    *(_QWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 40) = 0;
    *(_QWORD *)(v15 + 48) = 0xD000000000000054;
    *(_QWORD *)(v15 + 56) = 0x80000001A2B45AD0;
    *(_OWORD *)(v15 + 64) = xmmword_1A2AFD100;
    *(_QWORD *)(v15 + 88) = 0;
    *(_QWORD *)(v15 + 96) = 0;
    *(_QWORD *)(v15 + 80) = 0xA000000000000000;
    swift_willThrow();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = a3;
    *(_QWORD *)(result + 24) = a4;
    *(_QWORD *)(result + 32) = a5;
    *(_QWORD *)(result + 40) = v14;
    v18 = &unk_1EE67BAD8;
  }
  *a6 = v18;
  a6[1] = result;
  return result;
}

uint64_t sub_1A29B4C7C@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD aBlock[6];

  v2 = *a1;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  v6 = (void *)sub_1A2AE30F4();
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v3;
  v7[3] = v4;
  v7[4] = v5;
  aBlock[4] = sub_1A29B9DA8;
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A29B4FD0;
  aBlock[3] = &block_descriptor_102;
  v8 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_xpcMakeAsyncIteratorFor_completion_, v6, v8);
  _Block_release(v8);

  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 16);
  if (v9)
  {
    swift_beginAccess();
    v10 = *(_QWORD *)(v4 + 16);
    swift_beginAccess();
    v11 = *(_QWORD *)(v5 + 16);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_release();
    swift_release();
    result = swift_release();
    *a2 = v9;
    a2[1] = v10;
    a2[2] = v11;
  }
  else
  {
    sub_1A297AFB8();
    swift_allocError();
    *(_OWORD *)v13 = xmmword_1A2AFD110;
    *(_QWORD *)(v13 + 16) = 0xD000000000000054;
    *(_QWORD *)(v13 + 24) = 0x80000001A2B45AD0;
    *(_QWORD *)(v13 + 32) = 69;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_QWORD *)(v13 + 72) = 0;
    *(_QWORD *)(v13 + 80) = 0x2000000000000000;
    *(_QWORD *)(v13 + 88) = 0;
    *(_QWORD *)(v13 + 96) = 0;
    swift_willThrow();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1A29B4EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_beginAccess();
  *(_QWORD *)(a4 + 16) = a1;
  swift_unknownObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(a5 + 16) = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(a6 + 16) = a3;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t sub_1A29B4FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v7(a2, a3, a4);
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1A29B5054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[11] = a6;
  v7[12] = a7;
  v7[9] = a4;
  v7[10] = a5;
  v7[7] = a2;
  v7[8] = a3;
  v7[6] = a1;
  return swift_task_switch();
}

uint64_t sub_1A29B5078()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v13;

  v1 = *(_QWORD *)(v0 + 56);
  ObjectType = swift_getObjectType();
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 40) = ObjectType;
  swift_unknownObjectRetain();
  v3 = sub_1A2974B58(v0 + 16, 0, 0, 0xD000000000000054, 0x80000001A2B45AD0, 73);
  *(_QWORD *)(v0 + 104) = v3;
  v4 = v3;
  v5 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 56);
  v13 = *(_OWORD *)(v0 + 80);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  v9 = swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v9;
  *(_OWORD *)(v9 + 16) = v13;
  *(_QWORD *)(v9 + 32) = v5;
  *(_QWORD *)(v9 + 40) = v4;
  *(_QWORD *)(v9 + 48) = v8;
  *(_QWORD *)(v9 + 56) = v7;
  *(_QWORD *)(v9 + 64) = v6;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v10;
  v10[2] = v8;
  v10[3] = v7;
  v10[4] = v6;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v11;
  sub_1A2AE39F4();
  *v11 = v0;
  v11[1] = sub_1A29B51F4;
  return sub_1A2AE3EEC();
}

uint64_t sub_1A29B51F4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_1A29B5268()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29B529C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29B52E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  return swift_task_switch();
}

uint64_t sub_1A29B5308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 32);
  ObjectType = swift_getObjectType();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE676758);
  v7 = swift_allocObject();
  *(_QWORD *)(v0 + 80) = v7;
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v7 + 32) = v1;
  *(_QWORD *)(v7 + 40) = v4;
  *(_QWORD *)(v7 + 48) = v3;
  *(_QWORD *)(v7 + 56) = v2;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v8;
  sub_1A2AE39F4();
  *v8 = v0;
  v8[1] = sub_1A29B542C;
  return sub_1A29FBCF0(*(_QWORD *)(v0 + 16), 0xD00000000000001BLL, 0x80000001A2B45C80, v6, (uint64_t)sub_1A29B9B7C, v7, ObjectType, v6);
}

uint64_t sub_1A29B542C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A29B54A0()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1A29B54D4(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v24 = a7;
  v25 = a8;
  v23 = a4;
  sub_1A2AE39F4();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v13 = sub_1A2AE36AC();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v22 - v15;
  v17 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v22 - v15, a2, v13);
  v18 = (*(unsigned __int8 *)(v14 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v19 = (char *)swift_allocObject();
  v20 = v24;
  *((_QWORD *)v19 + 2) = a6;
  *((_QWORD *)v19 + 3) = v20;
  *((_QWORD *)v19 + 4) = v25;
  *((_QWORD *)v19 + 5) = a3;
  *((_QWORD *)v19 + 6) = v23;
  *((_QWORD *)v19 + 7) = a5;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v19[v18], v16, v13);
  aBlock[4] = sub_1A29B9C4C;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A29B5C50;
  aBlock[3] = &block_descriptor_0;
  v21 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_release();
  objc_msgSend(v17, sel_xpcNextWithCompletion_, v21);
  _Block_release(v21);
}

uint64_t sub_1A29B5688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v23 = a6;
  v24 = a7;
  v21 = a4;
  v22 = a5;
  v20 = a2;
  sub_1A2AE39F4();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v13 = sub_1A2AE4084();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v19 - v15;
  v25 = a8;
  v26 = a9;
  v27 = a10;
  v28 = a3;
  v29 = a1;
  v30 = v20;
  v31 = v21;
  v32 = v22;
  v33 = v23;
  sub_1A29FCD20((void (*)(_BYTE *))sub_1A29B9D18, (uint64_t)&v19 - v15);
  v17 = sub_1A2AE36AC();
  sub_1A29B32D8((uint64_t)v16, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_1A29B57C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  unint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  void (*v49)(_BYTE *, _QWORD);
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_BYTE *, _QWORD);
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[32];
  __int128 v66;
  __int128 v67;
  unint64_t v68;

  v11 = v10;
  v63 = a7;
  v64 = a6;
  v62 = a5;
  v68 = a3;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v57 - v20;
  v22 = sub_1A2AE3C40();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x1E0C80A78](v22);
  v25 = MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v57 - v27;
  if (a1)
  {
    v68 = *(_QWORD *)(a1 + OBJC_IVAR____SFXPCError_errorCode);
    v29 = *(_QWORD *)(a1 + OBJC_IVAR____SFXPCError_domain + 8);
    v64 = *(_QWORD *)(a1 + OBJC_IVAR____SFXPCError_domain);
    v30 = *(_QWORD *)(a1 + OBJC_IVAR____SFXPCError_internalLocalizedDescription + 8);
    v63 = *(_QWORD *)(a1 + OBJC_IVAR____SFXPCError_internalLocalizedDescription);
    v31 = *(_QWORD *)(a1 + OBJC_IVAR____SFXPCError_internalDebugDescription + 8);
    v62 = *(_QWORD *)(a1 + OBJC_IVAR____SFXPCError_internalDebugDescription);
    v33 = *(_QWORD *)(a1 + OBJC_IVAR____SFXPCError_file);
    v32 = *(_QWORD *)(a1 + OBJC_IVAR____SFXPCError_file + 8);
    v34 = *(_QWORD *)(a1 + OBJC_IVAR____SFXPCError_line);
    v35 = *(unsigned __int8 *)(a1 + OBJC_IVAR____SFXPCError_line + 8);
    v37 = *(_QWORD *)(a1 + OBJC_IVAR____SFXPCError_process);
    v36 = *(_QWORD *)(a1 + OBJC_IVAR____SFXPCError_process + 8);
    v38 = v35 | 0xC000000000000000;
    sub_1A297AFB8();
    v39 = swift_allocError();
    *v40 = v64;
    v40[1] = v29;
    v41 = v63;
    v40[2] = v68;
    v40[3] = v41;
    v42 = v62;
    v40[4] = v30;
    v40[5] = v42;
    v40[6] = v31;
    v40[7] = v33;
    v40[8] = v32;
    v40[9] = v34;
    v40[10] = v38;
    v40[11] = v37;
    v11 = v39;
    v40[12] = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_willThrow();
LABEL_3:
    *a10 = v11;
    return result;
  }
  v58 = a4;
  v59 = v19;
  v60 = a8;
  v61 = a2;
  v44 = v68;
  if (v68 >> 60 == 15)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v60, 1, 1);
  v57 = (char *)v26;
  v45 = v25;
  sub_1A2AE2E00();
  swift_allocObject();
  sub_1A2973524(v61, v44);
  sub_1A2AE2DF4();
  sub_1A2AE3C34();
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  result = v46(v21, 1, v45);
  if ((_DWORD)result == 1)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  v47 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v47(v28, v21, v45);
  v48 = v58;
  if (v58)
  {
    *((_QWORD *)&v67 + 1) = swift_getObjectType();
    *(_QWORD *)&v66 = v48;
  }
  else
  {
    v66 = 0u;
    v67 = 0u;
  }
  swift_unknownObjectRetain();
  v49 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
  sub_1A29B3438((uint64_t)&v66, (uint64_t)v28);
  v49(v65, 0);
  v50 = v59;
  sub_1A2AE3C34();
  result = v46(v50, 1, v45);
  if ((_DWORD)result == 1)
    goto LABEL_18;
  v47(v57, v50, v45);
  v51 = v62;
  if (v62)
  {
    *((_QWORD *)&v67 + 1) = swift_getObjectType();
    *(_QWORD *)&v66 = v51;
  }
  else
  {
    v66 = 0u;
    v67 = 0u;
  }
  v52 = v68;
  v54 = v60;
  v53 = v61;
  v55 = v64;
  swift_unknownObjectRetain();
  v56 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
  sub_1A29B3438((uint64_t)&v66, (uint64_t)v57);
  v56(v65, 0);
  sub_1A2AE2DDC();
  if (v10)
  {
    swift_release();
    result = sub_1A29B98D8(v53, v52);
    goto LABEL_3;
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v54, 0, 1, v55);
  swift_release();
  return sub_1A29B98D8(v53, v52);
}

uint64_t sub_1A29B5C50(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  void (*v5)(void *, unint64_t, void *);
  id v6;
  unint64_t v7;
  unint64_t v8;
  id v9;

  v4 = a2;
  v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    v6 = v4;
    v4 = (void *)sub_1A2AE2F80();
    v8 = v7;

  }
  else
  {
    swift_retain();
    v8 = 0xF000000000000000;
  }
  v9 = a3;
  v5(v4, v8, a3);

  sub_1A29B98D8((uint64_t)v4, v8);
  return swift_release();
}

uint64_t sub_1A29B5CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  return swift_task_switch();
}

uint64_t sub_1A29B5CFC()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  swift_willThrow();
  v2 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SFXPCAsyncSequence.AsyncIterator.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_1A29B5D58()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))(***(int ***)(v0 + 24) + **(_QWORD **)(v0 + 24));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1A29B5DB8;
  return v3(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1A29B5DB8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A29B5E00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1A2971EBC;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch();
}

uint64_t sub_1A29B5E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v5;
  *v5 = v4;
  v5[1] = sub_1A29B5EF8;
  return sub_1A2AE36D0();
}

uint64_t sub_1A29B5EF8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc();
  if (v0)
    **(_QWORD **)(v2 + 24) = *(_QWORD *)(v2 + 16);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t SFXPCAsyncSequence.makeAsyncIterator()()
{
  uint64_t (**v0)(void);

  return (*v0)();
}

uint64_t sub_1A29B5F74()
{
  SFXPCAsyncSequence.makeAsyncIterator()();
  return swift_release();
}

uint64_t sub_1A29B5F8C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  return SFXPCAsyncSequence.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t sub_1A29B5FAC(_QWORD *a1, _QWORD *a2)
{
  return SFXPCAsyncSequence.encode(to:)(a1, a2);
}

id sub_1A29B5FC0()
{
  return sub_1A29B6454(&OBJC_IVAR____SFXPCAsyncIterator_containerRegistry, &OBJC_IVAR____SFXPCAsyncIterator_uuid, (uint64_t)&unk_1E4835340, (uint64_t)&unk_1EE67BAC8);
}

uint64_t sub_1A29B6080(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t (*v11)(void);

  v8[9] = a7;
  v8[10] = a8;
  v8[8] = a6;
  v11 = (uint64_t (*)(void))((char *)a4 + *a4);
  v9 = (_QWORD *)swift_task_alloc();
  v8[11] = v9;
  *v9 = v8;
  v9[1] = sub_1A29B60DC;
  return v11();
}

uint64_t sub_1A29B60DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[12] = a1;
  v4[13] = a2;
  v4[14] = v2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A29B614C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 64) + 16;
  swift_beginAccess();
  v2 = (char *)MEMORY[0x1A8589784](v1);
  if (v2)
  {
    *(_QWORD *)&v2[OBJC_IVAR____SFXPCAsyncIterator_currentTask] = 0;

    swift_release();
  }
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 72))(v4, v3, 0);
  sub_1A29B98D8(v4, v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29B61E4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  void *v3;
  void (*v4)(_QWORD, unint64_t, id);
  id v5;
  id v6;
  id v7;

  v1 = *(_QWORD *)(v0 + 64) + 16;
  swift_beginAccess();
  v2 = (char *)MEMORY[0x1A8589784](v1);
  if (v2)
  {
    *(_QWORD *)&v2[OBJC_IVAR____SFXPCAsyncIterator_currentTask] = 0;

    swift_release();
  }
  v3 = *(void **)(v0 + 112);
  v4 = *(void (**)(_QWORD, unint64_t, id))(v0 + 72);
  v5 = objc_allocWithZone((Class)type metadata accessor for _SFXPCError());
  v6 = v3;
  v7 = sub_1A2AB6180(v3);

  v4(0, 0xF000000000000000, v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1A29B630C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  id v6;

  if (a2 >> 60 == 15)
    v5 = 0;
  else
    v5 = sub_1A2AE2F74();
  v6 = (id)v5;
  (*(void (**)(uint64_t))(a4 + 16))(a4);

}

id _SFXPCAsyncSequenceContainer.init(name:containerRegistry:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3;

  v3 = sub_1A29B81D0(a1, a2, a3);
  swift_release();
  return v3;
}

id _SFXPCAsyncSequenceContainer.__deallocating_deinit()
{
  return sub_1A29B6454(&OBJC_IVAR____SFXPCAsyncSequenceContainer_containerRegistry, &OBJC_IVAR____SFXPCAsyncSequenceContainer_uuid, (uint64_t)&unk_1E48351B0, (uint64_t)&unk_1EE67B160);
}

id sub_1A29B6454(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  objc_class *ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;
  objc_super v22;

  v21 = a4;
  ObjectType = (objc_class *)swift_getObjectType();
  v8 = sub_1A2AE3130();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)&v4[*a1];
  if (v14)
  {
    v15 = &v4[*a2];
    v16 = sub_1A2AE36E8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v15, v8);
    v17 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v18 = (char *)swift_allocObject();
    *((_QWORD *)v18 + 2) = 0;
    *((_QWORD *)v18 + 3) = 0;
    *((_QWORD *)v18 + 4) = v14;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v18[v17], (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    swift_retain_n();
    sub_1A2974504((uint64_t)v13, v21, (uint64_t)v18);
    swift_release();
    swift_release();
  }
  v22.receiver = v4;
  v22.super_class = ObjectType;
  return objc_msgSendSuper2(&v22, sel_dealloc);
}

void _SFXPCAsyncSequenceContainer.xpcMakeAsyncIterator(for:completion:)(uint64_t a1, void (*a2)(id, Class, id), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  objc_class *v33;
  uint64_t v34;
  id v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  objc_class **v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  Class v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  objc_class *v55;
  char *v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  objc_class *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  id v74;
  Class v75;
  id v76;
  id v77;
  uint64_t v78;
  char *v79;
  objc_class *v80;
  uint64_t (*v81)(char *, uint64_t, uint64_t);
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  void (*v85)(_BYTE *, _QWORD);
  char *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  void (*v91)(_BYTE *, _QWORD);
  uint64_t (*v92)(uint64_t);
  uint64_t v93;
  char *v94;
  char *v95;
  objc_class *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  void (*v102)(char *, char *, uint64_t);
  char *v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  id v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  id v117;
  Class v118;
  objc_class *v119;
  uint64_t v120;
  id v121;
  void (*v122)(char *, uint64_t);
  uint64_t v123;
  uint64_t v124;
  void (*v125)(char *, char *, uint64_t);
  Class v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  objc_class *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  Class ObjectType;
  char *v137;
  char *v138;
  uint64_t v139;
  void (*v140)(id, Class, id);
  objc_super v141;
  _BYTE v142[32];
  _QWORD v143[3];
  Class v144;
  objc_super v145;
  objc_super v146;

  v4 = v3;
  v139 = a3;
  v140 = a2;
  ObjectType = (Class)swift_getObjectType();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v7 = MEMORY[0x1E0C80A78](v6);
  v131 = (char *)&v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v133 = (char *)&v120 - v9;
  v134 = sub_1A2AE3C40();
  v132 = *(objc_class **)(v134 - 8);
  v10 = MEMORY[0x1E0C80A78](v134);
  v129 = (char *)&v120 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v130 = (char *)&v120 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1A2AE3130();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  v19 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v120 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v137 = (char *)&v120 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v138 = (char *)&v120 - v24;
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v120 - v25;
  v27 = (uint64_t *)(v3 + OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences);
  swift_beginAccess();
  v28 = *v27;
  if (!*(_QWORD *)(v28 + 16) || (v29 = sub_1A297AF04(a1), (v30 & 1) == 0))
  {
    v49 = v16;
    v50 = (uint64_t)v15;
    swift_endAccess();
    v51 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
    v52 = (void *)sub_1A2AE340C();
    v53 = objc_msgSend(v51, sel_initWithDomain_code_userInfo_, v52, 0, 0);

    v54 = *(_QWORD *)(v4 + OBJC_IVAR____SFXPCAsyncSequenceContainer_containerRegistry);
    v55 = (objc_class *)type metadata accessor for _SFXPCAsyncIterator(0);
    v56 = (char *)objc_allocWithZone(v55);
    *(_QWORD *)&v56[OBJC_IVAR____SFXPCAsyncIterator_currentTask] = 0;
    swift_retain();
    v57 = v56;
    sub_1A2AE3124();
    v58 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    v58(&v57[OBJC_IVAR____SFXPCAsyncIterator_uuid], v20, v49);
    v59 = &v57[OBJC_IVAR____SFXPCAsyncIterator_iterator];
    *(_QWORD *)v59 = v53;
    *((_QWORD *)v59 + 1) = 0;
    v59[16] = 1;
    *(_QWORD *)&v57[OBJC_IVAR____SFXPCAsyncIterator_containerRegistry] = v54;
    swift_retain();
    v60 = (char *)v53;

    if (v54)
    {
      v61 = sub_1A2AE36E8();
      v62 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56);
      v135 = (char *)v50;
      v62(v50, 1, 1, v61);
      v137 = v60;
      v63 = v138;
      v58(v138, v20, v49);
      v64 = *(unsigned __int8 *)(v17 + 80);
      v65 = v17;
      v66 = v55;
      v67 = v49;
      v68 = (v64 + 40) & ~v64;
      v69 = (v18 + v68 + 7) & 0xFFFFFFFFFFFFFFF8;
      v70 = (_QWORD *)swift_allocObject();
      v70[2] = 0;
      v70[3] = 0;
      v70[4] = v54;
      v71 = (char *)v70 + v68;
      v49 = v67;
      v55 = v66;
      v17 = v65;
      v72 = v63;
      v60 = v137;
      (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v71, v72, v49);
      v73 = (_QWORD *)((char *)v70 + v69);
      *v73 = 0xD000000000000012;
      v73[1] = 0x80000001A2B45B50;
      swift_retain_n();
      sub_1A2974504((uint64_t)v135, (uint64_t)&unk_1EE67BA68, (uint64_t)v70);
      swift_release();
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v49);
    v146.receiver = v57;
    v146.super_class = v55;
    v74 = objc_msgSendSuper2(&v146, sel_init);

    swift_release();
    v140(v74, 0, 0);
    goto LABEL_14;
  }
  v127 = v18;
  v31 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v29);
  swift_endAccess();
  v33 = *(objc_class **)(v4 + OBJC_IVAR____SFXPCAsyncSequenceContainer_name);
  v32 = *(_QWORD *)(v4 + OBJC_IVAR____SFXPCAsyncSequenceContainer_name + 8);
  v34 = *(_QWORD *)(v4 + OBJC_IVAR____SFXPCAsyncSequenceContainer_containerRegistry);
  v35 = objc_allocWithZone(ObjectType);
  swift_retain();
  v128 = v31;
  swift_retain();
  swift_bridgeObjectRetain();
  v36 = (char *)v35;
  sub_1A2AE3124();
  v37 = v17;
  v38 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v38(&v36[OBJC_IVAR____SFXPCAsyncSequenceContainer_uuid], v26, v16);
  v39 = (objc_class **)&v36[OBJC_IVAR____SFXPCAsyncSequenceContainer_name];
  v126 = v33;
  *v39 = v33;
  v39[1] = (objc_class *)v32;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v36[OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences] = sub_1A297876C(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v36[OBJC_IVAR____SFXPCAsyncSequenceContainer_containerRegistry] = v34;
  swift_retain();

  v135 = v15;
  v125 = v38;
  v124 = v37;
  if (v34)
  {
    v40 = sub_1A2AE36E8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v15, 1, 1, v40);
    v41 = v138;
    v38(v138, v26, v16);
    v42 = (*(unsigned __int8 *)(v37 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    v43 = v37;
    v44 = (v127 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
    v45 = (char *)swift_allocObject();
    *((_QWORD *)v45 + 2) = 0;
    *((_QWORD *)v45 + 3) = 0;
    *((_QWORD *)v45 + 4) = v34;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(&v45[v42], v41, v16);
    v46 = &v45[v44];
    v47 = v43;
    v48 = v126;
    *(_QWORD *)v46 = v126;
    *((_QWORD *)v46 + 1) = v32;
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_1A2974504((uint64_t)v135, (uint64_t)&unk_1EE67BA78, (uint64_t)v45);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v122 = *(void (**)(char *, uint64_t))(v47 + 8);
    v122(v26, v16);
  }
  else
  {
    v122 = *(void (**)(char *, uint64_t))(v37 + 8);
    v122(v26, v16);
    swift_bridgeObjectRelease();
    v48 = v126;
  }
  v123 = v16;
  v75 = ObjectType;
  v145.receiver = v36;
  v145.super_class = ObjectType;
  v76 = objc_msgSendSuper2(&v145, sel_init);
  swift_release();
  v126 = (Class)type metadata accessor for _SFXPCBlockContainer();
  v77 = objc_allocWithZone(v126);
  swift_bridgeObjectRetain();
  swift_retain();
  v121 = sub_1A297B80C((uint64_t)v48, v32, v34);
  swift_release();
  sub_1A2AE2E30();
  swift_allocObject();
  v78 = sub_1A2AE2E24();
  v79 = v133;
  sub_1A2AE3C34();
  v80 = v132;
  v81 = (uint64_t (*)(char *, uint64_t, uint64_t))*((_QWORD *)v132 + 6);
  v82 = v134;
  if (v81(v79, 1, v134) == 1)
  {
    __break(1u);
  }
  else
  {
    v83 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v80 + 4);
    v84 = (uint64_t)v130;
    v83(v130, v79, v82);
    v144 = v75;
    v143[0] = v76;
    ObjectType = (Class)v76;
    v85 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
    sub_1A29B3438((uint64_t)v143, v84);
    v85(v142, 0);
    v86 = v131;
    sub_1A2AE3C34();
    v87 = v81(v86, 1, v82);
    v88 = v127;
    if (v87 != 1)
    {
      v89 = (uint64_t)v129;
      v83(v129, v86, v82);
      v144 = v126;
      v143[0] = v121;
      v90 = v121;
      v91 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
      sub_1A29B3438((uint64_t)v143, v89);
      v91(v142, 0);
      v92 = *(uint64_t (**)(uint64_t))(v128 + 16);
      v134 = v78;
      v93 = v92(v78);
      v95 = v94;
      v96 = (objc_class *)type metadata accessor for _SFXPCAsyncIterator(0);
      v97 = (char *)objc_allocWithZone(v96);
      *(_QWORD *)&v97[OBJC_IVAR____SFXPCAsyncIterator_currentTask] = 0;
      swift_retain();
      v98 = v97;
      v99 = v137;
      sub_1A2AE3124();
      v100 = v99;
      v101 = v123;
      v102 = v125;
      v125(&v98[OBJC_IVAR____SFXPCAsyncIterator_uuid], v100, v123);
      v103 = &v98[OBJC_IVAR____SFXPCAsyncIterator_iterator];
      *(_QWORD *)v103 = v93;
      *((_QWORD *)v103 + 1) = v95;
      v103[16] = 0;
      *(_QWORD *)&v98[OBJC_IVAR____SFXPCAsyncIterator_containerRegistry] = v34;
      swift_retain();
      swift_retain();

      v104 = v124;
      if (v34)
      {
        v105 = sub_1A2AE36E8();
        v106 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 56);
        v132 = v96;
        v107 = (uint64_t)v135;
        v106(v135, 1, 1, v105);
        v133 = v95;
        v108 = v90;
        v109 = v138;
        v102(v138, v137, v101);
        v110 = (*(unsigned __int8 *)(v104 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
        v111 = v107;
        v112 = (char *)swift_allocObject();
        v113 = v104;
        v114 = (uint64_t)v112;
        *((_QWORD *)v112 + 2) = 0;
        *((_QWORD *)v112 + 3) = 0;
        *((_QWORD *)v112 + 4) = v34;
        v115 = v109;
        v90 = v108;
        (*(void (**)(char *, char *, uint64_t))(v113 + 32))(&v112[v110], v115, v101);
        v116 = (_QWORD *)(v114 + ((v88 + v110 + 7) & 0xFFFFFFFFFFFFFFF8));
        v96 = v132;
        *v116 = 0xD000000000000012;
        v116[1] = 0x80000001A2B45B50;
        swift_retain_n();
        sub_1A2974504(v111, (uint64_t)&unk_1EE67BA70, v114);
        swift_release();
        swift_release();
      }
      v122(v137, v101);
      v141.receiver = v98;
      v141.super_class = v96;
      v117 = objc_msgSendSuper2(&v141, sel_init);
      swift_release();
      v118 = ObjectType;
      v119 = ObjectType;
      v74 = v90;
      v140(v117, v118, v90);
      swift_release();
      swift_release();
      swift_release();

LABEL_14:
      return;
    }
  }
  __break(1u);
}

id _SFXPCAsyncSequenceContainer.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void _SFXPCAsyncSequenceContainer.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1A29B72AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(void))(*(int *)*v1 + *v1);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_1A29B7304;
  return v5();
}

uint64_t sub_1A29B7304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *v3;
  v7 = *v3;
  swift_task_dealloc();
  if (v2)
    return (*(uint64_t (**)(void))(v7 + 8))();
  *(_QWORD *)(v6 + 32) = a2;
  *(_QWORD *)(v6 + 40) = a1;
  return swift_task_switch();
}

uint64_t sub_1A29B7384()
{
  uint64_t v0;

  *(int8x16_t *)*(_QWORD *)(v0 + 16) = vextq_s8(*(int8x16_t *)(v0 + 32), *(int8x16_t *)(v0 + 32), 8uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29B73A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[4] = v4;
  v5[5] = a4;
  v5[3] = a1;
  if (a2)
  {
    swift_getObjectType();
    v6 = sub_1A2AE3688();
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v5[6] = v6;
  v5[7] = v8;
  return swift_task_switch();
}

uint64_t sub_1A29B7418()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))(***(int ***)(v0 + 32) + **(_QWORD **)(v0 + 32));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = sub_1A29B7470;
  return v3();
}

uint64_t sub_1A29B7470(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 72) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    *(_QWORD *)(v6 + 80) = a2;
    *(_QWORD *)(v6 + 88) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_1A29B74EC()
{
  uint64_t v0;

  *(int8x16_t *)*(_QWORD *)(v0 + 24) = vextq_s8(*(int8x16_t *)(v0 + 80), *(int8x16_t *)(v0 + 80), 8uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29B7508()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD **)(v0 + 40);
  *(_QWORD *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  swift_willThrowTypedImpl();
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29B7570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  unint64_t v12;
  char *v13;

  v11 = *(_QWORD *)(a2 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = a2;
  *((_QWORD *)v13 + 3) = a3;
  *((_QWORD *)v13 + 4) = a4;
  *((_QWORD *)v13 + 5) = a5;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(&v13[v12], a1, a2);
  *(_QWORD *)(v5 + 16) = sub_1A29B9E0C;
  *(_QWORD *)(v5 + 24) = v13;
  return v5;
}

void *sub_1A29B7614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  v15 = swift_allocBox();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, a3);
  sub_1A2AE37CC();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  v16[5] = a6;
  v16[6] = v15;
  v16[7] = a1;
  swift_retain();
  return &unk_1EE67BB08;
}

uint64_t sub_1A29B771C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v6[7] = a4;
  v6[8] = a6;
  v6[5] = a2;
  v6[6] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[9] = AssociatedTypeWitness;
  v8 = sub_1A2AE39F4();
  v6[10] = v8;
  v6[11] = *(_QWORD *)(v8 - 8);
  v6[12] = swift_task_alloc();
  v6[13] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[14] = swift_task_alloc();
  v6[15] = swift_getAssociatedTypeWitness();
  v6[16] = swift_projectBox();
  return swift_task_switch();
}

uint64_t sub_1A29B7810()
{
  uint64_t v0;
  _QWORD *v1;

  swift_beginAccess();
  swift_getAssociatedConformanceWitness();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v1;
  *v1 = v0;
  v1[1] = sub_1A29B78AC;
  return sub_1A2AE36C4();
}

uint64_t sub_1A29B78AC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_endAccess();
  return swift_task_switch();
}

uint64_t sub_1A29B7918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = v0 + 104;
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = (_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 72);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v4) == 1)
  {
    v6 = 0;
    v1 = v0 + 88;
    v5 = (_QWORD *)(v0 + 80);
    v7 = 0xF000000000000000;
    v8 = v3;
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 144);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 112), v3, v4);
    v10 = sub_1A2AE2E0C();
    if (v9)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 72));
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v6 = v10;
    v7 = v11;
    v8 = *(_QWORD *)(v0 + 112);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 8))(v8, *v5);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v6, v7);
}

uint64_t sub_1A29B7A6C()
{
  uint64_t v0;

  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29B7AB4()
{
  swift_release();
  return swift_deallocClassInstance();
}

double sub_1A29B7AD8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1A297AF68(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1A2A236DC();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_1A2AE3C40();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    sub_1A296E4A4((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    sub_1A29B7CC0(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_1A29B7BD4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = sub_1A297AF04(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1A2A23D84();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = sub_1A2AE3130();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v4);
  sub_1A29B7F44(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_1A29B7CC0(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;

  v4 = sub_1A2AE3C40();
  v36 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_1A2AE3ACC();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v35 = (result + 1) & v11;
      v12 = *(_QWORD *)(v36 + 72);
      v34 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v34(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = sub_1A2AE3388();
        result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v35)
        {
          if (v19 >= v35 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v12 = v15;
              v13 = v17;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_OWORD *)(v23 + 32 * a1);
            v25 = (_OWORD *)(v23 + 32 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 2))
            {
              v26 = v25[1];
              *v24 = *v25;
              v24[1] = v26;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v35 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v27;
    v29 = (-1 << a1) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v27;
    v28 = (-1 << a1) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(a2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1A29B7F44(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  unint64_t v33;
  uint64_t v34;

  v4 = sub_1A2AE3130();
  v34 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_1A2AE3ACC();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v33 = (result + 1) & v11;
      v12 = *(_QWORD *)(v34 + 72);
      v32 = *(void (**)(char *, unint64_t, uint64_t))(v34 + 16);
      v13 = v11;
      do
      {
        v14 = v12;
        v15 = v12 * v10;
        v16 = v13;
        v32(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        sub_1A297CC38(&qword_1EE6766E0, MEMORY[0x1E0CB09C8]);
        v17 = sub_1A2AE3388();
        result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v7, v4);
        v13 = v16;
        v18 = v17 & v16;
        if (a1 >= (uint64_t)v33)
        {
          if (v18 >= v33 && a1 >= (uint64_t)v18)
          {
LABEL_17:
            v21 = *(_QWORD *)(a2 + 48);
            result = v21 + v14 * a1;
            if (v14 * a1 < v15 || (v12 = v14, result >= v21 + v15 + v14))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_22:
              v13 = v16;
              v12 = v14;
            }
            else if (v14 * a1 != v15)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_22;
            }
            v22 = *(_QWORD *)(a2 + 56);
            v23 = (_OWORD *)(v22 + 16 * a1);
            v24 = (_OWORD *)(v22 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v33 || a1 >= (uint64_t)v18)
        {
          goto LABEL_17;
        }
        v12 = v14;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v25 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v26 = *v25;
    v27 = (-1 << a1) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v25;
    v26 = (-1 << a1) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(a2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

id sub_1A29B81D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  objc_class *ObjectType;
  uint64_t v29;
  objc_super v30;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v8);
  v29 = (uint64_t)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A2AE3130();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v26 - v15;
  v17 = v4;
  sub_1A2AE3124();
  v18 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v18(&v17[OBJC_IVAR____SFXPCAsyncSequenceContainer_uuid], v16, v10);
  v19 = &v17[OBJC_IVAR____SFXPCAsyncSequenceContainer_name];
  *(_QWORD *)v19 = a1;
  *((_QWORD *)v19 + 1) = a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v17[OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences] = sub_1A297876C(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v17[OBJC_IVAR____SFXPCAsyncSequenceContainer_containerRegistry] = a3;
  swift_retain();

  if (a3)
  {
    v20 = sub_1A2AE36E8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v29, 1, 1, v20);
    v18(v14, v16, v10);
    v21 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v27 = a1;
    v22 = (v12 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    v23 = (char *)swift_allocObject();
    *((_QWORD *)v23 + 2) = 0;
    *((_QWORD *)v23 + 3) = 0;
    *((_QWORD *)v23 + 4) = a3;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v23[v21], v14, v10);
    v24 = &v23[v22];
    *(_QWORD *)v24 = v27;
    *((_QWORD *)v24 + 1) = a2;
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_1A2974504(v29, (uint64_t)&unk_1EE67BB20, (uint64_t)v23);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    swift_bridgeObjectRelease();
  }
  v30.receiver = v17;
  v30.super_class = ObjectType;
  return objc_msgSendSuper2(&v30, sel_init);
}

uint64_t sub_1A29B8454()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

_QWORD *sub_1A29B84AC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[3];
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  return sub_1A29B39AC((uint64_t)v1 + ((v3 + 56) & ~v3), v1[2], v2, v1[4], v1[5], v1[6], a1);
}

uint64_t type metadata accessor for SFXPCAsyncSequence.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SFXPCAsyncSequence.CodingKeys);
}

uint64_t sub_1A29B84DC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB8A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for _SFXPCAsyncSequenceContainer(uint64_t a1)
{
  return sub_1A29903E0(a1, (uint64_t *)&unk_1ECEFCF98);
}

uint64_t type metadata accessor for _SFEncodedDataAsyncSequence()
{
  return objc_opt_self();
}

uint64_t sub_1A29B8550(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB8A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A29B8598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A2AE3130();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 40);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1A29B860C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A2AE3130() - 8) + 80);
  return sub_1A29B4A24((uint64_t)(v1 + 5), (uint64_t)v1 + ((v6 + 72) & ~v6), v3, v4, v5, a1);
}

uint64_t sub_1A29B8674(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A2AE3130() - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1A2972038;
  return sub_1A29ED570(a1, v5, v6, v7, v8);
}

uint64_t type metadata accessor for _SFXPCAsyncIterator(uint64_t a1)
{
  return sub_1A29903E0(a1, (uint64_t *)&unk_1EE6766E8);
}

uint64_t sub_1A29B8720(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(sub_1A2AE3130() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_1A2972038;
  return sub_1A29ED420(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1A29B87E4()
{
  return MEMORY[0x1E0DEDB38];
}

void sub_1A29B87F0()
{
  JUMPOUT(0x1A85895ECLL);
}

uint64_t sub_1A29B8800()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for SFXPCAsyncSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SFXPCAsyncSequence);
}

_QWORD *_s7Sharing27_SFEncodedDataAsyncSequenceC13AsyncIteratorVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t _s7Sharing27_SFEncodedDataAsyncSequenceC13AsyncIteratorVwxx_0()
{
  return swift_release();
}

_OWORD *_s7Sharing27_SFEncodedDataAsyncSequenceC13AsyncIteratorVwta_0(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for SFXPCAsyncSequence.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SFXPCAsyncSequence.AsyncIterator);
}

uint64_t sub_1A29B8890()
{
  return type metadata accessor for _SFXPCAsyncIterator(0);
}

uint64_t sub_1A29B8898()
{
  return sub_1A29B88CC();
}

uint64_t sub_1A29B88AC()
{
  return type metadata accessor for _SFXPCAsyncSequenceContainer(0);
}

uint64_t sub_1A29B88B4()
{
  return sub_1A29B88CC();
}

uint64_t sub_1A29B88CC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A2AE3130();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for _SFXPCAsyncSequenceContainer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _SFXPCAsyncSequenceContainer.__allocating_init(name:containerRegistry:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

_QWORD *_s7Sharing27_SFEncodedDataAsyncSequenceC13AsyncIteratorVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s7Sharing27_SFEncodedDataAsyncSequenceC13AsyncIteratorVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1A29B89E8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _SFEncodedDataAsyncSequence.AsyncIterator()
{
  return &type metadata for _SFEncodedDataAsyncSequence.AsyncIterator;
}

uint64_t sub_1A29B8A34(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A29B8A74 + 4 * byte_1A2AFD120[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A29B8A94 + 4 * byte_1A2AFD125[v4]))();
}

_BYTE *sub_1A29B8A74(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A29B8A94(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A29B8A9C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A29B8AA4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A29B8AAC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A29B8AB4(_DWORD *result)
{
  *result = 0;
  return result;
}

void sub_1A29B8AC0()
{
  JUMPOUT(0x1A85895ECLL);
}

void sub_1A29B8AD0()
{
  JUMPOUT(0x1A85895ECLL);
}

void sub_1A29B8AE0()
{
  JUMPOUT(0x1A85895ECLL);
}

uint64_t sub_1A29B8AF0(uint64_t a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  v9 = *(void **)(a1 + OBJC_IVAR____SFXPCAsyncIterator_iterator);
  v8 = *(_QWORD *)(a1 + OBJC_IVAR____SFXPCAsyncIterator_iterator + 8);
  if ((*(_BYTE *)(a1 + OBJC_IVAR____SFXPCAsyncIterator_iterator + 16) & 1) != 0)
  {
    v10 = objc_allocWithZone((Class)type metadata accessor for _SFXPCError());
    _Block_copy(a2);
    sub_1A29B97C0(v9, v8, 1);
    v11 = sub_1A2AB6180(v9);
    ((void (**)(_QWORD, _QWORD, id))a2)[2](a2, 0, v11);

    sub_1A29B97D0(v9, v8, 1);
  }
  else
  {
    v13 = sub_1A2AE36E8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 1, 1, v13);
    v14 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = 0;
    v15[3] = 0;
    v15[4] = v9;
    v15[5] = v8;
    v15[6] = v14;
    v15[7] = sub_1A29B97B8;
    v15[8] = v7;
    _Block_copy(a2);
    sub_1A29B97C0(v9, v8, 0);
    swift_retain();
    *(_QWORD *)(a1 + OBJC_IVAR____SFXPCAsyncIterator_currentTask) = sub_1A2974504((uint64_t)v6, (uint64_t)&unk_1EE67BAC0, (uint64_t)v15);
    swift_release();
  }
  return swift_release();
}

void sub_1A29B8CE0(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  objc_class *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  uint64_t v52;
  objc_class *v53;
  char *v54;
  char *v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  objc_class *v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t (*v75)(char *, uint64_t, objc_class *);
  objc_class *v76;
  void (*v77)(char *, char *, objc_class *);
  uint64_t v78;
  char *v79;
  void (*v80)(_BYTE *, _QWORD);
  char *v81;
  int v82;
  objc_class *v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  void (*v87)(_BYTE *, _QWORD);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  objc_class *v93;
  objc_class *v94;
  void (*v95)(char *, objc_class *, uint64_t);
  char *v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  id v103;
  unint64_t v104;
  char *v105;
  void (*v106)(char *, char *, uint64_t);
  char *v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  void (*v110)(char *, char *, uint64_t);
  id v111;
  Class v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  objc_class *v120;
  objc_class *v121;
  char *v122;
  void (**v123)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v124;
  objc_super v125;
  _BYTE v126[32];
  _QWORD v127[3];
  Class v128;
  objc_super v129;
  objc_super v130;

  v123 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v6 = MEMORY[0x1E0C80A78](v5);
  v117 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v119 = (char *)&v108 - v8;
  v120 = (objc_class *)sub_1A2AE3C40();
  v118 = *((_QWORD *)v120 - 1);
  v9 = MEMORY[0x1E0C80A78](v120);
  v115 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v116 = (char *)&v108 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v12);
  v124 = (uint64_t)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1A2AE3130();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = MEMORY[0x1E0C80A78](v14);
  v121 = (objc_class *)((char *)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v108 - v19;
  v21 = MEMORY[0x1E0C80A78](v18);
  v122 = (char *)&v108 - v22;
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v108 - v23;
  v25 = (uint64_t *)(a2 + OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences);
  swift_beginAccess();
  v26 = *v25;
  if (!*(_QWORD *)(v26 + 16) || (v27 = sub_1A297AF04(a1), (v28 & 1) == 0))
  {
    swift_endAccess();
    v47 = v14;
    v48 = v15;
    v49 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
    v50 = (void *)sub_1A2AE340C();
    v51 = objc_msgSend(v49, sel_initWithDomain_code_userInfo_, v50, 0, 0);

    v52 = *(_QWORD *)(a2 + OBJC_IVAR____SFXPCAsyncSequenceContainer_containerRegistry);
    v53 = (objc_class *)type metadata accessor for _SFXPCAsyncIterator(0);
    v54 = (char *)objc_allocWithZone(v53);
    *(_QWORD *)&v54[OBJC_IVAR____SFXPCAsyncIterator_currentTask] = 0;
    swift_retain();
    v55 = v54;
    sub_1A2AE3124();
    v56 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
    v56(&v55[OBJC_IVAR____SFXPCAsyncIterator_uuid], v24, v47);
    v57 = &v55[OBJC_IVAR____SFXPCAsyncIterator_iterator];
    *(_QWORD *)v57 = v51;
    *((_QWORD *)v57 + 1) = 0;
    v57[16] = 1;
    *(_QWORD *)&v55[OBJC_IVAR____SFXPCAsyncIterator_containerRegistry] = v52;
    swift_retain();
    v58 = (objc_class *)v51;

    if (v52)
    {
      v59 = sub_1A2AE36E8();
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56);
      v121 = v53;
      v61 = v124;
      v60(v124, 1, 1, v59);
      v120 = v58;
      v62 = v122;
      v56(v122, v24, v47);
      v63 = (*(unsigned __int8 *)(v48 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
      v64 = (v16 + v63 + 7) & 0xFFFFFFFFFFFFFFF8;
      v65 = (char *)swift_allocObject();
      *((_QWORD *)v65 + 2) = 0;
      *((_QWORD *)v65 + 3) = 0;
      *((_QWORD *)v65 + 4) = v52;
      v66 = v62;
      v58 = v120;
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(&v65[v63], v66, v47);
      v67 = &v65[v64];
      *(_QWORD *)v67 = 0xD000000000000012;
      *((_QWORD *)v67 + 1) = 0x80000001A2B45B50;
      swift_retain_n();
      v68 = v61;
      v53 = v121;
      sub_1A2974504(v68, (uint64_t)&unk_1EE67BAA0, (uint64_t)v65);
      swift_release();
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v48 + 8))(v24, v47);
    v130.receiver = v55;
    v130.super_class = v53;
    v69 = objc_msgSendSuper2(&v130, sel_init);

    swift_release();
    ((void (**)(_QWORD, id, _QWORD, _QWORD))v123)[2](v123, v69, 0, 0);
    goto LABEL_14;
  }
  v113 = v16;
  v29 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v27);
  swift_endAccess();
  v31 = *(void **)(a2 + OBJC_IVAR____SFXPCAsyncSequenceContainer_name);
  v30 = *(_QWORD *)(a2 + OBJC_IVAR____SFXPCAsyncSequenceContainer_name + 8);
  v32 = *(_QWORD *)(a2 + OBJC_IVAR____SFXPCAsyncSequenceContainer_containerRegistry);
  v112 = (Class)type metadata accessor for _SFXPCAsyncSequenceContainer(0);
  v33 = objc_allocWithZone(v112);
  swift_retain();
  v114 = v29;
  swift_retain();
  swift_bridgeObjectRetain();
  v34 = (char *)v33;
  sub_1A2AE3124();
  v35 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v35(&v34[OBJC_IVAR____SFXPCAsyncSequenceContainer_uuid], v20, v14);
  v36 = &v34[OBJC_IVAR____SFXPCAsyncSequenceContainer_name];
  v111 = v31;
  *(_QWORD *)v36 = v31;
  *((_QWORD *)v36 + 1) = v30;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v34[OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences] = sub_1A297876C(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v34[OBJC_IVAR____SFXPCAsyncSequenceContainer_containerRegistry] = v32;
  swift_retain();

  v110 = v35;
  if (v32)
  {
    v37 = sub_1A2AE36E8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v124, 1, 1, v37);
    v38 = v122;
    v35(v122, v20, v14);
    v39 = (*(unsigned __int8 *)(v15 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v40 = v14;
    v41 = v15;
    v42 = (v113 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    v43 = (char *)swift_allocObject();
    *((_QWORD *)v43 + 2) = 0;
    *((_QWORD *)v43 + 3) = 0;
    *((_QWORD *)v43 + 4) = v32;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(&v43[v39], v38, v40);
    v44 = &v43[v42];
    v15 = v41;
    v14 = v40;
    v45 = v112;
    v46 = (uint64_t)v111;
    *(_QWORD *)v44 = v111;
    *((_QWORD *)v44 + 1) = v30;
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_1A2974504(v124, (uint64_t)&unk_1EE67BAB0, (uint64_t)v43);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v109 = *(void (**)(char *, uint64_t))(v15 + 8);
    v109(v20, v14);
  }
  else
  {
    v109 = *(void (**)(char *, uint64_t))(v15 + 8);
    v109(v20, v14);
    swift_bridgeObjectRelease();
    v46 = (uint64_t)v111;
    v45 = v112;
  }
  v129.receiver = v34;
  v129.super_class = v45;
  v70 = objc_msgSendSuper2(&v129, sel_init);
  swift_release();
  v112 = (Class)type metadata accessor for _SFXPCBlockContainer();
  v71 = objc_allocWithZone(v112);
  swift_bridgeObjectRetain();
  swift_retain();
  v111 = sub_1A297B80C(v46, v30, v32);
  swift_release();
  sub_1A2AE2E30();
  swift_allocObject();
  v72 = sub_1A2AE2E24();
  v73 = v119;
  sub_1A2AE3C34();
  v74 = v118;
  v75 = *(uint64_t (**)(char *, uint64_t, objc_class *))(v118 + 48);
  v76 = v120;
  if (v75(v73, 1, v120) == 1)
  {
    _Block_release(v123);
    __break(1u);
  }
  else
  {
    v108 = v15;
    v77 = *(void (**)(char *, char *, objc_class *))(v74 + 32);
    v78 = (uint64_t)v116;
    v77(v116, v73, v76);
    v128 = v45;
    v127[0] = v70;
    v79 = (char *)v70;
    v80 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
    sub_1A29B3438((uint64_t)v127, v78);
    v80(v126, 0);
    v81 = v117;
    sub_1A2AE3C34();
    v82 = v75(v81, 1, v76);
    v83 = v76;
    v84 = v113;
    if (v82 != 1)
    {
      v85 = (uint64_t)v115;
      v77(v115, v81, v83);
      v128 = v112;
      v127[0] = v111;
      v86 = v111;
      v87 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
      sub_1A29B3438((uint64_t)v127, v85);
      v87(v126, 0);
      v88 = (*(uint64_t (**)(uint64_t))(v114 + 16))(v72);
      v90 = v89;
      v120 = (objc_class *)type metadata accessor for _SFXPCAsyncIterator(0);
      v91 = (char *)objc_allocWithZone(v120);
      *(_QWORD *)&v91[OBJC_IVAR____SFXPCAsyncIterator_currentTask] = 0;
      swift_retain();
      v92 = v91;
      v93 = v121;
      sub_1A2AE3124();
      v94 = v93;
      v95 = (void (*)(char *, objc_class *, uint64_t))v110;
      v110(&v92[OBJC_IVAR____SFXPCAsyncIterator_uuid], (char *)v94, v14);
      v96 = &v92[OBJC_IVAR____SFXPCAsyncIterator_iterator];
      *(_QWORD *)v96 = v88;
      *((_QWORD *)v96 + 1) = v90;
      v96[16] = 0;
      *(_QWORD *)&v92[OBJC_IVAR____SFXPCAsyncIterator_containerRegistry] = v32;
      swift_retain();
      swift_retain();

      if (v32)
      {
        v97 = sub_1A2AE36E8();
        v98 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56);
        v119 = v79;
        v98(v124, 1, 1, v97);
        v118 = v90;
        v99 = v122;
        v95(v122, v121, v14);
        v100 = v14;
        v101 = v108;
        v102 = (*(unsigned __int8 *)(v108 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
        v103 = v86;
        v104 = (v84 + v102 + 7) & 0xFFFFFFFFFFFFFFF8;
        v105 = (char *)swift_allocObject();
        *((_QWORD *)v105 + 2) = 0;
        *((_QWORD *)v105 + 3) = 0;
        *((_QWORD *)v105 + 4) = v32;
        v106 = *(void (**)(char *, char *, uint64_t))(v101 + 32);
        v14 = v100;
        v106(&v105[v102], v99, v100);
        v107 = &v105[v104];
        v86 = v103;
        *(_QWORD *)v107 = 0xD000000000000012;
        *((_QWORD *)v107 + 1) = 0x80000001A2B45B50;
        swift_retain_n();
        v79 = v119;
        sub_1A2974504(v124, (uint64_t)&unk_1EE67BAA8, (uint64_t)v105);
        swift_release();
        swift_release();
      }
      v109((char *)v121, v14);
      v125.receiver = v92;
      v125.super_class = v120;
      v69 = objc_msgSendSuper2(&v125, sel_init);
      swift_release();
      ((void (**)(_QWORD, id, char *, id))v123)[2](v123, v69, v79, v86);
      swift_release();

      swift_release();
      swift_release();
LABEL_14:

      return;
    }
  }
  _Block_release(v123);
  __break(1u);
}

uint64_t sub_1A29B9794()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_1A29B97B8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1A29B630C(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

id sub_1A29B97C0(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return a1;
  else
    return (id)swift_retain();
}

void sub_1A29B97D0(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_release();
}

uint64_t sub_1A29B97E0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A29B9804()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A29B9840()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t (*v8)(void);

  v2 = *(int **)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_1A2971EBC;
  *(_QWORD *)(v4 + 80) = v3;
  *(_OWORD *)(v4 + 64) = v5;
  v8 = (uint64_t (*)(void))((char *)v2 + *v2);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 88) = v6;
  *v6 = v4;
  v6[1] = sub_1A29B60DC;
  return v8();
}

uint64_t sub_1A29B98D8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1A29736C4(a1, a2);
  return a1;
}

uint64_t objectdestroy_11Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A2AE3130();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1A29B996C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1A29B9990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A2972038;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_1A29B99F0@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1A29B4C7C(a1, a2);
}

uint64_t sub_1A29B9A0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9;

  v4 = *(_QWORD *)(v1 + 32);
  v9 = *(_OWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = sub_1A2972038;
  *(_QWORD *)(v6 + 96) = v4;
  *(_OWORD *)(v6 + 80) = v7;
  *(_QWORD *)(v6 + 72) = v5;
  *(_OWORD *)(v6 + 56) = v9;
  *(_QWORD *)(v6 + 48) = a1;
  return swift_task_switch();
}

uint64_t sub_1A29B9AA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 64);
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v1 + 40);
  v9 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v7;
  *(_QWORD *)v7 = v2;
  *(_QWORD *)(v7 + 8) = sub_1A2971EBC;
  *(_QWORD *)(v7 + 72) = v4;
  *(_OWORD *)(v7 + 56) = v9;
  *(_QWORD *)(v7 + 40) = v5;
  *(_QWORD *)(v7 + 48) = v6;
  *(_OWORD *)(v7 + 24) = v8;
  *(_QWORD *)(v7 + 16) = a1;
  return swift_task_switch();
}

id sub_1A29B9B34()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_xpcCancel);
}

uint64_t objectdestroy_74Tm()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void sub_1A29B9B7C(void **a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1A29B54D4(a1, a2, v2[5], v2[6], v2[7], v2[2], v2[3], v2[4]);
}

uint64_t sub_1A29B9B9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_1A2AE39F4();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v1 = sub_1A2AE36AC();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1A29B9C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = v3[2];
  v8 = v3[3];
  v9 = v3[4];
  sub_1A2AE39F4();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A2AE36AC() - 8) + 80);
  return sub_1A29B5688(a1, a2, a3, v3[5], v3[6], v3[7], (uint64_t)v3 + ((v10 + 64) & ~v10), v7, v8, v9);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_1A29B9D18@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1A29B57C8(*(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2, *(_QWORD *)(v2 + 32), a1);
}

uint64_t sub_1A29B9D50()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A29B9D74()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A29B9DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1A29B4EF8(a1, a2, a3, v3[2], v3[3], v3[4]);
}

uint64_t sub_1A29B9DB4()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

void *sub_1A29B9E0C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[2];
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  return sub_1A29B7614(a1, (uint64_t)v1 + ((v3 + 48) & ~v3), v2, v1[3], v1[4], v1[5]);
}

uint64_t sub_1A29B9E2C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A29B9E58()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v7 = v0[6];
  v6 = v0[7];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_1A29B9ED0;
  return sub_1A29B771C(v7, v6, v2, v3, v4, v5);
}

uint64_t sub_1A29B9ED0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t sub_1A29B9F30()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A29B9F54(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1A2972038;
  return sub_1A29B3AB4(a1, v8, v4, v5, v6, v7, v9);
}

Sharing::SFBoopController::Service __swiftcall SFBoopController.Service.init(name:)(Sharing::SFBoopController::Service name)
{
  Sharing::SFBoopController::Service *v1;

  *v1 = name;
  return name;
}

uint64_t SFBoopController.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t SFBoopController.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t SFBoopController.send<A>(_:on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1A29BA03C()
{
  _QWORD *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char *v12;
  uint64_t (*v13)(void);
  char v15;

  v1 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v2 = (void *)sub_1A2AE340C();
  v3 = objc_msgSend(v1, sel_initWithSuiteName_, v2);

  if (!v3)
    goto LABEL_13;
  v4 = v3;
  v5 = (void *)sub_1A2AE340C();
  v6 = objc_msgSend(v4, sel_stringForKey_, v5);

  if (!v6)
  {
LABEL_12:

LABEL_13:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0[4] - 8) + 16))(v0[2], v0[3]);
    v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
  v7 = sub_1A2AE343C();
  v9 = v8;

  v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  if (!v10)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  if ((v7 != 0xD000000000000012 || v9 != 0x80000001A2B45DB0) && (sub_1A2AE3EE0() & 1) == 0)
  {
    if (v7 == 0x726566736E617274 && v9 == 0xEE0064656C696146 || (sub_1A2AE3EE0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v11 = 0;
      goto LABEL_10;
    }
    if (v7 == 0x74754F64656D6974 && v9 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_23:
      v11 = 2;
      goto LABEL_10;
    }
    v15 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_23;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  v11 = 1;
LABEL_10:
  sub_1A29BA2E4();
  swift_allocError();
  *v12 = v11;
  swift_willThrow();

  v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

unint64_t sub_1A29BA2E4()
{
  unint64_t result;

  result = qword_1EE67BB30;
  if (!qword_1EE67BB30)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFBoopControllerErrors, &type metadata for SFBoopControllerErrors);
    atomic_store(result, (unint64_t *)&qword_1EE67BB30);
  }
  return result;
}

uint64_t SFBoopController.register<A>(_:type:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[9] = a4;
  v5[10] = a5;
  v5[8] = a3;
  v5[11] = *(_QWORD *)(a5 - 8);
  v5[12] = swift_task_alloc();
  v6 = sub_1A2AE39F4();
  v5[13] = v6;
  v5[14] = *(_QWORD *)(v6 - 8);
  v5[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A29BA3B0()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  int *v4;

  v1 = *(int **)(v0 + 64);
  strcpy((char *)(v0 + 16), "John Appleseed");
  *(_BYTE *)(v0 + 31) = -18;
  *(_OWORD *)(v0 + 32) = xmmword_1A2AFD4C0;
  *(_QWORD *)(v0 + 48) = 0xD000000000000015;
  *(_QWORD *)(v0 + 56) = 0x80000001A2B45DD0;
  swift_dynamicCast();
  v4 = (int *)((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v2;
  *v2 = v0;
  v2[1] = sub_1A29BA480;
  return ((uint64_t (*)(_QWORD, _QWORD))v4)(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
}

uint64_t sub_1A29BA480()
{
  void *v0;
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)

  else
    (*(void (**)(_QWORD, _QWORD))(v2[11] + 8))(v2[12], v2[10]);
  return swift_task_switch();
}

uint64_t sub_1A29BA4F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(v1, 0, 1, *(_QWORD *)(v0 + 80));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29BA568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(v1, 1, 1, *(_QWORD *)(v0 + 80));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Contact.init(name:avatar:email:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t SFBoopController.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SFBoopController.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t Contact.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  sub_1A2AE3B20();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  sub_1A2973524(v1, v2);
  sub_1A2AE2F5C();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A29736C4(v1, v2);
  sub_1A2AE34F0();
  swift_bridgeObjectRetain();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  return 0x3A746361746E6F43;
}

uint64_t sub_1A29BA750()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x726174617661;
  if (*v0 != 1)
    v1 = 0x6C69616D65;
  if (*v0)
    return v1;
  else
    return 1701667182;
}

uint64_t sub_1A29BA79C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29BB1F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A29BA7C0()
{
  sub_1A29BA998();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29BA7E8()
{
  sub_1A29BA998();
  return sub_1A2AE4108();
}

uint64_t Contact.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BB40);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v12 = v1[3];
  v13 = v7;
  v8 = v1[4];
  v11[1] = v1[5];
  v11[2] = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29BA998();
  sub_1A2AE40E4();
  LOBYTE(v15) = 0;
  v9 = v14;
  sub_1A2AE3DF0();
  if (!v9)
  {
    v15 = v13;
    v16 = v12;
    v17 = 1;
    sub_1A29735F8();
    sub_1A2AE3E2C();
    LOBYTE(v15) = 2;
    sub_1A2AE3DF0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1A29BA998()
{
  unint64_t result;

  result = qword_1EE67BB48;
  if (!qword_1EE67BB48)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFD738, &type metadata for Contact.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BB48);
  }
  return result;
}

uint64_t Contact.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BB50);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29BA998();
  sub_1A2AE40C0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  LOBYTE(v24) = 0;
  v9 = sub_1A2AE3D3C();
  v11 = v10;
  v23 = v9;
  v26 = 1;
  sub_1A2973680();
  swift_bridgeObjectRetain();
  sub_1A2AE3D78();
  v12 = v24;
  LOBYTE(v24) = 2;
  v21 = v25;
  v22 = v12;
  sub_1A2973524(v12, v25);
  v13 = sub_1A2AE3D3C();
  v15 = v14;
  v16 = v13;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  v18 = v21;
  v17 = v22;
  sub_1A2973524(v22, v21);
  swift_bridgeObjectRetain();
  sub_1A29736C4(v17, v18);
  swift_bridgeObjectRelease();
  *a2 = v23;
  a2[1] = v11;
  a2[2] = v17;
  a2[3] = v18;
  a2[4] = v16;
  a2[5] = v15;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  sub_1A29736C4(v17, v18);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A29BAC54@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Contact.init(from:)(a1, a2);
}

uint64_t sub_1A29BAC68(_QWORD *a1)
{
  return Contact.encode(to:)(a1);
}

BOOL static SFBoopControllerErrors.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SFBoopControllerErrors.hash(into:)()
{
  return sub_1A2AE4018();
}

uint64_t SFBoopControllerErrors.hashValue.getter()
{
  sub_1A2AE400C();
  sub_1A2AE4018();
  return sub_1A2AE4030();
}

unint64_t sub_1A29BAD04()
{
  unint64_t result;

  result = qword_1EE67BB58;
  if (!qword_1EE67BB58)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFBoopControllerErrors, &type metadata for SFBoopControllerErrors);
    atomic_store(result, (unint64_t *)&qword_1EE67BB58);
  }
  return result;
}

uint64_t type metadata accessor for SFBoopController()
{
  return objc_opt_self();
}

uint64_t method lookup function for SFBoopController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SFBoopController.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

_QWORD *initializeBufferWithCopyOfBuffer for SFBoopController.Service(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SFBoopController.Service()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for SFBoopController.Service(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for SFBoopController.Service(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SFBoopController.Service(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SFBoopController.Service(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SFBoopController.Service()
{
  return &type metadata for SFBoopController.Service;
}

uint64_t destroy for Contact(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_1A29736C4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Contact(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  swift_bridgeObjectRetain();
  sub_1A2973524(v5, v6);
  a1[2] = v5;
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Contact(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[2];
  v5 = a2[3];
  sub_1A2973524(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  a1[2] = v4;
  a1[3] = v5;
  sub_1A29736C4(v6, v7);
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for Contact(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a1[2];
  v6 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_1A29736C4(v5, v6);
  v7 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Contact()
{
  return &type metadata for Contact;
}

ValueMetadata *type metadata accessor for SFBoopControllerErrors()
{
  return &type metadata for SFBoopControllerErrors;
}

uint64_t _s7Sharing22SFBoopControllerErrorsOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A29BB098 + 4 * byte_1A2AFD4D5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A29BB0CC + 4 * byte_1A2AFD4D0[v4]))();
}

uint64_t sub_1A29BB0CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29BB0D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A29BB0DCLL);
  return result;
}

uint64_t sub_1A29BB0E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A29BB0F0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A29BB0F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29BB0FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Contact.CodingKeys()
{
  return &type metadata for Contact.CodingKeys;
}

unint64_t sub_1A29BB11C()
{
  unint64_t result;

  result = qword_1EE67BB60;
  if (!qword_1EE67BB60)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFD710, &type metadata for Contact.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BB60);
  }
  return result;
}

unint64_t sub_1A29BB164()
{
  unint64_t result;

  result = qword_1EE67BB68;
  if (!qword_1EE67BB68)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFD680, &type metadata for Contact.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BB68);
  }
  return result;
}

unint64_t sub_1A29BB1AC()
{
  unint64_t result;

  result = qword_1EE67BB70;
  if (!qword_1EE67BB70)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFD6A8, &type metadata for Contact.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BB70);
  }
  return result;
}

uint64_t sub_1A29BB1F0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726174617661 && a2 == 0xE600000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C69616D65 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t Sequence.asyncMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;

  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  v6[9] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[10] = AssociatedTypeWitness;
  v6[11] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[12] = swift_task_alloc();
  sub_1A2AE39F4();
  v6[13] = swift_task_alloc();
  v6[14] = *(_QWORD *)(a3 - 8);
  v6[15] = swift_task_alloc();
  v9 = swift_getAssociatedTypeWitness();
  v6[16] = v9;
  v6[17] = *(_QWORD *)(v9 - 8);
  v6[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A29BB454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v10;
  _QWORD *v11;
  int *v12;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 16) = sub_1A2AE3340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v3, v4);
  sub_1A2AE3580();
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  swift_getAssociatedConformanceWitness();
  sub_1A2AE3A54();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
    v8 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
  }
  else
  {
    v10 = *(int **)(v0 + 24);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
    v12 = (int *)((char *)v10 + *v10);
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v11;
    *v11 = v0;
    v11[1] = sub_1A29BB5F0;
    return ((uint64_t (*)(_QWORD, _QWORD))v12)(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 96));
  }
}

uint64_t sub_1A29BB5F0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1A29BB65C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v9;
  _QWORD *v10;
  int *v11;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  sub_1A2AE3670();
  sub_1A2AE3658();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  swift_getAssociatedConformanceWitness();
  sub_1A2AE3A54();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
    v7 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
  }
  else
  {
    v9 = *(int **)(v0 + 24);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
    v11 = (int *)((char *)v9 + *v9);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v10;
    *v10 = v0;
    v10[1] = sub_1A29BB5F0;
    return ((uint64_t (*)(_QWORD, _QWORD))v11)(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 96));
  }
}

uint64_t sub_1A29BB7E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Sequence<>.coordinateRead(withSaveToTempDir:options:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;

  *(_QWORD *)(v5 + 136) = a4;
  *(_QWORD *)(v5 + 144) = v4;
  *(_QWORD *)(v5 + 120) = a2;
  *(_QWORD *)(v5 + 128) = a3;
  *(_BYTE *)(v5 + 288) = a1;
  v7 = sub_1A2AE2F44();
  *(_QWORD *)(v5 + 152) = v7;
  *(_QWORD *)(v5 + 160) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 168) = swift_task_alloc();
  *(_QWORD *)(v5 + 176) = swift_task_alloc();
  *(_QWORD *)(v5 + 184) = swift_task_alloc();
  *(_QWORD *)(v5 + 192) = swift_task_alloc();
  *(_QWORD *)(v5 + 200) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BB88);
  *(_QWORD *)(v5 + 208) = swift_task_alloc();
  *(_QWORD *)(v5 + 216) = *(_QWORD *)(a3 - 8);
  *(_QWORD *)(v5 + 224) = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v5 + 232) = AssociatedTypeWitness;
  *(_QWORD *)(v5 + 240) = *(_QWORD *)(AssociatedTypeWitness - 8);
  *(_QWORD *)(v5 + 248) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A29BB9AC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t, uint64_t);
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 16))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
  sub_1A2AE3580();
  v1 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    *(_QWORD *)(v0 + 256) = v1;
    v2 = *(_QWORD *)(v0 + 208);
    v3 = *(_QWORD *)(v0 + 152);
    v4 = *(_QWORD *)(v0 + 160);
    swift_getAssociatedConformanceWitness();
    sub_1A2AE3A54();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(unint64_t))(v0 + 8))(v1);
    }
    v6 = *(_QWORD *)(v0 + 200);
    v5 = *(_QWORD *)(v0 + 208);
    v7 = *(_QWORD *)(v0 + 152);
    v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 160) + 32);
    *(_QWORD *)(v0 + 264) = v8;
    v8(v6, v5, v7);
    if ((sub_1A2AE2ED8() & 1) != 0)
      break;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 16))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 152));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v1 = sub_1A296D2F4(0, *(_QWORD *)(v1 + 16) + 1, 1, v1);
    v10 = *(_QWORD *)(v1 + 16);
    v9 = *(_QWORD *)(v1 + 24);
    if (v10 >= v9 >> 1)
      v1 = sub_1A296D2F4(v9 > 1, v10 + 1, 1, v1);
    v12 = *(_QWORD *)(v0 + 160);
    v11 = *(_QWORD *)(v0 + 168);
    v13 = *(_QWORD *)(v0 + 152);
    *(_QWORD *)(v1 + 16) = v10 + 1;
    v8(v1+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v10, v11, v13);
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 152));
  }
  v15 = *(_QWORD *)(v0 + 184);
  v16 = *(_QWORD *)(v0 + 120);
  v17 = *(unsigned __int8 *)(v0 + 288);
  v18 = (void *)sub_1A2AE2F08();
  *(_QWORD *)(v0 + 272) = v18;
  *(_QWORD *)(v0 + 56) = v15;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1A29BBC74;
  v19 = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
  v20 = (_QWORD *)(v0 + 80);
  v20[1] = 0x40000000;
  v20[2] = sub_1A29BC128;
  v20[3] = &block_descriptor_1;
  v20[4] = v19;
  objc_msgSend(v18, sel_coordinateReadingWithSaveToTempDir_options_completionHandler_, v17, v16, v20);
  return swift_continuation_await();
}

uint64_t sub_1A29BBC74()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 280) = v1;
  if (v1)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1A29BBCDC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void (*v10)(unint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(unint64_t, uint64_t, uint64_t);
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;

  v1 = *(void **)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 264))(v2, *(_QWORD *)(v0 + 184), v4);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *(_QWORD *)(v0 + 256);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v7 = sub_1A296D2F4(0, *(_QWORD *)(v7 + 16) + 1, 1, *(_QWORD *)(v0 + 256));
  v9 = *(_QWORD *)(v7 + 16);
  v8 = *(_QWORD *)(v7 + 24);
  if (v9 >= v8 >> 1)
    v7 = sub_1A296D2F4(v8 > 1, v9 + 1, 1, v7);
  v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 264);
  v11 = *(_QWORD *)(v0 + 192);
  v12 = *(_QWORD *)(v0 + 176);
  v13 = *(_QWORD *)(v0 + 152);
  v14 = *(_QWORD *)(v0 + 160);
  *(_QWORD *)(v7 + 16) = v9 + 1;
  v10(v7+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v9, v12, v13);
  v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v15(v11, v13);
  v15(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 152));
  while (1)
  {
    *(_QWORD *)(v0 + 256) = v7;
    v16 = *(_QWORD *)(v0 + 208);
    v17 = *(_QWORD *)(v0 + 152);
    v18 = *(_QWORD *)(v0 + 160);
    swift_getAssociatedConformanceWitness();
    sub_1A2AE3A54();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(unint64_t))(v0 + 8))(v7);
    }
    v20 = *(_QWORD *)(v0 + 200);
    v19 = *(_QWORD *)(v0 + 208);
    v21 = *(_QWORD *)(v0 + 152);
    v22 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 160) + 32);
    *(_QWORD *)(v0 + 264) = v22;
    v22(v20, v19, v21);
    if ((sub_1A2AE2ED8() & 1) != 0)
      break;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 16))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 152));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = sub_1A296D2F4(0, *(_QWORD *)(v7 + 16) + 1, 1, v7);
    v24 = *(_QWORD *)(v7 + 16);
    v23 = *(_QWORD *)(v7 + 24);
    if (v24 >= v23 >> 1)
      v7 = sub_1A296D2F4(v23 > 1, v24 + 1, 1, v7);
    v26 = *(_QWORD *)(v0 + 160);
    v25 = *(_QWORD *)(v0 + 168);
    v27 = *(_QWORD *)(v0 + 152);
    *(_QWORD *)(v7 + 16) = v24 + 1;
    v22(v7+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v24, v25, v27);
    (*(void (**)(_QWORD, _QWORD))(v26 + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 152));
  }
  v29 = *(_QWORD *)(v0 + 184);
  v30 = *(_QWORD *)(v0 + 120);
  v31 = *(unsigned __int8 *)(v0 + 288);
  v32 = (void *)sub_1A2AE2F08();
  *(_QWORD *)(v0 + 272) = v32;
  *(_QWORD *)(v0 + 56) = v29;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1A29BBC74;
  v33 = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
  v34 = (_QWORD *)(v0 + 80);
  v34[1] = 0x40000000;
  v34[2] = sub_1A29BC128;
  v34[3] = &block_descriptor_1;
  v34[4] = v33;
  objc_msgSend(v32, sel_coordinateReadingWithSaveToTempDir_options_completionHandler_, v31, v30, v34);
  return swift_continuation_await();
}

uint64_t sub_1A29BC044()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 152);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29BC128(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v13;

  v5 = sub_1A2AE2F44();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    swift_allocError();
    *v10 = a3;
    v11 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    sub_1A2AE2F20();
    (*(void (**)(_QWORD, char *, uint64_t))(v6 + 32))(*(_QWORD *)(*(_QWORD *)(v9 + 64) + 40), v8, v5);
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1A29BC218(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    sub_1A29BE324(0, v1, 0);
    v2 = v11;
    v4 = *(_QWORD *)(type metadata accessor for SFSandboxTokenURLPair(0) - 8);
    v5 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = *v5;
      v9 = *(_QWORD *)(v11 + 16);
      v8 = *(_QWORD *)(v11 + 24);
      if (v9 >= v8 >> 1)
        sub_1A29BE324(v8 > 1, v9 + 1, 1);
      v5 = (uint64_t *)((char *)v5 + v6);
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(_QWORD *)(v11 + 8 * v9 + 32) = v7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1A29BC300(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = sub_1A2AE2F44();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    v16[1] = v1;
    v19 = MEMORY[0x1E0DEE9D8];
    sub_1A29BE340(0, v7, 0);
    v8 = v19;
    v9 = type metadata accessor for SFSandboxTokenURLPair(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v17 = *(_QWORD *)(v10 + 72);
    v18 = v9;
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    do
    {
      v12(v6, v11 + *(int *)(v18 + 20), v3);
      v19 = v8;
      v14 = *(_QWORD *)(v8 + 16);
      v13 = *(_QWORD *)(v8 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_1A29BE340(v13 > 1, v14 + 1, 1);
        v8 = v19;
      }
      *(_QWORD *)(v8 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v14, v6, v3);
      v11 += v17;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_1A29BC470(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  void (*v24)(char *, _QWORD);
  void (*v25)(char *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43[32];
  uint64_t v44;

  v30 = a5;
  v31 = a8;
  v38 = a1;
  v39 = a2;
  v29 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v40 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v29 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v17 - 8);
  v33 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v29 - v18;
  v20 = sub_1A2AE388C();
  if (!v20)
    return sub_1A2AE3640();
  v36 = AssociatedTypeWitness;
  v21 = v20;
  v44 = sub_1A2AE3340();
  v34 = sub_1A2AE3BBC();
  sub_1A2AE3B98();
  v37 = v8;
  result = sub_1A2AE3880();
  if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21;
    v35 = v16;
    while (v23)
    {
      v41 = v23;
      v24 = (void (*)(char *, _QWORD))sub_1A2AE391C();
      v25 = *(void (**)(char *))(v11 + 16);
      v26 = v11;
      v27 = v36;
      v25(v14);
      v24(v43, 0);
      v28 = v42;
      v38(v14, v40);
      if (v28)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v31, v40, v30);
      }
      v42 = 0;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
      sub_1A2AE3BA4();
      result = sub_1A2AE38B0();
      v23 = v41 - 1;
      v11 = v26;
      if (v41 == 1)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        return v44;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A29BC760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1A2AE31D8();
  __swift_allocate_value_buffer(v0, qword_1EE67BB90);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EE67BB90);
  if (qword_1EE676030 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_1EE676010);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t SFSecurityScopedURL.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1A2AE2F44();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t SFSecurityScopedURL.sandboxToken.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SFSecurityScopedURL(0) + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for SFSecurityScopedURL(uint64_t a1)
{
  return sub_1A29903E0(a1, qword_1EE674818);
}

uint64_t SFSecurityScopedURL.init(_:readWrite:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v5 = sub_1A2AE2F44();
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, a1, v5);
  v7 = sub_1A29BEC18(a1);
  if (v2)
  {
    v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v9(a1, v5);
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(a2, v5);
  }
  else
  {
    v11 = v7;
    v12 = v8;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    result = type metadata accessor for SFSecurityScopedURL(0);
    v13 = (uint64_t *)(a2 + *(int *)(result + 20));
    *v13 = v11;
    v13[1] = v12;
  }
  return result;
}

uint64_t static SFSecurityScopedURL.consumeSandboxToken(item:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  int v32;

  v4 = sub_1A2AE3460();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_1A2AE2ED8() & 1) == 0)
  {
    type metadata accessor for SFAirDropSend.Failure();
    sub_1A296E8A4(&qword_1EE67BBA8, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  v8 = (unint64_t *)(a1 + *(int *)(type metadata accessor for SFSecurityScopedURL(0) + 20));
  v9 = *v8;
  v10 = v8[1];
  v30 = 0;
  v31 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  sub_1A2AE3BF8();
  sub_1A2AE34F0();
  v11 = v31;
  if (!v10)
  {
    v22 = v30;
    sub_1A297AFB8();
    swift_allocError();
    *(_QWORD *)v23 = v22;
    *(_QWORD *)(v23 + 8) = v11;
    *(_QWORD *)(v23 + 16) = 0xD000000000000051;
    *(_QWORD *)(v23 + 24) = 0x80000001A2B45E30;
    v24 = 45;
LABEL_9:
    *(_QWORD *)(v23 + 32) = v24;
    *(_OWORD *)(v23 + 40) = 0u;
    *(_OWORD *)(v23 + 56) = 0u;
    *(_QWORD *)(v23 + 72) = 0;
    *(_QWORD *)(v23 + 80) = 0x2000000000000000;
    *(_QWORD *)(v23 + 88) = 0;
    *(_QWORD *)(v23 + 96) = 0;
    return swift_willThrow();
  }
  v29 = a2;
  swift_bridgeObjectRelease();
  v30 = v9;
  v31 = v10;
  sub_1A2AE3454();
  sub_1A29BF0B0();
  v12 = sub_1A2AE3A84();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v30 = v9;
  v31 = v10;
  sub_1A2AE34F0();
  v13 = v31;
  if (!v12)
  {
    v25 = v30;
    sub_1A297AFB8();
    swift_allocError();
    *(_QWORD *)v23 = v25;
    *(_QWORD *)(v23 + 8) = v13;
    *(_QWORD *)(v23 + 16) = 0xD000000000000051;
    *(_QWORD *)(v23 + 24) = 0x80000001A2B45E30;
    v24 = 46;
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  v14 = sandbox_extension_consume();
  swift_bridgeObjectRelease();
  v30 = 0;
  v31 = 0xE000000000000000;
  sub_1A2AE3B20();
  v15 = swift_bridgeObjectRelease();
  v30 = 0xD00000000000001ELL;
  v31 = 0x80000001A2B45E90;
  v32 = MEMORY[0x1A8586898](v15);
  sub_1A2AE3E5C();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  v16 = v31;
  if ((v14 & 0x8000000000000000) == 0)
  {
    swift_bridgeObjectRelease();
    v17 = type metadata accessor for SFSandboxTokenURLPair(0);
    v18 = v29;
    v19 = (char *)v29 + *(int *)(v17 + 20);
    v20 = sub_1A2AE2F44();
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v19, a1, v20);
    *v18 = v14;
    return result;
  }
  v26 = v30;
  sub_1A297AFB8();
  swift_allocError();
  *(_QWORD *)v27 = v26;
  *(_QWORD *)(v27 + 8) = v16;
  *(_OWORD *)(v27 + 16) = xmmword_1A2AFD790;
  *(_QWORD *)(v27 + 32) = 0x80000001A2B45E30;
  *(_QWORD *)(v27 + 40) = 49;
  *(_OWORD *)(v27 + 48) = 0u;
  *(_OWORD *)(v27 + 64) = 0u;
  *(_QWORD *)(v27 + 88) = 0;
  *(_QWORD *)(v27 + 96) = 0;
  *(_QWORD *)(v27 + 80) = 0x8000000000000000;
  return swift_willThrow();
}

uint64_t SFSandboxTokenURLPair.init(token:url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  uint64_t v5;

  *a3 = a1;
  v4 = (char *)a3 + *(int *)(type metadata accessor for SFSandboxTokenURLPair(0) + 20);
  v5 = sub_1A2AE2F44();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t static SFSecurityScopedURL.withAccess<A>(to:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v4[9] = *(_QWORD *)(type metadata accessor for SFSandboxTokenURLPair(0) - 8);
  v4[10] = swift_task_alloc();
  v5 = sub_1A2AE2F44();
  v4[11] = v5;
  v4[12] = *(_QWORD *)(v5 - 8);
  v4[13] = swift_task_alloc();
  v4[14] = *(_QWORD *)(type metadata accessor for SFSecurityScopedURL(0) - 8);
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A29BCE2C()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  int *v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  _QWORD *v48;
  int64_t v49;
  int *v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = MEMORY[0x1E0DEE9D8];
  v52 = MEMORY[0x1E0DEE9D8];
  v2 = *(_QWORD *)(v0[6] + 16);
  v3 = swift_bridgeObjectRetain();
  v49 = v2;
  if (v2)
  {
    v4 = v0[14];
    v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v6 = *(_QWORD *)(v4 + 72);
    v7 = v3 + v5;
    v8 = MEMORY[0x1E0DEE9D8];
    do
    {
      sub_1A29BF108(v7, v0[18]);
      v9 = sub_1A2AE2ED8();
      v10 = v0[18];
      if ((v9 & 1) != 0)
      {
        sub_1A29BF14C(v10);
      }
      else
      {
        sub_1A297EB48(v10, v0[17], type metadata accessor for SFSecurityScopedURL);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1A29BE398(0, *(_QWORD *)(v8 + 16) + 1, 1);
          v8 = v52;
        }
        v12 = *(_QWORD *)(v8 + 16);
        v11 = *(_QWORD *)(v8 + 24);
        if (v12 >= v11 >> 1)
        {
          sub_1A29BE398(v11 > 1, v12 + 1, 1);
          v8 = v52;
        }
        v13 = v0[17];
        *(_QWORD *)(v8 + 16) = v12 + 1;
        sub_1A297EB48(v13, v8 + v5 + v12 * v6, type metadata accessor for SFSecurityScopedURL);
      }
      v7 += v6;
      --v2;
    }
    while (v2);
    v1 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v8 = v1;
  }
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(v8 + 16);
  if (v14)
  {
    v15 = v0[14];
    v16 = v0[12];
    v53 = v1;
    sub_1A29BE340(0, v14, 0);
    v17 = v8 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v18 = *(_QWORD *)(v15 + 72);
    v19 = v1;
    do
    {
      v20 = v0[16];
      v21 = v0[13];
      v22 = v0[11];
      sub_1A29BF108(v17, v20);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v21, v20, v22);
      sub_1A29BF14C(v20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1A29BE340(0, *(_QWORD *)(v19 + 16) + 1, 1);
        v19 = v53;
      }
      v24 = *(_QWORD *)(v19 + 16);
      v23 = *(_QWORD *)(v19 + 24);
      if (v24 >= v23 >> 1)
      {
        sub_1A29BE340(v23 > 1, v24 + 1, 1);
        v19 = v53;
      }
      v25 = v0[13];
      v26 = v0[11];
      *(_QWORD *)(v19 + 16) = v24 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 32))(v19+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v24, v25, v26);
      v53 = v19;
      v17 += v18;
      --v14;
    }
    while (v14);
    swift_release();
  }
  else
  {
    swift_release();
    v19 = MEMORY[0x1E0DEE9D8];
  }
  v0[19] = v19;
  v27 = v49;
  if (*(_QWORD *)(v19 + 16))
  {
    if (qword_1EE67AA28 != -1)
      swift_once();
    v28 = sub_1A2AE31D8();
    __swift_project_value_buffer(v28, (uint64_t)qword_1EE67BB90);
    v29 = sub_1A2AE31C0();
    v30 = sub_1A2AE3964();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_1A2830000, v29, v30, "Non fileURL detected, skipping sandbox tokens", v31, 2u);
      MEMORY[0x1A85896E8](v31, -1, -1);
    }
    v32 = (int *)v0[7];

    v50 = (int *)((char *)v32 + *v32);
    v33 = (_QWORD *)swift_task_alloc();
    v0[20] = v33;
    *v33 = v0;
    v33[1] = sub_1A29BD388;
    return ((uint64_t (*)(_QWORD, uint64_t))v50)(v0[5], v19);
  }
  else
  {
    swift_bridgeObjectRelease();
    v35 = MEMORY[0x1E0DEE9D8];
    if (v49)
    {
      v36 = v0[14];
      v37 = v0[9];
      v38 = v0[6];
      v54 = MEMORY[0x1E0DEE9D8];
      sub_1A29BE36C(0, v49, 0);
      v39 = v38 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
      v40 = *(_QWORD *)(v36 + 72);
      do
      {
        v41 = v0[15];
        v42 = (uint64_t *)v0[10];
        sub_1A29BF108(v39, v41);
        static SFSecurityScopedURL.consumeSandboxToken(item:)(v41, v42);
        sub_1A29BF14C(v0[15]);
        v35 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1A29BE36C(0, *(_QWORD *)(v54 + 16) + 1, 1);
          v35 = v54;
        }
        v44 = *(_QWORD *)(v35 + 16);
        v43 = *(_QWORD *)(v35 + 24);
        if (v44 >= v43 >> 1)
        {
          sub_1A29BE36C(v43 > 1, v44 + 1, 1);
          v35 = v54;
        }
        v45 = v0[10];
        *(_QWORD *)(v35 + 16) = v44 + 1;
        sub_1A297EB48(v45, v35+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v37 + 72) * v44, type metadata accessor for SFSandboxTokenURLPair);
        v39 += v40;
        --v27;
      }
      while (v27);
    }
    v0[22] = v35;
    v46 = (int *)v0[7];
    v47 = sub_1A29BC300(v35);
    v0[23] = v47;
    v51 = (int *)((char *)v46 + *v46);
    v48 = (_QWORD *)swift_task_alloc();
    v0[24] = v48;
    *v48 = v0;
    v48[1] = sub_1A29BD46C;
    return ((uint64_t (*)(_QWORD, uint64_t))v51)(v0[5], v47);
  }
}

uint64_t sub_1A29BD388()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A29BD3EC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29BD46C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1A29BD4D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_1A29BC218(*(_QWORD *)(v0 + 176));
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 32;
    do
    {
      v3 += 8;
      sandbox_extension_release();
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29BD594()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29BD614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 176);
  swift_bridgeObjectRelease();
  v2 = sub_1A29BC218(v1);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = v2 + 32;
    do
    {
      v4 += 8;
      sandbox_extension_release();
      --v3;
    }
    while (v3);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29BD6E8()
{
  _BYTE *v0;

  if (*v0)
    return 0x54786F62646E6173;
  else
    return 7107189;
}

uint64_t sub_1A29BD724@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29BFBFC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A29BD748()
{
  sub_1A29BF188();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29BD770()
{
  sub_1A29BF188();
  return sub_1A2AE4108();
}

uint64_t SFSecurityScopedURL.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BBC0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29BF188();
  sub_1A2AE40E4();
  v8[15] = 0;
  sub_1A2AE2F44();
  sub_1A296E8A4(&qword_1EE67B530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
  sub_1A2AE3E2C();
  if (!v1)
  {
    type metadata accessor for SFSecurityScopedURL(0);
    v8[14] = 1;
    sub_1A2AE3DC0();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t SFSecurityScopedURL.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  char v29;

  v23 = a2;
  v26 = sub_1A2AE2F44();
  v24 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v27 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BBD0);
  v5 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SFSecurityScopedURL(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29BF188();
  sub_1A2AE40C0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  v21 = a1;
  v22 = v5;
  v11 = (uint64_t)v10;
  v12 = v24;
  v29 = 0;
  sub_1A296E8A4(&qword_1EE67B6C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0038]);
  v13 = v26;
  v14 = v25;
  sub_1A2AE3D78();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v27, v13);
  v28 = 1;
  v15 = sub_1A2AE3D00();
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v14);
  v18 = (uint64_t *)(v11 + *(int *)(v8 + 20));
  *v18 = v15;
  v18[1] = v17;
  sub_1A29BF108(v11, v23);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v21);
  return sub_1A29BF14C(v11);
}

uint64_t sub_1A29BDB64@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFSecurityScopedURL.init(from:)(a1, a2);
}

uint64_t sub_1A29BDB78(_QWORD *a1)
{
  return SFSecurityScopedURL.encode(to:)(a1);
}

uint64_t SFSandboxTokenURLPair.token.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t SFSandboxTokenURLPair.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SFSandboxTokenURLPair(0) + 20);
  v4 = sub_1A2AE2F44();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

Swift::Void __swiftcall SFSandboxTokenURLPair.releaseSandboxExtension()()
{
  sandbox_extension_release();
}

uint64_t static SFSandboxTokenURLPair.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2)
  {
    type metadata accessor for SFSandboxTokenURLPair(0);
    JUMPOUT(0x1A85865BCLL);
  }
  return 0;
}

uint64_t sub_1A29BDC3C()
{
  _BYTE *v0;

  if (*v0)
    return 7107189;
  else
    return 0x6E656B6F74;
}

uint64_t sub_1A29BDC6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29BFCF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A29BDC90()
{
  sub_1A29BF1CC();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29BDCB8()
{
  sub_1A29BF1CC();
  return sub_1A2AE4108();
}

uint64_t SFSandboxTokenURLPair.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BBD8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29BF1CC();
  sub_1A2AE40E4();
  v8[15] = 0;
  sub_1A2AE3E38();
  if (!v1)
  {
    type metadata accessor for SFSandboxTokenURLPair(0);
    v8[14] = 1;
    sub_1A2AE2F44();
    sub_1A296E8A4(&qword_1EE67B530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
    sub_1A2AE3E2C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t SFSandboxTokenURLPair.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;

  v22 = a2;
  v25 = sub_1A2AE2F44();
  v23 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v24 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BBE8);
  v5 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SFSandboxTokenURLPair(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (uint64_t *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29BF1CC();
  sub_1A2AE40C0();
  if (!v2)
  {
    v21 = v8;
    v12 = v24;
    v11 = v25;
    v28 = 0;
    v13 = v26;
    v14 = sub_1A2AE3D84();
    v20 = v10;
    *v10 = v14;
    v27 = 1;
    sub_1A296E8A4(&qword_1EE67B6C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0038]);
    v15 = v11;
    sub_1A2AE3D78();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v13);
    v16 = v22;
    v17 = (uint64_t)v20;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))((char *)v20 + *(int *)(v21 + 20), v12, v15);
    sub_1A297EB48(v17, v16, type metadata accessor for SFSandboxTokenURLPair);
  }
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
}

uint64_t sub_1A29BE068@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFSandboxTokenURLPair.init(from:)(a1, a2);
}

uint64_t sub_1A29BE07C(_QWORD *a1)
{
  return SFSandboxTokenURLPair.encode(to:)(a1);
}

uint64_t sub_1A29BE090(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2)
    JUMPOUT(0x1A85865BCLL);
  return 0;
}

uint64_t RandomAccessCollection<>.urls.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1A2AE2F44();
  return sub_1A29BC470((void (*)(char *, char *))sub_1A29BE124, 0, a1, v4, MEMORY[0x1E0DEDCE8], *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), MEMORY[0x1E0DEDD18], v5);
}

uint64_t sub_1A29BE124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_1A2AE2F44();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t RandomAccessCollection<>.securityScopedURLs.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for SFSecurityScopedURL(0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  return sub_1A29BC470((void (*)(char *, char *))sub_1A29BE1FC, 0, a1, v4, v5, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), MEMORY[0x1E0DEDB38], (uint64_t)&v7);
}

uint64_t sub_1A29BE1FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v7 = sub_1A2AE2F44();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v11(v10, a1, v7);
  v11(a3, (uint64_t)v10, v7);
  v12 = sub_1A29BEC18((uint64_t)v10);
  if (v3)
  {
    v14 = *(void (**)(char *, uint64_t))(v8 + 8);
    v14(v10, v7);
    result = ((uint64_t (*)(char *, uint64_t))v14)(a3, v7);
    *a2 = v3;
  }
  else
  {
    v16 = v12;
    v17 = v13;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    result = type metadata accessor for SFSecurityScopedURL(0);
    v18 = (uint64_t *)&a3[*(int *)(result + 20)];
    *v18 = v16;
    v18[1] = v17;
  }
  return result;
}

uint64_t sub_1A29BE308(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1A29BE3FC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1A29BE324(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1A29BE564(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1A29BE340(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1A29BE6C0(a1, a2, a3, (_QWORD *)*v3, &qword_1EE67AF90, (uint64_t (*)(_QWORD))MEMORY[0x1E0CAFFF8]);
  *v3 = result;
  return result;
}

uint64_t sub_1A29BE36C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1A29BE6C0(a1, a2, a3, (_QWORD *)*v3, &qword_1EE67BC40, type metadata accessor for SFSandboxTokenURLPair);
  *v3 = result;
  return result;
}

uint64_t sub_1A29BE398(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1A29BE6C0(a1, a2, a3, (_QWORD *)*v3, &qword_1EE67BC48, type metadata accessor for SFSecurityScopedURL);
  *v3 = result;
  return result;
}

uint64_t sub_1A29BE3C4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1A29BE8A0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1A29BE3E0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1A29BEA18(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1A29BE3FC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6763F0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1A2AE3C88();
  __break(1u);
  return result;
}

uint64_t sub_1A29BE564(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BC38);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1A2AE3C88();
  __break(1u);
  return result;
}

uint64_t sub_1A29BE6C0(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_1A2AE3C88();
  __break(1u);
  return result;
}

uint64_t sub_1A29BE8A0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BC30);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 120);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 120 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1A2AE3C88();
  __break(1u);
  return result;
}

uint64_t sub_1A29BEA18(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67AF78);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1A2AE3C88();
  __break(1u);
  return result;
}

uint64_t _s7Sharing19SFSecurityScopedURLV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;

  if ((MEMORY[0x1A85865BC]() & 1) != 0)
  {
    v4 = *(int *)(type metadata accessor for SFSecurityScopedURL(0) + 20);
    v5 = (_QWORD *)(a1 + v4);
    v6 = *(_QWORD *)(a1 + v4 + 8);
    v7 = (_QWORD *)(a2 + v4);
    v8 = v7[1];
    if (v6)
    {
      if (v8)
      {
        v9 = *v5 == *v7 && v6 == v8;
        if (v9 || (sub_1A2AE3EE0() & 1) != 0)
          return 1;
      }
    }
    else if (!v8)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1A29BEC18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  const __CFURL *v8;
  CFStringRef v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD v24[2];
  uint64_t v25;
  void *v26;
  __CFString *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v3 = sub_1A2AE2F44();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = 0;
  if ((sub_1A2AE2ED8() & 1) != 0)
  {
    v28 = v1;
    v8 = (const __CFURL *)sub_1A2AE2F08();
    v9 = CFURLCopyFileSystemPath(v8, kCFURLPOSIXPathStyle);

    v29 = 0;
    v30 = 0xE000000000000000;
    sub_1A2AE3B20();
    swift_bridgeObjectRelease();
    v29 = 0xD000000000000022;
    v30 = 0x80000001A2B45EB0;
    sub_1A296E8A4((unint64_t *)&qword_1EE67BC50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
    sub_1A2AE3E5C();
    sub_1A2AE34F0();
    swift_bridgeObjectRelease();
    v7 = v30;
    if (v9)
    {
      swift_bridgeObjectRelease();
      sub_1A2AE343C();
      sub_1A2AE3490();
      v27 = (__CFString *)v9;
      swift_bridgeObjectRelease();
      v10 = sandbox_extension_issue_file();
      swift_release();
      v29 = 0;
      v30 = 0xE000000000000000;
      sub_1A2AE3B20();
      swift_bridgeObjectRelease();
      v29 = 0xD000000000000026;
      v30 = 0x80000001A2B45F10;
      sub_1A2AE3E5C();
      sub_1A2AE34F0();
      swift_bridgeObjectRelease();
      v7 = v30;
      v26 = (void *)v10;
      if (v10)
      {
        swift_bridgeObjectRelease();
        if (qword_1EE67AA28 != -1)
          swift_once();
        v11 = sub_1A2AE31D8();
        __swift_project_value_buffer(v11, (uint64_t)qword_1EE67BB90);
        (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
        v12 = sub_1A2AE31C0();
        v13 = sub_1A2AE3964();
        if (os_log_type_enabled(v12, v13))
        {
          v14 = (uint8_t *)swift_slowAlloc();
          v25 = swift_slowAlloc();
          v29 = v25;
          *(_DWORD *)v14 = 136315138;
          v24[1] = v14 + 4;
          v15 = sub_1A2AE3E5C();
          v31 = sub_1A296DA00(v15, v16, &v29);
          sub_1A2AE3A60();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
          _os_log_impl(&dword_1A2830000, v12, v13, "Issued sandbox token for url %s", v14, 0xCu);
          v17 = v25;
          swift_arrayDestroy();
          MEMORY[0x1A85896E8](v17, -1, -1);
          MEMORY[0x1A85896E8](v14, -1, -1);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        }

        v22 = v26;
        v7 = sub_1A2AE3400();
        free(v22);

      }
      else
      {
        v20 = v29;
        sub_1A297AFB8();
        swift_allocError();
        *(_QWORD *)v21 = v20;
        *(_QWORD *)(v21 + 8) = v7;
        *(_QWORD *)(v21 + 16) = 0xD000000000000051;
        *(_QWORD *)(v21 + 24) = 0x80000001A2B45E30;
        *(_QWORD *)(v21 + 32) = 36;
        *(_OWORD *)(v21 + 40) = 0u;
        *(_OWORD *)(v21 + 56) = 0u;
        *(_QWORD *)(v21 + 72) = 0;
        *(_QWORD *)(v21 + 80) = 0x2000000000000000;
        *(_QWORD *)(v21 + 88) = 0;
        *(_QWORD *)(v21 + 96) = 0;
        swift_bridgeObjectRetain();
        swift_willThrow();
        swift_bridgeObjectRelease();

      }
    }
    else
    {
      v18 = v29;
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v19 = v18;
      *(_QWORD *)(v19 + 8) = v7;
      *(_QWORD *)(v19 + 16) = 0xD000000000000051;
      *(_QWORD *)(v19 + 24) = 0x80000001A2B45E30;
      *(_QWORD *)(v19 + 32) = 35;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_QWORD *)(v19 + 72) = 0;
      *(_QWORD *)(v19 + 80) = 0x2000000000000000;
      *(_QWORD *)(v19 + 88) = 0;
      *(_QWORD *)(v19 + 96) = 0;
      swift_willThrow();
    }
  }
  return v7;
}

unint64_t sub_1A29BF0B0()
{
  unint64_t result;

  result = qword_1EE67BBB0;
  if (!qword_1EE67BBB0)
  {
    result = MEMORY[0x1A85895EC](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EE67BBB0);
  }
  return result;
}

uint64_t type metadata accessor for SFSandboxTokenURLPair(uint64_t a1)
{
  return sub_1A29903E0(a1, (uint64_t *)&unk_1EE67BBF0);
}

uint64_t sub_1A29BF108(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SFSecurityScopedURL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A29BF14C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SFSecurityScopedURL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1A29BF188()
{
  unint64_t result;

  result = qword_1EE67BBC8;
  if (!qword_1EE67BBC8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFDAE4, &type metadata for SFSecurityScopedURL.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BBC8);
  }
  return result;
}

unint64_t sub_1A29BF1CC()
{
  unint64_t result;

  result = qword_1EE67BBE0;
  if (!qword_1EE67BBE0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFDA94, &type metadata for SFSandboxTokenURLPair.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BBE0);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SFSecurityScopedURL(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1A2AE2F44();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SFSecurityScopedURL(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A2AE2F44();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SFSecurityScopedURL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = sub_1A2AE2F44();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SFSecurityScopedURL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = sub_1A2AE2F44();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for SFSecurityScopedURL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1A2AE2F44();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for SFSecurityScopedURL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1A2AE2F44();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SFSecurityScopedURL()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A29BF4A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_1A2AE2F44();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for SFSecurityScopedURL()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A29BF53C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1A2AE2F44();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t sub_1A29BF5B8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A2AE2F44();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SFSandboxTokenURLPair(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_1A2AE2F44();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for SFSandboxTokenURLPair(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_1A2AE2F44();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *initializeWithCopy for SFSandboxTokenURLPair(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1A2AE2F44();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for SFSandboxTokenURLPair(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1A2AE2F44();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *initializeWithTake for SFSandboxTokenURLPair(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1A2AE2F44();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for SFSandboxTokenURLPair(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1A2AE2F44();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SFSandboxTokenURLPair()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A29BF864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = sub_1A2AE2F44();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for SFSandboxTokenURLPair()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A29BF8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = sub_1A2AE2F44();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_1A29BF8F4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A2AE2F44();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SFSandboxTokenURLPair.CodingKeys()
{
  return &type metadata for SFSandboxTokenURLPair.CodingKeys;
}

uint64_t _s7Sharing21SFSandboxTokenURLPairV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A29BF9CC + 4 * byte_1A2AFD7A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A29BFA00 + 4 * byte_1A2AFD7A0[v4]))();
}

uint64_t sub_1A29BFA00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29BFA08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A29BFA10);
  return result;
}

uint64_t sub_1A29BFA1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A29BFA24);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A29BFA28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29BFA30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SFSecurityScopedURL.CodingKeys()
{
  return &type metadata for SFSecurityScopedURL.CodingKeys;
}

unint64_t sub_1A29BFA50()
{
  unint64_t result;

  result = qword_1EE67BC00;
  if (!qword_1EE67BC00)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFD9B4, &type metadata for SFSecurityScopedURL.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BC00);
  }
  return result;
}

unint64_t sub_1A29BFA98()
{
  unint64_t result;

  result = qword_1EE67BC08;
  if (!qword_1EE67BC08)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFDA6C, &type metadata for SFSandboxTokenURLPair.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BC08);
  }
  return result;
}

unint64_t sub_1A29BFAE0()
{
  unint64_t result;

  result = qword_1EE67BC10;
  if (!qword_1EE67BC10)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFD9DC, &type metadata for SFSandboxTokenURLPair.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BC10);
  }
  return result;
}

unint64_t sub_1A29BFB28()
{
  unint64_t result;

  result = qword_1EE67BC18;
  if (!qword_1EE67BC18)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFDA04, &type metadata for SFSandboxTokenURLPair.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BC18);
  }
  return result;
}

unint64_t sub_1A29BFB70()
{
  unint64_t result;

  result = qword_1EE67BC20;
  if (!qword_1EE67BC20)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFD924, &type metadata for SFSecurityScopedURL.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BC20);
  }
  return result;
}

unint64_t sub_1A29BFBB8()
{
  unint64_t result;

  result = qword_1EE67BC28;
  if (!qword_1EE67BC28)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFD94C, &type metadata for SFSecurityScopedURL.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BC28);
  }
  return result;
}

uint64_t sub_1A29BFBFC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7107189 && a2 == 0xE300000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x54786F62646E6173 && a2 == 0xEC0000006E656B6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A29BFCF4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E656B6F74 && a2 == 0xE500000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A29BFDCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1A2AE31D8();
  __swift_allocate_value_buffer(v0, qword_1EE67BC58);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EE67BC58);
  if (qword_1EE67AA50 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_1EE67CA80);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t DeviceLockState.description.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x656B636F6C6E752ELL;
  else
    return 0x64656B636F6C2ELL;
}

BOOL static DeviceLockState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t DeviceLockState.hash(into:)()
{
  return sub_1A2AE4018();
}

uint64_t sub_1A29BFEDC()
{
  _BYTE *v0;

  if (*v0)
    return 0x64656B636F6C6E75;
  else
    return 0x64656B636F6CLL;
}

uint64_t sub_1A29BFF14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29C1260(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A29BFF38()
{
  sub_1A29C01FC();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29BFF60()
{
  sub_1A29C01FC();
  return sub_1A2AE4108();
}

uint64_t sub_1A29BFF88()
{
  sub_1A29C0284();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29BFFB0()
{
  sub_1A29C0284();
  return sub_1A2AE4108();
}

uint64_t sub_1A29BFFD8()
{
  sub_1A29C0240();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29C0000()
{
  sub_1A29C0240();
  return sub_1A2AE4108();
}

uint64_t DeviceLockState.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BC70);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BC78);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BC80);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29C01FC();
  sub_1A2AE40E4();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_1A29C0240();
    sub_1A2AE3DB4();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_1A29C0284();
    sub_1A2AE3DB4();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t sub_1A29C01FC()
{
  unint64_t result;

  result = qword_1EE67BC88;
  if (!qword_1EE67BC88)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFDEFC, &type metadata for DeviceLockState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BC88);
  }
  return result;
}

unint64_t sub_1A29C0240()
{
  unint64_t result;

  result = qword_1EE67BC90;
  if (!qword_1EE67BC90)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFDEAC, &type metadata for DeviceLockState.UnlockedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BC90);
  }
  return result;
}

unint64_t sub_1A29C0284()
{
  unint64_t result;

  result = qword_1EE67BC98;
  if (!qword_1EE67BC98)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFDE5C, &type metadata for DeviceLockState.LockedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BC98);
  }
  return result;
}

uint64_t DeviceLockState.hashValue.getter()
{
  sub_1A2AE400C();
  sub_1A2AE4018();
  return sub_1A2AE4030();
}

uint64_t DeviceLockState.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BCA0);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BCA8);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BCB0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29C01FC();
  v11 = v33;
  sub_1A2AE40C0();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_1A2AE3D9C();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_1A2AE3B5C();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE67AC00);
    *v21 = &type metadata for DeviceLockState;
    sub_1A2AE3CF4();
    sub_1A2AE3B50();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC450], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_0Tm(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_1A29C0240();
    sub_1A2AE3CE8();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_1A29C0284();
    v22 = v6;
    sub_1A2AE3CE8();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_0Tm(v24);
}

uint64_t sub_1A29C0664@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return DeviceLockState.init(from:)(a1, a2);
}

uint64_t sub_1A29C0678(_QWORD *a1)
{
  return DeviceLockState.encode(to:)(a1);
}

uint64_t sub_1A29C068C()
{
  _BYTE *v0;

  if (*v0)
    return 0x656B636F6C6E752ELL;
  else
    return 0x64656B636F6C2ELL;
}

uint64_t sub_1A29C06CC()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x1A8589784](v0 + 16);
}

uint64_t sub_1A29C0710(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_1A29C0770(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v4 = MEMORY[0x1A8589784](v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v3[3] = v4;
  v3[4] = v5;
  return sub_1A29C07DC;
}

void sub_1A29C07DC(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 24) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

void sub_1A29C084C(_BYTE *a1@<X8>)
{
  void *v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  v2 = (void *)sub_1A2AE3364();
  v3 = MKBGetDeviceLockState();

  if (v3 >= 8)
  {
    if (qword_1EE67AA30 != -1)
      swift_once();
    v5 = sub_1A2AE31D8();
    __swift_project_value_buffer(v5, (uint64_t)qword_1EE67BC58);
    v6 = sub_1A2AE31C0();
    v7 = sub_1A2AE394C();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v8 = 67109120;
      sub_1A2AE3A60();
      _os_log_impl(&dword_1A2830000, v6, v7, "Unknown keybag state: %d File a radar against Sharing | all", v8, 8u);
      MEMORY[0x1A85896E8](v8, -1, -1);
    }

    LOBYTE(v4) = 0;
  }
  else
  {
    v4 = 0x100000001000001uLL >> (8 * v3);
  }
  *a1 = v4;
}

uint64_t SFLockStateMonitor.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  SFLockStateMonitor.init()();
  return v0;
}

uint64_t SFLockStateMonitor.init()()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  _QWORD v7[6];

  v1 = v0;
  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_DWORD *)(v0 + 32) = 0;
  v2 = (int *)(v0 + 32);
  *(_QWORD *)(v0 + 40) = sub_1A2978A90((uint64_t)&unk_1E4822B10);
  sub_1A29C0D60();
  v3 = sub_1A2AE3988();
  v4 = swift_allocObject();
  swift_weakInit();
  v7[4] = sub_1A29C0DC0;
  v7[5] = v4;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = sub_1A29C0BCC;
  v7[3] = &block_descriptor_2;
  v5 = _Block_copy(v7);
  swift_release();
  swift_beginAccess();
  notify_register_dispatch("com.apple.mobile.keybagd.lock_status", v2, v3, v5);
  swift_endAccess();
  _Block_release(v5);

  return v1;
}

uint64_t sub_1A29C0AF8()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  char v5;
  char v6;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = result + 16;
    swift_beginAccess();
    if (MEMORY[0x1A8589784](v2))
    {
      v3 = *(_QWORD *)(v1 + 24);
      ObjectType = swift_getObjectType();
      sub_1A29C084C(&v6);
      v5 = v6;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 8))(&v5, ObjectType, v3);
      swift_release();
      return swift_unknownObjectRelease();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1A29C0BCC(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t SFLockStateMonitor.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  notify_cancel(*(_DWORD *)(v0 + 32));
  sub_1A29C0DE0(v0 + 16);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SFLockStateMonitor.__deallocating_deinit()
{
  uint64_t v0;

  swift_beginAccess();
  notify_cancel(*(_DWORD *)(v0 + 32));
  sub_1A29C0DE0(v0 + 16);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void *sub_1A29C0CA4(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)sub_1A2AE3C88();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

uint64_t sub_1A29C0D38@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

unint64_t sub_1A29C0D60()
{
  unint64_t result;

  result = qword_1EE6763C0;
  if (!qword_1EE6763C0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE6763C0);
  }
  return result;
}

uint64_t sub_1A29C0D9C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A29C0DC0()
{
  return sub_1A29C0AF8();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_1A29C0DE0(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

unint64_t sub_1A29C0E08()
{
  unint64_t result;

  result = qword_1EE67BCB8;
  if (!qword_1EE67BCB8)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for DeviceLockState, &type metadata for DeviceLockState);
    atomic_store(result, (unint64_t *)&qword_1EE67BCB8);
  }
  return result;
}

uint64_t sub_1A29C0E4C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x1A8589784](v4);
  v6 = *(_QWORD *)(v3 + 24);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1A29C0EA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 24) = v2;
  return swift_unknownObjectWeakAssign();
}

ValueMetadata *type metadata accessor for DeviceLockState()
{
  return &type metadata for DeviceLockState;
}

uint64_t dispatch thunk of SFLockStateMonitorDelegate.lockStateChanged(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for SFLockStateMonitor()
{
  return objc_opt_self();
}

uint64_t method lookup function for SFLockStateMonitor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SFLockStateMonitor.delegate.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of SFLockStateMonitor.delegate.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of SFLockStateMonitor.delegate.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of SFLockStateMonitor.lockState.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of SFLockStateMonitor.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t _s7Sharing15DeviceLockStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A29C0FC8 + 4 * byte_1A2AFDB45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A29C0FFC + 4 * byte_1A2AFDB40[v4]))();
}

uint64_t sub_1A29C0FFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29C1004(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A29C100CLL);
  return result;
}

uint64_t sub_1A29C1018(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A29C1020);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A29C1024(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29C102C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceLockState.CodingKeys()
{
  return &type metadata for DeviceLockState.CodingKeys;
}

ValueMetadata *type metadata accessor for DeviceLockState.LockedCodingKeys()
{
  return &type metadata for DeviceLockState.LockedCodingKeys;
}

ValueMetadata *type metadata accessor for DeviceLockState.UnlockedCodingKeys()
{
  return &type metadata for DeviceLockState.UnlockedCodingKeys;
}

unint64_t sub_1A29C106C()
{
  unint64_t result;

  result = qword_1EE67BCC0;
  if (!qword_1EE67BCC0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFDE34, &type metadata for DeviceLockState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BCC0);
  }
  return result;
}

unint64_t sub_1A29C10B4()
{
  unint64_t result;

  result = qword_1EE67BCC8;
  if (!qword_1EE67BCC8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFDD54, &type metadata for DeviceLockState.LockedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BCC8);
  }
  return result;
}

unint64_t sub_1A29C10FC()
{
  unint64_t result;

  result = qword_1EE67BCD0;
  if (!qword_1EE67BCD0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFDD7C, &type metadata for DeviceLockState.LockedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BCD0);
  }
  return result;
}

unint64_t sub_1A29C1144()
{
  unint64_t result;

  result = qword_1EE67BCD8;
  if (!qword_1EE67BCD8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFDD04, &type metadata for DeviceLockState.UnlockedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BCD8);
  }
  return result;
}

unint64_t sub_1A29C118C()
{
  unint64_t result;

  result = qword_1EE67BCE0;
  if (!qword_1EE67BCE0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFDD2C, &type metadata for DeviceLockState.UnlockedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BCE0);
  }
  return result;
}

unint64_t sub_1A29C11D4()
{
  unint64_t result;

  result = qword_1EE67BCE8;
  if (!qword_1EE67BCE8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFDDA4, &type metadata for DeviceLockState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BCE8);
  }
  return result;
}

unint64_t sub_1A29C121C()
{
  unint64_t result;

  result = qword_1EE67BCF0;
  if (!qword_1EE67BCF0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFDDCC, &type metadata for DeviceLockState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67BCF0);
  }
  return result;
}

uint64_t sub_1A29C1260(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x64656B636F6CLL && a2 == 0xE600000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64656B636F6C6E75 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void sub_1A29C1348()
{
  type metadata accessor for CombineLatestStateMachine.State();
}

id *sub_1A29C13D0(id *a1, id *a2, _QWORD *a3)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  char *v43;
  id *v44;
  id *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  const void *v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  const void *v58;
  unsigned int (*v59)(const void *, uint64_t, uint64_t);
  unsigned int v60;
  char v61;
  id v62;
  id v63;
  unsigned int v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  const void *v69;
  unsigned int (*v70)(const void *, uint64_t, uint64_t);
  _QWORD *v71;
  _QWORD *v72;
  void *v73;
  const void *v74;
  size_t v75;
  _QWORD *v76;
  _QWORD *v77;
  void *v78;
  const void *v79;
  size_t v80;
  _QWORD *v81;
  _QWORD *v82;
  void *v83;
  const void *v84;
  size_t v85;
  _QWORD *v86;
  _QWORD *v87;
  void *v88;
  const void *v89;
  size_t v90;
  _QWORD *v91;
  _QWORD *v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  BOOL v96;
  size_t __n;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  size_t v120;
  size_t v121;
  size_t v122;
  uint64_t AssociatedTypeWitness;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  size_t v129;
  size_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;

  v4 = a3[2];
  v6 = a3[3];
  v5 = a3[4];
  v139 = *(_QWORD *)(v4 - 8);
  v7 = *(_QWORD *)(v139 + 64);
  v8 = *(_QWORD *)(v6 - 8);
  v137 = *(_DWORD *)(v8 + 80);
  v104 = v7 + v137;
  v99 = v137;
  v113 = v8;
  v9 = *(_QWORD *)(v5 - 8);
  v134 = *(_DWORD *)(v9 + 80);
  v110 = *(_QWORD *)(v8 + 64);
  v10 = (v110 + v134 + ((v7 + v99) & ~v99)) & ~(unint64_t)v134;
  v117 = v9;
  v11 = *(_QWORD *)(v9 + 64);
  if (!*(_DWORD *)(v9 + 84))
    ++v11;
  __n = v11;
  v125 = v11 + v10;
  v107 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v131 = *(_DWORD *)(v12 + 80);
  v114 = v6;
  v124 = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(v124 - 8);
  v128 = *(_DWORD *)(v13 + 80);
  v14 = v128 | (unint64_t)v131;
  v120 = v5;
  v15 = swift_getAssociatedTypeWitness();
  v16 = v128 | 7;
  v17 = *(_QWORD *)(v15 - 8);
  v18 = *(_DWORD *)(v17 + 80);
  v19 = v18 | 7;
  v20 = v13;
  v21 = v12;
  v22 = v14 | v18 | 7;
  v23 = v131 + 8;
  v24 = v23 & ~(unint64_t)v131;
  if (*(_DWORD *)(v12 + 84))
    v25 = *(_QWORD *)(v12 + 64);
  else
    v25 = *(_QWORD *)(v12 + 64) + 1;
  v26 = v24 + 1;
  v27 = (v24 + 1 + v16 + v25) & ~v16;
  v28 = v128 + 8;
  v29 = v28 & ~(unint64_t)v128;
  if (*(_DWORD *)(v20 + 84))
    v30 = *(_QWORD *)(v20 + 64);
  else
    v30 = *(_QWORD *)(v20 + 64) + 1;
  v31 = (v29 + 1 + v19 + v30 + v27) & ~v19;
  if (*(_DWORD *)(v17 + 84))
    v32 = *(_QWORD *)(v17 + 64);
  else
    v32 = *(_QWORD *)(v17 + 64) + 1;
  v33 = (((v18 + 8) & ~v18) + v32 + v31 + 1 + (((v14 | v18) + 8) & ~v22) + 7) & 0xFFFFFFFFFFFFFFF8;
  v34 = v33 + 8;
  if (v33 + 8 <= v125)
    v34 = v125;
  v35 = ((v33 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v35 <= v34)
    v35 = v34;
  if (v35 <= 8)
    v36 = 8;
  else
    v36 = v35;
  if (v36 > 3)
    goto LABEL_23;
  v37 = ((1 << (8 * v36)) + 1) >> (8 * v36);
  v38 = 2;
  if (v37 > 0xFFFA)
    v38 = 4;
  if (v37 <= 0xFA)
LABEL_23:
    v38 = 1;
  v39 = *(_DWORD *)(v139 + 80);
  v40 = v14 | v18 | ((v134 | v137) | v39) & 0xF8 | 7u;
  if (((v36 + v38 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= 0x18
    && ((v134 | v137 | v131 | v128 | *(_DWORD *)(v17 + 80) | v39) & 0x100000) == 0
    && v40 == 7)
  {
    v45 = a2;
    if (v36 > 3)
      goto LABEL_35;
    v46 = ((1 << (8 * v36)) + 1) >> (8 * v36);
    if (v46 > 0xFFFA)
    {
      v47 = *(_DWORD *)((char *)a2 + v36);
      if (v47 < 5)
        goto LABEL_44;
      goto LABEL_40;
    }
    if (v46 > 0xFA)
    {
      v47 = *(unsigned __int16 *)((char *)a2 + v36);
      if (v47 < 5)
      {
LABEL_44:
        v138 = v20;
        v49 = ~v22;
        v50 = ~(unint64_t)v131;
        v51 = ~v16;
        v52 = ~(unint64_t)v128;
        switch(v47)
        {
          case 0u:
            v44 = a1;
            (*(void (**)(id *, id *, uint64_t))(v139 + 16))(a1, a2, v107);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v113 + 16))(((unint64_t)a1 + v104) & ~v99, ((unint64_t)a2 + v104) & ~v99, v114);
            v53 = (void *)(((((unint64_t)a1 + v104) & ~v99) + v110 + v134) & ~(unint64_t)v134);
            v54 = (const void *)(((((unint64_t)a2 + v104) & ~v99) + v110 + v134) & ~(unint64_t)v134);
            if ((*(unsigned int (**)(const void *, uint64_t, size_t))(v117 + 48))(v54, 1, v120))
            {
              memcpy(v53, v54, __n);
              if (v36 > 3)
              {
LABEL_70:
                *((_BYTE *)a1 + v36) = 0;
                if (v36 <= 3)
                  goto LABEL_95;
                goto LABEL_98;
              }
            }
            else
            {
              (*(void (**)(void *, const void *, size_t))(v117 + 16))(v53, v54, v120);
              (*(void (**)(void *, _QWORD, uint64_t, size_t))(v117 + 56))(v53, 0, 1, v120);
              if (v36 > 3)
                goto LABEL_70;
            }
            v60 = ((1 << (8 * v36)) + 1) >> (8 * v36);
            if (v60 > 0xFFFA)
            {
              *(_DWORD *)((char *)a1 + v36) = 0;
              goto LABEL_109;
            }
            if (v60 > 0xFA)
            {
              *(_WORD *)((char *)a1 + v36) = 0;
              goto LABEL_109;
            }
            goto LABEL_70;
          case 1u:
            v106 = ~v19;
            v109 = ~v18;
            v112 = v26;
            v116 = v128 | 7;
            v119 = v29 + 1;
            v122 = v30;
            v127 = v18 + 8;
            v130 = v32;
            v133 = ((v18 + 8) & ~v18) + v32 + v31 + 1;
            v136 = *(_QWORD *)(v15 - 8);
            v141 = v15;
            *a1 = *a2;
            v66 = (_QWORD *)(((unint64_t)a1 + v22 + 8) & v49);
            v67 = (_QWORD *)(((unint64_t)a2 + v22 + 8) & v49);
            *v66 = *v67;
            v101 = (unint64_t)v67;
            v103 = (unint64_t)v66;
            v68 = (void *)(((unint64_t)v66 + v23) & v50);
            v69 = (const void *)(((unint64_t)v67 + v23) & v50);
            v70 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
            swift_retain();
            if (v70(v69, 1, AssociatedTypeWitness))
            {
              memcpy(v68, v69, v25);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v68, v69, AssociatedTypeWitness);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v68, 0, 1, AssociatedTypeWitness);
            }
            *((_BYTE *)v68 + v25) = *((_BYTE *)v69 + v25);
            v76 = (_QWORD *)((v103 + v116 + v112 + v25) & v51);
            v77 = (_QWORD *)((v101 + v116 + v112 + v25) & v51);
            *v76 = *v77;
            v78 = (void *)(((unint64_t)v76 + v28) & v52);
            v79 = (const void *)(((unint64_t)v77 + v28) & v52);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v138 + 48))(v79, 1, v124))
            {
              v80 = v122;
              memcpy(v78, v79, v122);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v138 + 16))(v78, v79, v124);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v138 + 56))(v78, 0, 1, v124);
              v80 = v122;
            }
            *((_BYTE *)v78 + v80) = *((_BYTE *)v79 + v80);
            v86 = (_QWORD *)(((unint64_t)v76 + v19 + v119 + v80) & v106);
            v87 = (_QWORD *)(((unint64_t)v77 + v19 + v119 + v80) & v106);
            *v86 = *v87;
            v88 = (void *)(((unint64_t)v86 + v127) & v109);
            v89 = (const void *)(((unint64_t)v87 + v127) & v109);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v136 + 48))(v89, 1, v141))
            {
              v90 = v130;
              memcpy(v88, v89, v130);
              v44 = a1;
              v45 = a2;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v136 + 16))(v88, v89, v141);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v88, 0, 1, v141);
              v44 = a1;
              v45 = a2;
              v90 = v130;
            }
            *((_BYTE *)v88 + v90) = *((_BYTE *)v89 + v90);
            *(_QWORD *)(((v103 | 7) + v133) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v101 | 7) + v133) & 0xFFFFFFFFFFFFF8);
            swift_retain();
            if (v36 > 3)
              goto LABEL_93;
            v93 = 1;
            v60 = ((1 << (8 * v36)) + 1) >> (8 * v36);
            if (v60 > 0xFFFA)
              goto LABEL_103;
            if (v60 > 0xFA)
              goto LABEL_108;
LABEL_93:
            v61 = 1;
            goto LABEL_94;
          case 2u:
            v105 = ~v19;
            v108 = ~v18;
            v111 = v26;
            v115 = v128 | 7;
            v118 = v29 + 1;
            v121 = v30;
            v126 = v18 + 8;
            v129 = v32;
            v132 = ((v18 + 8) & ~v18) + v32 + v31 + 1;
            v135 = *(_QWORD *)(v15 - 8);
            v140 = v15;
            *a1 = *a2;
            v55 = (_QWORD *)(((unint64_t)a1 + v22 + 8) & v49);
            v56 = (_QWORD *)(((unint64_t)a2 + v22 + 8) & v49);
            *v55 = *v56;
            v100 = (unint64_t)v56;
            v102 = (unint64_t)v55;
            v57 = (void *)(((unint64_t)v55 + v23) & v50);
            v58 = (const void *)(((unint64_t)v56 + v23) & v50);
            v59 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
            swift_retain();
            if (v59(v58, 1, AssociatedTypeWitness))
            {
              memcpy(v57, v58, v25);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v57, v58, AssociatedTypeWitness);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v57, 0, 1, AssociatedTypeWitness);
            }
            *((_BYTE *)v57 + v25) = *((_BYTE *)v58 + v25);
            v71 = (_QWORD *)((v102 + v115 + v111 + v25) & v51);
            v72 = (_QWORD *)((v100 + v115 + v111 + v25) & v51);
            *v71 = *v72;
            v73 = (void *)(((unint64_t)v71 + v28) & v52);
            v74 = (const void *)(((unint64_t)v72 + v28) & v52);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v138 + 48))(v74, 1, v124))
            {
              v75 = v121;
              memcpy(v73, v74, v121);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v138 + 16))(v73, v74, v124);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v138 + 56))(v73, 0, 1, v124);
              v75 = v121;
            }
            *((_BYTE *)v73 + v75) = *((_BYTE *)v74 + v75);
            v81 = (_QWORD *)(((unint64_t)v71 + v19 + v118 + v75) & v105);
            v82 = (_QWORD *)(((unint64_t)v72 + v19 + v118 + v75) & v105);
            *v81 = *v82;
            v83 = (void *)(((unint64_t)v81 + v126) & v108);
            v84 = (const void *)(((unint64_t)v82 + v126) & v108);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v135 + 48))(v84, 1, v140))
            {
              v85 = v129;
              memcpy(v83, v84, v129);
              v44 = a1;
              v45 = a2;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v135 + 16))(v83, v84, v140);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v83, 0, 1, v140);
              v44 = a1;
              v45 = a2;
              v85 = v129;
            }
            *((_BYTE *)v83 + v85) = *((_BYTE *)v84 + v85);
            v91 = (_QWORD *)(((v102 | 7) + v132) & 0xFFFFFFFFFFFFF8);
            v92 = (_QWORD *)(((v100 | 7) + v132) & 0xFFFFFFFFFFFFFFF8);
            *v91 = *v92;
            *(_QWORD *)(((unint64_t)v91 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v92 + 15) & 0xFFFFFFFFFFFFF8);
            swift_retain();
            if (v36 > 3)
              goto LABEL_88;
            v60 = ((1 << (8 * v36)) + 1) >> (8 * v36);
            if (v60 > 0xFFFA)
            {
              v93 = 2;
LABEL_103:
              *(_DWORD *)((char *)v44 + v36) = v93;
              goto LABEL_109;
            }
            if (v60 <= 0xFA)
            {
LABEL_88:
              v61 = 2;
              goto LABEL_94;
            }
            LOWORD(v93) = 2;
            goto LABEL_108;
          case 3u:
            v44 = a1;
            *a1 = *a2;
            swift_retain();
            if (v36 > 3)
              goto LABEL_53;
            v60 = ((1 << (8 * v36)) + 1) >> (8 * v36);
            if (v60 > 0xFFFA)
            {
              *(_DWORD *)((char *)a1 + v36) = 3;
              goto LABEL_109;
            }
            if (v60 <= 0xFA)
            {
LABEL_53:
              v61 = 3;
              goto LABEL_94;
            }
            LOWORD(v93) = 3;
            goto LABEL_108;
          case 4u:
            v62 = *a2;
            v63 = *a2;
            v44 = a1;
            *a1 = v62;
            if (v36 > 3)
              goto LABEL_57;
            v60 = ((1 << (8 * v36)) + 1) >> (8 * v36);
            if (v60 > 0xFFFA)
            {
              *(_DWORD *)((char *)a1 + v36) = 4;
            }
            else
            {
              if (v60 <= 0xFA)
              {
LABEL_57:
                v61 = 4;
LABEL_94:
                *((_BYTE *)v44 + v36) = v61;
                if (v36 > 3)
                  goto LABEL_98;
LABEL_95:
                v94 = ((1 << (8 * v36)) + 1) >> (8 * v36);
                v95 = 2;
                if (v94 > 0xFFFA)
                  v95 = 4;
                if (v94 <= 0xFA)
LABEL_98:
                  v95 = 1;
LABEL_111:
                *(_QWORD *)(((unint64_t)v44 + v95 + v36 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v45 + v95 + v36 + 7) & 0xFFFFFFFFFFFFF8);
                return v44;
              }
              LOWORD(v93) = 4;
LABEL_108:
              *(_WORD *)((char *)v44 + v36) = v93;
            }
LABEL_109:
            v96 = v60 > 0xFFFA;
            v95 = 2;
            if (v96)
              v95 = 4;
            goto LABEL_111;
          default:
            if (v36 > 3)
              goto LABEL_62;
            v64 = ((1 << (8 * v36)) + 1) >> (8 * v36);
            v65 = 2;
            if (v64 > 0xFFFA)
              v65 = 4;
            if (v64 <= 0xFA)
LABEL_62:
              v65 = 1;
            v44 = a1;
            memcpy(a1, a2, v65 + v36);
            if (v36 > 3)
              goto LABEL_98;
            goto LABEL_95;
        }
      }
    }
    else
    {
LABEL_35:
      v47 = *((unsigned __int8 *)a2 + v36);
      if (v47 < 5)
        goto LABEL_44;
    }
LABEL_40:
    if (v36 <= 3)
      v48 = v36;
    else
      v48 = 4;
    __asm { BR              X15 }
  }
  v43 = (char *)*a2;
  *a1 = *a2;
  v44 = (id *)&v43[(v40 + 16) & ~v40];
  swift_retain();
  return v44;
}

id *sub_1A29C1FDC(id *a1, id *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  id *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id *v46;
  void *v47;
  const void *v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  const void *v52;
  unsigned int (*v53)(const void *, uint64_t, uint64_t);
  unsigned int v54;
  char v55;
  id v56;
  id v57;
  unsigned int v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  const void *v63;
  unsigned int (*v64)(const void *, uint64_t, uint64_t);
  _QWORD *v65;
  _QWORD *v66;
  void *v67;
  const void *v68;
  size_t v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  const void *v73;
  size_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  _QWORD *v79;
  void *v80;
  const void *v81;
  size_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  void *v87;
  const void *v88;
  uint64_t v89;
  size_t v90;
  unsigned int v91;
  uint64_t v92;
  BOOL v93;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  size_t __n;
  size_t __na;
  size_t __nb;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  size_t v108;
  size_t v109;
  size_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  size_t v117;
  size_t v118;
  size_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t AssociatedTypeWitness;
  unint64_t v136;

  v4 = a3[2];
  v5 = a3[3];
  v6 = a3[4];
  v108 = *(_QWORD *)(v4 - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v111 = *(_QWORD *)(v108 + 64) + v8;
  v102 = v8;
  v9 = v111 & ~v8;
  v117 = v7;
  v10 = *(_QWORD *)(v6 - 8);
  v120 = *(_QWORD *)(v7 + 64);
  v105 = *(unsigned __int8 *)(v10 + 80);
  v11 = (v120 + v105 + v9) & ~v105;
  v126 = v10;
  v12 = *(_QWORD *)(v10 + 64);
  if (!*(_DWORD *)(v10 + 84))
    ++v12;
  __n = v12;
  v133 = v12 + v11;
  v114 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v123 = v5;
  v132 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v132 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = swift_getAssociatedTypeWitness();
  v18 = v13;
  v19 = v16 | 7;
  v20 = *(_QWORD *)(v17 - 8);
  v21 = *(unsigned __int8 *)(v20 + 80);
  v22 = v21 | 7;
  v23 = v16 | v14 | v21 | 7;
  v24 = v14 + 8;
  v25 = (v14 + 8) & ~v14;
  if (*(_DWORD *)(v13 + 84))
    v26 = *(_QWORD *)(v13 + 64);
  else
    v26 = *(_QWORD *)(v13 + 64) + 1;
  v27 = v25 + 1;
  v28 = (v25 + 1 + v19 + v26) & ~v19;
  v29 = (v16 + 8) & ~v16;
  v131 = v15;
  if (*(_DWORD *)(v15 + 84))
    v30 = *(_QWORD *)(v15 + 64);
  else
    v30 = *(_QWORD *)(v15 + 64) + 1;
  v31 = v29 + 1;
  v32 = (v29 + 1 + v22 + v30 + v28) & ~v22;
  if (*(_DWORD *)(v20 + 84))
    v33 = *(_QWORD *)(v20 + 64);
  else
    v33 = *(_QWORD *)(v20 + 64) + 1;
  v34 = ((v21 + 8) & ~v21) + v33 + v32 + 1;
  v35 = (v34 + (((v16 | v14 | v21) + 8) & ~v23) + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = v35 + 8;
  if (v35 + 8 <= v133)
    v36 = v133;
  v37 = ((v35 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v37 <= v36)
    v37 = v36;
  if (v37 <= 8)
    v38 = 8;
  else
    v38 = v37;
  if (v38 > 3)
    goto LABEL_22;
  v39 = ((1 << (8 * v38)) + 1) >> (8 * v38);
  if (v39 <= 0xFFFA)
  {
    if (v39 > 0xFA)
    {
      v40 = *(unsigned __int16 *)((char *)a2 + v38);
      goto LABEL_23;
    }
LABEL_22:
    v40 = *((unsigned __int8 *)a2 + v38);
LABEL_23:
    v41 = a2;
    goto LABEL_25;
  }
  v41 = a2;
  v40 = *(_DWORD *)((char *)a2 + v38);
LABEL_25:
  if (v40 >= 5)
  {
    if (v38 <= 3)
      v42 = v38;
    else
      v42 = 4;
    __asm { BR              X15 }
  }
  v134 = v27;
  v43 = ~v23;
  v44 = ~v14;
  v45 = ~v19;
  switch(v40)
  {
    case 0u:
      v46 = a1;
      (*(void (**)(id *, id *, uint64_t))(v108 + 16))(a1, v41, v114);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v117 + 16))(((unint64_t)a1 + v111) & ~v102, ((unint64_t)v41 + v111) & ~v102, v123);
      v47 = (void *)(((((unint64_t)a1 + v111) & ~v102) + v120 + v105) & ~v105);
      v48 = (const void *)(((((unint64_t)v41 + v111) & ~v102) + v120 + v105) & ~v105);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v126 + 48))(v48, 1, v6))
      {
        memcpy(v47, v48, __n);
        if (v38 > 3)
        {
LABEL_68:
          *((_BYTE *)a1 + v38) = 0;
          if (v38 <= 3)
            goto LABEL_80;
          goto LABEL_83;
        }
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v126 + 16))(v47, v48, v6);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v47, 0, 1, v6);
        if (v38 > 3)
          goto LABEL_68;
      }
      v54 = ((1 << (8 * v38)) + 1) >> (8 * v38);
      if (v54 > 0xFFFA)
      {
        *(_DWORD *)((char *)a1 + v38) = 0;
        goto LABEL_96;
      }
      if (v54 > 0xFA)
      {
        *(_WORD *)((char *)a1 + v38) = 0;
        goto LABEL_96;
      }
      goto LABEL_68;
    case 1u:
      v125 = ~v16;
      v128 = ~v22;
      v98 = ~v21;
      __nb = v16 + 8;
      v104 = v16 | 7;
      v107 = v31;
      v110 = v30;
      v113 = v21 + 8;
      v116 = *(_QWORD *)(v17 - 8);
      v119 = v33;
      v122 = v34;
      v130 = v17;
      *a1 = *v41;
      v60 = (_QWORD *)(((unint64_t)a1 + v23 + 8) & v43);
      v61 = (_QWORD *)(((unint64_t)v41 + v23 + 8) & v43);
      *v60 = *v61;
      v96 = (unint64_t)v60;
      v62 = (void *)(((unint64_t)v60 + v24) & v44);
      v63 = (const void *)(((unint64_t)v61 + v24) & v44);
      v64 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
      swift_retain();
      if (v64(v63, 1, AssociatedTypeWitness))
      {
        memcpy(v62, v63, v26);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(v62, v63, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v62, 0, 1, AssociatedTypeWitness);
      }
      v41 = a2;
      *((_BYTE *)v62 + v26) = *((_BYTE *)v63 + v26);
      v77 = (_QWORD *)((v96 + v104 + v134 + v26) & v45);
      v78 = (unint64_t)v61;
      v79 = (_QWORD *)(((unint64_t)v61 + v104 + v134 + v26) & v45);
      *v77 = *v79;
      v80 = (void *)(((unint64_t)v77 + __nb) & v125);
      v81 = (const void *)(((unint64_t)v79 + __nb) & v125);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v131 + 48))(v81, 1, v132))
      {
        v82 = v110;
        memcpy(v80, v81, v110);
        v84 = v113;
        v83 = v116;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v131 + 16))(v80, v81, v132);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v131 + 56))(v80, 0, 1, v132);
        v84 = v113;
        v83 = v116;
        v82 = v110;
      }
      *((_BYTE *)v80 + v82) = *((_BYTE *)v81 + v82);
      v85 = (_QWORD *)(((unint64_t)v77 + v22 + v107 + v82) & v128);
      v86 = (_QWORD *)(((unint64_t)v79 + v22 + v107 + v82) & v128);
      *v85 = *v86;
      v87 = (void *)(((unint64_t)v85 + v84) & v98);
      v88 = (const void *)(((unint64_t)v86 + v84) & v98);
      v89 = v83;
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v83 + 48))(v88, 1, v130))
      {
        v90 = v119;
        memcpy(v87, v88, v119);
        v46 = a1;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v89 + 16))(v87, v88, v130);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v87, 0, 1, v130);
        v46 = a1;
        v90 = v119;
      }
      *((_BYTE *)v87 + v90) = *((_BYTE *)v88 + v90);
      *(_QWORD *)(((v96 | 7) + v122) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v78 | 7) + v122) & 0xFFFFFFFFFFFFF8);
      swift_retain();
      if (v38 > 3)
        goto LABEL_78;
      v54 = ((1 << (8 * v38)) + 1) >> (8 * v38);
      if (v54 > 0xFFFA)
      {
        *(_DWORD *)((char *)v46 + v38) = 1;
      }
      else
      {
        if (v54 <= 0xFA)
        {
LABEL_78:
          v55 = 1;
          goto LABEL_79;
        }
        *(_WORD *)((char *)v46 + v38) = 1;
      }
      goto LABEL_96;
    case 2u:
      v124 = ~v16;
      v127 = ~v22;
      v97 = ~v21;
      __na = v16 + 8;
      v103 = v16 | 7;
      v106 = v31;
      v109 = v30;
      v112 = v21 + 8;
      v115 = *(_QWORD *)(v17 - 8);
      v118 = v33;
      v121 = v34;
      v129 = v17;
      *a1 = *v41;
      v49 = (_QWORD *)(((unint64_t)a1 + v23 + 8) & v43);
      v50 = (_QWORD *)(((unint64_t)v41 + v23 + 8) & v43);
      *v49 = *v50;
      v51 = (void *)(((unint64_t)v49 + v24) & v44);
      v95 = (unint64_t)v50;
      v52 = (const void *)(((unint64_t)v50 + v24) & v44);
      v53 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
      swift_retain();
      if (v53(v52, 1, AssociatedTypeWitness))
      {
        memcpy(v51, v52, v26);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(v51, v52, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v51, 0, 1, AssociatedTypeWitness);
      }
      *((_BYTE *)v51 + v26) = *((_BYTE *)v52 + v26);
      v136 = (unint64_t)v49;
      v65 = (_QWORD *)(((unint64_t)v49 + v103 + v134 + v26) & v45);
      v66 = (_QWORD *)((v95 + v103 + v134 + v26) & v45);
      *v65 = *v66;
      v67 = (void *)(((unint64_t)v65 + __na) & v124);
      v68 = (const void *)(((unint64_t)v66 + __na) & v124);
      v41 = a2;
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v131 + 48))(v68, 1, v132))
      {
        v69 = v109;
        memcpy(v67, v68, v109);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v131 + 16))(v67, v68, v132);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v131 + 56))(v67, 0, 1, v132);
        v69 = v109;
      }
      *((_BYTE *)v67 + v69) = *((_BYTE *)v68 + v69);
      v70 = (_QWORD *)(((unint64_t)v65 + v22 + v106 + v69) & v127);
      v71 = (_QWORD *)(((unint64_t)v66 + v22 + v106 + v69) & v127);
      *v70 = *v71;
      v72 = (void *)(((unint64_t)v70 + v112) & v97);
      v73 = (const void *)(((unint64_t)v71 + v112) & v97);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v115 + 48))(v73, 1, v129))
      {
        v74 = v118;
        memcpy(v72, v73, v118);
        v46 = a1;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v115 + 16))(v72, v73, v129);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v115 + 56))(v72, 0, 1, v129);
        v46 = a1;
        v74 = v118;
      }
      *((_BYTE *)v72 + v74) = *((_BYTE *)v73 + v74);
      v75 = (_QWORD *)(((v136 | 7) + v121) & 0xFFFFFFFFFFFFF8);
      v76 = (_QWORD *)(((v95 | 7) + v121) & 0xFFFFFFFFFFFFFFF8);
      *v75 = *v76;
      *(_QWORD *)(((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v76 + 15) & 0xFFFFFFFFFFFFF8);
      swift_retain();
      if (v38 > 3)
        goto LABEL_64;
      v54 = ((1 << (8 * v38)) + 1) >> (8 * v38);
      if (v54 > 0xFFFA)
      {
        *(_DWORD *)((char *)v46 + v38) = 2;
      }
      else
      {
        if (v54 <= 0xFA)
        {
LABEL_64:
          v55 = 2;
          goto LABEL_79;
        }
        *(_WORD *)((char *)v46 + v38) = 2;
      }
      goto LABEL_96;
    case 3u:
      v46 = a1;
      *a1 = *v41;
      swift_retain();
      if (v38 > 3)
        goto LABEL_40;
      v54 = ((1 << (8 * v38)) + 1) >> (8 * v38);
      if (v54 > 0xFFFA)
      {
        *(_DWORD *)((char *)a1 + v38) = 3;
      }
      else
      {
        if (v54 <= 0xFA)
        {
LABEL_40:
          v55 = 3;
          goto LABEL_79;
        }
        *(_WORD *)((char *)a1 + v38) = 3;
      }
      goto LABEL_96;
    case 4u:
      v56 = *v41;
      v57 = *v41;
      v46 = a1;
      *a1 = v56;
      if (v38 > 3)
        goto LABEL_44;
      v54 = ((1 << (8 * v38)) + 1) >> (8 * v38);
      if (v54 > 0xFFFA)
      {
        *(_DWORD *)((char *)a1 + v38) = 4;
        goto LABEL_96;
      }
      if (v54 > 0xFA)
      {
        *(_WORD *)((char *)a1 + v38) = 4;
LABEL_96:
        v93 = v54 > 0xFFFA;
        v92 = 2;
        if (v93)
          v92 = 4;
        goto LABEL_98;
      }
LABEL_44:
      v55 = 4;
LABEL_79:
      *((_BYTE *)v46 + v38) = v55;
      if (v38 > 3)
        goto LABEL_83;
LABEL_80:
      v91 = ((1 << (8 * v38)) + 1) >> (8 * v38);
      v92 = 2;
      if (v91 > 0xFFFA)
        v92 = 4;
      if (v91 <= 0xFA)
LABEL_83:
        v92 = 1;
LABEL_98:
      *(_QWORD *)(((unint64_t)v46 + v92 + v38 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v41
                                                                                             + v92
                                                                                             + v38
                                                                                             + 7) & 0xFFFFFFFFFFFFF8);
      return v46;
    default:
      if (v38 > 3)
        goto LABEL_49;
      v58 = ((1 << (8 * v38)) + 1) >> (8 * v38);
      v59 = 2;
      if (v58 > 0xFFFA)
        v59 = 4;
      if (v58 <= 0xFA)
LABEL_49:
        v59 = 1;
      v46 = a1;
      memcpy(a1, v41, v59 + v38);
      if (v38 > 3)
        goto LABEL_83;
      goto LABEL_80;
  }
}

id *sub_1A29C2B34(id *a1, id *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  void *v49;
  const void *v50;
  _QWORD *v51;
  _QWORD *v52;
  void *v53;
  const void *v54;
  unsigned int (*v55)(const void *, uint64_t, uint64_t);
  size_t v56;
  uint64_t v57;
  unsigned int v58;
  id v59;
  id v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;
  const void *v67;
  unsigned int (*v68)(const void *, uint64_t, uint64_t);
  size_t v69;
  uint64_t v70;
  unsigned int v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  const void *v75;
  size_t v76;
  _QWORD *v77;
  _QWORD *v78;
  void *v79;
  const void *v80;
  size_t v81;
  _QWORD *v82;
  _QWORD *v83;
  void *v84;
  const void *v85;
  size_t v86;
  _QWORD *v87;
  _QWORD *v88;
  void *v89;
  const void *v90;
  size_t v91;
  _QWORD *v92;
  _QWORD *v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unsigned int v119;
  uint64_t v120;
  id *result;
  uint64_t v122;
  size_t __n;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  size_t v135;
  uint64_t v136;
  size_t v137;
  uint64_t v138;
  uint64_t v139;
  size_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t AssociatedTypeWitness;
  unint64_t v158;
  char v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;

  v3 = a3;
  if (a1 == a2)
    goto LABEL_123;
  v4 = a3[2];
  v5 = v3[3];
  v129 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v130 = *(_QWORD *)(v129 + 64) + v7;
  v155 = v7;
  v8 = v130 & ~v7;
  v132 = v6;
  v9 = v3[4];
  v10 = *(_QWORD *)(v9 - 8);
  v133 = *(_QWORD *)(v6 + 64);
  v160 = *(unsigned __int8 *)(v10 + 80);
  v11 = (v133 + v160 + v8) & ~v160;
  v141 = v10;
  v12 = *(_QWORD *)(v10 + 64);
  if (!*(_DWORD *)(v10 + 84))
    ++v12;
  __n = v12;
  v158 = v12 + v11;
  v131 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v134 = v5;
  v164 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v164 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v16 | 7;
  v154 = v3;
  v142 = v9;
  v153 = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(v153 - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = v19 | 7;
  v21 = v16 | v14 | v19 | 7;
  v148 = v14 + 8;
  v152 = v13;
  if (*(_DWORD *)(v13 + 84))
    v22 = *(_QWORD *)(v13 + 64);
  else
    v22 = *(_QWORD *)(v13 + 64) + 1;
  v135 = v22;
  v136 = ((v14 + 8) & ~v14) + v22 + 1;
  v23 = v136 + v17;
  v163 = v16 | 7;
  v24 = v16 + 8;
  if (*(_DWORD *)(v15 + 84))
    v25 = *(_QWORD *)(v15 + 64);
  else
    v25 = *(_QWORD *)(v15 + 64) + 1;
  v137 = v25;
  v138 = ((v16 + 8) & ~v16) + v25 + 1;
  v26 = v138 + v20;
  v149 = v19 + 8;
  v150 = *(_QWORD *)(v153 - 8);
  if (*(_DWORD *)(v18 + 84))
    v27 = *(_QWORD *)(v18 + 64);
  else
    v27 = *(_QWORD *)(v18 + 64) + 1;
  v140 = v27;
  v151 = ((v19 + 8) & ~v19) + v27 + ((v138 + v20 + (v23 & ~v17)) & ~v20) + 1;
  v28 = (v151 + (((v16 | v14 | v19) + 8) & ~v21) + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = v28 + 8;
  if (v28 + 8 <= v158)
    v29 = v158;
  v30 = ((v28 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v30 <= v29)
    v30 = v29;
  if (v30 <= 8)
    v31 = 8;
  else
    v31 = v30;
  if (v31 > 3)
    goto LABEL_23;
  v32 = ((1 << (8 * v31)) + 1) >> (8 * v31);
  if (v32 <= 0xFFFA)
  {
    if (v32 > 0xFA)
    {
      v33 = *(unsigned __int16 *)((char *)a1 + v31);
      if (v33 < 5)
        goto LABEL_33;
      goto LABEL_29;
    }
LABEL_23:
    v33 = *((unsigned __int8 *)a1 + v31);
    if (v33 < 5)
      goto LABEL_33;
LABEL_29:
    if (v31 <= 3)
      v34 = v31;
    else
      v34 = 4;
    __asm { BR              X13 }
  }
  v33 = *(_DWORD *)((char *)a1 + v31);
  if (v33 >= 5)
    goto LABEL_29;
LABEL_33:
  v159 = 8 * v31;
  v128 = ~v155;
  v35 = ~v160;
  v147 = v16 | v14 | v19 | 7;
  v143 = ~v21;
  v144 = ~v14;
  v145 = ~v163;
  v146 = ~v16;
  v139 = v19 | 7;
  v156 = ~v20;
  v36 = ~v19;
  switch(v33)
  {
    case 0u:
      (*(void (**)(id *, uint64_t))(v129 + 8))(a1, v131);
      (*(void (**)(unint64_t, uint64_t))(v132 + 8))(((unint64_t)a1 + v130) & v128, v134);
      v37 = ((((unint64_t)a1 + v130) & v128) + v133 + v160) & v35;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v141 + 48))(v37, 1, v142))
        (*(void (**)(unint64_t, uint64_t))(v141 + 8))(v37, v142);
      break;
    case 1u:
      v122 = ~v160;
      v125 = ~v19;
      swift_release();
      v42 = ((unint64_t)a1 + v147 + 8) & v143;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))((v148 + v42) & v144, 1, AssociatedTypeWitness))(*(void (**)(uint64_t, uint64_t))(v13 + 8))((v148 + v42) & v144, AssociatedTypeWitness);
      v43 = (v23 + v42) & v145;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))((v24 + v43) & v146, 1, v164))
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))((v24 + v43) & v146, v164);
      v44 = (v26 + v43) & v156;
      v36 = v125;
      v45 = (v149 + v44) & v125;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v150 + 48))(v45, 1, v153))
        (*(void (**)(uint64_t, uint64_t))(v150 + 8))(v45, v153);
      goto LABEL_51;
    case 2u:
      v122 = ~v160;
      v124 = ~v19;
      swift_release();
      v38 = ((unint64_t)a1 + v147 + 8) & v143;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))((v148 + v38) & v144, 1, AssociatedTypeWitness))(*(void (**)(uint64_t, uint64_t))(v13 + 8))((v148 + v38) & v144, AssociatedTypeWitness);
      v39 = (v23 + v38) & v145;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))((v24 + v39) & v146, 1, v164))
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))((v24 + v39) & v146, v164);
      v40 = (v26 + v39) & v156;
      v36 = v124;
      v41 = (v149 + v40) & v124;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v150 + 48))(v41, 1, v153))
        (*(void (**)(uint64_t, uint64_t))(v150 + 8))(v41, v153);
LABEL_51:
      swift_release();
      v35 = v122;
      break;
    case 3u:
      swift_release();
      break;
    case 4u:

      break;
    default:
      break;
  }
  if (v31 > 3)
    goto LABEL_55;
  v46 = ((1 << v159) + 1) >> v159;
  if (v46 <= 0xFFFA)
  {
    if (v46 > 0xFA)
    {
      v47 = *(unsigned __int16 *)((char *)a2 + v31);
      if (v47 < 5)
        goto LABEL_64;
      goto LABEL_60;
    }
LABEL_55:
    v47 = *((unsigned __int8 *)a2 + v31);
    if (v47 < 5)
      goto LABEL_64;
LABEL_60:
    if (v31 <= 3)
      v48 = v31;
    else
      v48 = 4;
    __asm { BR              X12 }
  }
  v47 = *(_DWORD *)((char *)a2 + v31);
  if (v47 >= 5)
    goto LABEL_60;
LABEL_64:
  switch(v47)
  {
    case 0u:
      (*(void (**)(id *, id *, uint64_t))(v129 + 16))(a1, a2, v131);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v132 + 16))(((unint64_t)a1 + v130) & v128, ((unint64_t)a2 + v130) & v128, v134);
      v49 = (void *)(((((unint64_t)a1 + v130) & v128) + v133 + v160) & v35);
      v50 = (const void *)(((((unint64_t)a2 + v130) & v128) + v133 + v160) & v35);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v141 + 48))(v50, 1, v142))
      {
        memcpy(v49, v50, __n);
        if (v31 > 3)
          goto LABEL_89;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v141 + 16))(v49, v50, v142);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v141 + 56))(v49, 0, 1, v142);
        if (v31 > 3)
        {
LABEL_89:
          *((_BYTE *)a1 + v31) = 0;
          goto LABEL_122;
        }
      }
      v71 = ((1 << v159) + 1) >> v159;
      if (v71 > 0xFFFA)
      {
        *(_DWORD *)((char *)a1 + v31) = 0;
      }
      else
      {
        if (v71 <= 0xFA)
          goto LABEL_89;
        *(_WORD *)((char *)a1 + v31) = 0;
      }
LABEL_122:
      v3 = v154;
      break;
    case 1u:
      v127 = v36;
      *a1 = *a2;
      v64 = (_QWORD *)(((unint64_t)a1 + v147 + 8) & v143);
      v65 = (_QWORD *)(((unint64_t)a2 + v147 + 8) & v143);
      *v64 = *v65;
      v162 = (unint64_t)v64;
      v66 = (void *)(((unint64_t)v64 + v148) & v144);
      v67 = (const void *)(((unint64_t)v65 + v148) & v144);
      v68 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v152 + 48);
      swift_retain();
      if (v68(v67, 1, AssociatedTypeWitness))
      {
        v69 = v135;
        memcpy(v66, v67, v135);
        v70 = v15;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v152 + 16))(v66, v67, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v152 + 56))(v66, 0, 1, AssociatedTypeWitness);
        v70 = v15;
        v69 = v135;
      }
      *((_BYTE *)v66 + v69) = *((_BYTE *)v67 + v69);
      v77 = (_QWORD *)((v162 + v163 + v136) & v145);
      v78 = (_QWORD *)(((unint64_t)v65 + v163 + v136) & v145);
      *v77 = *v78;
      v79 = (void *)(((unint64_t)v77 + v24) & v146);
      v80 = (const void *)(((unint64_t)v78 + v24) & v146);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v70 + 48))(v80, 1, v164))
      {
        v81 = v137;
        memcpy(v79, v80, v137);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v70 + 16))(v79, v80, v164);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v79, 0, 1, v164);
        v81 = v137;
      }
      *((_BYTE *)v79 + v81) = *((_BYTE *)v80 + v81);
      v87 = (_QWORD *)(((unint64_t)v77 + v139 + v138) & v156);
      v88 = (_QWORD *)(((unint64_t)v78 + v139 + v138) & v156);
      *v87 = *v88;
      v89 = (void *)(((unint64_t)v87 + v149) & v127);
      v90 = (const void *)(((unint64_t)v88 + v149) & v127);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v150 + 48))(v90, 1, v153))
      {
        v91 = v140;
        memcpy(v89, v90, v140);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v150 + 16))(v89, v90, v153);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v150 + 56))(v89, 0, 1, v153);
        v91 = v140;
      }
      *((_BYTE *)v89 + v91) = *((_BYTE *)v90 + v91);
      *(_QWORD *)(((v162 | 7) + v151) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((((unint64_t)a2 + v147 + 8) & v143 | 7)
                                                                         + v151) & 0xFFFFFFFFFFFFF8);
      swift_retain();
      if (v31 > 3)
        goto LABEL_111;
      v95 = 1;
      v96 = ((1 << v159) + 1) >> v159;
      if (v96 > 0xFFFA)
        goto LABEL_114;
      if (v96 > 0xFA)
        goto LABEL_121;
LABEL_111:
      *((_BYTE *)a1 + v31) = 1;
      goto LABEL_122;
    case 2u:
      v126 = v36;
      *a1 = *a2;
      v51 = (_QWORD *)(((unint64_t)a1 + v147 + 8) & v143);
      v52 = (_QWORD *)(((unint64_t)a2 + v147 + 8) & v143);
      *v51 = *v52;
      v161 = (unint64_t)v51;
      v53 = (void *)(((unint64_t)v51 + v148) & v144);
      v54 = (const void *)(((unint64_t)v52 + v148) & v144);
      v55 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v152 + 48);
      swift_retain();
      if (v55(v54, 1, AssociatedTypeWitness))
      {
        v56 = v135;
        memcpy(v53, v54, v135);
        v57 = v15;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v152 + 16))(v53, v54, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v152 + 56))(v53, 0, 1, AssociatedTypeWitness);
        v57 = v15;
        v56 = v135;
      }
      *((_BYTE *)v53 + v56) = *((_BYTE *)v54 + v56);
      v72 = (_QWORD *)((v161 + v163 + v136) & v145);
      v73 = (_QWORD *)(((unint64_t)v52 + v163 + v136) & v145);
      *v72 = *v73;
      v74 = (void *)(((unint64_t)v72 + v24) & v146);
      v75 = (const void *)(((unint64_t)v73 + v24) & v146);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v57 + 48))(v75, 1, v164))
      {
        v76 = v137;
        memcpy(v74, v75, v137);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v57 + 16))(v74, v75, v164);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v74, 0, 1, v164);
        v76 = v137;
      }
      *((_BYTE *)v74 + v76) = *((_BYTE *)v75 + v76);
      v82 = (_QWORD *)(((unint64_t)v72 + v139 + v138) & v156);
      v83 = (_QWORD *)(((unint64_t)v73 + v139 + v138) & v156);
      *v82 = *v83;
      v84 = (void *)(((unint64_t)v82 + v149) & v126);
      v85 = (const void *)(((unint64_t)v83 + v149) & v126);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v150 + 48))(v85, 1, v153))
      {
        v86 = v140;
        memcpy(v84, v85, v140);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v150 + 16))(v84, v85, v153);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v150 + 56))(v84, 0, 1, v153);
        v86 = v140;
      }
      *((_BYTE *)v84 + v86) = *((_BYTE *)v85 + v86);
      v92 = (_QWORD *)(((v161 | 7) + v151) & 0xFFFFFFFFFFFFF8);
      v93 = (_QWORD *)(((((unint64_t)a2 + v147 + 8) & v143 | 7) + v151) & 0xFFFFFFFFFFFFFFF8);
      *v92 = *v93;
      *(_QWORD *)(((unint64_t)v92 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v93 + 15) & 0xFFFFFFFFFFFFF8);
      swift_retain();
      if (v31 > 3)
        goto LABEL_106;
      v94 = ((1 << v159) + 1) >> v159;
      if (v94 > 0xFFFA)
      {
        *(_DWORD *)((char *)a1 + v31) = 2;
        goto LABEL_122;
      }
      if (v94 <= 0xFA)
      {
LABEL_106:
        *((_BYTE *)a1 + v31) = 2;
        goto LABEL_122;
      }
      LOWORD(v95) = 2;
      goto LABEL_121;
    case 3u:
      *a1 = *a2;
      swift_retain();
      if (v31 > 3)
        goto LABEL_73;
      v58 = ((1 << v159) + 1) >> v159;
      if (v58 > 0xFFFA)
      {
        *(_DWORD *)((char *)a1 + v31) = 3;
        goto LABEL_122;
      }
      if (v58 <= 0xFA)
      {
LABEL_73:
        *((_BYTE *)a1 + v31) = 3;
        goto LABEL_122;
      }
      LOWORD(v95) = 3;
      goto LABEL_121;
    case 4u:
      v59 = *a2;
      v60 = *a2;
      *a1 = v59;
      if (v31 > 3)
        goto LABEL_77;
      v61 = ((1 << v159) + 1) >> v159;
      if (v61 > 0xFFFA)
      {
        v95 = 4;
LABEL_114:
        *(_DWORD *)((char *)a1 + v31) = v95;
      }
      else if (v61 > 0xFA)
      {
        LOWORD(v95) = 4;
LABEL_121:
        *(_WORD *)((char *)a1 + v31) = v95;
      }
      else
      {
LABEL_77:
        *((_BYTE *)a1 + v31) = 4;
      }
      goto LABEL_122;
    default:
      if (v31 > 3)
        goto LABEL_82;
      v62 = ((1 << v159) + 1) >> v159;
      v63 = 2;
      if (v62 > 0xFFFA)
        v63 = 4;
      if (v62 <= 0xFA)
LABEL_82:
        v63 = 1;
      v3 = v154;
      memcpy(a1, a2, v63 + v31);
      break;
  }
LABEL_123:
  v97 = *(_QWORD *)(v3[4] - 8);
  v98 = (((*(_QWORD *)(*(_QWORD *)(v3[2] - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(v3[3] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3[3] - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(v3[3] - 8) + 64)
       + *(unsigned __int8 *)(v97 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
  v99 = *(_DWORD *)(v97 + 84);
  v100 = *(_QWORD *)(v97 + 64);
  if (v99)
    v101 = v100;
  else
    v101 = v100 + 1;
  v102 = v101 + v98;
  v103 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v104 = *(unsigned __int8 *)(v103 + 80);
  v105 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v106 = *(unsigned __int8 *)(v105 + 80);
  v107 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v108 = *(unsigned __int8 *)(v107 + 80);
  v109 = v108 | 7;
  v110 = ((v104 + 8) & ~v104) + (v106 | 7) + *(_QWORD *)(v103 + 64);
  if (!*(_DWORD *)(v103 + 84))
    ++v110;
  v111 = (v110 + 1) & ~(v106 | 7);
  v112 = ((v106 + 8) & ~v106) + v109 + *(_QWORD *)(v105 + 64);
  if (!*(_DWORD *)(v105 + 84))
    ++v112;
  v113 = (v112 + v111 + 1) & ~v109;
  v114 = *(_DWORD *)(v107 + 84);
  v115 = ((v108 + 8) & ~v108)
       + *(_QWORD *)(v107 + 64)
       + (((v106 | v104 | v108) & 0xF8 ^ 0x1F8) & ((v106 | v104 | v108) + 8));
  if (!v114)
    ++v115;
  v116 = (v115 + v113 + 8) & 0xFFFFFFFFFFFFFFF8;
  v117 = v116 + 8;
  if (v116 + 8 <= v102)
    v117 = v102;
  v118 = ((v116 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v118 <= v117)
    v118 = v117;
  if (v118 <= 8)
    v118 = 8;
  if (v118 > 3)
    goto LABEL_142;
  v119 = ((1 << (8 * v118)) + 1) >> (8 * v118);
  v120 = 2;
  if (v119 > 0xFFFA)
    v120 = 4;
  if (v119 <= 0xFA)
LABEL_142:
    v120 = 1;
  result = a1;
  *(_QWORD *)(((unint64_t)a1 + v120 + v118 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2
                                                                                          + v120
                                                                                          + v118
                                                                                          + 7) & 0xFFFFFFFFFFFFF8);
  return result;
}

_QWORD *sub_1A29C3BB0(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  const void *v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  const void *v54;
  unsigned int v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  void *v61;
  const void *v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  const void *v66;
  size_t v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  const void *v71;
  size_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  void *v77;
  const void *v78;
  size_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  void *v84;
  const void *v85;
  uint64_t v86;
  size_t v87;
  unsigned int v88;
  uint64_t v89;
  BOOL v90;
  unint64_t v92;
  unint64_t v93;
  size_t __n;
  size_t __na;
  size_t __nb;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  size_t v106;
  size_t v107;
  size_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  size_t v115;
  size_t v116;
  size_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t AssociatedTypeWitness;

  v4 = a3[2];
  v5 = a3[3];
  v6 = a3[4];
  v103 = *(_QWORD *)(v4 - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v106 = *(_QWORD *)(v103 + 64) + v8;
  v97 = v8;
  v9 = v106 & ~v8;
  v112 = v7;
  v10 = *(_QWORD *)(v6 - 8);
  v115 = *(_QWORD *)(v7 + 64);
  v100 = *(unsigned __int8 *)(v10 + 80);
  v11 = (v115 + v100 + v9) & ~v100;
  v121 = v10;
  v12 = *(_QWORD *)(v10 + 64);
  if (!*(_DWORD *)(v10 + 84))
    ++v12;
  __n = v12;
  v128 = v12 + v11;
  v109 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v118 = v5;
  v127 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v127 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = swift_getAssociatedTypeWitness();
  v18 = v13;
  v19 = v16 | 7;
  v20 = *(_QWORD *)(v17 - 8);
  v21 = *(unsigned __int8 *)(v20 + 80);
  v22 = v21 | 7;
  v23 = v16 | v14 | v21 | 7;
  v24 = v14 + 8;
  v25 = (v14 + 8) & ~v14;
  if (*(_DWORD *)(v13 + 84))
    v26 = *(_QWORD *)(v13 + 64);
  else
    v26 = *(_QWORD *)(v13 + 64) + 1;
  v27 = v25 + 1;
  v28 = (v25 + 1 + (v16 | 7) + v26) & ~(v16 | 7);
  v29 = v16 + 8;
  v30 = (v16 + 8) & ~v16;
  v126 = v15;
  if (*(_DWORD *)(v15 + 84))
    v31 = *(_QWORD *)(v15 + 64);
  else
    v31 = *(_QWORD *)(v15 + 64) + 1;
  v32 = v30 + 1;
  v33 = (v30 + 1 + v22 + v31 + v28) & ~v22;
  if (*(_DWORD *)(v20 + 84))
    v34 = *(_QWORD *)(v20 + 64);
  else
    v34 = *(_QWORD *)(v20 + 64) + 1;
  v35 = ((v21 + 8) & ~v21) + v34 + v33 + 1;
  v36 = (v35 + (((v16 | v14 | v21) + 8) & ~v23) + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = v36 + 8;
  if (v36 + 8 <= v128)
    v37 = v128;
  v38 = ((v36 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v38 <= v37)
    v38 = v37;
  if (v38 <= 8)
    v39 = 8;
  else
    v39 = v38;
  if (v39 > 3)
    goto LABEL_22;
  v40 = ((1 << (8 * v39)) + 1) >> (8 * v39);
  if (v40 <= 0xFFFA)
  {
    if (v40 > 0xFA)
    {
      v41 = *(unsigned __int16 *)((char *)a2 + v39);
      goto LABEL_23;
    }
LABEL_22:
    v41 = *((unsigned __int8 *)a2 + v39);
LABEL_23:
    v42 = a2;
    goto LABEL_25;
  }
  v42 = a2;
  v41 = *(_DWORD *)((char *)a2 + v39);
LABEL_25:
  if (v41 >= 5)
  {
    if (v39 <= 3)
      v43 = v39;
    else
      v43 = 4;
    __asm { BR              X15 }
  }
  v44 = ~v23;
  v45 = ~v14;
  v46 = ~v19;
  v47 = ~v16;
  switch(v41)
  {
    case 0u:
      v48 = a1;
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v103 + 32))(a1, v42, v109);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v112 + 32))(((unint64_t)a1 + v106) & ~v97, ((unint64_t)v42 + v106) & ~v97, v118);
      v49 = (void *)(((((unint64_t)a1 + v106) & ~v97) + v115 + v100) & ~v100);
      v50 = (const void *)(((((unint64_t)v42 + v106) & ~v97) + v115 + v100) & ~v100);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v121 + 48))(v50, 1, v6))
      {
        memcpy(v49, v50, __n);
        if (v39 > 3)
        {
LABEL_68:
          *((_BYTE *)a1 + v39) = 0;
          if (v39 <= 3)
            goto LABEL_80;
          goto LABEL_83;
        }
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v121 + 32))(v49, v50, v6);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v49, 0, 1, v6);
        if (v39 > 3)
          goto LABEL_68;
      }
      v55 = ((1 << (8 * v39)) + 1) >> (8 * v39);
      if (v55 > 0xFFFA)
      {
        *(_DWORD *)((char *)a1 + v39) = 0;
        goto LABEL_96;
      }
      if (v55 > 0xFA)
      {
        *(_WORD *)((char *)a1 + v39) = 0;
        goto LABEL_96;
      }
      goto LABEL_68;
    case 1u:
      v123 = ~v22;
      v125 = v27;
      __nb = ~v21;
      v99 = v19;
      v102 = v29;
      v105 = v32;
      v108 = v31;
      v111 = v21 + 8;
      v114 = *(_QWORD *)(v17 - 8);
      v117 = v34;
      v120 = v35;
      v130 = v17;
      *a1 = *v42;
      v59 = ((unint64_t)a1 + v23 + 8) & v44;
      v60 = (_QWORD *)(((unint64_t)v42 + v23 + 8) & v44);
      *(_QWORD *)v59 = *v60;
      v61 = (void *)((v24 + v59) & v45);
      v93 = (unint64_t)v60;
      v62 = (const void *)(((unint64_t)v60 + v24) & v45);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v62, 1, AssociatedTypeWitness))
      {
        memcpy(v61, v62, v26);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v61, v62, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v61, 0, 1, AssociatedTypeWitness);
      }
      *((_BYTE *)v61 + v26) = *((_BYTE *)v62 + v26);
      v75 = (_QWORD *)((v59 + v99 + v125 + v26) & v46);
      v76 = (_QWORD *)((v93 + v99 + v125 + v26) & v46);
      *v75 = *v76;
      v77 = (void *)(((unint64_t)v75 + v102) & v47);
      v78 = (const void *)(((unint64_t)v76 + v102) & v47);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v126 + 48))(v78, 1, v127))
      {
        v79 = v108;
        memcpy(v77, v78, v108);
        v42 = a2;
        v81 = v111;
        v80 = v114;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v126 + 32))(v77, v78, v127);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v77, 0, 1, v127);
        v42 = a2;
        v81 = v111;
        v80 = v114;
        v79 = v108;
      }
      *((_BYTE *)v77 + v79) = *((_BYTE *)v78 + v79);
      v82 = (_QWORD *)(((unint64_t)v75 + v22 + v105 + v79) & v123);
      v83 = (_QWORD *)(((unint64_t)v76 + v22 + v105 + v79) & v123);
      *v82 = *v83;
      v84 = (void *)(((unint64_t)v82 + v81) & __nb);
      v85 = (const void *)(((unint64_t)v83 + v81) & __nb);
      v86 = v80;
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v80 + 48))(v85, 1, v130))
      {
        v87 = v117;
        memcpy(v84, v85, v117);
        v48 = a1;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v86 + 32))(v84, v85, v130);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v84, 0, 1, v130);
        v48 = a1;
        v87 = v117;
      }
      *((_BYTE *)v84 + v87) = *((_BYTE *)v85 + v87);
      *(_QWORD *)(((v59 | 7) + v120) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v93 | 7) + v120) & 0xFFFFFFFFFFFFF8);
      if (v39 > 3)
        goto LABEL_78;
      v55 = ((1 << (8 * v39)) + 1) >> (8 * v39);
      if (v55 > 0xFFFA)
      {
        *(_DWORD *)((char *)v48 + v39) = 1;
      }
      else
      {
        if (v55 <= 0xFA)
        {
LABEL_78:
          v56 = 1;
          goto LABEL_79;
        }
        *(_WORD *)((char *)v48 + v39) = 1;
      }
      goto LABEL_96;
    case 2u:
      v122 = ~v22;
      v124 = v27;
      __na = ~v21;
      v98 = v19;
      v101 = v29;
      v104 = v32;
      v107 = v31;
      v110 = v21 + 8;
      v113 = *(_QWORD *)(v17 - 8);
      v116 = v34;
      v119 = v35;
      v129 = v17;
      *a1 = *v42;
      v51 = ((unint64_t)a1 + v23 + 8) & v44;
      v52 = (_QWORD *)(((unint64_t)v42 + v23 + 8) & v44);
      *(_QWORD *)v51 = *v52;
      v53 = (void *)((v24 + v51) & v45);
      v92 = (unint64_t)v52;
      v54 = (const void *)(((unint64_t)v52 + v24) & v45);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v54, 1, AssociatedTypeWitness))
      {
        memcpy(v53, v54, v26);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v53, v54, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v53, 0, 1, AssociatedTypeWitness);
      }
      *((_BYTE *)v53 + v26) = *((_BYTE *)v54 + v26);
      v63 = (_QWORD *)((v51 + v98 + v124 + v26) & v46);
      v64 = (_QWORD *)((v92 + v98 + v124 + v26) & v46);
      *v63 = *v64;
      v65 = (void *)(((unint64_t)v63 + v101) & v47);
      v66 = (const void *)(((unint64_t)v64 + v101) & v47);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v126 + 48))(v66, 1, v127))
      {
        v67 = v107;
        memcpy(v65, v66, v107);
        v42 = a2;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v126 + 32))(v65, v66, v127);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v65, 0, 1, v127);
        v42 = a2;
        v67 = v107;
      }
      *((_BYTE *)v65 + v67) = *((_BYTE *)v66 + v67);
      v68 = (_QWORD *)(((unint64_t)v63 + v22 + v104 + v67) & v122);
      v69 = (_QWORD *)(((unint64_t)v64 + v22 + v104 + v67) & v122);
      *v68 = *v69;
      v70 = (void *)(((unint64_t)v68 + v110) & __na);
      v71 = (const void *)(((unint64_t)v69 + v110) & __na);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v113 + 48))(v71, 1, v129))
      {
        v72 = v116;
        memcpy(v70, v71, v116);
        v48 = a1;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v113 + 32))(v70, v71, v129);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v113 + 56))(v70, 0, 1, v129);
        v48 = a1;
        v72 = v116;
      }
      *((_BYTE *)v70 + v72) = *((_BYTE *)v71 + v72);
      v73 = (_QWORD *)(((v51 | 7) + v119) & 0xFFFFFFFFFFFFF8);
      v74 = (_QWORD *)(((v92 | 7) + v119) & 0xFFFFFFFFFFFFFFF8);
      *v73 = *v74;
      *(_QWORD *)(((unint64_t)v73 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v74 + 15) & 0xFFFFFFFFFFFFF8);
      if (v39 > 3)
        goto LABEL_64;
      v55 = ((1 << (8 * v39)) + 1) >> (8 * v39);
      if (v55 > 0xFFFA)
      {
        *(_DWORD *)((char *)v48 + v39) = 2;
      }
      else
      {
        if (v55 <= 0xFA)
        {
LABEL_64:
          v56 = 2;
          goto LABEL_79;
        }
        *(_WORD *)((char *)v48 + v39) = 2;
      }
      goto LABEL_96;
    case 3u:
      v48 = a1;
      *a1 = *v42;
      if (v39 > 3)
        goto LABEL_40;
      v55 = ((1 << (8 * v39)) + 1) >> (8 * v39);
      if (v55 > 0xFFFA)
      {
        *(_DWORD *)((char *)a1 + v39) = 3;
      }
      else
      {
        if (v55 <= 0xFA)
        {
LABEL_40:
          v56 = 3;
          goto LABEL_79;
        }
        *(_WORD *)((char *)a1 + v39) = 3;
      }
      goto LABEL_96;
    case 4u:
      v48 = a1;
      *a1 = *v42;
      if (v39 > 3)
        goto LABEL_44;
      v55 = ((1 << (8 * v39)) + 1) >> (8 * v39);
      if (v55 > 0xFFFA)
      {
        *(_DWORD *)((char *)a1 + v39) = 4;
        goto LABEL_96;
      }
      if (v55 > 0xFA)
      {
        *(_WORD *)((char *)a1 + v39) = 4;
LABEL_96:
        v90 = v55 > 0xFFFA;
        v89 = 2;
        if (v90)
          v89 = 4;
        goto LABEL_98;
      }
LABEL_44:
      v56 = 4;
LABEL_79:
      *((_BYTE *)v48 + v39) = v56;
      if (v39 > 3)
        goto LABEL_83;
LABEL_80:
      v88 = ((1 << (8 * v39)) + 1) >> (8 * v39);
      v89 = 2;
      if (v88 > 0xFFFA)
        v89 = 4;
      if (v88 <= 0xFA)
LABEL_83:
        v89 = 1;
LABEL_98:
      *(_QWORD *)(((unint64_t)v48 + v89 + v39 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v42
                                                                                             + v89
                                                                                             + v39
                                                                                             + 7) & 0xFFFFFFFFFFFFF8);
      return v48;
    default:
      if (v39 > 3)
        goto LABEL_49;
      v57 = ((1 << (8 * v39)) + 1) >> (8 * v39);
      v58 = 2;
      if (v57 > 0xFFFA)
        v58 = 4;
      if (v57 <= 0xFA)
LABEL_49:
        v58 = 1;
      v48 = a1;
      memcpy(a1, v42, v58 + v39);
      if (v39 > 3)
        goto LABEL_83;
      goto LABEL_80;
  }
}

id *sub_1A29C46D8(id *a1, id *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  void *v47;
  const void *v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  const void *v52;
  size_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  const void *v62;
  size_t v63;
  uint64_t v64;
  unsigned int v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  void *v69;
  const void *v70;
  uint64_t v71;
  size_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  const void *v77;
  uint64_t v78;
  size_t v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  const void *v83;
  size_t v84;
  _QWORD *v85;
  _QWORD *v86;
  void *v87;
  const void *v88;
  size_t v89;
  _QWORD *v90;
  _QWORD *v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int v117;
  uint64_t v118;
  id *result;
  uint64_t v120;
  uint64_t v121;
  size_t __n;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  size_t v130;
  uint64_t v131;
  size_t v132;
  uint64_t v133;
  uint64_t v134;
  size_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t AssociatedTypeWitness;
  unint64_t v152;
  char v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;

  v3 = a3;
  if (a1 == a2)
    goto LABEL_123;
  v4 = a3[2];
  v5 = v3[3];
  v124 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v125 = *(_QWORD *)(v124 + 64) + v7;
  v149 = v7;
  v8 = v125 & ~v7;
  v127 = v6;
  v9 = v3[4];
  v10 = *(_QWORD *)(v9 - 8);
  v128 = *(_QWORD *)(v6 + 64);
  v154 = *(unsigned __int8 *)(v10 + 80);
  v11 = (v128 + v154 + v8) & ~v154;
  v136 = v10;
  v12 = *(_QWORD *)(v10 + 64);
  if (!*(_DWORD *)(v10 + 84))
    ++v12;
  __n = v12;
  v152 = v12 + v11;
  v126 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v129 = v5;
  v158 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v158 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v16 | 7;
  v148 = v3;
  v146 = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(v146 - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = v19 | 7;
  v21 = v16 | v14 | v19 | 7;
  v141 = v14 + 8;
  v147 = v13;
  if (*(_DWORD *)(v13 + 84))
    v22 = *(_QWORD *)(v13 + 64);
  else
    v22 = *(_QWORD *)(v13 + 64) + 1;
  v130 = v22;
  v131 = ((v14 + 8) & ~v14) + v22 + 1;
  v23 = v131 + v17;
  v157 = v16 | 7;
  v24 = v16 + 8;
  if (*(_DWORD *)(v15 + 84))
    v25 = *(_QWORD *)(v15 + 64);
  else
    v25 = *(_QWORD *)(v15 + 64) + 1;
  v132 = v25;
  v133 = ((v16 + 8) & ~v16) + v25 + 1;
  v26 = v133 + v20;
  v143 = v19 + 8;
  v144 = *(_QWORD *)(v146 - 8);
  if (*(_DWORD *)(v18 + 84))
    v27 = *(_QWORD *)(v18 + 64);
  else
    v27 = *(_QWORD *)(v18 + 64) + 1;
  v135 = v27;
  v145 = ((v19 + 8) & ~v19) + v27 + ((v133 + v20 + (v23 & ~v17)) & ~v20) + 1;
  v28 = (v145 + (((v16 | v14 | v19) + 8) & ~v21) + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = v28 + 8;
  if (v28 + 8 <= v152)
    v29 = v152;
  v30 = ((v28 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v30 <= v29)
    v30 = v29;
  if (v30 <= 8)
    v31 = 8;
  else
    v31 = v30;
  if (v31 > 3)
    goto LABEL_23;
  v32 = ((1 << (8 * v31)) + 1) >> (8 * v31);
  if (v32 <= 0xFFFA)
  {
    if (v32 > 0xFA)
    {
      v33 = *(unsigned __int16 *)((char *)a1 + v31);
      if (v33 < 5)
        goto LABEL_33;
      goto LABEL_29;
    }
LABEL_23:
    v33 = *((unsigned __int8 *)a1 + v31);
    if (v33 < 5)
      goto LABEL_33;
LABEL_29:
    if (v31 <= 3)
      v34 = v31;
    else
      v34 = 4;
    __asm { BR              X13 }
  }
  v33 = *(_DWORD *)((char *)a1 + v31);
  if (v33 >= 5)
    goto LABEL_29;
LABEL_33:
  v153 = 8 * v31;
  v123 = ~v149;
  v35 = ~v154;
  v140 = v16 | v14 | v19 | 7;
  v137 = ~v21;
  v138 = ~v14;
  v139 = ~v157;
  v36 = ~v16;
  v134 = v19 | 7;
  v142 = ~v20;
  v150 = ~v19;
  switch(v33)
  {
    case 0u:
      (*(void (**)(id *, uint64_t))(v124 + 8))(a1, v126);
      (*(void (**)(unint64_t, uint64_t))(v127 + 8))(((unint64_t)a1 + v125) & v123, v129);
      v37 = ((((unint64_t)a1 + v125) & v123) + v128 + v154) & v35;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v136 + 48))(v37, 1, v9))
        (*(void (**)(unint64_t, uint64_t))(v136 + 8))(v37, v9);
      break;
    case 1u:
      v120 = ~v154;
      v121 = v36;
      swift_release();
      v41 = ((unint64_t)a1 + v140 + 8) & v137;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))((v141 + v41) & v138, 1, AssociatedTypeWitness))(*(void (**)(uint64_t, uint64_t))(v147 + 8))((v141 + v41) & v138, AssociatedTypeWitness);
      v42 = (v23 + v41) & v139;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))((v24 + v42) & v121, 1, v158))
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))((v24 + v42) & v121, v158);
      v43 = (v143 + ((v26 + v42) & v142)) & v150;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v144 + 48))(v43, 1, v146))
        (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v43, v146);
      goto LABEL_51;
    case 2u:
      v120 = ~v154;
      v121 = v36;
      swift_release();
      v38 = ((unint64_t)a1 + v140 + 8) & v137;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))((v141 + v38) & v138, 1, AssociatedTypeWitness))(*(void (**)(uint64_t, uint64_t))(v147 + 8))((v141 + v38) & v138, AssociatedTypeWitness);
      v39 = (v23 + v38) & v139;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))((v24 + v39) & v121, 1, v158))
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))((v24 + v39) & v121, v158);
      v40 = (v143 + ((v26 + v39) & v142)) & v150;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v144 + 48))(v40, 1, v146))
        (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v40, v146);
LABEL_51:
      swift_release();
      v35 = v120;
      v36 = v121;
      break;
    case 3u:
      swift_release();
      break;
    case 4u:

      break;
    default:
      break;
  }
  if (v31 > 3)
    goto LABEL_55;
  v44 = ((1 << v153) + 1) >> v153;
  if (v44 <= 0xFFFA)
  {
    if (v44 > 0xFA)
    {
      v45 = *(unsigned __int16 *)((char *)a2 + v31);
      if (v45 < 5)
        goto LABEL_64;
      goto LABEL_60;
    }
LABEL_55:
    v45 = *((unsigned __int8 *)a2 + v31);
    if (v45 < 5)
      goto LABEL_64;
LABEL_60:
    if (v31 <= 3)
      v46 = v31;
    else
      v46 = 4;
    __asm { BR              X12 }
  }
  v45 = *(_DWORD *)((char *)a2 + v31);
  if (v45 >= 5)
    goto LABEL_60;
LABEL_64:
  switch(v45)
  {
    case 0u:
      (*(void (**)(id *, id *, uint64_t))(v124 + 32))(a1, a2, v126);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v127 + 32))(((unint64_t)a1 + v125) & v123, ((unint64_t)a2 + v125) & v123, v129);
      v47 = (void *)(((((unint64_t)a1 + v125) & v123) + v128 + v154) & v35);
      v48 = (const void *)(((((unint64_t)a2 + v125) & v123) + v128 + v154) & v35);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v136 + 48))(v48, 1, v9))
      {
        memcpy(v47, v48, __n);
        if (v31 > 3)
          goto LABEL_89;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v136 + 32))(v47, v48, v9);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v47, 0, 1, v9);
        if (v31 > 3)
        {
LABEL_89:
          *((_BYTE *)a1 + v31) = 0;
          goto LABEL_122;
        }
      }
      v65 = ((1 << v153) + 1) >> v153;
      if (v65 > 0xFFFA)
      {
        *(_DWORD *)((char *)a1 + v31) = 0;
      }
      else
      {
        if (v65 <= 0xFA)
          goto LABEL_89;
        *(_WORD *)((char *)a1 + v31) = 0;
      }
LABEL_122:
      v3 = v148;
      break;
    case 1u:
      *a1 = *a2;
      v59 = (_QWORD *)(((unint64_t)a1 + v140 + 8) & v137);
      v60 = (_QWORD *)(((unint64_t)a2 + v140 + 8) & v137);
      *v59 = *v60;
      v156 = (unint64_t)v59;
      v61 = (void *)(((unint64_t)v59 + v141) & v138);
      v62 = (const void *)(((unint64_t)v60 + v141) & v138);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v147 + 48))(v62, 1, AssociatedTypeWitness))
      {
        v63 = v130;
        memcpy(v61, v62, v130);
        v64 = v15;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v147 + 32))(v61, v62, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v147 + 56))(v61, 0, 1, AssociatedTypeWitness);
        v64 = v15;
        v63 = v130;
      }
      *((_BYTE *)v61 + v63) = *((_BYTE *)v62 + v63);
      v73 = (_QWORD *)((v156 + v157 + v131) & v139);
      v74 = (_QWORD *)(((unint64_t)v60 + v157 + v131) & v139);
      *v73 = *v74;
      v75 = v36;
      v76 = (void *)(((unint64_t)v73 + v24) & v36);
      v77 = (const void *)(((unint64_t)v74 + v24) & v75);
      v78 = v64;
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v64 + 48))(v77, 1, v158))
      {
        v79 = v132;
        memcpy(v76, v77, v132);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v78 + 32))(v76, v77, v158);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v76, 0, 1, v158);
        v79 = v132;
      }
      *((_BYTE *)v76 + v79) = *((_BYTE *)v77 + v79);
      v85 = (_QWORD *)(((unint64_t)v73 + v134 + v133) & v142);
      v86 = (_QWORD *)(((unint64_t)v74 + v134 + v133) & v142);
      *v85 = *v86;
      v87 = (void *)(((unint64_t)v85 + v143) & v150);
      v88 = (const void *)(((unint64_t)v86 + v143) & v150);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v144 + 48))(v88, 1, v146))
      {
        v89 = v135;
        memcpy(v87, v88, v135);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v144 + 32))(v87, v88, v146);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v87, 0, 1, v146);
        v89 = v135;
      }
      *((_BYTE *)v87 + v89) = *((_BYTE *)v88 + v89);
      *(_QWORD *)(((v156 | 7) + v145) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((((unint64_t)a2 + v140 + 8) & v137 | 7)
                                                                         + v145) & 0xFFFFFFFFFFFFF8);
      if (v31 > 3)
        goto LABEL_111;
      v93 = 1;
      v94 = ((1 << v153) + 1) >> v153;
      if (v94 > 0xFFFA)
        goto LABEL_114;
      if (v94 > 0xFA)
        goto LABEL_121;
LABEL_111:
      *((_BYTE *)a1 + v31) = 1;
      goto LABEL_122;
    case 2u:
      *a1 = *a2;
      v49 = (_QWORD *)(((unint64_t)a1 + v140 + 8) & v137);
      v50 = (_QWORD *)(((unint64_t)a2 + v140 + 8) & v137);
      *v49 = *v50;
      v155 = (unint64_t)v49;
      v51 = (void *)(((unint64_t)v49 + v141) & v138);
      v52 = (const void *)(((unint64_t)v50 + v141) & v138);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v147 + 48))(v52, 1, AssociatedTypeWitness))
      {
        v53 = v130;
        memcpy(v51, v52, v130);
        v54 = v15;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v147 + 32))(v51, v52, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v147 + 56))(v51, 0, 1, AssociatedTypeWitness);
        v54 = v15;
        v53 = v130;
      }
      *((_BYTE *)v51 + v53) = *((_BYTE *)v52 + v53);
      v66 = (_QWORD *)((v155 + v157 + v131) & v139);
      v67 = (_QWORD *)(((unint64_t)v50 + v157 + v131) & v139);
      *v66 = *v67;
      v68 = v36;
      v69 = (void *)(((unint64_t)v66 + v24) & v36);
      v70 = (const void *)(((unint64_t)v67 + v24) & v68);
      v71 = v54;
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v54 + 48))(v70, 1, v158))
      {
        v72 = v132;
        memcpy(v69, v70, v132);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v71 + 32))(v69, v70, v158);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v69, 0, 1, v158);
        v72 = v132;
      }
      *((_BYTE *)v69 + v72) = *((_BYTE *)v70 + v72);
      v80 = (_QWORD *)(((unint64_t)v66 + v134 + v133) & v142);
      v81 = (_QWORD *)(((unint64_t)v67 + v134 + v133) & v142);
      *v80 = *v81;
      v82 = (void *)(((unint64_t)v80 + v143) & v150);
      v83 = (const void *)(((unint64_t)v81 + v143) & v150);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v144 + 48))(v83, 1, v146))
      {
        v84 = v135;
        memcpy(v82, v83, v135);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v144 + 32))(v82, v83, v146);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v82, 0, 1, v146);
        v84 = v135;
      }
      *((_BYTE *)v82 + v84) = *((_BYTE *)v83 + v84);
      v90 = (_QWORD *)(((v155 | 7) + v145) & 0xFFFFFFFFFFFFF8);
      v91 = (_QWORD *)(((((unint64_t)a2 + v140 + 8) & v137 | 7) + v145) & 0xFFFFFFFFFFFFFFF8);
      *v90 = *v91;
      *(_QWORD *)(((unint64_t)v90 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v91 + 15) & 0xFFFFFFFFFFFFF8);
      if (v31 > 3)
        goto LABEL_106;
      v92 = ((1 << v153) + 1) >> v153;
      if (v92 > 0xFFFA)
      {
        *(_DWORD *)((char *)a1 + v31) = 2;
        goto LABEL_122;
      }
      if (v92 <= 0xFA)
      {
LABEL_106:
        *((_BYTE *)a1 + v31) = 2;
        goto LABEL_122;
      }
      LOWORD(v93) = 2;
      goto LABEL_121;
    case 3u:
      *a1 = *a2;
      if (v31 > 3)
        goto LABEL_73;
      v55 = ((1 << v153) + 1) >> v153;
      if (v55 > 0xFFFA)
      {
        *(_DWORD *)((char *)a1 + v31) = 3;
        goto LABEL_122;
      }
      if (v55 <= 0xFA)
      {
LABEL_73:
        *((_BYTE *)a1 + v31) = 3;
        goto LABEL_122;
      }
      LOWORD(v93) = 3;
      goto LABEL_121;
    case 4u:
      *a1 = *a2;
      if (v31 > 3)
        goto LABEL_77;
      v56 = ((1 << v153) + 1) >> v153;
      if (v56 > 0xFFFA)
      {
        v93 = 4;
LABEL_114:
        *(_DWORD *)((char *)a1 + v31) = v93;
      }
      else if (v56 > 0xFA)
      {
        LOWORD(v93) = 4;
LABEL_121:
        *(_WORD *)((char *)a1 + v31) = v93;
      }
      else
      {
LABEL_77:
        *((_BYTE *)a1 + v31) = 4;
      }
      goto LABEL_122;
    default:
      if (v31 > 3)
        goto LABEL_82;
      v57 = ((1 << v153) + 1) >> v153;
      v58 = 2;
      if (v57 > 0xFFFA)
        v58 = 4;
      if (v57 <= 0xFA)
LABEL_82:
        v58 = 1;
      v3 = v148;
      memcpy(a1, a2, v58 + v31);
      break;
  }
LABEL_123:
  v95 = *(_QWORD *)(v3[4] - 8);
  v96 = (((*(_QWORD *)(*(_QWORD *)(v3[2] - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(v3[3] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3[3] - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(v3[3] - 8) + 64)
       + *(unsigned __int8 *)(v95 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80);
  v97 = *(_DWORD *)(v95 + 84);
  v98 = *(_QWORD *)(v95 + 64);
  if (v97)
    v99 = v98;
  else
    v99 = v98 + 1;
  v100 = v99 + v96;
  v101 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v102 = *(unsigned __int8 *)(v101 + 80);
  v103 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v104 = *(unsigned __int8 *)(v103 + 80);
  v105 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v106 = *(unsigned __int8 *)(v105 + 80);
  v107 = v106 | 7;
  v108 = ((v102 + 8) & ~v102) + (v104 | 7) + *(_QWORD *)(v101 + 64);
  if (!*(_DWORD *)(v101 + 84))
    ++v108;
  v109 = (v108 + 1) & ~(v104 | 7);
  v110 = ((v104 + 8) & ~v104) + v107 + *(_QWORD *)(v103 + 64);
  if (!*(_DWORD *)(v103 + 84))
    ++v110;
  v111 = (v110 + v109 + 1) & ~v107;
  v112 = *(_DWORD *)(v105 + 84);
  v113 = ((v106 + 8) & ~v106)
       + *(_QWORD *)(v105 + 64)
       + (((v104 | v102 | v106) & 0xF8 ^ 0x1F8) & ((v104 | v102 | v106) + 8));
  if (!v112)
    ++v113;
  v114 = (v113 + v111 + 8) & 0xFFFFFFFFFFFFFFF8;
  v115 = v114 + 8;
  if (v114 + 8 <= v100)
    v115 = v100;
  v116 = ((v114 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v116 <= v115)
    v116 = v115;
  if (v116 <= 8)
    v116 = 8;
  if (v116 > 3)
    goto LABEL_142;
  v117 = ((1 << (8 * v116)) + 1) >> (8 * v116);
  v118 = 2;
  if (v117 > 0xFFFA)
    v118 = 4;
  if (v117 <= 0xFA)
LABEL_142:
    v118 = 1;
  result = a1;
  *(_QWORD *)(((unint64_t)a1 + v118 + v116 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2
                                                                                          + v118
                                                                                          + v116
                                                                                          + 7) & 0xFFFFFFFFFFFFF8);
  return result;
}

uint64_t sub_1A29C5738(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  int v25;
  unsigned int v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  char v36;
  unsigned int v37;
  int v38;
  char v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  char v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  int v60;
  unsigned int v61;
  unsigned int v63;
  int v64;
  int v65;
  unint64_t v67;

  v3 = *(_QWORD *)(a3[4] - 8);
  v4 = (((*(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(a3[3] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a3[3] - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64)
      + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_DWORD *)(v3 + 84);
  v6 = *(_QWORD *)(v3 + 64);
  if (v5)
    v7 = v6;
  else
    v7 = v6 + 1;
  v67 = v7 + v4;
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v13 | 7;
  v15 = ((v9 + 8) & ~v9) + (v11 | 7) + *(_QWORD *)(v8 + 64);
  if (!*(_DWORD *)(v8 + 84))
    ++v15;
  v16 = (v15 + 1) & ~(v11 | 7);
  v17 = ((v11 + 8) & ~v11) + v14 + *(_QWORD *)(v10 + 64);
  if (!*(_DWORD *)(v10 + 84))
    ++v17;
  v18 = (v17 + v16 + 1) & ~v14;
  v19 = *(_DWORD *)(v12 + 84);
  v20 = ((v13 + 8) & ~v13)
      + *(_QWORD *)(v12 + 64)
      + (((v11 | v9 | v13) & 0xF8 ^ 0x1F8) & ((v11 | v9 | v13) + 8));
  if (!v19)
    ++v20;
  v21 = (v20 + v18 + 8) & 0xFFFFFFFFFFFFFFF8;
  v22 = v21 + 8;
  if (v21 + 8 <= v67)
    v22 = v67;
  v23 = ((v21 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v23 <= v22)
    v23 = v22;
  if (v23 <= 8)
    v23 = 8;
  v24 = 8 * v23;
  if (v23 > 3)
  {
    v25 = 6;
LABEL_18:
    v26 = a2;
    v27 = 8;
    goto LABEL_19;
  }
  v29 = ((1 << v24) + 1) >> v24;
  if (v29 > 0xFFFA)
  {
    v28 = 0x7FFFFFFF;
    v26 = a2;
    if (v23 > 3)
      goto LABEL_33;
    goto LABEL_28;
  }
  v25 = v29 + 5;
  if (v29 <= 0xFA)
    goto LABEL_18;
  v27 = 16;
  v26 = a2;
LABEL_19:
  v28 = (1 << v27) - v25;
  if ((v28 & 0x80000000) != 0)
  {
    v28 = 0x7FFFFFFF;
    if (v23 > 3)
      goto LABEL_33;
  }
  else if (v23 > 3)
  {
    goto LABEL_33;
  }
LABEL_28:
  v30 = ((1 << v24) + 1) >> v24;
  v31 = 2;
  if (v30 > 0xFFFA)
    v31 = 4;
  if (v30 > 0xFA)
  {
    if (!v26)
      return 0;
    goto LABEL_34;
  }
LABEL_33:
  v31 = 1;
  if (!v26)
    return 0;
LABEL_34:
  if (v28 < v26)
  {
    if (((((v23 + v31 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v32 = 2;
    else
      v32 = v26 - v28 + 1;
    if (v32 >= 0x10000)
      v33 = 4;
    else
      v33 = 2;
    if (v32 < 0x100)
      v33 = 1;
    if (v32 >= 2)
      v34 = v33;
    else
      v34 = 0;
    __asm { BR              X15 }
  }
  if (!v28)
    return 0;
  if (v23 > 3)
  {
    v35 = 6;
LABEL_50:
    v36 = 8;
    goto LABEL_51;
  }
  v41 = ((1 << v24) + 1) >> v24;
  if (v41 > 0xFFFA)
  {
LABEL_61:
    v37 = 0x7FFFFFFF;
    if (v23 > 3)
      goto LABEL_53;
    goto LABEL_62;
  }
  v35 = v41 + 5;
  if (v41 <= 0xFA)
    goto LABEL_50;
  v36 = 16;
LABEL_51:
  v37 = (1 << v36) - v35;
  if ((v37 & 0x80000000) != 0)
    goto LABEL_61;
  if (v23 > 3)
  {
LABEL_53:
    v38 = 6;
LABEL_54:
    v39 = 8;
    goto LABEL_55;
  }
LABEL_62:
  v42 = ((1 << v24) + 1) >> v24;
  if (v42 > 0xFFFA)
  {
LABEL_65:
    if (v37 != 0x7FFFFFFF)
      return 0;
    goto LABEL_66;
  }
  v38 = v42 + 5;
  if (v42 <= 0xFA)
    goto LABEL_54;
  v39 = 16;
LABEL_55:
  v40 = (1 << v39) - v38;
  if (v40 < 0)
    goto LABEL_65;
  if (v40 != v37)
    return 0;
LABEL_66:
  if (v23 > 3)
  {
    v43 = 6;
LABEL_68:
    v44 = 8;
    goto LABEL_69;
  }
  v46 = ((1 << v24) + 1) >> v24;
  if (v46 > 0xFFFA)
    goto LABEL_75;
  v43 = v46 + 5;
  if (v46 <= 0xFA)
    goto LABEL_68;
  v44 = 16;
LABEL_69:
  v45 = (1 << v44) - v43;
  if ((v45 & 0x80000000) == 0)
  {
    if (v23 > 3)
      goto LABEL_79;
    goto LABEL_76;
  }
LABEL_75:
  v45 = 0x7FFFFFFF;
  if (v23 > 3)
  {
LABEL_79:
    v48 = 1;
    goto LABEL_80;
  }
LABEL_76:
  v47 = ((1 << v24) + 1) >> v24;
  v48 = 2;
  if (v47 > 0xFFFA)
    v48 = 4;
  if (v47 <= 0xFA)
    goto LABEL_79;
LABEL_80:
  if (!v37)
    return 0;
  v49 = v37 - v45;
  if (v37 <= v45)
    goto LABEL_98;
  v50 = v48 + v23;
  v51 = 8 * (v48 + v23);
  if (v50 > 3)
  {
LABEL_83:
    v52 = *(unsigned __int8 *)(a1 + v50);
    goto LABEL_90;
  }
  v53 = ((v49 + ~(-1 << v51)) >> v51) + 1;
  if (HIWORD(v53))
  {
    v52 = *(_DWORD *)(a1 + v50);
  }
  else
  {
    if (v53 <= 0xFF)
    {
      if (v53 < 2)
      {
LABEL_98:
        if (v45)
        {
          if (v23 <= 3)
          {
            v63 = ((1 << v24) + 1) >> v24;
            if (v63 > 0xFFFA)
            {
              v57 = *(_DWORD *)(a1 + v23);
              v58 = ~v57;
LABEL_108:
              v61 = 0x7FFFFFFF;
LABEL_109:
              if (v61 > v58)
                return -v57;
              else
                return 0;
            }
            v60 = v63 + 5;
            if (v63 > 0xFA)
            {
              v65 = *(unsigned __int16 *)(a1 + v23);
              v57 = v65 | 0xFFFF0000;
              v58 = v65 ^ 0xFFFF;
              v59 = 16;
            }
            else
            {
              v64 = *(unsigned __int8 *)(a1 + v23);
              v57 = v64 | 0xFFFFFF00;
              v58 = v64 ^ 0xFF;
              v59 = 8;
            }
          }
          else
          {
            v56 = *(unsigned __int8 *)(a1 + v23);
            v57 = v56 | 0xFFFFFF00;
            v58 = v56 ^ 0xFF;
            v59 = 8;
            v60 = 6;
          }
          v61 = (1 << v59) - v60;
          if ((v61 & 0x80000000) == 0)
            goto LABEL_109;
          goto LABEL_108;
        }
        return 0;
      }
      goto LABEL_83;
    }
    v52 = *(unsigned __int16 *)(a1 + v50);
  }
LABEL_90:
  if (!v52)
    goto LABEL_98;
  v54 = (v52 - 1) << v51;
  if (v50 > 3)
    v54 = 0;
  if ((_DWORD)v50)
  {
    if (v50 <= 3)
      v55 = v50;
    else
      v55 = 4;
    __asm { BR              X12 }
  }
  return v45 + v54 + 1;
}

void sub_1A29C5D94(unsigned int *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  size_t v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  unint64_t v40;

  v4 = *(_QWORD *)(a4[4] - 8);
  v5 = (((*(_QWORD *)(*(_QWORD *)(a4[2] - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(a4[3] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a4[3] - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64)
      + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_DWORD *)(v4 + 84);
  v7 = *(_QWORD *)(v4 + 64);
  if (v6)
    v8 = v7;
  else
    v8 = v7 + 1;
  v40 = v8 + v5;
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v14 | 7;
  v16 = ((v10 + 8) & ~v10) + (v12 | 7) + *(_QWORD *)(v9 + 64);
  if (!*(_DWORD *)(v9 + 84))
    ++v16;
  v17 = (v16 + 1) & ~(v12 | 7);
  v18 = ((v12 + 8) & ~v12) + v15 + *(_QWORD *)(v11 + 64);
  if (!*(_DWORD *)(v11 + 84))
    ++v18;
  v19 = (v18 + v17 + 1) & ~v15;
  v20 = *(_DWORD *)(v13 + 84);
  v21 = ((v14 + 8) & ~v14)
      + *(_QWORD *)(v13 + 64)
      + (((v12 | v10 | v14) & 0xF8 ^ 0x1F8) & ((v12 | v10 | v14) + 8));
  if (!v20)
    ++v21;
  v22 = (v21 + v19 + 8) & 0xFFFFFFFFFFFFFFF8;
  v23 = v22 + 8;
  if (v22 + 8 <= v40)
    v23 = v40;
  v24 = ((v22 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v24 <= v23)
    v24 = v23;
  if (v24 <= 8)
    v24 = 8;
  v25 = 8 * v24;
  if (v24 <= 3)
  {
    v34 = ((1 << v25) + 1) >> v25;
    if (v34 > 0xFFFA)
    {
      v31 = 0x7FFFFFFF;
      v27 = a1;
      v28 = a3;
      v29 = a2;
      if (v24 > 3)
        goto LABEL_30;
      goto LABEL_22;
    }
    v26 = v34 + 5;
    if (v34 > 0xFA)
    {
      v30 = 16;
      v27 = a1;
      v28 = a3;
      v29 = a2;
LABEL_19:
      v31 = (1 << v30) - v26;
      if ((v31 & 0x80000000) != 0)
        v31 = 0x7FFFFFFF;
      if (v24 > 3)
        goto LABEL_30;
LABEL_22:
      v32 = ((1 << v25) + 1) >> v25;
      v33 = 2;
      if (v32 > 0xFFFA)
        v33 = 4;
      if (v32 > 0xFA)
      {
LABEL_31:
        v35 = ((v24 + v33 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
        if (v31 >= v28)
        {
          v38 = 0u;
          if (v29 <= v31)
            goto LABEL_44;
        }
        else
        {
          if ((((_DWORD)v24 + (_DWORD)v33 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
            v36 = v28 - v31 + 1;
          else
            v36 = 2;
          if (v36 >= 0x10000)
            v37 = 4;
          else
            v37 = 2;
          if (v36 < 0x100)
            v37 = 1;
          if (v36 >= 2)
            v38 = v37;
          else
            v38 = 0;
          if (v29 <= v31)
LABEL_44:
            __asm { BR              X12 }
        }
        if ((_DWORD)v35)
        {
          v39 = ~v31 + v29;
          bzero(v27, v35);
          *v27 = v39;
        }
        __asm { BR              X10 }
      }
LABEL_30:
      v33 = 1;
      goto LABEL_31;
    }
  }
  else
  {
    v26 = 6;
  }
  v27 = a1;
  v28 = a3;
  v29 = a2;
  v30 = 8;
  goto LABEL_19;
}

void sub_1A29C60C0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v2 + v0) = v1;
}

void sub_1A29C60C8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v2 + v1) = 0;
  if (v0)
    JUMPOUT(0x1A29C60D0);
}

void sub_1A29C6210()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v2 + v0) = v1;
}

void sub_1A29C6218()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v2 + v0) = v1;
}

void sub_1A29C6220(uint64_t a1@<X8>)
{
  int v1;
  char v2;
  int v3;
  int v4;
  char v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  *(_WORD *)(v14 + v13) = 0;
  if (!v12)
    return;
  if (a1 > 3)
  {
    v1 = 6;
LABEL_4:
    v2 = 8;
    goto LABEL_5;
  }
  v7 = ((1 << v11) + 1) >> v11;
  if (v7 > 0xFFFA)
  {
LABEL_16:
    v3 = 0x7FFFFFFF;
    if (a1 > 3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v1 = v7 + 5;
  if (v7 <= 0xFA)
    goto LABEL_4;
  v2 = 16;
LABEL_5:
  v3 = (1 << v2) - v1;
  if (v3 < 0)
    goto LABEL_16;
  if (a1 > 3)
  {
LABEL_7:
    v4 = 6;
LABEL_8:
    v5 = 8;
    goto LABEL_9;
  }
LABEL_17:
  v8 = ((1 << v11) + 1) >> v11;
  if (v8 > 0xFFFA)
  {
LABEL_20:
    if (v3 == 0x7FFFFFFF)
    {
LABEL_11:
      if (a1 > 3)
        JUMPOUT(0x1A29C6294);
      JUMPOUT(0x1A29C622CLL);
    }
    goto LABEL_21;
  }
  v4 = v8 + 5;
  if (v8 <= 0xFA)
    goto LABEL_8;
  v5 = 16;
LABEL_9:
  v6 = (1 << v5) - v4;
  if (v6 < 0)
    goto LABEL_20;
  if (v6 == v3)
    goto LABEL_11;
LABEL_21:
  if (a1 > 3)
    goto LABEL_25;
  v9 = ((1 << v11) + 1) >> v11;
  v10 = 2;
  if (v9 > 0xFFFA)
    v10 = 4;
  if (v9 <= 0xFA)
LABEL_25:
    v10 = 1;
  *(_QWORD *)((v14 + a1 + v10 + 7) & 0xFFFFFFFFFFFFF8) = (v12 - 1);
}

void sub_1A29C6388(uint64_t a1@<X8>)
{
  char v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;

  *(_WORD *)(v4 + v3) = 0;
  v5 = -v2;
  if (a1 > 3)
    goto LABEL_4;
  v6 = ((1 << v1) + 1) >> v1;
  if (v6 > 0xFFFA)
  {
    *(_DWORD *)(v4 + a1) = v5;
  }
  else
  {
    if (v6 <= 0xFA)
    {
LABEL_4:
      *(_BYTE *)(v4 + a1) = v5;
      goto LABEL_7;
    }
    *(_WORD *)(v4 + a1) = v5;
  }
LABEL_7:
  JUMPOUT(0x1A29C6428);
}

void sub_1A29C6414()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 + v1) = v0;
}

void sub_1A29C641C()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v2 + v1) = v0;
}

void type metadata accessor for CombineLatestStateMachine()
{
  JUMPOUT(0x1A8589544);
}

void type metadata accessor for CombineLatestStateMachine.State()
{
  JUMPOUT(0x1A8589544);
}

uint64_t sub_1A29C6464()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v7;
  char *v8;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v2 = swift_checkMetadataState();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      v4 = sub_1A2AE39F4();
      if (v5 <= 0x3F)
      {
        swift_getTupleTypeLayout3();
        v8 = &v7;
        swift_getAssociatedTypeWitness();
        type metadata accessor for CombineLatestStateMachine.State.Upstream();
      }
      return v4;
    }
  }
  return v0;
}

id *sub_1A29C66D8(id *a1, id *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  size_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  char *v38;
  id *v39;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  const void *v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  const void *v55;
  unsigned int (*v56)(const void *, uint64_t, uint64_t);
  unsigned int v57;
  id v58;
  id v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  const void *v66;
  unsigned int (*v67)(const void *, uint64_t, uint64_t);
  unsigned int v68;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  const void *v72;
  size_t v73;
  _QWORD *v74;
  _QWORD *v75;
  void *v76;
  const void *v77;
  size_t v78;
  _QWORD *v79;
  _QWORD *v80;
  void *v81;
  const void *v82;
  size_t v83;
  _QWORD *v84;
  _QWORD *v85;
  void *v86;
  const void *v87;
  size_t v88;
  _QWORD *v89;
  _QWORD *v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  size_t __n;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t AssociatedTypeWitness;
  uint64_t v115;
  uint64_t v116;
  size_t v117;
  size_t v118;
  size_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  size_t v124;
  size_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v136;
  unint64_t v137;

  v4 = a3[2];
  v5 = a3[3];
  v6 = a3[4];
  v132 = *(_QWORD *)(v4 - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v129 = *(_DWORD *)(v7 + 80);
  v95 = *(_QWORD *)(v132 + 64) + v129;
  v104 = v7;
  v8 = *(_QWORD *)(v6 - 8);
  v126 = *(_DWORD *)(v8 + 80);
  v101 = *(_QWORD *)(v7 + 64);
  v108 = v8;
  v9 = *(_QWORD *)(v8 + 64);
  if (!*(_DWORD *)(v8 + 84))
    ++v9;
  __n = v9;
  v117 = v9
       + ((v101 + v126 + (v95 & ~(unint64_t)v129)) & ~(unint64_t)v126);
  v98 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v123 = *(_DWORD *)(v10 + 80);
  v105 = v5;
  v116 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v116 - 8);
  v120 = *(_DWORD *)(v11 + 80);
  v12 = v120 | (unint64_t)v123;
  v111 = v6;
  v13 = swift_getAssociatedTypeWitness();
  v14 = v120 | 7;
  v15 = *(_QWORD *)(v13 - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = v16 | 7;
  v18 = v12 | v16 | 7;
  v19 = v123 + 8;
  v20 = v19 & ~(unint64_t)v123;
  if (*(_DWORD *)(v10 + 84))
    v21 = *(_QWORD *)(v10 + 64);
  else
    v21 = *(_QWORD *)(v10 + 64) + 1;
  v22 = v20 + 1;
  v23 = (v20 + 1 + v14 + v21) & ~v14;
  v24 = (v120 + 8) & ~(unint64_t)v120;
  v115 = v11;
  if (*(_DWORD *)(v11 + 84))
    v25 = *(_QWORD *)(v11 + 64);
  else
    v25 = *(_QWORD *)(v11 + 64) + 1;
  v26 = (v24 + 1 + v17 + v25 + v23) & ~v17;
  if (*(_DWORD *)(v15 + 84))
    v27 = *(_QWORD *)(v15 + 64);
  else
    v27 = *(_QWORD *)(v15 + 64) + 1;
  v28 = (((v16 + 8) & ~v16) + v27 + v26 + 1 + (((v12 | v16) + 8) & ~v18) + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = v28 + 8;
  if (v28 + 8 <= v117)
    v29 = v117;
  v30 = ((v28 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v30 <= v29)
    v30 = v29;
  if (v30 <= 8)
    v31 = 8;
  else
    v31 = v30;
  if (v31 > 3)
    goto LABEL_23;
  v32 = ((1 << (8 * v31)) + 1) >> (8 * v31);
  v33 = 2;
  if (v32 > 0xFFFA)
    v33 = 4;
  if (v32 <= 0xFA)
LABEL_23:
    v33 = 1;
  v34 = *(_DWORD *)(v132 + 80);
  v35 = v12 | v16 | ((v126 | v129) | v34) & 0xF8 | 7u;
  if ((unint64_t)(v33 + v31) > 0x18
    || ((v126 | v129 | v123 | v120 | *(_DWORD *)(v15 + 80) | v34) & 0x100000) != 0
    || v35 != 7)
  {
    v38 = (char *)*a2;
    *a1 = *a2;
    v39 = (id *)&v38[(v35 + 16) & ~v35];
    swift_retain();
    return v39;
  }
  if (v31 > 3)
    goto LABEL_36;
  v41 = ((1 << (8 * v31)) + 1) >> (8 * v31);
  if (v41 <= 0xFFFA)
  {
    if (v41 > 0xFA)
    {
      v42 = *(unsigned __int16 *)((char *)a2 + v31);
      if (v42 < 5)
        goto LABEL_45;
      goto LABEL_41;
    }
LABEL_36:
    v42 = *((unsigned __int8 *)a2 + v31);
    if (v42 < 5)
      goto LABEL_45;
LABEL_41:
    if (v31 <= 3)
      v43 = v31;
    else
      v43 = 4;
    __asm { BR              X15 }
  }
  v42 = *(_DWORD *)((char *)a2 + v31);
  if (v42 >= 5)
    goto LABEL_41;
LABEL_45:
  v44 = ~v18;
  v45 = ~(unint64_t)v123;
  v46 = ~v14;
  v47 = ~(unint64_t)v120;
  switch(v42)
  {
    case 0u:
      v39 = a1;
      (*(void (**)(id *, id *, uint64_t))(v132 + 16))(a1, a2, v98);
      v48 = ((unint64_t)a1 + v95) & ~(unint64_t)v129;
      v49 = ((unint64_t)a2 + v95) & ~(unint64_t)v129;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v104 + 16))(v48, v49, v105);
      v50 = (void *)((v48 + v101 + v126) & ~(unint64_t)v126);
      v51 = (const void *)((v49 + v101 + v126) & ~(unint64_t)v126);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v108 + 48))(v51, 1, v111))
      {
        memcpy(v50, v51, __n);
        if (v31 > 3)
          goto LABEL_70;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v108 + 16))(v50, v51, v111);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v50, 0, 1, v111);
        if (v31 > 3)
          goto LABEL_70;
      }
      v68 = ((1 << (8 * v31)) + 1) >> (8 * v31);
      if (v68 > 0xFFFA)
      {
        *(_DWORD *)((char *)a1 + v31) = 0;
        return v39;
      }
      if (v68 > 0xFA)
      {
        *(_WORD *)((char *)a1 + v31) = 0;
        return v39;
      }
LABEL_70:
      *((_BYTE *)a1 + v31) = 0;
      break;
    case 1u:
      v100 = ~v17;
      v103 = ~v16;
      v107 = v120 + 8;
      v110 = v120 | 7;
      v113 = v24 + 1;
      v119 = v25;
      v122 = v16 + 8;
      v125 = v27;
      v128 = ((v16 + 8) & ~v16) + v27 + v26 + 1;
      v131 = *(_QWORD *)(v13 - 8);
      v134 = v13;
      *a1 = *a2;
      v63 = (_QWORD *)(((unint64_t)a1 + v18 + 8) & v44);
      v64 = (_QWORD *)(((unint64_t)a2 + v18 + 8) & v44);
      *v63 = *v64;
      v97 = (unint64_t)v63;
      v65 = (void *)(((unint64_t)v63 + v19) & v45);
      v137 = (unint64_t)v64;
      v66 = (const void *)(((unint64_t)v64 + v19) & v45);
      v67 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
      swift_retain();
      if (v67(v66, 1, AssociatedTypeWitness))
      {
        memcpy(v65, v66, v21);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v65, v66, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v65, 0, 1, AssociatedTypeWitness);
      }
      *((_BYTE *)v65 + v21) = *((_BYTE *)v66 + v21);
      v74 = (_QWORD *)((v97 + v110 + v22 + v21) & v46);
      v75 = (_QWORD *)((v137 + v110 + v22 + v21) & v46);
      *v74 = *v75;
      v76 = (void *)(((unint64_t)v74 + v107) & v47);
      v77 = (const void *)(((unint64_t)v75 + v107) & v47);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v115 + 48))(v77, 1, v116))
      {
        v78 = v119;
        memcpy(v76, v77, v119);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v115 + 16))(v76, v77, v116);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v115 + 56))(v76, 0, 1, v116);
        v78 = v119;
      }
      *((_BYTE *)v76 + v78) = *((_BYTE *)v77 + v78);
      v84 = (_QWORD *)(((unint64_t)v74 + v17 + v113 + v78) & v100);
      v85 = (_QWORD *)(((unint64_t)v75 + v17 + v113 + v78) & v100);
      *v84 = *v85;
      v86 = (void *)(((unint64_t)v84 + v122) & v103);
      v87 = (const void *)(((unint64_t)v85 + v122) & v103);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v131 + 48))(v87, 1, v134))
      {
        v88 = v125;
        memcpy(v86, v87, v125);
        v39 = a1;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v131 + 16))(v86, v87, v134);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v131 + 56))(v86, 0, 1, v134);
        v39 = a1;
        v88 = v125;
      }
      *((_BYTE *)v86 + v88) = *((_BYTE *)v87 + v88);
      *(_QWORD *)(((v97 | 7) + v128) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v137 | 7) + v128) & 0xFFFFFFFFFFFFF8);
      swift_retain();
      if (v31 <= 3)
      {
        v92 = 1;
        v93 = ((1 << (8 * v31)) + 1) >> (8 * v31);
        if (v93 > 0xFFFA)
          goto LABEL_97;
        if (v93 > 0xFA)
          goto LABEL_102;
      }
      *((_BYTE *)v39 + v31) = 1;
      return v39;
    case 2u:
      v99 = ~v17;
      v102 = ~v16;
      v106 = v120 + 8;
      v109 = v120 | 7;
      v112 = v24 + 1;
      v118 = v25;
      v121 = v16 + 8;
      v124 = v27;
      v127 = ((v16 + 8) & ~v16) + v27 + v26 + 1;
      v130 = *(_QWORD *)(v13 - 8);
      v133 = v13;
      *a1 = *a2;
      v52 = (_QWORD *)(((unint64_t)a1 + v18 + 8) & v44);
      v53 = (_QWORD *)(((unint64_t)a2 + v18 + 8) & v44);
      *v52 = *v53;
      v96 = (unint64_t)v52;
      v54 = (void *)(((unint64_t)v52 + v19) & v45);
      v136 = (unint64_t)v53;
      v55 = (const void *)(((unint64_t)v53 + v19) & v45);
      v56 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
      swift_retain();
      if (v56(v55, 1, AssociatedTypeWitness))
      {
        memcpy(v54, v55, v21);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v54, v55, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v54, 0, 1, AssociatedTypeWitness);
      }
      *((_BYTE *)v54 + v21) = *((_BYTE *)v55 + v21);
      v69 = (_QWORD *)((v96 + v109 + v22 + v21) & v46);
      v70 = (_QWORD *)((v136 + v109 + v22 + v21) & v46);
      *v69 = *v70;
      v71 = (void *)(((unint64_t)v69 + v106) & v47);
      v72 = (const void *)(((unint64_t)v70 + v106) & v47);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v115 + 48))(v72, 1, v116))
      {
        v73 = v118;
        memcpy(v71, v72, v118);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v115 + 16))(v71, v72, v116);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v115 + 56))(v71, 0, 1, v116);
        v73 = v118;
      }
      *((_BYTE *)v71 + v73) = *((_BYTE *)v72 + v73);
      v79 = (_QWORD *)(((unint64_t)v69 + v17 + v112 + v73) & v99);
      v80 = (_QWORD *)(((unint64_t)v70 + v17 + v112 + v73) & v99);
      *v79 = *v80;
      v81 = (void *)(((unint64_t)v79 + v121) & v102);
      v82 = (const void *)(((unint64_t)v80 + v121) & v102);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v130 + 48))(v82, 1, v133))
      {
        v83 = v124;
        memcpy(v81, v82, v124);
        v39 = a1;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v130 + 16))(v81, v82, v133);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v130 + 56))(v81, 0, 1, v133);
        v39 = a1;
        v83 = v124;
      }
      *((_BYTE *)v81 + v83) = *((_BYTE *)v82 + v83);
      v89 = (_QWORD *)(((v96 | 7) + v127) & 0xFFFFFFFFFFFFF8);
      v90 = (_QWORD *)(((v136 | 7) + v127) & 0xFFFFFFFFFFFFFFF8);
      *v89 = *v90;
      *(_QWORD *)(((unint64_t)v89 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v90 + 15) & 0xFFFFFFFFFFFFF8);
      swift_retain();
      if (v31 > 3)
        goto LABEL_87;
      v91 = ((1 << (8 * v31)) + 1) >> (8 * v31);
      if (v91 > 0xFFFA)
      {
        v92 = 2;
LABEL_97:
        *(_DWORD *)((char *)v39 + v31) = v92;
      }
      else
      {
        if (v91 <= 0xFA)
        {
LABEL_87:
          *((_BYTE *)v39 + v31) = 2;
          return v39;
        }
        LOWORD(v92) = 2;
LABEL_102:
        *(_WORD *)((char *)v39 + v31) = v92;
      }
      return v39;
    case 3u:
      v39 = a1;
      *a1 = *a2;
      swift_retain();
      if (v31 <= 3)
      {
        v57 = ((1 << (8 * v31)) + 1) >> (8 * v31);
        if (v57 > 0xFFFA)
        {
          *(_DWORD *)((char *)a1 + v31) = 3;
          return v39;
        }
        if (v57 > 0xFA)
        {
          *(_WORD *)((char *)a1 + v31) = 3;
          return v39;
        }
      }
      *((_BYTE *)a1 + v31) = 3;
      return v39;
    case 4u:
      v58 = *a2;
      v59 = *a2;
      v39 = a1;
      *a1 = v58;
      if (v31 <= 3)
      {
        v60 = ((1 << (8 * v31)) + 1) >> (8 * v31);
        if (v60 > 0xFFFA)
        {
          *(_DWORD *)((char *)a1 + v31) = 4;
          return v39;
        }
        if (v60 > 0xFA)
        {
          *(_WORD *)((char *)a1 + v31) = 4;
          return v39;
        }
      }
      *((_BYTE *)a1 + v31) = 4;
      return v39;
    default:
      if (v31 > 3)
        goto LABEL_63;
      v61 = ((1 << (8 * v31)) + 1) >> (8 * v31);
      v62 = 2;
      if (v61 > 0xFFFA)
        v62 = 4;
      if (v61 <= 0xFA)
LABEL_63:
        v62 = 1;
      v39 = a1;
      memcpy(a1, a2, v62 + v31);
      return v39;
  }
  return v39;
}

void sub_1A29C724C(id *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t AssociatedTypeWitness;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;

  v2 = a2[3];
  v54 = *(_QWORD *)(a2[2] - 8);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v55 = *(_QWORD *)(v54 + 64) + v4;
  v52 = v4;
  v5 = v55 & ~v4;
  v57 = v3;
  v6 = a2[4];
  v7 = *(_QWORD *)(v6 - 8);
  v58 = *(_QWORD *)(v3 + 64);
  v53 = *(unsigned __int8 *)(v7 + 80);
  v8 = (v58 + v53 + v5) & ~v53;
  v64 = v7;
  v9 = *(_QWORD *)(v7 + 64);
  if (!*(_DWORD *)(v7 + 84))
    ++v9;
  v77 = v9 + v8;
  v56 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v61 = v2;
  v73 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v73 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v67 = v6;
  v15 = swift_getAssociatedTypeWitness();
  v16 = v11;
  v14 = v13 | 7;
  v17 = *(_QWORD *)(v15 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v18 | 7;
  v20 = v13 | v11 | v18 | 7;
  v21 = v11 + 8;
  v70 = v10;
  v22 = a1;
  v23 = ((v11 + 8) & ~v11) + *(_QWORD *)(v10 + 64);
  if (!*(_DWORD *)(v10 + 84))
    ++v23;
  v24 = v23 + v14 + 1;
  v25 = v13 + 8;
  v72 = v12;
  v26 = ((v13 + 8) & ~v13) + *(_QWORD *)(v12 + 64);
  if (!*(_DWORD *)(v12 + 84))
    ++v26;
  v27 = v26 + v19 + 1;
  v28 = v18 + 8;
  v29 = ((v18 + 8) & ~v18) + *(_QWORD *)(v17 + 64);
  if (!*(_DWORD *)(v17 + 84))
    ++v29;
  v30 = (v29 + ((v27 + (v24 & ~v14)) & ~v19) + 1 + (((v13 | v11 | v18) + 8) & ~v20) + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = v30 + 8;
  if (v30 + 8 <= v77)
    v31 = v77;
  v32 = ((v30 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v32 <= v31)
    v32 = v31;
  if (v32 <= 8)
    v32 = 8;
  if (v32 > 3)
    goto LABEL_18;
  v33 = ((1 << (8 * v32)) + 1) >> (8 * v32);
  if (v33 <= 0xFFFA)
  {
    if (v33 > 0xFA)
    {
      v34 = *(unsigned __int16 *)((char *)a1 + v32);
      if (v34 < 5)
        goto LABEL_27;
      goto LABEL_23;
    }
LABEL_18:
    v34 = *((unsigned __int8 *)a1 + v32);
    if (v34 < 5)
      goto LABEL_27;
LABEL_23:
    if (v32 <= 3)
      v35 = v32;
    else
      v35 = 4;
    __asm { BR              X15 }
  }
  v34 = *(_DWORD *)((char *)a1 + v32);
  if (v34 >= 5)
    goto LABEL_23;
LABEL_27:
  v36 = ~v20;
  v37 = ~v16;
  v38 = ~(v13 | 7);
  v39 = ~v13;
  switch(v34)
  {
    case 0u:
      (*(void (**)(id *, uint64_t))(v54 + 8))(a1, v56);
      v40 = ((unint64_t)a1 + v55) & ~v52;
      (*(void (**)(unint64_t, uint64_t))(v57 + 8))(v40, v61);
      v41 = (v40 + v58 + v53) & ~v53;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v64 + 48))(v41, 1, v67))
        (*(void (**)(unint64_t, uint64_t))(v64 + 8))(v41, v67);
      return;
    case 1u:
      v59 = ~v19;
      v62 = ~v18;
      v42 = v24;
      v65 = v25;
      v68 = v27;
      v75 = v15;
      swift_release();
      v43 = ((unint64_t)v22 + v20 + 8) & v36;
      v44 = (v21 + v43) & v37;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v44, 1, AssociatedTypeWitness))
        (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v44, AssociatedTypeWitness);
      v45 = (v42 + v43) & v38;
      v46 = (v65 + v45) & v39;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v46, 1, v73))
        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v46, v73);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))((v28 + ((v68 + v45) & v59)) & v62, 1, v75))(*(void (**)(uint64_t, uint64_t))(v17 + 8))((v28 + ((v68 + v45) & v59)) & v62, v75);
      goto LABEL_43;
    case 2u:
      v60 = ~v19;
      v63 = ~v18;
      v47 = v24;
      v66 = v25;
      v69 = v27;
      v76 = v15;
      swift_release();
      v48 = ((unint64_t)v22 + v20 + 8) & v36;
      v49 = (v21 + v48) & v37;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v49, 1, AssociatedTypeWitness))
        (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v49, AssociatedTypeWitness);
      v50 = (v47 + v48) & v38;
      v51 = (v66 + v50) & v39;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v51, 1, v73))
        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v51, v73);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))((v28 + ((v69 + v50) & v60)) & v63, 1, v76))(*(void (**)(uint64_t, uint64_t))(v17 + 8))((v28 + ((v69 + v50) & v60)) & v63, v76);
      goto LABEL_43;
    case 3u:
LABEL_43:
      swift_release();
      break;
    case 4u:

      break;
    default:
      return;
  }
}

id *sub_1A29C7844(id *a1, id *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  id *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id *v47;
  void *v48;
  const void *v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  unint64_t v53;
  const void *v54;
  unsigned int (*v55)(const void *, uint64_t, uint64_t);
  unsigned int v56;
  id v57;
  id v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  void *v66;
  const void *v67;
  unsigned int (*v68)(const void *, uint64_t, uint64_t);
  size_t v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  const void *v73;
  size_t v74;
  _QWORD *v75;
  _QWORD *v76;
  void *v77;
  const void *v78;
  size_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unsigned int v82;
  unsigned int v83;
  size_t v84;
  _QWORD *v85;
  _QWORD *v86;
  void *v87;
  const void *v88;
  size_t v89;
  uint64_t v90;
  uint64_t v91;
  size_t v92;
  _QWORD *v93;
  _QWORD *v94;
  void *v95;
  const void *v96;
  uint64_t v97;
  size_t v98;
  unsigned int v99;
  unint64_t v101;
  unint64_t v102;
  size_t __n;
  size_t __na;
  size_t __nb;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  size_t v115;
  size_t v116;
  size_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  size_t v124;
  size_t v125;
  size_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t AssociatedTypeWitness;

  v4 = a3[2];
  v5 = a3[3];
  v6 = a3[4];
  v112 = *(_QWORD *)(v4 - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v115 = *(_QWORD *)(v112 + 64) + v8;
  v106 = v8;
  v9 = v115 & ~v8;
  v121 = v7;
  v10 = *(_QWORD *)(v6 - 8);
  v124 = *(_QWORD *)(v7 + 64);
  v109 = *(unsigned __int8 *)(v10 + 80);
  v11 = (v124 + v109 + v9) & ~v109;
  v130 = v10;
  v12 = *(_QWORD *)(v10 + 64);
  if (!*(_DWORD *)(v10 + 84))
    ++v12;
  __n = v12;
  v140 = v12 + v11;
  v118 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v127 = v5;
  v136 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v136 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = swift_getAssociatedTypeWitness();
  v18 = v13;
  v19 = v16 | 7;
  v20 = *(_QWORD *)(v17 - 8);
  v21 = *(unsigned __int8 *)(v20 + 80);
  v22 = v21 | 7;
  v23 = v16 | v14 | v21 | 7;
  v24 = v14 + 8;
  v25 = (v14 + 8) & ~v14;
  if (*(_DWORD *)(v13 + 84))
    v26 = *(_QWORD *)(v13 + 64);
  else
    v26 = *(_QWORD *)(v13 + 64) + 1;
  v27 = v25 + 1;
  v28 = (v25 + 1 + (v16 | 7) + v26) & ~(v16 | 7);
  v29 = v16 + 8;
  v30 = (v16 + 8) & ~v16;
  v135 = v15;
  if (*(_DWORD *)(v15 + 84))
    v31 = *(_QWORD *)(v15 + 64);
  else
    v31 = *(_QWORD *)(v15 + 64) + 1;
  v32 = v30 + 1;
  v33 = (v30 + 1 + v22 + v31 + v28) & ~v22;
  if (*(_DWORD *)(v20 + 84))
    v34 = *(_QWORD *)(v20 + 64);
  else
    v34 = *(_QWORD *)(v20 + 64) + 1;
  v35 = ((v21 + 8) & ~v21) + v34 + v33 + 1;
  v36 = (v35 + (((v16 | v14 | v21) + 8) & ~v23) + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = v36 + 8;
  if (v36 + 8 <= v140)
    v37 = v140;
  v38 = ((v36 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v38 <= v37)
    v38 = v37;
  if (v38 <= 8)
    v39 = 8;
  else
    v39 = v38;
  if (v39 > 3)
    goto LABEL_22;
  v40 = ((1 << (8 * v39)) + 1) >> (8 * v39);
  if (v40 <= 0xFFFA)
  {
    if (v40 > 0xFA)
    {
      v41 = *(unsigned __int16 *)((char *)a2 + v39);
      goto LABEL_23;
    }
LABEL_22:
    v41 = *((unsigned __int8 *)a2 + v39);
LABEL_23:
    v42 = a2;
    goto LABEL_25;
  }
  v42 = a2;
  v41 = *(_DWORD *)((char *)a2 + v39);
LABEL_25:
  if (v41 >= 5)
  {
    if (v39 <= 3)
      v43 = v39;
    else
      v43 = 4;
    __asm { BR              X15 }
  }
  v44 = ~v23;
  v45 = ~v14;
  v46 = ~v16;
  switch(v41)
  {
    case 0u:
      v47 = a1;
      (*(void (**)(id *, id *, uint64_t))(v112 + 16))(a1, v42, v118);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v121 + 16))(((unint64_t)a1 + v115) & ~v106, ((unint64_t)v42 + v115) & ~v106, v127);
      v48 = (void *)(((((unint64_t)a1 + v115) & ~v106) + v124 + v109) & ~v109);
      v49 = (const void *)(((((unint64_t)v42 + v115) & ~v106) + v124 + v109) & ~v109);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v130 + 48))(v49, 1, v6))
      {
        memcpy(v48, v49, __n);
        if (v39 > 3)
          goto LABEL_67;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v130 + 16))(v48, v49, v6);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v130 + 56))(v48, 0, 1, v6);
        if (v39 > 3)
        {
LABEL_67:
          *((_BYTE *)a1 + v39) = 0;
          return v47;
        }
      }
      v83 = ((1 << (8 * v39)) + 1) >> (8 * v39);
      if (v83 > 0xFFFA)
      {
        *(_DWORD *)((char *)a1 + v39) = 0;
        return v47;
      }
      if (v83 > 0xFA)
      {
        *(_WORD *)((char *)a1 + v39) = 0;
        return v47;
      }
      goto LABEL_67;
    case 1u:
      v132 = ~v19;
      v134 = ~v22;
      __nb = ~v21;
      v108 = v19;
      v139 = v27;
      v111 = v29;
      v114 = v32;
      v117 = v31;
      v120 = v21 + 8;
      v123 = *(_QWORD *)(v17 - 8);
      v126 = v34;
      v129 = v35;
      v142 = v17;
      *a1 = *v42;
      v62 = (char *)a1 + v23;
      v63 = (char *)v42 + v23;
      v64 = (unint64_t)(v62 + 8) & v44;
      v65 = (_QWORD *)((unint64_t)(v63 + 8) & v44);
      *(_QWORD *)v64 = *v65;
      v66 = (void *)((v24 + v64) & v45);
      v102 = (unint64_t)v65;
      v67 = (const void *)(((unint64_t)v65 + v24) & v45);
      v68 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
      swift_retain();
      if (v68(v67, 1, AssociatedTypeWitness))
      {
        memcpy(v66, v67, v26);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(v66, v67, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v66, 0, 1, AssociatedTypeWitness);
      }
      *((_BYTE *)v66 + v26) = *((_BYTE *)v67 + v26);
      v84 = v139 + v26;
      v85 = (_QWORD *)((v64 + v108 + v139 + v26) & v132);
      v86 = (_QWORD *)((v102 + v108 + v84) & v132);
      *v85 = *v86;
      v87 = (void *)(((unint64_t)v85 + v111) & v46);
      v88 = (const void *)(((unint64_t)v86 + v111) & v46);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v135 + 48))(v88, 1, v136))
      {
        memcpy(v87, v88, v117);
        v89 = v117;
        v47 = a1;
        v91 = v120;
        v90 = v123;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v135 + 16))(v87, v88, v136);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v87, 0, 1, v136);
        v47 = a1;
        v91 = v120;
        v90 = v123;
        v89 = v117;
      }
      *((_BYTE *)v87 + v89) = *((_BYTE *)v88 + v89);
      v92 = v114 + v89;
      v93 = (_QWORD *)(((unint64_t)v85 + v22 + v114 + v89) & v134);
      v94 = (_QWORD *)(((unint64_t)v86 + v22 + v92) & v134);
      *v93 = *v94;
      v95 = (void *)(((unint64_t)v93 + v91) & __nb);
      v96 = (const void *)(((unint64_t)v94 + v91) & __nb);
      v97 = v90;
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v90 + 48))(v96, 1, v142))
      {
        v98 = v126;
        memcpy(v95, v96, v126);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v97 + 16))(v95, v96, v142);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v95, 0, 1, v142);
        v98 = v126;
      }
      *((_BYTE *)v95 + v98) = *((_BYTE *)v96 + v98);
      *(_QWORD *)(((v64 | 7) + v129) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v102 | 7) + v129) & 0xFFFFFFFFFFFFF8);
      swift_retain();
      if (v39 > 3)
        goto LABEL_76;
      v99 = ((1 << (8 * v39)) + 1) >> (8 * v39);
      if (v99 > 0xFFFA)
      {
        *(_DWORD *)((char *)v47 + v39) = 1;
        return v47;
      }
      if (v99 <= 0xFA)
LABEL_76:
        *((_BYTE *)v47 + v39) = 1;
      else
        *(_WORD *)((char *)v47 + v39) = 1;
      return v47;
    case 2u:
      v131 = ~v19;
      v133 = ~v22;
      __na = ~v21;
      v107 = v19;
      v138 = v27;
      v110 = v29;
      v113 = v32;
      v116 = v31;
      v119 = v21 + 8;
      v122 = *(_QWORD *)(v17 - 8);
      v125 = v34;
      v128 = v35;
      v141 = v17;
      *a1 = *v42;
      v50 = (_QWORD *)(((unint64_t)a1 + v23 + 8) & v44);
      v51 = (_QWORD *)(((unint64_t)v42 + v23 + 8) & v44);
      *v50 = *v51;
      v101 = (unint64_t)v50;
      v52 = (void *)(((unint64_t)v50 + v24) & v45);
      v53 = (unint64_t)v51;
      v54 = (const void *)(((unint64_t)v51 + v24) & v45);
      v55 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
      swift_retain();
      if (v55(v54, 1, AssociatedTypeWitness))
      {
        memcpy(v52, v54, v26);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(v52, v54, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v52, 0, 1, AssociatedTypeWitness);
      }
      *((_BYTE *)v52 + v26) = *((_BYTE *)v54 + v26);
      v69 = v138 + v26;
      v70 = (_QWORD *)((v101 + v107 + v138 + v26) & v131);
      v71 = (_QWORD *)((v53 + v107 + v69) & v131);
      *v70 = *v71;
      v72 = (void *)(((unint64_t)v70 + v110) & v46);
      v73 = (const void *)(((unint64_t)v71 + v110) & v46);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v135 + 48))(v73, 1, v136))
      {
        v74 = v116;
        memcpy(v72, v73, v116);
        v47 = a1;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v135 + 16))(v72, v73, v136);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v72, 0, 1, v136);
        v47 = a1;
        v74 = v116;
      }
      *((_BYTE *)v72 + v74) = *((_BYTE *)v73 + v74);
      v75 = (_QWORD *)(((unint64_t)v70 + v22 + v113 + v74) & v133);
      v76 = (_QWORD *)(((unint64_t)v71 + v22 + v113 + v74) & v133);
      *v75 = *v76;
      v77 = (void *)(((unint64_t)v75 + v119) & __na);
      v78 = (const void *)(((unint64_t)v76 + v119) & __na);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v122 + 48))(v78, 1, v141))
      {
        v79 = v125;
        memcpy(v77, v78, v125);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v122 + 16))(v77, v78, v141);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v122 + 56))(v77, 0, 1, v141);
        v79 = v125;
      }
      *((_BYTE *)v77 + v79) = *((_BYTE *)v78 + v79);
      v80 = (_QWORD *)(((v101 | 7) + v128) & 0xFFFFFFFFFFFFF8);
      v81 = (_QWORD *)(((v53 | 7) + v128) & 0xFFFFFFFFFFFFFFF8);
      *v80 = *v81;
      *(_QWORD *)(((unint64_t)v80 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v81 + 15) & 0xFFFFFFFFFFFFF8);
      swift_retain();
      if (v39 <= 3)
      {
        v82 = ((1 << (8 * v39)) + 1) >> (8 * v39);
        if (v82 > 0xFFFA)
        {
          *(_DWORD *)((char *)v47 + v39) = 2;
          return v47;
        }
        if (v82 > 0xFA)
        {
          *(_WORD *)((char *)v47 + v39) = 2;
          return v47;
        }
      }
      *((_BYTE *)v47 + v39) = 2;
      return v47;
    case 3u:
      v47 = a1;
      *a1 = *v42;
      swift_retain();
      if (v39 <= 3)
      {
        v56 = ((1 << (8 * v39)) + 1) >> (8 * v39);
        if (v56 > 0xFFFA)
        {
          *(_DWORD *)((char *)a1 + v39) = 3;
          return v47;
        }
        if (v56 > 0xFA)
        {
          *(_WORD *)((char *)a1 + v39) = 3;
          return v47;
        }
      }
      *((_BYTE *)a1 + v39) = 3;
      return v47;
    case 4u:
      v57 = *v42;
      v58 = *v42;
      v47 = a1;
      *a1 = v57;
      if (v39 <= 3)
      {
        v59 = ((1 << (8 * v39)) + 1) >> (8 * v39);
        if (v59 > 0xFFFA)
        {
          *(_DWORD *)((char *)a1 + v39) = 4;
          return v47;
        }
        if (v59 > 0xFA)
        {
          *(_WORD *)((char *)a1 + v39) = 4;
          return v47;
        }
      }
      *((_BYTE *)a1 + v39) = 4;
      return v47;
    default:
      if (v39 > 3)
        goto LABEL_49;
      v60 = ((1 << (8 * v39)) + 1) >> (8 * v39);
      v61 = 2;
      if (v60 > 0xFFFA)
        v61 = 4;
      if (v60 <= 0xFA)
LABEL_49:
        v61 = 1;
      v47 = a1;
      memcpy(a1, v42, v61 + v39);
      return v47;
  }
}

id *sub_1A29C8320(id *a1, id *a2, _QWORD *a3)
{
  id *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  void *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const void *v58;
  unsigned int (*v59)(const void *, uint64_t, uint64_t);
  size_t v60;
  unsigned int v61;
  id v62;
  id v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const void *v71;
  unsigned int (*v72)(const void *, uint64_t, uint64_t);
  unsigned int v73;
  _QWORD *v74;
  _QWORD *v75;
  void *v76;
  const void *v77;
  size_t v78;
  _QWORD *v79;
  _QWORD *v80;
  void *v81;
  const void *v82;
  size_t v83;
  _QWORD *v84;
  _QWORD *v85;
  void *v86;
  const void *v87;
  size_t v88;
  _QWORD *v89;
  _QWORD *v90;
  void *v91;
  const void *v92;
  size_t v93;
  _QWORD *v94;
  _QWORD *v95;
  unsigned int v96;
  __int16 v97;
  unsigned int v98;
  uint64_t v100;
  size_t __n;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  size_t v112;
  uint64_t v113;
  size_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t AssociatedTypeWitness;
  unint64_t v136;
  char v137;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = a3[2];
    v7 = a3[3];
    v6 = a3[4];
    v104 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v105 = *(_QWORD *)(v104 + 64) + v9;
    v128 = v9;
    v10 = v105 & ~v9;
    v107 = v8;
    v11 = *(_QWORD *)(v6 - 8);
    v108 = *(_QWORD *)(v8 + 64);
    v131 = *(unsigned __int8 *)(v11 + 80);
    v12 = (v108 + v131 + v10) & ~v131;
    v115 = v11;
    v13 = *(_QWORD *)(v11 + 64);
    if (!*(_DWORD *)(v11 + 84))
      ++v13;
    __n = v13;
    v136 = v13 + v12;
    v106 = v5;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v15 = *(unsigned __int8 *)(v14 + 80);
    v109 = v7;
    v126 = swift_getAssociatedTypeWitness();
    v16 = *(_QWORD *)(v126 - 8);
    v17 = *(unsigned __int8 *)(v16 + 80);
    v18 = v17 | 7;
    v116 = v6;
    v19 = swift_getAssociatedTypeWitness();
    v20 = v15;
    v125 = v19;
    v21 = *(_QWORD *)(v19 - 8);
    v22 = *(unsigned __int8 *)(v21 + 80);
    v23 = v22 | 7;
    v24 = v17 | v15 | v22 | 7;
    v25 = v15 + 8;
    v133 = v14;
    if (*(_DWORD *)(v14 + 84))
      v26 = *(_QWORD *)(v14 + 64);
    else
      v26 = *(_QWORD *)(v14 + 64) + 1;
    v111 = ((v15 + 8) & ~v15) + v26 + 1;
    v27 = v111 + v18;
    v132 = v17 | 7;
    v28 = (v111 + v18) & ~v18;
    v29 = v17 + 8;
    v127 = v16;
    if (*(_DWORD *)(v16 + 84))
      v30 = *(_QWORD *)(v16 + 64);
    else
      v30 = *(_QWORD *)(v16 + 64) + 1;
    v112 = v30;
    v113 = ((v17 + 8) & ~v17) + v30 + 1;
    v31 = v113 + v23;
    v32 = (v113 + v23 + v28) & ~v23;
    v122 = v22 + 8;
    v123 = *(_QWORD *)(v19 - 8);
    if (*(_DWORD *)(v21 + 84))
      v33 = *(_QWORD *)(v21 + 64);
    else
      v33 = *(_QWORD *)(v21 + 64) + 1;
    v114 = v33;
    v124 = ((v22 + 8) & ~v22) + v33 + v32 + 1;
    v34 = (v124 + (((v17 | v15 | v22) + 8) & ~v24) + 7) & 0xFFFFFFFFFFFFFFF8;
    v35 = v34 + 8;
    v3 = a1;
    if (v34 + 8 <= v136)
      v35 = v136;
    v36 = ((v34 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v36 <= v35)
      v36 = v35;
    if (v36 <= 8)
      v37 = 8;
    else
      v37 = v36;
    v137 = 8 * v37;
    if (v37 <= 3)
    {
      v38 = ((1 << v137) + 1) >> v137;
      if (v38 > 0xFFFA)
      {
        v39 = *(_DWORD *)((char *)a1 + v37);
        goto LABEL_26;
      }
      if (v38 > 0xFA)
      {
        v39 = *(unsigned __int16 *)((char *)a1 + v37);
        goto LABEL_26;
      }
    }
    v39 = *((unsigned __int8 *)a1 + v37);
LABEL_26:
    if (v39 >= 5)
    {
      if (v37 <= 3)
        v40 = v37;
      else
        v40 = 4;
      __asm { BR              X13 }
    }
    v102 = ~v128;
    v103 = ~v131;
    v121 = v24;
    v117 = ~v24;
    v118 = ~v20;
    v119 = ~v132;
    v120 = ~v17;
    v110 = v22 | 7;
    v129 = ~v23;
    v41 = ~v22;
    switch(v39)
    {
      case 0u:
        (*(void (**)(id *, uint64_t))(v104 + 8))(a1, v106);
        (*(void (**)(unint64_t, uint64_t))(v107 + 8))(((unint64_t)a1 + v105) & v102, v109);
        v42 = ((((unint64_t)a1 + v105) & v102) + v108 + v131) & v103;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v115 + 48))(v42, 1, v116))
          (*(void (**)(unint64_t, uint64_t))(v115 + 8))(v42, v116);
        break;
      case 1u:
        swift_release();
        v46 = ((unint64_t)a1 + v121 + 8) & v117;
        v100 = v25;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))((v25 + v46) & v118, 1, AssociatedTypeWitness))(*(void (**)(uint64_t, uint64_t))(v133 + 8))((v25 + v46) & v118, AssociatedTypeWitness);
        v47 = (v27 + v46) & v119;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))((v29 + v47) & v120, 1, v126))
          (*(void (**)(uint64_t, uint64_t))(v16 + 8))((v29 + v47) & v120, v126);
        v48 = (v122 + ((v31 + v47) & v129)) & v41;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v123 + 48))(v48, 1, v125))
          (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v48, v125);
        goto LABEL_49;
      case 2u:
        swift_release();
        v43 = ((unint64_t)a1 + v121 + 8) & v117;
        v100 = v25;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))((v25 + v43) & v118, 1, AssociatedTypeWitness))(*(void (**)(uint64_t, uint64_t))(v133 + 8))((v25 + v43) & v118, AssociatedTypeWitness);
        v44 = (v27 + v43) & v119;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))((v29 + v44) & v120, 1, v126))
          (*(void (**)(uint64_t, uint64_t))(v16 + 8))((v29 + v44) & v120, v126);
        v45 = (v122 + ((v31 + v44) & v129)) & v41;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v123 + 48))(v45, 1, v125))
          (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v45, v125);
LABEL_49:
        swift_release();
        v3 = a1;
        v25 = v100;
        break;
      case 3u:
        swift_release();
        break;
      case 4u:

        break;
      default:
        goto LABEL_50;
    }
    if (v37 > 3)
      goto LABEL_53;
LABEL_50:
    v49 = ((1 << v137) + 1) >> v137;
    if (v49 > 0xFFFA)
    {
      v50 = *(_DWORD *)((char *)a2 + v37);
      if (v50 < 5)
        goto LABEL_62;
      goto LABEL_58;
    }
    if (v49 > 0xFA)
    {
      v50 = *(unsigned __int16 *)((char *)a2 + v37);
      if (v50 < 5)
      {
LABEL_62:
        switch(v50)
        {
          case 0u:
            (*(void (**)(id *, id *, uint64_t))(v104 + 16))(v3, a2, v106);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v107 + 16))(((unint64_t)v3 + v105) & v102, ((unint64_t)a2 + v105) & v102, v109);
            v52 = (void *)(((((unint64_t)v3 + v105) & v102) + v108 + v131) & v103);
            v53 = (const void *)(((((unint64_t)a2 + v105) & v102) + v108 + v131) & v103);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v115 + 48))(v53, 1, v116))
            {
              memcpy(v52, v53, __n);
              if (v37 > 3)
                goto LABEL_87;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v115 + 16))(v52, v53, v116);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v115 + 56))(v52, 0, 1, v116);
              if (v37 > 3)
              {
LABEL_87:
                *((_BYTE *)v3 + v37) = 0;
                return v3;
              }
            }
            v73 = ((1 << v137) + 1) >> v137;
            if (v73 > 0xFFFA)
            {
              *(_DWORD *)((char *)v3 + v37) = 0;
              return v3;
            }
            if (v73 > 0xFA)
            {
              *(_WORD *)((char *)v3 + v37) = 0;
              return v3;
            }
            goto LABEL_87;
          case 1u:
            *v3 = *a2;
            v67 = ((unint64_t)v3 + v121 + 8) & v117;
            v68 = ((unint64_t)a2 + v121 + 8) & v117;
            *(_QWORD *)v67 = *(_QWORD *)v68;
            v69 = v25;
            v70 = (void *)((v25 + v67) & v118);
            v71 = (const void *)((v69 + v68) & v118);
            v72 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v133 + 48);
            swift_retain();
            if (v72(v71, 1, AssociatedTypeWitness))
            {
              memcpy(v70, v71, v26);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v133 + 16))(v70, v71, AssociatedTypeWitness);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v70, 0, 1, AssociatedTypeWitness);
            }
            *((_BYTE *)v70 + v26) = *((_BYTE *)v71 + v26);
            v79 = (_QWORD *)((v67 + v132 + v111) & v119);
            v80 = (_QWORD *)((v68 + v132 + v111) & v119);
            *v79 = *v80;
            v81 = (void *)(((unint64_t)v79 + v29) & v120);
            v82 = (const void *)(((unint64_t)v80 + v29) & v120);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v127 + 48))(v82, 1, v126))
            {
              v83 = v112;
              memcpy(v81, v82, v112);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v127 + 16))(v81, v82, v126);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v81, 0, 1, v126);
              v83 = v112;
            }
            *((_BYTE *)v81 + v83) = *((_BYTE *)v82 + v83);
            v89 = (_QWORD *)(((unint64_t)v79 + v110 + v113) & v129);
            v90 = (_QWORD *)(((unint64_t)v80 + v110 + v113) & v129);
            *v89 = *v90;
            v91 = (void *)(((unint64_t)v89 + v122) & v41);
            v92 = (const void *)(((unint64_t)v90 + v122) & v41);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v123 + 48))(v92, 1, v125))
            {
              v93 = v114;
              memcpy(v91, v92, v114);
              v3 = a1;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v123 + 16))(v91, v92, v125);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v91, 0, 1, v125);
              v3 = a1;
              v93 = v114;
            }
            *((_BYTE *)v91 + v93) = *((_BYTE *)v92 + v93);
            *(_QWORD *)(((v67 | 7) + v124) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v68 | 7) + v124) & 0xFFFFFFFFFFFFF8);
            swift_retain();
            if (v37 <= 3)
            {
              v97 = 1;
              v98 = ((1 << v137) + 1) >> v137;
              if (v98 > 0xFFFA)
              {
                *(_DWORD *)((char *)v3 + v37) = 1;
                return v3;
              }
              if (v98 > 0xFA)
                goto LABEL_119;
            }
            *((_BYTE *)v3 + v37) = 1;
            return v3;
          case 2u:
            *v3 = *a2;
            v54 = ((unint64_t)v3 + v121 + 8) & v117;
            v55 = ((unint64_t)a2 + v121 + 8) & v117;
            *(_QWORD *)v54 = *(_QWORD *)v55;
            v56 = v25;
            v57 = (void *)((v25 + v54) & v118);
            v58 = (const void *)((v56 + v55) & v118);
            v59 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v133 + 48);
            swift_retain();
            if (v59(v58, 1, AssociatedTypeWitness))
            {
              v60 = v26;
              memcpy(v57, v58, v26);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v133 + 16))(v57, v58, AssociatedTypeWitness);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v57, 0, 1, AssociatedTypeWitness);
              v60 = v26;
            }
            *((_BYTE *)v57 + v60) = *((_BYTE *)v58 + v60);
            v74 = (_QWORD *)((v54 + v132 + v111) & v119);
            v75 = (_QWORD *)((v55 + v132 + v111) & v119);
            *v74 = *v75;
            v76 = (void *)(((unint64_t)v74 + v29) & v120);
            v77 = (const void *)(((unint64_t)v75 + v29) & v120);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v127 + 48))(v77, 1, v126))
            {
              v78 = v112;
              memcpy(v76, v77, v112);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v127 + 16))(v76, v77, v126);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v76, 0, 1, v126);
              v78 = v112;
            }
            *((_BYTE *)v76 + v78) = *((_BYTE *)v77 + v78);
            v84 = (_QWORD *)(((unint64_t)v74 + v110 + v113) & v129);
            v85 = (_QWORD *)(((unint64_t)v75 + v110 + v113) & v129);
            *v84 = *v85;
            v86 = (void *)(((unint64_t)v84 + v122) & v41);
            v87 = (const void *)(((unint64_t)v85 + v122) & v41);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v123 + 48))(v87, 1, v125))
            {
              v88 = v114;
              memcpy(v86, v87, v114);
              v3 = a1;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v123 + 16))(v86, v87, v125);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v86, 0, 1, v125);
              v3 = a1;
              v88 = v114;
            }
            *((_BYTE *)v86 + v88) = *((_BYTE *)v87 + v88);
            v94 = (_QWORD *)(((v54 | 7) + v124) & 0xFFFFFFFFFFFFF8);
            v95 = (_QWORD *)(((v55 | 7) + v124) & 0xFFFFFFFFFFFFFFF8);
            *v94 = *v95;
            *(_QWORD *)(((unint64_t)v94 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v95 + 15) & 0xFFFFFFFFFFFFF8);
            swift_retain();
            if (v37 <= 3)
            {
              v96 = ((1 << v137) + 1) >> v137;
              if (v96 > 0xFFFA)
              {
                *(_DWORD *)((char *)v3 + v37) = 2;
                return v3;
              }
              if (v96 > 0xFA)
              {
                v97 = 2;
                goto LABEL_119;
              }
            }
            *((_BYTE *)v3 + v37) = 2;
            return v3;
          case 3u:
            *v3 = *a2;
            swift_retain();
            if (v37 <= 3)
            {
              v61 = ((1 << v137) + 1) >> v137;
              if (v61 > 0xFFFA)
              {
                *(_DWORD *)((char *)v3 + v37) = 3;
                return v3;
              }
              if (v61 > 0xFA)
              {
                v97 = 3;
                goto LABEL_119;
              }
            }
            *((_BYTE *)v3 + v37) = 3;
            return v3;
          case 4u:
            v62 = *a2;
            v63 = *a2;
            *v3 = v62;
            if (v37 > 3)
              goto LABEL_75;
            v64 = ((1 << v137) + 1) >> v137;
            if (v64 > 0xFFFA)
            {
              *(_DWORD *)((char *)v3 + v37) = 4;
              return v3;
            }
            if (v64 > 0xFA)
            {
              v97 = 4;
LABEL_119:
              *(_WORD *)((char *)v3 + v37) = v97;
            }
            else
            {
LABEL_75:
              *((_BYTE *)v3 + v37) = 4;
            }
            return v3;
          default:
            if (v37 > 3)
              goto LABEL_80;
            v65 = ((1 << v137) + 1) >> v137;
            v66 = 2;
            if (v65 > 0xFFFA)
              v66 = 4;
            if (v65 <= 0xFA)
LABEL_80:
              v66 = 1;
            memcpy(v3, a2, v66 + v37);
            return v3;
        }
      }
    }
    else
    {
LABEL_53:
      v50 = *((unsigned __int8 *)a2 + v37);
      if (v50 < 5)
        goto LABEL_62;
    }
LABEL_58:
    if (v37 <= 3)
      v51 = v37;
    else
      v51 = 4;
    __asm { BR              X12 }
  }
  return v3;
}

_QWORD *sub_1A29C9174(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  size_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const void *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const void *v61;
  size_t v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  const void *v66;
  size_t v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  const void *v71;
  size_t v72;
  _QWORD *v73;
  _QWORD *v74;
  unsigned int v75;
  unsigned int v76;
  size_t v77;
  _QWORD *v78;
  _QWORD *v79;
  void *v80;
  const void *v81;
  size_t v82;
  uint64_t v83;
  uint64_t v84;
  size_t v85;
  _QWORD *v86;
  _QWORD *v87;
  void *v88;
  const void *v89;
  uint64_t v90;
  size_t v91;
  unsigned int v92;
  size_t __n;
  size_t __na;
  size_t __nb;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  size_t v109;
  size_t v110;
  size_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  size_t v118;
  size_t v119;
  size_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t AssociatedTypeWitness;
  uint64_t v128;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v4 = a3[2];
  v5 = a3[3];
  v6 = a3[4];
  v103 = *(_QWORD *)(v4 - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v106 = *(_QWORD *)(v103 + 64) + v8;
  v97 = v8;
  v9 = v106 & ~v8;
  v112 = v7;
  v10 = *(_QWORD *)(v6 - 8);
  v115 = *(_QWORD *)(v7 + 64);
  v100 = *(unsigned __int8 *)(v10 + 80);
  v11 = (v115 + v100 + v9) & ~v100;
  v121 = v10;
  v12 = *(_QWORD *)(v10 + 64);
  if (!*(_DWORD *)(v10 + 84))
    ++v12;
  __n = v12;
  v132 = v12 + v11;
  v109 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v118 = v5;
  v126 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v126 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v16 | 7;
  v18 = swift_getAssociatedTypeWitness();
  v19 = v13;
  v20 = *(_QWORD *)(v18 - 8);
  v21 = *(unsigned __int8 *)(v20 + 80);
  v22 = v21 | 7;
  v23 = v16 | v14 | v21 | 7;
  v24 = v14 + 8;
  v25 = (v14 + 8) & ~v14;
  if (*(_DWORD *)(v13 + 84))
    v26 = *(_QWORD *)(v13 + 64);
  else
    v26 = *(_QWORD *)(v13 + 64) + 1;
  v27 = v25 + 1;
  v28 = (v25 + 1 + v17 + v26) & ~v17;
  v29 = v16 + 8;
  v30 = (v16 + 8) & ~v16;
  v128 = v15;
  if (*(_DWORD *)(v15 + 84))
    v31 = *(_QWORD *)(v15 + 64);
  else
    v31 = *(_QWORD *)(v15 + 64) + 1;
  v32 = v30 + 1;
  v33 = (v30 + 1 + v22 + v31 + v28) & ~v22;
  if (*(_DWORD *)(v20 + 84))
    v34 = *(_QWORD *)(v20 + 64);
  else
    v34 = *(_QWORD *)(v20 + 64) + 1;
  v35 = ((v21 + 8) & ~v21) + v34 + v33 + 1;
  v36 = (v35 + (((v16 | v14 | v21) + 8) & ~v23) + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = v36 + 8;
  if (v36 + 8 <= v132)
    v37 = v132;
  v38 = ((v36 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v38 <= v37)
    v38 = v37;
  if (v38 <= 8)
    v39 = 8;
  else
    v39 = v38;
  if (v39 > 3)
    goto LABEL_22;
  v40 = ((1 << (8 * v39)) + 1) >> (8 * v39);
  if (v40 <= 0xFFFA)
  {
    if (v40 > 0xFA)
    {
      v41 = *(unsigned __int16 *)((char *)a2 + v39);
LABEL_23:
      v42 = a2;
      if (v41 >= 5)
      {
LABEL_26:
        if (v39 <= 3)
          v43 = v39;
        else
          v43 = 4;
        __asm { BR              X15 }
      }
      goto LABEL_31;
    }
LABEL_22:
    v41 = *((unsigned __int8 *)a2 + v39);
    goto LABEL_23;
  }
  v42 = a2;
  v41 = *(_DWORD *)((char *)a2 + v39);
  if (v41 >= 5)
    goto LABEL_26;
LABEL_31:
  v44 = ~v23;
  v45 = ~v14;
  v46 = ~v16;
  switch(v41)
  {
    case 0u:
      v47 = a1;
      (*(void (**)(_QWORD *, _QWORD *, size_t))(v103 + 32))(a1, v42, v109);
      (*(void (**)(unint64_t, unint64_t, size_t))(v112 + 32))(((unint64_t)a1 + v106) & ~v97, ((unint64_t)v42 + v106) & ~v97, v118);
      v48 = (void *)(((((unint64_t)a1 + v106) & ~v97) + v115 + v100) & ~v100);
      v49 = (const void *)(((((unint64_t)v42 + v106) & ~v97) + v115 + v100) & ~v100);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v121 + 48))(v49, 1, v6))
      {
        memcpy(v48, v49, __n);
        if (v39 > 3)
          goto LABEL_67;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v121 + 32))(v48, v49, v6);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v48, 0, 1, v6);
        if (v39 > 3)
        {
LABEL_67:
          *((_BYTE *)a1 + v39) = 0;
          return v47;
        }
      }
      v76 = ((1 << (8 * v39)) + 1) >> (8 * v39);
      if (v76 > 0xFFFA)
      {
        *(_DWORD *)((char *)a1 + v39) = 0;
        return v47;
      }
      if (v76 > 0xFA)
      {
        *(_WORD *)((char *)a1 + v39) = 0;
        return v47;
      }
      goto LABEL_67;
    case 1u:
      v125 = ~v17;
      __nb = ~v22;
      v99 = ~v21;
      v131 = v27;
      v102 = v17;
      v105 = v29;
      v108 = v32;
      v111 = v31;
      v114 = v21 + 8;
      v117 = *(_QWORD *)(v18 - 8);
      v120 = v34;
      v123 = v35;
      v134 = v18;
      *a1 = *v42;
      v58 = ((unint64_t)a1 + v23 + 8) & v44;
      v59 = ((unint64_t)v42 + v23 + 8) & v44;
      *(_QWORD *)v58 = *(_QWORD *)v59;
      v60 = (void *)((v24 + v58) & v45);
      v61 = (const void *)((v24 + v59) & v45);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v61, 1, AssociatedTypeWitness))
      {
        memcpy(v60, v61, v26);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v60, v61, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v60, 0, 1, AssociatedTypeWitness);
      }
      *((_BYTE *)v60 + v26) = *((_BYTE *)v61 + v26);
      v77 = v131 + v26;
      v78 = (_QWORD *)((v58 + v102 + v131 + v26) & v125);
      v79 = (_QWORD *)((v59 + v102 + v77) & v125);
      *v78 = *v79;
      v80 = (void *)(((unint64_t)v78 + v105) & v46);
      v81 = (const void *)(((unint64_t)v79 + v105) & v46);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v128 + 48))(v81, 1, v126))
      {
        memcpy(v80, v81, v111);
        v82 = v111;
        v47 = a1;
        v84 = v114;
        v83 = v117;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v128 + 32))(v80, v81, v126);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v128 + 56))(v80, 0, 1, v126);
        v47 = a1;
        v84 = v114;
        v83 = v117;
        v82 = v111;
      }
      *((_BYTE *)v80 + v82) = *((_BYTE *)v81 + v82);
      v85 = v108 + v82;
      v86 = (_QWORD *)(((unint64_t)v78 + v22 + v108 + v82) & __nb);
      v87 = (_QWORD *)(((unint64_t)v79 + v22 + v85) & __nb);
      *v86 = *v87;
      v88 = (void *)(((unint64_t)v86 + v84) & v99);
      v89 = (const void *)(((unint64_t)v87 + v84) & v99);
      v90 = v83;
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v83 + 48))(v89, 1, v134))
      {
        v91 = v120;
        memcpy(v88, v89, v120);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v90 + 32))(v88, v89, v134);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v88, 0, 1, v134);
        v91 = v120;
      }
      *((_BYTE *)v88 + v91) = *((_BYTE *)v89 + v91);
      *(_QWORD *)(((v58 | 7) + v123) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v59 | 7) + v123) & 0xFFFFFFFFFFFFF8);
      if (v39 > 3)
        goto LABEL_76;
      v92 = ((1 << (8 * v39)) + 1) >> (8 * v39);
      if (v92 > 0xFFFA)
      {
        *(_DWORD *)((char *)v47 + v39) = 1;
        return v47;
      }
      if (v92 <= 0xFA)
LABEL_76:
        *((_BYTE *)v47 + v39) = 1;
      else
        *(_WORD *)((char *)v47 + v39) = 1;
      return v47;
    case 2u:
      v124 = ~v17;
      __na = ~v22;
      v98 = ~v21;
      v130 = v27;
      v101 = v17;
      v104 = v29;
      v107 = v32;
      v110 = v31;
      v113 = v21 + 8;
      v116 = *(_QWORD *)(v18 - 8);
      v119 = v34;
      v122 = v35;
      v133 = v18;
      *a1 = *v42;
      v50 = ((unint64_t)a1 + v23 + 8) & v44;
      v51 = ((unint64_t)v42 + v23 + 8) & v44;
      *(_QWORD *)v50 = *(_QWORD *)v51;
      v52 = (void *)((v24 + v50) & v45);
      v53 = (const void *)((v24 + v51) & v45);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v53, 1, AssociatedTypeWitness))
      {
        memcpy(v52, v53, v26);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v52, v53, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v52, 0, 1, AssociatedTypeWitness);
      }
      *((_BYTE *)v52 + v26) = *((_BYTE *)v53 + v26);
      v62 = v130 + v26;
      v63 = (_QWORD *)((v50 + v101 + v130 + v26) & v124);
      v64 = (_QWORD *)((v51 + v101 + v62) & v124);
      *v63 = *v64;
      v65 = (void *)(((unint64_t)v63 + v104) & v46);
      v66 = (const void *)(((unint64_t)v64 + v104) & v46);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v128 + 48))(v66, 1, v126))
      {
        v67 = v110;
        memcpy(v65, v66, v110);
        v47 = a1;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v128 + 32))(v65, v66, v126);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v128 + 56))(v65, 0, 1, v126);
        v47 = a1;
        v67 = v110;
      }
      *((_BYTE *)v65 + v67) = *((_BYTE *)v66 + v67);
      v68 = (_QWORD *)(((unint64_t)v63 + v22 + v107 + v67) & __na);
      v69 = (_QWORD *)(((unint64_t)v64 + v22 + v107 + v67) & __na);
      *v68 = *v69;
      v70 = (void *)(((unint64_t)v68 + v113) & v98);
      v71 = (const void *)(((unint64_t)v69 + v113) & v98);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v116 + 48))(v71, 1, v133))
      {
        v72 = v119;
        memcpy(v70, v71, v119);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 32))(v70, v71, v133);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v70, 0, 1, v133);
        v72 = v119;
      }
      *((_BYTE *)v70 + v72) = *((_BYTE *)v71 + v72);
      v73 = (_QWORD *)(((v50 | 7) + v122) & 0xFFFFFFFFFFFFF8);
      v74 = (_QWORD *)(((v51 | 7) + v122) & 0xFFFFFFFFFFFFFFF8);
      *v73 = *v74;
      *(_QWORD *)(((unint64_t)v73 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v74 + 15) & 0xFFFFFFFFFFFFF8);
      if (v39 <= 3)
      {
        v75 = ((1 << (8 * v39)) + 1) >> (8 * v39);
        if (v75 > 0xFFFA)
        {
          *(_DWORD *)((char *)v47 + v39) = 2;
          return v47;
        }
        if (v75 > 0xFA)
        {
          *(_WORD *)((char *)v47 + v39) = 2;
          return v47;
        }
      }
      *((_BYTE *)v47 + v39) = 2;
      return v47;
    case 3u:
      v47 = a1;
      *a1 = *v42;
      if (v39 <= 3)
      {
        v54 = ((1 << (8 * v39)) + 1) >> (8 * v39);
        if (v54 > 0xFFFA)
        {
          *(_DWORD *)((char *)a1 + v39) = 3;
          return v47;
        }
        if (v54 > 0xFA)
        {
          *(_WORD *)((char *)a1 + v39) = 3;
          return v47;
        }
      }
      *((_BYTE *)a1 + v39) = 3;
      return v47;
    case 4u:
      v47 = a1;
      *a1 = *v42;
      if (v39 <= 3)
      {
        v55 = ((1 << (8 * v39)) + 1) >> (8 * v39);
        if (v55 > 0xFFFA)
        {
          *(_DWORD *)((char *)a1 + v39) = 4;
          return v47;
        }
        if (v55 > 0xFA)
        {
          *(_WORD *)((char *)a1 + v39) = 4;
          return v47;
        }
      }
      *((_BYTE *)a1 + v39) = 4;
      return v47;
    default:
      if (v39 > 3)
        goto LABEL_49;
      v56 = ((1 << (8 * v39)) + 1) >> (8 * v39);
      v57 = 2;
      if (v56 > 0xFFFA)
        v57 = 4;
      if (v56 <= 0xFA)
LABEL_49:
        v57 = 1;
      v47 = a1;
      memcpy(a1, v42, v57 + v39);
      return v47;
  }
}

id *sub_1A29C9C18(id *a1, id *a2, _QWORD *a3)
{
  id *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  size_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  void *v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  size_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const void *v67;
  size_t v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  const void *v75;
  size_t v76;
  _QWORD *v77;
  _QWORD *v78;
  void *v79;
  const void *v80;
  size_t v81;
  _QWORD *v82;
  _QWORD *v83;
  void *v84;
  const void *v85;
  size_t v86;
  char v87;
  _QWORD *v88;
  _QWORD *v89;
  void *v90;
  const void *v91;
  size_t v92;
  char v93;
  _QWORD *v94;
  _QWORD *v95;
  unsigned int v96;
  __int16 v97;
  unsigned int v98;
  uint64_t v100;
  uint64_t v101;
  size_t __n;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  size_t v111;
  uint64_t v112;
  size_t v113;
  uint64_t v114;
  uint64_t v115;
  size_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  id *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v136;
  uint64_t AssociatedTypeWitness;
  uint64_t v138;
  uint64_t v139;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = a3[2];
    v6 = a3[3];
    v7 = a3[4];
    v105 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v106 = *(_QWORD *)(v105 + 64) + v9;
    v133 = v9;
    v10 = v106 & ~v9;
    v108 = v8;
    v11 = *(_QWORD *)(v7 - 8);
    v109 = *(_QWORD *)(v8 + 64);
    v136 = *(unsigned __int8 *)(v11 + 80);
    v12 = (v109 + v136 + v10) & ~v136;
    v117 = v11;
    v13 = *(_QWORD *)(v11 + 64);
    if (!*(_DWORD *)(v11 + 84))
      ++v13;
    __n = v13;
    v130 = v13 + v12;
    v107 = v5;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v15 = *(unsigned __int8 *)(v14 + 80);
    v110 = v6;
    v139 = swift_getAssociatedTypeWitness();
    v132 = v3;
    v16 = *(_QWORD *)(v139 - 8);
    v17 = *(unsigned __int8 *)(v16 + 80);
    v18 = v17 | 7;
    v118 = v7;
    v19 = swift_getAssociatedTypeWitness();
    v129 = v19;
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned __int8 *)(v20 + 80);
    v22 = v21 | 7;
    v23 = v17 | v15 | v21 | 7;
    v123 = v15 + 8;
    if (*(_DWORD *)(v14 + 84))
      v24 = *(_QWORD *)(v14 + 64);
    else
      v24 = *(_QWORD *)(v14 + 64) + 1;
    v111 = v24;
    v112 = ((v15 + 8) & ~v15) + v24 + 1;
    v25 = v112 + v18;
    v138 = v17 | 7;
    v124 = v17 + 8;
    v26 = *(_DWORD *)(v16 + 84);
    v125 = v16;
    v27 = *(_QWORD *)(v16 + 64);
    v3 = v132;
    if (v26)
      v28 = v27;
    else
      v28 = v27 + 1;
    v113 = v28;
    v114 = ((v17 + 8) & ~v17) + v28 + 1;
    v29 = v114 + v22;
    v126 = v21 + 8;
    v128 = *(_QWORD *)(v19 - 8);
    if (*(_DWORD *)(v20 + 84))
      v30 = *(_QWORD *)(v20 + 64);
    else
      v30 = *(_QWORD *)(v20 + 64) + 1;
    v116 = v30;
    v127 = ((v21 + 8) & ~v21) + v30 + ((v114 + v22 + (v25 & ~v18)) & ~v22) + 1;
    v31 = (v127 + (((v17 | v15 | v21) + 8) & ~v23) + 7) & 0xFFFFFFFFFFFFFFF8;
    v32 = v31 + 8;
    if (v31 + 8 <= v130)
      v32 = v130;
    v33 = ((v31 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v33 <= v32)
      v33 = v32;
    if (v33 <= 8)
      v34 = 8;
    else
      v34 = v33;
    v35 = 8 * v34;
    if (v34 > 3)
      goto LABEL_23;
    v36 = ((1 << v35) + 1) >> v35;
    if (v36 > 0xFFFA)
    {
      v37 = *(_DWORD *)((char *)v132 + v34);
    }
    else
    {
      if (v36 <= 0xFA)
      {
LABEL_23:
        v37 = *((unsigned __int8 *)v132 + v34);
        goto LABEL_26;
      }
      v37 = *(unsigned __int16 *)((char *)v132 + v34);
    }
LABEL_26:
    v38 = AssociatedTypeWitness;
    if (v37 >= 5)
    {
      if (v34 <= 3)
        v39 = v34;
      else
        v39 = 4;
      __asm { BR              X13 }
    }
    v103 = ~v133;
    v104 = ~v136;
    v119 = ~v23;
    v120 = ~v15;
    v121 = ~v138;
    v122 = ~v17;
    v115 = v21 | 7;
    v131 = ~v22;
    v134 = ~v21;
    switch(v37)
    {
      case 0u:
        v40 = v17 | v15 | v21 | 7;
        (*(void (**)(id *, uint64_t))(v105 + 8))(v132, v107);
        (*(void (**)(unint64_t, uint64_t))(v108 + 8))(((unint64_t)v132 + v106) & v103, v110);
        v41 = ((((unint64_t)v132 + v106) & v103) + v109 + v136) & v104;
        v42 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v117 + 48))(v41, 1, v118);
        v23 = v40;
        if (v42)
          break;
        (*(void (**)(unint64_t, uint64_t))(v117 + 8))(v41, v118);
        v23 = v40;
        if (v34 > 3)
          goto LABEL_56;
        goto LABEL_54;
      case 1u:
        v47 = v17 | v15 | v21 | 7;
        swift_release();
        v100 = v47;
        v48 = ((unint64_t)v132 + v47 + 8) & v119;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))((v123 + v48) & v120, 1, AssociatedTypeWitness))(*(void (**)(uint64_t, uint64_t))(v14 + 8))((v123 + v48) & v120, AssociatedTypeWitness);
        v101 = v14;
        v49 = (v25 + v48) & v121;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))((v124 + v49) & v122, 1, v139))
          (*(void (**)(uint64_t, uint64_t))(v125 + 8))((v124 + v49) & v122, v139);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))((v126 + ((v29 + v49) & v131)) & v134, 1, v129))(*(void (**)(uint64_t, uint64_t))(v128 + 8))((v126 + ((v29 + v49) & v131)) & v134, v129);
        goto LABEL_53;
      case 2u:
        v43 = v17 | v15 | v21 | 7;
        swift_release();
        v100 = v43;
        v44 = ((unint64_t)v132 + v43 + 8) & v119;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))((v123 + v44) & v120, 1, AssociatedTypeWitness))(*(void (**)(uint64_t, uint64_t))(v14 + 8))((v123 + v44) & v120, AssociatedTypeWitness);
        v101 = v14;
        v45 = (v25 + v44) & v121;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))((v124 + v45) & v122, 1, v139))
          (*(void (**)(uint64_t, uint64_t))(v125 + 8))((v124 + v45) & v122, v139);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))((v126 + ((v29 + v45) & v131)) & v134, 1, v129))(*(void (**)(uint64_t, uint64_t))(v128 + 8))((v126 + ((v29 + v45) & v131)) & v134, v129);
LABEL_53:
        swift_release();
        v38 = AssociatedTypeWitness;
        v23 = v100;
        v14 = v101;
        if (v34 <= 3)
          goto LABEL_54;
        goto LABEL_56;
      case 3u:
        v46 = v17 | v15 | v21 | 7;
        swift_release();
        goto LABEL_44;
      case 4u:
        v46 = v17 | v15 | v21 | 7;

LABEL_44:
        v23 = v46;
        break;
      default:
        break;
    }
    if (v34 > 3)
    {
LABEL_56:
      v51 = *((unsigned __int8 *)a2 + v34);
      if (v51 >= 5)
        goto LABEL_57;
      goto LABEL_62;
    }
LABEL_54:
    v50 = ((1 << v35) + 1) >> v35;
    if (v50 > 0xFFFA)
    {
      v51 = *(_DWORD *)((char *)a2 + v34);
      if (v51 < 5)
        goto LABEL_62;
    }
    else
    {
      if (v50 <= 0xFA)
        goto LABEL_56;
      v51 = *(unsigned __int16 *)((char *)a2 + v34);
      if (v51 < 5)
      {
LABEL_62:
        switch(v51)
        {
          case 0u:
            (*(void (**)(id *, id *, uint64_t))(v105 + 32))(v132, a2, v107);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v108 + 32))(((unint64_t)v132 + v106) & v103, ((unint64_t)a2 + v106) & v103, v110);
            v53 = (void *)(((((unint64_t)v132 + v106) & v103) + v109 + v136) & v104);
            v54 = (const void *)(((((unint64_t)a2 + v106) & v103) + v109 + v136) & v104);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v117 + 48))(v54, 1, v118))
            {
              memcpy(v53, v54, __n);
              if (v34 > 3)
                goto LABEL_89;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v117 + 32))(v53, v54, v118);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v53, 0, 1, v118);
              if (v34 > 3)
              {
LABEL_89:
                *((_BYTE *)v132 + v34) = 0;
                return v3;
              }
            }
            v71 = ((1 << v35) + 1) >> v35;
            if (v71 > 0xFFFA)
            {
              *(_DWORD *)((char *)v132 + v34) = 0;
              return v3;
            }
            if (v71 > 0xFA)
            {
              *(_WORD *)((char *)v132 + v34) = 0;
              return v3;
            }
            goto LABEL_89;
          case 1u:
            *v132 = *a2;
            v63 = v14;
            v64 = ((unint64_t)v132 + v23 + 8) & v119;
            v65 = ((unint64_t)a2 + v23 + 8) & v119;
            *(_QWORD *)v64 = *(_QWORD *)v65;
            v66 = (void *)((v123 + v64) & v120);
            v67 = (const void *)((v123 + v65) & v120);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v63 + 48))(v67, 1, v38))
            {
              v68 = v111;
              memcpy(v66, v67, v111);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v63 + 32))(v66, v67, v38);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v66, 0, 1, v38);
              v68 = v111;
            }
            *((_BYTE *)v66 + v68) = *((_BYTE *)v67 + v68);
            v77 = (_QWORD *)((v64 + v138 + v112) & v121);
            v78 = (_QWORD *)((v65 + v138 + v112) & v121);
            *v77 = *v78;
            v79 = (void *)(((unint64_t)v77 + v124) & v122);
            v80 = (const void *)(((unint64_t)v78 + v124) & v122);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v125 + 48))(v80, 1, v139))
            {
              v81 = v113;
              memcpy(v79, v80, v113);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v125 + 32))(v79, v80, v139);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v79, 0, 1, v139);
              v81 = v113;
            }
            *((_BYTE *)v79 + v81) = *((_BYTE *)v80 + v81);
            v88 = (_QWORD *)(((unint64_t)v77 + v115 + v114) & v131);
            v89 = (_QWORD *)(((unint64_t)v78 + v115 + v114) & v131);
            *v88 = *v89;
            v90 = (void *)(((unint64_t)v88 + v126) & v134);
            v91 = (const void *)(((unint64_t)v89 + v126) & v134);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v128 + 48))(v91, 1, v129))
            {
              v92 = v116;
              memcpy(v90, v91, v116);
              v93 = 8 * v34;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v128 + 32))(v90, v91, v129);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v128 + 56))(v90, 0, 1, v129);
              v93 = 8 * v34;
              v92 = v116;
            }
            *((_BYTE *)v90 + v92) = *((_BYTE *)v91 + v92);
            *(_QWORD *)(((v64 | 7) + v127) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v65 | 7) + v127) & 0xFFFFFFFFFFFFF8);
            if (v34 <= 3)
            {
              v97 = 1;
              v98 = ((1 << v93) + 1) >> v93;
              if (v98 > 0xFFFA)
              {
                *(_DWORD *)((char *)v132 + v34) = 1;
                return v3;
              }
              if (v98 > 0xFA)
                goto LABEL_121;
            }
            *((_BYTE *)v132 + v34) = 1;
            return v3;
          case 2u:
            *v132 = *a2;
            v55 = v14;
            v56 = ((unint64_t)v132 + v23 + 8) & v119;
            v57 = ((unint64_t)a2 + v23 + 8) & v119;
            *(_QWORD *)v56 = *(_QWORD *)v57;
            v58 = (void *)((v123 + v56) & v120);
            v59 = (const void *)((v123 + v57) & v120);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v55 + 48))(v59, 1, v38))
            {
              v60 = v111;
              memcpy(v58, v59, v111);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v55 + 32))(v58, v59, v38);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v58, 0, 1, v38);
              v60 = v111;
            }
            *((_BYTE *)v58 + v60) = *((_BYTE *)v59 + v60);
            v72 = (_QWORD *)((v56 + v138 + v112) & v121);
            v73 = (_QWORD *)((v57 + v138 + v112) & v121);
            *v72 = *v73;
            v74 = (void *)(((unint64_t)v72 + v124) & v122);
            v75 = (const void *)(((unint64_t)v73 + v124) & v122);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v125 + 48))(v75, 1, v139))
            {
              v76 = v113;
              memcpy(v74, v75, v113);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v125 + 32))(v74, v75, v139);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v74, 0, 1, v139);
              v76 = v113;
            }
            *((_BYTE *)v74 + v76) = *((_BYTE *)v75 + v76);
            v82 = (_QWORD *)(((unint64_t)v72 + v115 + v114) & v131);
            v83 = (_QWORD *)(((unint64_t)v73 + v115 + v114) & v131);
            *v82 = *v83;
            v84 = (void *)(((unint64_t)v82 + v126) & v134);
            v85 = (const void *)(((unint64_t)v83 + v126) & v134);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v128 + 48))(v85, 1, v129))
            {
              v86 = v116;
              memcpy(v84, v85, v116);
              v87 = 8 * v34;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v128 + 32))(v84, v85, v129);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v128 + 56))(v84, 0, 1, v129);
              v87 = 8 * v34;
              v86 = v116;
            }
            *((_BYTE *)v84 + v86) = *((_BYTE *)v85 + v86);
            v94 = (_QWORD *)(((v56 | 7) + v127) & 0xFFFFFFFFFFFFF8);
            v95 = (_QWORD *)(((v57 | 7) + v127) & 0xFFFFFFFFFFFFFFF8);
            *v94 = *v95;
            *(_QWORD *)(((unint64_t)v94 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v95 + 15) & 0xFFFFFFFFFFFFF8);
            if (v34 <= 3)
            {
              v96 = ((1 << v87) + 1) >> v87;
              if (v96 > 0xFFFA)
              {
                *(_DWORD *)((char *)v132 + v34) = 2;
                return v3;
              }
              if (v96 > 0xFA)
              {
                v97 = 2;
                goto LABEL_121;
              }
            }
            *((_BYTE *)v132 + v34) = 2;
            return v3;
          case 3u:
            *v132 = *a2;
            if (v34 <= 3)
            {
              v61 = ((1 << v35) + 1) >> v35;
              if (v61 > 0xFFFA)
              {
                *(_DWORD *)((char *)v132 + v34) = 3;
                return v3;
              }
              if (v61 > 0xFA)
              {
                v97 = 3;
                goto LABEL_121;
              }
            }
            *((_BYTE *)v132 + v34) = 3;
            return v3;
          case 4u:
            *v132 = *a2;
            if (v34 > 3)
              goto LABEL_75;
            v62 = ((1 << v35) + 1) >> v35;
            if (v62 > 0xFFFA)
            {
              *(_DWORD *)((char *)v132 + v34) = 4;
              return v3;
            }
            if (v62 > 0xFA)
            {
              v97 = 4;
LABEL_121:
              *(_WORD *)((char *)v132 + v34) = v97;
            }
            else
            {
LABEL_75:
              *((_BYTE *)v132 + v34) = 4;
            }
            return v3;
          default:
            if (v34 > 3)
              goto LABEL_84;
            v69 = ((1 << v35) + 1) >> v35;
            v70 = 2;
            if (v69 > 0xFFFA)
              v70 = 4;
            if (v69 <= 0xFA)
LABEL_84:
              v70 = 1;
            memcpy(v132, a2, v70 + v34);
            return v3;
        }
      }
    }
LABEL_57:
    if (v34 <= 3)
      v52 = v34;
    else
      v52 = 4;
    __asm { BR              X12 }
  }
  return v3;
}

